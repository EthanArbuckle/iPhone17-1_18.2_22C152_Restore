uint64_t FigCaptureWritePackedValueForModuleAndCalibrationValidationStatusesFromMetadata(uint64_t result, _DWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  if (!result
    || (v3 = (void *)result,
        v4 = (void *)[(id)result objectForKeyedSubscript:*MEMORY[0x1E4F53200]],
        v5 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F53238]],
        ![v4 count])
    && (result = [v5 count]) == 0)
  {
LABEL_11:
    v18 = 0;
    if (!a2) {
      return result;
    }
    goto LABEL_12;
  }
  v6 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", @"RearCameraAssembly"), "intValue");
  v7 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", @"FrontCameraAssembly"), "intValue");
  v8 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", 0x1EFA76E20), "intValue");
  v9 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", @"CmPMValidationStatus"), "intValue");
  v10 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", @"FCClValidationStatus"), "intValue");
  if (v6 <= 1 && v7 < 2)
  {
    result = 0;
    goto LABEL_11;
  }
  v12 = v10;
  v13 = BWShiftedValueWithBitmask(0, 0xFu);
  v14 = BWShiftedValueWithBitmask(v6, 0xF0u) | v13;
  v15 = BWShiftedValueWithBitmask(v7, 0xF00u);
  v16 = v14 | v15 | BWShiftedValueWithBitmask(v8, 0xF000u);
  v17 = BWShiftedValueWithBitmask(v9, 0xF0000u);
  v18 = v16 | v17 | BWShiftedValueWithBitmask(v12, 0xF00000u);
  result = 1;
  if (a2) {
LABEL_12:
  }
    *a2 = v18;
  return result;
}

uint64_t FigCaptureMetadataUtilitiesGetIrisAssetIdentifierForSettingsAndSampleBuffer(void *a1, const void *a2)
{
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  if (objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0), "objectForKeyedSubscript:", *MEMORY[0x1E4F53F30]), "intValue") == 4)v4 = objc_msgSend(a1, "movieLevelMetadataForOriginalImage"); {
  else
  }
    v4 = objc_msgSend((id)objc_msgSend(a1, "movieRecordingSettings"), "movieLevelMetadata");
  uint64_t v6 = *MEMORY[0x1E4F34498];
  return fcmu_extractIdentiferFromMetadata(v4, v6);
}

uint64_t fcmu_extractIdentiferFromMetadata(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = fcmu_indexInMetadataArrayOfQuickTimeMetadataDictionary(a1);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v6 = (void *)[a1 objectAtIndexedSubscript:v4];
  v7 = (void *)[v6 objectForKeyedSubscript:*MEMORY[0x1E4F33070]];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t result = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void *)v14;
    uint64_t v10 = *MEMORY[0x1E4F33020];
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v7);
        }
        v12 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v12, "objectForKeyedSubscript:", v10), "isEqual:", a2)) {
          return [v12 objectForKeyedSubscript:*MEMORY[0x1E4F33060]];
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      uint64_t result = 0;
      if (v8) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t FigCaptureMetadataUtilitiesGetStillImageMetadataInSettingsForSampleBuffer(void *a1, const void *a2)
{
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  if (objc_msgSend((id)CMGetAttachment(a2, @"StillImageProcessingFlags", 0), "unsignedIntValue"))
  {
    return [a1 metadataForOriginalImage];
  }
  else
  {
    return [a1 metadata];
  }
}

uint64_t FigCaptureMetadataUtilitiesUpdateMetadataForStillImageCrop(void *a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9, double a10, double a11)
{
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
  {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
    if (a1) {
      goto LABEL_3;
    }
LABEL_79:
    fig_log_get_emitter();
    return FigDebugAssert3();
  }
  if (!a1) {
    goto LABEL_79;
  }
LABEL_3:
  if (!FigCaptureVideoDimensionsAreValid(a2) || !FigCaptureVideoDimensionsAreValid(a3)) {
    goto LABEL_79;
  }
  double v115 = a11;
  v122.double width = (double)(int)a2;
  v122.double height = (double)SHIDWORD(a2);
  double r2 = (double)(int)a3;
  v129.origin.CGFloat x = a4;
  v129.origin.CGFloat y = a5;
  v129.size.double width = a6;
  v129.size.double height = a7;
  BOOL IsNull = CGRectIsNull(v129);
  double v22 = a10;
  if (IsNull) {
    double v23 = 0.0;
  }
  else {
    double v23 = a4;
  }
  if (IsNull) {
    double v24 = 0.0;
  }
  else {
    double v24 = a5;
  }
  if (IsNull) {
    double v25 = (double)(int)a2;
  }
  else {
    double v25 = a6;
  }
  CGFloat y = 0.0;
  if (IsNull) {
    double v27 = (double)SHIDWORD(a2);
  }
  else {
    double v27 = a7;
  }
  CGFloat v119 = v27;
  CGFloat v120 = v23;
  double v28 = a8;
  double v29 = a9;
  double v30 = v115;
  BOOL v31 = CGRectIsNull(*(CGRect *)(&v22 - 2));
  if (v31) {
    double v32 = 0.0;
  }
  else {
    double v32 = a8;
  }
  if (v31) {
    double v33 = 0.0;
  }
  else {
    double v33 = a9;
  }
  if (v31) {
    double v34 = (double)(int)a3;
  }
  else {
    double v34 = a10;
  }
  memset(&v128.c, 0, 32);
  if (v31) {
    double v35 = (double)SHIDWORD(a3);
  }
  else {
    double v35 = v115;
  }
  *(_OWORD *)&v128.a = 0uLL;
  FigCaptureComputeAffineTransformFromSourceAndDestRects((uint64_t)&v128, v120, v24, v25, v119, v32, v33, v34, v35);
  memset(&v127, 0, sizeof(v127));
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    CGFloat y = v127.origin.y;
    CGFloat x = v127.origin.x;
    double height = v127.size.height;
    double width = v127.size.width;
  }
  else
  {
    v127.CGPoint origin = 0uLL;
    double height = (double)SHIDWORD(a2);
    double width = (double)(int)a2;
    CGFloat x = 0.0;
    v127.CGSize size = v122;
  }
  CGFloat v39 = y;
  v143.origin.CGFloat x = v120;
  CGFloat v116 = v24;
  v143.origin.CGFloat y = v24;
  CGFloat v113 = v25;
  v143.size.double width = v25;
  v143.size.double height = v119;
  CGRect v130 = CGRectIntersection(*(CGRect *)&x, v143);
  CGAffineTransform v126 = v128;
  CGRect v131 = CGRectApplyAffineTransform(v130, &v126);
  v144.origin.CGFloat x = 0.0;
  v144.origin.CGFloat y = 0.0;
  v144.size.double width = (double)(int)a3;
  double recta = (double)SHIDWORD(a3);
  v144.size.double height = (double)SHIDWORD(a3);
  CGRect v132 = CGRectIntersection(v131, v144);
  CGFloat v40 = v132.origin.x;
  CGFloat v41 = v132.origin.y;
  CGFloat v42 = v132.size.width;
  CGFloat v43 = v132.size.height;
  FigCFDictionarySetCGRect();
  CGPoint origin = v127.origin;
  CGSize size = v127.size;
  if (CGRectIsEmpty(v127))
  {
    double v114 = 0.0;
    double v46 = 0.0;
    double v47 = 1.0;
    double v48 = 1.0;
  }
  else
  {
    double v114 = origin.x / v122.width;
    double v46 = origin.y / v122.height;
    double v47 = size.width / v122.width;
    double v48 = size.height / v122.height;
  }
  CGAffineTransform v126 = v128;
  CGAffineTransformInvert(&v125, &v126);
  v133.origin.CGFloat x = v40;
  v133.origin.CGFloat y = v41;
  v133.size.double width = v42;
  v133.size.double height = v43;
  CGRect v134 = CGRectApplyAffineTransform(v133, &v125);
  double v49 = v134.origin.x;
  double v50 = v134.origin.y;
  double v51 = v134.size.width;
  double v52 = v134.size.height;
  IsEmptCGFloat y = CGRectIsEmpty(v134);
  double v54 = 0.0;
  double v55 = 0.0;
  double v56 = 1.0;
  double v57 = 1.0;
  if (!IsEmpty)
  {
    double v54 = v49 / v122.width;
    double v55 = v50 / v122.height;
    double v57 = v51 / v122.width;
    double v56 = v52 / v122.height;
  }
  double v58 = v57 / v47;
  double v59 = v56 / v48;
  double v60 = (v54 - v114) / v47;
  CGSize v124 = (CGSize)0;
  uint64_t v61 = *MEMORY[0x1E4F54358];
  double v62 = (v55 - v46) / v48;
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    double v63 = 0.0;
    double v64 = 0.0;
  }
  else
  {
    double v63 = (double)SHIDWORD(a2);
    double v64 = (double)(int)a2;
    CGSize v124 = v122;
  }
  double v65 = v58 * v64;
  double v66 = v59 * v63;
  double v67 = v64 * v60 + 0.0;
  double v68 = v63 * v62 + 0.0;
  uint64_t v69 = *MEMORY[0x1E4F53E98];
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53E98]), "floatValue");
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v69), "floatValue");
  if (*(float *)&v70 != 0.0)
  {
    float v71 = v124.width;
    if (v71 != 0.0)
    {
      float v72 = v124.height;
      if (v72 != 0.0)
      {
        float v73 = v65;
        float v74 = v66;
        if (v73 != v71 || v74 != v72)
        {
          *(float *)&double v70 = *(float *)&v70
                         * (float)(sqrtf((float)(v72 * v72) + (float)(v71 * v71))
                                 / sqrtf((float)(v74 * v74) + (float)(v73 * v73)));
          objc_msgSend(a1, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v70), v69);
        }
      }
    }
  }
  v135.origin.CGFloat x = v67;
  v135.origin.CGFloat y = v68;
  v135.size.double width = v65;
  v135.size.double height = v66;
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v135);
  [a1 setObject:(id)CFMakeCollectable(DictionaryRepresentation) forKeyedSubscript:v61];
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v69), "floatValue");
  uint64_t v76 = *MEMORY[0x1E4F53260];
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    double v77 = 0.0;
    double v78 = 0.0;
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    double v77 = 1.0;
    double v78 = 1.0;
  }
  v136.origin.CGFloat x = 0.0;
  v136.origin.CGFloat y = 0.0;
  v136.size.double width = v78;
  v136.size.double height = v77;
  BOOL v84 = CGRectIsEmpty(v136);
  double v85 = 0.0 * v122.width;
  double v86 = v78 * v122.width;
  double v87 = 0.0 * v122.height;
  double v88 = v77 * v122.height;
  if (v84)
  {
    double v85 = 0.0;
    double v87 = 0.0;
    double v86 = (double)(int)a2;
    double v88 = (double)SHIDWORD(a2);
  }
  CGAffineTransform v126 = v128;
  CGRect v137 = CGRectApplyAffineTransform(*(CGRect *)&v85, &v126);
  double v89 = v137.origin.x;
  double v90 = v137.origin.y;
  double v91 = v137.size.width;
  double v92 = v137.size.height;
  BOOL v93 = CGRectIsEmpty(v137);
  double v94 = 0.0;
  double v95 = 0.0;
  double v96 = 1.0;
  double v97 = 1.0;
  if (!v93)
  {
    double v94 = v89 / r2;
    double v95 = v90 / recta;
    double v96 = v91 / r2;
    double v97 = v92 / recta;
  }
  v145.origin.CGFloat x = 0.0;
  v145.origin.CGFloat y = 0.0;
  v145.size.double width = 1.0;
  v145.size.double height = 1.0;
  CGRect v138 = CGRectIntersection(*(CGRect *)&v94, v145);
  double v98 = 0.01 / recta;
  if (fabs(v138.origin.x) >= 0.01 / r2) {
    double v99 = v138.origin.x;
  }
  else {
    double v99 = 0.0;
  }
  if (fabs(v138.origin.y) >= v98) {
    double v100 = v138.origin.y;
  }
  else {
    double v100 = 0.0;
  }
  double v101 = vabdd_f64(1.0, v138.origin.x + v138.size.width);
  double v102 = 1.0 - v138.origin.x;
  if (v101 >= 0.01 / r2) {
    double v103 = v138.size.width;
  }
  else {
    double v103 = v102;
  }
  double v104 = vabdd_f64(1.0, v138.origin.y + v138.size.height);
  double v105 = 1.0 - v138.origin.y;
  if (v104 >= v98) {
    double v106 = v138.size.height;
  }
  else {
    double v106 = v105;
  }
  v146.origin.CGFloat x = 0.0;
  v146.origin.CGFloat y = 0.0;
  v146.size.double width = 1.0;
  v146.size.double height = 1.0;
  v139.origin.CGFloat x = v99;
  v139.origin.CGFloat y = v100;
  v139.size.double width = v103;
  v139.size.double height = v106;
  if (CGRectEqualToRect(v139, v146)) {
    [a1 removeObjectForKey:v76];
  }
  else {
    FigCFDictionarySetCGRect();
  }
  v123.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v123.CGSize size = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  uint64_t v107 = *MEMORY[0x1E4F533E8];
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    v147.origin.CGFloat x = v120;
    v147.origin.CGFloat y = v116;
    v147.size.double width = v113;
    v147.size.double height = v119;
    CGRect v140 = CGRectIntersection(v123, v147);
    CGAffineTransform v126 = v128;
    CGRect v141 = CGRectApplyAffineTransform(v140, &v126);
    v148.origin.CGFloat x = 0.0;
    v148.origin.CGFloat y = 0.0;
    v148.size.double width = r2;
    v148.size.double height = recta;
    CGRect v142 = CGRectIntersection(v141, v148);
    v149.origin.CGFloat x = 0.0;
    v149.origin.CGFloat y = 0.0;
    v149.size.double width = r2;
    v149.size.double height = recta;
    if (CGRectEqualToRect(v142, v149)) {
      [a1 removeObjectForKey:v107];
    }
    else {
      FigCFDictionarySetCGRect();
    }
  }
  double d = v128.d;
  uint64_t v109 = *MEMORY[0x1E4F53DE8];
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DE8]), "doubleValue");
  if (v110 == 0.0) {
    double v110 = 1.0;
  }
  if (d * v110 == 1.0) {
    uint64_t v111 = 0;
  }
  else {
    uint64_t v111 = objc_msgSend(NSNumber, "numberWithDouble:");
  }
  return [a1 setObject:v111 forKeyedSubscript:v109];
}

double FigCaptureMetadataUtilitiesRectDenormalizedToRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a5 + a7 * a1;
}

void *FigCaptureMetadataUtilitiesCreateFacesArrayForCropRect(void *a1, double a2, double a3, double a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:0];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v9 = [a1 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(a1);
        }
        long long v13 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
          long long v14 = (void *)[v13 mutableCopy];
          FigCFDictionarySetCGRect();
          if (FigCFDictionaryGetCGRectIfPresent())
          {
            FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
            FigCFDictionarySetCGRect();
          }
          if (FigCFDictionaryGetCGRectIfPresent())
          {
            FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
            FigCFDictionarySetCGRect();
          }
          objc_msgSend(v8, "addObject:", v14, 0, 0, 0, 0);
        }
      }
      uint64_t v10 = [a1 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v10);
  }
  return v8;
}

void FigCaptureMetadataUtilitiesUpdateDetectedObjectsInfoAndFacesArrayWithCropRect(void *a1, double a2, double a3, double a4, double a5)
{
  if (a1)
  {
    if (!CGRectIsNull(*(CGRect *)&a2))
    {
      uint64_t v9 = *MEMORY[0x1E4F53DC0];
      uint64_t v10 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]];
      if (v10)
      {
        FacesArrayForCropRect = FigCaptureMetadataUtilitiesCreateFacesArrayForCropRect(v10, a2, a3, a4);
        [a1 setObject:FacesArrayForCropRect forKeyedSubscript:v9];
      }
      uint64_t v12 = *MEMORY[0x1E4F53DC8];
      long long v13 = (const void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
      if (v13)
      {
        id DetectedObjectsInfoForCropRect = FigCaptureMetadataUtilitiesCreateDetectedObjectsInfoForCropRect(v13, a2, a3, a4);
        [a1 setObject:DetectedObjectsInfoForCropRect forKeyedSubscript:v12];
      }
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
}

uint64_t FigCaptureMetadataUtilitiesUpdateDepthDataMetadataForStillImageCropAndScale(void *a1, double a2, double a3, double a4, double a5, double a6)
{
  CGSize v13 = (CGSize)*MEMORY[0x1E4F1DB30];
  long long v43 = 0u;
  CGSize size = v13;
  memset(v42, 0, sizeof(v42));
  CGPoint point = (CGPoint)*MEMORY[0x1E4F1DAD8];
  long long v14 = (void *)MEMORY[0x1E4F55880];
  long long v15 = (void *)MEMORY[0x1E4F55878];
  long long v16 = (void *)MEMORY[0x1E4F55890];
  if (!a1)
  {
    fig_log_get_emitter();
    uint64_t v40 = v6;
    LODWORD(v39) = 0;
    FigDebugAssert3();
LABEL_15:
    uint64_t result = FigSignalErrorAt();
    if (result) {
      return result;
    }
    goto LABEL_8;
  }
  CFDictionaryRef v17 = (const __CFDictionary *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55880]];
  if (!v17) {
    goto LABEL_15;
  }
  if (!CGSizeMakeWithDictionaryRepresentation(v17, &size)) {
    goto LABEL_15;
  }
  long long v18 = (void *)[a1 objectForKeyedSubscript:*v15];
  if (!v18) {
    goto LABEL_15;
  }
  long long v19 = v18;
  uint64_t result = [v18 length];
  if (result != 48) {
    return result;
  }
  [v19 getBytes:v42 length:48];
  CFDictionaryRef v21 = (const __CFDictionary *)[a1 objectForKeyedSubscript:*v16];
  if (!v21 || !CGPointMakeWithDictionaryRepresentation(v21, &point)) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v22 = *MEMORY[0x1E4F558A0];
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F558A0], v39, v40), "floatValue");
  double v24 = *(float *)&v43 - a2 * size.width;
  CGFloat v25 = point.x - a2 * size.width;
  double v26 = *((float *)&v43 + 1) - a3 * size.height;
  point.CGFloat x = v25;
  point.CGFloat y = point.y - a3 * size.height;
  double v27 = a4 * size.width;
  double v28 = a5 * size.height;
  size.double width = a4 * size.width;
  size.double height = a5 * size.height;
  if (a6 > 0.0)
  {
    float v29 = v23 / a6;
    float v30 = v29;
  }
  else
  {
    float v30 = v23;
  }
  double v31 = v27;
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(&v28 - 1));
  [a1 setObject:DictionaryRepresentation forKeyedSubscript:*v14];

  float v33 = v24;
  *(float *)&uint64_t v34 = v33;
  float v35 = v26;
  *((float *)&v34 + 1) = v35;
  *(void *)&long long v43 = v34;
  v36 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v42 length:48];
  [a1 setObject:v36 forKeyedSubscript:*v15];

  CFDictionaryRef v37 = CGPointCreateDictionaryRepresentation(point);
  [a1 setObject:v37 forKeyedSubscript:*v16];

  *(float *)&double v38 = v30;
  return objc_msgSend(a1, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v38), v22);
}

uint64_t FigCaptureMetadataUtilitiesUpdateMetadataForNewFinalDimensions(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3 = a3;
  unint64_t v5 = HIDWORD(a3);
  long long v20 = *MEMORY[0x1E4F1DB28];
  long long v21 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    CGFloat v7 = *((double *)&v20 + 1);
    CGFloat v6 = *(double *)&v20;
    CGFloat v9 = *((double *)&v21 + 1);
    CGFloat v8 = *(double *)&v21;
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    CGFloat v7 = 0.0;
    CGFloat v9 = 1.0;
    CGFloat v8 = 1.0;
    CGFloat v6 = 0.0;
  }
  FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)a2, a2 >> 32, v6, v7, v8, v9, (double)v3 / (double)(int)v5);
  CGFloat x = v22.origin.x;
  CGFloat y = v22.origin.y;
  CGFloat width = v22.size.width;
  CGFloat height = v22.size.height;
  if (CGRectIsNull(v22))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  v23.origin.CGFloat x = x;
  v23.origin.CGFloat y = y;
  v23.size.CGFloat width = width;
  v23.size.CGFloat height = height;
  CGRectIsEmpty(v23);
  return FigCFDictionarySetCGRect();
}

uint64_t FigCaptureMetadataUtilitiesPreventFurtherCropping(void *a1, const char *a2)
{
  return [a1 removeObjectForKey:*MEMORY[0x1E4F53260]];
}

void FigCaptureMetadataUtilitiesRefineFinalCropRects(float a1)
{
  if (a1 != 0.0 && a1 != 1.0)
  {
    if (FigCFDictionaryGetCGRectIfPresent())
    {
      CGFloat v4 = 0.0;
      CGFloat v3 = 0.0;
    }
    else
    {
      __asm { FMOV            V0.2D, #1.0 }
      CGFloat v4 = 1.0;
      CGFloat v3 = 1.0;
    }
    double v9 = a1;
    FigCaptureMetadataUtilitiesScaleRect2D(0.0, 0.0, v3, v4, v9);
    FigCFDictionarySetCGRect();
    if (FigCFDictionaryGetCGRectIfPresent())
    {
      CGFloat v11 = 0.0;
      CGFloat v10 = 0.0;
    }
    else
    {
      __asm { FMOV            V0.2D, #1.0 }
      CGFloat v11 = 1.0;
      CGFloat v10 = 1.0;
    }
    FigCaptureMetadataUtilitiesScaleRect2D(0.0, 0.0, v10, v11, v9);
    FigCFDictionarySetCGRect();
  }
}

uint64_t FigCaptureMetadataUtilitiesCopyZoomRelatedMetadata(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v4 = *MEMORY[0x1E4F53268];
  v32[0] = *MEMORY[0x1E4F53260];
  v32[1] = v4;
  uint64_t v5 = *MEMORY[0x1E4F53DE8];
  v32[2] = *MEMORY[0x1E4F533E8];
  v32[3] = v5;
  uint64_t v6 = *MEMORY[0x1E4F54358];
  v32[4] = *MEMORY[0x1E4F53E98];
  v32[5] = v6;
  uint64_t v7 = *MEMORY[0x1E4F53540];
  v32[6] = *MEMORY[0x1E4F54370];
  v32[7] = v7;
  CGFloat v8 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v32 count:8];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v26 objects:v33 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v27;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v27 != v11) {
          objc_enumerationMutation(v8);
        }
        objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *(void *)(*((void *)&v26 + 1) + 8 * v12)), *(void *)(*((void *)&v26 + 1) + 8 * v12));
        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v26 objects:v33 count:16];
    }
    while (v10);
  }
  uint64_t v13 = *MEMORY[0x1E4F53538];
  uint64_t result = [a1 objectForKeyedSubscript:*MEMORY[0x1E4F53538]];
  if (result)
  {
    long long v15 = (void *)result;
    long long v16 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(a2, "objectForKeyedSubscript:", v13));
    [a2 setObject:v16 forKeyedSubscript:v13];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v17 = *MEMORY[0x1E4F53600];
    v30[0] = *MEMORY[0x1E4F535F8];
    v30[1] = v17;
    long long v18 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v30, 2, 0);
    uint64_t result = [v18 countByEnumeratingWithState:&v22 objects:v31 count:16];
    if (result)
    {
      uint64_t v19 = result;
      uint64_t v20 = *(void *)v23;
      do
      {
        uint64_t v21 = 0;
        do
        {
          if (*(void *)v23 != v20) {
            objc_enumerationMutation(v18);
          }
          objc_msgSend(v16, "setObject:forKeyedSubscript:", objc_msgSend(v15, "objectForKeyedSubscript:", *(void *)(*((void *)&v22 + 1) + 8 * v21)), *(void *)(*((void *)&v22 + 1) + 8 * v21));
          ++v21;
        }
        while (v19 != v21);
        uint64_t result = [v18 countByEnumeratingWithState:&v22 objects:v31 count:16];
        uint64_t v19 = result;
      }
      while (result);
    }
  }
  return result;
}

double FigCaptureMetadataUtilitiesNormalizePoint(double a1, double a2, double a3)
{
  return a1 / a3;
}

double FigCaptureMetadataUtilitiesDenormalizePoint(double a1, double a2, double a3)
{
  return a1 * a3;
}

double FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRectForAttachedMedia(unint64_t a1, unint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8)
{
  double v8 = *MEMORY[0x1E4F1DB20];
  if (a8 == 0.0
    || (FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect(vcvtad_u64_f64((double)a1 * a8), vcvtad_u64_f64((double)a2 * a8), a3, a4, a5, a6, a7), x = v19.origin.x, double y = v19.origin.y, width = v19.size.width, height = v19.size.height, CGRectIsNull(v19)))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    float v14 = x / a8;
    double v8 = (double)(int)FigCaptureRoundFloatToMultipleOf(1, v14);
    float v15 = y / a8;
    FigCaptureRoundFloatToMultipleOf(1, v15);
    float v16 = x / a8 + width / a8;
    FigCaptureRoundFloatToMultipleOf(1, v16);
    float v17 = y / a8 + height / a8;
    FigCaptureRoundFloatToMultipleOf(1, v17);
  }
  return v8;
}

double FigCaptureMetadataUtilitiesGetFinalCropRectFromSource()
{
  long long v1 = *MEMORY[0x1E4F1DB20];
  if (FigCFDictionaryGetCGRectIfPresent()) {
    return *(double *)&v1;
  }
  else {
    return FigCaptureUnityRect();
  }
}

double FigCaptureMetadataUtilitiesGetFinalCropRect()
{
  long long v1 = *MEMORY[0x1E4F1DB20];
  if (FigCFDictionaryGetCGRectIfPresent()) {
    return *(double *)&v1;
  }
  else {
    return FigCaptureUnityRect();
  }
}

double FigCaptureMetadataUtilitiesGetTotalSensorCropRect()
{
  long long v1 = *MEMORY[0x1E4F1DB20];
  FigCFDictionaryGetCGRectIfPresent();
  return *(double *)&v1;
}

unint64_t FigCaptureMetadataUtilitiesGetRawSensorDimensions(void *a1)
{
  unsigned int v2 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54168]), "intValue");
  uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54160]), "intValue");
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  else {
    return v2 | (unint64_t)(v3 << 32);
  }
}

uint64_t FigCaptureMetadataUtilitiesComputeNormalizedPixelBufferCoordinateTransformBetweenSampleBuffers(void *a1, void *a2, int a3, _OWORD *a4)
{
  if (!a4) {
    return 4294954516;
  }
  int v6 = a3 ^ 1;
  long long v10 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  long long v11 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v16.a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v16.c = v10;
  long long v9 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  *(_OWORD *)&v16.tdouble x = v9;
  uint64_t result = fcmu_transformFromNormalizedBufferCoordsToDenormalizedSensorCoordsForSampleBuffer(a1, a3 ^ 1u, &v16);
  if (!result)
  {
    *(_OWORD *)&v15.a = v11;
    *(_OWORD *)&v15.c = v10;
    *(_OWORD *)&v15.tdouble x = v9;
    uint64_t result = fcmu_transformFromNormalizedBufferCoordsToDenormalizedSensorCoordsForSampleBuffer(a2, v6, &v15);
    if (!result)
    {
      CGAffineTransform v14 = v15;
      CGAffineTransformInvert(&t2, &v14);
      CGAffineTransform t1 = v16;
      CGAffineTransformConcat(&v14, &t1, &t2);
      uint64_t result = 0;
      long long v8 = *(_OWORD *)&v14.c;
      *a4 = *(_OWORD *)&v14.a;
      a4[1] = v8;
      a4[2] = *(_OWORD *)&v14.tx;
    }
  }
  return result;
}

uint64_t fcmu_transformFromNormalizedBufferCoordsToDenormalizedSensorCoordsForSampleBuffer(void *a1, int a2, _OWORD *a3)
{
  int v6 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  unint64_t v7 = BWPixelBufferDimensionsFromSampleBuffer((opaqueCMSampleBuffer *)a1);
  return fcmu_transformFromNormalizedBufferCoordsToDenormalizedNonBinnedSensorCoords(v6, v7, a2, a3);
}

double FigCaptureMetadataUtilitiesNormalizedSensorRectFromNormalizedBufferRect(void *a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v11 = *MEMORY[0x1E4F1DB20];
  long long v12 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v25.a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v25.c = v12;
  *(_OWORD *)&v25.tdouble x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  if (fcmu_transformFromNormalizedBufferCoordsToDenormalizedNonBinnedSensorCoords(a1, a2, 0, &v25))
  {
    fig_log_get_emitter();
LABEL_12:
    FigDebugAssert3();
    return v11;
  }
  CGAffineTransform v24 = v25;
  v26.origin.double x = a3;
  v26.origin.CGFloat y = a4;
  v26.size.CGFloat width = a5;
  v26.size.CGFloat height = a6;
  CGRect v27 = CGRectApplyAffineTransform(v26, &v24);
  double x = v27.origin.x;
  CGFloat y = v27.origin.y;
  CGFloat width = v27.size.width;
  CGFloat height = v27.size.height;
  unint64_t RawSensorDimensions = FigCaptureMetadataUtilitiesGetRawSensorDimensions(a1);
  int v18 = RawSensorDimensions;
  unint64_t v19 = HIDWORD(RawSensorDimensions);
  unsigned int v20 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54148]), "intValue");
  if (v20 <= 1) {
    int v21 = 1;
  }
  else {
    int v21 = v20;
  }
  uint64_t v22 = (v21 * v18);
  if (!FigCaptureVideoDimensionsAreValid(v22 | ((unint64_t)(v21 * v19) << 32)))
  {
    fig_log_get_emitter();
    goto LABEL_12;
  }
  v28.origin.double x = x;
  v28.origin.CGFloat y = y;
  v28.size.CGFloat width = width;
  v28.size.CGFloat height = height;
  if (CGRectIsEmpty(v28)) {
    return 0.0;
  }
  else {
    return x / (double)(int)v22;
  }
}

uint64_t fcmu_transformFromNormalizedBufferCoordsToDenormalizedNonBinnedSensorCoords(void *a1, uint64_t a2, int a3, _OWORD *a4)
{
  if (!a4 || !a1 || !FigCaptureVideoDimensionsAreValid(a2))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  *(_OWORD *)&v53.CGFloat a = *MEMORY[0x1E4F1DB20];
  *(_OWORD *)&v53.CGFloat c = v8;
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    long long v9 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F54148]];
    if (v9)
    {
      long long v10 = v9;
      v53.CGFloat a = v53.a * (double)(int)[v9 intValue];
      v53.CGFloat b = v53.b * (double)(int)[v10 intValue];
      v53.CGFloat c = v53.c * (double)(int)[v10 intValue];
      v53.CGFloat d = v53.d * (double)(int)[v10 intValue];
    }
  }
  CGFloat a = v53.a;
  CGFloat b = v53.b;
  CGFloat c = v53.c;
  CGFloat d = v53.d;
  v55.origin.double x = v53.a;
  v55.origin.CGFloat y = v53.b;
  v55.size.CGFloat width = v53.c;
  v55.size.CGFloat height = v53.d;
  if (CGRectIsNull(v55)) {
    return 4294954516;
  }
  double ValidBufferRect = FigCaptureMetadataUtilitiesGetValidBufferRect();
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  long long v22 = *MEMORY[0x1E4F1DAB8];
  long long v23 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v54.CGFloat a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v54.CGFloat c = v23;
  long long v24 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  *(_OWORD *)&v54.tdouble x = v24;
  if (!a3)
  {
LABEL_14:
    CGAffineTransform v52 = v54;
    CGAffineTransformTranslate(&v53, &v52, a, b);
    CGAffineTransform v54 = v53;
    CGAffineTransform v52 = v53;
    CGAffineTransformScale(&v53, &v52, c, d);
    CGAffineTransform v54 = v53;
    double v38 = (double)(int)a2;
    double v39 = (double)SHIDWORD(a2);
    double v40 = 0.0;
    v58.origin.double x = 0.0;
    v58.origin.CGFloat y = 0.0;
    v56.origin.double x = ValidBufferRect;
    v56.origin.CGFloat y = v17;
    v56.size.CGFloat width = v19;
    v56.size.CGFloat height = v21;
    v58.size.CGFloat width = (double)(int)a2;
    v58.size.CGFloat height = (double)SHIDWORD(a2);
    if (!CGRectEqualToRect(v56, v58))
    {
      v57.origin.double x = ValidBufferRect;
      v57.origin.CGFloat y = v17;
      v57.size.CGFloat width = v19;
      v57.size.CGFloat height = v21;
      IsEmptCGFloat y = CGRectIsEmpty(v57);
      double v42 = 0.0;
      double v43 = 1.0;
      double v44 = 1.0;
      if (!IsEmpty)
      {
        double v40 = ValidBufferRect / v38;
        double v42 = v17 / v39;
        double v43 = v19 / v38;
        double v44 = v21 / v39;
      }
      CGAffineTransform v52 = v54;
      CGAffineTransformScale(&v53, &v52, 1.0 / v43, 1.0 / v44);
      CGAffineTransform v54 = v53;
      CGAffineTransform v52 = v53;
      CGAffineTransformTranslate(&v53, &v52, 0.0 - v40, 0.0 - v42);
      CGAffineTransform v54 = v53;
    }
    uint64_t result = 0;
    long long v45 = *(_OWORD *)&v54.c;
    *a4 = *(_OWORD *)&v54.a;
    a4[1] = v45;
    a4[2] = *(_OWORD *)&v54.tx;
    return result;
  }
  long long v48 = v24;
  long long v49 = v23;
  long long v50 = v22;
  long long v25 = *(_OWORD *)(MEMORY[0x1E4F14998] + 16);
  *(_OWORD *)&v53.CGFloat a = *MEMORY[0x1E4F14998];
  *(_OWORD *)&v53.CGFloat c = v25;
  *(_OWORD *)&v53.tdouble x = *(_OWORD *)(MEMORY[0x1E4F14998] + 32);
  CGRect v26 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53540]];
  if (!v26) {
    return 4294954516;
  }
  CGRect v27 = v26;
  if ([v26 length] != 48) {
    return 0;
  }
  [v27 getBytes:&v53 length:48];
  uint64_t result = 4294954516;
  if (*(float *)&v53.a > 0.0 && *((float *)&v53.c + 1) > 0.0)
  {
    float v46 = *(float *)&v53.tx;
    double v47 = b;
    double v29 = a;
    double v30 = d;
    double v31 = c;
    double v32 = v21;
    double v33 = v19;
    double v34 = v17;
    double v35 = ValidBufferRect;
    float v36 = *((float *)&v53.tx + 1);
    *(_OWORD *)&v52.CGFloat a = v50;
    *(_OWORD *)&v52.CGFloat c = v49;
    *(_OWORD *)&v52.tdouble x = v48;
    CGAffineTransformScale(&v54, &v52, 1.0 / *(float *)&v53.a, 1.0 / *((float *)&v53.c + 1));
    double v37 = v36;
    double ValidBufferRect = v35;
    double v17 = v34;
    double v19 = v33;
    double v21 = v32;
    CGFloat c = v31;
    CGFloat d = v30;
    CGFloat a = v29;
    CGFloat b = v47;
    CGAffineTransform v51 = v54;
    CGAffineTransformTranslate(&v52, &v51, 0.0 - v46, 0.0 - v37);
    CGAffineTransform v54 = v52;
    goto LABEL_14;
  }
  return result;
}

double FigCaptureMetadataUtilitiesNormalizedBufferRectFromNormalizedSensorRect(void *a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v12 = *MEMORY[0x1E4F1DB20];
  unint64_t RawSensorDimensions = FigCaptureMetadataUtilitiesGetRawSensorDimensions(a1);
  int v14 = RawSensorDimensions;
  unint64_t v15 = HIDWORD(RawSensorDimensions);
  unsigned int v16 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54148]), "intValue");
  if (v16 <= 1) {
    int v17 = 1;
  }
  else {
    int v17 = v16;
  }
  uint64_t v18 = (v17 * v14);
  uint64_t v19 = (v17 * v15);
  if (FigCaptureVideoDimensionsAreValid(v18 | (v19 << 32)))
  {
    double v29 = v12;
    double v20 = (double)(int)v18;
    v33.origin.double x = a3;
    v33.origin.CGFloat y = a4;
    v33.size.CGFloat width = a5;
    v33.size.CGFloat height = a6;
    IsEmptCGFloat y = CGRectIsEmpty(v33);
    double v22 = a6 * (double)(int)v19;
    if (IsEmpty) {
      double v23 = 0.0;
    }
    else {
      double v23 = a3 * v20;
    }
    if (IsEmpty) {
      double v24 = 0.0;
    }
    else {
      double v24 = a4 * (double)(int)v19;
    }
    if (IsEmpty) {
      double v25 = (double)(int)v18;
    }
    else {
      double v25 = a5 * v20;
    }
    if (IsEmpty) {
      double v26 = (double)(int)v19;
    }
    else {
      double v26 = v22;
    }
    long long v27 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)&v32.CGFloat a = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)&v32.CGFloat c = v27;
    *(_OWORD *)&v32.tdouble x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
    if (fcmu_transformFromNormalizedBufferCoordsToDenormalizedNonBinnedSensorCoords(a1, a2, 0, &v32))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return v29;
    }
    else
    {
      CGAffineTransform v30 = v32;
      memset(&v31, 0, sizeof(v31));
      CGAffineTransformInvert(&v31, &v30);
      CGAffineTransform v30 = v31;
      v34.origin.double x = v23;
      v34.origin.CGFloat y = v24;
      v34.size.CGFloat width = v25;
      v34.size.CGFloat height = v26;
      *(void *)&double v12 = (unint64_t)CGRectApplyAffineTransform(v34, &v30);
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v12;
}

double FigCaptureMetadataUtilitiesNormalizedBufferPointFromNormalizedSensorPoint(void *a1, uint64_t a2, double a3, double a4)
{
  double v8 = *MEMORY[0x1E4F1DAD8];
  unint64_t RawSensorDimensions = FigCaptureMetadataUtilitiesGetRawSensorDimensions(a1);
  int v10 = RawSensorDimensions;
  unint64_t v11 = HIDWORD(RawSensorDimensions);
  unsigned int v12 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54148]), "intValue");
  if (v12 <= 1) {
    int v13 = 1;
  }
  else {
    int v13 = v12;
  }
  uint64_t v14 = (v13 * v10);
  uint64_t v15 = (v13 * v11);
  if (!FigCaptureVideoDimensionsAreValid(v14 | (v15 << 32)))
  {
    fig_log_get_emitter();
LABEL_10:
    FigDebugAssert3();
    return v8;
  }
  long long v16 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v20.CGFloat a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v20.CGFloat c = v16;
  *(_OWORD *)&v20.tdouble x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  if (fcmu_transformFromNormalizedBufferCoordsToDenormalizedNonBinnedSensorCoords(a1, a2, 0, &v20))
  {
    fig_log_get_emitter();
    goto LABEL_10;
  }
  CGAffineTransform v18 = v20;
  memset(&v19, 0, sizeof(v19));
  CGAffineTransformInvert(&v19, &v18);
  return v19.tx + a4 * (double)(int)v15 * v19.c + v19.a * (a3 * (double)(int)v14);
}

double FigCaptureMetadataUtilitiesNormalizedSensorCenterOffsetInValidBufferRect(void *a1)
{
  unsigned int v2 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  unint64_t v3 = BWPixelBufferDimensionsFromSampleBuffer((opaqueCMSampleBuffer *)a1);
  double v4 = FigCaptureMetadataUtilitiesNormalizedBufferPointFromNormalizedSensorPoint(v2, v3, 0.5, 0.5);
  double v6 = v5;
  *(_OWORD *)unint64_t v11 = *MEMORY[0x1E4F1DB20];
  *(_OWORD *)&v11[16] = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  FigCFDictionaryGetCGRectIfPresent();
  if (!CGRectIsNull(*(CGRect *)v11))
  {
    if (CGRectIsEmpty(*(CGRect *)v11))
    {
      double v7 = 0.0;
      double v8 = 1.0;
      double v9 = 0.0;
    }
    else
    {
      double v7 = *(double *)v11 / (double)(int)v3;
      double v9 = *(double *)&v11[8] / (double)SHIDWORD(v3);
      double v8 = *(double *)&v11[16] / (double)(int)v3;
    }
    double v4 = FigCaptureTransformPointToCoordinateSpaceOfRect(v4, v6, v7, v9, v8);
  }
  return v4 + -0.5;
}

float64_t FigCaptureMetadataUtilitiesRoundRectToEvenCoordinatesPreservingSquareness(unsigned int a1, float64_t a2, float64x2_t a3, double a4, double a5, float a6)
{
  a3.f64[1] = a2;
  float64x2_t v6 = vrndaq_f64(a3);
  float64x2_t v7 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(a6), 0), vabdq_f64(a3, v6)), (int8x16_t)v6, (int8x16_t)a3);
  __asm { FMOV            V2.2D, #0.5 }
  float64x2_t v13 = vmulq_f64(v7, _Q2);
  int32x2_t v14 = vdup_n_s32(a1);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  float64x2_t v16 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v15, 0x3FuLL)), (int8x16_t)vrndpq_f64(v13), (int8x16_t)vrndmq_f64(v13));
  return vaddq_f64(v16, v16).f64[1];
}

void FigCaptureMetadataUtilitiesRoundDenormalizedRectToRawSensorCFABoundary(void *a1)
{
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54148]), "intValue");
  FigCaptureMetadataUtilitiesRoundRectToMultipleOf();
}

double FigCaptureMetadataUtilitiesDenormalizedRectWithinBoundingDimensionsCenteredOnPoint(int a1, int a2, double a3)
{
  if (a2 >= a1) {
    int v3 = a1;
  }
  else {
    int v3 = a2;
  }
  double v4 = a3 * (double)a1;
  if (v3 >= 0) {
    int v5 = v3;
  }
  else {
    int v5 = v3 + 1;
  }
  double v6 = v4 - (double)(v5 >> 1);
  if (v6 > (double)(a1 - v3)) {
    double v6 = (double)(a1 - v3);
  }
  if (*MEMORY[0x1E4F1DAD8] > v6) {
    double v6 = *MEMORY[0x1E4F1DAD8];
  }
  double v7 = round(v6);
  if (vabdd_f64(v6, v7) <= 0.00999999978) {
    double v6 = v7;
  }
  return ceil(v6);
}

double FigCaptureMetadataUtilitiesNormalizedRectEnforcedWithinValidRegionAfterGDC(uint64_t a1, void *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  memset(v26, 0, sizeof(v26));
  if (![MEMORY[0x1E4F55EB0] getGDCParams:v26 cameraInfo:a1 metadata:a2])
  {
    double v13 = FigCaptureMetadataUtilitiesNormalizedSensorRectFromNormalizedBufferRect(a2, a3, a4, a5, a6, a7);
    CGFloat v15 = v14;
    double v25 = a4;
    CGFloat v17 = v16;
    CGFloat v19 = v18;
    objc_msgSend(MEMORY[0x1E4F55EB0], "adjustCropRectangle:withGDCParams:", v26);
    CGFloat x = v27.origin.x;
    CGFloat y = v27.origin.y;
    CGFloat width = v27.size.width;
    CGFloat height = v27.size.height;
    v28.origin.CGFloat x = v13;
    v28.origin.CGFloat y = v15;
    v28.size.CGFloat width = v17;
    v28.size.CGFloat height = v19;
    a4 = v25;
    if (!CGRectEqualToRect(v27, v28)) {
      return FigCaptureMetadataUtilitiesNormalizedBufferRectFromNormalizedSensorRect(a2, a3, x, y, width, height);
    }
  }
  return a4;
}

void FigCaptureMetadataUtilitiesAddMissingDutyCycleMetadata(CMAttachmentBearerRef target, void *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken == -1)
  {
    if (!target) {
      return;
    }
  }
  else
  {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
    if (!target) {
      return;
    }
  }
  if (a2)
  {
    CFTypeRef v4 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v4)
    {
      int v5 = (void *)v4;
      uint64_t v6 = 0;
      uint64_t v7 = *MEMORY[0x1E4F53BB8];
      uint64_t v21 = *MEMORY[0x1E4F54068];
      uint64_t v22 = v7;
      uint64_t v8 = *MEMORY[0x1E4F53BF8];
      uint64_t v23 = *MEMORY[0x1E4F53BA8];
      uint64_t v24 = v8;
      uint64_t v9 = *MEMORY[0x1E4F53EC0];
      uint64_t v25 = *MEMORY[0x1E4F53EE0];
      uint64_t v26 = v9;
      uint64_t v10 = *MEMORY[0x1E4F53BC8];
      uint64_t v27 = *MEMORY[0x1E4F53CE8];
      uint64_t v28 = v10;
      uint64_t v11 = *MEMORY[0x1E4F53D48];
      uint64_t v29 = *MEMORY[0x1E4F53B98];
      uint64_t v30 = v11;
      uint64_t v12 = *MEMORY[0x1E4F540F8];
      uint64_t v31 = *MEMORY[0x1E4F541C0];
      uint64_t v32 = v12;
      uint64_t v13 = *MEMORY[0x1E4F53BB0];
      uint64_t v33 = *MEMORY[0x1E4F53BD8];
      uint64_t v34 = v13;
      uint64_t v14 = *MEMORY[0x1E4F540A0];
      uint64_t v35 = *MEMORY[0x1E4F53E38];
      uint64_t v36 = v14;
      uint64_t v15 = *MEMORY[0x1E4F53E40];
      uint64_t v37 = *MEMORY[0x1E4F53BC0];
      uint64_t v38 = v15;
      uint64_t v39 = *MEMORY[0x1E4F54080];
      while (1)
      {
        uint64_t v16 = *(uint64_t *)((char *)&v21 + v6);
        uint64_t v17 = objc_msgSend(v5, "objectForKeyedSubscript:", v16, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36,
                v37,
                v38,
                v39,
                v40);
        if (v17) {
          break;
        }
        uint64_t v20 = [a2 objectForKeyedSubscript:v16];
        if (v20)
        {
          uint64_t v18 = v20;
          CGFloat v19 = v5;
          goto LABEL_10;
        }
LABEL_11:
        v6 += 8;
        if (v6 == 152) {
          return;
        }
      }
      uint64_t v18 = v17;
      CGFloat v19 = a2;
LABEL_10:
      [v19 setObject:v18 forKeyedSubscript:v16];
      goto LABEL_11;
    }
  }
}

CMSampleBufferRef FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer(uint64_t a1, void *a2, uint64_t a3, int32_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1) {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_211);
  }
  CMSampleBufferRef v49 = 0;
  CMMetadataFormatDescriptionRef formatDescriptionOut = 0;
  CMBlockBufferRef theBuffer = 0;
  if ((*(unsigned char *)(a1 + 12) & 1) == 0)
  {
    fig_log_get_emitter();
LABEL_37:
    FigDebugAssert3();
    goto LABEL_25;
  }
  uint64_t v41 = a3;
  int32_t v42 = a4;
  uint64_t v9 = *MEMORY[0x1E4F1F108];
  uint64_t v10 = *MEMORY[0x1E4F218A0];
  uint64_t v11 = *MEMORY[0x1E4F1F0F8];
  v55[0] = *MEMORY[0x1E4F1F108];
  v55[1] = v11;
  uint64_t v12 = *MEMORY[0x1E4F1F048];
  v56[0] = v10;
  v56[1] = v12;
  uint64_t v13 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v56, v55, 2));
  uint64_t v14 = (uint64_t *)MEMORY[0x1E4F1F158];
  uint64_t v15 = (uint64_t *)MEMORY[0x1E4F1EFC8];
  if (a2)
  {
    uint64_t v16 = *MEMORY[0x1E4F1F150];
    v53[0] = v9;
    v53[1] = v11;
    uint64_t v17 = *MEMORY[0x1E4F1F000];
    v54[0] = v16;
    v54[1] = v17;
    objc_msgSend(v13, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v54, v53, 2));
    uint64_t v18 = *v14;
    v51[0] = v9;
    v51[1] = v11;
    uint64_t v19 = *v15;
    v52[0] = v18;
    v52[1] = v19;
    objc_msgSend(v13, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v52, v51, 2));
  }
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (CMMetadataFormatDescriptionCreateWithMetadataSpecifications((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x6D656278u, (CFArrayRef)v13, &formatDescriptionOut))
  {
    goto LABEL_36;
  }
  unsigned int LocalIDForMetadataIdentifyingFactors = FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors();
  if (!LocalIDForMetadataIdentifyingFactors) {
    goto LABEL_36;
  }
  unsigned int v22 = LocalIDForMetadataIdentifyingFactors;
  uint64_t v23 = [a2 length];
  if (v23)
  {
    if ([a2 length] == 36)
    {
      unsigned int v24 = FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors();
      if (v24)
      {
        unsigned int v25 = bswap32(v24);
        uint64_t v26 = [a2 bytes];
        for (uint64_t i = 0; i != 9; ++i)
          *((void *)v57 + i) = bswap64(COERCE_UNSIGNED_INT64(*(float *)(v26 + 4 * i)));
        if (FigCaptureVideoDimensionsAreValid(v41))
        {
          unsigned int v28 = FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors();
          if (v28)
          {
            int8x8_t v4 = vrev32_s8((int8x8_t)vcvt_f32_s32((int32x2_t)v41));
            unsigned int v29 = bswap32(v28);
            uint64_t v30 = 16;
            uint64_t v31 = 80;
            goto LABEL_17;
          }
        }
      }
    }
LABEL_36:
    fig_log_get_emitter();
    goto LABEL_37;
  }
  unsigned int v25 = 0;
  unsigned int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
LABEL_17:
  if (CMBlockBufferCreateWithMemoryBlock(v20, 0, (v31 | 9) + v30, v20, 0, 0, (v31 | 9) + v30, 1u, &theBuffer))
  {
    fig_log_get_emitter();
    goto LABEL_37;
  }
  dataPointerOut = 0;
  if (CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut))
  {
    fig_log_get_emitter();
    goto LABEL_37;
  }
  *(_DWORD *)dataPointerOut = 150994944;
  *((_DWORD *)dataPointerOut + 1) = bswap32(v22);
  uint64_t v32 = dataPointerOut;
  dataPointerOut[8] = -1;
  uint64_t v33 = v32 + 9;
  dataPointerOut = v32 + 9;
  if (v23)
  {
    long long v34 = v57[0];
    *(_OWORD *)(v32 + 33) = v57[1];
    long long v35 = v57[3];
    *(_OWORD *)(v32 + 49) = v57[2];
    *(_OWORD *)(v32 + 65) = v35;
    *(_DWORD *)(v32 + 9) = v31 << 24;
    *(_DWORD *)(v32 + 13) = v25;
    *(void *)(v32 + 81) = v58;
    *(_OWORD *)(v32 + 17) = v34;
    dataPointerOut = &v33[v31];
    *(_DWORD *)&v33[v31] = v30 << 24;
    *((_DWORD *)dataPointerOut + 1) = v29;
    uint64_t v36 = dataPointerOut;
    *((int8x8_t *)dataPointerOut + 1) = v4;
    dataPointerOut = &v36[v30];
  }
  if (v42) {
    int32_t v37 = v42;
  }
  else {
    int32_t v37 = 600;
  }
  memset(&v46, 0, sizeof(v46));
  CMTimeMake(&time, 1, v37);
  CMTimeConvertScale(&v46, &time, *(_DWORD *)(a1 + 8), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  long long v38 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
  *(_OWORD *)&sampleTimingArray.duration.epoch = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale = v38;
  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = *(_OWORD *)a1;
  CMTimeEpoch v39 = *(void *)(a1 + 16);
  sampleTimingArray.decodeTimeStamp.epoch = *(void *)(MEMORY[0x1E4F1FA70] + 64);
  sampleTimingArray.presentationTimeStamp.epoch = v39;
  sampleTimingArray.duration = v46;
  sampleSizeArraCGFloat y = CMBlockBufferGetDataLength(theBuffer);
  if (CMSampleBufferCreate(v20, theBuffer, 1u, 0, 0, formatDescriptionOut, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v49))
  {
    fig_log_get_emitter();
    goto LABEL_37;
  }
LABEL_25:
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v49;
}

CFTypeRef FigCaptureMetadataUtilitiesCreateBoxedVideoOrientationBlockBuffer()
{
  if (FigBoxedMetadataCreateForConstruction()
    || FigBoxedMetadataAppendValue()
    || FigBoxedMetadataEndConstruction())
  {
    return 0;
  }
  BlockBuffer = (const void *)FigBoxedMetadataGetBlockBuffer();
  return CFRetain(BlockBuffer);
}

CMSampleBufferRef FigCaptureMetadataUtilitiesCreateVideoOrientationSampleBuffer(uint64_t a1, OpaqueCMBlockBuffer *cf, uint64_t a3, const opaqueCMFormatDescription *a4)
{
  CMSampleBufferRef v15 = 0;
  if (cf)
  {
    uint64_t v6 = cf;
    CFRetain(cf);
  }
  else
  {
    CMSampleBufferRef result = (CMSampleBufferRef)FigCaptureMetadataUtilitiesCreateBoxedVideoOrientationBlockBuffer();
    uint64_t v6 = result;
    if (!result) {
      return result;
    }
  }
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = v8;
  CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
  long long v10 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E4F1FA70];
  *(_OWORD *)&sampleTimingArray.duration.epoch = v10;
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = *(_OWORD *)a1;
  CMTimeEpoch v11 = *(void *)(a1 + 16);
  sampleTimingArray.decodeTimeStamp.epoch = v9;
  sampleTimingArray.presentationTimeStamp.epoch = v11;
  sampleSizeArraCGFloat y = CMBlockBufferGetDataLength(v6);
  OSStatus v12 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 1u, 0, 0, a4, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v15);
  CFRelease(v6);
  CMSampleBufferRef result = v15;
  if (v12)
  {
    if (v15)
    {
      CFRelease(v15);
      return 0;
    }
  }
  return result;
}

uint64_t fcmu_cameraFromPortTypeAndCameraLocation(void *a1)
{
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DD8]]) {
    return 2;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DF0]]) {
    return 3;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DE8]]) {
    return 4;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52DF8]]) {
    return 5;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F52E10]]) {
    return 6;
  }
  return 0;
}

void *FigCaptureMetadataUtilitiesCreateMetadataSidecarFileURL(void *result)
{
  if (result)
  {
    uint64_t v1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(result, "resourceSpecifier"), "stringByDeletingPathExtension"), "stringByAppendingString:", @"_metadata"), "stringByAppendingPathExtension:", @"mov");
    if (!v1 || (CMSampleBufferRef result = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v1]) == 0)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 0;
    }
  }
  return result;
}

uint64_t fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(void *a1, void *a2)
{
  if ([a2 count])
  {
    uint64_t v4 = fcmu_indexInMetadataArrayOfQuickTimeMetadataDictionary(a1);
    if (v4 == 0x7FFFFFFFFFFFFFFFLL)
    {
      int v5 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      uint64_t v6 = (void *)[MEMORY[0x1E4F1CA48] array];
      [v5 setObject:*MEMORY[0x1E4F32FC0] forKeyedSubscript:*MEMORY[0x1E4F33068]];
      uint64_t v7 = *MEMORY[0x1E4F33070];
    }
    else
    {
      CMTimeEpoch v9 = (void *)[a1 objectAtIndexedSubscript:v4];
      uint64_t v7 = *MEMORY[0x1E4F33070];
      uint64_t v10 = [v9 objectForKeyedSubscript:*MEMORY[0x1E4F33070]];
      int v5 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v9];
      uint64_t v6 = (void *)[MEMORY[0x1E4F1CA48] arrayWithArray:v10];
    }
    [v6 addObjectsFromArray:a2];
    [v5 setObject:v6 forKeyedSubscript:v7];
    id v11 = objc_alloc(MEMORY[0x1E4F1CA48]);
    if (a1) {
      OSStatus v12 = (void *)[v11 initWithArray:a1];
    }
    else {
      OSStatus v12 = (void *)[v11 initWithCapacity:1];
    }
    uint64_t v13 = v12;
    if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
      [v12 addObject:v5];
    }
    else {
      [v12 setObject:v5 atIndexedSubscript:v4];
    }
    return (uint64_t)v13;
  }
  else
  {
    return [a1 copy];
  }
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithVitalityScore(void *a1, uint64_t a2, float a3)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  int v5 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v7 = *MEMORY[0x1E4F344B0];
  uint64_t v8 = *MEMORY[0x1E4F33028];
  v21[0] = *MEMORY[0x1E4F33020];
  uint64_t v6 = v21[0];
  v21[1] = v8;
  uint64_t v9 = *MEMORY[0x1E4F1F180];
  v22[0] = v7;
  v22[1] = v9;
  uint64_t v10 = *MEMORY[0x1E4F32FF0];
  v22[2] = *MEMORY[0x1E4F1EFD0];
  uint64_t v11 = *MEMORY[0x1E4F33060];
  v21[2] = v10;
  v21[3] = v11;
  *(float *)&double v12 = a3;
  v22[3] = [NSNumber numberWithFloat:v12];
  uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:v21 count:4];
  uint64_t v14 = *MEMORY[0x1E4F344B8];
  v19[0] = v6;
  v19[1] = v8;
  v20[0] = v14;
  v20[1] = v9;
  v20[2] = *MEMORY[0x1E4F1F058];
  v19[2] = v10;
  v19[3] = v11;
  v20[3] = [NSNumber numberWithUnsignedInt:a2];
  v18[0] = v13;
  v18[1] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:4];
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:2]);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithVariableFrameRate(void *a1, uint64_t a2, uint64_t a3)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  int v5 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v7 = *MEMORY[0x1E4F33028];
  v18[0] = *MEMORY[0x1E4F33020];
  uint64_t v6 = v18[0];
  v18[1] = v7;
  uint64_t v8 = *MEMORY[0x1E4F1F180];
  v19[0] = @"com.apple.quicktime.60fps.variableframerate";
  v19[1] = v8;
  uint64_t v9 = *MEMORY[0x1E4F32FF0];
  v19[2] = *MEMORY[0x1E4F1F068];
  uint64_t v10 = *MEMORY[0x1E4F33060];
  void v18[2] = v9;
  v18[3] = v10;
  v19[3] = [NSNumber numberWithBool:a2];
  uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:v18 count:4];
  v16[0] = v6;
  v16[1] = v7;
  v17[0] = @"com.apple.quicktime.maximumframerate";
  v17[1] = v8;
  v17[2] = *MEMORY[0x1E4F1F038];
  v16[2] = v9;
  v16[3] = v10;
  v17[3] = [NSNumber numberWithInt:a3];
  v15[0] = v11;
  v15[1] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:4];
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:2]);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSpatialOverCaptureQualityScore(void *a1, uint64_t a2, float a3)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  int v5 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v7 = *MEMORY[0x1E4F344C0];
  uint64_t v8 = *MEMORY[0x1E4F33028];
  v21[0] = *MEMORY[0x1E4F33020];
  uint64_t v6 = v21[0];
  v21[1] = v8;
  uint64_t v9 = *MEMORY[0x1E4F1F180];
  v22[0] = v7;
  v22[1] = v9;
  uint64_t v10 = *MEMORY[0x1E4F32FF0];
  v22[2] = *MEMORY[0x1E4F1EFD0];
  uint64_t v11 = *MEMORY[0x1E4F33060];
  v21[2] = v10;
  v21[3] = v11;
  *(float *)&double v12 = a3;
  v22[3] = [NSNumber numberWithFloat:v12];
  uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:v21 count:4];
  uint64_t v14 = *MEMORY[0x1E4F344C8];
  v19[0] = v6;
  v19[1] = v8;
  v20[0] = v14;
  v20[1] = v9;
  v20[2] = *MEMORY[0x1E4F1F058];
  v19[2] = v10;
  v19[3] = v11;
  v20[3] = [NSNumber numberWithUnsignedInt:a2];
  v18[0] = v13;
  v18[1] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:4];
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:2]);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithLimitStillImageTransformFlagIfRequired(void *a1)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v3 = *MEMORY[0x1E4F55AD8];
  uint64_t v4 = *MEMORY[0x1E4F33028];
  v11[0] = *MEMORY[0x1E4F33020];
  v11[1] = v4;
  uint64_t v5 = *MEMORY[0x1E4F1F180];
  v12[0] = v3;
  v12[1] = v5;
  uint64_t v6 = *MEMORY[0x1E4F1F068];
  uint64_t v7 = *MEMORY[0x1E4F33060];
  v11[2] = *MEMORY[0x1E4F32FF0];
  v11[3] = v7;
  v12[2] = v6;
  v12[3] = &unk_1EFAFE298;
  uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:v11 count:4];
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v10 count:1]);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSubjectRelightingAppliedCurveParameter(void *a1, float a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v5 = *MEMORY[0x1E4F33028];
  v12[0] = *MEMORY[0x1E4F33020];
  v12[1] = v5;
  uint64_t v6 = *MEMORY[0x1E4F1F180];
  v13[0] = *MEMORY[0x1E4F55AD0];
  v13[1] = v6;
  v13[2] = *MEMORY[0x1E4F1EFD0];
  uint64_t v7 = *MEMORY[0x1E4F33060];
  v12[2] = *MEMORY[0x1E4F32FF0];
  v12[3] = v7;
  *(float *)&double v8 = a2;
  v13[3] = [NSNumber numberWithFloat:v8];
  uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:4];
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v11 count:1]);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithCinematicVideoGlobalMetadata(void *a1, uint64_t a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v5 = *MEMORY[0x1E4F34490];
  uint64_t v6 = *MEMORY[0x1E4F33028];
  v12[0] = *MEMORY[0x1E4F33020];
  v12[1] = v6;
  uint64_t v7 = *MEMORY[0x1E4F1F180];
  v13[0] = v5;
  v13[1] = v7;
  uint64_t v8 = *MEMORY[0x1E4F33060];
  v12[2] = *MEMORY[0x1E4F32FF0];
  v12[3] = v8;
  v13[2] = *MEMORY[0x1E4F1F020];
  v13[3] = a2;
  uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:4];
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v11 count:1]);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithActionCameraGlobalMetadata(void *a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v5 = *MEMORY[0x1E4F33028];
  v11[0] = *MEMORY[0x1E4F33020];
  v11[1] = v5;
  uint64_t v6 = *MEMORY[0x1E4F1F180];
  v12[0] = *MEMORY[0x1E4F55AC8];
  v12[1] = v6;
  v12[2] = *MEMORY[0x1E4F1F058];
  uint64_t v7 = *MEMORY[0x1E4F33060];
  v11[2] = *MEMORY[0x1E4F32FF0];
  v11[3] = v7;
  v12[3] = [NSNumber numberWithInt:a2];
  uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:v11 count:4];
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v10 count:1]);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSpatialVersionMetadata(void *a1, uint64_t a2)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v5 = *MEMORY[0x1E4F55B18];
  uint64_t v6 = *MEMORY[0x1E4F33028];
  v12[0] = *MEMORY[0x1E4F33020];
  v12[1] = v6;
  uint64_t v7 = *MEMORY[0x1E4F1F180];
  v13[0] = v5;
  v13[1] = v7;
  uint64_t v8 = *MEMORY[0x1E4F33060];
  v12[2] = *MEMORY[0x1E4F32FF0];
  v12[3] = v8;
  v13[2] = *MEMORY[0x1E4F1F078];
  v13[3] = a2;
  uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:4];
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v11 count:1]);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSpatialAggressorsSeenMetadata(void *a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v5 = *MEMORY[0x1E4F33028];
  v11[0] = *MEMORY[0x1E4F33020];
  v11[1] = v5;
  uint64_t v6 = *MEMORY[0x1E4F1F180];
  v12[0] = *MEMORY[0x1E4F55B10];
  v12[1] = v6;
  v12[2] = *MEMORY[0x1E4F1F068];
  uint64_t v7 = *MEMORY[0x1E4F33060];
  v11[2] = *MEMORY[0x1E4F32FF0];
  v11[3] = v7;
  v12[3] = [NSNumber numberWithInt:a2];
  uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:v11 count:4];
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v10 count:1]);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSmartStyleMetadata(void *a1, void *a2, unsigned int a3)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  context = (void *)MEMORY[0x1A6272C70]();
  uint64_t v5 = *MEMORY[0x1E4F55B00];
  uint64_t v6 = *MEMORY[0x1E4F33028];
  v44[0] = *MEMORY[0x1E4F33020];
  uint64_t v4 = v44[0];
  v44[1] = v6;
  uint64_t v7 = *MEMORY[0x1E4F1F180];
  v47[0] = v5;
  v47[1] = v7;
  uint64_t v28 = *MEMORY[0x1E4F1F058];
  uint64_t v9 = *MEMORY[0x1E4F1F058];
  uint64_t v10 = *MEMORY[0x1E4F33060];
  uint64_t v45 = *MEMORY[0x1E4F32FF0];
  uint64_t v8 = v45;
  uint64_t v46 = v10;
  v47[2] = v9;
  v47[3] = &unk_1EFAFE298;
  uint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v47 forKeys:v44 count:4];
  uint64_t v11 = *MEMORY[0x1E4F55B08];
  v40[0] = v4;
  v40[1] = v6;
  v41[0] = v11;
  v41[1] = v7;
  uint64_t v42 = *MEMORY[0x1E4F1EFD8];
  uint64_t v12 = v42;
  v40[2] = v8;
  v40[3] = v10;
  uint64_t v13 = NSNumber;
  [a2 toneBias];
  uint64_t v43 = objc_msgSend(v13, "numberWithFloat:");
  uint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:v40 count:4];
  uint64_t v14 = *MEMORY[0x1E4F55AE8];
  v38[0] = v4;
  v38[1] = v6;
  v39[0] = v14;
  v39[1] = v7;
  v39[2] = v12;
  v38[2] = v8;
  v38[3] = v10;
  CMSampleBufferRef v15 = NSNumber;
  [a2 colorBias];
  v39[3] = objc_msgSend(v15, "numberWithFloat:");
  uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:4];
  uint64_t v17 = *MEMORY[0x1E4F55AF0];
  v36[0] = v4;
  v36[1] = v6;
  v37[0] = v17;
  v37[1] = v7;
  v37[2] = v12;
  v36[2] = v8;
  v36[3] = v10;
  uint64_t v18 = NSNumber;
  [a2 intensity];
  v37[3] = objc_msgSend(v18, "numberWithFloat:");
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:v36 count:4];
  uint64_t v20 = *MEMORY[0x1E4F55AF8];
  v34[0] = v4;
  v34[1] = v6;
  v35[0] = v20;
  v35[1] = v7;
  v35[2] = *MEMORY[0x1E4F1F068];
  v34[2] = v8;
  v34[3] = v10;
  v35[3] = [NSNumber numberWithBool:a3];
  v33[0] = v26;
  v33[1] = v25;
  v33[2] = v16;
  v33[3] = v19;
  v33[4] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:v34 count:4];
  uint64_t v21 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v33, 5));
  uint64_t v22 = *MEMORY[0x1E4F55AE0];
  v31[0] = v4;
  v31[1] = v6;
  v32[0] = v22;
  v32[1] = v7;
  v32[2] = v28;
  v31[2] = v8;
  v31[3] = v10;
  v32[3] = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(MEMORY[0x1E4F55F08], "makerNoteTagForSmartStyleCastType:smartStyleVersion:", objc_msgSend(a2, "cast"), 1));
  objc_msgSend(v21, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v32, v31, 4));
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, v21);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesAdjustValidBufferRectForDarkShadeCropping(void *a1)
{
  unsigned int v2 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  uint64_t result = fcmu_darkShadeHorizontalCrop((void *)[v2 objectForKeyedSubscript:*MEMORY[0x1E4F54128]]);
  if (result)
  {
    unsigned int v4 = result;
    long long v18 = *MEMORY[0x1E4F1DB28];
    long long v19 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
    int v5 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54168]), "intValue");
    int v6 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54160]), "intValue");
    uint64_t result = FigCFDictionaryGetCGRectIfPresent();
    if (result || (uint64_t result = FigCFDictionaryGetCGRectIfPresent(), result))
    {
      double v8 = *((double *)&v18 + 1);
      double v7 = *(double *)&v18;
      double v10 = *((double *)&v19 + 1);
      double v9 = *(double *)&v19;
    }
    else
    {
      double v9 = (double)v5;
      double v10 = (double)v6;
      double v8 = 0.0;
      double v7 = 0.0;
    }
    int v11 = v5 - 2 * (v4 >> (v5 == 2112));
    if (v9 > (double)v11)
    {
      float v12 = v9 / (double)v11;
      double v13 = (float)(1.0 / v12);
      fcmu_scaleValidBufferRectOverWidth(v7, v8, v9, v10, v13);
      FigCFDictionarySetCGRect();
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        double height = 0.0;
        double width = 0.0;
      }
      else
      {
        FormatDescription = CMSampleBufferGetFormatDescription((CMSampleBufferRef)a1);
        CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(FormatDescription);
        double width = (double)Dimensions.width;
        double height = (double)Dimensions.height;
      }
      fcmu_scaleValidBufferRectOverWidth(0.0, 0.0, width, height, v13);
      return FigCFDictionarySetCGRect();
    }
  }
  return result;
}

double fcmu_scaleValidBufferRectOverWidth(double a1, double a2, double a3, double a4, double a5)
{
  float v6 = a3 * a5;
  float v7 = (a3 - v6) * 0.5;
  return a1 + (double)(int)FigCaptureRoundFloatToMultipleOf(2, v7);
}

id __FigCaptureMetadataUtilitiesGetTimeZoneFormatter_block_invoke()
{
  v0 = (void *)MEMORY[0x1A6272C70]();
  id v1 = objc_alloc_init(MEMORY[0x1E4F28D48]);
  id v2 = objc_alloc(MEMORY[0x1E4F1C9A8]);
  uint64_t v3 = (void *)[v2 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
  objc_msgSend(v1, "setTimeZone:", objc_msgSend(v3, "timeZone"));
  [v1 setFormatOptions:1088];

  return v1;
}

uint64_t __FigCaptureMetadataUtilitiesGetTimeZoneFormatter_block_invoke_2(uint64_t a1)
{
  FigCaptureMetadataUtilitiesGetTimeZoneFormatter_sTimeZoneFormatter = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  id v2 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v3 = *MEMORY[0x1E4F1C4F8];
  uint64_t v4 = [MEMORY[0x1E4F28F08] mainQueue];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __FigCaptureMetadataUtilitiesGetTimeZoneFormatter_block_invoke_3;
  v6[3] = &unk_1E5C24FC8;
  v6[4] = *(void *)(a1 + 32);
  return [v2 addObserverForName:v3 object:0 queue:v4 usingBlock:v6];
}

void __FigCaptureMetadataUtilitiesGetTimeZoneFormatter_block_invoke_3(uint64_t a1)
{
  id v2 = (id)FigCaptureMetadataUtilitiesGetTimeZoneFormatter_sTimeZoneFormatter;
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  os_unfair_lock_lock((os_unfair_lock_t)&FigCaptureMetadataUtilitiesGetTimeZoneFormatter_sLock);
  FigCaptureMetadataUtilitiesGetTimeZoneFormatter_sTimeZoneFormatter = v1;
  os_unfair_lock_unlock((os_unfair_lock_t)&FigCaptureMetadataUtilitiesGetTimeZoneFormatter_sLock);
}

CGImageMetadata *FigCaptureMetadataUtilitiesCreateAuxiliaryImagePropertiesFromGainMapSampleBuffer(void *a1)
{
  Mutable = CGImageMetadataCreateMutable();
  uint64_t v3 = Mutable;
  if (!Mutable)
  {
    FigSignalErrorAt();
    return v3;
  }
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F55930];
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F55938];
  if (!CGImageMetadataRegisterNamespaceForPrefix(Mutable, (CFStringRef)*MEMORY[0x1E4F55930], (CFStringRef)*MEMORY[0x1E4F55938], 0))
  {
    if (!FigSignalErrorAt()) {
      return v3;
    }
    goto LABEL_17;
  }
  float v6 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53318]];
  float v7 = (const void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53308]];
  if ([v6 intValue] < 0x20000 || v6 == 0) {
    uint64_t v9 = 0x10000;
  }
  else {
    uint64_t v9 = [v6 intValue];
  }
  double v10 = (const void *)[NSNumber numberWithInt:v9];
  if (fcmu_addValueToAuxiliaryImageProperties(v3, v10, v4, v5, (CFStringRef)*MEMORY[0x1E4F55948])
    || v7 && fcmu_addValueToAuxiliaryImageProperties(v3, v7, v4, v5, (CFStringRef)*MEMORY[0x1E4F55940]))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_17:
    CFRelease(v3);
    return 0;
  }
  return v3;
}

uint64_t fcmu_addValueToAuxiliaryImageProperties(CGImageMetadata *a1, CFTypeRef value, CFStringRef xmlns, CFStringRef prefix, CFStringRef name)
{
  if (value)
  {
    CGImageMetadataTagRef v8 = CGImageMetadataTagCreate(xmlns, prefix, name, kCGImageMetadataTypeDefault, value);
    if (v8)
    {
      uint64_t v9 = v8;
      double v10 = (__CFString *)[[NSString alloc] initWithFormat:@"%@:%@", prefix, name];
      if (v10)
      {
        if (CGImageMetadataSetTagWithPath(a1, 0, v10, v9))
        {
          uint64_t v11 = 0;
        }
        else
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          uint64_t v11 = 4294954516;
        }
      }
      else
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v11 = 4294954510;
      }
      CFRelease(v9);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      double v10 = 0;
      uint64_t v11 = 4294954510;
    }
  }
  else
  {
    double v10 = 0;
    uint64_t v11 = 4294954516;
  }

  return v11;
}

CGImageMetadata *FigCaptureMetadataUtilitiesCreateAuxiliaryImagePropertiesFromDepthMetadata(void *a1)
{
  Mutable = CGImageMetadataCreateMutable();
  uint64_t v3 = Mutable;
  if (!Mutable)
  {
    FigSignalErrorAt();
    return v3;
  }
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F557C0];
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F557C8];
  if (!CGImageMetadataRegisterNamespaceForPrefix(Mutable, (CFStringRef)*MEMORY[0x1E4F557C0], (CFStringRef)*MEMORY[0x1E4F557C8], 0))goto LABEL_49; {
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F558A0]), "floatValue");
  }
  float v6 = (const void *)objc_msgSend(NSNumber, "numberWithFloat:");
  if (fcmu_addValueToAuxiliaryImageProperties(v3, v6, v4, v5, (CFStringRef)*MEMORY[0x1E4F55820])
    || ((CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F55828],
         objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F55828]), "intValue"))
      ? (CGImageMetadataTagRef v8 = @"high")
      : (CGImageMetadataTagRef v8 = @"low"),
        fcmu_addValueToAuxiliaryImageProperties(v3, v8, v4, v5, v7)
     || (uint64_t v9 = *MEMORY[0x1E4F55870],
         uint64_t v10 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F55870]), "BOOLValue"),
         uint64_t v11 = (const void *)[NSNumber numberWithBool:v10],
         fcmu_addValueToAuxiliaryImageProperties(v3, v11, v4, v5, (CFStringRef)*MEMORY[0x1E4F557E0]))
     || (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F55860]), "intValue") != 1
       ? (float v12 = @"relative")
       : (float v12 = @"absolute"),
         fcmu_addValueToAuxiliaryImageProperties(v3, v12, v4, v5, (CFStringRef)*MEMORY[0x1E4F557D0]))))
  {
    fig_log_get_emitter();
LABEL_57:
    FigDebugAssert3();
LABEL_58:
    CFRelease(v3);
    return 0;
  }
  CFDictionaryRef v13 = (const __CFDictionary *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55880]];
  if (v13)
  {
    size.double width = 0.0;
    size.double height = 0.0;
    if (CGSizeMakeWithDictionaryRepresentation(v13, &size))
    {
      uint64_t v14 = (const void *)[NSNumber numberWithDouble:size.width];
      if (fcmu_addValueToAuxiliaryImageProperties(v3, v14, v4, v5, (CFStringRef)*MEMORY[0x1E4F557F8])) {
        goto LABEL_56;
      }
      CMSampleBufferRef v15 = (const void *)[NSNumber numberWithDouble:size.height];
      if (fcmu_addValueToAuxiliaryImageProperties(v3, v15, v4, v5, (CFStringRef)*MEMORY[0x1E4F557F0])) {
        goto LABEL_56;
      }
    }
  }
  uint64_t v16 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55878]];
  if ([v16 length] == 48)
  {
    __n128 v46 = 0u;
    __n128 v47 = 0u;
    CGSize size = (CGSize)0;
    [v16 getBytes:&size length:48];
    uint64_t v17 = (const void *)fcmu_arrayInColumnMajorOrderFrom3x3MatrixData((__n128)size, v46, v47);
    if (fcmu_addValueToAuxiliaryImageProperties(v3, v17, v4, v5, (CFStringRef)*MEMORY[0x1E4F557E8])) {
      goto LABEL_56;
    }
  }
  long long v18 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55868]];
  if ([v18 length] == 64)
  {
    __n128 v47 = 0u;
    __n128 v48 = 0u;
    CGSize size = (CGSize)0;
    __n128 v46 = 0u;
    [v18 getBytes:&size length:64];
    long long v19 = (const void *)fcmu_arrayInColumnMajorOrderFrom3x4MatrixData((__n128)size, v46, v47, v48);
    if (fcmu_addValueToAuxiliaryImageProperties(v3, v19, v4, v5, (CFStringRef)*MEMORY[0x1E4F557D8])) {
      goto LABEL_56;
    }
  }
  uint64_t v20 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55898]];
  if ([v20 length] == 32)
  {
    uint64_t v21 = [v20 bytes];
    uint64_t v22 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:8];
    for (uint64_t i = 0; i != 32; i += 4)
    {
      LODWORD(v23) = *(_DWORD *)(v21 + i);
      objc_msgSend(v22, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v23));
    }
    if (fcmu_addValueToAuxiliaryImageProperties(v3, v22, v4, v5, (CFStringRef)*MEMORY[0x1E4F55818])) {
      goto LABEL_56;
    }
  }
  uint64_t v25 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55888]];
  if ([v25 length] == 32)
  {
    uint64_t v26 = [v25 bytes];
    uint64_t v27 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:8];
    for (uint64_t j = 0; j != 32; j += 4)
    {
      LODWORD(v28) = *(_DWORD *)(v26 + j);
      objc_msgSend(v27, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v28));
    }
    if (fcmu_addValueToAuxiliaryImageProperties(v3, v27, v4, v5, (CFStringRef)*MEMORY[0x1E4F55800])) {
      goto LABEL_56;
    }
  }
  CFDictionaryRef v30 = (const __CFDictionary *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55890]];
  if (v30)
  {
    size.double width = 0.0;
    size.double height = 0.0;
    if (CGPointMakeWithDictionaryRepresentation(v30, (CGPoint *)&size))
    {
      uint64_t v31 = (const void *)[NSNumber numberWithDouble:size.width];
      if (fcmu_addValueToAuxiliaryImageProperties(v3, v31, v4, v5, (CFStringRef)*MEMORY[0x1E4F55808])) {
        goto LABEL_56;
      }
      uint64_t v32 = (const void *)[NSNumber numberWithDouble:size.height];
      if (fcmu_addValueToAuxiliaryImageProperties(v3, v32, v4, v5, (CFStringRef)*MEMORY[0x1E4F55810])) {
        goto LABEL_56;
      }
    }
  }
  if ((uint64_t v33 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F558B0]), "intValue"),
        long long v34 = (const void *)[NSNumber numberWithInt:v33],
        fcmu_addValueToAuxiliaryImageProperties(v3, v34, v4, v5, (CFStringRef)*MEMORY[0x1E4F55848]))
    || (long long v35 = (const void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F558C0]]) != 0
    && fcmu_addValueToAuxiliaryImageProperties(v3, v35, v4, v5, (CFStringRef)*MEMORY[0x1E4F55858])
    || (uint64_t v36 = (const void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F558B8]]) != 0
    && fcmu_addValueToAuxiliaryImageProperties(v3, v36, v4, v5, (CFStringRef)*MEMORY[0x1E4F55850]))
  {
LABEL_56:
    fig_log_get_emitter();
    goto LABEL_57;
  }
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v9), "BOOLValue"))
  {
    CFStringRef v37 = (const __CFString *)*MEMORY[0x1E4F557A0];
    CFStringRef v38 = (const __CFString *)*MEMORY[0x1E4F557A8];
    if (CGImageMetadataRegisterNamespaceForPrefix(v3, (CFStringRef)*MEMORY[0x1E4F557A0], (CFStringRef)*MEMORY[0x1E4F557A8], 0))
    {
      CMTimeEpoch v39 = (const void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55798]];
      if (v39
        && fcmu_addValueToAuxiliaryImageProperties(v3, v39, v37, v38, (CFStringRef)*MEMORY[0x1E4F557B8]))
      {
        goto LABEL_56;
      }
      uint64_t v40 = (const void *)objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F55790]), "base64EncodedStringWithOptions:", 0);
      if (v40)
      {
        if (fcmu_addValueToAuxiliaryImageProperties(v3, v40, v37, v38, (CFStringRef)*MEMORY[0x1E4F557B0])) {
          goto LABEL_56;
        }
      }
      goto LABEL_44;
    }
LABEL_49:
    if (!FigSignalErrorAt()) {
      return v3;
    }
    goto LABEL_58;
  }
LABEL_44:
  if (!objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v9), "BOOLValue")) {
    return v3;
  }
  CFStringRef v41 = (const __CFString *)*MEMORY[0x1E4F55830];
  CFStringRef v42 = (const __CFString *)*MEMORY[0x1E4F55838];
  if (!CGImageMetadataRegisterNamespaceForPrefix(v3, (CFStringRef)*MEMORY[0x1E4F55830], (CFStringRef)*MEMORY[0x1E4F55838], 0))goto LABEL_49; {
  uint64_t v43 = (const void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55AB8]];
  }
  if (v43
    && fcmu_addValueToAuxiliaryImageProperties(v3, v43, v41, v42, (CFStringRef)*MEMORY[0x1E4F55840]))
  {
    goto LABEL_56;
  }
  return v3;
}

uint64_t fcmu_arrayInColumnMajorOrderFrom3x3MatrixData(__n128 a1, __n128 a2, __n128 a3)
{
  v10[9] = *MEMORY[0x1E4F143B8];
  v10[0] = objc_msgSend(NSNumber, "numberWithFloat:");
  HIDWORD(v3) = a1.n128_u32[1];
  LODWORD(v3) = a1.n128_u32[1];
  v10[1] = [NSNumber numberWithFloat:v3];
  v10[2] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v10[3] = [NSNumber numberWithFloat:a2.n128_f64[0]];
  HIDWORD(v4) = a2.n128_u32[1];
  LODWORD(v4) = a2.n128_u32[1];
  v10[4] = [NSNumber numberWithFloat:v4];
  v10[5] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a2.n128_u32[1], a2.n128_u32[2])));
  v10[6] = [NSNumber numberWithFloat:a3.n128_f64[0]];
  HIDWORD(v5) = a3.n128_u32[1];
  LODWORD(v5) = a3.n128_u32[1];
  v10[7] = [NSNumber numberWithFloat:v5];
  v10[8] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a3.n128_u32[1], a3.n128_u32[2])));
  return [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:9];
}

uint64_t fcmu_arrayInColumnMajorOrderFrom3x4MatrixData(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  v13[12] = *MEMORY[0x1E4F143B8];
  v13[0] = objc_msgSend(NSNumber, "numberWithFloat:");
  HIDWORD(v4) = a1.n128_u32[1];
  LODWORD(v4) = a1.n128_u32[1];
  v13[1] = [NSNumber numberWithFloat:v4];
  v13[2] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v13[3] = [NSNumber numberWithFloat:a2.n128_f64[0]];
  HIDWORD(v5) = a2.n128_u32[1];
  LODWORD(v5) = a2.n128_u32[1];
  v13[4] = [NSNumber numberWithFloat:v5];
  void v13[5] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a2.n128_u32[1], a2.n128_u32[2])));
  v13[6] = [NSNumber numberWithFloat:a3.n128_f64[0]];
  HIDWORD(v6) = a3.n128_u32[1];
  LODWORD(v6) = a3.n128_u32[1];
  v13[7] = [NSNumber numberWithFloat:v6];
  v13[8] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a3.n128_u32[1], a3.n128_u32[2])));
  v13[9] = [NSNumber numberWithFloat:a4.n128_f64[0]];
  HIDWORD(v7) = a4.n128_u32[1];
  LODWORD(v7) = a4.n128_u32[1];
  v13[10] = [NSNumber numberWithFloat:v7];
  v13[11] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a4.n128_u32[1], a4.n128_u32[2])));
  return [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:12];
}

uint64_t __fcmu_makerNoteMetadata_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  fcmu_makerNoteMetadata_sEligibleForLightingEffects = result;
  return result;
}

uint64_t fcmu_indexInMetadataArrayOfQuickTimeMetadataDictionary(void *a1)
{
  if (![a1 count]) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *MEMORY[0x1E4F33068];
  uint64_t v4 = *MEMORY[0x1E4F32FC0];
  while ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v2), "objectForKeyedSubscript:", v3), "isEqual:", v4) & 1) == 0)
  {
    if (++v2 >= (unint64_t)[a1 count]) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  return v2;
}

const void *BWStillImageCaptureFrameFlagsForSampleBuffer(const void *result)
{
  if (result)
  {
    uint64_t v1 = (void *)CMGetAttachment(result, @"StillImageCaptureFrameFlags", 0);
    return (const void *)[v1 unsignedLongLongValue];
  }
  return result;
}

void BWStillImageAppendCaptureFrameFlagsToSampleBuffer(const void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = (const void *)objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend((id)CMGetAttachment(a1, @"StillImageCaptureFrameFlags", 0), "unsignedLongLongValue") | a2);
    CMSetAttachment(a1, @"StillImageCaptureFrameFlags", v3, 1u);
  }
}

uint64_t BWStillImageCaptureFrameFlagsToShortString(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%lld", a1);
}

void BWAddStillImageCaptureFrameMetadataToSampleBuffer(const void *a1, void *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v45 = *a4;
    if (!a2) {
      return;
    }
  }
  else
  {
    uint64_t v45 = 0;
    if (!a2) {
      return;
    }
  }
  CFTypeRef v6 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (v6)
  {
    double v7 = (void *)v6;
    int v8 = [a2 captureType];
    int v9 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D38]), "intValue");
    uint64_t v10 = [a2 unifiedBracketedCaptureParams];
    if (v9 < 1)
    {
      switch(v8)
      {
        case 4:
        case 5:
          if ((int)[a2 expectedTimeMachineFrameCaptureCount] >= 1
            && (objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E4F54138]), "BOOLValue") & 1) == 0)
          {
LABEL_13:
            uint64_t v17 = *MEMORY[0x1E4F53250];
            CMSampleBufferRef v15 = &unk_1EFAFE340;
LABEL_44:
            [v7 setObject:v15 forKeyedSubscript:v17];
          }
          goto LABEL_45;
        case 10:
        case 12:
          if (!v45)
          {
            int v18 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E4F541A8]), "BOOLValue");
            uint64_t v19 = 2;
            if (v18) {
              uint64_t v19 = 4;
            }
            if (a3) {
              v19 |= 0x10uLL;
            }
            uint64_t v45 = v19;
          }
          goto LABEL_20;
        case 11:
LABEL_20:
          if (([a2 isUnifiedBracketingErrorRecoveryFrame:a1 isReferenceFrame:a3] & 1) == 0) {
            goto LABEL_45;
          }
          uint64_t v20 = v45 | 0x20;
          goto LABEL_62;
        default:
LABEL_45:
          uint64_t v20 = v45;
          if (v45) {
            goto LABEL_62;
          }
          uint64_t v34 = 0;
          if (!v4) {
            return;
          }
          goto LABEL_63;
      }
    }
    uint64_t v11 = (void *)v10;
    switch(v8)
    {
      case 1:
        [a2 captureFlags];
        goto LABEL_23;
      case 3:
        uint64_t v33 = objc_msgSend((id)objc_msgSend(a2, "bracketSettings"), "exposureValues");
        if ([v33 count] < (unint64_t)v9) {
          return;
        }
        objc_msgSend((id)objc_msgSend(v33, "objectAtIndexedSubscript:", (v9 - 1)), "doubleValue");
        CMSampleBufferRef v15 = objc_msgSend(NSNumber, "numberWithDouble:");
        uint64_t v16 = (uint64_t *)MEMORY[0x1E4F53450];
        goto LABEL_43;
      case 4:
        goto LABEL_13;
      case 5:
      case 6:
        float v12 = objc_msgSend((id)objc_msgSend(a2, "bracketSettings"), "oisBracketedCaptureParams");
        CFDictionaryRef v13 = (void *)[v12 objectForKeyedSubscript:*MEMORY[0x1E4F54448]];
        if ([v13 count] < (unint64_t)v9) {
          return;
        }
        uint64_t v14 = objc_msgSend((id)objc_msgSend(v13, "objectAtIndexedSubscript:", (v9 - 1)), "intValue");
        CMSampleBufferRef v15 = (void *)[NSNumber numberWithInt:v14];
        uint64_t v16 = (uint64_t *)MEMORY[0x1E4F53250];
LABEL_43:
        uint64_t v17 = *v16;
        goto LABEL_44;
      case 7:
LABEL_23:
        if (v11) {
          goto LABEL_24;
        }
        goto LABEL_45;
      case 10:
      case 11:
      case 12:
LABEL_24:
        int v21 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E4F541A8]), "BOOLValue");
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        uint64_t v22 = [v11 countByEnumeratingWithState:&v47 objects:v51 count:16];
        if (!v22) {
          return;
        }
        uint64_t v23 = v22;
        int v24 = 0;
        uint64_t v25 = *(void *)v48;
        uint64_t v26 = *MEMORY[0x1E4F55050];
        uint64_t v43 = v4;
        break;
      default:
        goto LABEL_45;
    }
    while (2)
    {
      for (uint64_t i = 0; i != v23; ++i)
      {
        if (*(void *)v48 != v25) {
          objc_enumerationMutation(v11);
        }
        double v28 = *(void **)(*((void *)&v47 + 1) + 8 * i);
        int v29 = objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", v26, v43), "intValue");
        if (v29 != 1) {
          ++v24;
        }
        BOOL v30 = v24 == v9 && v21 == (v29 == 1);
        if (v30)
        {
          uint64_t v4 = v43;
          if (v28)
          {
            uint64_t v20 = v45;
            if (v45)
            {
              uint64_t v31 = *MEMORY[0x1E4F55290];
              uint64_t v32 = *MEMORY[0x1E4F55000];
            }
            else
            {
              uint64_t v32 = *MEMORY[0x1E4F55000];
              objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", *MEMORY[0x1E4F55000]), "floatValue");
              float v36 = v35;
              uint64_t v31 = *MEMORY[0x1E4F55290];
              int v37 = objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", *MEMORY[0x1E4F55290]), "intValue");
              if (v36 < 0.0) {
                int v38 = 1;
              }
              else {
                int v38 = v21;
              }
              uint64_t v39 = 2;
              if (v37 == 2) {
                uint64_t v39 = 64;
              }
              if (v37 == 1) {
                uint64_t v39 = 8;
              }
              BOOL v30 = v38 == 0;
              uint64_t v40 = 4;
              if (v30) {
                uint64_t v40 = v39;
              }
              uint64_t v20 = a3 ? v40 | 0x10 : v40;
            }
            uint64_t v41 = [v28 objectForKeyedSubscript:v31];
            [v7 setObject:v41 forKeyedSubscript:*MEMORY[0x1E4F53548]];
            uint64_t v42 = [v28 objectForKeyedSubscript:v32];
            [v7 setObject:v42 forKeyedSubscript:*MEMORY[0x1E4F53450]];
LABEL_62:
            uint64_t v34 = v20;
            CMSetAttachment(a1, @"StillImageCaptureFrameFlags", (CFTypeRef)[NSNumber numberWithUnsignedLongLong:v20], 1u);
            if (v4) {
LABEL_63:
            }
              uint64_t *v4 = v34;
          }
          return;
        }
      }
      uint64_t v23 = [v11 countByEnumeratingWithState:&v47 objects:v51 count:16];
      if (v23) {
        continue;
      }
      break;
    }
  }
}

uint64_t BWStillImageBufferTypeForAttachedMediaKey(void *a1)
{
  if ([a1 isEqualToString:0x1EFA4EB60]) {
    return 19;
  }
  if ([a1 isEqualToString:0x1EFA745E0]) {
    return 21;
  }
  if ([a1 isEqualToString:@"Depth"]) {
    return 2001;
  }
  if (([a1 isEqualToString:0x1EFA6A200] & 1) != 0
    || ([a1 hasPrefix:0x1EFA6A360] & 1) != 0
    || ([a1 isEqualToString:0x1EFA74420] & 1) != 0
    || ([a1 isEqualToString:@"PersonSemanticsSkin"] & 1) != 0
    || ([a1 isEqualToString:0x1EFA745A0] & 1) != 0)
  {
    return 16;
  }
  if ([a1 isEqualToString:0x1EFA74720]) {
    return 41;
  }
  if ([a1 isEqualToString:0x1EFA74920]) {
    return 2002;
  }
  return 0;
}

uint64_t BWStillImageBufferTypeToShortString(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"Unknown (%llu)", a1);
}

uint64_t BWIsLastAdaptiveBracketingFrame(const void *a1)
{
  uint64_t v1 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F55B58], 0);
  return [v1 BOOLValue];
}

uint64_t BWReferenceFrameSelectionUsingBlurScores(void *a1, int a2, _DWORD *a3, _DWORD *a4)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  if (a2 < 1
    || [a1 count] < (unint64_t)a2
    || (unint64_t)[a1 count] > 4)
  {
    return 4294954516;
  }
  v13[0] = 0;
  v13[1] = 0;
  uint64_t result = FigMotionComputeBlurScores((uint64_t)a1, 3, 1, 1);
  if (!result)
  {
    if ((unint64_t)[a1 count] < 2)
    {
      int v9 = 0;
    }
    else
    {
      int v9 = 0;
      unint64_t v10 = 1;
      do
      {
        if (*((float *)v13 + v10) < *((float *)v13 + v9)) {
          int v9 = v10;
        }
        ++v10;
      }
      while ([a1 count] > v10);
    }
    LODWORD(v11) = v9;
    if (a2 != 1)
    {
      if (a2 == 2)
      {
        if (!v9)
        {
          LODWORD(v11) = 0;
          if (!a4)
          {
LABEL_25:
            uint64_t result = 0;
            if (a3) {
              *a3 = v11;
            }
            return result;
          }
LABEL_24:
          *a4 = v9;
          goto LABEL_25;
        }
        uint64_t v12 = [a1 count];
        uint64_t v11 = v9 - 1;
        if (v12 - 1 != v9)
        {
          if (*((float *)v13 + v11) > *((float *)v13 + v9 + 1)) {
            LODWORD(v11) = v9;
          }
          if (!a4) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      else if (v9 >= a2)
      {
        LODWORD(v11) = v9 - a2 + 1;
      }
      else
      {
        LODWORD(v11) = 0;
      }
    }
    if (!a4) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t BWReferenceFrameSelectionUsingMotionAndFocusScores(void *a1, void *a2, int a3, _DWORD *a4, int *a5)
{
  void v54[2] = *MEMORY[0x1E4F143B8];
  if (a3 < 1
    || [a1 count] < (unint64_t)a3
    || ![a1 count]
    || (unint64_t)[a1 count] > 4
    || [a2 count] != 3)
  {
    return 4294954516;
  }
  v54[0] = 0;
  v54[1] = 0;
  v53[0] = 0;
  v53[1] = 0;
  v52[0] = 0;
  v52[1] = 0;
  long long v49 = a5;
  long long v50 = a4;
  int v48 = a3;
  if ([a1 count])
  {
    unint64_t v10 = 0;
    uint64_t v11 = *MEMORY[0x1E4F540D0];
    uint64_t v12 = *MEMORY[0x1E4F53CE8];
    uint64_t v13 = *MEMORY[0x1E4F53ED8];
    uint64_t v14 = *MEMORY[0x1E4F544F8];
    uint64_t v51 = *MEMORY[0x1E4F53ED0];
    float v15 = 0.0;
    float v16 = 0.0;
    do
    {
      uint64_t v17 = (void *)[a1 objectAtIndexedSubscript:v10];
      objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", v11), "floatValue");
      float v19 = v18;
      *((float *)v54 + v10) = v18;
      objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", v12), "floatValue");
      float v21 = v20;
      *((float *)v53 + v10) = v20;
      uint64_t v22 = objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", v13), "objectForKeyedSubscript:", v14);
      if ([v22 count])
      {
        unint64_t v23 = objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", v51), "intValue") == 2;
        float v24 = 0.0;
        if ([v22 count] - 1 > v23)
        {
          unint64_t v25 = v23;
          do
          {
            objc_msgSend((id)objc_msgSend(v22, "objectAtIndexedSubscript:", v25), "floatValue");
            float v24 = v24 + v26;
            ++v25;
          }
          while (v25 < [v22 count] - 1);
        }
        uint64_t v27 = [v22 count] + ~v23;
        float v28 = v24 / (float)(unint64_t)v27;
        if (v28 > 0.0)
        {
          *((float *)v53 + v10) = v28;
          float v21 = v24 / (float)(unint64_t)v27;
        }
      }
      if (v16 <= v19) {
        float v16 = v19;
      }
      if (v15 <= v21) {
        float v15 = v21;
      }
      ++v10;
    }
    while ([a1 count] > v10);
  }
  else
  {
    float v16 = 0.0;
    float v15 = 0.0;
  }
  if ([a1 count])
  {
    unint64_t v29 = 0;
    do
    {
      *((float *)v54 + v29) = *((float *)v54 + v29) / v16;
      *((float *)v53 + v29) = *((float *)v53 + v29) / v15;
      ++v29;
    }
    while ([a1 count] > v29);
  }
  if ([a1 count])
  {
    unint64_t v30 = 0;
    int v31 = 0;
    float v32 = 3.4028e38;
    do
    {
      objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "floatValue");
      float v34 = v33;
      float v35 = *((float *)v53 + v30);
      objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", 1), "floatValue");
      float v37 = v34 + (float)(v35 * v36);
      float v38 = *((float *)v54 + v30);
      objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", 2), "floatValue");
      float v40 = v37 + (float)(v38 * v39);
      *((float *)v52 + v30) = v40;
      if (v40 < v32)
      {
        int v31 = v30;
        float v32 = v40;
      }
      ++v30;
    }
    while ([a1 count] > v30);
  }
  else
  {
    int v31 = 0;
  }
  uint64_t v41 = (void *)[MEMORY[0x1E4F28E60] indexSetWithIndex:v31];
  int v42 = [v41 count];
  int v43 = v48 - v42;
  if (v48 > v42)
  {
    do
    {
      uint64_t v44 = [v41 firstIndex] - 1;
      unint64_t v45 = [v41 lastIndex] + 1;
      if ((v44 & 0x8000000000000000) == 0)
      {
        if (v45 <= [a1 count] - 1)
        {
          if (*((float *)v52 + v44) <= *((float *)v52 + v45)) {
            unint64_t v45 = v44;
          }
        }
        else
        {
          unint64_t v45 = v44;
        }
      }
      [v41 addIndex:v45];
      --v43;
    }
    while (v43);
  }
  if (v49) {
    *long long v49 = v31;
  }
  if (!v50) {
    return 0;
  }
  int v46 = [v41 firstIndex];
  uint64_t result = 0;
  *long long v50 = v46;
  return result;
}

uint64_t BWCleanupRawStillImageSampleBuffer(CMAttachmentBearerRef target)
{
  if (BWCleanupRawStillImageSampleBuffer_onceToken != -1) {
    dispatch_once(&BWCleanupRawStillImageSampleBuffer_onceToken, &__block_literal_global_18);
  }
  uint64_t v2 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  uint64_t v3 = BWCleanupRawStillImageSampleBuffer_sGarbageKeys;
  return [v2 removeObjectsForKeys:v3];
}

id __BWCleanupRawStillImageSampleBuffer_block_invoke()
{
  v16[31] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F54040];
  v16[0] = *MEMORY[0x1E4F53D70];
  v16[1] = v0;
  uint64_t v1 = *MEMORY[0x1E4F53C70];
  v16[2] = *MEMORY[0x1E4F53D50];
  v16[3] = v1;
  uint64_t v2 = *MEMORY[0x1E4F53C10];
  void v16[4] = *MEMORY[0x1E4F53C48];
  v16[5] = v2;
  uint64_t v3 = *MEMORY[0x1E4F53C20];
  v16[6] = *MEMORY[0x1E4F53C28];
  v16[7] = v3;
  uint64_t v4 = *MEMORY[0x1E4F53C40];
  v16[8] = *MEMORY[0x1E4F53C18];
  v16[9] = v4;
  uint64_t v5 = *MEMORY[0x1E4F53C30];
  v16[10] = *MEMORY[0x1E4F53C38];
  v16[11] = v5;
  uint64_t v6 = *MEMORY[0x1E4F53C58];
  v16[12] = *MEMORY[0x1E4F53C60];
  v16[13] = v6;
  uint64_t v7 = *MEMORY[0x1E4F53C88];
  v16[14] = *MEMORY[0x1E4F53C50];
  v16[15] = v7;
  uint64_t v8 = *MEMORY[0x1E4F53C78];
  v16[16] = *MEMORY[0x1E4F53C80];
  v16[17] = v8;
  uint64_t v9 = *MEMORY[0x1E4F53C68];
  v16[18] = *MEMORY[0x1E4F53C90];
  v16[19] = v9;
  uint64_t v10 = *MEMORY[0x1E4F54000];
  v16[20] = *MEMORY[0x1E4F53C98];
  v16[21] = v10;
  uint64_t v11 = *MEMORY[0x1E4F53FF8];
  v16[22] = *MEMORY[0x1E4F54008];
  v16[23] = v11;
  uint64_t v12 = *MEMORY[0x1E4F53CF0];
  v16[24] = *MEMORY[0x1E4F53F18];
  v16[25] = v12;
  uint64_t v13 = *MEMORY[0x1E4F53F40];
  v16[26] = *MEMORY[0x1E4F53F38];
  v16[27] = v13;
  uint64_t v14 = *MEMORY[0x1E4F55760];
  v16[28] = *MEMORY[0x1E4F54398];
  v16[29] = v14;
  v16[30] = *MEMORY[0x1E4F55768];
  id result = (id)[MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:31];
  BWCleanupRawStillImageSampleBuffer_sGarbageKeys = (uint64_t)result;
  return result;
}

BOOL BWIsSmartStyleCapture(void *a1)
{
  return (objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "burstQualityCaptureEnabled") & 1) == 0
      && objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "smartStyle") != 0;
}

BOOL BWIsConstantColorPrimaryFrame(const void *a1)
{
  return BWSampleBufferGetAttachedMedia(a1, 0x1EFA74920) != 0;
}

uint64_t BWStillImageAutoWhiteBalanceReflowMaximumFrameCount()
{
  if ((int)FigCapturePlatformIdentifier() <= 10) {
    return 0;
  }
  else {
    return 50;
  }
}

uint64_t FigExternalStorageDeviceManagerGetClassID()
{
  return sFigExternalStorageDeviceManagerClassID;
}

uint64_t RegisterFigExternalStorageDeviceManagerBaseType()
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigExternalStorageDeviceManagerClassDesc, ClassID, 1, &sFigExternalStorageDeviceManagerClassID);
}

uint64_t FigExternalStorageDeviceManagerGetTypeID()
{
  MEMORY[0x1A62711C0](&FigExternalStorageDeviceManagerGetClassID_sRegisterFigExternalStorageDeviceManagerBaseTypeOnce, RegisterFigExternalStorageDeviceManagerBaseType);
  uint64_t v0 = sFigExternalStorageDeviceManagerClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

CFStringRef FigExternalStorageDeviceManagerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigExternalStorageDeviceManager %p]", a1);
}

uint64_t __BWInferenceTextLocalizationCurrentVersion_block_invoke()
{
  BOOL v0 = +[BWEspressoInferenceAdapter allowE5ForInferenceType:116];
  uint64_t result = (uint64_t)+[BWEspressoInferenceAdapter findAvailableVersion:&unk_1EFB02CC0 defaultOverrideKey:@"text_localization_version" versionLocator:BWInferenceTextLocalizationNetworkForVersion e5Bundle:v0];
  BWInferenceTextLocalizationCurrentVersion_version = result;
  word_1E96B78CC = WORD2(result);
  return result;
}

void sub_1A5AA1024(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A5AA1628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A5AA17EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A5AA1A80(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1A5AA2028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v18 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A5AA2318(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A5AA2458(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

double utlClamp(double a1)
{
  return fmax(fmin(a1, 1.0), 0.0);
}

double utlTransformRectDouble(float64x2_t *a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  a4.f64[0] = a2.f64[0] + a4.f64[0];
  a5.f64[0] = a3.f64[0] + a5.f64[0];
  return fmin(vdivq_f64(vaddq_f64(a1[4], vmlaq_n_f64(vmulq_n_f64(*a1, a2.f64[0]), a1[2], a3.f64[0])), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(a1[5], vmlaq_f64(vmulq_f64(a2, a1[1]), a3, a1[3])), 0)).f64[0], vdivq_f64(vaddq_f64(a1[4], vmlaq_n_f64(vmulq_n_f64(*a1, a4.f64[0]), a1[2], a5.f64[0])), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(a1[5], vmlaq_f64(vmulq_f64(a4, a1[1]), a5, a1[3])), 0)).f64[0]);
}

__n128 utlCreateTransformationDouble@<Q0>(int a1@<W0>, _OWORD *a2@<X8>, __n128 result@<Q0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  long long v8 = 0uLL;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  switch(a1)
  {
    case 1:
      *a2 = result.n128_u64[0];
      a2[1] = 0uLL;
      a2[3] = 0uLL;
      *((double *)&v8 + 1) = a4;
      a2[2] = v8;
      double v9 = a5 - a7 * result.n128_f64[0];
      double v10 = -a8;
      goto LABEL_6;
    case 3:
      *(void *)&long long v11 = 0;
      *a2 = COERCE_UNSIGNED_INT64(-result.n128_f64[0]);
      a2[1] = 0u;
      a2[3] = 0u;
      *((double *)&v11 + 1) = -a4;
      a2[2] = v11;
      double v9 = a5 + a7 * result.n128_f64[0];
      double v10 = a8;
      goto LABEL_6;
    case 6:
      *(void *)&long long v12 = 0;
      *((double *)&v12 + 1) = a4;
      *a2 = v12;
      a2[1] = 0uLL;
      a2[3] = 0uLL;
      *(double *)&long long v8 = -result.n128_f64[0];
      a2[2] = v8;
      double v9 = a5 + a8 * result.n128_f64[0];
      double v10 = -a7;
      goto LABEL_6;
    case 8:
      *(void *)&long long v13 = 0;
      *((double *)&v13 + 1) = -a4;
      *a2 = v13;
      a2[1] = 0u;
      a2[3] = 0u;
      a2[2] = result.n128_u64[0];
      double v9 = a5 - a8 * result.n128_f64[0];
      double v10 = a7;
LABEL_6:
      result.n128_f64[0] = v9 + a7;
      result.n128_f64[1] = a6 + v10 * a4 + a8;
      __asm { FMOV            V1.2D, #1.0 }
      a2[4] = result;
      a2[5] = _Q1;
      break;
    default:
      return result;
  }
  return result;
}

void fcn_addAllLookAheadMotionDataToMetadata(const void *a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFTypeRef v6 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  uint64_t v7 = (void *)v6;
  long long v8 = (uint64_t *)MEMORY[0x1E4F52F98];
  if (!a3)
  {
    id v11 = 0;
    if (!a2) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  uint64_t v22 = (void *)v6;
  unint64_t v23 = a2;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v9 = [a3 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = 0;
    uint64_t v12 = *(void *)v25;
    uint64_t v13 = *v8;
    uint64_t v14 = *MEMORY[0x1E4F534F0];
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v25 != v12) {
          objc_enumerationMutation(a3);
        }
        float v16 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        uint64_t v17 = [v16 objectForKeyedSubscript:v13];
        if (v17)
        {
          uint64_t v18 = v17;
          if ([v16 objectForKeyedSubscript:v14])
          {
            if (!v11) {
              id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            }
            [v11 addObject:v18];
          }
        }
        [v16 removeObjectForKey:v13];
      }
      uint64_t v10 = [a3 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v10);
  }
  else
  {
    id v11 = 0;
  }
  uint64_t v7 = v22;
  [v22 setObject:a3 forKeyedSubscript:*MEMORY[0x1E4F55710]];
  a2 = v23;
  long long v8 = (uint64_t *)MEMORY[0x1E4F52F98];
  if (v23)
  {
LABEL_19:
    uint64_t v19 = *v8;
    uint64_t v20 = [a2 objectForKeyedSubscript:*v8];
    if (v20)
    {
      uint64_t v21 = v20;
      if ([a2 objectForKeyedSubscript:*MEMORY[0x1E4F534F0]])
      {
        if (!v11) {
          id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        }
        [v11 addObject:v21];
      }
    }
    [a2 removeObjectForKey:v19];
    [v7 setObject:a2 forKeyedSubscript:*MEMORY[0x1E4F55708]];
  }
LABEL_25:
  if ([v11 count]) {
    CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53150], v11, 1u);
  }
}

uint64_t fcn_synchronizedSlaveFrameForSampleBuffer(const void *a1)
{
  uint64_t result = BWSampleBufferGetAttachedMedia(a1, 0x1EFA742E0);
  if (!result)
  {
    return BWSampleBufferGetAttachedMedia(a1, @"SynchronizedSlaveFrame");
  }
  return result;
}

CMTime *fcn_getEndingPTSOfFirstBufferInStagingQueue@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v4 + 16);
  uint64_t result = (CMTime *)[a1 count];
  if (result)
  {
    if (result == (CMTime *)1)
    {
      CFTypeRef v6 = (opaqueCMSampleBuffer *)[a1 objectAtIndexedSubscript:0];
      memset(&v11, 0, sizeof(v11));
      uint64_t result = CMSampleBufferGetDuration(&v11, v6);
      if ((v11.flags & 1) == 0) {
        return result;
      }
      CMSampleBufferGetPresentationTimeStamp(&lhs, v6);
      CMTime v8 = v11;
      uint64_t result = CMTimeAdd(&v10, &lhs, &v8);
      *(_OWORD *)a2 = *(_OWORD *)&v10.value;
      CMTimeEpoch epoch = v10.epoch;
    }
    else
    {
      uint64_t result = CMSampleBufferGetPresentationTimeStamp(&v11, (CMSampleBufferRef)[a1 objectAtIndexedSubscript:1]);
      *(_OWORD *)a2 = *(_OWORD *)&v11.value;
      CMTimeEpoch epoch = v11.epoch;
    }
    *(void *)(a2 + 16) = epoch;
  }
  return result;
}

CMSampleBufferRef fcn_createAudioBufferTrimmedToStartTime(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  CMItemCount timingArrayEntriesNeededOut = 0;
  CMSampleBufferRef sampleBufferOut = 0;
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(a1);
  CMSampleBufferGetSampleTimingInfoArray(a1, 0, 0, &timingArrayEntriesNeededOut);
  CMSampleBufferRef result = 0;
  if (timingArrayEntriesNeededOut == 1 && NumSamples >= 2)
  {
    memset(&timingInfoOut, 0, sizeof(timingInfoOut));
    OSStatus SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(a1, 0, &timingInfoOut);
    CMSampleBufferRef result = 0;
    if (!SampleTimingInfo)
    {
      memset(&v17, 0, sizeof(v17));
      CMSampleBufferGetPresentationTimeStamp(&v17, a1);
      FormatDescription = CMSampleBufferGetFormatDescription(a1);
      StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
      int32_t mSampleRate = (int)StreamBasicDescription->mSampleRate;
      CMTime time = v17;
      CMTimeConvertScale(&lhs, &time, mSampleRate, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      CMTime v17 = lhs;
      int32_t v11 = (int)StreamBasicDescription->mSampleRate;
      CMTime time = *a2;
      CMTimeConvertScale(&lhs, &time, v11, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      *(_OWORD *)&a2->value = *(_OWORD *)&lhs.value;
      CMTimeEpoch epoch = lhs.epoch;
      a2->CMTimeEpoch epoch = lhs.epoch;
      *(_OWORD *)&lhs.value = *(_OWORD *)&a2->value;
      lhs.CMTimeEpoch epoch = epoch;
      CMTime time = v17;
      CMTimeSubtract(&v14, &lhs, &time);
      v13.location = v14.value;
      if (v14.value <= 0)
      {
        return (CMSampleBufferRef)CFRetain(a1);
      }
      else if ((unint64_t)NumSamples <= v14.value)
      {
        return 0;
      }
      else
      {
        v13.length = NumSamples - v14.value;
        CMSampleBufferCopySampleBufferForRange((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v13, &sampleBufferOut);
        return sampleBufferOut;
      }
    }
  }
  return result;
}

uint64_t FigCaptureDeferredContainerManagerGetTypeID()
{
  if (FigCaptureDeferredContainerManagerGetClassID_onceToken != -1) {
    dispatch_once(&FigCaptureDeferredContainerManagerGetClassID_onceToken, &__block_literal_global_24);
  }
  uint64_t v0 = FigCaptureDeferredContainerManagerGetClassID_sFigCaptureDeferredContainerManagerClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

CFStringRef FigCaptureDeferredContainerManagerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptureDeferredContainerManager %p]", a1);
}

void psn_propagatePixelBufferDolbyVisionRPUData(__CVBuffer *a1, CVBufferRef buffer)
{
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F24AF0];
  CFTypeRef v5 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24AF0], 0);
  CFTypeRef v6 = CVBufferCopyAttachment(a1, v4, 0);
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    CVBufferSetAttachment(buffer, v4, v6, kCVAttachmentMode_ShouldPropagate);
LABEL_10:
    CFRelease(v6);
    return;
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    goto LABEL_10;
  }
}

void psn_propagatePixelBufferAmbientViewingEnvironment(__CVBuffer *a1, __CVBuffer *a2)
{
  IOSurface = CVPixelBufferGetIOSurface(a1);
  CFStringRef v4 = CVPixelBufferGetIOSurface(a2);
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F249F0];
  CFTypeRef v6 = IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E4F249F0]);
  IOSurfaceSetValue(v4, v5, v6);
  if (v6)
  {
    CFRelease(v6);
  }
}

CGFloat psn_blurPixelBufferBorder(void *a1, CVPixelBufferRef pixelBuffer, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, float a7)
{
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  double v15 = (double)Width;
  double Height = (double)CVPixelBufferGetHeight(pixelBuffer);
  v24.size.double width = (double)Width + -2.0;
  v24.size.double height = Height + -2.0;
  v24.origin.CGFloat x = 1.0;
  v24.origin.CGFloat y = 1.0;
  v23.origin.CGFloat x = a3;
  v23.origin.CGFloat y = a4;
  v23.size.double width = a5;
  v23.size.double height = a6;
  if (!CGRectContainsRect(v23, v24))
  {
    if (a1)
    {
      if (pixelBuffer)
      {
        double v17 = Height - (a4 + a6);
        uint64_t v18 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1E050], "imageWithCVPixelBuffer:", pixelBuffer), "imageByClampingToRect:", a3, v17, a5, a6), "imageByApplyingGaussianBlurWithSigma:", a7);
        id v19 = (id)[objc_alloc(MEMORY[0x1E4F1E070]) initWithPixelBuffer:pixelBuffer];
        if (!Width
          || v17 == 0.0
          || (uint64_t v22 = 0,
              objc_msgSend((id)objc_msgSend(a1, "startTaskToRender:fromRect:toDestination:atPoint:error:", v18, v19, 0, 0.0, 0.0, v15, Height - (a4 + a6), 0.0, 0.0), "waitUntilCompletedAndReturnError:", &v22), !v22))
        {
          if (!Width
            || (double v20 = Height - (a6 + v17), v20 == 0.0)
            || (uint64_t v22 = 0,
                objc_msgSend((id)objc_msgSend(a1, "startTaskToRender:fromRect:toDestination:atPoint:error:", v18, v19, 0, 0.0, a6 + v17, v15, v20, 0.0, a6 + v17), "waitUntilCompletedAndReturnError:", &v22), !v22))
          {
            if (a3 == 0.0
              || a6 == 0.0
              || (uint64_t v22 = 0,
                  objc_msgSend((id)objc_msgSend(a1, "startTaskToRender:fromRect:toDestination:atPoint:error:", v18, v19, 0, 0.0, Height - (a4 + a6), a3, a6, 0.0, Height - (a4 + a6)), "waitUntilCompletedAndReturnError:", &v22), !v22))
            {
              if (v15 - (a3 + a5) == 0.0) {
                return 0.0;
              }
              if (a6 == 0.0) {
                return 0.0;
              }
              uint64_t v22 = 0;
              [(id)objc_msgSend(a1 startTaskToRender:v18 fromRect:v19 toDestination:0) atPoint:"waitUntilCompletedAndReturnError:" error:&v22];
              if (!v22) {
                return 0.0;
              }
            }
          }
        }
      }
    }
  }
  return a3;
}

uint64_t psn_imageWithBlurredEdges(void *a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, double a9, double a10, float a11, float a12)
{
  CGRect v24 = (void *)[MEMORY[0x1E4F1E040] sourceOverCompositingFilter];
  long long v25 = (void *)[MEMORY[0x1E4F1E040] radialGradientFilter];
  v61.origin.CGFloat x = a3;
  v61.origin.CGFloat y = a4;
  v61.size.double width = a5;
  v61.size.double height = a6;
  double MidX = CGRectGetMidX(v61);
  v62.origin.CGFloat x = a3;
  v62.origin.CGFloat y = a4;
  v62.size.double width = a5;
  v62.size.double height = a6;
  objc_msgSend(v25, "setCenter:", MidX, CGRectGetMidY(v62));
  if (a5 >= a6) {
    double v27 = a6;
  }
  else {
    double v27 = a5;
  }
  double v28 = a11;
  if (a11 > 1.0) {
    double v28 = 1.0;
  }
  float v29 = v28;
  double v30 = 1.0 - v29;
  double v31 = v27 * 0.5;
  if (v28 >= 0.0) {
    double v32 = v30;
  }
  else {
    double v32 = 1.0;
  }
  double v33 = v31 * v32;
  *(float *)&double v33 = v33;
  [v25 setRadius0:v33];
  *(float *)&double v34 = v31;
  [v25 setRadius1:v34];
  float v35 = 1.0;
  if (a12 <= 1.0) {
    float v35 = a12;
  }
  if (v35 < 0.0) {
    float v35 = 0.0;
  }
  float v36 = (float)(v35 * 0.6) + 0.4;
  float v37 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC88]);
  objc_msgSend(v25, "setColor0:", objc_msgSend(MEMORY[0x1E4F1E008], "colorWithRed:green:blue:colorSpace:", v37, 0.0, 0.0, 0.0));
  objc_msgSend(v25, "setColor1:", objc_msgSend(MEMORY[0x1E4F1E008], "colorWithRed:green:blue:colorSpace:", v37, v36, v36, v36));
  float v38 = (void *)[v25 outputImage];
  CGColorSpaceRelease(v37);
  long long v54 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v60.CGFloat a = *MEMORY[0x1E4F1DAB8];
  long long v53 = *(_OWORD *)&v60.a;
  *(_OWORD *)&v60.CGFloat c = v54;
  *(_OWORD *)&v60.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  long long v52 = *(_OWORD *)&v60.tx;
  [v25 center];
  CGFloat v40 = -v39;
  [v25 center];
  CGAffineTransformMakeTranslation(&t2, v40, -v41);
  *(_OWORD *)&t1.CGFloat a = v53;
  *(_OWORD *)&t1.CGFloat c = v54;
  *(_OWORD *)&t1.tCGFloat x = v52;
  CGAffineTransformConcat(&v60, &t1, &t2);
  CGAffineTransformMakeScale(&v57, a5 / v27, a6 / v27);
  CGAffineTransform v56 = v60;
  CGAffineTransformConcat(&t1, &v56, &v57);
  CGAffineTransform v60 = t1;
  [v25 center];
  CGFloat v43 = v42;
  [v25 center];
  CGAffineTransformMakeTranslation(&v55, v43, v44);
  CGAffineTransform v56 = v60;
  CGAffineTransformConcat(&t1, &v56, &v55);
  CGAffineTransform v60 = t1;
  objc_msgSend(v24, "setInputImage:", objc_msgSend((id)objc_msgSend(v38, "imageByApplyingTransform:", &t1), "imageByCroppingToRect:", a3, a4, a5, a6));
  objc_msgSend(v24, "setBackgroundImage:", objc_msgSend(MEMORY[0x1E4F1E050], "whiteImage"));
  if ((a2 & 1) == 0)
  {
    unint64_t v45 = (void *)[MEMORY[0x1E4F1E040] maskedVariableBlurFilter];
    objc_msgSend(v45, "setInputImage:", objc_msgSend(a1, "imageByCroppingToRect:", a7, a8, a9, a10));
    objc_msgSend(v45, "setMask:", objc_msgSend(v24, "outputImage"));
    LODWORD(v46) = 6.0;
    [v45 setRadius:v46];
    CGRect v24 = v45;
  }
  return [v24 outputImage];
}

uint64_t __psn_attachedMediaKeysToPropagateForStyles_block_invoke()
{
  uint64_t result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", 0x1EFA74840, 0x1EFA748A0, 0);
  psn_attachedMediaKeysToPropagateForStyles_propagatingKeysForStyles = result;
  return result;
}

double ptmsn_getSampleBufferPTS@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  CFDictionaryRef v4 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F530C0], 0);
  CMTimeMakeFromDictionary((CMTime *)a2, v4);
  if ((*(unsigned char *)(a2 + 12) & 1) == 0)
  {
    CMSampleBufferGetPresentationTimeStamp(&v6, (CMSampleBufferRef)a1);
    double result = *(double *)&v6.value;
    *(CMTime *)a2 = v6;
  }
  return result;
}

CFStringRef FigCaptureDeferredPhotoProcessorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptureDeferredPhotoProcessor %p]", a1);
}

__CFString *mfsp_pipelineNameFromSmartStyleAttachedMediaKey(void *a1)
{
  if ([a1 isEqualToString:@"HumanFullBodiesMask"]) {
    return @"Person";
  }
  if ([a1 isEqualToString:@"HumanSkinsMask"]) {
    return @"Skin";
  }
  if ([a1 isEqualToString:0x1EFA74700]) {
    return @"Sky";
  }
  if ([a1 isEqualToString:0x1EFA748E0]) {
    return @"Linear-Thumbnail";
  }
  if ([a1 isEqualToString:0x1EFA74900]) {
    return @"Delta-Map";
  }
  return @"Unknown";
}

uint64_t mfsp_buildMovieFileScalerNode(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, char a9, unsigned int a10)
{
  uint64_t v28 = 0;
  if ([a1 irisVISEnabled]) {
    int v16 = 0;
  }
  else {
    int v16 = objc_msgSend(a1, "requiresScalingForInputTransForm:nodeName:", a3, a4, @"Movie File Scaler");
  }
  double v17 = objc_alloc_init(BWPixelTransferNode);
  uint64_t v18 = v17;
  if ((v16 & 1) == 0 && (a9 & 1) == 0) {
    [(BWPixelTransferNode *)v17 setPassesBuffersThroughWhenPossible:1];
  }
  id v19 = (void *)[MEMORY[0x1E4F28E78] stringWithString:@"Movie File "];
  double v20 = v19;
  if (v16) {
    [v19 appendString:@"Scaler/"];
  }
  [v20 appendString:@"Zoomer/"];
  objc_msgSend(v20, "deleteCharactersInRange:", objc_msgSend(v20, "length") - 1, 1);
  [(BWPixelTransferNode *)v18 passesBuffersThroughWhenPossible];
  [(BWNode *)v18 setName:v20];
  uint64_t v21 = objc_msgSend((id)objc_msgSend(a1, "sourceConfiguration"), "requiredFormat");
  unint64_t v22 = [v21 dimensions];
  unint64_t v23 = HIDWORD(v22);
  int v24 = v22;
  if ([a1 outputWidth] && objc_msgSend(a1, "outputHeight"))
  {
    int v24 = [a1 outputWidth];
    LODWORD(v23) = [a1 outputHeight];
  }
  [(BWPixelTransferNode *)v18 setCropMode:1];
  [(BWPixelTransferNode *)v18 setOutputWidth:v24];
  [(BWPixelTransferNode *)v18 setOutputHeight:(int)v23];
  [(BWPixelTransferNode *)v18 setMaxLossyCompressionLevel:a10];
  if (a9) {
    [(BWPixelTransferNode *)v18 setOutputColorSpaceProperties:6];
  }
  if (!FigCapturePlatformSupportsHTPC16x8Compression()
    && !FigCapturePlatformSupportsUniversalCompression())
  {
    -[BWPixelTransferNode setOutputPixelFormat:](v18, "setOutputPixelFormat:", [v21 format]);
  }
  [(BWPixelTransferNode *)v18 setExpectsMarkerBuffers:1];
  if ([a6 addNode:v18 error:&v28])
  {
    *a8 = v18;
    if (objc_msgSend(a5, "connectOutput:toInput:pipelineStage:", a2, -[BWNode input](v18, "input"), a7)) {
      return (uint64_t)[(BWNode *)v18 output];
    }
  }
  FigDebugAssert3();
  return a2;
}

void AppC3DUpdateCallbackHandler(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v10 = [a1 referencedObject];
  if (!a7 && v10)
  {
    -[BWAppClipCodeNode didReceiveAppC3DUpdate:userData:](v10, a2, a6);
  }
}

uint64_t FigCaptureSourceRemoteCopyProxySource(uint64_t a1, uint64_t a2)
{
  xpc_object_t xdict = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || FigXPCMessageSetCFString()
    || ([MEMORY[0x1E4F1C9B8] dataWithBytes:a2 length:32], FigXPCMessageSetCFData())
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    fig_log_get_emitter();
    goto LABEL_11;
  }
  xpc_object_t value = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E4F202A8]);
  if (value && captureSourceRemote_createInternal(value, &v5))
  {
    fig_log_get_emitter();
LABEL_11:
    FigDebugAssert3();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t FigCaptureSourceRemoteMaxStillImageJPEGDataSize()
{
  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t uint64 = 0;
  }
  else
  {
    uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F202A8]);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return uint64;
}

uint64_t FigCaptureSourceRemoteShowVideoEffectUserInterfaceForCinematicFramingOnboardingUI(void *a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier"), "isEqualToString:", @"com.apple.CMViewSrvc");
  if (result)
  {
    return captureSourceRemote_ShowSystemUserInterface(1, a1, a2);
  }
  return result;
}

uint64_t captureSourceRemote_ShowSystemUserInterface(int a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  CFDictionaryRef v4 = a2;
  if (!a2)
  {
    CFDictionaryRef v4 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier");
    if (v3) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "objectForInfoDictionaryKey:", @"CFBundleExecutable");
    goto LABEL_3;
  }
  if (!a3) {
    goto LABEL_8;
  }
LABEL_3:
  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_string(0, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_BundleID, (const char *)[v4 UTF8String]), xpc_dictionary_set_string(0, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_AppName, (const char *)objc_msgSend(v3, "UTF8String")), xpc_dictionary_set_int64(0, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_SystemUserInterface, a1), FigXPCRemoteClientSendSyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

uint64_t FigCaptureSourceRemoteShowSystemUserInterface(int a1)
{
  return captureSourceRemote_ShowSystemUserInterface(a1, 0, 0);
}

uint64_t FigCaptureSourceRemotePublishFrameSenderServerEndpoint(void *a1, void *a2, void *a3, int a4, int a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (csr_ensureClientEstablished_0() || FigXPCCreateBasicMessage()) {
    goto LABEL_10;
  }
  xpc_dictionary_set_value(xdict, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_Endpoint, a1);
  xpc_dictionary_set_string(xdict, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointUniqueID, (const char *)[a2 UTF8String]);
  xpc_dictionary_set_string(xdict, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointType, (const char *)[a3 UTF8String]);
  xpc_dictionary_set_int64(xdict, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointPID, a4);
  xpc_dictionary_set_int64(xdict, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointProxyPID, a5);
  FigXPCMessageSetCFData();
  if (a7) {
    FigXPCMessageSetCFData();
  }
  double v15 = (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointCameraUniqueID;
  int v16 = a8 ? (const char *)[a8 UTF8String] : "unknown";
  xpc_dictionary_set_string(xdict, v15, v16);
  if (FigXPCRemoteClientSendSyncMessage())
  {
LABEL_10:
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

uint64_t FigCaptureSourceRemoteSuppressFrameSenderServerEndpoint(void *a1)
{
  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_string(0, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointUniqueID, (const char *)[a1 UTF8String]), FigXPCRemoteClientSendSyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

NSDictionary *FigCaptureSourceRemoteCopyFrameSenderEndpoints()
{
  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || FigXPCRemoteClientSendSyncMessageCreatingReply()
    || (xpc_object_t value = xpc_dictionary_get_value(0, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointArray)) == 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v3 = 0;
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v1 = [[CMCaptureFrameSenderEndpoints alloc] initWithXPCArrayOfFrameSenderEndpoints:value];
    uint64_t v2 = v1;
    if (v1)
    {
      uint64_t v3 = [(CMCaptureFrameSenderEndpoints *)v1 endpointsByPID];
      if (!v3)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v3 = 0;
    }
  }
  FigXPCRelease();
  FigXPCRelease();

  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t csr_deadConnectionCallback_0(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = result;
  if (!a1)
  {
    fig_log_get_emitter();
    uint64_t result = FigDebugAssert3();
  }
  *(unsigned char *)(v3 + 9) = 1;
  return result;
}

void csr_deadServerCallback()
{
}

void __csr_deadServerCallback_block_invoke()
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"CaptureSourceConnectionDied", 0, 0, 0);
}

uint64_t captureSourceRemote_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v1 = DerivedStorage;
    *(unsigned char *)(DerivedStorage + 8) = 1;
    uint64_t v2 = *(const void **)(DerivedStorage + 16);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(v1 + 16) = 0;
    }
    uint64_t v3 = *(const void **)(v1 + 32);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v1 + 32) = 0;
    }
    CFDictionaryRef v4 = *(const void **)(v1 + 40);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v1 + 40) = 0;
    }
    if (!*(unsigned char *)(v1 + 9))
    {
      uint64_t v7 = FigXPCCreateBasicMessage();
      if (v7)
      {
        uint64_t v5 = v7;
        fig_log_get_emitter();
      }
      else
      {
        uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
        if (!v5)
        {
LABEL_13:
          FigXPCRelease();
          FigXPCRemoteClientKillServerOnTimeout();
          return v5;
        }
        fig_log_get_emitter();
      }
      FigDebugAssert3();
      goto LABEL_13;
    }
  }
  return 0;
}

uint64_t captureSourceRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureSourceRemote_Invalidate();
  uint64_t result = sCaptureSourceRemoteClient;
  if (sCaptureSourceRemoteClient) {
    uint64_t result = FigXPCRemoteClientDisassociateObject();
  }
  if (!*(unsigned char *)(DerivedStorage + 9))
  {
    if (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigXPCRelease();
    return FigXPCRemoteClientKillServerOnTimeout();
  }
  return result;
}

__CFString *captureSourceRemote_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    CMTime v6 = " (invalidated)";
  }
  else {
    CMTime v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptureSourceRemote %p retainCount: %ld%s allocator: %p, objectID: %lld>", a1, v5, v6, v7, *(void *)DerivedStorage);
  return Mutable;
}

uint64_t captureSourceRemote_CheckTCCAccess(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = captureSourceRemote_createBasicMessage(a1, 1668572003, &v4);
  if (v1)
  {
    uint64_t v2 = v1;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
  if (v2)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureSourceRemote_UnregisterNotificationForProprietaryDefaultChanges(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = captureSourceRemote_createBasicMessage(a1, 1970172004, &v4);
  if (v1 || (uint64_t v1 = FigXPCMessageSetCFString(), v1))
  {
    uint64_t v2 = v1;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_4;
  }
  uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
  if (v2)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureSourceRemote_UpdateCameraOverrideHistory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned char *a6, void *a7)
{
  xpc_object_t xdict = 0;
  *a6 = 0;
  *a7 = 0;
  uint64_t v9 = csr_ensureClientEstablished_0();
  if (v9)
  {
    uint64_t v11 = v9;
    fig_log_get_emitter();
LABEL_10:
    FigDebugAssert3();
    goto LABEL_7;
  }
  uint64_t v10 = captureSourceRemote_createBasicMessage(a1, 1969450856, &xdict);
  if (v10
    || (uint64_t v10 = FigXPCMessageSetCFString(), v10)
    || (xpc_dictionary_set_BOOL(xdict, (const char *)kFigCaptureSourceRemoteCameraOverrideHistoryMessageKey_SetOverride, a5 != 0), uint64_t v10 = FigXPCMessageSetCFDictionary(), v10)|| (uint64_t v10 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v10))
  {
    uint64_t v11 = v10;
    fig_log_get_emitter();
    goto LABEL_10;
  }
  uint64_t v11 = 0xFFFFFFFFLL;
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  return v11;
}

uint64_t captureSourceRemote_PerformReactionEffect(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v2 = csr_ensureClientEstablished_0();
  if (v2)
  {
    uint64_t v4 = v2;
    fig_log_get_emitter();
LABEL_10:
    FigDebugAssert3();
    goto LABEL_5;
  }
  uint64_t v3 = captureSourceRemote_createBasicMessage(a1, 1919120496, &v6);
  if (v3 || (uint64_t v3 = FigXPCMessageSetCFString(), v3))
  {
    uint64_t v4 = v3;
    fig_log_get_emitter();
    goto LABEL_10;
  }
  uint64_t v4 = FigXPCRemoteClientSendAsyncMessage();
  if (v4)
  {
    fig_log_get_emitter();
    goto LABEL_10;
  }
LABEL_5:
  FigXPCRelease();
  return v4;
}

uint64_t captureSourceRemote_SetPixelBufferProperty(uint64_t a1, uint64_t a2, __CVBuffer *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v4 = captureSourceRemote_createBasicMessage(a1, 1937010786, &xdict);
  if (v4 || (uint64_t v4 = FigXPCMessageSetCFString(), v4))
  {
    uint64_t v7 = v4;
    fig_log_get_emitter();
LABEL_11:
    FigDebugAssert3();
    goto LABEL_7;
  }
  if (a3)
  {
    IOSurface = CVPixelBufferGetIOSurface(a3);
    if (!IOSurface)
    {
      uint64_t v7 = 4294954516;
      goto LABEL_7;
    }
    xpc_object_t XPCObject = IOSurfaceCreateXPCObject(IOSurface);
    xpc_dictionary_set_value(xdict, (const char *)kFigCaptureSourceRemoteProprietaryDefaultMessagePayload_Value, XPCObject);
    xpc_release(XPCObject);
  }
  uint64_t v7 = FigXPCRemoteClientSendSyncMessage();
  if (v7)
  {
    fig_log_get_emitter();
    goto LABEL_11;
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t captureSourceRemote_CopyWildcardProprietaryDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  if (!a3)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  uint64_t v3 = captureSourceRemote_createBasicMessage(a1, 1663725668, &v6);
  if (!v3)
  {
    uint64_t v3 = FigXPCMessageSetCFString();
    if (!v3)
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3)
      {
        fig_log_get_emitter();
LABEL_9:
        FigDebugAssert3();
        uint64_t v5 = 0;
        goto LABEL_6;
      }
    }
  }
  uint64_t v5 = v3;
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_6:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t captureSourceRemote_SetWildcardProprietaryDefault(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = 0;
  uint64_t v5 = captureSourceRemote_createBasicMessage(a1, 1932161124, &v9);
  if (v5
    || (uint64_t v5 = FigXPCMessageSetCFString(), v5)
    || (uint64_t v5 = FigXPCMessageSetCFObject(), v5)
    || (uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v5))
  {
    uint64_t v7 = v5;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x1A6272C70]();
    uint64_t v7 = FigXPCMessageCopyCFObject();
    *a4 = 0;
    if (v7)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

BOOL sis_encoderCanCropDenormalizedZoomRect(unint64_t a1, unint64_t a2, double a3, double a4, double a5, double a6)
{
  BOOL v6 = a5 == (double)a1 && a6 == (double)a2;
  return v6 && ((int)a3 & 1) == 0 && ((int)a4 & 1) == 0 && ((int)a5 & 1) == 0 && ((int)a6 & 1) == 0;
}

void mrcn_processorOutputReadyCallback(void *a1, int a2, void *target)
{
  uint64_t v5 = objc_msgSend((id)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0), "objectForKeyedSubscript:", *MEMORY[0x1E4F52C20]);
  long long v12 = 0uLL;
  CMTimeEpoch v13 = 0;
  uint64_t v6 = objc_msgSend(v5, "count", BWGetOriginalPresentationTimeStampFromBuffer(target, (uint64_t)&v12));
  *(_OWORD *)&sampleTimingArray.duration.xpc_object_t value = v12;
  sampleTimingArray.duration.CMTimeEpoch epoch = v13;
  if (-[BWMRCNode _shouldEmitSBufForBarcodeCount:originalPTS:]((uint64_t)a1, v6, (long long *)&sampleTimingArray.duration.value))
  {
    memset(&timingArrayOut, 0, sizeof(timingArrayOut));
    CMSampleBufferGetSampleTimingInfoArray((CMSampleBufferRef)target, 1, &timingArrayOut, 0);
    CMSampleBufferGetPresentationTimeStamp(&v10, (CMSampleBufferRef)target);
    CMSampleBufferRef v14 = 0;
    *(_OWORD *)&sampleTimingArray.duration.xpc_object_t value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    sampleTimingArray.presentationTimeStamp = v10;
    sampleTimingArray.duration.CMTimeEpoch epoch = v7;
    *(_OWORD *)&sampleTimingArray.decodeTimeStamp.xpc_object_t value = *(_OWORD *)&sampleTimingArray.duration.value;
    sampleTimingArray.decodeTimeStamp.CMTimeEpoch epoch = v7;
    OSStatus v8 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, &v14);
    CMSampleBufferRef v9 = v14;
    if (v14 && !v8)
    {
      CMSetAttachment(v14, (CFStringRef)*MEMORY[0x1E4F52FA0], v5, 1u);
      CMSetAttachment(v14, (CFStringRef)*MEMORY[0x1E4F52FA8], (CFTypeRef)objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v5, "count")), 1u);
      CMSampleBufferRef v9 = v14;
    }
    if (v9)
    {
      objc_msgSend((id)objc_msgSend(a1, "output"), "emitSampleBuffer:", v9);
      CFRelease(v9);
    }
  }
}

uint64_t ___getCurrentPipelineStageKey_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&_getCurrentPipelineStageKey_key, 0);
}

uint64_t gnrn_createSampleBufferProcessorFunction()
{
  return FigSampleBufferProcessorCreateForCustom();
}

void sub_1A5AC7DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureCameraStreamingPowerLogInitialize(void *a1, void *a2)
{
  v15[3] = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v4 = [MEMORY[0x1E4F1C9C8] date];
  if (!sCameraStreamingPowerEventsByPortType) {
    sCameraStreamingPowerEventsByPortType = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  if (!sCameraPowerLogEventQueue) {
    sCameraPowerLogEventQueue = FigDispatchQueueCreateWithPriority();
  }
  if (!sOSStateHandle_0)
  {
    uint64_t v5 = [FigCaptureOSStateHandle alloc];
    sOSStateHandle_0 = [(FigCaptureOSStateHandle *)v5 initWithTitle:@"FigCapturePowerLogSupport" queue:sCameraPowerLogEventQueue dataProviderBlock:&__block_literal_global_29];
  }
  if ([a1 count])
  {
    unint64_t v6 = 0;
    uint64_t v7 = MEMORY[0x1E4F1CC28];
    do
    {
      CFStringRef v8 = (const __CFString *)[a1 objectAtIndexedSubscript:v6];
      CFComparisonResult v9 = figCapturePowerLoggingCameraTypeForPortTypeAndDeviceType(v8, objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v6), "intValue"));
      v15[0] = v7;
      v14[0] = @"Streaming";
      v14[1] = @"CameraType";
      uint64_t v10 = [NSNumber numberWithInt:v9];
      v14[2] = @"Timestamp";
      v15[1] = v10;
      void v15[2] = v4;
      uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:3];
      [(id)sCameraStreamingPowerEventsByPortType setObject:v11 forKeyedSubscript:v8];
      ++v6;
    }
    while ([a1 count] > v6);
  }
  dispatch_async((dispatch_queue_t)sCameraPowerLogEventQueue, &__block_literal_global_26);
  uint64_t result = FigDebugIsInternalBuild();
  if (result)
  {
    if (!sMissingCameraStopEventObserver)
    {
      CMTimeEpoch v13 = [FigCapturePowerLogMissingCameraStopEventObserver alloc];
      uint64_t result = (uint64_t)-[FigCapturePowerLogMissingCameraStopEventObserver initWithQueue:](v13, (void *)sCameraPowerLogEventQueue);
      sMissingCameraStopEventObserver = result;
    }
  }
  return result;
}

void *__FigCaptureCameraStreamingPowerLogInitialize_block_invoke()
{
  dispatch_assert_queue_V2((dispatch_queue_t)sCameraPowerLogEventQueue);
  uint64_t v0 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v0 setObject:sCameraStreamingPowerEventsByPortType forKeyedSubscript:@"Camera Streaming Power Events"];
  CFStringRef v1 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPropertyListRef v3 = (id)CFPreferencesCopyValue(@"LastShownMissingCameraStopPowerEventTTRPromptDate", @"com.apple.cameracapture.volatile", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  CFPropertyListRef v4 = (id)CFPreferencesCopyValue(@"LastShownMissingCameraStopPowerEventTTRPromptBuildVersion", @"com.apple.cameracapture.volatile", v1, v2);
  if (v3) {
    [v0 setObject:v3 forKeyedSubscript:@"LastShownMissingCameraStopPowerEventTTRPromptDate"];
  }
  if (v4) {
    [v0 setObject:v4 forKeyedSubscript:@"LastShownMissingCameraStopPowerEventTTRPromptBuildVersion"];
  }
  return v0;
}

uint64_t __FigCaptureCameraStreamingPowerLogInitialize_block_invoke_2()
{
  cpls_logCameraStreamingPowerEvents((void *)[(id)sCameraStreamingPowerEventsByPortType allValues]);
  uint64_t v0 = getpid();
  BOOL v1 = !FigContinuityCaptureGetUserPreferenceDisabled();
  return FigCaptureLogContinuityCameraPowerEvent(v0, v1);
}

uint64_t FigCaptureLogContinuityCameraPowerEvent(uint64_t a1, uint64_t a2)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F963E8], "currentProcess"), "bundle"), "identifier"), "isEqualToString:", 0x1EFA55BE0) & 1) == 0&& !FigCaptureCurrentProcessIsCameracaptured())
  {
    FigCaptureCurrentProcessIsMediaserverd();
  }
  v5[0] = @"PID";
  v5[1] = @"Enabled";
  v6[0] = [NSNumber numberWithInt:a1];
  v6[1] = [NSNumber numberWithUnsignedChar:a2];
  [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:v5 count:2];
  return PLLogRegisteredEvent();
}

uint64_t FigCaptureLogTorchPowerEvent(int a1, const void *a2, float a3)
{
  int valuePtr = a1;
  float v9 = a3;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberFloat32Type, &v9);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  Mutable = CFDictionaryCreateMutable(v4, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, @"PID", v5);
  CFDictionaryAddValue(Mutable, @"State", v6);
  if (a2) {
    CFDictionaryAddValue(Mutable, @"ApplicationID", a2);
  }
  PLLogRegisteredEvent();
  CFRelease(Mutable);
  CFRelease(v5);
  CFRelease(v6);
  return 1;
}

void FigCaptureLogCameraStillImageCapturePowerEvent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (sCameraPowerLogEventQueue)
  {
    uint64_t v8 = [NSString stringWithFormat:@"%@-%dx%d", a1, a2, a3];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __FigCaptureLogCameraStillImageCapturePowerEvent_block_invoke;
    block[3] = &unk_1E5C24B78;
    block[4] = v8;
    char v10 = a4;
    dispatch_async((dispatch_queue_t)sCameraPowerLogEventQueue, block);
  }
}

uint64_t __FigCaptureLogCameraStillImageCapturePowerEvent_block_invoke(uint64_t a1)
{
  id v2 = (id)sCameraStillImageCaptureCounts;
  if (!sCameraStillImageCaptureCounts)
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    sCameraStillImageCaptureCounts = (uint64_t)v2;
  }
  int v3 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *(void *)(a1 + 32)), "intValue");
  uint64_t v4 = [NSNumber numberWithInt:(v3 + 1)];
  uint64_t result = [(id)sCameraStillImageCaptureCounts setObject:v4 forKeyedSubscript:*(void *)(a1 + 32)];
  if (*(unsigned char *)(a1 + 40)) {
    ++sCameraStillImageDeferredProcessingCaptureCounts;
  }
  return result;
}

uint64_t _requestConcreteImplementation(objc_class *a1, const char *a2, objc_class *a3)
{
  CFNumberRef v6 = (objc_class *)objc_opt_class();
  uint64_t v7 = NSStringFromClass(v6);
  uint64_t v8 = NSStringFromSelector(a2);
  if (v6 == a3) {
    return [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"*** -%@ cannot be sent to an abstract object of class %@: Create a concrete instance!", v8, v7 format];
  }
  float v9 = NSString;
  CMTimeEpoch v13 = NSStringFromClass(v6);
  CMSampleBufferRef v14 = NSStringFromSelector(a2);
  uint64_t v10 = 45;
  if (v6 == a1) {
    uint64_t v10 = 43;
  }
  uint64_t v11 = [v9 stringWithFormat:@"%c[%@ %@]", v10, v13, v14];
  return [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"*** -%@ only defined for abstract class.  Define %@!", v8, v11 format];
}

CFTypeRef qtmfsn_bufferSpecifiesFileWriterAction(const void *a1, const void *a2)
{
  CFTypeRef result = CMGetAttachment(a1, @"FileWriterAction", 0);
  if (result) {
    return (CFTypeRef)(CFEqual(result, a2) != 0);
  }
  return result;
}

void *qtmfsn_movieRecordingIsProRes(void *a1)
{
  CFTypeRef result = objc_msgSend((id)objc_msgSend(a1, "videoSettings"), "objectForKeyedSubscript:", @"AVVideoCodecKey");
  if (result)
  {
    int v2 = BWOSTypeForString(result);
    if ((v2 - 1634755432) <= 0xB) {
      return (void *)((0x8C1u >> (v2 - 104)) & 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

__CFString *qtmfsn_stringForRecordingState(uint64_t a1)
{
  if (a1 >= 7) {
    return (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"Unknown (%d)", a1);
  }
  else {
    return off_1E5C25810[(int)a1];
  }
}

uint64_t FigFormatWriterAddTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v7 + 8);
  if (!v8) {
    return 4294954514;
  }
  return v8(a1, a2, 0, a3);
}

void qtmfsn_setTrackProperties(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  CFDictionaryRef v42 = 0;
  if (qtmfsn_movieRecordingIsProRes(a4))
  {
    if (a3 == 1986618469)
    {
      uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject();
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      CMTimeEpoch v13 = *(void (**)(uint64_t, void, void, CFDictionaryRef *))(v10 + 48);
      if (v13) {
        v13(FigBaseObject, *MEMORY[0x1E4F32CD8], *MEMORY[0x1E4F1CF80], &v42);
      }
    }
    else
    {
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      CFDictionaryRef v42 = CMTimeCopyAsDictionary(&time, v12);
    }
    uint64_t v11 = 0x4000;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v14 = [NSNumber numberWithInt:v11];
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  double v17 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(v16 + 24);
  if (v17) {
    v17(a1, a2, *MEMORY[0x1E4F32E88], v14);
  }
  uint64_t v18 = [NSNumber numberWithInt:0x100000];
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(v20 + 24);
  if (v21) {
    v21(a1, a2, *MEMORY[0x1E4F32EB0], v18);
  }
  CFDictionaryRef v22 = v42;
  if (v42)
  {
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    long long v25 = *(void (**)(uint64_t, uint64_t, void, CFDictionaryRef))(v24 + 24);
    if (v25) {
      v25(a1, a2, *MEMORY[0x1E4F32E30], v22);
    }
    CFRelease(v42);
  }
  memset(&time, 0, sizeof(time));
  if (a4)
  {
    [a4 movieFragmentInterval];
    if (time.flags)
    {
      CMTime time1 = time;
      long long v36 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&time2.xpc_object_t value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v26 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      time2.CMTimeEpoch epoch = v26;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        CFDictionaryRef dictionaryRepresentation = 0;
        uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v28 = v27 ? v27 : 0;
        float v29 = *(void (**)(uint64_t, uint64_t, void, void, CFDictionaryRef *))(v28 + 16);
        if (v29)
        {
          uint64_t v30 = *MEMORY[0x1E4F32E30];
          CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          v29(a1, a2, *MEMORY[0x1E4F32E30], *MEMORY[0x1E4F1CF80], &dictionaryRepresentation);
          if (dictionaryRepresentation)
          {
            memset(&time1, 0, sizeof(time1));
            CMTimeMakeFromDictionary(&time1, dictionaryRepresentation);
            CMTime time2 = time1;
            CMTime v37 = time;
            if (CMTimeCompare(&time2, &v37) >= 1)
            {
              *(_OWORD *)&time2.xpc_object_t value = v36;
              time2.CMTimeEpoch epoch = v26;
              CFDictionaryRef v32 = CMTimeCopyAsDictionary(&time2, v31);
              uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v33) {
                uint64_t v34 = v33;
              }
              else {
                uint64_t v34 = 0;
              }
              float v35 = *(void (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef))(v34 + 24);
              if (v35) {
                v35(a1, a2, v30, v32);
              }
              CFRelease(v32);
            }
            CFRelease(dictionaryRepresentation);
          }
        }
      }
    }
  }
}

uint64_t FigFormatWriterSetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 24);
  if (!v10) {
    return 4294954514;
  }
  return v10(a1, a2, a3, a4);
}

uint64_t qtmfsn_formatWriterErrorOccurredCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return -[BWQuickTimeMovieFileSinkNode _handleFormatWriterErrorOccurredCallback:userInfo:](a2, a2, a5);
}

uint64_t qtmfsn_formatWriterDidWriteFragment(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(unsigned char *)(a2 + 715) = 1;
    return [*(id *)(a2 + 664) parseAdditionalFragments];
  }
  return result;
}

void sub_1A5AD9E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5ADB3FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1A5ADB8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_1A5ADD75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getDASessionCreateSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)DiskArbitrationLibrary();
  uint64_t result = dlsym(v2, "DASessionCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getDASessionCreateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t DiskArbitrationLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!DiskArbitrationLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __DiskArbitrationLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    v2[5] = v2;
    long long v3 = xmmword_1E5C257F8;
    uint64_t v4 = 0;
    DiskArbitrationLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = DiskArbitrationLibraryCore_frameworkLibrary;
  if (!DiskArbitrationLibraryCore_frameworkLibrary) {
    DiskArbitrationLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __DiskArbitrationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  DiskArbitrationLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getDADiskCreateFromVolumePathSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)DiskArbitrationLibrary();
  uint64_t result = dlsym(v2, "DADiskCreateFromVolumePath");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getDADiskCreateFromVolumePathSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getDADiskCopyIOMediaSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)DiskArbitrationLibrary();
  uint64_t result = dlsym(v2, "DADiskCopyIOMedia");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getDADiskCopyIOMediaSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __qtmfsn_minFreeDiskSpaceLimit_block_invoke()
{
  uint64_t v0 = MGCopyAnswer();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    FigCFDictionaryGetInt64IfPresent();
    CFRelease(v1);
  }
  if (!qtmfsn_minFreeDiskSpaceLimit_sMinFreeDiskSpaceLimit) {
    qtmfsn_minFreeDiskSpaceLimit_sMinFreeDiskSpaceLimit = 209715200;
  }
}

uint64_t FigImageControl_LockWhiteBalance()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 7428) = 0;
  *(unsigned char *)(DerivedStorage + 7444) = 0;
  return 0;
}

uint64_t FigImageControl_ManualWhiteBalanceGains(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 7428) = 0;
  if (*(unsigned char *)(DerivedStorage + 517))
  {
    *(_WORD *)(DerivedStorage + 7432) = a2;
    *(_WORD *)(DerivedStorage + 7434) = a3;
    *(_WORD *)(DerivedStorage + 7436) = a4;
    *(_DWORD *)(DerivedStorage + 7440) = a5;
  }
  *(unsigned char *)(DerivedStorage + 7444) = 0;
  return 0;
}

uint64_t __VisionLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  VisionLibraryCore_frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t getVNImageRequestHandlerClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNImageRequestHandlerClass_softClass;
  uint64_t v8 = getVNImageRequestHandlerClass_softClass;
  if (!getVNImageRequestHandlerClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNImageRequestHandlerClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNImageRequestHandlerClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE6BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNImageRequestHandlerClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNImageRequestHandler");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNImageRequestHandlerClass_block_invoke_cold_1();
  }
  getVNImageRequestHandlerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getVNSequenceRequestHandlerClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNSequenceRequestHandler");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNSequenceRequestHandlerClass_block_invoke_cold_1();
  }
  getVNSequenceRequestHandlerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNFaceObservationClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNFaceObservationClass_softClass;
  uint64_t v8 = getVNFaceObservationClass_softClass;
  if (!getVNFaceObservationClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNFaceObservationClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNFaceObservationClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE6D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNFaceObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNFaceObservation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNFaceObservationClass_block_invoke_cold_1();
  }
  getVNFaceObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNDetectedObjectObservationClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNDetectedObjectObservationClass_softClass;
  uint64_t v8 = getVNDetectedObjectObservationClass_softClass;
  if (!getVNDetectedObjectObservationClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNDetectedObjectObservationClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNDetectedObjectObservationClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE6ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNDetectedObjectObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNDetectedObjectObservation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNDetectedObjectObservationClass_block_invoke_cold_1();
  }
  getVNDetectedObjectObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNTranslationalImageRegistrationRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNTranslationalImageRegistrationRequestClass_softClass;
  uint64_t v8 = getVNTranslationalImageRegistrationRequestClass_softClass;
  if (!getVNTranslationalImageRegistrationRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNTranslationalImageRegistrationRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNTranslationalImageRegistrationRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNTranslationalImageRegistrationRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNTranslationalImageRegistrationRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNTranslationalImageRegistrationRequestClass_block_invoke_cold_1();
  }
  getVNTranslationalImageRegistrationRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNClassifyImageAestheticsRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNClassifyImageAestheticsRequestClass_softClass;
  uint64_t v8 = getVNClassifyImageAestheticsRequestClass_softClass;
  if (!getVNClassifyImageAestheticsRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNClassifyImageAestheticsRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNClassifyImageAestheticsRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNClassifyImageAestheticsRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNClassifyImageAestheticsRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNClassifyImageAestheticsRequestClass_block_invoke_cold_1();
  }
  getVNClassifyImageAestheticsRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNGenerateAttentionBasedSaliencyImageRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNGenerateAttentionBasedSaliencyImageRequestClass_softClass;
  uint64_t v8 = getVNGenerateAttentionBasedSaliencyImageRequestClass_softClass;
  if (!getVNGenerateAttentionBasedSaliencyImageRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNGenerateAttentionBasedSaliencyImageRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNGenerateAttentionBasedSaliencyImageRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE72A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNGenerateAttentionBasedSaliencyImageRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNGenerateAttentionBasedSaliencyImageRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNGenerateAttentionBasedSaliencyImageRequestClass_block_invoke_cold_1();
  }
  getVNGenerateAttentionBasedSaliencyImageRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 40);
  return result;
}

Class __getVNGenerateFaceSegmentsRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNGenerateFaceSegmentsRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNGenerateFaceSegmentsRequestClass_block_invoke_cold_1();
  }
  getVNGenerateFaceSegmentsRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNClassifyJunkImageRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNClassifyJunkImageRequestClass_softClass;
  uint64_t v8 = getVNClassifyJunkImageRequestClass_softClass;
  if (!getVNClassifyJunkImageRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNClassifyJunkImageRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNClassifyJunkImageRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNClassifyJunkImageRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNClassifyJunkImageRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNClassifyJunkImageRequestClass_block_invoke_cold_1();
  }
  getVNClassifyJunkImageRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNCreateSceneprintRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNCreateSceneprintRequestClass_softClass;
  uint64_t v8 = getVNCreateSceneprintRequestClass_softClass;
  if (!getVNCreateSceneprintRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNCreateSceneprintRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNCreateSceneprintRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNCreateSceneprintRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNCreateSceneprintRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNCreateSceneprintRequestClass_block_invoke_cold_1();
  }
  getVNCreateSceneprintRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVN5kJNH3eYuyaLxNpZr5Z7ziClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVN5kJNH3eYuyaLxNpZr5Z7ziClass_softClass;
  uint64_t v8 = getVN5kJNH3eYuyaLxNpZr5Z7ziClass_softClass;
  if (!getVN5kJNH3eYuyaLxNpZr5Z7ziClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVN5kJNH3eYuyaLxNpZr5Z7ziClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVN5kJNH3eYuyaLxNpZr5Z7ziClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE76D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVN5kJNH3eYuyaLxNpZr5Z7ziClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VN5kJNH3eYuyaLxNpZr5Z7zi");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVN5kJNH3eYuyaLxNpZr5Z7ziClass_block_invoke_cold_1();
  }
  getVN5kJNH3eYuyaLxNpZr5Z7ziClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNTrackObjectRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNTrackObjectRequestClass_softClass;
  uint64_t v8 = getVNTrackObjectRequestClass_softClass;
  if (!getVNTrackObjectRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNTrackObjectRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNTrackObjectRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNTrackObjectRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNTrackObjectRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNTrackObjectRequestClass_block_invoke_cold_1();
  }
  getVNTrackObjectRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNSessionClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNSessionClass_softClass;
  uint64_t v8 = getVNSessionClass_softClass;
  if (!getVNSessionClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNSessionClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNSessionClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNSessionClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNSessionClass_block_invoke_cold_1();
  }
  getVNSessionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNRecognizedObjectObservationClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNRecognizedObjectObservationClass_softClass;
  uint64_t v8 = getVNRecognizedObjectObservationClass_softClass;
  if (!getVNRecognizedObjectObservationClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNRecognizedObjectObservationClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNRecognizedObjectObservationClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNRecognizedObjectObservationClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNRecognizedObjectObservation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNRecognizedObjectObservationClass_block_invoke_cold_1();
  }
  getVNRecognizedObjectObservationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNProcessingDescriptorClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNProcessingDescriptorClass_softClass;
  uint64_t v8 = getVNProcessingDescriptorClass_softClass;
  if (!getVNProcessingDescriptorClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNProcessingDescriptorClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNProcessingDescriptorClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNProcessingDescriptorClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNProcessingDescriptor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNProcessingDescriptorClass_block_invoke_cold_1();
  }
  getVNProcessingDescriptorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNResourceVersionClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNResourceVersionClass_softClass;
  uint64_t v8 = getVNResourceVersionClass_softClass;
  if (!getVNResourceVersionClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNResourceVersionClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNResourceVersionClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNResourceVersionClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNResourceVersion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNResourceVersionClass_block_invoke_cold_1();
  }
  getVNResourceVersionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNDetectHumanRectanglesRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__12;
  uint64_t v7 = __Block_byref_object_dispose__12;
  uint64_t v0 = getVNDetectHumanRectanglesRequestClass_softClass;
  uint64_t v8 = getVNDetectHumanRectanglesRequestClass_softClass;
  if (!getVNDetectHumanRectanglesRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getVNDetectHumanRectanglesRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVNDetectHumanRectanglesRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNDetectHumanRectanglesRequestClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  Class result = objc_getClass("VNDetectHumanRectanglesRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVNDetectHumanRectanglesRequestClass_block_invoke_cold_1();
  }
  getVNDetectHumanRectanglesRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNInferenceNetworkIdentifierFaceprintSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getVNInferenceNetworkIdentifierFaceprintSymbolLoc_ptr;
  uint64_t v6 = getVNInferenceNetworkIdentifierFaceprintSymbolLoc_ptr;
  if (!getVNInferenceNetworkIdentifierFaceprintSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)VisionLibrary();
    v4[3] = (uint64_t)dlsym(v1, "VNInferenceNetworkIdentifierFaceprint");
    getVNInferenceNetworkIdentifierFaceprintSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE7FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getVNInferenceNetworkIdentifierFaceprintSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)VisionLibrary();
  Class result = dlsym(v2, "VNInferenceNetworkIdentifierFaceprint");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVNInferenceNetworkIdentifierFaceprintSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t getVNInferenceNetworkIdentifierFaceprint()
{
  VNInferenceNetworkIdentifierFaceprintSymbolLoCGFloat c = getVNInferenceNetworkIdentifierFaceprintSymbolLoc();
  if (!VNInferenceNetworkIdentifierFaceprintSymbolLoc) {
    getVNInferenceNetworkIdentifierFaceprint_cold_1();
  }
  return *(void *)VNInferenceNetworkIdentifierFaceprintSymbolLoc;
}

uint64_t getVNFaceAttributeEyesClosedSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getVNFaceAttributeEyesClosedSymbolLoc_ptr;
  uint64_t v6 = getVNFaceAttributeEyesClosedSymbolLoc_ptr;
  if (!getVNFaceAttributeEyesClosedSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)VisionLibrary();
    v4[3] = (uint64_t)dlsym(v1, "VNFaceAttributeEyesClosed");
    getVNFaceAttributeEyesClosedSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE8134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getVNFaceAttributeEyesClosedSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)VisionLibrary();
  Class result = dlsym(v2, "VNFaceAttributeEyesClosed");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVNFaceAttributeEyesClosedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t getVNFaceAttributeEyesClosed()
{
  VNFaceAttributeEyesClosedSymbolLoCGFloat c = getVNFaceAttributeEyesClosedSymbolLoc();
  if (!VNFaceAttributeEyesClosedSymbolLoc) {
    getVNFaceAttributeEyesClosed_cold_1();
  }
  return *(void *)VNFaceAttributeEyesClosedSymbolLoc;
}

void *__getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)VisionLibrary();
  Class result = dlsym(v2, "VNSetRequestConcurrentTasksProcessingTimeout");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24);
  return result;
}

uint64_t getVNErrorDomainSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getVNErrorDomainSymbolLoc_ptr;
  uint64_t v6 = getVNErrorDomainSymbolLoc_ptr;
  if (!getVNErrorDomainSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)VisionLibrary();
    v4[3] = (uint64_t)dlsym(v1, "VNErrorDomain");
    getVNErrorDomainSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5AE82E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getVNErrorDomainSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)VisionLibrary();
  Class result = dlsym(v2, "VNErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVNErrorDomainSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t getVNErrorDomain()
{
  VNErrorDomainSymbolLoCGFloat c = getVNErrorDomainSymbolLoc();
  if (!VNErrorDomainSymbolLoc) {
    getVNErrorDomain_cold_1();
  }
  return *(void *)VNErrorDomainSymbolLoc;
}

__CFString *FigCaptureThermalLevelToShortString(uint64_t a1)
{
  if (a1 >= 3) {
    return (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"Unknown thermal level %d", a1);
  }
  else {
    return off_1E5C25930[(int)a1];
  }
}

uint64_t BWStereoUtilitiesComputeRectificationQuaternion(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  if (a4)
  {
    int32x4_t v4 = *(int32x4_t *)MEMORY[0x1E4F14998];
    int32x4_t v5 = *(int32x4_t *)(MEMORY[0x1E4F14998] + 16);
    long long v6 = *(_OWORD *)(MEMORY[0x1E4F14998] + 32);
    LODWORD(v7) = HIDWORD(*(void *)(MEMORY[0x1E4F14998] + 16));
    float v8 = COERCE_FLOAT(*(void *)(MEMORY[0x1E4F14998] + 40));
    float v9 = v8 + (float)(COERCE_FLOAT(*MEMORY[0x1E4F14998]) + v7);
    if (v9 >= 0.0)
    {
      float v20 = sqrtf(v9 + 1.0);
      float32_t v21 = v20 + v20;
      float32x2_t v22 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v20 + v20));
      float32x2_t v23 = vmul_f32(v22, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v20 + v20), v22));
      v23.i32[0] = vmul_f32(v23, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v20 + v20), v23)).u32[0];
      *(float32x2_t *)v35.f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), *(int32x2_t *)&v6), (float32x2_t)vext_s8(*(int8x8_t *)&v6, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL), 4uLL)), v23.f32[0]);
      v24.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v4.i8, 1), *(float32x2_t *)v5.i8).u32[0];
      v24.f32[1] = v21;
      v23.i32[1] = 0.25;
      float32x2_t v37 = vmul_f32(v24, v23);
    }
    else if (*(float *)v4.i32 < v7 || *(float *)v4.i32 < v8)
    {
      float v11 = 1.0 - *(float *)v4.i32;
      if (v7 >= v8)
      {
        float v38 = sqrtf(v7 + (float)(v11 - v8));
        *(float *)&unsigned int v39 = v38 + v38;
        float32x2_t v40 = vrecpe_f32((float32x2_t)v39);
        float32x2_t v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
        v42.i32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).u32[0];
        v41.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v4.i8, 1), *(float32x2_t *)v5.i8).u32[0];
        v41.i32[1] = v39;
        float32x2_t v43 = (float32x2_t)vrev64_s32(*(int32x2_t *)&v6);
        v44.i32[0] = vadd_f32(v43, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL)).u32[0];
        v44.i32[1] = vsub_f32(v43, (float32x2_t)vdup_laneq_s32(v4, 2)).i32[1];
        float32x2_t v37 = vmul_n_f32(v44, v42.f32[0]);
        v42.i32[1] = 0.25;
        *(float32x2_t *)v35.f32 = vmul_f32(v41, v42);
      }
      else
      {
        float v12 = sqrtf(v8 + (float)(v11 - v7));
        long long v13 = *MEMORY[0x1E4F14998];
        *(float *)&long long v13 = v12;
        float32x2_t v14 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL)), *(float32x2_t *)&v6);
        float32x2_t v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0);
        float32x2_t v16 = vsub_f32(*(float32x2_t *)v4.i8, v15);
        v15.i32[0] = 2.0;
        v15.i32[0] = vmul_f32(*(float32x2_t *)&v13, v15).u32[0];
        v15.i32[1] = v16.i32[1];
        float32x2_t v17 = vrecpe_f32((float32x2_t)v15.u32[0]);
        float32x2_t v18 = vmul_f32(v17, vrecps_f32((float32x2_t)v15.u32[0], v17));
        v16.i32[0] = vmul_f32(v18, vrecps_f32((float32x2_t)v15.u32[0], v18)).u32[0];
        *(float32x2_t *)v35.f32 = vmul_n_f32(v14, v16.f32[0]);
        __asm { FMOV            V2.2S, #0.25 }
        _D2.i32[1] = v16.i32[0];
        float32x2_t v37 = vmul_f32(v15, _D2);
      }
    }
    else
    {
      float32x2_t v25 = (float32x2_t)__PAIR64__(v4.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v4.i32 + (float)((float)(1.0 - v7) - v8))));
      float32x2_t v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0);
      float32x2_t v27 = vadd_f32(*(float32x2_t *)v4.i8, v26);
      v26.i32[0] = 2.0;
      v26.i32[0] = vmul_f32(v25, v26).u32[0];
      v26.i32[1] = v27.i32[1];
      float32x2_t v28 = vrecpe_f32((float32x2_t)v26.u32[0]);
      float32x2_t v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v26.u32[0], v28));
      v25.i32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v26.u32[0], v29)).u32[0];
      __asm { FMOV            V5.2S, #0.25 }
      _D5.i32[1] = v25.i32[0];
      *(float32x2_t *)v35.f32 = vmul_f32(v26, _D5);
      v36.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL), *(float32x2_t *)&v6).u32[0];
      v36.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(v5, 2), *(float32x2_t *)&v6).i32[1];
      float32x2_t v37 = vmul_n_f32(v36, v25.f32[0]);
    }
    *(float32x2_t *)&v35.u32[2] = v37;
    *a4 = vmulq_f32(v35, (float32x4_t)xmmword_1A5EFDE50);
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t BWStereoUtilitiesComputeCenterShiftForPrimaryStream(uint64_t a1, int a2, void *a3, void *target, float64x2_t *a5, float64x2_t *a6)
{
  if (a3 && target && a5 && a6)
  {
    float32x4_t v36 = 0u;
    float32x4_t v37 = 0u;
    float32x4_t v35 = 0u;
    IntrinsicsMatriCGFloat x = su_getIntrinsicsMatrix(a1, a3, target, 1, (uint64_t)&v35);
    if (IntrinsicsMatrix)
    {
      uint64_t v33 = IntrinsicsMatrix;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      uint64_t v11 = 0;
      float32x4_t v12 = v35;
      float32x4_t v13 = v36;
      float32x4_t v14 = v37;
      *(float *)v10.i32 = (float)-v37.f32[0] / v35.f32[0];
      *(float *)v9.i32 = (float)-v37.f32[1] / v35.f32[0];
      __asm { FMOV            V6.4S, #1.0 }
      int32x4_t v20 = vzip1q_s32(vzip2q_s32(vdupq_lane_s32(v10, 0), _Q6), v9);
      LODWORD(v21) = 0;
      *((float *)&v21 + 1) = 1.0 / v35.f32[0];
      v20.i32[3] = 0;
      int32x4_t v23 = *(int32x4_t *)MEMORY[0x1E4F14998];
      int32x4_t v22 = *(int32x4_t *)(MEMORY[0x1E4F14998] + 16);
      int32x4_t v24 = *(int32x4_t *)(MEMORY[0x1E4F14998] + 32);
      int32x4_t v25 = vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
      float32x4_t v26 = (float32x4_t)vzip1q_s32(*MEMORY[0x1E4F14998], v22);
      v26.i32[2] = v24.i32[0];
      float32x4_t v27 = (float32x4_t)vzip2q_s32(*MEMORY[0x1E4F14998], v22);
      v27.i32[2] = *(void *)(MEMORY[0x1E4F14998] + 40);
      float32x4_t v38 = (float32x4_t)COERCE_UNSIGNED_INT(1.0 / v35.f32[0]);
      float32x4_t v39 = (float32x4_t)v21;
      float32x4_t v40 = (float32x4_t)v20;
      float32x4_t v28 = (float32x4_t)vzip2q_s32(vzip1q_s32(v23, v24), v25);
      float32x4_t v41 = 0u;
      float32x4_t v42 = 0u;
      float32x4_t v43 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v41 + v11 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)((char *)&v38 + v11 * 4))), v28, *(float32x2_t *)&v38.f32[v11], 1), v27, *(float32x4_t *)((char *)&v38 + v11 * 4), 2);
        v11 += 4;
      }
      while (v11 != 12);
      uint64_t v29 = 0;
      float32x4_t v38 = v41;
      float32x4_t v39 = v42;
      float32x4_t v40 = v43;
      float32x4_t v41 = 0u;
      float32x4_t v42 = 0u;
      float32x4_t v43 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v41 + v29 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(_OWORD *)((char *)&v38 + v29 * 4))), v13, *(float32x2_t *)&v38.f32[v29], 1), v14, *(float32x4_t *)((char *)&v38 + v29 * 4), 2);
        v29 += 4;
      }
      while (v29 != 12);
      __asm { FMOV            V5.2D, #0.5 }
      float32x2_t v31 = vcvt_f32_f64(vaddq_f64(*a5, vmulq_f64(a5[1], _Q5)));
      int32x4_t v32 = (int32x4_t)vaddq_f32(v43, vmlaq_lane_f32(vmulq_n_f32(v41, v31.f32[0]), v42, v31, 1));
      if (*(float *)&v32.i32[2] <= 0.0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
      else
      {
        uint64_t v33 = 0;
        *a6 = vcvtq_f64_f32(vsub_f32(vdiv_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2)), v31));
      }
    }
    return v33;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t su_getIntrinsicsMatrix(uint64_t a1, void *a2, void *target, int a4, uint64_t a5)
{
  if (a2)
  {
    if (target)
    {
      if (a5)
      {
        int32x2_t v10 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
        if (v10)
        {
          uint64_t v11 = v10;
          if (objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E4F54128]), "isEqualToString:", a1))
          {
            uint64_t v12 = [a2 objectForKeyedSubscript:a1];
            if (v12)
            {
              float32x4_t v13 = (void *)v12;
              int v14 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E4F54148]), "intValue");
              if (v14 <= 1) {
                uint64_t v15 = 1;
              }
              else {
                uint64_t v15 = v14;
              }
              ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)target);
              unint64_t v17 = psn_pixelBufferDimensions(ImageBuffer);
              int v35 = 1065353216;
              uint64_t v18 = FigMotionComputeLensPositionScalingFactor((const __CFDictionary *)v11, v17, HIDWORD(v17), v15, v15, (float *)&v35);
              if (v18)
              {
                uint64_t v28 = v18;
                fig_log_get_emitter();
                goto LABEL_28;
              }
              objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x1E4F52D28]), "floatValue");
              if (v19 > 0.0)
              {
                float v20 = v19;
                float v21 = *(float *)&v35;
                if (a4)
                {
                  objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E4F53EA0]), "floatValue");
                  if (v22 > 0.0)
                  {
                    float v23 = v22 * 1000.0;
LABEL_16:
                    float64x2_t v34 = 0uLL;
                    float v25 = 1.0 / v20;
                    CMSampleBufferGetPresentationTimeStamp(&time, (CMSampleBufferRef)target);
                    double Seconds = CMTimeGetSeconds(&time);
                    uint64_t v27 = (a4 & 1) == 0
                       && objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E4F54280], Seconds) != 0;
                    uint64_t v28 = FigMotionComputeOpticalCenterInBuffer((const __CFDictionary *)v11, v17, v15, v15, v27, &v34, v25);
                    if (!v28)
                    {
                      *(float *)&uint64_t v29 = v34.f64[0];
                      LODWORD(v30) = 0;
                      *((float *)&v30 + 1) = (float)(v25 * v21) * v23;
                      float v31 = v34.f64[1];
                      *((float *)&v29 + 1) = v31;
                      *(_DWORD *)(a5 + 40) = 1065353216;
                      *(_DWORD *)(a5 + 8) = 0;
                      *(void *)a5 = HIDWORD(v30);
                      *(_DWORD *)(a5 + 24) = 0;
                      *(void *)(a5 + 16) = v30;
                      *(void *)(a5 + 32) = v29;
                      return v28;
                    }
                    fig_log_get_emitter();
LABEL_28:
                    FigDebugAssert3();
                    return v28;
                  }
                }
                else
                {
                  objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E4F54118]), "floatValue");
                  float v23 = v24;
                  if (v24 > 0.0) {
                    goto LABEL_16;
                  }
                }
              }
              fig_log_get_emitter();
              FigDebugAssert3();
              return FigSignalErrorAt();
            }
          }
        }
      }
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t BWStereoUtilitiesComputeInverseRectificationHomographiesAndFOV(opaqueCMSampleBuffer *target, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, _DWORD *a8, double a9, double a10)
{
  float v12 = a9 / a10;
  if (fabsf(v12 + -1.3333) < 0.0001)
  {
    float32x4_t v13 = a8;
    uint64_t v15 = a6;
    long long v137 = 0u;
    float64x2_t v138 = 0u;
    int32x4_t v135 = 0u;
    int32x4_t v136 = 0u;
    float32x4_t v133 = 0u;
    int32x4_t v134 = 0u;
    float32x4_t v131 = 0u;
    float32x4_t v132 = 0u;
    float32x4_t v129 = 0u;
    float32x4_t v130 = 0u;
    float32x4_t v127 = 0u;
    float32x4_t v128 = 0u;
    float32x4_t v125 = 0u;
    float32x4_t v126 = 0u;
    if (a4 && a5)
    {
      uint64_t v21 = *MEMORY[0x1E4F55878];
      float v22 = (void *)[a4 objectForKeyedSubscript:*MEMORY[0x1E4F55878]];
      if (v22)
      {
        [v22 getBytes:&v125 length:48];
        size.double width = 0.0;
        size.double height = 0.0;
        CFDictionaryRef v23 = (const __CFDictionary *)[a4 objectForKeyedSubscript:*MEMORY[0x1E4F55880]];
        if (v23)
        {
          CGSizeMakeWithDictionaryRepresentation(v23, &size);
          float v24 = (void *)[a5 objectForKeyedSubscript:v21];
          if (v24)
          {
            [v24 getBytes:&v128 length:48];
            memset(&v147, 0, sizeof(v147));
            float v25 = (void *)[a5 objectForKeyedSubscript:*MEMORY[0x1E4F55868]];
            if (v25)
            {
              [v25 getBytes:&v147 length:64];
              uint64_t v26 = 0;
              simd_float4 v27 = v147.columns[0];
              simd_float4 v28 = v147.columns[1];
              simd_float4 v29 = v147.columns[2];
              v27.i32[3] = 0;
              v28.i32[3] = 0;
              v29.i32[3] = 0;
              float32x4_t v30 = *(float32x4_t *)(MEMORY[0x1E4F14998] + 16);
              float32x4_t v131 = *(float32x4_t *)MEMORY[0x1E4F14998];
              float32x4_t v132 = v30;
              float32x4_t v133 = *(float32x4_t *)(MEMORY[0x1E4F14998] + 32);
              float32x4_t v31 = v131;
              float32x4_t v32 = v133;
              int32x4_t v139 = (int32x4_t)v27;
              int32x4_t v140 = (int32x4_t)v28;
              int32x4_t v141 = (int32x4_t)v29;
              float32x4_t v143 = 0u;
              int32x4_t v144 = 0u;
              int32x4_t v145 = 0u;
              do
              {
                *(float32x4_t *)((char *)&v143 + v26) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)((char *)&v139 + v26))), v30, *(float32x2_t *)&v139.i8[v26], 1), v32, *(float32x4_t *)((char *)&v139 + v26), 2);
                v26 += 16;
              }
              while (v26 != 48);
              v134.i32[2] = v143.i32[2];
              v135.i32[2] = v144.i32[2];
              v134.i64[0] = v143.i64[0];
              v135.i64[0] = v144.i64[0];
              v136.i32[2] = v145.i32[2];
              v136.i64[0] = v145.i64[0];
              if (CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0))
              {
                if (FigCFDictionaryGetCGRectIfPresent())
                {
                  uint64_t v33 = 0;
                }
                else
                {
                  ImageBuffer = CMSampleBufferGetImageBuffer(target);
                  unint64_t v57 = psn_pixelBufferDimensions(ImageBuffer);
                  uint64_t v33 = 0;
                  long long v137 = 0uLL;
                  v138.f64[0] = (double)(int)v57;
                  v138.f64[1] = (double)SHIDWORD(v57);
                }
                goto LABEL_30;
              }
            }
          }
        }
LABEL_66:
        fig_log_get_emitter();
        goto LABEL_67;
      }
    }
    else if (target && a2 && a3)
    {
      CFStringRef v35 = (const __CFString *)*MEMORY[0x1E4F53070];
      float32x4_t v36 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
      if (v36
        && (uint64_t v37 = *MEMORY[0x1E4F54128], (v38 = [v36 objectForKeyedSubscript:*MEMORY[0x1E4F54128]]) != 0))
      {
        uint64_t v39 = v38;
        if (!FigCFDictionaryGetCGRectIfPresent())
        {
          float32x4_t v40 = CMSampleBufferGetImageBuffer(target);
          unint64_t v41 = psn_pixelBufferDimensions(v40);
          long long v137 = 0uLL;
          v138.f64[0] = (double)(int)v41;
          v138.f64[1] = (double)SHIDWORD(v41);
        }
        IntrinsicsMatriCGFloat x = su_getIntrinsicsMatrix(v39, a3, target, 0, (uint64_t)&v125);
        float32x4_t v13 = a8;
        if (!IntrinsicsMatrix)
        {
          float32x4_t v43 = (void *)CMGetAttachment(a2, v35, 0);
          uint64_t v15 = a6;
          if (v43)
          {
            uint64_t v44 = [v43 objectForKeyedSubscript:v37];
            if (v44)
            {
              uint64_t v45 = v44;
              uint64_t ViewMatrixInCameraCoordinates = su_getIntrinsicsMatrix(v44, a3, a2, 0, (uint64_t)&v128);
              if (ViewMatrixInCameraCoordinates) {
                goto LABEL_68;
              }
              float32x4_t v47 = *(float32x4_t *)(MEMORY[0x1E4F14998] + 16);
              float32x4_t v131 = *(float32x4_t *)MEMORY[0x1E4F14998];
              float32x4_t v132 = v47;
              float32x4_t v133 = *(float32x4_t *)(MEMORY[0x1E4F14998] + 32);
              memset(&v147, 0, sizeof(v147));
              uint64_t ViewMatrixInCameraCoordinates = su_getViewMatrixInCameraCoordinates((void *)[a3 objectForKeyedSubscript:v39], (int32x2_t *)&v147);
              if (ViewMatrixInCameraCoordinates
                || (int32x4_t v145 = 0u,
                    long long v146 = 0u,
                    float32x4_t v143 = 0u,
                    int32x4_t v144 = 0u,
                    uint64_t ViewMatrixInCameraCoordinates = su_getViewMatrixInCameraCoordinates((void *)[a3 objectForKeyedSubscript:v45], (int32x2_t *)&v143), ViewMatrixInCameraCoordinates))
              {
LABEL_68:
                uint64_t v33 = ViewMatrixInCameraCoordinates;
                fig_log_get_emitter();
                FigDebugAssert3();
              }
              else
              {
                int32x4_t v141 = 0u;
                long long v142 = 0u;
                int32x4_t v139 = 0u;
                int32x4_t v140 = 0u;
                su_computeRelativeExtrinsics(&v147, &v143, (uint64_t)&v139);
                uint64_t v48 = 0;
                int32x4_t v49 = vzip1q_s32(v139, v141);
                int32x4_t v50 = vzip1q_s32(v49, v140);
                v50.i32[3] = 0;
                int32x4_t v51 = vzip1q_s32(vzip2q_s32(v139, v141), vdupq_laneq_s32(v140, 2));
                int32x4_t v52 = vzip2q_s32(v49, vdupq_lane_s32(*(int32x2_t *)v140.i8, 1));
                v52.i32[3] = 0;
                v51.i32[3] = 0;
                float32x4_t v53 = v131;
                float32x4_t v54 = v132;
                float32x4_t v55 = v133;
                v148[0] = v50;
                v148[1] = v52;
                v148[2] = v51;
                CGSize size = (CGSize)0;
                long long v150 = 0u;
                long long v151 = 0u;
                do
                {
                  *(float32x4_t *)((char *)&size + v48 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(v148[v48])), v54, *(float32x2_t *)&v148[v48], 1), v55, (float32x4_t)v148[v48], 2);
                  ++v48;
                }
                while (v48 != 3);
                uint64_t v33 = 0;
                v134.i32[2] = LODWORD(size.height);
                v135.i32[2] = DWORD2(v150);
                v134.i64[0] = *(void *)&size.width;
                v135.i64[0] = v150;
                v136.i32[2] = DWORD2(v151);
                v136.i64[0] = v151;
              }
LABEL_30:
              if (v33)
              {
                fig_log_get_emitter();
              }
              else
              {
                float32x4_t v58 = v125;
                float32x2_t v59 = *(float32x2_t *)v127.f32;
                double v60 = v138.f64[0];
                float v61 = v138.f64[0] / v138.f64[1];
                if (v12 != v61)
                {
                  float32x2_t v119 = *(float32x2_t *)v127.f32;
                  float32x4_t v122 = v125;
                  float64x2_t v116 = v138;
                  FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((unint64_t)v138.f64[0], (unint64_t)v138.f64[1], *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), v12);
                  double height = v153.size.height;
                  double width = v153.size.width;
                  if (CGRectIsNull(v153))
                  {
LABEL_56:
                    fig_log_get_emitter();
                    FigDebugAssert3();
                    return 4294954516;
                  }
                  double v60 = width;
                  v62.f64[0] = width;
                  v62.f64[1] = height;
                  float32x2_t v63 = vadd_f32(v119, vmul_f32(vcvt_f32_f64(vsubq_f64(v116, v62)), (float32x2_t)0xBF000000BF000000));
                  float v61 = width / height;
                  float32x2_t v59 = v63;
                  float32x4_t v58 = v122;
                }
                float v64 = ceil(a9 * 1.02499998 * 0.25) * 4.0;
                float v65 = v64 / v12;
                double v66 = v64;
                if ((float)(v64 / v65) == v61)
                {
                  float v67 = v66 / v60;
                  v58.f32[0] = v67 * v58.f32[0];
                  float32x2_t v120 = vmla_n_f32((float32x2_t)0xBF000000BF000000, vadd_f32(v59, (float32x2_t)0x3F0000003F000000), v67);
                  goto LABEL_36;
                }
                float32x2_t v120 = v59;
                float32x4_t v124 = v58;
                fig_log_get_emitter();
                FigDebugAssert3();
                uint64_t v115 = FigSignalErrorAt();
                float32x4_t v58 = v124;
                if (!v115)
                {
LABEL_36:
                  int32x4_t v123 = (int32x4_t)v58;
                  long double v68 = atan(a9 * 0.5 / v58.f32[0]);
                  *(float *)&long double v68 = v68 / 3.14159265 * 180.0 + v68 / 3.14159265 * 180.0;
                  *float32x4_t v13 = LODWORD(v68);
                  float32x4_t v69 = vaddq_f32(v133, vmlaq_f32(vmulq_f32(v131, (float32x4_t)0), (float32x4_t)0, v132));
                  if (v69.f32[2] > 0.0)
                  {
                    unint64_t v70 = 0;
                    int32x4_t v71 = v123;
                    v72.i32[1] = 0;
                    v72.i32[2] = 0;
                    double v73 = v66 - a9;
                    *(float *)&double v73 = v66 - a9;
                    *(float *)&double v73 = (float)-(float)(v120.f32[0] - (float)(*(float *)&v73 * 0.5)) / *(float *)v123.i32;
                    int32x4_t v74 = vdupq_lane_s32(*(int32x2_t *)&v73, 0);
                    __asm { FMOV            V0.4S, #1.0 }
                    int32x4_t v80 = vzip2q_s32(v74, (int32x4_t)_Q0);
                    float v81 = v65 - a10;
                    v82.i32[0] = 0;
                    v82.i32[2] = 0;
                    int32x2_t v83 = (int32x2_t)vdivq_f32(v69, (float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2)).u64[0];
                    unsigned __int32 v84 = vdupq_lane_s32(v83, 1).u32[0];
                    *(float *)v71.i32 = (float)-(float)(v120.f32[1] - (float)(v81 * 0.5)) / *(float *)v123.i32;
                    int32x4_t v85 = vzip1q_s32((int32x4_t)v131, (int32x4_t)v133);
                    float32x4_t v86 = v125;
                    float32x4_t v87 = v126;
                    float32x4_t v143 = (float32x4_t)vzip1q_s32(v85, (int32x4_t)v132);
                    int32x4_t v144 = vzip2q_s32(v85, vdupq_lane_s32(*(int32x2_t *)v132.f32, 1));
                    float32x4_t v88 = v127;
                    int32x4_t v145 = vzip1q_s32(vzip2q_s32((int32x4_t)v131, (int32x4_t)v133), vdupq_laneq_s32((int32x4_t)v132, 2));
                    int32x4_t v89 = vzip1q_s32(v80, v71);
                    memset(&v147, 0, 48);
                    do
                    {
                      v147.columns[v70 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v86, COERCE_FLOAT(*(_OWORD *)((char *)&v143 + v70 * 4))), v87, *(float32x2_t *)&v143.f32[v70], 1), v88, *(float32x4_t *)((char *)&v143 + v70 * 4), 2);
                      v70 += 4;
                    }
                    while (v70 != 12);
                    unint64_t v90 = 0;
                    v89.i32[3] = 0;
                    v82.i32[3] = 0;
                    v72.i32[3] = 0;
                    float32x4_t v91 = (float32x4_t)vzip1q_s32((int32x4_t)0x3F800000uLL, (int32x4_t)0x3F800000uLL);
                    v91.i32[1] = 0;
                    _Q0.i64[0] = __PAIR64__(v84, v83.u32[0]);
                    float32x4_t v92 = (float32x4_t)v147.columns[0];
                    float32x4_t v93 = (float32x4_t)v147.columns[1];
                    float32x4_t v94 = (float32x4_t)v147.columns[2];
                    v72.f32[0] = 1.0 / *(float *)v123.i32;
                    float32x4_t v143 = v72;
                    *(float *)&v82.i32[1] = 1.0 / *(float *)v123.i32;
                    int32x4_t v144 = v82;
                    int32x4_t v145 = v89;
                    memset(&v147, 0, 48);
                    do
                    {
                      v147.columns[v90 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, COERCE_FLOAT(*(_OWORD *)((char *)&v143 + v90 * 4))), (float32x4_t)xmmword_1A5EFDE70, *(float32x2_t *)&v143.f32[v90], 1), _Q0, *(float32x4_t *)((char *)&v143 + v90 * 4), 2);
                      v90 += 4;
                    }
                    while (v90 != 12);
                    unint64_t v95 = 0;
                    simd_float4 v96 = v147.columns[0];
                    simd_float4 v97 = v147.columns[1];
                    simd_float4 v98 = v147.columns[2];
                    float32x4_t v143 = (float32x4_t)v147.columns[0];
                    int32x4_t v144 = (int32x4_t)v147.columns[1];
                    int32x4_t v145 = (int32x4_t)v147.columns[2];
                    memset(&v147, 0, 48);
                    do
                    {
                      v147.columns[v95 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, COERCE_FLOAT(*(_OWORD *)((char *)&v143 + v95 * 4))), v93, *(float32x2_t *)&v143.f32[v95], 1), v94, *(float32x4_t *)((char *)&v143 + v95 * 4), 2);
                      v95 += 4;
                    }
                    while (v95 != 12);
                    unint64_t v99 = 0;
                    uint64_t v100 = v147.columns[0].i64[0];
                    simd_float4 v101 = v147.columns[1];
                    simd_float4 v102 = v147.columns[2];
                    *(_DWORD *)(v15 + 8) = v147.columns[0].i32[2];
                    *(_DWORD *)(v15 + 24) = v101.i32[2];
                    *(void *)uint64_t v15 = v100;
                    *(void *)(v15 + 16) = v101.i64[0];
                    *(_DWORD *)(v15 + 40) = v102.i32[2];
                    *(void *)(v15 + 32) = v102.i64[0];
                    int32x4_t v103 = vzip1q_s32(v134, v136);
                    float32x4_t v104 = v128;
                    float32x4_t v106 = v129;
                    float32x4_t v105 = v130;
                    float32x4_t v143 = (float32x4_t)vzip1q_s32(v103, v135);
                    int32x4_t v144 = vzip2q_s32(v103, vdupq_lane_s32(*(int32x2_t *)v135.i8, 1));
                    int32x4_t v145 = vzip1q_s32(vzip2q_s32(v134, v136), vdupq_laneq_s32(v135, 2));
                    memset(&v147, 0, 48);
                    do
                    {
                      v147.columns[v99 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v104, COERCE_FLOAT(*(_OWORD *)((char *)&v143 + v99 * 4))), v106, *(float32x2_t *)&v143.f32[v99], 1), v105, *(float32x4_t *)((char *)&v143 + v99 * 4), 2);
                      v99 += 4;
                    }
                    while (v99 != 12);
                    unint64_t v107 = 0;
                    float32x4_t v108 = (float32x4_t)v147.columns[0];
                    float32x4_t v109 = (float32x4_t)v147.columns[1];
                    float32x4_t v110 = (float32x4_t)v147.columns[2];
                    float32x4_t v143 = (float32x4_t)v96;
                    int32x4_t v144 = (int32x4_t)v97;
                    int32x4_t v145 = (int32x4_t)v98;
                    memset(&v147, 0, 48);
                    do
                    {
                      v147.columns[v107 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v108, COERCE_FLOAT(*(_OWORD *)((char *)&v143 + v107 * 4))), v109, *(float32x2_t *)&v143.f32[v107], 1), v110, *(float32x4_t *)((char *)&v143 + v107 * 4), 2);
                      v107 += 4;
                    }
                    while (v107 != 12);
                    uint64_t v33 = 0;
                    uint64_t v111 = v147.columns[0].i64[0];
                    simd_float4 v112 = v147.columns[1];
                    simd_float4 v113 = v147.columns[2];
                    *(_DWORD *)(a7 + 8) = v147.columns[0].i32[2];
                    *(_DWORD *)(a7 + 24) = v112.i32[2];
                    *(void *)a7 = v111;
                    *(void *)(a7 + 16) = v112.i64[0];
                    *(_DWORD *)(a7 + 40) = v113.i32[2];
                    *(void *)(a7 + 32) = v113.i64[0];
                    return v33;
                  }
                  goto LABEL_56;
                }
                uint64_t v33 = v115;
                fig_log_get_emitter();
              }
              FigDebugAssert3();
              return v33;
            }
          }
          goto LABEL_66;
        }
        uint64_t v33 = IntrinsicsMatrix;
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      else
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v33 = FigSignalErrorAt();
        float32x4_t v13 = a8;
      }
      uint64_t v15 = a6;
      goto LABEL_30;
    }
    fig_log_get_emitter();
LABEL_67:
    FigDebugAssert3();
    uint64_t v33 = FigSignalErrorAt();
    goto LABEL_30;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t BWStereoUtilitiesComputeStereoBaseline(uint64_t a1, uint64_t a2, void *a3, float *a4)
{
  *a4 = 0.0;
  if (a3)
  {
    memset(&v14, 0, sizeof(v14));
    uint64_t ViewMatrixInCameraCoordinates = su_getViewMatrixInCameraCoordinates((void *)[a3 objectForKeyedSubscript:a1], (int32x2_t *)&v14);
    if (ViewMatrixInCameraCoordinates)
    {
      uint64_t v8 = ViewMatrixInCameraCoordinates;
      fig_log_get_emitter();
    }
    else
    {
      memset(v13, 0, sizeof(v13));
      uint64_t v8 = su_getViewMatrixInCameraCoordinates((void *)[a3 objectForKeyedSubscript:a2], (int32x2_t *)v13);
      if (!v8)
      {
        float32x4_t v12 = 0u;
        memset(v11, 0, sizeof(v11));
        su_computeRelativeExtrinsics(&v14, v13, (uint64_t)v11);
        float32x4_t v9 = vmulq_f32(v12, v12);
        *a4 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
        return v8;
      }
      fig_log_get_emitter();
    }
    FigDebugAssert3();
    return v8;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t su_getViewMatrixInCameraCoordinates(void *a1, int32x2_t *a2)
{
  if (a2
    && (uint64_t v3 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F52CA8]]) != 0
    && (int32x4_t v4 = v3, [v3 length] == 48))
  {
    int32x4_t v5 = (int32x2_t *)[v4 bytes];
    *(int32x2_t *)v6.f32 = v5[1];
    v6.i64[1] = v6.i64[0];
    int32x4_t v7 = (int32x4_t)vnegq_f32(v6);
    int32x2_t v8 = v5[2];
    *(int32x2_t *)v9.f32 = v5[3];
    v9.i64[1] = v9.i64[0];
    int32x4_t v10 = (int32x4_t)vnegq_f32(v9);
    *(int32x2_t *)v11.f32 = v5[4];
    int32x2_t v12 = v5[5];
    v11.i64[0] = vnegq_f32(v11).u64[0];
    int32x2_t v13 = vzip1_s32(*v5, v8);
    int32x2_t v14 = vzip2_s32(*v5, v8);
    a2[1].i32[0] = v11.i32[0];
    *a2 = v13;
    a2[3].i32[0] = v11.i32[1];
    a2[2] = v14;
    a2[5].i32[0] = v12.i32[0];
    a2[4] = (int32x2_t)vzip1q_s32(vdupq_laneq_s32(v7, 2), vdupq_laneq_s32(v10, 2)).u64[0];
    a2[7].i32[0] = v12.i32[1];
    a2[6] = (int32x2_t)vuzp2q_s32(vuzp2q_s32(v7, v10), v7).u64[0];
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

double su_computeRelativeExtrinsics(simd_float4x4 *a1, float32x4_t *a2, uint64_t a3)
{
  simd_float4x4 v19 = __invert_f4(*a1);
  uint64_t v5 = 0;
  float32x4_t v6 = *a2;
  float32x4_t v7 = a2[1];
  v6.i32[3] = 0;
  v7.i32[3] = 0;
  float32x4_t v8 = a2[2];
  float32x4_t v9 = a2[3];
  v8.i32[3] = 0;
  v9.i32[3] = 1.0;
  simd_float4x4 v14 = v19;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  do
  {
    *(long long *)((char *)&v15 + v5 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)&v14.columns[v5])), v7, *(float32x2_t *)v14.columns[v5].f32, 1), v8, (float32x4_t)v14.columns[v5], 2), v9, (float32x4_t)v14.columns[v5], 3);
    ++v5;
  }
  while (v5 != 4);
  double result = *(double *)&v15;
  long long v11 = v16;
  long long v12 = v17;
  long long v13 = v18;
  *(_DWORD *)(a3 + 8) = DWORD2(v15);
  *(double *)a3 = result;
  *(_DWORD *)(a3 + 24) = DWORD2(v11);
  *(_DWORD *)(a3 + 40) = DWORD2(v12);
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 56) = DWORD2(v13);
  *(void *)(a3 + 48) = v13;
  return result;
}

BOOL FigCameraUsageProhibited()
{
  uint64_t v0 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v1 = (void *)[MEMORY[0x1E4F74230] sharedConnection];
  BOOL v2 = [v1 effectiveBoolValueForSetting:*MEMORY[0x1E4F73F80]] == 2;
  return v2;
}

FigCameraUsageListener *FigCameraUsageRegisterChangeHandler(FigCameraUsageListener *result)
{
  if (!FigCameraUsageRegisterChangeHandler_sCameraUsageListener)
  {
    double result = [[FigCameraUsageListener alloc] initWithChangeHandler:result];
    FigCameraUsageRegisterChangeHandler_sCameraUsageListener = (uint64_t)result;
  }
  return result;
}

uint64_t BWPortraitUtilitiesAttachLumaNoiseLevelToSampleBuffer(const void *a1, void *a2)
{
  if (a1 && a2 && (CFTypeRef v4 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0)) != 0)
  {
    uint64_t v5 = (void *)v4;
    if (objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a1, @"StillSettings", 0), "captureSettings"), "captureType") == 10&& (float32x4_t v6 = objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E4F53300])) != 0&& (v7 = objc_msgSend(v6, "intValue"), v7 < 3))
    {
      float32x4_t v8 = off_1E5C25970[v7];
    }
    else
    {
      float32x4_t v9 = (void *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F558E0]];
      if (v9)
      {
        int v10 = [v9 integerValue];
        float32x4_t v8 = @"SingleImage";
        switch(v10)
        {
          case 0:
          case 4:
          case 5:
          case 10:
            goto LABEL_16;
          case 1:
          case 6:
            float32x4_t v8 = @"SIS";
            goto LABEL_16;
          case 2:
          case 7:
            float32x4_t v8 = @"OIS";
            goto LABEL_16;
          case 3:
          case 8:
          case 9:
            float32x4_t v8 = @"HDR";
            goto LABEL_16;
          default:
            if (v10 != 100) {
              goto LABEL_13;
            }
            goto LABEL_16;
        }
      }
      float32x4_t v8 = @"SingleImage";
    }
LABEL_16:
    uint64_t v12 = FigCaptureComputeImageGainFromMetadata();
    if (v12)
    {
      uint64_t v11 = v12;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      long long v13 = (void *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F533F0]];
      if ([v13 unsignedIntValue]) {
        unsigned int v14 = [v13 unsignedIntValue];
      }
      else {
        unsigned int v14 = 4;
      }
      long long v15 = (void *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F533F8]];
      if ([v15 unsignedIntValue]) {
        float v16 = (float)([v15 unsignedIntValue] + 1);
      }
      else {
        float v16 = 4.0;
      }
      long long v17 = (void *)[a2 objectForKeyedSubscript:@"NoiseEstimation"];
      if (v17
        && (long long v18 = (void *)[v17 objectForKeyedSubscript:v8]) != 0
        && (simd_float4x4 v19 = v18, (v20 = [v18 objectForKeyedSubscript:@"GainLevels"]) != 0)
        && (v21 = (void *)v20, (uint64_t v22 = [v19 objectForKeyedSubscript:@"NoiseLevels"]) != 0)
        && (CFDictionaryRef v23 = (void *)v22, v24 = [v21 count], v24 == objc_msgSend(v23, "count"))
        && (unint64_t)[v21 count] > 1)
      {
        objc_msgSend((id)objc_msgSend(v21, "firstObject"), "floatValue");
        float v26 = v25;
        objc_msgSend((id)objc_msgSend(v23, "firstObject"), "floatValue");
        float v28 = v27;
        if ((unint64_t)[v21 count] < 2)
        {
          float v31 = NAN;
          float v32 = NAN;
        }
        else
        {
          unint64_t v30 = 1;
          do
          {
            float v31 = v26;
            float v32 = v28;
            objc_msgSend((id)objc_msgSend(v21, "objectAtIndex:", v30), "floatValue");
            float v26 = v33;
            objc_msgSend((id)objc_msgSend(v23, "objectAtIndex:", v30), "floatValue");
            float v28 = *(float *)&v29;
            if (v26 >= NAN) {
              break;
            }
            ++v30;
          }
          while (v30 < [v21 count]);
        }
        *(float *)&double v29 = v32
                       + (float)(fminf(fmaxf((float)(NAN - v31) / (float)(v26 - v31), 0.0), 1.0) * (float)(v28 - v32));
        float v34 = (float)(2.0 / sqrtf(v16)) * *(float *)&v29;
        if (v14 >= 5) {
          *(float *)&double v29 = v34;
        }
        CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F55BF0], (CFTypeRef)[NSNumber numberWithFloat:v29], 1u);
      }
      else
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      return 0;
    }
  }
  else
  {
LABEL_13:
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return v11;
}

uint64_t BWPortraitUtilitiesAttachSyntheticFocusRectangleToSampleBuffer(CMAttachmentBearerRef target)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v107.CGFloat a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v107.CGFloat c = v2;
  *(_OWORD *)&v107.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  uint64_t v3 = MEMORY[0x1E4F1DB20];
  if (target)
  {
    CFTypeRef v4 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      CGPoint v105 = *(CGPoint *)v3;
      CGSize v106 = *(CGSize *)(v3 + 16);
      CGPoint v102 = *(CGPoint *)v3;
      CGPoint v104 = *(CGPoint *)v3;
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          CGFloat y = v105.y;
          CGFloat x = v105.x;
          CGFloat height = v106.height;
          CGFloat width = v106.width;
        }
        else
        {
          __asm { FMOV            V0.2D, #1.0 }
          CGFloat y = 0.0;
          CGFloat height = 1.0;
          CGFloat width = 1.0;
          CGFloat x = 0.0;
        }
        double v6 = FigCaptureComputeAffineTransformFromSourceAndDestRects((uint64_t)&v107, v104.x, v104.y, v106.width, v106.height, x, y, width, height);
      }
      float v16 = objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E4F53EC8], v6);
      long long v17 = (const void **)MEMORY[0x1E4F53DC0];
      long long v18 = (void *)MEMORY[0x1E4F54180];
      if (v16)
      {
        simd_float4x4 v19 = v16;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        uint64_t v20 = [v16 countByEnumeratingWithState:&v114 objects:v121 count:16];
        if (v20)
        {
          uint64_t v21 = v20;
          uint64_t v22 = *(void *)v115;
          while (1)
          {
            if (*(void *)v115 != v22) {
              objc_enumerationMutation(v19);
            }
            if (!--v21)
            {
              uint64_t v21 = [v19 countByEnumeratingWithState:&v114 objects:v121 count:16];
              if (!v21) {
                break;
              }
            }
          }
        }
        if ((int)objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E4F53EB8]), "intValue") >= 1)
        {
          if ([v19 count])
          {
            CFDictionaryRef v23 = (const __CFDictionary *)objc_msgSend(v19, "objectAtIndexedSubscript:", (unint64_t)objc_msgSend(v19, "count") > 1);
            rect.CGPoint origin = v102;
            rect.CGSize size = v106;
            if (CGRectMakeWithDictionaryRepresentation(v23, &rect) && !CGRectIsEmpty(rect))
            {
              uint64_t v24 = (void *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
              float v25 = (void *)[v24 objectForKeyedSubscript:*MEMORY[0x1E4F538C8]];
              float v26 = (void *)[v25 objectForKeyedSubscript:*MEMORY[0x1E4F538F8]];
              if (!v26) {
                float v26 = (void *)[v5 objectForKeyedSubscript:*v17];
              }
              if (![v26 count]) {
                goto LABEL_59;
              }
              double v27 = rect.size.width;
              double v28 = rect.size.height;
              double v29 = *(double *)v3;
              double v30 = *(double *)(v3 + 8);
              double v32 = *(double *)(v3 + 16);
              double v31 = *(double *)(v3 + 24);
              CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v5, (const void *)*MEMORY[0x1E4F52C18]);
              if (!Value) {
                goto LABEL_93;
              }
              CFArrayRef v34 = Value;
              CFTypeID v35 = CFGetTypeID(Value);
              if (v35 != CFArrayGetTypeID()) {
                goto LABEL_93;
              }
              if (CFArrayGetCount(v34) != 4) {
                goto LABEL_93;
              }
              ValueAtIndeCGFloat x = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 0);
              if (!ValueAtIndex) {
                goto LABEL_93;
              }
              CFNumberRef v37 = ValueAtIndex;
              CFTypeID v38 = CFGetTypeID(ValueAtIndex);
              if (v38 != CFNumberGetTypeID()) {
                goto LABEL_93;
              }
              LODWORD(valuePtr.origin.x) = 0;
              uint64_t v119 = 0;
              float v118 = 0.0;
              if (!CFNumberGetValue(v37, kCFNumberFloatType, &valuePtr)) {
                goto LABEL_93;
              }
              CFNumberRef v39 = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 1);
              if (!v39) {
                goto LABEL_93;
              }
              CFNumberRef v40 = v39;
              CFTypeID v41 = CFGetTypeID(v39);
              if (v41 != CFNumberGetTypeID()) {
                goto LABEL_93;
              }
              if (CFNumberGetValue(v40, kCFNumberFloatType, (char *)&v119 + 4)
                && (CFNumberRef v42 = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 2)) != 0
                && (CFNumberRef v43 = v42, v44 = CFGetTypeID(v42), v44 == CFNumberGetTypeID())
                && CFNumberGetValue(v43, kCFNumberFloatType, &v119)
                && (CFNumberRef v45 = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 3)) != 0
                && (CFNumberRef v46 = v45, v47 = CFGetTypeID(v45), v47 == CFNumberGetTypeID())
                && CFNumberGetValue(v46, kCFNumberFloatType, &v118))
              {
                double v29 = (float)(*(float *)&valuePtr.origin.x / 1000.0);
                double v30 = (float)(*((float *)&v119 + 1) / 1000.0);
                double v32 = (float)(*(float *)&v119 / 1000.0);
                double v31 = (float)(v118 / 1000.0);
              }
              else
              {
LABEL_93:
                fig_log_get_emitter();
                uint64_t v97 = v99;
                LODWORD(v96) = 0;
                FigDebugAssert3();
              }
              v123.origin.CGFloat x = v29;
              v123.origin.CGFloat y = v30;
              v123.size.CGFloat width = v32;
              v123.size.CGFloat height = v31;
              if (CGRectIsNull(v123))
              {
                fig_log_get_emitter();
                uint64_t v97 = v99;
                LODWORD(v96) = 0;
                FigDebugAssert3();
                if (v23) {
                  goto LABEL_71;
                }
                goto LABEL_60;
              }
              double v48 = fabs(v27 * v28);
              v124.origin.CGFloat x = v29;
              v124.size.CGFloat height = v31;
              v124.origin.CGFloat y = v30;
              double v49 = v32;
              v124.size.CGFloat width = v32;
              CGRect v125 = CGRectIntersection(v124, rect);
              double v50 = v125.size.width;
              double v51 = v125.size.height;
              double v52 = 0.0;
              if (!CGRectIsNull(v125)) {
                double v52 = fabs(v50 * v51) / fmin(fabs(v31 * v49), v48);
              }
              float32x4_t v53 = v17;
              long long v111 = 0u;
              long long v112 = 0u;
              long long v109 = 0u;
              long long v110 = 0u;
              uint64_t v54 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v109, &v120, 16, v96, v97);
              if (v54)
              {
                uint64_t v55 = v54;
                uint64_t v56 = *(void *)v110;
                unint64_t v57 = v18;
                float32x4_t v58 = (const void *)*v18;
LABEL_43:
                uint64_t v59 = 0;
                while (1)
                {
                  if (*(void *)v110 != v56) {
                    objc_enumerationMutation(v26);
                  }
                  if (v52 >= 0.5) {
                    break;
                  }
                  CFDictionaryRef v60 = (const __CFDictionary *)[*(id *)(*((void *)&v109 + 1) + 8 * v59) objectForKeyedSubscript:v58];
                  if (!v60
                    || (valuePtr.CGPoint origin = v102,
                        valuePtr.CGSize size = v106,
                        !CGRectMakeWithDictionaryRepresentation(v60, &valuePtr)))
                  {
                    fig_log_get_emitter();
                    uint64_t v97 = v99;
                    LODWORD(v96) = 0;
                    FigDebugAssert3();
                    long long v18 = v57;
                    long long v17 = v53;
                    uint64_t v3 = MEMORY[0x1E4F1DB20];
                    goto LABEL_59;
                  }
                  CGRect v126 = CGRectIntersection(valuePtr, rect);
                  double v61 = v126.size.width;
                  double v62 = v126.size.height;
                  BOOL IsNull = CGRectIsNull(v126);
                  double v64 = 0.0;
                  if (!IsNull) {
                    double v64 = fabs(v61 * v62) / fmin(fabs(valuePtr.size.width * valuePtr.size.height), v48);
                  }
                  double v52 = fmax(v52, v64);
                  if (v55 == ++v59)
                  {
                    uint64_t v55 = [v26 countByEnumeratingWithState:&v109 objects:&v120 count:16];
                    if (v55) {
                      goto LABEL_43;
                    }
                    break;
                  }
                }
              }
              else
              {
                unint64_t v57 = v18;
              }
              long long v18 = v57;
              long long v17 = v53;
              uint64_t v3 = MEMORY[0x1E4F1DB20];
              if (v52 >= 0.5)
              {
LABEL_59:
                if (v23)
                {
LABEL_71:
                  uint64_t v76 = 0;
                  goto LABEL_72;
                }
                goto LABEL_60;
              }
              v127.origin.CGFloat x = v29;
              v127.origin.CGFloat y = v30;
              v127.size.CGFloat width = v49;
              v127.size.CGFloat height = v31;
              CFDictionaryRef v65 = CGRectCreateDictionaryRepresentation(v127);
              if (v65)
              {
LABEL_70:
                CFDictionaryRef v23 = v65;
                goto LABEL_71;
              }
            }
          }
          fig_log_get_emitter();
          uint64_t v97 = v99;
          LODWORD(v96) = 0;
          FigDebugAssert3();
        }
      }
LABEL_60:
      CFArrayRef v66 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v5, *v17);
      if (v66)
      {
        CFArrayRef v67 = v66;
        int Count = CFArrayGetCount(v66);
        if (Count >= 1)
        {
          CFIndex v69 = 0;
          CFDictionaryRef v23 = 0;
          unint64_t v70 = (const void *)*v18;
          uint64_t v71 = Count;
          float v72 = 0.0;
          while (1)
          {
            *(CGPoint *)&v121[0].CGFloat a = v102;
            *(CGSize *)&v121[0].CGFloat c = v106;
            CFDictionaryRef v73 = (const __CFDictionary *)CFArrayGetValueAtIndex(v67, v69);
            CFDictionaryRef v74 = (const __CFDictionary *)CFDictionaryGetValue(v73, v70);
            if (!CGRectMakeWithDictionaryRepresentation(v74, (CGRect *)v121)) {
              break;
            }
            float v75 = v121[0].c * v121[0].d;
            if (v72 < v75)
            {
              CFDictionaryRef v23 = v74;
              float v72 = v121[0].c * v121[0].d;
            }
            if (v71 == ++v69)
            {
              if (v72 <= 0.0) {
                break;
              }
              if (v23) {
                goto LABEL_71;
              }
              goto LABEL_69;
            }
          }
        }
        fig_log_get_emitter();
        uint64_t v97 = v99;
        LODWORD(v96) = 0;
        FigDebugAssert3();
      }
LABEL_69:
      v128.origin.CGFloat x = 0.25;
      v128.origin.CGFloat y = 0.25;
      v128.size.CGFloat width = 0.5;
      v128.size.CGFloat height = 0.5;
      CFDictionaryRef v65 = CGRectCreateDictionaryRepresentation(v128);
      goto LABEL_70;
    }
  }
  fig_log_get_emitter();
  uint64_t v97 = v99;
  LODWORD(v96) = 0;
  FigDebugAssert3();
  CFDictionaryRef v23 = 0;
  uint64_t v76 = 4294954516;
LABEL_72:
  CGSize v77 = *(CGSize *)(v3 + 16);
  v120.CGPoint origin = *(CGPoint *)v3;
  v120.CGSize size = v77;
  if (!CGRectMakeWithDictionaryRepresentation(v23, &v120))
  {
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F55BE8], v23, 1u);
LABEL_84:
    CFDictionaryRef v78 = (const __CFDictionary *)(id)[(__CFDictionary *)v23 copy];
    goto LABEL_85;
  }
  CGFloat v103 = v120.origin.x;
  CGFloat v100 = v120.size.width;
  CGFloat v101 = v120.origin.y;
  recCGAffineTransform t1 = v120.size.height;
  CFDictionaryRef v78 = CGRectCreateDictionaryRepresentation(v120);
  CGFloat v79 = v120.origin.x;
  CGFloat v80 = v120.origin.y;
  CGFloat v81 = v120.size.width;
  CGFloat v82 = v120.size.height;
  v121[0] = v107;
  if (!CGAffineTransformIsIdentity(v121))
  {
    v121[0] = v107;
    v129.origin.CGFloat x = v79;
    v129.origin.CGFloat y = v80;
    v129.size.CGFloat width = v81;
    v129.size.CGFloat height = v82;
    CGRect v130 = CGRectApplyAffineTransform(v129, v121);
    CGFloat v79 = v130.origin.x;
    CGFloat v80 = v130.origin.y;
    CGFloat v81 = v130.size.width;
    CGFloat v82 = v130.size.height;
  }
  v138.origin.CGFloat x = 0.0;
  v138.origin.CGFloat y = 0.0;
  v138.size.CGFloat width = 1.0;
  v138.size.CGFloat height = 1.0;
  v131.origin.CGFloat x = v79;
  v131.origin.CGFloat y = v80;
  v131.size.CGFloat width = v81;
  v131.size.CGFloat height = v82;
  CGRect v132 = CGRectIntersection(v131, v138);
  CGFloat v83 = v132.origin.x;
  CGFloat v84 = v132.origin.y;
  CGFloat v85 = v132.size.width;
  CGFloat v86 = v132.size.height;
  v132.origin.CGFloat x = v79;
  v132.origin.CGFloat y = v80;
  v132.size.CGFloat width = v81;
  v132.size.CGFloat height = v82;
  v139.origin.CGFloat x = v83;
  v139.origin.CGFloat y = v84;
  v139.size.CGFloat width = v85;
  v139.size.CGFloat height = v86;
  CGRectEqualToRect(v132, v139);
  v140.origin.CGFloat x = 0.0;
  v140.origin.CGFloat y = 0.0;
  v140.size.CGFloat width = 1.0;
  v140.size.CGFloat height = 1.0;
  v133.origin.CGFloat x = v103;
  v133.origin.CGFloat y = v101;
  v133.size.CGFloat width = v100;
  v133.size.CGFloat height = rect1;
  CGRect v134 = CGRectIntersection(v133, v140);
  CGFloat v87 = v134.origin.x;
  CGFloat v88 = v134.origin.y;
  v134.origin.CGFloat x = v103;
  CGFloat v89 = v134.size.width;
  v134.origin.CGFloat y = v101;
  CGFloat v90 = v134.size.height;
  v134.size.CGFloat width = v100;
  CGFloat v91 = v88;
  v134.size.CGFloat height = rect1;
  CGFloat v92 = v87;
  v141.origin.CGFloat x = v87;
  v141.origin.CGFloat y = v91;
  v141.size.CGFloat width = v89;
  v141.size.CGFloat height = v90;
  CGRectEqualToRect(v134, v141);
  v142.origin.CGFloat x = v83;
  v142.origin.CGFloat y = v84;
  v142.size.CGFloat width = v85;
  v142.size.CGFloat height = v86;
  if (!CGRectEqualToRect(v120, v142))
  {
    v135.origin.CGFloat x = v83;
    v135.origin.CGFloat y = v84;
    v135.size.CGFloat width = v85;
    v135.size.CGFloat height = v86;
    CFDictionaryRef v93 = CGRectCreateDictionaryRepresentation(v135);
    if (v93) {
      CFDictionaryRef v23 = v93;
    }
  }
  v136.origin.CGFloat x = v103;
  v136.size.CGFloat width = v100;
  v136.origin.CGFloat y = v101;
  v136.size.CGFloat height = rect1;
  v143.origin.CGFloat x = v92;
  v143.origin.CGFloat y = v91;
  v143.size.CGFloat width = v89;
  v143.size.CGFloat height = v90;
  if (!CGRectEqualToRect(v136, v143))
  {
    v137.origin.CGFloat x = v92;
    v137.origin.CGFloat y = v91;
    v137.size.CGFloat width = v89;
    v137.size.CGFloat height = v90;
    CFDictionaryRef v94 = CGRectCreateDictionaryRepresentation(v137);
    if (v94) {
      CFDictionaryRef v78 = v94;
    }
  }
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F55BE8], v23, 1u);
  if (!v78) {
    goto LABEL_84;
  }
LABEL_85:
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F55C08], v78, 1u);
  return v76;
}

void *_shortStringForFigCaptureSourceDeviceTypes(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v2 = (void *)[MEMORY[0x1E4F28E78] stringWithString:@" "];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(a1);
        }
        unsigned int v7 = [*(id *)(*((void *)&v10 + 1) + 8 * i) intValue] - 1;
        float32x4_t v8 = @"?+";
        if (v7 <= 0xF) {
          float32x4_t v8 = off_1E5C25988[v7];
        }
        [v2 appendString:v8];
      }
      uint64_t v4 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
  objc_msgSend(v2, "deleteCharactersInRange:", objc_msgSend(v2, "length") - 1, 1);
  return v2;
}

void sub_1A5AFEDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Timestamp()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_TimestampSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_TimestampSymbolLoc_ptr;
  if (!getkCVAFaceTracking_TimestampSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_Timestamp");
    getkCVAFaceTracking_TimestampSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_Timestamp_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5AFEEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Rotation()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_RotationSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_RotationSymbolLoc_ptr;
  if (!getkCVAFaceTracking_RotationSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_Rotation");
    getkCVAFaceTracking_RotationSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_Rotation_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5AFF040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Translation()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_TranslationSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_TranslationSymbolLoc_ptr;
  if (!getkCVAFaceTracking_TranslationSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_Translation");
    getkCVAFaceTracking_TranslationSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_Translation_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5AFF138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Intrinsics()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr;
  if (!getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_Intrinsics");
    getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_Intrinsics_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5AFF230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Extrinsics()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr;
  if (!getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_Extrinsics");
    getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_Extrinsics_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5AFF328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_DepthMetaData()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_DepthMetaDataSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_DepthMetaDataSymbolLoc_ptr;
  if (!getkCVAFaceTracking_DepthMetaDataSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_DepthMetaData");
    getkCVAFaceTracking_DepthMetaDataSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_DepthMetaData_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5AFF6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_StructuredLightOccluded()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_StructuredLightOccludedSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_StructuredLightOccludedSymbolLoc_ptr;
  if (!getkCVAFaceTracking_StructuredLightOccludedSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_StructuredLightOccluded");
    getkCVAFaceTracking_StructuredLightOccludedSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_StructuredLightOccluded_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5AFF7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_DepthSource()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_DepthSourceSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_DepthSourceSymbolLoc_ptr;
  if (!getkCVAFaceTracking_DepthSourceSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_DepthSource");
    getkCVAFaceTracking_DepthSourceSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_DepthSource_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5AFF8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AppleCVALibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!AppleCVALibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __AppleCVALibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E5C25B48;
    uint64_t v4 = 0;
    AppleCVALibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = AppleCVALibraryCore_frameworkLibrary;
  if (!AppleCVALibraryCore_frameworkLibrary) {
    AppleCVALibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __AppleCVALibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AppleCVALibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getCVAFaceTrackingProcessSymbolLoc_block_invoke(uint64_t a1)
{
  long long v2 = (void *)AppleCVALibrary();
  uint64_t result = dlsym(v2, "CVAFaceTrackingProcess");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCVAFaceTrackingProcessSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkCVA_tmrLADzZUFnL94QtJ4Eb9fgiSymbolLoc_block_invoke(uint64_t a1)
{
  long long v2 = (void *)AppleCVALibrary();
  uint64_t result = dlsym(v2, "kCVA_tmrLADzZUFnL94QtJ4Eb9fgi");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCVA_tmrLADzZUFnL94QtJ4Eb9fgiSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCVAFaceTrackingCreateSymbolLoc_block_invoke(uint64_t a1)
{
  long long v2 = (void *)AppleCVALibrary();
  uint64_t result = dlsym(v2, "CVAFaceTrackingCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCVAFaceTrackingCreateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

FigPointCloudDataCaptureConnectionConfiguration *cspc_getPointCloudConnectionConfigurationForLiDARDepth(void *a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(FigPointCloudDataCaptureConnectionConfiguration);
  [(FigCaptureConnectionConfiguration *)v4 setSourceConfiguration:a2];
  -[FigCaptureConnectionConfiguration setUnderlyingDeviceType:](v4, "setUnderlyingDeviceType:", [a2 sourceDeviceType]);
  uint64_t v5 = NSString;
  uint64_t v6 = (objc_class *)objc_opt_class();
  -[FigCaptureConnectionConfiguration setConnectionID:](v4, "setConnectionID:", [v5 stringWithFormat:@"<%@: %p>", NSStringFromClass(v6), v4]);
  [(FigCaptureConnectionConfiguration *)v4 setMediaType:1885564004];
  uint64_t v7 = [a2 source];
  id v15 = 0;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  long long v10 = *(void (**)(uint64_t, __CFString *, void, id *))(v9 + 48);
  if (v10)
  {
    v10(v7, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &v15);
    id v11 = v15;
  }
  else
  {
    id v11 = 0;
  }
  long long v12 = (void *)[v11 objectForKeyedSubscript:@"SupportedTimeOfFlightProjectorModes"];
  if ([v12 containsObject:&unk_1EFAFEB80])
  {
    uint64_t v13 = 4;
LABEL_11:
    [(FigPointCloudDataCaptureConnectionConfiguration *)v4 setProjectorMode:v13];
    goto LABEL_12;
  }
  if ([v12 containsObject:&unk_1EFAFEB98])
  {
    uint64_t v13 = 1;
    goto LABEL_11;
  }
LABEL_12:

  -[FigVideoCaptureConnectionConfiguration setOrientation:](v4, "setOrientation:", [a1 orientation]);
  -[FigVideoCaptureConnectionConfiguration setOutputWidth:](v4, "setOutputWidth:", [a1 outputWidth]);
  -[FigVideoCaptureConnectionConfiguration setOutputHeight:](v4, "setOutputHeight:", [a1 outputHeight]);
  -[FigVideoCaptureConnectionConfiguration setMirroringEnabled:](v4, "setMirroringEnabled:", [a1 mirroringEnabled]);
  -[FigCaptureConnectionConfiguration setSinkConfiguration:](v4, "setSinkConfiguration:", [a1 sinkConfiguration]);
  return v4;
}

void __adsie_createStateMachine_block_invoke_2(uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWJasperColorStillsExecutorController _serviceNextRequest](a2);
}

void __adsie_createStateMachine_block_invoke_3(uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)MEMORY[0x1A6272C70]();
  if (a2) {
    [*(id *)(a2 + 96) setErr:-[BWJasperColorStillsExecutorController _setupJasperColorStillsExecutor](a2)];
  }
}

void __adsie_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWJasperColorStillsExecutorController _execute](a2);
}

void FigCapturePreloadShaders()
{
}

void FigCapturePreloadShadersInternal(int a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  uint64_t v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F55F60], "metalDevice"), "newCommandQueue");
  uint64_t v4 = (void *)v3;
  if (!v3)
  {
    fig_log_get_emitter();
    goto LABEL_70;
  }
  int v45 = CFPreferenceNumberWithDefault;
  int v46 = a1;
  CFTypeID v47 = (void *)v3;
  uint64_t v5 = FigCaptureCFCreatePropertyList(@"AVCaptureSession.plist");
  uint64_t v6 = (void *)[(FigCaptureFlatPlist *)v5 objectForKeyedSubscript:@"AVCaptureDeviceCommonSettings"];
  char v7 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", @"BackgroundBlurSupported"), "BOOLValue");
  char v8 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", @"StudioLightingSupported"), "BOOLValue");
  char v9 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", @"ReactionEffectsSupported"), "BOOLValue");
  sDeviceUsesAnyVideoEffect = v7 | v8 | v9 | objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", @"BackgroundReplacementSupported"), "BOOLValue");
  sDeviceSWFRVersion = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", @"SWFRVersion"), "intValue");
  smartStyleVersion = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", @"SmartStyleRenderingVersion"), "intValue");
  constantColorVersion = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", @"ColorConstancyVersion"), "intValue");
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  obuint64_t j = (id)[(FigCaptureFlatPlist *)v5 objectForKeyedSubscript:@"AVCaptureDevices"];
  uint64_t v50 = [obj countByEnumeratingWithState:&v59 objects:v64 count:16];
  if (!v50) {
    goto LABEL_35;
  }
  uint64_t v49 = *(void *)v60;
  do
  {
    uint64_t v10 = 0;
    do
    {
      if (*(void *)v60 != v49) {
        objc_enumerationMutation(obj);
      }
      uint64_t v51 = v10;
      id v11 = *(void **)(*((void *)&v59 + 1) + 8 * v10);
      long long v12 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", @"MultiStream"), "objectForKeyedSubscript:", @"AVCaptureDeviceFormats");
      uint64_t v13 = (void *)[v11 objectForKeyedSubscript:@"stillImageNoiseReductionAndFusionScheme"];
      int v14 = [v13 intValue];
      id v15 = &sDeviceUsesUBProcessor;
      if (v14 == 3 || (id v15 = &sDeviceUsesNRFProcessor, v14 > 3))
      {
        *id v15 = 1;
        goto LABEL_10;
      }
      if (v13)
      {
        int v16 = v14;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v17 = (void *)[v12 allValues];
        uint64_t v18 = [v17 countByEnumeratingWithState:&v55 objects:v63 count:16];
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = *(void *)v56;
          do
          {
            uint64_t v21 = 0;
            do
            {
              if (*(void *)v56 != v20) {
                objc_enumerationMutation(v17);
              }
              uint64_t v22 = *(void **)(*((void *)&v55 + 1) + 8 * v21);
              if (objc_msgSend((id)objc_msgSend(v22, "objectForKeyedSubscript:", 0x1EFA50580), "BOOLValue"))
              {
                int v23 = objc_msgSend((id)objc_msgSend(v22, "objectForKeyedSubscript:", 0x1EFA505A0), "BOOLValue");
                int v24 = objc_msgSend((id)objc_msgSend(v22, "objectForKeyedSubscript:", 0x1EFA505E0), "BOOLValue");
                switch(v16)
                {
                  case 2:
                    sDeviceUsesGNRSampleBufferProcessor = 1;
                    if (((v23 ^ 1 | v24) & 1) == 0) {
                      goto LABEL_25;
                    }
                    break;
                  case 1:
                    sDeviceUsesTMBNRSampleBufferProcessor = 1;
                    if ((v23 & 1) == 0) {
                      break;
                    }
LABEL_25:
                    sDeviceUsesHDRSampleBufferProcessor = 1;
                    break;
                  case 0:
                    sDeviceUsesSISSampleBufferProcessor = 1;
                    if (v23) {
                      goto LABEL_25;
                    }
                    break;
                }
              }
              if (objc_msgSend((id)objc_msgSend(v22, "objectForKeyedSubscript:", 0x1EFA50600), "BOOLValue"))sDeviceUsesStereoFusionSampleBufferProcessor = 1; {
              ++v21;
              }
            }
            while (v19 != v21);
            uint64_t v25 = [v17 countByEnumeratingWithState:&v55 objects:v63 count:16];
            uint64_t v19 = v25;
          }
          while (v25);
        }
      }
LABEL_10:
      uint64_t v10 = v51 + 1;
    }
    while (v51 + 1 != v50);
    uint64_t v26 = [obj countByEnumeratingWithState:&v59 objects:v64 count:16];
    uint64_t v50 = v26;
  }
  while (v26);
LABEL_35:
  double v27 = (void *)[(FigCaptureFlatPlist *)FigCaptureCFCreatePropertyList(@"AVCaptureSession.plist") objectForKeyedSubscript:@"AVCaptureDevices"];
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id v52 = v27;
  uint64_t v28 = [v27 countByEnumeratingWithState:&v59 objects:v64 count:16];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)v60;
    do
    {
      for (uint64_t i = 0; i != v29; ++i)
      {
        if (*(void *)v60 != v30) {
          objc_enumerationMutation(v52);
        }
        double v32 = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v59 + 1) + 8 * i), "objectForKeyedSubscript:", @"MultiStream"), "objectForKeyedSubscript:", @"AVCaptureDeviceFormats");
        long long v55 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        float v33 = (void *)[v32 allValues];
        uint64_t v34 = [v33 countByEnumeratingWithState:&v55 objects:v63 count:16];
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = *(void *)v56;
          while (2)
          {
            for (uint64_t j = 0; j != v35; ++j)
            {
              if (*(void *)v56 != v36) {
                objc_enumerationMutation(v33);
              }
              if (sPocketDetectionSupported)
              {
                sPocketDetectionSupporteCGFloat d = 1;
                goto LABEL_51;
              }
              uint64_t v38 = [*(id *)(*((void *)&v55 + 1) + 8 * j) objectForKeyedSubscript:0x1EFA50C40];
              sPocketDetectionSupporteCGFloat d = v38 != 0;
              if (v38) {
                goto LABEL_51;
              }
            }
            uint64_t v35 = [v33 countByEnumeratingWithState:&v55 objects:v63 count:16];
            if (v35) {
              continue;
            }
            break;
          }
        }
LABEL_51:
        ;
      }
      uint64_t v29 = [v52 countByEnumeratingWithState:&v59 objects:v64 count:16];
    }
    while (v29);
  }
  uint64_t v4 = v47;
  if (sDeviceUsesHDRSampleBufferProcessor != 1)
  {
LABEL_59:
    int v40 = DMIsMigrationNeeded();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __FigCapturePreloadShadersInternal_block_invoke_2;
    block[3] = &unk_1E5C25F60;
    char v54 = v40;
    block[4] = v47;
    void block[5] = v45;
    if (v40) {
      dispatch_qos_class_t v41 = QOS_CLASS_DEFAULT;
    }
    else {
      dispatch_qos_class_t v41 = QOS_CLASS_UTILITY;
    }
    CFNumberRef v42 = dispatch_queue_attr_make_with_qos_class(0, v41, 0);
    CFNumberRef v43 = dispatch_queue_create("com.apple.coremedia.precompilation", v42);
    CFTypeID v44 = v43;
    if (v46)
    {
      dispatch_sync(v43, block);
      if (!v44) {
        goto LABEL_67;
      }
    }
    else
    {
      dispatch_async(v43, block);
      if (!v44) {
        goto LABEL_67;
      }
    }
    dispatch_release(v44);
    goto LABEL_67;
  }
  if (nonThreadSafeVideoProcessorsPreloadOperationQueue) {
    FigCaptureWaitForPreloadShadersCompletion();
  }
  id v39 = objc_alloc_init(MEMORY[0x1E4F28F08]);
  nonThreadSafeVideoProcessorsPreloadOperationQueue = (uint64_t)v39;
  if (v39)
  {
    [v39 addOperationWithBlock:&__block_literal_global_36];
    if (v46) {
      FigCaptureWaitForPreloadShadersCompletion();
    }
    goto LABEL_59;
  }
  fig_log_get_emitter();
LABEL_70:
  FigDebugAssert3();
LABEL_67:
}

void FigCaptureWaitForPreloadShadersCompletion()
{
  os_unfair_lock_lock(&nonThreadSafeVideoProcessorsPreloadOperationQueueLock);
  id v0 = (id)nonThreadSafeVideoProcessorsPreloadOperationQueue;
  os_unfair_lock_unlock(&nonThreadSafeVideoProcessorsPreloadOperationQueueLock);
  [v0 waitUntilAllOperationsAreFinished];
}

void __FigCapturePreloadShadersInternal_block_invoke()
{
  nonThreadSafeVideoProcessorsPreloadOperationQueue = 0;
  os_unfair_lock_unlock(&nonThreadSafeVideoProcessorsPreloadOperationQueueLock);
}

uint64_t __FigCapturePreloadShadersInternal_block_invoke_2(uint64_t a1)
{
  uint64_t v444 = *MEMORY[0x1E4F143B8];
  v281 = (void *)FigOSTransactionCreate();
  uint64_t v2 = mach_absolute_time();
  if (*(unsigned char *)(a1 + 48))
  {
    DMPerformMigrationIfNeeded();
    mach_absolute_time();
    mach_timebase_info info = 0;
    mach_timebase_info(&info);
    uint64_t v2 = mach_absolute_time();
  }
  if ((sDeviceUsesSISSampleBufferProcessor & 1) != 0
    || (sDeviceUsesTMBNRSampleBufferProcessor & 1) != 0
    || sDeviceUsesHDRSampleBufferProcessor)
  {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    info.numer = 1;
    if (!v3
      || (uint64_t v4 = v3,
          [v3 setObject:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F38D70]],
          uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F38D58]) initWithAPI:3 properties:v4],
          v4,
          !v5))
    {
      fig_log_get_emitter();
      uint64_t v277 = v279;
      LODWORD(pixels) = 0;
      uint64_t v2 = FigDebugAssert3();
      goto LABEL_45;
    }
    if ([v5 setParameter:608 to:&info])
    {

      goto LABEL_45;
    }
    v295 = v5;
    uint64_t v298 = a1;
    [MEMORY[0x1E4F38D58] setCurrentContext:v5];
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    char v8 = programs_es3;
    char v9 = NoiseReductionLumaRemix4_prog;
    uint64_t v10 = "com.apple.cameracapture";
    id v11 = "";
    while (1)
    {
      long long v12 = *v9;
      if (*v9)
      {
        uint64_t v13 = v9[1];
        if (v13)
        {
          int v14 = *(GLchar **)v13;
          GLuint Shader = gl_UtilsCreateShader(0x8B31u, *(GLchar **)v12);
          if (Shader)
          {
            GLuint v16 = Shader;
            obuint64_t j = v8;
            uint64_t v17 = v6;
            uint64_t v18 = v7;
            uint64_t v19 = v11;
            uint64_t v20 = v10;
            GLuint v21 = gl_UtilsCreateShader(0x8B30u, v14);
            if (v21)
            {
              GLuint v22 = v21;
              info.numer = 0;
              GLuint Program = glCreateProgram();
              GLuint v24 = Program;
              if (Program)
              {
                glAttachShader(Program, v16);
                glAttachShader(v24, v22);
                glLinkProgram(v24);
                glGetProgramiv(v24, 0x8B82u, (GLint *)&info);
                if (!info.numer)
                {
                  glDeleteProgram(v24);
                  GLuint v24 = 0;
                }
              }
              else
              {
                fig_log_get_emitter();
                uint64_t v277 = v279;
                LODWORD(pixels) = 0;
                FigDebugAssert3();
              }
              glDeleteShader(v16);
              glDeleteShader(v22);
              uint64_t v10 = v20;
              id v11 = v19;
              uint64_t v7 = v18;
              uint64_t v6 = v17;
              char v8 = obj;
              if (v24)
              {
                glUseProgram(v24);
                uint64_t v25 = (const GLchar **)*((void *)v12 + 2);
                uint64_t v26 = *v25;
                if (*v25)
                {
                  double v27 = v25 + 2;
                  do
                  {
                    glBindAttribLocation(v24, *((_DWORD *)v27 - 2), v26);
                    uint64_t v28 = (const GLchar *)*v27;
                    v27 += 2;
                    uint64_t v26 = v28;
                  }
                  while (v28);
                  glLinkProgram(v24);
                }
                uint64_t v29 = (const GLchar **)*((void *)v13 + 1);
                uint64_t v30 = *v29;
                if (*v29)
                {
                  double v31 = v29 + 2;
                  do
                  {
                    GLint UniformLocation = glGetUniformLocation(v24, v30);
                    glUniform1i(UniformLocation, *((_DWORD *)v31 - 2));
                    float v33 = (const GLchar *)*v31;
                    v31 += 2;
                    uint64_t v30 = v33;
                  }
                  while (v33);
                }
                uint64_t v34 = (const GLchar **)*((void *)v12 + 1);
                uint64_t v35 = *v34;
                if (*v34)
                {
                  uint64_t v36 = v34 + 2;
                  do
                  {
                    GLuint AttribLocation = glGetAttribLocation(v24, v35);
                    glVertexAttribPointer(AttribLocation, *((_DWORD *)v36 - 2), *((_DWORD *)v36 - 1), 0, 0, &PreloadOneShader_vertices);
                    glEnableVertexAttribArray(AttribLocation);
                    uint64_t v38 = (const GLchar *)*v36;
                    v36 += 2;
                    uint64_t v35 = v38;
                  }
                  while (v38);
                }
                uint64_t v7 = (v7 + 1);
                glBindFramebuffer(0x8D40u, v7);
                id v39 = (GLenum *)*((void *)v13 + 2);
                uint64_t v40 = v6;
                if (v39[2])
                {
                  do
                  {
                    uint64_t v40 = (v40 + 1);
                    glBindTexture(0xDE1u, v40);
                    glTexImage2D(0xDE1u, 0, v39[1], 1, 1, 0, v39[2], 0x1401u, 0);
                    glFramebufferTexture2D(0x8D40u, *v39, 0xDE1u, v40, 0);
                    GLenum v41 = v39[5];
                    v39 += 3;
                  }
                  while (v41);
                }
                glDrawBuffers(v40 - v6, draw_buffers);
                glDrawArrays(5u, 0, 3);
                glFlush();
                glDeleteProgram(v24);
                uint64_t v6 = v40;
                goto LABEL_32;
              }
            }
            else
            {
              id v11 = v19;
              fig_log_get_emitter();
              FigDebugAssert3();
              glDeleteShader(v16);
              uint64_t v7 = v18;
              uint64_t v6 = v17;
              char v8 = obj;
            }
          }
          else
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
        }
      }
      fig_log_get_emitter();
      FigDebugAssert3();
      fig_log_get_emitter();
      uint64_t v277 = v279;
      LODWORD(pixels) = 0;
      FigDebugAssert3();
LABEL_32:
      CFNumberRef v42 = (char **)v8[1];
      ++v8;
      char v9 = v42;
      if (!v42)
      {
        glGetError();
        for (info.numer = 1; info.numer <= v6; ++info.numer)
          glDeleteTextures(1, (const GLuint *)&info);
        for (info.numer = 1; info.numer <= v7; ++info.numer)
          glDeleteFramebuffers(1, (const GLuint *)&info);

        a1 = v298;
        break;
      }
    }
  }
LABEL_45:
  uint64_t v285 = *(void *)(a1 + 32);
  context = (void *)MEMORY[0x1A6272C70](v2);
  v284 = +[FigCaptureCameraParameters sharedInstance];
  CFNumberRef v43 = [(FigCaptureCameraParameters *)v284 cameraTuningParameters];
  id v44 = [(NSDictionary *)v43 objectForKeyedSubscript:@"DefaultSensorIDs"];
  id v287 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v288 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  unint64_t v45 = 0x1E4F1C000uLL;
  if (sDeviceUsesGNRSampleBufferProcessor == 1)
  {
    uint64_t v441 = *MEMORY[0x1E4F535B0];
    v442 = v43;
    v439[0] = @"sbpName";
    v439[1] = @"sbpOpts";
    v440[0] = @"GNR";
    v440[1] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v442 forKeys:&v441 count:1];
    objc_msgSend(v287, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v440, v439, 2));
  }
  uint64_t v46 = [+[FigCaptureCameraParameters sharedInstance] videoStabilizationProcessorVersion];
  if ((int)v46 >= 1)
  {
    uint64_t v47 = v46;
    uint64_t v48 = objc_msgSend(NSString, "stringWithFormat:", @"VISProcessorV%d", v46);
    v437[0] = @"bundlePath";
    v437[1] = @"classname";
    v438[0] = [NSString stringWithFormat:@"%@/VideoStabilizationV%d.bundle", @"/System/Library/VideoProcessors/", v47];
    v438[1] = v48;
    objc_msgSend(v288, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v438, v437, 2));
  }
  uint64_t v49 = *MEMORY[0x1E4F52DF0];
  uint64_t v50 = [v44 objectForKeyedSubscript:*MEMORY[0x1E4F52DF0]];
  uint64_t v51 = (void *)MEMORY[0x1E4F52DD8];
  uint64_t v52 = *MEMORY[0x1E4F52DE8];
  float32x4_t v53 = (uint64_t *)MEMORY[0x1E4F52DF8];
  objCGFloat a = v44;
  if (v50)
  {
    uint64_t v54 = *MEMORY[0x1E4F52DF8];
  }
  else
  {
    uint64_t v55 = [v44 objectForKeyedSubscript:v52];
    uint64_t v54 = *v53;
    if (v55)
    {
      uint64_t v51 = (void *)MEMORY[0x1E4F52DD8];
    }
    else if (![v44 objectForKeyedSubscript:*v53] {
           || (int v81 = [(FigCaptureCameraParameters *)v284 depthProcessorVersion],
    }
               uint64_t v51 = (void *)MEMORY[0x1E4F52DD8],
               v81 < 1))
    {
      int v282 = 0;
      v283 = 0;
      CGFloat v82 = v288;
      goto LABEL_113;
    }
  }
  uint64_t v56 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", *v51), "objectForKeyedSubscript:", objc_msgSend(v44, "objectForKeyedSubscript:", *v51));
  long long v57 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", v49), "objectForKeyedSubscript:", objc_msgSend(v44, "objectForKeyedSubscript:", v49));
  uint64_t v58 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", *MEMORY[0x1E4F52E00]), "objectForKeyedSubscript:", objc_msgSend(v44, "objectForKeyedSubscript:", *MEMORY[0x1E4F52E00]));
  uint64_t v59 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", v52), "objectForKeyedSubscript:", objc_msgSend(v44, "objectForKeyedSubscript:", v52));
  uint64_t v60 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", v54), "objectForKeyedSubscript:", objc_msgSend(v44, "objectForKeyedSubscript:", v54));
  uint64_t v61 = [v57 objectForKeyedSubscript:@"StereoFusionParameters"];
  if (sDeviceUsesStereoFusionSampleBufferProcessor == 1 && v61)
  {
    uint64_t v62 = *MEMORY[0x1E4F55C18];
    v435[0] = *MEMORY[0x1E4F535B0];
    v435[1] = v62;
    v436[0] = v61;
    v436[1] = &unk_1EFAFEC10;
    v435[2] = *MEMORY[0x1E4F53580];
    v436[2] = MEMORY[0x1E4F1CC38];
    v433[0] = @"sbpName";
    v433[1] = @"sbpOpts";
    v434[0] = @"StereoFusion";
    v434[1] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v436 forKeys:v435 count:3];
    objc_msgSend(v287, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v434, v433, 2));
  }
  v283 = [[BWInferenceEngine alloc] initWithScheduler:0 priority:29];
  int v63 = [(FigCaptureCameraParameters *)v284 disparityVersion];
  if (!v63)
  {
    long long v337 = 0u;
    long long v338 = 0u;
    long long v335 = 0u;
    long long v336 = 0u;
    uint64_t v67 = [v44 countByEnumeratingWithState:&v335 objects:&v429 count:16];
    if (!v67) {
      goto LABEL_78;
    }
    uint64_t v68 = v67;
    uint64_t v69 = *(void *)v336;
LABEL_64:
    uint64_t v70 = 0;
    while (1)
    {
      if (*(void *)v336 != v69) {
        objc_enumerationMutation(obja);
      }
      int v63 = -[FigCaptureCameraParameters disparityVersionForPortType:sensorIDString:](v284, "disparityVersionForPortType:sensorIDString:", *(void *)(*((void *)&v335 + 1) + 8 * v70), [obja objectForKeyedSubscript:*(void *)(*((void *)&v335 + 1) + 8 * v70)]);
      if (v63) {
        break;
      }
      if (v68 == ++v70)
      {
        uint64_t v68 = [obja countByEnumeratingWithState:&v335 objects:&v429 count:16];
        if (v68) {
          goto LABEL_64;
        }
        goto LABEL_78;
      }
    }
  }
  int v65 = v63 - 2;
  if (v63 >= 2
    && +[BWLandmarksInferenceConfiguration isPortraitPrewarmingRequired])
  {
    [(BWInferenceEngine *)v283 addInferenceOfType:801 version:[(FigCaptureCameraParameters *)v284 landmarksVersionForInferenceType:801] & 0xFFFFFFFFFFFFLL configuration:0];
  }
  switch(v65)
  {
    case 0:
      CFArrayRef v66 = &unk_1EFB05AF8;
      goto LABEL_77;
    case 1:
      uint64_t v71 = (NSDictionary *)[v57 objectForKeyedSubscript:@"DisparityParameters"];
      if (!v71) {
        goto LABEL_78;
      }
      float v72 = @"/System/Library/VideoProcessors/DisparityV3.bundle";
      break;
    case 2:
      CFArrayRef v66 = &unk_1EFB05B20;
      goto LABEL_77;
    case 3:
      uint64_t v71 = [+[FigCaptureCameraParameters sharedInstance] stereoDisparityParameters];
      if (!v71) {
        goto LABEL_78;
      }
      float v72 = @"/System/Library/VideoProcessors/DisparityV5.bundle";
      break;
    default:
      goto LABEL_78;
  }
  v427[0] = @"bundlePath";
  v427[1] = @"tuningParameters";
  v428[0] = v72;
  v428[1] = v71;
  CFArrayRef v66 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v428 forKeys:v427 count:2];
LABEL_77:
  [v288 addObject:v66];
LABEL_78:
  LODWORD(v64) = 1.0;
  id v73 = +[FigCaptureCameraParameters sdofTuningParametersForSensorIDDictionary:v57 zoomFactor:v64];
  LODWORD(v74) = 2.0;
  id v75 = +[FigCaptureCameraParameters sdofTuningParametersForSensorIDDictionary:v56 zoomFactor:v74];
  if (v58) {
    uint64_t v77 = v58;
  }
  else {
    uint64_t v77 = v60;
  }
  LODWORD(v76) = 1.0;
  id v78 = +[FigCaptureCameraParameters sdofTuningParametersForSensorIDDictionary:v77 zoomFactor:v76];
  LODWORD(v79) = 1.0;
  id v299 = +[FigCaptureCameraParameters sdofTuningParametersForSensorIDDictionary:v59 zoomFactor:v79];
  if (v73)
  {
    CGFloat v80 = (void *)[v73 objectForKeyedSubscript:*MEMORY[0x1E4F535B8]];
    unint64_t v45 = 0x1E4F1C000;
    goto LABEL_85;
  }
  unint64_t v45 = 0x1E4F1C000uLL;
  if (v78)
  {
    CGFloat v80 = (void *)[v78 objectForKeyedSubscript:*MEMORY[0x1E4F535B8]];
LABEL_85:
    if (v80) {
      LODWORD(v80) = [v80 intValue];
    }
    goto LABEL_91;
  }
  LODWORD(v80) = 0;
LABEL_91:
  if ((int)v80 >= 5) {
    uint64_t v83 = 5;
  }
  else {
    uint64_t v83 = v80;
  }
  uint64_t v84 = [NSString stringWithFormat:@"%@/%@V%d.bundle", @"/System/Library/VideoProcessors/", @"SDOFRendering", v83];
  uint64_t v85 = v84;
  if ((v83 - 3) >= 3)
  {
    if (v83 == 2)
    {
      v409 = @"bundlePath";
      v410 = @"classname";
      uint64_t v412 = v84;
      v413 = @"FigSDOFBlurMapRendering";
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", &v412, &v409, 2));
      if (v73)
      {
        v421 = @"bundlePath";
        v422 = @"classname";
        uint64_t v424 = v85;
        v425 = @"FigSDOFEffectRendering";
        v423 = @"tuningParameters";
        id v426 = v73;
        objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", &v424, &v421, 3));
      }
      if (v78)
      {
        v415 = @"bundlePath";
        v416 = @"classname";
        uint64_t v418 = v85;
        v419 = @"FigSDOFEffectRendering";
        v417 = @"tuningParameters";
        id v420 = v78;
        objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", &v418, &v415, 3));
      }
    }
  }
  else
  {
    if (+[BWPersonSegmentationConfiguration isPortraitPrewarmingRequired])
    {
      [(BWInferenceEngine *)v283 addInferenceOfType:102 version:+[BWPersonSegmentationConfiguration portraitVersion] & 0xFFFFFFFFFFFFLL configuration:0];
    }
    if (v73)
    {
      v421 = @"bundlePath";
      v422 = @"classname";
      uint64_t v424 = v85;
      v425 = @"FigSDOFBlurMapRendering";
      v423 = @"tuningParameters";
      id v426 = v73;
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", &v424, &v421, 3));
      v415 = @"bundlePath";
      v416 = @"classname";
      uint64_t v418 = v85;
      v419 = @"FigSDOFEffectRendering";
      v417 = @"tuningParameters";
      id v420 = v73;
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", &v418, &v415, 3));
    }
    if (v75)
    {
      v409 = @"bundlePath";
      v410 = @"classname";
      uint64_t v412 = v85;
      v413 = @"FigSDOFBlurMapRendering";
      v411 = @"tuningParameters";
      id v414 = v75;
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", &v412, &v409, 3));
      v407[0] = @"bundlePath";
      v407[1] = @"classname";
      v408[0] = v85;
      v408[1] = @"FigSDOFEffectRendering";
      v407[2] = @"tuningParameters";
      v408[2] = v75;
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v408, v407, 3));
    }
    if (v78)
    {
      v405[0] = @"bundlePath";
      v405[1] = @"classname";
      v406[0] = v85;
      v406[1] = @"FigSDOFBlurMapRendering";
      v405[2] = @"tuningParameters";
      v406[2] = v78;
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v406, v405, 3));
      v403[0] = @"bundlePath";
      v403[1] = @"classname";
      v404[0] = v85;
      v404[1] = @"FigSDOFEffectRendering";
      v403[2] = @"tuningParameters";
      v404[2] = v78;
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v404, v403, 3));
    }
    if (v299)
    {
      v401[0] = @"bundlePath";
      v401[1] = @"classname";
      v402[0] = v85;
      v402[1] = @"FigSDOFBlurMapRendering";
      v401[2] = @"tuningParameters";
      v402[2] = v299;
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v402, v401, 3));
      v399[0] = @"bundlePath";
      v399[1] = @"classname";
      v400[0] = v85;
      v400[1] = @"FigSDOFEffectRendering";
      v399[2] = @"tuningParameters";
      v400[2] = v299;
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v400, v399, 3));
    }
    if (+[BWRGBPersonSegmentationInferenceConfiguration isPortraitPrewarmingRequired])
    {
      [(BWInferenceEngine *)v283 addInferenceOfType:103 version:+[BWRGBPersonSegmentationInferenceConfiguration portraitVersion] & 0xFFFFFFFFFFFFLL configuration:0];
    }
  }
  uint64_t v86 = [(FigCaptureCameraParameters *)v284 depthProcessorVersion];
  uint64_t v87 = [NSString stringWithFormat:@"%@/%@V%d.bundle", @"/System/Library/VideoProcessors/", @"DepthProcessor", v86];
  v397[0] = @"bundlePath";
  v397[1] = @"classname";
  v398[0] = v87;
  v398[1] = @"FigStreamingDepthProcessorCPU";
  CGFloat v82 = v288;
  objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v398, v397, 2));
  int v282 = 1;
  id v44 = obja;
LABEL_113:
  [v82 addObject:&unk_1EFB05B48];
  long long v333 = 0u;
  long long v334 = 0u;
  long long v331 = 0u;
  long long v332 = 0u;
  uint64_t v88 = [v44 countByEnumeratingWithState:&v331 objects:v396 count:16];
  if (v88)
  {
    uint64_t v89 = v88;
    uint64_t v90 = *(void *)v332;
    while (2)
    {
      unint64_t v91 = v45;
      for (uint64_t i = 0; i != v89; ++i)
      {
        if (*(void *)v332 != v90) {
          objc_enumerationMutation(obja);
        }
        uint64_t v93 = *(void *)(*((void *)&v331 + 1) + 8 * i);
        uint64_t v94 = [obja objectForKeyedSubscript:v93];
        uint64_t v95 = [+[FigCaptureCameraParameters sharedInstance] mattingVersionForPortType:v93 sensorIDString:v94];
        uint64_t v96 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", v93), "objectForKeyedSubscript:", v94);
        LODWORD(v97) = 1.0;
        id v98 = +[FigCaptureCameraParameters sdofTuningParametersForSensorIDDictionary:v96 zoomFactor:v97];
        if (v95)
        {
          id v99 = v98;
          if (v95 == 1)
          {
            CGFloat v100 = [(BWInferenceConfiguration *)[BWMattingInferenceConfiguration alloc] initWithInferenceType:201];
            [(BWInferenceConfiguration *)v100 setPriority:14];
            [(BWInferenceConfiguration *)v100 setTuningParameters:v96];
            [(BWMattingInferenceConfiguration *)v100 setSdofRenderingTuningParameters:v99];
            LODWORD(v101) = 2.0;
            [(BWMattingInferenceConfiguration *)v100 setMainImageDownscalingFactor:v101];
            [(BWInferenceEngine *)v283 addInferenceOfType:201 version:BWInferenceVersionMakeMajor(1) & 0xFFFFFFFFFFFFLL configuration:v100];
            id v44 = obja;
            unint64_t v45 = v91;
          }
          else
          {
            CGPoint v102 = [BWSensorConfiguration alloc];
            CGFloat v103 = [(BWSensorConfiguration *)v102 initWithPortType:v93 sensorIDString:v94 sensorIDDictionary:v96 cameraInfo:MEMORY[0x1E4F1CC08]];
            CGPoint v104 = [(BWInferenceConfiguration *)[BWMattingV2InferenceConfiguration alloc] initWithInferenceType:201];
            uint64_t v394 = [(BWSensorConfiguration *)v103 portType];
            v395 = v103;
            unint64_t v45 = v91;
            -[BWMattingV2InferenceConfiguration setSensorConfigurationsByPortType:](v104, "setSensorConfigurationsByPortType:", [*(id *)(v91 + 2536) dictionaryWithObjects:&v395 forKeys:&v394 count:1]);
            [(BWInferenceConfiguration *)v104 setPriority:14];
            [(BWMattingV2InferenceConfiguration *)v104 setSdofRenderingTuningParameters:v99];
            LODWORD(v105) = 2.0;
            [(BWMattingV2InferenceConfiguration *)v104 setMainImageDownscalingFactor:v105];
            [(BWInferenceEngine *)v283 addInferenceOfType:201 version:BWInferenceVersionMakeMajor(v95) & 0xFFFFFFFFFFFFLL configuration:v104];
            id v44 = obja;
            if ([(FigCaptureCameraParameters *)v284 learnedMattingVersion] >= 1)
            {
              CGSize v106 = [(BWInferenceConfiguration *)[BWLearnedMattingInferenceConfiguration alloc] initWithInferenceType:107];
              [(BWTiledEspressoInferenceConfiguration *)v106 setMetalCommandQueue:0];
              LODWORD(v107) = 2.0;
              [(BWLearnedMattingInferenceConfiguration *)v106 setMainImageDownscalingFactor:v107];
              [(BWInferenceEngine *)v283 addInferenceOfType:107 version:BWInferenceVersionMakeMajor([(FigCaptureCameraParameters *)v284 learnedMattingVersion]) & 0xFFFFFFFFFFFFLL configuration:v106];
            }
          }
          goto LABEL_126;
        }
      }
      id v44 = obja;
      uint64_t v89 = [obja countByEnumeratingWithState:&v331 objects:v396 count:16];
      unint64_t v45 = v91;
      if (v89) {
        continue;
      }
      break;
    }
  }
LABEL_126:
  float32x4_t v108 = off_1E5C1F000;
  if ([+[FigCaptureCameraParameters sharedInstance] distortionCorrectionVersion])
  {
    [v288 addObject:&unk_1EFB05B70];
  }
  v286 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v327 = 0u;
  long long v328 = 0u;
  long long v329 = 0u;
  long long v330 = 0u;
  v300 = v43;
  uint64_t v293 = [v44 countByEnumeratingWithState:&v327 objects:v393 count:16];
  if (v293)
  {
    unsigned int v291 = 0;
    char v109 = 0;
    uint64_t v289 = *(void *)v328;
    do
    {
      uint64_t v110 = 0;
      do
      {
        if (*(void *)v328 != v289) {
          objc_enumerationMutation(v44);
        }
        uint64_t v296 = v110;
        long long v111 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", *(void *)(*((void *)&v327 + 1) + 8 * v110)), "objectForKeyedSubscript:", objc_msgSend(v44, "objectForKeyedSubscript:", *(void *)(*((void *)&v327 + 1) + 8 * v110))), "objectForKeyedSubscript:", @"NRFParameters"), "objectForKeyedSubscript:", @"NRFParameters");
        long long v112 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
        long long v323 = 0u;
        long long v324 = 0u;
        long long v325 = 0u;
        long long v326 = 0u;
        simd_float4 v113 = (void *)[v111 objectForKeyedSubscript:@"ToneMapping"];
        uint64_t v114 = [v113 countByEnumeratingWithState:&v323 objects:v392 count:16];
        if (v114)
        {
          uint64_t v115 = v114;
          uint64_t v116 = *(void *)v324;
          do
          {
            for (uint64_t j = 0; j != v115; ++j)
            {
              if (*(void *)v324 != v116) {
                objc_enumerationMutation(v113);
              }
              uint64_t v118 = *(void *)(*((void *)&v323 + 1) + 8 * j);
              if (objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v111, "objectForKeyedSubscript:", @"ToneMapping"), "objectForKeyedSubscript:", v118), "objectForKeyedSubscript:", @"EnableSTF"), "BOOLValue"))
              {
                if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v111, "objectForKeyedSubscript:", @"ToneMapping"), "objectForKeyedSubscript:", v118), "objectForKeyedSubscript:", @"StfTuningParameters"))
                {
                  objc_msgSend(v112, "setObject:forKey:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v111, "objectForKeyedSubscript:", @"ToneMapping"), "objectForKeyedSubscript:", v118), "objectForKeyedSubscript:", @"StfTuningParameters"), v118);
                }
                char v109 = 1;
              }
            }
            uint64_t v115 = [v113 countByEnumeratingWithState:&v323 objects:v392 count:16];
          }
          while (v115);
        }
        if (v109) {
          objc_msgSend(v286, "setObject:forKey:", v112, objc_msgSend(NSNumber, "numberWithInt:", v291++));
        }
        CFNumberRef v43 = v300;
        id v44 = obja;
        uint64_t v110 = v296 + 1;
      }
      while (v296 + 1 != v293);
      uint64_t v293 = [obja countByEnumeratingWithState:&v327 objects:v393 count:16];
    }
    while (v293);
    unint64_t v45 = 0x1E4F1C000uLL;
    float32x4_t v108 = off_1E5C1F000;
    if (v109)
    {
      v390[0] = @"bundlePath";
      v390[1] = @"classname";
      v391[0] = @"/System/Library/VideoProcessors/STF.bundle";
      v391[1] = @"STFStillProcessorV1";
      v390[2] = @"tuningParameters";
      v391[2] = v286;
      objc_msgSend(v288, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v391, v390, 3));
    }
  }
  uint64_t v119 = [(FigCaptureCameraParameters *)v284 videoStabilizationSTFParameters];
  if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v119, "objectForKeyedSubscript:", @"Version"), "unsignedIntValue"))
  {
    v388[0] = @"bundlePath";
    v388[1] = @"classname";
    v389[0] = @"/System/Library/VideoProcessors/STF.bundle";
    v389[1] = @"STFVideoProcessorV1";
    v388[2] = @"tuningParameters";
    v389[2] = v119;
    objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v389, v388, 3));
  }
  uint64_t v120 = [+[FigCaptureCameraParameters sharedInstance] nrfVersion];
  uint64_t v292 = *MEMORY[0x1E4F52DD8];
  if (objc_msgSend((id)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", *MEMORY[0x1E4F52DD8]), "objectForKeyedSubscript:", objc_msgSend(v44, "objectForKeyedSubscript:", *MEMORY[0x1E4F52DD8])), "objectForKeyedSubscript:", @"SoftwareFlashRenderingParameters"))
  {
    uint64_t v121 = [NSString stringWithFormat:@"%@/NRFV%d.bundle", @"/System/Library/VideoProcessors/", v120];
    uint64_t v122 = objc_msgSend(NSString, "stringWithFormat:", @"CMISoftwareFlashRenderingProcessorV%d", sDeviceSWFRVersion);
    v386[0] = @"bundlePath";
    v386[1] = @"classname";
    v387[0] = v121;
    v387[1] = v122;
    objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v387, v386, 2));
  }
  uint64_t v123 = *MEMORY[0x1E4F52E00];
  uint64_t v124 = [v44 objectForKeyedSubscript:*MEMORY[0x1E4F52E00]];
  CGRect v125 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", v123), "objectForKeyedSubscript:", v124);
  uint64_t v126 = [v125 objectForKeyedSubscript:@"DepthProcessingParameters"];
  if (v124)
  {
    uint64_t v127 = v126;
    uint64_t v128 = [(FigCaptureCameraParameters *)v284 depthProcessorVersion];
    uint64_t v129 = [NSString stringWithFormat:@"%@/%@V%d.bundle", @"/System/Library/VideoProcessors/", @"DepthProcessor", v128];
    v384[0] = @"bundlePath";
    v384[1] = @"classname";
    v385[0] = v129;
    v385[1] = @"FigStillDepthProcessorGPU";
    v384[2] = @"tuningParameters";
    v385[2] = v127;
    objc_msgSend(v288, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v385, v384, 3));
    unint64_t v45 = 0x1E4F1C000uLL;
    uint64_t v130 = [(FigCaptureCameraParameters *)v284 depthProcessorVersion];
    uint64_t v131 = [NSString stringWithFormat:@"%@/%@V%d.bundle", @"/System/Library/VideoProcessors/", @"DepthProcessor", v130];
    v382[0] = @"bundlePath";
    v382[1] = @"classname";
    v383[0] = v131;
    v383[1] = @"FigStreamingDepthProcessorCPU";
    uint64_t v132 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v383 forKeys:v382 count:2];
    if (([v288 containsObject:v132] & 1) == 0) {
      [v288 addObject:v132];
    }
    LODWORD(v133) = 1.0;
    id v134 = +[FigCaptureCameraParameters sdofTuningParametersForSensorIDDictionary:v125 zoomFactor:v133];
    CGRect v135 = (void *)[v134 objectForKeyedSubscript:*MEMORY[0x1E4F535B8]];
    if ((int)[v135 intValue] <= 5) {
      uint64_t v136 = [v135 intValue];
    }
    else {
      uint64_t v136 = 5;
    }
    uint64_t v137 = [NSString stringWithFormat:@"%@/%@V%d.bundle", @"/System/Library/VideoProcessors/", @"SDOFRendering", v136];
    int v282 = 1;
    if (v134 && v136)
    {
      uint64_t v138 = v137;
      v380[0] = @"bundlePath";
      v380[1] = @"classname";
      v381[0] = v137;
      v381[1] = @"FigSDOFBlurMapRendering";
      v380[2] = @"tuningParameters";
      v381[2] = v134;
      objc_msgSend(v288, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v381, v380, 3));
      v378[0] = @"bundlePath";
      v378[1] = @"classname";
      v379[0] = v138;
      v379[1] = @"FigSDOFEffectRendering";
      v378[2] = @"tuningParameters";
      v379[2] = v134;
      objc_msgSend(v288, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v379, v378, 3));
      int v282 = 1;
    }
  }
  CGRect v139 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", v292), "objectForKeyedSubscript:", objc_msgSend(v44, "objectForKeyedSubscript:", v292));
  uint64_t v140 = [v139 objectForKeyedSubscript:@"FocusPixelDisparity"];
  if (v140)
  {
    v376[0] = @"bundlePath";
    v376[1] = @"classname";
    v377[0] = @"/System/Library/VideoProcessors/FPDisparityV1.bundle";
    v377[1] = @"FigFocusPixelDisparityGenerator";
    v376[2] = @"tuningParameters";
    v377[2] = v140;
    objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v377, v376, 3));
    LODWORD(v141) = 1.0;
    id v142 = +[FigCaptureCameraParameters sdofTuningParametersForSensorIDDictionary:v139 zoomFactor:v141];
    CGRect v143 = (void *)[v142 objectForKeyedSubscript:*MEMORY[0x1E4F535B8]];
    if ((int)[v143 intValue] <= 5) {
      uint64_t v144 = [v143 intValue];
    }
    else {
      uint64_t v144 = 5;
    }
    uint64_t v145 = [NSString stringWithFormat:@"%@/%@V%d.bundle", @"/System/Library/VideoProcessors/", @"SDOFRendering", v144];
    if (v142 && v144)
    {
      uint64_t v146 = v145;
      v374[0] = @"bundlePath";
      v374[1] = @"classname";
      v375[0] = v145;
      v375[1] = @"FigSDOFBlurMapRendering";
      v374[2] = @"tuningParameters";
      v375[2] = v142;
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v375, v374, 3));
      v372[0] = @"bundlePath";
      v372[1] = @"classname";
      v373[0] = v146;
      v373[1] = @"FigSDOFEffectRendering";
      v372[2] = @"tuningParameters";
      v373[2] = v142;
      objc_msgSend(v288, "addObject:", objc_msgSend(*(id *)(v45 + 2536), "dictionaryWithObjects:forKeys:count:", v373, v372, 3));
    }
    if (!v283) {
      v283 = [[BWInferenceEngine alloc] initWithScheduler:0 priority:29];
    }
    int v282 = 1;
  }
  if (sDeviceUsesUBProcessor == 1)
  {
    long long v321 = 0u;
    long long v322 = 0u;
    long long v319 = 0u;
    long long v320 = 0u;
    uint64_t v147 = [v44 countByEnumeratingWithState:&v319 objects:v371 count:16];
    if (v147)
    {
      uint64_t v148 = v147;
      uint64_t v149 = *(void *)v320;
      while (2)
      {
        for (uint64_t k = 0; k != v148; ++k)
        {
          if (*(void *)v320 != v149) {
            objc_enumerationMutation(v44);
          }
          if (objc_msgSend((id)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", *(void *)(*((void *)&v319 + 1) + 8 * k)), "objectForKeyedSubscript:", objc_msgSend(v44, "objectForKeyedSubscript:", *(void *)(*((void *)&v319 + 1) + 8 * k))), "objectForKeyedSubscript:", @"UBParameters"))
          {
            v369[0] = @"bundlePath";
            v369[1] = @"classname";
            v370[0] = @"/System/Library/VideoProcessors/UB.bundle";
            v370[1] = @"UBProcessor";
            v369[2] = @"tuningParameters";
            v370[2] = v43;
            objc_msgSend(v288, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v370, v369, 3));
            goto LABEL_184;
          }
        }
        uint64_t v148 = [v44 countByEnumeratingWithState:&v319 objects:v371 count:16];
        if (v148) {
          continue;
        }
        break;
      }
    }
  }
LABEL_184:
  if (sDeviceUsesNRFProcessor == 1)
  {
    long long v317 = 0u;
    long long v318 = 0u;
    long long v315 = 0u;
    long long v316 = 0u;
    uint64_t v151 = [v44 countByEnumeratingWithState:&v315 objects:v368 count:16];
    if (v151)
    {
      uint64_t v152 = v151;
      uint64_t v153 = *(void *)v316;
      while (2)
      {
        for (uint64_t m = 0; m != v152; ++m)
        {
          if (*(void *)v316 != v153) {
            objc_enumerationMutation(v44);
          }
          if (objc_msgSend((id)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", *(void *)(*((void *)&v315 + 1) + 8 * m)), "objectForKeyedSubscript:", objc_msgSend(v44, "objectForKeyedSubscript:", *(void *)(*((void *)&v315 + 1) + 8 * m))), "objectForKeyedSubscript:", @"NRFParameters"))
          {
            uint64_t v155 = [+[FigCaptureCameraParameters sharedInstance] nrfVersion];
            if (v155)
            {
              uint64_t v156 = v155;
              uint64_t v157 = [NSString stringWithFormat:@"%@/NRFV%d.bundle", @"/System/Library/VideoProcessors/", v155];
              uint64_t v158 = objc_msgSend(NSString, "stringWithFormat:", @"NRFProcessorV%d", v156);
              v366[0] = @"bundlePath";
              v366[1] = @"classname";
              v367[0] = v157;
              v367[1] = v158;
              v366[2] = @"tuningParameters";
              v367[2] = v43;
              objc_msgSend(v288, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v367, v366, 3));
            }
            goto LABEL_196;
          }
        }
        uint64_t v152 = [v44 countByEnumeratingWithState:&v315 objects:v368 count:16];
        if (v152) {
          continue;
        }
        break;
      }
    }
  }
LABEL_196:
  uint64_t v159 = [+[FigCaptureCameraParameters sharedInstance] deepZoomVersion];
  if (v159)
  {
    uint64_t v160 = v159;
    v161 = [(BWInferenceConfiguration *)[BWDeepZoomInferenceConfiguration alloc] initWithInferenceType:160];
    [(BWTiledEspressoInferenceConfiguration *)v161 setMetalCommandQueue:0];
    [(BWDeepZoomInferenceConfiguration *)v161 setType:2];
    [(BWDeepZoomInferenceConfiguration *)v161 setVersion:v160];
    [(BWInferenceConfiguration *)v161 setTuningParameters:v43];
    [(BWInferenceEngine *)v283 addInferenceOfType:160 version:BWInferenceVersionMakeMajor(1) & 0xFFFFFFFFFFFFLL configuration:v161];
  }
  id v162 = [(NSDictionary *)v43 objectForKeyedSubscript:@"DefaultSensorIDs"];
  long long v362 = 0u;
  long long v363 = 0u;
  long long v364 = 0u;
  long long v365 = 0u;
  uint64_t v163 = [v162 countByEnumeratingWithState:&v362 objects:&info count:16];
  if (v163)
  {
    uint64_t v164 = v163;
    uint64_t v165 = *(void *)v363;
    while (2)
    {
      for (uint64_t n = 0; n != v164; ++n)
      {
        if (*(void *)v363 != v165) {
          objc_enumerationMutation(v162);
        }
        if (objc_msgSend((id)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v43, "objectForKeyedSubscript:", *(void *)(*((void *)&v362 + 1) + 8 * n)), "objectForKeyedSubscript:", objc_msgSend(v162, "objectForKeyedSubscript:", *(void *)(*((void *)&v362 + 1) + 8 * n))), "objectForKeyedSubscript:", @"CinematicVideoParameters"))
        {
          v167 = (void *)MEMORY[0x1A6272C70]();

          [(id)getPTDisparityPostProcessingClass() prewarmForCameraCaptured];
          [(id)getPTRenderPipelineClass() prewarmForCameraCaptured];
          float32x4_t v108 = off_1E5C1F000;
          goto LABEL_208;
        }
      }
      uint64_t v164 = [v162 countByEnumeratingWithState:&v362 objects:&info count:16];
      float32x4_t v108 = off_1E5C1F000;
      if (v164) {
        continue;
      }
      break;
    }
  }
LABEL_208:
  if (sDeviceUsesAnyVideoEffect) {
    [(id)getPTEffectClass() prewarmForCameraCaptured];
  }
  id v168 = [(NSDictionary *)v43 objectForKeyedSubscript:@"DefaultSensorIDs"];
  long long v362 = 0u;
  long long v363 = 0u;
  long long v364 = 0u;
  long long v365 = 0u;
  uint64_t v169 = [v168 countByEnumeratingWithState:&v362 objects:&info count:16];
  if (v169)
  {
    uint64_t v170 = v169;
    uint64_t v171 = *(void *)v363;
    while (2)
    {
      for (iuint64_t i = 0; ii != v170; ++ii)
      {
        if (*(void *)v363 != v171) {
          objc_enumerationMutation(v168);
        }
        if (-[__objc2_class chromaticDefringingEnabledForVideoForPortType:sensorIDString:](-[__objc2_class sharedInstance](v108[88], "sharedInstance"), "chromaticDefringingEnabledForVideoForPortType:sensorIDString:", *(void *)(*((void *)&v362 + 1) + 8 * ii), [v168 objectForKeyedSubscript:*(void *)(*((void *)&v362 + 1) + 8 * ii)]))
        {
          [v288 addObject:&unk_1EFB05B98];
          goto LABEL_220;
        }
      }
      uint64_t v170 = [v168 countByEnumeratingWithState:&v362 objects:&info count:16];
      if (v170) {
        continue;
      }
      break;
    }
  }
LABEL_220:
  v173 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  v174 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v174 setObject:v44 forKeyedSubscript:@"DefaultSensorIDs"];
  objc_msgSend(v173, "setObject:forKeyedSubscript:", -[__objc2_class commonNRFParameters](-[__objc2_class sharedInstance](v108[88], "sharedInstance"), "commonNRFParameters"), @"NRFParameters");
  [v174 setObject:v173 forKeyedSubscript:@"Common"];
  v297 = v174;
  [v174 setObject:v44 forKeyedSubscript:@"DefaultSensorIDs"];
  long long v313 = 0u;
  long long v314 = 0u;
  long long v311 = 0u;
  long long v312 = 0u;
  uint64_t v175 = [v44 countByEnumeratingWithState:&v311 objects:&v362 count:16];
  if (v175)
  {
    uint64_t v176 = v175;
    char v177 = 0;
    uint64_t v294 = *(void *)v312;
    uint64_t v178 = MEMORY[0x1E4F1CC08];
    do
    {
      for (juint64_t j = 0; jj != v176; ++jj)
      {
        if (*(void *)v312 != v294) {
          objc_enumerationMutation(v44);
        }
        uint64_t v180 = *(void *)(*((void *)&v311 + 1) + 8 * jj);
        uint64_t v181 = [v44 objectForKeyedSubscript:v180];
        uint64_t v182 = objc_msgSend((id)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v300, "objectForKeyedSubscript:", v180), "objectForKeyedSubscript:", v181), "objectForKeyedSubscript:", @"SoftISPTuning");
        v177 |= v182 != 0;
        if (v182) {
          uint64_t v183 = v182;
        }
        else {
          uint64_t v183 = v178;
        }
        id v44 = obja;
        uint64_t v184 = objc_msgSend((id)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v300, "objectForKeyedSubscript:", v180), "objectForKeyedSubscript:", v181), "objectForKeyedSubscript:", @"ModuleConfig");
        if (v184) {
          uint64_t v185 = v184;
        }
        else {
          uint64_t v185 = v178;
        }
        uint64_t v360 = v181;
        v358[0] = @"SoftISPTuning";
        v358[1] = @"ModuleConfig";
        v359[0] = v183;
        v359[1] = v185;
        uint64_t v361 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v359 forKeys:v358 count:2];
        objc_msgSend(v297, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v361, &v360, 1), v180);
      }
      uint64_t v176 = [obja countByEnumeratingWithState:&v311 objects:&v362 count:16];
    }
    while (v176);
  }
  else
  {
    char v177 = 0;
  }
  uint64_t v186 = [+[FigCaptureCameraParameters sharedInstance] nrfVersion];
  if ((v177 & 1) != 0 && v186 >= 3)
  {
    uint64_t v187 = [NSString stringWithFormat:@"%@/NRFV%d.bundle", @"/System/Library/VideoProcessors/", v186];
    v356[0] = @"bundlePath";
    v356[1] = @"classname";
    v357[0] = v187;
    v357[1] = @"SoftISPProcessor";
    v356[2] = @"tuningParameters";
    v357[2] = v297;
    objc_msgSend(v288, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v357, v356, 3));
  }
  long long v309 = 0u;
  long long v310 = 0u;
  long long v307 = 0u;
  long long v308 = 0u;
  uint64_t v188 = [v287 countByEnumeratingWithState:&v307 objects:v355 count:16];
  if (v188)
  {
    uint64_t v189 = v188;
    uint64_t v190 = *(void *)v308;
    do
    {
      for (kuint64_t k = 0; kk != v189; ++kk)
      {
        if (*(void *)v308 != v190) {
          objc_enumerationMutation(v287);
        }
        v192 = *(void **)(*((void *)&v307 + 1) + 8 * kk);
        v193 = (void *)MEMORY[0x1A6272C70]();
        mach_timebase_info info = 0;
        [v192 objectForKeyedSubscript:@"sbpName"];
        [v192 objectForKeyedSubscript:@"sbpOpts"];
        int v194 = FigSampleBufferProcessorCreateForCustom();
        v195 = (const void *)info;
        if (*(void *)&info && !v194)
        {
          uint64_t v196 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v196) {
            uint64_t v197 = v196;
          }
          else {
            uint64_t v197 = 0;
          }
          v198 = *(void (**)(const void *))(v197 + 24);
          if (v198) {
            v198(v195);
          }
          uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
          if (FigBaseObject)
          {
            uint64_t v200 = FigBaseObject;
            uint64_t v201 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v202 = v201 ? v201 : 0;
            v203 = *(void (**)(uint64_t))(v202 + 24);
            if (v203) {
              v203(v200);
            }
          }
          v195 = (const void *)info;
        }
        if (v195) {
          CFRelease(v195);
        }
      }
      uint64_t v189 = [v287 countByEnumeratingWithState:&v307 objects:v355 count:16];
    }
    while (v189);
  }
  id v204 = [(NSDictionary *)v300 objectForKeyedSubscript:@"DefaultSensorIDs"];
  long long v343 = 0u;
  long long v344 = 0u;
  long long v345 = 0u;
  long long v346 = 0u;
  uint64_t v205 = [v204 countByEnumeratingWithState:&v343 objects:&info count:16];
  if (v205)
  {
    uint64_t v206 = v205;
    uint64_t v207 = *(void *)v344;
LABEL_263:
    uint64_t v208 = 0;
    while (1)
    {
      if (*(void *)v344 != v207) {
        objc_enumerationMutation(v204);
      }
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v300, "objectForKeyedSubscript:", *(void *)(*((void *)&v343 + 1) + 8 * v208)), "objectForKeyedSubscript:", objc_msgSend(v204, "objectForKeyedSubscript:", *(void *)(*((void *)&v343 + 1) + 8 * v208))), "objectForKeyedSubscript:", @"NRFParameters"), "objectForKeyedSubscript:", @"NRFParameters"), "objectForKeyedSubscript:", @"SemanticStyles"))
      {
        break;
      }
      if (v206 == ++v208)
      {
        uint64_t v206 = [v204 countByEnumeratingWithState:&v343 objects:&info count:16];
        if (v206) {
          goto LABEL_263;
        }
        goto LABEL_271;
      }
    }
    if (smartStyleVersion) {
      goto LABEL_271;
    }
    v211 = v288;
    [v288 addObject:&unk_1EFB05BC0];
    unsigned int v290 = 1;
    unint64_t v209 = 0x1E4F1C000uLL;
    unint64_t v210 = 0x1E4F29000uLL;
  }
  else
  {
LABEL_271:
    unsigned int v290 = 0;
    unint64_t v209 = 0x1E4F1C000;
    unint64_t v210 = 0x1E4F29000;
    v211 = v288;
  }
  uint64_t v212 = [+[FigCaptureCameraParameters sharedInstance] videoGreenGhostBrightLightMitigationVersion];
  if (v212)
  {
    uint64_t v213 = v212;
    uint64_t v214 = [*(id *)(v210 + 24) stringWithFormat:@"%@/%@.bundle", @"/System/Library/VideoProcessors/", objc_msgSend(*(id *)(v210 + 24), "stringWithFormat:", @"%@V%d", @"VideoDeghosting", v212)];
    uint64_t v215 = [*(id *)(v210 + 24) stringWithFormat:@"CMI%@V%d", @"VideoDeghosting", v213];
    v353[0] = @"bundlePath";
    v353[1] = @"classname";
    v354[0] = v214;
    v354[1] = v215;
    v353[2] = @"tuningParameters";
    v354[2] = [(NSDictionary *)[+[FigCaptureCameraParameters sharedInstance] commonVideoGreenGhostMitigationParameters] objectForKeyedSubscript:@"BrightLightMitigationParameters"];
    objc_msgSend(v211, "addObject:", objc_msgSend(*(id *)(v209 + 2536), "dictionaryWithObjects:forKeys:count:", v354, v353, 3));
  }
  uint64_t v216 = [+[FigCaptureCameraParameters sharedInstance] videoGreenGhostLowLightMitigationVersion];
  if (v216)
  {
    uint64_t v217 = v216;
    uint64_t v218 = [*(id *)(v210 + 24) stringWithFormat:@"%@/%@.bundle", @"/System/Library/VideoProcessors/", objc_msgSend(*(id *)(v210 + 24), "stringWithFormat:", @"%@V%d", @"VideoDeghosting", v216)];
    uint64_t v219 = [*(id *)(v210 + 24) stringWithFormat:@"CMI%@V%d", @"VideoDeghosting", v217];
    v351[0] = @"bundlePath";
    v351[1] = @"classname";
    v352[0] = v218;
    v352[1] = v219;
    v351[2] = @"tuningParameters";
    v352[2] = [(NSDictionary *)[+[FigCaptureCameraParameters sharedInstance] commonVideoGreenGhostMitigationParameters] objectForKeyedSubscript:@"LowLightMitigationParameters"];
    objc_msgSend(v211, "addObject:", objc_msgSend(*(id *)(v209 + 2536), "dictionaryWithObjects:forKeys:count:", v352, v351, 3));
  }
  if (smartStyleVersion)
  {
    uint64_t v220 = [*(id *)(v210 + 24) stringWithFormat:@"%@/%@.bundle", @"/System/Library/VideoProcessors/", objc_msgSend(*(id *)(v210 + 24), "stringWithFormat:", @"%@V%d", @"SmartStyle", smartStyleVersion)];
    uint64_t v221 = [*(id *)(v210 + 24) stringWithFormat:@"CMI%@V%d", @"SmartStyleProcessor", smartStyleVersion];
    v349[0] = @"bundlePath";
    v349[1] = @"classname";
    v350[0] = v220;
    v350[1] = v221;
    objc_msgSend(v211, "addObject:", objc_msgSend(*(id *)(v209 + 2536), "dictionaryWithObjects:forKeys:count:", v350, v349, 2));
  }
  if (constantColorVersion)
  {
    uint64_t v222 = [*(id *)(v210 + 24) stringWithFormat:@"%@/%@.bundle", @"/System/Library/VideoProcessors/", objc_msgSend(*(id *)(v210 + 24), "stringWithFormat:", @"%@V%d", @"ColourConstancy", constantColorVersion)];
    uint64_t v223 = [*(id *)(v210 + 24) stringWithFormat:@"CMI%@V%d", @"ColourConstancyProcessor", constantColorVersion];
    v347[0] = @"bundlePath";
    v347[1] = @"classname";
    v348[0] = v222;
    v348[1] = v223;
    objc_msgSend(v211, "addObject:", objc_msgSend(*(id *)(v209 + 2536), "dictionaryWithObjects:forKeys:count:", v348, v347, 2));
  }
  long long v305 = 0u;
  long long v306 = 0u;
  long long v303 = 0u;
  long long v304 = 0u;
  uint64_t v224 = [v211 countByEnumeratingWithState:&v303 objects:&v343 count:16];
  if (v224)
  {
    uint64_t v225 = v224;
    uint64_t v226 = *(void *)v304;
    do
    {
      for (muint64_t m = 0; mm != v225; ++mm)
      {
        if (*(void *)v304 != v226) {
          objc_enumerationMutation(v288);
        }
        v228 = *(void **)(*((void *)&v303 + 1) + 8 * mm);
        uint64_t v229 = [v228 objectForKeyedSubscript:@"bundlePath"];
        uint64_t v230 = [v228 objectForKeyedSubscript:@"classname"];
        uint64_t v231 = [v228 objectForKeyedSubscript:@"tuningParameters"];
        LODWORD(v339) = 0;
        mach_timebase_info info = 0;
        v232 = (void *)MEMORY[0x1A6272C70]();
        v233 = 0;
        v234 = 0;
        if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", v229))
        {
          v235 = (void *)[MEMORY[0x1E4F28B50] bundleWithPath:v229];
          if (!v235
            || (v236 = v235, ![v235 loadAndReturnError:&info])
            || (!v230
              ? (v237 = (void *)[v236 principalClass])
              : (v237 = (void *)[v236 classNamed:v230]),
                (v238 = v237) == 0))
          {
LABEL_303:
            v233 = 0;
LABEL_304:
            v234 = 0;
            goto LABEL_305;
          }
          if ([v237 conformsToProtocol:&unk_1EFB62B48])
          {
            v239 = objc_opt_new();
            v233 = v239;
            if (v239)
            {
              [v239 setMetalCommandQueue:v285];
              [v233 setTuningParameters:v231];
              [v233 setCameraInfoByPortType:MEMORY[0x1E4F1CC08]];
              LODWORD(v339) = [v233 setup];
              if (!v339)
              {
                v234 = 0;
                LODWORD(v339) = [v233 prewarm];
                goto LABEL_305;
              }
            }
            goto LABEL_304;
          }
          if (![v238 instancesRespondToSelector:sel_prewarmWithTuningParameters_]) {
            goto LABEL_303;
          }
          v234 = objc_opt_new();
          if (v234)
          {
            if (objc_opt_respondsToSelector()) {
              [v234 performSelector:sel_setMetalCommandQueue_ withObject:v285];
            }
            v240 = (void *)[objc_alloc(MEMORY[0x1E4F28D68]) initWithTarget:v234 selector:sel_prewarmWithTuningParameters_ object:v231];
            [v240 start];
            objc_msgSend((id)objc_msgSend(v240, "result"), "getValue:", &v339);
          }
          v233 = 0;
        }
LABEL_305:
      }
      uint64_t v225 = [v288 countByEnumeratingWithState:&v303 objects:&v343 count:16];
    }
    while (v225);
  }
  if (v282) {
    uint64_t v241 = [(FigCaptureCameraParameters *)v284 coreImagePortraitFilterVersion];
  }
  else {
    uint64_t v241 = 0;
  }
  v242 = (void *)MEMORY[0x1A6272C70]();
  +[BWCoreImageFilterRenderer prewarmPortraitFilterVersion:v241 semanticStyleFilters:v290];
  uint64_t v243 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v300, "objectForKeyedSubscript:", v292), "objectForKeyedSubscript:", objc_msgSend(obja, "objectForKeyedSubscript:", v292));
  LODWORD(v244) = 1.0;
  id v245 = +[FigCaptureCameraParameters sdofTuningParametersForSensorIDDictionary:v243 zoomFactor:v244];
  if (v245)
  {
    v246 = v245;
    uint64_t v247 = objc_msgSend((id)objc_msgSend(v245, "objectForKeyedSubscript:", @"Version"), "intValue");
    if ([v246 objectForKeyedSubscript:objc_msgSend(NSString, "stringWithFormat:", @"HairNetV%d", v247)])
    {
      +[BWCoreImageFilterRenderer prewarmCoreImageSDOFRenderingFilter];
    }
  }
  if (sPocketDetectionSupported) {
    +[BWPocketDetectionFFTProcessor prewarmShaders];
  }
  if (v282)
  {
    if (objc_opt_respondsToSelector())
    {
      v248 = (void *)MEMORY[0x1A6272C70]();
      [MEMORY[0x1E4F4D7E8] prewarm];
    }
    if ([(BWInferenceEngine *)v283 isConfiguredForInference]) {
      [(BWInferenceEngine *)v283 prewarmInferencesUsingLimitedMemory:1];
    }
  }
  id v249 = [(NSDictionary *)v300 objectForKeyedSubscript:@"DefaultSensorIDs"];
  long long v339 = 0u;
  long long v340 = 0u;
  long long v341 = 0u;
  long long v342 = 0u;
  uint64_t v250 = [v249 countByEnumeratingWithState:&v339 objects:&info count:16];
  if (v250)
  {
    uint64_t v251 = v250;
    uint64_t v252 = *(void *)v340;
    while (2)
    {
      for (nuint64_t n = 0; nn != v251; ++nn)
      {
        if (*(void *)v340 != v252) {
          objc_enumerationMutation(v249);
        }
        if (objc_msgSend((id)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v300, "objectForKeyedSubscript:", *(void *)(*((void *)&v339 + 1) + 8 * nn)), "objectForKeyedSubscript:", objc_msgSend(v249, "objectForKeyedSubscript:", *(void *)(*((void *)&v339 + 1) + 8 * nn))), "objectForKeyedSubscript:", @"RedEyeReductionParameters"))
        {
          v254 = (void *)MEMORY[0x1A6272C70]();
          +[BWRedEyeReductionController prewarm];
          goto LABEL_330;
        }
      }
      uint64_t v251 = [v249 countByEnumeratingWithState:&v339 objects:&info count:16];
      if (v251) {
        continue;
      }
      break;
    }
  }
LABEL_330:
  v255 = [[FigMetalHistogram alloc] initWithMetalContext:0];
  BOOL v256 = sDeviceSWFRVersion == 2;
  if ([(FigCaptureCameraParameters *)v284 gainMapVersion] >> 17) {
    uint64_t v257 = v256 | 2;
  }
  else {
    uint64_t v257 = v256;
  }
  [MEMORY[0x1E4F55F30] prewarmShadersForFeatures:v257];

  v258 = [+[FigCaptureCameraParameters sharedInstance] cameraTuningParameters];
  id v259 = [(NSDictionary *)v258 objectForKeyedSubscript:@"DefaultSensorIDs"];
  long long v429 = 0u;
  long long v430 = 0u;
  long long v431 = 0u;
  long long v432 = 0u;
  uint64_t v260 = [v259 countByEnumeratingWithState:&v429 objects:&info count:16];
  if (v260)
  {
    uint64_t v261 = v260;
    uint64_t v262 = *(void *)v430;
    while (2)
    {
      for (uint64_t i1 = 0; i1 != v261; ++i1)
      {
        if (*(void *)v430 != v262) {
          objc_enumerationMutation(v259);
        }
        if (objc_msgSend((id)objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v258, "objectForKeyedSubscript:", *(void *)(*((void *)&v429 + 1) + 8 * i1)), "objectForKeyedSubscript:", objc_msgSend(v259, "objectForKeyedSubscript:", *(void *)(*((void *)&v429 + 1) + 8 * i1))), "objectForKeyedSubscript:", @"DeepFusionParameters"))
        {
          mach_timebase_info info = 0;
          if (FigInitialiseDeferredShaderCacheCopySemaphore_onceToken != -1) {
            dispatch_once(&FigInitialiseDeferredShaderCacheCopySemaphore_onceToken, &__block_literal_global_510);
          }
          sysctlbyname("kern.bootsessionuuid", 0, (size_t *)&info, 0, 0);
          if (*(void *)&info && (v264 = malloc_type_malloc(*(void *)&info, 0x2C7F4D1FuLL)) != 0)
          {
            v265 = v264;
            sysctlbyname("kern.bootsessionuuid", v264, (size_t *)&info, 0, 0);
            v266 = NSTemporaryDirectory();
            if (FigCaptureCameracapturedEnabled()) {
              v267 = @"/cameracaptured.copysession";
            }
            else {
              v267 = @"/mediaserverd.copysession";
            }
            uint64_t v268 = [(NSString *)v266 stringByAppendingPathComponent:v267];
            id v269 = objc_alloc(MEMORY[0x1E4F1C9E8]);
            id v270 = (id)objc_msgSend(v269, "initWithContentsOfURL:error:", objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:", v268), 0);
            if (!v270
              || (v271 = (void *)[v270 objectForKeyedSubscript:@"BootSessionUUID"],
                  (objc_msgSend(v271, "isEqualToString:", objc_msgSend(NSString, "stringWithUTF8String:", v265)) & 1) == 0))
            {
              v272 = (void *)[MEMORY[0x1E4F55F60] metalDevice];
              [v272 unloadShaderCaches];
              if (!objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", @"/private/var/mobile/Library/Caches/com.apple.deferredmediad/com.apple.metal", 1, 0, 0)|| (objc_msgSend(v272, "copyShaderCacheToPath:", @"/private/var/mobile/Library/Caches/com.apple.deferredmediad/com.apple.metal") & 1) == 0)
              {
                fig_log_get_emitter();
                uint64_t v278 = v279;
                LODWORD(pixelsa) = 0;
                FigDebugAssert3();
              }
              *(void *)&long long v429 = 0;
              v393[0] = @"BootSessionUUID";
              v396[0] = objc_msgSend(NSString, "stringWithUTF8String:", v265, pixelsa, v278);
              v273 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v396 forKeys:v393 count:1];
              objc_msgSend(v273, "writeToURL:error:", objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:", v268), &v429);
              if ((void)v429)
              {
                fig_log_get_emitter();
                LODWORD(pixelsa) = 0;
                FigDebugAssert3();
                objc_msgSend((id)v429, "code", pixelsa, v279);
                FigSignalErrorAt();
              }
            }
          }
          else
          {
            fig_log_get_emitter();
            uint64_t v278 = v279;
            LODWORD(pixelsa) = 0;
            FigDebugAssert3();
            v265 = 0;
          }
          free(v265);
          dispatch_semaphore_signal((dispatch_semaphore_t)sDeferredShaderCacheCopySemaphore);
          goto LABEL_358;
        }
      }
      uint64_t v261 = [v259 countByEnumeratingWithState:&v429 objects:&info count:16];
      if (v261) {
        continue;
      }
      break;
    }
  }
LABEL_358:
  objc_msgSend(MEMORY[0x1E4F1E058], "clearCache", pixelsa, v278);
  [MEMORY[0x1E4F1E040] clearCache];

  return mach_absolute_time();
}

uint64_t FigWaitForDeferredShaderCacheCopyCompletion()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigWaitForDeferredShaderCacheCopyCompletion_block_invoke;
  block[3] = &unk_1E5C24978;
  block[4] = &v3;
  if (FigWaitForDeferredShaderCacheCopyCompletion_onceToken != -1) {
    dispatch_once(&FigWaitForDeferredShaderCacheCopyCompletion_onceToken, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

intptr_t __FigWaitForDeferredShaderCacheCopyCompletion_block_invoke(uint64_t a1)
{
  if (FigInitialiseDeferredShaderCacheCopySemaphore_onceToken != -1) {
    dispatch_once(&FigInitialiseDeferredShaderCacheCopySemaphore_onceToken, &__block_literal_global_510);
  }
  uint64_t v2 = sDeferredShaderCacheCopySemaphore;
  dispatch_time_t v3 = dispatch_time(0, 180000000000);
  intptr_t result = dispatch_semaphore_wait(v2, v3);
  if (result)
  {
    fig_log_get_emitter();
    intptr_t result = FigDebugAssert3();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -15420;
  }
  return result;
}

uint64_t gl_UtilsCreateShader(GLenum a1, GLchar *a2)
{
  string = a2;
  uint64_t Shader = glCreateShader(a1);
  uint64_t v3 = Shader;
  if (Shader)
  {
    GLint params = 0;
    glShaderSource(Shader, 1, (const GLchar *const *)&string, 0);
    glCompileShader(v3);
    glGetShaderiv(v3, 0x8B81u, &params);
    if (!params)
    {
      glDeleteShader(v3);
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v3;
}

dispatch_semaphore_t __FigInitialiseDeferredShaderCacheCopySemaphore_block_invoke()
{
  dispatch_semaphore_t result = dispatch_semaphore_create(0);
  sDeferredShaderCacheCopySemaphore = (uint64_t)result;
  return result;
}

uint64_t BWInferenceTextureStorageEntrySize()
{
  return 1;
}

void BWInferenceTextureStorageEntryRelinquish(id *a1)
{
  free(a1);
}

uint64_t __BWCaptureIsRunningInIOSAppOnMacEnvironment_block_invoke()
{
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "isiOSAppOnMac");
  BWCaptureIsRunningInIOSAppOnMacEnvironment_isIOSAppOnMaCGFloat c = result;
  return result;
}

uint64_t __BWCaptureIsRunningInMacCatalystEnvironment_block_invoke()
{
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F80], "processInfo"), "isMacCatalystApp");
  BWCaptureIsRunningInMacCatalystEnvironment_isCatalystApp = result;
  return result;
}

uint64_t BWOSTypeForString(void *a1)
{
  uint64_t v5 = 0;
  unint64_t v2 = [a1 length];
  if (v2 >= 4) {
    uint64_t v3 = 4;
  }
  else {
    uint64_t v3 = v2;
  }
  objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", (char *)&v5 - v3 + 4, 0, v3, 0);
  return bswap32(v5);
}

uint64_t __BWDeviceIsiPad_block_invoke()
{
  uint64_t result = [(id)MGCopyAnswer() intValue];
  BWDeviceIsiPad_isiPaCGFloat d = result == 3;
  return result;
}

__CFString *BWStringFromCGRect(double a1, double a2, double a3, double a4)
{
  if (CGRectIsNull(*(CGRect *)&a1)) {
    return @"CGRectNull";
  }
  else {
    return (__CFString *)[NSString stringWithFormat:@"{{%g, %g}, {%g, %g}}", *(void *)&a1, *(void *)&a2, *(void *)&a3, *(void *)&a4];
  }
}

__CFString *BWStringFromCGRectDict(const __CFDictionary *a1)
{
  CGSize v1 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  rect.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  rect.CGSize size = v1;
  if (!a1) {
    return @"{nil}";
  }
  if (CGRectMakeWithDictionaryRepresentation(a1, &rect)) {
    return BWStringFromCGRect(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
  }
  return (__CFString *)[NSString stringWithFormat:@"{not a valid CGRect dictionary}:%@", a1];
}

uint64_t BWStringFromCGRectMidPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double v4 = FigCaptureRectMidPoint(a1, a2, a3, a4);
  return [NSString stringWithFormat:@"{%g, %g}", *(void *)&v4, v5];
}

uint64_t BWStringFromCGRectDictMidPoint(const __CFDictionary *a1)
{
  CGSize v1 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  rect.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  rect.CGSize size = v1;
  CGRectMakeWithDictionaryRepresentation(a1, &rect);
  double v2 = FigCaptureRectMidPoint(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
  return [NSString stringWithFormat:@"{%g, %g}", *(void *)&v2, v3];
}

__CFString *BWStringFromSurface(__IOSurface *a1)
{
  if (!a1) {
    return @"<IOSurface NULL>";
  }
  size_t Width = IOSurfaceGetWidth(a1);
  size_t Height = IOSurfaceGetHeight(a1);
  IOSurfaceGetExtendedPixelsOfPlane();
  double v4 = NSString;
  OSType PixelFormat = IOSurfaceGetPixelFormat(a1);
  int v6 = BWStringFromCVPixelFormatType(PixelFormat);
  return (__CFString *)[v4 stringWithFormat:@"<IOSurface %p> %lux%lu%@, '%@' ID:%u", a1, Width, Height, &stru_1EFA403E0, v6, IOSurfaceGetID(a1)];
}

__CFString *BWStringFromPixelBufferSurface(__CVBuffer *a1)
{
  if (!a1) {
    return @"<CVPixelBuffer/IOSurface NULL>";
  }
  IOSurface = CVPixelBufferGetIOSurface(a1);
  return BWStringFromSurface(IOSurface);
}

uint64_t BWPrettyStringFromBytes(unint64_t a1)
{
  uint64_t v2 = a1 | 1;
  if (((flsll(a1 | 1) - 1) / 10) <= 5) {
    uint64_t v3 = (flsll(v2) - 1) / 10;
  }
  else {
    uint64_t v3 = 5;
  }
  return objc_msgSend(NSString, "stringWithFormat:", @"%.1f %s", (double)a1 / (double)(unint64_t)(1 << (10 * v3)), off_1E5C25F88[v3]);
}

__CFString *BWStringFromAudioChannelLayout(unsigned int *a1)
{
  if (!a1) {
    return @"NULL";
  }
  uint64_t v2 = (void *)[MEMORY[0x1E4F28E78] string];
  if (a1[2])
  {
    uint64_t v3 = 0;
    int v4 = 0;
    do
    {
      uint64_t v5 = &a1[5 * v4];
      [v2 appendFormat:@"mChannelLayoutTag[%d]: mChannelLabel: 0x%08X, mChannelFlags: 0x%08X, mChannelCoordinates: %f, %f, %f\n", v3, v5[3], v5[4], *((float *)v5 + 5), *((float *)v5 + 6), *((float *)v5 + 7)];
      uint64_t v3 = ++v4;
    }
    while (a1[2] > v4);
  }
  int v6 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithFormat:", @"0x%08X", *a1);
  uint64_t v7 = v6;
  unsigned int v8 = *a1;
  if ((int)*a1 <= 6619137)
  {
    if (!v8)
    {
      char v9 = @" (Use Channel Descriptions)";
      goto LABEL_17;
    }
    if (v8 == 6553601)
    {
      char v9 = @" (Mono)";
      goto LABEL_17;
    }
  }
  else
  {
    switch(v8)
    {
      case 0x650002u:
        char v9 = @" (Stereo)";
        goto LABEL_17;
      case 0x6C0004u:
        char v9 = @" (Quadraphonic)";
        goto LABEL_17;
      case 0xBE0000u:
        char v9 = @" (HOA_ACN_SN3D)";
LABEL_17:
        [v6 appendString:v9];
        break;
    }
  }
  return (__CFString *)[NSString stringWithFormat:@"\n[AudioChannelLayout]\nmChannelLayoutTag: %@\nmNumberChannelDescriptions: %d\n%@", v7, a1[2], v2];
}

__CFString *BWStringFromFigCaptureSourceDeviceTypes(void *a1)
{
  if (![a1 count]) {
    return &stru_1EFA403E0;
  }
  uint64_t v2 = (void *)[MEMORY[0x1E4F28E78] string];
  if ([a1 count])
  {
    unint64_t v3 = 0;
    do
    {
      if (v3) {
        [v2 appendString:@"+"];
      }
      objc_msgSend(v2, "appendString:", BWStringFromCaptureDeviceType(objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v3++), "intValue")));
    }
    while ([a1 count] > v3);
  }
  return (__CFString *)v2;
}

BOOL BWCIFilterArrayOnlyContainsPortraitFilters(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(a1);
        }
        NSClassFromString(&cfstr_Cideptheffect.isa);
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSClassFromString(&cfstr_Ciportraiteffe_8.isa);
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            NSClassFromString(&cfstr_Ciportraiteffe_9.isa);
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              return 0;
            }
          }
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  return [a1 count] != 0;
}

uint64_t BWCIFilterArrayContainsPortraitEffectStageFilters(void *a1, char a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(a1);
        }
        NSClassFromString(&cfstr_Ciportraiteffe_6.isa);
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSClassFromString(&cfstr_Ciportraiteffe_7.isa);
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            if (a2) {
              continue;
            }
            NSClassFromString(&cfstr_Ciportraiteffe_4.isa);
            if ((objc_opt_isKindOfClass() & 1) == 0) {
              continue;
            }
          }
        }
        return 1;
      }
      uint64_t v5 = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t result = 0;
      if (v5) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t BWSemanticSegmentationMatteAttachedMediaKeysSupportedByDemosaicedRaw()
{
  v1[3] = *MEMORY[0x1E4F143B8];
  v1[0] = @"PersonSemanticsSkin";
  v1[1] = 0x1EFA745A0;
  v1[2] = 0x1EFA74420;
  return [MEMORY[0x1E4F1C978] arrayWithObjects:v1 count:3];
}

uint64_t BWSmartStyleRenderingShouldBeBypassed(const void *a1)
{
  AttachedMediCGFloat a = (const void *)BWSampleBufferGetAttachedMedia(a1, 0x1EFA74840);
  if (!AttachedMedia) {
    return 0;
  }
  uint64_t v2 = (void *)CMGetAttachment(AttachedMedia, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)[v2 objectForKeyedSubscript:*MEMORY[0x1E4F534E8]];
  return [v3 BOOLValue];
}

BOOL BWSampleBufferContainsDepthAttachedMedia(const void *a1)
{
  return BWSampleBufferGetAttachedMedia(a1, @"Depth") != 0;
}

uint64_t BWSampleBufferContainsSemanticSegmentationMatteAttachedMediaSupportedByDemosaicedRaw(const void *a1)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  v12[0] = @"PersonSemanticsSkin";
  v12[1] = 0x1EFA745A0;
  v12[2] = 0x1EFA74420;
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v12, 3, 0);
  uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        if (BWSampleBufferGetAttachedMedia(a1, *(void *)(*((void *)&v7 + 1) + 8 * v6))) {
          return 1;
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t BWMTLCommandBufferStatusToShortString(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%lu", a1);
}

uint64_t BWLoadCreateAndSetupMetalImageBufferProcessor(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a5) {
    uint64_t v16 = [NSString stringWithFormat:@"%@%@ProcessorV%d", a3, a4, a5];
  }
  else {
    uint64_t v16 = [NSString stringWithFormat:@"%@%@Processor", a3, a4, v30];
  }
  uint64_t v17 = v16;
  uint64_t v18 = a4;
  uint64_t v19 = BWLoadProcessorBundle(a1, a2);
  if (!v19)
  {
    GLuint v21 = 0;
    goto LABEL_29;
  }
  id v20 = objc_alloc_init((Class)[v19 classNamed:v17]);
  GLuint v21 = v20;
  if (!v20)
  {
LABEL_29:
    uint64_t v28 = 4294954510;
    goto LABEL_30;
  }
  if (![v20 conformsToProtocol:a6])
  {
LABEL_27:
    uint64_t v28 = 4294954516;
    goto LABEL_30;
  }
  if (a7)
  {
    id v22 = BWProcessorTuningParametersWithStandardStructure(v18, a5, a8);
    if (v22)
    {
      [v21 setTuningParameters:v22];
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_10:
  if ([a8 count]) {
    int v23 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  }
  else {
    int v23 = 0;
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v24 = [a8 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v35 != v26) {
          objc_enumerationMutation(a8);
        }
        objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(a8, "objectForKeyedSubscript:", *(void *)(*((void *)&v34 + 1) + 8 * i)), "cameraInfo"), *(void *)(*((void *)&v34 + 1) + 8 * i));
      }
      uint64_t v25 = [a8 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v25);
  }
  if ([v23 count]) {
    objc_msgSend(v21, "setCameraInfoByPortType:", (id)objc_msgSend(v23, "copy"));
  }
  [v21 setMetalCommandQueue:a9];
  if (a10 && (*(unsigned int (**)(uint64_t, void *))(a10 + 16))(a10, v21)
    || [v21 setup])
  {
    goto LABEL_27;
  }
  uint64_t v28 = 0;
  if (!a11)
  {
LABEL_30:

    return v28;
  }
  *a11 = v21;
  return v28;
}

uint64_t BWStandardProcessorNameForBundleBaseName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return [NSString stringWithFormat:@"%@%@ProcessorV%d", a1, a2, a3];
  }
  else {
    return [NSString stringWithFormat:@"%@%@Processor", a1, a2, v4];
  }
}

id BWProcessorTuningParametersWithStandardStructure(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a1 && a2 && (uint64_t v5 = a3) != 0)
  {
    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v7 = [a3 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v20 != v9) {
            objc_enumerationMutation(v5);
          }
          uint64_t v11 = *(void *)(*((void *)&v19 + 1) + 8 * i);
          uint64_t v12 = (void *)[v5 objectForKeyedSubscript:v11];
          uint64_t v13 = objc_msgSend((id)objc_msgSend(v12, "sensorIDDictionary"), "objectForKeyedSubscript:", objc_msgSend(NSString, "stringWithFormat:", @"%@Parameters", a1));
          uint64_t v14 = [NSString stringWithFormat:@"%@V%d", a1, a2];
          id v15 = (void *)v13;
          uint64_t v5 = a3;
          objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(v15, "objectForKeyedSubscript:", v14), v11);
        }
        uint64_t v8 = [a3 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v8);
    }
    if ([v6 count]) {
      id v16 = (id)[v6 copy];
    }
    else {
      id v16 = 0;
    }
  }
  else
  {
    FigDebugAssert3();
    return 0;
  }
  return v16;
}

uint64_t BWLoadCreateSetupAndPrepareMetalImageBufferProcessor(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, void *a13)
{
  id v16 = 0;
  uint64_t v13 = BWLoadCreateAndSetupMetalImageBufferProcessor(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v16);
  if (v13)
  {
    uint64_t v14 = v13;
    FigDebugAssert3();
    goto LABEL_9;
  }
  if (a11 && (*(unsigned int (**)(uint64_t, id))(a11 + 16))(a11, v16)
    || [v16 prepareToProcess:a12])
  {
    uint64_t v14 = 4294954516;
    goto LABEL_9;
  }
  uint64_t v14 = 0;
  if (!a13)
  {
LABEL_9:

    return v14;
  }
  *a13 = v16;
  return v14;
}

uint64_t BWBuildVideoTrackMatrix(int a1, int a2, unsigned int a3, int a4, int a5, char a6, uint64_t a7)
{
  v48[9] = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t result = 0;
  if ((a2 & a3 & 1) == 0 && a7 && HIDWORD(a7))
  {
    uint64_t v13 = (_OWORD *)MEMORY[0x1E4F1DAB8];
    CGFloat a = *MEMORY[0x1E4F1DAB8];
    CGFloat b = *(double *)(MEMORY[0x1E4F1DAB8] + 8);
    CGFloat c = *(double *)(MEMORY[0x1E4F1DAB8] + 16);
    CGFloat d = *(double *)(MEMORY[0x1E4F1DAB8] + 24);
    CGFloat v18 = *(double *)(MEMORY[0x1E4F1DAB8] + 32);
    CGFloat v19 = *(double *)(MEMORY[0x1E4F1DAB8] + 40);
    if (a2)
    {
      CGAffineTransformMakeScale(&t2, -1.0, 1.0);
      t1.CGFloat a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.tCGFloat x = v18;
      t1.tCGFloat y = v19;
      CGAffineTransformConcat(&v47, &t1, &t2);
      long long v36 = *(_OWORD *)&v47.c;
      long long v37 = *(_OWORD *)&v47.a;
      tCGFloat x = v47.tx;
      tCGFloat y = v47.ty;
      CGAffineTransformMakeTranslation(&v44, (double)(int)a7, 0.0);
      *(_OWORD *)&t1.CGFloat a = v37;
      *(_OWORD *)&t1.CGFloat c = v36;
      t1.tCGFloat x = tx;
      t1.tCGFloat y = ty;
      CGAffineTransformConcat(&v47, &t1, &v44);
      CGFloat a = v47.a;
      CGFloat b = v47.b;
      CGFloat c = v47.c;
      CGFloat d = v47.d;
      CGFloat v18 = v47.tx;
      CGFloat v19 = v47.ty;
    }
    int v22 = FigCaptureRotationDegreesFromOrientation(a1, a4, a5, a2 | a3);
    double v23 = (double)SHIDWORD(a7);
    if (v22 == 90) {
      double v24 = (double)SHIDWORD(a7);
    }
    else {
      double v24 = 0.0;
    }
    if (v22 == 180) {
      double v24 = (double)(int)a7;
    }
    else {
      double v23 = 0.0;
    }
    if (v22 == 270) {
      double v25 = 0.0;
    }
    else {
      double v25 = v24;
    }
    if (v22 == 270) {
      double v26 = (double)(int)a7;
    }
    else {
      double v26 = v23;
    }
    CGAffineTransformMakeRotation(&v43, (double)v22 * 3.14159265 / 180.0);
    t1.CGFloat a = a;
    t1.CGFloat b = b;
    t1.CGFloat c = c;
    t1.CGFloat d = d;
    t1.tCGFloat x = v18;
    t1.tCGFloat y = v19;
    CGAffineTransformConcat(&v47, &t1, &v43);
    long long v39 = *(_OWORD *)&v47.c;
    long long v40 = *(_OWORD *)&v47.a;
    CGFloat v27 = v47.tx;
    CGFloat v28 = v47.ty;
    CGAffineTransformMakeTranslation(&v42, v25, v26);
    *(_OWORD *)&t1.CGFloat a = v40;
    *(_OWORD *)&t1.CGFloat c = v39;
    t1.tCGFloat x = v27;
    t1.tCGFloat y = v28;
    CGAffineTransformConcat(&v47, &t1, &v42);
    double v30 = v47.a;
    double v29 = v47.b;
    double v32 = v47.c;
    double v31 = v47.d;
    double v34 = v47.tx;
    double v33 = v47.ty;
    if ((a6 & 1) != 0
      || (long long v35 = v13[1],
          *(_OWORD *)&t1.CGFloat a = *v13,
          *(_OWORD *)&t1.CGFloat c = v35,
          *(_OWORD *)&t1.tCGFloat x = v13[2],
          !CGAffineTransformEqualToTransform(&v47, &t1)))
    {
      v48[0] = objc_msgSend(NSNumber, "numberWithDouble:", v30, v36, v37);
      v48[1] = [NSNumber numberWithDouble:v29];
      v48[2] = &unk_1EFB04ED8;
      v48[3] = [NSNumber numberWithDouble:v32];
      v48[4] = [NSNumber numberWithDouble:v31];
      v48[5] = &unk_1EFB04ED8;
      v48[6] = [NSNumber numberWithDouble:v34];
      v48[7] = [NSNumber numberWithDouble:v33];
      v48[8] = &unk_1EFB04EE8;
      return [MEMORY[0x1E4F1C978] arrayWithObjects:v48 count:9];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t BWRowMajorArrayFrom3x3Matrix(__n128 a1, __n128 a2, __n128 a3)
{
  v10[9] = *MEMORY[0x1E4F143B8];
  v10[0] = objc_msgSend(NSNumber, "numberWithFloat:");
  v10[1] = [NSNumber numberWithFloat:a2.n128_f64[0]];
  v10[2] = [NSNumber numberWithFloat:a3.n128_f64[0]];
  HIDWORD(v3) = a1.n128_u32[1];
  LODWORD(v3) = a1.n128_u32[1];
  v10[3] = [NSNumber numberWithFloat:v3];
  HIDWORD(v4) = a2.n128_u32[1];
  LODWORD(v4) = a2.n128_u32[1];
  v10[4] = [NSNumber numberWithFloat:v4];
  HIDWORD(v5) = a3.n128_u32[1];
  LODWORD(v5) = a3.n128_u32[1];
  v10[5] = [NSNumber numberWithFloat:v5];
  v10[6] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v10[7] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a2.n128_u32[1], a2.n128_u32[2])));
  v10[8] = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a3.n128_u32[1], a3.n128_u32[2])));
  return [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:9];
}

uint64_t BWScalePixelBuffer(__CVBuffer *a1, __CVBuffer *a2, OpaqueVTPixelTransferSession *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  VTPixelTransferSessionRef v11 = a3;
  void v39[4] = *MEMORY[0x1E4F143B8];
  VTPixelTransferSessionRef pixelTransferSessionOut = a3;
  if (CGRectIsNull(*(CGRect *)&a4))
  {
    CFDictionaryRef v22 = 0;
  }
  else
  {
    v40.origin.CGFloat x = a4;
    v40.origin.CGFloat y = a5;
    v40.size.CGFloat width = a6;
    v40.size.CGFloat height = a7;
    CFDictionaryRef v22 = CGRectCreateDictionaryRepresentation(v40);
    if (!v22)
    {
      FigDebugAssert3();
      return 4294954516;
    }
  }
  v41.origin.CGFloat x = a8;
  v41.origin.CGFloat y = a9;
  v41.size.CGFloat width = a10;
  v41.size.CGFloat height = a11;
  if (CGRectIsNull(v41))
  {
    double v23 = 0;
    if (v11)
    {
LABEL_6:
      VTPixelTransferSessionRef v24 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    size_t Width = CVPixelBufferGetWidth(a2);
    size_t Height = CVPixelBufferGetHeight(a2);
    v42.origin.CGFloat x = a8;
    v42.origin.CGFloat y = a9;
    v42.size.CGFloat width = a10;
    v42.size.CGFloat height = a11;
    LODWORD(Width) = llround(CGRectGetMidX(v42) - (double)Width * 0.5);
    v43.origin.CGFloat x = a8;
    v43.origin.CGFloat y = a9;
    v43.size.CGFloat width = a10;
    v43.size.CGFloat height = a11;
    LODWORD(Height) = llround(CGRectGetMidY(v43) - (double)Height * 0.5);
    v38[0] = *MEMORY[0x1E4F24A70];
    v39[0] = [NSNumber numberWithInt:Width];
    v38[1] = *MEMORY[0x1E4F24A80];
    v39[1] = [NSNumber numberWithInt:Height];
    v38[2] = *MEMORY[0x1E4F24A88];
    v39[2] = [NSNumber numberWithDouble:a10];
    v38[3] = *MEMORY[0x1E4F24A68];
    v39[3] = [NSNumber numberWithDouble:a11];
    double v23 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:4];
    if (v11) {
      goto LABEL_6;
    }
  }
  uint64_t v27 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pixelTransferSessionOut);
  if (v27)
  {
    uint64_t v30 = v27;
    FigDebugAssert3();
    return v30;
  }
  VTPixelTransferSessionRef v11 = pixelTransferSessionOut;
  VTPixelTransferSessionRef v24 = pixelTransferSessionOut;
LABEL_10:
  CFStringRef v28 = (const __CFString *)*MEMORY[0x1E4F45170];
  if (v22)
  {
    uint64_t v29 = VTSessionSetProperty(v11, v28, v22);
    if (v29)
    {
      uint64_t v30 = v29;
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v31 = VTSessionSetProperty(v11, v28, 0);
    if (v31)
    {
      uint64_t v30 = v31;
      goto LABEL_31;
    }
  }
  if (v23)
  {
    uint64_t v32 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F450D8], v23);
    if (v32)
    {
      uint64_t v30 = v32;
      goto LABEL_31;
    }
    uint64_t v33 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F45168], (CFTypeRef)*MEMORY[0x1E4F45450]);
    if (v33)
    {
      uint64_t v30 = v33;
      goto LABEL_31;
    }
    uint64_t v34 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F45188], (CFTypeRef)*MEMORY[0x1E4F1CFC8]);
    if (v34)
    {
      uint64_t v30 = v34;
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v35 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F45168], (CFTypeRef)*MEMORY[0x1E4F45460]);
    if (v35)
    {
      uint64_t v30 = v35;
      goto LABEL_31;
    }
  }
  uint64_t v30 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a1, a2);
  if (v30)
  {
LABEL_31:
    FigDebugAssert3();
    if (!v24) {
      return v30;
    }
    goto LABEL_22;
  }
  if (v24) {
LABEL_22:
  }
    CFRelease(v24);
  return v30;
}

uint64_t BWCreateIOSurfaceBackedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, CVPixelBufferRef *a4, __CFString *a5)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  if (FigCapturePlatformIOSurfaceWiringAssertionEnabled())
  {
    uint64_t v11 = *MEMORY[0x1E4F24D30];
    v12[0] = MEMORY[0x1E4F1CC38];
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
  }
  uint64_t IOSurfaceBackedCVPixelBufferWithAttributes = FigCreateIOSurfaceBackedCVPixelBufferWithAttributes();
  IOSurface = CVPixelBufferGetIOSurface(*a4);
  if ([(__CFString *)a5 length]) {
    uint64_t v9 = a5;
  }
  else {
    uint64_t v9 = @"CMCapture: unnamed";
  }
  IOSurfaceSetValue(IOSurface, (CFStringRef)*MEMORY[0x1E4F2F128], v9);
  return IOSurfaceBackedCVPixelBufferWithAttributes;
}

unint64_t BWExtendDimensionsToConformToAlignmentRequirements(unint64_t a1, int a2, int a3)
{
  unint64_t v4 = HIDWORD(a1);
  unsigned int v5 = FigCaptureCeilFloatToMultipleOf(a2, (float)(int)a1);
  return v5 | (unint64_t)(FigCaptureCeilFloatToMultipleOf(a3, (float)(int)v4) << 32);
}

uint64_t BWShiftedValueWithBitmask(int a1, unsigned int a2)
{
  char v2 = __clz(__rbit32(a2));
  if (!a2) {
    char v2 = -1;
  }
  return (a1 << v2) & a2;
}

uint64_t BWUnderlyingDeviceTypesForCompositeDeviceType(uint64_t a1)
{
  char v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  double v3 = v2;
  switch((int)a1)
  {
    case 1:
    case 2:
    case 3:
    case 5:
    case 7:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      unint64_t v4 = (void *)[NSNumber numberWithInt:a1];
      goto LABEL_3;
    case 4:
      uint64_t v7 = &unk_1EFAFEC28;
      goto LABEL_12;
    case 6:
      uint64_t v8 = &unk_1EFAFEC28;
      goto LABEL_14;
    case 8:
      [v2 addObject:&unk_1EFAFEC28];
      unint64_t v4 = &unk_1EFAFEC58;
      goto LABEL_3;
    case 9:
      [v2 addObject:&unk_1EFAFEC28];
      uint64_t v7 = &unk_1EFAFEC58;
LABEL_12:
      [v3 addObject:v7];
      unint64_t v4 = &unk_1EFAFEC40;
      goto LABEL_3;
    case 12:
      uint64_t v8 = &unk_1EFAFEC88;
LABEL_14:
      [v2 addObject:v8];
      unint64_t v4 = &unk_1EFAFEC70;
      goto LABEL_3;
    case 13:
      [v2 addObject:&unk_1EFAFEC28];
      unint64_t v4 = &unk_1EFAFECA0;
LABEL_3:
      [v3 addObject:v4];
      break;
    default:
      break;
  }
  if (![v3 count]) {
    objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8], objc_msgSend(NSString, "stringWithFormat:", @"Unknown composite device type %d.  Does not align with device types", a1), 0 reason userInfo]);
  }
  unsigned int v5 = (void *)MEMORY[0x1E4F1C978];
  return [v5 arrayWithArray:v3];
}

uint64_t BWGetDiskCapacityInGB()
{
  if (BWGetDiskCapacityInGB_onceToken != -1) {
    dispatch_once(&BWGetDiskCapacityInGB_onceToken, &__block_literal_global_379);
  }
  return BWGetDiskCapacityInGB_sDiskCapacityInGB;
}

void __BWGetDiskCapacityInGB_block_invoke()
{
  id v0 = (id)MGCopyAnswer();
  BWGetDiskCapacityInGB_sDiskCapacityInGB = (int)((double)objc_msgSend((id)objc_msgSend(v0, "objectForKeyedSubscript:", *MEMORY[0x1E4FBA0F8]), "longLongValue")/ 1000000000.0);
}

uint64_t BWGetDataCapacityInBytes()
{
  if (BWGetDataCapacityInBytes_onceToken != -1) {
    dispatch_once(&BWGetDataCapacityInBytes_onceToken, &__block_literal_global_384);
  }
  return BWGetDataCapacityInBytes_sDataCapacityInBytes;
}

void __BWGetDataCapacityInBytes_block_invoke()
{
  id v0 = (id)MGCopyAnswer();
  BWGetDataCapacityInBytes_sDataCapacityInBytes = objc_msgSend((id)objc_msgSend(v0, "objectForKeyedSubscript:", *MEMORY[0x1E4FBA0F0]), "longLongValue");
}

uint64_t BWGetFreeDiskSpaceAtPath(const char *a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  memset(&v2, 0, 512);
  if (!statfs(a1, &v2)) {
    return v2.f_bavail * v2.f_bsize;
  }
  __error();
  return 0;
}

uint64_t BWGetCurrentTotalNANDReadAndWriteBytes(uint64_t *a1, uint64_t *a2)
{
  io_iterator_t existing = 0;
  mach_port_t v4 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v5 = IOServiceMatching("IONVMeController");
  uint64_t MatchingServices = IOServiceGetMatchingServices(v4, v5, &existing);
  if (MatchingServices || !existing)
  {
    FigDebugAssert3();
  }
  else
  {
    id v16 = a1;
    uint64_t v17 = a2;
    unsigned int v18 = MatchingServices;
    io_object_t v7 = IOIteratorNext(existing);
    if (v7)
    {
      io_registry_entry_t v8 = v7;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        uint64_t v12 = (void *)IORegistryEntrySearchCFProperty(v8, "IOService", @"Physical Interconnect Location", v11, 1u);
        if ([v12 isEqualToString:@"Internal"])
        {
          uint64_t v13 = (void *)IORegistryEntrySearchCFProperty(v8, "IOService", @"Statistics", v11, 1u);
          uint64_t v14 = v13;
          if (v13)
          {
            uint64_t v10 = objc_msgSend((id)objc_msgSend(v13, "objectForKey:", @"Bytes (Read)"), "unsignedLongLongValue");
            uint64_t v9 = objc_msgSend((id)objc_msgSend(v14, "objectForKey:", @"Bytes (Write)"), "unsignedLongLongValue");

            LOBYTE(v14) = 1;
          }
        }
        else
        {
          LOBYTE(v14) = 0;
        }

        IOObjectRelease(v8);
        if (v14) {
          break;
        }
        io_registry_entry_t v8 = IOIteratorNext(existing);
      }
      while (v8);
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    if (v16) {
      *id v16 = v10;
    }
    uint64_t MatchingServices = v18;
    if (v17) {
      *uint64_t v17 = v9;
    }
  }
  if (existing) {
    IOObjectRelease(existing);
  }
  return MatchingServices;
}

uint64_t BWGetDisplaySupportsPerseus()
{
  if (BWGetDisplaySupportsPerseus_onceToken != -1) {
    dispatch_once(&BWGetDisplaySupportsPerseus_onceToken, &__block_literal_global_418);
  }
  return BWGetDisplaySupportsPerseus_displaySupportsPerseus;
}

uint64_t __BWGetDisplaySupportsPerseus_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  BWGetDisplaySupportsPerseus_displaySupportsPerseus = result;
  return result;
}

uint64_t BWProcessWiderAndNarrowerFOVBuffersForFacePropagation(const void *a1, const void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F53070];
  id v6 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  uint64_t v7 = *MEMORY[0x1E4F53DC8];
  uint64_t v8 = [v6 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
  uint64_t v9 = (void *)CMGetAttachment(a2, v5, 0);
  uint64_t v10 = [v9 objectForKeyedSubscript:v7];
  if (v8 | v10)
  {
    CFAllocatorRef v11 = (void *)v10;
    unint64_t v12 = [(id)v8 count];
    if (v12 >= [v11 count])
    {
      long long v32 = 0uLL;
      long long v33 = 0uLL;
      long long v30 = 0uLL;
      long long v31 = 0uLL;
      uint64_t result = [(id)v8 countByEnumeratingWithState:&v30 objects:v35 count:16];
      if (result)
      {
        uint64_t v21 = result;
        uint64_t v22 = *(void *)v31;
        uint64_t v23 = *MEMORY[0x1E4F538F8];
LABEL_17:
        uint64_t v24 = 0;
        while (1)
        {
          if (*(void *)v31 != v22) {
            objc_enumerationMutation((id)v8);
          }
          uint64_t result = bwu_propagateDetectedObjects(a1, a2, a3, objc_msgSend((id)objc_msgSend((id)v8, "objectForKeyedSubscript:", *(void *)(*((void *)&v30 + 1) + 8 * v24)), "objectForKeyedSubscript:", v23), objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *(void *)(*((void *)&v30 + 1) + 8 * v24)), "objectForKeyedSubscript:", v23), *(void **)(*((void *)&v30 + 1) + 8 * v24));
          if (!result) {
            break;
          }
          if (v21 == ++v24)
          {
            uint64_t result = [(id)v8 countByEnumeratingWithState:&v30 objects:v35 count:16];
            uint64_t v21 = result;
            if (result) {
              goto LABEL_17;
            }
            return result;
          }
        }
      }
    }
    else
    {
      long long v28 = 0uLL;
      long long v29 = 0uLL;
      long long v26 = 0uLL;
      long long v27 = 0uLL;
      uint64_t result = [v11 countByEnumeratingWithState:&v26 objects:v34 count:16];
      if (result)
      {
        uint64_t v14 = result;
        uint64_t v15 = *(void *)v27;
        uint64_t v16 = *MEMORY[0x1E4F538F8];
LABEL_5:
        uint64_t v17 = 0;
        while (1)
        {
          if (*(void *)v27 != v15) {
            objc_enumerationMutation(v11);
          }
          uint64_t result = bwu_propagateDetectedObjects(a1, a2, a3, objc_msgSend((id)objc_msgSend((id)v8, "objectForKeyedSubscript:", *(void *)(*((void *)&v26 + 1) + 8 * v17)), "objectForKeyedSubscript:", v16), objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *(void *)(*((void *)&v26 + 1) + 8 * v17)), "objectForKeyedSubscript:", v16), *(void **)(*((void *)&v26 + 1) + 8 * v17));
          if (!result) {
            break;
          }
          if (v14 == ++v17)
          {
            uint64_t result = [v11 countByEnumeratingWithState:&v26 objects:v34 count:16];
            uint64_t v14 = result;
            if (result) {
              goto LABEL_5;
            }
            return result;
          }
        }
      }
    }
  }
  else
  {
    unsigned int v18 = (void *)*MEMORY[0x1E4F53DC0];
    CGFloat v19 = (void *)[v6 objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]];
    long long v20 = (void *)[v9 objectForKeyedSubscript:v18];
    return bwu_propagateDetectedObjects(a1, a2, a3, v19, v20, v18);
  }
  return result;
}

BOOL bwu_propagateDetectedObjects(const void *a1, const void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = [a3 count];
  if (v12 != 2) {
    return v12 == 2;
  }
  objc_msgSend((id)objc_msgSend(a3, "objectAtIndexedSubscript:", 0), "floatValue");
  float v14 = v13;
  objc_msgSend((id)objc_msgSend(a3, "objectAtIndexedSubscript:", 1), "floatValue");
  float v16 = v15;
  if ([a4 count] && !objc_msgSend(a5, "count"))
  {
    if (v14 > v16) {
      float v17 = v14 / v16;
    }
    else {
      float v17 = v16 / v14;
    }
    if (!a2) {
      return v12 == 2;
    }
  }
  else
  {
    if (![a5 count] || objc_msgSend(a4, "count")) {
      return v12 == 2;
    }
    float v17 = v14 > v16 ? v16 / v14 : v14 / v16;
    a4 = a5;
    a2 = a1;
    if (!a1) {
      return v12 == 2;
    }
  }
  CGRect v41 = a6;
  id v18 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v19 = [a4 countByEnumeratingWithState:&v43 objects:v47 count:16];
  if (v19)
  {
    uint64_t v20 = v19;
    double v21 = v17;
    uint64_t v22 = *(void *)v44;
    uint64_t v23 = *MEMORY[0x1E4F54180];
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v44 != v22) {
          objc_enumerationMutation(a4);
        }
        double v25 = *(void **)(*((void *)&v43 + 1) + 8 * i);
        memset(&rect, 0, sizeof(rect));
        if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)[v25 objectForKeyedSubscript:v23], &rect))
        {
          CGFloat v26 = rect.size.width * v21;
          CGFloat v27 = rect.size.height * v21;
          CGFloat v28 = (rect.origin.x + -0.5) * v21 + 0.5;
          CGFloat v29 = (rect.origin.y + -0.5) * v21 + 0.5;
          long long v30 = (void *)[v25 mutableCopy];
          v49.origin.CGFloat x = v28;
          v49.origin.CGFloat y = v29;
          v49.size.CGFloat width = v26;
          v49.size.CGFloat height = v27;
          CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v49);
          [v30 setObject:DictionaryRepresentation forKeyedSubscript:v23];
          if (DictionaryRepresentation) {
            CFRelease(DictionaryRepresentation);
          }
          [v18 addObject:v30];
        }
      }
      uint64_t v20 = [a4 countByEnumeratingWithState:&v43 objects:v47 count:16];
    }
    while (v20);
  }
  CFStringRef v32 = (const __CFString *)*MEMORY[0x1E4F53070];
  long long v33 = objc_msgSend((id)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0), "mutableCopy");
  uint64_t v34 = *MEMORY[0x1E4F53DC0];
  if ([v41 isEqualToString:*MEMORY[0x1E4F53DC0]])
  {
    uint64_t v35 = v33;
    id v36 = v18;
    uint64_t v37 = v34;
  }
  else
  {
    uint64_t v38 = *MEMORY[0x1E4F53DC8];
    long long v39 = (void *)[v33 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
    if (!v39)
    {
      long long v39 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      [v33 setObject:v39 forKeyedSubscript:v38];
    }
    if (![v39 objectForKeyedSubscript:v41]) {
      objc_msgSend(v39, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary"), v41);
    }
    uint64_t v35 = (void *)[v39 objectForKeyedSubscript:v41];
    uint64_t v37 = *MEMORY[0x1E4F538F8];
    id v36 = v18;
  }
  [v35 setObject:v36 forKeyedSubscript:v37];
  CMSetAttachment(a2, v32, v33, 1u);

  return v12 == 2;
}

void *BWPreviewRegistrationTypeFromShortString(uint64_t a1)
{
  if (BWPreviewRegistrationTypeFromShortString_sBWShortStringToPreviewRegistrationTypeOnceToken != -1) {
    dispatch_once(&BWPreviewRegistrationTypeFromShortString_sBWShortStringToPreviewRegistrationTypeOnceToken, &__block_literal_global_429);
  }
  uint64_t result = (void *)[(id)BWPreviewRegistrationTypeFromShortString_sBWShortStringToPreviewRegistrationTypeDictionary objectForKeyedSubscript:a1];
  if (result)
  {
    return (void *)[result intValue];
  }
  return result;
}

void *__BWPreviewRegistrationTypeFromShortString_block_invoke()
{
  BWPreviewRegistrationTypeFromShortString_sBWShortStringToPreviewRegistrationTypeDictionarCGFloat y = (uint64_t)&unk_1EFB05BE8;
  return &unk_1EFB05BE8;
}

uint64_t BWVersionMakeWithObject(uint64_t result, _WORD *a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  if (result)
  {
    uint64_t v3 = (void *)result;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v3 floatValue];
      uint64_t v5 = (uint64_t)v4;
      uint64_t v6 = (uint64_t)(float)((float)((float)(v4 - (float)(uint64_t)v4) * 10.0) + 0.5);
      if (vabds_f32(-(float)((float)(10 * (uint64_t)v4) - (float)(v4 * 10.0)), (float)v6) < 0.01)
      {
        __int16 v7 = 0;
LABEL_5:
        *a2 = v5;
        a2[1] = v6;
        uint64_t result = 1;
        a2[2] = v7;
        return result;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        return 0;
      }
      uint64_t result = [v3 length];
      if (!result) {
        return result;
      }
      uint64_t v8 = (void *)[v3 componentsSeparatedByString:@"."];
      uint64_t v6 = [v8 count];
      if (!v6)
      {
        __int16 v7 = 0;
        LOWORD(v5) = 0;
        goto LABEL_5;
      }
      if ((v6 == 1
         || (v6 == 2
          || (bwu_validateLongConversion((void *)[v8 objectAtIndexedSubscript:2], &v9) & 1) != 0)
         && (bwu_validateLongConversion((void *)[v8 objectAtIndexedSubscript:1], &v10) & 1) != 0)
        && bwu_validateLongConversion((void *)[v8 objectAtIndexedSubscript:0], &v11))
      {
        LOWORD(v6) = v10;
        LOWORD(v5) = v11;
        __int16 v7 = v9;
        goto LABEL_5;
      }
    }
    FigDebugAssert3();
    return 0;
  }
  return result;
}

uint64_t bwu_validateLongConversion(void *a1, uint64_t *a2)
{
  uint64_t v3 = (const char *)[a1 UTF8String];
  __endptr = 0;
  uint64_t v4 = strtol(v3, &__endptr, 0);
  if (__endptr == v3 || *__endptr) {
    return 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t BWCreateWorkgroupWithName()
{
  return os_workgroup_interval_create();
}

uint64_t BWGetPixelBufferRotationAndMirroring(const void *a1, _DWORD *a2, unsigned char *a3)
{
  int v6 = objc_msgSend((id)CMGetAttachment(a1, @"RotationDegrees", 0), "intValue");
  int v7 = objc_msgSend((id)CMGetAttachment(a1, @"MirroredHorizontal", 0), "BOOLValue");
  uint64_t result = objc_msgSend((id)CMGetAttachment(a1, @"MirroredVertical", 0), "BOOLValue");
  int v9 = result;
  if (v7) {
    BOOL v10 = result == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (result) {
      goto LABEL_13;
    }
LABEL_7:
    if (!a2) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t result = FigDebugAssert3();
  if (!v9) {
    goto LABEL_7;
  }
LABEL_13:
  uint64_t result = FigCaptureNormalizeAngle(v6 + 180);
  int v6 = result;
  LOBYTE(v7) = 1;
  if (a2) {
LABEL_8:
  }
    *a2 = v6;
LABEL_9:
  if (a3) {
    *a3 = v7;
  }
  return result;
}

CGAffineTransform *BWGetAffineTransformFromSensorToPreview@<X0>(int a1@<W0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = MEMORY[0x1E4F1DAB8];
  long long v9 = *MEMORY[0x1E4F1DAB8];
  long long v10 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a4 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a4 + 16) = v10;
  long long v11 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(a4 + 32) = v11;
  if (a1 > 0 || a2)
  {
    long long v29 = v10;
    long long v30 = v9;
    long long v28 = v11;
    CGAffineTransformMakeTranslation(&t2, -0.5, -0.5);
    *(_OWORD *)&t1.CGFloat a = v30;
    *(_OWORD *)&t1.CGFloat c = v29;
    *(_OWORD *)&t1.tCGFloat x = v28;
    CGAffineTransformConcat((CGAffineTransform *)a4, &t1, &t2);
    if (a1 >= 1)
    {
      CGAffineTransformMakeRotation(&v38, (double)a1 * 0.0174532925);
      long long v12 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v37.CGFloat a = *(_OWORD *)a4;
      *(_OWORD *)&v37.CGFloat c = v12;
      *(_OWORD *)&v37.tCGFloat x = *(_OWORD *)(a4 + 32);
      CGAffineTransformConcat(&t1, &v37, &v38);
      long long v13 = *(_OWORD *)&t1.c;
      *(_OWORD *)a4 = *(_OWORD *)&t1.a;
      *(_OWORD *)(a4 + 16) = v13;
      *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
    }
    if (a2)
    {
      CGAffineTransformMakeScale(&v36, -1.0, 1.0);
      long long v14 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v37.CGFloat a = *(_OWORD *)a4;
      *(_OWORD *)&v37.CGFloat c = v14;
      *(_OWORD *)&v37.tCGFloat x = *(_OWORD *)(a4 + 32);
      CGAffineTransformConcat(&t1, &v37, &v36);
      long long v15 = *(_OWORD *)&t1.c;
      *(_OWORD *)a4 = *(_OWORD *)&t1.a;
      *(_OWORD *)(a4 + 16) = v15;
      *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
    }
    CGAffineTransformMakeTranslation(&v35, 0.5, 0.5);
    long long v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v37.CGFloat a = *(_OWORD *)a4;
    *(_OWORD *)&v37.CGFloat c = v16;
    *(_OWORD *)&v37.tCGFloat x = *(_OWORD *)(a4 + 32);
    CGAffineTransformConcat(&t1, &v37, &v35);
    long long v17 = *(_OWORD *)&t1.c;
    *(_OWORD *)a4 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a4 + 16) = v17;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
  }
  objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E4F54380], v28, v29, v30), "floatValue");
  float v19 = v18;
  uint64_t result = (CGAffineTransform *)[a3 objectForKeyedSubscript:*MEMORY[0x1E4F53268]];
  CGSize v21 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
  rect.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB28];
  rect.CGSize size = v21;
  if (result)
  {
    uint64_t result = (CGAffineTransform *)CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)result, &rect);
    if (result) {
      float v19 = 2.0 / (rect.size.width + rect.size.height) * v19;
    }
  }
  if (v19 > 1.0)
  {
    CGAffineTransformMakeTranslation(&v33, -0.5, -0.5);
    long long v22 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v37.CGFloat a = *(_OWORD *)a4;
    *(_OWORD *)&v37.CGFloat c = v22;
    *(_OWORD *)&v37.tCGFloat x = *(_OWORD *)(a4 + 32);
    CGAffineTransformConcat(&t1, &v37, &v33);
    long long v23 = *(_OWORD *)&t1.c;
    *(_OWORD *)a4 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a4 + 16) = v23;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
    CGAffineTransformMakeScale(&v32, v19, v19);
    long long v24 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v37.CGFloat a = *(_OWORD *)a4;
    *(_OWORD *)&v37.CGFloat c = v24;
    *(_OWORD *)&v37.tCGFloat x = *(_OWORD *)(a4 + 32);
    CGAffineTransformConcat(&t1, &v37, &v32);
    long long v25 = *(_OWORD *)&t1.c;
    *(_OWORD *)a4 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a4 + 16) = v25;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
    CGAffineTransformMakeTranslation(&v31, 0.5, 0.5);
    long long v26 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v37.CGFloat a = *(_OWORD *)a4;
    *(_OWORD *)&v37.CGFloat c = v26;
    *(_OWORD *)&v37.tCGFloat x = *(_OWORD *)(a4 + 32);
    uint64_t result = CGAffineTransformConcat(&t1, &v37, &v31);
    long long v27 = *(_OWORD *)&t1.c;
    *(_OWORD *)a4 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a4 + 16) = v27;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
  }
  return result;
}

void *BWUtilitiesWarnIfInputFormatsMismatch(void *result, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = (void *)[result count];
    if (result)
    {
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      uint64_t result = (void *)[v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (result)
      {
        uint64_t v4 = result;
        uint64_t v5 = *(void *)v9;
        do
        {
          int v6 = 0;
          do
          {
            if (*(void *)v9 != v5) {
              objc_enumerationMutation(v3);
            }
            int v7 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v6);
            if (v7 != a2) {
              objc_msgSend((id)objc_msgSend(v7, "format"), "isEqual:", objc_msgSend(a2, "format"));
            }
            int v6 = (char *)v6 + 1;
          }
          while (v4 != v6);
          uint64_t result = (void *)[v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
          uint64_t v4 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

uint64_t BWUtilitiesGetPortTypeForInputFromInputByPortTypes(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend((id)objc_msgSend(a2, "allKeys"), "count") == 1)
  {
    uint64_t v4 = (void *)[a2 allKeys];
    return [v4 objectAtIndexedSubscript:0];
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v6 = [a2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (!v6) {
      return 0;
    }
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v12;
LABEL_7:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v12 != v8) {
        objc_enumerationMutation(a2);
      }
      uint64_t v10 = *(void *)(*((void *)&v11 + 1) + 8 * v9);
      if ([a2 objectForKeyedSubscript:v10] == a1) {
        return v10;
      }
      if (v7 == ++v9)
      {
        uint64_t v7 = [a2 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v7) {
          goto LABEL_7;
        }
        return 0;
      }
    }
  }
}

uint64_t BWUtilitiesGetPortTypeForUnderlyingDeviceType(unsigned int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ([a2 count] == 1)
  {
    return [a2 objectAtIndexedSubscript:0];
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t v5 = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
LABEL_7:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v11 != v7) {
        objc_enumerationMutation(a2);
      }
      uint64_t v9 = *(void **)(*((void *)&v10 + 1) + 8 * v8);
      if (BWUtilitiesUnderlyingDeviceTypeFromPortType(v9, a1) == a1) {
        return (uint64_t)v9;
      }
      if (v6 == ++v8)
      {
        uint64_t v6 = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v6) {
          goto LABEL_7;
        }
        return 0;
      }
    }
  }
}

void BWUtilitiesApplyAVEStrength(__IOSurface *a1, void *a2)
{
  [a2 floatValue];
  if (v4 == 1.0)
  {
    IOSurfaceRemoveValue(a1, @"AVEStrength");
  }
  else
  {
    IOSurfaceSetValue(a1, @"AVEStrength", a2);
  }
}

uint64_t TemporalNoiseFilter_Global_420v_to_420v(int8x16_t **a1, uint64_t a2)
{
  statfs v2 = *a1;
  uint64_t v3 = (uint8x16_t *)a1[1];
  float v4 = (uint8x16_t *)a1[3];
  uint64_t v5 = a1[4];
  int8x16_t v6 = *a1[2];
  uint32x4_t v7 = 0uLL;
  if (a2)
  {
    unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFC0;
    do
    {
      int8x16_t v9 = *v2;
      int8x16_t v10 = v2[1];
      int8x16_t v11 = v2[2];
      int8x16_t v12 = v2[3];
      uint8x16_t v13 = *v3;
      uint8x16_t v14 = v3[1];
      uint8x16_t v15 = v3[2];
      uint8x16_t v16 = v3[3];
      v2 += 4;
      v3 += 4;
      int8x16_t v17 = (int8x16_t)vhaddq_u8(*v4, vabdq_u8((uint8x16_t)v9, v13));
      int8x16_t v18 = (int8x16_t)vhaddq_u8(v4[1], vabdq_u8((uint8x16_t)v10, v14));
      uint8x16_t *v4 = (uint8x16_t)v17;
      v4[1] = (uint8x16_t)v18;
      float v19 = v4 + 2;
      uint32x4_t v20 = vpadalq_u16(vpadalq_u16(v7, vpaddlq_u8((uint8x16_t)v17)), vpaddlq_u8((uint8x16_t)v18));
      uint8x16_t v21 = (uint8x16_t)vqtbl1q_s8(v6, v17);
      uint8x16_t v22 = (uint8x16_t)vqtbl1q_s8(v6, v18);
      *uint64_t v5 = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlsl_u8(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v13.i8), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v9.i8), (int16x8_t)vzip1q_s8((int8x16_t)0, v9)), (int16x8_t)vmlsl_high_u8(vmull_high_u8(v21, v13), v21, (uint8x16_t)v9), (int16x8_t)vzip2q_s8((int8x16_t)0, v9));
      v5[1] = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlsl_u8(vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v14.i8), *(uint8x8_t *)v22.i8, *(uint8x8_t *)v10.i8), (int16x8_t)vzip1q_s8((int8x16_t)0, v10)), (int16x8_t)vmlsl_high_u8(vmull_high_u8(v22, v14), v22, (uint8x16_t)v10), (int16x8_t)vzip2q_s8((int8x16_t)0, v10));
      long long v23 = v5 + 2;
      int8x16_t v24 = (int8x16_t)vhaddq_u8(*v19, vabdq_u8((uint8x16_t)v11, v15));
      int8x16_t v25 = (int8x16_t)vhaddq_u8(v19[1], vabdq_u8((uint8x16_t)v12, v16));
      *float v19 = (uint8x16_t)v24;
      v19[1] = (uint8x16_t)v25;
      float v4 = v19 + 2;
      uint32x4_t v7 = vpadalq_u16(vpadalq_u16(v20, vpaddlq_u8((uint8x16_t)v24)), vpaddlq_u8((uint8x16_t)v25));
      uint8x16_t v26 = (uint8x16_t)vqtbl1q_s8(v6, v24);
      uint8x16_t v27 = (uint8x16_t)vqtbl1q_s8(v6, v25);
      *long long v23 = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlsl_u8(vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v15.i8), *(uint8x8_t *)v26.i8, *(uint8x8_t *)v11.i8), (int16x8_t)vzip1q_s8((int8x16_t)0, v11)), (int16x8_t)vmlsl_high_u8(vmull_high_u8(v26, v15), v26, (uint8x16_t)v11), (int16x8_t)vzip2q_s8((int8x16_t)0, v11));
      v23[1] = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlsl_u8(vmull_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v16.i8), *(uint8x8_t *)v27.i8, *(uint8x8_t *)v12.i8), (int16x8_t)vzip1q_s8((int8x16_t)0, v12)), (int16x8_t)vmlsl_high_u8(vmull_high_u8(v27, v16), v27, (uint8x16_t)v12), (int16x8_t)vzip2q_s8((int8x16_t)0, v12));
      uint64_t v5 = v23 + 2;
      v8 -= 64;
    }
    while (v8);
    uint64_t v28 = a2 & 0x3F;
    if ((a2 & 0x3F) != 0)
    {
      do
      {
        int8x16_t v29 = *v2++;
        int8x16_t v30 = v29;
        uint8x16_t v31 = *v3++;
        int8x16_t v32 = (int8x16_t)vhaddq_u8(*v4, vabdq_u8((uint8x16_t)v30, v31));
        *v4++ = (uint8x16_t)v32;
        uint32x4_t v7 = vpadalq_u16(v7, vpaddlq_u8((uint8x16_t)v32));
        uint8x16_t v33 = (uint8x16_t)vqtbl1q_s8(v6, v32);
        *v5++ = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlsl_u8(vmull_u8(*(uint8x8_t *)v33.i8, *(uint8x8_t *)v31.i8), *(uint8x8_t *)v33.i8, *(uint8x8_t *)v30.i8), (int16x8_t)vzip1q_s8((int8x16_t)0, v30)), (int16x8_t)vmlsl_high_u8(vmull_high_u8(v33, v31), v33, (uint8x16_t)v30), (int16x8_t)vzip2q_s8((int8x16_t)0, v30));
        v28 -= 16;
      }
      while (v28);
    }
  }
  int64x2_t v34 = (int64x2_t)vpaddlq_u32(v7);
  return vpaddq_s64(v34, v34).u32[0];
}

uint64_t TemporalNoiseFilter_Fixed_420v_to_420v(uint8x16_t *a1, uint8x16_t *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = a3;
  if (a3)
  {
    uint8x16_t v6 = (uint8x16_t)vdupq_n_s8(a4);
    uint8x16_t v7 = (uint8x16_t)vdupq_n_s8(a5);
    v8.i64[0] = 0x303030303030303;
    v8.i64[1] = 0x303030303030303;
    v9.i64[0] = 0x202020202020202;
    v9.i64[1] = 0x202020202020202;
    v10.i64[0] = 0x55005500550055;
    v10.i64[1] = 0x55005500550055;
    do
    {
      uint8x16_t v11 = *a2++;
      uint8x16_t v12 = vabdq_u8(*a1, v11);
      int8x16_t v13 = (int8x16_t)vcgtq_u8(v12, v6);
      int8x16_t v14 = (int8x16_t)vcgtq_u8(v12, v7);
      *(int8x16_t *)a1 = vorrq_s8(vorrq_s8(vandq_s8(*(int8x16_t *)a1, v14), vbicq_s8(vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmovl_u8(*(uint8x8_t *)a1->i8), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v11.i8), 2uLL), (int16x8_t)vmlal_high_u8(vmovl_high_u8(*a1), v8, v11), 2uLL), v13)), vbicq_s8(vandq_s8(vrshrn_high_n_s16(vrshrn_n_s16(vmulq_s16((int16x8_t)vmlal_u8(
                                                  vmovl_u8(*(uint8x8_t *)v11.i8),
                                                  *(uint8x8_t *)a1->i8,
                                                  *(uint8x8_t *)v9.i8),
                                     v10),
                                   8uLL),
                                 vmulq_s16((int16x8_t)vmlal_high_u8(vmovl_high_u8(v11), *a1, v9), v10),
                                 8uLL),
                               v13),
                             v14));
      ++a1;
      v5 -= 16;
    }
    while (v5);
  }
  return 0;
}

void sub_1A5B0FAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
}

void *isn_addVariantToURL(void *result)
{
  if (result)
  {
    uint64_t v1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(result, "resourceSpecifier"), "stringByDeletingPathExtension"), "stringByAppendingString:", @"_overcapture"), "stringByAppendingPathExtension:", objc_msgSend((id)objc_msgSend(result, "resourceSpecifier"), "pathExtension"));
    statfs v2 = (void *)MEMORY[0x1E4F1CB10];
    return (void *)[v2 fileURLWithPath:v1];
  }
  return result;
}

uint64_t pbp_scanIOSurfacesCallback_0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1A5B1BA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5B1BD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5B1C2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5B1C3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DuetActivitySchedulerLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!DuetActivitySchedulerLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __DuetActivitySchedulerLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E5C261E0;
    uint64_t v4 = 0;
    DuetActivitySchedulerLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = DuetActivitySchedulerLibraryCore_frameworkLibrary;
  if (!DuetActivitySchedulerLibraryCore_frameworkLibrary) {
    DuetActivitySchedulerLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __DuetActivitySchedulerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  DuetActivitySchedulerLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

uint64_t BWAddStillImageProcessingMetadataToMetadata(void *a1, void *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F53538];
  uint64_t v5 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53538]));
  if (objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "outputWidth")
    && objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "outputHeight"))
  {
    double v6 = (double)objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "outputWidth");
    unsigned int v7 = objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "outputHeight");
    uint64_t v8 = [NSNumber numberWithDouble:v6 / (double)v7];
  }
  else
  {
    uint64_t v8 = 0;
  }
  [v5 setObject:v8 forKeyedSubscript:*MEMORY[0x1E4F535F8]];
  if (objc_msgSend((id)objc_msgSend(a1, "processingSettings"), "processIntelligentDistortionCorrection")) {
    [v5 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F53600]];
  }
  if ([v5 count]) {
    uint8x16_t v9 = v5;
  }
  else {
    uint8x16_t v9 = 0;
  }
  return [a2 setObject:v9 forKeyedSubscript:v4];
}

uint64_t BWSampleBufferHasDetectedFaces(const void *a1, int a2, int a3, int a4, int a5, int a6)
{
  uint8x16_t v12 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  int8x16_t v13 = (CGAffineTransform *)objc_msgSend((id)objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E4F53248]), "intValue");
  long long v41 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  long long v42 = *MEMORY[0x1E4F1DB20];
  long long v45 = *MEMORY[0x1E4F1DB20];
  long long v46 = v41;
  if (!FigCFDictionaryGetCGRectIfPresent())
  {
    long long v45 = 0uLL;
    __asm { FMOV            V0.2D, #1.0 }
    long long v46 = _Q0;
  }
  long long v43 = v42;
  long long v44 = v41;
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    if (!a2) {
      goto LABEL_15;
    }
  }
  else
  {
    long long v43 = 0uLL;
    __asm { FMOV            V0.2D, #1.0 }
    long long v44 = _Q0;
    if (!a2) {
      goto LABEL_15;
    }
  }
  AttachedInference = (void *)BWInferenceGetAttachedInference(a1, 802, @"VisionFaceDetectionObservations");
  uint64_t v20 = [AttachedInference count];
  if (v20) {
    _ZF = a6 == 0;
  }
  else {
    _ZF = 1;
  }
  if (_ZF)
  {
    if (v20) {
      return 1;
    }
  }
  else
  {
    char v22 = simu_faceObservationsContainFacesWithinNormalizedRect(AttachedInference, v13, *(CGFloat *)&v45, *((CGFloat *)&v45 + 1), *(CGFloat *)&v46, *((CGFloat *)&v46 + 1));
    if (v22) {
      return 1;
    }
  }
LABEL_15:
  if (a3)
  {
    long long v23 = (void *)BWInferenceGetAttachedInference(a1, 802, 0x1EFA6A0A0);
    uint64_t v24 = [v23 count];
    if (v24 && a6)
    {
      if (simu_faceObservationsContainFacesWithinNormalizedRect(v23, v13, *(CGFloat *)&v45, *((CGFloat *)&v45 + 1), *(CGFloat *)&v46, *((CGFloat *)&v46 + 1)))return 1; {
    }
      }
    else if (v24)
    {
      return 1;
    }
  }
  if (a4)
  {
    uint8x16_t v26 = (void *)BWInferenceGetAttachedInference(a1, 801, 0x1EFA6A0A0);
    uint64_t v27 = [v26 count];
    uint64_t result = v27 != 0;
    if (v27 && a6)
    {
      uint64_t result = simu_faceObservationsContainFacesWithinNormalizedRect(v26, v13, *(CGFloat *)&v45, *((CGFloat *)&v45 + 1), *(CGFloat *)&v46, *((CGFloat *)&v46 + 1));
      if (result) {
        return result;
      }
    }
    else if (v27)
    {
      return result;
    }
    if (!a5) {
      return result;
    }
  }
  else if (!a5)
  {
    return 0;
  }
  uint64_t v28 = objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DC8], v41, v42);
  int8x16_t v29 = (void *)[v28 objectForKeyedSubscript:*MEMORY[0x1E4F538C8]];
  int8x16_t v30 = (void *)[v29 objectForKeyedSubscript:*MEMORY[0x1E4F538F8]];
  if (v30)
  {
    uint8x16_t v31 = v30;
    uint64_t v32 = [v30 count];
    _ZF = v32 == 0;
    uint64_t result = v32 != 0;
    if (!_ZF && a6 != 0)
    {
      CGFloat v35 = *((double *)&v43 + 1);
      CGFloat v34 = *(double *)&v43;
      CGFloat v37 = *((double *)&v44 + 1);
      CGFloat v36 = *(double *)&v44;
      CGAffineTransform v38 = v31;
      return simu_detectedFacesArrayContainFacesWithinNormalizedRect(v38, v34, v35, v36, v37);
    }
  }
  else
  {
    long long v39 = (void *)[v12 objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]];
    uint64_t v40 = [v39 count];
    uint64_t result = v40 != 0;
    if (v40 && a6)
    {
      CGFloat v35 = *((double *)&v43 + 1);
      CGFloat v34 = *(double *)&v43;
      CGFloat v37 = *((double *)&v44 + 1);
      CGFloat v36 = *(double *)&v44;
      CGAffineTransform v38 = v39;
      return simu_detectedFacesArrayContainFacesWithinNormalizedRect(v38, v34, v35, v36, v37);
    }
  }
  return result;
}

uint64_t simu_faceObservationsContainFacesWithinNormalizedRect(void *a1, CGAffineTransform *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v10 = BWDetectedFacesInBufferCoordinatesFromVisionFaceObservations(a1, a2);
  uint64_t result = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = *(void *)v20;
    CGSize v16 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    CGPoint v17 = (CGPoint)*MEMORY[0x1E4F1DB20];
    while (2)
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        CFDictionaryRef v15 = *(const __CFDictionary **)(*((void *)&v19 + 1) + 8 * v14);
        rect.CGPoint origin = v17;
        rect.CGSize size = v16;
        if (CGRectMakeWithDictionaryRepresentation(v15, &rect))
        {
          v25.origin.CGFloat x = a3;
          v25.origin.CGFloat y = a4;
          v25.size.CGFloat width = a5;
          v25.size.CGFloat height = a6;
          if (CGRectIntersectsRect(rect, v25)) {
            return 1;
          }
        }
        ++v14;
      }
      while (v12 != v14);
      uint64_t result = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
      uint64_t v12 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t simu_detectedFacesArrayContainFacesWithinNormalizedRect(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = *(void *)v20;
    uint64_t v13 = *MEMORY[0x1E4F54180];
    CGSize v16 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    CGPoint v17 = (CGPoint)*MEMORY[0x1E4F1DB20];
    while (2)
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(a1);
        }
        CFDictionaryRef v15 = *(void **)(*((void *)&v19 + 1) + 8 * v14);
        rect.CGPoint origin = v17;
        rect.CGSize size = v16;
        if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v15, "objectForKeyedSubscript:", v13, v16, v17), &rect))
        {
          v25.origin.CGFloat x = a2;
          v25.origin.CGFloat y = a3;
          v25.size.CGFloat width = a4;
          v25.size.CGFloat height = a5;
          if (CGRectIntersectsRect(rect, v25)) {
            return 1;
          }
        }
        ++v14;
      }
      while (v11 != v14);
      uint64_t result = [a1 countByEnumeratingWithState:&v19 objects:v23 count:16];
      uint64_t v11 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t BWMetadataHasDetectedFaces(void *a1, int a2)
{
  long long v23 = *MEMORY[0x1E4F1DB20];
  long long v26 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  if (!FigCFDictionaryGetCGRectIfPresent())
  {
    long long v23 = 0uLL;
    __asm { FMOV            V0.2D, #1.0 }
    long long v26 = _Q0;
  }
  uint64_t v8 = objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DC8], v23, v26);
  uint8x16_t v9 = (void *)[v8 objectForKeyedSubscript:*MEMORY[0x1E4F538C8]];
  id v10 = (void *)[v9 objectForKeyedSubscript:*MEMORY[0x1E4F538F8]];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = [v10 count];
    _ZF = v12 == 0;
    uint64_t result = v12 != 0;
    _ZF = _ZF || a2 == 0;
    if (!_ZF)
    {
      CGFloat v16 = v25;
      CGFloat v15 = v24;
      CGFloat v18 = v28;
      CGFloat v17 = v27;
      long long v19 = v11;
      return simu_detectedFacesArrayContainFacesWithinNormalizedRect(v19, v15, v16, v17, v18);
    }
  }
  else
  {
    long long v20 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]];
    uint64_t v21 = [v20 count];
    _ZF = v21 == 0;
    uint64_t result = v21 != 0;
    if (!_ZF && a2 != 0)
    {
      CGFloat v16 = v25;
      CGFloat v15 = v24;
      CGFloat v18 = v28;
      CGFloat v17 = v27;
      long long v19 = v20;
      return simu_detectedFacesArrayContainFacesWithinNormalizedRect(v19, v15, v16, v17, v18);
    }
  }
  return result;
}

float BWSmartStylePersonMasksValidHint(void *a1)
{
  int HasDetectedFaces = BWMetadataHasDetectedFaces(a1, 1);
  int v3 = HasDetectedFaces | BWMetadataHasDetectedHumanBodies((uint64_t)a1);
  uint64_t v4 = *MEMORY[0x1E4F534E0];
  uint64_t v5 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F534E0]];
  uint64_t v6 = *MEMORY[0x1E4F55E60];
  if ([v5 objectForKeyedSubscript:*MEMORY[0x1E4F55E60]])
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v4), "objectForKeyedSubscript:", v6), "floatValue");
    float v8 = v7;
    float result = 1.0;
    if ((v3 & 1) == 0)
    {
      float result = -1.0;
      if (v8 >= 0.0) {
        return v8;
      }
    }
  }
  else
  {
    float result = -1.0;
    if (v3) {
      return 1.0;
    }
  }
  return result;
}

uint64_t BWMetadataHasDetectedHumanBodies(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    double FinalCropRect = FigCaptureMetadataUtilitiesGetFinalCropRect();
    CGFloat v4 = v3;
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    uint8x16_t v9 = (void *)[v1 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
    id v10 = (void *)[v9 objectForKeyedSubscript:*MEMORY[0x1E4F538C0]];
    uint64_t v11 = (void *)[v10 objectForKeyedSubscript:*MEMORY[0x1E4F538F8]];
    return simu_detectedFacesArrayContainFacesWithinNormalizedRect(v11, FinalCropRect, v4, v6, v8);
  }
  return result;
}

CFTypeRef BWSampleBufferHasDetectedHumanBodies(const void *a1)
{
  CFTypeRef result = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (result)
  {
    statfs v2 = (void *)result;
    double FinalCropRect = FigCaptureMetadataUtilitiesGetFinalCropRect();
    CGFloat v5 = v4;
    CGFloat v7 = v6;
    CGFloat v9 = v8;
    id v10 = (void *)[v2 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
    uint64_t v11 = (void *)[v10 objectForKeyedSubscript:*MEMORY[0x1E4F538C0]];
    uint64_t v12 = (void *)[v11 objectForKeyedSubscript:*MEMORY[0x1E4F538F8]];
    return (CFTypeRef)simu_detectedFacesArrayContainFacesWithinNormalizedRect(v12, FinalCropRect, v5, v7, v9);
  }
  return result;
}

uint64_t BWFaceDetectionObservationsFromISPDetectedFacesMetadata(void *a1)
{
  statfs v2 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53248]];
  if (!v2) {
    return 0;
  }
  double v3 = (CGAffineTransform *)[v2 intValue];
  double v4 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
  CGFloat v5 = (void *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F538C8]];
  double v6 = (void *)[v5 objectForKeyedSubscript:*MEMORY[0x1E4F538F8]];
  if (!v6) {
    double v6 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]];
  }
  if (![v6 count]) {
    return 0;
  }
  return BWVisionFaceObservationsFromISPDetectedFacesInBufferCoordinates(v6, v3);
}

uint64_t BWVisionFaceObservationsFromISPDetectedFacesInBufferCoordinates(void *a1, CGAffineTransform *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  double v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  memset(&v18, 0, sizeof(v18));
  BWISPBufferCoordinatesToVisionCoordinatesTransform(a2, &v18);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v5 = [a1 countByEnumeratingWithState:&v14 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v15;
    uint64_t v8 = *MEMORY[0x1E4F558D8];
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(a1);
        }
        id v10 = *(void **)(*((void *)&v14 + 1) + 8 * v9);
        memset(&rect, 0, sizeof(rect));
        CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)[v10 objectForKeyedSubscript:v8], &rect);
        CGAffineTransform v12 = v18;
        CGRect v21 = CGRectApplyAffineTransform(rect, &v12);
        objc_msgSend(v4, "addObject:", objc_msgSend((id)getVNFaceObservationClass(), "faceObservationWithRequestRevision:boundingBox:roll:yaw:pitch:", 0, 0, 0, 0, v21.origin.x, v21.origin.y, v21.size.width, v21.size.height));
        ++v9;
      }
      while (v6 != v9);
      uint64_t v6 = [a1 countByEnumeratingWithState:&v14 objects:v19 count:16];
    }
    while (v6);
  }
  return [MEMORY[0x1E4F1C978] arrayWithArray:v4];
}

CGAffineTransform *BWISPBufferCoordinatesToVisionCoordinatesTransform@<X0>(CGAffineTransform *a1@<X0>, CGAffineTransform *a2@<X8>)
{
  memset(&v8, 0, sizeof(v8));
  FigCaptureExifOrientationGetAffineTransform(a1, 0x100000001, (uint64_t)&v8);
  CGAffineTransformMakeTranslation(&t2, 0.0, -1.0);
  CGAffineTransform t1 = v8;
  CGAffineTransformConcat(&v7, &t1, &t2);
  CGAffineTransform v8 = v7;
  CGAffineTransformMakeScale(&v4, 1.0, -1.0);
  CGAffineTransform v7 = v8;
  return CGAffineTransformConcat(a2, &v7, &v4);
}

id BWDetectedFacesInBufferCoordinatesFromVisionFaceObservations(void *a1, CGAffineTransform *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CGAffineTransform v4 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v5 = [a1 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v17;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(a1);
        }
        uint64_t v9 = *(void **)(*((void *)&v16 + 1) + 8 * v8);
        memset(&v15, 0, sizeof(v15));
        BWISPBufferCoordinatesToVisionCoordinatesTransform(a2, &v14);
        CGAffineTransformInvert(&v15, &v14);
        [v9 boundingBox];
        CGAffineTransform v13 = v15;
        CGRect v23 = CGRectApplyAffineTransform(v22, &v13);
        CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v23);
        if (DictionaryRepresentation)
        {
          CFDictionaryRef v11 = DictionaryRepresentation;
          [v4 addObject:DictionaryRepresentation];
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [a1 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v6);
  }
  return (id)[v4 copy];
}

void BWUpdateLandmarksForStillImageCrop(const void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  *(double *)CGFloat v100 = a3;
  *(double *)&v100[8] = a4;
  *(double *)&v100[16] = a5;
  *(double *)&v100[24] = a6;
  BOOL IsUnityRect = FigCaptureIsUnityRect(a3, a4, a5, a6);
  if ((a2 - 803) >= 0xFFFFFFFE && !IsUnityRect)
  {
    uint64_t v9 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v9 && (id v10 = (void *)[v9 objectForKeyedSubscript:*MEMORY[0x1E4F53248]]) != 0)
    {
      memset(&v111, 0, sizeof(v111));
      BWISPBufferCoordinatesToVisionCoordinatesTransform((CGAffineTransform *)[v10 intValue], &v111);
      CGAffineTransform v109 = v111;
      memset(&v110, 0, sizeof(v110));
      CGAffineTransformInvert(&v110, &v109);
      CMAttachmentBearerRef target = a1;
      unsigned int v84 = a2;
      uint64_t v83 = (void *)CMGetAttachment(a1, @"Inferences", 0);
      uint64_t v86 = objc_msgSend(v83, "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", a2));
      CFDictionaryRef v11 = objc_msgSend((id)objc_msgSend(v86, "inferences"), "objectForKeyedSubscript:");
      if (![v11 count]) {
        CFDictionaryRef v11 = objc_msgSend((id)objc_msgSend(v86, "inferences"), "objectForKeyedSubscript:", @"VisionFaceDetectionObservations");
      }
      id v89 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v11, "count"));
      long long v105 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      uint64_t v12 = [v11 countByEnumeratingWithState:&v105 objects:v113 count:16];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)v106;
        uint64_t v87 = *(void *)v106;
        uint64_t v88 = v11;
        do
        {
          uint64_t v15 = 0;
          uint64_t v90 = v13;
          do
          {
            if (*(void *)v106 != v14) {
              objc_enumerationMutation(v11);
            }
            long long v16 = *(void **)(*((void *)&v105 + 1) + 8 * v15);
            [v16 boundingBox];
            CGAffineTransform v109 = v110;
            CGRect v116 = CGRectApplyAffineTransform(v115, &v109);
            double x = v116.origin.x;
            double y = v116.origin.y;
            double width = v116.size.width;
            double height = v116.size.height;
            [v16 alignedBoundingBoxAsCGRect];
            CGAffineTransform v109 = v110;
            CGRect v118 = CGRectApplyAffineTransform(v117, &v109);
            double v21 = v118.origin.x;
            double v22 = v118.origin.y;
            double v23 = v118.size.width;
            double v24 = v118.size.height;
            v126.origin.double x = x;
            v126.origin.double y = y;
            v126.size.double width = width;
            v126.size.double height = height;
            if (CGRectContainsRect(*(CGRect *)v100, v126))
            {
              double v25 = FigCaptureTransformRectToCoordinateSpaceOfRect(x, y, width, height, *(double *)v100, *(double *)&v100[8], *(double *)&v100[16]);
              CGFloat v96 = v26;
              CGFloat v98 = v25;
              CGFloat v92 = v28;
              CGFloat v94 = v27;
              double v29 = FigCaptureTransformRectToCoordinateSpaceOfRect(v21, v22, v23, v24, *(double *)v100, *(double *)&v100[8], *(double *)&v100[16]);
              CGFloat v31 = v30;
              CGFloat v33 = v32;
              CGFloat v35 = v34;
              CGAffineTransform v109 = v111;
              v119.origin.double y = v96;
              v119.origin.double x = v98;
              v119.size.double height = v92;
              v119.size.double width = v94;
              CGRect v120 = CGRectApplyAffineTransform(v119, &v109);
              double v97 = v120.origin.y;
              double v99 = v120.origin.x;
              double v93 = v120.size.height;
              double v95 = v120.size.width;
              CGAffineTransform v109 = v111;
              v120.origin.double x = v29;
              v120.origin.double y = v31;
              v120.size.double width = v33;
              v120.size.double height = v35;
              CGRect v121 = CGRectApplyAffineTransform(v120, &v109);
              double v36 = v121.origin.x;
              double v37 = v121.origin.y;
              double v38 = v121.size.width;
              double v39 = v121.size.height;
              int v40 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "faceAttributes"), "eyesCategory"), "label"), "identifier"), "isEqual:", getVNFaceAttributeEyesClosed());
              char v41 = v40;
              unsigned int v42 = 0;
              if (v40)
              {
                objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "faceAttributes"), "eyesCategory"), "label"), "confidence");
                unsigned int v42 = v43;
              }
              VNFaceObservationClass = (void *)getVNFaceObservationClass();
              uint64_t v45 = [v16 requestRevision];
              uint64_t v91 = [v16 roll];
              uint64_t v46 = [v16 yaw];
              uint64_t v47 = [v16 pitch];
              uint64_t v48 = [v16 isBoundingBoxAligned];
              uint64_t v49 = [v16 landmarks];
              uint64_t v50 = [v16 landmarks65];
              [v16 landmarkScore];
              int v52 = v51;
              [v16 faceOrientationIndex];
              unsigned int v54 = v53;
              [v16 faceJunkinessIndex];
              LODWORD(v82) = v55;
              BYTE4(v81) = v41;
              LODWORD(v81) = v52;
              objc_msgSend(v89, "addObject:", objc_msgSend(VNFaceObservationClass, "faceObservationWithRequestRevision:boundingBox:roll:yaw:pitch:isBoundingBoxAligned:alignedBoundingBox:landmarks:landmarks65:landmarkScore:isBlinking:blinkScore:faceOrientationIndex:faceJunkinessIndex:", v45, v91, v46, v47, v48, v49, v99, v97, v95, v93, v36, v37, v38,
                  v39,
                  v50,
                  v81,
                  __PAIR64__(v54, v42),
                  v82));
              uint64_t v14 = v87;
              CFDictionaryRef v11 = v88;
              uint64_t v13 = v90;
            }
            ++v15;
          }
          while (v13 != v15);
          uint64_t v13 = [v11 countByEnumeratingWithState:&v105 objects:v113 count:16];
        }
        while (v13);
      }
      uint64_t v56 = objc_msgSend((id)objc_msgSend(v86, "inferences"), "objectForKeyedSubscript:", 0x1EFA6A0C0);
      id v57 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v56, "count"));
      long long v101 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      uint64_t v58 = [v56 countByEnumeratingWithState:&v101 objects:v112 count:16];
      if (v58)
      {
        uint64_t v59 = v58;
        uint64_t v60 = *(void *)v102;
        do
        {
          for (uint64_t i = 0; i != v59; ++i)
          {
            if (*(void *)v102 != v60) {
              objc_enumerationMutation(v56);
            }
            uint64_t v62 = *(void **)(*((void *)&v101 + 1) + 8 * i);
            [v62 boundingBox];
            CGAffineTransform v109 = v110;
            CGRect v123 = CGRectApplyAffineTransform(v122, &v109);
            double v63 = v123.origin.x;
            double v64 = v123.origin.y;
            double v65 = v123.size.width;
            double v66 = v123.size.height;
            if (CGRectContainsRect(*(CGRect *)v100, v123))
            {
              v124.origin.double x = FigCaptureTransformRectToCoordinateSpaceOfRect(v63, v64, v65, v66, *(double *)v100, *(double *)&v100[8], *(double *)&v100[16]);
              CGAffineTransform v109 = v111;
              CGRect v125 = CGRectApplyAffineTransform(v124, &v109);
              double v67 = v125.origin.x;
              double v68 = v125.origin.y;
              double v69 = v125.size.width;
              double v70 = v125.size.height;
              id v71 = objc_alloc((Class)getVNRecognizedObjectObservationClass());
              uint64_t v72 = [v62 requestRevision];
              [v62 confidence];
              int v74 = v73;
              uint64_t v75 = [v62 labels];
              LODWORD(v76) = v74;
              uint64_t v77 = objc_msgSend(v71, "initWithRequestRevision:boundingBox:confidence:labels:", v72, v75, v67, v68, v69, v70, v76);
              [v57 addObject:v77];
            }
          }
          uint64_t v59 = [v56 countByEnumeratingWithState:&v101 objects:v112 count:16];
        }
        while (v59);
      }
      id v78 = (id)objc_msgSend((id)objc_msgSend(v86, "inferences"), "mutableCopy");
      [v78 setObject:v89 forKeyedSubscript:@"VisionFaceDetectionObservations"];
      [v78 setObject:v89 forKeyedSubscript:0x1EFA6A0A0];
      [v78 setObject:v57 forKeyedSubscript:0x1EFA6A0C0];
      double v79 = [[BWInferenceResult alloc] initWithResult:v86 replacementInferences:v78 replacementPreventionReason:0];
      id v80 = (id)[v83 mutableCopy];
      objc_msgSend(v80, "setObject:forKeyedSubscript:", v79, objc_msgSend(NSNumber, "numberWithInt:", v84));
      CMSetAttachment(target, @"Inferences", v80, 1u);
    }
    else
    {
      FigDebugAssert3();
    }
  }
}

uint64_t BWCreateSushiRawDNGDictionary(uint64_t a1, int a2, uint64_t a3, void *a4, void *a5, void *a6, int a7, int a8, void *a9, void *a10, int a11)
{
  uint64_t v226 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t result = 0;
  unint64_t v210 = a6;
  if (!a6) {
    return result;
  }
  if (!a5) {
    return result;
  }
  if (!a4) {
    return result;
  }
  uint64_t v17 = a1;
  if (!a1) {
    return result;
  }
  int v18 = a3;
  if (!HIDWORD(a1)) {
    return result;
  }
  if (!a3) {
    return result;
  }
  if (!HIDWORD(a3)) {
    return result;
  }
  v211 = a5;
  if (!a9) {
    return result;
  }
  long long v19 = a4;
  if ((FigCapturePixelFormatIsBayerRaw(a2) & 1) == 0) {
    goto LABEL_118;
  }
  uint64_t v20 = (void *)[a4 objectForKeyedSubscript:*MEMORY[0x1E4F531E8]];
  if (v20)
  {
    [v20 floatValue];
    if (v21 != 1.0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
  }
  int v22 = objc_msgSend((id)objc_msgSend(a9, "objectForKeyedSubscript:", @"SushiRawLensShadingCorrectionType"), "intValue");
  double v23 = *MEMORY[0x1E4F1DAD8];
  double v24 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  int v212 = v22;
  if ((a8 & 1) == 0 && v22 != 1)
  {
    double v215 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    double v216 = *MEMORY[0x1E4F1DAD8];
    float v209 = 0.0;
    goto LABEL_41;
  }
  objc_msgSend((id)objc_msgSend(a10, "objectForKeyedSubscript:", *MEMORY[0x1E4F52D28]), "floatValue");
  if (v25 < 0.0) {
    goto LABEL_118;
  }
  float v26 = (float)a11;
  if (!a11) {
    float v26 = 1.0;
  }
  float v27 = v26 * v25;
  double v28 = (void *)[a4 objectForKeyedSubscript:*MEMORY[0x1E4F53F78]];
  if (!v28) {
    goto LABEL_40;
  }
  double v29 = v28;
  if (![v28 length]) {
    goto LABEL_40;
  }
  double v30 = (_DWORD *)[v29 bytes];
  if ((*v30 - 1) > 1) {
    goto LABEL_40;
  }
  CGFloat v31 = v30;
  CMTimeMakeFromDictionary((CMTime *)time, (CFDictionaryRef)[a4 objectForKeyedSubscript:*MEMORY[0x1E4F530C0]]);
  double Seconds = CMTimeGetSeconds((CMTime *)time);
  objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E4F53E48]), "doubleValue");
  double v34 = v33;
  objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E4F53EE8]), "doubleValue");
  double v36 = v23;
  double v37 = v23;
  double v38 = v24;
  if ((int)v31[1] < 1) {
    goto LABEL_39;
  }
  uint64_t v39 = 0;
  int v40 = 0;
  double v41 = Seconds - v34;
  double v42 = Seconds + v35 / 1000000.0;
  unsigned int v43 = v31 + 5;
  double v44 = v24;
  double v38 = v24;
  double v45 = v36;
  double v37 = v36;
  do
  {
    if (*v31 == 1)
    {
      uint64_t v48 = (uint64_t)&v31[6 * v39 + 2];
      uint64_t v46 = (int *)(v48 + 8);
      uint64_t v47 = (int *)(v48 + 12);
      goto LABEL_27;
    }
    if (!*v31)
    {
      uint64_t v46 = v43 - 1;
      uint64_t v47 = v43;
LABEL_27:
      int v49 = *v46;
      int v50 = *v47;
      goto LABEL_29;
    }
    int v49 = 0;
    int v50 = 0;
LABEL_29:
    int64_t v51 = FigHostTimeToNanoseconds();
    CMTimeMake(&v224, v51, 1000000000);
    double v52 = CMTimeGetSeconds(&v224);
    if (v52 >= v41 && v52 < v42)
    {
      double v37 = v37 + (double)v49;
      double v38 = v38 + (double)v50;
      ++v40;
    }
    ++v39;
    v43 += 4;
  }
  while (v39 < (int)v31[1]);
  if (v40)
  {
    double v54 = (float)((float)(v27 * (float)v40) * 256.0);
    double v37 = v37 / v54;
    double v38 = v38 / v54;
  }
  uint64_t v17 = a1;
  double v36 = v45;
  double v24 = v44;
  int v18 = a3;
LABEL_39:
  double v23 = v36 + v37;
  double v24 = v24 + v38;
LABEL_40:
  double v215 = v24;
  double v216 = v23;
  float v209 = v27;
LABEL_41:
  uint64_t v55 = MEMORY[0x1E4F1DB20];
  CGFloat v57 = *MEMORY[0x1E4F1DB20];
  double v56 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double v59 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat v58 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  CFDictionaryRef v60 = (const __CFDictionary *)[a4 objectForKeyedSubscript:*MEMORY[0x1E4F53268]];
  double v61 = v58;
  double v62 = v59;
  CGFloat v63 = v56;
  CGFloat v64 = v57;
  CGFloat v199 = v57;
  CGFloat v201 = v58;
  CGFloat v65 = v59;
  double v197 = v56;
  if (!v60) {
    goto LABEL_62;
  }
  CGSize v66 = *(CGSize *)(v55 + 16);
  rect.CGPoint origin = *(CGPoint *)v55;
  rect.CGSize size = v66;
  if (CGRectMakeWithDictionaryRepresentation(v60, &rect))
  {
    CGFloat x = rect.origin.x;
    CGFloat y = rect.origin.y;
    CGFloat width = rect.size.width;
    CGFloat height = rect.size.height;
  }
  else
  {
    rect.origin.CGFloat x = 0.0;
    rect.origin.CGFloat y = 0.0;
    __asm { FMOV            V0.2D, #1.0 }
    rect.CGSize size = _Q0;
    CGFloat y = 0.0;
    CGFloat height = 1.0;
    CGFloat width = 1.0;
    CGFloat x = 0.0;
  }
  v234.origin.CGFloat x = 0.0;
  v234.origin.CGFloat y = 0.0;
  v234.size.CGFloat width = 1.0;
  v234.size.CGFloat height = 1.0;
  BOOL v75 = CGRectEqualToRect(*(CGRect *)&x, v234);
  BOOL v76 = v75;
  int v77 = a8;
  if (!a8)
  {
    double v98 = v57;
    double v61 = v58;
    double v207 = v59;
    if (!v75) {
      goto LABEL_52;
    }
LABEL_60:
    double v100 = v98;
    CGFloat v63 = v56;
    CGFloat v65 = v59;
    double v56 = v197;
LABEL_61:
    double v62 = v207;
    CGFloat v64 = v100;
LABEL_62:
    double v195 = v59;
    CGFloat v101 = v56;
    CGFloat v102 = v62;
    long long v103 = objc_msgSend(a9, "objectForKeyedSubscript:", @"SushiRawNoiseProfile", v187, v188);
    double v204 = v57;
    double v205 = v101;
    v231.origin.CGFloat x = v57;
    v231.origin.CGFloat y = v101;
    CGFloat v206 = v65;
    CGFloat v208 = v58;
    v231.size.CGFloat width = v65;
    v231.size.CGFloat height = v58;
    IsEmptCGFloat y = CGRectIsEmpty(v231);
    double v214 = v64;
    v232.origin.CGFloat x = v64;
    v232.origin.CGFloat y = v63;
    v232.size.CGFloat width = v102;
    CGFloat v217 = v61;
    v232.size.CGFloat height = v61;
    BOOL v105 = CGRectIsEmpty(v232);
    BOOL v106 = v105;
    if (!IsEmpty && v105)
    {
      long long v107 = 0;
      uint64_t v109 = (uint64_t)v210;
      long long v108 = a5;
      float v110 = v209;
      CGFloat v111 = v102;
      CGFloat v112 = v63;
      CGFloat v113 = v214;
      double v114 = v215;
      double v115 = v216;
      goto LABEL_107;
    }
    uint64_t v109 = (uint64_t)v210;
    double v114 = v215;
    double v115 = v216;
    if (FigCaptureSushiRawDNGDictionaryCreatedInGraph())
    {
      CGRect v116 = (void *)[v19 objectForKeyedSubscript:*MEMORY[0x1E4F54168]];
      CGRect v117 = (void *)[v19 objectForKeyedSubscript:*MEMORY[0x1E4F54160]];
      CGSize v118 = *(CGSize *)(v55 + 16);
      time[0].CGPoint origin = *(CGPoint *)v55;
      time[0].CGSize size = v118;
      double v119 = v64;
      double v120 = v63;
      CGFloat v111 = v102;
      double v121 = v102;
      double v122 = v217;
      if (v106)
      {
        double v120 = v197;
        double v119 = v199;
        double v121 = v195;
        double v122 = v201;
        if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)[v19 objectForKeyedSubscript:*MEMORY[0x1E4F54358]], time))
        {
          double v119 = time[0].origin.x;
          double v120 = time[0].origin.y;
          double v121 = time[0].size.width;
          double v122 = time[0].size.height;
        }
      }
      v233.origin.CGFloat x = v119;
      v233.origin.CGFloat y = v120;
      v233.size.CGFloat width = v121;
      v233.size.CGFloat height = v122;
      long long v108 = a5;
      if (CGRectIsNull(v233)) {
        return 0;
      }
      if (v212 != 1)
      {
        double v123 = v122;
        double v114 = v215;
        double v115 = v216;
        CGFloat v112 = v63;
        if (!v212)
        {
          if ([v210 count] != 7 || !v116 || !v117) {
            goto LABEL_118;
          }
          if (v121 != *MEMORY[0x1E4F1DB30] || v123 != *(double *)(MEMORY[0x1E4F1DB30] + 8))
          {
            float v124 = sqrt(v123 * v123 + v121 * v121) * 0.5;
            [v116 floatValue];
            float v126 = v125;
            [v116 floatValue];
            float v128 = v127;
            [v117 floatValue];
            float v130 = v129;
            [v117 floatValue];
            float v132 = v124 / (float)(sqrtf((float)(v130 * v131) + (float)(v126 * v128)) * 0.5);
            double v133 = NSNumber;
            objc_msgSend((id)objc_msgSend(v210, "objectAtIndexedSubscript:", 0), "floatValue");
            *(float *)&double v135 = v134 * (float)(v132 * v132);
            v223[0] = [v133 numberWithFloat:v135];
            uint64_t v136 = NSNumber;
            float v137 = powf(v132, 4.0);
            objc_msgSend((id)objc_msgSend(v210, "objectAtIndexedSubscript:", 1), "floatValue");
            *(float *)&double v139 = v137 * v138;
            v223[1] = [v136 numberWithFloat:v139];
            uint64_t v140 = NSNumber;
            float v141 = powf(v132, 6.0);
            objc_msgSend((id)objc_msgSend(v210, "objectAtIndexedSubscript:", 2), "floatValue");
            *(float *)&double v143 = v141 * v142;
            v223[2] = [v140 numberWithFloat:v143];
            uint64_t v144 = NSNumber;
            float v145 = powf(v132, 8.0);
            objc_msgSend((id)objc_msgSend(v210, "objectAtIndexedSubscript:", 3), "floatValue");
            *(float *)&double v147 = v145 * v146;
            double v115 = v216;
            v223[3] = [v144 numberWithFloat:v147];
            uint64_t v148 = NSNumber;
            float v149 = powf(v132, 10.0);
            objc_msgSend((id)objc_msgSend(v210, "objectAtIndexedSubscript:", 4), "floatValue");
            *(float *)&double v151 = v149 * v150;
            double v114 = v215;
            v223[4] = [v148 numberWithFloat:v151];
            v223[5] = [v210 objectAtIndexedSubscript:5];
            v223[6] = [v210 objectAtIndexedSubscript:6];
            uint64_t v109 = [MEMORY[0x1E4F1C978] arrayWithObjects:v223 count:7];
          }
        }
        long long v107 = 0;
        goto LABEL_106;
      }
      long long v107 = (void *)[a10 objectForKeyedSubscript:*MEMORY[0x1E4F52CF0]];
      uint64_t v153 = (_DWORD *)[v107 bytes];
      CGFloat v112 = v63;
      if (v107)
      {
        v154 = v153;
        if (*v153 == 2)
        {
          uint64_t v202 = v103;
          uint64_t v189 = v153[8];
          uint64_t v190 = v153[9];
          uint64_t v191 = v153[10];
          uint64_t v192 = v153[11];
          unsigned int v155 = (v119 + (double)(2 * v153[2] + 196) - v216);
          unsigned int v156 = (v120 + (double)(2 * v153[3] + 196) - v215);
          unsigned int v157 = 2 * v153[4];
          unsigned int v158 = 2 * v153[5];
          unsigned int v159 = v155 / v157;
          unsigned int v193 = v155;
          unsigned int v160 = v156 / v158;
          int v161 = v153[7];
          if (v153[6] - 1 >= ((v121 + (double)v155 + (double)v157 + -1.0) / (double)v157)) {
            unsigned int v162 = ((v121 + (double)v155 + (double)v157 + -1.0) / (double)v157);
          }
          else {
            unsigned int v162 = v153[6] - 1;
          }
          if (v161 - 1 >= ((v122 + (double)v156 + (double)v158 + -1.0) / (double)v158)) {
            unsigned int v163 = ((v122 + (double)v156 + (double)v158 + -1.0) / (double)v158);
          }
          else {
            unsigned int v163 = v161 - 1;
          }
          unsigned int v198 = v162 - v159 + 1;
          unsigned int v196 = v163 - v160 + 1;
          uint64_t v200 = (void *)[MEMORY[0x1E4F1CA58] dataWithLength:12 * v196 * v198];
          uint64_t v164 = [v200 mutableBytes];
          float v110 = v209;
          if (v163 >= v160)
          {
            unsigned int v165 = 0;
            uint64_t v166 = (uint64_t)&v154[v190 + 12];
            unsigned int v167 = v156 / v158;
            uint64_t v168 = (uint64_t)&v154[v192 + 12];
            do
            {
              if (v162 >= v159)
              {
                int v169 = v154[6] * v167;
                unsigned int v170 = v159;
                do
                {
                  unsigned int v171 = v169 + v170;
                  float v172 = *(float *)&v154[v189 + 12 + v169 + v170];
                  float v173 = *(float *)(v166 + 4 * (v169 + v170));
                  float v174 = *(float *)&v154[v191 + 12 + v169 + v170];
                  if (v174 <= *(float *)(v168 + 4 * (v169 + v170))) {
                    float v174 = *(float *)(v168 + 4 * v171);
                  }
                  if (v173 <= v174)
                  {
                    if (v172 <= v174) {
                      float v172 = v174;
                    }
                  }
                  else if (v172 <= v173)
                  {
                    float v172 = *(float *)(v166 + 4 * v171);
                  }
                  *(float *)(v164 + 4 * v165) = v172;
                  *(float *)(v164 + 4 * (v165 + 1)) = v172;
                  unsigned int v175 = v165 + 2;
                  v165 += 3;
                  *(float *)(v164 + 4 * v175) = v172;
                  ++v170;
                }
                while (v170 <= v162);
              }
              ++v167;
            }
            while (v167 <= v163);
          }
          float v176 = (double)(int)(v159 * v157 - v193) / v121;
          float v177 = (double)(int)(v160 * v158 - v156) / v122;
          float v194 = v177;
          v222[0] = &unk_1EFAFEDC0;
          v221[0] = @"top";
          v221[1] = @"bottom";
          v222[1] = [NSNumber numberWithDouble:v122];
          v222[2] = &unk_1EFAFEDC0;
          v221[2] = @"left";
          v221[3] = @"right";
          v222[3] = [NSNumber numberWithDouble:v121];
          v222[4] = &unk_1EFAFEDC0;
          v221[4] = @"plane";
          v221[5] = @"planes";
          v222[5] = &unk_1EFAFEDD8;
          v222[6] = &unk_1EFAFEDF0;
          v221[6] = @"rowPitch";
          v221[7] = @"colPitch";
          v222[7] = &unk_1EFAFEDF0;
          v221[8] = @"mapsPointsV";
          v222[8] = [NSNumber numberWithUnsignedInt:v196];
          v221[9] = @"mapsPointsH";
          v222[9] = [NSNumber numberWithUnsignedInt:v198];
          v221[10] = @"mapsSpacingV";
          float v179 = (double)v158 / v122;
          *(float *)&double v180 = v179;
          v222[10] = [NSNumber numberWithFloat:v180];
          v221[11] = @"mapsSpacingH";
          float v178 = (double)v157 / v121;
          *(float *)&double v181 = v178;
          v222[11] = [NSNumber numberWithFloat:v181];
          v221[12] = @"mapOriginV";
          *(float *)&double v182 = v194;
          v222[12] = [NSNumber numberWithFloat:v182];
          v221[13] = @"mapOriginH";
          *(float *)&double v183 = v176;
          v222[13] = [NSNumber numberWithFloat:v183];
          v222[14] = &unk_1EFAFEDD8;
          v221[14] = @"mapPlanes";
          v221[15] = @"gainData";
          v222[15] = v200;
          long long v107 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v222 forKeys:v221 count:16];
          uint64_t v109 = (uint64_t)v210;
          long long v108 = v211;
          double v114 = v215;
          double v115 = v216;
          CGFloat v113 = v214;
          long long v103 = v202;
          goto LABEL_107;
        }
        long long v107 = 0;
      }
      long long v108 = v211;
      double v114 = v215;
      double v115 = v216;
LABEL_106:
      CGFloat v113 = v214;
      float v110 = v209;
      goto LABEL_107;
    }
    uint64_t v152 = [a9 objectForKeyedSubscript:@"CroppedSushiRawLensShadingCorrectionCoefficients"];
    long long v107 = 0;
    if (v152) {
      uint64_t v109 = v152;
    }
    long long v108 = a5;
    float v110 = v209;
    CGFloat v111 = v102;
    CGFloat v112 = v63;
    CGFloat v113 = v214;
LABEL_107:
    if (a8) {
      uint64_t v184 = (void *)[a10 objectForKeyedSubscript:*MEMORY[0x1E4F52CE8]];
    }
    else {
      uint64_t v184 = 0;
    }
    if (v212) {
      uint64_t v185 = 0;
    }
    else {
      uint64_t v185 = (void *)v109;
    }
    [a10 objectForKeyedSubscript:*MEMORY[0x1E4F52C98]];
    uint64_t result = simu_createDNGDictionary(1, v19, v108, v185, v103, a1, v184, (uint64_t)v107, v113, v112, v111, v217, v204, v205, v206, v208, v110, v115, v114);
    if (!result) {
      goto LABEL_118;
    }
    return result;
  }
  double v78 = FigCaptureMetadataUtilitiesNormalizedRectEnforcedWithinValidRegionAfterGDC((uint64_t)a10, a4, v17, 0.0, 0.0, 1.0, 1.0);
  double v207 = (double)v18;
  FigCaptureMetadataUtilitiesDenormalizeCropRect(v78, v79, v80, v81);
  float v82 = (double)v18 / (double)SHIDWORD(a3);
  double v87 = FigCaptureMetadataUtilitiesRectByCroppingRectToAspectRatio(v83, v84, v85, v86, v82);
  FigCaptureMetadataUtilitiesNormalizeCropRect(v87, v88, v89, v90);
  v227.origin.CGFloat x = FigCaptureMetadataUtilitiesScaleRect(v91, v92, v93, v94, 1.11);
  v235.origin.CGFloat x = 0.0;
  v235.origin.CGFloat y = 0.0;
  v235.size.CGFloat width = 1.0;
  v235.size.CGFloat height = 1.0;
  CGRect v228 = CGRectIntersection(v227, v235);
  BOOL v95 = CGRectContainsRect(v228, rect);
  BOOL v96 = v95;
  if (!dword_1E96B6B28)
  {
    if (v95) {
      goto LABEL_59;
    }
LABEL_51:
    int v77 = 0;
    double v98 = v57;
    double v61 = v58;
    double v207 = v59;
    int v18 = a3;
    if (v76) {
      goto LABEL_60;
    }
    goto LABEL_52;
  }
  double v97 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (!v96) {
    goto LABEL_51;
  }
LABEL_59:
  int v18 = a3;
  double v98 = (double)((int)v17 - (int)a3) * 0.5;
  double v56 = (double)(HIDWORD(a1) - HIDWORD(a3)) * 0.5;
  int v77 = 1;
  double v61 = (double)SHIDWORD(a3);
  if (v76) {
    goto LABEL_60;
  }
LABEL_52:
  if ((v77 | a7) == 1)
  {
    FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)v17, v17 >> 32, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, (double)v18 / (double)SHIDWORD(a3));
    CGFloat v57 = v229.origin.x;
    CGFloat v99 = v229.origin.y;
    CGFloat v65 = v229.size.width;
    CGFloat v58 = v229.size.height;
    if (CGRectIsNull(v229))
    {
      uint64_t v188 = v11;
      LODWORD(v187) = 0;
      FigDebugAssert3();
    }
    v230.origin.CGFloat x = v98;
    v230.origin.CGFloat y = v56;
    v230.size.CGFloat width = v207;
    v230.size.CGFloat height = v61;
    if (CGRectIsNull(v230))
    {
      double v61 = v58;
      double v207 = v65;
      double v56 = v99;
      CGFloat v63 = v99;
      double v100 = v57;
    }
    else
    {
      double v100 = v98;
      CGFloat v63 = v56;
      double v56 = v99;
    }
    goto LABEL_61;
  }
LABEL_118:
  FigDebugAssert3();
  return 0;
}

uint64_t simu_createDNGDictionary(int a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, CGFloat a15, CGFloat a16, float a17, double a18, double a19)
{
  v147[3] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    goto LABEL_103;
  }
  if (simu_createDNGDictionary_sMobileGestaltOnceToken != -1)
  {
    double v121 = a14;
    double v122 = a13;
    dispatch_once(&simu_createDNGDictionary_sMobileGestaltOnceToken, &__block_literal_global_38);
    a13 = v122;
    a14 = v121;
  }
  if (!simu_createDNGDictionary_sProductTypeString) {
    goto LABEL_103;
  }
  CGFloat rect = a13;
  CGFloat rect_16 = a14;
  uint64_t v130 = a6;
  CGFloat v31 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
  id v32 = v31;
  if (!v31) {
    goto LABEL_104;
  }
  if ([v31 isEqualToString:*MEMORY[0x1E4F52DF8]])
  {
    double v33 = @"front camera";
    goto LABEL_16;
  }
  if ([v32 isEqualToString:*MEMORY[0x1E4F52E10]])
  {
    double v33 = @"front ultra wide camera";
    goto LABEL_16;
  }
  if ([v32 isEqualToString:*MEMORY[0x1E4F52DD8]])
  {
    double v33 = @"back camera";
    goto LABEL_16;
  }
  if ([v32 isEqualToString:*MEMORY[0x1E4F52DF0]])
  {
    double v33 = @"back telephoto camera";
    goto LABEL_16;
  }
  if (![v32 isEqualToString:*MEMORY[0x1E4F52DE8]])
  {
LABEL_103:
    id v32 = 0;
    goto LABEL_104;
  }
  double v33 = @"back ultra wide camera";
LABEL_16:
  id v32 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v34 = [NSString stringWithFormat:@"%@ %@", simu_createDNGDictionary_sProductTypeString, v33];
  [v32 setObject:v34 forKeyedSubscript:*MEMORY[0x1E4F2F680]];
  if (a1 == 2)
  {
    [v32 setObject:&unk_1EFAFEE38 forKeyedSubscript:*MEMORY[0x1E4F2F6A0]];
    [v32 setObject:&unk_1EFAFEE50 forKeyedSubscript:*MEMORY[0x1E4F2F5D8]];
    double v36 = &unk_1EFB058D8;
    double v37 = (void *)MEMORY[0x1E4F2F5D0];
  }
  else
  {
    if (a1 != 1) {
      goto LABEL_22;
    }
    [v32 setObject:&unk_1EFAFEE20 forKeyedSubscript:*MEMORY[0x1E4F2F6A0]];
    uint64_t v35 = [a2 objectForKeyedSubscript:*MEMORY[0x1E4F542D0]];
    if (!v35) {
      goto LABEL_104;
    }
    double v36 = (void *)v35;
    double v37 = (void *)MEMORY[0x1E4F2F5D8];
  }
  [v32 setObject:v36 forKeyedSubscript:*v37];
LABEL_22:
  double v38 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F53C28]];
  if (!v38) {
    double v38 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F53C70]];
  }
  uint64_t v39 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F53C20]];
  if (!v39) {
    uint64_t v39 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F53C48]];
  }
  int v40 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F53C18]];
  if (!v40) {
    int v40 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F53C10]];
  }
  int v41 = [v38 intValue];
  int v42 = [v39 intValue];
  int v43 = [v40 intValue];
  uint64_t v45 = 0;
  if (v41 >= 1 && v42 >= 1 && v43 >= 1)
  {
    if (v42 >= v43) {
      int v46 = v43;
    }
    else {
      int v46 = v42;
    }
    if (v41 < v46) {
      int v46 = v41;
    }
    *(float *)&double v44 = (float)v46 / (float)v41;
    float v47 = (float)v46 / (float)v42;
    unint64_t v48 = 0x1E4F28000uLL;
    float v49 = (float)v46 / (float)v43;
    v147[0] = [NSNumber numberWithFloat:v44];
    *(float *)&double v50 = v47;
    v147[1] = [NSNumber numberWithFloat:v50];
    *(float *)&double v51 = v49;
    v147[2] = [NSNumber numberWithFloat:v51];
    uint64_t v52 = [MEMORY[0x1E4F1C978] arrayWithObjects:v147 count:3];
    [v32 setObject:v52 forKeyedSubscript:*MEMORY[0x1E4F2F5A0]];
    if ([a3 count] != 2) {
      goto LABEL_104;
    }
    unsigned int v53 = (void *)[a3 objectAtIndexedSubscript:0];
    if (![v53 count]) {
      goto LABEL_104;
    }
    uint64_t v54 = [v53 objectAtIndexedSubscript:0];
    [v32 setObject:v54 forKeyedSubscript:*MEMORY[0x1E4F2F5E0]];
    if ((unint64_t)[v53 count] >= 2)
    {
      uint64_t v55 = [v53 objectAtIndexedSubscript:1];
      [v32 setObject:v55 forKeyedSubscript:*MEMORY[0x1E4F2F5E8]];
    }
    double v56 = (void *)[a3 objectAtIndexedSubscript:1];
    if (![v56 count]) {
      goto LABEL_104;
    }
    uint64_t v57 = [v56 objectAtIndexedSubscript:0];
    [v32 setObject:v57 forKeyedSubscript:*MEMORY[0x1E4F2F608]];
    if ((unint64_t)[v56 count] >= 2)
    {
      uint64_t v58 = [v56 objectAtIndexedSubscript:1];
      [v32 setObject:v58 forKeyedSubscript:*MEMORY[0x1E4F2F610]];
    }
    int v59 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54388]), "intValue");
    float v61 = 0.0;
    if (v59 >= 1)
    {
      int v62 = v59;
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54390]), "floatValue");
      if (*(float *)&v60 > 0.0) {
        float v61 = log2f((float)((float)v62 * 0.0039062) / *(float *)&v60) + 0.0;
      }
    }
    if (a1 != 1)
    {
      if (a1 != 2 || (CGFloat v63 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F533B8]]) == 0)
      {
LABEL_51:
        v148.origin.CGFloat x = a9;
        v148.origin.CGFloat y = a10;
        v148.size.CGFloat width = a11;
        v148.size.CGFloat height = a12;
        if (!CGRectIsEmpty(v148))
        {
          v146[0] = [NSNumber numberWithInt:(int)a10];
          v146[1] = [NSNumber numberWithInt:(int)a9];
          v146[2] = [NSNumber numberWithInt:(int)(a10 + a12)];
          v146[3] = [NSNumber numberWithInt:(int)(a9 + a11)];
          uint64_t v66 = [MEMORY[0x1E4F1C978] arrayWithObjects:v146 count:4];
          [v32 setObject:v66 forKeyedSubscript:*MEMORY[0x1E4F2F590]];
          [v32 setObject:&unk_1EFB03110 forKeyedSubscript:*MEMORY[0x1E4F2F620]];
          v145[0] = [NSNumber numberWithInt:(int)a11];
          v145[1] = [NSNumber numberWithInt:(int)a12];
          uint64_t v67 = [MEMORY[0x1E4F1C978] arrayWithObjects:v145 count:2];
          [v32 setObject:v67 forKeyedSubscript:*MEMORY[0x1E4F2F628]];
        }
        if (a4 && [a4 count] == 7) {
          [v32 setObject:a4 forKeyedSubscript:*MEMORY[0x1E4F2F638]];
        }
        if (a8) {
          [v32 setObject:a8 forKeyedSubscript:@"GainMap"];
        }
        if (a1 == 2)
        {
          [v32 setObject:&unk_1EFB058E8 forKeyedSubscript:*MEMORY[0x1E4F2F650]];
          [v32 setObject:&unk_1EFB03128 forKeyedSubscript:*MEMORY[0x1E4F2F648]];
          if ((simu_addToneCurvesToDNGDictionary(v32, a2, v130, 0) & 1) == 0) {
            goto LABEL_104;
          }
          goto LABEL_101;
        }
        if (a1 != 1) {
          goto LABEL_101;
        }
        if (!a5)
        {
LABEL_79:
          if (a7)
          {
            v149.origin.CGFloat x = a9;
            v149.origin.CGFloat y = a10;
            v149.size.CGFloat width = a11;
            v149.size.CGFloat height = a12;
            if (!CGRectIsNull(v149))
            {
              v150.origin.CGFloat x = rect;
              v150.origin.CGFloat y = rect_16;
              v150.size.CGFloat width = a15;
              v150.size.CGFloat height = a16;
              if (!CGRectIsNull(v150))
              {
                double v85 = (void *)[a7 objectForKeyedSubscript:*MEMORY[0x1E4F539D0]];
                if (v85)
                {
                  double v86 = v85;
                  if ([v85 length] == 64)
                  {
                    uint64_t v87 = [v86 bytes];
                    double v88 = (void *)[a7 objectForKeyedSubscript:*MEMORY[0x1E4F539D8]];
                    if (v88)
                    {
                      double v89 = v88;
                      if ([v88 length] == 64)
                      {
                        uint64_t v90 = [v89 bytes];
                        objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53E00]), "floatValue");
                        uint64_t v92 = 0;
                        if ((int)v130 >= 0) {
                          int v93 = v130;
                        }
                        else {
                          int v93 = v130 + 1;
                        }
                        double v94 = a18 + (double)(v93 >> 1);
                        if (v130 >= 0) {
                          int v95 = HIDWORD(v130);
                        }
                        else {
                          int v95 = HIDWORD(v130) + 1;
                        }
                        int v96 = v95 >> 1;
                        double v97 = v94 / (double)(int)v130;
                        double v98 = (a19 + (double)v96) / (double)SHIDWORD(v130);
                        double v99 = 1.0 - v97;
                        if (v97 > 1.0 - v97) {
                          double v99 = v94 / (double)(int)v130;
                        }
                        double v100 = 1.0 - v98;
                        if (v98 > 1.0 - v98) {
                          double v100 = (a19 + (double)v96) / (double)SHIDWORD(v130);
                        }
                        float v101 = sqrt(a16 * a16 * (v100 * v100) + v99 * v99 * (a15 * a15));
                        long double v102 = (float)((float)(a17 / 1000.0) * v101);
                        float32x4_t v123 = (float32x4_t)vdupq_lane_s32(v91, 0);
                        long long v103 = (float32x4_t *)(v87 + 32);
                        long long v104 = (float32x4_t *)(v90 + 32);
                        int32x4_t v105 = (int32x4_t)xmmword_1A5DBD230;
                        do
                        {
                          float32x4_t v106 = *v103++;
                          float32x4_t v107 = v106;
                          float32x4_t v108 = *v104++;
                          float32x4_t v109 = vmlaq_f32(v107, v123, v108);
                          float64x2_t v131 = vcvt_hight_f64_f32(v109);
                          int32x4_t v133 = v105;
                          rect_16CGFloat a = vcvtq_f64_f32(*(float32x2_t *)v109.f32);
                          int32x4_t v110 = vaddq_s32(v105, v105);
                          v111.i64[0] = v110.u32[2];
                          v111.i64[1] = v110.u32[3];
                          __yCGFloat a = vcvtq_f64_u64(v111);
                          v111.i64[0] = v110.u32[0];
                          v111.i64[1] = v110.u32[1];
                          float64x2_t v125 = vcvtq_f64_u64(v111);
                          long double recta = pow(v102, v125.f64[0]);
                          v125.f64[0] = pow(v102, v125.f64[1]);
                          long double v124 = pow(v102, __ya.f64[0]);
                          long double v112 = pow(v102, __ya.f64[1]);
                          v113.f64[0] = v124;
                          v113.f64[1] = v112;
                          v114.f64[0] = recta;
                          v114.f64[1] = v125.f64[0];
                          double v115 = (float64x2_t *)((char *)&v137 + v92);
                          *double v115 = vmulq_f64(v114, rect_16a);
                          v115[1] = vmulq_f64(v113, v131);
                          v116.i64[0] = 0x400000004;
                          v116.i64[1] = 0x400000004;
                          int32x4_t v105 = vaddq_s32(v133, v116);
                          v92 += 32;
                        }
                        while (v92 != 64);
                        uint64_t v117 = 0;
                        double v137 = 100.0;
                        float v118 = a11 / a15;
                        double v119 = v118 / 100.0;
                        do
                        {
                          *(float64x2_t *)((char *)&v137 + v117) = vmulq_n_f64(*(float64x2_t *)((char *)&v137 + v117), v119);
                          v117 += 16;
                        }
                        while (v117 != 64);
                        v136[0] = [*(id *)(v48 + 3792) numberWithDouble:v137];
                        v136[1] = &unk_1EFB04F28;
                        v136[2] = [*(id *)(v48 + 3792) numberWithDouble:v138];
                        v136[3] = &unk_1EFB04F28;
                        v136[4] = [*(id *)(v48 + 3792) numberWithDouble:v139];
                        v136[5] = &unk_1EFB04F28;
                        v136[6] = [*(id *)(v48 + 3792) numberWithDouble:v140];
                        v136[7] = &unk_1EFB04F28;
                        v136[8] = [*(id *)(v48 + 3792) numberWithDouble:v141];
                        v136[9] = &unk_1EFB04F28;
                        v136[10] = [*(id *)(v48 + 3792) numberWithDouble:v142];
                        v136[11] = &unk_1EFB04F28;
                        v136[12] = [*(id *)(v48 + 3792) numberWithDouble:v143];
                        v136[13] = &unk_1EFB04F28;
                        v136[14] = [*(id *)(v48 + 3792) numberWithDouble:v144];
                        v136[15] = &unk_1EFB04F28;
                        v136[16] = &unk_1EFB04F28;
                        v136[17] = &unk_1EFB04F28;
                        v136[18] = &unk_1EFB04F38;
                        v136[19] = [*(id *)(v48 + 3792) numberWithDouble:v97];
                        v136[20] = [*(id *)(v48 + 3792) numberWithDouble:v98];
                        v136[21] = [*(id *)(v48 + 3792) numberWithUnsignedInt:1];
                        objc_msgSend(v32, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v136, 22), @"WarpRectilinear2");
                        goto LABEL_101;
                      }
                    }
                  }
                }
              }
            }
LABEL_104:
            uint64_t v45 = 0;
            goto LABEL_102;
          }
LABEL_101:
          uint64_t v45 = [v32 copy];
          goto LABEL_102;
        }
        int v68 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F70]), "shortValue");
        if (v68)
        {
          int v69 = v68;
          double v70 = (void *)[a5 objectForKeyedSubscript:@"SushiRawNoiseProfile_ISOArray"];
          id v71 = (void *)[a5 objectForKeyedSubscript:@"SushiRawNoiseProfile_SignalComponentArray"];
          uint64_t v72 = [a5 objectForKeyedSubscript:@"SushiRawNoiseProfile_DarkComponentArray"];
          uint64_t v73 = 0;
          if (!v70) {
            goto LABEL_78;
          }
          if (!v71) {
            goto LABEL_78;
          }
          int v74 = (void *)v72;
          if (!v72) {
            goto LABEL_78;
          }
          uint64_t v75 = objc_msgSend(v70, "count", 0);
          if (v75)
          {
            unint64_t v76 = v75;
            if (v75 == [v71 count] && v76 == objc_msgSend(v74, "count"))
            {
              __int16 v77 = objc_msgSend((id)objc_msgSend(v70, "objectAtIndexedSubscript:", 0), "shortValue");
              if (v76 < 2)
              {
                uint64_t v79 = 1;
LABEL_77:
                objc_msgSend((id)objc_msgSend(v71, "objectAtIndexedSubscript:", v79 - 1), "doubleValue");
                double v82 = v81;
                objc_msgSend((id)objc_msgSend(v74, "objectAtIndexedSubscript:", v79 - 1), "doubleValue");
                double v84 = v83;
                unint64_t v48 = 0x1E4F28000uLL;
                *(void *)&double v137 = [NSNumber numberWithDouble:v82];
                double v138 = COERCE_DOUBLE([NSNumber numberWithDouble:v84]);
                uint64_t v73 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v137 count:2];
              }
              else
              {
                __int16 v78 = v77;
                uint64_t v79 = 1;
                while (1)
                {
                  int v80 = objc_msgSend((id)objc_msgSend(v70, "objectAtIndexedSubscript:", v79), "shortValue");
                  if (v80 <= v78) {
                    break;
                  }
                  if (v69 < (v80 + v78) >> 1) {
                    goto LABEL_77;
                  }
                  ++v79;
                  __int16 v78 = v80;
                  if (v76 == v79)
                  {
                    uint64_t v79 = v76;
                    goto LABEL_77;
                  }
                }
                uint64_t v73 = 0;
                unint64_t v48 = 0x1E4F28000;
              }
              goto LABEL_78;
            }
          }
        }
        uint64_t v73 = 0;
LABEL_78:
        [v32 setObject:v73 forKeyedSubscript:*MEMORY[0x1E4F2F648]];
        goto LABEL_79;
      }
      [v63 floatValue];
      float v61 = log2f(1.0 / v64);
    }
    *(float *)&double v60 = v61;
    uint64_t v65 = [NSNumber numberWithFloat:v60];
    [v32 setObject:v65 forKeyedSubscript:*MEMORY[0x1E4F2F5C0]];
    goto LABEL_51;
  }
LABEL_102:

  return v45;
}

uint64_t BWCreateDemosaicedRawDNGDictionary(uint64_t a1, BOOL a2, void *a3, void *a4, void *a5, float a6)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t result = 0;
  if (HIDWORD(a1) && a1 && a6 != 0.0 && a3 && a4)
  {
    if (!FigCapturePixelFormatIsDemosaicedRaw(a2)) {
      goto LABEL_13;
    }
    CGFloat x = *MEMORY[0x1E4F1DB20];
    CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    CFDictionaryRef v17 = (const __CFDictionary *)[a3 objectForKeyedSubscript:*MEMORY[0x1E4F53260]];
    if (v17)
    {
      CGSize v18 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
      rect.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB28];
      rect.CGSize size = v18;
      if (CGRectMakeWithDictionaryRepresentation(v17, &rect))
      {
        FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)a1, a1 >> 32, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, a6);
        CGFloat x = v23.origin.x;
        CGFloat y = v23.origin.y;
        CGFloat width = v23.size.width;
        CGFloat height = v23.size.height;
        if (CGRectIsNull(v23))
        {
          uint64_t v20 = v21;
          LODWORD(v19) = 0;
          FigDebugAssert3();
        }
      }
    }
    objc_msgSend(a5, "objectForKeyedSubscript:", *MEMORY[0x1E4F52C98], v19, v20);
    uint64_t result = simu_createDNGDictionary(2, a3, a4, 0, 0, a1, 0, 0, x, y, width, height, x, y, width, height, 0.0, *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8));
    if (!result)
    {
LABEL_13:
      FigDebugAssert3();
      return 0;
    }
  }
  return result;
}

void *BWDNGColorCalibrations(void *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1 || [a1 count] != 2) {
    return 0;
  }
  int v30 = 0;
  memset(v34, 0, sizeof(v34));
  uint64_t v35 = 0;
  if ([a1 count])
  {
    uint64_t v2 = 0;
    unsigned int v3 = 1;
    while (1)
    {
      CGAffineTransform v4 = (void *)[a1 objectAtIndexedSubscript:v2];
      uint64_t result = (void *)[v4 objectForKeyedSubscript:@"Temperature"];
      if (!result) {
        break;
      }
      [result floatValue];
      *((_WORD *)&v30 + v2) = CMPhotoDNGGetLightSourceTagFromTemp();
      uint64_t result = (void *)[v4 objectForKeyedSubscript:@"DeviceRGBToXYZMatrix"];
      if (!result) {
        break;
      }
      uint64_t v6 = result;
      if ([result length] != 36) {
        return 0;
      }
      uint64_t v7 = (float *)[v6 bytes];
      float v8 = v7[7];
      float v9 = v7[8];
      float v10 = v7[4];
      float v11 = v7[5];
      float v12 = v7[6];
      float v13 = (float)(v10 * v9) - (float)(v11 * v8);
      float v14 = *v7;
      float v15 = v7[1];
      float v17 = v7[2];
      float v16 = v7[3];
      float v18 = (float)(v11 * v12) - (float)(v16 * v9);
      float v19 = (float)(v16 * v8) - (float)(v10 * v12);
      float v20 = (float)((float)(v15 * v18) + (float)(*v7 * v13)) + (float)(v17 * v19);
      if (v20 == 0.0) {
        return 0;
      }
      uint64_t v21 = (float *)v34 + 9 * v2;
      *uint64_t v21 = v13 / v20;
      v21[1] = (float)((float)(v17 * v8) - (float)(v15 * v9)) / v20;
      v21[2] = (float)((float)(v15 * v11) - (float)(v17 * v10)) / v20;
      v21[3] = v18 / v20;
      void v21[4] = (float)((float)(v14 * v9) - (float)(v17 * v12)) / v20;
      v21[5] = (float)((float)(v17 * v16) - (float)(v14 * v11)) / v20;
      v21[6] = v19 / v20;
      v21[7] = (float)((float)(v15 * v12) - (float)(v14 * v8)) / v20;
      v21[8] = (float)((float)(v14 * v10) - (float)(v15 * v16)) / v20;
      uint64_t v2 = v3;
      if ([a1 count] <= (unint64_t)v3++) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    CGRect v23 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:9];
    double v24 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:9];
    for (uint64_t i = 0; i != 36; i += 4)
    {
      LODWORD(v25) = *(_DWORD *)((char *)v34 + i);
      objc_msgSend(v23, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v25));
      LODWORD(v27) = *(_DWORD *)((char *)&v34[2] + i + 4);
      objc_msgSend(v24, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v27));
    }
    v33[0] = [NSNumber numberWithShort:(__int16)v30];
    v33[1] = [NSNumber numberWithShort:SHIWORD(v30)];
    uint64_t v28 = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:2];
    v32[0] = v23;
    v32[1] = v24;
    uint64_t v29 = [MEMORY[0x1E4F1C978] arrayWithObjects:v32 count:2];
    v31[0] = v28;
    v31[1] = v29;
    return (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v31 count:2];
  }
  return result;
}

void *BWCreateDNGDictionaryForZoom(void *a1, double a2, double a3, double a4, double a5)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1) {
    goto LABEL_3;
  }
  a1 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:a1];
  [a1 setObject:0 forKeyedSubscript:*MEMORY[0x1E4F2F590]];
  [a1 setObject:0 forKeyedSubscript:*MEMORY[0x1E4F2F620]];
  [a1 setObject:0 forKeyedSubscript:*MEMORY[0x1E4F2F628]];
  if ([a1 objectForKeyedSubscript:*MEMORY[0x1E4F2F638]]) {
    goto LABEL_3;
  }
  float v10 = (void *)[a1 objectForKeyedSubscript:@"ProfileGainTableMap"];
  if (!v10) {
    return a1;
  }
  float v11 = v10;
  float v12 = (void *)[v10 objectForKeyedSubscript:@"MapPointsH"];
  float v13 = (void *)[v11 objectForKeyedSubscript:@"MapPointsV"];
  float v14 = (void *)[v11 objectForKeyedSubscript:@"MapPointsN"];
  float v15 = (void *)[v11 objectForKeyedSubscript:@"MapSpacingH"];
  float v16 = (void *)[v11 objectForKeyedSubscript:@"MapSpacingV"];
  float v17 = (void *)[v11 objectForKeyedSubscript:@"MapOriginH"];
  uint64_t v18 = [v11 objectForKeyedSubscript:@"MapOriginV"];
  if (!v13) {
    goto LABEL_30;
  }
  if (!v12) {
    goto LABEL_30;
  }
  if (!v14) {
    goto LABEL_30;
  }
  if (!v15) {
    goto LABEL_30;
  }
  if (!v16) {
    goto LABEL_30;
  }
  if (!v17) {
    goto LABEL_30;
  }
  float v19 = (void *)v18;
  if (!v18) {
    goto LABEL_30;
  }
  [v17 floatValue];
  double v21 = a2 - v20;
  [v15 floatValue];
  if (floor(v21 / v22) <= 0.0)
  {
    unsigned int v86 = 0;
  }
  else
  {
    [v17 floatValue];
    double v24 = a2 - v23;
    [v15 floatValue];
    unsigned int v86 = vcvtmd_u64_f64(v24 / v25);
  }
  [v17 floatValue];
  double v27 = a2 + a4 - v26;
  [v15 floatValue];
  if (ceil(v27 / v28) >= (double)(int)([v12 intValue] - 1))
  {
    double v32 = (double)(int)([v12 intValue] - 1);
  }
  else
  {
    [v17 floatValue];
    double v30 = a2 + a4 - v29;
    [v15 floatValue];
    double v32 = ceil(v30 / v31);
  }
  double v84 = v32;
  [v17 floatValue];
  float v82 = v33;
  [v15 floatValue];
  float v80 = v34;
  [v19 floatValue];
  double v36 = a3 - v35;
  [v16 floatValue];
  if (floor(v36 / v37) <= 0.0)
  {
    unsigned int v41 = 0;
  }
  else
  {
    [v19 floatValue];
    double v39 = a3 - v38;
    [v16 floatValue];
    unsigned int v41 = vcvtmd_u64_f64(v39 / v40);
  }
  double v88 = a4;
  [v19 floatValue];
  double v43 = a3 + a5 - v42;
  [v16 floatValue];
  double v45 = a5;
  if (ceil(v43 / v44) >= (double)(int)([v13 intValue] - 1))
  {
    double v49 = (double)(int)([v13 intValue] - 1);
  }
  else
  {
    [v19 floatValue];
    double v47 = a3 + a5 - v46;
    [v16 floatValue];
    double v49 = ceil(v47 / v48);
  }
  [v19 floatValue];
  float v51 = v50;
  [v16 floatValue];
  float v53 = v52;
  [v15 floatValue];
  float v55 = v54;
  [v16 floatValue];
  float v57 = v56;
  uint64_t v58 = 4 * [v14 intValue];
  uint64_t v87 = v11;
  int v59 = (void *)[v11 objectForKeyedSubscript:@"GainValues"];
  int v60 = [v13 intValue] * v58;
  unint64_t v61 = v60 * [v12 intValue];
  if ([v59 length] < v61)
  {
LABEL_30:
    FigDebugAssert3();
LABEL_3:

    return 0;
  }
  float v62 = 1.0 / v88;
  float v63 = 1.0 / v45;
  float v64 = ((float)(v82 + (float)((float)v86 * v80)) - a2) * v62;
  float v89 = v64;
  uint64_t v65 = v49;
  float v66 = ((float)(v51 + (float)((float)v41 * v53)) - a3) * v63;
  float v67 = v55 * v62;
  float v68 = v57 * v63;
  unsigned int v81 = v65 - v41 + 1;
  unsigned int v83 = v84 - v86 + 1;
  size_t v69 = v58 * v83;
  double v85 = (void *)[MEMORY[0x1E4F1CA58] dataWithLength:v69 * v81];
  uint64_t v70 = [v85 mutableBytes];
  if (v65 >= v41)
  {
    id v71 = (char *)v70;
    uint64_t v72 = v41;
    uint64_t v73 = v65 + 1;
    do
    {
      memcpy(v71, (const void *)([v59 bytes] + (v86 + v72 * (int)objc_msgSend(v12, "intValue")) * v58), v69);
      v71 += v69;
      ++v72;
    }
    while (v73 != v72);
  }
  int v74 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v87];
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v81), @"MapPointsV");
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v83), @"MapPointsH");
  *(float *)&double v75 = v68;
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v75), @"MapSpacingV");
  *(float *)&double v76 = v67;
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v76), @"MapSpacingH");
  *(float *)&double v77 = v66;
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v77), @"MapOriginV");
  *(float *)&double v78 = v89;
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v78), @"MapOriginH");
  [v74 setObject:v85 forKeyedSubscript:@"GainValues"];
  [a1 setObject:v74 forKeyedSubscript:@"ProfileGainTableMap"];
  return a1;
}

uint64_t BWCreateDNGDictionaryWithZoomedGDCParameters(void *a1, void *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1) {
    goto LABEL_11;
  }
  if ([a2 count] != 4
    || (v23.origin.x = a4, v23.origin.CGFloat y = a5, v23.size.width = a6, v23.size.height = a7, CGRectIsEmpty(v23))
    || (a8 == *MEMORY[0x1E4F1DAD8] ? (BOOL v18 = a9 == *(double *)(MEMORY[0x1E4F1DAD8] + 8)) : (BOOL v18 = 0), v18))
  {
    a1 = 0;
LABEL_11:
    uint64_t v20 = 0;
    goto LABEL_9;
  }
  a1 = (void *)[a1 mutableCopy];
  v22[0] = [a2 objectAtIndexedSubscript:0];
  v22[1] = [a2 objectAtIndexedSubscript:1];
  v22[2] = [a2 objectAtIndexedSubscript:2];
  v22[3] = [a2 objectAtIndexedSubscript:3];
  v22[4] = &unk_1EFB04EF8;
  v22[5] = &unk_1EFB04EF8;
  void v22[6] = [NSNumber numberWithDouble:(a8 + (double)(int)a3 * 0.5 - a4) / a6];
  v22[7] = [NSNumber numberWithDouble:(a9 + (double)SHIDWORD(a3) * 0.5 - a5) / a7];
  uint64_t v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v22 count:8];
  [a1 setObject:v19 forKeyedSubscript:*MEMORY[0x1E4F2F698]];
  uint64_t v20 = [a1 copy];
LABEL_9:

  return v20;
}

uint64_t BWCreateDNGDictionaryWithUpdatedDimensionsIfNeeded(void *a1, uint64_t a2, uint64_t a3)
{
  v48[4] = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1) {
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  if (!a2) {
    goto LABEL_18;
  }
  uint64_t v7 = 0;
  if (!HIDWORD(a2)) {
    goto LABEL_16;
  }
  uint64_t v6 = 0;
  if (!a3)
  {
LABEL_18:
    uint64_t v7 = 0;
    goto LABEL_16;
  }
  uint64_t v7 = 0;
  if (!HIDWORD(a3)) {
    goto LABEL_16;
  }
  if (a2 == a3
    || (uint64_t v8 = *MEMORY[0x1E4F2F590],
        float v9 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F2F590]],
        uint64_t v45 = *MEMORY[0x1E4F2F620],
        float v10 = objc_msgSend(a1, "objectForKeyedSubscript:"),
        uint64_t v11 = *MEMORY[0x1E4F2F628],
        uint64_t v12 = [a1 objectForKeyedSubscript:*MEMORY[0x1E4F2F628]],
        float v13 = (void *)v12,
        !v9)
    && !v10
    && !v12)
  {
LABEL_17:
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    goto LABEL_16;
  }
  uint64_t v44 = v11;
  uint64_t v7 = (void *)[a1 mutableCopy];
  double v14 = 1.0 / ((double)(int)a2 / (double)(int)a3);
  double v15 = 1.0 / ((double)SHIDWORD(a2) / (double)SHIDWORD(a3));
  if (v9)
  {
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 1), "doubleValue");
    double v17 = v16;
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 0), "doubleValue");
    double v19 = v18;
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 3), "doubleValue");
    double v21 = v20;
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 1), "doubleValue");
    double v23 = v21 - v22;
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 2), "doubleValue");
    double v25 = v24;
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 0), "doubleValue");
    double v27 = v25 - v26;
    double v28 = v14 * v17;
    double v29 = v15 * v19;
    double v30 = v14 * v23;
    double v31 = v15 * v27;
    v48[0] = [NSNumber numberWithDouble:v29];
    v48[1] = [NSNumber numberWithDouble:v28];
    v48[2] = [NSNumber numberWithDouble:v31 - v29];
    v48[3] = [NSNumber numberWithDouble:v30 - v28];
    objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v48, 4), v8);
  }
  if (v10 && v13)
  {
    objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 0), "doubleValue");
    double v33 = v32;
    objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 1), "doubleValue");
    double v35 = v34;
    objc_msgSend((id)objc_msgSend(v13, "objectAtIndexedSubscript:", 0), "doubleValue");
    double v37 = v36;
    objc_msgSend((id)objc_msgSend(v13, "objectAtIndexedSubscript:", 1), "doubleValue");
    double v38 = v14 * v33;
    double v39 = v15 * v35;
    double v40 = v14 * v37;
    double v42 = v15 * v41;
    v47[0] = [NSNumber numberWithDouble:v38];
    v47[1] = [NSNumber numberWithDouble:v39];
    objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v47, 2), v45);
    v46[0] = [NSNumber numberWithDouble:v40];
    v46[1] = [NSNumber numberWithDouble:v42];
    objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v46, 2), v44);
  }
  uint64_t v6 = [v7 copy];
LABEL_16:

  return v6;
}

uint64_t BWCreateDNGDictionaryWithUpdatedToneCurvesIfNeeded(void *a1, unint64_t a2, void *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  if (!a3 || !HIDWORD(a2))
  {
    uint64_t v7 = 0;
    goto LABEL_14;
  }
  uint64_t v7 = 0;
  if (a2)
  {
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    int v17 = 0;
    uint64_t v8 = simu_ltmLUTsFromMetadata(a3, &v17);
    if (v8)
    {
      if (v17 == 4)
      {
        float v9 = v8;
        float v10 = (void *)[a1 objectForKeyedSubscript:@"ProfileGainTableMap"];
        if (!v10
          || (uint64_t v11 = v10,
              v12 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", @"MapPointsH"), "unsignedIntValue"), int v13 = (unsigned __int16)v9[1], v14 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", @"MapPointsV"), "unsignedIntValue"), v12 != v13)|| v14 != (unsigned __int16)v9[2])
        {
          uint64_t v6 = (void *)[a1 mutableCopy];
          objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DE8]), "floatValue");
          if (v15 == 0.0) {
            float v15 = 1.0;
          }
          if (simu_addToneCurvesToDNGDictionary(v6, a3, a2, v15 != 1.0))
          {
            uint64_t v7 = [v6 copy];
            goto LABEL_14;
          }
LABEL_16:
          uint64_t v7 = 0;
          goto LABEL_14;
        }
      }
    }
LABEL_15:
    uint64_t v6 = 0;
    goto LABEL_16;
  }
LABEL_14:

  return v7;
}

uint64_t simu_addToneCurvesToDNGDictionary(void *a1, void *a2, uint64_t a3, int a4)
{
  v125[5] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *MEMORY[0x1E4F2F678];
  [a1 setObject:0 forKeyedSubscript:*MEMORY[0x1E4F2F678]];
  uint64_t v7 = *MEMORY[0x1E4F2F618];
  [a1 setObject:0 forKeyedSubscript:*MEMORY[0x1E4F2F618]];
  [a1 setObject:0 forKeyedSubscript:@"ProfileGainTableMap"];
  uint64_t v106 = *MEMORY[0x1E4F2F670];
  objc_msgSend(a1, "setObject:forKeyedSubscript:", 0);
  uint64_t v8 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F53F18]];
  uint64x2_t v111 = a2;
  if (v8)
  {
    float v9 = v8;
    float v10 = (unsigned __int16 *)[v8 bytes];
    uint64_t v11 = *v10;
    if (2 * v11 + 2 != [v9 length]) {
      return 0;
    }
    int v12 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:2 * v11];
    if (v11)
    {
      uint64_t v14 = 0;
      int v15 = 0;
      do
      {
        *(float *)&double v13 = (float)v15 / (float)((float)v11 + -1.0);
        objc_msgSend(v12, "setObject:atIndexedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v13), v14 * 2);
        LOWORD(v17) = v10[v14 + 1];
        LOWORD(v16) = v10[v11];
        *(float *)&double v17 = (float)LODWORD(v17) / (float)v16;
        if (*(float *)&v17 >= 0.04045) {
          *(float *)&double v17 = powf((float)(*(float *)&v17 + 0.055) / 1.055, 2.4);
        }
        else {
          *(float *)&double v17 = *(float *)&v17 / 12.92;
        }
        objc_msgSend(v12, "setObject:atIndexedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v17), v14 * 2 + 1);
        ++v15;
        ++v14;
      }
      while (v11 != v14);
    }
    [a1 setObject:v12 forKeyedSubscript:v6];
    [a1 setObject:&unk_1EFAFEDF0 forKeyedSubscript:v7];
  }
  double v18 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F533B8]];
  if (v18)
  {
    [v18 floatValue];
    float v20 = 1.0 / v19;
  }
  else
  {
    float v20 = 1.0;
  }
  float v114 = v20;
  uint64_t v21 = *MEMORY[0x1E4F533A0];
  uint64_t v22 = [a2 objectForKeyedSubscript:*MEMORY[0x1E4F533A0]];
  uint64_t v109 = v6;
  if (v22)
  {
    double v23 = (void *)v22;
    [a1 setObject:v22 forKeyedSubscript:v21];
    [v23 floatValue];
    float v114 = v114 * v24;
  }
  double v25 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F53330]];
  uint64_t result = [a2 objectForKeyedSubscript:*MEMORY[0x1E4F53EF8]];
  if (result)
  {
    double v27 = (void *)result;
    if ((unint64_t)[(id)result length] >= 2)
    {
      double v28 = (unsigned __int16 *)[v27 bytes];
      uint64_t v29 = *v28;
      float64x2_t v113 = v28 + 1;
      int v122 = 0;
      double v30 = simu_ltmLUTsFromMetadata(a2, &v122);
      uint64_t result = 0;
      if (v30 && v122 == 4)
      {
        float32x4_t v108 = a1;
        uint64_t v31 = v30[11];
        float32x4_t v107 = (void *)[MEMORY[0x1E4F1CA58] dataWithLength:4 * v29 * v30[1] * (unint64_t)v30[2]];
        uint64_t v119 = [v107 mutableBytes];
        unsigned int v32 = v30[2];
        unsigned int v33 = v30[1];
        int32x4_t v116 = v30;
        if (v30[2])
        {
          unint64_t v120 = 0;
          double v34 = v30 + 12;
          unint64_t v35 = v29 - 1;
          float v117 = (float)(unint64_t)(v29 - 1);
          float v118 = (float)v29 + -1.0;
          float v36 = 1.0 / (double)(unint64_t)(v29 - 1);
          float v115 = v36;
          unint64_t v37 = v31 - 1;
          float v38 = (float)(unint64_t)(v31 - 1);
          float v39 = 1.0 / (double)(unint64_t)(v31 - 1);
          unsigned int v40 = v30[1];
          do
          {
            if (v40)
            {
              unint64_t v41 = 0;
              do
              {
                if (v29)
                {
                  unint64_t v42 = 0;
                  unint64_t v43 = v41 * v30[11] + ((v120 * v30[3]) >> 1);
                  do
                  {
                    float v44 = (float)v42 / v118;
                    float v45 = 1.0;
                    if (v25)
                    {
                      unint64_t v46 = vcvtms_u32_f32(v44 * v117);
                      if (v46 + 1 < v35) {
                        unint64_t v47 = v46 + 1;
                      }
                      else {
                        unint64_t v47 = v35;
                      }
                      if (v46) {
                        float v48 = (float)v42 / v118;
                      }
                      else {
                        float v48 = v115;
                      }
                      if (v46) {
                        float v49 = v44 * v117;
                      }
                      else {
                        float v49 = (float)v47;
                      }
                      uint64_t v50 = v29;
                      if (v46) {
                        unint64_t v51 = v46;
                      }
                      else {
                        unint64_t v51 = v47;
                      }
                      float v52 = (float)objc_msgSend((id)objc_msgSend(v25, "objectAtIndex:", v51), "unsignedShortValue")/ 65535.0;
                      unsigned int v53 = objc_msgSend((id)objc_msgSend(v25, "objectAtIndex:", v47), "unsignedShortValue");
                      float v54 = (float)v51;
                      uint64_t v29 = v50;
                      double v30 = v116;
                      float v44 = (float)((float)(v49 - v54) * (float)((float)v53 / 65535.0))
                          + (1.0 - (float)(v49 - v54)) * v52;
                      float v55 = v44 / v48;
                      if (v48 == 0.0) {
                        float v55 = 1.0;
                      }
                    }
                    else
                    {
                      float v55 = 1.0;
                    }
                    float v56 = v44 * v38;
                    unint64_t v57 = vcvtms_u32_f32(v44 * v38);
                    if (v57 + 1 < v37) {
                      unint64_t v58 = v57 + 1;
                    }
                    else {
                      unint64_t v58 = v37;
                    }
                    float v59 = (float)v58;
                    if (v57) {
                      float v60 = v44;
                    }
                    else {
                      float v60 = v39;
                    }
                    if (v57) {
                      float v61 = v44 * v38;
                    }
                    else {
                      float v61 = (float)v58;
                    }
                    if (!v57) {
                      unint64_t v57 = v58;
                    }
                    LOWORD(v56) = v34[v57 + v43];
                    LOWORD(v59) = v34[v58 + v43];
                    float v62 = (float)LODWORD(v59) / 65535.0;
                    float v63 = v61 - (float)v57;
                    double v64 = 1.0 - v63;
                    float v65 = (float)(v63 * v62) + v64 * (float)((float)LODWORD(v56) / 65535.0);
                    if (v60 != 0.0) {
                      float v45 = v65 / (float)(v114 * v60);
                    }
                    float v66 = 1.0;
                    if (v65 != 0.0)
                    {
                      unint64_t v67 = vcvtms_u32_f32(v117 * v65);
                      float v68 = (float)(v117 * v65) - (float)v67;
                      LOWORD(v62) = v113[v67];
                      double v69 = (float)((float)LODWORD(v62) / 65535.0);
                      if (v67 + 1 < v35) {
                        unint64_t v70 = v67 + 1;
                      }
                      else {
                        unint64_t v70 = v35;
                      }
                      LOWORD(v64) = v113[v70];
                      float v71 = (float)(v68 * (float)((float)LODWORD(v64) / 65535.0)) + (1.0 - v68) * v69;
                      float v66 = v71 / v65;
                    }
                    unint64_t v72 = v30[1];
                    *(float *)(v119 + 4 * (v42 + v29 * (v41 + v120 * v72))) = (float)(v55 * v45) * v66;
                    ++v42;
                  }
                  while (v29 != v42);
                  unsigned int v33 = v72;
                }
                else
                {
                  unint64_t v72 = v33;
                }
                ++v41;
              }
              while (v41 < v72);
              unsigned int v32 = v30[2];
              unsigned int v40 = v33;
            }
            ++v120;
          }
          while (v120 < v32);
        }
        unint64_t v73 = v30[9];
        unint64_t v74 = v30[10];
        float v75 = (float)v73;
        float v76 = (float)v74;
        float v77 = (float)((((int)a3 - (unint64_t)(v73 * v33)) >> 1) + (v73 >> 1)) / (float)(int)a3;
        float v78 = (float)((((a3 >> 32) - (unint64_t)(v74 * v32)) >> 1) + (v74 >> 1))
            / (float)SHIDWORD(a3);
        if (objc_msgSend((id)objc_msgSend(v111, "objectForKeyedSubscript:", *MEMORY[0x1E4F53338]), "BOOLValue"))
        {
          v121.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
          v121.CGSize size = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
          uint64_t v79 = v108;
          uint64_t v80 = v109;
          unint64_t v81 = 0x1E4F28000;
          if (FigCFDictionaryGetCGRectIfPresent())
          {
            float v82 = CGRectGetMidX(v121) + -0.5;
            float v83 = CGRectGetMidY(v121) + -0.5;
            float v77 = v77 + v82;
            float v78 = v78 + v83;
          }
        }
        else
        {
          uint64_t v79 = v108;
          uint64_t v80 = v109;
          unint64_t v81 = 0x1E4F28000uLL;
        }
        float v84 = v75 / (float)(int)a3;
        float v85 = v76 / (float)SHIDWORD(a3);
        if (a4)
        {
          objc_msgSend((id)objc_msgSend(v111, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DE8]), "floatValue");
          unsigned int v86 = v116;
          LOWORD(v87) = v116[1];
          float v88 = (float)v87;
          float v89 = (float)(v84 * v88) * 0.5;
          LOWORD(v90) = v116[2];
          float v91 = (float)v90;
          float v92 = (float)(v85 * v91) * 0.5;
          float v84 = v84 / v93;
          float v85 = v85 / v93;
          float v77 = v77 + (float)(v89 - (float)((float)(v84 * v88) * 0.5));
          float v78 = v78 + (float)(v92 - (float)((float)(v85 * v91) * 0.5));
        }
        else
        {
          unsigned int v86 = v116;
        }
        double v94 = 0.1063 / v114;
        *(float *)&double v94 = v94;
        float v95 = 0.3576 / v114;
        float v96 = 0.0361 / v114;
        v125[0] = [*(id *)(v81 + 3792) numberWithFloat:v94];
        *(float *)&double v97 = v95;
        v125[1] = [*(id *)(v81 + 3792) numberWithFloat:v97];
        *(float *)&double v98 = v96;
        v125[2] = [*(id *)(v81 + 3792) numberWithFloat:v98];
        *(float *)&double v99 = 0.0 / v114;
        v125[3] = [*(id *)(v81 + 3792) numberWithFloat:v99];
        *(float *)&double v100 = 0.5 / v114;
        v125[4] = [*(id *)(v81 + 3792) numberWithFloat:v100];
        uint64_t v101 = [MEMORY[0x1E4F1C978] arrayWithObjects:v125 count:5];
        v123[0] = @"MapPointsV";
        v124[0] = [*(id *)(v81 + 3792) numberWithUnsignedShort:v86[2]];
        v123[1] = @"MapPointsH";
        v124[1] = [*(id *)(v81 + 3792) numberWithUnsignedShort:v86[1]];
        v123[2] = @"MapPointsN";
        v124[2] = [*(id *)(v81 + 3792) numberWithUnsignedLong:v29];
        v123[3] = @"MapSpacingV";
        *(float *)&double v102 = v85;
        v124[3] = [*(id *)(v81 + 3792) numberWithFloat:v102];
        v123[4] = @"MapSpacingH";
        *(float *)&double v103 = v84;
        v124[4] = [*(id *)(v81 + 3792) numberWithFloat:v103];
        v123[5] = @"MapOriginV";
        *(float *)&double v104 = v78;
        v124[5] = [*(id *)(v81 + 3792) numberWithFloat:v104];
        v123[6] = @"MapOriginH";
        *(float *)&double v105 = v77;
        v124[6] = [*(id *)(v81 + 3792) numberWithFloat:v105];
        v124[7] = v101;
        v123[7] = @"MapInputWeights";
        v123[8] = @"GainValues";
        v124[8] = v107;
        objc_msgSend(v79, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v124, v123, 9), @"ProfileGainTableMap");
        if ([v79 objectForKeyedSubscript:@"ProfileGainTableMap"]
          || [v79 objectForKeyedSubscript:v80])
        {
          [v79 setObject:@"Apple Embedded Color Profile" forKeyedSubscript:v106];
        }
        return 1;
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t BWCreateDNGDictionaryWithUpdatedVersion(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
  {
    uint64_t v6 = 0;
LABEL_8:
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v6 = (void *)[a1 mutableCopy];
  uint64_t v11 = *MEMORY[0x1E4F2F630];
  v12[0] = a1;
  [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
  if (a4 == 1786276963)
  {
    uint64_t v9 = *MEMORY[0x1E4F56210];
    float v10 = &unk_1EFAFEE08;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  }
  if (CMPhotoDNGVersionFromPropertiesAndOptions()) {
    goto LABEL_8;
  }
  [v6 setObject:0 forKeyedSubscript:*MEMORY[0x1E4F2F688]];
  uint64_t v7 = [v6 copy];
LABEL_6:

  return v7;
}

double BWRawDenormalizedActiveRectFromDNGDictionary(void *a1)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  double v2 = *MEMORY[0x1E4F1DB20];
  if (a1)
  {
    unsigned int v3 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F2F590]];
    if (v3)
    {
      CGAffineTransform v4 = v3;
      if ([v3 count] == 4)
      {
        objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 0), "intValue");
        double v2 = (double)(int)objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 1), "intValue");
        objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 2), "intValue");
        objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 3), "intValue");
      }
    }
  }
  return v2;
}

void *BWCreateRawMetadataFromMetadata(void *a1, id a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  int v12 = (void *)[a1 mutableCopy];
  double v13 = (void *)BWCreateDNGDictionaryWithUpdatedVersion(a2, a5, a6, a7);
  if (v13) {
    a2 = v13;
  }
  objc_msgSend(v12, "setObject:forKeyedSubscript:", a2, *MEMORY[0x1E4F2F630], a4);
  [v12 removeObjectForKey:*MEMORY[0x1E4F2F420]];
  uint64_t v14 = *MEMORY[0x1E4F2F800];
  int v15 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E4F2F800]));
  [v15 removeObjectForKey:*MEMORY[0x1E4F2F7C0]];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2)
  {
    unsigned int v16 = (void *)[a2 objectForKeyedSubscript:*MEMORY[0x1E4F2F628]];
    if (v16)
    {
      double v17 = v16;
      if ([v16 count] == 2)
      {
        uint64_t v18 = objc_msgSend((id)objc_msgSend(v17, "objectAtIndexedSubscript:", 0), "intValue");
        uint64_t v19 = objc_msgSend((id)objc_msgSend(v17, "objectAtIndexedSubscript:", 1), "intValue");
        if (v19)
        {
          if (v18)
          {
            uint64_t v20 = v19;
            uint64_t v21 = [NSNumber numberWithInt:v18];
            [v15 setObject:v21 forKeyedSubscript:*MEMORY[0x1E4F2F8D8]];
            uint64_t v22 = [NSNumber numberWithInt:v20];
            [v15 setObject:v22 forKeyedSubscript:*MEMORY[0x1E4F2F8E0]];
          }
        }
      }
    }
  }
  [v12 setObject:v15 forKeyedSubscript:v14];
  uint64_t v23 = *MEMORY[0x1E4F2FC20];
  float v24 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E4F2FC20]));
  uint64_t v25 = *MEMORY[0x1E4F52B38];
  int v26 = objc_msgSend((id)objc_msgSend(v24, "objectForKeyedSubscript:", *MEMORY[0x1E4F52B38]), "unsignedIntValue");
  objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v26 | a3), v25);
  if (a3 == 0x10000) {
    [v24 setObject:v29 forKeyedSubscript:*MEMORY[0x1E4F52910]];
  }
  [v12 setObject:v24 forKeyedSubscript:v23];
  return v12;
}

uint64_t __simu_createDNGDictionary_block_invoke()
{
  uint64_t result = MGCopyAnswer();
  simu_createDNGDictionary_sProductTypeString = result;
  return result;
}

_WORD *simu_ltmLUTsFromMetadata(void *a1, _DWORD *a2)
{
  unsigned int v3 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F54010]];
  if (!v3) {
    return 0;
  }
  CGAffineTransform v4 = v3;
  if ((unint64_t)[v3 length] < 0x16) {
    return 0;
  }
  uint64_t v5 = (_WORD *)[v4 bytes];
  if (*v5 != 4) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = (unsigned __int16)v5[3] * (unint64_t)(unsigned __int16)v5[2] + 24;
  if ([v4 length] < v7) {
    return 0;
  }
  if (a2) {
    *a2 = 4;
  }
  return v6;
}

uint64_t fcdpe_demosaicedRawEnabled(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v1 = objc_msgSend((id)objc_msgSend(a1, "photoManifest", 0), "photoDescriptors");
  uint64_t result = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v7;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        if (([*(id *)(*((void *)&v6 + 1) + 8 * v5) processingFlags] & 0x10000) != 0) {
          return 1;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      uint64_t v3 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t ReportMemoryException()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  vm_size_t v21 = 0;
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)host_info_out = 0u;
  host_info_outCnt[0] = 0;
  host_info_outCnt[1] = 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v17 = 0;
  *(_OWORD *)type = 0u;
  long long v16 = 0u;
  mach_msg_type_number_t task_info_outCnt = 10;
  *(void *)task_info_out = 0;
  uint64_t v13 = 0;
  mach_msg_type_number_t v11 = 4;
  int v24 = 0;
  memset(v23, 0, sizeof(v23));
  mach_msg_type_number_t v10 = 93;
  uint64_t v1 = (task_name_t *)MEMORY[0x1E4F14960];
  task_info(*MEMORY[0x1E4F14960], 0x12u, (task_info_t)type, &task_info_outCnt);
  double v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  task_info(*v1, 3u, task_info_out, &v11);
  uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (!task_info(*v1, 0x16u, (task_info_t)v23, &v10))
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  uint64_t v6 = fig_log_call_emit_and_clean_up_after_send_and_compose();
  host_t v7 = MEMORY[0x1A6272A30](v6);
  host_info_outCnt[0] = 15;
  host_page_size(v7, &v21);
  host_statistics(v7, 2, host_info_out, host_info_outCnt);
  long long v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t SoundAnalysisLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = SoundAnalysisLibraryCore_frameworkLibrary;
  uint64_t v5 = SoundAnalysisLibraryCore_frameworkLibrary;
  if (!SoundAnalysisLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E5C263C8;
    long long v7 = *(_OWORD *)&off_1E5C263D8;
    v3[3] = _sl_dlopen();
    SoundAnalysisLibraryCore_frameworkLibrarCGFloat y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A5B2D68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __SoundAnalysisLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  SoundAnalysisLibraryCore_frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t SoundAnalysisLibrary()
{
  uint64_t v1 = 0;
  uint64_t result = SoundAnalysisLibraryCore();
  if (!result) {
    SoundAnalysisLibrary_cold_1(&v1);
  }
  return result;
}

uint64_t getSNMovieRemixClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__16;
  long long v7 = __Block_byref_object_dispose__16;
  uint64_t v0 = getSNMovieRemixClass_softClass;
  uint64_t v8 = getSNMovieRemixClass_softClass;
  if (!getSNMovieRemixClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getSNMovieRemixClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getSNMovieRemixClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5B2D860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSNMovieRemixClass_block_invoke(uint64_t a1)
{
  SoundAnalysisLibrary();
  Class result = objc_getClass("SNMovieRemix");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getSNMovieRemixClass_block_invoke_cold_1();
  }
  getSNMovieRemixClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getSNMovieRemixRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__16;
  long long v7 = __Block_byref_object_dispose__16;
  uint64_t v0 = getSNMovieRemixRequestClass_softClass;
  uint64_t v8 = getSNMovieRemixRequestClass_softClass;
  if (!getSNMovieRemixRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getSNMovieRemixRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getSNMovieRemixRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5B2D9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSNMovieRemixRequestClass_block_invoke(uint64_t a1)
{
  SoundAnalysisLibrary();
  Class result = objc_getClass("SNMovieRemixRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getSNMovieRemixRequestClass_block_invoke_cold_1();
  }
  getSNMovieRemixRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

double FigCaptureUpdateRectSizeAndMaintainCenter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a1);
  v12.origin.CGFloat x = a1;
  v12.origin.CGFloat y = a2;
  v12.size.CGFloat width = a3;
  v12.size.CGFloat height = a4;
  CGRectGetMidY(v12);
  return MidX - a5 * 0.5;
}

CGAffineTransform *FigCaptureExifOrientationGetAffineTransform@<X0>(CGAffineTransform *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((result - 9) > 0xFFFFFFF8)
  {
    CGFloat v7 = 0.0;
    switch((int)result)
    {
      case 2:
        char v8 = 0;
        char v9 = 1;
        break;
      case 3:
        char v9 = 0;
        char v8 = 1;
        goto LABEL_8;
      case 4:
        char v9 = 0;
        char v8 = 0;
LABEL_8:
        CGFloat v7 = 3.14159265;
        break;
      case 5:
        char v9 = 0;
        char v8 = 0;
        goto LABEL_14;
      case 6:
        char v9 = 0;
        char v8 = 1;
        goto LABEL_12;
      case 7:
        char v9 = 0;
        char v8 = 0;
LABEL_12:
        CGFloat v7 = 1.57079633;
        break;
      case 8:
        char v9 = 0;
        char v8 = 1;
LABEL_14:
        CGFloat v7 = 4.71238898;
        break;
      default:
        char v9 = 1;
        char v8 = 1;
        break;
    }
    uint64_t v10 = MEMORY[0x1E4F1DAB8];
    long long v21 = *MEMORY[0x1E4F1DAB8];
    long long v22 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)a3 = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)(a3 + 16) = v22;
    long long v20 = *(_OWORD *)(v10 + 32);
    double v11 = (double)(int)a2;
    *(_OWORD *)(a3 + 32) = v20;
    double v12 = (double)SHIDWORD(a2);
    CGAffineTransformMakeTranslation(&t2, -((double)(int)a2 * 0.5), -((double)SHIDWORD(a2) * 0.5));
    *(_OWORD *)&t1.CGFloat a = v21;
    *(_OWORD *)&t1.CGFloat c = v22;
    *(_OWORD *)&t1.tCGFloat x = v20;
    CGAffineTransformConcat((CGAffineTransform *)a3, &t1, &t2);
    if ((v8 & 1) == 0)
    {
      CGAffineTransformMakeScale(&v26, -1.0, 1.0);
      long long v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v25.CGFloat a = *(_OWORD *)a3;
      *(_OWORD *)&v25.CGFloat c = v13;
      *(_OWORD *)&v25.tCGFloat x = *(_OWORD *)(a3 + 32);
      CGAffineTransformConcat(&t1, &v25, &v26);
      long long v14 = *(_OWORD *)&t1.c;
      *(_OWORD *)a3 = *(_OWORD *)&t1.a;
      *(_OWORD *)(a3 + 16) = v14;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&t1.tx;
    }
    double v15 = v11 * 0.5;
    if ((v9 & 1) == 0)
    {
      CGAffineTransformMakeRotation(&v24, v7);
      long long v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v25.CGFloat a = *(_OWORD *)a3;
      *(_OWORD *)&v25.CGFloat c = v16;
      *(_OWORD *)&v25.tCGFloat x = *(_OWORD *)(a3 + 32);
      CGAffineTransformConcat(&t1, &v25, &v24);
      long long v17 = *(_OWORD *)&t1.c;
      *(_OWORD *)a3 = *(_OWORD *)&t1.a;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&t1.tx;
    }
    CGAffineTransformMakeTranslation(&v23, v15, v12 * 0.5);
    long long v18 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v25.CGFloat a = *(_OWORD *)a3;
    *(_OWORD *)&v25.CGFloat c = v18;
    *(_OWORD *)&v25.tCGFloat x = *(_OWORD *)(a3 + 32);
    Class result = CGAffineTransformConcat(&t1, &v25, &v23);
    long long v19 = *(_OWORD *)&t1.c;
    *(_OWORD *)a3 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a3 + 16) = v19;
    long long v6 = *(_OWORD *)&t1.tx;
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F1DAB8];
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)a3 = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)(a3 + 16) = v5;
    long long v6 = *(_OWORD *)(v4 + 32);
  }
  *(_OWORD *)(a3 + 32) = v6;
  return result;
}

CGFloat FigCaptureComputeAffineTransformFromSourceAndDestRects@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  CGFloat v23 = a8 / a4;
  CGFloat v24 = a9 / a5;
  CGFloat v22 = a8 * CGRectGetMidX(*(CGRect *)&a2) / a4;
  v25.origin.CGFloat x = a2;
  v25.origin.CGFloat y = a3;
  v25.size.CGFloat width = a4;
  v25.size.CGFloat height = a5;
  CGFloat v18 = a9 * CGRectGetMidY(v25) / a5;
  v26.origin.CGFloat x = a6;
  v26.origin.CGFloat y = a7;
  v26.size.CGFloat width = a8;
  v26.size.CGFloat height = a9;
  CGFloat v19 = CGRectGetMidX(v26) - v22;
  v27.origin.CGFloat x = a6;
  v27.origin.CGFloat y = a7;
  v27.size.CGFloat width = a8;
  v27.size.CGFloat height = a9;
  CGFloat MidY = CGRectGetMidY(v27);
  *(CGFloat *)a1 = v23;
  CGFloat result = MidY - v18;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(CGFloat *)(a1 + 24) = v24;
  *(CGFloat *)(a1 + 32) = v19;
  *(CGFloat *)(a1 + 40) = result;
  return result;
}

BOOL FigCaptureIsUnityRect(double a1, double a2, double a3, double a4)
{
  v5.origin.CGFloat x = 0.0;
  v5.origin.CGFloat y = 0.0;
  v5.size.CGFloat width = 1.0;
  v5.size.CGFloat height = 1.0;
  return CGRectEqualToRect(*(CGRect *)&a1, v5);
}

double FigCaptureTransformRectToCoordinateSpaceOfRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return (a1 - a5) / a7;
}

double FigCaptureTransformPointToCoordinateSpaceOfRect(double a1, double a2, double a3, double a4, double a5)
{
  return (a1 - a3) / a5;
}

double FigCaptureRectMidPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.CGFloat x = a1;
  v10.origin.CGFloat y = a2;
  v10.size.CGFloat width = a3;
  v10.size.CGFloat height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

CGFloat FigCaptureGetTransformFromCurrentSpaceRectToTargetSpaceRect@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  uint64_t v17 = MEMORY[0x1E4F1DAB8];
  long long v31 = *MEMORY[0x1E4F1DAB8];
  long long v32 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a1 + 16) = v32;
  long long v30 = *(_OWORD *)(v17 + 32);
  *(_OWORD *)(a1 + 32) = v30;
  CGFloat v18 = -CGRectGetMidX(*(CGRect *)&a2);
  v39.origin.CGFloat x = a2;
  v39.origin.CGFloat y = a3;
  v39.size.CGFloat width = a4;
  v39.size.CGFloat height = a5;
  CGFloat MidY = CGRectGetMidY(v39);
  CGAffineTransformMakeTranslation(&t2, v18, -MidY);
  *(_OWORD *)&t1.CGFloat a = v31;
  *(_OWORD *)&t1.CGFloat c = v32;
  *(_OWORD *)&t1.tCGFloat x = v30;
  CGAffineTransformConcat((CGAffineTransform *)a1, &t1, &t2);
  CGAffineTransformMakeScale(&v36, a4 / a8, a5 / a9);
  long long v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v35.CGFloat a = *(_OWORD *)a1;
  *(_OWORD *)&v35.CGFloat c = v20;
  *(_OWORD *)&v35.tCGFloat x = *(_OWORD *)(a1 + 32);
  CGAffineTransformConcat(&t1, &v35, &v36);
  long long v21 = *(_OWORD *)&t1.c;
  *(_OWORD *)a1 = *(_OWORD *)&t1.a;
  *(_OWORD *)(a1 + 16) = v21;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&t1.tx;
  CGFloat v22 = a6;
  *(CGFloat *)&long long v21 = a7;
  CGFloat v23 = a8;
  CGFloat v24 = a9;
  CGFloat MidX = CGRectGetMidX(*(CGRect *)((char *)&v21 - 8));
  v40.origin.CGFloat x = a6;
  v40.origin.CGFloat y = a7;
  v40.size.CGFloat width = a8;
  v40.size.CGFloat height = a9;
  CGFloat v26 = CGRectGetMidY(v40);
  CGAffineTransformMakeTranslation(&v34, MidX, v26);
  long long v27 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v35.CGFloat a = *(_OWORD *)a1;
  *(_OWORD *)&v35.CGFloat c = v27;
  *(_OWORD *)&v35.tCGFloat x = *(_OWORD *)(a1 + 32);
  CGAffineTransformConcat(&t1, &v35, &v34);
  long long v28 = *(_OWORD *)&t1.c;
  *(_OWORD *)a1 = *(_OWORD *)&t1.a;
  *(_OWORD *)(a1 + 16) = v28;
  CGFloat result = t1.tx;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&t1.tx;
  return result;
}

CGAffineTransform *FigCaptureGetTransformForMirroringRotationAndCrop@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, CGFloat a5@<D0>, CGFloat a6@<D1>, CGFloat a7@<D2>, CGFloat a8@<D3>)
{
  uint64_t v16 = MEMORY[0x1E4F1DAB8];
  long long v33 = *MEMORY[0x1E4F1DAB8];
  long long v34 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a4 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a4 + 16) = v34;
  long long v32 = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a4 + 32) = v32;
  CGAffineTransformMakeTranslation(&t2, -0.5, -0.5);
  *(_OWORD *)&t1.CGFloat a = v33;
  *(_OWORD *)&t1.CGFloat c = v34;
  *(_OWORD *)&t1.tCGFloat x = v32;
  CGAffineTransformConcat((CGAffineTransform *)a4, &t1, &t2);
  if (a1)
  {
    CGAffineTransformMakeScale(&v41, -1.0, 1.0);
    long long v17 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v40.CGFloat a = *(_OWORD *)a4;
    *(_OWORD *)&v40.CGFloat c = v17;
    *(_OWORD *)&v40.tCGFloat x = *(_OWORD *)(a4 + 32);
    CGFloat v18 = &v41;
  }
  else
  {
    if (!a2) {
      goto LABEL_6;
    }
    CGAffineTransformMakeScale(&v39, 1.0, -1.0);
    long long v19 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v40.CGFloat a = *(_OWORD *)a4;
    *(_OWORD *)&v40.CGFloat c = v19;
    *(_OWORD *)&v40.tCGFloat x = *(_OWORD *)(a4 + 32);
    CGFloat v18 = &v39;
  }
  CGAffineTransformConcat(&t1, &v40, v18);
  long long v20 = *(_OWORD *)&t1.c;
  *(_OWORD *)a4 = *(_OWORD *)&t1.a;
  *(_OWORD *)(a4 + 16) = v20;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
LABEL_6:
  if (a3)
  {
    float v21 = (double)-a3 * 3.14159265 / 180.0;
    CGAffineTransformMakeRotation(&v38, v21);
    long long v22 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v40.CGFloat a = *(_OWORD *)a4;
    *(_OWORD *)&v40.CGFloat c = v22;
    *(_OWORD *)&v40.tCGFloat x = *(_OWORD *)(a4 + 32);
    CGAffineTransformConcat(&t1, &v40, &v38);
    long long v23 = *(_OWORD *)&t1.c;
    *(_OWORD *)a4 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a4 + 16) = v23;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
  }
  CGAffineTransformMakeTranslation(&v37, 0.5, 0.5);
  long long v24 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v40.CGFloat a = *(_OWORD *)a4;
  *(_OWORD *)&v40.CGFloat c = v24;
  *(_OWORD *)&v40.tCGFloat x = *(_OWORD *)(a4 + 32);
  CGAffineTransformConcat(&t1, &v40, &v37);
  long long v25 = *(_OWORD *)&t1.c;
  *(_OWORD *)a4 = *(_OWORD *)&t1.a;
  *(_OWORD *)(a4 + 16) = v25;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
  CGFloat v26 = a5;
  *(CGFloat *)&long long v25 = a6;
  CGFloat v27 = a7;
  CGFloat v28 = a8;
  CGFloat result = (CGAffineTransform *)CGRectIsNull(*(CGRect *)((char *)&v25 - 8));
  if ((result & 1) == 0)
  {
    v45.origin.CGFloat x = 0.0;
    v45.origin.CGFloat y = 0.0;
    v45.size.CGFloat width = 1.0;
    v45.size.CGFloat height = 1.0;
    v44.origin.CGFloat x = a5;
    v44.origin.CGFloat y = a6;
    v44.size.CGFloat width = a7;
    v44.size.CGFloat height = a8;
    CGFloat result = (CGAffineTransform *)CGRectEqualToRect(v44, v45);
    if ((result & 1) == 0)
    {
      memset(&t1, 0, sizeof(t1));
      FigCaptureGetTransformFromCurrentSpaceRectToTargetSpaceRect((uint64_t)&t1, 0.0, 0.0, 1.0, 1.0, a5, a6, a7, a8);
      long long v30 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v36.CGFloat a = *(_OWORD *)a4;
      *(_OWORD *)&v36.CGFloat c = v30;
      *(_OWORD *)&v36.tCGFloat x = *(_OWORD *)(a4 + 32);
      CGAffineTransform v35 = t1;
      CGFloat result = CGAffineTransformConcat(&v40, &v36, &v35);
      long long v31 = *(_OWORD *)&v40.c;
      *(_OWORD *)a4 = *(_OWORD *)&v40.a;
      *(_OWORD *)(a4 + 16) = v31;
      *(_OWORD *)(a4 + 32) = *(_OWORD *)&v40.tx;
    }
  }
  return result;
}

uint64_t FigCaptureOptimalVideoPreviewDimensionsForSourceDimensions(unint64_t a1, uint64_t *a2)
{
  int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  unsigned int v5 = MGGetSInt32Answer();
  unsigned int v6 = MGGetSInt32Answer();
  if ((int)v6 >= (int)v5) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v6;
  }
  if ((int)v6 <= (int)v5) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v6;
  }
  uint64_t v9 = v8 | (v7 << 32);
  FigCaptureMakeRectWithAspectRatioInsideDimensions(v9, 1, (float)v3 / (float)(int)v4);
  double v12 = (double)v3;
  BOOL v13 = v10 > (double)v3;
  double v14 = (double)(int)v4;
  if (v11 > (double)(int)v4) {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    double v14 = v11;
    double v12 = v10;
  }
  uint64_t v15 = (int)v12;
  if (a2) {
    *a2 = v9;
  }
  uint64_t v16 = (int)v14;
  if (v15 == 2048 && v16 == 1528)
  {
    uint64_t v17 = 0x60000000000;
    uint64_t v15 = 2048;
  }
  else if (v15 == 856 && v16 == 640)
  {
    uint64_t v17 = 0x28000000000;
    uint64_t v15 = 852;
  }
  else if (v15 == 998 && v16 == 750)
  {
    uint64_t v17 = 0x2EE00000000;
    uint64_t v15 = 1000;
  }
  else
  {
    BOOL v18 = v16 == 1080;
    uint64_t v17 = v16 << 32;
    if (v15 == 1436 && v18)
    {
      uint64_t v17 = 0x43800000000;
      uint64_t v15 = 1440;
    }
  }
  return v15 | v17;
}

uint64_t acn_sampleBufferProcessorOutputCallback(void *a1, int a2, uint64_t a3)
{
  unsigned int v5 = (void *)[a1 output];
  if (a2) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = a3;
  }
  return [v5 emitSampleBuffer:v6];
}

uint64_t MetalPerformanceShadersLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  int v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = MetalPerformanceShadersLibraryCore_frameworkLibrary;
  uint64_t v5 = MetalPerformanceShadersLibraryCore_frameworkLibrary;
  if (!MetalPerformanceShadersLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E5C26408;
    long long v7 = *(_OWORD *)&off_1E5C26418;
    v3[3] = _sl_dlopen();
    MetalPerformanceShadersLibraryCore_frameworkLibrarCGFloat y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A5B3054C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __MetalPerformanceShadersLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  MetalPerformanceShadersLibraryCore_frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t MetalPerformanceShadersLibrary()
{
  uint64_t v1 = 0;
  uint64_t result = MetalPerformanceShadersLibraryCore();
  if (!result) {
    MetalPerformanceShadersLibrary_cold_1(&v1);
  }
  return result;
}

uint64_t getMPSImageStatisticsMeanClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__17;
  long long v7 = __Block_byref_object_dispose__17;
  uint64_t v0 = getMPSImageStatisticsMeanClass_softClass;
  uint64_t v8 = getMPSImageStatisticsMeanClass_softClass;
  if (!getMPSImageStatisticsMeanClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getMPSImageStatisticsMeanClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getMPSImageStatisticsMeanClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5B30720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMPSImageStatisticsMeanClass_block_invoke(uint64_t a1)
{
  MetalPerformanceShadersLibrary();
  Class result = objc_getClass("MPSImageStatisticsMean");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getMPSImageStatisticsMeanClass_block_invoke_cold_1();
  }
  getMPSImageStatisticsMeanClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t targetRectForSampleBuffer(const void *a1)
{
  CGSize v2 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
  v6.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB28];
  v6.CGSize size = v2;
  CFDictionaryRef v3 = (const __CFDictionary *)CMGetAttachment(a1, @"BWInferenceAttachmentKey_FusionTrackerTargetRect", 0);
  if (v3) {
    return CGRectMakeWithDictionaryRepresentation(v3, &v6);
  }
  uint64_t v5 = (void *)CMGetAttachment(a1, @"FusionTrackerInput", 0);
  if (v5) {
    uint64_t v5 = (void *)[v5 highPriorityTrackerState];
  }
  return objc_msgSend(v5, "targetRect", *(_OWORD *)&v6.origin, *(_OWORD *)&v6.size);
}

__CFString *preventionReasonWithSampleBuffer(const void *a1, uint64_t a2)
{
  CFDictionaryRef v3 = (void *)CMGetAttachment(a1, @"FusionTrackerInput", 0);
  if (!v3) {
    return @"MissingFusionTrackerState";
  }
  uint64_t v4 = (void *)[v3 highPriorityTrackerState];
  if (!v4) {
    return @"MissingFusionTrackerState";
  }
  uint64_t v5 = [v4 op];
  if (a2 == 1) {
    BOOL v6 = v5 == 3;
  }
  else {
    BOOL v6 = v5 == a2;
  }
  if (v6) {
    return 0;
  }
  else {
    return @"FusionTrackerNoOp";
  }
}

void fvcs_handleStillImageCaptureFailureNotification(int a1, uint64_t a2, CFTypeRef cf, int a4, CFTypeRef a5)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a5) {
    CFRetain(a5);
  }
  uint64_t v8 = *(NSObject **)(a2 + 640);
  uint64_t v9 = *(NSObject **)(a2 + 624);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fvcs_handleStillImageCaptureFailureNotification_block_invoke;
  block[3] = &unk_1E5C264A0;
  block[4] = a2;
  void block[5] = a5;
  void block[6] = cf;
  dispatch_group_async(v8, v9, block);
}

void fvcs_handleFlashNotification(int a1, uint64_t a2, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v5 = *(NSObject **)(a2 + 640);
  BOOL v6 = *(NSObject **)(a2 + 624);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __fvcs_handleFlashNotification_block_invoke;
  v7[3] = &unk_1E5C24F10;
  v7[4] = a2;
  v7[5] = cf;
  dispatch_group_async(v5, v6, v7);
}

void __fvcs_handleFlashNotification_block_invoke(uint64_t a1)
{
  if (FigCFEqual())
  {
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 632), "captureStreamWillBeginStillImageCapture:");
  }
  else if (FigCFEqual())
  {
    memset(&v7, 0, sizeof(v7));
    HostTimeClocuint64_t k = CMClockGetHostTimeClock();
    CMClockGetTime(&v7, HostTimeClock);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 632);
    CMTime v6 = v7;
    [v4 captureStream:v3 didCaptureReferenceFrameWithPTS:&v6 referenceFrameBracketedCaptureSequenceNumber:0];
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  if (v5) {
    CFRelease(v5);
  }
}

void __fvcs_handleStillImageCaptureFailureNotification_block_invoke(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 480));
  CGSize v2 = (os_unfair_lock_s *)a1[4];
  uint32_t os_unfair_lock_opaque = v2[149]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 120);
  uint64_t v4 = (void *)a1[5];
  if (v4) {
    [NSString stringWithFormat:@"with payload %@", objc_msgSend(v4, "description")];
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (os_unfair_lock_opaque)
  {
    [*(id *)(a1[4] + 632) captureStream:a1[4] stillImageCaptureError:4294950494];
    uint64_t v6 = a1[4];
    CMTime v7 = *(void **)(v6 + 176);
    long long v11 = *MEMORY[0x1E4F1F9F8];
    uint64_t v12 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    [v7 captureStream:v6 didCompleteStillImageCaptureWithPTS:&v11 error:4294950494];
    -[BWFigVideoCaptureStream _resetStillImageCaptureState](a1[4]);
  }
  else
  {
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v9 = (const void *)a1[6];
  if (v9) {
    CFRelease(v9);
  }
  double v10 = (const void *)a1[5];
  if (v10) {
    CFRelease(v10);
  }
}

void TimestampedAudioBufferListDispose(const __CFAllocator **ptr)
{
  if (ptr)
  {
    CFAllocatorRef v2 = *ptr;
    CFAllocatorRef v3 = ptr[6];
    if (v3)
    {
      unint64_t v4 = *(unsigned int *)v3;
      if (v4)
      {
        unint64_t v5 = 0;
        uint64_t v6 = 16;
        do
        {
          if (*(void *)((char *)v3 + v6))
          {
            CFAllocatorDeallocate(v2, *(void **)((char *)v3 + v6));
            CFAllocatorRef v3 = ptr[6];
            unint64_t v4 = *(unsigned int *)v3;
          }
          ++v5;
          v6 += 16;
        }
        while (v5 < v4);
      }
      CFAllocatorDeallocate(v2, v3);
    }
    CFAllocatorDeallocate(v2, ptr);
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

uint64_t bbn_StringForPTEffectReactionType(uint64_t a1)
{
  if (bbn_StringForPTEffectReactionType_onceToken != -1) {
    dispatch_once(&bbn_StringForPTEffectReactionType_onceToken, &__block_literal_global_236);
  }
  CFAllocatorRef v2 = (void *)bbn_StringForPTEffectReactionType_sMapReactionTypeToName;
  uint64_t v3 = [NSNumber numberWithUnsignedInteger:a1];
  return [v2 objectForKeyedSubscript:v3];
}

double FigCaptureFirmwareToNVMExtrinsicMatrixTransform()
{
  return *(double *)&_PromotedConst_0;
}

double FigCaptureTransformExtrinsicMatrix(float32x4_t a1, float32x4_t a2, float32x4_t a3, double a4, simd_float3 a5, simd_float3 a6, simd_float3 a7)
{
  v22.columns[0] = a5;
  v22.columns[1] = a6;
  v22.columns[2] = a7;
  simd_float3x3 v23 = __invert_f3(v22);
  uint64_t v7 = 0;
  simd_float3 v16 = a5;
  simd_float3 v17 = a6;
  simd_float3 v18 = a7;
  simd_float3 v19 = 0u;
  simd_float3 v20 = 0u;
  simd_float3 v21 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v19 + v7 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, COERCE_FLOAT(*(_OWORD *)((char *)&v16 + v7 * 4))), a2, *(float32x2_t *)&v16.f32[v7], 1), a3, *(float32x4_t *)((char *)&v16 + v7 * 4), 2);
    v7 += 4;
  }
  while (v7 != 12);
  uint64_t v8 = 0;
  simd_float3 v16 = v19;
  simd_float3 v17 = v20;
  simd_float3 v18 = v21;
  simd_float3 v19 = 0u;
  simd_float3 v20 = 0u;
  simd_float3 v21 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v19 + v8 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v23.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v16 + v8 * 4))), (float32x4_t)v23.columns[1], *(float32x2_t *)&v16.f32[v8], 1), (float32x4_t)v23.columns[2], *(float32x4_t *)((char *)&v16 + v8 * 4), 2);
    v8 += 4;
  }
  while (v8 != 12);
  return *(double *)v19.i64;
}

uint64_t FigCaptureCreateCalibrationDataDictionaryFromSampleBufferMetadata(void *a1, uint64_t a2, void *a3, int a4, int a5, void *a6, const __CFDictionary *a7, int a8, unsigned __int8 a9, char a10)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  simd_float3 v18 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  simd_float3 v19 = objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54128]));
  objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E4F52D28]), "floatValue");
  float v21 = v20;
  memset(v49, 0, sizeof(v49));
  [a6 getBytes:v49 length:48];
  simd_float3x3 v22 = (void *)[v19 objectForKeyedSubscript:*MEMORY[0x1E4F52CA0]];
  long long v48 = 0u;
  float32x4_t v44 = (float32x4_t)0x3F800000uLL;
  long long v45 = 0x3F80000000000000uLL;
  uint64_t v47 = 1065353216;
  unint64_t v46 = 0;
  if (v22)
  {
    simd_float3x3 v23 = v22;
    if ([v22 length] != 48)
    {
      fig_log_get_emitter();
      goto LABEL_25;
    }
    [v23 getBytes:time length:48];
    v44.i32[2] = v55;
    v44.i64[0] = vzip1q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]).u64[0];
    LODWORD(v47) = DWORD2(v55);
    DWORD2(v45) = DWORD1(v55);
    *(void *)&long long v45 = vtrn2q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]).u64[0];
    unint64_t v46 = vzip1q_s32(vdupq_laneq_s32(*(int32x4_t *)time, 2), vdupq_laneq_s32(*(int32x4_t *)&time[16], 2)).u64[0];
    DWORD2(v48) = HIDWORD(v55);
    *(void *)&long long v48 = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]), *(int32x4_t *)time).u64[0];
  }
  CGSize size = (CGSize)*MEMORY[0x1E4F1DB30];
  if (!CGSizeMakeWithDictionaryRepresentation(a7, &size))
  {
    fig_log_get_emitter();
LABEL_25:
    FigDebugAssert3();
    return 0;
  }
  CGPoint v42 = (CGPoint)*MEMORY[0x1E4F1DAD8];
  *(_OWORD *)CMTime time = *(_OWORD *)a2;
  *(void *)&time[16] = *(void *)(a2 + 16);
  CMTimeGetSeconds((CMTime *)time);
  if (FigMotionComputeDistortionCenter((const __CFDictionary *)a1, (int)size.width, (int)size.height, a4, a5, (float64x2_t *)&v42, 1.0 / v21, 1.0))
  {
    fig_log_get_emitter();
    goto LABEL_25;
  }
  if (!a10)
  {
LABEL_10:
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    goto LABEL_19;
  }
  long long v24 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53E00]];
  if (v24)
  {
    [v24 floatValue];
    if (*(float *)v25.i32 == 0.0)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_10;
    }
  }
  else
  {
    v25.i32[0] = 1.0;
  }
  int32x2_t v41 = v25;
  long long v55 = 0u;
  long long v56 = 0u;
  memset(time, 0, sizeof(time));
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  CGFloat v28 = (void *)[v19 objectForKeyedSubscript:*MEMORY[0x1E4F52CE8]];
  if (v28)
  {
    uint64_t v29 = v28;
    long long v30 = (void *)[v28 objectForKeyedSubscript:*MEMORY[0x1E4F539D0]];
    if ([v30 length] == 64)
    {
      long long v31 = (_OWORD *)[v30 bytes];
      *(_OWORD *)CMTime time = *v31;
      *(_OWORD *)&time[16] = v31[1];
      long long v55 = v31[2];
      long long v56 = v31[3];
      long long v32 = (void *)[v29 objectForKeyedSubscript:*MEMORY[0x1E4F539D8]];
      if ([v32 length] == 64)
      {
        long long v33 = (long long *)[v32 bytes];
        long long v34 = v33[1];
        long long v50 = *v33;
        long long v51 = v34;
        long long v35 = v33[3];
        long long v52 = v33[2];
        long long v53 = v35;
        goto LABEL_16;
      }
    }
    goto LABEL_23;
  }
  if (FigSignalErrorAt())
  {
LABEL_23:
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    goto LABEL_25;
  }
LABEL_16:
  uint64_t v36 = 0;
  float32x4_t v37 = (float32x4_t)vdupq_lane_s32(v41, 0);
  do
  {
    *(float32x4_t *)&v58[v36] = vmlaq_f32(*(float32x4_t *)((char *)&v55 + v36), v37, *(float32x4_t *)((char *)&v52 + v36));
    *(float32x4_t *)&v57[v36] = vmlaq_f32(*(float32x4_t *)&time[v36], v37, *(float32x4_t *)((char *)&v50 + v36));
    v36 += 16;
  }
  while (v36 != 32);
  uint64_t v26 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v58 length:32];
  uint64_t v27 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v57 length:32];
LABEL_19:
  int v38 = FigDepthConvertRotationAndMirroringToExifOrientation(a8, a9);
  if (!FigDepthRotateCalibrationData(&size.width, v49, &v42.x, &v44, v38))
  {
    *(float *)&double v39 = v21 * 0.001;
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v39), @"PixelSize");
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v49, 48), @"IntrinsicMatrix");
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", &v44, 64), @"ExtrinsicMatrix");
    [v18 setObject:CGPointCreateDictionaryRepresentation(v42) forKeyedSubscript:@"LensDistortionCenter"];
    [v18 setObject:CGSizeCreateDictionaryRepresentation(size) forKeyedSubscript:@"IntrinsicMatrixReferenceDimensions"];
    [v18 setObject:v26 forKeyedSubscript:@"LensDistortionCoefficients"];
    [v18 setObject:v27 forKeyedSubscript:@"InverseLensDistortionCoefficients"];
    return [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v18];
  }
  return 0;
}

uint64_t FigCaptureCreateCalibrationDataDictionaryFromSampleBufferMetadataIncludeMaxRadius(void *a1, long long *a2, void *a3, int a4, int a5, void *a6, const __CFDictionary *a7, int a8, unsigned __int8 a9, char a10, char a11)
{
  long long v19 = *a2;
  uint64_t v20 = *((void *)a2 + 2);
  CalibrationDataDictionaryFromSampleBufferMetadatCGFloat a = FigCaptureCreateCalibrationDataDictionaryFromSampleBufferMetadata(a1, (uint64_t)&v19, a3, a4, a5, a6, a7, a8, a9, a10);
  if (!CalibrationDataDictionaryFromSampleBufferMetadata)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  double v14 = (void *)CalibrationDataDictionaryFromSampleBufferMetadata;
  uint64_t v15 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v15 addEntriesFromDictionary:v14];

  simd_float3 v16 = objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54128]));
  unsigned int v18 = 0;
  if (a11)
  {
    if (!FigCaptureGetDistortionCalibrationValidMaxRadiusInPixels(v16, (int *)&v18))
    {
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v18), @"DistortionCalibrationValidMaxRadiusInPixels");
      return [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v15];
    }
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    return 0;
  }
  return [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v15];
}

uint64_t FigCaptureGetDistortionCalibrationValidMaxRadiusInPixels(void *a1, int *a2)
{
  uint64_t result = 4294954516;
  if (a1 && a2)
  {
    int v5 = BWDeviceIsiPad();
    uint64_t v6 = *MEMORY[0x1E4F52C90];
    if (v5 && ![a1 objectForKeyedSubscript:*MEMORY[0x1E4F52C90]])
    {
      int v11 = 1837;
    }
    else
    {
      objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v6), "floatValue");
      if (v7 <= 0.0) {
        return 4294954516;
      }
      float v8 = v7;
      uint64_t v9 = *MEMORY[0x1E4F52D28];
      if (![a1 objectForKeyedSubscript:*MEMORY[0x1E4F52D28]]) {
        return 4294954516;
      }
      objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v9), "floatValue");
      if (v10 <= 0.0) {
        return 4294954516;
      }
      int v11 = (int)(float)((float)(v8 * 1000.0) / v10);
    }
    uint64_t result = 0;
    *a2 = v11;
  }
  return result;
}

uint64_t FigCaptureSensorIDFromSampleBufferMetadata(void *a1, void *a2)
{
  CFAllocatorRef v2 = objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54128]));
  uint64_t v3 = (void *)[v2 objectForKeyedSubscript:*MEMORY[0x1E4F52D08]];
  unint64_t v4 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F52F38]];
  return [v4 intValue];
}

uint64_t FigCaptureCreateColorCameraCalibrationForColorSampleBuffer(void *a1, void *a2, int a3, int a4, void *a5)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  float64x2_t v66 = *(float64x2_t *)MEMORY[0x1E4F1DAD8];
  if (a5)
  {
    CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4F53070];
    CFDictionaryRef v11 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    CGSize size = (CGSize)*MEMORY[0x1E4F1DB30];
    CFDictionaryRef v12 = (const __CFDictionary *)CMGetAttachment(a1, @"OriginalCameraIntrinsicMatrixReferenceDimensions", 0);
    if (v12)
    {
      if (CGSizeMakeWithDictionaryRepresentation(v12, &size))
      {
        uint64_t v13 = (void *)CMGetAttachment(a1, @"OriginalCameraIntrinsicMatrix", 0);
        if (v13)
        {
          double v14 = (long long *)[v13 bytes];
          long long v62 = v14[1];
          long long v63 = *v14;
          long long v61 = v14[2];
          uint64_t v15 = (void *)[a2 cameraInfo];
          simd_float3 v16 = (void *)[v15 objectForKeyedSubscript:*MEMORY[0x1E4F52CA0]];
          if (v16)
          {
            simd_float3 v17 = v16;
            if ([v16 length] == 48)
            {
              [v17 getBytes:&v68 length:48];
              int32x4_t v18 = vzip1q_s32(v68, v70);
              int32x4_t v19 = vzip2q_s32(v68, v70);
              int32x4_t v20 = vzip2q_s32(v69, (int32x4_t)0);
              float32x4_t v21 = (float32x4_t)vzip1q_s32(v18, v69);
              v21.i32[3] = 0;
              float32x4_t v22 = (float32x4_t)vzip2q_s32(v18, vdupq_lane_s32(*(int32x2_t *)v69.i8, 1));
              v22.i32[3] = 0;
              float32x4_t v23 = (float32x4_t)vzip1q_s32(v19, v20);
              v23.i32[3] = 0;
              double v24 = FigCaptureTransformExtrinsicMatrix(v21, v22, v23, *(double *)vzip2q_s32(v19, v20).i64, (simd_float3)_PromotedConst_48, unk_1A5F0C120, (simd_float3)xmmword_1A5F0C130);
              double v59 = v25;
              double v60 = v24;
              double v57 = v27;
              double v58 = v26;
              CGFloat v28 = (void *)[a2 cameraInfo];
              objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", *MEMORY[0x1E4F52D28]), "doubleValue");
              if (v29 > 0.0)
              {
                double v30 = v29;
                float v31 = 1.0 / v29;
                if (a1)
                {
                  CFDictionaryRef v32 = (const __CFDictionary *)objc_msgSend((id)CMGetAttachment(a1, v10, 0), "objectForKeyedSubscript:", *MEMORY[0x1E4F530C0]);
                  CMTimeMakeFromDictionary(&time, v32);
                  CMTimeGetSeconds(&time);
                }
                float v33 = 1.0;
                uint64_t result = FigMotionComputeDistortionCenter(v11, (int)size.width, (int)size.height, a3, a4, &v66, v31, 1.0);
                if (result)
                {
                  long long v51 = 0;
                  goto LABEL_27;
                }
                long long v35 = (void *)[(__CFDictionary *)v11 objectForKeyedSubscript:*MEMORY[0x1E4F53E00]];
                if (!v35 || ([v35 floatValue], float v33 = v36, v36 != 0.0))
                {
                  float32x4_t v37 = (void *)[a2 cameraInfo];
                  int v38 = (void *)[v37 objectForKeyedSubscript:*MEMORY[0x1E4F52CE8]];
                  if (v38)
                  {
                    double v39 = v38;
                    CGAffineTransform v40 = (void *)[v38 objectForKeyedSubscript:*MEMORY[0x1E4F539D0]];
                    if ([v40 length] == 64)
                    {
                      uint64_t v41 = [v40 bytes];
                      CGPoint v42 = (void *)[v39 objectForKeyedSubscript:*MEMORY[0x1E4F539D8]];
                      if ([v42 length] == 64)
                      {
                        double v43 = v30 * 0.001;
                        uint64_t v44 = [v42 bytes];
                        memset(v64, 0, sizeof(v64));
                        for (uint64_t i = 32; i != 64; i += 4)
                        {
                          unint64_t v46 = (float *)((char *)v64 + i);
                          *(v46 - 8) = *(float *)(v41 + i - 32) + (float)(*(float *)(v44 + i - 32) * v33);
                          *unint64_t v46 = *(float *)(v41 + i) + (float)(*(float *)(v44 + i) * v33);
                        }
                        id v47 = objc_alloc((Class)getADPolynomialsLensDistortionModelClass());
                        uint64_t v48 = [v47 initWithDistortionCenter:v64 andPolynomials:*(_OWORD *)&v66];
                        if (v48)
                        {
                          float v49 = (void *)v48;
                          id v50 = objc_alloc((Class)getADCameraCalibrationClass());
                          long long v51 = objc_msgSend(v50, "initWithIntrinsics:cameraToPlatformTransform:pixelSize:forReferenceDimensions:withDistortionModel:", v49, *(double *)&v63, *(double *)&v62, *(double *)&v61, v60, v59, v58, v57, v43, *(void *)&size.width, *(void *)&size.height);

                          if (v51)
                          {
                            ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a1);
                            size_t Width = CVPixelBufferGetWidth(ImageBuffer);
                            double Height = (double)CVPixelBufferGetHeight(ImageBuffer);
                            if (size.width != (double)Width || size.height != Height)
                            {
                              id v56 = (id)objc_msgSend(v51, "mutableCopy", size.width, size.height);
                              if (!objc_msgSend(v56, "scale:", (double)Width, Height))
                              {
                                uint64_t result = 4294954513;
                                goto LABEL_27;
                              }

                              long long v51 = (void *)[v56 copy];
                            }
                            uint64_t result = 0;
LABEL_27:
                            *a5 = v51;
                            return result;
                          }
                        }
                        else
                        {
                          long long v51 = 0;
                        }
                        uint64_t result = 4294954510;
                        goto LABEL_27;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    long long v51 = 0;
    uint64_t result = 4294954516;
    goto LABEL_27;
  }
  return 4294954516;
}

uint64_t FigCaptureCreateDepthMetadataForColorCameraCalibration(void *a1, uint64_t a2, void *a3)
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0x3F800000uLL;
  DWORD1(v29) = 1065353216;
  DWORD2(v30) = 1065353216;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  [a1 intrinsicMatrix];
  DWORD2(v25) = v6;
  DWORD2(v26) = v7;
  *(void *)&long long v25 = v8;
  *(void *)&long long v26 = v9;
  DWORD2(v27) = v10;
  *(void *)&long long v27 = v11;
  uint64_t v12 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v25 length:48];
  if (!a3) {
    return 4294954516;
  }
  uint64_t v13 = v12;
  [a1 referenceDimensions];
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v32);
  uint64_t v15 = (void *)[a1 distortionModel];
  uint64_t v16 = [v15 distortionPolynomials];
  id v17 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [v17 setObject:&unk_1EFAFF198 forKeyedSubscript:*MEMORY[0x1E4F558A8]];
  uint64_t v18 = [NSNumber numberWithBool:a2];
  [v17 setObject:v18 forKeyedSubscript:*MEMORY[0x1E4F55870]];
  [v17 setObject:&unk_1EFAFF198 forKeyedSubscript:*MEMORY[0x1E4F55860]];
  [v17 setObject:DictionaryRepresentation forKeyedSubscript:*MEMORY[0x1E4F55880]];
  [v17 setObject:v13 forKeyedSubscript:*MEMORY[0x1E4F55878]];
  uint64_t v19 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v28 length:64];
  [v17 setObject:v19 forKeyedSubscript:*MEMORY[0x1E4F55868]];
  int32x4_t v20 = NSNumber;
  [a1 pixelSize];
  uint64_t v21 = objc_msgSend(v20, "numberWithFloat:");
  [v17 setObject:v21 forKeyedSubscript:*MEMORY[0x1E4F558A0]];
  [v15 distortionCenter];
  [v17 setObject:CGPointCreateDictionaryRepresentation(v33) forKeyedSubscript:*MEMORY[0x1E4F55890]];
  uint64_t v22 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v16 length:32];
  [v17 setObject:v22 forKeyedSubscript:*MEMORY[0x1E4F55898]];
  uint64_t v23 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v16 + 32 length:32];
  [v17 setObject:v23 forKeyedSubscript:*MEMORY[0x1E4F55888]];
  objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", (FigDepthDataGetCurrentMajorVersion() << 16) | 0xEA61), *MEMORY[0x1E4F558B0]);
  CFRelease(DictionaryRepresentation);
  uint64_t result = 0;
  *a3 = v17;
  return result;
}

uint64_t FigCaptureCreateJasperToColorCameraTransformForJasperSensorConfiguration(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 4294954516;
  }
  uint64_t v3 = (void *)[a1 cameraInfo];
  unint64_t v4 = (void *)[v3 objectForKeyedSubscript:*MEMORY[0x1E4F52CA0]];
  if (!v4) {
    return 4294954516;
  }
  int v5 = v4;
  if ([v4 length] != 48) {
    return 4294954516;
  }
  [v5 getBytes:&v21 length:48];
  int32x4_t v6 = vzip1q_s32(v21, v23);
  int32x4_t v7 = vzip2q_s32(v21, v23);
  int32x4_t v8 = vzip2q_s32(v22, (int32x4_t)0);
  float32x4_t v9 = (float32x4_t)vzip1q_s32(v6, v22);
  v9.i32[3] = 0;
  float32x4_t v10 = (float32x4_t)vzip2q_s32(v6, vdupq_lane_s32(*(int32x2_t *)v22.i8, 1));
  v10.i32[3] = 0;
  float32x4_t v11 = (float32x4_t)vzip1q_s32(v7, v8);
  v11.i32[3] = 0;
  double v12 = FigCaptureTransformExtrinsicMatrix(v9, v10, v11, *(double *)vzip2q_s32(v7, v8).i64, (simd_float3)_PromotedConst_48, unk_1A5F0C120, (simd_float3)xmmword_1A5F0C130);
  uint64_t result = 0;
  *(_DWORD *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 40) = v16;
  *(_DWORD *)(a2 + 56) = v17;
  *(double *)a2 = v12;
  *(void *)(a2 + 16) = v18;
  *(void *)(a2 + 32) = v19;
  *(void *)(a2 + 48) = v20;
  return result;
}

uint64_t BWCMSampleBufferCreateCopyWithNewTimingIncludingMetadata(opaqueCMSampleBuffer *a1, CMTime *a2, long long *a3, CMSampleBufferRef *a4)
{
  CMItemCount timingArrayEntriesNeededOut = 0;
  memset(&v31, 0, sizeof(v31));
  CMSampleBufferGetPresentationTimeStamp(&lhs, a1);
  CMTime rhs = *a2;
  CMTimeSubtract(&v31, &lhs, &rhs);
  SampleTimingInfoArraCGFloat y = CMSampleBufferGetSampleTimingInfoArray(a1, 0, 0, &timingArrayEntriesNeededOut);
  if (SampleTimingInfoArray)
  {
    uint64_t v25 = SampleTimingInfoArray;
    fig_log_get_emitter();
    FigDebugAssert3();
    float32x4_t v9 = 0;
    goto LABEL_19;
  }
  if (timingArrayEntriesNeededOut)
  {
    float32x4_t v9 = (CMSampleTimingInfo *)malloc_type_calloc(0x48uLL, timingArrayEntriesNeededOut, 0x71A99004uLL);
    uint64_t v10 = CMSampleBufferGetSampleTimingInfoArray(a1, timingArrayEntriesNeededOut, v9, &timingArrayEntriesNeededOut);
    if (v10)
    {
      uint64_t v25 = v10;
      fig_log_get_emitter();
      goto LABEL_23;
    }
    CMItemCount v11 = timingArrayEntriesNeededOut;
    if (timingArrayEntriesNeededOut >= 1)
    {
      CMItemCount v12 = 0;
      p_decodeTimeStamp = &v9->decodeTimeStamp;
      do
      {
        long long v14 = *(_OWORD *)&p_decodeTimeStamp[-1].value;
        v28.CMTimeEpoch epoch = p_decodeTimeStamp[-1].epoch;
        *(_OWORD *)&v28.xpc_object_t value = v14;
        CMTime v27 = v31;
        CMTimeSubtract(&rhs, &v28, &v27);
        long long v15 = *(_OWORD *)&rhs.value;
        p_decodeTimeStamp[-1].CMTimeEpoch epoch = rhs.epoch;
        *(_OWORD *)&p_decodeTimeStamp[-1].xpc_object_t value = v15;
        if (p_decodeTimeStamp->flags)
        {
          long long v16 = *(_OWORD *)&p_decodeTimeStamp->value;
          v28.CMTimeEpoch epoch = p_decodeTimeStamp->epoch;
          *(_OWORD *)&v28.xpc_object_t value = v16;
          CMTime v27 = v31;
          CMTimeSubtract(&rhs, &v28, &v27);
          long long v17 = *(_OWORD *)&rhs.value;
          p_decodeTimeStamp->CMTimeEpoch epoch = rhs.epoch;
          *(_OWORD *)&p_decodeTimeStamp->xpc_object_t value = v17;
        }
        if (*((unsigned char *)a3 + 12) & 1) != 0 && (p_decodeTimeStamp[-2].flags)
        {
          uint64_t v18 = p_decodeTimeStamp - 2;
          long long v19 = *a3;
          v18->CMTimeEpoch epoch = *((void *)a3 + 2);
          *(_OWORD *)&v18->xpc_object_t value = v19;
        }
        p_decodeTimeStamp += 3;
        ++v12;
        CMItemCount v11 = timingArrayEntriesNeededOut;
      }
      while (timingArrayEntriesNeededOut > v12);
    }
  }
  else
  {
    CMItemCount v11 = 0;
    float32x4_t v9 = 0;
  }
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CopyWithNewTiming = CMSampleBufferCreateCopyWithNewTiming((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v11, v9, a4);
  if (CopyWithNewTiming)
  {
    uint64_t v25 = CopyWithNewTiming;
    fig_log_get_emitter();
LABEL_23:
    FigDebugAssert3();
    goto LABEL_19;
  }
  CFStringRef v22 = (const __CFString *)*MEMORY[0x1E4F53070];
  CFDictionaryRef v23 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (v23)
  {
    MutableCopCGFloat y = CFDictionaryCreateMutableCopy(v20, 0, v23);
    CMSetAttachment(*a4, v22, MutableCopy, 1u);
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
  sbu_replaceAttachedMediaWithDeepCopy(*a4);
  uint64_t v25 = 0;
LABEL_19:
  free(v9);
  return v25;
}

id BWCMSampleBufferCopyReattachAndReturnMutableMetadata(const void *a1)
{
  if (a1)
  {
    CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F53070];
    uint64_t v3 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v3) {
      id v4 = (id)[v3 mutableCopy];
    }
    else {
      id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    int v5 = v4;
    CMSetAttachment(a1, v2, v4, 1u);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    int v5 = 0;
  }
  return v5;
}

uint64_t BWCMSampleBufferCopyMetadataToSampleBuffer(const void *a1, const void *a2)
{
  if (a1 && a2)
  {
    CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F53070];
    CFDictionaryRef v4 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    if (v4)
    {
      MutableCopCGFloat y = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v4);
      CMSetAttachment(a2, v3, MutableCopy, 1u);
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t BWSampleBufferCreateFromEncodedImageSurface(__IOSurface *a1, size_t a2, CMVideoCodecType codecType, unint64_t width, CMTime *a5, CMVideoFormatDescriptionRef *formatDescriptionOut, CMSampleBufferRef *a7)
{
  CMBlockBufferRef blockBufferOut = 0;
  sampleSizeArray[0] = a2;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  if (!a1 || !a7 || !formatDescriptionOut)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_16;
  }
  int32_t v10 = width;
  unint64_t v14 = HIDWORD(width);
  long long v15 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (*formatDescriptionOut)
  {
    CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(*formatDescriptionOut);
    FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(*formatDescriptionOut);
    CMVideoFormatDescriptionRef v18 = *formatDescriptionOut;
    if (MediaSubType == codecType && Dimensions.width == v10 && Dimensions.height == v14)
    {
      if (v18) {
        goto LABEL_13;
      }
    }
    else if (v18)
    {
      CFRelease(v18);
      *CMMetadataFormatDescriptionRef formatDescriptionOut = 0;
    }
  }
  uint64_t v19 = CMVideoFormatDescriptionCreate(*v15, codecType, v10, v14, 0, formatDescriptionOut);
  if (v19)
  {
LABEL_23:
    uint64_t v23 = v19;
    fig_log_get_emitter();
    goto LABEL_24;
  }
LABEL_13:
  uint64_t v19 = IOSurfaceLock(a1, 1u, 0);
  if (v19) {
    goto LABEL_23;
  }
  BaseAddress = IOSurfaceGetBaseAddress(a1);
  *(void *)&customBlockSource.versiouint64_t n = 0;
  HIDWORD(customBlockSource.AllocateBlock) = 0;
  customBlockSource.FreeBlocuint64_t k = (void (__cdecl *)(void *, void *, size_t))sbu_unlockAndReleaseIOSurface;
  customBlockSource.refCouint64_t n = (void *)CFRetain(a1);
  CFAllocatorRef v21 = *v15;
  uint64_t v22 = CMBlockBufferCreateWithMemoryBlock(*v15, BaseAddress, a2, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], &customBlockSource, 0, a2, 0, &blockBufferOut);
  if (v22)
  {
    uint64_t v23 = v22;
    fig_log_get_emitter();
    FigDebugAssert3();
    CFRelease(a1);
    goto LABEL_16;
  }
  *(_OWORD *)&sampleTimingArray.duration.xpc_object_t value = *MEMORY[0x1E4F1F9F8];
  sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  sampleTimingArray.presentationTimeStamp = *a5;
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
  uint64_t v23 = CMSampleBufferCreate(v21, blockBufferOut, 1u, 0, 0, *formatDescriptionOut, 1, 1, &sampleTimingArray, 1, sampleSizeArray, a7);
  if (!v23) {
    goto LABEL_16;
  }
  fig_log_get_emitter();
LABEL_24:
  FigDebugAssert3();
LABEL_16:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v23;
}

void sbu_unlockAndReleaseIOSurface(__IOSurface *a1)
{
  if (a1)
  {
    IOSurfaceUnlock(a1, 1u, 0);
    CFRelease(a1);
  }
}

float BWSampleBufferComputeIOSurfaceCompressionRatio(opaqueCMSampleBuffer *a1, unint64_t *a2, unint64_t *a3)
{
  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  if (ImageBuffer && (int32x4_t v6 = ImageBuffer, CVPixelBufferGetIOSurface(ImageBuffer)))
  {
    int CompressionTypeOfPlane = IOSurfaceGetCompressionTypeOfPlane();
    float v8 = 0.0;
    if (CompressionTypeOfPlane && (int v9 = CompressionTypeOfPlane, (PlaneCount = CVPixelBufferGetPlaneCount(v6)) != 0))
    {
      size_t v11 = PlaneCount;
      unint64_t v12 = 0;
      uint64_t v13 = 0;
      unsigned int v14 = v9 - 3;
      do
      {
        if (v14 >= 2) {
          v12 += IOSurfaceGetCompressedTileDataRegionMemoryUsedOfPlane();
        }
        ++v13;
      }
      while (v11 != v13);
      if (v12)
      {
        size_t extraColumnsOnRight = 0;
        size_t extraColumnsOnLeft = 0;
        extraRowsOnBottouint64_t m = 0;
        size_t extraRowsOnTop = 0;
        CVPixelBufferGetExtendedPixels(v6, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
        size_t Width = CVPixelBufferGetWidth(v6);
        size_t v16 = extraColumnsOnLeft + Width + extraColumnsOnRight;
        size_t Height = CVPixelBufferGetHeight(v6);
        size_t v18 = extraRowsOnTop + Height + extraRowsOnBottom;
        uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v6);
        unint64_t v20 = (unint64_t)(float)(FigCapturePixelFormatBytesPerPixel(PixelFormatType) * (float)(v18 * v16));
        float v8 = (float)v12 / (float)v20;
      }
      else
      {
        unint64_t v20 = 0;
      }
    }
    else
    {
      unint64_t v20 = 0;
      unint64_t v12 = 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    unint64_t v20 = 0;
    unint64_t v12 = 0;
    float v8 = 0.0;
  }
  *a2 = v12;
  *a3 = v20;
  return v8;
}

uint64_t BWSampleBufferComputeIOSurfaceCompressionHistogram(opaqueCMSampleBuffer *a1)
{
  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  if (!ImageBuffer) {
    return 4294954516;
  }
  CFStringRef v2 = ImageBuffer;
  if (!CVPixelBufferGetIOSurface(ImageBuffer)
    || IOSurfaceGetCompressionTypeOfPlane() != 3
    || CVPixelBufferGetPlaneCount(v2) != 2)
  {
    return 4294954516;
  }
  uint64_t result = CVPixelBufferCalculateSparseHistogramOfCompressedTileDataUsageOfPlane();
  if (!result)
  {
    return CVPixelBufferCalculateSparseHistogramOfCompressedTileDataUsageOfPlane();
  }
  return result;
}

void *BWGetScaledCameraIntrinsicsMatrix(void *result, float a2)
{
  if (result)
  {
    CFStringRef v3 = result;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    if ([result length] == 48)
    {
      objc_msgSend(v3, "getBytes:length:", &v10, objc_msgSend(v3, "length"));
      float v4 = *(float *)&v10 * a2;
      float v5 = *((float *)&v11 + 1) * a2;
      double v7 = *(float *)&v12;
      int v8 = DWORD2(v12);
      double v6 = *((float *)&v12 + 1);
      CGAffineTransformMakeScale(&v9, a2, a2);
      *(float *)&long long v10 = v4;
      *((float *)&v11 + 1) = v5;
      DWORD2(v12) = v8;
      *(float32x2_t *)&long long v12 = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)&v9.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v9.c, v6), *(float64x2_t *)&v9.a, v7)));
      return (void *)[MEMORY[0x1E4F1C9B8] dataWithBytes:&v10 length:48];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t getkCVAFaceTracking_TrackedFacesArray()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_TrackedFacesArraySymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_TrackedFacesArraySymbolLoc_ptr;
  if (!getkCVAFaceTracking_TrackedFacesArraySymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary_0();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_TrackedFacesArray");
    getkCVAFaceTracking_TrackedFacesArraySymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_TrackedFacesArray_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5B3FDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_CameraColor()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_CameraColorSymbolLoc_ptr_0;
  uint64_t v6 = getkCVAFaceTracking_CameraColorSymbolLoc_ptr_0;
  if (!getkCVAFaceTracking_CameraColorSymbolLoc_ptr_0)
  {
    uint64_t v1 = (void *)AppleCVALibrary_0();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_CameraColor");
    getkCVAFaceTracking_CameraColorSymbolLoc_ptr_0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_CameraColor_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5B3FED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Extrinsics_0()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr_0;
  uint64_t v6 = getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr_0;
  if (!getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr_0)
  {
    uint64_t v1 = (void *)AppleCVALibrary_0();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_Extrinsics");
    getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr_0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_Extrinsics_cold_1_0();
  }
  return *(void *)v0;
}

void sub_1A5B3FFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Rotation_0()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_RotationSymbolLoc_ptr_0;
  uint64_t v6 = getkCVAFaceTracking_RotationSymbolLoc_ptr_0;
  if (!getkCVAFaceTracking_RotationSymbolLoc_ptr_0)
  {
    uint64_t v1 = (void *)AppleCVALibrary_0();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_Rotation");
    getkCVAFaceTracking_RotationSymbolLoc_ptr_0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_Rotation_cold_1_0();
  }
  return *(void *)v0;
}

void sub_1A5B400C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Intrinsics_0()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr_0;
  uint64_t v6 = getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr_0;
  if (!getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr_0)
  {
    uint64_t v1 = (void *)AppleCVALibrary_0();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_Intrinsics");
    getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr_0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_Intrinsics_cold_1_0();
  }
  return *(void *)v0;
}

void sub_1A5B401B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_SmoothData()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_SmoothDataSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_SmoothDataSymbolLoc_ptr;
  if (!getkCVAFaceTracking_SmoothDataSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary_0();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_SmoothData");
    getkCVAFaceTracking_SmoothDataSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_SmoothData_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5B402B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Geometry()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_GeometrySymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_GeometrySymbolLoc_ptr;
  if (!getkCVAFaceTracking_GeometrySymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary_0();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_Geometry");
    getkCVAFaceTracking_GeometrySymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_Geometry_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5B403A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_GeometryLandmarks()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_GeometryLandmarksSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_GeometryLandmarksSymbolLoc_ptr;
  if (!getkCVAFaceTracking_GeometryLandmarksSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary_0();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_GeometryLandmarks");
    getkCVAFaceTracking_GeometryLandmarksSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_GeometryLandmarks_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5B404A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_GeometryVertices()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_GeometryVerticesSymbolLoc_ptr;
  uint64_t v6 = getkCVAFaceTracking_GeometryVerticesSymbolLoc_ptr;
  if (!getkCVAFaceTracking_GeometryVerticesSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)AppleCVALibrary_0();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_GeometryVertices");
    getkCVAFaceTracking_GeometryVerticesSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_GeometryVertices_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5B40598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_DetectedFaceRect()
{
  uint64_t v3 = 0;
  float v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkCVAFaceTracking_DetectedFaceRectSymbolLoc_ptr_0;
  uint64_t v6 = getkCVAFaceTracking_DetectedFaceRectSymbolLoc_ptr_0;
  if (!getkCVAFaceTracking_DetectedFaceRectSymbolLoc_ptr_0)
  {
    uint64_t v1 = (void *)AppleCVALibrary_0();
    v4[3] = (uint64_t)dlsym(v1, "kCVAFaceTracking_DetectedFaceRect");
    getkCVAFaceTracking_DetectedFaceRectSymbolLoc_ptr_0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0) {
    getkCVAFaceTracking_DetectedFaceRect_cold_1();
  }
  return *(void *)v0;
}

void sub_1A5B40690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BWSampleBufferCreateFromDataBuffer(__CVBuffer *a1, long long *a2, CMMediaType a3, CFTypeRef *a4, CMAttachmentBearerRef *a5)
{
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  return BWSampleBufferCreateFromDataBufferWithNumberOfPoints(a1, (uint64_t)&v6, a3, a4, a5, 0xFFFFFFFF);
}

CFTypeRef BWSampleBufferGetCVDataBuffer(opaqueCMSampleBuffer *a1)
{
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a1);
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1EC38];
  return CMGetAttachment(DataBuffer, v2, 0);
}

uint64_t BWSampleBufferCreateAttachedMediaFromPixelBuffer(opaqueCMSampleBuffer *a1, uint64_t a2, __CVBuffer *a3, CFTypeRef *a4, uint64_t a5, void *a6, int a7, CMAttachmentBearerRef *a8)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  memset(&timingArrayOut, 0, sizeof(timingArrayOut));
  CMAttachmentBearerRef target = 0;
  if (!a1 || !a2 || !a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v26 = 4294954516;
    goto LABEL_20;
  }
  SampleTimingInfoArraCGFloat y = CMSampleBufferGetSampleTimingInfoArray(a1, 1, &timingArrayOut, 0);
  if (SampleTimingInfoArray)
  {
    uint64_t v26 = SampleTimingInfoArray;
    fig_log_get_emitter();
LABEL_28:
    FigDebugAssert3();
    goto LABEL_20;
  }
  CMSampleTimingInfo sampleTiming = timingArrayOut;
  uint64_t v16 = BWSampleBufferCreateFromPixelBufferWithTimingInfo(a3, &sampleTiming, a4, (CMSampleBufferRef *)&target);
  if (v16)
  {
    uint64_t v26 = v16;
    fig_log_get_emitter();
    goto LABEL_28;
  }
  long long v17 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:a5];
  uint64_t v18 = *MEMORY[0x1E4F54128];
  uint64_t v19 = [v17 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
  CFStringRef v20 = (const __CFString *)*MEMORY[0x1E4F53070];
  if (!v19) {
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend((id)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0), "objectForKeyedSubscript:", v18), v18);
  }
  CMSetAttachment(target, v20, v17, 1u);
  if (a7) {
    BWPropagateZoomInformationToAttachedMediaSampleBuffer(a1, target);
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v21 = [a6 countByEnumeratingWithState:&v28 objects:v35 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v29 != v23) {
          objc_enumerationMutation(a6);
        }
        CMSetAttachment(target, *(CFStringRef *)(*((void *)&v28 + 1) + 8 * i), (CFTypeRef)[a6 objectForKeyedSubscript:*(void *)(*((void *)&v28 + 1) + 8 * i)], 1u);
      }
      uint64_t v22 = [a6 countByEnumeratingWithState:&v28 objects:v35 count:16];
    }
    while (v22);
  }
  if (!CMGetAttachment(target, @"StillSettings", 0))
  {
    CFTypeRef v25 = CMGetAttachment(a1, @"StillSettings", 0);
    CMSetAttachment(target, @"StillSettings", v25, 1u);
  }
  uint64_t v26 = 0;
LABEL_20:
  if (a8)
  {
    *a8 = target;
  }
  else if (target)
  {
    CFRelease(target);
  }
  return v26;
}

void BWPropagateZoomInformationToAttachedMediaSampleBuffer(const void *a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F53070];
      CFTypeRef v4 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
      if (v4)
      {
        uint64_t v5 = (void *)v4;
        long long v6 = (void *)CMGetAttachment(a2, v3, 0);
        if (v6)
        {
          uint64_t v7 = v6;
          FigCaptureMetadataUtilitiesCopyZoomRelatedMetadata(v5, v6);
          CMSetAttachment(a2, v3, v7, 1u);
        }
      }
    }
  }
}

uint64_t BWSampleBufferSetAttachedMediaFromPixelBuffer(opaqueCMSampleBuffer *a1, uint64_t a2, __CVBuffer *a3, CFTypeRef *a4, uint64_t a5, void *a6, int a7)
{
  CFTypeRef cf = 0;
  uint64_t v9 = BWSampleBufferCreateAttachedMediaFromPixelBuffer(a1, a2, a3, a4, a5, a6, a7, &cf);
  if (v9)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    BWSampleBufferSetAttachedMedia(a1, a2, (uint64_t)cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  return v9;
}

uint64_t BWSampleBufferAttachmentsGetAttachedMedia(void *a1, uint64_t a2)
{
  CFStringRef v3 = (void *)[a1 objectForKeyedSubscript:@"AttachedMedia"];
  return [v3 objectForKeyedSubscript:a2];
}

uint64_t BWSampleBufferFilterWithAllowedAttachedMedia(const void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  CFTypeRef v4 = objc_msgSend((id)CMGetAttachment(a1, @"AttachedMedia", 0), "allKeys", 0);
  uint64_t result = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * v8);
        if (([a2 containsObject:v9] & 1) == 0) {
          BWSampleBufferSetAttachedMedia(a1, v9, 0);
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t result = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

uint64_t BWSampleBufferFilterWithDisallowedAttachedMedia(const void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  CFTypeRef v4 = objc_msgSend((id)CMGetAttachment(a1, @"AttachedMedia", 0), "allKeys", 0);
  uint64_t result = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * v8);
        if ([a2 containsObject:v9]) {
          BWSampleBufferSetAttachedMedia(a1, v9, 0);
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t result = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

CFTypeRef BWSampleBufferCreateWithSwappingPrimaryAndAttachedMedia(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (const void *)objc_msgSend((id)CMGetAttachment(a1, @"AttachedMedia", 0), "objectForKeyedSubscript:", a3);
  if (!v6) {
    return 0;
  }
  CFTypeRef v7 = CFRetain(v6);
  if (v7)
  {
    BWSampleBufferSetAttachedMedia(a1, a3, 0);
    BWSampleBufferPropagateAttachedMedia(a1, v7);
    CMRemoveAttachment(a1, @"AttachedMedia");
    BWSampleBufferSetAttachedMedia(v7, a2, (uint64_t)a1);
  }
  return v7;
}

uint64_t BWMetadataAttachmentKeyForAttachedMediaKey(void *a1)
{
  if ([a1 isEqualToString:@"Depth"])
  {
    uint64_t v2 = MEMORY[0x1E4F55B40];
    return *(void *)v2;
  }
  if ([a1 isEqualToString:0x1EFA74420])
  {
    uint64_t v2 = MEMORY[0x1E4F55B80];
    return *(void *)v2;
  }
  if (([a1 isEqualToString:@"PersonSemanticsHair"] & 1) != 0
    || ([a1 isEqualToString:@"PersonSemanticsSkin"] & 1) != 0
    || ([a1 isEqualToString:@"PersonSemanticsTeeth"] & 1) != 0
    || ([a1 isEqualToString:@"PersonSemanticsGlasses"] & 1) != 0
    || [a1 isEqualToString:0x1EFA745A0])
  {
    uint64_t v2 = MEMORY[0x1E4F55B88];
    return *(void *)v2;
  }
  return 0;
}

uint64_t BWSampleBufferGetPortType(const void *a1)
{
  uint64_t v1 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  uint64_t v2 = *MEMORY[0x1E4F54128];
  return [v1 objectForKeyedSubscript:v2];
}

__CFString *BWVideoSampleBufferToDisplayString()
{
  return &stru_1EFA403E0;
}

uint64_t BWStillImageSampleBufferToShortDisplayString(const void *a1)
{
  uint64_t v2 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  CFStringRef v3 = (void *)[v2 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
  uint64_t v25 = BWPortTypeToDisplayString(v3, v4);
  char v24 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54138]), "BOOLValue");
  uint64_t v5 = *MEMORY[0x1E4F54328];
  if ([v2 objectForKeyedSubscript:*MEMORY[0x1E4F54328]]) {
    uint64_t v23 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", v5), "intValue");
  }
  else {
    uint64_t v23 = 0xFFFFFFFFLL;
  }
  uint64_t v6 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D38]), "intValue");
  uint64_t v7 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F531E0]), "intValue");
  int v8 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F541A8]), "BOOLValue");
  int v9 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53E88]), "BOOLValue");
  int v10 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53CA0]), "BOOLValue");
  char v11 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54188]), "BOOLValue");
  uint64_t v12 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F542D8]), "longValue");
  if (v10) {
    long long v13 = @"AmbientFL";
  }
  else {
    long long v13 = @"Aux";
  }
  if (v10)
  {
    if (!v8) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v11) {
    goto LABEL_23;
  }
  if (!v9)
  {
    if (v24)
    {
      long long v13 = @"PB";
      if (!v8) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    if ((v23 & 0x80000000) != 0)
    {
      if ((int)v6 < 1)
      {
        long long v13 = @"SF";
        if (!v8) {
          goto LABEL_25;
        }
LABEL_24:
        long long v13 = (__CFString *)[NSString stringWithFormat:@"%@, SIFR", v13];
        goto LABEL_25;
      }
      if ((int)v7 < 1) {
        uint64_t v14 = objc_msgSend(NSString, "stringWithFormat:", @"B%i", v6, v21);
      }
      else {
        uint64_t v14 = objc_msgSend(NSString, "stringWithFormat:", @"G%iB%i", v7, v6);
      }
    }
    else
    {
      uint64_t v14 = objc_msgSend(NSString, "stringWithFormat:", @"TM%i", v23, v21);
    }
    long long v13 = (__CFString *)v14;
LABEL_23:
    if (!v8) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F10]), "BOOLValue")) {
    long long v13 = @"FL";
  }
  else {
    long long v13 = @"PF";
  }
  if (v8) {
    goto LABEL_24;
  }
LABEL_25:
  unint64_t v15 = (unint64_t)CMGetAttachment(a1, @"StillImageCaptureFrameFlags", 0);
  unint64_t v16 = (unint64_t)CMGetAttachment(a1, @"StillImageProcessingFlags", 0);
  if (v15 | v16)
  {
    long long v17 = (void *)v16;
    uint64_t v18 = NSString;
    uint64_t v19 = BWStillImageCaptureFrameFlagsToShortString([(id)v15 unsignedLongLongValue]);
    long long v13 = (__CFString *)[v18 stringWithFormat:@"%@ (%@ - %@)", v13, v19, FigAppleMakerNoteStillImageProcessingFlagsToShortString(objc_msgSend(v17, "unsignedIntValue"))];
  }
  if (v25) {
    return [NSString stringWithFormat:@"%@ (%@): CID:%ld", v13, v25, v12];
  }
  else {
    return [NSString stringWithFormat:@"%@: CID:%ld", v13, v12, v22];
  }
}

uint64_t AppleCVALibrary_0()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!AppleCVALibraryCore_frameworkLibrary_0)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __AppleCVALibraryCore_block_invoke_0;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E5C26E28;
    uint64_t v4 = 0;
    AppleCVALibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  uint64_t v0 = AppleCVALibraryCore_frameworkLibrary_0;
  if (!AppleCVALibraryCore_frameworkLibrary_0) {
    AppleCVALibrary_cold_1_0(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __AppleCVALibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  AppleCVALibraryCore_frameworkLibrary_0 = result;
  return result;
}

void sub_1A5B4C8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A5B4CA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t FigExternalStorageDeviceManagerServerStart()
{
  v3[0] = 1;
  v3[1] = FigExternalStorageDeviceManagerServerReplyingMessageHandler;
  v3[2] = FigExternalStorageDeviceManagerServerNoReplyMessageHandler;
  memset(&v3[3], 0, 24);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F220C0], (const void *)*MEMORY[0x1E4F1CFD0]);
  uint64_t v1 = FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.externalstoragedevicemanager.xpc", (uint64_t)v3, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v1;
}

uint64_t FigExternalStorageDeviceManagerServerReplyingMessageHandler(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v6 = OpCode;
    fig_log_get_emitter();
  }
  else
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t value = 0;
    uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
    if (v4)
    {
      uint64_t v6 = v4;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v6 = 4294954513;
    }
    fig_log_get_emitter();
  }
  FigDebugAssert3();
  return v6;
}

uint64_t FigExternalStorageDeviceManagerServerNoReplyMessageHandler(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v4 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    return 4294951138;
  }
  return v4;
}

uint64_t HandleExternalStorageDeviceManagerBeginMonitoring(uint64_t a1, uint64_t a2)
{
  ConnectionRefcouint64_t n = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (ConnectionRefcon)
  {
    uint64_t v4 = ConnectionRefcon;
    pthread_mutex_lock(*ConnectionRefcon);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, void, pthread_mutex_t **, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v6 + 8);
    if (v7)
    {
      uint64_t v8 = v7(a2, 0, v4, externalStorageDeviceManagerCallback);
      if (!v8)
      {
LABEL_10:
        pthread_mutex_unlock(*v4);
        return v8;
      }
    }
    else
    {
      uint64_t v8 = 4294954514;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_10;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t HandleExternalStorageDeviceManagerCopyStorageDeviceNextAvailableURLArray(uint64_t a1, uint64_t a2)
{
  CFTypeRef v12 = 0;
  CFTypeRef cf = 0;
  ConnectionRefcouint64_t n = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (!ConnectionRefcon)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_17;
  }
  uint64_t v4 = ConnectionRefcon;
  pthread_mutex_lock(*ConnectionRefcon);
  if (*((_DWORD *)v4 + 7) == 2)
  {
    uint64_t v5 = FigXPCMessageCopyCFArray();
    if (v5 || (uint64_t v5 = FigXPCMessageCopyCFString(), v5))
    {
      uint64_t v10 = v5;
      fig_log_get_emitter();
    }
    else
    {
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef, CFTypeRef *))(v7 + 16);
      if (v8)
      {
        uint64_t v9 = v8(a2, 0, 0, cf, &v12);
        if (v9)
        {
          uint64_t v10 = v9;
        }
        else
        {
          uint64_t v10 = FigXPCMessageSetCFArray();
          if (!v10) {
            goto LABEL_15;
          }
        }
      }
      else
      {
        uint64_t v10 = 4294954514;
      }
      fig_log_get_emitter();
    }
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v10 = FigSignalErrorAt();
  }
LABEL_15:
  pthread_mutex_unlock(*v4);
  if (cf) {
    CFRelease(cf);
  }
LABEL_17:
  if (v12) {
    CFRelease(v12);
  }
  return v10;
}

uint64_t HandleExternalStorageDeviceManagerCopyStorageDeviceNextAvailableSecurityScopeWrappedURLDataArray(uint64_t a1, uint64_t a2)
{
  CFTypeRef v12 = 0;
  CFTypeRef cf = 0;
  ConnectionRefcouint64_t n = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (!ConnectionRefcon)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_17;
  }
  uint64_t v4 = ConnectionRefcon;
  pthread_mutex_lock(*ConnectionRefcon);
  if (*((_DWORD *)v4 + 7) == 2)
  {
    uint64_t v5 = FigXPCMessageCopyCFArray();
    if (v5 || (uint64_t v5 = FigXPCMessageCopyCFString(), v5))
    {
      uint64_t v10 = v5;
      fig_log_get_emitter();
    }
    else
    {
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef, CFTypeRef *))(v7 + 24);
      if (v8)
      {
        uint64_t v9 = v8(a2, 0, 0, cf, &v12);
        if (v9)
        {
          uint64_t v10 = v9;
        }
        else
        {
          uint64_t v10 = FigXPCMessageSetCFArray();
          if (!v10) {
            goto LABEL_15;
          }
        }
      }
      else
      {
        uint64_t v10 = 4294954514;
      }
      fig_log_get_emitter();
    }
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v10 = FigSignalErrorAt();
  }
LABEL_15:
  pthread_mutex_unlock(*v4);
  if (cf) {
    CFRelease(cf);
  }
LABEL_17:
  if (v12) {
    CFRelease(v12);
  }
  return v10;
}

uint64_t HandleExternalStorageDeviceManagerCopyStorageDeviceProperty()
{
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v5 = 0;
  ConnectionRefcouint64_t n = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (ConnectionRefcon)
  {
    uint64_t v1 = ConnectionRefcon;
    pthread_mutex_lock(*ConnectionRefcon);
    uint64_t v2 = FigXPCMessageCopyCFString();
    if (v2)
    {
      uint64_t v4 = v2;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v4 = FigSignalErrorAt();
    }
    pthread_mutex_unlock(*v1);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v4 = FigSignalErrorAt();
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v4;
}

uint64_t HandleExternalStorageDeviceManagerCheckAuthorizationStatus(uint64_t a1, int a2, uint64_t a3)
{
  ConnectionRefcouint64_t n = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (ConnectionRefcon)
  {
    uint64_t v7 = ConnectionRefcon;
    pthread_mutex_lock(*ConnectionRefcon);
    if (*((_DWORD *)v7 + 7))
    {
      uint64_t v8 = 0;
    }
    else
    {
      xpc_connection_get_audit_token();
      memset(v12, 0, sizeof(v12));
      uint64_t v8 = (__CFString *)FigCaptureCopyClientCodeSigningIdentifier(v12);
      unint64_t v9 = objc_msgSend((id)objc_msgSend((id)getICAccessManagerClass(), "connection:stateForAccessType:", a1, &unk_1EFAFF240), "integerValue");
      if (v9 > 2)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v10 = FigSignalErrorAt();
LABEL_11:
        pthread_mutex_unlock(*v7);
        if (v8) {

        }
        return v10;
      }
      *((_DWORD *)v7 + 7) = v9;
    }
    uint64_t v10 = 0;
    if (!a2)
    {
      if (a3)
      {
        objc_msgSend(NSNumber, "numberWithInt:");
        uint64_t v10 = FigXPCMessageSetCFNumber();
        if (v10)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
      }
    }
    goto LABEL_11;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t HandleExternalStorageDeviceManagerRequestAuthorization(uint64_t a1)
{
  ConnectionRefcouint64_t n = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (ConnectionRefcon)
  {
    long long v3 = ConnectionRefcon;
    pthread_mutex_lock(*ConnectionRefcon);
    global_queue = dispatch_get_global_queue(2, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __HandleExternalStorageDeviceManagerRequestAuthorization_block_invoke;
    block[3] = &unk_1E5C24F10;
    block[4] = a1;
    void block[5] = v3;
    dispatch_async(global_queue, block);
    pthread_mutex_unlock(*v3);
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

void figExternalStorageDeviceManager_servedObjectRefconDestructor(uint64_t a1)
{
  if (a1) {
    _disposeExternalStorageDeviceManagerServerStorage(a1);
  }
}

void _disposeExternalStorageDeviceManagerServerStorage(uint64_t a1)
{
  if (a1)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)a1);
    *(unsigned char *)(a1 + 24) = 1;
    uint64_t v2 = *(const void **)(a1 + 32);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 32) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
    FigSimpleMutexDestroy();
    free((void *)a1);
  }
}

uint64_t externalStorageDeviceManagerCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)a3);
    if (!*(unsigned char *)(a3 + 24))
    {
      if (FigXPCCreateBasicMessage()
        || FigXPCMessageSetCFArray()
        || FigXPCMessageSetCFError())
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      else
      {
        xpc_connection_send_message(*(xpc_connection_t *)(a3 + 8), 0);
      }
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)a3);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    FigSignalErrorAt();
  }
  return FigXPCRelease();
}

uint64_t getICAccessManagerClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  CFTypeRef v6 = __Block_byref_object_copy__18;
  uint64_t v7 = __Block_byref_object_dispose__18;
  uint64_t v0 = getICAccessManagerClass_softClass;
  uint64_t v8 = getICAccessManagerClass_softClass;
  if (!getICAccessManagerClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getICAccessManagerClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getICAccessManagerClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5B4F014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getICAccessManagerClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!ImageCaptureCoreLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __ImageCaptureCoreLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E5C26EB8;
    uint64_t v5 = 0;
    ImageCaptureCoreLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!ImageCaptureCoreLibraryCore_frameworkLibrary) {
    __getICAccessManagerClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("ICAccessManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getICAccessManagerClass_block_invoke_cold_2();
  }
  getICAccessManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __ImageCaptureCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ImageCaptureCoreLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

uint64_t __HandleExternalStorageDeviceManagerRequestAuthorization_block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  xpc_connection_get_audit_token();
  uint64_t v2 = *(void *)(a1 + 40);
  if (!*(_DWORD *)(v2 + 28))
  {
    long long v21 = 0u;
    long long v22 = 0u;
    int IsRunningInXCTest = FigCaptureClientIsRunningInXCTest(&v21);
    long long v21 = 0u;
    long long v22 = 0u;
    int IsRunningInCameraOrDerivative = FigCaptureClientIsRunningInCameraOrDerivative(&v21);
    long long v21 = 0u;
    long long v22 = 0u;
    int IsInternalCommandLineTool = FigCaptureClientIsInternalCommandLineTool(&v21);
    uint64_t v2 = *(void *)(a1 + 40);
    if (IsRunningInCameraOrDerivative || IsRunningInXCTest || IsInternalCommandLineTool)
    {
      *(_DWORD *)(v2 + 28) = 2;
    }
    else
    {
      long long v18 = 0u;
      long long v19 = 0u;
      pthread_mutex_lock(*(pthread_mutex_t **)v2);
      long long v21 = 0u;
      long long v22 = 0u;
      CFStringRef v6 = FigCaptureCopyClientCodeSigningIdentifier(&v21);
      if (v6)
      {
        uint64_t v7 = (__CFString *)v6;
        uint64_t v17 = 0;
        uint64_t v8 = (void *)[objc_alloc(MEMORY[0x1E4F223C8]) initWithBundleIdentifier:v6 allowPlaceholder:0 error:&v17];
        unint64_t v9 = v8;
        if (!v8 || v17)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          FigSignalErrorAt();
        }
        else
        {
          uint64_t v10 = [v8 localizedName];
          v20[0] = *MEMORY[0x1E4F1D990];
          *(void *)&long long v21 = objc_msgSend(NSString, "stringWithFormat:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithIdentifier:", @"com.apple.CMCapture"), "localizedStringForKey:value:table:", @"SSD_APP_ACCESS_REQUEST_HEADER", &stru_1EFA403E0, @"FigExternalStorageDeviceManagerServer"), v10);
          v20[1] = *MEMORY[0x1E4F1D9A8];
          *((void *)&v21 + 1) = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithIdentifier:", @"com.apple.CMCapture"), "localizedStringForKey:value:table:", @"SSD_APP_ACCESS_REQUEST_MESSAGE", &stru_1EFA403E0, @"FigExternalStorageDeviceManagerServer");
          v20[2] = *MEMORY[0x1E4F1D9E0];
          *(void *)&long long v22 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithIdentifier:", @"com.apple.CMCapture"), "localizedStringForKey:value:table:", @"SSD_ALLOW_BUTTON", &stru_1EFA403E0, @"FigExternalStorageDeviceManagerServer");
          v20[3] = *MEMORY[0x1E4F1D9D0];
          *((void *)&v22 + 1) = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithIdentifier:", @"com.apple.CMCapture"), "localizedStringForKey:value:table:", @"SSD_DONT_ALLOW_BUTTON", &stru_1EFA403E0, @"FigExternalStorageDeviceManagerServer");
          void v20[4] = *MEMORY[0x1E4F1D9B8];
          int v11 = 1;
          uint64_t v23 = [NSNumber numberWithBool:1];
          v20[5] = *MEMORY[0x1E4FA7340];
          uint64_t v24 = [NSNumber numberWithBool:1];
          int v12 = objc_msgSend((id)getICAccessManagerClass(), "captureUserIntentForBundleIdentifier:withNotification:", v7, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v21, v20, 6));
          [(id)getICAccessManagerClass() addBundleIdentifier:v7];
          ICAccessManagerClass = (void *)getICAccessManagerClass();
          if (v12)
          {
            int v11 = 2;
            uint64_t v14 = v7;
            uint64_t v15 = 2;
          }
          else
          {
            uint64_t v14 = v7;
            uint64_t v15 = 1;
          }
          [ICAccessManagerClass updateBundleIdentifier:v14 accessType:1 withState:v15];
          *(_DWORD *)(v2 + 28) = v11;
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)v2);

        if (v9) {
      }
        }
      else
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        FigSignalErrorAt();
        pthread_mutex_unlock(*(pthread_mutex_t **)v2);
      }
      uint64_t v2 = *(void *)(a1 + 40);
    }
  }
  *(void *)&long long v21 = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)v2);
  if (!*(unsigned char *)(v2 + 24))
  {
    if (FigXPCCreateBasicMessage()
      || ([NSNumber numberWithInt:*(unsigned int *)(v2 + 28)],
          FigXPCMessageSetCFNumber()))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      xpc_connection_send_message(*(xpc_connection_t *)(v2 + 8), (xpc_object_t)v21);
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)v2);
  return FigXPCRelease();
}

uint64_t FigCaptureDeferredContainerManagerRemoteIsConnectionValid(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 9)) {
    return 1;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0;
}

uint64_t containerManager_deadConnectionCallback(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = result;
  if (!a1)
  {
    fig_log_get_emitter();
    uint64_t result = FigDebugAssert3();
  }
  *(unsigned char *)(v3 + 9) = 1;
  return result;
}

void containerManager_deadServerCallback()
{
}

void __containerManager_deadServerCallback_block_invoke()
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"ServerConnectionDied", 0, 0, 0);
}

uint64_t captureDeferredContainerManagerRemote_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    *(unsigned char *)(DerivedStorage + 8) = 1;
    if (!*(unsigned char *)(DerivedStorage + 9))
    {
      uint64_t v3 = FigXPCCreateBasicMessage();
      if (v3)
      {
        uint64_t v1 = v3;
        fig_log_get_emitter();
      }
      else
      {
        uint64_t v1 = FigXPCRemoteClientSendSyncMessage();
        if (!v1)
        {
LABEL_7:
          FigXPCRelease();
          FigXPCRemoteClientKillServerOnTimeout();
          return v1;
        }
        fig_log_get_emitter();
      }
      FigDebugAssert3();
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t captureDeferredContainerManagerRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureDeferredContainerManagerRemote_Invalidate();
  uint64_t result = sCaptureDeferredContainerManagerRemoteClient;
  if (sCaptureDeferredContainerManagerRemoteClient) {
    uint64_t result = FigXPCRemoteClientDisassociateObject();
  }
  if (!*(unsigned char *)(DerivedStorage + 9))
  {
    if (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigXPCRelease();
    return FigXPCRemoteClientKillServerOnTimeout();
  }
  return result;
}

__CFString *captureDeferredContainerManagerRemote_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    CFStringRef v6 = " (invalidated)";
  }
  else {
    CFStringRef v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptureDeferredContainerManagerRemote %p retainCount: %ld%s allocator: %p, objectID: %lld>", a1, v5, v6, v7, *(void *)DerivedStorage);
  return Mutable;
}

uint64_t captureDeferredContainerManagerRemote_CopyProperty()
{
  return 4294954512;
}

uint64_t captureDeferredContainerManagerRemote_SetProperty()
{
  return 4294954512;
}

uint64_t captureDeferredContainerManagerRemote_CopyContainerIdentifiers(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  if (captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684235113, a2, 0, &v3)
    || FigXPCRemoteClientSendSyncMessageCreatingReply()
    || FigXPCMessageCopyCFObject())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  FigXPCRelease();
  return 0;
}

uint64_t captureDeferredContainerManagerRemote_QueryContainerStatus(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8 = 0;
  if (!a4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v6 = 4294951162;
    goto LABEL_5;
  }
  uint64_t v5 = captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684238691, a2, a3, &v8);
  if (v5)
  {
    uint64_t v6 = v5;
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    goto LABEL_5;
  }
  uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v6)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  *a4 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20290]);
LABEL_5:
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

xpc_object_t captureDeferredContainerManagerRemote_CopyRemoteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  if (captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684235107, a2, a3, &v6)
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    xpc_object_t v4 = 0;
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(0, (const char *)*MEMORY[0x1E4F20290]);
    xpc_object_t v4 = value;
    if (value)
    {
      xpc_retain(value);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredContainerManagerRemote_ReleaseRemoteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v3 = captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684238947, a2, a3, &v6);
  if (v3)
  {
    uint64_t v4 = v3;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v4)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredContainerManagerRemote_DeleteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v3 = captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684235363, a2, a3, &v6);
  if (v3)
  {
    uint64_t v4 = v3;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v4)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredContainerManagerRemote_WaitForShaderCompilation(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684239223, 0, 0, &v4);
  if (v1)
  {
    uint64_t v2 = v1;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  uint64_t v2 = FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
  if (v2)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t captureDeferredContainerManagerRemote_createContainerManagerMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if ((*(unsigned char *)(DerivedStorage + 8) || *(unsigned char *)(DerivedStorage + 9))
      && (fig_log_get_emitter(), FigDebugAssert3(), uint64_t v9 = FigSignalErrorAt(), v9)
      || (uint64_t v9 = FigXPCCreateBasicMessage(), v9)
      || a3 && (uint64_t v9 = FigXPCMessageSetCFString(), v9)
      || a4 && (uint64_t v9 = FigXPCMessageSetCFString(), v9))
    {
      uint64_t v10 = v9;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      uint64_t v10 = 0;
      *a5 = 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return v10;
}

id udp_createUBStatisticsFromFrameStatistics(objc_class *a1, void *a2, uint64_t a3)
{
  id v5 = objc_alloc_init(a1);
  *(float *)&double v6 = (float)[a2 conversionGain] * 0.000015259;
  [v5 setConversionGain:v6];
  *(float *)&double v7 = (float)objc_msgSend(a2, "readNoise_1x") * 0.000015259;
  objc_msgSend(v5, "setReadNoise_1x:", v7);
  *(float *)&double v8 = (float)objc_msgSend(a2, "readNoise_8x") * 0.000015259;
  objc_msgSend(v5, "setReadNoise_8x:", v8);
  [a2 integrationTime];
  objc_msgSend(v5, "setIntegrationTime:");
  *(float *)&double v9 = (float)[a2 agc] * 0.0039062;
  [v5 setAgc:v9];
  *(float *)&double v10 = (float)[a2 ispDGain] * 0.0039062;
  [v5 setIspDGain:v10];
  *(float *)&double v11 = (float)[a2 sensorDGain] * 0.0039062;
  [v5 setSensorDGain:v11];
  [a2 ispDGainRangeExpansionFactor];
  objc_msgSend(v5, "setIspDGainRangeExpansionFactor:");
  [a2 gain];
  objc_msgSend(v5, "setGain:");
  objc_msgSend(v5, "setAeLimitsReached:", objc_msgSend(a2, "aeLimitsReached"));
  *(float *)&double v12 = (float)[a2 aeAverage];
  [v5 setAeAverage:v12];
  *(float *)&double v13 = (float)[a2 aeTarget];
  [v5 setAeTarget:v13];
  objc_msgSend(v5, "setMotionFromAEMatrix:", objc_msgSend(a2, "motionFromAEMatrix"));
  [v5 setStationary:a3];
  [a2 motionDataBiasErrorEstimate];
  objc_msgSend(v5, "setMotionDataBiasErrorEstimate:");
  if ([a2 aeStatistics])
  {
    uint64_t v14 = (void *)[a2 aeStatistics];
    objc_msgSend(v5, "setAeThumbnail:", objc_msgSend(v14, "objectForKeyedSubscript:", *MEMORY[0x1E4F53620]));
    uint64_t v15 = (void *)[a2 aeStatistics];
    objc_msgSend(v5, "setAeThumbnailWidth:", objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E4F53630]), "intValue"));
    unint64_t v16 = (void *)[a2 aeStatistics];
    objc_msgSend(v5, "setAeThumbnailHeight:", objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", *MEMORY[0x1E4F53628]), "intValue"));
  }
  return v5;
}

unint64_t ubp_addFrame(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unint64_t result = -[BWUBProcessorRequest processingType](a2);
  if (!result) {
    return result;
  }
  if ([(id)a2 err]
    || !-[BWUBProcessorRequest useFrameForMultiFrameProcessing:](a2, a4))
  {
    if (dword_1E96B6888)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    unint64_t result = objc_msgSend((id)a2, "err", v40, v42);
    if (a2)
    {
      if (result)
      {
        unint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "captureStreamSettings"), "adaptiveBracketingParameters");
        if (result)
        {
          unint64_t result = objc_msgSend((id)objc_msgSend((id)a2, "input"), "errorRecoveryFrame");
          if (!result)
          {
            unint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input"), "captureStreamSettings"), "isUnifiedBracketingErrorRecoveryFrame:isReferenceFrame:", a4, 0);
            if (result) {
              return (unint64_t)-[BWUBProcessorInput _setErrorRecoveryFrame:]((void *)[(id)a2 input], a4);
            }
          }
        }
      }
    }
    return result;
  }
  if (a5)
  {
    objc_msgSend(a3, "setReferenceFrameIndex:", objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing"));
    if (!dword_1E96B6888) {
      goto LABEL_17;
    }
    uint64_t v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (dword_1E96B6888)
  {
    double v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_17:
  if (!objc_msgSend((id)a2, "deepFusionOutput", v40, v42)
    || !+[BWUBProcessorController lazilyAllocatesDeepFusionOutputBuffers](BWUBProcessorController, "lazilyAllocatesDeepFusionOutputBuffers")|| (![a3 referenceFrameHasEVMinus]|| objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing") != 1)&& ((objc_msgSend(a3, "referenceFrameHasEVMinus") & 1) != 0 || !a5))
  {
    goto LABEL_38;
  }
  uint64_t v14 = (void *)[(id)a2 deepFusionOutput];
  if (![v14 proxyPixelBuffer])
  {
    if (a2) {
      uint64_t v15 = *(void **)(a2 + 40);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = objc_msgSend(v15, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 7);
    if (!v16)
    {
      uint64_t v43 = v5;
      LODWORD(v41) = 0;
      goto LABEL_73;
    }
    uint64_t v17 = (const void *)v16;
    [v14 setProxyPixelBuffer:v16];
    CFRelease(v17);
  }
  if (![v14 referencePixelBuffer])
  {
    if (a2) {
      long long v18 = *(void **)(a2 + 40);
    }
    else {
      long long v18 = 0;
    }
    uint64_t v19 = objc_msgSend(v18, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 8);
    if (!v19)
    {
      uint64_t v43 = v5;
      LODWORD(v41) = 0;
      goto LABEL_73;
    }
    CFStringRef v20 = (const void *)v19;
    [v14 setReferencePixelBuffer:v19];
    CFRelease(v20);
  }
  if (![v14 referenceNoisePixelBuffer])
  {
    if (a2) {
      long long v21 = *(void **)(a2 + 40);
    }
    else {
      long long v21 = 0;
    }
    uint64_t v22 = objc_msgSend(v21, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 9);
    if (v22)
    {
      uint64_t v23 = (const void *)v22;
      [v14 setReferenceNoisePixelBuffer:v22];
      CFRelease(v23);
      goto LABEL_38;
    }
    uint64_t v43 = v5;
    LODWORD(v41) = 0;
LABEL_73:
    FigDebugAssert3();
    uint64_t v25 = 4294954510;
LABEL_42:
    unint64_t result = objc_msgSend((id)a2, "err", v41, v43);
    if (!result) {
      return [(id)a2 setErr:v25];
    }
    return result;
  }
LABEL_38:
  uint64_t v24 = [a3 addFrame:a4];
  if (v24)
  {
    uint64_t v25 = v24;
    if (a2 && objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "captureStreamSettings"), "adaptiveBracketingParameters"))
    {
      -[BWUBProcessorInput _setErrorRecoveryFrame:]((void *)[(id)a2 input], objc_msgSend((id)objc_msgSend((id)a2, "input"), "errorRecoveryFrame"));
      objc_msgSend((id)objc_msgSend((id)a2, "input"), "setKeepFrames:", 0);
      [a3 resetState];
    }
    goto LABEL_42;
  }
  objc_msgSend((id)a2, "setNumberOfFramesAddedForMultiFrameProcessing:", objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing") + 1);
  objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F53070], 0), "objectForKeyedSubscript:", *MEMORY[0x1E4F53E48]), "floatValue");
  float v27 = v26;
  [(id)a2 totalExposureTimesOfFramesAddedForMultiFrameProcessing];
  *(float *)&double v29 = v27 + v28;
  [(id)a2 setTotalExposureTimesOfFramesAddedForMultiFrameProcessing:v29];
  [(id)a2 minExposureTimesOfFramesAddedForMultiFrameProcessing];
  if (v27 < *(float *)&v30) {
    *(float *)&double v30 = v27;
  }
  [(id)a2 setMinExposureTimesOfFramesAddedForMultiFrameProcessing:v30];
  [(id)a2 maxExposureTimesOfFramesAddedForMultiFrameProcessing];
  if (v27 >= *(float *)&v31) {
    *(float *)&double v31 = v27;
  }
  [(id)a2 setMaxExposureTimesOfFramesAddedForMultiFrameProcessing:v31];
  if (dword_1E96B6888)
  {
    CGSize v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input", v41, v43), "captureStreamSettings"), "referenceFrameIndex");
  if ((result & 0x80000000) != 0)
  {
    unint64_t result = [a3 referenceFrameIndex];
    if ((result & 0x80000000) == 0)
    {
      int v33 = result;
      unint64_t result = objc_msgSend((id)objc_msgSend((id)a2, "input"), "referenceFrame");
      if (!result)
      {
        unint64_t v34 = 0;
        int v35 = 0;
        while (1)
        {
          uint64_t v36 = (void *)[(id)a2 input];
          if (v36) {
            uint64_t v36 = (void *)v36[7];
          }
          unint64_t result = [v36 count];
          if (result <= v34) {
            break;
          }
          float32x4_t v37 = (void *)[(id)a2 input];
          if (v37) {
            float32x4_t v37 = (void *)v37[7];
          }
          int v38 = (void *)[v37 objectAtIndexedSubscript:v34];
          unint64_t result = -[BWUBProcessorRequest useFrameForMultiFrameProcessing:](a2, v38);
          if (result)
          {
            if (v35 == v33)
            {
              if (v38)
              {
                -[BWUBProcessorInput _setReferenceFrame:]((void *)[(id)a2 input], v38);
                unint64_t result = (unint64_t)-[BWUBProcessorInput _setErrorRecoveryFrame:]((void *)[(id)a2 input], objc_msgSend((id)objc_msgSend((id)a2, "input"), "errorRecoveryFrame"));
                if (a2)
                {
                  unint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "captureStreamSettings"), "adaptiveBracketingParameters");
                  if (result) {
                    unint64_t result = objc_msgSend((id)objc_msgSend((id)a2, "input"), "setKeepFrames:", 0);
                  }
                }
                if (dword_1E96B6888)
                {
                  double v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
                  return fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
              return result;
            }
            ++v35;
          }
          ++v34;
        }
      }
    }
  }
  return result;
}

uint64_t __ubp_createStateMachine_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  if (a2)
  {
    [*(id *)(a2 + 80) setOutput:0];
    [*(id *)(a2 + 80) resetState];
  }
  -[BWUBProcessorController _serviceNextRequest]((void *)a2);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_3(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWUBProcessorController _setupProcessor](a2);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWUBProcessorController _processSingleImage](a2);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWUBProcessorController _processUBOriginalImage](a2);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_6(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWUBProcessorController _processUBFusion](a2);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_7(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  if (a2) {
    -[BWUBProcessorController _processUBFusion](a2);
  }
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_8(uint64_t a1, id *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWUBProcessorController _processDeepFusion](a2);
  return -[BWUBProcessorController _updateStateIfNeeded]((uint64_t)a2);
}

id nfrp_createNRFStatisticsFromFrameStatistics(objc_class *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = objc_alloc_init(a1);
  *(float *)&double v8 = (float)[a2 conversionGain] * 0.000015259;
  [v7 setConversionGain:v8];
  *(float *)&double v9 = (float)objc_msgSend(a2, "readNoise_1x") * 0.000015259;
  objc_msgSend(v7, "setReadNoise_1x:", v9);
  *(float *)&double v10 = (float)objc_msgSend(a2, "readNoise_8x") * 0.000015259;
  objc_msgSend(v7, "setReadNoise_8x:", v10);
  [a2 integrationTime];
  objc_msgSend(v7, "setIntegrationTime:");
  *(float *)&double v11 = (float)[a2 agc] * 0.0039062;
  [v7 setAgc:v11];
  *(float *)&double v12 = (float)[a2 ispDGain] * 0.0039062;
  [v7 setIspDGain:v12];
  *(float *)&double v13 = (float)[a2 sensorDGain] * 0.0039062;
  [v7 setSensorDGain:v13];
  [a2 ispDGainRangeExpansionFactor];
  objc_msgSend(v7, "setIspDGainRangeExpansionFactor:");
  [a2 gain];
  objc_msgSend(v7, "setGain:");
  [a2 exposureBias];
  *(float *)&double v14 = v14;
  [v7 setBias:v14];
  objc_msgSend(v7, "setAeLimitsReached:", objc_msgSend(a2, "aeLimitsReached"));
  *(float *)&double v15 = (float)[a2 aeAverage];
  [v7 setAeAverage:v15];
  *(float *)&double v16 = (float)[a2 aeTarget];
  [v7 setAeTarget:v16];
  objc_msgSend(v7, "setMotionFromAEMatrix:", objc_msgSend(a2, "motionFromAEMatrix"));
  [v7 setStationary:a3];
  [a2 motionDataBiasErrorEstimate];
  objc_msgSend(v7, "setMotionDataBiasErrorEstimate:");
  if ([a2 aeStatistics])
  {
    uint64_t v17 = (void *)[a2 aeStatistics];
    objc_msgSend(v7, "setAeThumbnail:", objc_msgSend(v17, "objectForKeyedSubscript:", *MEMORY[0x1E4F53620]));
    long long v18 = (void *)[a2 aeStatistics];
    objc_msgSend(v7, "setAeThumbnailWidth:", objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", *MEMORY[0x1E4F53630]), "intValue"));
    uint64_t v19 = (void *)[a2 aeStatistics];
    objc_msgSend(v7, "setAeThumbnailHeight:", objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E4F53628]), "intValue"));
  }
  CFStringRef v20 = (void *)[a4 objectForKeyedSubscript:*MEMORY[0x1E4F538C8]];
  uint64_t v21 = *MEMORY[0x1E4F538F8];
  objc_msgSend(v7, "setNumberOfHumanFaces:", objc_msgSend((id)objc_msgSend(v20, "objectForKeyedSubscript:", *MEMORY[0x1E4F538F8]), "count"));
  objc_msgSend(v7, "setNumberOfHumanBodies:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E4F538C0]), "objectForKeyedSubscript:", v21), "count"));
  return v7;
}

void *nrfp_addFrame(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t result = (void *)-[BWNRFProcessorRequest processingType](a2);
  if (!result) {
    return result;
  }
  unint64_t result = (void *)-[BWNRFProcessorRequest processingType](a2);
  if (result == 6) {
    return result;
  }
  unint64_t result = (void *)-[BWNRFProcessorRequest processingType](a2);
  if (result == 7) {
    return result;
  }
  double v11 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if ([(id)a2 err]
    || !-[BWNRFProcessorRequest useFrameForMultiFrameProcessing:](a2, a4))
  {
    if (dword_1E96B6A88)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    unint64_t result = objc_msgSend((id)a2, "err", v45, v46);
    if (a2)
    {
      if (result)
      {
        unint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "captureStreamSettings"), "adaptiveUnifiedBracketedCaptureParams"), "count");
        if (result)
        {
          unint64_t result = objc_msgSend((id)objc_msgSend((id)a2, "input"), "errorRecoveryFrame");
          if (!result)
          {
            unint64_t result = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input"), "captureStreamSettings"), "isUnifiedBracketingErrorRecoveryFrame:isReferenceFrame:", a4, 0);
            if (result) {
              return -[BWNRFProcessorInput _setErrorRecoveryFrame:]((void *)[(id)a2 input], a4);
            }
          }
        }
      }
    }
    return result;
  }
  if (objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D78]), "intValue"))
  {
    uint64_t v37 = 4294954516;
    goto LABEL_69;
  }
  if (a5)
  {
    objc_msgSend(a3, "setReferenceFrameIndex:", objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing"));
    if (dword_1E96B6A88)
    {
      double v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (!objc_msgSend((id)a2, "deepFusionOutput", v45, v46)
    || (![a3 referenceFrameHasEVMinus]
     || [(id)a2 numberOfFramesAddedForMultiFrameProcessing] != 1)
    && (([a3 referenceFrameHasEVMinus] & 1) != 0 || !a5))
  {
    goto LABEL_60;
  }
  double v14 = (void *)[(id)a2 deepFusionOutput];
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input"), "captureSettings"), "produceDeferredPhotoProxyImage")&& !objc_msgSend(v14, "proxyPixelBuffer"))
  {
    if (a2) {
      double v15 = *(void **)(a2 + 56);
    }
    else {
      double v15 = 0;
    }
    uint64_t v16 = objc_msgSend(v15, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 7);
    if (!v16) {
      goto LABEL_79;
    }
    uint64_t v17 = (__CVBuffer *)v16;
    [v14 setProxyPixelBuffer:v16];
    CVPixelBufferRelease(v17);
    objc_msgSend(v14, "setProxyMetadata:", objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary"));
  }
  if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input"), "captureSettings"), "captureFlags") & 4) == 0)
  {
    if (![v14 syntheticReferencePixelBuffer])
    {
      if (a2) {
        long long v18 = *(void **)(a2 + 56);
      }
      else {
        long long v18 = 0;
      }
      uint64_t v19 = objc_msgSend(v18, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 8);
      if (!v19) {
        goto LABEL_79;
      }
      CFStringRef v20 = (__CVBuffer *)v19;
      [v14 setSyntheticReferencePixelBuffer:v19];
      CVPixelBufferRelease(v20);
    }
    if (![v14 syntheticReferenceFusionMapPixelBuffer])
    {
      if (a2) {
        uint64_t v21 = *(void **)(a2 + 56);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = objc_msgSend(v21, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 9);
      if (v22)
      {
        uint64_t v23 = (__CVBuffer *)v22;
        [v14 setSyntheticReferenceFusionMapPixelBuffer:v22];
        CVPixelBufferRelease(v23);
        goto LABEL_40;
      }
LABEL_79:
      uint64_t v37 = 4294954510;
LABEL_69:
      unint64_t result = objc_msgSend((id)a2, "err", v45, v46);
      if (!result) {
        return (void *)[(id)a2 setErr:v37];
      }
      return result;
    }
  }
LABEL_40:
  objc_msgSend(v14, "setSyntheticReferenceMetadata:", objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary"));
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input"), "processingSettings"), "provideDemosaicedRaw")&& !objc_msgSend(v14, "linearOutputPixelBuffer"))
  {
    if (a2) {
      uint64_t v24 = *(void **)(a2 + 56);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = objc_msgSend(v24, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 21);
    if (v25)
    {
      float v26 = (__CVBuffer *)v25;
      [v14 setLinearOutputPixelBuffer:v25];
      CVPixelBufferRelease(v26);
      objc_msgSend(v14, "setLinearOutputMetadata:", objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary"));
    }
    else
    {
      [(id)a2 setDemosaicedRawErr:4294954510];
    }
  }
  if (![(id)a2 processSmartStyleRenderingInput]) {
    goto LABEL_52;
  }
  if (a2) {
    float v27 = *(void **)(a2 + 56);
  }
  else {
    float v27 = 0;
  }
  uint64_t v28 = objc_msgSend(v27, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 41);
  if (!v28) {
    goto LABEL_79;
  }
  double v29 = (__CVBuffer *)v28;
  [v14 setLinearOutputMIWBAppliedPixelBuffer:v28];
  objc_msgSend(v14, "setLinearOutputMIWBAppliedMetadata:", objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary"));
  CVPixelBufferRelease(v29);
LABEL_52:
  if ([(id)a2 gainMapEnabled] && !objc_msgSend(v14, "gainMapOutputPixelBuffer"))
  {
    if (a2) {
      double v30 = *(void **)(a2 + 56);
    }
    else {
      double v30 = 0;
    }
    double v31 = (__CVBuffer *)objc_msgSend(v30, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 19);
    if (v31 && (objc_opt_respondsToSelector() & 1) != 0) {
      objc_msgSend(v14, "setGainMapOutputMetadata:", objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary"));
    }
    [v14 setGainMapOutputPixelBuffer:v31];
    CVPixelBufferRelease(v31);
  }
LABEL_60:
  if (dword_1E96B6A88)
  {
    CGSize v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a4);
  CFStringRef v34 = (const __CFString *)*MEMORY[0x1E4F52DD0];
  int v35 = (void *)CVBufferCopyAttachment(ImageBuffer, (CFStringRef)*MEMORY[0x1E4F52DD0], 0);
  if (v35) {
    uint64_t v36 = [a3 addInputResource:v35];
  }
  else {
    uint64_t v36 = [a3 addFrame:a4];
  }
  uint64_t v37 = v36;

  CVBufferRemoveAttachment(ImageBuffer, v34);
  if (v37)
  {
    if (a2
      && objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "captureStreamSettings"), "adaptiveUnifiedBracketedCaptureParams"), "count"))
    {
      -[BWNRFProcessorInput _setErrorRecoveryFrame:]((void *)[(id)a2 input], objc_msgSend((id)objc_msgSend((id)a2, "input"), "errorRecoveryFrame"));
      objc_msgSend((id)objc_msgSend((id)a2, "input"), "setKeepFrames:", 0);
      [a3 resetState];
    }
    goto LABEL_69;
  }
  objc_msgSend((id)a2, "setNumberOfFramesAddedForMultiFrameProcessing:", objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing") + 1);
  objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E4F53E48]), "floatValue");
  float v39 = v38;
  [(id)a2 totalExposureTimesOfFramesAddedForMultiFrameProcessing];
  *(float *)&double v41 = v39 + v40;
  [(id)a2 setTotalExposureTimesOfFramesAddedForMultiFrameProcessing:v41];
  [(id)a2 minExposureTimesOfFramesAddedForMultiFrameProcessing];
  if (v39 < *(float *)&v42) {
    *(float *)&double v42 = v39;
  }
  objc_msgSend((id)a2, "setMinExposureTimesOfFramesAddedForMultiFrameProcessing:", v42, v45, v46);
  [(id)a2 maxExposureTimesOfFramesAddedForMultiFrameProcessing];
  if (v39 >= *(float *)&v43) {
    *(float *)&double v43 = v39;
  }
  unint64_t result = (void *)[(id)a2 setMaxExposureTimesOfFramesAddedForMultiFrameProcessing:v43];
  if (dword_1E96B6A88)
  {
    uint64_t v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
    return (void *)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t __nrfp_createStateMachine_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  if (a2)
  {
    [*(id *)(a2 + 80) setOutput:0];
    [*(id *)(a2 + 80) resetState];
  }
  -[BWNRFProcessorController _serviceNextRequest]((void *)a2);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_3(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWNRFProcessorController _setupProcessor](a2);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWNRFProcessorController _processSingleImage](a2);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWNRFProcessorController _processOriginalImage](a2);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_6(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWNRFProcessorController _processUBFusion](a2);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_7(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWNRFProcessorController _processDigitalFlash](a2);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_8(uint64_t a1, id *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWNRFProcessorController _processDeepFusion](a2);
  return -[BWNRFProcessorController _updateStateIfNeeded]((uint64_t)a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_9(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWNRFProcessorController _processDigitalFlash](a2);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

void *sicn_cameraCalibrationDataMetadataAttachmentDictionaryFromCalibrationMetadata(void *a1, opaqueCMSampleBuffer *a2, int a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    double v6 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    if (a3) {
      [a1 referenceIntrinsicMatrix];
    }
    else {
      [a1 auxiliaryIntrinsicMatrix];
    }
    DWORD2(v58) = v8;
    DWORD2(v59) = v10;
    *(void *)&long long v58 = v7;
    *(void *)&long long v59 = v9;
    DWORD2(v60) = v12;
    *(void *)&long long v60 = v11;
    objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", &v58, 48), @"IntrinsicMatrix");
    ImageBuffer = CMSampleBufferGetImageBuffer(a2);
    CGFloat Width = (double)CVPixelBufferGetWidth(ImageBuffer);
    v64.CGFloat height = (double)CVPixelBufferGetHeight(ImageBuffer);
    v64.CGFloat width = Width;
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v64);
    [v6 setObject:DictionaryRepresentation forKeyedSubscript:@"IntrinsicMatrixReferenceDimensions"];

    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    if (a3) {
      [a1 referenceExtrinsicMatrix];
    }
    else {
      [a1 auxiliaryExtrinsicMatrix];
    }
    DWORD2(v54) = v17;
    DWORD2(v55) = v19;
    *(void *)&long long v54 = v16;
    *(void *)&long long v55 = v18;
    DWORD2(v56) = v21;
    DWORD2(v57) = v23;
    *(void *)&long long v56 = v20;
    *(void *)&long long v57 = v22;
    objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", &v54, 64), @"ExtrinsicMatrix");
    if (a3) {
      [a1 referencePixelSizeInMillimeters];
    }
    else {
      [a1 auxiliaryPixelSizeInMillimeters];
    }
    objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:"), @"PixelSize");
    if (a3) {
      uint64_t v24 = (void *)[a1 referenceLensDistortionCoefficients];
    }
    else {
      uint64_t v24 = (void *)[a1 auxiliaryLensDistortionCoefficients];
    }
    uint64_t v25 = v24;
    if (v24)
    {
      float v26 = objc_msgSend(MEMORY[0x1E4F1CA58], "dataWithLength:", 4 * objc_msgSend(v24, "count"));
      float v27 = (_DWORD *)[v26 mutableBytes];
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      uint64_t v28 = [v25 countByEnumeratingWithState:&v50 objects:v62 count:16];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = *(void *)v51;
        do
        {
          for (uint64_t i = 0; i != v29; ++i)
          {
            if (*(void *)v51 != v30) {
              objc_enumerationMutation(v25);
            }
            [*(id *)(*((void *)&v50 + 1) + 8 * i) floatValue];
            *v27++ = v32;
          }
          uint64_t v29 = [v25 countByEnumeratingWithState:&v50 objects:v62 count:16];
        }
        while (v29);
      }
      [v6 setObject:v26 forKeyedSubscript:@"LensDistortionCoefficients"];
    }
    if (a3) {
      int v33 = (void *)[a1 referenceInverseLensDistortionCoefficients];
    }
    else {
      int v33 = (void *)[a1 auxiliaryInverseLensDistortionCoefficients];
    }
    CFStringRef v34 = v33;
    if (v33)
    {
      int v35 = objc_msgSend(MEMORY[0x1E4F1CA58], "dataWithLength:", 4 * objc_msgSend(v33, "count"));
      uint64_t v36 = (_DWORD *)[v35 mutableBytes];
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      uint64_t v37 = [v34 countByEnumeratingWithState:&v46 objects:v61 count:16];
      if (v37)
      {
        uint64_t v38 = v37;
        uint64_t v39 = *(void *)v47;
        do
        {
          for (uint64_t j = 0; j != v38; ++j)
          {
            if (*(void *)v47 != v39) {
              objc_enumerationMutation(v34);
            }
            [*(id *)(*((void *)&v46 + 1) + 8 * j) floatValue];
            *v36++ = v41;
          }
          uint64_t v38 = [v34 countByEnumeratingWithState:&v46 objects:v61 count:16];
        }
        while (v38);
      }
      [v6 setObject:v35 forKeyedSubscript:@"InverseLensDistortionCoefficients"];
    }
    if (a3) {
      [a1 referenceLensDistortionOpticalCenter];
    }
    else {
      [a1 auxiliaryLensDistortionOpticalCenter];
    }
    CFDictionaryRef v44 = CGPointCreateDictionaryRepresentation(*(CGPoint *)&v42);
    [v6 setObject:v44 forKeyedSubscript:@"LensDistortionCenter"];
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  return v6;
}

size_t FigDraw420Color(__CVBuffer *a1, int a2, int a3, char a4, char a5, char a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v23 = 0;
  uint64_t v22 = 0;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t result = CVPixelBufferGetPlaneCount(a1);
  size_t v13 = result;
  if (result)
  {
    size_t v14 = 0;
    do
    {
      *(&v24 + v14) = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(a1, v14);
      size_t result = CVPixelBufferGetBytesPerRowOfPlane(a1, v14);
      *((_DWORD *)&v22 + v14++) = result;
    }
    while (v13 != v14);
  }
  if (PixelFormatType == 875704422 || PixelFormatType == 875704438)
  {
    if (v13 != 2) {
      return result;
    }
    int v19 = HIDWORD(v22);
    uint64_t v17 = v25;
    *(unsigned char *)(v24 + a2 + (int)v22 * (uint64_t)a3) = a4;
    uint64_t v20 = v19 * (uint64_t)(a3 >> 1);
    *(unsigned char *)(v17 + (a2 & 0xFFFFFFFFFFFFFFFELL) + v20) = a5;
    int v18 = v20 + (a2 | 1);
    goto LABEL_11;
  }
  if (PixelFormatType == 2033463856 && v13 == 3)
  {
    int v15 = HIDWORD(v22);
    uint64_t v16 = v25;
    *(unsigned char *)(v24 + a2 + (int)v22 * (uint64_t)a3) = a4;
    *(unsigned char *)(v16 + v15 * (a3 >> 1) + (a2 >> 1)) = a5;
    uint64_t v17 = v26;
    int v18 = v23 * (a3 >> 1) + (a2 >> 1);
LABEL_11:
    *(unsigned char *)(v17 + v18) = a6;
  }
  return result;
}

uint64_t FigDraw420Rectangle(__CVBuffer *a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8)
{
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  if (!a1 || (a3 | a2) < 0 || WidthOfPlane <= a2 || a5 < 1 || a4 < 1 || HeightOfPlane <= a3)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    int v18 = a4 + a2;
    if (WidthOfPlane >= v18) {
      int v19 = v18;
    }
    else {
      int v19 = WidthOfPlane;
    }
    int v29 = WidthOfPlane;
    if (v19 > a2)
    {
      int v28 = HeightOfPlane;
      int v27 = v18;
      int v21 = a2;
      do
        FigDraw420Color(a1, v21++, a3, a6, a7, a8);
      while (v19 != v21);
      int v20 = a5 + a3;
      int HeightOfPlane = v28;
      if (a5 + a3 > v28 || v19 <= a2)
      {
        int v18 = v27;
      }
      else
      {
        int v22 = a2;
        do
          FigDraw420Color(a1, v22++, v20 - 1, a6, a7, a8);
        while (v19 != v22);
        int v18 = v27;
        int HeightOfPlane = v28;
      }
    }
    else
    {
      int v20 = a5 + a3;
    }
    int v23 = a3 + 1;
    if (HeightOfPlane >= v20) {
      int v24 = v20;
    }
    else {
      int v24 = HeightOfPlane;
    }
    if (v23 < v24)
    {
      int v25 = v23;
      do
        FigDraw420Color(a1, a2, v25++, a6, a7, a8);
      while (v24 != v25);
      if (v18 <= v29 && v23 < v24)
      {
        do
          FigDraw420Color(a1, v18 - 1, v23++, a6, a7, a8);
        while (v24 != v23);
      }
    }
    return 0;
  }
}

BOOL FigContinuityCaptureGetUserPreferenceDisabled()
{
  return FigGetCFPreferenceBooleanWithDefault() != 0;
}

uint64_t FigContinuityCaptureSetUserPreferenceDisabled(int a1)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v2 = (CFPropertyListRef *)MEMORY[0x1E4F1CFD0];
  if (!a1) {
    uint64_t v2 = (CFPropertyListRef *)MEMORY[0x1E4F1CFC8];
  }
  CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFPreferencesSetValue(@"ContinuityCaptureDisabled", *v2, @"com.apple.cameracapture", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (a1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (const void *)[MEMORY[0x1E4F1C9C8] now];
  }
  if (dword_1E96B6CE8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFPreferencesSetValue(@"ContinuityCaptureLastUsedDate", v4, @"com.apple.cameracapture.volatile", v3, (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  uint64_t v6 = getpid();
  return FigCaptureLogContinuityCameraPowerEvent(v6, a1 ^ 1u);
}

id BWUBCreateNRProcessorControllerConfiguration(void *a1, uint64_t *a2)
{
  if (!a2)
  {
    FigDebugAssert3();
    return 0;
  }
  unsigned int v4 = -[BWUBNodeConfiguration stillImageFusionScheme]((uint64_t)a1);
  id v5 = 0;
  if (v4 >= 3)
  {
    if (v4 - 4 >= 2)
    {
      if (v4 != 3)
      {
LABEL_8:
        [v5 setSensorConfigurationsByPortType:-[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1)];
        objc_msgSend(v5, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
        objc_msgSend(v5, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
        [v5 setAlwaysAllowModifyingInputBuffers:-[BWUBNodeConfiguration alwaysAllowModifyingInputBuffers]((BOOL)a1)];
        [v5 setFusionEnabled:-[BWUBNodeConfiguration fusionSupportEnabled]((BOOL)a1)];
        [v5 setLowLightFusionEnabled:-[BWUBNodeConfiguration digitalFlashSupportEnabled]((BOOL)a1)];
        [v5 setDeepFusionEnabled:-[BWUBNodeConfiguration deepFusionSupportEnabled]((BOOL)a1)];
        [v5 setDeepFusionWaitForProcessingToFinish:-[BWUBNodeConfiguration deepFusionWaitForPreprocessingToFinish]((BOOL)a1)];
        objc_msgSend(v5, "setDeferredCaptureSupportEnabled:", objc_msgSend(a1, "deferredCaptureSupportEnabled"));
        objc_msgSend(v5, "setDeferredPhotoProcessorEnabled:", objc_msgSend(a1, "deferredPhotoProcessorEnabled"));
        [v5 setGainMapMainImageDownscalingFactor:-[BWUBNodeConfiguration gainMapMainImageDownscalingFactor]((uint64_t)a1)];
        [v5 setDepthDataDeliveryEnabled:-[BWUBNodeConfiguration depthDataDeliveryEnabled]((BOOL)a1)];
        [v5 setGreenGhostMitigationVersion:-[BWUBNodeConfiguration greenGhostMitigationVersion]((uint64_t)a1)];
        [v5 setDemosaicedRawPixelFormat:-[BWUBNodeConfiguration demosaicedRawPixelFormat]((uint64_t)a1)];
        [v5 setDemosaicedRawEnabled:-[BWUBNodeConfiguration demosaicedRawEnabled]((BOOL)a1)];
        [v5 setRawColorCalibrationsByPortType:-[BWUBNodeConfiguration rawColorCalibrationsByPortType]((uint64_t)a1)];
        [v5 setRawLensShadingCorrectionCoefficientsByPortType:-[BWUBNodeConfiguration rawLensShadingCorrectionCoefficientsByPortType]((uint64_t)a1)];
        return v5;
      }
      uint64_t v6 = off_1E5C1EFD8;
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v6 = off_1E5C1EC00;
      uint64_t v7 = 6;
    }
    *a2 = v7;
    id v5 = objc_alloc_init(*v6);
    goto LABEL_8;
  }
  return v5;
}

BWDeferredCaptureControllerConfiguration *BWUBCreateDeferredContainerControllerConfiguration(void *a1)
{
  if (![a1 deferredCaptureSupportEnabled]) {
    return 0;
  }
  uint64_t v2 = objc_alloc_init(BWDeferredCaptureControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  return v2;
}

BWDeferredProcessorControllerConfiguration *BWUBCreateDeferredProcessorControllerConfiguration(void *a1)
{
  if (![a1 deferredPhotoProcessorEnabled]) {
    return 0;
  }
  uint64_t v2 = objc_alloc_init(BWDeferredProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setDeferredCaptureSupportEnabled:](v2, "setDeferredCaptureSupportEnabled:", [a1 deferredCaptureSupportEnabled]);
  -[BWStillImageProcessorControllerConfiguration setDeferredPhotoProcessorEnabled:](v2, "setDeferredPhotoProcessorEnabled:", [a1 deferredPhotoProcessorEnabled]);
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", [a1 metalCommandQueue]);
  -[BWStillImageProcessorControllerConfiguration setInferenceScheduler:](v2, "setInferenceScheduler:", [a1 inferenceScheduler]);
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", [a1 figThreadPriority]);
  return v2;
}

BWDeepFusionProcessorControllerConfiguration *BWUBCreateDeepFusionProcessorControllerConfiguration(void *a1)
{
  if (!-[BWUBNodeConfiguration deepFusionSupportEnabled]((BOOL)a1)
    || ([a1 deferredCaptureSupportEnabled] & 1) != 0)
  {
    return 0;
  }
  uint64_t v2 = objc_alloc_init(BWDeepFusionProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", [a1 metalCommandQueue]);
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", [a1 figThreadPriority]);
  -[BWStillImageProcessorControllerConfiguration setDeferredCaptureSupportEnabled:](v2, "setDeferredCaptureSupportEnabled:", [a1 deferredCaptureSupportEnabled]);
  -[BWStillImageProcessorControllerConfiguration setDeferredPhotoProcessorEnabled:](v2, "setDeferredPhotoProcessorEnabled:", [a1 deferredPhotoProcessorEnabled]);
  -[BWDeepFusionProcessorControllerConfiguration setStillImageFusionScheme:](v2, "setStillImageFusionScheme:", -[BWUBNodeConfiguration stillImageFusionScheme]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setRawColorCalibrationsByPortType:](v2, "setRawColorCalibrationsByPortType:", -[BWUBNodeConfiguration rawColorCalibrationsByPortType]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setRawLensShadingCorrectionCoefficientsByPortType:](v2, "setRawLensShadingCorrectionCoefficientsByPortType:", -[BWUBNodeConfiguration rawLensShadingCorrectionCoefficientsByPortType]((uint64_t)a1));
  return v2;
}

BWLearnedNRProcessorControllerConfiguration *BWUBCreateLearnedNRProcessorControllerConfiguration(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((-[BWUBNodeConfiguration learnedNRMode]((uint64_t)a1) & 5) == 0) {
    return 0;
  }
  uint64_t v2 = objc_alloc_init(BWLearnedNRProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", [a1 metalCommandQueue]);
  -[BWStillImageProcessorControllerConfiguration setInferenceScheduler:](v2, "setInferenceScheduler:", [a1 inferenceScheduler]);
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", [a1 figThreadPriority]);
  CFStringRef v3 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  unsigned int v4 = (void *)-[BWUBNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(v3, "setObject:forKeyedSubscript:", &unk_1EFB05928, *(void *)(*((void *)&v10 + 1) + 8 * v8++), (void)v10);
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
  -[BWLearnedNRProcessorControllerConfiguration setFinalCropRectOverscanMultiplierByPortType:](v2, "setFinalCropRectOverscanMultiplierByPortType:", v3, (void)v10);
  return v2;
}

uint64_t BWUBCreateInferenceControllerConfiguration(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if ([a1 deferredPhotoProcessorEnabled]) {
    return 0;
  }
  BOOL v2 = (-[BWUBNodeConfiguration semanticRenderingVersion]((uint64_t)a1)
     || -[BWUBNodeConfiguration semanticDevelopmentVersion]((uint64_t)a1))
    && (-[BWUBNodeConfiguration fusionSupportEnabled]((BOOL)a1)
     || -[BWUBNodeConfiguration learnedNRMode]((uint64_t)a1) != 0);
  uint64_t v3 = [(id)-[BWUBNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1) count];
  if (-[BWUBNodeConfiguration redEyeReductionEnabled]((BOOL)a1)
    || v2
    || -[BWUBNodeConfiguration semanticStyleRenderingEnabled]((BOOL)a1)
    || v3)
  {
    unsigned int v4 = objc_alloc_init(BWInferenceEngineControllerConfiguration);
    -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v4, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
    -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v4, "setMetalCommandQueue:", [a1 metalCommandQueue]);
    -[BWStillImageProcessorControllerConfiguration setInferenceScheduler:](v4, "setInferenceScheduler:", [a1 inferenceScheduler]);
    -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v4, "setFigThreadPriority:", [a1 figThreadPriority]);
    -[BWInferenceEngineControllerConfiguration setFastMattingEnabled:](v4, "setFastMattingEnabled:", (int)-[BWUBNodeConfiguration semanticRenderingVersion]((uint64_t)a1) > 1);
    uint64_t v5 = (void *)[MEMORY[0x1E4F1CA80] set];
    if ((int)-[BWUBNodeConfiguration semanticRenderingVersion]((uint64_t)a1) < 1)
    {
      uint64_t v6 = 0;
    }
    else
    {
      [v5 addObject:@"PersonSemanticsSkin"];
      [v5 addObject:0x1EFA6A200];
      uint64_t v6 = 2;
    }
    if ((int)-[BWUBNodeConfiguration semanticRenderingVersion]((uint64_t)a1) > 1) {
      [v5 addObject:0x1EFA745A0];
    }
    if ((int)-[BWUBNodeConfiguration semanticRenderingVersion]((uint64_t)a1) >= 3)
    {
      [v5 addObjectsFromArray:BWInferenceLowResPersonInstanceMaskKeys()];
      v6 |= 0x10uLL;
    }
    if (-[BWUBNodeConfiguration semanticDevelopmentVersion]((uint64_t)a1)) {
      v6 |= 8uLL;
    }
    if (-[BWUBNodeConfiguration semanticStyleRenderingEnabled]((BOOL)a1))
    {
      [v5 addObject:@"PersonSemanticsSkin"];
      [v5 addObject:0x1EFA745A0];
      [v5 addObject:0x1EFA6A200];
      [(BWInferenceEngineControllerConfiguration *)v4 setSmartCameraClassificationsEnabled:1];
    }
    int v21 = v4;
    BOOL v7 = -[BWUBNodeConfiguration redEyeReductionEnabled]((BOOL)a1);
    uint64_t v8 = v6 | 6;
    long long v26 = 0u;
    long long v27 = 0u;
    if (!v7) {
      uint64_t v8 = v6;
    }
    uint64_t v20 = v8;
    long long v28 = 0uLL;
    long long v29 = 0uLL;
    uint64_t v9 = (void *)-[BWUBNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1);
    uint64_t v10 = [v9 countByEnumeratingWithState:&v26 objects:v31 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v27 != v12) {
            objc_enumerationMutation(v9);
          }
          size_t v14 = (void *)[(id)-[BWUBNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1) objectForKeyedSubscript:*(void *)(*((void *)&v26 + 1) + 8 * i)];
          long long v22 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          uint64_t v15 = [v14 countByEnumeratingWithState:&v22 objects:v30 count:16];
          if (v15)
          {
            uint64_t v16 = v15;
            uint64_t v17 = *(void *)v23;
            do
            {
              for (uint64_t j = 0; j != v16; ++j)
              {
                if (*(void *)v23 != v17) {
                  objc_enumerationMutation(v14);
                }
                objc_msgSend(v5, "addObject:", *(void *)(*((void *)&v22 + 1) + 8 * j), v20);
              }
              uint64_t v16 = [v14 countByEnumeratingWithState:&v22 objects:v30 count:16];
            }
            while (v16);
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v26 objects:v31 count:16];
      }
      while (v11);
    }
    uint64_t v3 = (uint64_t)v21;
    -[BWInferenceEngineControllerConfiguration setMattingOutputValidContentDetectionEnabled:](v21, "setMattingOutputValidContentDetectionEnabled:", [(id)-[BWUBNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1) objectForKeyedSubscript:&unk_1EFAFF528] != 0);
    -[BWInferenceEngineControllerConfiguration setEnabledInferenceMasks:](v21, "setEnabledInferenceMasks:", [v5 allObjects]);
    [(BWInferenceEngineControllerConfiguration *)v21 setEnabledVisionInferences:v20];
    -[BWInferenceEngineControllerConfiguration setPersonSemanticsVersion:](v21, "setPersonSemanticsVersion:", -[BWUBNodeConfiguration personSemanticsVersion]((uint64_t)a1));
  }
  return v3;
}

BWStillImageProcessorControllerConfiguration *BWUBCreateRedEyeProcessorControllerConfiguration(void *a1)
{
  if (!-[BWUBNodeConfiguration redEyeReductionEnabled]((BOOL)a1)) {
    return 0;
  }
  BOOL v2 = objc_alloc_init(BWStillImageProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", [a1 metalCommandQueue]);
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", [a1 figThreadPriority]);
  return v2;
}

BWIntelligentDistortionCorrectionProcessorControllerConfiguration *BWUBCreateIntelligentDistortionCorrectionProcessorControllerConfiguration(void *a1)
{
  if (![(id)-[BWUBNodeConfiguration portTypesWithIntelligentDistortionCorrectionEnabled]((uint64_t)a1) count]&& !objc_msgSend((id)-[BWUBNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1), "count"))
  {
    return 0;
  }
  BOOL v2 = objc_alloc_init(BWIntelligentDistortionCorrectionProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", [a1 metalCommandQueue]);
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", [a1 figThreadPriority]);
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setPortTypesWithGeometricDistortionCorrectionEnabled:](v2, "setPortTypesWithGeometricDistortionCorrectionEnabled:", -[BWUBNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setPortTypesWithIntelligentDistortionCorrectionEnabled:](v2, "setPortTypesWithIntelligentDistortionCorrectionEnabled:", -[BWUBNodeConfiguration portTypesWithIntelligentDistortionCorrectionEnabled]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setGeometricDistortionCorrectionExpandedImageDimensions:](v2, "setGeometricDistortionCorrectionExpandedImageDimensions:", -[BWUBNodeConfiguration geometricDistortionCorrectionExpandedImageDimensions]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setIntelligentDistortionCorrectionVersion:](v2, "setIntelligentDistortionCorrectionVersion:", -[BWUBNodeConfiguration intelligentDistortionCorrectionVersion]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setIntelligentDistortionCorrectionAppliesFinalDimensions:](v2, "setIntelligentDistortionCorrectionAppliesFinalDimensions:", -[BWUBNodeConfiguration intelligentDistortionCorrectionAppliesFinalDimensions]((BOOL)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setHorizontalSensorBinningFactor:](v2, "setHorizontalSensorBinningFactor:", -[BWUBNodeConfiguration horizontalSensorBinningFactor]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setVerticalSensorBinningFactor:](v2, "setVerticalSensorBinningFactor:", -[BWUBNodeConfiguration verticalSensorBinningFactor]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setProvidedInferenceAttachedMediaByMode:](v2, "setProvidedInferenceAttachedMediaByMode:", -[BWUBNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1));
  return v2;
}

BWDeepZoomProcessorControllerConfiguration *BWUBCreateDeepZoomProcessorControllerConfiguration(void *a1)
{
  if ((int)-[BWUBNodeConfiguration deepZoomVersion]((uint64_t)a1) < 1) {
    return 0;
  }
  if (([a1 deferredPhotoProcessorEnabled] & 1) == 0)
  {
    if ((int)-[BWUBNodeConfiguration deepZoomVersion]((uint64_t)a1) >= 2
      && ([a1 deferredCaptureSupportEnabled] & 1) == 0)
    {
      uint64_t v2 = 2;
      goto LABEL_7;
    }
    return 0;
  }
  uint64_t v2 = 1;
LABEL_7:
  uint64_t v3 = objc_alloc_init(BWDeepZoomProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v3, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v3, "setMetalCommandQueue:", [a1 metalCommandQueue]);
  -[BWStillImageProcessorControllerConfiguration setInferenceScheduler:](v3, "setInferenceScheduler:", [a1 inferenceScheduler]);
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v3, "setFigThreadPriority:", [a1 figThreadPriority]);
  -[BWDeepZoomProcessorControllerConfiguration setVersion:](v3, "setVersion:", -[BWUBNodeConfiguration deepZoomVersion]((uint64_t)a1));
  [(BWDeepZoomProcessorControllerConfiguration *)v3 setType:v2];
  return v3;
}

BWStereoDisparityProcessorControllerConfiguration *BWUBCreateStereoDisparityProcessorControllerConfiguration(void *a1)
{
  uint64_t v2 = -[BWUBNodeConfiguration disparityOutputDimensions]((uint64_t)a1);
  if (!FigCaptureVideoDimensionsAreValid(v2) || -[BWUBNodeConfiguration generateLiDARDepth]((BOOL)a1)) {
    return 0;
  }
  uint64_t v3 = objc_alloc_init(BWStereoDisparityProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v3, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v3, "setMetalCommandQueue:", [a1 metalCommandQueue]);
  -[BWStillImageProcessorControllerConfiguration setInferenceScheduler:](v3, "setInferenceScheduler:", [a1 inferenceScheduler]);
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v3, "setFigThreadPriority:", [a1 figThreadPriority]);
  -[BWStereoDisparityProcessorControllerConfiguration setPortTypesWithDepthSegmentationPortraitParameters:](v3, "setPortTypesWithDepthSegmentationPortraitParameters:", -[BWUBNodeConfiguration portTypesWithDepthSegmentationPortraitParameters]((uint64_t)a1));
  -[BWStereoDisparityProcessorControllerConfiguration setDisparityOutputDimensions:](v3, "setDisparityOutputDimensions:", -[BWUBNodeConfiguration disparityOutputDimensions]((uint64_t)a1));
  -[BWStereoDisparityProcessorControllerConfiguration setStillImageDepthDataType:](v3, "setStillImageDepthDataType:", [a1 depthDataType]);
  -[BWStereoDisparityProcessorControllerConfiguration setShouldComputeDisparityWhenCalibrationFails:](v3, "setShouldComputeDisparityWhenCalibrationFails:", -[BWUBNodeConfiguration shouldComputeDisparityWhenCalibrationFails]((BOOL)a1));
  return v3;
}

BWJasperColorStillsExecutorControllerConfiguration *BWUBCreateJasperColorStillsExecutorControllerConfiguration(void *a1)
{
  if (!-[BWUBNodeConfiguration depthDataDeliveryEnabled]((BOOL)a1)
    || !-[BWUBNodeConfiguration jasperSensorConfiguration]((uint64_t)a1)
    || !-[BWUBNodeConfiguration digitalFlashSupportEnabled]((BOOL)a1))
  {
    return 0;
  }
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:-[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1)];
  uint64_t v3 = -[BWUBNodeConfiguration jasperSensorConfiguration]((uint64_t)a1);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, objc_msgSend((id)-[BWUBNodeConfiguration jasperSensorConfiguration]((uint64_t)a1), "portType"));
  unsigned int v4 = objc_alloc_init(BWJasperColorStillsExecutorControllerConfiguration);
  [(BWStillImageProcessorControllerConfiguration *)v4 setSensorConfigurationsByPortType:v2];
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v4, "setMetalCommandQueue:", [a1 metalCommandQueue]);
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v4, "setFigThreadPriority:", [a1 figThreadPriority]);
  -[BWJasperColorStillsExecutorControllerConfiguration setHorizontalSensorBinningFactor:](v4, "setHorizontalSensorBinningFactor:", -[BWUBNodeConfiguration horizontalSensorBinningFactor]((uint64_t)a1));
  -[BWJasperColorStillsExecutorControllerConfiguration setVerticalSensorBinningFactor:](v4, "setVerticalSensorBinningFactor:", -[BWUBNodeConfiguration verticalSensorBinningFactor]((uint64_t)a1));
  return v4;
}

BWJasperDisparityProcessorControllerConfiguration *BWUBCreateJasperDisparityProcessorControllerConfiguration(void *a1)
{
  if (!-[BWUBNodeConfiguration generateLiDARDepth]((BOOL)a1)) {
    return 0;
  }
  uint64_t v2 = objc_alloc_init(BWJasperDisparityProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", [a1 metalCommandQueue]);
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", [a1 figThreadPriority]);
  return v2;
}

void sub_1A5B6FA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5B70030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BWStillImageCoordinatorUpdateBeginMomentAttachmentsForSampleBuffer(const void *a1, void *value)
{
  return BWStillImageCoordinatorAddAttachmentsToSampleBuffer(a1, value);
}

uint64_t BWStillImageCoordinatorAddAttachmentsToSampleBuffer(const void *a1, void *value)
{
  int v4 = 1;
  CMSetAttachment(a1, @"StillSettings", value, 1u);
  CMSetAttachment(a1, @"StillImageSettings", (CFTypeRef)[value requestedSettings], 1u);
  int v5 = objc_msgSend((id)CMGetAttachment(a1, @"StillImageProcessingFlags", 0), "intValue");
  unsigned int v6 = objc_msgSend((id)objc_msgSend(value, "captureSettings"), "captureFlags");
  CMSetAttachment(a1, @"StillImageProcessingFlags", (CFTypeRef)[NSNumber numberWithUnsignedInt:(v6 >> 5) & 0x200 | v5], 1u);
  CMSetAttachment(a1, @"PhotoManifest", (CFTypeRef)objc_msgSend((id)objc_msgSend(value, "processingSettings"), "photoManifest"), 1u);
  BOOL v7 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  int v8 = objc_msgSend((id)objc_msgSend(value, "requestedSettings"), "outputOrientation");
  int v9 = objc_msgSend((id)objc_msgSend(value, "requestedSettings"), "outputMirroring");
  uint64_t v10 = *MEMORY[0x1E4F54128];
  uint64_t v11 = (void *)[v7 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
  if (([v11 isEqual:*MEMORY[0x1E4F52DF8]] & 1) == 0)
  {
    uint64_t v12 = (void *)[v7 objectForKeyedSubscript:v10];
    int v4 = [v12 isEqual:*MEMORY[0x1E4F52E10]];
  }
  BOOL IsExtensionDeviceType = BWDeviceTypeIsExtensionDeviceType(objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E4F53DE0]), "integerValue"));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", FigCaptureMetadataUtilitiesExifOrientationFromOrientationAndCameraPosition(v8, v9, v4, IsExtensionDeviceType, 0)), *MEMORY[0x1E4F53248]);
  return BWAddStillImageProcessingMetadataToMetadata(value, v7);
}

void sub_1A5B71880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1A5B729C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_1A5B731E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1A5B7A658(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A5B7A77C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A5B7A7F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A5B7A8A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A5B7A9F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A5B7AA6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

float stdDeviation(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = [a1 count];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v14;
    double v6 = 0.0;
    double v7 = 0.0;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(a1);
        }
        int v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        [v9 floatValue];
        double v6 = v6 + v10 * v10;
        [v9 floatValue];
        double v7 = v7 + v11;
      }
      uint64_t v4 = [a1 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v4);
  }
  else
  {
    double v6 = 0.0;
    double v7 = 0.0;
  }
  return sqrt((v6 - (double)v2 * (v7 / (double)v2 * (v7 / (double)v2))) / (double)v2);
}

void sub_1A5B80E60(_Unwind_Exception *a1)
{
}

void sub_1A5B81258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A5B8197C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

uint64_t scfr_averageForegroundDisparityForRect(__CVBuffer *a1, _WORD *a2, int a3, int a4, CGFloat x, CGFloat y, CGFloat a7, CGFloat a8)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  unint64_t v19 = FigDepthBytesPerPixelForDepthFormat(PixelFormatType);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  if (a4 || a3)
  {
    memset(v51, 0, 48);
    FigCaptureMakeMirrorAndRotateVideoTransform(1, 1, a3, a4, (uint64_t)v51);
    CGAffineTransform v50 = v51[0];
    v53.origin.CGFloat x = x;
    v53.origin.CGFloat y = y;
    v53.size.CGFloat width = a7;
    v53.size.CGFloat height = a8;
    CGRect v54 = CGRectApplyAffineTransform(v53, &v50);
    CGFloat x = v54.origin.x;
    CGFloat y = v54.origin.y;
    a7 = v54.size.width;
    a8 = v54.size.height;
  }
  int v22 = (int)(x * (double)Width);
  if ((int)Width - 1 < v22) {
    int v22 = Width - 1;
  }
  unsigned int v23 = v22 & ~(v22 >> 31);
  int v24 = Height - 1;
  if ((int)Height - 1 >= (int)(y * (double)Height)) {
    int v24 = (int)(y * (double)Height);
  }
  uint64_t v25 = v24 & ~(v24 >> 31);
  if ((int)(Width - v23) >= (int)(a7 * (double)Width)) {
    int v26 = (int)(a7 * (double)Width);
  }
  else {
    int v26 = Width - v23;
  }
  if ((int)Height - (int)v25 >= (int)(a8 * (double)Height)) {
    int v27 = (int)(a8 * (double)Height);
  }
  else {
    int v27 = Height - v25;
  }
  bzero(v51, 0x3E8uLL);
  if (v27 < 1) {
    return 0;
  }
  int v28 = 0;
  int v29 = 0;
  uint64_t v30 = (uint64_t)BaseAddress + 2 * BytesPerRow / v19 * v25 + 2 * v23;
  do
  {
    int v31 = v26 & ~(v26 >> 31);
    if (v26 >= 1)
    {
      do
      {
        __asm { FCMP            H2, #0 }
        if (_NF == _VF && _H2 <= COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(5.0)))
        {
          __asm { FCVT            S2, H2 }
          ++*((_DWORD *)&v51[0].a + (int)(float)(_S2 / 0.020004));
          ++v29;
        }
        v30 += 2;
        --v31;
      }
      while (v31);
    }
    v30 += 2 * (BytesPerRow / v19 - (v26 & ~(v26 >> 31)));
    ++v28;
  }
  while (v28 != (v27 & ~(v27 >> 31)));
  int v39 = v29 >= 0 ? v29 : v29 + 1;
  if (v29 < 2) {
    return 0;
  }
  int v40 = 0;
  int v41 = v39 >> 1;
  _H1 = 0;
  int v43 = 249;
  do
  {
    int v44 = *((_DWORD *)&v51[0].a + v43);
    if (v44 >= (v41 - v40)) {
      int v44 = v41 - v40;
    }
    __asm { FCVT            S1, H1 }
    _S1 = _S1 + (float)((float)v44 * (float)((float)v43 * 0.020004));
    __asm { FCVT            H1, S1 }
    v40 += v44;
    _CF = v43-- != 0;
  }
  while (_CF && v40 < v41);
  uint64_t result = 0;
  if (a2)
  {
    if (v40)
    {
      __asm { FCVT            S0, H1 }
      _S0 = _S0 / (float)v40;
      __asm { FCVT            H0, S0 }
      *a2 = LOWORD(_S0);
      return 1;
    }
  }
  return result;
}

uint64_t powerBlurNoiseReductionGPUReleaseBuffers(uint64_t a1)
{
  uint64_t v1 = a1;
  WaitForInitializationToFinish(a1);
  [MEMORY[0x1E4F38D58] setCurrentContext:*(void *)(v1 + 16)];
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, *(_DWORD *)(v1 + 64));
  glTexImage2D(0xDE1u, 0, 6408, 0, 0, 0, 0x1908u, 0x1401u, 0);
  glBindTexture(0xDE1u, *(_DWORD *)(v1 + 76));
  glTexImage2D(0xDE1u, 0, 6408, 0, 0, 0, 0x1908u, 0x1401u, 0);
  glBindTexture(0xDE1u, *(_DWORD *)(v1 + 80));
  glTexImage2D(0xDE1u, 0, 6408, 0, 0, 0, 0x1908u, 0x1401u, 0);
  glBindTexture(0xDE1u, 0);
  *(void *)(v1 + 44) = -1;
  v1 += 36;
  glDeleteTextures(1, (const GLuint *)v1);
  glGenTextures(1, (GLuint *)v1);
  glFinish();
  unint64_t v2 = (void *)MEMORY[0x1E4F38D58];
  return [v2 setCurrentContext:0];
}

void WaitForInitializationToFinish(uint64_t a1)
{
  if (*(_DWORD *)a1 != 1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    if (v1)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __WaitForInitializationToFinish_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_sync(v1, block);
    }
  }
}

void powerBlurNoiseReductionGPUContextInit(int a1, void *a2)
{
  *(_DWORD *)a2 = 0;
  a2[1] = 0;
  uint64_t v3 = -2;
  if (a1 == 3)
  {
    BOOL v4 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    BOOL v4 = a1 == 2;
  }
  if (a1 == 1) {
    intptr_t v5 = 2;
  }
  else {
    intptr_t v5 = v3;
  }
  int v6 = a1 == 1 || v4;
  double v7 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  global_queue = dispatch_get_global_queue(v5, 0);
  int v9 = dispatch_queue_create_with_target_V2("noise-reduction-context-init", v7, global_queue);
  a2[1] = v9;
  if (v6 && v9)
  {
    dispatch_async_f(v9, a2, (dispatch_function_t)powerBlurNoiseReductionGPUContextInit_internal);
  }
  else
  {
    powerBlurNoiseReductionGPUContextInit_internal((uint64_t)a2, v10, v11, v12);
  }
}

uint64_t powerBlurNoiseReductionGPUContextInit_internal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unint64_t v40 = 0xFF00FF0000FF00FFLL;
  int v6 = *(_DWORD *)(v5 + 52);
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_DWORD *)__s = 1;
  if (!v7
    || (int v8 = v7,
        [v7 setObject:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F38D70]],
        int v9 = (void *)[objc_alloc(MEMORY[0x1E4F38D58]) initWithAPI:2 properties:v8],
        v8,
        !v9))
  {
    fig_log_get_emitter();
    uint64_t v33 = v4;
    LODWORD(pixels) = 0;
    FigDebugAssert3();
    goto LABEL_5;
  }
  if ([v9 setParameter:608 to:__s])
  {

LABEL_5:
    *(void *)(v5 + 16) = 0;
    goto LABEL_48;
  }
  *(void *)(v5 + 16) = v9;
  [MEMORY[0x1E4F38D58] setCurrentContext:v9];
  if (!*(_DWORD *)(v5 + 60))
  {
    int v10 = *(_DWORD *)(v5 + 24);
    if (v10 != 1)
    {
      if (v10) {
        int v10 = 1;
      }
      else {
        int v10 = 2;
      }
    }
    *(_DWORD *)__s = v10;
    [*(id *)(v5 + 16) setParameter:608 to:__s];
  }
  glGetIntegerv(0xD33u, &params);
  GLint v11 = params;
  *(_DWORD *)(v5 + 2_Block_object_dispose(&STACK[0x458], 8) = params;
  *(_DWORD *)(v5 + 32) = v11;
  glGetIntegerv(0x84E8u, &params);
  GLint v12 = params;
  if (*(_DWORD *)(v5 + 28) < params) {
    *(_DWORD *)(v5 + 2_Block_object_dispose(&STACK[0x458], 8) = params;
  }
  if (*(_DWORD *)(v5 + 32) < v12) {
    *(_DWORD *)(v5 + 32) = v12;
  }
  glGetIntegerv(0xD3Au, &params);
  if (*(_DWORD *)(v5 + 28) < params) {
    *(_DWORD *)(v5 + 2_Block_object_dispose(&STACK[0x458], 8) = params;
  }
  if (*(_DWORD *)(v5 + 32) < v42) {
    *(_DWORD *)(v5 + 32) = v42;
  }
  char v13 = 1;
  glGenFramebuffers(1, (GLuint *)(v5 + 40));
  glGenTextures(1, (GLuint *)(v5 + 36));
  glGenTextures(1, (GLuint *)(v5 + 64));
  glGenTextures(1, (GLuint *)(v5 + 76));
  glGenTextures(1, (GLuint *)(v5 + 80));
  glGenTextures(1, (GLuint *)(v5 + 68));
  glGenTextures(1, (GLuint *)(v5 + 72));
  uint64_t v14 = 0;
  *(void *)(v5 + 44) = -1;
  while (1)
  {
    char v15 = v13;
    BOOL v16 = (v13 & 1) == 0;
    int v17 = (v13 & 1) != 0 ? 5 : 8;
    int v18 = v16 ? 8 : 5;
    snprintf(__str, 0x200uLL, "attribute vec2 position;\n"
      "attribute vec2 texcoord;\n"
      "uniform vec2 texStep;\n"
      "varying vec2 tex_coord[%d];\n"
      "void main()\n"
      "{\n"
      "  int i;\n"
      "  float scale=1.0;\n"
      "  gl_Positiouint64_t n = vec4(position.x, position.y, 0, 1);\n"
      "  tex_coord[0] = texcoord;\n"
      "  for (i=1 ; i<%d ; i++) {\n"
      "    tex_coord[i] = texcoord + vec2(scale) * texStep;\n"
      "    scale = -scale;\n"
      "    if (scale > 0.0) {\n"
      "      scale += 1.0;\n"
      "    }\n"
      "  }\n"
      "}\n",
      v18,
      v18);
    if (strlen(__str) > 0x1FE) {
      break;
    }
    if ((v17 & 1) != 0 || !*(_DWORD *)(v5 + 56)) {
      snprintf(__s, 0x800uLL, "#define TC_COUNT %d\nprecision mediump float;\n"
    }
        "uniform sampler2D sampler;\n"
        "uniform mediump sampler2D samplerRecip;\n"
        "uniform vec2 threshold;\n"
        "varying highp vec2 tex_coord[TC_COUNT];\n"
        "#define weightUV()  uvDeltCGFloat a = abs(uv0-uvN);  uvDist = uvDelta.xz + uvDelta.yw;  uvMask = vec2(lessThanEqual(uvDi"
        "st, threshold));  accum += uvN * vec4(uvMask.xxyy);  count += uvMask;\n"
        "#define weightUVWithScale(SCALE)  uvDeltCGFloat a = abs(uv0-uvN);  uvDist = uvDelta.xz + uvDelta.yw;  uvMask = vec2(less"
        "ThanEqual(uvDist, threshold));  accum += SCALE * uvN * vec4(uvMask.xxyy);  count += SCALE * uvMask;\n"
        "\n"
        "void main()\n"
        "{\n"
        "  int i;\n"
        "  vec2 recip, uvDist;\n"
        "  vec4 uvDelta, uvN, uuint64_t v0 = texture2D(sampler, tex_coord[0]);\n"
        "  vec2 uvMask, count = vec2(0.0);\n"
        "  vec4 accuuint64_t m = uv0;\n"
        "  uvN = uv0.zwxy;\n"
        "  weightUV();\n"
        "  for (i=1 ; i<TC_COUNT-%d ; i++) {\n"
        "    uvN = texture2D(sampler, tex_coord[i]);\n"
        "    weightUV();\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUV();\n"
        "  }\n"
        "  if (%s) {\n"
        "    uvN = texture2D(sampler, tex_coord[TC_COUNT-2]);\n"
        "    weightUVWithScale(2.0);\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUVWithScale(2.0);\n"
        "    uvN = texture2D(sampler, tex_coord[TC_COUNT-1]);\n"
        "    weightUV();\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUV();\n"
        "  }\n"
        "  recip = texture2D(samplerRecip, count/%d.0).rg;\n"
        "  gl_FragColor = accum * recip.xxyy + vec4(0.4/256.0, 0.0, 0.4/256.0, 0.0);\n"
        "}\n",
        v17,
        0,
        "false",
        32);
    else {
      snprintf(__s, 0x800uLL, "#define TC_COUNT %d\nprecision mediump float;\n"
    }
        "uniform sampler2D sampler;\n"
        "uniform mediump sampler2D samplerRecip;\n"
        "uniform vec2 threshold;\n"
        "varying highp vec2 tex_coord[TC_COUNT];\n"
        "#define weightUV()  uvDeltCGFloat a = abs(uv0-uvN);  uvDist = uvDelta.xz + uvDelta.yw;  uvMask = vec2(lessThanEqual(uvDi"
        "st, threshold));  accum += uvN * vec4(uvMask.xxyy);  count += uvMask;\n"
        "#define weightUVWithScale(SCALE)  uvDeltCGFloat a = abs(uv0-uvN);  uvDist = uvDelta.xz + uvDelta.yw;  uvMask = vec2(less"
        "ThanEqual(uvDist, threshold));  accum += SCALE * uvN * vec4(uvMask.xxyy);  count += SCALE * uvMask;\n"
        "\n"
        "void main()\n"
        "{\n"
        "  int i;\n"
        "  vec2 recip, uvDist;\n"
        "  vec4 uvDelta, uvN, uuint64_t v0 = texture2D(sampler, tex_coord[0]);\n"
        "  vec2 uvMask, count = vec2(0.0);\n"
        "  vec4 accuuint64_t m = uv0;\n"
        "  uvN = uv0.zwxy;\n"
        "  weightUV();\n"
        "  for (i=1 ; i<TC_COUNT-%d ; i++) {\n"
        "    uvN = texture2D(sampler, tex_coord[i]);\n"
        "    weightUV();\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUV();\n"
        "  }\n"
        "  if (%s) {\n"
        "    uvN = texture2D(sampler, tex_coord[TC_COUNT-2]);\n"
        "    weightUVWithScale(2.0);\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUVWithScale(2.0);\n"
        "    uvN = texture2D(sampler, tex_coord[TC_COUNT-1]);\n"
        "    weightUV();\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUV();\n"
        "  }\n"
        "  recip = texture2D(samplerRecip, count/%d.0).rg;\n"
        "  gl_FragColor = accum * recip.xxyy + vec4(0.4/256.0, 0.0, 0.4/256.0, 0.0);\n"
        "}\n",
        v17,
        2,
        "true",
        32);
    if (strlen(__s) >= 0x7FF) {
      break;
    }
    GLuint ProgramFromSources = gl_UtilsCreateProgramFromSources(__str, __s);
    uint64_t v20 = (_DWORD *)(v5 + 28 * v14);
    v20[21] = ProgramFromSources;
    v20[22] = glGetAttribLocation(ProgramFromSources, "position");
    v20[23] = glGetAttribLocation(v20[21], "texcoord");
    v20[25] = glGetUniformLocation(v20[21], "sampler");
    v20[26] = glGetUniformLocation(v20[21], "samplerRecip");
    v20[24] = glGetUniformLocation(v20[21], "texStep");
    v20[27] = glGetUniformLocation(v20[21], "threshold");
    glUseProgram(v20[21]);
    glUniform1i(v20[25], 0);
    glUniform1i(v20[26], 2);
    char v13 = 0;
    *(_DWORD *)&v37[4 * v14] = v20[21];
    uint64_t v14 = 1;
    if ((v15 & 1) == 0)
    {
      GLuint v21 = gl_UtilsCreateProgramFromSources("attribute vec2 position;\n"
              "attribute vec2 texcoord;\n"
              "uniform vec2 tex_step;\n"
              "uniform vec2 tex_dim;\n"
              "varying vec2 tex_coord[2];\n"
              "varying vec2 tex_coord_01;\n"
              "void main()\n"
              "{\n"
              "  gl_Positiouint64_t n = vec4(position.x, position.y, 1, 1);\n"
              "  tex_coord[0] = texcoord.yx - tex_step * vec2(+0.5, +0.5);\n"
              "  tex_coord[1] = texcoord.yx + tex_step * vec2(+0.25, +0.25);\n"
              "  tex_coord_01 = texcoord * tex_dim;\n"
              "}\n",
              "precision mediump float;\n"
              "uniform sampler2D sampler_uv;\n"
              "uniform sampler2D sampler_01;\n"
              "varying highp vec2 tex_coord[2];\n"
              "varying highp vec2 tex_coord_01;\n"
              "void main()\n"
              "{\n"
              "    vec4 uv0, uv1, mask, d;\n"
              "    uuint64_t v0 = texture2D(sampler_uv, tex_coord[0]);\n"
              "    uuint64_t v1 = texture2D(sampler_uv, tex_coord[1]);\n"
              "    masuint64_t k = texture2D(sampler_01, tex_coord_01);\n"
              "    d.xCGFloat y = uv0.xy * mask.xx;\n"
              "    d.xCGFloat y = uv0.zw * mask.yy + d.xy;\n"
              "    d.zw = uv1.xy * mask.zz;\n"
              "    d.zw = uv1.zw * mask.ww + d.zw;\n"
              "    gl_FragColor = d;\n"
              "}\n");
      *(_DWORD *)(v5 + 140) = v21;
      *(_DWORD *)(v5 + 144) = glGetAttribLocation(v21, "position");
      *(_DWORD *)(v5 + 14_Block_object_dispose(&STACK[0x458], 8) = glGetAttribLocation(*(_DWORD *)(v5 + 140), "texcoord");
      *(_DWORD *)(v5 + 152) = glGetUniformLocation(*(_DWORD *)(v5 + 140), "tex_step");
      *(_DWORD *)(v5 + 156) = glGetUniformLocation(*(_DWORD *)(v5 + 140), "tex_dim");
      *(_DWORD *)(v5 + 160) = glGetUniformLocation(*(_DWORD *)(v5 + 140), "sampler_uv");
      *(_DWORD *)(v5 + 164) = glGetUniformLocation(*(_DWORD *)(v5 + 140), "sampler_01");
      glUseProgram(*(_DWORD *)(v5 + 140));
      glUniform1i(*(_DWORD *)(v5 + 160), 0);
      glUniform1i(*(_DWORD *)(v5 + 164), 1);
      glActiveTexture(0x84C1u);
      glBindTexture(0xDE1u, *(_DWORD *)(v5 + 68));
      glTexImage2D(0xDE1u, 0, 6408, 1, 2, 0, 0x1908u, 0x1401u, &v40);
      glTexParameterf(0xDE1u, 0x2802u, 10497.0);
      glTexParameterf(0xDE1u, 0x2803u, 10497.0);
      glTexParameterf(0xDE1u, 0x2800u, 9728.0);
      glTexParameterf(0xDE1u, 0x2801u, 9728.0);
      uint64_t v22 = 0;
      unsigned int v23 = __s;
      do
      {
        if (v6) {
          int v24 = (float *)&neonExactRecipTable;
        }
        else {
          int v24 = (float *)&neonApproxRecipTable;
        }
        __int16 v25 = F32toF16(v24[v22]);
        for (uint64_t i = 0; i != 128; i += 4)
        {
          if (v6) {
            int v27 = (char *)&neonExactRecipTable;
          }
          else {
            int v27 = (char *)&neonApproxRecipTable;
          }
          __int16 v28 = F32toF16(*(float *)&v27[i]);
          int v29 = &v23[i];
          *(_WORD *)int v29 = v28;
          *((_WORD *)v29 + 1) = v25;
        }
        ++v22;
        v23 += 128;
      }
      while (v22 != 32);
      glActiveTexture(0x84C2u);
      glBindTexture(0xDE1u, *(_DWORD *)(v5 + 72));
      glTexImage2D(0xDE1u, 0, 33319, 32, 32, 0, 0x8227u, 0x8D61u, __s);
      glTexParameterf(0xDE1u, 0x2802u, 33071.0);
      glTexParameterf(0xDE1u, 0x2803u, 33071.0);
      glTexParameterf(0xDE1u, 0x2800u, 9728.0);
      glTexParameterf(0xDE1u, 0x2801u, 9728.0);
      int v38 = *(_DWORD *)(v5 + 140);
      *(void *)textures = 0;
      *(_OWORD *)__str = xmmword_1A5F0C3AC;
      uint64_t v36 = 0x3F80000000000000;
      glEnableVertexAttribArray(0);
      glVertexAttribPointer(0, 2, 0x1406u, 0, 0, __str);
      glGenTextures(1, &textures[1]);
      glActiveTexture(0x84C0u);
      glBindTexture(0xDE1u, textures[1]);
      glTexImage2D(0xDE1u, 0, 6408, 1, 1, 0, 0x1908u, 0x1401u, 0);
      glGenFramebuffers(1, textures);
      glBindFramebuffer(0x8D40u, textures[0]);
      glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, textures[1], 0);
      if (glCheckFramebufferStatus(0x8D40u) == 36053)
      {
        for (uint64_t j = 0; j != 12; j += 4)
        {
          glUseProgram(*(_DWORD *)&v37[j]);
          glDrawArrays(4u, 0, 3);
          glFlush();
        }
      }
      glBindTexture(0xDE1u, 0);
      glBindFramebuffer(0x8D40u, 0);
      glDeleteFramebuffers(1, textures);
      glDeleteTextures(1, &textures[1]);
      glUseProgram(0);
      return [MEMORY[0x1E4F38D58] setCurrentContext:0];
    }
  }
LABEL_48:
  uint64_t result = objc_msgSend(MEMORY[0x1E4F38D58], "setCurrentContext:", 0, pixels, v33);
  *(_DWORD *)uint64_t v5 = 2;
  return result;
}

double powerBlurNoiseReductionGPUContextDestroy(uint64_t a1)
{
  WaitForInitializationToFinish(a1);
  [MEMORY[0x1E4F38D58] setCurrentContext:*(void *)(a1 + 16)];
  glUseProgram(0);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, 0);
  glActiveTexture(0x84C1u);
  glBindTexture(0xDE1u, 0);
  glBindFramebuffer(0x8D40u, 0);
  glDeleteFramebuffers(1, (const GLuint *)(a1 + 40));
  glDeleteTextures(1, (const GLuint *)(a1 + 36));
  glDeleteTextures(1, (const GLuint *)(a1 + 64));
  glDeleteTextures(1, (const GLuint *)(a1 + 76));
  glDeleteTextures(1, (const GLuint *)(a1 + 80));
  glDeleteTextures(1, (const GLuint *)(a1 + 68));
  glDeleteTextures(1, (const GLuint *)(a1 + 72));
  glDeleteProgram(*(_DWORD *)(a1 + 84));
  glDeleteProgram(*(_DWORD *)(a1 + 112));
  glDeleteProgram(*(_DWORD *)(a1 + 140));
  [MEMORY[0x1E4F38D58] setCurrentContext:0];
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2) {

  }
  uint64_t v3 = *(NSObject **)(a1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  *(void *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x458], 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x458], 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t powerBlurNoiseReductionGPU(uint64_t a1, __CVBuffer *a2, float64x2_t *a3, int a4, int a5, float a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  int v52 = 1;
  int v53 = 2;
  ptr[0] = xmmword_1A5F0C26C;
  ptr[1] = unk_1A5F0C27C;
  ptr[2] = xmmword_1A5F0C28C;
  ptr[3] = unk_1A5F0C29C;
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  WaitForInitializationToFinish(a1);
  if (!*(void *)(a1 + 16)) {
    return 0xFFFFFFFFLL;
  }
  int v13 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
  {
    fig_log_get_emitter();
    uint64_t v46 = v6;
    LODWORD(v45) = 0;
    FigDebugAssert3();
    int v13 = *(_DWORD *)a1;
  }
  if (v13 == 2) {
    return 4294967294;
  }
  [MEMORY[0x1E4F38D58] setCurrentContext:*(void *)(a1 + 16)];
  if (a4) {
    uint64_t v15 = 84;
  }
  else {
    uint64_t v15 = 112;
  }
  if (a4) {
    uint64_t v16 = a1 + 84;
  }
  else {
    uint64_t v16 = a1 + 112;
  }
  if (a4) {
    int v17 = 5;
  }
  else {
    int v17 = 8;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a2);
  if (!IOSurface
    || (IOSurfaceRef v19 = IOSurface,
        int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a2, 1uLL),
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a2, 1uLL),
        WidthOfPlane < 1)
    || *(_DWORD *)(a1 + 28) < WidthOfPlane
    || (size_t v22 = HeightOfPlane, (int)HeightOfPlane < 1)
    || *(_DWORD *)(a1 + 32) < (int)HeightOfPlane)
  {
    unsigned int v23 = (void *)MEMORY[0x1E4F38D58];
LABEL_22:
    objc_msgSend(v23, "setCurrentContext:", 0, v45, v46, width);
    return 0xFFFFFFFFLL;
  }
  CreateTextureStorage((_DWORD *)a1, WidthOfPlane, HeightOfPlane);
  float v24 = a6 / 255.0;
  if ((float)(a6 / 255.0) < 0.0) {
    float v24 = 0.0;
  }
  if (v24 <= 1.0) {
    float v25 = v24;
  }
  else {
    float v25 = 1.0;
  }
  int32x4_t v55 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*a3), (int32x4_t)vcvtq_s64_f64(a3[1]));
  ClampAndExpandScissor(v55.i32, WidthOfPlane, v22);
  int v27 = v55.i32[0];
  GLint v26 = v55.i32[1];
  GLint v56 = v55.i32[0] - v17;
  GLint v57 = v55.i32[1] - v17;
  GLsizei v50 = v55.i32[3];
  int v51 = v55.i32[2];
  int v58 = v55.i32[2] + 2 * v17;
  GLsizei v59 = v55.i32[3] + 2 * v17;
  ClampAndExpandScissor(&v56, WidthOfPlane, v22);
  HIDWORD(width) = v27;
  if (v27 > 0 || v26 > 0 || v51 < WidthOfPlane || v50 < (int)v22) {
    glEnable(0xC11u);
  }
  else {
    glDisable(0xC11u);
  }
  uint64_t v49 = v15;
  if (*(_DWORD *)(a1 + 60) && !*(_DWORD *)(a1 + 24)) {
    [*(id *)(a1 + 16) setParameter:608 to:&v53];
  }
  GLint v48 = v56;
  GLsizei v28 = v58;
  if (v58 >= 0) {
    int v29 = v58;
  }
  else {
    int v29 = v58 + 1;
  }
  int v30 = v57;
  int v31 = v59;
  glScissor(v56 / 2, v57, v29 >> 1, v59);
  glVertexAttribPointer(*(_DWORD *)(v16 + 4), 2, 0x1406u, 0, 16, ptr);
  glEnableVertexAttribArray(*(_DWORD *)(v16 + 4));
  glVertexAttribPointer(*(_DWORD *)(v16 + 8), 2, 0x1406u, 0, 16, (char *)ptr + 8);
  glEnableVertexAttribArray(*(_DWORD *)(v16 + 8));
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 36));
  BYTE4(v46) = 0;
  LODWORD(v46) = 1;
  if ((objc_msgSend(*(id *)(a1 + 16), "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v19, 3553, 6408, WidthOfPlane >> 1, v22, 6408, 5121, v46) & 1) == 0)goto LABEL_62; {
  glTexParameterf(0xDE1u, 0x2802u, 33071.0);
  }
  glTexParameterf(0xDE1u, 0x2803u, 33071.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  glBindFramebuffer(0x8D40u, *(_DWORD *)(a1 + 40));
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(a1 + 64), 0);
  if (glCheckFramebufferStatus(0x8D40u) != 36053) {
    goto LABEL_62;
  }
  LODWORD(width) = WidthOfPlane >> 1;
  glViewport(0, 0, WidthOfPlane >> 1, v22);
  glUseProgram(*(_DWORD *)(a1 + v49));
  glUniform2f(*(_DWORD *)(v16 + 24), v25, v25);
  double v32 = (double)WidthOfPlane;
  GLfloat v33 = 2.0 / (double)WidthOfPlane;
  double v34 = (double)(int)v22;
  GLfloat v35 = 0.0 / (double)(int)v22;
  glUniform2f(*(_DWORD *)(v16 + 12), v33, v35);
  glDrawArrays(5u, 0, 4);
  if (!*(_DWORD *)(a1 + 60)) {
    goto LABEL_45;
  }
  if (!*(_DWORD *)(a1 + 24)) {
    [*(id *)(a1 + 16) setParameter:608 to:&v52];
  }
  else {
LABEL_45:
  }
    glFlush();
  int v36 = v30 >= 0 ? v30 : v30 + 1;
  GLint v37 = v36 >> 1;
  int v38 = v31 >= 0 ? v31 : v31 + 1;
  glScissor(v37, v48, v38 >> 1, v28);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 64));
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(a1 + 76), 0);
  if (glCheckFramebufferStatus(0x8D40u) != 36053) {
    goto LABEL_62;
  }
  glVertexAttribPointer(*(_DWORD *)(a1 + 144), 2, 0x1406u, 0, 16, ptr);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 144));
  glVertexAttribPointer(*(_DWORD *)(a1 + 148), 2, 0x1406u, 0, 16, (char *)ptr + 8);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 148));
  glViewport(0, 0, v22 >> 1, WidthOfPlane);
  glUseProgram(*(_DWORD *)(a1 + 140));
  GLfloat v39 = 0.5 / v34;
  glUniform2f(*(_DWORD *)(a1 + 152), 0.0, v39);
  GLfloat v40 = v32 * 0.5;
  glUniform2f(*(_DWORD *)(a1 + 156), 1.0, v40);
  glDrawArrays(5u, 0, 4);
  if (!*(_DWORD *)(a1 + 60)) {
    goto LABEL_56;
  }
  if (!*(_DWORD *)(a1 + 24)) {
    [*(id *)(a1 + 16) setParameter:608 to:&v53];
  }
  else {
LABEL_56:
  }
    glFlush();
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 76));
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(a1 + 80), 0);
  if (glCheckFramebufferStatus(0x8D40u) != 36053)
  {
LABEL_62:
    unsigned int v23 = (void *)MEMORY[0x1E4F38D58];
    goto LABEL_22;
  }
  glVertexAttribPointer(*(_DWORD *)(v16 + 4), 2, 0x1406u, 0, 16, ptr);
  glEnableVertexAttribArray(*(_DWORD *)(v16 + 4));
  glVertexAttribPointer(*(_DWORD *)(v16 + 8), 2, 0x1406u, 0, 16, (char *)ptr + 8);
  glEnableVertexAttribArray(*(_DWORD *)(v16 + 8));
  glViewport(0, 0, v22 >> 1, WidthOfPlane);
  glUseProgram(*(_DWORD *)(a1 + v49));
  GLfloat v41 = 2.0 / v34;
  GLfloat v42 = 0.0 / v32;
  glUniform2f(*(_DWORD *)(v16 + 12), v41, v42);
  glDrawArrays(5u, 0, 4);
  if (*(_DWORD *)(a1 + 60) && !*(_DWORD *)(a1 + 24)) {
    [*(id *)(a1 + 16) setParameter:608 to:&v52];
  }
  else {
    glFlush();
  }
  glScissor(SHIDWORD(width) / 2, v26, v51 / 2, v50);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 80));
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(a1 + 36), 0);
  if (glCheckFramebufferStatus(0x8D40u) != 36053)
  {
    unsigned int v23 = (void *)MEMORY[0x1E4F38D58];
    goto LABEL_22;
  }
  glVertexAttribPointer(*(_DWORD *)(a1 + 144), 2, 0x1406u, 0, 16, ptr);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 144));
  glVertexAttribPointer(*(_DWORD *)(a1 + 148), 2, 0x1406u, 0, 16, (char *)ptr + 8);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 148));
  glViewport(0, 0, width, v22);
  glUseProgram(*(_DWORD *)(a1 + 140));
  GLfloat v43 = 0.5 / v32;
  glUniform2f(*(_DWORD *)(a1 + 152), 0.0, v43);
  GLfloat v44 = v34 * 0.5;
  glUniform2f(*(_DWORD *)(a1 + 156), 1.0, v44);
  glDrawArrays(5u, 0, 4);
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, 0, 0);
  glBindFramebuffer(0x8D40u, 0);
  glBindTexture(0xDE1u, 0);
  if (a5 == 1) {
    glFlush();
  }
  else {
    glFinish();
  }
  glGetError();
  [MEMORY[0x1E4F38D58] setCurrentContext:0];
  return 0;
}

void CreateTextureStorage(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  if (a1[11] != a2 || a1[12] != a3)
  {
    glActiveTexture(0x84C0u);
    glBindTexture(0xDE1u, a1[16]);
    glTexImage2D(0xDE1u, 0, 6408, a2 >> 1, a3, 0, 0x1908u, 0x1401u, 0);
    glTexParameterf(0xDE1u, 0x2802u, 33071.0);
    glTexParameterf(0xDE1u, 0x2803u, 33071.0);
    glTexParameterf(0xDE1u, 0x2800u, 9728.0);
    glTexParameterf(0xDE1u, 0x2801u, 9728.0);
    glBindTexture(0xDE1u, a1[19]);
    glTexImage2D(0xDE1u, 0, 6408, a3 >> 1, a2, 0, 0x1908u, 0x1401u, 0);
    glTexParameterf(0xDE1u, 0x2802u, 33071.0);
    glTexParameterf(0xDE1u, 0x2803u, 33071.0);
    glTexParameterf(0xDE1u, 0x2800u, 9728.0);
    glTexParameterf(0xDE1u, 0x2801u, 9728.0);
    glBindTexture(0xDE1u, a1[20]);
    glTexImage2D(0xDE1u, 0, 6408, a3 >> 1, a2, 0, 0x1908u, 0x1401u, 0);
    glTexParameterf(0xDE1u, 0x2802u, 33071.0);
    glTexParameterf(0xDE1u, 0x2803u, 33071.0);
    glTexParameterf(0xDE1u, 0x2800u, 9728.0);
    glTexParameterf(0xDE1u, 0x2801u, 9728.0);
    glBindTexture(0xDE1u, 0);
    a1[11] = a2;
    a1[12] = a3;
  }
}

int *ClampAndExpandScissor(int *result, int a2, int a3)
{
  int v3 = *result;
  if (*result < 0)
  {
    int v3 = 0;
    *double result = 0;
  }
  int v4 = result[1];
  if (v4 < 0)
  {
    int v4 = 0;
    result[1] = 0;
  }
  int v5 = result[2];
  if (v5 > a2 - v3)
  {
    result[2] = a2 - v3;
    int v5 = a2 - v3;
  }
  int v6 = result[3];
  if (v6 > a3 - v4)
  {
    result[3] = a3 - v4;
    int v6 = a3 - v4;
    if ((v3 & 1) == 0)
    {
LABEL_9:
      if ((v4 & 1) == 0) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
  }
  else if ((v3 & 1) == 0)
  {
    goto LABEL_9;
  }
  *double result = v3 - 1;
  result[2] = ++v5;
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
LABEL_15:
  result[1] = v4 - 1;
  result[3] = ++v6;
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v6 & 1) == 0) {
      return result;
    }
LABEL_17:
    result[3] = v6 + 1;
    return result;
  }
LABEL_16:
  result[2] = v5 + 1;
  if (v6) {
    goto LABEL_17;
  }
  return result;
}

uint64_t __WaitForInitializationToFinish_block_invoke(uint64_t result)
{
  uint64_t v1 = *(_DWORD **)(result + 32);
  if (*v1 != 2) {
    *uint64_t v1 = 1;
  }
  return result;
}

uint64_t gl_UtilsCreateProgramFromSources(GLchar *a1, GLchar *a2)
{
  GLuint Shader_0 = gl_UtilsCreateShader_0(0x8B31u, a1);
  if (!Shader_0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  GLuint v4 = Shader_0;
  GLuint v5 = gl_UtilsCreateShader_0(0x8B30u, a2);
  if (!v5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    glDeleteShader(v4);
    return 0;
  }
  GLuint v6 = v5;
  GLint params = 0;
  uint64_t Program = glCreateProgram();
  uint64_t v8 = Program;
  if (Program)
  {
    glAttachShader(Program, v4);
    glAttachShader(v8, v6);
    glLinkProgram(v8);
    glGetProgramiv(v8, 0x8B82u, &params);
    if (!params)
    {
      glDeleteProgram(v8);
      uint64_t v8 = 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  glDeleteShader(v4);
  glDeleteShader(v6);
  return v8;
}

uint64_t F32toF16(float a1)
{
  int v1 = HIWORD(LODWORD(a1)) & 0x8000;
  unsigned int v2 = (LODWORD(a1) >> 23);
  unsigned int v3 = ((((LODWORD(a1) & 0x7FFFFFu) >> 13) | (v2 << 10)) + 0x4000) | v1;
  if (v2 < 0x71) {
    LOWORD(v3) = HIWORD(a1) & 0x8000;
  }
  unsigned __int16 v4 = v1 | 0x7C00;
  if (v2 >= 0x8F) {
    LOWORD(v3) = v4;
  }
  unsigned __int16 v5 = v4 | LOWORD(a1) & 0x3FF;
  if ((LODWORD(a1) & 0x7FFFFF) == 0) {
    unsigned __int16 v5 = v4;
  }
  if (v2 != 255) {
    return (unsigned __int16)v3;
  }
  return v5;
}

uint64_t gl_UtilsCreateShader_0(GLenum a1, GLchar *a2)
{
  string = a2;
  uint64_t Shader = glCreateShader(a1);
  uint64_t v3 = Shader;
  if (Shader)
  {
    GLint params = 0;
    glShaderSource(Shader, 1, (const GLchar *const *)&string, 0);
    glCompileShader(v3);
    glGetShaderiv(v3, 0x8B81u, &params);
    if (!params)
    {
      glDeleteShader(v3);
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v3;
}

void *csu_secondaryNativeResolutionZoomFactorsForFormatIndex(void *a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = (void *)[a1 objectAtIndexedSubscript:(int)a2];
  unsigned __int16 v5 = (void *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F55310]];
  double result = (void *)[v5 count];
  if (result)
  {
    id v7 = (void *)[MEMORY[0x1E4F1CA48] arrayWithArray:v5];
    unint64_t v8 = 0x1E4F28000uLL;
    objc_msgSend(v7, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", a2));
    int v9 = (void *)[MEMORY[0x1E4F1CA80] set];
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    obuint64_t j = v7;
    uint64_t v10 = [v7 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v30;
      uint64_t v13 = MEMORY[0x1E4F1DB28];
LABEL_4:
      uint64_t v14 = 0;
      while (1)
      {
        if (*(void *)v30 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void **)(*((void *)&v29 + 1) + 8 * v14);
        if (([v15 intValue] & 0x80000000) != 0) {
          return 0;
        }
        unint64_t v16 = v8;
        int v17 = [v15 intValue];
        if ([a1 count] <= (unint64_t)v17) {
          return 0;
        }
        objc_msgSend(a1, "objectAtIndexedSubscript:", (int)objc_msgSend(v15, "intValue"));
        long long v28 = *(_OWORD *)(v13 + 16);
        if (!FigCFDictionaryGetCGRectIfPresent()) {
          return 0;
        }
        HIDWORD(v1_Block_object_dispose(&STACK[0x458], 8) = DWORD1(v28);
        *(float *)&double v18 = *(double *)&v28;
        unint64_t v8 = v16;
        objc_msgSend(v9, "addObject:", objc_msgSend(*(id *)(v16 + 3792), "numberWithFloat:", v18));
        if (v11 == ++v14)
        {
          uint64_t v11 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
          if (v11) {
            goto LABEL_4;
          }
          break;
        }
      }
    }
    if ((unint64_t)[v9 count] < 2) {
      return 0;
    }
    IOSurfaceRef v19 = objc_msgSend((id)objc_msgSend(v9, "allObjects"), "sortedArrayUsingSelector:", sel_compare_);
    uint64_t v20 = (void *)[MEMORY[0x1E4F1CA48] array];
    int v21 = [v19 count];
    if (v21 >= 2)
    {
      for (uint64_t i = (v21 - 2); i != -1; --i)
      {
        objc_msgSend((id)objc_msgSend(v19, "lastObject"), "floatValue");
        float v24 = v23;
        objc_msgSend((id)objc_msgSend(v19, "objectAtIndexedSubscript:", i), "floatValue");
        *(float *)&double v26 = v24 / v25;
        objc_msgSend(v20, "addObject:", objc_msgSend(*(id *)(v8 + 3792), "numberWithFloat:", v26));
      }
    }
    return BWFilterNonDisruptiveSwitchingFormatZoomFactors(v20);
  }
  return result;
}

void csu_handleDevicePropertyChangedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  id v19 = 0;
  if (((objc_msgSend(@"HiddenStateChanged", "isEqualToString:") & 1) != 0
     || ([@"DeviceTrackingActiveChanged" isEqualToString:a3] & 1) != 0)
    && a4
    && a5
    && ((FigBaseObject = FigCaptureDeviceGetFigBaseObject(a4), (uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v10 = 0)
      : (uint64_t v10 = v9),
        (uint64_t v11 = *(unsigned int (**)(uint64_t, __CFString *, void, id *))(v10 + 48)) != 0
     && !v11(FigBaseObject, @"CMIOExtensionDeviceID", *MEMORY[0x1E4F1CF80], &v19)
     && (uint64_t v12 = [a5 objectForKeyedSubscript:@"Value"], v19)
     && (uint64_t v13 = v12) != 0))
  {
    if (FigCFEqual())
    {
      double v26 = @"Hidden";
      v27[0] = v13;
      uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
      id v24 = v19;
      uint64_t v25 = v14;
      uint64_t v15 = (void *)MEMORY[0x1E4F1C9E8];
      unint64_t v16 = &v25;
      int v17 = &v24;
LABEL_17:
      csu_postSourceInfoArrayChangedNotificationIfNecessary((void *)[v15 dictionaryWithObjects:v16 forKeys:v17 count:1]);
      goto LABEL_18;
    }
    if (FigCFEqual())
    {
      size_t v22 = @"DockedTrackingActive";
      uint64_t v23 = v13;
      uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      id v20 = v19;
      uint64_t v21 = v18;
      uint64_t v15 = (void *)MEMORY[0x1E4F1C9E8];
      unint64_t v16 = &v21;
      int v17 = &v20;
      goto LABEL_17;
    }
  }
  else
  {
    FigDebugAssert3();
  }
LABEL_18:
}

uint64_t csu_defaultDeviceStreamArrayChangedNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((objc_msgSend(@"DefaultDeviceStreamsChanged", "isEqualToString:") & 1) == 0 || !a4 || a5) {
    return FigDebugAssert3();
  }
  uint64_t result = +[BWFigCaptureDeviceVendor videoCaptureDeviceFirmwareIsLoaded];
  if (result)
  {
    pthread_mutex_lock((pthread_mutex_t *)gCaptureSourceBackingsLock);
    gSourceInfoArrayChangeCGFloat d = 1;
    gDefaultDeviceStreamsChangeCGFloat d = 1;
    unint64_t v8 = (pthread_mutex_t *)gCaptureSourceBackingsLock;
    return pthread_mutex_unlock(v8);
  }
  return result;
}

void FigCaptureCreateSourceInfoArrayFromDeviceAndModelSpecificPlist(void *a1, void *a2, int a3, id *a4, void *a5, void *a6, void *a7)
{
  v57[7] = *MEMORY[0x1E4F143B8];
  VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist = csu_createVideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist(a1, a2);
  uint64_t v46 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:1];
  GLfloat v44 = a2;
  uint64_t v9 = (void *)[a2 objectForKeyedSubscript:@"AVCaptureDevices"];
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v47 objects:v55 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v48;
    while (2)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v48 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void **)(*((void *)&v47 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", @"mediaType"), "isEqual:", @"soun"))
        {
          uint64_t v15 = (void *)[v14 objectForKeyedSubscript:@"uniqueName"];
          if (!v15 || [v15 isEqualToString:@"Microphone"])
          {
            GLfloat v39 = VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist;
            DeepCopCGFloat y = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v14, 1uLL);
            int v38 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:2];
            [v38 setObject:@"soun" forKeyedSubscript:@"MediaType"];
            int v17 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:5];
            [v17 setObject:@"Microphone" forKeyedSubscript:@"NonLocalizedName"];
            [v17 setObject:&unk_1EFAFF600 forKeyedSubscript:@"SourceType"];
            [v17 setObject:&unk_1EFAFF618 forKeyedSubscript:@"DeviceType"];
            [v17 setObject:@"com.apple.avfoundation.avcapturedevice.built-in_audio:0" forKeyedSubscript:@"ModelID"];
            [v17 setObject:@"com.apple.avfoundation.avcapturedevice.built-in_audio:0" forKeyedSubscript:@"UniqueID"];
            GLint v37 = v17;
            objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(DeepCopy, "objectForKeyedSubscript:", @"prefersDecoupledIO"), @"PrefersDecoupledIO");
            id v18 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
            AllAVCaptureSessionPresets = FigCaptureStreamUtilitiesGetAllAVCaptureSessionPresets();
            v57[0] = @"RequiredNumChannels";
            v57[1] = @"RequiredSampleRate";
            v57[2] = @"RequiredBitRatePerChannel";
            v57[3] = @"PreferredSampleRate";
            _OWORD v57[4] = @"BitRatePerChannelForPreferredSampleRate";
            v57[5] = @"BitRateStrategyForPreferredSampleRate";
            v57[6] = @"VBRCodecQualityForPreferredSampleRate";
            uint64_t v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v57 count:7];
            csu_pruneDictionaryToJustKeys((void *)[DeepCopy objectForKeyedSubscript:@"AVCaptureSessionPresetCommon"], v20);
            long long v53 = 0u;
            long long v54 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            uint64_t v21 = [AllAVCaptureSessionPresets countByEnumeratingWithState:&v51 objects:v56 count:16];
            if (v21)
            {
              uint64_t v22 = v21;
              uint64_t v23 = *(void *)v52;
              do
              {
                for (uint64_t j = 0; j != v22; ++j)
                {
                  if (*(void *)v52 != v23) {
                    objc_enumerationMutation(AllAVCaptureSessionPresets);
                  }
                  uint64_t v25 = *(void *)(*((void *)&v51 + 1) + 8 * j);
                  double v26 = (void *)[DeepCopy objectForKeyedSubscript:v25];
                  if (v26)
                  {
                    int v27 = v26;
                    csu_pruneDictionaryToJustKeys(v26, v20);
                    FigCFDictionaryAddEntriesToDictionaryWithRecursion();
                    [v18 setObject:v27 forKeyedSubscript:v25];
                  }
                }
                uint64_t v22 = [AllAVCaptureSessionPresets countByEnumeratingWithState:&v51 objects:v56 count:16];
              }
              while (v22);
            }
            if (v18)
            {
              [v37 setObject:v18 forKeyedSubscript:@"AudioSettingsForPresetsMap"];
            }
            VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist = v39;
            if (objc_msgSend((id)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", @"stereoAudioCaptureSupported"), "BOOLValue"))objc_msgSend(v37, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], @"BuiltInMicrophoneStereoAudioCaptureSupported"); {
            if (objc_msgSend((id)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", @"cinematicAudioCaptureSupported"), "BOOLValue"))objc_msgSend(v37, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], @"CinematicAudioCaptureSupported");
            }
            if (objc_msgSend((id)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", @"windNoiseRemovalSupported"), "BOOLValue"))objc_msgSend(v37, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], @"WindNoiseRemovalSupported"); {
            [v38 setObject:v37 forKeyedSubscript:@"Attributes"];
            }

            [v46 addObject:v38];
            goto LABEL_30;
          }
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v47 objects:v55 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }
LABEL_30:
  long long v28 = objc_msgSend((id)objc_msgSend(v44, "objectForKeyedSubscript:", @"AVCaptureDeviceCommonSettings"), "mutableCopy");
  if ([v28 objectForKeyedSubscript:@"PreviewRegistrationType"]) {
    objc_msgSend(v28, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", BWPreviewRegistrationTypeFromShortString(objc_msgSend(v28, "objectForKeyedSubscript:", @"PreviewRegistrationType"))), @"PreviewRegistrationType");
  }
  if (a5) {
    *a5 = v28;
  }
  long long v29 = (void *)[v44 objectForKeyedSubscript:@"AVHEVCSettings"];
  long long v30 = v29;
  if (a6) {
    *a6 = v29;
  }
  long long v31 = (void *)[v44 objectForKeyedSubscript:@"AVH264Settings"];
  long long v32 = v31;
  if (a7) {
    *a7 = v31;
  }
  if ([VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist count] || objc_msgSend(v46, "count"))
  {
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [v33 addObjectsFromArray:VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist];
    [v33 addObjectsFromArray:v46];
    id v34 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    objc_msgSend(v34, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", 204), @"Version");
    [v34 setObject:(id)MGCopyAnswer() forKeyedSubscript:@"BuildVersion"];
    objc_msgSend(v34, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9C8], "date"), @"CreationDate");
    [v34 setObject:FigCaptureGetModelSpecificName() forKeyedSubscript:@"DeviceModel"];
    [v34 setObject:v33 forKeyedSubscript:@"Sources"];
    [v34 setObject:csu_dependentUserDefaultsDictionary() forKeyedSubscript:@"DependentUserDefaults"];
    [v34 setObject:v28 forKeyedSubscript:@"CommonSettings"];
    [v34 setObject:v30 forKeyedSubscript:@"HEVCSettings"];
    [v34 setObject:v32 forKeyedSubscript:@"H264Settings"];
    if (a3)
    {
      CFStringRef v35 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
      CFStringRef v36 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
      CFPreferencesSetValue(@"CaptureSourceInfo", v34, @"com.apple.cameracapture.volatile", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
      CFPreferencesSynchronize(@"com.apple.cameracapture.volatile", v35, v36);
    }
    if (a4) {
      *a4 = csu_createInMemorySourcesArrayFromOnDiskSourcesArray(v33);
    }
  }
}

void *csu_createVideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist(void *a1, const void *a2)
{
  uint64_t v497 = *MEMORY[0x1E4F143B8];
  long long v344 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:2];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  DeepCopCGFloat y = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 1uLL);
  unsigned __int16 v5 = (void *)[DeepCopy objectForKeyedSubscript:@"AVCaptureDevices"];
  long long v327 = DeepCopy;
  uint64_t v360 = [DeepCopy objectForKeyedSubscript:@"AVCaptureDeviceCommonSettings"];
  v375 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:0];
  uint64_t v358 = [MEMORY[0x1E4F1CA80] set];
  obuint64_t j = v5;
  csu_preprocessDeviceDicts(v5);
  if ((BWDeviceIsiPad() & 1) == 0)
  {
    memset(v492, 0, 64);
    uint64_t v6 = [v5 countByEnumeratingWithState:v492 objects:v493 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = **(void **)&v492[1];
      while (2)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (**(void **)&v492[1] != v8) {
            objc_enumerationMutation(obj);
          }
          uint64_t v10 = *(void **)(*((void *)&v492[0] + 1) + 8 * i);
          int v11 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", @"deviceType"), "intValue");
          int v12 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", @"position"), "intValue");
          if (v11 == 7 && v12 == 1)
          {
            uint64_t v14 = (id)CFPropertyListCreateDeepCopy(v3, v10, 1uLL);
            [v14 setObject:@"com.apple.avfoundation.avcapturedevice.built-in_deskview:1" forKeyedSubscript:@"uniqueID"];
            [v14 setObject:@"com.apple.avfoundation.avcapturedevice.built-in_deskview:1" forKeyedSubscript:@"modelID"];
            [v14 setObject:&unk_1EFAFF738 forKeyedSubscript:@"deviceType"];
            [v14 setObject:@"Desk View Camera" forKeyedSubscript:@"localizedName"];
            [v14 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"geometricDistortionCorrection"];
            if (v14) {
              [obj addObject:v14];
            }
            goto LABEL_16;
          }
        }
        uint64_t v7 = [obj countByEnumeratingWithState:v492 objects:v493 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
  }
LABEL_16:
  if ((int)FigCapturePlatformIdentifier() >= 4)
  {
    v377 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v15 = (void *)[MEMORY[0x1E4F1CA48] array];
    long long v479 = 0u;
    long long v480 = 0u;
    long long v481 = 0u;
    long long v482 = 0u;
    uint64_t v16 = [obj countByEnumeratingWithState:&v479 objects:v493 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      char v18 = 0;
      uint64_t v19 = *(void *)v480;
      do
      {
        for (uint64_t j = 0; j != v17; ++j)
        {
          if (*(void *)v480 != v19) {
            objc_enumerationMutation(obj);
          }
          uint64_t v21 = *(void **)(*((void *)&v479 + 1) + 8 * j);
          int v22 = objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", @"deviceType"), "intValue");
          if ((v22 - 17) <= 3)
          {
            int v23 = v22;
            objc_msgSend(v15, "addObject:", objc_msgSend(v21, "objectForKeyedSubscript:", @"uniqueName"));
            csu_addSecureMetadataKeysToDeviceDict(v21, a1);
            int v24 = objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", @"position"), "intValue");
            BOOL v26 = v23 == 19 && v24 == 2;
            v18 |= v26;
          }
        }
        uint64_t v17 = [obj countByEnumeratingWithState:&v479 objects:v493 count:16];
      }
      while (v17);
    }
    else
    {
      char v18 = 0;
    }
    long long v478 = 0u;
    long long v477 = 0u;
    long long v476 = 0u;
    long long v475 = 0u;
    uint64_t v395 = [obj countByEnumeratingWithState:&v475 objects:v492 count:16];
    if (v395)
    {
      id v392 = *(id *)v476;
      unint64_t v27 = 0x1E4F28000;
      v376 = v15;
      char v374 = v18;
      do
      {
        uint64_t v28 = 0;
        do
        {
          if (*(id *)v476 != v392) {
            objc_enumerationMutation(obj);
          }
          uint64_t v396 = v28;
          long long v29 = *(void **)(*((void *)&v475 + 1) + 8 * v28);
          if (objc_msgSend((id)objc_msgSend(v29, "objectForKeyedSubscript:", @"position"), "intValue") == 2)
          {
            unsigned int v30 = objc_msgSend((id)objc_msgSend(v29, "objectForKeyedSubscript:", @"deviceType"), "intValue") - 2;
            if (v30 <= 9 && ((0x229u >> v30) & 1) != 0)
            {
              long long v31 = off_1E5C274A8[v30];
              if (([v15 containsObject:v31] & 1) == 0)
              {
                long long v32 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                [v32 setObject:v31 forKeyedSubscript:@"uniqueName"];
                [v32 setObject:@"vide" forKeyedSubscript:@"mediaType"];
                objc_msgSend(v32, "setObject:forKeyedSubscript:", objc_msgSend(v29, "objectForKeyedSubscript:", @"hasAutoFocus"), @"hasAutoFocus");
                objc_msgSend(v32, "setObject:forKeyedSubscript:", objc_msgSend(v29, "objectForKeyedSubscript:", @"secureMetadataCameraSupported"), @"secureMetadataCameraSupported");
                FigCaptureSourcePreprocessVideoDeviceDict(v32, 0);
                csu_addSecureMetadataKeysToDeviceDict(v32, a1);
                v384 = v32;
                int v33 = objc_msgSend((id)objc_msgSend(v32, "objectForKeyedSubscript:", @"deviceType"), "intValue");
                if (v33 == 20)
                {
                  if (!objc_msgSend((id)objc_msgSend(v32, "objectForKeyedSubscript:", @"secureMetadataCameraSupported"), "BOOLValue"))goto LABEL_130; {
LABEL_48:
                  }
                  id v34 = (id)objc_msgSend((id)objc_msgSend(v29, "objectForKeyedSubscript:", @"MultiStream"), "mutableCopy");
                  CFStringRef v35 = (void *)[v34 objectForKeyedSubscript:@"AVCaptureDeviceFormats"];
                  v388 = v34;
                  uint64_t v36 = [v34 objectForKeyedSubscript:@"FigCaptureStreamFormats"];
                  v421 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                  *(void *)&long long v461 = 0;
                  LODWORD(v444) = 0;
                  LODWORD(v440) = 0;
                  *(void *)&long long v457 = 0;
                  unsigned int v456 = 0;
                  *(void *)v439 = 0;
                  *(void *)&long long v452 = 0;
                  uint64_t v438 = 0;
                  *(void *)&long long v448 = 0;
                  unsigned int v437 = 0;
                  long long v474 = 0u;
                  long long v473 = 0u;
                  long long v472 = 0u;
                  long long v471 = 0u;
                  id v425 = v35;
                  uint64_t v37 = [v35 countByEnumeratingWithState:&v471 objects:&v488 count:16];
                  if (v37)
                  {
                    uint64_t v38 = v37;
                    uint64_t v39 = *(void *)v472;
                    uint64_t v419 = *(void *)v472;
                    do
                    {
                      uint64_t v40 = 0;
                      uint64_t v423 = v38;
                      do
                      {
                        if (*(void *)v472 != v39) {
                          objc_enumerationMutation(v425);
                        }
                        uint64_t v41 = *(void *)(*((void *)&v471 + 1) + 8 * v40);
                        GLfloat v42 = (void *)[v425 objectForKeyedSubscript:v41];
                        unsigned int v43 = objc_msgSend((id)objc_msgSend(v42, "objectForKeyedSubscript:", @"Width"), "intValue");
                        if (v43 <= 0x780)
                        {
                          unsigned int v44 = v43;
                          int v45 = objc_msgSend((id)objc_msgSend(v42, "objectForKeyedSubscript:", @"Height"), "intValue");
                          uint64_t v46 = [v42 objectForKeyedSubscript:@"CaptureStreamFormat"];
                          long long v47 = (void *)v36;
                          while (1)
                          {
                            long long v48 = (void *)[v47 objectForKeyedSubscript:v46];
                            objc_opt_class();
                            if ((objc_opt_isKindOfClass() & 1) == 0) {
                              break;
                            }
                            long long v47 = (void *)v36;
                            uint64_t v46 = (uint64_t)v48;
                          }
                          int v49 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", @"Binned"), "BOOLValue");
                          unsigned int v50 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", @"MaxFrameRate"), "intValue");
                          if ([v42 objectForKeyedSubscript:@"MaxFrameRateOverride"]) {
                            unsigned int v50 = objc_msgSend((id)objc_msgSend(v42, "objectForKeyedSubscript:", @"MaxFrameRateOverride"), "intValue");
                          }
                          uint64_t v39 = v419;
                          if (v50 - 31 >= 0xFFFFFFE2) {
                            unsigned int v51 = v50;
                          }
                          else {
                            unsigned int v51 = 30;
                          }
                          int v52 = 9 * v44;
                          long long v53 = &v448;
                          if (v49) {
                            long long v53 = &v457;
                          }
                          long long v54 = (os_log_type_t *)&v438;
                          if (v49) {
                            long long v54 = (os_log_type_t *)&v456;
                          }
                          int32x4_t v55 = (os_log_type_t *)&v437;
                          if (v49) {
                            int32x4_t v55 = &v439[4];
                          }
                          GLint v56 = &v452;
                          if (v49) {
                            GLint v56 = &v461;
                          }
                          GLint v57 = v439;
                          if (v49) {
                            GLint v57 = (os_log_type_t *)&v444;
                          }
                          int v58 = (unsigned int *)&v438 + 1;
                          if (v49) {
                            int v58 = (unsigned int *)&v440;
                          }
                          BOOL v59 = v52 == 16 * v45;
                          if (v52 == 16 * v45) {
                            uint64_t v60 = (uint64_t *)v56;
                          }
                          else {
                            uint64_t v60 = (uint64_t *)v53;
                          }
                          if (v59) {
                            long long v61 = v57;
                          }
                          else {
                            long long v61 = v54;
                          }
                          if (v59) {
                            long long v62 = v58;
                          }
                          else {
                            long long v62 = (unsigned int *)v55;
                          }
                          uint64_t v38 = v423;
                          if (v44 > *(_DWORD *)v61 || v44 == *(_DWORD *)v61 && v51 < *v62)
                          {
                            *uint64_t v60 = v41;
                            *(_DWORD *)long long v61 = v44;
                            *long long v62 = v51;
                          }
                        }
                        ++v40;
                      }
                      while (v40 != v38);
                      uint64_t v38 = [v425 countByEnumeratingWithState:&v471 objects:&v488 count:16];
                    }
                    while (v38);
                    uint64_t v63 = (void *)v461;
                    CGSize v64 = (void *)[MEMORY[0x1E4F1CA48] array];
                    float v65 = v64;
                    if (v63)
                    {
                      id v407 = v63;
                      [v64 addObject:v63];
                      char v380 = 0;
                    }
                    else
                    {
                      id v407 = 0;
                      char v380 = 1;
                    }
                    unint64_t v27 = 0x1E4F28000;
                  }
                  else
                  {
                    float v65 = (void *)[MEMORY[0x1E4F1CA48] array];
                    id v407 = 0;
                    char v380 = 1;
                  }
                  uint64_t v66 = v457;
                  if ((void)v457) {
                    [v65 addObject:(void)v457];
                  }
                  uint64_t v67 = v452;
                  if ((void)v452) {
                    [v65 addObject:(void)v452];
                  }
                  uint64_t v68 = v448;
                  if ((void)v448) {
                    [v65 addObject:(void)v448];
                  }
                  uint64_t v414 = v68;
                  uint64_t v404 = v66;
                  long long v495 = 0u;
                  long long v496 = 0u;
                  memset(v494, 0, sizeof(v494));
                  uint64_t v424 = [v65 countByEnumeratingWithState:v494 objects:type count:16];
                  if (v424)
                  {
                    uint64_t v420 = **(void **)&v494[1];
                    unsigned int v399 = *(_DWORD *)&v439[4];
                    unsigned int v405 = v440;
                    unsigned int v410 = v437;
                    unsigned int v418 = HIDWORD(v438);
                    do
                    {
                      for (uint64_t k = 0; k != v424; ++k)
                      {
                        if (**(void **)&v494[1] != v420) {
                          objc_enumerationMutation(v65);
                        }
                        int32x4_t v70 = *(void **)(*((void *)&v494[0] + 1) + 8 * k);
                        uint64_t v71 = (void *)[v425 objectForKeyedSubscript:v70];
                        unint64_t v72 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                        long long v465 = 0u;
                        long long v466 = 0u;
                        long long v467 = 0u;
                        long long v468 = 0u;
                        uint64_t v73 = [&unk_1EFB03278 countByEnumeratingWithState:&v465 objects:v483 count:16];
                        if (v73)
                        {
                          uint64_t v74 = v73;
                          uint64_t v75 = *(void *)v466;
                          do
                          {
                            for (uint64_t m = 0; m != v74; ++m)
                            {
                              if (*(void *)v466 != v75) {
                                objc_enumerationMutation(&unk_1EFB03278);
                              }
                              objc_msgSend(v72, "setObject:forKeyedSubscript:", objc_msgSend(v71, "objectForKeyedSubscript:", *(void *)(*((void *)&v465 + 1) + 8 * m)), *(void *)(*((void *)&v465 + 1) + 8 * m));
                            }
                            uint64_t v74 = [&unk_1EFB03278 countByEnumeratingWithState:&v465 objects:v483 count:16];
                          }
                          while (v74);
                        }
                        char v77 = [v70 isEqualToString:v67];
                        uint64_t v78 = v418;
                        unint64_t v27 = 0x1E4F28000uLL;
                        if ((v77 & 1) != 0
                          || (v79 = [v70 isEqualToString:v414], uint64_t v78 = v410, (v79 & 1) != 0)
                          || (v80 = [v70 isEqualToString:v407], uint64_t v78 = v405, (v80 & 1) != 0)
                          || (v81 = [v70 isEqualToString:v404], uint64_t v78 = v399, v81))
                        {
                          objc_msgSend(v72, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v78), @"MaxFrameRateOverride");
                        }
                        [v421 setObject:v72 forKeyedSubscript:v70];
                      }
                      uint64_t v424 = [v65 countByEnumeratingWithState:v494 objects:type count:16];
                    }
                    while (v424);
                  }
                  [v388 setObject:v421 forKeyedSubscript:@"AVCaptureDeviceFormats"];
                  float v82 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                  float v83 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
                  if (v67)
                  {
                    [v82 setObject:v67 forKeyedSubscript:@"DeviceFormat"];
                    uint64_t v84 = HIDWORD(v438);
                    uint64_t v85 = [*(id *)(v27 + 3792) numberWithUnsignedInt:HIDWORD(v438)];
                    uint64_t v15 = v376;
                    char v18 = v374;
                    goto LABEL_128;
                  }
                  uint64_t v15 = v376;
                  char v18 = v374;
                  if (v414)
                  {
                    [v82 setObject:v414 forKeyedSubscript:@"DeviceFormat"];
                    unsigned int v86 = *(void **)(v27 + 3792);
                    uint64_t v84 = v437;
LABEL_127:
                    uint64_t v85 = [v86 numberWithUnsignedInt:v84];
LABEL_128:
                    [v82 setObject:v85 forKeyedSubscript:@"MinFrameRate"];
                    objc_msgSend(v82, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v27 + 3792), "numberWithUnsignedInt:", v84), @"MaxFrameRate");
                  }
                  else
                  {
                    if ((v380 & 1) == 0)
                    {
                      [v82 setObject:v407 forKeyedSubscript:@"DeviceFormat"];
                      unsigned int v86 = *(void **)(v27 + 3792);
                      uint64_t v84 = v440;
                      goto LABEL_127;
                    }
                    if (v404)
                    {
                      [v82 setObject:v404 forKeyedSubscript:@"DeviceFormat"];
                      unsigned int v86 = *(void **)(v27 + 3792);
                      uint64_t v84 = *(unsigned int *)&v439[4];
                      goto LABEL_127;
                    }
                  }
                  [v83 setObject:v82 forKeyedSubscript:@"AVCaptureSessionPresetHigh"];
                  [v388 setObject:v83 forKeyedSubscript:@"AVCaptureSessionPresets"];
                  [v384 setObject:v388 forKeyedSubscript:@"MultiStream"];
                  [v377 addObject:v384];
                  goto LABEL_130;
                }
                if (v33 != 18 || (v18 & 1) == 0) {
                  goto LABEL_48;
                }
              }
            }
          }
LABEL_130:
          uint64_t v28 = v396 + 1;
        }
        while (v396 + 1 != v395);
        uint64_t v395 = [obj countByEnumeratingWithState:&v475 objects:v492 count:16];
      }
      while (v395);
    }
    csu_preprocessDeviceDicts(v377);
    if (v377) {
      [obj addObjectsFromArray:v377];
    }
  }
  long long v436 = 0u;
  long long v435 = 0u;
  long long v434 = 0u;
  long long v433 = 0u;
  uint64_t v87 = [obj countByEnumeratingWithState:&v433 objects:v470 count:16];
  if (v87)
  {
    uint64_t v88 = v87;
    uint64_t v89 = *(void *)v434;
    while (2)
    {
      for (uint64_t n = 0; n != v88; ++n)
      {
        if (*(void *)v434 != v89) {
          objc_enumerationMutation(obj);
        }
        if (objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v433 + 1) + 8 * n), "objectForKeyedSubscript:", @"deviceType"), "intValue") == 5)
        {
          int v343 = 1;
          goto LABEL_144;
        }
      }
      uint64_t v88 = [obj countByEnumeratingWithState:&v433 objects:v470 count:16];
      if (v88) {
        continue;
      }
      break;
    }
  }
  int v343 = 0;
LABEL_144:
  long long v432 = 0u;
  long long v431 = 0u;
  long long v430 = 0u;
  long long v429 = 0u;
  float v91 = v375;
  float v92 = (void *)v358;
  uint64_t v361 = [obj countByEnumeratingWithState:&v429 objects:v469 count:16];
  if (!v361) {
    goto LABEL_596;
  }
  uint64_t v359 = *(void *)v430;
  v347 = (void *)*MEMORY[0x1E4F52DE0];
  uint64_t v330 = *MEMORY[0x1E4F54C08];
  uint64_t v357 = *MEMORY[0x1E4F549B0];
  uint64_t v356 = *MEMORY[0x1E4F549C0];
  uint64_t v342 = *MEMORY[0x1E4F54C30];
  uint64_t v355 = *MEMORY[0x1E4F547D8];
  uint64_t v341 = *MEMORY[0x1E4F52DA0];
  uint64_t v328 = *MEMORY[0x1E4F52E00];
  uint64_t v354 = *MEMORY[0x1E4F54930];
  uint64_t v353 = *MEMORY[0x1E4F54A18];
  uint64_t v340 = *MEMORY[0x1E4F54D08];
  uint64_t v333 = *MEMORY[0x1E4F55570];
  uint64_t v331 = *MEMORY[0x1E4F55560];
  uint64_t v332 = *MEMORY[0x1E4F55568];
  uint64_t v336 = *MEMORY[0x1E4F55318];
  uint64_t v335 = *MEMORY[0x1E4F55400];
  uint64_t v334 = *MEMORY[0x1E4F53B80];
  uint64_t v329 = *MEMORY[0x1E4F54960];
  uint64_t v352 = *MEMORY[0x1E4F54BD0];
  uint64_t v346 = *MEMORY[0x1E4F553B8];
  uint64_t v351 = *MEMORY[0x1E4F54CF8];
  uint64_t v339 = *MEMORY[0x1E4F54CE8];
  uint64_t v338 = *MEMORY[0x1E4F54C78];
  uint64_t v337 = *MEMORY[0x1E4F54CF0];
  uint64_t v350 = *MEMORY[0x1E4F54AE8];
  uint64_t v349 = *MEMORY[0x1E4F54D00];
  uint64_t v345 = *MEMORY[0x1E4F54CB0];
  uint64_t v348 = *MEMORY[0x1E4F54990];
  uint64_t v422 = *MEMORY[0x1E4F24D70];
  uint64_t v370 = *MEMORY[0x1E4F52DE8];
  uint64_t v406 = *MEMORY[0x1E4F55C70];
  unint64_t v93 = 0x1E4F28000uLL;
  uint64_t v372 = *MEMORY[0x1E4F552D8];
  do
  {
    uint64_t v94 = 0;
    do
    {
      if (*(void *)v430 != v359)
      {
        uint64_t v95 = v94;
        objc_enumerationMutation(obj);
        uint64_t v94 = v95;
      }
      uint64_t v362 = v94;
      float v96 = *(void **)(*((void *)&v429 + 1) + 8 * v94);
      if ((objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"mediaType", v325, v326), "isEqualToString:", @"vide") & 1) == 0&& !objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"mediaType"), "isEqualToString:", @"pcld"))
      {
        goto LABEL_590;
      }
      uint64_t v97 = [v96 objectForKeyedSubscript:@"modelID"];
      if ([v92 containsObject:v97])
      {
        long long v323 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v324 = *MEMORY[0x1E4F1C3B8];
        long long v322 = (__CFString *)[NSString stringWithFormat:@"Found duplicated modelID: %@", v97];
        long long v320 = v323;
        uint64_t v321 = v324;
        goto LABEL_598;
      }
      [v92 addObject:v97];
      double v98 = (id *)-[FigCaptureSourceStreamsContainer initWithDeviceType:position:stillImageDepthDataType:device:baseZoomFactorOverrides:clientBaseZoomFactorsByPortType:]([FigCaptureSourceStreamsContainer alloc], objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"deviceType"), "intValue"), objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"position"), "intValue"), objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"stillImageDepthDataType"), "intValue"), a1, objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamsBaseZoomFactorOverrides"), objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamsClientBaseZoomFactorsByPortType"));
      if (!v98)
      {
        LODWORD(v48_Block_object_dispose(&STACK[0x458], 8) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v107 = v488;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
          unsigned int v108 = v107;
        }
        else {
          unsigned int v108 = v107 & 0xFFFFFFFE;
        }
        if (v108)
        {
          uint64_t v109 = [v96 objectForKeyedSubscript:@"localizedName"];
          LODWORD(v492[0]) = 136315394;
          *(void *)((char *)v492 + 4) = "csu_createVideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist";
          WORD6(v492[0]) = 2114;
          *(void *)((char *)v492 + 14) = v109;
          LODWORD(v326) = 22;
          long long v325 = v492;
          _os_log_send_and_compose_impl();
        }
        float v91 = v375;
        float v92 = (void *)v358;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_590;
      }
      double v99 = v98;
      [v98[4] portType];
      v483[0] = 0;
      *(void *)&long long v479 = 0;
      *(void *)&long long v475 = 0;
      uint64_t v100 = [v96 objectForKeyedSubscript:@"mediaType"];
      id v101 = v99[4];
      double v102 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      id v103 = v99[4];
      v400 = (void *)[v103 supportedProperties];
      unsigned int v104 = *((_DWORD *)v99 + 2);
      unsigned int v426 = v104;
      BOOL v397 = (v104 > 0x14 || ((1 << v104) & 0x100420) == 0) && v104 - 21 < 0xFFFFFFFC;
      int32x4_t v110 = (void *)v360;
      objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"position"), "intValue");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"uniqueID"), @"UniqueID");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"modelID"), @"ModelID");
      [v102 setObject:@"Apple Inc." forKeyedSubscript:@"Manufacturer"];
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"localizedName"), @"NonLocalizedName");
      [v102 setObject:0x1EFA45440 forKeyedSubscript:@"CaptureDeviceID"];
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"position"), @"Position");
      [v102 setObject:&unk_1EFAFF618 forKeyedSubscript:@"SourceType"];
      uint64_t v111 = MEMORY[0x1E4F1CC38];
      [v102 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"MinFrameRate"];
      [v102 setObject:v111 forKeyedSubscript:@"MaxFrameRate"];
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v93 + 3792), "numberWithInt:", *((unsigned int *)v99 + 2)), @"DeviceType");
      int v112 = *((_DWORD *)v99 + 2);
      if (v112 == 12 || v112 == 6)
      {
        float64x2_t v113 = (void *)[v96 objectForKeyedSubscript:@"pearlModuleType"];
        if (v113) {
          uint64_t v114 = [v113 intValue];
        }
        else {
          uint64_t v114 = 1;
        }
        objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v93 + 3792), "numberWithInt:", v114), @"PearlModuleType");
        int v112 = *((_DWORD *)v99 + 2);
      }
      if (v112 == 10)
      {
        v493[0] = 0;
        float v115 = (void *)[v99[5] objectForKeyedSubscript:v347];
        if ((int)FigCapturePlatformIdentifier() < 7)
        {
          [v102 setObject:&unk_1EFB032A8 forKeyedSubscript:@"SupportedTimeOfFlightProjectorModes"];
          [v102 setObject:&unk_1EFAFF618 forKeyedSubscript:@"TimeOfFlightCameraType"];
          uint64_t v111 = MEMORY[0x1E4F1CC38];
        }
        else
        {
          int32x4_t v116 = objc_msgSend((id)objc_msgSend(v115, "getProperty:error:", v330, v493), "mutableCopy");
          if ([v116 containsObject:&unk_1EFAFF750]) {
            [v116 removeObject:&unk_1EFAFF750];
          }
          [v102 setObject:v116 forKeyedSubscript:@"SupportedTimeOfFlightProjectorModes"];

          float v117 = (void *)[v96 objectForKeyedSubscript:@"TimeOfFlightCameraType"];
          if (v117) {
            uint64_t v118 = [v117 intValue];
          }
          else {
            uint64_t v118 = 1;
          }
          uint64_t v111 = MEMORY[0x1E4F1CC38];
          objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v93 + 3792), "numberWithInt:", v118), @"TimeOfFlightCameraType");
        }
      }
      if ([v400 objectForKeyedSubscript:v357]) {
        [v102 setObject:v111 forKeyedSubscript:@"ISPAPSData"];
      }
      if ([v400 objectForKeyedSubscript:v356]) {
        [v102 setObject:v111 forKeyedSubscript:@"ISPMotionData"];
      }
      if (v397 && [v400 objectForKeyedSubscript:v342]) {
        [v102 setObject:v111 forKeyedSubscript:@"TimeLapseSupported"];
      }
      if ([v400 objectForKeyedSubscript:v355]) {
        [v102 setObject:v111 forKeyedSubscript:@"AutoFocusPositionSensorCalibrationSupported"];
      }
      uint64_t v371 = (uint64_t)v99;
      id v393 = v101;
      v389 = v103;
      if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"hasAutoFocus"), "BOOLValue"))
      {
        [v102 setObject:v111 forKeyedSubscript:@"Focus"];
        [v102 setObject:v111 forKeyedSubscript:@"FocusPointOfInterest"];
        objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"ContinuousAutoFocusWindowWidthOverride"), "floatValue");
        float v120 = v119;
        objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"ContinuousAutoFocusWindowHeightOverride"), "floatValue");
        if (v120 > 0.0 && v121 > 0.0)
        {
          v498.CGFloat height = v121;
          v498.uint64_t width = v120;
          CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v498);
          [v102 setObject:DictionaryRepresentation forKeyedSubscript:@"DefaultContinuousAutoFocusWindowSize"];
          CFDictionaryRef v123 = DictionaryRepresentation;
          uint64_t v111 = MEMORY[0x1E4F1CC38];
          CFRelease(v123);
        }
        objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"FocusCenterWindowSize"), "floatValue");
        if (v124 > 0.0)
        {
          v499.CGFloat height = v124;
          v499.uint64_t width = (float)(v124 * 0.75);
          CFDictionaryRef v125 = CGSizeCreateDictionaryRepresentation(v499);
          [v102 setObject:v125 forKeyedSubscript:@"DefaultAutoFocusCenterWindowSize"];
          CFDictionaryRef v126 = v125;
          uint64_t v111 = MEMORY[0x1E4F1CC38];
          CFRelease(v126);
        }
        objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"FocusPointOfInterestWindowSize"), "floatValue");
        if (v127 > 0.0)
        {
          v500.CGFloat height = v127;
          v500.uint64_t width = (float)(v127 * 0.75);
          CFDictionaryRef v128 = CGSizeCreateDictionaryRepresentation(v500);
          [v102 setObject:v128 forKeyedSubscript:@"DefaultAutoFocusTapWindowSize"];
          CFDictionaryRef v129 = v128;
          uint64_t v111 = MEMORY[0x1E4F1CC38];
          CFRelease(v129);
        }
        [v102 setObject:v111 forKeyedSubscript:@"AutoFocusRangeRestriction"];
        if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"smoothAutoFocusSupported"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], @"SmoothFocus"); {
        if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"autoFocusPositionSensorMode"), "intValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"autoFocusPositionSensorMode"), @"AutoFocusPositionSensorMode");
        }
        uint64_t v130 = [v96 objectForKeyedSubscript:@"manualFocusSupported"];
        if (v130) {
          uint64_t v131 = v130;
        }
        else {
          uint64_t v131 = MEMORY[0x1E4F1CC38];
        }
        [v102 setObject:v131 forKeyedSubscript:@"ManualFocus"];
        if (objc_msgSend((id)objc_msgSend(v99[2], "supportedProperties"), "objectForKeyedSubscript:", v341))
        {
          int v132 = BWCaptureDevicePositionFromPortType(v347);
          long long v490 = 0u;
          long long v491 = 0u;
          long long v488 = 0u;
          long long v489 = 0u;
          int32x4_t v133 = (void *)[v99[5] allKeys];
          uint64_t v134 = [v133 countByEnumeratingWithState:&v488 objects:v493 count:16];
          if (v134)
          {
            uint64_t v135 = v134;
            uint64_t v136 = *(void *)v489;
            while (2)
            {
              uint64_t v137 = v100;
              for (iuint64_t i = 0; ii != v135; ++ii)
              {
                if (*(void *)v489 != v136) {
                  objc_enumerationMutation(v133);
                }
                if (BWCaptureDevicePositionFromPortType(*(void **)(*((void *)&v488 + 1) + 8 * ii)) == v132)
                {
                  [v102 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA6B2A0];
                  uint64_t v100 = v137;
                  goto LABEL_215;
                }
              }
              uint64_t v135 = [v133 countByEnumeratingWithState:&v488 objects:v493 count:16];
              uint64_t v100 = v137;
              if (v135) {
                continue;
              }
              break;
            }
          }
        }
LABEL_215:
        int32x4_t v110 = (void *)v360;
        id v103 = v389;
        id v101 = v393;
        if (v343)
        {
          if (objc_msgSend((id)objc_msgSend(v102, "objectForKeyedSubscript:", @"Position"), "intValue") == 2)
          {
            if (objc_msgSend((id)objc_msgSend(v102, "objectForKeyedSubscript:", @"Focus"), "BOOLValue"))
            {
              uint64_t v139 = [*(id *)(v371 + 16) copyStreamWithPortType:v328 error:0];
              if (v139)
              {
                double v140 = (void *)v139;
                [v102 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA6B2C0];
              }
            }
          }
        }
      }
      unsigned int v141 = v426 - 17;
      if (v397)
      {
        uint64_t v142 = MEMORY[0x1E4F1CC38];
        [v102 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"Exposure"];
        [v102 setObject:v142 forKeyedSubscript:@"ExposurePointOfInterest"];
        objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"ExposureCenterWindowSize"), "floatValue");
        if (v143 > 0.0)
        {
          v501.uint64_t width = v143;
          v501.CGFloat height = v501.width;
          CFDictionaryRef v144 = CGSizeCreateDictionaryRepresentation(v501);
          [v102 setObject:v144 forKeyedSubscript:@"DefaultAutoExposureCenterWindowSize"];
          CFDictionaryRef v145 = v144;
          uint64_t v142 = MEMORY[0x1E4F1CC38];
          CFRelease(v145);
        }
        objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"ExposurePointOfInterestWindowSize"), "floatValue");
        if (v146 > 0.0)
        {
          v502.CGFloat height = (float)(v146 * 1.3333);
          v502.uint64_t width = v146;
          CFDictionaryRef v147 = CGSizeCreateDictionaryRepresentation(v502);
          [v102 setObject:v147 forKeyedSubscript:@"DefaultAutoExposureTapWindowSize"];
          CFDictionaryRef v148 = v147;
          uint64_t v142 = MEMORY[0x1E4F1CC38];
          CFRelease(v148);
        }
        uint64_t v149 = [v96 objectForKeyedSubscript:@"manualExposureSupported"];
        if (v149) {
          uint64_t v150 = v149;
        }
        else {
          uint64_t v150 = v142;
        }
        [v102 setObject:v150 forKeyedSubscript:@"ManualExposure"];
        if (objc_msgSend((id)objc_msgSend(v110, "objectForKeyedSubscript:", @"appliesSessionPresetMaxIntegrationTimeOverrideToActiveFormat"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v142, @"AppliesSessionPresetMaxIntegrationTimeOverrideToActiveFormat"); {
        objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v103, "getProperty:error:", v354, 0), @"FocalLength");
        }
        objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v103, "getProperty:error:", v353, 0), @"LensAperture");
        if (objc_msgSend((id)objc_msgSend(v110, "objectForKeyedSubscript:", @"softISPSupported"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v142, 0x1EFA4ABE0); {
        if ((objc_msgSend((id)objc_msgSend(v110, "objectForKeyedSubscript:", @"singleFrameHighlightRecoverySupported"), "BOOLValue") & 1) != 0|| objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"singleFrameHighlightRecoverySupported"), "BOOLValue"))
        }
        {
          [v102 setObject:v142 forKeyedSubscript:0x1EFA6B9A0];
        }
        if ((objc_msgSend((id)objc_msgSend(v110, "objectForKeyedSubscript:", @"lowlightSingleFrameHighlightRecoverySupported"), "BOOLValue") & 1) != 0|| objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"lowlightSingleFrameHighlightRecoverySupported"), "BOOLValue"))
        {
          [v102 setObject:v142 forKeyedSubscript:0x1EFA6B9C0];
        }
        objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"quadraQSubProcessingSupported"), 0x1EFA6B9E0);
        [v102 setObject:v142 forKeyedSubscript:@"WhiteBalance"];
        double v151 = (void *)[v103 getProperty:v340 error:0];
        if (v151)
        {
          uint64_t v152 = v151;
          DWORD2(v492[0]) = 0;
          *(void *)&v492[0] = 0;
          *(float *)v492 = (float)(int)objc_msgSend((id)objc_msgSend(v151, "objectForKeyedSubscript:", v333), "intValue")* 0.00024414;
          *((float *)v492 + 1) = (float)(int)objc_msgSend((id)objc_msgSend(v152, "objectForKeyedSubscript:", v332), "intValue")* 0.00024414;
          *((float *)v492 + 2) = (float)(int)objc_msgSend((id)objc_msgSend(v152, "objectForKeyedSubscript:", v331), "intValue")* 0.00024414;
          uint64_t v153 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v492 length:12];
          [v102 setObject:v153 forKeyedSubscript:@"DefaultWhiteBalanceGains"];
        }
        uint64_t v154 = [v96 objectForKeyedSubscript:@"manualWhiteBalanceSupported"];
        uint64_t v155 = MEMORY[0x1E4F1CC38];
        if (v154) {
          uint64_t v156 = v154;
        }
        else {
          uint64_t v156 = MEMORY[0x1E4F1CC38];
        }
        [v102 setObject:v156 forKeyedSubscript:@"ManualWhiteBalance"];
        if ((int)FigCapturePlatformIdentifier() >= 3)
        {
          [v102 setObject:v155 forKeyedSubscript:@"HEVC"];
          [v102 setObject:v155 forKeyedSubscript:@"HEIF"];
          if (objc_msgSend((id)objc_msgSend(v110, "objectForKeyedSubscript:", @"HEVCPreferred"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v155, @"PrefersHEVC"); {
        }
          }
        if (objc_msgSend((id)objc_msgSend(v110, "objectForKeyedSubscript:", @"smartCameraSupported"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v155, @"SmartCameraSupported"); {
        if ((int)FigCapturePlatformIdentifier() >= 5)
        }
          [v102 setObject:v155 forKeyedSubscript:@"GlobalToneMapping"];
        if (csu_deviceSupportsWideColor(v371, v110)) {
          [v102 setObject:v155 forKeyedSubscript:@"WideColor"];
        }
        goto LABEL_254;
      }
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v103, "getProperty:error:", v354, 0), @"FocalLength");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v103, "getProperty:error:", v353, 0), @"LensAperture");
      uint64_t v155 = MEMORY[0x1E4F1CC38];
      if (v141 <= 3)
      {
        if (v426 != 20)
        {
LABEL_254:
          if (objc_msgSend((id)objc_msgSend(v110, "objectForKeyedSubscript:", @"faceTrackingSupported"), "BOOLValue")&& (!objc_msgSend(v96, "objectForKeyedSubscript:", @"faceTrackingSupported")|| objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"faceTrackingSupported"), "BOOLValue")))
          {
            [v102 setObject:v155 forKeyedSubscript:@"FaceTracking"];
          }
          if (objc_msgSend((id)objc_msgSend(v110, "objectForKeyedSubscript:", @"objectDetectionSupported"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v155, @"ObjectsDetection"); {
          if (v141 > 3)
          }
            goto LABEL_265;
        }
        unsigned int v157 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v103, "getProperty:error:", @"SupportedFormatsArray", 0), "firstObject"), "objectForKeyedSubscript:", v336), "objectForKeyedSubscript:", v335);
        objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"secureMetadataCameraSupported"), 0x1EFA6B620);
        if (v426 == 20) {
          [v102 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"AttentionDetectionSupported"];
        }
        uint64_t v158 = [v157 objectForKeyedSubscript:v334];
        uint64_t v155 = MEMORY[0x1E4F1CC38];
        if (v158) {
          [v102 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA6B600];
        }
      }
LABEL_265:
      uint64_t v159 = v371;
      unsigned int v160 = *(_DWORD *)(v371 + 8);
      if ((v160 > 0xD || ((1 << v160) & 0x3350) == 0)
        && objc_msgSend((id)objc_msgSend(v103, "supportedProperties"), "objectForKeyedSubscript:", v329)
        && [v103 getProperty:v329 error:0])
      {
        [v102 setObject:v155 forKeyedSubscript:@"CameraCalibrationDataDeliverySupported"];
      }
      if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"hasFlash"), "BOOLValue")) {
        [v102 setObject:v155 forKeyedSubscript:@"Flash"];
      }
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"autoFlashNormalizedSNRThreshold"), 0x1EFA6B980);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamsSwitchOverParameters"), 0x1EFA6BA40);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamsStereoFusionZoomFactorRange"), 0x1EFA6BA80);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamsSlaveFrameRates"), 0x1EFA6BAA0);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamsBaseZoomFactorCalibrations"), 0x1EFA6BAC0);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamsBaseZoomFactorOverrides"), 0x1EFA6BB20);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamsClientBaseZoomFactorsByPortType"), 0x1EFA6BB40);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamsOISSISStereoFusionTeleMinIntegrationTimeDenominator"), 0x1EFA6BB60);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamsOISSISStereoFusionTeleMinGain"), 0x1EFA6BB80);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"stillImageCaptureNowAfterAutofocusTimeout"), 0x1EFA6BBC0);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"stillImageContrastBasedAutofocusTimeout"), 0x1EFA6BBE0);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"stillImagePhaseDetectionAutofocusTimeout"), 0x1EFA6BC00);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"minimumFocusDistance"), @"MinimumFocusDistance");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v110, "objectForKeyedSubscript:", @"VideoStabilizationAutoSelectionCinematicExtendedEnhancedDisabled"), @"VideoStabilizationAutoSelectionCinematicExtendedEnhancedDisabled");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"MainToSIFRSkipRatioFor60FPS"), @"MainToSIFRSkipRatioFor60FPS");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"MainToSIFRFrameRateRatio"), @"MainToSIFRFrameRateRatio");
      if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"hasTorch"), "BOOLValue")) {
        [v102 setObject:v155 forKeyedSubscript:@"Torch"];
      }
      if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"visionDataDeliverySupported"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v155, @"VisionDataDeliverySupported"); {
      if ((unint64_t)[*(id *)(v371 + 40) count] >= 2)
      }
      {
        int v161 = (void *)-[FigCaptureSourceStreamsContainer switchOverZoomFactors](v371);
        if ([v161 count]) {
          [v102 setObject:v161 forKeyedSubscript:@"BravoSwitchOverVideoZoomFactors"];
        }
      }
      unsigned int v162 = objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"MultiStream"), "objectForKeyedSubscript:", @"AVCaptureDeviceFormats");
      *(_OWORD *)type = 0u;
      long long v485 = 0u;
      long long v486 = 0u;
      long long v487 = 0u;
      id v408 = (id)[v162 allValues];
      uint64_t v163 = [v408 countByEnumeratingWithState:type objects:v492 count:16];
      uint64_t v164 = MEMORY[0x1E4F1CC38];
      uint64_t v415 = v163;
      if (!v163) {
        goto LABEL_328;
      }
      v378 = v102;
      uint64_t v381 = v100;
      v385 = v96;
      LOBYTE(v165) = 0;
      LOBYTE(v100) = 0;
      char v166 = 0;
      LOBYTE(v96) = 0;
      LOBYTE(v167) = 0;
      LOBYTE(v16_Block_object_dispose(&STACK[0x458], 8) = 0;
      LOBYTE(v169) = 0;
      LOBYTE(v170) = 0;
      LOBYTE(v427) = 0;
      uint64_t v411 = *(void *)v485;
      do
      {
        uint64_t v171 = 0;
        do
        {
          if (*(void *)v485 != v411) {
            objc_enumerationMutation(v408);
          }
          float v172 = *(void **)(*(void *)&type[8] + 8 * v171);
          if (v165)
          {
            BOOL v165 = 1;
            if ((v100 & 1) == 0) {
              goto LABEL_283;
            }
          }
          else
          {
            BOOL v165 = (int)objc_msgSend((id)objc_msgSend(*(id *)(*(void *)&type[8] + 8 * v171), "objectForKeyedSubscript:", 0x1EFA506E0), "intValue") > 0;
            if ((v100 & 1) == 0)
            {
LABEL_283:
              LODWORD(v100) = objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", 0x1EFA50820), "BOOLValue");
              if ((v166 & 1) == 0) {
                goto LABEL_284;
              }
              goto LABEL_288;
            }
          }
          LODWORD(v100) = 1;
          if ((v166 & 1) == 0)
          {
LABEL_284:
            char v166 = objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", 0x1EFA50840), "BOOLValue");
            if (v96) {
              goto LABEL_291;
            }
            goto LABEL_289;
          }
LABEL_288:
          char v166 = 1;
          if (v96) {
            goto LABEL_291;
          }
LABEL_289:
          if ((objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", 0x1EFA50FC0), "BOOLValue") & 1) != 0
            || objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", 0x1EFA510C0), "BOOLValue"))
          {
LABEL_291:
            LODWORD(v96) = 1;
            if (v167) {
              goto LABEL_292;
            }
            goto LABEL_297;
          }
          LODWORD(v96) = 0;
          if (v167)
          {
LABEL_292:
            int v167 = 1;
            if ((v168 & 1) == 0) {
              goto LABEL_293;
            }
            goto LABEL_298;
          }
LABEL_297:
          int v167 = objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", 0x1EFA508A0), "BOOLValue");
          if ((v168 & 1) == 0)
          {
LABEL_293:
            int v168 = objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", 0x1EFA50580), "BOOLValue");
            if ((v169 & 1) == 0) {
              goto LABEL_294;
            }
            goto LABEL_299;
          }
LABEL_298:
          int v168 = 1;
          if ((v169 & 1) == 0)
          {
LABEL_294:
            int v169 = objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", @"NightModeSupported"), "BOOLValue");
            if (v170) {
              goto LABEL_303;
            }
            goto LABEL_300;
          }
LABEL_299:
          int v169 = 1;
          if (v170) {
            goto LABEL_303;
          }
LABEL_300:
          if ((objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", 0x1EFA50AC0), "BOOLValue") & 1) != 0
            || (objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", 0x1EFA50AE0), "BOOLValue") & 1) != 0
            || objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", 0x1EFA50B00), "BOOLValue"))
          {
LABEL_303:
            int v170 = 1;
            goto LABEL_304;
          }
          int v170 = 0;
LABEL_304:
          if (v427) {
            int v427 = 1;
          }
          else {
            int v427 = objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", 0x1EFA507A0), "BOOLValue");
          }
          ++v171;
        }
        while (v415 != v171);
        uint64_t v173 = [v408 countByEnumeratingWithState:type objects:v492 count:16];
        uint64_t v415 = v173;
      }
      while (v173);
      if (v165)
      {
        double v102 = v378;
        uint64_t v164 = MEMORY[0x1E4F1CC38];
        [v378 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"RedEyeReduction"];
        id v101 = v393;
        if ((v100 & 1) == 0) {
          goto LABEL_313;
        }
LABEL_321:
        [v102 setObject:v164 forKeyedSubscript:0x1EFA4E3C0];
        unint64_t v93 = 0x1E4F28000uLL;
        if ((v96 & 1) == 0) {
          goto LABEL_322;
        }
LABEL_314:
        [v102 setObject:v164 forKeyedSubscript:0x1EFA50FC0];
        uint64_t v100 = v381;
        if ((v167 & 1) == 0) {
          goto LABEL_315;
        }
LABEL_323:
        [v102 setObject:v164 forKeyedSubscript:0x1EFA6B5A0];
        float v96 = v385;
        if ((v168 & 1) == 0) {
          goto LABEL_324;
        }
LABEL_316:
        [v102 setObject:v164 forKeyedSubscript:@"SIS"];
        id v103 = v389;
        if ((v169 & 1) == 0) {
          goto LABEL_317;
        }
LABEL_325:
        [v102 setObject:v164 forKeyedSubscript:0x1EFA6BA00];
        int32x4_t v110 = (void *)v360;
        if ((v170 & 1) == 0) {
          goto LABEL_326;
        }
LABEL_318:
        [v102 setObject:v164 forKeyedSubscript:@"VideoStabilization"];
        uint64_t v159 = v371;
        if ((v427 & 1) == 0) {
          goto LABEL_328;
        }
LABEL_327:
        [v102 setObject:v164 forKeyedSubscript:0x1EFA6BC20];
        goto LABEL_328;
      }
      uint64_t v164 = MEMORY[0x1E4F1CC38];
      id v101 = v393;
      double v102 = v378;
      if (v100) {
        goto LABEL_321;
      }
LABEL_313:
      unint64_t v93 = 0x1E4F28000;
      if (v96) {
        goto LABEL_314;
      }
LABEL_322:
      uint64_t v100 = v381;
      if (v167) {
        goto LABEL_323;
      }
LABEL_315:
      float v96 = v385;
      if (v168) {
        goto LABEL_316;
      }
LABEL_324:
      id v103 = v389;
      if (v169) {
        goto LABEL_325;
      }
LABEL_317:
      int32x4_t v110 = (void *)v360;
      if (v170) {
        goto LABEL_318;
      }
LABEL_326:
      uint64_t v159 = v371;
      if (v427) {
        goto LABEL_327;
      }
LABEL_328:
      if ([v400 objectForKeyedSubscript:v352])
      {
        [v102 setObject:v164 forKeyedSubscript:@"Sphere"];
        [v102 setObject:v164 forKeyedSubscript:@"SphereVideo"];
        objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"SphereVideoMaxFrameRate"), @"SphereVideoMaxFrameRate");
        if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"sphereModeStillActivePreviewSupported"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v164, @"SphereStillActivePreview"); {
      }
        }
      if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"stillImageISPChromaNoiseReductionSupported"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v164, 0x1EFA50800); {
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"stillImageNoiseReductionAndFusionScheme"), 0x1EFA6BA20);
      }
      if (v397)
      {
        [v102 setObject:v164 forKeyedSubscript:@"VideoPreviewHistogram"];
        if (objc_msgSend((id)objc_msgSend(v110, "objectForKeyedSubscript:", @"ProResSupported"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v164, @"ProResSupported"); {
      }
        }
      if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"ispChromaNoiseReductionForPairingDisabled"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v164, 0x1EFA6BBA0); {
      if ([+[FigCaptureCameraParameters sharedInstance] focalLengthCharacterizationForStream:v103])
      }
      {
        [v102 setObject:v164 forKeyedSubscript:@"FocalLengthCharacterization"];
      }
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"multiPassIspMBNRSupported"), @"MultiPassIspMBNRSupported");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"ispMBNRSupported"), @"IspMBNRSupported");
      uint64_t v174 = [v96 objectForKeyedSubscript:@"stillImageDepthDataType"];
      if (v174) {
        [v102 setObject:v174 forKeyedSubscript:@"StillImageDepthDataType"];
      }
      if (-[FigCaptureSourceStreamsContainer portTypesSupportingDepth](v159))
      {
        [v102 setObject:-[FigCaptureSourceStreamsContainer zoomFactorsForDepth](v371) forKeyedSubscript:@"VideoZoomFactorsForDepthDataDelivery"];
        if (objc_msgSend((id)objc_msgSend(v110, "objectForKeyedSubscript:", @"SupportedSemanticSegmentationMatteURNs"), "count"))
        {
          objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v110, "objectForKeyedSubscript:", @"SupportedSemanticSegmentationMatteURNs"), @"SupportedSemanticSegmentationMatteURNs");
        }
        objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"PortraitEffectsMatteMainImageDownscalingFactor"), "floatValue");
        if (v175 > 0.0) {
          objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"PortraitEffectsMatteMainImageDownscalingFactor"), @"PortraitEffectsMatteMainImageDownscalingFactor");
        }
        uint64_t v176 = [v110 objectForKeyedSubscript:@"DepthDataDeliveryConfigurations"];
        if (v176)
        {
          float v177 = (void *)v176;
          float v178 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          if (objc_msgSend((id)objc_msgSend(v177, "objectForKeyedSubscript:", @"DemosaicedRawConfigurationSupported"), "BOOLValue"))objc_msgSend(v178, "setObject:forKeyedSubscript:", objc_msgSend(v177, "objectForKeyedSubscript:", @"DemosaicedRawConfigurationSupported"), @"DemosaicedRawConfigurationSupported"); {
          if (objc_msgSend((id)objc_msgSend(v177, "objectForKeyedSubscript:", @"DCProcessingSupported"), "BOOLValue"))objc_msgSend(v178, "setObject:forKeyedSubscript:", objc_msgSend(v177, "objectForKeyedSubscript:", @"DCProcessingSupported"), @"DCProcessingSupported");
          }
          if (objc_msgSend((id)objc_msgSend(v177, "objectForKeyedSubscript:", @"StillImageGGMSupported"), "BOOLValue"))objc_msgSend(v178, "setObject:forKeyedSubscript:", objc_msgSend(v177, "objectForKeyedSubscript:", @"StillImageGGMSupported"), @"StillImageGGMSupported"); {
          if (objc_msgSend((id)objc_msgSend(v177, "objectForKeyedSubscript:", @"VideoSTFMetadataSupported"), "BOOLValue"))objc_msgSend(v178, "setObject:forKeyedSubscript:", objc_msgSend(v177, "objectForKeyedSubscript:", @"VideoSTFMetadataSupported"), @"VideoSTFMetadataSupported");
          }
          if (objc_msgSend((id)objc_msgSend(v177, "objectForKeyedSubscript:", @"FastModeSwitchingSupported"), "BOOLValue"))objc_msgSend(v178, "setObject:forKeyedSubscript:", objc_msgSend(v177, "objectForKeyedSubscript:", @"FastModeSwitchingSupported"), @"FastModeSwitchingSupported"); {
          if (objc_msgSend((id)objc_msgSend(v177, "objectForKeyedSubscript:", @"CapturePipeliningSupported"), "BOOLValue"))objc_msgSend(v178, "setObject:forKeyedSubscript:", objc_msgSend(v177, "objectForKeyedSubscript:", @"CapturePipeliningSupported"), @"CapturePipeliningSupported");
          }
          if (objc_msgSend((id)objc_msgSend(v177, "objectForKeyedSubscript:", @"DeepFusionSupported"), "BOOLValue"))objc_msgSend(v178, "setObject:forKeyedSubscript:", objc_msgSend(v177, "objectForKeyedSubscript:", @"DeepFusionSupported"), @"DeepFusionSupported"); {
          if ([v178 count])
          }
            [v102 setObject:v178 forKeyedSubscript:@"DepthDataDeliveryConfigurations"];
        }
      }
      if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"previewQualityAdjustedPhotoFilterRenderingSupported"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], @"PreviewQualityAdjustedPhotoFilterRenderingSupported"); {
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"SpherePowerConsumption"), "objectForKeyedSubscript:", @"Lock"), @"PowerConsumptionInSphereModeLock");
      }
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"SpherePowerConsumption"), "objectForKeyedSubscript:", @"Video"), @"PowerConsumptionInSphereModeVideo");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"SpherePowerConsumption"), "objectForKeyedSubscript:", @"VideoHighRange"), @"PowerConsumptionInSphereModeVideoHighRange");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"SensorThermalLevelsByTemperature"), @"SensorThermalLevelsByTemperature");
      int v179 = objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"geometricDistortionCorrection"), "BOOLValue");
      uint64_t v180 = MEMORY[0x1E4F1CC38];
      if (v179) {
        [v102 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"GeometricDistortionCorrection"];
      }
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"GeometricDistortionCorrectionExpandsImageDimensions"), @"GeometricDistortionCorrectionExpandsImageDimensions");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"constituentPhotoCalibrationDataSupported"), @"ConstituentPhotoCalibrationData");
      if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"videoZoomSmoothingSupported"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v180, @"VideoZoomSmoothingSupported"); {
      if (objc_msgSend((id)objc_msgSend(v96, "objectForKeyedSubscript:", @"rawBufferCompandingDisabled"), "BOOLValue"))objc_msgSend(v102, "setObject:forKeyedSubscript:", v180, @"RawBufferCompandingDisabled");
      }
      if (v397)
      {
        double v181 = (void *)[MEMORY[0x1E4F1CA48] array];
        if ([v400 objectForKeyedSubscript:v346])
        {
          uint64_t v182 = [v103 getProperty:v346 error:0];
          if (v182) {
            [v181 addObjectsFromArray:v182];
          }
        }
        if ([v400 objectForKeyedSubscript:v351]) {
          [v181 addObject:v351];
        }
        if ([v400 objectForKeyedSubscript:v339]) {
          [v181 addObject:v339];
        }
        if ([v400 objectForKeyedSubscript:v338]) {
          [v181 addObject:v338];
        }
        if ([v400 objectForKeyedSubscript:v337]) {
          [v181 addObject:v337];
        }
        objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithArray:", v181), @"VisionDataConfigurationAndRuntimeSupportedKeys");
      }
      id v183 = +[FigCaptureCameraParameters cinematicFramingVirtualCameraConfigurationForPortType:sensorIDString:](FigCaptureCameraParameters, "cinematicFramingVirtualCameraConfigurationForPortType:sensorIDString:", [v103 portType], +[FigCaptureCameraParameters sensorIDStringFromModuleInfo:](FigCaptureCameraParameters, "sensorIDStringFromModuleInfo:", objc_msgSend(v103, "getProperty:error:", v350, 0)));
      if (v183) {
        [v102 setObject:v183 forKeyedSubscript:@"CinematicFramingVirtualCameraConfiguration"];
      }
      if (BWDeviceIsiPhone()) {
        uint64_t v184 = MGGetBoolAnswer();
      }
      else {
        uint64_t v184 = 0;
      }
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v93 + 3792), "numberWithBool:", v184), @"DockedTrackingSupported");
      id v185 = v102;
      csu_createMultiStreamSourceFormatsArrayAndAVCompressionSettingsDict(v371, v96, v110, v185, v483, &v475, &v479);
      if (objc_msgSend((id)objc_msgSend(v101, "supportedProperties"), "objectForKeyedSubscript:", v349)) {
        uint64_t v186 = [v101 getProperty:v349 error:0];
      }
      else {
        uint64_t v186 = 0;
      }
      id v187 = objc_alloc(MEMORY[0x1E4F1CA60]);
      uint64_t v188 = (void *)v483[0];
      uint64_t v189 = (void *)v475;
      uint64_t v190 = objc_msgSend(v187, "initWithObjectsAndKeys:", v100, @"MediaType", v185, @"Attributes", v483[0], @"Formats", (void)v475, @"AVCaptureSessionPresetCompressionSettings", v186, @"WhiteBalanceCalibrations", 0);
      objc_msgSend(v190, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"synchronizedStreamUniqueIDs"), @"SynchronizedStreamUniqueIDs");
      objc_msgSend(v190, "setObject:forKeyedSubscript:", objc_msgSend(v96, "objectForKeyedSubscript:", @"unsynchronizedStreamUniqueIDs"), @"UnsynchronizedStreamUniqueIDs");
      [v190 setObject:(void)v479 forKeyedSubscript:@"MissingFormats"];
      if ([*(id *)(v371 + 40) count] == 1
        && objc_msgSend((id)objc_msgSend(v101, "supportedProperties"), "objectForKeyedSubscript:", v345))
      {
        objc_msgSend(v190, "setObject:forKeyedSubscript:", objc_msgSend(v101, "getProperty:error:", v345, 0), @"VibeMitigationInfo");
      }
      v373 = v190;
      uint64_t v191 = (void *)[v101 getPropertyIfSupported:v348 error:0];
      if ([v191 BOOLValue]) {
        [v373 setObject:v191 forKeyedSubscript:@"HasAutoFocusPositionSensor"];
      }

      uint64_t v192 = (void *)v371;
      if (!v373) {
        goto LABEL_589;
      }
      if ((unint64_t)[*(id *)(v371 + 40) count] < 2)
      {
        uint64_t v209 = [v96 objectForKeyedSubscript:@"uniqueID"];
        [v375 objectForKeyedSubscript:v209];
        unint64_t v210 = v375;
        v211 = v373;
        int v212 = v373;
        uint64_t v213 = (__CFString *)v209;
        goto LABEL_587;
      }
      id v365 = (id)[v373 objectForKeyedSubscript:@"Formats"];
      uint64_t v193 = [v373 objectForKeyedSubscript:@"SynchronizedStreamUniqueIDs"];
      float v194 = (void *)[v373 objectForKeyedSubscript:@"UnsynchronizedStreamUniqueIDs"];
      if ([v194 count]) {
        double v195 = v194;
      }
      else {
        double v195 = (void *)v193;
      }
      long long v465 = 0u;
      long long v466 = 0u;
      long long v467 = 0u;
      long long v468 = 0u;
      id v394 = v195;
      uint64_t v196 = [v195 countByEnumeratingWithState:&v465 objects:v492 count:16];
      if (!v196)
      {
        uint64_t v201 = -1;
        goto LABEL_426;
      }
      uint64_t v197 = v196;
      char v198 = 0;
      char v199 = 0;
      uint64_t v200 = *(void *)v466;
      uint64_t v201 = -1;
      do
      {
        for (juint64_t j = 0; jj != v197; ++jj)
        {
          if (*(void *)v466 != v200) {
            objc_enumerationMutation(v394);
          }
          v203 = objc_msgSend((id)objc_msgSend(v375, "objectForKeyedSubscript:", *(void *)(*((void *)&v465 + 1) + 8 * jj)), "objectForKeyedSubscript:", @"Attributes");
          char v204 = objc_msgSend((id)objc_msgSend(v203, "objectForKeyedSubscript:", @"GeometricDistortionCorrection"), "BOOLValue");
          char v205 = objc_msgSend((id)objc_msgSend(v203, "objectForKeyedSubscript:", @"GeometricDistortionCorrectionExpandsImageDimensions"), "BOOLValue");
          if (objc_msgSend((id)objc_msgSend(v203, "objectForKeyedSubscript:", @"Focus"), "BOOLValue"))
          {
            uint64_t v206 = objc_msgSend((id)objc_msgSend(v203, "objectForKeyedSubscript:", @"MinimumFocusDistance"), "integerValue");
            BOOL v207 = v201 > v206 || v201 == -1;
            uint64_t v208 = v207 ? v206 : v201;
            if (v206 >= 1) {
              uint64_t v201 = v208;
            }
          }
          v199 |= v204;
          v198 |= v205;
        }
        uint64_t v197 = [v394 countByEnumeratingWithState:&v465 objects:v492 count:16];
      }
      while (v197);
      if ((v199 & 1) == 0)
      {
        unint64_t v93 = 0x1E4F28000uLL;
        if ((v198 & 1) == 0) {
          goto LABEL_426;
        }
LABEL_425:
        objc_msgSend((id)objc_msgSend(v373, "objectForKeyedSubscript:", @"Attributes"), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", 1), @"GeometricDistortionCorrectionExpandsImageDimensions");
        goto LABEL_426;
      }
      unint64_t v93 = 0x1E4F28000uLL;
      objc_msgSend((id)objc_msgSend(v373, "objectForKeyedSubscript:", @"Attributes"), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", 1), @"GeometricDistortionCorrection");
      if (v198) {
        goto LABEL_425;
      }
LABEL_426:
      objc_msgSend((id)objc_msgSend(v373, "objectForKeyedSubscript:", @"Attributes"), "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v93 + 3792), "numberWithInteger:", v201), @"MinimumFocusDistance");
      id v366 = (id)[MEMORY[0x1E4F1CA48] array];
      long long v461 = 0u;
      long long v462 = 0u;
      long long v463 = 0u;
      long long v464 = 0u;
      uint64_t v368 = [v365 countByEnumeratingWithState:&v461 objects:&v488 count:16];
      if (!v368) {
        goto LABEL_578;
      }
      uint64_t v367 = *(void *)v462;
      while (2)
      {
        uint64_t v214 = 0;
        while (2)
        {
          if (*(void *)v462 != v367) {
            objc_enumerationMutation(v365);
          }
          uint64_t v369 = v214;
          id v428 = *(id *)(*((void *)&v461 + 1) + 8 * v214);
          id v409 = (id)objc_msgSend(MEMORY[0x1E4F1CA48], "array", v325);
          double v215 = (void *)[MEMORY[0x1E4F1CA48] array];
          long long v457 = 0u;
          long long v458 = 0u;
          long long v459 = 0u;
          long long v460 = 0u;
          uint64_t v416 = [v394 countByEnumeratingWithState:&v457 objects:type count:16];
          if (!v416)
          {
            double v216 = 0;
            v398 = 0;
            goto LABEL_502;
          }
          char v382 = 0;
          v398 = 0;
          double v216 = 0;
          uint64_t v412 = *(void *)v458;
          CGFloat v217 = v375;
          while (2)
          {
            uint64_t v218 = 0;
            while (2)
            {
              if (*(void *)v458 != v412) {
                objc_enumerationMutation(v394);
              }
              uint64_t v219 = *(void *)(*((void *)&v457 + 1) + 8 * v218);
              int v220 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v217, "objectForKeyedSubscript:", v219, v325, v326), "objectForKeyedSubscript:", @"Attributes"), "objectForKeyedSubscript:", @"DeviceType"), "intValue");
              uint64_t v221 = objc_msgSend((id)objc_msgSend(v217, "objectForKeyedSubscript:", v219), "objectForKeyedSubscript:", @"Formats");
              uint64_t v222 = v221;
              switch(v220)
              {
                case 20:
LABEL_439:
                  if ([v221 count] == 1)
                  {
                    uint64_t v223 = [v222 firstObject];
                    if (v223)
                    {
                      double v216 = (void *)v223;
                      [v409 addObject:v223];
                    }
                    else
                    {
                      uint64_t v244 = v218;
                      unsigned int v456 = 0;
                      v439[4] = OS_LOG_TYPE_DEFAULT;
                      id v245 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      unsigned int v246 = v456;
                      if (os_log_type_enabled(v245, v439[4])) {
                        unsigned int v247 = v246;
                      }
                      else {
                        unsigned int v247 = v246 & 0xFFFFFFFE;
                      }
                      if (v247)
                      {
                        uint64_t v248 = [v428 objectForKeyedSubscript:0x1EFA4F9A0];
                        LODWORD(v494[0]) = 136315650;
                        *(void *)((char *)v494 + 4) = "csu_reconcileDerivedSourceInfoDictionaryAcrossUnderlyingStreams";
                        WORD6(v494[0]) = 2114;
                        *(void *)((char *)v494 + 14) = v248;
                        WORD3(v494[1]) = 2114;
                        *((void *)&v494[1] + 1) = v219;
                        LODWORD(v326) = 32;
                        long long v325 = v494;
                        _os_log_send_and_compose_impl();
                      }
                      uint64_t v218 = v244;
                      char v382 = 1;
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      double v216 = 0;
                    }
                    goto LABEL_497;
                  }
                  long long v320 = (void *)MEMORY[0x1E4F1CA00];
                  uint64_t v321 = *MEMORY[0x1E4F1C3B8];
                  long long v322 = @"Only one stream format is currently supported on the IR camera.";
LABEL_598:
                  objc_exception_throw((id)[v320 exceptionWithName:v321 reason:v322 userInfo:0]);
                case 10:
                  if (v221)
                  {
                    [v409 addObjectsFromArray:v221];
                    v398 = v222;
                  }
                  else
                  {
                    uint64_t v402 = v218;
                    unsigned int v456 = 0;
                    v439[4] = OS_LOG_TYPE_DEFAULT;
                    id v249 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v250 = v456;
                    if (os_log_type_enabled(v249, v439[4])) {
                      unsigned int v251 = v250;
                    }
                    else {
                      unsigned int v251 = v250 & 0xFFFFFFFE;
                    }
                    if (v251)
                    {
                      uint64_t v252 = [v428 objectForKeyedSubscript:0x1EFA4F9A0];
                      LODWORD(v494[0]) = 136315650;
                      *(void *)((char *)v494 + 4) = "csu_reconcileDerivedSourceInfoDictionaryAcrossUnderlyingStreams";
                      WORD6(v494[0]) = 2114;
                      *(void *)((char *)v494 + 14) = v252;
                      WORD3(v494[1]) = 2114;
                      *((void *)&v494[1] + 1) = v219;
                      LODWORD(v326) = 32;
                      long long v325 = v494;
                      _os_log_send_and_compose_impl();
                    }
                    uint64_t v218 = v402;
                    char v382 = 1;
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v398 = 0;
                  }
                  goto LABEL_497;
                case 5:
                  goto LABEL_439;
              }
              int v386 = v220;
              uint64_t v401 = v218;
              v390 = v216;
              memset(v494, 0, sizeof(v494));
              long long v495 = 0u;
              long long v496 = 0u;
              uint64_t v224 = [v221 countByEnumeratingWithState:v494 objects:v493 count:16];
              if (v224)
              {
                uint64_t v225 = v224;
                uint64_t v226 = **(void **)&v494[1];
                CGRect v227 = v428;
LABEL_446:
                uint64_t v228 = 0;
                while (1)
                {
                  if (**(void **)&v494[1] != v226) {
                    objc_enumerationMutation(v222);
                  }
                  CGRect v229 = *(void **)(*((void *)&v494[0] + 1) + 8 * v228);
                  CGRect v230 = (void *)[v229 objectForKeyedSubscript:0x1EFA50D80];
                  CGRect v231 = (void *)[v229 objectForKeyedSubscript:0x1EFA50060];
                  uint64_t v232 = [v227 objectForKeyedSubscript:0x1EFA4F9A0];
                  uint64_t v233 = [v230 objectForKeyedSubscript:0x1EFA4F9A0];
                  CGRect v234 = (void *)v232;
                  CGRect v227 = v428;
                  if ([v234 isEqualToString:v233])
                  {
                    uint64_t v235 = [v428 objectForKeyedSubscript:v422];
                    uint64_t v236 = [v230 objectForKeyedSubscript:v422];
                    v237 = (void *)v235;
                    CGRect v227 = v428;
                    if ([v237 isEqual:v236]) {
                      break;
                    }
                  }
                  uint64_t v238 = [v227 objectForKeyedSubscript:0x1EFA4F9A0];
                  uint64_t v239 = [v231 objectForKeyedSubscript:0x1EFA4F9A0];
                  v240 = (void *)v238;
                  CGRect v227 = v428;
                  if ([v240 isEqualToString:v239])
                  {
                    uint64_t v241 = [v428 objectForKeyedSubscript:v422];
                    uint64_t v242 = [v231 objectForKeyedSubscript:v422];
                    uint64_t v243 = (void *)v241;
                    CGRect v227 = v428;
                    CGRect v230 = v231;
                    if ([v243 isEqual:v242]) {
                      break;
                    }
                  }
                  if (objc_msgSend((id)objc_msgSend(v227, "objectForKeyedSubscript:", 0x1EFA4F9A0), "isEqualToString:", objc_msgSend(v229, "objectForKeyedSubscript:", 0x1EFA4F9A0)))
                  {
                    CGRect v230 = v229;
                    if (objc_msgSend((id)objc_msgSend(v227, "objectForKeyedSubscript:", v422), "isEqual:", objc_msgSend(v229, "objectForKeyedSubscript:", v422)))break; {
                  }
                    }
                  if (v225 == ++v228)
                  {
                    uint64_t v225 = [v222 countByEnumeratingWithState:v494 objects:v493 count:16];
                    if (v225) {
                      goto LABEL_446;
                    }
                    CGRect v230 = 0;
                    break;
                  }
                }
              }
              else
              {
                CGRect v230 = 0;
                CGRect v227 = v428;
              }
              uint64_t v253 = BWCaptureDevicePositionAndDeviceTypeToPortType(objc_msgSend((id)objc_msgSend((id)objc_msgSend(v373, "objectForKeyedSubscript:", @"Attributes"), "objectForKeyedSubscript:", @"Position"), "intValue"), v386);
              if (!v230)
              {
                unsigned int v456 = 0;
                v439[4] = OS_LOG_TYPE_DEFAULT;
                uint64_t v257 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v258 = v456;
                if (os_log_type_enabled(v257, v439[4])) {
                  unsigned int v259 = v258;
                }
                else {
                  unsigned int v259 = v258 & 0xFFFFFFFE;
                }
                if (v259)
                {
                  uint64_t v260 = [v227 objectForKeyedSubscript:0x1EFA4F9A0];
                  LODWORD(v494[0]) = 136315650;
                  *(void *)((char *)v494 + 4) = "csu_reconcileDerivedSourceInfoDictionaryAcrossUnderlyingStreams";
                  WORD6(v494[0]) = 2114;
                  *(void *)((char *)v494 + 14) = v260;
                  WORD3(v494[1]) = 2114;
                  *((void *)&v494[1] + 1) = v219;
                  LODWORD(v326) = 32;
                  long long v325 = v494;
                  _os_log_send_and_compose_impl();
                }
                CGFloat v217 = v375;
                double v216 = v390;
                uint64_t v218 = v401;
                char v382 = 1;
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                goto LABEL_497;
              }
              v254 = (void *)v253;
              [v409 addObject:v230];
              v255 = (void *)[v230 objectForKeyedSubscript:0x1EFA50400];
              if ([v254 isEqual:v370]) {
                BOOL v256 = [*(id *)(v371 + 48) count] != 0;
              }
              else {
                BOOL v256 = 0;
              }
              uint64_t v218 = v401;
              if (![v255 count] || v256) {
                goto LABEL_494;
              }
              uint64_t v261 = *(void **)(v371 + 48);
              if (!v261)
              {
                float v263 = 1.0;
LABEL_487:
                long long v455 = 0u;
                long long v454 = 0u;
                long long v453 = 0u;
                long long v452 = 0u;
                uint64_t v264 = [v255 countByEnumeratingWithState:&v452 objects:v483 count:16];
                if (!v264) {
                  goto LABEL_495;
                }
                uint64_t v265 = v264;
                uint64_t v266 = *(void *)v453;
                do
                {
                  for (kuint64_t k = 0; kk != v265; ++kk)
                  {
                    if (*(void *)v453 != v266) {
                      objc_enumerationMutation(v255);
                    }
                    [*(id *)(*((void *)&v452 + 1) + 8 * kk) floatValue];
                    *(float *)&double v269 = v263 * v268;
                    objc_msgSend(v215, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v269));
                  }
                  uint64_t v265 = [v255 countByEnumeratingWithState:&v452 objects:v483 count:16];
                }
                while (v265);
LABEL_494:
                CGFloat v217 = v375;
                goto LABEL_496;
              }
              objc_msgSend((id)objc_msgSend(v261, "objectForKeyedSubscript:", v254), "floatValue");
              float v263 = v262;
              if (v262 != 0.0) {
                goto LABEL_487;
              }
LABEL_495:
              CGFloat v217 = v375;
LABEL_496:
              double v216 = v390;
LABEL_497:
              if (++v218 != v416) {
                continue;
              }
              break;
            }
            uint64_t v416 = [v394 countByEnumeratingWithState:&v457 objects:type count:16];
            if (v416) {
              continue;
            }
            break;
          }
          if (v382)
          {
            [v366 addObject:v428];
            goto LABEL_576;
          }
LABEL_502:
          long long v451 = 0u;
          long long v450 = 0u;
          long long v449 = 0u;
          long long v448 = 0u;
          uint64_t v270 = objc_msgSend(v409, "countByEnumeratingWithState:objects:count:", &v448, &v479, 16, v325);
          if (v270)
          {
            uint64_t v271 = v270;
            uint64_t v272 = 0;
            uint64_t v413 = 0;
            uint64_t v273 = 0;
            char v379 = 0;
            int v391 = 0;
            int v403 = 0;
            uint64_t v417 = *(void *)v449;
            int v383 = -1;
            char v387 = 1;
            float v274 = 0.0;
            uint64_t v275 = 0x7FFFFFFFLL;
            float v276 = 3.4028e38;
            do
            {
              for (muint64_t m = 0; mm != v271; ++mm)
              {
                if (*(void *)v449 != v417) {
                  objc_enumerationMutation(v409);
                }
                uint64_t v278 = *(void **)(*((void *)&v448 + 1) + 8 * mm);
                if (v278 != v216
                  || objc_msgSend((id)objc_msgSend(v428, "objectForKeyedSubscript:", 0x1EFA50180), "count"))
                {
                  uint64_t v279 = v216;
                  int v280 = objc_msgSend((id)objc_msgSend(v278, "objectForKeyedSubscript:", @"VideoMinFrameRate"), "intValue");
                  int v281 = objc_msgSend((id)objc_msgSend(v278, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue");
                  uint64_t v272 = (int)v272 <= v280 ? v280 : v272;
                  double v216 = v279;
                  uint64_t v275 = (int)v275 >= v281 ? v281 : v275;
                  if (v278 != v279 && ([v398 containsObject:v278] & 1) == 0)
                  {
                    objc_msgSend((id)objc_msgSend(v278, "objectForKeyedSubscript:", v406), "floatValue");
                    float v283 = v282;
                    uint64_t v284 = [v278 objectForKeyedSubscript:0x1EFA500A0];
                    char v285 = objc_msgSend((id)objc_msgSend(v278, "objectForKeyedSubscript:", v372), "BOOLValue");
                    char v379 = objc_msgSend((id)objc_msgSend(v278, "objectForKeyedSubscript:", 0x1EFA507A0), "BOOLValue");
                    v286 = (void *)[v278 objectForKeyedSubscript:0x1EFA50100];
                    if (v286)
                    {
                      int v287 = [v286 intValue];
                      int v288 = v383;
                      if (v383 == -1) {
                        int v288 = v287;
                      }
                      int v383 = v288;
                    }
                    v387 &= v285;
                    int v289 = objc_msgSend((id)objc_msgSend(v278, "objectForKeyedSubscript:", 0x1EFA507C0), "intValue");
                    if (v289) {
                      int v290 = v289;
                    }
                    else {
                      int v290 = v391;
                    }
                    int v391 = v290;
                    int v291 = objc_msgSend((id)objc_msgSend(v278, "objectForKeyedSubscript:", 0x1EFA507E0), "intValue");
                    int v292 = v403;
                    if (v291) {
                      int v292 = v291;
                    }
                    int v403 = v292;
                    BOOL v293 = v274 < v283;
                    if (v274 < v283) {
                      float v274 = v283;
                    }
                    uint64_t v294 = v413;
                    if (v293) {
                      uint64_t v294 = v284;
                    }
                    uint64_t v413 = v294;
                    if (v276 > v283)
                    {
                      float v276 = v283;
                      uint64_t v273 = v284;
                    }
                    double v216 = v279;
                  }
                }
              }
              uint64_t v271 = [v409 countByEnumeratingWithState:&v448 objects:&v479 count:16];
            }
            while (v271);
          }
          else
          {
            uint64_t v272 = 0;
            uint64_t v413 = 0;
            uint64_t v273 = 0;
            char v379 = 0;
            int v391 = 0;
            int v403 = 0;
            int v383 = -1;
            char v387 = 1;
            float v274 = 0.0;
            uint64_t v275 = 0x7FFFFFFFLL;
            float v276 = 3.4028e38;
          }
          objc_msgSend(v428, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v272), @"VideoMinFrameRate");
          objc_msgSend(v428, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v275), @"VideoMaxFrameRate");
          *(float *)&double v295 = v274;
          objc_msgSend(v428, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v295), v406);
          uint64_t v296 = MEMORY[0x1E4F1CC38];
          if (v387) {
            uint64_t v297 = MEMORY[0x1E4F1CC38];
          }
          else {
            uint64_t v297 = 0;
          }
          [v428 setObject:v297 forKeyedSubscript:v372];
          if (v379) {
            uint64_t v298 = v296;
          }
          else {
            uint64_t v298 = 0;
          }
          [v428 setObject:v298 forKeyedSubscript:0x1EFA507A0];
          if (v383 != -1) {
            objc_msgSend(v428, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:"), 0x1EFA50100);
          }
          if (v391 >= 1) {
            objc_msgSend(v428, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:"), 0x1EFA507C0);
          }
          if (v403 >= 1) {
            objc_msgSend(v428, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:"), 0x1EFA507E0);
          }
          if (v413) {
            [v428 setObject:v413 forKeyedSubscript:0x1EFA500A0];
          }
          if ([v215 count]) {
            [v428 setObject:v215 forKeyedSubscript:0x1EFA50400];
          }
          else {
            [v428 removeObjectForKey:0x1EFA50400];
          }
          id v299 = (void *)[v428 objectForKeyedSubscript:0x1EFA50180];
          long long v444 = 0u;
          long long v445 = 0u;
          long long v446 = 0u;
          long long v447 = 0u;
          uint64_t v300 = [v299 countByEnumeratingWithState:&v444 objects:&v475 count:16];
          if (v300)
          {
            uint64_t v301 = v300;
            uint64_t v302 = *(void *)v445;
            do
            {
              for (nuint64_t n = 0; nn != v301; ++nn)
              {
                if (*(void *)v445 != v302) {
                  objc_enumerationMutation(v299);
                }
                long long v304 = *(void **)(*((void *)&v444 + 1) + 8 * nn);
                int v305 = objc_msgSend((id)objc_msgSend(v304, "objectForKeyedSubscript:", @"VideoMinFrameRate"), "intValue");
                int v306 = objc_msgSend((id)objc_msgSend(v304, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue");
                if ((int)v272 <= v305) {
                  uint64_t v272 = v305;
                }
                else {
                  uint64_t v272 = v272;
                }
                if ((int)v275 >= v306) {
                  uint64_t v275 = v306;
                }
                else {
                  uint64_t v275 = v275;
                }
              }
              uint64_t v301 = [v299 countByEnumeratingWithState:&v444 objects:&v475 count:16];
            }
            while (v301);
          }
          long long v443 = 0u;
          long long v442 = 0u;
          long long v441 = 0u;
          long long v440 = 0u;
          uint64_t v307 = [v299 countByEnumeratingWithState:&v440 objects:&v471 count:16];
          if (v307)
          {
            uint64_t v308 = v307;
            uint64_t v309 = *(void *)v441;
            do
            {
              for (uint64_t i1 = 0; i1 != v308; ++i1)
              {
                if (*(void *)v441 != v309) {
                  objc_enumerationMutation(v299);
                }
                long long v311 = *(void **)(*((void *)&v440 + 1) + 8 * i1);
                objc_msgSend(v311, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v272), @"VideoMinFrameRate");
                objc_msgSend(v311, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v275), @"VideoMaxFrameRate");
                *(float *)&double v312 = v276;
                objc_msgSend(v311, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v312), v406);
                if (v273) {
                  [v311 setObject:v273 forKeyedSubscript:0x1EFA500A0];
                }
              }
              uint64_t v308 = [v299 countByEnumeratingWithState:&v440 objects:&v471 count:16];
            }
            while (v308);
          }
LABEL_576:
          uint64_t v214 = v369 + 1;
          unint64_t v93 = 0x1E4F28000;
          if (v369 + 1 != v368) {
            continue;
          }
          break;
        }
        uint64_t v368 = [v365 countByEnumeratingWithState:&v461 objects:&v488 count:16];
        if (v368) {
          continue;
        }
        break;
      }
LABEL_578:
      v211 = v373;
      if (objc_msgSend(v366, "count", v325))
      {
        [v365 removeObjectsInArray:v366];
        long long v313 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithArray:", objc_msgSend(v373, "objectForKeyedSubscript:", @"MissingFormats"));
        memset(v494, 0, sizeof(v494));
        long long v495 = 0u;
        long long v496 = 0u;
        uint64_t v314 = [v366 countByEnumeratingWithState:v494 objects:v493 count:16];
        if (v314)
        {
          uint64_t v315 = v314;
          uint64_t v316 = **(void **)&v494[1];
          do
          {
            for (uint64_t i2 = 0; i2 != v315; ++i2)
            {
              if (**(void **)&v494[1] != v316) {
                objc_enumerationMutation(v366);
              }
              objc_msgSend(v313, "addObject:", objc_msgSend(*(id *)(*((void *)&v494[0] + 1) + 8 * i2), "objectForKeyedSubscript:", 0x1EFA4F9A0));
            }
            uint64_t v315 = [v366 countByEnumeratingWithState:v494 objects:v493 count:16];
          }
          while (v315);
        }
        v211 = v373;
        unint64_t v210 = v373;
        int v212 = v313;
        uint64_t v213 = @"MissingFormats";
LABEL_587:
        [v210 setObject:v212 forKeyedSubscript:v213];
      }
      [v344 addObject:v211];

      uint64_t v192 = (void *)v371;
LABEL_589:

      float v91 = v375;
      float v92 = (void *)v358;
LABEL_590:
      uint64_t v94 = v362 + 1;
    }
    while (v362 + 1 != v361);
    uint64_t v318 = [obj countByEnumeratingWithState:&v429 objects:v469 count:16];
    uint64_t v361 = v318;
  }
  while (v318);
LABEL_596:

  return v344;
}

uint64_t FigCaptureSourcePreprocessVideoDeviceDict(void *a1, void *a2)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = (void *)[a1 objectForKeyedSubscript:@"baseCaptureDeviceUniqueName"];
  unsigned __int16 v5 = (__CFString *)[a1 objectForKeyedSubscript:@"uniqueName"];
  if ([(__CFString *)v5 hasPrefix:@"Front"]) {
    int v6 = 2;
  }
  else {
    int v6 = [(__CFString *)v5 hasPrefix:@"Back"];
  }
  uint64_t result = [(__CFString *)v5 isEqualToString:@"Back Camera"];
  BOOL v26 = v5;
  if (result)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v8 = kFigCaptureVideoSourceUniqueID_BackWide;
LABEL_6:
    uint64_t v9 = *v8;
    int v10 = 2;
LABEL_22:
    unsigned int v21 = v10;
    goto LABEL_23;
  }
  uint64_t result = [(__CFString *)v5 isEqualToString:@"Back Telephoto Camera"];
  if (result)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.built-in_video:2";
    int v10 = 3;
    goto LABEL_22;
  }
  uint64_t result = [(__CFString *)v5 isEqualToString:@"Back Ultra Wide Camera"];
  if (result)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v11 = kFigCaptureVideoSourceUniqueID_BackSuperWide;
LABEL_11:
    uint64_t v9 = *v11;
    int v10 = 7;
    goto LABEL_22;
  }
  uint64_t result = [(__CFString *)v5 isEqualToString:@"Back Time of Flight Camera"];
  if (result)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.private.built-in_pointcloud:1";
    int v6 = 1;
    int v10 = 10;
    goto LABEL_22;
  }
  if ([(__CFString *)v5 isEqualToString:@"Back Dual Camera"])
  {
    uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.built-in_video:3";
    v37[0] = @"com.apple.avfoundation.avcapturedevice.built-in_video:0";
    v37[1] = @"com.apple.avfoundation.avcapturedevice.built-in_video:2";
    uint64_t result = [MEMORY[0x1E4F1C978] arrayWithObjects:v37 count:2];
    uint64_t v22 = result;
    uint64_t v23 = 0;
    int v10 = 4;
    goto LABEL_22;
  }
  if ([(__CFString *)v5 isEqualToString:@"Back Dual Wide Camera"])
  {
    uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.built-in_video:6";
    v36[0] = @"com.apple.avfoundation.avcapturedevice.built-in_video:0";
    v36[1] = @"com.apple.avfoundation.avcapturedevice.built-in_video:5";
    uint64_t result = [MEMORY[0x1E4F1C978] arrayWithObjects:v36 count:2];
    uint64_t v22 = result;
    uint64_t v23 = 0;
    int v10 = 8;
    goto LABEL_22;
  }
  if ([(__CFString *)v5 isEqualToString:@"Back Triple Camera"])
  {
    uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.built-in_video:7";
    v35[0] = @"com.apple.avfoundation.avcapturedevice.built-in_video:0";
    v35[1] = @"com.apple.avfoundation.avcapturedevice.built-in_video:2";
    v35[2] = @"com.apple.avfoundation.avcapturedevice.built-in_video:5";
    uint64_t result = [MEMORY[0x1E4F1C978] arrayWithObjects:v35 count:3];
    uint64_t v22 = result;
    uint64_t v23 = 0;
    int v10 = 9;
    goto LABEL_22;
  }
  if ([(__CFString *)v5 isEqualToString:@"Back LiDAR Depth Camera"])
  {
    uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.built-in_video:9";
    v34[0] = @"com.apple.avfoundation.avcapturedevice.built-in_video:0";
    v34[1] = @"com.apple.avfoundation.avcapturedevice.private.built-in_pointcloud:1";
    uint64_t result = [MEMORY[0x1E4F1C978] arrayWithObjects:v34 count:2];
    uint64_t v22 = 0;
    uint64_t v23 = result;
    int v10 = 13;
    goto LABEL_22;
  }
  uint64_t result = [(__CFString *)v5 isEqualToString:@"Front Camera"];
  if (result)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v8 = kFigCaptureVideoSourceUniqueID_FrontWide;
    goto LABEL_6;
  }
  uint64_t result = [(__CFString *)v5 isEqualToString:@"Front Ultra Wide Camera"];
  if (result)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v11 = kFigCaptureVideoSourceUniqueID_FrontSuperWide;
    goto LABEL_11;
  }
  uint64_t result = [(__CFString *)v5 isEqualToString:@"Front Virtual Camera"];
  if (result)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.built-in_video:1";
    unsigned int v21 = 11;
    uint64_t v20 = @"Front Camera";
  }
  else
  {
    uint64_t result = [(__CFString *)v5 isEqualToString:@"Front Infrared Camera"];
    if (result)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.built-in_video:99";
      int v10 = 5;
      goto LABEL_22;
    }
    if ([(__CFString *)v5 isEqualToString:@"Front TrueDepth Camera"])
    {
      uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.built-in_video:4";
      v33[0] = @"com.apple.avfoundation.avcapturedevice.built-in_video:1";
      v33[1] = @"com.apple.avfoundation.avcapturedevice.built-in_video:99";
      uint64_t result = [MEMORY[0x1E4F1C978] arrayWithObjects:v33 count:2];
      uint64_t v22 = result;
      uint64_t v23 = 0;
      int v10 = 6;
      goto LABEL_22;
    }
    if ([(__CFString *)v5 isEqualToString:@"Front Virtual TrueDepth Camera"])
    {
      uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.built-in_video:4";
      v32[0] = @"com.apple.avfoundation.avcapturedevice.built-in_video:1";
      v32[1] = @"com.apple.avfoundation.avcapturedevice.built-in_video:99";
      uint64_t result = [MEMORY[0x1E4F1C978] arrayWithObjects:v32 count:2];
      uint64_t v22 = result;
      uint64_t v23 = 0;
      unsigned int v21 = 12;
      uint64_t v20 = @"Front TrueDepth Camera";
    }
    else
    {
      uint64_t result = [(__CFString *)v5 isEqualToString:@"Front Metadata Camera"];
      if (result)
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.private.built-in_metadata:1";
        int v10 = 17;
        goto LABEL_22;
      }
      uint64_t result = [(__CFString *)v5 isEqualToString:@"Front Virtual Metadata Camera"];
      if (!result)
      {
        uint64_t result = [(__CFString *)v5 isEqualToString:@"Front Ultra Wide Metadata Camera"];
        if (result)
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.private.built-in_metadata:2";
          int v10 = 19;
        }
        else
        {
          uint64_t result = [(__CFString *)v5 isEqualToString:@"Front Infrared Metadata Camera"];
          if (!result) {
            return result;
          }
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.private.built-in_metadata:3";
          int v10 = 20;
        }
        goto LABEL_22;
      }
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v9 = @"com.apple.avfoundation.avcapturedevice.private.built-in_metadata:1";
      unsigned int v21 = 18;
      uint64_t v20 = @"Front Metadata Camera";
    }
  }
  BOOL v26 = v20;
LABEL_23:
  int v24 = v9;
  unsigned int v25 = v6;
  if (v9) {
    BOOL v12 = v6 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (v4)
    {
      uint64_t v13 = 0;
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        uint64_t result = [a2 countByEnumeratingWithState:&v27 objects:v31 count:16];
        if (result)
        {
          uint64_t v15 = result;
          uint64_t v16 = *(void *)v28;
          while (2)
          {
            uint64_t v17 = 0;
            do
            {
              if (*(void *)v28 != v16) {
                objc_enumerationMutation(a2);
              }
              char v18 = *(void **)(*((void *)&v27 + 1) + 8 * v17);
              uint64_t result = objc_msgSend(v4, "isEqualToString:", objc_msgSend(v18, "objectForKeyedSubscript:", @"uniqueName"));
              if (result)
              {
                uint64_t v13 = v18;
                goto LABEL_39;
              }
              ++v17;
            }
            while (v15 != v17);
            uint64_t result = [a2 countByEnumeratingWithState:&v27 objects:v31 count:16];
            uint64_t v15 = result;
            if (result) {
              continue;
            }
            break;
          }
        }
LABEL_39:
        if (!v13) {
          break;
        }
        CFPropertyListRef v19 = (id)CFPropertyListCreateDeepCopy(v14, v13, 1uLL);
        FigCFDictionaryAddEntriesToDictionaryWithRecursion();
        [a1 removeAllObjects];
        [a1 addEntriesFromDictionary:v19];
        unsigned __int16 v4 = (void *)[v13 objectForKeyedSubscript:@"baseCaptureDeviceUniqueName"];
        if (!v4) {
          goto LABEL_41;
        }
      }
    }
    else
    {
LABEL_41:
      [a1 setObject:v26 forKeyedSubscript:@"localizedName"];
      [a1 setObject:v24 forKeyedSubscript:@"uniqueID"];
      [a1 setObject:v24 forKeyedSubscript:@"modelID"];
      objc_msgSend(a1, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v21), @"deviceType");
      objc_msgSend(a1, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v25), @"position");
      [a1 setObject:v22 forKeyedSubscript:@"synchronizedStreamUniqueIDs"];
      return [a1 setObject:v23 forKeyedSubscript:@"unsynchronizedStreamUniqueIDs"];
    }
  }
  return result;
}

void FigCaptureSourceCreateSystemStyleEnabledStorage()
{
  v12[3] = *MEMORY[0x1E4F143B8];
  v12[0] = 0x1EFA44100;
  v12[1] = 0x1EFA55880;
  void v12[2] = 0x1EFA55980;
  uint64_t v0 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:3];
  int v1 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v8;
    uint64_t v5 = MEMORY[0x1E4F1CC38];
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v0);
        }
        [v1 setObject:v5 forKeyedSubscript:*(void *)(*((void *)&v7 + 1) + 8 * v6++)];
      }
      while (v3 != v6);
      uint64_t v3 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v3);
  }
  CFPreferencesSetValue(@"systemstyle-enabled", v1, @"com.apple.cameracapture", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
}

uint64_t csu_postSourceInfoArrayChangedNotificationIfNecessary(void *a1)
{
  pthread_mutex_lock((pthread_mutex_t *)gCaptureSourceBackingsLock);
  gSourceInfoArrayChangeCGFloat d = 1;
  uint64_t v2 = gCaptureSourceBackings;
  if ([a1 count]) {
    -[FigCaptureSourceBackings updateSourceInfoDictionariesWithEntriesByDeviceIDs:](gCaptureSourceBackings, a1);
  }
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)gCaptureSourceBackingsLock);
  if (v2)
  {
    if (dword_1EB4C5710)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CStringPtr = CFStringGetCStringPtr(@"SourceInfoArrayChanged", 0x8000100u);
    return notify_post(CStringPtr);
  }
  return result;
}

void FigCaptureCreateSourceInfoArrayFromDeviceAndGenericPlist(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = FigCaptureCFCreatePropertyListForModel(@"AVCaptureSession.plist", @"iOS", 0);
  if (!v5)
  {
    FigDebugAssert3();
    goto LABEL_185;
  }
  char v145 = 0;
  char v6 = FigCaptureExternalCameraReplacesBuiltIn(&v145);
  uint64_t v109 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v141 = 0u;
  long long v142 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  obuint64_t j = (id)[a1 streams];
  uint64_t v111 = [obj countByEnumeratingWithState:&v141 objects:v156 count:16];
  if (!v111) {
    goto LABEL_181;
  }
  uint64_t v110 = *(void *)v142;
  uint64_t v126 = *MEMORY[0x1E4F24D70];
  uint64_t v106 = *MEMORY[0x1E4F54C80];
  uint64_t v105 = *MEMORY[0x1E4F54870];
  uint64_t v104 = *MEMORY[0x1E4F54C88];
  uint64_t v103 = *MEMORY[0x1E4F54B18];
  uint64_t v7 = MEMORY[0x1E4F1CC38];
  uint64_t v118 = v5;
  unsigned int v108 = a1;
  char v107 = v6;
  do
  {
    for (uint64_t i = 0; i != v111; ++i)
    {
      if (*(void *)v142 != v110) {
        objc_enumerationMutation(obj);
      }
      long long v9 = *(void **)(*((void *)&v141 + 1) + 8 * i);
      uint64_t v10 = [v9 getProperty:@"UniqueID" error:0];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v112 = i;
        id v113 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        id v12 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        uint64_t v13 = v12;
        if (v6)
        {
          if (v145) {
            CFAllocatorRef v14 = @"com.apple.avfoundation.avcapturedevice.built-in_video:1";
          }
          else {
            CFAllocatorRef v14 = @"com.apple.avfoundation.avcapturedevice.built-in_video:0";
          }
          [v12 setObject:v14 forKeyedSubscript:@"UniqueID"];
          [v13 setObject:v14 forKeyedSubscript:@"ModelID"];
          [v13 setObject:@"Apple Inc." forKeyedSubscript:@"Manufacturer"];
          uint64_t v15 = &unk_1EFAFF600;
        }
        else
        {
          [v12 setObject:v11 forKeyedSubscript:@"UniqueID"];
          objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(v9, "getProperty:error:", @"Manufacturer", 0), @"Manufacturer");
          objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(v9, "getProperty:error:", @"ModelID", 0), @"ModelID");
          uint64_t v15 = &unk_1EFAFF5E8;
        }
        objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(v9, "getPropertyIfSupported:error:", @"CMIOFlashSupported", 0), @"Flash");
        if (objc_msgSend((id)objc_msgSend(a1, "supportedProperties"), "objectForKeyedSubscript:", @"ContinuityDeviceUniqueID"))
        {
          uint64_t v16 = &unk_1EFAFF5D0;
        }
        else
        {
          uint64_t v16 = v15;
        }
        [v13 setObject:v16 forKeyedSubscript:@"DeviceType"];
        [v13 setObject:&unk_1EFAFF618 forKeyedSubscript:@"SourceType"];
        if (objc_msgSend((id)objc_msgSend(v9, "supportedProperties"), "objectForKeyedSubscript:", @"StillImageCaptureNow"))
        {
          [v13 setObject:v7 forKeyedSubscript:@"HEIF"];
        }
        objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(a1, "deviceID"), @"CaptureDeviceID");
        [v9 portType];
        if (FigCFEqual()) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = 2 * (FigCFEqual() != 0);
        }
        objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v17), @"Position");
        [v113 setObject:v13 forKeyedSubscript:@"Attributes"];
        if (v6)
        {
          if (v145) {
            char v18 = @"Front Camera";
          }
          else {
            char v18 = @"Back Camera";
          }
          [v13 setObject:v18 forKeyedSubscript:@"LocalizedName"];
LABEL_29:
          uint64_t v20 = v13;
          uint64_t v19 = (uint64_t)v18;
        }
        else
        {
          char v18 = (__CFString *)[v9 getPropertyIfSupported:@"LocalizedName" error:0];
          [v13 setObject:v18 forKeyedSubscript:@"LocalizedName"];
          if (!objc_msgSend((id)objc_msgSend(v9, "supportedProperties"), "objectForKeyedSubscript:", @"NonLocalizedName"))goto LABEL_29; {
          uint64_t v19 = [v9 getProperty:@"NonLocalizedName" error:0];
          }
          uint64_t v20 = v13;
        }
        [v20 setObject:v19 forKeyedSubscript:@"NonLocalizedName"];
        [v13 setObject:v7 forKeyedSubscript:@"HEVC"];
        uint64_t v21 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureFlatPlist objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", @"AVCaptureDeviceCommonSettings"), "objectForKeyedSubscript:", @"HEVCPreferred"), "BOOLValue");
        uint64_t v114 = v13;
        objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", v21), @"PrefersHEVC");
        float v117 = v9;
        uint64_t v22 = (void *)[v9 copyProperty:@"SupportedFormatsArray" error:0];
        id v23 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v137 = 0u;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v140 = 0u;
        id v115 = v22;
        uint64_t v24 = [v22 countByEnumeratingWithState:&v137 objects:v155 count:16];
        id v127 = v23;
        if (v24)
        {
          uint64_t v25 = v24;
          uint64_t v26 = 0;
          uint64_t v135 = *(void *)v138;
          do
          {
            for (uint64_t j = 0; j != v25; ++j)
            {
              if (*(void *)v138 != v135) {
                objc_enumerationMutation(v115);
              }
              long long v28 = *(void **)(*((void *)&v137 + 1) + 8 * j);
              id v29 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
              v154[0] = @"SensorWidth";
              v154[1] = @"SensorHeight";
              v154[2] = @"VideoMinFrameRate";
              v154[3] = @"VideoMaxFrameRate";
              BWAddEntriesWithKeysFromDictionaryToDictionary(v28, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v154 count:4], v29);
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(v28, "objectForKeyedSubscript:", @"SensorWidth"), 0x1EFA40FE0);
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(v28, "objectForKeyedSubscript:", @"SensorHeight"), 0x1EFA41000);
              if (objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", @"IsFake4by3PhotoFormat"), "BOOLValue"))objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, @"IsFake4by3PhotoFormat"); {
              long long v30 = (const opaqueCMFormatDescription *)[v28 objectForKeyedSubscript:@"FormatDescription"];
              }
              long long v31 = (const opaqueCMFormatDescription *)[v28 objectForKeyedSubscript:@"NativeFormatDescription"];
              if (objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", @"NativeFormatRequiresUpscaling"), "BOOLValue"))objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, @"NativeFormatRequiresUpscaling"); {
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", CMFormatDescriptionGetMediaSubType(v30)), v126);
              }
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", CMFormatDescriptionGetMediaSubType(v31)), @"NativeFormatCodecType");
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v26 + j), 0x1EFA4F9C0);
              if (objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", @"AsyncStillCaptureProvidedByStream"), "BOOLValue"))
              {
                objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(v28, "objectForKeyedSubscript:", 0x1EFA50A60), 0x1EFA50A60);
                objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(v28, "objectForKeyedSubscript:", 0x1EFA50A80), 0x1EFA50A80);
                uint64_t v5 = v118;
                uint64_t v7 = MEMORY[0x1E4F1CC38];
              }
              else
              {
                uint64_t v7 = MEMORY[0x1E4F1CC38];
                [v29 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA4FEC0];
                uint64_t v5 = v118;
              }
              [v29 setObject:v7 forKeyedSubscript:0x1EFA50C60];
              id v23 = v127;
              if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", @"CMIOCinematicFramingEnabled"))
              {
                [v29 setObject:v7 forKeyedSubscript:0x1EFA50D00];
                [v29 setObject:v7 forKeyedSubscript:0x1EFA50D40];
                if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", @"CMIOCenterStageRectOfInterest"))
                {
                  [v29 setObject:v7 forKeyedSubscript:0x1EFA50D60];
                }
              }
              if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", @"BackgroundBlurSupported"))
              {
                [v29 setObject:v7 forKeyedSubscript:@"BackgroundBlurSupported"];
              }
              if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", @"StudioLightingSupported"))
              {
                [v29 setObject:v7 forKeyedSubscript:@"StudioLightingSupported"];
              }
              if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", @"ReactionEffectsSupported"))
              {
                [v29 setObject:v7 forKeyedSubscript:@"ReactionEffectsSupported"];
              }
              if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", @"BackgroundReplacementSupported"))
              {
                [v29 setObject:v7 forKeyedSubscript:@"BackgroundReplacementSupported"];
              }
              [v127 addObject:v29];
            }
            uint64_t v25 = [v115 countByEnumeratingWithState:&v137 objects:v155 count:16];
            uint64_t v26 = (v26 + j);
          }
          while (v25);
        }
        BOOL v32 = objc_msgSend((id)objc_msgSend(v114, "objectForKeyedSubscript:", @"DeviceType"), "intValue") == 15|| objc_msgSend((id)objc_msgSend(v114, "objectForKeyedSubscript:", @"DeviceType"), "intValue") == 16;
        char v116 = v32;
        uint64_t v119 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureFlatPlist objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", @"AVCaptureSessionPresetCommon"), "objectForKeyedSubscript:", @"vide"), "objectForKeyedSubscript:", @"Device");
        int v136 = 1;
LABEL_59:
        long long v153 = 0u;
        long long v152 = 0u;
        long long v151 = 0u;
        long long v150 = 0u;
        uint64_t v121 = [(FigCaptureFlatPlist *)v5 countByEnumeratingWithState:&v150 objects:&v158 count:16];
        if (!v121) {
          goto LABEL_159;
        }
        uint64_t v120 = *(void *)v151;
LABEL_61:
        uint64_t v33 = 0;
LABEL_62:
        if (*(void *)v151 != v120) {
          objc_enumerationMutation(v5);
        }
        uint64_t v125 = v33;
        id v34 = *(void **)(*((void *)&v150 + 1) + 8 * v33);
        if ([v34 isEqual:@"AVCaptureSessionPresetCommon"]) {
          goto LABEL_157;
        }
        uint64_t v35 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureFlatPlist objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v34), "objectForKeyedSubscript:", @"vide"), "objectForKeyedSubscript:", @"Device");
        if (!v35) {
          goto LABEL_157;
        }
        uint64_t v36 = (void *)v35;
        int v122 = v34;
        if (v119)
        {
          uint64_t v37 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:");
          [v37 addEntriesFromDictionary:v36];
          uint64_t v36 = v37;
        }
        unsigned int v38 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", @"RequiredWidth"), "intValue");
        unsigned int v132 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", @"RequiredHeight"), "intValue");
        unsigned int v133 = v38;
        int v39 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", @"RequiredMaxFrameRate"), "intValue");
        int v40 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", @"RequiredMinFrameRate"), "intValue");
        int v134 = v39;
        if ((v136 == 1) != ((v38 | v132 | v39 | v40) != 0)) {
          goto LABEL_157;
        }
        int v41 = v40;
        int v131 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", @"TargetWidth"), "intValue");
        int v130 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", @"TargetHeight"), "intValue");
        int v129 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", @"TargetMaxFrameRate"), "intValue");
        int v128 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", @"TargetMinFrameRate"), "intValue");
        int v42 = [v122 isEqual:@"AVCaptureSessionPresetPhoto"] ? 875704422 : 875704438;
        if (![v23 count]) {
          goto LABEL_157;
        }
        unint64_t v43 = 0;
        unint64_t v123 = 0;
        int v124 = -1;
        float v44 = 3.4028e38;
        int v45 = v39;
        do
        {
          uint64_t v46 = (void *)[v23 objectAtIndexedSubscript:v43];
          long long v47 = v46;
          if (v136 == 1
            || !objc_msgSend((id)objc_msgSend(v46, "objectForKeyedSubscript:", @"NativeFormatRequiresUpscaling"), "BOOLValue")|| objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", @"IsFake4by3PhotoFormat"), "BOOLValue")&& objc_msgSend(v122, "isEqual:", @"AVCaptureSessionPresetPhoto"))
          {
            int v48 = objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", 0x1EFA40FE0), "intValue");
            int v49 = objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", 0x1EFA41000), "intValue");
            int v50 = objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", v126), "intValue");
            int v51 = objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue");
            int v52 = objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", @"VideoMinFrameRate"), "intValue");
            int v53 = v52;
            int v54 = v131;
            if (v133 && (int v54 = v133, v48 < (int)v133) || (v55 = v130, v132) && (v55 = v132, v49 < (int)v132))
            {
              unsigned int v66 = 0;
              unsigned int v68 = 0;
              float v62 = 3.4028e38;
            }
            else
            {
              int v56 = v129;
              if (v45 && (int v56 = v45, v51 < v45))
              {
                unsigned int v66 = 0;
                unsigned int v68 = 0;
                float v62 = 3.4028e38;
                id v23 = v127;
              }
              else
              {
                int v57 = v128;
                if (v41 && (int v57 = v41, v52 > v41))
                {
                  unsigned int v66 = 0;
                  unsigned int v68 = 0;
                  float v62 = 3.4028e38;
                }
                else
                {
                  float v58 = 0.0;
                  if (v54 && v55)
                  {
                    int v59 = v55 * v54 - v49 * v48;
                    if (v59 < 0) {
                      int v59 = v49 * v48 - v55 * v54;
                    }
                    float v58 = (float)((float)(vabds_f32((float)v54 / (float)v55, (float)v48 / (float)v49) * (float)v48)
                                * (float)v49)
                        + (float)v59;
                  }
                  if (v56)
                  {
                    int v60 = v51 - v56;
                    if (v51 < v56) {
                      int v60 = 2 * (v56 - v51);
                    }
                    float v58 = v58 + (float)v60;
                  }
                  if (v57)
                  {
                    if (v52 <= v57) {
                      int v61 = v57 - v52;
                    }
                    else {
                      int v61 = 2 * (v52 - v57);
                    }
                    float v58 = v58 + (float)v61;
                  }
                  if (v50 == v42)
                  {
                    float v62 = v58 + -2.0;
                  }
                  else
                  {
                    int IsFullRange = FigCapturePixelFormatIsFullRange(v42);
                    int v64 = FigCapturePixelFormatIsFullRange(v50);
                    float v62 = v58 + -1.0;
                    if (IsFullRange != v64) {
                      float v62 = v58;
                    }
                  }
                  if (v56 < v53 || v51 < v56) {
                    unsigned int v66 = v51;
                  }
                  else {
                    unsigned int v66 = v56;
                  }
                  if (v57 < v53 || v51 < v57) {
                    unsigned int v68 = v53;
                  }
                  else {
                    unsigned int v68 = v57;
                  }
                }
                id v23 = v127;
                int v45 = v134;
              }
            }
            if (v62 < v44)
            {
              int v124 = v43;
              unint64_t v123 = __PAIR64__(v68, v66);
              float v44 = v62;
            }
          }
          ++v43;
        }
        while ([v23 count] > v43);
        uint64_t v5 = v118;
        if (v124 == -1) {
          goto LABEL_157;
        }
        int32x4_t v69 = (void *)[v23 objectAtIndexedSubscript:v124];
        int32x4_t v70 = v69;
        if (v136 == 1)
        {
          int v71 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", 0x1EFA40FE0), "intValue");
          int v72 = objc_msgSend((id)objc_msgSend(v70, "objectForKeyedSubscript:", 0x1EFA41000), "intValue");
          if (v133 && v133 != v71)
          {
            if ((v116 & 1) == 0)
            {
              int32x4_t v70 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v70];
              unint64_t v73 = 0x1E4F28000;
              uint64_t v74 = v132;
              uint64_t v75 = v133;
              goto LABEL_143;
            }
LABEL_157:
            uint64_t v33 = v125 + 1;
            if (v125 + 1 == v121)
            {
              uint64_t v121 = [(FigCaptureFlatPlist *)v5 countByEnumeratingWithState:&v150 objects:&v158 count:16];
              if (!v121)
              {
LABEL_159:
                ++v136;
                uint64_t v7 = MEMORY[0x1E4F1CC38];
                if (v136 == 3)
                {
                  uint64_t v84 = (void *)[MEMORY[0x1E4F1CA48] array];
                  long long v146 = 0u;
                  long long v147 = 0u;
                  long long v148 = 0u;
                  long long v149 = 0u;
                  uint64_t v85 = [v23 countByEnumeratingWithState:&v146 objects:v157 count:16];
                  if (v85)
                  {
                    uint64_t v86 = v85;
                    uint64_t v87 = *(void *)v147;
                    do
                    {
                      for (uint64_t k = 0; k != v86; ++k)
                      {
                        if (*(void *)v147 != v87) {
                          objc_enumerationMutation(v127);
                        }
                        uint64_t v89 = *(void **)(*((void *)&v146 + 1) + 8 * k);
                        uint64_t v90 = [v89 objectForKeyedSubscript:0x1EFA4F9A0];
                        if (!v90)
                        {
                          uint64_t v5 = v118;
                          uint64_t v90 = objc_msgSend(NSString, "stringWithFormat:", @"%dx%d_%d", objc_msgSend((id)objc_msgSend(v89, "objectForKeyedSubscript:", 0x1EFA40FE0), "intValue"), objc_msgSend((id)objc_msgSend(v89, "objectForKeyedSubscript:", 0x1EFA41000), "intValue"), objc_msgSend((id)objc_msgSend(v89, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue"));
                        }
                        if ([v84 containsObject:v90])
                        {
                          uint64_t v91 = 1;
                          do
                          {
                            uint64_t v92 = [NSString stringWithFormat:@"%@_%d", v90, v91];
                            uint64_t v91 = (v91 + 1);
                          }
                          while (([v84 containsObject:v92] & 1) != 0);
                          uint64_t v90 = v92;
                          uint64_t v5 = v118;
                          uint64_t v7 = MEMORY[0x1E4F1CC38];
                        }
                        [v89 setObject:v90 forKeyedSubscript:0x1EFA4F9A0];
                        [v84 addObject:v90];
                      }
                      uint64_t v86 = [v127 countByEnumeratingWithState:&v146 objects:v157 count:16];
                    }
                    while (v86);
                  }
                  [v127 sortUsingFunction:csu_compareSourceFormats context:0];
                  a1 = v108;
                  if ([v127 count])
                  {
                    unint64_t v93 = 0;
                    do
                    {
                      uint64_t v94 = (void *)[v127 objectAtIndexedSubscript:v93];
                      if (objc_msgSend((id)objc_msgSend(v94, "objectForKeyedSubscript:", 0x1EFA50D00), "BOOLValue"))
                      {
                        uint64_t v95 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v94];
                        [v95 setObject:0 forKeyedSubscript:0x1EFA50D00];
                        float v96 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v95];

                        [v94 setObject:v96 forKeyedSubscript:0x1EFA50D80];
                        objc_msgSend(v94, "setObject:forKeyedSubscript:", objc_msgSend(v94, "objectForKeyedSubscript:", 0x1EFA40FE0), 0x1EFA50DC0);
                        objc_msgSend(v94, "setObject:forKeyedSubscript:", objc_msgSend(v94, "objectForKeyedSubscript:", 0x1EFA41000), 0x1EFA50DE0);
                        objc_msgSend(v94, "setObject:forKeyedSubscript:", objc_msgSend(v94, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), 0x1EFA50E00);
                      }
                      ++v93;
                    }
                    while ([v127 count] > v93);
                  }
                  uint64_t v97 = objc_msgSend(csu_captureSourceVideoFormatsForFormatDictionaries(v127, 0), "copy");
                  [v113 setObject:v97 forKeyedSubscript:@"Formats"];
                  [v113 setObject:@"vide" forKeyedSubscript:@"MediaType"];
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", -[FigCaptureFlatPlist objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", @"AVCaptureSessionPresetCompressionSettings"), @"AVCaptureSessionPresetCompressionSettings");
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v108, "getPropertyIfSupported:error:", @"Hidden", 0), @"Hidden");
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v108, "getPropertyIfSupported:error:", @"ReadyToUnhide", 0), @"ReadyToUnhide");
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v108, "getPropertyIfSupported:error:", @"BatteryState", 0), @"BatteryState");
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v108, "getPropertyIfSupported:error:", @"BatteryLevel", 0), @"BatteryLevel");
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", v106) != 0), @"Exposure");
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", v105) != 0), @"Focus");
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(v114, "objectForKeyedSubscript:", @"Focus"), @"ManualFocus");
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", v104) != 0), @"WhiteBalance");
                  int v159 = 1065353216;
                  uint64_t v158 = 0x3F8000003F800000;
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", &v158, 12), @"DefaultWhiteBalanceGains");
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", v103) != 0), @"ObjectsDetection");
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(v117, "getPropertyIfSupported:error:", @"ObjectsDetectionSupportedConfigurationKeys", 0), @"ObjectsDetectionSupportedMetadataKeys");
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(v108, "getPropertyIfSupported:error:", @"ContinuityDeviceUniqueID", 0), @"ContinuityDeviceUniqueID");
                  double v98 = (void *)[v113 copy];
                  [v109 addObject:v98];

                  uint64_t i = v112;
                  char v6 = v107;
                  continue;
                }
                goto LABEL_59;
              }
              goto LABEL_61;
            }
            goto LABEL_62;
          }
          uint64_t v74 = v132;
          if (v132) {
            BOOL v76 = v132 == v72;
          }
          else {
            BOOL v76 = 1;
          }
          int v77 = v76;
          char v78 = v116;
          if (v76) {
            char v78 = 1;
          }
          if (v78)
          {
            if (!v77) {
              goto LABEL_157;
            }
            goto LABEL_146;
          }
          uint64_t v75 = v133;
          int32x4_t v70 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v70];
          unint64_t v73 = 0x1E4F28000uLL;
          if (v133)
          {
LABEL_143:
            objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v73 + 3792), "numberWithInt:", v75), 0x1EFA40FE0);
            objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v73 + 3792), "numberWithInt:", v75), @"SensorWidth");
            if (v74) {
              goto LABEL_144;
            }
          }
          else
          {
LABEL_144:
            objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v73 + 3792), "numberWithInt:", v74), 0x1EFA41000);
            objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v73 + 3792), "numberWithInt:", v74), @"SensorHeight");
          }
          [v70 setObject:0 forKeyedSubscript:0x1EFA4FEE0];
          [v70 setObject:0 forKeyedSubscript:0x1EFA4FB80];
          [v70 setObject:0 forKeyedSubscript:0x1EFA4FBA0];
          [v23 addObject:v70];
        }
LABEL_146:
        char v79 = (void *)[v70 objectForKeyedSubscript:0x1EFA4FEE0];
        if (!v79)
        {
          char v79 = (void *)[MEMORY[0x1E4F1CA48] array];
          [v70 setObject:v79 forKeyedSubscript:0x1EFA4FEE0];
        }
        [v79 addObject:v122];
        int v80 = [v122 isEqual:@"AVCaptureSessionPresetHigh"];
        uint64_t v81 = MEMORY[0x1E4F1CC38];
        if (v80) {
          [v70 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA4F9E0];
        }
        if ([v122 isEqual:@"AVCaptureSessionPresetPhoto"]) {
          [v70 setObject:v81 forKeyedSubscript:0x1EFA51120];
        }
        float v82 = (void *)[v70 objectForKeyedSubscript:0x1EFA4FBA0];
        if (!v82)
        {
          float v82 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          [v70 setObject:v82 forKeyedSubscript:0x1EFA4FBA0];
        }
        objc_msgSend(v82, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v123), v122);
        float v83 = (void *)[v70 objectForKeyedSubscript:0x1EFA4FB80];
        if (!v83)
        {
          float v83 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
          [v70 setObject:v83 forKeyedSubscript:0x1EFA4FB80];
        }
        objc_msgSend(v83, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", HIDWORD(v123)), v122);
        goto LABEL_157;
      }
    }
    uint64_t v111 = [obj countByEnumeratingWithState:&v141 objects:v156 count:16];
  }
  while (v111);
LABEL_181:
  *a2 = [v109 copy];
  if (a4) {
    *a4 = (id)[(FigCaptureFlatPlist *)v5 objectForKeyedSubscript:@"AVH264Settings"];
  }
  if (a3) {
    *a3 = (id)[(FigCaptureFlatPlist *)v5 objectForKeyedSubscript:@"AVHEVCSettings"];
  }
LABEL_185:
}

uint64_t csu_compareSourceFormats(void *a1, void *a2)
{
  int v4 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", 0x1EFA40FE0), "intValue");
  int v5 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", 0x1EFA41000), "intValue");
  int v6 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1EFA40FE0), "intValue");
  int v7 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1EFA41000), "intValue");
  if (v5 * v4 < v7 * v6) {
    return -1;
  }
  if (v7 * v6 < v5 * v4) {
    return 1;
  }
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"VideoMinFrameRate"), "floatValue");
  float v10 = v9;
  objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"VideoMinFrameRate"), "floatValue");
  float v12 = v11;
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "floatValue");
  float v14 = v13;
  objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "floatValue");
  float v16 = v15;
  if (v14 == v15)
  {
    int v19 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"VideoIsBinned"), "BOOLValue");
    int v20 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"VideoIsBinned"), "BOOLValue");
    if ((v19 & 1) == 0 && v20) {
      return -1;
    }
    if ((v19 ^ 1 | v20) != 1) {
      return 1;
    }
    if ((float)(v14 - v10) >= (float)(v16 - v12))
    {
      if ((float)(v16 - v12) < (float)(v14 - v10)) {
        return 1;
      }
      goto LABEL_17;
    }
    return -1;
  }
  if ((float)(v14 - v10) < (float)(v15 - v12)) {
    return -1;
  }
  if ((float)(v15 - v12) < (float)(v14 - v10)) {
    return 1;
  }
  int v17 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"VideoIsBinned"), "BOOLValue");
  int v18 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"VideoIsBinned"), "BOOLValue");
  if ((v17 & 1) == 0 && v18) {
    return -1;
  }
  if (((v17 ^ 1 | v18) & 1) == 0) {
    return 1;
  }
LABEL_17:
  int v21 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", 0x1EFA50AC0), "BOOLValue");
  int v22 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1EFA50AC0), "BOOLValue");
  if (v21 && !v22) {
    return -1;
  }
  if ((v21 | v22 ^ 1) != 1) {
    return 1;
  }
  uint64_t v23 = *MEMORY[0x1E4F55C70];
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F55C70]), "floatValue");
  float v25 = v24;
  objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v23), "floatValue");
  if (v25 > v26) {
    return -1;
  }
  if (v25 < v26) {
    return 1;
  }
  uint64_t v27 = [a1 objectForKeyedSubscript:0x1EFA4FEE0];
  uint64_t v28 = [a2 objectForKeyedSubscript:0x1EFA4FEE0];
  if (v27 && !v28) {
    return -1;
  }
  if (!v27 && v28) {
    return 1;
  }
  uint64_t v29 = *MEMORY[0x1E4F24D70];
  uint64_t v30 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F24D70]), "unsignedIntValue");
  uint64_t v31 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v29), "unsignedIntValue");
  if (v30 == v31) {
    return 0;
  }
  uint64_t v32 = v31;
  unint64_t v33 = objc_msgSend(&unk_1EFB03260, "indexOfObject:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v30));
  if (v33 < objc_msgSend(&unk_1EFB03260, "indexOfObject:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v32)))return -1; {
  else
  }
    return 1;
}

uint64_t csu_preprocessDeviceDicts(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(a1);
        }
        int v7 = *(void **)(*((void *)&v10 + 1) + 8 * v6);
        if ((objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", @"mediaType"), "isEqualToString:", @"vide") & 1) != 0|| objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", @"mediaType"), "isEqualToString:", @"pcld"))
        {
          uint64_t v8 = [v7 objectForKeyedSubscript:@"uniqueName"];
          if (v8)
          {
            uint64_t v9 = v8;
            if ([v2 containsObject:v8]) {
              objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8], objc_msgSend(NSString, "stringWithFormat:", @"Found duplicate uniqueName: %@", v9), 0 reason userInfo]);
            }
            [v2 addObject:v9];
          }
          FigCaptureSourcePreprocessVideoDeviceDict(v7, a1);
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t result = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t csu_addSecureMetadataKeysToDeviceDict(void *a1, void *a2)
{
  int v4 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"position"), "intValue");
  int v5 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"deviceType"), "intValue");
  uint64_t v6 = BWCaptureDevicePositionAndDeviceTypeToPortType(v4, v5);
  int v7 = [&unk_1EFB03290 containsObject:FigCaptureGetModelSpecificName()];
  if (v5 == 19 && v7) {
    [a1 setObject:0 forKeyedSubscript:@"secureMetadataCameraSupported"];
  }
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", @"secureMetadataCameraSupported"), "BOOLValue")&& (uint64_t v8 = objc_msgSend(a2, "copyStreamWithPortType:error:", v6, 0), v9 = objc_msgSend(v8, "supportedProperties"), v10 = objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F548F0]), v8, v10))
  {
    [a1 setObject:0 forKeyedSubscript:@"hasAutoFocus"];
    uint64_t v11 = MEMORY[0x1E4F1CC38];
    long long v12 = a1;
  }
  else
  {
    long long v12 = a1;
    uint64_t v11 = 0;
  }
  return [v12 setObject:v11 forKeyedSubscript:@"secureMetadataCameraSupported"];
}

uint64_t csu_createMultiStreamSourceFormatsArrayAndAVCompressionSettingsDict(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v526 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"MultiStream"), "objectForKeyedSubscript:", @"AVCaptureDeviceFormats");
  uint64_t v9 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"MultiStream"), "objectForKeyedSubscript:", 0x1EFA4FEE0);
  uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v452 = MEMORY[0x1E4F143A8];
  uint64_t v453 = 3221225472;
  long long v454 = __csu_removeExperimentalDeviceFormats_block_invoke;
  long long v455 = &unk_1E5C27438;
  uint64_t v456 = v10;
  [v8 enumerateKeysAndObjectsUsingBlock:&v452];
  [v8 removeObjectsForKeys:v10];
  uint64_t v11 = [MEMORY[0x1E4F1CA48] array];
  *(void *)&v505[0] = MEMORY[0x1E4F143A8];
  *((void *)&v505[0] + 1) = 3221225472;
  *(void *)&v505[1] = __csu_removeUnsupportedDeviceFormatsAndDependentPresets_block_invoke;
  *((void *)&v505[1] + 1) = &unk_1E5C27460;
  *(void *)&long long v506 = v11;
  [v8 enumerateKeysAndObjectsUsingBlock:v505];
  [v8 removeObjectsForKeys:v11];
  uint64_t v12 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v452 = MEMORY[0x1E4F143A8];
  uint64_t v453 = 3221225472;
  long long v454 = __csu_removeUnsupportedDeviceFormatsAndDependentPresets_block_invoke_2;
  long long v455 = &unk_1E5C27488;
  uint64_t v456 = (uint64_t)v9;
  uint64_t v457 = v11;
  uint64_t v458 = v12;
  [v9 enumerateKeysAndObjectsUsingBlock:&v452];
  [v9 removeObjectsForKeys:v12];
  id v412 = v8;
  csu_mergeInCommonEntries(v8);
  [a2 objectForKeyedSubscript:@"localizedName"];
  long long v13 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"MultiStream"), "objectForKeyedSubscript:", 0x1EFA4FEE0);
  id v14 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v452 = MEMORY[0x1E4F143A8];
  uint64_t v453 = 3221225472;
  long long v454 = __csu_resolveSessionPresetAliases_block_invoke;
  long long v455 = &unk_1E5C26250;
  uint64_t v456 = (uint64_t)v13;
  uint64_t v457 = (uint64_t)v14;
  [v13 enumerateKeysAndObjectsUsingBlock:&v452];
  [v13 addEntriesFromDictionary:v14];

  id v397 = v13;
  csu_mergeInCommonEntries(v13);
  int v391 = a2;
  unsigned int v15 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"deviceType"), "intValue");
  unsigned int v16 = v15;
  if (v15 <= 9
    && ((1 << v15) & 0x310) != 0
    && (objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "rearCameraCalibrationValid") & 1) == 0)
  {
    LODWORD(v491) = 0;
    LOBYTE(v523[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v18 = v491;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v523[0])) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v18 & 0xFFFFFFFE;
    }
    if (v19)
    {
      LODWORD(v505[0]) = 136315138;
      *(void *)((char *)v505 + 4) = "csu_getDepthDataFormatsDict";
      LODWORD(v345) = 12;
      uint64_t v342 = v505;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v20 = a1;
  v400 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"MultiStream", v342, v345), "objectForKeyedSubscript:", @"DepthDataFormats");
  if (v400)
  {
    csu_mergeInCommonEntries(v400);
    if (v16 != 13)
    {
      uint64_t v406 = a1 ? *(void **)(a1 + 40) : 0;
      long long v524 = 0u;
      long long v525 = 0u;
      memset(v523, 0, sizeof(v523));
      obuint64_t j = (id)-[FigCaptureSourceStreamsContainer portTypesSupportingDepth](a1);
      uint64_t v409 = [obj countByEnumeratingWithState:v523 objects:&v452 count:16];
      if (v409)
      {
        uint64_t v408 = **(void **)&v523[1];
        uint64_t v404 = *MEMORY[0x1E4F548C0];
        uint64_t v21 = *MEMORY[0x1E4F53850];
        uint64_t v22 = *MEMORY[0x1E4F53848];
        do
        {
          uint64_t v23 = 0;
          do
          {
            if (**(void **)&v523[1] != v408) {
              objc_enumerationMutation(obj);
            }
            uint64_t v411 = v23;
            if (!v20
              || ((unsigned int v24 = *(_DWORD *)(v20 + 12), v127 = v24 > 8, v25 = (1 << v24) & 0x10E, !v127)
                ? (BOOL v26 = v25 == 0)
                : (BOOL v26 = 1),
                  v26))
            {
              id v429 = 0;
            }
            else
            {
              id v429 = (id)objc_msgSend((id)objc_msgSend(v406, "objectForKeyedSubscript:", *(void *)(*((void *)&v523[0] + 1) + 8 * v23)), "getProperty:error:", v404, 0);
            }
            long long v521 = 0u;
            long long v520 = 0u;
            long long v519 = 0u;
            long long v518 = 0u;
            id v413 = (id)[v400 allKeys];
            id v424 = (id)[v413 countByEnumeratingWithState:&v518 objects:v505 count:16];
            if (v424)
            {
              uint64_t v422 = *(void *)v519;
              do
              {
                for (uint64_t i = 0; i != v424; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v519 != v422) {
                    objc_enumerationMutation(v413);
                  }
                  uint64_t v426 = *(void *)(*((void *)&v518 + 1) + 8 * i);
                  uint64_t v28 = objc_msgSend(v400, "objectForKeyedSubscript:");
                  uint64_t v29 = (void *)[v28 objectForKeyedSubscript:0x1EFA40FE0];
                  uint64_t v30 = (void *)[v28 objectForKeyedSubscript:0x1EFA41000];
                  int v31 = objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", 0x1EFA503A0), "intValue");
                  if (!v31) {
                    int v31 = [v29 intValue];
                  }
                  int v32 = objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", 0x1EFA503C0), "intValue");
                  if (!v32) {
                    int v32 = [v30 intValue];
                  }
                  if ((int)[v29 intValue] >= 1 && (int)objc_msgSend(v30, "intValue") >= 1)
                  {
                    long long v486 = 0u;
                    long long v485 = 0u;
                    long long v484 = 0u;
                    *(_OWORD *)type = 0u;
                    uint64_t v33 = [v429 countByEnumeratingWithState:type objects:&v491 count:16];
                    if (v33)
                    {
                      uint64_t v34 = v33;
                      uint64_t v35 = *(void *)v484;
LABEL_39:
                      uint64_t v36 = 0;
                      while (1)
                      {
                        if (*(void *)v484 != v35) {
                          objc_enumerationMutation(v429);
                        }
                        uint64_t v37 = *(void **)(*(void *)&type[8] + 8 * v36);
                        int v38 = objc_msgSend((id)objc_msgSend(v37, "objectForKeyedSubscript:", v21), "intValue");
                        int v39 = objc_msgSend((id)objc_msgSend(v37, "objectForKeyedSubscript:", v22), "intValue");
                        if (v31 == v38 && v32 == v39) {
                          break;
                        }
                        if (v31 == v39 && v32 == v38) {
                          break;
                        }
                        if (v34 == ++v36)
                        {
                          uint64_t v34 = [v429 countByEnumeratingWithState:type objects:&v491 count:16];
                          if (v34) {
                            goto LABEL_39;
                          }
                          goto LABEL_52;
                        }
                      }
                    }
                    else
                    {
LABEL_52:
                      [v400 setObject:0 forKeyedSubscript:v426];
                    }
                  }
                }
                id v424 = (id)[v413 countByEnumeratingWithState:&v518 objects:v505 count:16];
              }
              while (v424);
            }
            uint64_t v23 = v411 + 1;
            uint64_t v20 = a1;
          }
          while (v411 + 1 != v409);
          uint64_t v409 = [obj countByEnumeratingWithState:v523 objects:&v452 count:16];
        }
        while (v409);
      }
    }
  }
  if (v20 && *(_DWORD *)(v20 + 8) == 14)
  {
    id v368 = (id)[MEMORY[0x1E4F1CA60] dictionary];
    id v365 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    int v42 = objc_msgSend((id)objc_msgSend(v391, "objectForKeyedSubscript:", @"MultiStream"), "objectForKeyedSubscript:", @"FigCaptureStreamFormats");
    long long v436 = 0u;
    long long v437 = 0u;
    long long v438 = 0u;
    long long v439 = 0u;
    uint64_t v43 = [v412 countByEnumeratingWithState:&v436 objects:v451 count:16];
    if (v43)
    {
      uint64_t v44 = v43;
      id v430 = 0;
      uint64_t v45 = *(void *)v437;
      uint64_t v46 = MEMORY[0x1E4F1CC28];
      do
      {
        for (uint64_t j = 0; j != v44; ++j)
        {
          if (*(void *)v437 != v45) {
            objc_enumerationMutation(v412);
          }
          int v48 = *(void **)(*((void *)&v436 + 1) + 8 * j);
          int v49 = (void *)[v412 objectForKeyedSubscript:v48];
          int v50 = objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", @"Width"), "intValue");
          int v51 = objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", @"Height"), "intValue");
          if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(v42, "objectForKeyedSubscript:", objc_msgSend(v49, "objectForKeyedSubscript:", @"CaptureStreamFormat")), "objectForKeyedSubscript:", @"Binned"), "BOOLValue")&& v50 == 1920&& v51 == 1440)
          {
            int v52 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(v412, "objectForKeyedSubscript:", v48));
            [v52 setObject:v46 forKeyedSubscript:0x1EFA50D20];
            [v52 setObject:v46 forKeyedSubscript:@"BackgroundBlurSupportedForContinuityCapture"];
            [v52 setObject:v46 forKeyedSubscript:@"StudioLightingSupportedForContinuityCapture"];
            [v52 setObject:v46 forKeyedSubscript:@"ReactionEffectsSupportedForContinuityCapture"];
            [v52 setObject:v46 forKeyedSubscript:@"BackgroundReplacementSupportedForContinuityCapture"];
            [v368 setObject:v52 forKeyedSubscript:v48];
            id v430 = v48;
          }
        }
        uint64_t v44 = [v412 countByEnumeratingWithState:&v436 objects:v451 count:16];
      }
      while (v44);
    }
    else
    {
      id v430 = 0;
    }
    long long v434 = 0u;
    long long v435 = 0u;
    long long v432 = 0u;
    long long v433 = 0u;
    uint64_t v54 = [v397 countByEnumeratingWithState:&v432 objects:v450 count:16];
    if (v54)
    {
      uint64_t v55 = v54;
      uint64_t v56 = *(void *)v433;
      int v53 = v365;
      while (2)
      {
        for (uint64_t k = 0; k != v55; ++k)
        {
          if (*(void *)v433 != v56) {
            objc_enumerationMutation(v397);
          }
          float v58 = *(void **)(*((void *)&v432 + 1) + 8 * k);
          if ([v58 isEqualToString:@"AVCaptureSessionPresetHigh"])
          {
            int v59 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(v397, "objectForKeyedSubscript:", v58));
            [v59 setObject:v430 forKeyedSubscript:@"DeviceFormat"];
            [v365 setObject:v59 forKeyedSubscript:v58];
            goto LABEL_84;
          }
        }
        uint64_t v55 = [v397 countByEnumeratingWithState:&v432 objects:v450 count:16];
        if (v55) {
          continue;
        }
        break;
      }
    }
    else
    {
      int v53 = v365;
    }
  }
  else
  {
    int v53 = v397;
    id v368 = v412;
  }
LABEL_84:
  AllAVCaptureSessionPresets = FigCaptureStreamUtilitiesGetAllAVCaptureSessionPresets();
  id v366 = v53;
  uint64_t v427 = [v53 objectForKeyedSubscript:@"AVCaptureSessionPresetHigh"];
  long long v491 = 0u;
  long long v492 = 0u;
  long long v493 = 0u;
  long long v494 = 0u;
  uint64_t v61 = [AllAVCaptureSessionPresets countByEnumeratingWithState:&v491 objects:&v452 count:16];
  if (v61)
  {
    uint64_t v62 = v61;
    uint64_t v63 = *(void *)v492;
    do
    {
      for (uint64_t m = 0; m != v62; ++m)
      {
        if (*(void *)v492 != v63) {
          objc_enumerationMutation(AllAVCaptureSessionPresets);
        }
        float v65 = *(void **)(*((void *)&v491 + 1) + 8 * m);
        if ((objc_msgSend(v65, "isEqual:", @"AVCaptureSessionPresetInputPriority", v343, v346) & 1) == 0)
        {
          unsigned int v66 = (void *)[v366 objectForKeyedSubscript:v65];
          if (v66)
          {
            uint64_t v67 = v66;
            uint64_t v68 = [v66 objectForKeyedSubscript:@"DeviceFormat"];
            int32x4_t v69 = (void *)[v368 objectForKeyedSubscript:v68];
            if (v69)
            {
              int32x4_t v70 = v69;
              id v71 = (id)[v69 objectForKeyedSubscript:0x1EFA4FEE0];
              if (!v71)
              {
                id v71 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                [v70 setObject:v71 forKeyedSubscript:0x1EFA4FEE0];
              }
              [v71 addObject:v65];
              if (v67 == (void *)v427) {
                [v70 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA4F9E0];
              }
              objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(v67, "objectForKeyedSubscript:", @"MinFrameRate"), 0x1EFA4FBC0);
              objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(v67, "objectForKeyedSubscript:", @"MaxFrameRate"), 0x1EFA4FBE0);
              uint64_t v72 = objc_msgSend((id)objc_msgSend(v67, "objectForKeyedSubscript:", @"MaxIntegrationTime"), "intValue");
              if (v72) {
                objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v72), 0x1EFA4FE60);
              }
              uint64_t v73 = [v67 objectForKeyedSubscript:0x1EFA4FA00];
              if (v73) {
                [v70 setObject:v73 forKeyedSubscript:0x1EFA4FA00];
              }
            }
            else
            {
              LODWORD(v51_Block_object_dispose(&STACK[0x458], 8) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              uint64_t v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v75 = v518;
              if (os_log_type_enabled(v74, type[0])) {
                unsigned int v76 = v75;
              }
              else {
                unsigned int v76 = v75 & 0xFFFFFFFE;
              }
              if (v76)
              {
                LODWORD(v523[0]) = 136315650;
                *(void *)((char *)v523 + 4) = "csu_addDeviceFormatDefaultsFromPresets";
                WORD6(v523[0]) = 2114;
                *(void *)((char *)v523 + 14) = v68;
                WORD3(v523[1]) = 2114;
                *((void *)&v523[1] + 1) = v65;
                LODWORD(v346) = 32;
                int v343 = v523;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
      uint64_t v62 = [AllAVCaptureSessionPresets countByEnumeratingWithState:&v491 objects:&v452 count:16];
    }
    while (v62);
  }
  uint64_t v77 = a1;
  if (a1) {
    char v78 = *(void **)(a1 + 32);
  }
  else {
    char v78 = 0;
  }
  int v449 = 0;
  id v79 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  int v80 = objc_msgSend((id)objc_msgSend(v391, "objectForKeyedSubscript:", @"MultiStream"), "objectForKeyedSubscript:", @"FigCaptureStreamFormats");
  uint64_t v369 = (void *)[v391 objectForKeyedSubscript:@"mediaType"];
  uint64_t v81 = [v391 objectForKeyedSubscript:@"localizedName"];
  uint64_t v82 = [v78 getProperty:@"SupportedFormatsArray" error:0];
  float v83 = off_1E5C1F000;
  uint64_t v84 = v79;
  unsigned int v405 = v79;
  if (!v82)
  {
    LODWORD(v491) = 0;
    LOBYTE(v523[0]) = 0;
    uint64_t v339 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v340 = v491;
    if (os_log_type_enabled(v339, v523[0])) {
      unsigned int v341 = v340;
    }
    else {
      unsigned int v341 = v340 & 0xFFFFFFFE;
    }
    if (v341)
    {
      LODWORD(v505[0]) = 136315394;
      *(void *)((char *)v505 + 4) = "csu_createResolvedStreamFormatsDict";
      WORD6(v505[0]) = 2114;
      *(void *)((char *)v505 + 14) = v81;
      LODWORD(v346) = 22;
      int v343 = v505;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_367;
  }
  uint64_t v85 = (void *)v82;
  v384 = (void *)v82;
  if (dword_1EB4C5710)
  {
    uint64_t v86 = v78;
    LODWORD(v491) = 0;
    LOBYTE(v523[0]) = 0;
    uint64_t v87 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v88 = v491;
    if (os_log_type_enabled(v87, v523[0])) {
      unsigned int v89 = v88;
    }
    else {
      unsigned int v89 = v88 & 0xFFFFFFFE;
    }
    if (v89)
    {
      int v90 = [v384 count];
      LODWORD(v505[0]) = 136315650;
      *(void *)((char *)v505 + 4) = "csu_createResolvedStreamFormatsDict";
      WORD6(v505[0]) = 2114;
      *(void *)((char *)v505 + 14) = v81;
      WORD3(v505[1]) = 1024;
      DWORD2(v505[1]) = v90;
      LODWORD(v346) = 28;
      int v343 = v505;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    float v83 = off_1E5C1F000;
    uint64_t v85 = v384;
    char v78 = v86;
  }
  uint64_t v91 = -[__objc2_class sensorIDStringFromModuleInfo:](v83[88], "sensorIDStringFromModuleInfo:", objc_msgSend(v78, "getProperty:error:", *MEMORY[0x1E4F54AE8], 0, v343, v346));
  uint64_t v92 = v83;
  uint64_t v93 = v91;
  uint64_t v359 = v78;
  if (!objc_msgSend((id)objc_msgSend((id)-[__objc2_class cameraTuningParameters](-[__objc2_class sharedInstance](v92[88], "sharedInstance"), "cameraTuningParameters"), "objectForKeyedSubscript:", objc_msgSend(v78, "portType")), "objectForKeyedSubscript:", v91))
  {
    LODWORD(v491) = 0;
    LOBYTE(v523[0]) = 0;
    uint64_t v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v95 = v491;
    if (os_log_type_enabled(v94, v523[0])) {
      unsigned int v96 = v95;
    }
    else {
      unsigned int v96 = v95 & 0xFFFFFFFE;
    }
    if (v96)
    {
      uint64_t v97 = [v359 portType];
      LODWORD(v505[0]) = 136315650;
      *(void *)((char *)v505 + 4) = "csu_createResolvedStreamFormatsDict";
      WORD6(v505[0]) = 2114;
      *(void *)((char *)v505 + 14) = v93;
      WORD3(v505[1]) = 2114;
      *((void *)&v505[1] + 1) = v97;
      LODWORD(v347) = 32;
      long long v344 = v505;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v84 = v79;
    uint64_t v85 = v384;
  }
  int v358 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", 0x1EFA6BC20, v344, v347), "BOOLValue");
  long long v445 = 0u;
  long long v446 = 0u;
  long long v447 = 0u;
  long long v448 = 0u;
  uint64_t v98 = [v80 countByEnumeratingWithState:&v445 objects:v523 count:16];
  if (!v98) {
    goto LABEL_367;
  }
  uint64_t v99 = v98;
  uint64_t v100 = *(void *)v446;
  uint64_t v407 = *MEMORY[0x1E4F55318];
  uint64_t v414 = *MEMORY[0x1E4F55410];
  objCGFloat a = (id)*MEMORY[0x1E4F554B8];
  uint64_t v383 = *MEMORY[0x1E4F55480];
  uint64_t v382 = *MEMORY[0x1E4F55470];
  uint64_t v381 = *MEMORY[0x1E4F55488];
  uint64_t v380 = *MEMORY[0x1E4F55478];
  uint64_t v357 = *MEMORY[0x1E4F553C0];
  uint64_t v356 = *MEMORY[0x1E4F55370];
  uint64_t v355 = *MEMORY[0x1E4F55350];
  uint64_t v354 = *MEMORY[0x1E4F55368];
  uint64_t v353 = *MEMORY[0x1E4F54CB8];
  uint64_t v352 = *MEMORY[0x1E4F54CC0];
  uint64_t v360 = *MEMORY[0x1E4F24D70];
  v373 = v80;
  uint64_t v361 = *(void *)v446;
  while (2)
  {
    uint64_t v101 = 0;
    uint64_t v363 = v99;
    do
    {
      if (*(void *)v446 != v100) {
        objc_enumerationMutation(v80);
      }
      uint64_t v379 = v101;
      id v428 = *(void **)(*((void *)&v445 + 1) + 8 * v101);
      double v102 = objc_msgSend(v80, "objectForKeyedSubscript:");
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        double v102 = (void *)[v80 objectForKeyedSubscript:v102];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v346 = v348;
          LODWORD(v343) = 0;
          FigDebugAssert3();
        }
      }
      if ((objc_msgSend((id)objc_msgSend(v102, "objectForKeyedSubscript:", @"Unsupported", v343, v346), "BOOLValue") & 1) == 0)
      {
        unsigned int v103 = csu_resolveFormatIndexForNamedStreamFormat(v81, v428, (uint64_t)&stru_1EFA403E0, v102, v85, 0);
        if ((v103 & 0x80000000) == 0)
        {
          LODWORD(v104) = v103;
          if ([v85 count] > (unint64_t)v103)
          {
            unsigned int v376 = v104;
            id v378 = (id)objc_msgSend((id)objc_msgSend(v85, "objectAtIndexedSubscript:", v104), "mutableCopy");
            objc_msgSend(v378, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:"), 0x1EFA4F9C0);
            uint64_t v105 = [v369 isEqualToString:@"vide"];
            if ((v105 & 1) == 0) {
              uint64_t v105 = [v378 setObject:v369 forKeyedSubscript:0x1EFA4F980];
            }
            context = (void *)MEMORY[0x1A6272C70](v105);
            uint64_t v106 = (void *)[v102 objectForKeyedSubscript:0x1EFA4FB00];
            uint64_t v104 = v104;
            if (!v106)
            {
              if (objc_msgSend((id)objc_msgSend(v102, "objectForKeyedSubscript:", @"HasFESCompanionFormat"), "BOOLValue"))
              {
                v522 = v102;
                uint64_t v106 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v522 count:1];
              }
              else
              {
                uint64_t v106 = 0;
              }
            }
            char v107 = v106;
            id v431 = v102;
            if ([v106 count])
            {
              unsigned int v410 = (void *)[MEMORY[0x1E4F1CA48] array];
              long long v441 = 0u;
              long long v442 = 0u;
              long long v443 = 0u;
              long long v444 = 0u;
              id v425 = v107;
              uint64_t v108 = [v107 countByEnumeratingWithState:&v441 objects:&v518 count:16];
              if (v108)
              {
                uint64_t v109 = v108;
                uint64_t v110 = *(void *)v442;
                do
                {
                  for (uint64_t n = 0; n != v109; ++n)
                  {
                    if (*(void *)v442 != v110) {
                      objc_enumerationMutation(v425);
                    }
                    uint64_t v112 = *(void **)(*((void *)&v441 + 1) + 8 * n);
                    id v113 = (id)[v431 mutableCopy];
                    [v113 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"FES"];
                    objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v112, "objectForKeyedSubscript:", @"FESWidth"), @"FESWidth");
                    objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v112, "objectForKeyedSubscript:", @"FESHeight"), @"FESHeight");
                    objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v112, "objectForKeyedSubscript:", @"MaxFrameRate"), @"MaxFrameRate");
                    [v113 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:0x1EFA4FEC0];
                    uint64_t v440 = 0;
                    uint64_t v114 = csu_resolveFormatIndexForNamedStreamFormat(v81, v428, @"[FESCompanionFormat]", v113, v85, &v440);
                    if ((v114 & 0x80000000) == 0)
                    {
                      uint64_t v115 = v114;
                      if ([v85 count] > (unint64_t)v114)
                      {
                        char v116 = (void *)[v85 objectAtIndexedSubscript:v115];
                        int v117 = objc_msgSend((id)objc_msgSend(v391, "objectForKeyedSubscript:", @"geometricDistortionCorrection"), "BOOLValue");
                        uint64_t v118 = objc_msgSend((id)objc_msgSend(v116, "objectForKeyedSubscript:", v407), "objectForKeyedSubscript:", v414);
                        int v119 = objc_msgSend((id)objc_msgSend(v118, "objectForKeyedSubscript:", obja), "BOOLValue");
                        uint64_t v120 = 0;
                        if (v117)
                        {
                          uint64_t v121 = 0;
                          if (v119)
                          {
                            int v122 = objc_msgSend((id)objc_msgSend(v118, "objectForKeyedSubscript:", v383), "intValue");
                            int v123 = objc_msgSend((id)objc_msgSend(v118, "objectForKeyedSubscript:", v382), "intValue");
                            uint64_t v124 = v81;
                            unsigned int v125 = objc_msgSend((id)objc_msgSend(v118, "objectForKeyedSubscript:", v381), "intValue");
                            unsigned int v126 = objc_msgSend((id)objc_msgSend(v118, "objectForKeyedSubscript:", v380), "intValue");
                            BOOL v127 = (int)v125 <= v122 && (int)v126 <= v123;
                            int v128 = !v127;
                            if (v128) {
                              uint64_t v120 = v125;
                            }
                            else {
                              uint64_t v120 = 0;
                            }
                            uint64_t v81 = v124;
                            uint64_t v85 = v384;
                            if (v128) {
                              uint64_t v121 = v126;
                            }
                            else {
                              uint64_t v121 = 0;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v121 = 0;
                        }
                        *(void *)&long long v491 = 0x1EFA40FE0;
                        *(void *)&v505[0] = [NSNumber numberWithInt:v440];
                        *((void *)&v491 + 1) = 0x1EFA41000;
                        *((void *)&v505[0] + 1) = [NSNumber numberWithInt:HIDWORD(v440)];
                        *(void *)&long long v492 = 0x1EFA4F9C0;
                        *(void *)&v505[1] = [NSNumber numberWithInt:v115];
                        *((void *)&v492 + 1) = 0x1EFA4FB20;
                        uint64_t v129 = [v431 objectForKeyedSubscript:@"SIFREnabled"];
                        uint64_t v130 = MEMORY[0x1E4F1CC28];
                        if (v129) {
                          uint64_t v130 = v129;
                        }
                        *((void *)&v505[1] + 1) = v130;
                        *(void *)&long long v493 = 0x1EFA4FC00;
                        uint64_t v131 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v131) {
                          unsigned int v132 = (void *)v131;
                        }
                        else {
                          unsigned int v132 = &unk_1EFAFF780;
                        }
                        *(void *)&long long v506 = v132;
                        *((void *)&v493 + 1) = 0x1EFA4FC20;
                        uint64_t v133 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v133) {
                          int v134 = (void *)v133;
                        }
                        else {
                          int v134 = &unk_1EFAFF780;
                        }
                        *((void *)&v506 + 1) = v134;
                        *(void *)&long long v494 = 0x1EFA4FD40;
                        uint64_t v135 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v135) {
                          int v136 = (void *)v135;
                        }
                        else {
                          int v136 = &unk_1EFAFF780;
                        }
                        *(void *)&long long v507 = v136;
                        *((void *)&v494 + 1) = 0x1EFA4FD60;
                        uint64_t v137 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v137) {
                          long long v138 = (void *)v137;
                        }
                        else {
                          long long v138 = &unk_1EFAFF780;
                        }
                        *((void *)&v507 + 1) = v138;
                        uint64_t v495 = 0x1EFA4FC40;
                        uint64_t v139 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v139) {
                          long long v140 = (void *)v139;
                        }
                        else {
                          long long v140 = &unk_1EFAFF780;
                        }
                        v508 = v140;
                        uint64_t v496 = 0x1EFA4FC60;
                        uint64_t v141 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v141) {
                          long long v142 = (void *)v141;
                        }
                        else {
                          long long v142 = &unk_1EFAFF780;
                        }
                        v509 = v142;
                        uint64_t v497 = 0x1EFA4FC80;
                        uint64_t v143 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v143) {
                          long long v144 = (void *)v143;
                        }
                        else {
                          long long v144 = &unk_1EFAFF780;
                        }
                        v510 = v144;
                        uint64_t v498 = 0x1EFA4FCA0;
                        uint64_t v145 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v145) {
                          long long v146 = (void *)v145;
                        }
                        else {
                          long long v146 = &unk_1EFAFF780;
                        }
                        v511 = v146;
                        uint64_t v499 = 0x1EFA4FCC0;
                        uint64_t v147 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v147) {
                          long long v148 = (void *)v147;
                        }
                        else {
                          long long v148 = &unk_1EFAFF780;
                        }
                        v512 = v148;
                        uint64_t v500 = 0x1EFA4FCE0;
                        uint64_t v149 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v149) {
                          long long v150 = (void *)v149;
                        }
                        else {
                          long long v150 = &unk_1EFAFF780;
                        }
                        v513 = v150;
                        uint64_t v501 = 0x1EFA500C0;
                        uint64_t v514 = [NSNumber numberWithInt:v120];
                        uint64_t v502 = 0x1EFA500E0;
                        uint64_t v515 = [NSNumber numberWithInt:v121];
                        uint64_t v503 = 0x1EFA4FD00;
                        uint64_t v151 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v151) {
                          long long v152 = (void *)v151;
                        }
                        else {
                          long long v152 = &unk_1EFAFF780;
                        }
                        v516 = v152;
                        uint64_t v504 = 0x1EFA4FD20;
                        uint64_t v153 = objc_msgSend(v112, "objectForKeyedSubscript:");
                        if (v153) {
                          uint64_t v154 = (void *)v153;
                        }
                        else {
                          uint64_t v154 = &unk_1EFAFF780;
                        }
                        v517 = v154;
                        objc_msgSend(v410, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v505, &v491, 18));
                      }
                    }
                  }
                  uint64_t v109 = [v425 countByEnumeratingWithState:&v441 objects:&v518 count:16];
                }
                while (v109);
              }
              [v378 setObject:v410 forKeyedSubscript:0x1EFA4FB00];
              uint64_t v77 = a1;
              uint64_t v84 = v405;
              int v80 = v373;
              double v102 = v431;
              uint64_t v104 = v376;
            }
            if ([v102 objectForKeyedSubscript:0x1EFA4FA40])
            {
              uint64_t v155 = (void *)[v102 objectForKeyedSubscript:0x1EFA4FA40];
              id v156 = (id)[v102 mutableCopy];
              [v156 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:0x1EFA4FB20];
              [v156 setObject:0 forKeyedSubscript:@"SIFRBinningFactor"];
              if ([v155 objectForKeyedSubscript:@"SensorWidth"]) {
                objc_msgSend(v156, "setObject:forKeyedSubscript:", objc_msgSend(v155, "objectForKeyedSubscript:", @"SensorWidth"), @"SensorWidth");
              }
              if ([v155 objectForKeyedSubscript:@"SensorHeight"]) {
                objc_msgSend(v156, "setObject:forKeyedSubscript:", objc_msgSend(v155, "objectForKeyedSubscript:", @"SensorHeight"), @"SensorHeight");
              }
              objc_msgSend(v156, "setObject:forKeyedSubscript:", objc_msgSend(v155, "objectForKeyedSubscript:", @"FES"), @"FES");
              objc_msgSend(v156, "setObject:forKeyedSubscript:", objc_msgSend(v155, "objectForKeyedSubscript:", @"FESWidth"), @"FESWidth");
              objc_msgSend(v156, "setObject:forKeyedSubscript:", objc_msgSend(v155, "objectForKeyedSubscript:", @"FESHeight"), @"FESHeight");
              objc_msgSend(v156, "setObject:forKeyedSubscript:", objc_msgSend(v155, "objectForKeyedSubscript:", @"MaxFrameRate"), @"MaxFrameRate");
              uint64_t v157 = csu_resolveFormatIndexForNamedStreamFormat(v81, v428, @"[NonSIFRCompanionFormat]", v156, v384, 0);
              if ((v157 & 0x80000000) == 0)
              {
                uint64_t v158 = v157;
                if ([v384 count] > (unint64_t)v157)
                {
                  v489[0] = 0x1EFA4F9C0;
                  v490[0] = [NSNumber numberWithInt:v158];
                  v490[1] = MEMORY[0x1E4F1CC28];
                  v489[1] = 0x1EFA4FB20;
                  v489[2] = 0x1EFA4FC40;
                  uint64_t v159 = objc_msgSend(v155, "objectForKeyedSubscript:");
                  if (v159) {
                    uint64_t v160 = (void *)v159;
                  }
                  else {
                    uint64_t v160 = &unk_1EFAFF780;
                  }
                  v490[2] = v160;
                  v489[3] = 0x1EFA4FC60;
                  uint64_t v161 = objc_msgSend(v155, "objectForKeyedSubscript:");
                  if (v161) {
                    unsigned int v162 = (void *)v161;
                  }
                  else {
                    unsigned int v162 = &unk_1EFAFF780;
                  }
                  v490[3] = v162;
                  objc_msgSend(v378, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v490, v489, 4), 0x1EFA4FA40);
                }
              }
            }
            if ([v102 objectForKeyedSubscript:0x1EFA4FA60])
            {
              id v163 = (id)[v102 mutableCopy];
              [v163 setObject:&unk_1EFAFF798 forKeyedSubscript:@"SIFRBinningFactor"];
              uint64_t v164 = csu_resolveFormatIndexForNamedStreamFormat(v81, v428, @"[FullBinSIFRCompanionFormat]", v163, v384, 0);
              if ((v164 & 0x80000000) == 0)
              {
                uint64_t v165 = v164;
                if ([v384 count] > (unint64_t)v164)
                {
                  objc_msgSend(v163, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v165), 0x1EFA4F9C0);
                  [v378 setObject:v163 forKeyedSubscript:0x1EFA4FA60];
                }
              }
            }
            if ([v102 objectForKeyedSubscript:0x1EFA4FA80])
            {
              char v166 = (void *)[v102 objectForKeyedSubscript:0x1EFA4FA80];
              if ((objc_msgSend((id)objc_msgSend(v166, "objectForKeyedSubscript:", @"Unsupported"), "BOOLValue") & 1) == 0)
              {
                id v167 = (id)[v102 mutableCopy];
                if ([v166 objectForKeyedSubscript:@"SensorWidth"]) {
                  objc_msgSend(v167, "setObject:forKeyedSubscript:", objc_msgSend(v166, "objectForKeyedSubscript:", @"SensorWidth"), @"SensorWidth");
                }
                if ([v166 objectForKeyedSubscript:@"SensorHeight"]) {
                  objc_msgSend(v167, "setObject:forKeyedSubscript:", objc_msgSend(v166, "objectForKeyedSubscript:", @"SensorHeight"), @"SensorHeight");
                }
                if ([v166 objectForKeyedSubscript:@"FES"]) {
                  objc_msgSend(v167, "setObject:forKeyedSubscript:", objc_msgSend(v166, "objectForKeyedSubscript:", @"FES"), @"FES");
                }
                if ([v166 objectForKeyedSubscript:@"FESWidth"]) {
                  objc_msgSend(v167, "setObject:forKeyedSubscript:", objc_msgSend(v166, "objectForKeyedSubscript:", @"FESWidth"), @"FESWidth");
                }
                if ([v166 objectForKeyedSubscript:@"FESHeight"]) {
                  objc_msgSend(v167, "setObject:forKeyedSubscript:", objc_msgSend(v166, "objectForKeyedSubscript:", @"FESHeight"), @"FESHeight");
                }
                if ([v166 objectForKeyedSubscript:@"SIFRBinningFactor"]) {
                  objc_msgSend(v167, "setObject:forKeyedSubscript:", objc_msgSend(v166, "objectForKeyedSubscript:", @"SIFRBinningFactor"), @"SIFRBinningFactor");
                }
                [v167 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"OptimizedForMidFrameSynchronization"];
                uint64_t v168 = csu_resolveFormatIndexForNamedStreamFormat(v81, v428, @"[MidFrameSynchronizationOptimizedCompanionFormat]", v167, v384, 0);
                double v102 = v431;
                uint64_t v104 = v376;
                if ((v168 & 0x80000000) == 0)
                {
                  uint64_t v169 = v168;
                  if ([v384 count] > (unint64_t)v168)
                  {
                    objc_msgSend(v167, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v169), 0x1EFA4F9C0);
                    [v378 setObject:v167 forKeyedSubscript:0x1EFA4FA80];
                  }
                }
              }
            }
            if ([v102 objectForKeyedSubscript:0x1EFA4FAE0])
            {
              int v170 = (void *)[v102 objectForKeyedSubscript:0x1EFA4FAE0];
              id v171 = (id)[v102 mutableCopy];
              if ([v170 objectForKeyedSubscript:@"SensorWidth"]) {
                objc_msgSend(v171, "setObject:forKeyedSubscript:", objc_msgSend(v170, "objectForKeyedSubscript:", @"SensorWidth"), @"SensorWidth");
              }
              if ([v170 objectForKeyedSubscript:@"SensorHeight"]) {
                objc_msgSend(v171, "setObject:forKeyedSubscript:", objc_msgSend(v170, "objectForKeyedSubscript:", @"SensorHeight"), @"SensorHeight");
              }
              if ([v170 objectForKeyedSubscript:0x1EFA4FC40]) {
                objc_msgSend(v171, "setObject:forKeyedSubscript:", objc_msgSend(v170, "objectForKeyedSubscript:", 0x1EFA4FC40), 0x1EFA4FC40);
              }
              if ([v170 objectForKeyedSubscript:0x1EFA4FC60]) {
                objc_msgSend(v171, "setObject:forKeyedSubscript:", objc_msgSend(v170, "objectForKeyedSubscript:", 0x1EFA4FC60), 0x1EFA4FC60);
              }
              int v80 = v373;
              if ([v170 objectForKeyedSubscript:@"SIFRBinningFactor"]) {
                objc_msgSend(v171, "setObject:forKeyedSubscript:", objc_msgSend(v170, "objectForKeyedSubscript:", @"SIFRBinningFactor"), @"SIFRBinningFactor");
              }
              [v171 setObject:0 forKeyedSubscript:@"FES"];
              uint64_t v172 = csu_resolveFormatIndexForNamedStreamFormat(v81, v428, @"[ActionCameraCompanionFormat]", v171, v384, 0);
              if ((v172 & 0x80000000) == 0)
              {
                uint64_t v173 = v172;
                if ([v384 count] > (unint64_t)v172)
                {
                  objc_msgSend(v171, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v173), 0x1EFA4F9C0);
                  [v378 setObject:v171 forKeyedSubscript:0x1EFA4FAE0];
                }
              }
            }
            if ([v102 objectForKeyedSubscript:0x1EFA50140])
            {
              uint64_t v174 = (void *)[v102 objectForKeyedSubscript:0x1EFA50140];
              id v175 = (id)[v102 mutableCopy];
              objc_msgSend(v175, "setObject:forKeyedSubscript:", objc_msgSend(v174, "objectForKeyedSubscript:", @"FESWidth"), @"FESWidth");
              objc_msgSend(v175, "setObject:forKeyedSubscript:", objc_msgSend(v174, "objectForKeyedSubscript:", @"FESHeight"), @"FESHeight");
              [v175 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"FES"];
              if ([v174 objectForKeyedSubscript:@"SensorWidth"]) {
                objc_msgSend(v175, "setObject:forKeyedSubscript:", objc_msgSend(v174, "objectForKeyedSubscript:", @"SensorWidth"), @"SensorWidth");
              }
              if ([v174 objectForKeyedSubscript:@"SensorHeight"]) {
                objc_msgSend(v175, "setObject:forKeyedSubscript:", objc_msgSend(v174, "objectForKeyedSubscript:", @"SensorHeight"), @"SensorHeight");
              }
              if ([v174 objectForKeyedSubscript:@"SIFRBinningFactor"]) {
                objc_msgSend(v175, "setObject:forKeyedSubscript:", objc_msgSend(v174, "objectForKeyedSubscript:", @"SIFRBinningFactor"), @"SIFRBinningFactor");
              }
              if ([v174 objectForKeyedSubscript:@"MaxFrameRate"]) {
                objc_msgSend(v175, "setObject:forKeyedSubscript:", objc_msgSend(v174, "objectForKeyedSubscript:", @"MaxFrameRate"), @"MaxFrameRate");
              }
              uint64_t v176 = csu_resolveFormatIndexForNamedStreamFormat(v81, v428, @"[DepthCompanionFormat]", v175, v384, 0);
              if ((v176 & 0x80000000) == 0)
              {
                uint64_t v177 = v176;
                if ([v384 count] > (unint64_t)v176)
                {
                  v482[0] = 0x1EFA4F9C0;
                  *(void *)type = [NSNumber numberWithInt:v177];
                  v482[1] = 0x1EFA40FE0;
                  uint64_t v178 = [v174 objectForKeyedSubscript:@"FESWidth"];
                  if (v178) {
                    int v179 = (void *)v178;
                  }
                  else {
                    int v179 = &unk_1EFAFF780;
                  }
                  *(void *)&type[8] = v179;
                  v482[2] = 0x1EFA41000;
                  uint64_t v180 = [v174 objectForKeyedSubscript:@"FESHeight"];
                  if (v180) {
                    double v181 = (void *)v180;
                  }
                  else {
                    double v181 = &unk_1EFAFF780;
                  }
                  *(void *)&long long v484 = v181;
                  v482[3] = 0x1EFA4FB20;
                  uint64_t v182 = [v102 objectForKeyedSubscript:@"SIFREnabled"];
                  uint64_t v183 = MEMORY[0x1E4F1CC28];
                  if (v182) {
                    uint64_t v183 = v182;
                  }
                  *((void *)&v484 + 1) = v183;
                  v482[4] = 0x1EFA4FC00;
                  uint64_t v184 = objc_msgSend(v174, "objectForKeyedSubscript:");
                  if (v184) {
                    id v185 = (void *)v184;
                  }
                  else {
                    id v185 = &unk_1EFAFF780;
                  }
                  *(void *)&long long v485 = v185;
                  v482[5] = 0x1EFA4FC20;
                  uint64_t v186 = objc_msgSend(v174, "objectForKeyedSubscript:");
                  if (v186) {
                    id v187 = (void *)v186;
                  }
                  else {
                    id v187 = &unk_1EFAFF780;
                  }
                  *((void *)&v485 + 1) = v187;
                  v482[6] = 0x1EFA4FD40;
                  uint64_t v188 = objc_msgSend(v174, "objectForKeyedSubscript:");
                  if (v188) {
                    uint64_t v189 = (void *)v188;
                  }
                  else {
                    uint64_t v189 = &unk_1EFAFF780;
                  }
                  *(void *)&long long v486 = v189;
                  v482[7] = 0x1EFA4FD60;
                  uint64_t v190 = objc_msgSend(v174, "objectForKeyedSubscript:");
                  if (v190) {
                    uint64_t v191 = (void *)v190;
                  }
                  else {
                    uint64_t v191 = &unk_1EFAFF780;
                  }
                  *((void *)&v486 + 1) = v191;
                  v482[8] = 0x1EFA4FC40;
                  uint64_t v192 = objc_msgSend(v174, "objectForKeyedSubscript:");
                  if (v192) {
                    uint64_t v193 = (void *)v192;
                  }
                  else {
                    uint64_t v193 = &unk_1EFAFF780;
                  }
                  long long v487 = v193;
                  v482[9] = 0x1EFA4FC60;
                  uint64_t v194 = objc_msgSend(v174, "objectForKeyedSubscript:");
                  if (v194) {
                    double v195 = (void *)v194;
                  }
                  else {
                    double v195 = &unk_1EFAFF780;
                  }
                  long long v488 = v195;
                  objc_msgSend(v378, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", type, v482, 10), 0x1EFA50140);
                }
              }
            }
            if ([v102 objectForKeyedSubscript:0x1EFA50160])
            {
              uint64_t v196 = (void *)[v102 objectForKeyedSubscript:0x1EFA50160];
              id v197 = (id)[v102 mutableCopy];
              objc_msgSend(v197, "setObject:forKeyedSubscript:", objc_msgSend(v196, "objectForKeyedSubscript:", @"FESWidth"), @"FESWidth");
              objc_msgSend(v197, "setObject:forKeyedSubscript:", objc_msgSend(v196, "objectForKeyedSubscript:", @"FESHeight"), @"FESHeight");
              [v197 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"FES"];
              if ([v196 objectForKeyedSubscript:@"SensorWidth"]) {
                objc_msgSend(v197, "setObject:forKeyedSubscript:", objc_msgSend(v196, "objectForKeyedSubscript:", @"SensorWidth"), @"SensorWidth");
              }
              if ([v196 objectForKeyedSubscript:@"SensorHeight"]) {
                objc_msgSend(v197, "setObject:forKeyedSubscript:", objc_msgSend(v196, "objectForKeyedSubscript:", @"SensorHeight"), @"SensorHeight");
              }
              if ([v196 objectForKeyedSubscript:@"SIFRBinningFactor"]) {
                objc_msgSend(v197, "setObject:forKeyedSubscript:", objc_msgSend(v196, "objectForKeyedSubscript:", @"SIFRBinningFactor"), @"SIFRBinningFactor");
              }
              if ([v196 objectForKeyedSubscript:@"MaxFrameRate"]) {
                objc_msgSend(v197, "setObject:forKeyedSubscript:", objc_msgSend(v196, "objectForKeyedSubscript:", @"MaxFrameRate"), @"MaxFrameRate");
              }
              uint64_t v198 = csu_resolveFormatIndexForNamedStreamFormat(v81, v428, @"[FSDNetCompanionFormat]", v197, v384, 0);
              if ((v198 & 0x80000000) == 0)
              {
                uint64_t v199 = v198;
                if ([v384 count] > (unint64_t)v198)
                {
                  v480[0] = 0x1EFA4F9C0;
                  v481[0] = [NSNumber numberWithInt:v199];
                  v480[1] = 0x1EFA40FE0;
                  uint64_t v200 = [v196 objectForKeyedSubscript:@"FESWidth"];
                  if (v200) {
                    uint64_t v201 = (void *)v200;
                  }
                  else {
                    uint64_t v201 = &unk_1EFAFF780;
                  }
                  v481[1] = v201;
                  v480[2] = 0x1EFA41000;
                  uint64_t v202 = [v196 objectForKeyedSubscript:@"FESHeight"];
                  if (v202) {
                    v203 = (void *)v202;
                  }
                  else {
                    v203 = &unk_1EFAFF780;
                  }
                  v481[2] = v203;
                  v480[3] = 0x1EFA4FB20;
                  uint64_t v204 = [v102 objectForKeyedSubscript:@"SIFREnabled"];
                  uint64_t v205 = MEMORY[0x1E4F1CC28];
                  if (v204) {
                    uint64_t v205 = v204;
                  }
                  v481[3] = v205;
                  v480[4] = 0x1EFA4FC00;
                  uint64_t v206 = objc_msgSend(v196, "objectForKeyedSubscript:");
                  if (v206) {
                    BOOL v207 = (void *)v206;
                  }
                  else {
                    BOOL v207 = &unk_1EFAFF780;
                  }
                  v481[4] = v207;
                  v480[5] = 0x1EFA4FC20;
                  uint64_t v208 = objc_msgSend(v196, "objectForKeyedSubscript:");
                  if (v208) {
                    uint64_t v209 = (void *)v208;
                  }
                  else {
                    uint64_t v209 = &unk_1EFAFF780;
                  }
                  v481[5] = v209;
                  v480[6] = 0x1EFA4FD40;
                  uint64_t v210 = objc_msgSend(v196, "objectForKeyedSubscript:");
                  if (v210) {
                    v211 = (void *)v210;
                  }
                  else {
                    v211 = &unk_1EFAFF780;
                  }
                  v481[6] = v211;
                  v480[7] = 0x1EFA4FD60;
                  uint64_t v212 = objc_msgSend(v196, "objectForKeyedSubscript:");
                  if (v212) {
                    uint64_t v213 = (void *)v212;
                  }
                  else {
                    uint64_t v213 = &unk_1EFAFF780;
                  }
                  v481[7] = v213;
                  v480[8] = 0x1EFA4FC40;
                  uint64_t v214 = objc_msgSend(v196, "objectForKeyedSubscript:");
                  if (v214) {
                    double v215 = (void *)v214;
                  }
                  else {
                    double v215 = &unk_1EFAFF780;
                  }
                  v481[8] = v215;
                  v480[9] = 0x1EFA4FC60;
                  uint64_t v216 = objc_msgSend(v196, "objectForKeyedSubscript:");
                  if (v216) {
                    CGFloat v217 = (void *)v216;
                  }
                  else {
                    CGFloat v217 = &unk_1EFAFF780;
                  }
                  v481[9] = v217;
                  objc_msgSend(v378, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v481, v480, 10), 0x1EFA50160);
                }
              }
            }
            if ([v102 objectForKeyedSubscript:0x1EFA50220])
            {
              uint64_t v218 = (void *)[v102 objectForKeyedSubscript:0x1EFA50220];
              id v219 = (id)[v102 mutableCopy];
              if ([v218 objectForKeyedSubscript:@"SensorWidth"]) {
                objc_msgSend(v219, "setObject:forKeyedSubscript:", objc_msgSend(v218, "objectForKeyedSubscript:", @"SensorWidth"), @"SensorWidth");
              }
              if ([v218 objectForKeyedSubscript:@"SensorHeight"]) {
                objc_msgSend(v219, "setObject:forKeyedSubscript:", objc_msgSend(v218, "objectForKeyedSubscript:", @"SensorHeight"), @"SensorHeight");
              }
              if ([v218 objectForKeyedSubscript:0x1EFA4FC40]) {
                objc_msgSend(v219, "setObject:forKeyedSubscript:", objc_msgSend(v218, "objectForKeyedSubscript:", 0x1EFA4FC40), 0x1EFA4FC40);
              }
              if ([v218 objectForKeyedSubscript:0x1EFA4FC60]) {
                objc_msgSend(v219, "setObject:forKeyedSubscript:", objc_msgSend(v218, "objectForKeyedSubscript:", 0x1EFA4FC60), 0x1EFA4FC60);
              }
              uint64_t v104 = v376;
              if ([v218 objectForKeyedSubscript:@"SIFRBinningFactor"]) {
                objc_msgSend(v219, "setObject:forKeyedSubscript:", objc_msgSend(v218, "objectForKeyedSubscript:", @"SIFRBinningFactor"), @"SIFRBinningFactor");
              }
              int v80 = v373;
              if ([v218 objectForKeyedSubscript:0x1EFA50240]) {
                objc_msgSend(v219, "setObject:forKeyedSubscript:", objc_msgSend(v218, "objectForKeyedSubscript:", 0x1EFA50240), 0x1EFA50240);
              }
              [v219 setObject:0 forKeyedSubscript:@"FES"];
              [v219 setObject:0 forKeyedSubscript:@"FESWidth"];
              [v219 setObject:0 forKeyedSubscript:@"FESHeight"];
              [v219 setObject:0 forKeyedSubscript:@"CropWidthForFES"];
              [v219 setObject:0 forKeyedSubscript:@"CropHeightForFES"];
              uint64_t v220 = csu_resolveFormatIndexForNamedStreamFormat(v81, v428, @"[StereoVideoCompanionFormat]", v219, v384, 0);
              if ((v220 & 0x80000000) == 0)
              {
                uint64_t v221 = v220;
                if ([v384 count] > (unint64_t)v220)
                {
                  objc_msgSend(v219, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v221), 0x1EFA4F9C0);
                  [v378 setObject:v219 forKeyedSubscript:0x1EFA50220];
                }
              }
            }
            if (objc_msgSend((id)objc_msgSend(v102, "objectForKeyedSubscript:", @"HasSensorHDRCompanionFormat"), "BOOLValue"))
            {
              id v222 = (id)[v102 mutableCopy];
              [v222 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"HDR"];
              uint64_t v223 = csu_resolveFormatIndexForNamedStreamFormat(v81, v428, @"[SensorHDRCompanionFormat]", v222, v384, 0);
              if ((v223 & 0x80000000) == 0)
              {
                uint64_t v224 = v223;
                if ([v384 count] > (unint64_t)v223) {
                  objc_msgSend(v378, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v224), 0x1EFA4FA20);
                }
              }
            }
            int v225 = objc_msgSend((id)objc_msgSend(v391, "objectForKeyedSubscript:", @"geometricDistortionCorrection"), "BOOLValue");
            uint64_t v226 = objc_msgSend((id)objc_msgSend(v378, "objectForKeyedSubscript:", v407), "objectForKeyedSubscript:", v414);
            int v227 = objc_msgSend((id)objc_msgSend(v226, "objectForKeyedSubscript:", obja), "BOOLValue");
            if (v225 && v227)
            {
              uint64_t v228 = objc_msgSend((id)objc_msgSend(v226, "objectForKeyedSubscript:", v383), "intValue");
              uint64_t v229 = objc_msgSend((id)objc_msgSend(v226, "objectForKeyedSubscript:", v382), "intValue");
              v527.size.uint64_t width = (double)(int)v228;
              v527.size.CGFloat height = (double)(int)v229;
              v527.origin.CGFloat x = 0.0;
              v527.origin.CGFloat y = 0.0;
              CFDictionaryRef v230 = CGRectCreateDictionaryRepresentation(v527);
              double v231 = BWGetGeometricDistortionCorrectionStrengthFromDimensions(v228 | (unint64_t)(v229 << 32), v358);
              v478[0] = v357;
              v479[0] = [NSNumber numberWithInt:v228];
              v478[1] = v356;
              v479[1] = [NSNumber numberWithInt:v229];
              v479[2] = v230;
              v478[2] = v355;
              v478[3] = v354;
              v479[3] = [NSNumber numberWithDouble:v231];
              uint64_t v232 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v479 forKeys:v478 count:4];
              uint64_t v476 = v414;
              uint64_t v477 = v232;
              uint64_t v233 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v477 forKeys:&v476 count:1];
              int v234 = objc_msgSend(v359, "setProperty:value:", @"FormatIndex", objc_msgSend(NSNumber, "numberWithInt:", v104));
              int v449 = v234;
              if (v234)
              {
                uint64_t v346 = v348;
                LODWORD(v343) = v234;
              }
              else
              {
                int v235 = [v359 setProperty:v353 value:v233];
                int v449 = v235;
                if (v235)
                {
                  uint64_t v346 = v348;
                  LODWORD(v343) = v235;
                }
                else
                {
                  uint64_t v236 = (void *)[v359 getProperty:v352 error:&v449];
                  if (!v449)
                  {
                    uint64_t v237 = [v236 objectForKeyedSubscript:v414];
                    if (!v237)
                    {
                      uint64_t v346 = v348;
                      LODWORD(v343) = 0;
                      FigDebugAssert3();
                      int v449 = FigSignalErrorAt();
                      uint64_t v242 = v405;
                      if (v449) {
                        goto LABEL_368;
                      }
                      goto LABEL_369;
                    }
                    [v378 setObject:v237 forKeyedSubscript:0x1EFA500A0];
                    uint64_t v238 = objc_msgSend((id)objc_msgSend(v226, "objectForKeyedSubscript:", v381), "intValue");
                    uint64_t v239 = objc_msgSend((id)objc_msgSend(v226, "objectForKeyedSubscript:", v380), "intValue");
                    uint64_t v240 = v239;
                    BOOL v127 = (int)v238 <= (int)v228;
                    uint64_t v84 = v405;
                    if (!v127 || (int)v239 > (int)v229)
                    {
                      objc_msgSend(v378, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v238), 0x1EFA500C0);
                      objc_msgSend(v378, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v240), 0x1EFA500E0);
                    }
                    goto LABEL_362;
                  }
                  uint64_t v346 = v348;
                  LODWORD(v343) = v449;
                }
              }
              FigDebugAssert3();
              uint64_t v84 = v405;
              goto LABEL_367;
            }
LABEL_362:
            uint64_t v85 = v384;
            uint64_t v241 = csu_secondaryNativeResolutionZoomFactorsForFormatIndex(v384, v104);
            if ([v241 count]) {
              [v378 setObject:v241 forKeyedSubscript:0x1EFA50400];
            }
            uint64_t v452 = 0x1EFA4FC40;
            uint64_t v453 = 0x1EFA4FC60;
            long long v454 = @"SensorCenterOffsetX";
            long long v455 = @"SensorCenterOffsetY";
            uint64_t v456 = 0x1EFA4FCC0;
            uint64_t v457 = 0x1EFA4FCE0;
            uint64_t v458 = 0x1EFA4FD00;
            uint64_t v459 = 0x1EFA4FD20;
            uint64_t v460 = 0x1EFA4FD40;
            uint64_t v461 = 0x1EFA4FD60;
            uint64_t v462 = 0x1EFA4FC00;
            uint64_t v463 = 0x1EFA4FC20;
            uint64_t v464 = 0x1EFA4FFA0;
            uint64_t v465 = 0x1EFA50B40;
            uint64_t v466 = 0x1EFA4FF60;
            uint64_t v467 = 0x1EFA4FF80;
            uint64_t v468 = 0x1EFA4FDA0;
            v469 = @"FrontHorizontalScaleFactor";
            uint64_t v470 = 0x1EFA509E0;
            uint64_t v471 = 0x1EFA4FAA0;
            uint64_t v472 = 0x1EFA4FAC0;
            uint64_t v473 = v360;
            uint64_t v474 = 0x1EFA512E0;
            uint64_t v475 = 0x1EFA510E0;
            BWAddEntriesWithKeysFromDictionaryToDictionary(v102, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v452 count:24], v378);
            [v84 setObject:v378 forKeyedSubscript:v428];
            uint64_t v100 = v361;
            uint64_t v99 = v363;
          }
        }
      }
      uint64_t v101 = v379 + 1;
    }
    while (v379 + 1 != v99);
    uint64_t v99 = [v80 countByEnumeratingWithState:&v445 objects:v523 count:16];
    if (v99) {
      continue;
    }
    break;
  }
LABEL_367:
  uint64_t v242 = v84;
  if (v449) {
LABEL_368:
  }
    objc_msgSend(v242, "removeAllObjects", v343, v346);
LABEL_369:
  id v370 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  char v374 = (void *)[MEMORY[0x1E4F1CA48] array];
  int v388 = csu_deviceSupportsWideColor(v77, a3);
  if (v77)
  {
    objc_msgSend((id)objc_msgSend(*(id *)(v77 + 16), "supportedProperties"), "objectForKeyedSubscript:", *MEMORY[0x1E4F52D98]);
    uint64_t v243 = *(void **)(v77 + 32);
  }
  else
  {
    objc_msgSend((id)objc_msgSend(0, "supportedProperties"), "objectForKeyedSubscript:", *MEMORY[0x1E4F52D98]);
    uint64_t v243 = 0;
  }
  uint64_t v244 = objc_msgSend(v243, "supportedProperties", v343);
  uint64_t v387 = [v244 objectForKeyedSubscript:*MEMORY[0x1E4F54938]];
  uint64_t v245 = [v400 count];
  v389 = 0;
  if (v77)
  {
    if (v245)
    {
      v389 = 0;
      unsigned int v246 = *(_DWORD *)(v77 + 12);
      if (v246 <= 8 && ((1 << v246) & 0x10E) != 0)
      {
        uint64_t v247 = [(id)-[FigCaptureSourceStreamsContainer portTypesSupportingDepth](v77) firstObject];
        if (v247)
        {
          uint64_t v248 = (void *)[*(id *)(v77 + 40) objectForKeyedSubscript:v247];
          v389 = (void *)[v248 getProperty:*MEMORY[0x1E4F548C0] error:0];
        }
        else
        {
          v389 = 0;
        }
      }
    }
  }
  long long v524 = 0u;
  long long v525 = 0u;
  memset(v523, 0, sizeof(v523));
  uint64_t v364 = [v368 countByEnumeratingWithState:v523 objects:&v452 count:16];
  if (v364)
  {
    uint64_t v362 = **(void **)&v523[1];
    uint64_t v377 = *MEMORY[0x1E4F24D70];
    uint64_t v415 = *MEMORY[0x1E4F54AE8];
    do
    {
      uint64_t v249 = 0;
      do
      {
        if (**(void **)&v523[1] != v362)
        {
          uint64_t v250 = v249;
          objc_enumerationMutation(v368);
          uint64_t v249 = v250;
        }
        uint64_t v367 = v249;
        unsigned int v251 = *(void **)(*((void *)&v523[0] + 1) + 8 * v249);
        uint64_t v372 = (void *)[v368 objectForKeyedSubscript:v251];
        if (([v251 hasSuffix:@"CinematicFraming"] & 1) == 0) {
          [v251 hasSuffix:@"GeometricDistortionCorrection"];
        }
        id v398 = (id)[MEMORY[0x1E4F1CA60] dictionary];
        v385 = v251;
        [v398 setObject:v372 forKeyedSubscript:v251];
        uint64_t v252 = [v372 objectForKeyedSubscript:@"Variants"];
        if (v252)
        {
          uint64_t v253 = v252;
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            [v398 addEntriesFromDictionary:v253];
          }
          [v372 setObject:0 forKeyedSubscript:@"Variants"];
        }
        long long v521 = 0u;
        long long v520 = 0u;
        long long v519 = 0u;
        long long v518 = 0u;
        id v386 = (id)[v398 allKeys];
        v254 = v385;
        uint64_t v399 = [v386 countByEnumeratingWithState:&v518 objects:v505 count:16];
        if (v399)
        {
          uint64_t v396 = *(void *)v519;
          do
          {
            uint64_t v255 = 0;
            do
            {
              if (*(void *)v519 != v396) {
                objc_enumerationMutation(v386);
              }
              BOOL v256 = *(void **)(*((void *)&v518 + 1) + 8 * v255);
              uint64_t v257 = (void *)[v398 objectForKeyedSubscript:v256];
              if ((objc_msgSend((id)objc_msgSend(v257, "objectForKeyedSubscript:", @"Unsupported"), "BOOLValue") & 1) == 0)
              {
                if (([v256 isEqualToString:v254] & 1) == 0)
                {
                  id v258 = (id)[v372 mutableCopy];
                  [v258 setValuesForKeysWithDictionary:v257];
                  [v258 setObject:0 forKeyedSubscript:0x1EFA4F9E0];
                  uint64_t v257 = v258;
                }
                int v259 = objc_msgSend((id)objc_msgSend(v257, "objectForKeyedSubscript:", 0x1EFA50D00), "BOOLValue");
                int v260 = objc_msgSend((id)objc_msgSend(v257, "objectForKeyedSubscript:", 0x1EFA50D20), "BOOLValue");
                if (v77) {
                  int v261 = *(_DWORD *)(v77 + 8);
                }
                else {
                  int v261 = 0;
                }
                uint64_t v395 = v255;
                if (((v259 | v260) & 1) != 0 || v261 == 14)
                {
                  float v262 = v257;
                  uint64_t v263 = [v257 objectForKeyedSubscript:0x1EFA50DA0];
                  uint64_t v264 = [NSString stringWithFormat:@"%@_%@", v256, @"CinematicFraming"];
                  uint64_t v265 = [v242 objectForKeyedSubscript:v263];
                  uint64_t v266 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v262];
                  if (v265)
                  {
                    v267 = v266;
                    [v266 setObject:v263 forKeyedSubscript:@"CaptureStreamFormat"];
                    [v267 setObject:0 forKeyedSubscript:0x1EFA50DA0];
                    if (objc_msgSend((id)objc_msgSend(v262, "objectForKeyedSubscript:", 0x1EFA50E00), "intValue"))objc_msgSend(v267, "setObject:forKeyedSubscript:", objc_msgSend(v262, "objectForKeyedSubscript:", 0x1EFA50E00), @"MaxFrameRateOverride"); {
                    [v267 setObject:0 forKeyedSubscript:0x1EFA50AC0];
                    }
                    uint64_t v242 = v405;
                    id SourceFormatDictFromDeviceFormat = csu_createSourceFormatDictFromDeviceFormat(v264, v267, v405, v391, v389, v400, v388, v387 != 0, a3, 0, 0, 0);
                    if (!SourceFormatDictFromDeviceFormat) {
                      [v374 addObject:v264];
                    }
                    uint64_t v269 = MEMORY[0x1E4F1CC38];
                    [SourceFormatDictFromDeviceFormat setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA50D60];
                    objCGFloat b = SourceFormatDictFromDeviceFormat;
                    [SourceFormatDictFromDeviceFormat setObject:v269 forKeyedSubscript:0x1EFA50E20];
                    uint64_t v257 = v262;
                  }
                  else
                  {
                    objCGFloat b = 0;
                    uint64_t v257 = v262;
                    uint64_t v242 = v405;
                  }
                }
                else
                {
                  objCGFloat b = 0;
                }
                if ([v257 objectForKeyedSubscript:0x1EFA50080])
                {
                  uint64_t v270 = [v257 objectForKeyedSubscript:0x1EFA50080];
                  uint64_t v271 = [NSString stringWithFormat:@"%@_%@", v256, @"GeometricDistortionCorrection"];
                  uint64_t v272 = v242;
                  uint64_t v273 = [v242 objectForKeyedSubscript:v270];
                  float v274 = v257;
                  uint64_t v275 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v257];
                  if (v273)
                  {
                    float v276 = v275;
                    [v275 setObject:v270 forKeyedSubscript:@"CaptureStreamFormat"];
                    [v276 setObject:0 forKeyedSubscript:0x1EFA50080];
                    id v277 = csu_createSourceFormatDictFromDeviceFormat(v271, v276, v272, v391, v389, v400, v388, v387 != 0, a3, 0, 0, 0);
                    uint64_t v257 = v274;
                    if (!v277) {
                      [v374 addObject:v271];
                    }
                  }
                  else
                  {
                    id v277 = 0;
                  }
                }
                else
                {
                  id v277 = 0;
                }
                if ([v257 objectForKeyedSubscript:0x1EFA51100])
                {
                  uint64_t v278 = [v257 objectForKeyedSubscript:0x1EFA51100];
                  uint64_t v279 = [NSString stringWithFormat:@"%@_%@", v256, @"FastSwitchingMain"];
                  uint64_t v280 = [v405 objectForKeyedSubscript:v278];
                  int v281 = v257;
                  float v282 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v257];
                  if (v280)
                  {
                    float v283 = v282;
                    [v282 setObject:v278 forKeyedSubscript:@"CaptureStreamFormat"];
                    [v283 setObject:0 forKeyedSubscript:0x1EFA51100];
                    id v284 = csu_createSourceFormatDictFromDeviceFormat(v279, v283, v405, v391, v389, v400, v388, v387 != 0, a3, 0, 0, 0);
                    uint64_t v257 = v281;
                    if (!v284) {
                      [v374 addObject:v279];
                    }
                  }
                  else
                  {
                    id v284 = 0;
                  }
                }
                else
                {
                  id v284 = 0;
                }
                if ([v257 objectForKeyedSubscript:v377]) {
                  int v285 = FigCapturePixelFormatTypeFromPlistValue((void *)[v257 objectForKeyedSubscript:v377]);
                }
                else {
                  int v285 = 0;
                }
                id v394 = v277;
                id v393 = v284;
                if ((objc_msgSend((id)objc_msgSend(v257, "objectForKeyedSubscript:", @"Experimental"), "BOOLValue") & 1) == 0)
                {
                  if (v285 != 2016686642
                    || (int v320 = objc_msgSend((id)objc_msgSend(v257, "objectForKeyedSubscript:", 0x1EFA51260), "intValue"), objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"ProResSupported"), "BOOLValue"))&& (int)BWGetDiskCapacityInGB() >= v320)
                  {
                    id v321 = csu_createSourceFormatDictFromDeviceFormat((uint64_t)v256, v257, v405, v391, v389, v400, v388, v387 != 0, a3, objb, (uint64_t)v277, v284);
                    if (v321)
                    {
                      id v322 = v321;
                      v286 = (void *)[MEMORY[0x1E4F1CA48] array];
                      [v370 addObject:v322];
                      [v286 addObject:v322];
                      if (v277) {
                        [v286 addObject:v277];
                      }
                      int v287 = off_1E5C1F000;
                      id v392 = v322;
                      if (objb) {
                        objc_msgSend(v286, "addObject:");
                      }
LABEL_426:
                      long long v486 = 0u;
                      long long v485 = 0u;
                      long long v484 = 0u;
                      *(_OWORD *)type = 0u;
                      uint64_t v288 = [v286 countByEnumeratingWithState:type objects:&v491 count:16];
                      if (!v288) {
                        goto LABEL_459;
                      }
                      uint64_t v289 = v288;
                      uint64_t v290 = *(void *)v484;
                      id v419 = v286;
                      while (2)
                      {
                        uint64_t v291 = 0;
LABEL_429:
                        if (*(void *)v484 != v290) {
                          objc_enumerationMutation(v419);
                        }
                        int v292 = *(void **)(*(void *)&type[8] + 8 * v291);
                        if (!objc_msgSend((id)objc_msgSend(v292, "objectForKeyedSubscript:", 0x1EFA50180), "count"))
                        {
                          [v292 setObject:0 forKeyedSubscript:0x1EFA50200];
                          [v292 setObject:0 forKeyedSubscript:0x1EFA501E0];
                          [v292 setObject:0 forKeyedSubscript:0x1EFA50260];
                        }
                        BOOL v293 = [(__objc2_class *)v287[88] sharedInstance];
                        uint64_t v294 = (void *)-[FigCaptureSourceStreamsContainer streamProvidingSDOFRenderingParameters](v77);
                        if (v294) {
                          double v295 = (void *)[(__objc2_class *)v293 sensorIDDictionaryForStream:v294];
                        }
                        else {
                          double v295 = 0;
                        }
                        if ([v292 objectForKeyedSubscript:8315540000])
                        {
                          uint64_t v296 = [v295 valueForKeyPath:@"CinematicVideoParameters.simulatedVideoAperture"];
                          if (v296) {
                            [v292 setObject:v296 forKeyedSubscript:0x1EFA502C0];
                          }
                          uint64_t v297 = (void *)[v295 valueForKeyPath:@"CinematicVideoParameters.minimumSimulatedVideoAperture"];
                          [v297 floatValue];
                          if (v298 > 0.0)
                          {
                            [v292 setObject:v297 forKeyedSubscript:0x1EFA502E0];
                            id v299 = (void *)[v295 valueForKeyPath:@"CinematicVideoParameters.maximumSimulatedVideoAperture"];
                            [v299 floatValue];
                            if (v300 > 0.0) {
                              [v292 setObject:v299 forKeyedSubscript:0x1EFA50300];
                            }
                          }
                        }
                        uint64_t v301 = [v292 objectForKeyedSubscript:0x1EFA50580];
                        if (v294 && v301)
                        {
                          uint64_t v302 = [v294 getProperty:v415 error:0];
                          if ([v294 portType]
                            && (uint64_t v303 = [v294 portType],
                                uint64_t v304 = [(__objc2_class *)v287[88] sensorIDStringFromModuleInfo:v302], LODWORD(v305) = 1.0, v306 = [(__objc2_class *)v293 sdofRenderingVersionForPortType:v303 sensorIDString:v304 zoomFactor:v305], v306))
                          {
                            uint64_t v308 = v306;
                            LODWORD(v307) = 1.0;
                            uint64_t v309 = (void *)[(__objc2_class *)v287[88] sdofTuningParametersForSensorIDDictionary:v295 zoomFactor:v307];
                            if ((int)v308 >= 5)
                            {
                              long long v310 = (__CFString *)objc_msgSend(MEMORY[0x1E4F28E78], "stringWithFormat:", @"SLMv%d", v308);
                              goto LABEL_450;
                            }
                          }
                          else
                          {
                            uint64_t v309 = 0;
                          }
                          long long v310 = @"SLM";
LABEL_450:
                          uint64_t v311 = [NSString stringWithFormat:@"%@.simulatedAperture", v310];
                          uint64_t v312 = [NSString stringWithFormat:@"%@.minimumSimulatedAperture", v310];
                          uint64_t v313 = [NSString stringWithFormat:@"%@.maximumSimulatedAperture", v310];
                          uint64_t v314 = [v309 valueForKeyPath:v311];
                          if (v314) {
                            [v292 setObject:v314 forKeyedSubscript:0x1EFA502C0];
                          }
                          uint64_t v315 = (void *)[v309 valueForKeyPath:v312];
                          [v315 floatValue];
                          uint64_t v77 = a1;
                          if (v316 > 0.0)
                          {
                            [v292 setObject:v315 forKeyedSubscript:0x1EFA502E0];
                            long long v317 = (void *)[v309 valueForKeyPath:v313];
                            [v317 floatValue];
                            if (v318 > 0.0) {
                              [v292 setObject:v317 forKeyedSubscript:0x1EFA50300];
                            }
                          }
                          uint64_t v319 = [v295 valueForKeyPath:@"PortraitLightingParameters.effectStrength"];
                          int v287 = off_1E5C1F000;
                          if (v319)
                          {
                            [v292 setObject:v319 forKeyedSubscript:0x1EFA50320];
                            objc_msgSend(v292, "setObject:forKeyedSubscript:", objc_msgSend(v295, "valueForKeyPath:", @"PortraitLightingParameters.minEffectStrength"), 0x1EFA50340);
                            objc_msgSend(v292, "setObject:forKeyedSubscript:", objc_msgSend(v295, "valueForKeyPath:", @"PortraitLightingParameters.maxEffectStrength"), 0x1EFA50360);
                          }
                        }
                        if (v289 == ++v291)
                        {
                          uint64_t v289 = [v419 countByEnumeratingWithState:type objects:&v491 count:16];
                          if (!v289)
                          {
LABEL_459:

                            uint64_t v242 = v405;
                            v254 = v385;
                            uint64_t v255 = v395;
                            goto LABEL_460;
                          }
                          continue;
                        }
                        goto LABEL_429;
                      }
                    }
                    [v374 addObject:v256];
                  }
                }
                v286 = (void *)[MEMORY[0x1E4F1CA48] array];
                id v392 = 0;
                int v287 = off_1E5C1F000;
                goto LABEL_426;
              }
LABEL_460:
              ++v255;
            }
            while (v255 != v399);
            uint64_t v323 = [v386 countByEnumeratingWithState:&v518 objects:v505 count:16];
            uint64_t v399 = v323;
          }
          while (v323);
        }
        uint64_t v249 = v367 + 1;
      }
      while (v367 + 1 != v364);
      uint64_t v364 = [v368 countByEnumeratingWithState:v523 objects:&v452 count:16];
    }
    while (v364);
  }
  [v370 sortUsingFunction:csu_compareSourceFormats context:0];
  if ([v374 count]) {
    *a7 = v374;
  }

  id v421 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  memset(v505, 0, sizeof(v505));
  long long v506 = 0u;
  long long v507 = 0u;
  uint64_t v324 = v366;
  uint64_t result = [v366 countByEnumeratingWithState:v505 objects:&v452 count:16];
  if (result)
  {
    uint64_t v326 = result;
    uint64_t v327 = **(void **)&v505[1];
    uint64_t v423 = *MEMORY[0x1E4F44810];
    id v420 = (id)*MEMORY[0x1E4F448F0];
    uint64_t v418 = *MEMORY[0x1E4F44AC0];
    uint64_t v416 = *MEMORY[0x1E4F44A98];
    do
    {
      uint64_t v328 = 0;
      do
      {
        if (**(void **)&v505[1] != v327) {
          objc_enumerationMutation(v324);
        }
        uint64_t v329 = *(void *)(*((void *)&v505[0] + 1) + 8 * v328);
        uint64_t v330 = (void *)[v324 objectForKeyedSubscript:v329];
        uint64_t v331 = [v330 objectForKeyedSubscript:@"VideoCodec"];
        uint64_t v332 = objc_msgSend(v368, "objectForKeyedSubscript:", objc_msgSend(v330, "objectForKeyedSubscript:", @"DeviceFormat"));
        if (v332)
        {
          uint64_t v333 = v332;
          uint64_t v334 = objc_msgSend((id)objc_msgSend(v332, "objectForKeyedSubscript:", 0x1EFA40FE0), "intValue");
          uint64_t v335 = objc_msgSend((id)objc_msgSend(v333, "objectForKeyedSubscript:", 0x1EFA41000), "intValue");
          id v336 = (id)objc_msgSend((id)objc_msgSend(v330, "objectForKeyedSubscript:", @"VideoCompressionProperties"), "mutableCopy");
          if ([v336 objectForKeyedSubscript:v423])
          {
            objc_msgSend(v336, "setObject:forKeyedSubscript:", objc_msgSend(v330, "objectForKeyedSubscript:", @"MaxFrameRate"), v420);
            [v336 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:v418];
            [v336 setObject:&unk_1EFAFF7B0 forKeyedSubscript:v416];
            uint64_t v337 = (void *)MEMORY[0x1E4F1C9E8];
            uint64_t v338 = [NSNumber numberWithInt:v334];
            objc_msgSend(v421, "setObject:forKeyedSubscript:", objc_msgSend(v337, "dictionaryWithObjectsAndKeys:", v331, @"AVVideoCodecKey", v338, @"AVVideoWidthKey", objc_msgSend(NSNumber, "numberWithInt:", v335), @"AVVideoHeightKey", v336, @"AVVideoCompressionPropertiesKey", 0), v329);
          }
        }
        ++v328;
        uint64_t v324 = v366;
      }
      while (v326 != v328);
      uint64_t result = [v366 countByEnumeratingWithState:v505 objects:&v452 count:16];
      uint64_t v326 = result;
    }
    while (result);
  }
  *a5 = v370;
  *a6 = v421;
  return result;
}

uint64_t csu_deviceSupportsWideColor(uint64_t a1, void *a2)
{
  if (a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 8);
    BOOL v4 = v3 > 0x14 || ((1 << v3) & 0x100420) == 0;
    if (!v4 || v3 - 21 > 0xFFFFFFFB) {
      return 0;
    }
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"wideColorSupported"), "BOOLValue");
  if (result)
  {
    if (a1) {
      uint64_t v6 = *(void **)(a1 + 32);
    }
    else {
      uint64_t v6 = 0;
    }
    return (unint64_t)objc_msgSend((id)objc_msgSend(v6, "getProperty:error:", *MEMORY[0x1E4F54BF8], 0), "count") > 1;
  }
  return result;
}

void csu_mergeInCommonEntries(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v2 = (id)[a1 objectForKeyedSubscript:@"Common"];
  [a1 removeObjectForKey:@"Common"];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(a1);
        }
        [a1 objectForKeyedSubscript:*(void *)(*((void *)&v7 + 1) + 8 * v6)];
        FigCFDictionaryAddEntriesToDictionaryWithRecursion();
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

uint64_t __csu_removeExperimentalDeviceFormats_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  if (objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", @"Experimental"), "BOOLValue"))
  {
    uint64_t v6 = *(void **)(a1 + 32);
    return [v6 addObject:a2];
  }
  else
  {
    long long v8 = (void *)[a3 objectForKeyedSubscript:0x1EFA50460];
    uint64_t v9 = objc_msgSend(v8, "filteredArrayUsingPredicate:", objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithBlock:", &__block_literal_global_827));
    return [a3 setObject:v9 forKeyedSubscript:0x1EFA50460];
  }
}

uint64_t __csu_removeExperimentalDeviceFormats_block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", @"Experimental"), "BOOLValue") ^ 1;
}

uint64_t __csu_removeUnsupportedDeviceFormatsAndDependentPresets_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", @"Unsupported"), "BOOLValue");
  if (result)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    return [v6 addObject:a2];
  }
  return result;
}

uint64_t __csu_removeUnsupportedDeviceFormatsAndDependentPresets_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    a3 = (void *)[*(id *)(a1 + 32) objectForKeyedSubscript:a3];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v10 = v3;
      LODWORD(v9) = 0;
      FigDebugAssert3();
    }
  }
  uint64_t result = objc_msgSend(*(id *)(a1 + 40), "containsObject:", objc_msgSend(a3, "objectForKeyedSubscript:", @"DeviceFormat", v9, v10));
  if (result)
  {
    long long v8 = *(void **)(a1 + 48);
    return [v8 addObject:a2];
  }
  return result;
}

void __csu_resolveSessionPresetAliases_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v7 = (void *)[*(id *)(a1 + 32) objectForKeyedSubscript:a3];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v9 = v3;
      LODWORD(v_Block_object_dispose(&STACK[0x458], 8) = 0;
      FigDebugAssert3();
    }
    id v10 = (id)objc_msgSend(v7, "mutableCopy", v8, v9);
    [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:a2];
  }
}

uint64_t csu_resolveFormatIndexForNamedStreamFormat(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, _DWORD *a6)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  int v74 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"SensorWidth"), "intValue");
  int v73 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"SensorHeight"), "intValue");
  int v80 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"FESWidth"), "intValue");
  int v78 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"FESHeight"), "intValue");
  int v10 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"Binned"), "BOOLValue");
  int v71 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"HDR"), "BOOLValue");
  int v70 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"FES"), "BOOLValue");
  int v54 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"MaxFrameRate"), "intValue");
  int v69 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"SIFREnabled"), "BOOLValue");
  int v11 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"SIFRBinningFactor"), "intValue");
  int v72 = v10;
  if (v10) {
    int v12 = 2;
  }
  else {
    int v12 = 1;
  }
  if (v11) {
    int v12 = v11;
  }
  int v53 = v12;
  unsigned int v75 = a4;
  int v52 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"OptimizedForMidFrameSynchronization"), "BOOLValue");
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  uint64_t v13 = [a5 countByEnumeratingWithState:&v85 objects:v89 count:16];
  if (!v13) {
    goto LABEL_74;
  }
  uint64_t v14 = v13;
  int v15 = 0;
  uint64_t v16 = *(void *)v86;
  uint64_t v64 = *MEMORY[0x1E4F55300];
  uint64_t v63 = *MEMORY[0x1E4F552F8];
  uint64_t v62 = *MEMORY[0x1E4F552F0];
  uint64_t v61 = *MEMORY[0x1E4F552B0];
  uint64_t v60 = *MEMORY[0x1E4F552A8];
  uint64_t v59 = *MEMORY[0x1E4F552C8];
  unsigned int v79 = -1;
  uint64_t v57 = *MEMORY[0x1E4F552D0];
  uint64_t v58 = *MEMORY[0x1E4F552D8];
  uint64_t v56 = *MEMORY[0x1E4F552C0];
  uint64_t v67 = a1;
  uint64_t v68 = a2;
  uint64_t v65 = *(void *)v86;
  unsigned int v66 = a5;
  do
  {
    uint64_t v17 = 0;
    uint64_t v76 = v14;
    do
    {
      if (*(void *)v86 != v16) {
        objc_enumerationMutation(a5);
      }
      unsigned int v18 = *(void **)(*((void *)&v85 + 1) + 8 * v17);
      if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"Experimental"), "BOOLValue"))
      {
        ++v15;
      }
      else
      {
        int v19 = [&unk_1EFB032C0 containsObject:FigCaptureGetModelSpecificName()];
        int v20 = [&unk_1EFB032D8 containsObject:a1];
        int v21 = [a2 isEqualToString:@"Video-4by3-Medium-Resolution"];
        if (v19 && v20 && v21 && v15 == 28)
        {
          int v15 = 29;
        }
        else
        {
          int v22 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v64), "intValue");
          int v23 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v63), "intValue");
          int v84 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"VideoIsBinned"), "BOOLValue");
          int v83 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v62), "intValue");
          int v24 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v61), "intValue");
          int v25 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v60), "intValue");
          int v81 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue");
          int v26 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v59), "intValue");
          int v27 = objc_msgSend((id)objc_msgSend(v75, "objectForKeyedSubscript:", v59), "intValue");
          if (v27) {
            int v28 = v27;
          }
          else {
            int v28 = 2;
          }
          if (v26) {
            int v29 = v28;
          }
          else {
            int v29 = v27;
          }
          int v82 = v25;
          BOOL v30 = v25 <= 0 || v24 <= 0;
          int v31 = !v30;
          int v32 = v70 ^ v31 ^ 1;
          if (v30) {
            int v33 = 0;
          }
          else {
            int v33 = v70;
          }
          if (v33 == 1 && v80 >= 1)
          {
            int v34 = v22;
            if (v78 >= 1) {
              int v32 = v24 == v80 && v82 == v78;
            }
          }
          else
          {
            int v34 = v22;
          }
          int v77 = v24;
          int v36 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v58), "BOOLValue");
          unsigned int v37 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v57), "intValue");
          int v38 = v69 ^ v36 ^ 1;
          if (v69)
          {
            int v39 = v37 <= 1 ? 1 : v37;
            BOOL v40 = v53 == v39;
            if (v36) {
              int v38 = v40;
            }
          }
          BOOL v41 = v26 == v29;
          int v42 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v56), "BOOLValue");
          BOOL v43 = v34 == v74 && v23 == v73;
          int v44 = v72 ^ v84;
          if (!v43) {
            int v44 = 1;
          }
          if ((v41 & ~v44 & (v71 ^ (v83 < 1)) & v32) == 1)
          {
            BOOL v45 = v54 <= 0 || v81 == v54;
            int v46 = v38 ^ 1;
            if (!v45) {
              int v46 = 1;
            }
            unsigned int v47 = v79;
            int v48 = v46 | v52 ^ v42;
            if (v79 != -1) {
              int v48 = 1;
            }
            if (!v48) {
              unsigned int v47 = v15;
            }
            unsigned int v79 = v47;
            uint64_t v16 = v65;
            a5 = v66;
            if (v48)
            {
              a2 = v68;
            }
            else
            {
              a2 = v68;
              if (a6)
              {
                *a6 = v77;
                a6[1] = v82;
                unsigned int v79 = v15;
              }
            }
          }
          else
          {
            a2 = v68;
            uint64_t v16 = v65;
            a5 = v66;
          }
          ++v15;
          a1 = v67;
          uint64_t v14 = v76;
        }
      }
      ++v17;
    }
    while (v14 != v17);
    uint64_t v49 = [a5 countByEnumeratingWithState:&v85 objects:v89 count:16];
    uint64_t v14 = v49;
  }
  while (v49);
  uint64_t result = v79;
  if (v79 == -1)
  {
LABEL_74:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0xFFFFFFFFLL;
  }
  return result;
}

id csu_createSourceFormatDictFromDeviceFormat(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  uint64_t v243 = *MEMORY[0x1E4F143B8];
  id v18 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  int v19 = objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", @"CaptureStreamFormat"));
  unsigned int v20 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"deviceType"), "intValue");
  int v21 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"position"), "intValue");
  if (v20 > 0x14 || ((1 << v20) & 0x100420) == 0)
  {
    BOOL v171 = v20 - 21 < 0xFFFFFFFC;
    if (v19) {
      goto LABEL_4;
    }
LABEL_24:
    FigDebugAssert3();
    v238[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_135:

    return 0;
  }
  BOOL v171 = 0;
  if (!v19) {
    goto LABEL_24;
  }
LABEL_4:
  obuint64_t j = a8;
  int v199 = a7;
  uint64_t v173 = a4;
  int v170 = v21;
  objc_msgSend(v18, "setObject:forKeyedSubscript:", a1);
  id v187 = a2;
  uint64_t v22 = [a2 objectForKeyedSubscript:@"PixelFormatType"];
  int v23 = (uint64_t *)MEMORY[0x1E4F55318];
  unsigned int v172 = v20;
  int v24 = v19;
  if (v22)
  {
    unsigned int v174 = FigCapturePixelFormatTypeFromPlistValue((void *)[v187 objectForKeyedSubscript:@"PixelFormatType"]);
    if (v174) {
      goto LABEL_13;
    }
  }
  unsigned int v174 = 1278226488;
  if (v20 != 5)
  {
    if (v20 == 10)
    {
      unsigned int v174 = 1785950320;
    }
    else if (v20 != 20)
    {
      if (v20 - 17 >= 4) {
        int v25 = 875704438;
      }
      else {
        int v25 = 875704422;
      }
      unsigned int v174 = v25;
LABEL_13:
      long long v209 = 0u;
      long long v210 = 0u;
      long long v207 = 0u;
      long long v208 = 0u;
      uint64_t v26 = *v23;
      int v27 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", v26), "allKeys");
      uint64_t v28 = [v27 countByEnumeratingWithState:&v207 objects:v226 count:16];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = *(void *)v208;
        uint64_t v31 = *MEMORY[0x1E4F55498];
        while (2)
        {
          for (uint64_t i = 0; i != v29; ++i)
          {
            if (*(void *)v208 != v30) {
              objc_enumerationMutation(v27);
            }
            int v33 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", v26), "objectForKeyedSubscript:", *(void *)(*((void *)&v207 + 1) + 8 * i)), "objectForKeyedSubscript:", v31);
            if (objc_msgSend(v33, "containsObject:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v174)))
            {
              int v24 = v19;
              goto LABEL_26;
            }
          }
          uint64_t v29 = [v27 countByEnumeratingWithState:&v207 objects:v226 count:16];
          if (v29) {
            continue;
          }
          break;
        }
      }
      goto LABEL_134;
    }
  }
LABEL_26:
  uint64_t v35 = [NSNumber numberWithUnsignedInt:v174];
  uint64_t v179 = *MEMORY[0x1E4F24D70];
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v35);
  uint64_t v168 = *MEMORY[0x1E4F55300];
  uint64_t v169 = *MEMORY[0x1E4F552F8];
  v225[0] = *MEMORY[0x1E4F55300];
  v225[1] = v169;
  uint64_t v182 = *MEMORY[0x1E4F552B0];
  uint64_t v184 = *MEMORY[0x1E4F552A8];
  v225[2] = *MEMORY[0x1E4F552B0];
  v225[3] = v184;
  uint64_t v178 = *MEMORY[0x1E4F55C70];
  v225[4] = *MEMORY[0x1E4F55C70];
  v225[5] = @"VideoMinFrameRate";
  v225[6] = @"VideoMaxFrameRate";
  v225[7] = @"VideoIsBinned";
  uint64_t v36 = *MEMORY[0x1E4F55C78];
  v225[8] = *MEMORY[0x1E4F55C80];
  v225[9] = v36;
  uint64_t v37 = *MEMORY[0x1E4F552A0];
  v225[10] = *MEMORY[0x1E4F552B8];
  v225[11] = v37;
  v225[12] = @"VideoBinningFactorHorizontal";
  v225[13] = @"VideoBinningFactorVertical";
  uint64_t v38 = *MEMORY[0x1E4F552D0];
  uint64_t v188 = *MEMORY[0x1E4F552D8];
  v225[14] = *MEMORY[0x1E4F552D8];
  v225[15] = v38;
  uint64_t v39 = *MEMORY[0x1E4F552C8];
  v225[16] = *MEMORY[0x1E4F552C8];
  BWAddEntriesWithKeysFromDictionaryToDictionary(v24, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v225 count:17], v18);
  uint64_t v190 = *MEMORY[0x1E4F55318];
  BOOL v40 = objc_msgSend(v24, "objectForKeyedSubscript:");
  BOOL v41 = (void *)[v40 objectForKeyedSubscript:*MEMORY[0x1E4F55408]];
  int v42 = (void *)[v41 objectForKeyedSubscript:*MEMORY[0x1E4F55380]];
  if (v42)
  {
    unsigned int v43 = [v42 intValue];
    if (v43 == 144) {
      uint64_t v44 = 288;
    }
    else {
      uint64_t v44 = v43;
    }
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v44), 0x1EFA512C0);
  }
  int v45 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"VideoIsBinned"), "BOOLValue");
  char v46 = v45;
  if (v45) {
    int v47 = 2;
  }
  else {
    int v47 = 1;
  }
  int v48 = v187;
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"VideoBinningFactorHorizontal"), "intValue") == v47)objc_msgSend(v18, "setObject:forKeyedSubscript:", 0, @"VideoBinningFactorHorizontal"); {
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"VideoBinningFactorVertical"), "intValue") == v47)objc_msgSend(v18, "setObject:forKeyedSubscript:", 0, @"VideoBinningFactorVertical");
  }
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v38), "intValue") == v47) {
    [v18 setObject:0 forKeyedSubscript:v38];
  }
  if ((v46 & 1) == 0) {
    [v18 setObject:0 forKeyedSubscript:@"VideoIsBinned"];
  }
  uint64_t v186 = v38;
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v39), "intValue") == 2) {
    [v18 setObject:0 forKeyedSubscript:v39];
  }
  v224[0] = 0x1EFA4F9C0;
  v224[1] = 0x1EFA4FB00;
  v224[2] = 0x1EFA4FC40;
  v224[3] = 0x1EFA4FC60;
  v224[4] = 0x1EFA4FC80;
  v224[5] = 0x1EFA4FCA0;
  v224[6] = 0x1EFA4FCC0;
  v224[7] = 0x1EFA4FCE0;
  v224[8] = 0x1EFA4FD00;
  v224[9] = 0x1EFA4FD20;
  v224[10] = 0x1EFA4FD40;
  v224[11] = 0x1EFA4FD60;
  v224[12] = 0x1EFA4FC00;
  v224[13] = 0x1EFA4FC20;
  v224[14] = 0x1EFA4FFA0;
  v224[15] = 0x1EFA4FFC0;
  v224[16] = 0x1EFA4FA20;
  v224[17] = 0x1EFA50B40;
  v224[18] = 0x1EFA500A0;
  v224[19] = 0x1EFA500C0;
  v224[20] = 0x1EFA500E0;
  v224[21] = 0x1EFA4FF60;
  v224[22] = 0x1EFA4FF80;
  v224[23] = 0x1EFA4FA40;
  v224[24] = 0x1EFA4FA60;
  v224[25] = 0x1EFA4FA80;
  v224[26] = 0x1EFA4FAA0;
  v224[27] = 0x1EFA4FAC0;
  v224[28] = 0x1EFA4FAE0;
  v224[29] = 0x1EFA50140;
  v224[30] = 0x1EFA50AA0;
  v224[31] = 0x1EFA4FDA0;
  v224[32] = 0x1EFA50400;
  v224[33] = @"FrontHorizontalScaleFactor";
  v224[34] = 0x1EFA512E0;
  v224[35] = 0x1EFA50160;
  v224[36] = 0x1EFA50220;
  v224[37] = 0x1EFA510E0;
  BWAddEntriesWithKeysFromDictionaryToDictionary(v19, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v224 count:38], v18);
  v223[0] = @"Experimental";
  v223[1] = @"Unsupported";
  v223[2] = 0x1EFA40FE0;
  v223[3] = 0x1EFA41000;
  v223[4] = 0x1EFA4FDC0;
  v223[5] = 0x1EFA4FDE0;
  v223[6] = 0x1EFA4FE00;
  void v223[7] = 0x1EFA4FE20;
  v223[8] = 0x1EFA50580;
  v223[9] = 0x1EFA50FE0;
  v223[10] = 0x1EFA51000;
  v223[11] = 0x1EFA51020;
  v223[12] = 0x1EFA51040;
  v223[13] = 0x1EFA51060;
  v223[14] = 0x1EFA51080;
  v223[15] = 0x1EFA510A0;
  v223[16] = 0x1EFA510C0;
  v223[17] = 0x1EFA51100;
  v223[18] = 0x1EFA505A0;
  v223[19] = 0x1EFA505E0;
  v223[20] = 0x1EFA50800;
  v223[21] = 0x1EFA50AC0;
  v223[22] = 0x1EFA50BC0;
  v223[23] = 0x1EFA50AE0;
  v223[24] = 0x1EFA50B00;
  v223[25] = 0x1EFA50B20;
  v223[26] = 0x1EFA50B40;
  v223[27] = 0x1EFA50B80;
  v223[28] = 0x1EFA50B60;
  v223[29] = 0x1EFA50BA0;
  v223[30] = 0x1EFA50C00;
  v223[31] = 0x1EFA4FE40;
  v223[32] = 0x1EFA4FE60;
  v223[33] = 0x1EFA501E0;
  v223[34] = 0x1EFA50200;
  v223[35] = 0x1EFA50260;
  v223[36] = 0x1EFA50F40;
  v223[37] = 0x1EFA4FEC0;
  v223[38] = 0x1EFA50600;
  v223[39] = 0x1EFA4FF00;
  v223[40] = 0x1EFA50620;
  v223[41] = 0x1EFA50640;
  v223[42] = 0x1EFA50660;
  v223[43] = 0x1EFA50680;
  v223[44] = 0x1EFA506A0;
  v223[45] = 0x1EFA506C0;
  v223[46] = 0x1EFA4C9A0;
  v223[47] = 0x1EFA506E0;
  v223[48] = 0x1EFA50700;
  v223[49] = 0x1EFA50720;
  v223[50] = 0x1EFA50740;
  v223[51] = 0x1EFA50760;
  v223[52] = 0x1EFA50780;
  v223[53] = 0x1EFA507A0;
  v223[54] = 0x1EFA507C0;
  v223[55] = 0x1EFA507E0;
  v223[56] = 0x1EFA50820;
  v223[57] = 0x1EFA50840;
  v223[58] = 0x1EFA50860;
  v223[59] = 0x1EFA50FC0;
  v223[60] = 0x1EFA508A0;
  v223[61] = 0x1EFA508E0;
  v223[62] = 0x1EFA50900;
  v223[63] = 0x1EFA50920;
  v223[64] = 0x1EFA50940;
  v223[65] = 0x1EFA50960;
  v223[66] = 0x1EFA50180;
  v223[67] = 0x1EFA50280;
  v223[68] = 0x1EFA502A0;
  v223[69] = 0x1EFA4FEA0;
  v223[70] = 0x1EFA4FD80;
  v223[71] = 0x1EFA4FB40;
  v223[72] = 0x1EFA4FB60;
  v223[73] = 0x1EFA50460;
  v223[74] = 0x1EFA4F9E0;
  v223[75] = 0x1EFA4FBC0;
  v223[76] = 0x1EFA4FBE0;
  v223[77] = 0x1EFA4FEE0;
  v223[78] = 0x1EFA4FA00;
  v223[79] = 0x1EFA51120;
  v223[80] = 0x1EFA51140;
  v223[81] = 0x1EFA50FA0;
  v223[82] = 0x1EFA4FE80;
  v223[83] = 0x1EFA509C0;
  v223[84] = 0x1EFA509E0;
  v223[85] = 0x1EFA51160;
  v223[86] = 0x1EFA50A40;
  v223[87] = 0x1EFA50C60;
  v223[88] = 0x1EFA50F60;
  v223[89] = 0x1EFA50380;
  v223[90] = 0x1EFA4FF20;
  v223[91] = 0x1EFA50880;
  v223[92] = 0x1EFA50D00;
  v223[93] = 0x1EFA50D20;
  v223[94] = 0x1EFA50DC0;
  v223[95] = 0x1EFA50DE0;
  v223[96] = 0x1EFA50E00;
  v223[97] = 8315540000;
  v223[98] = 0x1EFA51240;
  v223[99] = 0x1EFA50C20;
  v223[100] = 0x1EFA50C40;
  v223[101] = 0x1EFA50080;
  v223[102] = 0x1EFA50420;
  v223[103] = 0x1EFA50440;
  v223[104] = 0x1EFA50540;
  v223[105] = 0x1EFA50560;
  v223[106] = 0x1EFA50100;
  v223[107] = 0x1EFA51180;
  v223[108] = 0x1EFA511C0;
  v223[109] = 0x1EFA511E0;
  v223[110] = 0x1EFA511A0;
  v223[111] = 0x1EFA4FFE0;
  v223[112] = 0x1EFA50000;
  v223[113] = 0x1EFA50020;
  v223[114] = 0x1EFA508C0;
  v223[115] = 0x1EFA51300;
  v223[116] = 0x1EFA50240;
  v223[117] = 0x1EFA51320;
  v223[118] = 0x1EFA51200;
  v223[119] = 0x1EFA50C20;
  v223[120] = 0x1EFA50C40;
  v223[121] = 0x1EFA50F80;
  v223[122] = 0x1EFA51340;
  v223[123] = 0x1EFA50040;
  v223[124] = 0x1EFA51360;
  v223[125] = 0x1EFA51380;
  BWAddEntriesWithKeysFromDictionaryToDictionary(v187, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v223 count:126], v18);
  if (FigCaptureSushiRawDNGDictionaryCreatedInGraph())
  {
    if ((objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", 0x1EFA509C0), "BOOLValue") & 1) == 0) {
      goto LABEL_73;
    }
  }
  else
  {
    int v49 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA4FEC0), "BOOLValue");
    uint64_t v180 = [v18 objectForKeyedSubscript:0x1EFA4FB00];
    BOOL v50 = (int)objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", 0x1EFA4FC40), "intValue") > 0
       || (int)objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", 0x1EFA4FC60), "intValue") > 0;
    unsigned int v51 = objc_msgSend((id)objc_msgSend(v173, "objectForKeyedSubscript:", @"deviceType"), "intValue");
    unsigned int v52 = v51 - 10;
    unsigned int v53 = (v51 < 0xA) & (0x310u >> v51);
    int v54 = objc_msgSend((id)objc_msgSend(v173, "objectForKeyedSubscript:", @"position"), "intValue");
    int v55 = objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", 0x1EFA40FE0), "intValue");
    int v56 = objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", 0x1EFA41000), "intValue");
    if (v55 == 2592 && v56 == 1936)
    {
      BOOL v57 = 1;
      uint64_t v58 = v180;
    }
    else
    {
      uint64_t v58 = v180;
      BOOL v57 = v55 == 3264 && v56 == 2448 || v55 == 4032 && v56 == 3024;
    }
    if (v58) {
      int v60 = 0;
    }
    else {
      int v60 = v49;
    }
    int v48 = v187;
    if ((v60 | v50 | v53) == 1 || v54 != 1 || v52 > 0xFFFFFFFC || !v57) {
      goto LABEL_73;
    }
  }
  uint64_t v61 = (void *)[v19 objectForKeyedSubscript:v190];
  uint64_t v62 = (void *)[v61 objectForKeyedSubscript:*MEMORY[0x1E4F55428]];
  uint64_t v63 = (void *)[v62 objectForKeyedSubscript:*MEMORY[0x1E4F550C8]];
  if (v63)
  {
    uint64_t v64 = [v63 unsignedIntValue];
    uint64_t v65 = [v19 objectForKeyedSubscript:*MEMORY[0x1E4F55320]];
    if (v64)
    {
      uint64_t v66 = v65;
      objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v64), 0x1EFA50980);
      if (v66) {
        [v18 setObject:v66 forKeyedSubscript:0x1EFA509A0];
      }
    }
  }
LABEL_73:
  uint64_t v67 = (void *)[v48 objectForKeyedSubscript:0x1EFA50A00];
  if (v67) {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", FigCapturePixelFormatTypeFromPlistValue(v67)), 0x1EFA50A00);
  }
  uint64_t v68 = (void *)[v48 objectForKeyedSubscript:0x1EFA50A20];
  if (v68) {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", FigCapturePixelFormatTypeFromPlistValue(v68)), 0x1EFA50A20);
  }
  if ((objc_msgSend((id)objc_msgSend(v173, "objectForKeyedSubscript:", @"hasAutoFocus"), "BOOLValue") & 1) == 0
    && objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA4FFA0), "intValue"))
  {
    [v18 setObject:0 forKeyedSubscript:0x1EFA4FFA0];
  }
  int v69 = v19;
  if (![v18 objectForKeyedSubscript:0x1EFA4FFA0]
    && objc_msgSend((id)objc_msgSend(v173, "objectForKeyedSubscript:", @"hasAutoFocus"), "BOOLValue"))
  {
    [v18 setObject:&unk_1EFAFF618 forKeyedSubscript:0x1EFA4FFA0];
  }
  if (obj
    && objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA4FFA0), "intValue") == 2)
  {
    [v18 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA4FFC0];
  }
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA505A0), "BOOLValue")
    && (int)objc_msgSend((id)objc_msgSend(v173, "objectForKeyedSubscript:", @"stillImageNoiseReductionAndFusionScheme"), "intValue") <= 3)
  {
    [v18 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA505C0];
  }
  unint64_t v70 = 0x1E4F28000;
  if (v199) {
    [v18 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA4FF40];
  }
  if ([v48 objectForKeyedSubscript:@"MaxFrameRateOverride"])
  {
    int v71 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", @"MaxFrameRateOverride"), "intValue");
    int v72 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"VideoMinFrameRate"), "intValue");
    int v73 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue");
    if (v71 >= v72 && v71 <= v73) {
      objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(v48, "objectForKeyedSubscript:", @"MaxFrameRateOverride"), @"VideoMaxFrameRate");
    }
  }
  if ([v48 objectForKeyedSubscript:@"MinFrameRateOverride"])
  {
    int v74 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", @"MinFrameRateOverride"), "intValue");
    int v75 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"VideoMinFrameRate"), "intValue");
    int v76 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue");
    if (v74 >= v75 && v74 <= v76) {
      objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(v48, "objectForKeyedSubscript:", @"MinFrameRateOverride"), @"VideoMinFrameRate");
    }
  }
  [v173 objectForKeyedSubscript:@"localizedName"];
  unsigned int v77 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", 0x1EFA40FE0), "intValue");
  unsigned int v78 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", 0x1EFA41000), "intValue");
  unsigned int v79 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", 0x1EFA4FC40), "intValue");
  if (!v79) {
    unsigned int v79 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", @"SensorWidth"), "intValue");
  }
  unsigned int v80 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", 0x1EFA4FC60), "intValue");
  if (!v80) {
    unsigned int v80 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", @"SensorHeight"), "intValue");
  }
  unsigned int v81 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", 0x1EFA4FC00), "intValue");
  if (!v81) {
    unsigned int v81 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", v182), "intValue");
  }
  unsigned int v82 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", 0x1EFA4FC20), "intValue");
  if (!v82) {
    unsigned int v82 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", v184), "intValue");
  }
  if (!v81) {
    unsigned int v81 = v79;
  }
  if (v82) {
    unsigned int v83 = v82;
  }
  else {
    unsigned int v83 = v80;
  }
  int v84 = objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", 0x1EFA50AC0), "BOOLValue");
  BOOL v85 = v77 >= v81;
  BOOL v86 = v77 > v81;
  if (v84)
  {
    unsigned int v87 = v172;
    long long v88 = v187;
    if (v85 || v78 >= v83)
    {
LABEL_134:
      FigDebugAssert3();
      goto LABEL_135;
    }
  }
  else
  {
    unsigned int v87 = v172;
    long long v88 = v187;
    if (v86 || v78 > v83) {
      goto LABEL_134;
    }
  }
  if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", 0x1EFA4FF20), "BOOLValue"))
  {
    if (!objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", v188), "BOOLValue")) {
      goto LABEL_134;
    }
    unsigned int v89 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", @"VideoBinningFactorHorizontal"), "intValue");
    int v90 = v89 <= 1 ? 1 : v89;
    unsigned int v91 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", @"VideoBinningFactorVertical"), "intValue");
    int v92 = v91 <= 1 ? 1 : v91;
    unsigned int v93 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", v186), "intValue");
    int v94 = v93 <= 1 ? 1 : v93;
    if (v94 != v92 || v94 != v90) {
      goto LABEL_134;
    }
  }
  objCGFloat a = (id)[v88 objectForKeyedSubscript:0x1EFA50180];
  unsigned int v95 = v173;
  if ([obja count])
  {
    if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", @"ExperimentalSupportedDepthFormats"), "BOOLValue"))
    {
      [v18 setObject:MEMORY[0x1E4F1CBF0] forKeyedSubscript:0x1EFA50180];
    }
    else
    {
      uint64_t v176 = [v18 objectForKeyedSubscript:v178];
      uint64_t v175 = [v18 objectForKeyedSubscript:@"VideoMinFrameRate"];
      id v167 = v18;
      uint64_t v183 = [v18 objectForKeyedSubscript:@"VideoMaxFrameRate"];
      uint64_t v177 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(obja, "count"));
      long long v219 = 0u;
      long long v220 = 0u;
      long long v221 = 0u;
      long long v222 = 0u;
      uint64_t v96 = [obja countByEnumeratingWithState:&v219 objects:&v240 count:16];
      if (v96)
      {
        uint64_t v97 = v96;
        uint64_t v200 = 0;
        uint64_t v202 = 0;
        int v98 = 0;
        int v99 = 0;
        uint64_t v100 = *(void *)v220;
        do
        {
          for (uint64_t j = 0; j != v97; ++j)
          {
            if (*(void *)v220 != v100) {
              objc_enumerationMutation(obja);
            }
            uint64_t v102 = *(void *)(*((void *)&v219 + 1) + 8 * j);
            unsigned int v103 = (void *)[a6 objectForKeyedSubscript:v102];
            uint64_t v104 = (void *)[v103 objectForKeyedSubscript:0x1EFA40FE0];
            if ((int)[v104 intValue] > v98)
            {
              int v98 = [v104 intValue];
              uint64_t v202 = v102;
            }
            uint64_t v105 = (void *)[v103 objectForKeyedSubscript:0x1EFA501A0];
            if ((int)[v105 intValue] > v99)
            {
              int v99 = [v105 intValue];
              uint64_t v200 = v102;
            }
          }
          uint64_t v97 = [obja countByEnumeratingWithState:&v219 objects:&v240 count:16];
        }
        while (v97);
      }
      else
      {
        uint64_t v200 = 0;
        uint64_t v202 = 0;
      }
      uint64_t v106 = v202;
      if (!v202) {
        uint64_t v106 = v200;
      }
      uint64_t v181 = v106;
      long long v217 = 0u;
      long long v218 = 0u;
      long long v215 = 0u;
      long long v216 = 0u;
      long long v88 = v187;
      uint64_t v196 = [obja countByEnumeratingWithState:&v215 objects:v239 count:16];
      if (v196)
      {
        uint64_t v189 = *(void *)v216;
        do
        {
          for (uint64_t k = 0; k != v196; ++k)
          {
            if (*(void *)v216 != v189) {
              objc_enumerationMutation(obja);
            }
            uint64_t v108 = *(void **)(*((void *)&v215 + 1) + 8 * k);
            uint64_t v109 = [a6 objectForKeyedSubscript:v108];
            if (v109)
            {
              uint64_t v110 = (void *)v109;
              uint64_t v111 = (void *)[MEMORY[0x1E4F1CA48] array];
              uint64_t v112 = [v110 objectForKeyedSubscript:0x1EFA40FE0];
              uint64_t v113 = [v110 objectForKeyedSubscript:0x1EFA41000];
              uint64_t v114 = [v110 objectForKeyedSubscript:0x1EFA501A0];
              if (v114) {
                uint64_t v115 = v114;
              }
              else {
                uint64_t v115 = v112;
              }
              uint64_t v194 = v115;
              uint64_t v116 = [v110 objectForKeyedSubscript:0x1EFA501C0];
              if (v116) {
                uint64_t v117 = v116;
              }
              else {
                uint64_t v117 = v113;
              }
              uint64_t v193 = v117;
              uint64_t v118 = [v110 objectForKeyedSubscript:0x1EFA503A0];
              v203 = (void *)v112;
              if (v118) {
                uint64_t v119 = v118;
              }
              else {
                uint64_t v119 = v112;
              }
              uint64_t v120 = [v110 objectForKeyedSubscript:0x1EFA503C0];
              uint64_t v201 = (void *)v113;
              if (v120) {
                uint64_t v121 = v120;
              }
              else {
                uint64_t v121 = v113;
              }
              uint64_t v122 = [v110 objectForKeyedSubscript:@"MaxFrameRate"];
              uint64_t v123 = v183;
              if (v122) {
                uint64_t v123 = v122;
              }
              uint64_t v192 = v123;
              double v195 = (void *)[v110 objectForKeyedSubscript:0x1EFA50780];
              long long v211 = 0u;
              long long v212 = 0u;
              long long v213 = 0u;
              long long v214 = 0u;
              uint64_t v124 = [a5 countByEnumeratingWithState:&v211 objects:v238 count:16];
              if (v124)
              {
                uint64_t v125 = v124;
                id v185 = v108;
                uint64_t v126 = *(void *)v212;
                while (2)
                {
                  for (uint64_t m = 0; m != v125; ++m)
                  {
                    if (*(void *)v212 != v126) {
                      objc_enumerationMutation(a5);
                    }
                    int v128 = *(void **)(*((void *)&v211 + 1) + 8 * m);
                    if (objc_msgSend((id)objc_msgSend(v128, "objectForKeyedSubscript:", 0x1EFA40FE0), "isEqual:", v119)&& (objc_msgSend((id)objc_msgSend(v128, "objectForKeyedSubscript:", 0x1EFA41000), "isEqual:", v121) & 1) != 0|| objc_msgSend((id)objc_msgSend(v128, "objectForKeyedSubscript:", 0x1EFA40FE0), "isEqual:", v121)&& objc_msgSend((id)objc_msgSend(v128, "objectForKeyedSubscript:", 0x1EFA41000), "isEqual:", v119))
                    {
                      uint64_t v191 = (void *)[v128 objectForKeyedSubscript:0x1EFA503E0];
                      goto LABEL_184;
                    }
                  }
                  uint64_t v125 = [a5 countByEnumeratingWithState:&v211 objects:v238 count:16];
                  if (v125) {
                    continue;
                  }
                  break;
                }
                uint64_t v191 = 0;
LABEL_184:
                long long v88 = v187;
                uint64_t v108 = v185;
              }
              else
              {
                uint64_t v191 = 0;
              }
              int v129 = [v108 isEqualToString:v181];
              BOOL v130 = (int)[v203 intValue] >= 1 && (int)objc_msgSend(v201, "intValue") > 0;
              if ([v110 objectForKeyedSubscript:@"DisparitySupported"])
              {
                [v111 addObject:&unk_1EFAFF690];
                [v111 addObject:&unk_1EFAFF6A8];
              }
              if ([v110 objectForKeyedSubscript:@"DepthSupported"])
              {
                [v111 addObject:&unk_1EFAFF6C0];
                [v111 addObject:&unk_1EFAFF6D8];
              }
              if ([v111 count])
              {
                uint64_t v131 = [v111 firstObject];
                [v111 removeObject:v131];
                v227[0] = v179;
                v227[1] = 0x1EFA50120;
                *(void *)type = v131;
                uint64_t v229 = v111;
                v227[2] = 0x1EFA4F9A0;
                v227[3] = 0x1EFA40FE0;
                CFDictionaryRef v230 = v108;
                double v231 = v203;
                v227[4] = 0x1EFA41000;
                v227[5] = @"VideoMinFrameRate";
                uint64_t v232 = v201;
                uint64_t v233 = v175;
                v227[6] = @"VideoMaxFrameRate";
                v227[7] = v178;
                uint64_t v234 = v192;
                uint64_t v235 = v176;
                v227[8] = 0x1EFA501A0;
                v227[9] = 0x1EFA501C0;
                uint64_t v236 = v194;
                uint64_t v237 = v193;
                unsigned int v132 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", type, v227, 10));
                if ([v191 BOOLValue]) {
                  [v132 setObject:v191 forKeyedSubscript:0x1EFA503E0];
                }
                if (v130)
                {
                  [v132 setObject:v119 forKeyedSubscript:0x1EFA503A0];
                  [v132 setObject:v121 forKeyedSubscript:0x1EFA503C0];
                }
                if ([v195 BOOLValue]) {
                  [v132 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA50780];
                }
                if (v129) {
                  [v132 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA4F9E0];
                }
                long long v88 = v187;
                if (objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", @"ExperimentalSupportedDepthFormats"), "BOOLValue"))objc_msgSend(v132, "setObject:forKeyedSubscript:", MEMORY[0x1E4F1CC38], @"Experimental"); {
                [v177 addObject:v132];
                }
              }
            }
          }
          uint64_t v196 = [obja countByEnumeratingWithState:&v215 objects:v239 count:16];
        }
        while (v196);
      }
      id v18 = v167;
      [v167 setObject:v177 forKeyedSubscript:0x1EFA50180];
      unint64_t v70 = 0x1E4F28000;
      unsigned int v87 = v172;
      unsigned int v95 = v173;
    }
  }
  if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", 0x1EFA50C60), "BOOLValue"))
  {
    int v133 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "intValue");
    uint64_t v134 = 0x1EFA4FC40;
    uint64_t v135 = 0x1EFA4FC60;
    if (![v18 objectForKeyedSubscript:0x1EFA4FC40]
      || ![v18 objectForKeyedSubscript:0x1EFA4FC60])
    {
      uint64_t v134 = v168;
      uint64_t v135 = v169;
    }
    int v136 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v134), "intValue");
    int v137 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v135), "intValue");
    if ([v18 objectForKeyedSubscript:0x1EFA4FDA0])
    {
      long long v138 = v18;
      uint64_t v139 = @"FESBinningFactorHorizontal";
    }
    else
    {
      if (![v18 objectForKeyedSubscript:@"FrontHorizontalScaleFactor"])
      {
        long long v140 = v18;
        int v141 = 1;
LABEL_217:
        int v142 = v137 * v136;
        if (![v95 objectForKeyedSubscript:@"synchronizedStreamUniqueIDs"]
          && ![v95 objectForKeyedSubscript:@"unsynchronizedStreamUniqueIDs"])
        {
          uint64_t v143 = (void *)[v95 objectForKeyedSubscript:@"SensorPowerConsumption"];
          int v206 = objc_msgSend((id)objc_msgSend(v143, "objectForKeyedSubscript:", @"SensorWidth"), "intValue");
          int v144 = objc_msgSend((id)objc_msgSend(v143, "objectForKeyedSubscript:", @"SensorHeight"), "intValue");
          uint64_t v145 = objc_msgSend((id)objc_msgSend(v143, "objectForKeyedSubscript:", @"BasePower"), "intValue");
          objc_msgSend((id)objc_msgSend(v143, "objectForKeyedSubscript:", @"PowerPerFramePerSecond"), "floatValue");
          if (v206 && v144 && v145 && v146 != 0.0)
          {
            float v147 = (float)((float)v142 / (float)(v144 * v206)) * v146;
            unint64_t v70 = 0x1E4F28000uLL;
            objc_msgSend(v140, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v145), 0x1EFA50CA0);
            *(float *)&double v148 = v147;
            objc_msgSend(v140, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v148), 0x1EFA50CC0);
          }
          else
          {
            unint64_t v70 = 0x1E4F28000uLL;
            if (v143) {
              [v143 count];
            }
          }
        }
        uint64_t v149 = v136 / v141 * v137 * (uint64_t)v133;
        uint64_t v150 = v142 * (uint64_t)v133;
        int v242 = 0;
        long long v240 = 0u;
        long long v241 = 0u;
        double ISPHardwareCharacteristics = FigCapturePlatformGetISPHardwareCharacteristics((uint64_t)&v240);
        int v152 = 1000000 * v240 * DWORD2(v240);
        int v153 = 1000000 * v241 * DWORD2(v241);
        if ((float)((float)v150 / (float)v152) <= (float)((float)v149 / (float)v153)) {
          float v154 = (float)v149 / (float)v153;
        }
        else {
          float v154 = (float)v150 / (float)v152;
        }
        *(float *)&double ISPHardwareCharacteristics = v154 / (float)v133;
        id v18 = v140;
        objc_msgSend(v140, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v70 + 3792), "numberWithFloat:", ISPHardwareCharacteristics), 0x1EFA50C80);
        int v155 = objc_msgSend((id)objc_msgSend(v140, "objectForKeyedSubscript:", 0x1EFA40FE0), "intValue");
        int v156 = objc_msgSend((id)objc_msgSend(v140, "objectForKeyedSubscript:", 0x1EFA41000), "intValue") * v155;
        double v157 = (double)(int)(((2 * v150) << objc_msgSend((id)objc_msgSend(v140, "objectForKeyedSubscript:", 0x1EFA4FB20), "BOOLValue"))/ 0x100000+ 3 * v133 * (uint64_t)v156 / 0x200000)* 0.1;
        *(float *)&double v157 = (float)((float)(int)v157 + (float)(v154 * (float)v242)) / (float)v133;
        objc_msgSend(v140, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v70 + 3792), "numberWithFloat:", v157), 0x1EFA50CE0);
        unsigned int v87 = v172;
        long long v88 = v187;
        goto LABEL_231;
      }
      uint64_t v139 = @"FrontHorizontalScaleFactor";
      long long v138 = v18;
    }
    long long v140 = v18;
    int v141 = objc_msgSend((id)objc_msgSend(v138, "objectForKeyedSubscript:", v139), "intValue");
    goto LABEL_217;
  }
LABEL_231:
  char v158 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA50D00), "BOOLValue");
  char v159 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA50D20), "BOOLValue");
  if ((v158 & 1) != 0 || (v159 & 1) != 0 || v87 == 14)
  {
    [v18 setObject:a10 forKeyedSubscript:0x1EFA50D80];
    objc_msgSend(a10, "setObject:forKeyedSubscript:", objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA40FE0), 0x1EFA50DC0);
    objc_msgSend(a10, "setObject:forKeyedSubscript:", objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA41000), 0x1EFA50DE0);
  }
  if ([v18 objectForKeyedSubscript:0x1EFA50080]) {
    [v18 setObject:a11 forKeyedSubscript:0x1EFA50060];
  }
  if ([v18 objectForKeyedSubscript:0x1EFA51100])
  {
    [v18 setObject:a12 forKeyedSubscript:0x1EFA51100];
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(a12, "objectForKeyedSubscript:", 0x1EFA510E0), 0x1EFA510E0);
  }
  if (v171
    && [a9 objectForKeyedSubscript:@"BackgroundBlurSupported"]
    && (int)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA41000), "intValue") <= 1440
    && (FigCapturePixelFormatIsTenBit(v174) & 1) == 0)
  {
    if (v170 == 2)
    {
      uint64_t v160 = FigCaptureSourceFormatKey_BackgroundBlurSupported;
      goto LABEL_249;
    }
    if (v170 == 1 && v87 <= 8 && ((1 << v87) & 0x184) != 0)
    {
      uint64_t v160 = FigCaptureSourceFormatKey_BackgroundBlurSupportedForContinuityCapture;
LABEL_249:
      [v18 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*v160];
    }
  }
  uint64_t v161 = (void *)[v88 objectForKeyedSubscript:0x1EFA50BE0];
  if (v161) {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v70 + 3792), "numberWithInt:", FigCaptureVideoStabilizationStrengthStringToEnum(v161)), 0x1EFA50BE0);
  }
  if (!v171) {
    goto LABEL_283;
  }
  if ([a9 objectForKeyedSubscript:@"StudioLightingSupported"]
    && (int)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA41000), "intValue") <= 1440
    && (FigCapturePixelFormatIsTenBit(v174) & 1) == 0)
  {
    if (v170 == 2)
    {
      unsigned int v162 = FigCaptureSourceFormatKey_StudioLightingSupported;
      goto LABEL_262;
    }
    if (v170 == 1 && v87 <= 8 && ((1 << v87) & 0x184) != 0)
    {
      unsigned int v162 = FigCaptureSourceFormatKey_StudioLightingSupportedForContinuityCapture;
LABEL_262:
      [v18 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*v162];
    }
  }
  if ([a9 objectForKeyedSubscript:@"ReactionEffectsSupported"]
    && (int)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA41000), "intValue") <= 1440
    && (FigCapturePixelFormatIsTenBit(v174) & 1) == 0)
  {
    if (v170 == 2)
    {
      id v163 = FigCaptureSourceFormatKey_ReactionEffectsSupported;
      goto LABEL_272;
    }
    if (v170 == 1 && v87 - 2 <= 7 && ((0xE1u >> (v87 - 2)) & 1) != 0)
    {
      id v163 = FigCaptureSourceFormatKey_ReactionEffectsSupportedForContinuityCapture;
LABEL_272:
      [v18 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*v163];
    }
  }
  if (![a9 objectForKeyedSubscript:@"BackgroundReplacementSupported"]
    || (int)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA41000), "intValue") > 1440
    || (FigCapturePixelFormatIsTenBit(v174) & 1) != 0)
  {
    goto LABEL_283;
  }
  if (v170 == 2)
  {
    uint64_t v164 = MEMORY[0x1E4F1CC28];
    uint64_t v165 = FigCaptureSourceFormatKey_BackgroundReplacementSupported;
  }
  else
  {
    if (v170 != 1 || v87 > 8 || ((1 << v87) & 0x184) == 0) {
      goto LABEL_283;
    }
    uint64_t v164 = MEMORY[0x1E4F1CC38];
    uint64_t v165 = FigCaptureSourceFormatKey_BackgroundReplacementSupportedForContinuityCapture;
  }
  [v18 setObject:v164 forKeyedSubscript:*v165];
LABEL_283:
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v179), "unsignedIntValue") == 2016686642)
  {
    if (objc_msgSend((id)objc_msgSend(a9, "objectForKeyedSubscript:", @"AppleLogSupportedForProRes"), "BOOLValue"))objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v70 + 3792), "numberWithBool:", 1), 0x1EFA512A0); {
    if (objc_msgSend((id)objc_msgSend(a9, "objectForKeyedSubscript:", @"10BitVideoHDRSupportedForProRes"), "BOOLValue"))objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(a9, "objectForKeyedSubscript:", @"10BitVideoHDRSupportedForProRes"), 0x1EFA51280);
    }
  }
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1EFA50700), "BOOLValue")
    && (int)objc_msgSend((id)objc_msgSend(a9, "objectForKeyedSubscript:", @"SemanticRenderingVersion"), "intValue") >= 3)
  {
    [v18 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:0x1EFA50720];
  }
  return v18;
}

void *csu_pruneDictionaryToJustKeys(void *a1, uint64_t a2)
{
  uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithArray:", objc_msgSend(a1, "allKeys"));
  objc_msgSend(v4, "minusSet:", objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithArray:", a2));
  objc_msgSend(a1, "removeObjectsForKeys:", objc_msgSend(v4, "allObjects"));
  return a1;
}

void man_maProcessorOutputReadyCallback(uint64_t a1, uint64_t a2, void *target)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a2) {
    [*(id *)(a1 + 128) logErrorNumber:a2 errorString:@"SBP output callback"];
  }
  if (target)
  {
    uint64_t v5 = *(void **)(a1 + 112);
    if (v5) {
      [v5 emitSampleBuffer:target];
    }
    if (*(void *)(a1 + 120))
    {
      uint64_t v6 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
      if (v6)
      {
        long long v7 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:0];
        uint64_t v8 = 0;
        uint64_t v9 = *MEMORY[0x1E4F55A18];
        v20.xpc_object_t value = *MEMORY[0x1E4F54128];
        *(void *)&v20.timescale = v9;
        uint64_t v10 = *MEMORY[0x1E4F53EE8];
        v20.CMTimeEpoch epoch = *MEMORY[0x1E4F53E48];
        uint64_t v21 = v10;
        uint64_t v11 = *MEMORY[0x1E4F55A00];
        uint64_t v22 = *MEMORY[0x1E4F55A48];
        uint64_t v23 = v11;
        uint64_t v12 = *MEMORY[0x1E4F55A20];
        uint64_t v24 = *MEMORY[0x1E4F55A28];
        uint64_t v25 = v12;
        uint64_t v13 = *MEMORY[0x1E4F53F98];
        uint64_t v26 = *MEMORY[0x1E4F55A60];
        uint64_t v27 = v13;
        uint64_t v14 = *MEMORY[0x1E4F53D98];
        uint64_t v28 = *MEMORY[0x1E4F54280];
        uint64_t v29 = v14;
        uint64_t v15 = *MEMORY[0x1E4F55A30];
        uint64_t v30 = *MEMORY[0x1E4F54198];
        uint64_t v31 = v15;
        do
        {
          uint64_t v16 = *(CMTimeValue *)((char *)&v20.value + v8);
          uint64_t v17 = [v6 objectForKeyedSubscript:v16];
          if (v17) {
            [v7 setObject:v17 forKeyedSubscript:v16];
          }
          v8 += 8;
        }
        while (v8 != 112);
        if ([v7 count])
        {
          memset(&sampleTimingArray.presentationTimeStamp, 0, 48);
          *(_OWORD *)&sampleTimingArray.duration.xpc_object_t value = *MEMORY[0x1E4F1F9F8];
          sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          CMSampleBufferGetPresentationTimeStamp(&sampleTimingArray.presentationTimeStamp, (CMSampleBufferRef)target);
          sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
          targetCGFloat a = 0;
          uint64_t v6 = (void *)CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, (CMSampleBufferRef *)&targeta);
          if (targeta && !v6)
          {
            CMSetAttachment(targeta, (CFStringRef)*MEMORY[0x1E4F530B8], v7, 1u);
            [*(id *)(a1 + 120) emitSampleBuffer:targeta];
            CFRelease(targeta);

            return;
          }
        }
        else
        {

          uint64_t v6 = 0;
        }
      }
      memset(&v20, 0, sizeof(v20));
      CMSampleBufferGetPresentationTimeStamp(&v20, (CMSampleBufferRef)target);
      [*(id *)(a1 + 128) logErrorNumber:v6 errorString:@"SBP output callback create offline sample buffer"];
      sampleTimingArray.duratiouint64_t n = v20;
      objc_msgSend(*(id *)(a1 + 120), "emitDroppedSample:", +[BWDroppedSample newDroppedSampleWithReason:pts:](BWDroppedSample, "newDroppedSampleWithReason:pts:", 0x1EFA67F80, &sampleTimingArray));
    }
  }
}

void dmc_removeAllCacheEntries(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  do
  {
    uint64_t v4 = a1 + v2;
    uint64_t v5 = *(const void **)(a1 + v2 + 24);
    if (v5)
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
      *(void *)(v4 + 16) = *(void *)(v3 + 16);
      CFRelease(v5);
      *(void *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 32) = 0;
    }
    v2 += 40;
  }
  while (v2 != 200);
}

void dmc_attachMetadataDictToSampleBufferAndPixelBufferAndCleanupPrivateCaptureStreamAttachments(opaqueCMSampleBuffer *a1, const void *a2)
{
  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F53070];
  CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], a2, 1u);
  uint64_t v6 = CVBufferCopyAttachments(ImageBuffer, kCVAttachmentMode_ShouldPropagate);
  if (v6) {
    uint64_t v6 = CFAutorelease(v6);
  }
  CFDictionaryApplyFunction((CFDictionaryRef)v6, (CFDictionaryApplierFunction)dmc_removeAttachmentFromPixelBufferIfPrivate, ImageBuffer);
  CMSetAttachment(ImageBuffer, v5, a2, 1u);
}

void *BWCreateCorrectedFacesArray(void *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  *(double *)&v23[16] = a8;
  *(double *)&v23[24] = a9;
  *(double *)uint64_t v23 = a6;
  *(double *)&v23[8] = a7;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = [a1 count];
  uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v12];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v14 = [a1 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v26 != v16) {
          objc_enumerationMutation(a1);
        }
        id v18 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          v31.origin.CGFloat x = FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
          double width = v31.size.width;
          double height = v31.size.height;
          CGRect v32 = CGRectIntersection(v31, *(CGRect *)v23);
          if (v32.size.width * v32.size.height > width * height * 0.5)
          {
            uint64_t v21 = (void *)[v18 mutableCopy];
            FigCFDictionarySetCGRect();
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
              FigCFDictionarySetCGRect();
            }
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
              FigCFDictionarySetCGRect();
            }
            [v13 addObject:v21];
          }
        }
      }
      uint64_t v15 = [a1 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v15);
  }
  return v13;
}

uint64_t BWCorrectRectanglesInDetectedObjectsInfo(void *a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  obuint64_t j = (id)[a1 allKeys];
  uint64_t result = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
  uint64_t v33 = result;
  if (result)
  {
    uint64_t v32 = *(void *)v41;
    uint64_t v31 = *MEMORY[0x1E4F538F8];
    uint64_t v18 = *MEMORY[0x1E4F538C8];
    uint64_t v30 = *MEMORY[0x1E4F538E8];
    uint64_t v28 = *MEMORY[0x1E4F54D30];
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v41 != v32) {
          objc_enumerationMutation(obj);
        }
        uint64_t v35 = v19;
        CMTime v20 = *(void **)(*((void *)&v40 + 1) + 8 * v19);
        uint64_t v21 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v20), "objectForKeyedSubscript:", v31);
        uint64_t v22 = (void *)[MEMORY[0x1E4F1CA48] array];
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        uint64_t v23 = [v21 countByEnumeratingWithState:&v36 objects:v44 count:16];
        if (v23)
        {
          uint64_t v24 = v23;
          uint64_t v25 = *(void *)v37;
          do
          {
            for (uint64_t i = 0; i != v24; ++i)
            {
              if (*(void *)v37 != v25) {
                objc_enumerationMutation(v21);
              }
              uint64_t v27 = *(void *)(*((void *)&v36 + 1) + 8 * i);
              if (correctRectangleInDictionaryForKey(a2, a3, a4, a5, a6, a7, a8, a9))
              {
                if ([v20 isEqualToString:v18])
                {
                  correctRectangleInDictionaryForKey(a2, a3, a4, a5, a6, a7, a8, a9);
                  correctRectangleInDictionaryForKey(a2, a3, a4, a5, a6, a7, a8, a9);
                }
              }
              else
              {
                [v22 addObject:v27];
              }
            }
            uint64_t v24 = [v21 countByEnumeratingWithState:&v36 objects:v44 count:16];
          }
          while (v24);
        }
        if ([v22 count]) {
          [v21 removeObjectsInArray:v22];
        }
        if ([v20 isEqualToString:v30]
          && objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v20), "objectForKeyedSubscript:", v28)
          && (correctRectangleInDictionaryForKey(a2, a3, a4, a5, a6, a7, a8, a9) & 1) == 0)
        {
          [a1 removeObjectForKey:v20];
        }
        uint64_t v19 = v35 + 1;
      }
      while (v35 + 1 != v33);
      uint64_t result = [obj countByEnumeratingWithState:&v40 objects:v45 count:16];
      uint64_t v33 = result;
    }
    while (result);
  }
  return result;
}

uint64_t correctRectangleInDictionaryForKey(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t result = FigCFDictionaryGetCGRectIfPresent();
  if (result)
  {
    v18.origin.CGFloat x = FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a1, a2, a3);
    double width = v18.size.width;
    double height = v18.size.height;
    v20.origin.CGFloat x = a5;
    v20.origin.CGFloat y = a6;
    v20.size.double width = a7;
    v20.size.double height = a8;
    CGRect v19 = CGRectIntersection(v18, v20);
    if (v19.size.width * v19.size.height <= width * height * 0.5)
    {
      return 0;
    }
    else
    {
      FigCFDictionarySetCGRect();
      return 1;
    }
  }
  return result;
}

void *BWCreateTransformedFacesArray(void *a1, _OWORD *a2, int a3, int a4)
{
  uint64_t v16 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(a1, "count"));
  CGSize v6 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
  v23.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB28];
  v23.CGSize size = v6;
  v22.CGPoint origin = v23.origin;
  v22.CGSize size = v6;
  v21.CGPoint origin = v23.origin;
  v21.CGSize size = v6;
  uint64_t v20 = 0;
  int v19 = 0;
  if ([a1 count])
  {
    unint64_t v7 = 0;
    do
    {
      [a1 objectAtIndexedSubscript:v7];
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        MutableCopCGFloat y = (const void *)FigCFDictionaryCreateMutableCopy();
        long long v9 = a2[1];
        *(_OWORD *)&v18.CGFloat a = *a2;
        *(_OWORD *)&v18.CGFloat c = v9;
        *(_OWORD *)&v18.tCGFloat x = a2[2];
        CGRectApplyAffineTransform(v23, &v18);
        FigCFDictionarySetCGRect();
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          long long v10 = a2[1];
          *(_OWORD *)&v18.CGFloat a = *a2;
          *(_OWORD *)&v18.CGFloat c = v10;
          *(_OWORD *)&v18.tCGFloat x = a2[2];
          CGRectApplyAffineTransform(v22, &v18);
          FigCFDictionarySetCGRect();
        }
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          long long v11 = a2[1];
          *(_OWORD *)&v18.CGFloat a = *a2;
          *(_OWORD *)&v18.CGFloat c = v11;
          *(_OWORD *)&v18.tCGFloat x = a2[2];
          CGRectApplyAffineTransform(v21, &v18);
          FigCFDictionarySetCGRect();
        }
        if (FigCFDictionaryGetInt32IfPresent())
        {
          int v12 = HIDWORD(v20);
          if (a4) {
            int v12 = -HIDWORD(v20);
          }
          FigCaptureNormalizeAngle(v12 + a3);
          FigCFDictionarySetInt32();
        }
        if (FigCFDictionaryGetInt32IfPresent())
        {
          if (a4) {
            int v13 = -(int)v20;
          }
          else {
            int v13 = v20;
          }
          FigCaptureNormalizeAngle(v13);
          FigCFDictionarySetInt32();
        }
        if (FigCFDictionaryGetInt32IfPresent())
        {
          FigCaptureNormalizeAngle(v19);
          FigCFDictionarySetInt32();
        }
        [v16 addObject:MutableCopy];
        CFRelease(MutableCopy);
      }
      ++v7;
    }
    while ([a1 count] > v7);
  }
  return v16;
}

void *BWCreateCorrectedDetectedObjectsArray(void *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  *(double *)&v24[16] = a8;
  *(double *)&v24[24] = a9;
  *(double *)uint64_t v24 = a6;
  *(double *)&v24[8] = a7;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = [a1 count];
  int v13 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v12];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v14 = [a1 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v26 != v16) {
          objc_enumerationMutation(a1);
        }
        CGAffineTransform v18 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          v31.origin.CGFloat x = FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
          double width = v31.size.width;
          double height = v31.size.height;
          CGRect v32 = CGRectIntersection(v31, *(CGRect *)v24);
          if (v32.size.width * v32.size.height > width * height * 0.5)
          {
            CGRect v21 = (void *)[v18 mutableCopy];
            FigCFDictionarySetCGRect();
            [v13 addObject:v21];
          }
        }
      }
      uint64_t v15 = [a1 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v15);
  }
  return v13;
}

uint64_t BWCreateSampleBufferFromSemanticMasksDictionary(void *a1, CMTime *a2, const void *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CMAttachmentBearerRef target = 0;
  *a4 = 0;
  if (!a1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  CMTime v33 = *a2;
  uint64_t v7 = mscsnu_createSampleBufferWithPTS(&v33, &target);
  if (v7)
  {
    uint64_t v21 = v7;
    fig_log_get_emitter();
    FigDebugAssert3();
    CMAttachmentBearerRef v9 = target;
    if (!target) {
      return v21;
    }
    goto LABEL_23;
  }
  CGRect v23 = a4;
  uint64_t v8 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v25 = (const void *)*MEMORY[0x1E4F54128];
  objc_msgSend(v8, "setObject:forKeyedSubscript:", a3);
  CMAttachmentBearerRef v9 = target;
  CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4F53070];
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], v8, 1u);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v11 = [a1 countByEnumeratingWithState:&v29 objects:v35 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v30;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_5:
    uint64_t v14 = 0;
    while (1)
    {
      if (*(void *)v30 != v13) {
        objc_enumerationMutation(a1);
      }
      uint64_t v15 = *(void *)(*((void *)&v29 + 1) + 8 * v14);
      CMAttachmentBearerRef cf = 0;
      uint64_t v16 = (__CVBuffer *)[a1 objectForKeyedSubscript:v15];
      CFTypeRef v27 = 0;
      CMTime v33 = *a2;
      uint64_t v17 = BWSampleBufferCreateFromPixelBuffer(v16, (uint64_t)&v33, &v27, (CMSampleBufferRef *)&cf);
      if (v17) {
        break;
      }
      CFTypeRef v18 = CVBufferCopyAttachment(v16, v10, 0);
      if (v18)
      {
        CFDictionaryRef v19 = (const __CFDictionary *)CFAutorelease(v18);
        if (v19)
        {
          MutableCopCGFloat y = CFDictionaryCreateMutableCopy(allocator, 0, v19);
          CFDictionarySetValue(MutableCopy, v25, a3);
          CMSetAttachment(cf, v10, MutableCopy, 1u);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
          CMRemoveAttachment(v16, v10);
        }
      }
      BWSampleBufferSetAttachedMedia(v9, v15, (uint64_t)cf);
      if (cf) {
        CFRelease(cf);
      }
      if (v27) {
        CFRelease(v27);
      }
      if (v12 == ++v14)
      {
        uint64_t v12 = [a1 countByEnumeratingWithState:&v29 objects:v35 count:16];
        if (v12) {
          goto LABEL_5;
        }
        goto LABEL_20;
      }
    }
    uint64_t v21 = v17;
    fig_log_get_emitter();
    FigDebugAssert3();
    if (!v9) {
      return v21;
    }
LABEL_23:
    CFRelease(v9);
    return v21;
  }
LABEL_20:
  uint64_t v21 = 0;
  *CGRect v23 = v9;
  return v21;
}

uint64_t mscsnu_createSampleBufferWithPTS(CMTime *a1, void *a2)
{
  CMSampleBufferRef v8 = 0;
  *(_OWORD *)&sampleTimingArray.duration.xpc_object_t value = *MEMORY[0x1E4F1F9F8];
  sampleTimingArray.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  sampleTimingArray.presentationTimeStamp = *a1;
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
  uint64_t v3 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, &v8);
  CMSampleBufferRef v4 = v8;
  if (!v3)
  {
    if (v8)
    {
      CFTypeRef v5 = CFRetain(v8);
      CMSampleBufferRef v4 = v8;
    }
    else
    {
      CFTypeRef v5 = 0;
    }
    *a2 = v5;
  }
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

uint64_t BWCreateSampleBufferWithDetectedObjectsInfo(uint64_t a1, CMTime *a2, uint64_t a3, void *a4)
{
  CMTime v11 = *a2;
  CMAttachmentBearerRef target = 0;
  uint64_t v7 = mscsnu_createSampleBufferWithPTS(&v11, &target);
  if (v7)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    CMSampleBufferRef v8 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    [v8 setObject:a3 forKeyedSubscript:*MEMORY[0x1E4F54128]];
    [v8 setObject:a1 forKeyedSubscript:*MEMORY[0x1E4F53DC8]];
    CMAttachmentBearerRef v9 = target;
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], v8, 1u);
    *a4 = v9;
  }
  return v7;
}

uint64_t BWCreateSampleBufferWithEyeReliefResultDictionary(const void *a1, CMTime *a2, uint64_t a3, void *a4)
{
  CMTime v11 = *a2;
  CMAttachmentBearerRef target = 0;
  uint64_t v7 = mscsnu_createSampleBufferWithPTS(&v11, &target);
  if (v7)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    CMSampleBufferRef v8 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    [v8 setObject:a3 forKeyedSubscript:*MEMORY[0x1E4F54128]];
    CMAttachmentBearerRef v9 = target;
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53020], a1, 1u);
    CMSetAttachment(v9, (CFStringRef)*MEMORY[0x1E4F53070], v8, 1u);
    *a4 = v9;
  }
  return v7;
}

void BWAddMinimumValidBufferRectForGDCIfNeededToSampleBuffer(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  if (a4) {
    CMSampleBufferRef v8 = *a4;
  }
  else {
    CMSampleBufferRef v8 = 0;
  }
  double ValidBufferRect = FigCaptureMetadataUtilitiesGetValidBufferRect();
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  v37.origin.CGFloat x = FigCaptureMetadataUtilitiesGetFinalCropRect();
  CGFloat x = v37.origin.x;
  CGFloat y = v37.origin.y;
  CGFloat width = v37.size.width;
  CGFloat height = v37.size.height;
  v41.origin.CGFloat x = 0.0;
  v41.origin.CGFloat y = 0.0;
  v41.size.CGFloat width = 1.0;
  v41.size.CGFloat height = 1.0;
  BOOL v20 = CGRectEqualToRect(v37, v41);
  int v21 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53320]), "BOOLValue");
  int v22 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53328]), "intValue");
  if (!v20 && v21 && v22 != 1)
  {
    memset(v36, 0, sizeof(v36));
    if ([MEMORY[0x1E4F55EB0] getGDCParams:v36 cameraInfo:a3 metadata:a1]) {
      goto LABEL_21;
    }
    if (v8)
    {
      if ([v8 updateGDCParams:v36])
      {
LABEL_21:
        fig_log_get_emitter();
        FigDebugAssert3();
        if (!a4) {
          goto LABEL_22;
        }
        goto LABEL_19;
      }
    }
    else
    {
      CMSampleBufferRef v8 = (void *)[objc_alloc(MEMORY[0x1E4F55EB0]) initWithGDCParams:v36];
      if (!v8) {
        goto LABEL_21;
      }
    }
    objc_msgSend(v8, "preGDCCropRectFromRect:", FigCaptureMetadataUtilitiesNormalizedSensorRectFromNormalizedBufferRect(a1, a2, x, y, width, height));
    double v28 = FigCaptureMetadataUtilitiesNormalizedBufferRectFromNormalizedSensorRect(a1, a2, v24, v25, v26, v27);
    FigCaptureMetadataUtilitiesDenormalizeCropRect(v28, v29, v30, v31);
    CGFloat v32 = v38.origin.x;
    CGFloat v33 = v38.origin.y;
    CGFloat v34 = v38.size.width;
    CGFloat v35 = v38.size.height;
    if (!CGRectIsNull(v38))
    {
      v39.origin.CGFloat x = ValidBufferRect;
      v39.origin.CGFloat y = v11;
      v39.size.CGFloat width = v13;
      v39.size.CGFloat height = v15;
      v42.origin.CGFloat x = v32;
      v42.origin.CGFloat y = v33;
      v42.size.CGFloat width = v34;
      v42.size.CGFloat height = v35;
      if (!CGRectContainsRect(v39, v42))
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      FigCaptureMetadataUtilitiesRoundDenormalizedRectToRawSensorCFABoundary(a1);
      v43.origin.CGFloat x = ValidBufferRect;
      v43.origin.CGFloat y = v11;
      v43.size.CGFloat width = v13;
      v43.size.CGFloat height = v15;
      CGRectIntersection(v40, v43);
      FigCFDictionarySetCGRect();
    }
  }
  if (!a4)
  {
LABEL_22:

    return;
  }
LABEL_19:
  if (!*a4) {
    *a4 = v8;
  }
}

void dmc_removeAttachmentFromPixelBufferIfPrivate(const __CFString *cf2, uint64_t a2, const void *a3)
{
  uint64_t v5 = 0;
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *MEMORY[0x1E4F24A90];
  v8[0] = *MEMORY[0x1E4F24A10];
  v8[1] = v6;
  uint64_t v7 = *MEMORY[0x1E4F24BC8];
  v8[2] = *MEMORY[0x1E4F24C18];
  v8[3] = v7;
  while (!CFEqual((CFTypeRef)v8[v5], cf2))
  {
    if (++v5 == 4)
    {
      CMRemoveAttachment(a3, cf2);
      return;
    }
  }
}

uint64_t bweis_storageTypeLengthInBytes(int a1)
{
  uint64_t result = 4;
  if (a1 <= 131079)
  {
    if (a1 == 65552) {
      return 2;
    }
    if (a1 != 65568) {
      return 0;
    }
  }
  else
  {
    if (a1 == 131080) {
      return 1;
    }
    if (a1 != 131104) {
      return a1 == 262152;
    }
  }
  return result;
}

uint64_t bweis_storageLengthInBytes(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 160);
  uint64_t v2 = 4;
  if (v1 <= 131079)
  {
    if (v1 == 65552)
    {
      uint64_t v2 = 2;
      return *(void *)(a1 + 104)
           * *(void *)(a1 + 112)
           * *(void *)(a1 + 96)
           * *(void *)(a1 + 88)
           * *(void *)(a1 + 80)
           * v2;
    }
    if (v1 != 65568) {
      goto LABEL_8;
    }
  }
  else
  {
    if (v1 == 131080)
    {
LABEL_5:
      uint64_t v2 = 1;
      return *(void *)(a1 + 104)
           * *(void *)(a1 + 112)
           * *(void *)(a1 + 96)
           * *(void *)(a1 + 88)
           * *(void *)(a1 + 80)
           * v2;
    }
    if (v1 != 131104)
    {
      if (v1 == 262152) {
        goto LABEL_5;
      }
LABEL_8:
      uint64_t v2 = 0;
    }
  }
  return *(void *)(a1 + 104)
       * *(void *)(a1 + 112)
       * *(void *)(a1 + 96)
       * *(void *)(a1 + 88)
       * *(void *)(a1 + 80)
       * v2;
}

CFStringRef FigCaptureSessionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptureSession %p]", a1);
}

void sub_1A5BAC578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A5BAC6C4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A5BAC840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5BAD370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t CMIOExtensionFigCaptureDeviceCreate(uint64_t a1, void *a2, CFTypeRef *a3)
{
  if (!objc_opt_class() || !objc_opt_class()) {
    return 4294954514;
  }
  uint64_t v6 = (void *)[MEMORY[0x1E4F22120] sharedInstance];
  return CMIOExtensionFigCaptureDeviceCreateInternal(a1, a2, v6, a3);
}

uint64_t CMIOExtensionFigCaptureDeviceCreateInternal(uint64_t a1, void *a2, void *a3, CFTypeRef *a4)
{
  void v47[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  FigCaptureDeviceGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7)
  {
    uint64_t v21 = v7;
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)uint64_t DerivedStorage = [a2 copy];
    *(_DWORD *)(DerivedStorage + 2_Block_object_dispose(&STACK[0x458], 8) = 0;
    HostTimeClocuint64_t k = CMClockGetHostTimeClock();
    *(void *)(DerivedStorage + 32) = CFRetain(HostTimeClock);
    double v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x458], 8) = dispatch_queue_create("com.apple.extension.propertyqueue", v10);
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    CGFloat v11 = objc_msgSend(a3, "devices", 0);
    uint64_t v12 = [v11 countByEnumeratingWithState:&v27 objects:v37 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v28;
      while (2)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v28 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "deviceID"), "UUIDString"), "isEqualToString:", a2))
          {
            *(void *)(DerivedStorage + 16) = v16;
            goto LABEL_12;
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v27 objects:v37 count:16];
        if (v13) {
          continue;
        }
        break;
      }
    }
LABEL_12:
    if (*(void *)(DerivedStorage + 16))
    {
      uint64_t v17 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      v46[0] = @"PropertyType";
      v46[1] = @"ReadWriteStatus";
      v47[0] = @"Collection";
      v47[1] = @"ReadOnly";
      objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v47, v46, 2), @"StreamArray");
      v44[0] = @"PropertyType";
      v44[1] = @"ReadWriteStatus";
      v45[0] = @"Clock";
      v45[1] = @"ReadOnly";
      objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v45, v44, 2), @"Clock");
      v42[0] = @"PropertyType";
      v42[1] = @"ReadWriteStatus";
      v43[0] = @"String";
      v43[1] = @"ReadOnly";
      objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v43, v42, 2), @"CMIOExtensionDeviceID");
      v40[0] = @"PropertyType";
      v40[1] = @"ReadWriteStatus";
      v41[0] = @"Collection";
      v41[1] = @"ReadOnly";
      objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v41, v40, 2), @"CMIOExtensionPropertyArray");
      v38[0] = @"PropertyType";
      v38[1] = @"ReadWriteStatus";
      v39[0] = @"Collection";
      v39[1] = @"ReadOnly";
      objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v39, v38, 2), @"SupportedPropertiesDictionary");
      dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(DerivedStorage + 48));
      CFTypeRef v18 = *(NSObject **)(DerivedStorage + 48);
      block.receiver = (id)MEMORY[0x1E4F143A8];
      block.super_class = (Class)3221225472;
      CGFloat v33 = __cmioefcd_copySupportedPropertiesDict_block_invoke;
      CGFloat v34 = &unk_1E5C24F10;
      CGFloat v35 = v17;
      uint64_t v36 = DerivedStorage;
      dispatch_async_and_wait(v18, &block);
      *(void *)(DerivedStorage + 40) = [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v17];
      CFDictionaryRef v19 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:1];
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 28));
      BOOL v20 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 16), "streams"), "firstObject");
      block.receiver = 0;
      uint64_t v21 = CMIOExtensionFigCaptureStreamCreate(*MEMORY[0x1E4F1CF80], *(void **)(DerivedStorage + 16), v20, (CFTypeRef *)&block.receiver);
      if (!v21)
      {
        [v19 addObject:block.receiver];
        if (block.receiver) {
          CFRelease(block.receiver);
        }
        *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x458], 8) = v19;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 28));

      if (!v21)
      {
        int v22 = [FigCaptureCMIOExtensionSessionDeviceDelegate alloc];
        if (v22)
        {
          CFTypeRef v23 = cf;
          block.receiver = v22;
          block.super_class = (Class)FigCaptureCMIOExtensionSessionDeviceDelegate;
          CGFloat v24 = objc_msgSendSuper2(&block, sel_init);
          CGFloat v25 = v24;
          if (v24) {
            v24[1] = v23;
          }
        }
        else
        {
          CGFloat v25 = 0;
        }
        *(void *)(DerivedStorage + 56) = v25;
        objc_msgSend(*(id *)(DerivedStorage + 16), "setDelegate:");
        uint64_t v21 = 0;
        *a4 = cf;
        return v21;
      }
    }
    else
    {
      uint64_t v21 = 4294954516;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

uint64_t CMIOExtensionFigCaptureDeviceInvalidate()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 24))
  {
    uint64_t v1 = DerivedStorage;
    uint64_t v2 = (os_unfair_lock_s *)(DerivedStorage + 28);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 28));
    *(unsigned char *)(v1 + 24) = 1;

    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v3 = *(void **)(v1 + 8);
    uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8 * i);
          if (v8)
          {
            uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v9) {
              uint64_t v10 = v9;
            }
            else {
              uint64_t v10 = 0;
            }
            CGFloat v11 = *(void (**)(uint64_t))(v10 + 24);
            if (v11) {
              v11(v8);
            }
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v5);
    }

    os_unfair_lock_unlock(v2);
  }
  return 0;
}

void CMIOExtensionFigCaptureDeviceFinalize()
{
  CMIOExtensionFigCaptureDeviceInvalidate();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 32) = 0;
  }
}

uint64_t CMIOExtensionFigCaptureDeviceCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  long long v27 = &v26;
  uint64_t v28 = 0x2020000000;
  int v29 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ([*(id *)(DerivedStorage + 40) objectForKey:a2])
  {
    if (FigCFEqual())
    {
      CFTypeRef v7 = *(CFTypeRef *)(DerivedStorage + 40);
      if (v7) {
LABEL_16:
      }
        CFTypeRef v7 = CFRetain(v7);
    }
    else if (FigCFEqual())
    {
      CFTypeRef v7 = (CFTypeRef)[*(id *)(DerivedStorage + 8) copy];
    }
    else if (FigCFEqual())
    {
      CFTypeRef v7 = *(CFTypeRef *)(DerivedStorage + 32);
      if (v7) {
        goto LABEL_16;
      }
    }
    else
    {
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          uint64_t v20 = 0;
          uint64_t v21 = (unsigned __int8 *)&v20;
          uint64_t v22 = 0x3052000000;
          CFTypeRef v23 = __Block_byref_object_copy__22;
          CGFloat v24 = __Block_byref_object_dispose__22;
          id v25 = 0;
          id v25 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(DerivedStorage + 48));
          uint64_t v10 = *(NSObject **)(DerivedStorage + 48);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke;
          block[3] = &unk_1E5C24A38;
          block[4] = &v20;
          void block[5] = DerivedStorage;
          dispatch_async_and_wait(v10, block);
          *a4 = *((void *)v21 + 5);
        }
        else
        {
          uint64_t v11 = cmioefcd_cmioExtensionPropertyForDevicePropertyKey(a2);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = a2;
          }
          dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(DerivedStorage + 48));
          uint64_t v20 = 0;
          uint64_t v21 = (unsigned __int8 *)&v20;
          uint64_t v22 = 0x2020000000;
          LOBYTE(v23) = 1;
          long long v13 = dispatch_semaphore_create(0);
          id v14 = objc_alloc(MEMORY[0x1E4F1CAD0]);
          v30[0] = v12;
          long long v15 = objc_msgSend(v14, "initWithArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v30, 1));
          long long v16 = *(NSObject **)(DerivedStorage + 48);
          v18[0] = MEMORY[0x1E4F143A8];
          v18[1] = 3221225472;
          void v18[2] = __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_4;
          v18[3] = &unk_1E5C27E10;
          v18[8] = DerivedStorage;
          v18[9] = v12;
          v18[6] = &v20;
          v18[7] = &v26;
          v18[10] = a4;
          void v18[4] = v15;
          v18[5] = v13;
          dispatch_async(v16, v18);
          dispatch_time_t v17 = dispatch_time(0, 5000000000);
          dispatch_semaphore_wait(v13, v17);
          atomic_store(0, v21 + 24);
        }
        _Block_object_dispose(&v20, 8);
        goto LABEL_9;
      }
      CFTypeRef v7 = *(CFTypeRef *)DerivedStorage;
      if (*(void *)DerivedStorage) {
        goto LABEL_16;
      }
    }
    *a4 = v7;
LABEL_9:
    uint64_t v8 = *((unsigned int *)v27 + 6);
    goto LABEL_10;
  }
  uint64_t v8 = 4294954509;
LABEL_10:
  _Block_object_dispose(&v26, 8);
  return v8;
}

void sub_1A5BAF730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t CMIOExtensionFigCaptureDeviceSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  int v28 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ([*(id *)(DerivedStorage + 40) objectForKey:a2])
  {
    uint64_t v6 = cmioefcd_cmioExtensionPropertyForDevicePropertyKey(a2);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = a2;
    }
    if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 16), "availableProperties"), "containsObject:", v7))
    {
      uint64_t v31 = v7;
      v32[0] = a3;
      uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
      uint64_t v21 = 0;
      uint64_t v22 = (unsigned __int8 *)&v21;
      uint64_t v23 = 0x2020000000;
      char v24 = 1;
      uint64_t v9 = dispatch_semaphore_create(0);
      uint64_t v10 = *(void **)(DerivedStorage + 16);
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = __CMIOExtensionFigCaptureDeviceSetProperty_block_invoke;
      v20[3] = &unk_1E5C27E38;
      v20[5] = &v25;
      void v20[6] = &v21;
      void v20[4] = v9;
      [v10 setPropertyValues:v8 reply:v20];
      dispatch_time_t v11 = dispatch_time(0, 5000000000);
      dispatch_semaphore_wait(v9, v11);
      atomic_store(0, v22 + 24);
    }
    else
    {
      if (!objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 16), "streams"), "count"))
      {
LABEL_15:
        uint64_t v12 = *((unsigned int *)v26 + 6);
        goto LABEL_16;
      }
      long long v13 = dispatch_semaphore_create(0);
      uint64_t v21 = 0;
      uint64_t v22 = (unsigned __int8 *)&v21;
      uint64_t v23 = 0x2020000000;
      char v24 = 1;
      id v14 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 16), "streams"), "firstObject");
      if (objc_msgSend((id)objc_msgSend(v14, "availableProperties"), "containsObject:", v7))
      {
        uint64_t v29 = v7;
        uint64_t v30 = a3;
        uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3221225472;
        v19[2] = __CMIOExtensionFigCaptureDeviceSetProperty_block_invoke_2;
        v19[3] = &unk_1E5C27E38;
        v19[5] = &v25;
        void v19[6] = &v21;
        void v19[4] = v13;
        [v14 setPropertyValues:v15 reply:v19];
      }
      else
      {
        unsigned __int8 v16 = atomic_load(v22 + 24);
        if (v16) {
          dispatch_semaphore_signal(v13);
        }
      }
      dispatch_time_t v17 = dispatch_time(0, 5000000000);
      dispatch_semaphore_wait(v13, v17);
      atomic_store(0, v22 + 24);
    }
    _Block_object_dispose(&v21, 8);
    goto LABEL_15;
  }
  uint64_t v12 = 4294954509;
LABEL_16:
  _Block_object_dispose(&v25, 8);
  return v12;
}

void sub_1A5BAFA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 136), 8);
  _Unwind_Resume(a1);
}

void __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  uint64_t v12 = 0;
  long long v13 = (unsigned __int8 *)&v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 1;
  if ([*(id *)(*(void *)(a1 + 40) + 16) availableProperties]) {
    dispatch_group_enter(v2);
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "streams"), "count"))
  {
    uint64_t v3 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "streams"), "firstObject");
    if ([v3 availableProperties]) {
      dispatch_group_enter(v2);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void **)(*(void *)(a1 + 40) + 16);
  uint64_t v5 = [v4 availableProperties];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_2;
  _OWORD v11[3] = &unk_1E5C27DC0;
  uint64_t v6 = *(void *)(a1 + 32);
  v11[5] = &v12;
  v11[6] = v6;
  void v11[4] = v2;
  [v4 propertyStatesForProperties:v5 reply:v11];
  if (v3)
  {
    uint64_t v7 = [v3 availableProperties];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_3;
    v10[3] = &unk_1E5C27DC0;
    uint64_t v8 = *(void *)(a1 + 32);
    v10[5] = &v12;
    v10[6] = v8;
    v10[4] = v2;
    [v3 propertyStatesForProperties:v7 reply:v10];
  }
  dispatch_time_t v9 = dispatch_time(0, 5000000000);
  dispatch_group_wait(v2, v9);
  atomic_store(0, v13 + 24);

  _Block_object_dispose(&v12, 8);
}

void sub_1A5BAFC50(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_2(void *a1, void *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1[5] + 8) + 24));
  if (v2)
  {
    cmioefcd_addSupportedPropertiesWithValue(a2, *(void **)(*(void *)(a1[6] + 8) + 40));
    uint64_t v4 = a1[4];
    dispatch_group_leave(v4);
  }
}

uint64_t cmioefcd_addSupportedPropertiesWithValue(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  obuint64_t j = (id)[a1 allKeys];
  uint64_t result = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v17;
    uint64_t v14 = @"CMIOExtensionPropertyAttributeMaxValue";
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v16 + 1) + 8 * v7);
        dispatch_time_t v9 = objc_msgSend(a1, "objectForKeyedSubscript:", v8, v14);
        id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        [v10 setObject:v8 forKeyedSubscript:@"CMIOExtensionPropertyName"];
        if ([v9 value]) {
          objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend(v9, "value"), @"CMIOExtensionPropertyValue");
        }
        if (![v9 attributes])
        {
          uint64_t v12 = v10;
          uint64_t v11 = MEMORY[0x1E4F1CC38];
          long long v13 = @"CMIOExtensionPropertyAttributeSettable";
          goto LABEL_14;
        }
        objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend((id)objc_msgSend(v9, "attributes"), "isReadOnly")), @"CMIOExtensionPropertyAttributeSettable");
        if (objc_msgSend((id)objc_msgSend(v9, "attributes"), "minValue")) {
          objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "attributes"), "minValue"), @"CMIOExtensionPropertyAttributeMinValue");
        }
        if (objc_msgSend((id)objc_msgSend(v9, "attributes"), "maxValue"))
        {
          uint64_t v11 = objc_msgSend((id)objc_msgSend(v9, "attributes"), "minValue");
          uint64_t v12 = v10;
          long long v13 = v14;
LABEL_14:
          [v12 setObject:v11 forKeyedSubscript:v13];
        }
        [a2 addObject:v10];
        ++v7;
      }
      while (v5 != v7);
      uint64_t result = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_3(void *a1, void *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1[5] + 8) + 24));
  if (v2)
  {
    cmioefcd_addSupportedPropertiesWithValue(a2, *(void **)(*(void *)(a1[6] + 8) + 40));
    uint64_t v4 = a1[4];
    dispatch_group_leave(v4);
  }
}

uint64_t cmioefcd_cmioExtensionPropertyForDevicePropertyKey(uint64_t a1)
{
  if (cmioefcd_cmioExtensionPropertyForDevicePropertyKey_onceToken != -1)
  {
    dispatch_once(&cmioefcd_cmioExtensionPropertyForDevicePropertyKey_onceToken, &__block_literal_global_56);
    if (a1) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!a1) {
    return 0;
  }
LABEL_3:
  unsigned __int8 v2 = (void *)cmioefcd_cmioExtensionPropertyForDevicePropertyKey_sDevicePropertyKeysToCMIOExtensionProperties;
  return [v2 objectForKeyedSubscript:a1];
}

intptr_t __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_4(uint64_t a1)
{
  int v2 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 64) + 16), "availableProperties"), "containsObject:", *(void *)(a1 + 72));
  uint64_t v3 = *(void **)(*(void *)(a1 + 64) + 16);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v17 = MEMORY[0x1E4F143A8];
    uint64_t v18 = 3221225472;
    long long v19 = __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_5;
    uint64_t v20 = &unk_1E5C27DE8;
    uint64_t v22 = *(void *)(a1 + 56);
    int8x16_t v23 = vextq_s8(*(int8x16_t *)(a1 + 72), *(int8x16_t *)(a1 + 72), 8uLL);
    long long v21 = *(_OWORD *)(a1 + 40);
    uint64_t v5 = &v17;
    return objc_msgSend(v3, "propertyStatesForProperties:reply:", v4, v5, v10, v11, v12, v13, v14, v15, *(_OWORD *)&v16, v17, v18, v19, v20, v21, v22, *(_OWORD *)&v23);
  }
  intptr_t result = objc_msgSend((id)objc_msgSend(v3, "streams"), "count");
  if (result)
  {
    uint64_t v7 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 64) + 16), "streams"), "firstObject");
    intptr_t result = objc_msgSend((id)objc_msgSend(v7, "availableProperties"), "containsObject:", *(void *)(a1 + 72));
    if (result)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v10 = MEMORY[0x1E4F143A8];
      uint64_t v11 = 3221225472;
      uint64_t v12 = __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_6;
      long long v13 = &unk_1E5C27DE8;
      uint64_t v15 = *(void *)(a1 + 56);
      int8x16_t v16 = vextq_s8(*(int8x16_t *)(a1 + 72), *(int8x16_t *)(a1 + 72), 8uLL);
      long long v14 = *(_OWORD *)(a1 + 40);
      uint64_t v5 = &v10;
      uint64_t v3 = v7;
      return objc_msgSend(v3, "propertyStatesForProperties:reply:", v4, v5, v10, v11, v12, v13, v14, v15, *(_OWORD *)&v16, v17, v18, v19, v20, v21, v22, *(_OWORD *)&v23);
    }
  }
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
  if (v8)
  {
    dispatch_time_t v9 = *(NSObject **)(a1 + 40);
    return dispatch_semaphore_signal(v9);
  }
  return result;
}

intptr_t __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_5(intptr_t result, void *a2, void *a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(result + 40) + 8) + 24));
  if (v3)
  {
    intptr_t v5 = result;
    *(_DWORD *)(*(void *)(*(void *)(result + 48) + 8) + 24) = [a3 code];
    CFTypeRef v6 = (CFTypeRef)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *(void *)(v5 + 64)), "value");
    if (v6) {
      CFTypeRef v6 = CFRetain(v6);
    }
    **(void **)(v5 + 56) = v6;
    uint64_t v7 = *(NSObject **)(v5 + 32);
    return dispatch_semaphore_signal(v7);
  }
  return result;
}

intptr_t __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_6(intptr_t result, void *a2, void *a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(result + 40) + 8) + 24));
  if (v3)
  {
    intptr_t v5 = result;
    *(_DWORD *)(*(void *)(*(void *)(result + 48) + 8) + 24) = [a3 code];
    CFTypeRef v6 = (CFTypeRef)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *(void *)(v5 + 64)), "value");
    if (v6) {
      CFTypeRef v6 = CFRetain(v6);
    }
    **(void **)(v5 + 56) = v6;
    uint64_t v7 = *(NSObject **)(v5 + 32);
    return dispatch_semaphore_signal(v7);
  }
  return result;
}

uint64_t __cmioefcd_cmioExtensionPropertyForDevicePropertyKey_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v1 = CMIOExtensionPropertyFromPropertyAddress();
  uint64_t result = objc_msgSend(v0, "initWithObjectsAndKeys:", @"CMIOExtensionPropertyDeviceHidden", @"Hidden", @"CMIOExtensionPropertyDeviceReadyToUnhide", @"ReadyToUnhide", @"CMIOExtensionPropertyRapportDeviceUniqueID", @"ContinuityDeviceUniqueID", @"DockedTrackingActive", @"DockedTrackingActive", v1, @"BatteryState", CMIOExtensionPropertyFromPropertyAddress(), @"BatteryLevel", 0);
  cmioefcd_cmioExtensionPropertyForDevicePropertyKey_sDevicePropertyKeysToCMIOExtensionProperties = result;
  return result;
}

intptr_t __CMIOExtensionFigCaptureDeviceSetProperty_block_invoke(void *a1, void *a2)
{
  intptr_t result = [a2 code];
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = result;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)(a1[6] + 8) + 24));
  if (v4)
  {
    intptr_t v5 = a1[4];
    return dispatch_semaphore_signal(v5);
  }
  return result;
}

intptr_t __CMIOExtensionFigCaptureDeviceSetProperty_block_invoke_2(void *a1, void *a2)
{
  intptr_t result = [a2 code];
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = result;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)(a1[6] + 8) + 24));
  if (v4)
  {
    intptr_t v5 = a1[4];
    return dispatch_semaphore_signal(v5);
  }
  return result;
}

uint64_t CMIOExtensionFigCaptureDeviceRequestControlOfStreams()
{
  return 0;
}

uint64_t CMIOExtensionFigCaptureDeviceRelinquishControlOfStreams()
{
  return 0;
}

void __cmioefcd_copySupportedPropertiesDict_block_invoke(uint64_t a1)
{
  int v2 = dispatch_group_create();
  uint64_t v10 = 0;
  uint64_t v11 = (unsigned __int8 *)&v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 1;
  if ([*(id *)(*(void *)(a1 + 40) + 16) availableProperties]) {
    dispatch_group_enter(v2);
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "streams"), "count"))
  {
    unsigned __int8 v3 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "streams"), "firstObject");
    if ([v3 availableProperties]) {
      dispatch_group_enter(v2);
    }
  }
  else
  {
    unsigned __int8 v3 = 0;
  }
  unsigned __int8 v4 = *(void **)(*(void *)(a1 + 40) + 16);
  uint64_t v5 = [v4 availableProperties];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __cmioefcd_copySupportedPropertiesDict_block_invoke_2;
  v9[3] = &unk_1E5C27E60;
  v9[5] = v2;
  v9[6] = &v10;
  v9[4] = *(void *)(a1 + 32);
  [v4 propertyStatesForProperties:v5 reply:v9];
  if (v3)
  {
    uint64_t v6 = [v3 availableProperties];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __cmioefcd_copySupportedPropertiesDict_block_invoke_3;
    v8[3] = &unk_1E5C27E60;
    void v8[5] = v2;
    v8[6] = &v10;
    v8[4] = *(void *)(a1 + 32);
    [v3 propertyStatesForProperties:v6 reply:v8];
  }
  dispatch_time_t v7 = dispatch_time(0, 5000000000);
  dispatch_group_wait(v2, v7);
  atomic_store(0, v11 + 24);

  _Block_object_dispose(&v10, 8);
}

void sub_1A5BB0668(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __cmioefcd_copySupportedPropertiesDict_block_invoke_2(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
  if (v2)
  {
    cmioefcd_addSupportedProperty(a2, *(void **)(a1 + 32));
    unsigned __int8 v4 = *(NSObject **)(a1 + 40);
    dispatch_group_leave(v4);
  }
}

uint64_t cmioefcd_addSupportedProperty(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  obuint64_t j = (id)[a1 allKeys];
  uint64_t result = [obj countByEnumeratingWithState:&v15 objects:v21 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v16;
    uint64_t v11 = @"Collection";
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v16 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v15 + 1) + 8 * v5);
        dispatch_time_t v7 = objc_msgSend(a1, "objectForKeyedSubscript:", v6, v11);
        v19[0] = @"PropertyType";
        if (cmioefcd_devicePropertyTypeForCMIOExtensionProperty_onceToken != -1) {
          dispatch_once(&cmioefcd_devicePropertyTypeForCMIOExtensionProperty_onceToken, &__block_literal_global_82);
        }
        if ([(id)cmioefcd_devicePropertyTypeForCMIOExtensionProperty_sDevicePropertyTypeByCMIOExtensionPropertyNames objectForKeyedSubscript:v6])
        {
          uint64_t v8 = [(id)cmioefcd_devicePropertyTypeForCMIOExtensionProperty_sDevicePropertyTypeByCMIOExtensionPropertyNames objectForKeyedSubscript:v6];
        }
        else if (v6)
        {
          uint64_t v8 = (uint64_t)v11;
        }
        else
        {
          uint64_t v8 = 0;
        }
        v19[1] = @"ReadWriteStatus";
        v20[0] = v8;
        if (objc_msgSend((id)objc_msgSend(v7, "attributes"), "isReadOnly")) {
          dispatch_time_t v9 = @"ReadOnly";
        }
        else {
          dispatch_time_t v9 = @"ReadWrite";
        }
        v20[1] = v9;
        uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:2];
        if (cmioefcd_devicePropertyKeyForCMIOExtensionProperty_onceToken != -1) {
          dispatch_once(&cmioefcd_devicePropertyKeyForCMIOExtensionProperty_onceToken, &__block_literal_global_84);
        }
        if ([(id)cmioefcd_devicePropertyKeyForCMIOExtensionProperty_sDevicePropertyKeysByCMIOExtensionPropertyNames objectForKeyedSubscript:v6])
        {
          uint64_t v6 = [(id)cmioefcd_devicePropertyKeyForCMIOExtensionProperty_sDevicePropertyKeysByCMIOExtensionPropertyNames objectForKeyedSubscript:v6];
        }
        [a2 setObject:v10 forKeyedSubscript:v6];
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [obj countByEnumeratingWithState:&v15 objects:v21 count:16];
      uint64_t v3 = result;
    }
    while (result);
  }
  return result;
}

void __cmioefcd_copySupportedPropertiesDict_block_invoke_3(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
  if (v2)
  {
    cmioefcd_addSupportedProperty(a2, *(void **)(a1 + 32));
    uint64_t v4 = *(NSObject **)(a1 + 40);
    dispatch_group_leave(v4);
  }
}

uint64_t __cmioefcd_devicePropertyTypeForCMIOExtensionProperty_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t result = objc_msgSend(v0, "initWithObjectsAndKeys:", *MEMORY[0x1E4F220D8], @"Boolean", @"CMIOExtensionPropertyRapportDeviceUniqueID", 0);
  cmioefcd_devicePropertyTypeForCMIOExtensionProperty_sDevicePropertyTypeByCMIOExtensionPropertyNames = result;
  return result;
}

uint64_t __cmioefcd_devicePropertyKeyForCMIOExtensionProperty_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t result = objc_msgSend(v0, "initWithObjectsAndKeys:", @"DockedTrackingActive", *MEMORY[0x1E4F220D8], @"ContinuityDeviceUniqueID", @"CMIOExtensionPropertyRapportDeviceUniqueID", 0);
  cmioefcd_devicePropertyKeyForCMIOExtensionProperty_sDevicePropertyKeysByCMIOExtensionPropertyNames = result;
  return result;
}

uint64_t __cmioefcd_devicePropertyChangedNotificationForCMIOExtensionProperty_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v1 = CMIOExtensionPropertyFromPropertyAddress();
  uint64_t result = objc_msgSend(v0, "initWithObjectsAndKeys:", @"HiddenStateChanged", @"CMIOExtensionPropertyDeviceHidden", @"ReadyToUnhideChanged", @"CMIOExtensionPropertyDeviceReadyToUnhide", @"DeviceTrackingActiveChanged", @"DockedTrackingActive", @"BatteryStateChanged", v1, @"BatteryLevelChanged", CMIOExtensionPropertyFromPropertyAddress(), 0);
  cmioefcd_devicePropertyChangedNotificationForCMIOExtensionProperty_sCMIOExtensionPropertiesToDevicePropertyChangedNotifications = result;
  return result;
}

uint64_t FigFlashlightGetClassID()
{
  if (FigFlashlightGetClassID_onceToken != -1) {
    dispatch_once(&FigFlashlightGetClassID_onceToken, &__block_literal_global_57);
  }
  return FigFlashlightGetClassID_sFigFlashlightClassID;
}

uint64_t __FigFlashlightGetClassID_block_invoke()
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigFlashlightClassDesc, ClassID, 1, &FigFlashlightGetClassID_sFigFlashlightClassID);
}

CFStringRef FigFlashlightCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigFlashlight %p]", a1);
}

BOOL csp_formatUsesFES(void *a1)
{
  return (int)objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F552B0]), "intValue") >= 1
      && (int)objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F552A8]), "intValue") > 0;
}

uint64_t csp_getCenterStageFramingMode(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (v4)
  {
    v4(a1, @"CenterStageFramingMode", *MEMORY[0x1E4F1CF80], &cf);
    uint64_t v5 = (void *)cf;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = [v5 intValue];
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t csp_getCinematicFramingFieldOfViewRestrictedToWide(uint64_t a1)
{
  id v8 = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, id *))(v3 + 48);
  if (v4)
  {
    v4(a1, @"CenterStageFieldOfViewRestrictedToWide", *MEMORY[0x1E4F1CF80], &v8);
    id v5 = v8;
  }
  else
  {
    id v5 = 0;
  }
  uint64_t v6 = [v5 BOOLValue];

  return v6;
}

BOOL csp_getCenterStageRectOfInterest(uint64_t a1)
{
  CFDictionaryRef v7 = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, const __CFDictionary **))(v3 + 48);
  if (v4)
  {
    v4(a1, @"CenterStageRectOfInterest", *MEMORY[0x1E4F1CF80], &v7);
    CFDictionaryRef v5 = v7;
  }
  else
  {
    CFDictionaryRef v5 = 0;
  }
  memset(&rect, 0, sizeof(rect));
  CGRectMakeWithDictionaryRepresentation(v5, &rect);

  BOOL result = CGRectEqualToRect(rect, *MEMORY[0x1E4F1DB28]);
  if (!result) {
    return CGRectIsNull(rect);
  }
  return result;
}

uint64_t csp_variableFrameRateVideoGain(void *a1)
{
  uint64_t v1 = (void *)[a1 sensorIDDictionary];
  uint64_t v2 = (void *)[(id)objc_msgSend((id)objc_msgSend(v1 objectForKeyedSubscript:@"VariableFrameRateVideoParameters", "objectForKeyedSubscript:", @"AEMaxGainForFrameRate", "objectForKeyedSubscript:", objc_msgSend(NSString, "stringWithFormat:", @"%d", 60)];
  return [v2 floatValue];
}

void *csp_getVideoDataConfigurationFromConfigurations(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)v10;
LABEL_3:
  uint64_t v5 = 0;
  while (1)
  {
    if (*(void *)v10 != v4) {
      objc_enumerationMutation(a1);
    }
    uint64_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * v5);
    CFDictionaryRef v7 = (void *)[v6 sinkConfiguration];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v7 sinkType] == 6) {
      return v6;
    }
    if (v3 == ++v5)
    {
      uint64_t v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

uint64_t sfn_createSampleBufferProcessorFunction()
{
  return FigSampleBufferProcessorCreateForCustom();
}

uint64_t captureStreamListener(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, __CFDictionary *Mutable)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 88)) {
    return result;
  }
  uint64_t v8 = result;
  uint64_t result = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F54408]);
  if (!result) {
    return result;
  }
  if (Mutable)
  {
    long long v9 = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    long long v9 = Mutable;
  }
  int v10 = *(_DWORD *)(v8 + 84);
  if (v10 == 1)
  {
    long long v11 = @"FixedFocusPoints";
    goto LABEL_11;
  }
  if (v10 == 5)
  {
    long long v11 = @"FocusAtPoint";
LABEL_11:
    CFDictionaryAddValue(Mutable, @"FocusMode", v11);
  }
  int v12 = *(_DWORD *)(v8 + 7656);
  BOOL v13 = __OFSUB__(v12, 1);
  int v14 = v12 - 1;
  if (v14 < 0 == v13)
  {
    *(_DWORD *)(v8 + 7656) = v14;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (v9) {
    CFRelease(v9);
  }
  *(unsigned char *)(v8 + 81) = 0;
  return FigMemoryBarrier();
}

uint64_t FigSampleBufferAutofocusProcessorAddTimestampedMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v5 = v4;
  CFDictionaryRef v7 = v6;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMSampleBufferGetPresentationTimeStamp(&time, v7);
  double Seconds = CMTimeGetSeconds(&time);
  int v10 = (_DWORD *)(DerivedStorage + 17328);
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 17336));
  uint64_t v11 = -320;
  while (*(double *)(DerivedStorage + v11 + 17664) != Seconds)
  {
    v11 += 16;
    if (!v11) {
      goto LABEL_6;
    }
  }
  int v12 = *(void **)(DerivedStorage + v11 + 17672);
  if (v12)
  {
LABEL_10:
    uint64_t v14 = *MEMORY[0x1E4F52C18];
    long long v15 = (void *)[v12 objectForKeyedSubscript:*MEMORY[0x1E4F52C18]];
    if ([v15 count])
    {
      long long v16 = (void *)CMGetAttachment(v7, (CFStringRef)*MEMORY[0x1E4F53070], 0);
      uint64_t v17 = *MEMORY[0x1E4F54B40];
      long long v18 = (void *)[v16 objectForKeyedSubscript:*MEMORY[0x1E4F54B40]];
      uint64_t v19 = [v12 objectForKeyedSubscript:v17];
      BOOL v20 = !v18 || v19 == 0;
      if (!v20 && ([v18 isEqualToString:v19] & 1) == 0)
      {
        uint64_t CameraParametersForPortType = af_sbp_getCameraParametersForPortType();
        if (CameraParametersForPortType)
        {
          uint64_t v22 = (float *)CameraParametersForPortType;
          int8x16_t v23 = (float *)af_sbp_getCameraParametersForPortType();
          if (v23)
          {
            float v24 = *v22;
            if (*v22 > 0.0)
            {
              float v25 = *v23;
              if (*v23 > 0.0)
              {
                __int16 v26 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", 0), "intValue");
                __int16 v27 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", 1), "intValue");
                __int16 v28 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", 2), "intValue");
                __int16 v29 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", 3), "intValue");
                float v30 = (1000.0 - 1000.0 / (float)(v24 / v25)) * 0.5;
                uint64_t v31 = (int)(float)((float)(v24 / v25) * (float)((float)v26 - v30));
                uint64_t v32 = (int)(float)((float)(v24 / v25) * (float)((float)v27 - v30));
                uint64_t v33 = (int)(float)((float)(v24 / v25) * (float)v28);
                uint64_t v34 = (int)(float)((float)(v24 / v25) * (float)v29);
                CGFloat v35 = (void *)MEMORY[0x1E4F1CA48];
                uint64_t v36 = [NSNumber numberWithShort:v31];
                uint64_t v37 = [NSNumber numberWithShort:v32];
                uint64_t v38 = [NSNumber numberWithShort:v33];
                uint64_t v39 = objc_msgSend(v35, "arrayWithObjects:", v36, v37, v38, objc_msgSend(NSNumber, "numberWithShort:", v34), 0);
                id v40 = (id)[v12 mutableCopy];
                [v40 setObject:v39 forKeyedSubscript:v14];
LABEL_21:
                if (v40) {
                  CFDictionaryRef v41 = (const __CFDictionary *)v40;
                }
                else {
                  CFDictionaryRef v41 = (const __CFDictionary *)v12;
                }
                CFDictionaryApplyFunction(v41, (CFDictionaryApplierFunction)insertKeyAndValue, v5);
                goto LABEL_25;
              }
            }
          }
        }
        fig_log_get_emitter();
        FigDebugAssert3();
      }
    }
    id v40 = 0;
    goto LABEL_21;
  }
LABEL_6:
  if (*v10) {
    int v13 = *v10 - 1;
  }
  else {
    int v13 = 19;
  }
  int v12 = *(void **)(DerivedStorage + 16 * v13 + 17352);
  if (v12) {
    goto LABEL_10;
  }
LABEL_25:
  uint64_t v42 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v42 + 652))
  {
    uint64_t v43 = 0;
    __s[0] = 0;
    do
    {
      size_t v44 = strlen(__s);
      if (v43) {
        int v45 = ", ";
      }
      else {
        int v45 = "";
      }
      snprintf(&__s[v44], 0x2000 - v44, "%s(%lld, %lld)", v45, *(void *)(v42 + v43 + 7704), *(void *)(v42 + v43 + 7832));
      v43 += 8;
    }
    while (v43 != 128);
    CFAllocatorRef v46 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v47 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], __s, 0x600u);
    CFDictionaryAddValue((CFMutableDictionaryRef)v5, @"MatrixFocusBand", v47);
    CFRelease(v47);
    int v48 = 0;
    int v49 = *(_DWORD *)(v42 + 7696);
    do
    {
      if (v49 >= 1) {
        --v49;
      }
      else {
        int v49 = 31;
      }
      snprintf(__s, 0x2000uLL, "MatrixScores%d", v48);
      CFStringRef v50 = CFStringCreateWithCString(v46, __s, 0x600u);
      unsigned int v51 = *(const void **)(v42 + 8 * v49 + 8024);
      if (v51) {
        CFDictionaryAddValue((CFMutableDictionaryRef)v5, v50, v51);
      }
      CFRelease(v50);
      ++v48;
    }
    while (v48 != 8);
    __s[0] = 0;
    uint64_t v52 = -64;
    do
    {
      size_t v53 = strlen(__s);
      snprintf(&__s[v53], 0x2000 - v53, "(%.3f %.3f %.3f) ", *(float *)(v42 + v52 + 8356), *(float *)(v42 + v52 + 8596), *(float *)(v42 + v52 + 8836));
      v52 += 4;
    }
    while (v52);
    size_t v54 = strlen(__s);
    snprintf(&__s[v54], 0x2000 - v54, "angle=%.3f", *(float *)(v42 + 9012));
    CFStringRef v55 = CFStringCreateWithCString(v46, __s, 0x600u);
    CFDictionaryAddValue((CFMutableDictionaryRef)v5, @"MatrixAccelerometer", v55);
    CFRelease(v55);
    int v56 = *(const void **)(v42 + 8280);
    if (v56) {
      CFDictionaryAddValue((CFMutableDictionaryRef)v5, @"FocusScanHistory", v56);
    }
  }
  if (*(unsigned char *)(v42 + 9061))
  {
    CFAllocatorRef v57 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 13, MEMORY[0x1E4F1D510]);
    CFNumberRef v59 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 9064));
    CFArrayAppendValue(Mutable, v59);
    CFRelease(v59);
    for (uint64_t i = 0; i != 56; i += 8)
    {
      CFNumberRef v61 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 9096 + i));
      CFArrayAppendValue(Mutable, v61);
      CFRelease(v61);
    }
    CFNumberRef v62 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 16328));
    CFArrayAppendValue(Mutable, v62);
    CFRelease(v62);
    CFNumberRef v63 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 16336));
    CFArrayAppendValue(Mutable, v63);
    CFRelease(v63);
    *(double *)__s = *(float *)(v42 + 1788);
    CFNumberRef v64 = CFNumberCreate(v57, kCFNumberDoubleType, __s);
    CFArrayAppendValue(Mutable, v64);
    CFRelease(v64);
    *(double *)__s = *(float *)(v42 + 1792);
    CFNumberRef v65 = CFNumberCreate(v57, kCFNumberDoubleType, __s);
    CFArrayAppendValue(Mutable, v65);
    CFRelease(v65);
    CFNumberRef v66 = CFNumberCreate(v57, kCFNumberShortType, (const void *)(v42 + 17321));
    CFArrayAppendValue(Mutable, v66);
    CFRelease(v66);
    CFDictionaryAddValue((CFMutableDictionaryRef)v5, @"HDRscene_debug", Mutable);
    CFRelease(Mutable);
    if (*(unsigned char *)(v42 + 7538))
    {
      uint64_t v67 = CFArrayCreateMutable(v57, 256, MEMORY[0x1E4F1D510]);
      for (uint64_t j = 0; j != 2048; j += 8)
      {
        CFNumberRef v69 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 10184 + j));
        CFArrayAppendValue(v67, v69);
        CFRelease(v69);
      }
      CFDictionaryAddValue((CFMutableDictionaryRef)v5, @"HDRscene_histR", v67);
      CFRelease(v67);
      unint64_t v70 = CFArrayCreateMutable(v57, 256, MEMORY[0x1E4F1D510]);
      for (uint64_t k = 0; k != 2048; k += 8)
      {
        CFNumberRef v72 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 12232 + k));
        CFArrayAppendValue(v70, v72);
        CFRelease(v72);
      }
      CFDictionaryAddValue((CFMutableDictionaryRef)v5, @"HDRscene_histG", v70);
      CFRelease(v70);
      int v73 = CFArrayCreateMutable(v57, 256, MEMORY[0x1E4F1D510]);
      uint64_t v74 = 0;
      uint64_t v75 = v42 + 14280;
      do
      {
        CFNumberRef v76 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v75 + v74));
        CFArrayAppendValue(v73, v76);
        CFRelease(v76);
        v74 += 8;
      }
      while (v74 != 2048);
      CFDictionaryAddValue((CFMutableDictionaryRef)v5, @"HDRscene_histB", v73);
      CFRelease(v73);
    }
  }
  CFDictionaryRemoveValue((CFMutableDictionaryRef)v5, (const void *)*MEMORY[0x1E4F53F58]);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)v5, (const void *)*MEMORY[0x1E4F53F50]);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)v5, (const void *)*MEMORY[0x1E4F53F48]);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)v5, (const void *)*MEMORY[0x1E4F53F60]);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 17336));
  return 0;
}

void insertKeyAndValue(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t FigSampleBufferAutofocusProcessorCopyTimestampedExposureModes(uint64_t a1, const __CFArray *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0;
  }
  Mutable = CFArrayCreateMutable(v5, Count, MEMORY[0x1E4F1D510]);
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 17336));
  CFIndex v8 = 0;
  long long v9 = (const void *)*MEMORY[0x1E4F53258];
  if (!a2) {
    goto LABEL_6;
  }
LABEL_5:
  for (CFIndex i = CFArrayGetCount(a2); v8 < i; CFIndex i = 0)
  {
    ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v8);
    CMTimeMakeFromDictionary(&time, ValueAtIndex);
    double Seconds = CMTimeGetSeconds(&time);
    uint64_t v13 = 0;
    CFArrayRef Value = 0;
    do
    {
      if (Seconds == *(double *)(DerivedStorage + 17344 + v13)) {
        CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16 * v8 + 17352), v9);
      }
      v13 += 16;
    }
    while (v13 != 320);
    if (!Value) {
      break;
    }
    CFArrayAppendValue(Mutable, Value);
    CFRelease(Value);
    ++v8;
    if (a2) {
      goto LABEL_5;
    }
LABEL_6:
    ;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 17336));
  if (a3 && v8 >= i)
  {
    if (Mutable) {
      CFTypeRef v15 = CFRetain(Mutable);
    }
    else {
      CFTypeRef v15 = 0;
    }
    *a3 = v15;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return 0;
}

uint64_t invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 88)) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  CFAllocatorRef v5 = (unsigned char *)(DerivedStorage + 7424);
  *(unsigned char *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x458], 8) = 1;
  uint64_t v6 = *(void **)(DerivedStorage + 48);
  if (v6)
  {
    FigCoreMotionRelease(v6);
    *(void *)(v4 + 4_Block_object_dispose(&STACK[0x458], 8) = 0;
  }
  FigImageControl_InvalidateExposure(a1);
  if (*v5)
  {
    uint64_t v3 = [*(id *)(v4 + 8) sendCommandProperty:*MEMORY[0x1E4F54C88]];
    *CFAllocatorRef v5 = 0;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v7)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    int v10 = *(void (**)(uint64_t, void, void))(v9 + 8);
    if (v10) {
      v10(v7, 0, 0);
    }
    CFRelease(*(CFTypeRef *)(v4 + 64));
    *(void *)(v4 + 64) = 0;
  }
  uint64_t v11 = *(pthread_mutex_t **)(v4 + 17336);
  if (v11)
  {
    pthread_mutex_lock(v11);
    uint64_t v12 = 0;
    uint64_t v13 = v4 + 17352;
    do
    {
      uint64_t v14 = *(const void **)(v13 + v12);
      if (v14)
      {
        CFRelease(v14);
        *(void *)(v13 + v12) = 0;
      }
      v12 += 16;
    }
    while (v12 != 320);
    *(_DWORD *)(v4 + 1732_Block_object_dispose(&STACK[0x458], 8) = 0;
    pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 17336));
    FigSimpleMutexDestroy();
    *(void *)(v4 + 17336) = 0;
  }
  setPropertiesOnStream();
  FigSimpleQueueRelease();
  *(void *)(v4 + 72) = 0;
  *(void *)uint64_t v4 = 0;
  CFTypeRef v15 = *(void **)(v4 + 8);
  if (v15)
  {
    unsigned int v40 = v3;
    if (!*(_DWORD *)(v4 + 652)) {
      [v15 unregisterForNotification:*MEMORY[0x1E4F54408] listener:a1];
    }
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    if (*(int *)(v16 + 7656) >= 1)
    {
      int v17 = 0;
      long long v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      uint64_t v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        Mutable = CFDictionaryCreateMutable(v20, 1, v18, v19);
        uint64_t v22 = Mutable;
        int v23 = *(_DWORD *)(v16 + 84);
        if (v23 == 1) {
          break;
        }
        if (v23 == 5)
        {
          float v24 = @"FocusAtPoint";
LABEL_30:
          CFDictionaryAddValue(Mutable, @"FocusMode", v24);
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v22);
        if (++v17 >= *(_DWORD *)(v16 + 7656)) {
          goto LABEL_32;
        }
      }
      float v24 = @"FixedFocusPoints";
      goto LABEL_30;
    }
LABEL_32:
    *(_DWORD *)(v16 + 7656) = 0;
    float v25 = *(const void **)(v4 + 8);
    uint64_t v3 = v40;
    if (v25)
    {
      CFRelease(v25);
      *(void *)(v4 + _Block_object_dispose(&STACK[0x458], 8) = 0;
    }
  }
  __int16 v26 = *(const void **)(v4 + 16);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(v4 + 16) = 0;
  }
  __int16 v27 = *(const void **)(v4 + 24);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(v4 + 24) = 0;
  }
  __int16 v28 = *(const void **)(v4 + 32);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(v4 + 32) = 0;
  }
  __int16 v29 = *(const void **)(v4 + 680);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(v4 + 680) = 0;
  }
  float v30 = *(const void **)(v4 + 9024);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(v4 + 9024) = 0;
  }
  uint64_t v31 = *(const void **)(v4 + 9032);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(v4 + 9032) = 0;
  }
  uint64_t v32 = *(const void **)(v4 + 7544);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(v4 + 7544) = 0;
  }
  uint64_t v33 = *(const void **)(v4 + 8280);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(v4 + 8280) = 0;
  }
  uint64_t v34 = 0;
  uint64_t v35 = v4 + 8024;
  do
  {
    uint64_t v36 = *(const void **)(v35 + v34);
    if (v36)
    {
      CFRelease(v36);
      *(void *)(v35 + v34) = 0;
    }
    v34 += 8;
  }
  while (v34 != 256);
  uint64_t v37 = *(const void **)(v4 + 6296);
  if (v37)
  {
    CFRelease(v37);
    *(void *)(v4 + 6296) = 0;
  }
  uint64_t v38 = *(const void **)(v4 + 6288);
  if (v38)
  {
    CFRelease(v38);
    *(void *)(v4 + 628_Block_object_dispose(&STACK[0x458], 8) = 0;
  }
  return v3;
}

__CFString *copyDebugDescription(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProcessor_Autofocus %p>", a1);
  return Mutable;
}

uint64_t setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 88)) {
    return 4294954511;
  }
  uint64_t v7 = (void *)DerivedStorage;
  uint64_t result = 0;
  void *v7 = a2;
  v7[7] = a3;
  return result;
}

uint64_t finishPendingProcessing()
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 88)) {
    return 4294954511;
  }
  else {
    return 0;
  }
}

uint64_t csp_previewTapCallback(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5 = result;
  if (a2) {
    uint64_t result = [*(id *)(result + 64) captureSessionPreviewTapDidOpen:result];
  }
  if (a3) {
    uint64_t result = [*(id *)(v5 + 64) captureSession:v5 previewTapDidOutputSampleBuffer:a3];
  }
  if ((a2 & 2) != 0)
  {
    *(unsigned char *)(v5 + 59) = 0;
    uint64_t v6 = *(void **)(v5 + 64);
    return [v6 captureSessionPreviewTapDidClose:v5];
  }
  return result;
}

uint64_t __cso_postDeferredmediadImmediateTerminationNotificationIfNecessary_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  cso_postDeferredmediadImmediateTerminationNotificationIfNecessary_sSupportsDeferredProcessing = result;
  return result;
}

uint64_t FigExternalStorageDeviceManagerCreate(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  if (PerformFigExternalStorageDeviceManagerOneTimeInitialization_initFigExternalStorageDeviceManager == -1)
  {
    if (!a3) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_once(&PerformFigExternalStorageDeviceManagerOneTimeInitialization_initFigExternalStorageDeviceManager, &__block_literal_global_61);
    if (!a3) {
      goto LABEL_16;
    }
  }
  FigExternalStorageDeviceManagerGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    uint64_t v13 = v5;
    FigDebugAssert3();
    return v13;
  }
  if (dword_1E96B6D28)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = FigExternalStorageDeviceManagerGetDerivedStorage(0);
  if (!DerivedStorage) {
    goto LABEL_16;
  }
  uint64_t v8 = (void *)DerivedStorage;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  v8[4] = Mutable;
  if (!Mutable
    || (CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (v8[5] = v10) == 0)
    || (v11 = FigSimpleMutexCreate(), (*uint64_t v8 = v11) == 0)
    || (id v12 = objc_alloc_init(MEMORY[0x1E4F1CA48]), (v8[6] = v12) == 0))
  {
LABEL_16:
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  uint64_t v13 = 0;
  *a3 = 0;
  return v13;
}

uint64_t FigExternalStorageDeviceManagerGetDerivedStorage(uint64_t a1)
{
  if (!a1) {
    FigDebugAssert3();
  }
  return CMBaseObjectGetDerivedStorage();
}

uint64_t __PerformFigExternalStorageDeviceManagerOneTimeInitialization_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t FigExternalStorageDeviceManager_Finalize(uint64_t a1)
{
  uint64_t result = FigExternalStorageDeviceManagerGetDerivedStorage(a1);
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 24))
    {
      objc_msgSend(MEMORY[0x1E4F25D68], "endMonitoringProviderDomainChanges:");
      *(void *)(v2 + 24) = 0;
    }
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(v2 + 32) = 0;
    }
    uint64_t v4 = *(const void **)(v2 + 40);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v2 + 40) = 0;
    }

    *(void *)(v2 + 4_Block_object_dispose(&STACK[0x458], 8) = 0;
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *FigExternalStorageDeviceManager_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigExternalStorageDeviceManager %p>", a1);
  return Mutable;
}

uint64_t FigExternalStorageDeviceManager_CopyProperty(int a1, CFTypeRef cf1, uint64_t a3, void *a4)
{
  if (cf1 && a4)
  {
    *a4 = 0;
    if (CFEqual(cf1, @"Supported"))
    {
      *a4 = *MEMORY[0x1E4F1CFC8];
      return 0;
    }
  }
  else
  {
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t FigExternalStorageDeviceManager_BeginMonitoring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = FigExternalStorageDeviceManagerGetDerivedStorage(a1);
  if (DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x458], 8) = a4;
    *(void *)(DerivedStorage + 16) = a3;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __FigExternalStorageDeviceManager_BeginMonitoring_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v7;
    dispatch_async(global_queue, block);
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigExternalStorageDeviceManager_CopyStorageDeviceNextAvailableURLArray(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  v44[5] = *MEMORY[0x1E4F143B8];
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t DerivedStorage = FigExternalStorageDeviceManagerGetDerivedStorage(a1);
  if (DerivedStorage)
  {
    if (a3)
    {
      if (a5)
      {
        if (a4)
        {
          uint64_t v10 = DerivedStorage;
          if (CFArrayGetCount((CFArrayRef)a4) > 0)
          {
            pthread_mutex_lock(*(pthread_mutex_t **)v10);
            uint64_t v11 = (void *)[*(id *)(v10 + 40) objectForKey:a3];
            if (!v11
              || (id v12 = (void *)[v11 objectForKey:@"DeviceInfo_URL"]) == 0
              || (uint64_t v13 = v12,
                  int v14 = [v12 startAccessingSecurityScopedResource],
                  (CFTypeRef v15 = (void *)[v13 URLByAppendingPathComponent:@"DCIM" isDirectory:1]) == 0))
            {
              FigDebugAssert3();
              uint64_t v30 = FigSignalErrorAt();
LABEL_46:
              updateCGFloat d = v30;
              goto LABEL_36;
            }
            uint64_t v16 = v15;
            int v31 = v14;
            if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", objc_msgSend(v15, "path")) & 1) == 0)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v16, 1, 0, 0); {
            long long v35 = 0u;
            }
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            int v17 = *(void **)(v10 + 48);
            uint64_t v18 = [v17 countByEnumeratingWithState:&v33 objects:v43 count:16];
            if (v18)
            {
              uint64_t v19 = *(void *)v34;
LABEL_13:
              uint64_t v20 = 0;
              while (1)
              {
                if (*(void *)v34 != v19) {
                  objc_enumerationMutation(v17);
                }
                long long v21 = *(void **)(*((void *)&v33 + 1) + 8 * v20);
                if (objc_msgSend((id)objc_msgSend(v21, "directoryURL"), "isEqual:", v16))
                {
                  updateCGFloat d = fesdm_updateArrayWithNextAvailableURL(v8, a4, v21);
                  if (updated) {
                    goto LABEL_37;
                  }
                }
                if (v18 == ++v20)
                {
                  uint64_t v18 = [v17 countByEnumeratingWithState:&v33 objects:v43 count:16];
                  if (v18) {
                    goto LABEL_13;
                  }
                  break;
                }
              }
            }
            if (![v8 count])
            {
              uint64_t v37 = 0;
              uint64_t v38 = &v37;
              uint64_t v39 = 0x3052000000;
              unsigned int v40 = __Block_byref_object_copy__23;
              CFDictionaryRef v41 = __Block_byref_object_dispose__23;
              int v23 = (objc_class *)getPLSimpleDCIMDirectoryClass_softClass;
              uint64_t v42 = getPLSimpleDCIMDirectoryClass_softClass;
              if (!getPLSimpleDCIMDirectoryClass_softClass)
              {
                v44[0] = MEMORY[0x1E4F143A8];
                v44[1] = 3221225472;
                void v44[2] = __getPLSimpleDCIMDirectoryClass_block_invoke;
                v44[3] = &unk_1E5C24978;
                v44[4] = &v37;
                __getPLSimpleDCIMDirectoryClass_block_invoke((uint64_t)v44);
                int v23 = (objc_class *)v38[5];
              }
              _Block_object_dispose(&v37, 8);
              id v24 = (id)[[v23 alloc] initWithDirectoryURL:v16 subDirectorySuffix:0 perDirectoryLimit:9999 userInfoPath:0];
              [v24 setRepresentsCameraRoll:1];
              [v24 setShouldCheckForExistingFiles:1];
              if (!v24) {
                goto LABEL_45;
              }
              updateCGFloat d = fesdm_updateArrayWithNextAvailableURL(v8, a4, v24);
              if (updated)
              {
LABEL_37:
                FigDebugAssert3();
LABEL_36:
                pthread_mutex_unlock(*(pthread_mutex_t **)v10);
                return updated;
              }
              float v25 = *(void **)(v10 + 48);
              if (!v25) {
                goto LABEL_45;
              }
              [v25 addObject:v24];
            }
            if (v31) {
              [v13 stopAccessingSecurityScopedResource];
            }
            CFIndex Count = CFArrayGetCount((CFArrayRef)a4);
            if (Count == (int)[v8 count])
            {
              if (dword_1E96B6D28)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (v8) {
                CFTypeRef v28 = CFRetain(v8);
              }
              else {
                CFTypeRef v28 = 0;
              }
              updateCGFloat d = 0;
              *a5 = v28;
              goto LABEL_36;
            }
LABEL_45:
            FigDebugAssert3();
            uint64_t v30 = FigSignalErrorAt();
            goto LABEL_46;
          }
        }
      }
    }
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

void sub_1A5BC6368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigExternalStorageDeviceManager_CopyStorageDeviceNextAvailableSecurityScopeWrappedURLDataArray(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v44 = 0;
  uint64_t v45 = 0;
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t DerivedStorage = FigExternalStorageDeviceManagerGetDerivedStorage(a1);
  if (DerivedStorage && a3 && a5 && a4 && (uint64_t v11 = DerivedStorage, CFArrayGetCount((CFArrayRef)a4) > 0))
  {
    uint64_t v13 = FigExternalStorageDeviceManager_CopyStorageDeviceNextAvailableURLArray(a1, v12, a3, a4, &v44);
    if (v13)
    {
      uint64_t v28 = v13;
      FigDebugAssert3();
    }
    else
    {
      pthread_mutex_lock(*(pthread_mutex_t **)v11);
      int v14 = (void *)[*(id *)(v11 + 40) objectForKey:a3];
      if (v14 && (CFTypeRef v15 = (void *)[v14 objectForKey:@"DeviceInfo_URL"]) != 0)
      {
        theArraCGFloat y = (const __CFArray *)a4;
        long long v36 = a5;
        uint64_t v37 = (pthread_mutex_t **)v11;
        long long v33 = v15;
        int v34 = [v15 startAccessingSecurityScopedResource];
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        obuint64_t j = v44;
        uint64_t v16 = [v44 countByEnumeratingWithState:&v40 objects:v46 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          CFDataRef v18 = 0;
          uint64_t v39 = *(void *)v41;
          CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          while (2)
          {
            for (uint64_t i = 0; i != v17; ++i)
            {
              if (*(void *)v41 != v39) {
                objc_enumerationMutation(obj);
              }
              long long v21 = *(void **)(*((void *)&v40 + 1) + 8 * i);
              objc_msgSend((id)objc_msgSend(v21, "path"), "fileSystemRepresentation");
              uint64_t v22 = (const char *)sandbox_extension_issue_file();
              if (!v22)
              {
                FigDebugAssert3();
                uint64_t v28 = 4294948018;
                __int16 v29 = v37;
                goto LABEL_34;
              }
              int v23 = (const UInt8 *)v22;
              size_t v24 = strlen(v22);
              if (v18) {
                CFRelease(v18);
              }
              CFDataRef v25 = CFDataCreate(v19, v23, v24 + 1);
              if (!v25)
              {
                FigDebugAssert3();
                uint64_t v28 = 4294948026;
                uint64_t v11 = (uint64_t)v37;
                goto LABEL_38;
              }
              CFDataRef v18 = v25;
              MEMORY[0x1A6271C30](v21, v25);
              id v26 = (id)[objc_alloc(MEMORY[0x1E4F28FF8]) initWithURL:v21 readonly:0 scope:v18];
              if (!v26
                || (uint64_t v27 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v26 requiringSecureCoding:1 error:&v45]) == 0|| !v9)
              {
                FigDebugAssert3();
                uint64_t v28 = FigSignalErrorAt();
                pthread_mutex_unlock(*v37);
                goto LABEL_35;
              }
              [v9 addObject:v27];
            }
            uint64_t v17 = [obj countByEnumeratingWithState:&v40 objects:v46 count:16];
            if (v17) {
              continue;
            }
            break;
          }
        }
        else
        {
          CFDataRef v18 = 0;
        }
        __int16 v29 = v37;
        if (v34) {
          [v33 stopAccessingSecurityScopedResource];
        }
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count == (int)[v9 count])
        {
          if (v9) {
            CFTypeRef v31 = CFRetain(v9);
          }
          else {
            CFTypeRef v31 = 0;
          }
          uint64_t v28 = 0;
          void *v36 = v31;
        }
        else
        {
          FigDebugAssert3();
          uint64_t v28 = FigSignalErrorAt();
        }
LABEL_34:
        pthread_mutex_unlock(*v29);
        if (v18) {
LABEL_35:
        }
          CFRelease(v18);
      }
      else
      {
        FigDebugAssert3();
        uint64_t v28 = FigSignalErrorAt();
LABEL_38:
        pthread_mutex_unlock(*(pthread_mutex_t **)v11);
      }
    }
    return v28;
  }
  else
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigExternalStorageDeviceManager_CopyStorageDeviceProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage = (pthread_mutex_t **)FigExternalStorageDeviceManagerGetDerivedStorage(a1);
  if (DerivedStorage && a3 && a5 && a2)
  {
    id v9 = DerivedStorage;
    pthread_mutex_lock(*DerivedStorage);
    *a5 = 0;
    if (FigCFEqual())
    {
      if (!FigCFArrayContainsValue()) {
        goto LABEL_25;
      }
      uint64_t v10 = (void *)[(pthread_mutex_t *)v9[5] objectForKey:a2];
      if (!v10) {
        goto LABEL_25;
      }
      uint64_t v11 = (void *)[v10 objectForKey:@"DeviceInfo_URL"];
      if (!v11) {
        goto LABEL_25;
      }
      StorageDeviceSizeAttributes = (const void *)externalStorageDeviceManager_getStorageDeviceSizeAttributes(v11, *MEMORY[0x1E4F283A0]);
      if (!StorageDeviceSizeAttributes) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
    if (FigCFEqual())
    {
      if (!FigCFArrayContainsValue()) {
        goto LABEL_25;
      }
      uint64_t v13 = (void *)[(pthread_mutex_t *)v9[5] objectForKey:a2];
      if (!v13) {
        goto LABEL_25;
      }
      int v14 = (void *)[v13 objectForKey:@"DeviceInfo_URL"];
      if (!v14) {
        goto LABEL_25;
      }
      CFTypeRef v15 = v14;
      int v16 = [v14 startAccessingSecurityScopedResource];
      uint64_t v17 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "displayNameAtPath:", objc_msgSend(v15, "path"));
      if (v16) {
        [v15 stopAccessingSecurityScopedResource];
      }
      if (!v17) {
        goto LABEL_25;
      }
      StorageDeviceSizeAttributes = (const void *)v17;
LABEL_19:
      uint64_t v18 = 0;
      *a5 = CFRetain(StorageDeviceSizeAttributes);
LABEL_27:
      pthread_mutex_unlock(*v9);
      return v18;
    }
    if (FigCFEqual())
    {
      int v19 = FigCFArrayContainsValue();
      uint64_t v18 = 0;
      uint64_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!v19) {
        uint64_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
    }
    else
    {
      if (FigCFEqual())
      {
        if (!FigCFArrayContainsValue()) {
          goto LABEL_25;
        }
        uint64_t v22 = (void *)[(pthread_mutex_t *)v9[5] objectForKey:a2];
        if (!v22) {
          goto LABEL_25;
        }
        int v23 = (void *)[v22 objectForKey:@"DeviceInfo_URL"];
        if (!v23) {
          goto LABEL_25;
        }
        StorageDeviceSizeAttributes = (const void *)externalStorageDeviceManager_getStorageDeviceSizeAttributes(v23, *MEMORY[0x1E4F283B0]);
        if (!StorageDeviceSizeAttributes) {
          goto LABEL_25;
        }
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        size_t v24 = (void *)[(pthread_mutex_t *)v9[5] objectForKey:a2];
        if (!v24) {
          goto LABEL_25;
        }
        StorageDeviceSizeAttributes = (const void *)[v24 objectForKey:@"DeviceInfo_URL"];
        if (!StorageDeviceSizeAttributes) {
          goto LABEL_25;
        }
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        CFDataRef v25 = (void *)[(pthread_mutex_t *)v9[5] objectForKey:a2];
        if (!v25) {
          goto LABEL_25;
        }
        uint64_t v26 = [v25 objectForKey:@"DeviceInfo_Identifier"];
        if (!v26) {
          goto LABEL_25;
        }
        StorageDeviceSizeAttributes = (const void *)[(id)getICCameraDeviceClass() uuidStringFromFileProviderIdentifier:v26];
        if (!StorageDeviceSizeAttributes) {
          goto LABEL_25;
        }
        goto LABEL_19;
      }
      if (!FigCFEqual()) {
        goto LABEL_26;
      }
      uint64_t v27 = (void *)[(pthread_mutex_t *)v9[5] objectForKey:a2];
      if (!v27)
      {
LABEL_25:
        FigDebugAssert3();
LABEL_26:
        uint64_t v18 = FigSignalErrorAt();
        goto LABEL_27;
      }
      int v28 = objc_msgSend((id)objc_msgSend(v27, "objectForKey:", @"DeviceInfo_IsEncrypted"), "BOOLValue");
      uint64_t v18 = 0;
      uint64_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!v28) {
        uint64_t v20 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
    }
    *a5 = *v20;
    goto LABEL_27;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t __fedm_startMonitoringForExternalDevices_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  if (dword_1E96B6D28)
  {
    v124[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (a3) {
    return (*(uint64_t (**)(void, uint64_t, void))(v6 + 8))(0, a3, *(void *)(v6 + 16));
  }
  uint64_t v76 = a1;
  if (!v6) {
    goto LABEL_97;
  }
  uint64_t v79 = *(void *)(a1 + 32);
  pthread_mutex_lock(*(pthread_mutex_t **)v6);
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  uint64_t v9 = [a2 countByEnumeratingWithState:&v103 objects:v126 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v104;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v104 != v11) {
          objc_enumerationMutation(a2);
        }
        uint64_t v13 = *(void **)(*((void *)&v103 + 1) + 8 * i);
        int v14 = objc_msgSend(a2, "objectForKeyedSubscript:", v13, v69, v70);
        if ([v13 containsString:@"UserFS"])
        {
          long long v101 = 0u;
          long long v102 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          CFTypeRef v15 = (void *)[v14 storageURLs];
          uint64_t v16 = [v15 countByEnumeratingWithState:&v99 objects:v125 count:16];
          if (v16)
          {
            uint64_t v17 = v16;
            uint64_t v18 = *(void *)v100;
            do
            {
              for (uint64_t j = 0; j != v17; ++j)
              {
                if (*(void *)v100 != v18) {
                  objc_enumerationMutation(v15);
                }
                uint64_t v20 = *(void **)(*((void *)&v99 + 1) + 8 * j);
                if ([v20 isFileURL]) {
                  [v8 addObject:v20];
                }
              }
              uint64_t v17 = [v15 countByEnumeratingWithState:&v99 objects:v125 count:16];
            }
            while (v17);
          }
        }
      }
      uint64_t v10 = [a2 countByEnumeratingWithState:&v103 objects:v126 count:16];
    }
    while (v10);
  }
  uint64_t v6 = v79;
  if (dword_1E96B6D28)
  {
    v117[0] = 0;
    v108[0] = OS_LOG_TYPE_DEFAULT;
    long long v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v22 = v117[0];
    if (os_log_type_enabled(v21, v108[0])) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = v22 & 0xFFFFFFFE;
    }
    if (v23)
    {
      uint64_t v24 = *(void *)(v79 + 40);
      *(_DWORD *)type = 136315650;
      uint64_t v119 = "fedm_removeDevicesDisconnected";
      __int16 v120 = 2112;
      id v121 = v8;
      __int16 v122 = 2112;
      uint64_t v123 = v24;
      LODWORD(v70) = 32;
      CFNumberRef v69 = type;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFDataRef v25 = objc_msgSend(*(id *)(v79 + 40), "copy", v69, v70);
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  uint64_t v75 = [v25 countByEnumeratingWithState:&v95 objects:v124 count:16];
  if (!v75) {
    goto LABEL_95;
  }
  uint64_t v74 = *(void *)v96;
  CFNumberRef v72 = v25;
  while (2)
  {
    for (uint64_t k = 0; k != v75; ++k)
    {
      if (*(void *)v96 != v74) {
        objc_enumerationMutation(v25);
      }
      keCGFloat y = *(void **)(*((void *)&v95 + 1) + 8 * k);
      if (!FigCFDictionaryGetValue())
      {
        uint64_t v70 = v71;
        LODWORD(v69) = 0;
LABEL_94:
        FigDebugAssert3();
        goto LABEL_95;
      }
      CFArrayRef Value = (void *)FigCFDictionaryGetValue();
      if (!Value)
      {
        uint64_t v70 = v71;
        LODWORD(v69) = 0;
        goto LABEL_94;
      }
      int v28 = Value;
      __int16 v29 = (void *)[Value lastPathComponent];
      if (dword_1E96B6D28)
      {
        unsigned int v94 = 0;
        os_log_type_t v93 = OS_LOG_TYPE_DEFAULT;
        uint64_t v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v31 = v94;
        if (os_log_type_enabled(v30, v93)) {
          unsigned int v32 = v31;
        }
        else {
          unsigned int v32 = v31 & 0xFFFFFFFE;
        }
        if (v32)
        {
          long long v33 = *(void **)(v6 + 40);
          int v109 = 136315651;
          uint64_t v110 = "fedm_removeDevicesDisconnected";
          __int16 v111 = 2113;
          uint64_t v112 = key;
          __int16 v113 = 2113;
          uint64_t v114 = v33;
          LODWORD(v70) = 32;
          CFNumberRef v69 = (os_log_type_t *)&v109;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      uint64_t v34 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v89, v117, 16, v69, v70);
      if (v34)
      {
        uint64_t v35 = v34;
        uint64_t v36 = *(void *)v90;
LABEL_46:
        uint64_t v37 = 0;
        while (1)
        {
          if (*(void *)v90 != v36) {
            objc_enumerationMutation(v8);
          }
          if (objc_msgSend(v29, "isEqual:", objc_msgSend(*(id *)(*((void *)&v89 + 1) + 8 * v37), "lastPathComponent")))break; {
          if (v35 == ++v37)
          }
          {
            uint64_t v35 = [v8 countByEnumeratingWithState:&v89 objects:v117 count:16];
            if (v35) {
              goto LABEL_46;
            }
            goto LABEL_52;
          }
        }
      }
      else
      {
LABEL_52:
        if (dword_1E96B6D28)
        {
          unsigned int v94 = 0;
          os_log_type_t v93 = OS_LOG_TYPE_DEFAULT;
          uint64_t v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v39 = v94;
          if (os_log_type_enabled(v38, v93)) {
            unsigned int v40 = v39;
          }
          else {
            unsigned int v40 = v39 & 0xFFFFFFFE;
          }
          if (v40)
          {
            long long v41 = *(void **)(v6 + 40);
            int v109 = 136315907;
            uint64_t v110 = "fedm_removeDevicesDisconnected";
            __int16 v111 = 2112;
            uint64_t v112 = v28;
            __int16 v113 = 2113;
            uint64_t v114 = key;
            __int16 v115 = 2113;
            uint64_t v116 = v41;
            LODWORD(v70) = 42;
            CFNumberRef v69 = (os_log_type_t *)&v109;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        long long v42 = *(__CFDictionary **)(v6 + 40);
        if (!v42)
        {
          uint64_t v70 = v71;
          LODWORD(v69) = 0;
          goto LABEL_94;
        }
        CFDictionaryRemoveValue(v42, key);
        if (dword_1E96B6D28)
        {
          unsigned int v94 = 0;
          os_log_type_t v93 = OS_LOG_TYPE_DEFAULT;
          long long v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v44 = v94;
          if (os_log_type_enabled(v43, v93)) {
            unsigned int v45 = v44;
          }
          else {
            unsigned int v45 = v44 & 0xFFFFFFFE;
          }
          if (v45)
          {
            CFAllocatorRef v46 = *(void **)(v6 + 32);
            int v109 = 136315651;
            uint64_t v110 = "fedm_removeDevicesDisconnected";
            __int16 v111 = 2113;
            uint64_t v112 = key;
            __int16 v113 = 2113;
            uint64_t v114 = v46;
            LODWORD(v70) = 32;
            CFNumberRef v69 = (os_log_type_t *)&v109;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFArrayRef v47 = *(const __CFArray **)(v6 + 32);
        if (!v47)
        {
          uint64_t v70 = v71;
          LODWORD(v69) = 0;
          goto LABEL_94;
        }
        v128.length = CFArrayGetCount(*(CFArrayRef *)(v6 + 32));
        v128.locatiouint64_t n = 0;
        FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v47, v128, key);
        if (FirstIndexOfValue != -1)
        {
          uint64_t v73 = k;
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 32), FirstIndexOfValue);
          int v49 = (void *)[*(id *)(v6 + 48) copy];
          long long v85 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          uint64_t v50 = [v49 countByEnumeratingWithState:&v85 objects:v108 count:16];
          if (v50)
          {
            uint64_t v51 = v50;
            uint64_t v52 = *(void *)v86;
            do
            {
              for (uint64_t m = 0; m != v51; ++m)
              {
                if (*(void *)v86 != v52) {
                  objc_enumerationMutation(v49);
                }
                size_t v54 = *(void **)(*((void *)&v85 + 1) + 8 * m);
                if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v54, "directoryURL", v69), "URLByDeletingLastPathComponent"), "isEqual:", v28))
                {
                  if (dword_1E96B6D28)
                  {
                    unsigned int v94 = 0;
                    os_log_type_t v93 = OS_LOG_TYPE_DEFAULT;
                    CFStringRef v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v56 = v94;
                    if (os_log_type_enabled(v55, v93)) {
                      unsigned int v57 = v56;
                    }
                    else {
                      unsigned int v57 = v56 & 0xFFFFFFFE;
                    }
                    if (v57)
                    {
                      uint64_t v58 = *(void **)(v79 + 48);
                      int v109 = 136315907;
                      uint64_t v110 = "fedm_removeDevicesDisconnected";
                      __int16 v111 = 2113;
                      uint64_t v112 = v54;
                      __int16 v113 = 2113;
                      uint64_t v114 = v58;
                      __int16 v115 = 2113;
                      uint64_t v116 = key;
                      LODWORD(v70) = 42;
                      CFNumberRef v69 = (os_log_type_t *)&v109;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    uint64_t v6 = v79;
                  }
                  objc_msgSend(*(id *)(v6 + 48), "removeObject:", v54, v69);
                }
              }
              uint64_t v51 = [v49 countByEnumeratingWithState:&v85 objects:v108 count:16];
            }
            while (v51);
          }
          CFDataRef v25 = v72;
          uint64_t k = v73;
          if (v49) {
        }
          }
      }
    }
    uint64_t v75 = [v25 countByEnumeratingWithState:&v95 objects:v124 count:16];
    if (v75) {
      continue;
    }
    break;
  }
LABEL_95:
  if (v25) {

  }
LABEL_97:
  pthread_mutex_unlock(*(pthread_mutex_t **)v6);
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  uint64_t v59 = [a2 countByEnumeratingWithState:&v81 objects:v107 count:16];
  if (!v59) {
    return (*(uint64_t (**)(void, void, void))(*(void *)(v76 + 32) + 8))(*(void *)(*(void *)(v76 + 32) + 32), 0, *(void *)(*(void *)(v76 + 32) + 16));
  }
  uint64_t v60 = v59;
  char v61 = 0;
  uint64_t v62 = *(void *)v82;
  do
  {
    uint64_t v63 = 0;
    do
    {
      if (*(void *)v82 != v62) {
        objc_enumerationMutation(a2);
      }
      CFNumberRef v64 = *(void **)(*((void *)&v81 + 1) + 8 * v63);
      uint64_t v65 = objc_msgSend(a2, "objectForKeyedSubscript:", v64, v69, v70);
      if ([v64 containsString:@"UserFS"])
      {
        uint64_t v66 = [MEMORY[0x1E4F25D30] rootItemIDWithProviderDomainID:v64];
        uint64_t v67 = (void *)[MEMORY[0x1E4F25D38] defaultManager];
        v80[0] = MEMORY[0x1E4F143A8];
        v80[1] = 3221225472;
        v80[2] = __fedm_startMonitoringForExternalDevices_block_invoke_30;
        v80[3] = &unk_1E5C28440;
        uint64_t v68 = *(void *)(v76 + 32);
        v80[4] = v65;
        v80[5] = v68;
        [v67 fetchURLForItemID:v66 completionHandler:v80];
        char v61 = 1;
      }
      ++v63;
    }
    while (v60 != v63);
    uint64_t result = [a2 countByEnumeratingWithState:&v81 objects:v107 count:16];
    uint64_t v60 = result;
  }
  while (result);
  if ((v61 & 1) == 0) {
    return (*(uint64_t (**)(void, void, void))(*(void *)(v76 + 32) + 8))(*(void *)(*(void *)(v76 + 32) + 32), 0, *(void *)(*(void *)(v76 + 32) + 16));
  }
  return result;
}

void __fedm_startMonitoringForExternalDevices_block_invoke_30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (dword_1E96B6D28)
  {
    LODWORD(v21) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v6) {
    goto LABEL_6;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)v6);
  if (a3)
  {
    (*(void (**)(void, uint64_t, void))(v6 + 8))(0, a3, *(void *)(v6 + 16));
LABEL_6:
    pthread_mutex_unlock(*(pthread_mutex_t **)v6);
    return;
  }
  if (!a2)
  {
LABEL_23:
    CFMutableDictionaryRef v16 = 0;
    goto LABEL_25;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v8 = *(void **)(v6 + 40);
  uint64_t v9 = [v8 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v22;
LABEL_10:
    uint64_t v12 = 0;
    while (1)
    {
      if (*(void *)v22 != v11) {
        objc_enumerationMutation(v8);
      }
      if (!FigCFDictionaryGetValue()) {
        goto LABEL_28;
      }
      CFArrayRef Value = (void *)FigCFDictionaryGetValue();
      if (!Value) {
        goto LABEL_28;
      }
      if ([Value isEqual:a2]) {
        goto LABEL_23;
      }
      if (v10 == ++v12)
      {
        uint64_t v10 = [v8 countByEnumeratingWithState:&v21 objects:v26 count:16];
        if (v10) {
          goto LABEL_10;
        }
        break;
      }
    }
  }
  int v14 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29128], "UUID", v19, v20), "UUIDString");
  objc_msgSend((id)objc_msgSend(v5, "error"), "code");
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
LABEL_28:
    FigDebugAssert3();
    goto LABEL_6;
  }
  CFMutableDictionaryRef v16 = Mutable;
  FigCFDictionarySetValue();
  [v5 identifier];
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  uint64_t v17 = *(__CFArray **)(v6 + 32);
  if (v17)
  {
    CFArrayAppendValue(v17, v14);
    if (*(void *)(v6 + 40))
    {
      if (dword_1E96B6D28)
      {
        uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigCFDictionarySetValue();
LABEL_25:
      (*(void (**)(void, void, void))(v6 + 8))(*(void *)(v6 + 32), 0, *(void *)(v6 + 16));
      pthread_mutex_unlock(*(pthread_mutex_t **)v6);
      if (!v16) {
        return;
      }
      goto LABEL_26;
    }
  }
  FigDebugAssert3();
  pthread_mutex_unlock(*(pthread_mutex_t **)v6);
LABEL_26:
  CFRelease(v16);
}

uint64_t fesdm_updateArrayWithNextAvailableURL(void *a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2
    && [a2 count]
    && (uint64_t v6 = objc_msgSend(a3, "nextAvailableFileURLWithExtension:", objc_msgSend(a2, "objectAtIndexedSubscript:", 0))) != 0)
  {
    uint64_t v7 = (void *)[v6 URLByDeletingPathExtension];
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t result = [a2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (result)
    {
      uint64_t v9 = result;
      uint64_t v10 = *(void *)v14;
      while (2)
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v14 != v10) {
            objc_enumerationMutation(a2);
          }
          uint64_t v12 = [v7 URLByAppendingPathExtension:*(void *)(*((void *)&v13 + 1) + 8 * v11)];
          if (!v12 || !a1)
          {
            FigDebugAssert3();
            return FigSignalErrorAt();
          }
          [a1 addObject:v12];
          ++v11;
        }
        while (v9 != v11);
        uint64_t result = [a2 countByEnumeratingWithState:&v13 objects:v17 count:16];
        uint64_t v9 = result;
        if (result) {
          continue;
        }
        break;
      }
    }
  }
  else
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return result;
}

Class __getPLSimpleDCIMDirectoryClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!PhotoLibraryServicesCoreLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __PhotoLibraryServicesCoreLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E5C28480;
    uint64_t v5 = 0;
    PhotoLibraryServicesCoreLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!PhotoLibraryServicesCoreLibraryCore_frameworkLibrary) {
    __getPLSimpleDCIMDirectoryClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("PLSimpleDCIMDirectory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPLSimpleDCIMDirectoryClass_block_invoke_cold_2();
  }
  getPLSimpleDCIMDirectoryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __PhotoLibraryServicesCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PhotoLibraryServicesCoreLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

uint64_t getICCameraDeviceClass()
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__23;
  uint64_t v7 = __Block_byref_object_dispose__23;
  uint64_t v0 = getICCameraDeviceClass_softClass;
  uint64_t v8 = getICCameraDeviceClass_softClass;
  if (!getICCameraDeviceClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getICCameraDeviceClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getICCameraDeviceClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5BC8EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t externalStorageDeviceManager_getStorageDeviceSizeAttributes(void *a1, uint64_t a2)
{
  uint64_t v9 = 0;
  int v4 = [a1 startAccessingSecurityScopedResource];
  uint64_t v5 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "attributesOfFileSystemForPath:error:", objc_msgSend(a1, "path"), &v9);
  uint64_t v6 = 0;
  if (v5) {
    BOOL v7 = v9 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7 && (uint64_t v6 = [v5 objectForKey:a2], objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    FigDebugAssert3();
    return 0;
  }
  else if (v4)
  {
    [a1 stopAccessingSecurityScopedResource];
  }
  return v6;
}

Class __getICCameraDeviceClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!ImageCaptureCoreLibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __ImageCaptureCoreLibraryCore_block_invoke_0;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E5C28498;
    uint64_t v5 = 0;
    ImageCaptureCoreLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!ImageCaptureCoreLibraryCore_frameworkLibrary_0) {
    __getICCameraDeviceClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("ICCameraDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getICCameraDeviceClass_block_invoke_cold_2();
  }
  getICCameraDeviceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __ImageCaptureCoreLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  ImageCaptureCoreLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void *BWCreateFTCinematicTapRequestFromFocusRequest(void *a1)
{
  uint64_t v1 = a1;
  v13[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (void *)[a1 objectForKeyedSubscript:@"CinematicVideoFocusIsFixedPlaneFocus"];
    if (v2) {
      uint64_t v3 = [v2 BOOLValue];
    }
    else {
      uint64_t v3 = 0;
    }
    point.CGFloat x = 0.0;
    point.CGFloat y = 0.0;
    CFDictionaryRef v4 = (const __CFDictionary *)[v1 objectForKeyedSubscript:@"CinematicVideoFocusPoint"];
    if (v4 && CGPointMakeWithDictionaryRepresentation(v4, &point))
    {
      uint64_t v5 = getkFTInvalidTrackId();
      uint64_t v6 = (void *)[v1 objectForKeyedSubscript:@"CinematicVideoFocusObjectID"];
      if (v6) {
        uint64_t v5 = [v6 longLongValue];
      }
      BOOL v7 = (void *)[v1 objectForKeyedSubscript:@"CinematicVideoFocusIsHardFocus"];
      if (v7) {
        uint64_t v8 = [v7 BOOLValue];
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v1 = (void *)[objc_alloc((Class)getFTCinematicTapRequestClass()) init];
      objc_msgSend(v1, "setTapPoint:", point.x, point.y);
      [v1 setTrackId:v5];
      v12[0] = @"isHardFocus";
      uint64_t v9 = [NSNumber numberWithBool:v8];
      v12[1] = @"isFixedFocus";
      v13[0] = v9;
      v13[1] = [NSNumber numberWithBool:v3];
      objc_msgSend(v1, "setMetadata:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v13, v12, 2));
    }
    else
    {
      FigDebugAssert3();
      FigSignalErrorAt();
      return 0;
    }
  }
  return v1;
}

uint64_t BWIsFocusRequestForFixedPlaneFocus(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (void *)[a1 objectForKeyedSubscript:@"CinematicVideoFocusIsFixedPlaneFocus"];
  if (!v1) {
    return 0;
  }
  return [v1 BOOLValue];
}

uint64_t BWIsFocusRequestForHardFocus(void *a1)
{
  uint64_t v1 = (void *)[a1 objectForKeyedSubscript:@"CinematicVideoFocusIsHardFocus"];
  return [v1 BOOLValue];
}

uint64_t fcs_handleStreamControlTakenByAnotherClientNotification(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (dword_1EB4C5270)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(a2, "streaming", v5, v6)) {
    -[BWFigCaptureStream _resetStreamingState]((uint64_t)a2);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t fcs_handleStreamControlRelinquishedByAnotherClientNotification()
{
  if (dword_1EB4C5270)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t fcs_handleFrameReceiveTimeout(uint64_t a1, void *a2)
{
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if ([a2 streaming]) {
    -[BWFigCaptureStream _resetStreamingState]((uint64_t)a2);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t fcs_reactionsInProgressChanged(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t result = [a2 reactionsInProgressChangedHandler];
  if (result)
  {
    CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F543F8]);
    uint64_t v8 = *(uint64_t (**)(void))([a2 reactionsInProgressChangedHandler] + 16);
    return v8();
  }
  return result;
}

void sifn_mergeInferenceResults(const void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v4 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", CMGetAttachment(a1, @"Inferences", 0));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v5 = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(a2);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        if ((objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", v9), "isValid") & 1) == 0) {
          objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", v9), v9);
        }
      }
      uint64_t v6 = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
  if ([v4 count]) {
    CMSetAttachment(a1, @"Inferences", v4, 1u);
  }
}

uint64_t FigCaptureBinaryPlistFindIndexForIntInObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)(*(void *)a1 + a2);
  char v4 = *v3;
  uint64_t v17 = (unsigned int *)(v3 + 1);
  if ((v4 & 0xE0 | 0x10) != 0xD0) {
    abort();
  }
  unint64_t v7 = v4 & 0xF;
  if ((v4 & 0xF) == 0xF)
  {
    uint64_t v17 = (unsigned int *)(v3 + 2);
    unint64_t v7 = bp_readNinc(&v17, v3[1]);
  }
  if (v7)
  {
    unint64_t v8 = 0;
    unint64_t v9 = v7 - 1;
    long long v10 = v17;
    while (1)
    {
      unint64_t v11 = (v9 + v8) >> 1;
      unint64_t Noffset = bp_readNoffset((uint64_t)v10, *(unsigned __int8 *)(a1 + 42), v11 * *(unsigned __int8 *)(a1 + 42));
      unint64_t v13 = bp_readNoffset(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), Noffset * *(unsigned __int8 *)(a1 + 41));
      if ((*(unsigned char *)(*(void *)a1 + v13) & 0xF0) != 0x10) {
        break;
      }
      uint64_t IntForObjectAtOffset = FigCaptureBinaryPlistGetIntForObjectAtOffset((void *)a1, v13);
      if (IntForObjectAtOffset == a3) {
        return v11;
      }
      if (v8 == v9) {
        return -1;
      }
      if (IntForObjectAtOffset < a3)
      {
LABEL_15:
        if (v11 + 1 < v9) {
          unint64_t v8 = v11 + 1;
        }
        else {
          unint64_t v8 = v9;
        }
      }
      else
      {
        if (v11 <= v8 + 1) {
          unint64_t v15 = v8 + 1;
        }
        else {
          unint64_t v15 = (v9 + v8) >> 1;
        }
        unint64_t v9 = v15 - 1;
      }
    }
    if (v8 == v9) {
      return -1;
    }
    goto LABEL_15;
  }
  return -1;
}

uint64_t bp_plistObjCompare1(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return bp_plistObjCompare(a1, *a2, *a3);
}

uint64_t bp_plistObjCompare4(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return bp_plistObjCompare(a1, bswap32(*a2), bswap32(*a3));
}

uint64_t bp_plistObjCompare8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  return bp_plistObjCompare(a1, bswap64(*a2), bswap64(*a3));
}

uint64_t CMIOExtensionFigCaptureStreamCreate(uint64_t a1, void *a2, void *a3, CFTypeRef *a4)
{
  uint64_t v270 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (initializeGlobalsOnce_initializeGlobalsOnceToken != -1) {
    dispatch_once(&initializeGlobalsOnce_initializeGlobalsOnceToken, &__block_literal_global_63);
  }
  if (!objc_opt_class())
  {
    uint64_t v127 = 0;
    uint64_t v7 = 4294954514;
    goto LABEL_138;
  }
  FigCaptureStreamGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  CFTypeRef v8 = cf;
  if (v7) {
    goto LABEL_141;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 20) = 0;
  id v10 = a3;
  *(void *)uint64_t DerivedStorage = cf;
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x458], 8) = v10;
  char v160 = 0;
  int v11 = FigCaptureExternalCameraReplacesBuiltIn(&v160);
  int v129 = a3;
  BOOL v130 = a4;
  long long v12 = (CFTypeRef *)MEMORY[0x1E4F52DF8];
  if (v11 && !v160) {
    long long v12 = (CFTypeRef *)MEMORY[0x1E4F52DD8];
  }
  *(void *)(DerivedStorage + 24) = CFRetain(*v12);
  *(void *)(DerivedStorage + 32) = (id)[a2 manufacturer];
  *(void *)(DerivedStorage + 40) = (id)[a2 modelID];
  *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x458], 8) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "deviceID"), "UUIDString"), "copy");
  *(void *)(DerivedStorage + 56) = (id)[a2 localizedName];
  unint64_t v13 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v215 = 0u;
  long long v216 = 0u;
  long long v217 = 0u;
  long long v218 = 0u;
  long long v14 = (void *)[*(id *)(DerivedStorage + 8) formats];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v215 objects:&v214 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v216;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v216 != v17) {
          objc_enumerationMutation(v14);
        }
        objc_msgSend(v13, "addObject:", objc_msgSend(*(id *)(*((void *)&v215 + 1) + 8 * i), "formatDescription"));
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v215 objects:&v214 count:16];
    }
    while (v16);
  }
  uint64_t v147 = DerivedStorage;
  uint64_t v19 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 8), "formats"), "count") + 1);
  unint64_t v20 = 0x1E4F1C000uLL;
  int v137 = v19;
  if ([v13 count])
  {
    unint64_t v21 = 0;
    CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      long long v23 = (const opaqueCMFormatDescription *)[v13 objectAtIndexedSubscript:v21];
      FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(v23);
      if (MediaSubType == 875704422 || MediaSubType == 1111970369 || MediaSubType == 875704438)
      {
        [v19 addObject:v23];
      }
      else
      {
        unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(v23);
        int32_t v28 = Dimensions;
        unint64_t v29 = HIDWORD(Dimensions);
        CMVideoFormatDescriptionRef formatDescriptionOut = 0;
        CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v23);
        if (CMVideoFormatDescriptionCreate(v22, 0x34323076u, v28, v29, Extensions, &formatDescriptionOut))
        {
          unsigned int v31 = 0;
          uint64_t v32 = v147;
          goto LABEL_106;
        }
        uint64_t v19 = v137;
        [v137 addObject:formatDescriptionOut];
        CFRelease(formatDescriptionOut);
      }
      ++v21;
    }
    while (v21 < [v13 count]);
  }
  unsigned int v31 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v19, "count"));
  uint64_t v32 = v147;
  char v158 = v31;
  if ([v19 count])
  {
    unint64_t v33 = 0;
    int v156 = (__CFString *)*MEMORY[0x1E4F55498];
    float v154 = (__CFString *)*MEMORY[0x1E4F55480];
    uint64_t v151 = *MEMORY[0x1E4F55470];
    uint64_t v149 = *MEMORY[0x1E4F55448];
    uint64_t v135 = (__CFString *)*MEMORY[0x1E4F55410];
    uint64_t v136 = *MEMORY[0x1E4F220E8];
    uint64_t v134 = (__CFString *)*MEMORY[0x1E4F55428];
    unint64_t v34 = 0x1E4F1C000uLL;
    uint64_t v133 = *MEMORY[0x1E4F55300];
    uint64_t v131 = *MEMORY[0x1E4F55318];
    uint64_t v132 = *MEMORY[0x1E4F552F8];
    do
    {
      uint64_t v35 = (const opaqueCMFormatDescription *)[v13 objectAtIndexedSubscript:v33];
      uint64_t v36 = (const opaqueCMFormatDescription *)[v19 objectAtIndexedSubscript:v33];
      uint64_t v37 = objc_msgSend((id)objc_msgSend(*(id *)(v32 + 8), "formats"), "objectAtIndexedSubscript:", v33);
      if (v35 && v36)
      {
        uint64_t v38 = v37;
        if (v37)
        {
          [v37 minFrameDuration];
          double v39 = (double)(int)v212;
          [v38 minFrameDuration];
          double v40 = v39 / (double)(uint64_t)v208;
          [v38 maxFrameDuration];
          int v142 = (int)v206;
          [v38 maxFrameDuration];
          uint64_t v140 = (uint64_t)v202;
        }
        else
        {
          uint64_t v140 = 0;
          int v142 = 0;
          double v40 = NAN;
          long long v212 = 0;
          uint64_t v213 = 0;
          uint64_t v210 = 0;
          long long v211 = 0;
          long long v208 = 0;
          long long v209 = 0;
          int v206 = 0;
          uint64_t v207 = 0;
          uint64_t v204 = 0;
          uint64_t v205 = 0;
          uint64_t v202 = 0;
          v203 = 0;
        }
        unint64_t v41 = (unint64_t)CMVideoFormatDescriptionGetDimensions(v36);
        uint64_t v42 = CMFormatDescriptionGetMediaSubType(v36);
        v263[0] = [NSNumber numberWithUnsignedInt:v42];
        uint64_t v43 = [*(id *)(v34 + 2424) arrayWithObjects:v263 count:1];
        v271.size.CGFloat width = (double)(int)v41;
        v271.size.CGFloat height = (double)SHIDWORD(v41);
        v271.origin.CGFloat x = 0.0;
        v271.origin.CGFloat y = 0.0;
        CFDictionaryRef v44 = CGRectCreateDictionaryRepresentation(v271);
        uint64_t v198 = (__CFString *)v43;
        uint64_t v194 = v156;
        double v195 = v154;
        int v199 = (__CFString *)[NSNumber numberWithInt:v41];
        uint64_t v196 = v151;
        uint64_t v45 = [NSNumber numberWithInt:HIDWORD(v41)];
        uint64_t v197 = v149;
        uint64_t v200 = v45;
        CFDictionaryRef v201 = v44;
        uint64_t v139 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v198 forKeys:&v194 count:4];
        LODWORD(v43) = CMFormatDescriptionGetMediaSubType(v36);
        uint64_t v46 = [NSNumber numberWithUnsignedInt:v42];
        if (v43 == 875704438)
        {
          float v268 = (__CFString *)v46;
          uint64_t v269 = (__CFString *)&unk_1EFAFFCF0;
          CFArrayRef v47 = (void *)MEMORY[0x1E4F1C978];
          int v48 = &v268;
          uint64_t v49 = 2;
        }
        else
        {
          v262[0] = v46;
          CFArrayRef v47 = (void *)MEMORY[0x1E4F1C978];
          int v48 = (__CFString **)v262;
          uint64_t v49 = 1;
        }
        uint64_t v50 = [v47 arrayWithObjects:v48 count:v49];
        unsigned int v143 = ((double)v142 / (double)v140);
        int v141 = v36;
        unint64_t v51 = (unint64_t)CMVideoFormatDescriptionGetDimensions(v36);
        uint64_t v52 = objc_msgSend((id)objc_msgSend(*(id *)(v147 + 8), "availableProperties"), "containsObject:", v136);
        if (v52)
        {
          unint64_t v51 = FigCaptureFitAspectInsideDimensions(0xBD000001080, 0x200000002, (float)(int)v41 / (float)SHIDWORD(v41));
          uint64_t v138 = 0xBD000001080;
        }
        else
        {
          uint64_t v138 = 0;
        }
        v272.size.CGFloat width = (double)(int)v51;
        v272.size.CGFloat height = (double)SHIDWORD(v51);
        v272.origin.CGFloat x = 0.0;
        v272.origin.CGFloat y = 0.0;
        CFDictionaryRef v53 = CGRectCreateDictionaryRepresentation(v272);
        uint64_t v190 = (__CFString *)v50;
        uint64_t v186 = v156;
        id v187 = v154;
        uint64_t v191 = (__CFString *)[NSNumber numberWithInt:v51];
        uint64_t v188 = v151;
        uint64_t v54 = [NSNumber numberWithInt:HIDWORD(v51)];
        uint64_t v189 = v149;
        uint64_t v192 = v54;
        CFDictionaryRef v193 = v53;
        uint64_t v55 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v190 forKeys:&v186 count:4];
        uint64_t v264 = v135;
        uint64_t v266 = (__CFString *)v139;
        uint64_t v265 = v134;
        v267 = (__CFString *)v55;
        uint64_t v56 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v266 forKeys:&v264 count:2];
        CMVideoDimensions v57 = CMVideoFormatDescriptionGetDimensions(v35);
        BOOL v59 = v57.width < (int)v41 || v57.height < SHIDWORD(v41);
        unsigned int v162 = @"FormatDescription";
        id v163 = @"NativeFormatDescription";
        CMVideoFormatDescriptionRef formatDescriptionOut = v141;
        uint64_t v175 = (__CFString *)v35;
        uint64_t v164 = @"NativeFormatRequiresUpscaling";
        uint64_t v176 = [NSNumber numberWithBool:v59];
        uint64_t v165 = @"NativeFormatIndex";
        uint64_t v177 = [NSNumber numberWithInt:v33];
        char v166 = @"AsyncStillCaptureProvidedByStream";
        uint64_t v178 = [NSNumber numberWithBool:v52];
        uint64_t v167 = 0x1EFA50A60;
        uint64_t v179 = [NSNumber numberWithInt:v138];
        uint64_t v168 = 0x1EFA50A80;
        uint64_t v180 = [NSNumber numberWithInt:HIDWORD(v138)];
        uint64_t v169 = @"VideoMinFrameRate";
        uint64_t v181 = [NSNumber numberWithUnsignedInt:v143];
        int v170 = @"VideoMaxFrameRate";
        uint64_t v182 = [NSNumber numberWithUnsignedInt:v40];
        uint64_t v171 = v133;
        uint64_t v183 = [NSNumber numberWithInt:v41];
        uint64_t v172 = v132;
        uint64_t v60 = [NSNumber numberWithInt:HIDWORD(v41)];
        uint64_t v173 = v131;
        uint64_t v184 = v60;
        uint64_t v185 = v56;
        unsigned int v31 = v158;
        objc_msgSend(v158, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &formatDescriptionOut, &v162, 12));
        uint64_t v32 = v147;
        uint64_t v19 = v137;
        unint64_t v34 = 0x1E4F1C000;
      }
      ++v33;
    }
    while ([v19 count] > v33);
  }
  id v61 = objc_alloc_init(MEMORY[0x1E4F28E60]);
  if ([v31 count])
  {
    unint64_t v62 = 0;
    uint64_t v63 = *MEMORY[0x1E4F55300];
    uint64_t v64 = *MEMORY[0x1E4F552F8];
    do
    {
      uint64_t v65 = (void *)[v31 objectAtIndexedSubscript:v62];
      uint64_t v66 = (void *)[v65 objectForKeyedSubscript:v63];
      uint64_t v67 = (void *)[v65 objectForKeyedSubscript:v64];
      if ([v66 integerValue] & 1) != 0 || (objc_msgSend(v67, "integerValue")) {
        [v61 addIndex:v62];
      }
      ++v62;
    }
    while ([v31 count] > v62);
  }
  [v31 removeObjectsAtIndexes:v61];

  unint64_t v68 = [v31 count];
  if (v68 >= 2)
  {
    unint64_t v69 = v68;
    id v70 = objc_alloc_init(MEMORY[0x1E4F28E60]);
    uint64_t v71 = 0;
    uint64_t v157 = *MEMORY[0x1E4F55300];
    uint64_t v155 = *MEMORY[0x1E4F552F8];
    videoDesCGFloat c = (const __CFString *)*MEMORY[0x1E4F1EDA8];
    do
    {
      if (([v70 containsIndex:v71] & 1) == 0)
      {
        CFNumberRef v72 = (void *)[v158 objectAtIndexedSubscript:v71];
        uint64_t v73 = (const opaqueCMFormatDescription *)[v72 objectForKeyedSubscript:@"NativeFormatDescription"];
        uint64_t v74 = (const opaqueCMFormatDescription *)[v72 objectForKeyedSubscript:@"FormatDescription"];
        FourCharCode v75 = CMFormatDescriptionGetMediaSubType(v73);
        FourCharCode v76 = CMFormatDescriptionGetMediaSubType(v74);
        FourCharCode v146 = v75;
        BOOL v77 = FigCaptureVideoCodecTypeSpecifiesCVPixelBufferType(v75);
        BOOL v144 = v77;
        BOOL v145 = v77;
        int v78 = objc_msgSend((id)objc_msgSend(v72, "objectForKeyedSubscript:", v157), "intValue");
        int v150 = objc_msgSend((id)objc_msgSend(v72, "objectForKeyedSubscript:", v155), "intValue");
        Extensiouint64_t n = (void *)CMFormatDescriptionGetExtension(v73, videoDesc);
        objc_msgSend((id)objc_msgSend(v72, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "floatValue");
        float v80 = v79;
        for (uint64_t j = 0; j != v69; ++j)
        {
          if (v71 != j && ([v70 containsIndex:j] & 1) == 0)
          {
            long long v82 = (void *)[v158 objectAtIndexedSubscript:j];
            long long v83 = (const opaqueCMFormatDescription *)[v82 objectForKeyedSubscript:@"FormatDescription"];
            if (v76 == CMFormatDescriptionGetMediaSubType(v83))
            {
              int v84 = objc_msgSend((id)objc_msgSend(v82, "objectForKeyedSubscript:", v157), "intValue");
              int v85 = objc_msgSend((id)objc_msgSend(v82, "objectForKeyedSubscript:", v155), "intValue");
              if (v78 == v84 && v150 == v85)
              {
                CFPropertyListRef v86 = CMFormatDescriptionGetExtension(v83, videoDesc);
                if (Extension == v86 || [Extension isEqualToString:v86])
                {
                  FourCharCode v87 = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)[v82 objectForKeyedSubscript:@"NativeFormatDescription"]);
                  BOOL v88 = FigCaptureVideoCodecTypeSpecifiesCVPixelBufferType(v87);
                  int v90 = !v145 || v87 == v76;
                  if (v146 == v76 || !v90 || (v87 == v76 ? (char v91 = 1) : (char v91 = v144), (v92 = 1, (v91 & 1) == 0) && !v88)) {
                    char v92 = 0;
                  }
                  objc_msgSend((id)objc_msgSend(v82, "objectForKeyedSubscript:", @"VideoMaxFrameRate"), "floatValue");
                  if (v93 > v80) {
                    char v94 = 1;
                  }
                  else {
                    char v94 = v92;
                  }
                  if (v93 < v80 || (v94 & 1) == 0) {
                    [v70 addIndex:j];
                  }
                }
              }
            }
          }
        }
      }
      ++v71;
    }
    while (v71 != v69);
    unsigned int v31 = v158;
    [v158 removeObjectsAtIndexes:v70];

    uint64_t v32 = v147;
  }
  uint64_t v95 = [v31 sortedArrayUsingComparator:&__block_literal_global_155_0];
  unint64_t v20 = 0x1E4F1C000;
  if (v95)
  {
    uint64_t v96 = v95;

    unsigned int v31 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithArray:v96];
  }
  *(_DWORD *)(v32 + 204) = -1;
  long long v97 = (const void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(v32 + 8), "formats"), "objectAtIndexedSubscript:", objc_msgSend(*(id *)(v32 + 8), "activeFormatIndex")), "formatDescription");
  uint64_t v98 = [v31 count];
  if (v98)
  {
    uint64_t v99 = 0;
    while (!CFEqual((CFTypeRef)objc_msgSend((id)objc_msgSend(v31, "objectAtIndexedSubscript:", v99), "objectForKeyedSubscript:", @"FormatDescription"), v97))
    {
      if (v98 == ++v99) {
        goto LABEL_96;
      }
    }
    *(_DWORD *)(v32 + 204) = v99;
    goto LABEL_99;
  }
LABEL_96:
  LODWORD(v99) = *(_DWORD *)(v32 + 204);
  if (v98)
  {
LABEL_99:
    if (v99 == -1)
    {
      uint64_t v100 = 0;
      while (!CFEqual((CFTypeRef)objc_msgSend((id)objc_msgSend(v31, "objectAtIndexedSubscript:", v100), "objectForKeyedSubscript:", @"NativeFormatDescription"), v97))
      {
        if (v98 == ++v100) {
          goto LABEL_106;
        }
      }
      *(_DWORD *)(v32 + 204) = v100;
    }
  }
LABEL_106:
  *(void *)(v32 + 64) = v31;
  uint64_t v101 = [v31 count];
  CFTypeRef v8 = cf;
  if (v101)
  {
    *(unsigned char *)(v32 + 8_Block_object_dispose(&STACK[0x458], 8) = 0;
    id v153 = cmioefcs_copyVideoOutputConfigurations();
    *(void *)(v32 + 96) = [v153 mutableCopy];
    uint64_t v159 = CMBaseObjectGetDerivedStorage();
    long long v102 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    CMVideoFormatDescriptionRef formatDescriptionOut = (CMVideoFormatDescriptionRef)@"PropertyType";
    uint64_t v175 = @"ReadWriteStatus";
    v214.receiver = @"String";
    v214.super_class = (Class)@"ReadOnly";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", &v214, &formatDescriptionOut, 2), @"Manufacturer");
    *(void *)&long long v215 = @"PropertyType";
    *((void *)&v215 + 1) = @"ReadWriteStatus";
    unsigned int v162 = @"String";
    id v163 = @"ReadOnly";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", &v162, &v215, 2), @"ModelID");
    uint64_t v194 = @"PropertyType";
    double v195 = @"ReadWriteStatus";
    uint64_t v198 = @"String";
    int v199 = @"ReadOnly";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", &v198, &v194, 2), @"LocalizedName");
    uint64_t v186 = @"PropertyType";
    id v187 = @"ReadWriteStatus";
    uint64_t v190 = @"String";
    uint64_t v191 = @"ReadOnly";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", &v190, &v186, 2), @"UniqueID");
    long long v208 = @"PropertyType";
    long long v209 = @"ReadWriteStatus";
    long long v211 = @"String";
    long long v212 = @"ReadOnly";
    uint64_t v103 = [*(id *)(v20 + 2536) dictionaryWithObjects:&v211 forKeys:&v208 count:2];
    [v102 setObject:v103 forKeyedSubscript:*MEMORY[0x1E4F54B40]];
    uint64_t v202 = @"PropertyType";
    v203 = @"ReadWriteStatus";
    uint64_t v205 = @"Collection";
    int v206 = @"ReadOnly";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", &v205, &v202, 2), @"SupportedFormatsArray");
    uint64_t v266 = @"PropertyType";
    float v268 = @"Number";
    v267 = @"ReadWriteStatus";
    uint64_t v269 = @"ReadWrite";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", &v268, &v266, 2), @"FormatIndex");
    v263[0] = @"PropertyType";
    uint64_t v264 = @"Number";
    v263[1] = @"ReadWriteStatus";
    uint64_t v265 = @"ReadWrite";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", &v264, v263, 2), @"MinimumFrameRate");
    v261[0] = @"PropertyType";
    v262[0] = @"Number";
    v261[1] = @"ReadWriteStatus";
    v262[1] = @"ReadWrite";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", v262, v261, 2), @"MaximumFrameRate");
    v259[0] = @"PropertyType";
    v260[0] = @"Collection";
    v259[1] = @"ReadWriteStatus";
    v260[1] = @"ReadWrite";
    uint64_t v104 = [*(id *)(v20 + 2536) dictionaryWithObjects:v260 forKeys:v259 count:2];
    [v102 setObject:v104 forKeyedSubscript:*MEMORY[0x1E4F54CB8]];
    v257[0] = @"PropertyType";
    v258[0] = @"Collection";
    v257[1] = @"ReadWriteStatus";
    v258[1] = @"WriteOnly";
    uint64_t v105 = [*(id *)(v20 + 2536) dictionaryWithObjects:v258 forKeys:v257 count:2];
    [v102 setObject:v105 forKeyedSubscript:*MEMORY[0x1E4F54CC8]];
    v255[0] = @"PropertyType";
    v256[0] = @"Collection";
    v255[1] = @"ReadWriteStatus";
    v256[1] = @"ReadWrite";
    uint64_t v106 = [*(id *)(v20 + 2536) dictionaryWithObjects:v256 forKeys:v255 count:2];
    [v102 setObject:v106 forKeyedSubscript:*MEMORY[0x1E4F54CD8]];
    v253[0] = @"PropertyType";
    v254[0] = @"Number";
    v253[1] = @"ReadWriteStatus";
    v254[1] = @"ReadOnly";
    uint64_t v107 = [*(id *)(v20 + 2536) dictionaryWithObjects:v254 forKeys:v253 count:2];
    [v102 setObject:v107 forKeyedSubscript:*MEMORY[0x1E4F54B38]];
    v251[0] = @"PropertyType";
    v252[0] = @"Boolean";
    v251[1] = @"ReadWriteStatus";
    v252[1] = @"ReadWrite";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", v252, v251, 2), @"DeferAdditionOfAttachments");
    v249[0] = @"PropertyType";
    v250[0] = @"Collection";
    v249[1] = @"ReadWriteStatus";
    v250[1] = @"WriteOnly";
    uint64_t v108 = [*(id *)(v20 + 2536) dictionaryWithObjects:v250 forKeys:v249 count:2];
    [v102 setObject:v108 forKeyedSubscript:*MEMORY[0x1E4F54B18]];
    v247[0] = @"PropertyType";
    v248[0] = @"Collection";
    v247[1] = @"ReadWriteStatus";
    v248[1] = @"ReadOnly";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", v248, v247, 2), @"ObjectsDetectionSupportedConfigurationKeys");
    if (objc_msgSend((id)objc_msgSend(*(id *)(v159 + 8), "availableProperties"), "containsObject:", CMIOExtensionPropertyFromPropertyAddress()))
    {
      v245[0] = @"PropertyType";
      v246[0] = @"Boolean";
      v245[1] = @"ReadWriteStatus";
      v246[1] = @"ReadWrite";
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", v246, v245, 2), @"CMIOCinematicFramingEnabled");
      int v109 = (void *)[*(id *)(v159 + 8) availableProperties];
      if ([v109 containsObject:*MEMORY[0x1E4F220F0]])
      {
        v243[0] = @"PropertyType";
        v244[0] = @"Collection";
        v243[1] = @"ReadWriteStatus";
        v244[1] = @"ReadWrite";
        objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 2536), "dictionaryWithObjects:forKeys:count:", v244, v243, 2), @"CMIOCenterStageRectOfInterest");
      }
    }
    if ((int)FigCapturePlatformIdentifier() >= 5)
    {
      v241[0] = @"PropertyType";
      v242[0] = @"Boolean";
      v241[1] = @"ReadWriteStatus";
      v242[1] = @"ReadOnly";
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v242, v241, 2), @"BackgroundBlurSupported");
    }
    if ((int)FigCapturePlatformIdentifier() >= 7)
    {
      v239[0] = @"PropertyType";
      v240[0] = @"Boolean";
      v239[1] = @"ReadWriteStatus";
      v240[1] = @"ReadOnly";
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v240, v239, 2), @"StudioLightingSupported");
      v237[0] = @"PropertyType";
      v238[0] = @"Boolean";
      v237[1] = @"ReadWriteStatus";
      v238[1] = @"ReadOnly";
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v238, v237, 2), @"ReactionEffectsSupported");
      v235[0] = @"PropertyType";
      v236[0] = @"Boolean";
      v235[1] = @"ReadWriteStatus";
      v236[1] = @"ReadOnly";
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v236, v235, 2), @"BackgroundReplacementSupported");
    }
    v233[0] = @"PropertyType";
    v234[0] = @"Boolean";
    v233[1] = @"ReadWriteStatus";
    v234[1] = @"ReadOnly";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v234, v233, 2), @"CompressedStillImageCaptureSupported");
    v231[0] = @"PropertyType";
    v232[0] = @"Boolean";
    v231[1] = @"ReadWriteStatus";
    v232[1] = @"ReadOnly";
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v232, v231, 2), @"CMIOFlashSupported");
    uint64_t v110 = (void *)[*(id *)(v159 + 8) availableProperties];
    if ([v110 containsObject:*MEMORY[0x1E4F220E8]])
    {
      v229[0] = @"PropertyType";
      v230[0] = @"Number";
      v229[1] = @"ReadWriteStatus";
      v230[1] = @"ReadWrite";
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v230, v229, 2), @"CMIOStillImageMaxQualityPrioritization");
      v227[0] = @"PropertyType";
      v228[0] = @"Collection";
      v227[1] = @"ReadWriteStatus";
      v228[1] = @"WriteOnly";
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v228, v227, 2), @"StillImageCaptureNow");
    }
    __int16 v111 = (void *)[*(id *)(v159 + 8) availableProperties];
    if ([v111 containsObject:*MEMORY[0x1E4F22118]])
    {
      v225[0] = @"PropertyType";
      v226[0] = @"Number";
      v225[1] = @"ReadWriteStatus";
      v226[1] = @"ReadWrite";
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v226, v225, 2), @"CMIOVideoZoomFactor");
    }
    v223[0] = @"PropertyType";
    v224[0] = @"Number";
    v223[1] = @"ReadWriteStatus";
    v224[1] = @"ReadWrite";
    uint64_t v112 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v224 forKeys:v223 count:2];
    [v102 setObject:v112 forKeyedSubscript:*MEMORY[0x1E4F54CD0]];
    v221[0] = @"PropertyType";
    v222[0] = @"Number";
    v221[1] = @"ReadWriteStatus";
    v222[1] = @"WriteOnly";
    uint64_t v113 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v222 forKeys:v221 count:2];
    [v102 setObject:v113 forKeyedSubscript:*MEMORY[0x1E4F54748]];
    int v114 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(v159 + 8), "cachedPropertyStateForProperty:", *MEMORY[0x1E4F220F8]), "value"), "BOOLValue");
    CFTypeRef v115 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    uint64_t v116 = (const void *)*MEMORY[0x1E4F1CFC8];
    if (v114) {
      uint64_t v117 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v117 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFTypeRef v118 = CFRetain(v117);
    if (v118 == v115)
    {
      v219[0] = @"PropertyType";
      v220[0] = @"String";
      v219[1] = @"ReadWriteStatus";
      v220[1] = @"ReadWrite";
      uint64_t v119 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v220 forKeys:v219 count:2];
      [v102 setObject:v119 forKeyedSubscript:*MEMORY[0x1E4F54928]];
    }
    if (v118) {
      CFRelease(v118);
    }
    *(void *)(v147 + 72) = [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v102];
    if (*(_DWORD *)(v147 + 204) == -1) {
      cmioefcs_setFormatIndex(v147, &unk_1EFAFFCC0);
    }
    *(void *)(v147 + 24_Block_object_dispose(&STACK[0x458], 8) = objc_alloc_init(FigObjectDetectionMetadataGenerator);
    __int16 v120 = (void *)[*(id *)(v147 + 8) cachedPropertyStateForProperty:CMIOExtensionPropertyFromPropertyAddress()];
    [v120 value];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend((id)objc_msgSend(v120, "value"), "BOOLValue")) {
      uint64_t v116 = v115;
    }
    CFTypeRef v121 = CFRetain(v116);
    *(unsigned char *)(v147 + 216) = v121 == v115;
    if (v121) {
      CFRelease(v121);
    }
    *(_DWORD *)(v147 + 232) = 2;
    __int16 v122 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithObjects:", *MEMORY[0x1E4F54490], *MEMORY[0x1E4F54488], 0);
    if (objc_msgSend((id)objc_msgSend(*(id *)(v147 + 8), "availableProperties"), "containsObject:", @"HumanFullBodyDetectionEnabled"))objc_msgSend(v122, "addObject:", *MEMORY[0x1E4F54498]); {
    *(void *)(v147 + 80) = [v122 copy];
    }
    uint64_t v123 = [FigCaptureCMIOExtensionSessionStreamDelegate alloc];
    if (v123)
    {
      CFTypeRef v124 = cf;
      v214.receiver = v123;
      v214.super_class = (Class)FigCaptureCMIOExtensionSessionStreamDelegate;
      uint64_t v125 = objc_msgSendSuper2(&v214, sel_init);
      uint64_t v126 = v125;
      if (v125) {
        v125[1] = v124;
      }
    }
    else
    {
      uint64_t v126 = 0;
    }
    uint64_t v127 = v153;
    *(void *)(v147 + 256) = v126;
    objc_msgSend(v129, "setDelegate:");
    uint64_t v7 = 0;
    *BOOL v130 = cf;
    CFTypeRef cf = 0;
    goto LABEL_138;
  }
  uint64_t v7 = 4294954510;
LABEL_141:
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v127 = 0;
LABEL_138:

  return v7;
}

id cmioefcs_copyVideoOutputConfigurations()
{
  v10[3] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16)) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = (os_unfair_lock_s *)(DerivedStorage + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
  id v3 = (id)[*(id *)(v1 + 96) copy];
  os_unfair_lock_unlock(v2);
  if (!v3)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v7 = *MEMORY[0x1E4F553F8];
    v9[0] = *MEMORY[0x1E4F55410];
    v9[1] = v7;
    v10[0] = v4;
    v10[1] = v5;
    v9[2] = *MEMORY[0x1E4F55428];
    v10[2] = v6;
    id v3 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:v9 count:3];
  }
  return v3;
}

uint64_t cmioefcs_setFormatIndex(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  int v3 = [a2 intValue];
  int v4 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 64), "objectAtIndexedSubscript:", v3), "objectForKeyedSubscript:", @"NativeFormatIndex"), "intValue");
  if (dword_1E96B6D48)
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(a1 + 16)
    || (os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20)),
        *(_DWORD *)(a1 + 204) = v3,
        id v6 = *(id *)(a1 + 8),
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 20)),
        !v6))
  {
    uint64_t v9 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v9;
  }
  else
  {
    uint64_t v7 = dispatch_semaphore_create(0);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __cmioefcs_setFormatIndex_block_invoke;
    _OWORD v11[3] = &unk_1E5C286A8;
    v11[5] = &v14;
    v11[6] = a1;
    void v11[4] = v7;
    [v6 setActiveFormatIndex:v4 reply:v11];
    dispatch_time_t v8 = dispatch_time(0, 5000000000);
    dispatch_semaphore_wait(v7, v8);
    dispatch_release(v7);

    uint64_t v9 = *((unsigned int *)v15 + 6);
  }
  _Block_object_dispose(&v14, 8);
  return v9;
}

void sub_1A5BD6798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __initializeGlobalsOnce_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t CMIOExtensionFigCaptureStreamInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 16))
  {
    uint64_t v1 = DerivedStorage;
    CMIOExtensionFigCaptureStreamStop();
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
    *(unsigned char *)(v1 + 16) = 1;
    *(void *)uint64_t v1 = 0;

    *(void *)(v1 + _Block_object_dispose(&STACK[0x458], 8) = 0;
    uint64_t v2 = *(const void **)(v1 + 24);
    if (v2) {
      CFRelease(v2);
    }
    *(void *)(v1 + 24) = 0;
    int v3 = *(const void **)(v1 + 32);
    if (v3) {
      CFRelease(v3);
    }
    *(void *)(v1 + 32) = 0;
    int v4 = *(const void **)(v1 + 40);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(v1 + 40) = 0;
    id v5 = *(const void **)(v1 + 48);
    if (v5) {
      CFRelease(v5);
    }
    *(void *)(v1 + 4_Block_object_dispose(&STACK[0x458], 8) = 0;
    id v6 = *(const void **)(v1 + 56);
    if (v6) {
      CFRelease(v6);
    }
    *(void *)(v1 + 56) = 0;

    *(void *)(v1 + 64) = 0;
    *(void *)(v1 + 72) = 0;

    *(void *)(v1 + 96) = 0;
    *(void *)(v1 + 256) = 0;

    *(void *)(v1 + 112) = 0;
    *(void *)(v1 + 120) = 0;

    *(void *)(v1 + 144) = 0;
    *(void *)(v1 + 152) = 0;

    *(void *)(v1 + 176) = 0;
    *(void *)(v1 + 184) = 0;

    *(void *)(v1 + 24_Block_object_dispose(&STACK[0x458], 8) = 0;
    *(void *)(v1 + 80) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  }
  return 0;
}

uint64_t CMIOExtensionFigCaptureStreamCopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  id v3 = [NSString alloc];
  if (*(unsigned char *)(DerivedStorage + 88)) {
    int v4 = "[SUSPENDED]";
  }
  else {
    int v4 = "";
  }
  return [v3 initWithFormat:@"<CMIOExtensionFigCaptureStream:%p [%@]%s>", a1, *(void *)(DerivedStorage + 56), v4];
}

uint64_t CMIOExtensionFigCaptureStreamCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CMIOExtensionFigCaptureStreamCopyProperty_sOnceToken != -1) {
    dispatch_once(&CMIOExtensionFigCaptureStreamCopyProperty_sOnceToken, &__block_literal_global_97_0);
  }
  if ([(id)CMIOExtensionFigCaptureStreamCopyProperty_noOpProperties containsObject:a2])
  {
    uint64_t result = 0;
    *a4 = 0;
    return result;
  }
  if (FigCFEqual())
  {
    dispatch_time_t v8 = *(void **)(DerivedStorage + 72);
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    dispatch_time_t v8 = *(void **)(DerivedStorage + 24);
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    dispatch_time_t v8 = *(void **)(DerivedStorage + 32);
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    dispatch_time_t v8 = *(void **)(DerivedStorage + 40);
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    dispatch_time_t v8 = *(void **)(DerivedStorage + 48);
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    dispatch_time_t v8 = *(void **)(DerivedStorage + 56);
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    dispatch_time_t v8 = *(void **)(DerivedStorage + 64);
    if (v8)
    {
LABEL_25:
      uint64_t v9 = (void *)CFRetain(v8);
LABEL_26:
      id v10 = v9;
LABEL_37:
      uint64_t result = 0;
      *a4 = v10;
      return result;
    }
LABEL_36:
    id v10 = 0;
    goto LABEL_37;
  }
  if (FigCFEqual())
  {
    id v11 = cmioefcs_copyVideoOutputConfigurations();
    *a4 = v11;
    if (v11) {
      return 0;
    }
    else {
      return 4294954511;
    }
  }
  if (FigCFEqual())
  {
    uint64_t v9 = cmioefcs_copyVideoOutputsEnabled();
    goto LABEL_26;
  }
  if (FigCFEqual())
  {
    long long v12 = NSNumber;
    uint64_t v13 = *(unsigned int *)(DerivedStorage + 204);
    goto LABEL_35;
  }
  if (FigCFEqual())
  {
    dispatch_time_t v8 = &unk_1EFAFFCD8;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    uint64_t v15 = NSNumber;
    LODWORD(v14) = *(_DWORD *)(DerivedStorage + 212);
    goto LABEL_44;
  }
  if (FigCFEqual())
  {
    uint64_t v15 = NSNumber;
    LODWORD(v14) = *(_DWORD *)(DerivedStorage + 208);
LABEL_44:
    dispatch_time_t v8 = (void *)[v15 numberWithFloat:v14];
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    uint64_t v16 = (os_unfair_lock_s *)(DerivedStorage + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
    int v17 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v18 = *(unsigned __int8 *)(DerivedStorage + 200);
LABEL_50:
    if (!v18) {
      int v17 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    *a4 = CFRetain(*v17);
    os_unfair_lock_unlock(v16);
    return 0;
  }
  if (FigCFEqual())
  {
    uint64_t v16 = (os_unfair_lock_s *)(DerivedStorage + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
    int v17 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v18 = *(unsigned __int8 *)(DerivedStorage + 216);
    goto LABEL_50;
  }
  uint64_t v19 = @"BackgroundBlurSupported";
  if (FigCFEqual()
    || (uint64_t v19 = @"StudioLightingSupported", FigCFEqual())
    || (uint64_t v19 = @"ReactionEffectsSupported", FigCFEqual())
    || (uint64_t v19 = @"BackgroundReplacementSupported", FigCFEqual()))
  {
    uint64_t v20 = [*(id *)(DerivedStorage + 72) objectForKeyedSubscript:v19];
    unint64_t v21 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!v20) {
      unint64_t v21 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    dispatch_time_t v8 = (void *)*v21;
    if (!*v21) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    cmioefcs_copyFlashSupportedProperty(DerivedStorage, a4);
    return 0;
  }
  if (FigCFEqual())
  {
    CFAllocatorRef v22 = NSNumber;
    long long v23 = (void *)[*(id *)(DerivedStorage + 8) availableProperties];
    dispatch_time_t v8 = objc_msgSend(v22, "numberWithBool:", objc_msgSend(v23, "containsObject:", *MEMORY[0x1E4F220E8]));
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    long long v12 = NSNumber;
    uint64_t v13 = *(unsigned int *)(DerivedStorage + 232);
LABEL_35:
    dispatch_time_t v8 = (void *)[v12 numberWithInt:v13];
    if (v8) {
      goto LABEL_25;
    }
    goto LABEL_36;
  }
  if (FigCFEqual())
  {
    dispatch_time_t v8 = *(void **)(DerivedStorage + 80);
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  return 4294954509;
}

uint64_t CMIOExtensionFigCaptureStreamSetProperty(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CMIOExtensionFigCaptureStreamSetProperty_sOnceToken != -1) {
    dispatch_once(&CMIOExtensionFigCaptureStreamSetProperty_sOnceToken, &__block_literal_global_102);
  }
  if ([(id)CMIOExtensionFigCaptureStreamSetProperty_noOpProperties containsObject:a2]) {
    return 0;
  }
  if (FigCFEqual())
  {
    if (DerivedStorage && a3)
    {
      locuint64_t k = (os_unfair_lock_t)(DerivedStorage + 20);
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
      id v6 = *(void **)(DerivedStorage + 96);
      uint64_t v7 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", *MEMORY[0x1E4F55410], *MEMORY[0x1E4F55420], *MEMORY[0x1E4F553F8], *MEMORY[0x1E4F55428], 0);
      long long v76 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      obuint64_t j = v7;
      uint64_t v66 = [v7 countByEnumeratingWithState:&v76 objects:v75 count:16];
      if (v66)
      {
        uint64_t v65 = *(void *)v77;
        uint64_t v64 = *MEMORY[0x1E4F55350];
        uint64_t v62 = *MEMORY[0x1E4F553C0];
        uint64_t v61 = *MEMORY[0x1E4F55370];
        do
        {
          for (uint64_t i = 0; i != v66; ++i)
          {
            if (*(void *)v77 != v65) {
              objc_enumerationMutation(obj);
            }
            uint64_t v9 = *(void *)(*((void *)&v76 + 1) + 8 * i);
            if ([a3 objectForKeyedSubscript:v9])
            {
              id v10 = (void *)[a3 objectForKeyedSubscript:v9];
              if ([v10 objectForKeyedSubscript:v64])
              {
                int v11 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v62), "intValue");
                int v12 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v61), "intValue");
                if (v11)
                {
                  int v13 = v12;
                  if (v12)
                  {
                    id v10 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v10];
                    v82.size.CGFloat width = (double)v11;
                    v82.size.CGFloat height = (double)v13;
                    v82.origin.CGFloat x = 0.0;
                    v82.origin.CGFloat y = 0.0;
                    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v82);
                    [v10 setObject:DictionaryRepresentation forKeyedSubscript:v64];
                  }
                }
              }
              long long v73 = 0u;
              long long v74 = 0u;
              long long v71 = 0u;
              long long v72 = 0u;
              uint64_t v15 = (void *)[v10 allKeys];
              uint64_t v16 = [v15 countByEnumeratingWithState:&v71 objects:&v67 count:16];
              if (v16)
              {
                uint64_t v17 = *(void *)v72;
                do
                {
                  for (uint64_t j = 0; j != v16; ++j)
                  {
                    if (*(void *)v72 != v17) {
                      objc_enumerationMutation(v15);
                    }
                    objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", v9), "setObject:forKeyedSubscript:", objc_msgSend(v10, "objectForKeyedSubscript:", *(void *)(*((void *)&v71 + 1) + 8 * j)), *(void *)(*((void *)&v71 + 1) + 8 * j));
                  }
                  uint64_t v16 = [v15 countByEnumeratingWithState:&v71 objects:&v67 count:16];
                }
                while (v16);
              }
            }
          }
          uint64_t v66 = [obj countByEnumeratingWithState:&v76 objects:v75 count:16];
        }
        while (v66);
      }
      uint64_t v19 = lock;
      goto LABEL_27;
    }
    goto LABEL_125;
  }
  if (FigCFEqual())
  {
    if (DerivedStorage && a3)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
      unint64_t v21 = (void *)[a3 objectForKeyedSubscript:*MEMORY[0x1E4F55410]];
      CFAllocatorRef v22 = (void *)MEMORY[0x1E4F553E0];
      long long v23 = (CFTypeRef *)MEMORY[0x1E4F1D260];
      long long v24 = (void *)MEMORY[0x1E4F553E8];
      if (v21)
      {
        CFDataRef v25 = v21;
        uint64_t v26 = [v21 objectForKeyedSubscript:*MEMORY[0x1E4F553E0]];
        if (v26)
        {
          uint64_t v27 = (void *)v26;

          *(void *)(DerivedStorage + 120) = 0;
          if (!CFEqual(v27, *v23)) {
            *(void *)(DerivedStorage + 120) = v27;
          }
        }
        uint64_t v28 = [v25 objectForKeyedSubscript:*v24];
        if (v28)
        {
          unint64_t v29 = (void *)v28;

          *(void *)(DerivedStorage + 112) = 0;
          if (!CFEqual(v29, *v23)) {
            *(void *)(DerivedStorage + 112) = v29;
          }
        }
      }
      uint64_t v30 = (void *)[a3 objectForKeyedSubscript:*MEMORY[0x1E4F553F8]];
      if (v30)
      {
        unsigned int v31 = v30;
        uint64_t v32 = [v30 objectForKeyedSubscript:*v22];
        if (v32)
        {
          unint64_t v33 = (void *)v32;

          *(void *)(DerivedStorage + 152) = 0;
          if (!CFEqual(v33, *v23)) {
            *(void *)(DerivedStorage + 152) = v33;
          }
        }
        uint64_t v34 = [v31 objectForKeyedSubscript:*v24];
        if (v34)
        {
          uint64_t v35 = (void *)v34;

          *(void *)(DerivedStorage + 144) = 0;
          if (!CFEqual(v35, *v23)) {
            *(void *)(DerivedStorage + 144) = v35;
          }
        }
      }
      uint64_t v36 = (void *)[a3 objectForKeyedSubscript:*MEMORY[0x1E4F55428]];
      if (v36)
      {
        uint64_t v37 = v36;
        uint64_t v38 = [v36 objectForKeyedSubscript:*v22];
        if (v38)
        {
          double v39 = (void *)v38;

          *(void *)(DerivedStorage + 184) = 0;
          if (!CFEqual(v39, *v23)) {
            *(void *)(DerivedStorage + 184) = v39;
          }
        }
        uint64_t v40 = [v37 objectForKeyedSubscript:*v24];
        if (v40)
        {
          unint64_t v41 = (void *)v40;

          *(void *)(DerivedStorage + 176) = 0;
          if (!CFEqual(v41, *v23)) {
            *(void *)(DerivedStorage + 176) = v41;
          }
        }
        uint64_t v42 = [v37 objectForKeyedSubscript:*MEMORY[0x1E4F553C8]];
        if (v42)
        {
          uint64_t v43 = (void *)v42;

          *(void *)(DerivedStorage + 192) = 0;
          if (!CFEqual(v43, *v23)) {
            *(void *)(DerivedStorage + 192) = v43;
          }
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 20));
      if ([a3 objectForKeyedSubscript:*MEMORY[0x1E4F55420]]
        || [a3 objectForKeyedSubscript:*MEMORY[0x1E4F55418]]
        || [a3 objectForKeyedSubscript:*MEMORY[0x1E4F55430]]
        || [a3 objectForKeyedSubscript:*MEMORY[0x1E4F55438]]
        || [a3 objectForKeyedSubscript:*MEMORY[0x1E4F55440]]
        || [a3 objectForKeyedSubscript:*MEMORY[0x1E4F553F0]])
      {
        return 4294954516;
      }
      uint64_t result = [a3 objectForKeyedSubscript:*MEMORY[0x1E4F55408]];
      goto LABEL_90;
    }
LABEL_125:
    FigDebugAssert3();
    return 4294954516;
  }
  if (FigCFEqual())
  {
    if (!DerivedStorage || !a3) {
      goto LABEL_125;
    }
    CFDictionaryRef v44 = (os_unfair_lock_s *)(DerivedStorage + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
    uint64_t v45 = *MEMORY[0x1E4F55410];
    *(unsigned char *)(DerivedStorage + 104) = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E4F55410]), "BOOLValue");
    uint64_t v46 = *MEMORY[0x1E4F553F8];
    *(unsigned char *)(DerivedStorage + 136) = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E4F553F8]), "BOOLValue");
    uint64_t v47 = *MEMORY[0x1E4F55428];
    *(unsigned char *)(DerivedStorage + 16_Block_object_dispose(&STACK[0x458], 8) = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E4F55428]), "BOOLValue");
    if (!*(unsigned char *)(DerivedStorage + 104)) {
      cmioefcs_releaseClientBufferPool(DerivedStorage, v45);
    }
    if (!*(unsigned char *)(DerivedStorage + 136)) {
      cmioefcs_releaseClientBufferPool(DerivedStorage, v46);
    }
    if (!*(unsigned char *)(DerivedStorage + 168)) {
      cmioefcs_releaseClientBufferPool(DerivedStorage, v47);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 20));
    uint64_t v48 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", v47), "BOOLValue");
    uint64_t v67 = 0;
    unint64_t v68 = &v67;
    uint64_t v69 = 0x2020000000;
    int v70 = 0;
    if (!*(unsigned char *)(DerivedStorage + 16))
    {
      if (*(unsigned char *)(DerivedStorage + 17))
      {
        FigDebugAssert3();
        int v56 = -12782;
        goto LABEL_82;
      }
      uint64_t v49 = v48;
      uint64_t v50 = (void *)[*(id *)(DerivedStorage + 8) availableProperties];
      uint64_t v51 = *MEMORY[0x1E4F220E8];
      if (![v50 containsObject:*MEMORY[0x1E4F220E8]])
      {
        int v56 = -12787;
LABEL_82:
        *((_DWORD *)v68 + 6) = v56;
LABEL_83:
        _Block_object_dispose(&v67, 8);
        if ([a3 objectForKeyedSubscript:*MEMORY[0x1E4F55420]]
          || [a3 objectForKeyedSubscript:*MEMORY[0x1E4F55418]]
          || [a3 objectForKeyedSubscript:*MEMORY[0x1E4F55430]]
          || [a3 objectForKeyedSubscript:*MEMORY[0x1E4F55438]]
          || [a3 objectForKeyedSubscript:*MEMORY[0x1E4F55440]]
          || [a3 objectForKeyedSubscript:*MEMORY[0x1E4F553F0]])
        {
          return 4294954516;
        }
        uint64_t result = [a3 objectForKeyedSubscript:*MEMORY[0x1E4F55408]];
LABEL_90:
        if (result) {
          return 4294954516;
        }
        return result;
      }
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
      *(unsigned char *)(DerivedStorage + 217) = v49;
      id v52 = *(id *)(DerivedStorage + 8);
      os_unfair_lock_unlock(v44);
      if (v52)
      {
        CFDictionaryRef v53 = dispatch_semaphore_create(0);
        *(void *)&long long v71 = v51;
        *(void *)&long long v76 = [NSNumber numberWithBool:v49];
        uint64_t v54 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v76 forKeys:&v71 count:1];
        v75[0] = MEMORY[0x1E4F143A8];
        v75[1] = 3221225472;
        v75[2] = __cmioefcs_setAsyncStillCaptureEnabled_block_invoke;
        v75[3] = &unk_1E5C28618;
        v75[4] = v53;
        v75[5] = &v67;
        [v52 setPropertyValues:v54 reply:v75];
        dispatch_time_t v55 = dispatch_time(0, 5000000000);
        dispatch_semaphore_wait(v53, v55);
        dispatch_release(v53);

        goto LABEL_83;
      }
    }
    int v56 = FigSignalErrorAt();
    goto LABEL_82;
  }
  if (FigCFEqual())
  {
    return cmioefcs_setFormatIndex(DerivedStorage, a3);
  }
  if (FigCFEqual())
  {
    return cmioefcs_setMinFrameRate(DerivedStorage, a3);
  }
  if (FigCFEqual())
  {
    return cmioefcs_setMaxFrameRate(DerivedStorage, a3);
  }
  if (FigCFEqual())
  {
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
    *(unsigned char *)(DerivedStorage + 200) = *MEMORY[0x1E4F1CFD0] == (void)a3;
    uint64_t v19 = (os_unfair_lock_s *)(DerivedStorage + 20);
LABEL_27:
    os_unfair_lock_unlock(v19);
    return 0;
  }
  if (FigCFEqual()) {
    goto LABEL_103;
  }
  if (FigCFEqual())
  {
    if (a3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      uint64_t v57 = [a3 BOOLValue];
    }
    else {
      uint64_t v57 = 0;
    }
    return cmioefcs_setCinematicFramingEnabled(DerivedStorage, v57);
  }
  if (FigCFEqual())
  {
    return cmioefcs_setCenterStageRectOfInterest(DerivedStorage, (uint64_t)a3);
  }
  if (FigCFEqual())
  {
    int v58 = [a3 intValue];
    uint64_t result = 0;
    *(_DWORD *)(DerivedStorage + 232) = v58;
    return result;
  }
  if (FigCFEqual())
  {
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
    uint64_t v59 = cmioefcs_captureAsyncStillImage(DerivedStorage, a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 20));
    return v59;
  }
  if (FigCFEqual())
  {
LABEL_103:
    return cmioefcs_setObjectDetectionConfiguration(DerivedStorage, a3);
  }
  if (!FigCFEqual()) {
    return 4294954509;
  }
  return cmioefcs_setVideoZoomFactor(DerivedStorage, a3);
}

void sub_1A5BD85C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMIOExtensionFigCaptureStreamStop()
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 16)) {
    goto LABEL_17;
  }
  if (!*(unsigned char *)(DerivedStorage + 17)) {
    goto LABEL_16;
  }
  [*(id *)(DerivedStorage + 248) unprepare];
  cmioefcs_setAsyncStillCaptureConfigurations(v1, MEMORY[0x1E4F1CC08]);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  id v2 = *(id *)(v1 + 8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  if (!v2)
  {
LABEL_17:
    *((_DWORD *)v20 + 6) = -12785;
    goto LABEL_16;
  }
  id v3 = dispatch_semaphore_create(0);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __CMIOExtensionFigCaptureStreamStop_block_invoke;
  v18[3] = &unk_1E5C285F0;
  v18[5] = v3;
  v18[6] = &v19;
  void v18[4] = v2;
  [v2 stopStream:v18];
  dispatch_time_t v4 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v3, v4);
  dispatch_release(v3);

  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  *(unsigned char *)(v1 + 17) = 0;
  uint64_t v5 = [*(id *)(v1 + 224) count];
  if (v5)
  {
    FigCaptureDeviceGetNotificationCenter(v5, v6);
    CMNotificationCenterPostNotification();
  }
  uint64_t v7 = *(const void **)(v1 + 240);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(v1 + 240) = 0;
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  dispatch_time_t v8 = *(void **)(v1 + 96);
  uint64_t v9 = [v8 countByEnumeratingWithState:&v14 objects:v23 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v8);
        }
        cmioefcs_releaseClientBufferPool(v1, *(void *)(*((void *)&v14 + 1) + 8 * i));
      }
      uint64_t v9 = [v8 countByEnumeratingWithState:&v14 objects:v23 count:16];
    }
    while (v9);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
LABEL_16:
  uint64_t v12 = *((unsigned int *)v20 + 6);
  _Block_object_dispose(&v19, 8);
  return v12;
}

void sub_1A5BD8850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void cmioefcs_setAsyncStillCaptureConfigurations(uint64_t a1, uint64_t a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  long long v14 = &v13;
  uint64_t v15 = 0x2020000000;
  int v16 = 0;
  if (!a1 || !a2)
  {
    FigDebugAssert3();
    int v11 = -12780;
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 17))
  {
    FigDebugAssert3();
    int v11 = -12782;
    goto LABEL_9;
  }
  dispatch_time_t v4 = (void *)[*(id *)(a1 + 8) availableProperties];
  uint64_t v5 = *MEMORY[0x1E4F220E0];
  if (![v4 containsObject:*MEMORY[0x1E4F220E0]])
  {
    int v11 = -12787;
LABEL_9:
    *((_DWORD *)v14 + 6) = v11;
    goto LABEL_10;
  }
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
  id v7 = *(id *)(a1 + 8);
  os_unfair_lock_unlock(v6);
  if (!v7)
  {
LABEL_11:
    int v11 = FigSignalErrorAt();
    goto LABEL_9;
  }
  dispatch_time_t v8 = dispatch_semaphore_create(0);
  uint64_t v17 = v5;
  v18[0] = a2;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:&v17 count:1];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __cmioefcs_setAsyncStillCaptureConfigurations_block_invoke;
  v12[3] = &unk_1E5C28618;
  void v12[4] = v8;
  void v12[5] = &v13;
  [v7 setPropertyValues:v9 reply:v12];
  dispatch_time_t v10 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v8, v10);
  dispatch_release(v8);

LABEL_10:
  _Block_object_dispose(&v13, 8);
}

void sub_1A5BD8AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t __CMIOExtensionFigCaptureStreamStop_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [a2 code];
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t cmioefcs_releaseClientBufferPool(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return FigDebugAssert3();
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 20));
  dispatch_time_t v4 = (void *)[*(id *)(a1 + 96) objectForKeyedSubscript:a2];
  uint64_t v5 = *MEMORY[0x1E4F55330];
  return [v4 setObject:0 forKeyedSubscript:v5];
}

intptr_t __cmioefcs_setAsyncStillCaptureConfigurations_block_invoke(uint64_t a1, void *a2)
{
  if (a2) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a2 code];
  }
  id v3 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v3);
}

uint64_t __CMIOExtensionFigCaptureStreamCopyProperty_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t result = objc_msgSend(v0, "initWithObjects:", *MEMORY[0x1E4F54928], *MEMORY[0x1E4F54CD0], *MEMORY[0x1E4F54748], 0);
  CMIOExtensionFigCaptureStreamCopyProperty_noOpProperties = result;
  return result;
}

id cmioefcs_copyVideoOutputsEnabled()
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16)) {
    return 0;
  }
  uint64_t v1 = (unsigned __int8 *)DerivedStorage;
  id v2 = (os_unfair_lock_s *)(DerivedStorage + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
  v5[0] = *MEMORY[0x1E4F55410];
  v6[0] = [NSNumber numberWithBool:v1[104]];
  v5[1] = *MEMORY[0x1E4F553F8];
  v6[1] = [NSNumber numberWithBool:v1[136]];
  void v5[2] = *MEMORY[0x1E4F55428];
  v6[2] = [NSNumber numberWithBool:v1[168]];
  id v3 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:v5 count:3];
  os_unfair_lock_unlock(v2);
  return v3;
}

CFTypeRef cmioefcs_copyFlashSupportedProperty(uint64_t a1, void *a2)
{
  int v3 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "cachedPropertyStateForProperty:", *MEMORY[0x1E4F220F8]), "value"), "BOOLValue");
  dispatch_time_t v4 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (!v3) {
    dispatch_time_t v4 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef result = CFRetain(*v4);
  *a2 = result;
  return result;
}

uint64_t __CMIOExtensionFigCaptureStreamSetProperty_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t result = objc_msgSend(v0, "initWithObjects:", *MEMORY[0x1E4F54928], *MEMORY[0x1E4F54CD0], *MEMORY[0x1E4F54748], 0);
  CMIOExtensionFigCaptureStreamSetProperty_noOpProperties = result;
  return result;
}

uint64_t cmioefcs_setMinFrameRate(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  [a2 floatValue];
  float v4 = v3;
  if (dword_1E96B6D48)
  {
    int v18 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(a1 + 16)
    || (uint64_t v6 = (os_unfair_lock_s *)(a1 + 20),
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20)),
        *(float *)(a1 + 212) = v4,
        id v7 = *(id *)(a1 + 8),
        os_unfair_lock_unlock(v6),
        !v7))
  {
    uint64_t v13 = FigSignalErrorAt();
    *((_DWORD *)v20 + 6) = v13;
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    CMTimeMake(&v16, 100000, (int)(float)(v4 * 100000.0));
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime time = v16;
    CFDictionaryRef v9 = CMTimeCopyAsDictionary(&time, v8);
    if (v9)
    {
      dispatch_time_t v10 = dispatch_semaphore_create(0);
      uint64_t v23 = *MEMORY[0x1E4F22108];
      CFDictionaryRef v24 = v9;
      uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v24 forKeys:&v23 count:1];
      CFRelease(v9);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      void v15[2] = __cmioefcs_setMinFrameRate_block_invoke;
      v15[3] = &unk_1E5C285F0;
      v15[5] = v10;
      v15[6] = &v19;
      void v15[4] = v7;
      [v7 setPropertyValues:v11 reply:v15];
      dispatch_time_t v12 = dispatch_time(0, 5000000000);
      dispatch_semaphore_wait(v10, v12);
      dispatch_release(v10);
    }

    uint64_t v13 = *((unsigned int *)v20 + 6);
  }
  _Block_object_dispose(&v19, 8);
  return v13;
}

void sub_1A5BD9338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cmioefcs_setMaxFrameRate(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  [a2 floatValue];
  float v4 = v3;
  if (dword_1E96B6D48)
  {
    int v18 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(a1 + 16) {
    || (uint64_t v6 = (os_unfair_lock_s *)(a1 + 20),
  }
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20)),
        *(float *)(a1 + 20_Block_object_dispose(&STACK[0x458], 8) = v4,
        id v7 = *(id *)(a1 + 8),
        os_unfair_lock_unlock(v6),
        !v7))
  {
    uint64_t v13 = FigSignalErrorAt();
    *((_DWORD *)v20 + 6) = v13;
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    CMTimeMake(&v16, 100000, (int)(float)(v4 * 100000.0));
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime time = v16;
    CFDictionaryRef v9 = CMTimeCopyAsDictionary(&time, v8);
    if (v9)
    {
      dispatch_time_t v10 = dispatch_semaphore_create(0);
      uint64_t v23 = *MEMORY[0x1E4F22100];
      CFDictionaryRef v24 = v9;
      uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v24 forKeys:&v23 count:1];
      CFRelease(v9);
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      void v15[2] = __cmioefcs_setMaxFrameRate_block_invoke;
      v15[3] = &unk_1E5C285F0;
      v15[5] = v10;
      v15[6] = &v19;
      void v15[4] = v7;
      [v7 setPropertyValues:v11 reply:v15];
      dispatch_time_t v12 = dispatch_time(0, 5000000000);
      dispatch_semaphore_wait(v10, v12);
      dispatch_release(v10);
    }

    uint64_t v13 = *((unsigned int *)v20 + 6);
  }
  _Block_object_dispose(&v19, 8);
  return v13;
}

void sub_1A5BD96A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cmioefcs_setObjectDetectionConfiguration(uint64_t a1, void *a2)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (*(unsigned char *)(a1 + 16))
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t v4 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54490]), "intValue");
      uint64_t v5 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54488]), "intValue");
      uint64_t v6 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54498]), "intValue");
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
      [*(id *)(a1 + 248) setMaxHumanFaces:v4];
      objc_msgSend(*(id *)(a1 + 248), "setHumanFaceEyeDetectionEnabled:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54458]), "BOOLValue"));
      objc_msgSend(*(id *)(a1 + 248), "setHumanFaceSmileDetectionEnabled:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54460]), "BOOLValue"));
      objc_msgSend(*(id *)(a1 + 248), "setHumanFaceBlinkDetectionEnabled:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54450]), "BOOLValue"));
      objc_msgSend(*(id *)(a1 + 248), "setMaxHumanHeads:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F544A8]), "intValue"));
      [*(id *)(a1 + 248) setMaxHumanBodies:v5];
      [*(id *)(a1 + 248) setMaxHumanFullBodies:v6];
      objc_msgSend(*(id *)(a1 + 248), "setMaxDogBodies:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54478]), "intValue"));
      objc_msgSend(*(id *)(a1 + 248), "setMaxDogHeads:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54480]), "intValue"));
      objc_msgSend(*(id *)(a1 + 248), "setMaxCatBodies:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54468]), "intValue"));
      objc_msgSend(*(id *)(a1 + 248), "setMaxCatHeads:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F54470]), "intValue"));
      objc_msgSend(*(id *)(a1 + 248), "setMaxSalientObjects:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F544B0]), "intValue"));
      objc_msgSend(*(id *)(a1 + 248), "setMaxSportsBalls:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F544B8]), "intValue"));
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 20));
      return 0;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
}

uint64_t cmioefcs_setCinematicFramingEnabled(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  if (!a1)
  {
    FigDebugAssert3();
    CFDictionaryRef v9 = v13;
    uint64_t v8 = 4294954516;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16))
  {
LABEL_11:
    uint64_t v8 = FigSignalErrorAt();
    *((_DWORD *)v13 + 6) = v8;
    goto LABEL_9;
  }
  if ((objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "availableProperties"), "containsObject:", CMIOExtensionPropertyFromPropertyAddress()) & 1) == 0)
  {
    CFDictionaryRef v9 = v13;
    uint64_t v8 = 4294954509;
LABEL_8:
    *((_DWORD *)v9 + 6) = v8;
    goto LABEL_9;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
  id v4 = *(id *)(a1 + 8);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 20));
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = dispatch_semaphore_create(0);
  uint64_t v16 = CMIOExtensionPropertyFromPropertyAddress();
  v17[0] = [NSNumber numberWithBool:a2];
  uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:&v16 count:1];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __cmioefcs_setCinematicFramingEnabled_block_invoke;
  _OWORD v11[3] = &unk_1E5C28618;
  void v11[4] = v5;
  v11[5] = &v12;
  [v4 setPropertyValues:v6 reply:v11];
  dispatch_time_t v7 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v5, v7);
  dispatch_release(v5);

  uint64_t v8 = *((unsigned int *)v13 + 6);
  if (!v8) {
    *(unsigned char *)(a1 + 216) = a2;
  }
LABEL_9:
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1A5BD9C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cmioefcs_setCenterStageRectOfInterest(uint64_t a1, uint64_t a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  int v18 = 0;
  if (!a1)
  {
    FigDebugAssert3();
    uint64_t v6 = v16;
    uint64_t v7 = 4294954516;
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_13;
  }
  if ((objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "availableProperties"), "containsObject:", CMIOExtensionPropertyFromPropertyAddress()) & 1) == 0)
  {
    uint64_t v6 = v16;
    goto LABEL_9;
  }
  id v4 = (void *)[*(id *)(a1 + 8) availableProperties];
  char v5 = [v4 containsObject:*MEMORY[0x1E4F220F0]];
  uint64_t v6 = v16;
  if ((v5 & 1) == 0)
  {
LABEL_9:
    uint64_t v7 = 4294954509;
LABEL_10:
    *((_DWORD *)v6 + 6) = v7;
    goto LABEL_11;
  }
  uint64_t v7 = *((unsigned int *)v16 + 6);
  if (!v7)
  {
    uint64_t v8 = (os_unfair_lock_s *)(a1 + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
    id v9 = *(id *)(a1 + 8);
    os_unfair_lock_unlock(v8);
    if (v9)
    {
      dispatch_time_t v10 = dispatch_semaphore_create(0);
      uint64_t v19 = CMIOExtensionPropertyFromPropertyAddress();
      v20[0] = a2;
      uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      v14[2] = __cmioefcs_setCenterStageRectOfInterest_block_invoke;
      void v14[3] = &unk_1E5C28618;
      v14[4] = v10;
      v14[5] = &v15;
      [v9 setPropertyValues:v11 reply:v14];
      dispatch_time_t v12 = dispatch_time(0, 5000000000);
      dispatch_semaphore_wait(v10, v12);
      dispatch_release(v10);

      uint64_t v7 = *((unsigned int *)v16 + 6);
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v7 = FigSignalErrorAt();
    *((_DWORD *)v16 + 6) = v7;
  }
LABEL_11:
  _Block_object_dispose(&v15, 8);
  return v7;
}

void sub_1A5BD9F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cmioefcs_captureAsyncStillImage(uint64_t a1, void *a2)
{
  v10[27] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 17) && *(unsigned char *)(a1 + 168))
  {
    unint64_t v4 = atomic_fetch_add_explicit(&cmioefcs_captureAsyncStillImage_sStillCaptureUniqueID, 1uLL, memory_order_relaxed)
       + 1;
    char v5 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    if (a2)
    {
      objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", @"CMIOCompressedFormat"), @"CompressedFormat");
      objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", @"CMIOHighResolutionPhotoEnabled"), @"HighResolutionCapture");
      objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", @"CMIOFlashMode"), @"FlashMode");
      objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", @"CMIOQualityPrioritization"), @"PhotoQualityPrioritization");
      objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", @"CMIOMaxPhotoDimensionsWidth"), @"MaxPhotoDimensionsWidth");
      objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", @"CMIOMaxPhotoDimensionsHeight"), @"MaxPhotoDimensionsHeight");
      uint64_t v6 = v5;
      char v5 = a2;
    }
    else
    {
      uint64_t v6 = 0;
    }
    objc_msgSend(*(id *)(a1 + 224), "setObject:forKeyedSubscript:", v5, objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", v4));
    uint64_t v7 = *(void **)(a1 + 8);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __cmioefcs_captureAsyncStillImage_block_invoke;
    v10[3] = &__block_descriptor_48_e43_v24__0__opaqueCMSampleBuffer__8__NSError_16l;
    void v10[4] = a1;
    v10[5] = v4;
    [v7 captureAsyncStillImage:v4 options:v6 reply:v10];
    if (dword_1E96B6D48)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t cmioefcs_setVideoZoomFactor(uint64_t a1, void *a2)
{
  v22[20] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  int v18 = &v17;
  uint64_t v19 = 0x2020000000;
  int v20 = 0;
  [a2 floatValue];
  int v4 = v3;
  if (dword_1E96B6D48)
  {
    int v16 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(a1 + 16)
    || (uint64_t v6 = (os_unfair_lock_s *)(a1 + 20),
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20)),
        id v7 = *(id *)(a1 + 8),
        os_unfair_lock_unlock(v6),
        !v7))
  {
    uint64_t v12 = FigSignalErrorAt();
    *((_DWORD *)v18 + 6) = v12;
  }
  else
  {
    uint64_t v8 = dispatch_semaphore_create(0);
    uint64_t v21 = *MEMORY[0x1E4F22118];
    LODWORD(v9) = v4;
    v22[0] = [NSNumber numberWithFloat:v9];
    uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:&v21 count:1];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __cmioefcs_setVideoZoomFactor_block_invoke;
    void v14[3] = &unk_1E5C285F0;
    v14[5] = v8;
    void v14[6] = &v17;
    v14[4] = v7;
    [v7 setPropertyValues:v10 reply:v14];
    dispatch_time_t v11 = dispatch_time(0, 5000000000);
    dispatch_semaphore_wait(v8, v11);
    dispatch_release(v8);

    uint64_t v12 = *((unsigned int *)v18 + 6);
  }
  _Block_object_dispose(&v17, 8);
  return v12;
}

void sub_1A5BDA624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t __cmioefcs_setAsyncStillCaptureEnabled_block_invoke(uint64_t a1, void *a2)
{
  if (a2) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a2 code];
  }
  int v3 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v3);
}

intptr_t __cmioefcs_setMinFrameRate_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [a2 code];
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

intptr_t __cmioefcs_setMaxFrameRate_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [a2 code];
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

intptr_t __cmioefcs_setCinematicFramingEnabled_block_invoke(uint64_t a1, void *a2)
{
  if (a2) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a2 code];
  }
  int v3 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v3);
}

intptr_t __cmioefcs_setCenterStageRectOfInterest_block_invoke(uint64_t a1, void *a2)
{
  if (a2) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a2 code];
  }
  int v3 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v3);
}

void __cmioefcs_captureAsyncStillImage_block_invoke(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  memset(&v26, 0, sizeof(v26));
  CMSampleBufferGetPresentationTimeStamp(&v26, sbuf);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 20));
  id v7 = objc_msgSend(*(id *)(v6 + 224), "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithLongLong:", v5));
  objc_msgSend(*(id *)(v6 + 224), "setObject:forKeyedSubscript:", 0, objc_msgSend(NSNumber, "numberWithLongLong:", v5));
  if (!*(unsigned char *)(v6 + 17)) {
    goto LABEL_21;
  }
  if (!sbuf || a3 || !*(unsigned char *)(v6 + 168) || !*(void *)(v6 + 176))
  {
    uint64_t DataBuffer = FigDebugAssert3();
    goto LABEL_20;
  }
  if (![v7 objectForKeyedSubscript:@"CMIOCompressedFormat"])
  {
    time.xpc_object_t value = 0;
    CFTypeRef v27 = 0;
    *(void *)CFTypeRef cf = 0;
    uint64_t DataBuffer = (uint64_t)CMSampleBufferGetDataBuffer(sbuf);
    if (DataBuffer)
    {
      if (!CMPhotoDecompressionSessionCreate())
      {
        CMSampleBufferGetDataBuffer(sbuf);
        if (!CMPhotoDecompressionSessionCreateContainer())
        {
          uint64_t v17 = (void *)[*(id *)(v6 + 96) objectForKeyedSubscript:*MEMORY[0x1E4F55428]];
          uint64_t v18 = objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", *MEMORY[0x1E4F55388]), "intValue");
          if (v18)
          {
            uint64_t v34 = *MEMORY[0x1E4F562B0];
            v35[0] = [NSNumber numberWithInt:v18];
            [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:&v34 count:1];
          }
          CMPhotoDecompressionContainerCreateImageForIndex();
        }
      }
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
      uint64_t DataBuffer = (uint64_t)v27;
      if (v27) {
        CFRelease(v27);
      }
    }
    xpc_object_t value = (const void *)time.value;
    if (time.value)
    {
      if (dword_1E96B6D48)
      {
        LODWORD(v27) = 0;
        LOBYTE(v35[0]) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v21 = v27;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v35[0])) {
          unsigned int v22 = v21;
        }
        else {
          unsigned int v22 = v21 & 0xFFFFFFFE;
        }
        if (v22)
        {
          CMTime time = v26;
          Float64 Seconds = CMTimeGetSeconds(&time);
          *(_DWORD *)CFTypeRef cf = 136315650;
          *(void *)&cf[4] = "cmioefcs_handleCapturedStillImage";
          __int16 v29 = 2048;
          uint64_t v30 = value;
          __int16 v31 = 2048;
          Float64 v32 = Seconds;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v24 = *(void *)(v6 + 176);
      goto LABEL_38;
    }
    goto LABEL_20;
  }
  CMBlockBufferRef v8 = CMSampleBufferGetDataBuffer(sbuf);
  if (!v8)
  {
    FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(sbuf);
    CMSetAttachment(0, @"CMIOBlockBufferFormatDescription", FormatDescription, 1u);
LABEL_20:
    FigCaptureDeviceGetNotificationCenter(DataBuffer, v16);
    CMNotificationCenterPostNotification();
LABEL_21:
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 20));
    return;
  }
  xpc_object_t value = v8;
  CFRetain(v8);
  CMFormatDescriptionRef v10 = CMSampleBufferGetFormatDescription(sbuf);
  CMSetAttachment(value, @"CMIOBlockBufferFormatDescription", v10, 1u);
  if (dword_1E96B6D48)
  {
    LODWORD(v27) = 0;
    LOBYTE(v35[0]) = 0;
    dispatch_time_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v12 = v27;
    if (os_log_type_enabled(v11, v35[0])) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = v12 & 0xFFFFFFFE;
    }
    if (v13)
    {
      CMTime time = v26;
      Float64 v14 = CMTimeGetSeconds(&time);
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = "cmioefcs_handleCapturedStillImage";
      __int16 v29 = 2048;
      uint64_t v30 = value;
      __int16 v31 = 2048;
      Float64 v32 = v14;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v24 = *(void *)(v6 + 192);
LABEL_38:
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 20));
  if (v24)
  {
    CFDataRef v25 = *(void (**)(uint64_t, const void *, CMTime *))(v24 + 16);
    CMTime time = v26;
    v25(v24, value, &time);
  }
  CFRelease(value);
}

intptr_t __cmioefcs_setVideoZoomFactor_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [a2 code];
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t CMIOExtensionFigCaptureStreamStart()
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  double v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 16)) {
    goto LABEL_10;
  }
  if (*(unsigned char *)(DerivedStorage + 17)) {
    goto LABEL_9;
  }
  [*(id *)(DerivedStorage + 248) prepareForVideoFormat:0];
  if (*(unsigned char *)(v1 + 217))
  {
    unsigned int v12 = @"MaxPhotoQualityPrioritization";
    v13[0] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 232)];
    cmioefcs_setAsyncStillCaptureConfigurations(v1, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:&v12 count:1]);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  id v2 = *(id *)(v1 + 8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  if (!v2)
  {
LABEL_10:
    *((_DWORD *)v9 + 6) = -12785;
    goto LABEL_9;
  }
  int v3 = dispatch_semaphore_create(0);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __CMIOExtensionFigCaptureStreamStart_block_invoke;
  v7[3] = &unk_1E5C285F0;
  v7[5] = v3;
  void v7[6] = &v8;
  v7[4] = v2;
  [v2 startStream:v7];
  dispatch_time_t v4 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v3, v4);
  dispatch_release(v3);

  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  *(void *)(v1 + 224) = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (!*((_DWORD *)v9 + 6)) {
    *(unsigned char *)(v1 + 17) = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
LABEL_9:
  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A5BDB344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMIOExtensionFigCaptureStreamAddAttachmentsToSampleBuffer(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F53070];
  dispatch_time_t v4 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = v4;
  }
  else
  {
    uint64_t v5 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  }
  ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a2);
  uint64_t v8 = ImageBuffer;
  if (ImageBuffer)
  {
    CFTypeRef v9 = CVBufferCopyAttachment(ImageBuffer, @"SampleBufferPropagatableAttachments", 0);
    if (v9)
    {
      CFDictionaryRef v10 = (const __CFDictionary *)CFAutorelease(v9);
      if (v10)
      {
        CMSetAttachments(a2, v10, 1u);
        CVBufferRemoveAttachment(v8, @"SampleBufferPropagatableAttachments");
      }
    }
    CFTypeRef v11 = CVBufferCopyAttachment(v8, @"SampleBufferNonPropagatableAttachments", 0);
    if (v11)
    {
      CFDictionaryRef v12 = (const __CFDictionary *)CFAutorelease(v11);
      if (v12)
      {
        CMSetAttachments(a2, v12, 0);
        CVBufferRemoveAttachment(v8, @"SampleBufferNonPropagatableAttachments");
      }
    }
    CFTypeRef v13 = CMGetAttachment(a2, v3, 0);
    if (v13) {
      [v5 addEntriesFromDictionary:v13];
    }
    Float64 v14 = (void *)CMGetAttachment(v8, v3, 0);
  }
  else
  {
    Float64 v14 = 0;
  }
  uint64_t v15 = *MEMORY[0x1E4F54380];
  if (![v5 objectForKeyedSubscript:*MEMORY[0x1E4F54380]])
  {
    uint64_t v16 = [v14 objectForKeyedSubscript:v15];
    if (v16) {
      uint64_t v17 = (void *)v16;
    }
    else {
      uint64_t v17 = &unk_1EFB04F68;
    }
    [v5 setObject:v17 forKeyedSubscript:v15];
  }
  if (v14) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = v5;
  }
  CMSetAttachment(v8, v3, (CFTypeRef)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v18], 1u);
  CMSetAttachment(a2, v3, v5, 1u);
  return 0;
}

uint64_t CMIOExtensionFigCaptureStreamEnqueueReactionEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  CFStringRef v3 = *(void **)(CMBaseObjectGetDerivedStorage() + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __CMIOExtensionFigCaptureStreamEnqueueReactionEffect_block_invoke;
  void v6[3] = &unk_1E5C28660;
  void v6[4] = &v7;
  [v3 enqueueReactionEffect:a2 reply:v6];
  uint64_t v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1A5BDB5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t __CMIOExtensionFigCaptureStreamStart_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [a2 code];
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t __CMIOExtensionFigCaptureStreamEnqueueReactionEffect_block_invoke(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t result = [a2 code];
    *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t __cmioefcs_sortFigCaptureSourceFormats_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *MEMORY[0x1E4F55300];
  int v6 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F55300]), "intValue");
  uint64_t v7 = *MEMORY[0x1E4F552F8];
  int v8 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E4F552F8]), "intValue") * v6;
  int v9 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", v5), "intValue");
  int v10 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", v7), "intValue");
  if (v8 >= v10 * v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = -1;
  }
  if (v8 > v10 * v9) {
    return 1;
  }
  else {
    return v11;
  }
}

intptr_t __cmioefcs_setFormatIndex_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a2 code];
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t FigFlashlightServerStart()
{
  v1[0] = 1;
  v1[1] = flashlightServer_handleReplyMessage;
  v1[2] = flashlightServer_handleNoReplyMessage;
  memset(&v1[3], 0, 24);
  return FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.flashlight", (uint64_t)v1, 0);
}

uint64_t flashlightServer_handleNoReplyMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    uint64_t v1 = 4294966630;
  }
  return v1;
}

uint64_t flashlightServer_handleGlobalFlashlightCreationMessage(_xpc_connection_s *a1, void *a2)
{
  xpc_connection_get_pid(a1);
  if (flashlightServer_handleGlobalFlashlightCreationMessage_onceToken != -1) {
    dispatch_once(&flashlightServer_handleGlobalFlashlightCreationMessage_onceToken, &__block_literal_global_64);
  }
  pthread_mutex_lock((pthread_mutex_t *)flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlightCreationLock);
  if (flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlight)
  {
    pthread_mutex_unlock((pthread_mutex_t *)flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlightCreationLock);
  }
  else
  {
    uint64_t v3 = FigFlashlightCreate(*MEMORY[0x1E4F1CF80], 1, 0, 0, (CFTypeRef *)&flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlight);
    pthread_mutex_unlock((pthread_mutex_t *)flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlightCreationLock);
    if (v3) {
      return v3;
    }
  }
  uint64_t v3 = FigXPCServerAssociateObjectWithConnection();
  if (v3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    xpc_dictionary_set_uint64(a2, (const char *)*MEMORY[0x1E4F20280], 0);
  }
  return v3;
}

uint64_t __flashlightServer_handleGlobalFlashlightCreationMessage_block_invoke()
{
  uint64_t result = FigSimpleMutexCreate();
  flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlightCreationLocuint64_t k = result;
  return result;
}

void sub_1A5BDC06C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t captureSession_setRestoreForcedOffOverCaptureActiveSlaveStreamEnabled(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)[*(id *)(CMBaseObjectGetDerivedStorage() + 656) objectForKeyedSubscript:a2];
  if (v4) {
    uint64_t v4 = (void *)v4[2];
  }
  return [v4 setRestorationOfForcedOffOverCaptureActiveSlaveStreamEnabled:a3];
}

unint64_t captureSession_servicePendingIrisRecordings(const void *a1, void *a2, char a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v48 = v49;
    LODWORD(v46) = 0;
    FigDebugAssert3();
  }
  uint64_t v5 = &unk_1EB4C5000;
  do
  {
    unint64_t result = objc_msgSend((id)objc_msgSend(a2, "pendingIrisRecordings", v46), "count");
    if (!result) {
      break;
    }
    uint64_t v7 = objc_msgSend((id)objc_msgSend(a2, "pendingIrisRecordings"), "firstObject");
    if (v5[68])
    {
      LODWORD(v56.CFDictionaryAddValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int value = v56.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
        unsigned int v10 = value;
      }
      else {
        unsigned int v10 = value & 0xFFFFFFFE;
      }
      if (v10)
      {
        uint64_t v11 = *(void *)(DerivedStorage + 104);
        LODWORD(v57.CFDictionaryAddValue(theDict, key, value) = 136315650;
        *(CMTimeValue *)((char *)&v57.value + 4) = (CMTimeValue)"captureSession_servicePendingIrisRecordings";
        LOWORD(v57.flags) = 2114;
        *(void *)((char *)&v57.flags + 2) = v11;
        HIWORD(v57.epoch) = 2112;
        uint64_t v58 = (uint64_t)v7;
        LODWORD(v4_Block_object_dispose(&STACK[0x458], 8) = 32;
        uint64_t v47 = &v57;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!objc_msgSend(v7, "isEmpty", v47, v48))
    {
      int v20 = (void *)[v7 irisMovieInfo];
      CMTime v56 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      CMTime type = v56;
      if ([(id)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)a2) valveIsOpen])
      {
        unsigned int v21 = (void *)-[FigCaptureMovieFileSinkPipeline fileCoordinatorNode]((uint64_t)a2);
        if (v20) {
          [v20 audioOffset];
        }
        else {
          memset(v54, 0, sizeof(v54));
        }
        CMTime v61 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
        unint64_t result = [v21 updateStopPTS:&v61 audioOffset:v54 previousStopPTS:&v56 previousAudioOffset:&type];
        if (!result) {
          goto LABEL_40;
        }
        uint64_t v36 = [(id)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)a2) enqueueIrisRequest:v20];
        if (v36)
        {
          uint64_t v37 = v36;
          uint64_t v38 = (void *)-[FigCaptureMovieFileSinkPipeline fileCoordinatorNode]((uint64_t)a2);
          CMTime v61 = v56;
          CMTime v57 = type;
          unint64_t result = [v38 updateStopPTS:&v61 audioOffset:&v57 previousStopPTS:0 previousAudioOffset:0];
          if (v37 == -16957 || v37 == -15543)
          {
            memset(&v61, 0, sizeof(v61));
            if (v20) {
              [v20 stillImageCaptureTime];
            }
            else {
              memset(&lhs, 0, sizeof(lhs));
            }
            CMTimeMake(&rhs, 1, 1000);
            CMTimeSubtract(&v61, &lhs, &rhs);
            uint64_t v40 = (void *)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)a2);
            CMTime v57 = v61;
            unint64_t result = [v40 prepareToFinishAllEnqueuedIrisRequestsWithEndTime:&v57];
LABEL_52:
            int v35 = 5;
            continue;
          }
          if (v37 == -16953)
          {
LABEL_40:
            if ((a3 & 1) == 0) {
              goto LABEL_52;
            }
            uint64_t v37 = 4294950340;
          }
          double v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
          uint64_t v5 = (_DWORD *)&unk_1EB4C5000;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          captureSession_postNotificationsForIrisRequestCompletedWithError(a1, [a2 sinkID], v20, v37);
        }
      }
      else
      {
        if ([v20 isMomentCaptureMovieRecording])
        {
          uint64_t v22 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)a2), "objectAtIndexedSubscript:", 0), "sinkID");
          uint64_t v23 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(v22, objc_msgSend((id)objc_msgSend(v20, "settings"), "settingsID"), 0));
          uint64_t v24 = NSNumber;
          [(id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)a2) torchLevel];
          objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(v24, "numberWithFloat:"), @"TorchEnabled");
          CFDataRef v25 = objc_msgSend((id)objc_msgSend(v20, "settings"), "videoSettings");
          objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(v25, "objectForKeyedSubscript:", @"AVVideoWidthKey"), @"IrisMovieWidth");
          objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(v25, "objectForKeyedSubscript:", @"AVVideoHeightKey"), @"IrisMovieHeight");
          if ([v20 spatialOverCaptureExpected]) {
            [v23 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"SpatialOverCaptureMovieEnabled"];
          }
          captureSession_postNotificationWithPayload(a1, @"DidBeginRecordingMomentCaptureMovie", v23);
        }
        CMTime v26 = (void *)[a2 sinkID];
        CFTypeRef v27 = (void *)[v20 settings];
        captureSession_fileStartRecording(a1, v26, v27, v20, MEMORY[0x1E4F1FA10]);
        uint64_t v28 = [(id)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)a2) openValveWithIrisRequest:v20];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = [a2 sinkID];
          uint64_t v31 = CMBaseObjectGetDerivedStorage();
          if (!_FigIsCurrentDispatchQueue())
          {
            uint64_t v48 = v49;
            LODWORD(v46) = 0;
            FigDebugAssert3();
          }
          uint64_t v32 = objc_msgSend(*(id *)(v31 + 664), "movieFileSinkPipelineWithSinkID:", v30, v46);
          unint64_t v33 = (void *)v32;
          if (v32) {
            uint64_t v34 = (void *)-[FigCaptureMovieFileSinkPipeline fileCoordinatorNode](v32);
          }
          else {
            uint64_t v34 = (void *)-[FigCaptureAudioFileSinkPipeline fileCoordinatorNode]([*(id *)(v31 + 664) audioFileSinkPipelineWithSinkID:v30]);
          }
          if (v34)
          {
            objc_msgSend(v34, "cancelStartRecordingWithSettings:", objc_msgSend(v20, "settings"));
            [v33 setRecording:0];
            captureSession_postNotificationsForIrisRequestCompletedWithError(a1, v30, v20, v29);
          }
          else
          {
            uint64_t v48 = v49;
            LODWORD(v46) = 0;
            FigDebugAssert3();
            FigSignalErrorAt();
          }
          uint64_t v5 = (_DWORD *)&unk_1EB4C5000;
        }
      }
      unint64_t result = objc_msgSend((id)objc_msgSend(a2, "pendingIrisRecordings", v46), "removeObjectAtIndex:", 0);
      int v35 = 0;
      continue;
    }
    mach_absolute_time();
    [v7 enqueuedHostTime];
    unint64_t result = FigHostTimeToNanoseconds();
    int v12 = v5[68];
    if (result < 0x28FA6AE00)
    {
      if (v12)
      {
        LODWORD(v56.CFDictionaryAddValue(theDict, key, value) = 0;
        LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
        unint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v42 = v56.value;
        if (os_log_type_enabled(v41, type.value)) {
          unsigned int v43 = v42;
        }
        else {
          unsigned int v43 = v42 & 0xFFFFFFFE;
        }
        if (v43)
        {
          uint64_t v44 = *(void *)(DerivedStorage + 104);
          uint64_t v45 = objc_msgSend((id)objc_msgSend(v7, "settings"), "settingsID");
          LODWORD(v57.CFDictionaryAddValue(theDict, key, value) = 136315650;
          *(CMTimeValue *)((char *)&v57.value + 4) = (CMTimeValue)"captureSession_servicePendingIrisRecordings";
          LOWORD(v57.flags) = 2114;
          *(void *)((char *)&v57.flags + 2) = v44;
          HIWORD(v57.epoch) = 2048;
          uint64_t v58 = v45;
          _os_log_send_and_compose_impl();
        }
        return fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return result;
    }
    if (v12)
    {
      unint64_t v13 = result;
      LODWORD(v56.CFDictionaryAddValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionaryAddValue(theDict, key, value) = 0;
      Float64 v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v15 = v56.value;
      if (os_log_type_enabled(v14, type.value)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        double v17 = (double)(v13 / 0x3B9ACA00);
        uint64_t v18 = *(void *)(DerivedStorage + 104);
        uint64_t v19 = objc_msgSend((id)objc_msgSend(v7, "settings"), "settingsID");
        LODWORD(v57.CFDictionaryAddValue(theDict, key, value) = 136315906;
        *(CMTimeValue *)((char *)&v57.value + 4) = (CMTimeValue)"captureSession_servicePendingIrisRecordings";
        LOWORD(v57.flags) = 2114;
        *(void *)((char *)&v57.flags + 2) = v18;
        HIWORD(v57.epoch) = 2048;
        uint64_t v58 = v19;
        __int16 v59 = 2048;
        double v60 = v17;
        LODWORD(v4_Block_object_dispose(&STACK[0x458], 8) = 42;
        uint64_t v46 = &v57;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v5 = (_DWORD *)&unk_1EB4C5000;
    }
    captureSession_postNotificationsForIrisRequestCompletedWithError(a1, [a2 sinkID], +[BWIrisMovieInfo emptyIrisMovieInfoWithFigCaptureMovieFileRecordingSettings:](BWIrisMovieInfo, "emptyIrisMovieInfoWithFigCaptureMovieFileRecordingSettings:", objc_msgSend(v7, "settings", v46)), 4294951756);
    unint64_t result = objc_msgSend((id)objc_msgSend(a2, "pendingIrisRecordings"), "removeObjectAtIndex:", 0);
    int v35 = 4;
  }
  while (v35 != 5);
  return result;
}

void sub_1A5BDCE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cs_resetImageControlModeAndStreamSelection(uint64_t a1, int a2)
{
  if ([(id)-[FigCaptureMovieFileSinkPipeline captureDevice](a1) autoImageControlMode] == 2) {
    [(id)-[FigCaptureMovieFileSinkPipeline captureDevice](a1) setAutoImageControlMode:a2 ^ 1u];
  }
  uint64_t result = [(id)-[FigCaptureMovieFileSinkPipeline captureDevice](a1) isBravoVariant];
  if (result)
  {
    uint64_t v5 = (void *)-[FigCaptureMovieFileSinkPipeline captureDevice](a1);
    return [v5 setBravoStreamSelectionConfigurationForRecordingEnabled:0];
  }
  return result;
}

void captureSession_postNotificationsForIrisRequestCompletedWithError(const void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v18[26] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a3)
    {
      uint64_t v5 = a4;
      if (a4)
      {
        if (a4 == -16418 || a4 == -15433 || a4 == -15542)
        {
          [a3 processingTimeInMilliseconds];
          if (v8 > 0.0)
          {
            [a3 processingTimeInMilliseconds];
            if (v9 < 500.0)
            {
              CMBaseObjectGetDerivedStorage();
              if (dword_1EB4C5110)
              {
                os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t v5 = 4294951862;
            }
          }
        }
        uint64_t v11 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend((id)objc_msgSend(a3, "settings", v15, v16), "settingsID"), v5);
        v18[0] = a2;
        v17[0] = @"SectionID";
        v17[1] = @"SettingsID";
        v18[1] = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend((id)objc_msgSend(a3, "settings"), "settingsID"));
        void v17[2] = @"IsOriginalPhotoMovie";
        void v18[2] = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(a3, "isOriginalPhotoRecording"));
        v17[3] = @"ErrorStatus";
        v18[3] = [NSNumber numberWithInt:v5];
        int v12 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:4];
        if ([a3 spatialOverCaptureExpected])
        {
          unint64_t v13 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v12];
          [v13 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"IsSpatialOverCaptureMovie"];
        }
        else
        {
          unint64_t v13 = 0;
        }
        if ((int)[a3 numberOfRequestedVariants] >= 1)
        {
          int v14 = 0;
          do
          {
            captureSession_postNotificationWithPayload(a1, @"IrisDidRecordIrisMovie", v11);
            captureSession_postNotificationWithPayload(a1, @"IrisDidFinishRecordingIrisMovie", v12);
            if (v13) {
              captureSession_postNotificationWithPayload(a1, @"IrisDidFinishRecordingIrisMovie", v13);
            }
            ++v14;
          }
          while (v14 < (int)[a3 numberOfRequestedVariants]);
        }
        cs_reportLivePhotoMovieCoreAnalyticsData((uint64_t)a1, a3, v5, 0);
      }
    }
  }
}

void captureSession_showRecordingVideoWhileMultitaskingDialogIfNecessary()
{
  v17[18] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (cs_initializeVideoRecordingWhileMultitaskingStatics_onceToken != -1) {
    dispatch_once(&cs_initializeVideoRecordingWhileMultitaskingStatics_onceToken, &__block_literal_global_521);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&sVideoRecordingWhileMultitaskingDialogLock);
  if (sVideoRecordingWhileMultitaskingDialogDisplayed)
  {
    if (!dword_1EB4C5110) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (sVideoRecordingWhileMultitaskingDialogInFlight == 1)
  {
LABEL_11:
    SInt32 error = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_12;
  }
  if (dword_1EB4C5110)
  {
    SInt32 error = 0;
    uint64_t v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  SInt32 error = 0;
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithIdentifier:", @"com.apple.CMCapture", v12, v13);
  uint64_t v3 = [v2 localizedStringForKey:@"VIDEO_RECORDING_WHILE_MULTITASKING_OK_BUTTON" value:&stru_1EFA403E0 table:@"Localizable"];
  uint64_t v4 = [v2 localizedStringForKey:@"VIDEO_RECORDING_WHILE_MULTITASKING_MESSAGE" value:&stru_1EFA403E0 table:@"Localizable"];
  uint64_t v5 = *MEMORY[0x1E4F1D9A8];
  v16[0] = *MEMORY[0x1E4F1D9E0];
  v16[1] = v5;
  v17[0] = v3;
  v17[1] = v4;
  CFDictionaryRef v6 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:2];
  CFUserNotificationRef v7 = CFUserNotificationCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0.0, 0, &error, v6);
  if (!v7)
  {
    unsigned int v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
LABEL_12:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_13;
  }
  CFUserNotificationRef v8 = v7;
  sVideoRecordingWhileMultitaskingDialogInFlight = 1;
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __captureSession_showRecordingVideoWhileMultitaskingDialogIfNecessary_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = v8;
  void block[5] = DerivedStorage;
  dispatch_async(global_queue, block);
LABEL_13:
  os_unfair_lock_unlock((os_unfair_lock_t)&sVideoRecordingWhileMultitaskingDialogLock);
}

void cs_reportLivePhotoMovieCoreAnalyticsData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  uint64_t v8 = *(unsigned int *)(DerivedStorage + 408);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
  double v9 = objc_alloc_init(BWLivePhotoMovieAnalyticsPayload);
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setClientIDType:+[BWCoreAnalyticsReporter clientApplicationIDType:*(void *)(DerivedStorage + 88)]];
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setRecordingSucceeded:a4];
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setErrorStatus:a3];
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setSessionStatus:v8];
  -[BWLivePhotoMovieAnalyticsPayload setLongPressMovie:](v9, "setLongPressMovie:", objc_msgSend((id)objc_msgSend(a2, "settings"), "isIrisMovieRecording"));
  -[BWLivePhotoMovieAnalyticsPayload setOriginalRecording:](v9, "setOriginalRecording:", [a2 isOriginalPhotoRecording]);
  if (a2)
  {
    [a2 stillImageCaptureTime];
    [(BWLivePhotoMovieAnalyticsPayload *)v9 setHasStillImagePTS:BYTE4(v31) & 1];
    [a2 movieTrimEndTime];
    [a2 movieTrimStartTime];
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    [(BWLivePhotoMovieAnalyticsPayload *)v9 setHasStillImagePTS:0];
    memset(&lhs, 0, sizeof(lhs));
    memset(&rhs, 0, sizeof(rhs));
  }
  CMTimeSubtract(&time, &lhs, &rhs);
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setMovieDurationInSeconds:CMTimeGetSeconds(&time)];
  if (a2)
  {
    [a2 stillImageCaptureTime];
    [a2 movieTrimStartTime];
  }
  else
  {
    memset(&v25, 0, sizeof(v25));
    memset(&v24, 0, sizeof(v24));
  }
  CMTimeSubtract(&v26, &v25, &v24);
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setStillTimeOffsetInSeconds:CMTimeGetSeconds(&v26)];
  if (a2) {
    [a2 stillTimeOffsetToVideoPrerollStartTime];
  }
  else {
    memset(&v23, 0, sizeof(v23));
  }
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setStillTimeOffsetToVideoPrerollStartInMilliseconds:CMTimeGetSeconds(&v23) * 1000.0];
  if (a2) {
    [a2 stillTimeOffsetToVideoPrerollStopTime];
  }
  else {
    memset(&v22, 0, sizeof(v22));
  }
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setStillTimeOffsetToVideoPrerollStopInMilliseconds:CMTimeGetSeconds(&v22) * 1000.0];
  if (a2) {
    [a2 stillTimeOffsetToAudioPrerollStartTime];
  }
  else {
    memset(&v21, 0, sizeof(v21));
  }
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setStillTimeOffsetToAudioPrerollStartInMilliseconds:CMTimeGetSeconds(&v21) * 1000.0];
  if (a2) {
    [a2 stillTimeOffsetToAudioPrerollStopTime];
  }
  else {
    memset(&v20, 0, sizeof(v20));
  }
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setStillTimeOffsetToAudioPrerollStopInMilliseconds:CMTimeGetSeconds(&v20) * 1000.0];
  -[BWLivePhotoMovieAnalyticsPayload setOverlappingCapture:](v9, "setOverlappingCapture:", [a2 isOverlappingRequest]);
  -[BWLivePhotoMovieAnalyticsPayload setStillCaptureLuxLevel:](v9, "setStillCaptureLuxLevel:", [a2 stillImageCaptureLuxLevel]);
  -[BWLivePhotoMovieAnalyticsPayload setStillCapturePortType:](v9, "setStillCapturePortType:", objc_msgSend((id)objc_msgSend(a2, "stillImageCaptureSettings"), "masterPortType"));
  -[BWLivePhotoMovieAnalyticsPayload setStillCaptureType:](v9, "setStillCaptureType:", objc_msgSend((id)objc_msgSend(a2, "stillImageCaptureSettings"), "captureType"));
  -[BWLivePhotoMovieAnalyticsPayload setStillCaptureResolutionFlavor:](v9, "setStillCaptureResolutionFlavor:", objc_msgSend((id)objc_msgSend(a2, "stillImageRequestSettings"), "resolutionFlavor"));
  -[BWLivePhotoMovieAnalyticsPayload setMaxSystemPressureLevel:](v9, "setMaxSystemPressureLevel:", [a2 maxSystemPressureLevel]);
  [a2 targetFrameRate];
  [(BWLivePhotoMovieAnalyticsPayload *)v9 setTargetFrameRate:v10];
  -[BWLivePhotoMovieAnalyticsPayload setNumberOfFramesDropped:](v9, "setNumberOfFramesDropped:", [a2 numberOfFramesDropped]);
  -[BWLivePhotoMovieAnalyticsPayload setRetimingRecipeIdentifier:](v9, "setRetimingRecipeIdentifier:", [a2 irisSequenceAdjusterRecipeIdentifier]);
  if ([a2 isTransitionVitalityScoreValid])
  {
    [a2 transitionVitalityScoreV1];
    [(BWLivePhotoMovieAnalyticsPayload *)v9 setTransitionVitalityScoreV1:v11];
  }
  -[BWLivePhotoMovieAnalyticsPayload setTransitionVitalityFeatures:](v9, "setTransitionVitalityFeatures:", [a2 transitionVitalityFeatures]);
  uint64_t v12 = (void *)[a2 stagingNodeOverallVideoFrameReceptionStats];
  if (v12)
  {
    uint64_t v13 = v12;
    if ([v12 numberOfSamples] >= 1)
    {
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeOverallNumberOfVideoFramesReceived:](v9, "setStagingNodeOverallNumberOfVideoFramesReceived:", [v13 numberOfSamples]);
      [v13 average];
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeOverallAverageTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeOverallAverageTimeBetweenVideoFramesInMilliseconds:");
      [v13 standardDeviation];
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeOverallStandardDeviationOfTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeOverallStandardDeviationOfTimeBetweenVideoFramesInMilliseconds:");
      [v13 min];
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeOverallMinimumTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeOverallMinimumTimeBetweenVideoFramesInMilliseconds:");
      [v13 max];
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeOverallMaximumTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeOverallMaximumTimeBetweenVideoFramesInMilliseconds:");
    }
  }
  int v14 = (void *)[a2 stagingNodeValveActiveVideoFrameReceptionStats];
  if (v14)
  {
    uint64_t v15 = v14;
    if ([v14 numberOfSamples] >= 1)
    {
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeValveActiveNumberOfVideoFramesReceived:](v9, "setStagingNodeValveActiveNumberOfVideoFramesReceived:", [v15 numberOfSamples]);
      [v15 average];
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeValveActiveAverageTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeValveActiveAverageTimeBetweenVideoFramesInMilliseconds:");
      [v15 standardDeviation];
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeValveActiveStandardDeviationOfTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeValveActiveStandardDeviationOfTimeBetweenVideoFramesInMilliseconds:");
      [v15 min];
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeValveActiveMinimumTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeValveActiveMinimumTimeBetweenVideoFramesInMilliseconds:");
      [v15 max];
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeValveActiveMaximumTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeValveActiveMaximumTimeBetweenVideoFramesInMilliseconds:");
    }
  }
  uint64_t v16 = (void *)[a2 fileCoordinatorToWriterMovingWindowLatencyStats];
  if (v16)
  {
    double v17 = v16;
    if ([v16 numberOfSamples] >= 1)
    {
      -[BWLivePhotoMovieAnalyticsPayload setFileCoordinatorToWriterMovingWindowLatencyNumberOfSamples:](v9, "setFileCoordinatorToWriterMovingWindowLatencyNumberOfSamples:", [v17 numberOfSamples]);
      [v17 average];
      -[BWLivePhotoMovieAnalyticsPayload setFileCoordinatorToWriterMovingWindowLatencyAverageInMilliseconds:](v9, "setFileCoordinatorToWriterMovingWindowLatencyAverageInMilliseconds:");
      [v17 standardDeviation];
      -[BWLivePhotoMovieAnalyticsPayload setFileCoordinatorToWriterMovingWindowLatencyStandardDeviationInMilliseconds:](v9, "setFileCoordinatorToWriterMovingWindowLatencyStandardDeviationInMilliseconds:");
      [v17 min];
      -[BWLivePhotoMovieAnalyticsPayload setFileCoordinatorToWriterMovingWindowLatencyMinimumInMilliseconds:](v9, "setFileCoordinatorToWriterMovingWindowLatencyMinimumInMilliseconds:");
      [v17 max];
      -[BWLivePhotoMovieAnalyticsPayload setFileCoordinatorToWriterMovingWindowLatencyMaximumInMilliseconds:](v9, "setFileCoordinatorToWriterMovingWindowLatencyMaximumInMilliseconds:");
    }
  }
  uint64_t v18 = (void *)[a2 videoFrameDurationStats];
  if (v18)
  {
    uint64_t v19 = v18;
    if ([v18 numberOfSamples] >= 1)
    {
      [v19 min];
      -[BWLivePhotoMovieAnalyticsPayload setMinVideoFrameDurationInMilliseconds:](v9, "setMinVideoFrameDurationInMilliseconds:");
      [v19 max];
      -[BWLivePhotoMovieAnalyticsPayload setMaxVideoFrameDurationInMilliseconds:](v9, "setMaxVideoFrameDurationInMilliseconds:");
      [v19 average];
      -[BWLivePhotoMovieAnalyticsPayload setAverageVideoFrameDurationInMilliseconds:](v9, "setAverageVideoFrameDurationInMilliseconds:");
      [v19 median];
      -[BWLivePhotoMovieAnalyticsPayload setMedianVideoFrameDurationInMilliseconds:](v9, "setMedianVideoFrameDurationInMilliseconds:");
      [v19 standardDeviation];
      -[BWLivePhotoMovieAnalyticsPayload setVideoFrameDurationStandardDeviationInMilliseconds:](v9, "setVideoFrameDurationStandardDeviationInMilliseconds:");
    }
  }
  [+[BWCoreAnalyticsReporter sharedInstance] sendEvent:v9];
}

uint64_t cs_setSceneClassifierSuspended(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "stillImageConnectionConfiguration"), "sourceConfiguration"), "sourceID");
  uint64_t v7 = objc_msgSend((id)objc_msgSend(a2, "stillImageConnectionConfiguration"), "underlyingDeviceType");
  -[FigCaptureMovieFileSinkPipeline setSceneClassifierSuspended:]([a1 movieFileSinkPipelineWithSourceID:v6 sourceDeviceType:v7], a3);
  objc_msgSend((id)objc_msgSend(a1, "previewSinkPipelineWithSourceID:sourceDeviceType:", v6, v7), "setSceneClassifierSuspended:", a3);
  -[FigCaptureMetadataSinkPipeline setSceneClassifierSuspended:]((void *)[a1 metadataSinkPipelineWithSourceID:v6 sourceDeviceType:v7], a3);
  return FigMemoryBarrier();
}

void captureSession_didCaptureIrisStill(const void *a1, void *a2, void *a3, void *a4, void *a5, CMTime *a6, unsigned int a7, unsigned char *a8)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    LODWORD(v64.CFDictionaryAddValue(theDict, key, value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unsigned int v53 = a7;
  uint64_t v15 = a3;
  uint64_t v16 = objc_msgSend(a3, "stillImageSinkPipeline", v46, v48);
  if (a5)
  {
    double v17 = a5;
    int v18 = [a5 captureType];
  }
  else
  {
    double v17 = 0;
    int v18 = 0;
  }
  if ([a4 movieMode])
  {
    int v50 = v18;
    uint64_t v19 = objc_msgSend(a2, "movieFileSinkPipelineWithSinkID:", objc_msgSend(v16, "sinkID"));
    uint64_t v20 = [v15 cameraSourcePipeline];
    CMTime v21 = (void *)[a4 movieRecordingSettings];
    CMClockOrTimebaseRef toClockOrTimebase = 0;
    cs_getMasterClockAndType(a2, (uint64_t *)&toClockOrTimebase, 0);
    CMTime v64 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    if ([a4 movieMode] == 2)
    {
      if (cs_touchDownMomentStillCaptureEnabled_onceToken != -1) {
        dispatch_once(&cs_touchDownMomentStillCaptureEnabled_onceToken, &__block_literal_global_571);
      }
      CMTimeMake(&rhs, a6->timescale / 1000, a6->timescale);
      CMTime lhs = *a6;
      CMTimeAdd(&time, &lhs, &rhs);
      *a6 = time;
      CMTime v22 = (const void *)-[FigCaptureCameraSourcePipeline clock](v20);
      CMTime time = *a6;
      CMSyncConvertTime(&v64, &time, v22, toClockOrTimebase);
      if (dword_1EB4C5110)
      {
        *(_DWORD *)CMTime type = 0;
        os_log_type_t v62 = OS_LOG_TYPE_DEFAULT;
        CMTime v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMTimeMake(&v61, 1, 2);
      CMTime lhs = *a6;
      CMTimeAdd(&time, &lhs, &v61);
      *a6 = time;
    }
    memset(&time, 0, sizeof(time));
    CMTime v24 = (const void *)-[FigCaptureCameraSourcePipeline clock](v20);
    CMTime lhs = *a6;
    CMSyncConvertTime(&time, &lhs, v24, toClockOrTimebase);
    if (v53)
    {
      if (![a4 providesOriginalImage] || !objc_msgSend(a4, "movieURLForOriginalImage")) {
        return;
      }
      uint64_t v54 = v20;
      id v25 = (id)[v21 copy];
      objc_msgSend(v25, "setOutputURL:", objc_msgSend(a4, "movieURLForOriginalImage"));
      if ([a4 movieLevelMetadataForOriginalImage]) {
        objc_msgSend(v25, "setMovieLevelMetadata:", objc_msgSend(a4, "movieLevelMetadataForOriginalImage"));
      }
      CMTime v26 = a6;
      CMTime v56 = (void *)v19;
      CFTypeRef v27 = (os_unfair_lock_s *)DerivedStorage;
      if (objc_msgSend(v25, "spatialOverCaptureMovieURL", v47, v49))
      {
        objc_msgSend(v25, "setSpatialOverCaptureMovieURL:", objc_msgSend(a4, "spatialOverCaptureMovieURLForOriginalImage"));
        uint64_t v28 = v25;
        objc_msgSend(v25, "setSpatialOverCaptureMovieLevelMetadata:", objc_msgSend(a4, "spatialOverCaptureMovieLevelMetadataForOriginalImage"));
      }
      else
      {
        uint64_t v28 = v25;
      }
    }
    else
    {
      uint64_t v54 = v20;
      uint64_t v28 = v21;
      CMTime v26 = a6;
      CMTime v56 = (void *)v19;
      CFTypeRef v27 = (os_unfair_lock_s *)DerivedStorage;
    }
    uint64_t v29 = objc_msgSend(a4, "semanticStyle", v47);
    if ([v29 isIdentity])
    {
      uint64_t v30 = 0;
    }
    else
    {
      char v31 = [v28 isIrisMovieRecording];
      uint64_t v30 = 0;
      if (v29 && (v31 & 1) == 0)
      {
        unsigned int v32 = objc_msgSend((id)objc_msgSend(v17, "metadata"), "semanticStyleSceneType");
        unint64_t v33 = objc_alloc_init(BWColorLookupCache);
        uint64_t v34 = BWSemanticStyleFiltersForSemanticStyleAndFilterToCombine(v29, v32, 1, 0, 0, v33, 0);

        int v35 = (void *)[v34 firstObject];
        NSClassFromString(&cfstr_Cicolorcubesmi.isa);
        if (objc_opt_isKindOfClass())
        {
          [v28 setPersonSegmentationRenderingEnabled:1];
          objc_msgSend(v28, "setPersonSegmentationForegroundColorCube:", objc_msgSend(v35, "cube0Data"));
          objc_msgSend(v28, "setPersonSegmentationBackgroundColorCube:", objc_msgSend(v35, "cube1Data"));
        }
        uint64_t v30 = v29;
      }
    }
    uint64_t v36 = v27;
    [a4 stillImageCaptureAbsoluteStartTime];
    CMTime lhs = time;
    *(_OWORD *)CMTime type = *(_OWORD *)&v26->value;
    CMTimeEpoch epoch = v26->epoch;
    uint64_t v37 = +[BWIrisMovieInfo irisMovieInfoWithFigCaptureMovieFileRecordingSettings:stillImageCaptureTime:stillImageCaptureHostTime:stillImageCaptureAbsoluteStartTime:stillImageRequestSettings:stillImageCaptureSettings:originalPhotoRecording:semanticStyle:](BWIrisMovieInfo, "irisMovieInfoWithFigCaptureMovieFileRecordingSettings:stillImageCaptureTime:stillImageCaptureHostTime:stillImageCaptureAbsoluteStartTime:stillImageRequestSettings:stillImageCaptureSettings:originalPhotoRecording:semanticStyle:", v28, &lhs, type, a4, v17, v53, v30);
    if ([a4 movieMode] == 2) {
      [(BWIrisMovieInfo *)v37 setMomentCaptureMovieRecording:1];
    }
    if (v17)
    {
      [(BWIrisMovieInfo *)v37 setSpatialOverCaptureExpected:0];
    }
    else
    {
      uint64_t v38 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v54);
      if ([v28 spatialOverCaptureMovieURL]) {
        uint64_t v39 = [v38 needsToRelieveSystemPressure] ^ 1;
      }
      else {
        uint64_t v39 = 0;
      }
      [(BWIrisMovieInfo *)v37 setSpatialOverCaptureExpected:v39];
      if (a8) {
        *a8 = [(BWIrisMovieInfo *)v37 spatialOverCaptureExpected];
      }
    }
    [a4 nonDestructiveCropSize];
    -[BWIrisMovieInfo setNonDestructiveCropSize:](v37, "setNonDestructiveCropSize:");
    if ((captureSession_checkClientIsAllowedToWriteToOutputURLsInRecordingSettings((uint64_t)a1, v28) & 1) == 0)
    {
      uint64_t v40 = [v56 sinkID];
      unint64_t v41 = a1;
      unsigned int v42 = v37;
      uint64_t v43 = 4294951864;
      goto LABEL_42;
    }
    if ([v56 checkIfFileAlreadyExistForMFO]
      && captureSession_checkIfOutputURLsInRecordingSettingsAlreadyExist(v28))
    {
      uint64_t v40 = [v56 sinkID];
      unint64_t v41 = a1;
      unsigned int v42 = v37;
      uint64_t v43 = 4294950886;
LABEL_42:
      captureSession_postNotificationsForIrisRequestCompletedWithError(v41, v40, v42, v43);
      return;
    }
    if (-[FigCaptureMovieFileSinkPipeline sdofCompressorNodes]((uint64_t)v56))
    {
      if (v50 == 3)
      {
        if (v53) {
          uint64_t v44 = 2;
        }
        else {
          uint64_t v44 = 1;
        }
      }
      else if ([a4 providesOriginalImage] && objc_msgSend(a4, "movieURLForOriginalImage"))
      {
        -[BWIrisMovieInfo setOutputURLForSDOFOriginalMovie:](v37, "setOutputURLForSDOFOriginalMovie:", [a4 movieURLForOriginalImage]);
        -[BWIrisMovieInfo setMovieLevelMetadataForSDOFOriginalMovie:](v37, "setMovieLevelMetadataForSDOFOriginalMovie:", [a4 movieLevelMetadataForOriginalImage]);
        uint64_t v44 = 3;
      }
      else
      {
        uint64_t v44 = 1;
      }
      [(BWIrisMovieInfo *)v37 setRequestedSDOFVariants:v44];
    }
    os_unfair_lock_lock(v36 + 90);
    os_unfair_lock_unlock(v36 + 90);
    v57[0] = MEMORY[0x1E4F143A8];
    v57[1] = 3221225472;
    v57[2] = __captureSession_didCaptureIrisStill_block_invoke;
    v57[3] = &unk_1E5C288F8;
    CMTime v58 = v64;
    _OWORD v57[4] = a4;
    v57[5] = v37;
    v57[6] = v56;
    v57[7] = v17;
    v57[8] = v36;
    void v57[9] = a1;
    uint64_t v45 = CMBaseObjectGetDerivedStorage();
    captureSession_dispatchGraphCalloutWithGraphIDToWorkerQueueAfter(a1, *(void *)(v45 + 640), (uint64_t)v57, 0.0);
  }
}

unint64_t cs_removeEmptyPendingIrisRecording(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v18 = v3;
    LODWORD(v16) = 0;
    FigDebugAssert3();
  }
  uint64_t v7 = objc_msgSend(*(id *)(DerivedStorage + 664), "movieFileSinkPipelineWithSinkID:", a2, v16, v18);
  CMTime v21 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v8 = (void *)[v7 pendingIrisRecordings];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v13, "settings", v17, v19), "settingsID") == a3)
        {
          if ([v13 isEmpty])
          {
            [v21 addObject:v13];
            if (dword_1EB4C5110)
            {
              os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v10);
  }
  objc_msgSend((id)objc_msgSend(v7, "pendingIrisRecordings", v17), "removeObjectsInArray:", v21);
  return captureSession_servicePendingIrisRecordings(a1, v7, 0);
}

void sub_1A5BE1E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_1A5BE2030(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t cs_figCaptureColorSpaceFromSourcePipeline(uint64_t a1)
{
  unsigned int v1 = -[FigCaptureCameraSourcePipeline colorSpaceProperties](a1);
  if (v1 > 0xB || (uint64_t v2 = 1, ((1 << v1) & 0x818) == 0))
  {
    if (v1 == 10) {
      unsigned int v3 = 3;
    }
    else {
      unsigned int v3 = 0;
    }
    if (v1 == 6) {
      unsigned int v3 = 2;
    }
    if ((v1 & 0xFFFFFFFD) == 5) {
      return 4;
    }
    else {
      return v3;
    }
  }
  return v2;
}

void captureSession_abandonCameraAppSessionStartupTelemetry()
{
  os_unfair_lock_assert_owner(&sFigCaptureSessionCameraAppStartupTelemetry);
  if (!dword_1EB4C5944) {
    goto LABEL_22;
  }
  id v0 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (dword_1EB4C5944 != 2)
  {
    if (dword_1EB4C5944 != 1 || *MEMORY[0x1E4F1EBA8] == 0) {
      goto LABEL_13;
    }
    unsigned int v1 = fig_log_handle();
    if (!os_signpost_enabled(v1)) {
      goto LABEL_13;
    }
    *(_WORD *)buf = 0;
    uint64_t v2 = "CameraLaunchWithoutPrewarm";
    unsigned int v3 = buf;
    goto LABEL_12;
  }
  if (*MEMORY[0x1E4F1EBA8])
  {
    unsigned int v1 = fig_log_handle();
    if (os_signpost_enabled(v1))
    {
      __int16 v10 = 0;
      uint64_t v2 = "CameraAppLaunchWithOrigin";
      unsigned int v3 = (uint8_t *)&v10;
LABEL_12:
      _os_signpost_emit_with_name_impl(&dword_1A5887000, v1, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, v2, (const char *)&unk_1A5F8B35A, v3, 2u);
    }
  }
LABEL_13:
  if ((void)xmmword_1EB4C5970) {
    BOOL v5 = *((void *)&xmmword_1EB4C5970 + 1) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 && *v0 != 0)
  {
    uint64_t v7 = fig_log_handle();
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A5887000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CaptureDeviceStolenDuringLaunch", (const char *)&unk_1A5F8B35A, v8, 2u);
    }
  }
LABEL_22:
  os_unfair_lock_assert_owner(&sFigCaptureSessionCameraAppStartupTelemetry);
  dword_1EB4C5944 = 0;
  byte_1EB4C5948 = 0;
  xmmword_1EB4C5950 = 0u;
  *(_OWORD *)&qword_1EB4C5960 = 0u;
  xmmword_1EB4C5970 = 0u;
  qword_1EB4C5988 = 0;
  *(uint64_t *)((char *)&qword_1EB4C5988 + 5) = 0;

  qword_1EB4C5980 = 0;
}

void captureSession_reportCancelledLockScreenCameraLaunch()
{
  os_unfair_lock_assert_owner(&sLockScreenCameraLaunchTelemetry);
  uint64_t v0 = word_1E96B7688;
  uint64_t v1 = HIBYTE(word_1E96B7688);
  [+[BWAggdDataReporter sharedInstance] reportLockScreenCameraLaunchCancelledWithPrewarming:word_1E96B7688 ispStreamingStarted:HIBYTE(word_1E96B7688)];
  uint64_t v2 = objc_alloc_init(BWCameraLockScreenLaunchAnalyticsPayload);
  [(BWCameraLockScreenLaunchAnalyticsPayload *)v2 setCompleted:0];
  [(BWCameraLockScreenLaunchAnalyticsPayload *)v2 setPrewarmed:v0];
  [(BWCameraLockScreenLaunchAnalyticsPayload *)v2 setIspStreamingStarted:v1];
  [(BWCameraLockScreenLaunchAnalyticsPayload *)v2 setLaunchError:0];
  [+[BWCoreAnalyticsReporter sharedInstance] sendEvent:v2];

  os_unfair_lock_assert_owner(&sLockScreenCameraLaunchTelemetry);
  byte_1E96B767C = 0;
  word_1E96B7688 = 0;
  dword_1E96B768C = 0;
}

uint64_t FigCaptureSessionGetStatus()
{
  uint64_t DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage + 90;
  os_unfair_lock_lock(DerivedStorage + 90);
  uint64_t os_unfair_lock_opaque = DerivedStorage[102]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v1);
  return os_unfair_lock_opaque;
}

void *FigCaptureSessionGetOSStateData(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  IsInternalBuilCGFloat d = FigDebugIsInternalBuild();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *DerivedStorage), @"Invalid");
  os_unfair_lock_lock((os_unfair_lock_t)DerivedStorage + 21);
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned int *)DerivedStorage + 4)), @"ClientPID");
  long long v6 = *(_OWORD *)(DerivedStorage + 68);
  v14[0] = *(_OWORD *)(DerivedStorage + 52);
  v14[1] = v6;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", FigCaptureGetPIDFromAuditToken(v14)), @"ClientPIDPreviouslyUsed");
  os_unfair_lock_unlock((os_unfair_lock_t)DerivedStorage + 21);
  if (IsInternalBuild) {
    [v4 setObject:*((void *)DerivedStorage + 11) forKeyedSubscript:@"ClientApplicationID"];
  }
  [v4 setObject:*((void *)DerivedStorage + 12) forKeyedSubscript:@"MediaEnvironment"];
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(*((id *)DerivedStorage + 13), "description"), @"LoggingPrefix");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[112]), @"PrewarmingSupported");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[113]), @"HighPriorityLaunchFromLockScreenSupported");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[128]), @"ApplicationStateMonitoringEnabled");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[160]), @"NotificationsEnabled");
  os_unfair_lock_lock((os_unfair_lock_t)DerivedStorage + 90);
  uint64_t v7 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[364]), @"ShouldRun");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned int *)DerivedStorage + 92)), @"InterruptionError");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[372]), @"ClientStartedSession");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[373]), @"ClientRequestedPrewarming");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[374]), @"UsesCamera");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[375]), @"MultitaskingModeAllowed");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[376]), @"Backgrounded");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[377]), @"InMultitaskingMode");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[378]), @"InWindow");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[379]), @"InPictureInPicture");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[380]), @"CameraStolen");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[381]), @"StopFromCameraStolen");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[382]), @"CameraShutDownDueToSystemPressure");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[383]), @"UsesMic");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[384]), @"MicStolen");
  [v7 setObject:*((void *)DerivedStorage + 49) forKeyedSubscript:@"PrewarmReason"];
  uint64_t v8 = *((int *)DerivedStorage + 100);
  if (v8 > 2) {
    uint64_t v9 = "Unknown";
  }
  else {
    uint64_t v9 = off_1E5C28BC0[v8];
  }
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSString, "stringWithCString:encoding:", v9, 4), @"LaunchPrewarmStatus");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[404]), @"LaunchPrewarmingSupported");
  uint64_t v10 = *((int *)DerivedStorage + 102);
  if (v10 > 3) {
    uint64_t v11 = "Invalid Session Status";
  }
  else {
    uint64_t v11 = off_1E5C28BD8[v10];
  }
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSString, "stringWithCString:encoding:", v11, 4), @"Status");
  [v7 setObject:0 forKeyedSubscript:@"LastStartOrReconfigureTime"];
  [v7 setObject:0 forKeyedSubscript:@"LastStopRunningTime"];
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[536]), @"PreviewPipelinesReadyForPropertySetting");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[537]), @"PreviewDidDisplayFirstFrame");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[538]), @"ClientForegroundInDisplayLayout");
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[540]), @"RunningForPrewarmedHomeScreenIconResume");
  [v7 setObject:0 forKeyedSubscript:@"PrewarmForegroundTransitionTime"];
  [v7 setObject:0 forKeyedSubscript:@"ForegroundAutoResumeStopTime"];
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(*((id *)DerivedStorage + 57), "osStatePropertyList"), @"CommittedConfiguration");
  [v4 setObject:v7 forKeyedSubscript:@"State"];
  if (a2)
  {
    uint64_t v12 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(*((id *)DerivedStorage + 79), "osStatePropertyList"), @"graph");
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithLongLong:", *((void *)DerivedStorage + 80)), @"graphID");
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[648]), @"graphRunning");
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[649]), @"graphEmpty");
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[650]), @"graphHasStartedDeferredSetup");
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[651]), @"graphHasStartedStillCapture");
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", DerivedStorage[652]), @"haveStartedRecordingDuringDeferredSetup");
    [v4 setObject:v12 forKeyedSubscript:@"Graph"];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)DerivedStorage + 90);
  return v4;
}

uint64_t FigCaptureSessionSetVideoPreviewTapCallback(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    uint64_t v8 = (os_unfair_lock_s *)(DerivedStorage + 216);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 216));
    uint64_t v9 = *(void *)(v7 + 224);
    if (a2)
    {
      if (v9)
      {
        os_unfair_lock_unlock(v8);
        goto LABEL_7;
      }
      *(void *)(v7 + 224) = a2;
      *(void *)(v7 + 232) = a3;
      *(unsigned char *)(v7 + 240) = 0;
      os_unfair_lock_unlock(v8);
      captureSession_updatePreviewSinkConnectionEnabledState(a1);
    }
    else
    {
      uint64_t v10 = *(void *)(v7 + 232);
      *(void *)(v7 + 224) = 0;
      *(void *)(v7 + 232) = 0;
      os_unfair_lock_unlock(v8);
      if (!v9) {
        goto LABEL_7;
      }
      captureSession_updatePreviewSinkConnectionEnabledState(a1);
      uint64_t v11 = *(NSObject **)(v7 + 248);
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      void v13[2] = __FigCaptureSessionSetVideoPreviewTapCallback_block_invoke;
      void v13[3] = &__block_descriptor_48_e5_v8__0l;
      float32x4_t v13[4] = v9;
      void v13[5] = v10;
      dispatch_async(v11, v13);
    }
    return 0;
  }
LABEL_7:
  return FigSignalErrorAt();
}

void captureSession_updatePreviewSinkConnectionEnabledState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __captureSession_updatePreviewSinkConnectionEnabledState_block_invoke;
  v3[3] = &__block_descriptor_48_e5_v8__0l;
  v3[4] = DerivedStorage;
  v3[5] = a1;
  captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v3);
}

uint64_t __FigCaptureSessionSetVideoPreviewTapCallback_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void))(a1 + 32))(*(void *)(a1 + 40), 2, 0);
}

uint64_t FigCaptureSessionSupportsLaunchPrewarmingBundleID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (a2) {
    *a2 = *(id *)(DerivedStorage + 88);
  }
  return *(unsigned __int8 *)(v4 + 404);
}

uint64_t FigCaptureSessionDetachFromClient(const void *a1, unsigned char *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  if (*DerivedStorage)
  {
    FigDebugAssert3();
    FigSignalErrorAt();
  }
  else
  {
    BOOL v5 = DerivedStorage;
    captureSession_updateSessionStateWithApplicationAndLayoutState(a1, 1, 0, 0, 0);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __FigCaptureSessionDetachFromClient_block_invoke;
    v7[3] = &unk_1E5C28850;
    v7[5] = v5;
    void v7[6] = a1;
    v7[4] = &v8;
    captureSession_performBlockOnWorkerQueueSynchronously((uint64_t)a1, (uint64_t)v7);
  }
  if (a2) {
    *a2 = *((unsigned char *)v9 + 24);
  }
  _Block_object_dispose(&v8, 8);
  return 0;
}

void sub_1A5BE4BD0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __FigCaptureSessionDetachFromClient_block_invoke(void *a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v2 = &unk_1EB4C5000;
  if (dword_1EB4C5110)
  {
    unsigned int v39 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  captureSession_teardownImageQueueSinkNodesIfNeeded(a1[6], 0);
  captureSession_destroyAudioSessionForMicPipeline();
  [*(id *)(a1[5] + 120) invalidate];

  uint64_t v4 = a1[5];
  *(void *)(v4 + 120) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 84));
  uint64_t v5 = a1[5];
  *(_OWORD *)(v5 + 52) = *(_OWORD *)(v5 + 20);
  *(_OWORD *)(v5 + 6_Block_object_dispose(&STACK[0x458], 8) = *(_OWORD *)(v5 + 36);
  uint64_t v6 = a1[5];
  *(void *)&long long v7 = -1;
  *((void *)&v7 + 1) = -1;
  *(_OWORD *)(v6 + 20) = v7;
  *(_OWORD *)(v6 + 36) = v7;
  uint64_t v8 = a1[5];
  long long v9 = *(_OWORD *)(v8 + 36);
  long long v42 = *(_OWORD *)(v8 + 20);
  long long v43 = v9;
  PIDFromAuditTokeuint64_t n = FigCaptureGetPIDFromAuditToken(&v42);
  char v11 = (os_unfair_lock_s *)a1[5];
  v11[4]._uint64_t os_unfair_lock_opaque = PIDFromAuditToken;
  os_unfair_lock_unlock(v11 + 21);
  uint64_t v12 = a1[5];
  uint64_t v13 = *(void *)(v12 + 104);
  long long v14 = *(_OWORD *)(v12 + 36);
  *(_OWORD *)unint64_t v41 = *(_OWORD *)(v12 + 20);
  *(_OWORD *)&v41[16] = v14;
  if (v13)
  {
    uint64_t v15 = (long long *)(v12 + 20);
    long long v16 = *v15;
    *(_OWORD *)(v13 + 24) = v15[1];
    *(_OWORD *)(v13 + _Block_object_dispose(&STACK[0x458], 8) = v16;
    long long v42 = *(_OWORD *)v41;
    long long v43 = *(_OWORD *)&v41[16];
    *(_DWORD *)(v13 + 40) = FigCaptureGetPIDFromAuditToken(&v42);
    [(id)v13 _updateLoggingPrefix];
  }
  captureSession_updateSessionStateWithApplicationAndLayoutState((const void *)a1[6], 1, 0, 0, 0);
  uint64_t v17 = a1[5];
  uint64_t v18 = *(const void **)(v17 + 344);
  if (v18)
  {
    CFRelease(v18);
    uint64_t v17 = a1[5];
    *(void *)(v17 + 344) = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 360));
  id v19 = *(id *)(a1[5] + 448);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[5] + 360));
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v20 = (void *)[v19 connectionConfigurations];
  uint64_t v21 = [v20 countByEnumeratingWithState:&v34 objects:v40 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)v35;
    while (2)
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v35 != v23) {
          objc_enumerationMutation(v20);
        }
        long long v25 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        if (objc_msgSend(v25, "videoPreviewSinkConfiguration", v32, v33)
          && !captureSession_shouldEnableDeferredNodePrepare(a1[6], (void *)[v25 sourceConfiguration], objc_msgSend(v25, "enabled")))
        {
          char v26 = 0;
          goto LABEL_20;
        }
      }
      uint64_t v22 = [v20 countByEnumeratingWithState:&v34 objects:v40 count:16];
      if (v22) {
        continue;
      }
      break;
    }
    char v26 = 1;
LABEL_20:
    uint64_t v2 = (_DWORD *)&unk_1EB4C5000;
  }
  else
  {
    char v26 = 1;
  }

  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v26;
  if (v2[68])
  {
    unsigned int v39 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v28 = v39;
    if (os_log_type_enabled(v27, type)) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFFE;
    }
    if (v29)
    {
      int v30 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
      *(_DWORD *)unint64_t v41 = 136315394;
      *(void *)&v41[4] = "FigCaptureSessionDetachFromClient_block_invoke";
      *(_WORD *)&v41[12] = 1024;
      *(_DWORD *)&v41[14] = v30;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = captureSession_transitionToSessionLaunchPrewarmStatus(a1[6], *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24));
  *(unsigned char *)(a1[5] + 160) = 0;
  return result;
}

void FigCaptureSessionCancelPrewarm(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (initializeGlobals_initializeGlobalsOnceToken != -1) {
    dispatch_once(&initializeGlobals_initializeGlobalsOnceToken, &__block_literal_global_916);
  }
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  if (a1)
  {
    uint64_t v2 = (const void *)objc_msgSend((id)objc_msgSend((id)qword_1EB4C59A0, "objectForKeyedSubscript:", a1), "referencedObject");
    int v3 = byte_1EB4C59E8;
    os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
    if (v2)
    {
      captureSession_cancelPrewarming(v2, 0);
      goto LABEL_14;
    }
  }
  else
  {
    int v3 = byte_1EB4C59E8;
    os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  }
  if (dword_1EB4C5110)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((objc_msgSend(a1, "isEqualToString:", 0x1EFA44100, v5, v6) & 1) != 0
    || [a1 isEqualToString:0x1EFA55980])
  {
    os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
    if (byte_1E96B767C) {
      captureSession_reportCancelledLockScreenCameraLaunch();
    }
    os_unfair_lock_unlock(&sLockScreenCameraLaunchTelemetry);
    os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
    captureSession_abandonCameraAppSessionStartupTelemetry();
    os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
  }
LABEL_14:
  captureSession_cancelMemoryPoolPrewarming(0, v3 == 0);
}

void captureSession_primeMemoryPoolPrewarmTimer()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner(&sFigCaptureSessionPrewarming);
  float v0 = *(float *)&dword_1EB4C59C0;
  if (*(float *)&dword_1EB4C59C0 <= 0.0)
  {
    dword_1EB4C59C0 = 1077936128;
    float v0 = 3.0;
  }
  if (qword_1EB4C59B0)
  {
    if (dword_1EB4C5110)
    {
      int v9 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    captureSession_cancelMemoryPoolPrewarmingTimeoutTimer();
  }
  else if (dword_1EB4C5110)
  {
    int v9 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v3 = qword_1EB4C59B8;
  if (!qword_1EB4C59B8)
  {
    uint64_t v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    int v3 = dispatch_queue_create("com.apple.coremedia.capturesession.memoryPoolTimeout", v4);
    qword_1EB4C59B8 = (uint64_t)v3;
  }
  uint64_t v5 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v3);
  dispatch_time_t v6 = dispatch_time(0, (uint64_t)(float)(v0 * 1000000000.0));
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(v0 * 0.1 * 1000000000.0));
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = __captureSession_primeMemoryPoolPrewarmTimer_block_invoke;
  handler[3] = &unk_1E5C24430;
  handler[4] = v5;
  dispatch_source_set_event_handler(v5, handler);
  qword_1EB4C59B0 = (uint64_t)v5;
  dispatch_activate(v5);
}

void captureSession_cancelPrewarming(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v5 = DerivedStorage;
    [*(id *)(DerivedStorage + 120) updateApplicationState];
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 360));
    if (!a2 || *(void *)(v5 + 560) == a2)
    {
      if (dword_1EB4C5110)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(unsigned char *)(v5 + 373))
      {
        *(unsigned char *)(v5 + 373) = 0;
        *(unsigned char *)(v5 + 540) = 0;
        captureSession_updateRunningCondition(a1, 0, 0);
      }
      captureSession_cancelPrewarmingTimeoutTimer();
    }
    else if (dword_1EB4C5110)
    {
      dispatch_time_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 360));
  }
}

void captureSession_dispatchGraphCalloutWithGraphIDToWorkerQueueAfter(const void *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v9 = DerivedStorage;
    if (a4 <= 0.0)
    {
      dispatch_time_t v10 = 0;
      if (!a1)
      {
LABEL_7:
        char v11 = *(NSObject **)(v9 + 136);
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3221225472;
        void v12[2] = __captureSession_dispatchGraphCalloutWithGraphIDToWorkerQueueAfter_block_invoke;
        v12[3] = &unk_1E5C25950;
        void v12[4] = a3;
        void v12[5] = v9;
        void v12[6] = a2;
        v12[7] = a1;
        dispatch_after(v10, v11, v12);
        return;
      }
    }
    else
    {
      dispatch_time_t v10 = dispatch_time(0, (uint64_t)(float)(a4 * 1000000000.0));
      if (!a1) {
        goto LABEL_7;
      }
    }
    CFRetain(a1);
    goto LABEL_7;
  }
}

void __captureSession_dispatchGraphCalloutWithGraphIDToWorkerQueueAfter_block_invoke(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1A6272C70]();
  captureSession_isGraphCalloutCancelled(a1[5], a1[6]);
  (*(void (**)(void))(a1[4] + 16))();
  int v3 = (const void *)a1[7];
  if (v3) {
    CFRelease(v3);
  }
}

void captureSession_fileStartRecording(const void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v212 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v159 = v5;
    LODWORD(v157) = 0;
    FigDebugAssert3();
  }
  objc_msgSend(a3, "outputURL", v157, v159);
  if (FigFileIsFileOnExternalStorageDevice())
  {
    uint64_t v13 = *(void **)(DerivedStorage + 800);
    if (v13) {

    }
    long long v14 = *(void **)(DerivedStorage + 808);
    if (v14) {

    }
    *(void *)(DerivedStorage + 800) = a3;
    *(void *)(DerivedStorage + 80_Block_object_dispose(&STACK[0x458], 8) = a2;
    *(unsigned char *)(DerivedStorage + 816) = 0;
    uint64_t v15 = FigExternalStorageDeviceManagerCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, (void *)(DerivedStorage + 792));
    if (v15)
    {
      uint64_t v22 = v15;
      uint64_t v161 = v5;
      LODWORD(v15_Block_object_dispose(&STACK[0x458], 8) = v15;
    }
    else
    {
      uint64_t v16 = *(void *)(DerivedStorage + 792);
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      id v19 = *(uint64_t (**)(uint64_t, void, const void *, void (*)(uint64_t, uint64_t, uint64_t)))(v18 + 8);
      if (v19)
      {
        uint64_t v20 = v19(v16, 0, a1, captureSession_externalStorageDeviceManagerCallback);
        if (!v20) {
          goto LABEL_14;
        }
        uint64_t v22 = v20;
      }
      else
      {
        uint64_t v22 = 4294954514;
      }
      uint64_t v161 = v5;
      LODWORD(v15_Block_object_dispose(&STACK[0x458], 8) = v22;
    }
    FigDebugAssert3();
    uint64_t v23 = 0;
    goto LABEL_36;
  }
LABEL_14:
  if ((([*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA44100] & 1) != 0
     || [*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA55980])
    && captureSession_isPrewarming())
  {
    if (dword_1EB4C5110)
    {
      LODWORD(time.CFDictionaryAddValue(theDict, key, value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v6 = v5;
    }
    objc_msgSend(*(id *)(DerivedStorage + 120), "updateApplicationState", v158, v160);
  }
  if (captureSession_isPrewarming())
  {
    uint64_t v161 = v6;
    LODWORD(v15_Block_object_dispose(&STACK[0x458], 8) = 0;
LABEL_84:
    FigDebugAssert3();
    uint64_t v23 = 0;
    goto LABEL_85;
  }
  if (!*(unsigned char *)(DerivedStorage + 648))
  {
    uint64_t v161 = v6;
    LODWORD(v15_Block_object_dispose(&STACK[0x458], 8) = 0;
    goto LABEL_84;
  }
  uint64_t v179 = a5;
  uint64_t v23 = (void *)[*(id *)(DerivedStorage + 664) movieFileSinkPipelineWithSinkID:a2];
  long long v24 = (void *)[*(id *)(DerivedStorage + 664) cameraSourcePipelineWithSourceID:-[FigCaptureMovieFileSinkPipeline videoSourceID]((uint64_t)v23)];
  if ([*(id *)(DerivedStorage + 632) resumesConnectionsAsNodesArePrepared]
    && (a4 || -[FigCaptureCameraSourcePipeline trueVideoCaptureEnabled]((BOOL)v24)))
  {
    *(unsigned char *)(DerivedStorage + 652) = 1;
    captureSession_startDeferredGraphSetup((uint64_t)a1);
  }
  else
  {
    captureSession_waitForGraphToStart((uint64_t)a1, 0);
  }
  if ((captureSession_checkClientIsAllowedToWriteToOutputURLsInRecordingSettings((uint64_t)a1, a3) & 1) == 0)
  {
    uint64_t v161 = v5;
    uint64_t v22 = 4294951864;
    LODWORD(v15_Block_object_dispose(&STACK[0x458], 8) = -15432;
    goto LABEL_35;
  }
  if ([v23 checkIfFileAlreadyExistForMFO]
    && captureSession_checkIfOutputURLsInRecordingSettingsAlreadyExist(a3))
  {
    uint64_t v161 = v5;
    uint64_t v22 = 4294950886;
    LODWORD(v15_Block_object_dispose(&STACK[0x458], 8) = -16410;
LABEL_35:
    FigDebugAssert3();
LABEL_36:
    if (a4)
    {
      captureSession_postNotificationsForIrisRequestCompletedWithError(a1, objc_msgSend(v23, "sinkID", v158, v161), a4, v22);
    }
    else
    {
      long long v25 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus((uint64_t)a2, objc_msgSend(a3, "settingsID", v158, v161), v22);
      captureSession_postNotificationWithPayload(a1, @"DidStopRecording", v25);
    }
    return;
  }
  uint64_t v178 = a4;
  uint64_t v173 = a2;
  if (!v23)
  {
    uint64_t v32 = [*(id *)(DerivedStorage + 664) audioFileSinkPipelineWithSinkID:a2];
    [*(id *)(DerivedStorage + 752) setObject:0 forKeyedSubscript:a2];
    [*(id *)(DerivedStorage + 760) setObject:0 forKeyedSubscript:a2];
    uint64_t v33 = -[FigCaptureAudioFileSinkPipeline fileCoordinatorNode](v32);
    BOOL v27 = 0;
    int v34 = 0;
    goto LABEL_90;
  }
  [*(id *)(DerivedStorage + 752) setObject:0 forKeyedSubscript:a2];
  [*(id *)(DerivedStorage + 760) setObject:0 forKeyedSubscript:a2];
  uint64_t v26 = -[FigCaptureMovieFileSinkPipeline fileCoordinatorNode]((uint64_t)v23);
  BOOL v27 = -[FigCaptureMovieFileSinkPipeline videoCompressorNodes]((uint64_t)v23) != 0;
  uint64_t v28 = -[FigCaptureMovieFileSinkPipeline videoSourceID]((uint64_t)v23);
  captureSession_setRestoreForcedOffOverCaptureActiveSlaveStreamEnabled((uint64_t)a1, v28, 0);
  unsigned int v29 = objc_msgSend((id)objc_msgSend(a3, "videoSettings"), "objectForKeyedSubscript:", @"AVVideoCompressionPropertiesKey");
  int v30 = (void *)[v29 objectForKeyedSubscript:*MEMORY[0x1E4F44B38]];
  if (v30) {
    char v31 = [v30 BOOLValue] ^ 1;
  }
  else {
    char v31 = 0;
  }
  int v35 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "hevcSettings"), "objectForKeyedSubscript:", @"MotionCompensatedTemporalFilteringSupported"), "BOOLValue");
  int v34 = 0;
  if (!v35 || (v31 & 1) != 0) {
    goto LABEL_88;
  }
  int v36 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "hevcSettings"), "objectForKeyedSubscript:", @"MSTFBand0ModulationOnlyWhenRequired"), "BOOLValue");
  if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "videoSettings"), "objectForKeyedSubscript:", @"AVVideoCodecKey"), "isEqualToString:", @"hvc1")|| a4 && !objc_msgSend(a4, "isMomentCaptureMovieRecording"))
  {
    int v34 = 0;
LABEL_88:
    a2 = v173;
LABEL_89:
    uint64_t v33 = v26;
    goto LABEL_90;
  }
  BOOL v171 = v27;
  long long v37 = (void *)-[FigCaptureMovieFileSinkPipeline movieFileVideoCaptureConnectionConfiguration]((uint64_t)v23);
  uint64_t v33 = v26;
  if (cs_motionCompensatedTemporalFilteringEnabledForVideoCaptureConnectionConfiguration(v37))
  {
    int v176 = v36;
    uint64_t v174 = (uint64_t)v24;
    long long v204 = 0u;
    long long v205 = 0u;
    long long v206 = 0u;
    long long v207 = 0u;
    uint64_t v38 = (void *)[*(id *)(DerivedStorage + 664) videoDataSinkPipelines];
    uint64_t v39 = [v38 countByEnumeratingWithState:&v204 objects:v185 count:16];
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v166 = v33;
      uint64_t v41 = *(void *)v205;
      while (2)
      {
        for (uint64_t i = 0; i != v40; ++i)
        {
          if (*(void *)v205 != v41) {
            objc_enumerationMutation(v38);
          }
          uint64_t v43 = *(void *)(*((void *)&v204 + 1) + 8 * i);
          uint64_t v44 = (void *)-[FigCaptureVideoDataSinkPipeline sourceID](v43);
          if ([v44 isEqualToString:-[FigCaptureMovieFileSinkPipeline videoSourceID]((uint64_t)v23)]&& !-[FigCaptureVideoDataSinkPipeline optimizedForPreview](v43))
          {
            int v45 = 1;
            goto LABEL_61;
          }
        }
        uint64_t v40 = [v38 countByEnumeratingWithState:&v204 objects:v185 count:16];
        if (v40) {
          continue;
        }
        break;
      }
      int v45 = 0;
LABEL_61:
      uint64_t v46 = v166;
    }
    else
    {
      uint64_t v46 = v26;
      int v45 = 0;
    }
    int v47 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "videoSettings"), "objectForKeyedSubscript:", @"AVVideoWidthKey"), "intValue");
    LODWORD(v4_Block_object_dispose(&STACK[0x458], 8) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "videoSettings"), "objectForKeyedSubscript:", @"AVVideoHeightKey"), "intValue");
    int v49 = -[FigCaptureCameraSourcePipeline maxFrameRateClientOverride](v174);
    int v50 = -[FigCaptureMovieFileSinkPipeline videoStabilizationStrength]((uint64_t)v23);
    if (v47 == 3840 && v48 == 2160)
    {
      if (v50 < 3)
      {
        LODWORD(v4_Block_object_dispose(&STACK[0x458], 8) = 2160;
        int v47 = 3840;
      }
      else
      {
        int v51 = -[FigCaptureMovieFileSinkPipeline videoStabilizationStrength]((uint64_t)v23);
        unint64_t v52 = cs_actionCamera2p8kOutputDimensions(v51);
        int v47 = v52;
        unint64_t v48 = HIDWORD(v52);
      }
    }
    int v53 = v48 * v47;
    if ((int)v48 * v47 * v49 > 290304000)
    {
      int v56 = v45 ^ 1;
      if (v45) {
        uint64_t v54 = 0;
      }
      else {
        uint64_t v54 = 2;
      }
      if (v53 >= 9676801) {
        int v56 = 0;
      }
      long long v24 = (void *)v174;
      BOOL v55 = v171;
      if (v53 > 9676800)
      {
        int v34 = 0;
        uint64_t v58 = v46;
        BOOL v27 = v171;
        a2 = v173;
        uint64_t v33 = v58;
        goto LABEL_90;
      }
      int v34 = v56;
    }
    else
    {
      uint64_t v54 = (v45 | v176) ^ 1u;
      int v34 = 1;
      long long v24 = (void *)v174;
      BOOL v55 = v171;
    }
    uint64_t v26 = v46;
    if (v54)
    {
      int v57 = v34;
      [(id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v23) setTemporalNoiseReductionBand0StrengthModulation:v54];
      int v34 = v57;
    }
    BOOL v27 = v55;
    a2 = v173;
    goto LABEL_89;
  }
  int v34 = 0;
  a2 = v173;
LABEL_90:
  int v170 = v34;
  if (!v33)
  {
    uint64_t v161 = v5;
    LODWORD(v15_Block_object_dispose(&STACK[0x458], 8) = 0;
    FigDebugAssert3();
    a4 = v178;
LABEL_85:
    uint64_t v22 = FigSignalErrorAt();
    if (!v22) {
      return;
    }
    goto LABEL_36;
  }
  unsigned int v59 = 0;
  if (-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)v23)
    && -[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v23))
  {
    [(id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v23) maximumFrameRate];
    unsigned int v59 = v60;
  }
  uint64_t v177 = objc_msgSend(*(id *)(DerivedStorage + 664), "cinematographyPipelineWithSourceID:", objc_msgSend(v24, "sourceID"));
  if (v177)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v61 = -[FigCaptureCinematographyPipeline globalMetadata](v177);
      MovieLevelMetadataWithCinematicVideoGlobalMetadatCGFloat a = (void *)FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithCinematicVideoGlobalMetadata((void *)[a3 movieLevelMetadata], v61);
      [a3 setMovieLevelMetadata:MovieLevelMetadataWithCinematicVideoGlobalMetadata];
    }
  }
  if ((int)-[FigCaptureMovieFileSinkPipeline videoStabilizationStrength]((uint64_t)v23) >= 3)
  {
    uint64_t v63 = (void *)[a3 movieLevelMetadata];
    uint64_t v64 = -[FigCaptureMovieFileSinkPipeline videoStabilizationStrength]((uint64_t)v23);
    MovieLevelMetadataWithActionCameraGlobalMetadatCGFloat a = (void *)FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithActionCameraGlobalMetadata(v63, v64);
    [a3 setMovieLevelMetadata:MovieLevelMetadataWithActionCameraGlobalMetadata];
  }
  CurrentSmartStyle = (void *)cs_getCurrentSmartStyle();
  if (!v178 && CurrentSmartStyle)
  {
    MovieLevelMetadataWithSmartStyleMetadatCGFloat a = (void *)FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSmartStyleMetadata((void *)[a3 movieLevelMetadata], CurrentSmartStyle, 0);
    [a3 setMovieLevelMetadata:MovieLevelMetadataWithSmartStyleMetadata];
  }
  uint64_t v68 = -[FigCaptureMovieFileSinkPipeline videoCompressorNodes]((uint64_t)v23);
  if (v68 && (uint64_t v69 = (void *)v68, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v175 = (uint64_t)v24;
    uint64_t v70 = -[FigCaptureMicSourcePipeline sourceNode]([*(id *)(DerivedStorage + 664) micSourcePipeline]);
    if (a3)
    {
      long long v71 = (void *)v70;
      if ([a3 audioSettings])
      {
        if (![v71 audioCaptureMode]
          && [v71 isAudioPlayingToBuiltinSpeaker])
        {
          long long v72 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(a3, "audioSettings"));
          *(_OWORD *)uint64_t v185 = xmmword_1A5F0C518;
          *(_OWORD *)&v185[16] = unk_1A5F0C528;
          objc_msgSend(v72, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v185, 32), 0x1EFA48EE0);
          [v72 setObject:&unk_1EFAFFD20 forKeyedSubscript:0x1EFA48DA0];
          [a3 setAudioSettings:v72];
        }
      }
    }
    if (objc_msgSend((id)-[FigCaptureMicSourcePipeline sourceNode](objc_msgSend(*(id *)(DerivedStorage + 664), "micSourcePipeline")), "mixWithOthersActive"))objc_msgSend(a3, "setAudioWasPlayingDuringCapture:", cs_isOtherAppExcludingCameraAppPlayingAudio()); {
    objc_msgSend(a3, "setAudioMixWithOthersEnabled:", objc_msgSend((id)-[FigCaptureMicSourcePipeline sourceNode](objc_msgSend(*(id *)(DerivedStorage + 664), "micSourcePipeline")), "mixWithOthersEnabled"));
    }
    uint64_t v169 = *(void *)(DerivedStorage + 264);
    uint64_t v73 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v69, "firstObject"), "input"), "videoFormat"), "colorSpaceProperties");
    id v74 = +[BWVideoFormat pixelBufferAttachmentsForColorSpaceProperties:v73];
    BOOL IsHDR = BWColorSpacePropertiesIsHDR(v73);
    if ([a3 isIrisMovieRecording])
    {
      double v75 = *MEMORY[0x1E4F1DB28];
      CGFloat v76 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
      double v78 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
      double v77 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
    }
    else
    {
      double v75 = -[FigCaptureMovieFileSinkPipeline irisVISCleanOutputRectForCLAP]((uint64_t)v23);
      CGFloat v76 = v87;
      double v78 = v88;
      double v77 = v89;
    }
    BOOL v172 = v27;
    if ([a3 isIrisRecording]) {
      int v90 = [a3 isIrisMovieRecording] ^ 1;
    }
    else {
      int v90 = 0;
    }
    long long v79 = (void *)v33;
    if (-[FigCaptureMovieFileSinkPipeline smartStyleReversibilityEnabled]((BOOL)v23)) {
      int v91 = objc_msgSend((id)objc_msgSend(v178, "settings"), "smartStyleReversibilitySupported");
    }
    else {
      int v91 = 0;
    }
    uint64_t v92 = [a3 videoSettings];
    if (v169
      || (v91 & 1) != 0
      || v74
      || (uint64_t v80 = (void *)v92,
          v213.origin.CGFloat x = v75,
          v213.origin.CGFloat y = v76,
          v213.size.CGFloat width = v78,
          v213.size.CGFloat height = v77,
          (v90 | IsHDR | !CGRectIsEmpty(v213)) == 1))
    {
      unsigned int v162 = v74;
      int v163 = v91;
      float v93 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithDictionary:", objc_msgSend(a3, "videoSettings"));
      char v94 = v93;
      uint64_t v95 = (void *)MEMORY[0x1E4F45640];
      uint64_t v167 = v79;
      propertyList = v93;
      if (v169)
      {
        uint64_t v96 = [v93 objectForKeyedSubscript:@"AVVideoEncoderSpecificationKey"];
        long long v97 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v96];
        [v97 setObject:v169 forKeyedSubscript:*v95];
        char v94 = propertyList;
        [propertyList setObject:v97 forKeyedSubscript:@"AVVideoEncoderSpecificationKey"];
      }
      if (v162
        || (v214.origin.CGFloat x = v75,
            v214.origin.CGFloat y = v76,
            v214.size.CGFloat width = v78,
            v214.size.CGFloat height = v77,
            (v90 | IsHDR | !CGRectIsEmpty(v214)) == 1))
      {
        uint64_t v98 = [v94 objectForKeyedSubscript:@"AVVideoCompressionPropertiesKey"];
        uint64_t v99 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v98];
        if (v162)
        {
          uint64_t v100 = [v162 objectForKeyedSubscript:*MEMORY[0x1E4F24C18]];
          if (v100) {
            [v99 setObject:v100 forKeyedSubscript:*MEMORY[0x1E4F44BB0]];
          }
          uint64_t v101 = [v162 objectForKeyedSubscript:*MEMORY[0x1E4F24A90]];
          if (v101) {
            [v99 setObject:v101 forKeyedSubscript:*MEMORY[0x1E4F44868]];
          }
          uint64_t v102 = [v162 objectForKeyedSubscript:*MEMORY[0x1E4F24BC8]];
          if (v102) {
            [v99 setObject:v102 forKeyedSubscript:*MEMORY[0x1E4F44B58]];
          }
        }
        if (IsHDR) {
          [v99 setObject:*MEMORY[0x1E4F44FB8] forKeyedSubscript:*MEMORY[0x1E4F44928]];
        }
        v215.origin.CGFloat x = v75;
        v215.origin.CGFloat y = v76;
        v215.size.CGFloat width = v78;
        v215.size.CGFloat height = v77;
        if (!CGRectIsEmpty(v215))
        {
          v183[0] = *MEMORY[0x1E4F24A88];
          v184[0] = [NSNumber numberWithInt:(int)v78];
          v183[1] = *MEMORY[0x1E4F24A68];
          uint64_t v103 = [NSNumber numberWithInt:(int)v77];
          uint64_t v104 = *MEMORY[0x1E4F24A70];
          v184[1] = v103;
          v184[2] = &unk_1EFAFFD08;
          uint64_t v105 = *MEMORY[0x1E4F24A80];
          v183[2] = v104;
          v183[3] = v105;
          v184[3] = &unk_1EFAFFD08;
          uint64_t v106 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v184 forKeys:v183 count:4];
          [v99 setObject:v106 forKeyedSubscript:*MEMORY[0x1E4F44858]];
        }
        if (v90) {
          [v99 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:*MEMORY[0x1E4F447D8]];
        }
        if (v170)
        {
          uint64_t v107 = MEMORY[0x1E4F1CC38];
          uint64_t v108 = v99;
        }
        else
        {
          uint64_t v108 = v99;
          uint64_t v107 = 0;
        }
        [v108 setObject:v107 forKeyedSubscript:*MEMORY[0x1E4F44B38]];
        [v94 setObject:v99 forKeyedSubscript:@"AVVideoCompressionPropertiesKey"];
      }
      if (v163)
      {
        CFAllocatorRef v109 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v110 = (id)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], propertyList, 1uLL);
        __int16 v111 = (void *)[v110 objectForKeyedSubscript:@"AVVideoCompressionPropertiesKey"];
        [v111 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:*MEMORY[0x1E4F447D0]];
        cs_applyCompressionPropertiesOverridesForSmartStyleReversibility(propertyList, 0);
        DeepCopCGFloat y = (void *)CFPropertyListCreateDeepCopy(v109, v110, 1uLL);
        uint64_t v113 = *MEMORY[0x1E4F452E0];
        int v114 = (void *)[DeepCopy objectForKeyedSubscript:@"AVVideoCompressionPropertiesKey"];
        uint64_t v115 = *MEMORY[0x1E4F44AA0];
        uint64_t v165 = *MEMORY[0x1E4F44AA0];
        [v114 setObject:v113 forKeyedSubscript:*MEMORY[0x1E4F44AA0]];
        cs_applyCompressionPropertiesOverridesForSmartStyleReversibility(DeepCopy, @"SmartStyleMasksSettings");
        [propertyList setObject:DeepCopy forKeyedSubscript:0x1EFA73200];

        uint64_t v116 = (void *)CFPropertyListCreateDeepCopy(v109, v110, 1uLL);
        uint64_t v117 = *MEMORY[0x1E4F452A8];
        objc_msgSend((id)objc_msgSend(v116, "objectForKeyedSubscript:", @"AVVideoCompressionPropertiesKey"), "setObject:forKeyedSubscript:", *MEMORY[0x1E4F452A8], v115);
        cs_applyCompressionPropertiesOverridesForSmartStyleReversibility(v116, @"SmartStyleLinearThumbnailSettings");
        [propertyList setObject:v116 forKeyedSubscript:0x1EFA73220];

        CFTypeRef v118 = (void *)CFPropertyListCreateDeepCopy(v109, v110, 1uLL);
        cs_applyCompressionPropertiesOverridesForSmartStyleReversibility(v118, @"SmartStyleDeltaMapSettings");
        objc_msgSend((id)objc_msgSend(v118, "objectForKeyedSubscript:", @"AVVideoCompressionPropertiesKey"), "setObject:forKeyedSubscript:", v117, v165);
        uint64_t v119 = *MEMORY[0x1E4F24BE8];
        __int16 v120 = (void *)[v118 objectForKeyedSubscript:@"AVVideoCompressionPropertiesKey"];
        [v120 setObject:v119 forKeyedSubscript:*MEMORY[0x1E4F44B58]];
        memset(v185, 0, 24);
        CFTypeRef v121 = (void *)[(id)-[FigCaptureMovieFileSinkPipeline movieFileVideoCaptureConnectionConfiguration]((uint64_t)v23) irisSinkConfiguration];
        if (v121) {
          [v121 irisMovieDuration];
        }
        else {
          memset(v185, 0, 24);
        }
        long long v204 = 0uLL;
        *(void *)&long long v205 = 0;
        __int16 v122 = (void *)[(id)-[FigCaptureMovieFileSinkPipeline movieFileVideoCaptureConnectionConfiguration]((uint64_t)v23) irisSinkConfiguration];
        if (v122)
        {
          [v122 irisMovieVideoFrameDuration];
        }
        else
        {
          long long v204 = 0uLL;
          *(void *)&long long v205 = 0;
        }
        if (v185[12] & 1) != 0 && (BYTE12(v204))
        {
          CMTime time = *(CMTime *)v185;
          double Seconds = CMTimeGetSeconds(&time);
          *(_OWORD *)&time.unsigned int value = v204;
          time.CMTimeEpoch epoch = v205;
          LODWORD(v123) = vcvtpd_u64_f64(Seconds / CMTimeGetSeconds(&time));
        }
        else
        {
          uint64_t v123 = 90;
        }
        uint64_t v125 = [NSNumber numberWithUnsignedInt:v123];
        uint64_t v126 = (void *)[v118 objectForKeyedSubscript:@"AVVideoCompressionPropertiesKey"];
        [v126 setObject:v125 forKeyedSubscript:*MEMORY[0x1E4F44B18]];
        [propertyList setObject:v118 forKeyedSubscript:0x1EFA73240];
      }
      if (-[FigCaptureCameraSourcePipeline captureSourceDepthDataFormat](v175))
      {
        unint64_t v127 = [(id)-[FigCaptureCameraSourcePipeline captureSourceDepthDataFormat](v175) dimensions];
        if (v177) {
          unint64_t v127 = -[FigCaptureCinematographyPipeline depthOutputDimensions](v177);
        }
        unsigned int v128 = HIDWORD(v127) * v127;
        unsigned int v129 = 4;
        BOOL v130 = &unk_1A5F0C564;
        while (1)
        {
          uint64_t v131 = v129;
          unsigned int v132 = dword_1A5F0C538[2 * v129];
          if (v128 >= v132) {
            break;
          }
          unsigned int v129 = v131 - 1;
          v130 -= 2;
          if (!v131)
          {
            uint64_t v133 = 0;
            goto LABEL_186;
          }
        }
        unsigned int v134 = dword_1A5F0C538[2 * v131 + 1];
        float v135 = (float)(*v130 - v134) / (float)(*(v130 - 1) - v132);
        uint64_t v133 = (int)(float)((float)((float)v134 - (float)(v135 * (float)v132))
                                        + (float)(v135 * (float)v128));
LABEL_186:
        uint64_t v136 = *MEMORY[0x1E4F447D0];
        uint64_t v137 = MEMORY[0x1E4F1CC38];
        *(void *)uint64_t v185 = MEMORY[0x1E4F1CC38];
        uint64_t v138 = *MEMORY[0x1E4F44810];
        *(void *)&long long v204 = v136;
        *((void *)&v204 + 1) = v138;
        uint64_t v139 = [NSNumber numberWithInt:v133];
        uint64_t v140 = *MEMORY[0x1E4F448F0];
        *(void *)&v185[8] = v139;
        *(void *)&v185[16] = &unk_1EFAFFD50;
        uint64_t v141 = *MEMORY[0x1E4F44AC0];
        *(void *)&long long v205 = v140;
        *((void *)&v205 + 1) = v141;
        uint64_t v142 = *MEMORY[0x1E4F44828];
        *(void *)&v185[24] = v137;
        uint64_t v186 = &unk_1EFAFFD50;
        uint64_t v143 = *MEMORY[0x1E4F447D8];
        *(void *)&long long v206 = v142;
        *((void *)&v206 + 1) = v143;
        uint64_t v144 = *MEMORY[0x1E4F449F8];
        uint64_t v187 = v137;
        uint64_t v188 = v137;
        uint64_t v145 = *MEMORY[0x1E4F44AD0];
        *(void *)&long long v207 = v144;
        *((void *)&v207 + 1) = v145;
        uint64_t v146 = *MEMORY[0x1E4F449E0];
        uint64_t v189 = v137;
        uint64_t v190 = &unk_1EFAFFD68;
        uint64_t v147 = *MEMORY[0x1E4F449B8];
        uint64_t v208 = v146;
        uint64_t v209 = v147;
        uint64_t v148 = *MEMORY[0x1E4F44AA0];
        uint64_t v149 = *MEMORY[0x1E4F452D8];
        uint64_t v191 = &unk_1EFAFFD80;
        uint64_t v192 = v149;
        uint64_t v150 = *MEMORY[0x1E4F44A98];
        uint64_t v210 = v148;
        uint64_t v211 = v150;
        CFDictionaryRef v193 = &unk_1EFAFFD98;
        CMTimeValue v151 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v185 forKeys:&v204 count:12];
        int v152 = (void *)MEMORY[0x1E4F1CA60];
        *(void *)os_log_type_t type = @"AVVideoCompressionPropertiesKey";
        uint64_t v197 = @"AVVideoCodecKey";
        time.unsigned int value = v151;
        *(void *)&time.timescale = @"dish";
        uint64_t v198 = @"AVVideoWidthKey";
        time.CMTimeEpoch epoch = [NSNumber numberWithInt:v127];
        int v199 = @"AVVideoHeightKey";
        uint64_t v153 = [NSNumber numberWithInt:HIDWORD(v127)];
        uint64_t v200 = @"AVVideoScalingModeKey";
        uint64_t v202 = v153;
        v203 = @"AVVideoScalingModeResize";
        float v154 = objc_msgSend(v152, "dictionaryWithDictionary:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &time, type, 5));
        if (v169)
        {
          uint64_t v194 = *MEMORY[0x1E4F45640];
          uint64_t v195 = v169;
          objc_msgSend(v154, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v195, &v194, 1), @"AVVideoEncoderSpecificationKey");
        }
        uint64_t v80 = propertyList;
        [propertyList setObject:v154 forKeyedSubscript:0x1EFA731E0];
        long long v79 = v167;
      }
      else
      {
        long long v79 = v167;
        uint64_t v80 = propertyList;
      }
    }
    if ([(id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v23) isBravoVariant])
    {
      BOOL v27 = v172;
      if (![a3 isIrisRecording] || objc_msgSend(a3, "isIrisMovieRecording"))
      {
        memset(v185, 0, 20);
        if (a3)
        {
          [a3 bravoCameraSelectionConfigurationForRecording];
          uint64_t v155 = *(void *)&v185[4];
          uint64_t v156 = *(void *)&v185[12];
        }
        else
        {
          uint64_t v156 = 0;
          uint64_t v155 = 0;
        }
        objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v23), "setBravoStreamSelectionConfigurationForRecording:", v155, v156);
        [(id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v23) setBravoStreamSelectionConfigurationForRecordingEnabled:v185[0]];
      }
      long long v24 = (void *)v175;
    }
    else
    {
      long long v24 = (void *)v175;
      BOOL v27 = v172;
    }
  }
  else
  {
    long long v79 = (void *)v33;
    uint64_t v80 = 0;
  }
  CMTime v182 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (v177)
  {
    long long v81 = (void *)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v23);
    if (v81) {
      [v81 mostRecentPTS];
    }
    else {
      memset(&lhs, 0, sizeof(lhs));
    }
    [(id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v23) minimumFrameRate];
    CMTimeMakeWithSeconds(&rhs, 1.0 / v82, 1000000000);
    CMTimeAdd(&v182, &lhs, &rhs);
  }
  -[FigCaptureCameraSourcePipeline startIncrementalPrefetchingOfSourcePoolsIfNecessary]((uint64_t)v24);
  *(_OWORD *)uint64_t v185 = *(_OWORD *)v179;
  *(void *)&v185[16] = *(void *)(v179 + 16);
  long long v204 = *(_OWORD *)&v182.value;
  *(void *)&long long v205 = v182.epoch;
  int v83 = objc_msgSend(v79, "startRecordingWithSettings:videoSettings:maxFrameRate:stopAtPTS:startAfterPTS:", a3, v80, v185, &v204, COERCE_DOUBLE(__PAIR64__(HIDWORD(v182.value), v59)));
  if (v83)
  {
    LODWORD(v22) = v83;
    uint64_t v161 = v5;
    LODWORD(v15_Block_object_dispose(&STACK[0x458], 8) = v83;
    FigDebugAssert3();
    if (v22 == -16805) {
      uint64_t v22 = 4294950877;
    }
    else {
      uint64_t v22 = v22;
    }
    a4 = v178;
    a2 = v173;
    goto LABEL_36;
  }
  if (([(id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v24) captureInitiatedOnce] & 1) == 0) {
    [(id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v24) setCaptureInitiatedOnce:1];
  }
  [(id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v24) setFrameSkippingWhenNotRecordingEnabled:0];
  if (-[FigCaptureMovieFileSinkPipeline overCaptureEnabled]((BOOL)v23))
  {
    objc_opt_class();
    char v84 = (objc_opt_isKindOfClass() & 1) != 0 && [a3 spatialOverCaptureMovieURL] != 0;
    -[FigCaptureMovieFileSinkPipeline setOverCaptureTailPipelineRenderingEnabled:]((unint64_t)v23, v84);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  uint64_t v85 = *(unsigned __int8 *)(DerivedStorage + 377);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
  [v23 setRecording:1];
  [v23 setRecordedWhileMultitasking:v85];
  if (v27
    && [(id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v23) autoImageControlMode] == 1)
  {
    char v86 = [v178 isMomentCaptureMovieRecording];
    if (!v178 && (v86 & 1) == 0) {
      [(id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v23) setAutoImageControlMode:2];
    }
  }
}

void captureSession_externalStorageDeviceManagerCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 816))
    {
      if (dword_1EB4C5110)
      {
        int v11 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __captureSession_externalStorageDeviceManagerCallback_block_invoke;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      block[4] = a1;
      void block[5] = a3;
      void block[6] = v6;
      dispatch_async(global_queue, block);
    }
  }
}

uint64_t captureSession_isPrewarming()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (os_unfair_lock_s *)(DerivedStorage + 360);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  uint64_t v2 = *(unsigned __int8 *)(DerivedStorage + 373);
  os_unfair_lock_unlock(v1);
  return v2;
}

uint64_t captureSession_startDeferredGraphSetup(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v7 = v1;
    LODWORD(v6) = 0;
    FigDebugAssert3();
  }
  uint64_t v4 = *(void **)(DerivedStorage + 632);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __captureSession_startDeferredGraphSetup_block_invoke;
  v8[3] = &__block_descriptor_40_e5_v8__0l;
  v8[4] = a1;
  return objc_msgSend(v4, "notifyWhenNonDeferredSourceNodesHaveStarted:", v8, v6, v7);
}

NSObject *captureSession_waitForGraphToStart(uint64_t a1, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = _FigIsCurrentDispatchQueue();
  if (!result)
  {
    uint64_t v11 = v2;
    LODWORD(v10) = 0;
    uint64_t result = FigDebugAssert3();
  }
  if (dword_1EB4C5110)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)(DerivedStorage + 649))
  {
    if (!a2)
    {
      captureSession_startDeferredGraphSetupWork(a1);
      return [*(id *)(DerivedStorage + 632) waitForStartOrCommitToComplete];
    }
    if (*(unsigned char *)(DerivedStorage + 651))
    {
      if (dword_1EB4C5110)
      {
        uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else if (!*(unsigned char *)(DerivedStorage + 652))
    {
      [*(id *)(DerivedStorage + 632) cancelDeferredSourceNodeStart];
      [*(id *)(DerivedStorage + 632) cancelDeferredNodePrepare];
LABEL_17:
      objc_msgSend(*(id *)(DerivedStorage + 632), "waitForStartOrCommitToComplete", v10, v11);
      uint64_t result = *(NSObject **)(DerivedStorage + 168);
      if (result) {
        return dispatch_group_wait(result, 0xFFFFFFFFFFFFFFFFLL);
      }
      return result;
    }
    if (*(unsigned char *)(DerivedStorage + 652) && dword_1EB4C5110)
    {
      uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    captureSession_startDeferredGraphSetupWork(a1);
    goto LABEL_17;
  }
  return result;
}

uint64_t captureSession_checkClientIsAllowedToWriteToOutputURLsInRecordingSettings(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v3 = (void *)[MEMORY[0x1E4F1CA48] array];
  if ([a2 outputURL]) {
    objc_msgSend(v3, "addObject:", objc_msgSend(a2, "outputURL"));
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [a2 spatialOverCaptureMovieURL]) {
    objc_msgSend(v3, "addObject:", objc_msgSend(a2, "spatialOverCaptureMovieURL"));
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v17 count:16];
  if (!v4) {
    return 1;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)v12;
LABEL_8:
  uint64_t v7 = 0;
  while (1)
  {
    if (*(void *)v12 != v6) {
      objc_enumerationMutation(v3);
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    long long v9 = *(_OWORD *)(DerivedStorage + 36);
    long long v15 = *(_OWORD *)(DerivedStorage + 20);
    long long v16 = v9;
    uint64_t result = FigServer_IsWritableFileOpeningOrCreationPermittedForAuditToken();
    if (!result) {
      return result;
    }
    if (v5 == ++v7)
    {
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v17 count:16];
      if (v5) {
        goto LABEL_8;
      }
      return 1;
    }
  }
}

uint64_t captureSession_checkIfOutputURLsInRecordingSettingsAlreadyExist(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  if ([a1 outputURL]) {
    objc_msgSend(v2, "addObject:", objc_msgSend(a1, "outputURL"));
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [a1 spatialOverCaptureMovieURL]) {
    objc_msgSend(v2, "addObject:", objc_msgSend(a1, "spatialOverCaptureMovieURL"));
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        if (FigFileDoesFileExist()) {
          return 1;
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t cs_getCurrentSmartStyle()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 664), "cinematographyPipelines"), "count"))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v1 = (void *)[*(id *)(DerivedStorage + 664) cinematographyPipelines];
    uint64_t result = [v1 countByEnumeratingWithState:&v16 objects:v21 count:16];
    if (result)
    {
      uint64_t v3 = result;
      uint64_t v4 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v17 != v4) {
            objc_enumerationMutation(v1);
          }
          uint64_t v6 = *(void *)(*((void *)&v16 + 1) + 8 * i);
          if (-[FigCaptureCinematographyPipeline getSmartStyle](v6)) {
            return -[FigCaptureCinematographyPipeline getSmartStyle](v6);
          }
        }
        uint64_t v3 = [v1 countByEnumeratingWithState:&v16 objects:v21 count:16];
        uint64_t result = 0;
        if (v3) {
          continue;
        }
        break;
      }
    }
  }
  else
  {
    uint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 664), "cameraSourcePipelines"), "count");
    if (result)
    {
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v7 = objc_msgSend(*(id *)(DerivedStorage + 664), "cameraSourcePipelines", 0);
      uint64_t result = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
      if (result)
      {
        uint64_t v8 = result;
        uint64_t v9 = *(void *)v13;
        while (2)
        {
          for (uint64_t j = 0; j != v8; ++j)
          {
            if (*(void *)v13 != v9) {
              objc_enumerationMutation(v7);
            }
            uint64_t v11 = *(void *)(*((void *)&v12 + 1) + 8 * j);
            if (-[FigCaptureCameraSourcePipeline getSmartStyle](v11)) {
              return -[FigCaptureCameraSourcePipeline getSmartStyle](v11);
            }
          }
          uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
          uint64_t result = 0;
          if (v8) {
            continue;
          }
          break;
        }
      }
    }
  }
  return result;
}

BOOL cs_isOtherAppExcludingCameraAppPlayingAudio()
{
  float v0 = (void *)[MEMORY[0x1E4F74F68] sharedAVSystemController];
  uint64_t v1 = (void *)[v0 attributeForKey:*MEMORY[0x1E4F74C78]];
  if (![v1 count]) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (void *)MEMORY[0x1E4F74C90];
  while (1)
  {
    uint64_t v4 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "objectAtIndexedSubscript:", v2), "objectForKey:", *v3), "integerValue");
    uint64_t v8 = 0;
    uint64_t v5 = objc_msgSend(MEMORY[0x1E4F963E8], "handleForIdentifier:error:", objc_msgSend(NSNumber, "numberWithInt:", v4), &v8);
    BOOL v6 = v8 == 0;
    if (v8
      || (FigCaptureClientApplicationIDIsCameraOrDerivative(objc_msgSend((id)objc_msgSend(v5, "bundle"), "identifier")) & 1) == 0)
    {
      break;
    }
    if ([v1 count] <= (unint64_t)++v2) {
      return 0;
    }
  }
  return v6;
}

uint64_t cs_applyCompressionPropertiesOverridesForSmartStyleReversibility(void *a1, void *a2)
{
  if (cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_onceToken == -1)
  {
    if (!a2)
    {
LABEL_4:
      uint64_t v4 = (void *)cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForFullResTracks;
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_once(&cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_onceToken, &__block_literal_global_487);
    if (!a2) {
      goto LABEL_4;
    }
  }
  if ([a2 isEqualToString:0x1EFA73240]) {
    goto LABEL_4;
  }
  if (([a2 isEqualToString:0x1EFA73200] & 1) != 0
    || [a2 isEqualToString:0x1EFA73220])
  {
    uint64_t v4 = (void *)cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForLowResTracks;
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_9:
  uint64_t result = [v4 count];
  if (result)
  {
    BOOL v6 = (void *)[a1 objectForKeyedSubscript:@"AVVideoCompressionPropertiesKey"];
    return [v6 setValuesForKeysWithDictionary:v4];
  }
  return result;
}

void __captureSession_externalStorageDeviceManagerCallback_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFArrayRef v2 = *(const __CFArray **)(a1 + 32);
  if (v2 && CFArrayGetCount(v2))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v19 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v15;
      uint64_t v7 = *MEMORY[0x1E4F1CF80];
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v15 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v9 = *(void *)(*((void *)&v14 + 1) + 8 * i);
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 792);
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          long long v13 = *(unsigned int (**)(uint64_t, uint64_t, __CFString *, uint64_t, CFTypeRef *))(v12 + 32);
          if (!v13 || v13(v10, v9, @"Device_BaseURL", v7, &cf))
          {
            FigDebugAssert3();
            goto LABEL_21;
          }
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 48) + 800), "outputURL"), "absoluteString"), "containsString:", objc_msgSend((id)cf, "absoluteString")))goto LABEL_21; {
        }
          }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v19 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
    captureSession_throwErrorForSSDDisconnected(*(const void **)(a1 + 40));
  }
  else
  {
    captureSession_throwErrorForSSDDisconnected(*(const void **)(a1 + 40));
    *(unsigned char *)(*(void *)(a1 + 48) + 816) = 0;
  }
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
}

void captureSession_throwErrorForSSDDisconnected(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(*(void *)(DerivedStorage + 808), [*(id *)(DerivedStorage + 800) settingsID], 4294954513);
  captureSession_postNotificationWithPayload(a1, @"DidStopRecording", v3);
}

void __captureSession_startDeferredGraphSetup_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __captureSession_startDeferredGraphSetup_block_invoke_2;
  v3[3] = &__block_descriptor_40_e8_v12__0B8l;
  v3[4] = v1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureSession_dispatchGraphCalloutWithGraphIDToWorkerQueueAfter(v1, *(void *)(DerivedStorage + 640), (uint64_t)v3, 0.0);
}

uint64_t __captureSession_startDeferredGraphSetup_block_invoke_2(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    return captureSession_startDeferredGraphSetupWork(*(void *)(result + 32));
  }
  return result;
}

uint64_t __captureSession_startDeferredGraphSetupWork_block_invoke(uint64_t a1)
{
  uint64_t result = captureSession_isGraphCalloutCancelled(*(void *)(a1 + 32), *(void *)(a1 + 40));
  if ((result & 1) == 0)
  {
    return FigVideoCaptureSourcesEnableTimeOfFlightAFIfSupported();
  }
  return result;
}

uint64_t cs_actionCamera2p8kOutputDimensions(int a1)
{
  uint64_t v1 = 0x87000000F00;
  if (a1 <= 2)
  {
    FigDebugAssert3();
  }
  else if ((a1 - 3) < 2)
  {
    return 0x63000000B00;
  }
  return v1;
}

uint64_t __cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_block_invoke()
{
  cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForFullResTracks = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [(id)cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForFullResTracks setObject:&unk_1EFAFFD38 forKeyedSubscript:*MEMORY[0x1E4F449B8]];
  cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForLowResTracks = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v0 = [MEMORY[0x1E4F1CA98] null];
  uint64_t v1 = (void *)cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForLowResTracks;
  uint64_t v2 = *MEMORY[0x1E4F44858];
  return [v1 setObject:v0 forKeyedSubscript:v2];
}

void __captureSession_showRecordingVideoWhileMultitaskingDialogIfNecessary_block_invoke(uint64_t a1)
{
  responseFlags[22] = *MEMORY[0x1E4F143B8];
  responseFlags[0] = 0;
  CFUserNotificationReceiveResponse(*(CFUserNotificationRef *)(a1 + 32), 0.0, responseFlags);
  if (dword_1EB4C5110)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  os_unfair_lock_lock((os_unfair_lock_t)&sVideoRecordingWhileMultitaskingDialogLock);
  sVideoRecordingWhileMultitaskingDialogInFlight = 0;
  if (!responseFlags[0])
  {
    sVideoRecordingWhileMultitaskingDialogDisplayeCGFloat d = 1;
    CFPreferencesSetValue(@"VideoRecordingWhileMultitaskingDialogDisplayed", (CFPropertyListRef)*MEMORY[0x1E4F1CFD0], @"com.apple.cameracapture", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&sVideoRecordingWhileMultitaskingDialogLock);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t __cs_initializeVideoRecordingWhileMultitaskingStatics_block_invoke()
{
  sVideoRecordingWhileMultitaskingDialogLocuint64_t k = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"VideoRecordingWhileMultitaskingDialogDisplayed", @"com.apple.cameracapture", 0);
  sVideoRecordingWhileMultitaskingDialogDisplayeCGFloat d = result != 0;
  return result;
}

unint64_t __captureSession_didCaptureIrisStill_block_invoke(unint64_t result, int a2)
{
  unint64_t v2 = result;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (dword_1EB4C5110)
    {
      LODWORD(type[1].CFDictionaryAddValue(theDict, key, value) = 0;
      LOBYTE(type[0].CFDictionaryAddValue(theDict, key, value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return result;
  }
  if (*(unsigned char *)(result + 92))
  {
    long long v39 = *(_OWORD *)(result + 80);
    uint64_t v40 = *(void *)(result + 96);
    [*(id *)(result + 40) setBeginTrimMasterPTS:&v39];
  }
  if (!objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "count"))
  {
LABEL_12:
    if (![*(id *)(v2 + 48) pendingIrisRecordings]) {
      objc_msgSend(*(id *)(v2 + 48), "setPendingIrisRecordings:", objc_msgSend(MEMORY[0x1E4F1CA48], "array"));
    }
    uint64_t v7 = +[BWPendingIrisRecordingRequest irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:](BWPendingIrisRecordingRequest, "irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:", [*(id *)(v2 + 40) settings]);
    [(BWPendingIrisRecordingRequest *)v7 setIrisMovieInfo:*(void *)(v2 + 40)];
    objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "addObject:", v7);
    LODWORD(type[1].CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(type[0].CFDictionaryAddValue(theDict, key, value) = 0;
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    goto LABEL_15;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "objectAtIndexedSubscript:", v4);
    uint64_t v6 = objc_msgSend((id)objc_msgSend(v5, "settings"), "settingsID");
    if (v6 == objc_msgSend((id)objc_msgSend(*(id *)(v2 + 40), "settings"), "settingsID")) {
      break;
    }
LABEL_11:
    if (objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "count") <= (unint64_t)++v4) {
      goto LABEL_12;
    }
  }
  if (([v5 isEmpty] & 1) == 0)
  {
    [v5 isPairedRequestCreated];
    goto LABEL_11;
  }
  uint64_t v9 = objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "objectAtIndexedSubscript:", v4);
  [v9 setIrisMovieInfo:*(void *)(v2 + 40)];
  memset(&type[1], 0, sizeof(CMTime));
  if (v9) {
    [v9 momentCaptureMovieRecordingMasterEndTime];
  }
  if [*(id *)(v2 + 40) isMomentCaptureMovieRecording] && (type[1].flags)
  {
    memset(type, 0, 24);
    uint64_t v10 = *(void **)(v2 + 40);
    if (v10) {
      [v10 stillImageCaptureTime];
    }
    else {
      memset(&rhs, 0, sizeof(rhs));
    }
    CMTime lhs = type[1];
    CMTimeSubtract(type, &lhs, &rhs);
    memset(&v36, 0, sizeof(v36));
    CMTimeMake(&v36, 500, 1000);
    if ((type[0].flags & 1) == 0 || (CMTime lhs = type[0], time2 = v36, CMTimeCompare(&lhs, &time2) < 0))
    {
      uint64_t v11 = *(void **)(v2 + 40);
      if (v11) {
        [v11 stillImageCaptureTime];
      }
      else {
        memset(&v35, 0, sizeof(v35));
      }
      CMTime time2 = v36;
      CMTimeAdd(&lhs, &v35, &time2);
      type[1] = lhs;
      if (dword_1EB4C5110)
      {
        unsigned int v34 = 0;
        os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
        uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    CMTime v32 = type[1];
    objc_msgSend(*(id *)(v2 + 40), "setMomentCaptureMovieRecordingMasterEndTime:", &v32, p_time2, v31);
    if (dword_1EB4C5110)
    {
      unsigned int v34 = 0;
      os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
      long long v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v14 = v34;
      if (os_log_type_enabled(v13, v33)) {
        unsigned int v15 = v14;
      }
      else {
        unsigned int v15 = v14 & 0xFFFFFFFE;
      }
      if (v15)
      {
        uint64_t v16 = *(void *)(*(void *)(v2 + 64) + 104);
        uint64_t v17 = objc_msgSend((id)objc_msgSend(v9, "settings"), "settingsID");
        CMTime lhs = type[1];
        Float64 Seconds = CMTimeGetSeconds(&lhs);
        LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136315906;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"captureSession_didCaptureIrisStill_block_invoke";
        LOWORD(time2.flags) = 2114;
        *(void *)((char *)&time2.flags + 2) = v16;
        HIWORD(time2.epoch) = 2048;
        uint64_t v42 = v17;
        __int16 v43 = 2048;
        *(Float64 *)uint64_t v44 = Seconds;
        LODWORD(v31) = 42;
        p_CMTime time2 = &time2;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (dword_1EB4C5110)
  {
    LODWORD(type[0].CFDictionaryAddValue(theDict, key, value) = 0;
    LOBYTE(v36.CFDictionaryAddValue(theDict, key, value) = 0;
    long long v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = type[0].value;
    if (os_log_type_enabled(v19, v36.value)) {
      unsigned int v21 = value;
    }
    else {
      unsigned int v21 = value & 0xFFFFFFFE;
    }
    if (v21)
    {
      uint64_t v22 = *(void *)(*(void *)(v2 + 64) + 104);
      uint64_t v23 = objc_msgSend((id)objc_msgSend(*(id *)(v2 + 40), "settings"), "settingsID");
      LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136316162;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"captureSession_didCaptureIrisStill_block_invoke";
      LOWORD(time2.flags) = 2114;
      *(void *)((char *)&time2.flags + 2) = v22;
      HIWORD(time2.epoch) = 2048;
      uint64_t v42 = v23;
      __int16 v43 = 1024;
      *(_DWORD *)uint64_t v44 = v4;
      *(_WORD *)&v44[4] = 2112;
      *(void *)&v44[6] = v9;
      LODWORD(v31) = 48;
      p_CMTime time2 = &time2;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(*(id *)(v2 + 56), "deliverOriginalImage", p_time2, v31))
  {
    if (([v9 isPairedRequestCreated] & 1) == 0)
    {
      long long v24 = +[BWPendingIrisRecordingRequest irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:](BWPendingIrisRecordingRequest, "irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:", [v9 settings]);
      [(BWPendingIrisRecordingRequest *)v24 setPairedRequestCreated:1];
      objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "insertObject:atIndex:", v24, v4 + 1);
      [(BWPendingIrisRecordingRequest *)v24 setEnqueuedHostTime:mach_absolute_time()];
      if (dword_1EB4C5110)
      {
        LODWORD(type[0].CFDictionaryAddValue(theDict, key, value) = 0;
        LOBYTE(v36.CFDictionaryAddValue(theDict, key, value) = 0;
        long long v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v26 = type[0].value;
        if (os_log_type_enabled(v25, v36.value)) {
          unsigned int v27 = v26;
        }
        else {
          unsigned int v27 = v26 & 0xFFFFFFFE;
        }
        if (v27)
        {
          uint64_t v28 = *(void *)(*(void *)(v2 + 64) + 104);
          uint64_t v29 = [(FigCaptureRecordingSettings *)[(BWPendingIrisRecordingRequest *)v24 settings] settingsID];
          LODWORD(time2.CFDictionaryAddValue(theDict, key, value) = 136315650;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"captureSession_didCaptureIrisStill_block_invoke";
          LOWORD(time2.flags) = 2114;
          *(void *)((char *)&time2.flags + 2) = v28;
          HIWORD(time2.epoch) = 2048;
          uint64_t v42 = v29;
          _os_log_send_and_compose_impl();
        }
LABEL_15:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return captureSession_servicePendingIrisRecordings(*(const void **)(v2 + 72), *(void **)(v2 + 48), 0);
}

void __captureSession_updateRunningCondition_block_invoke_592(uint64_t a1)
{
}

void captureSession_stopRunningInternal(const void *a1, int a2, unsigned int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue()) {
    FigDebugAssert3();
  }
  if (*(unsigned char *)DerivedStorage) {
    BOOL v7 = a2 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    uint64_t v8 = mach_absolute_time();
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
    int v9 = *(_DWORD *)(DerivedStorage + 408);
    if (*(unsigned char *)(DerivedStorage + 364)) {
      BOOL v10 = *(unsigned char *)(DerivedStorage + 381) == 0;
    }
    else {
      BOOL v10 = 0;
    }
    int v11 = !v10;
    if (v11 == 1 && v9 != 0 && v9 != 3) {
      *(void *)(DerivedStorage + 424) = v8;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
    if (dword_1EB4C5110)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v11 && v9 && v9 != 3)
    {
      captureSession_transitionToSessionStatus(a1, 3, a3);
      captureSession_stopGraph(a1, a3, 0, 0, 0, 100, 0);
      captureSession_transitionToSessionStatus(a1, 0, a3);
    }
    else
    {
      unsigned int v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void __captureSession_updateRunningCondition_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  unint64_t v2 = (const void *)cs_notificationPayloadWithErrorStatus(*(unsigned int *)(a1 + 40));
  captureSession_postNotificationWithPayload(v1, @"DidStopRunning", v2);
}

void __captureSession_updateRunningCondition_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  unint64_t v2 = (const void *)cs_notificationPayloadWithErrorStatus(*(unsigned int *)(a1 + 40));
  captureSession_postNotificationWithPayload(v1, @"DidStopRunning", v2);
}

void captureSession_resetSessionRunningStateOnFatalError(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (cs_errorIsFatal(a2))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
    *(_WORD *)(DerivedStorage + 372) = 0;
    *(unsigned char *)(DerivedStorage + 540) = 0;
    *(unsigned char *)(DerivedStorage + 364) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
  }
  else
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t cs_configurationContainsStillImageSinkConfiguration(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v1 = objc_msgSend(a1, "sinkConfigurations", 0);
  uint64_t result = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v7 + 1) + 8 * i);
        if ([v6 sinkType] == 3 || objc_msgSend(v6, "sinkType") == 10) {
          return 1;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t result = 0;
      if (v3) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t cs_configurationContainsMovieFileSinkConfiguration(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v1 = objc_msgSend(a1, "sinkConfigurations", 0);
  uint64_t result = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v7;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        if ([*(id *)(*((void *)&v6 + 1) + 8 * v5) sinkType] == 4) {
          return 1;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      uint64_t v3 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

void captureSession_teardownGraph(const void *a1, unsigned int a2, int a3, int a4, char a5, int a6)
{
  uint64_t v193 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v107 = v109;
    LODWORD(v105) = 0;
    FigDebugAssert3();
  }
  if (dword_1EB4C5110)
  {
    unsigned int v177 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!a4 && a3)
  {
    uint64_t v107 = v109;
    LODWORD(v105) = 0;
    FigDebugAssert3();
  }
  unint64_t v10 = 0x1E4F1C000uLL;
  __int16 v122 = (id *)DerivedStorage;
  if (*(void *)(DerivedStorage + 656))
  {
    uint64_t v119 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(*(id *)(DerivedStorage + 656), "count"));
    uint64_t v117 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(*(id *)(DerivedStorage + 656), "count"));
    unsigned int v111 = [*(id *)(DerivedStorage + 464) allCameraSourcesAreMetadataCameras];
    long long v172 = 0u;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v175 = 0u;
    uint64_t v11 = *(void **)(DerivedStorage + 656);
    uint64_t v12 = [v11 countByEnumeratingWithState:&v172 objects:v190 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v173;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v173 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = objc_msgSend(*(id *)(DerivedStorage + 656), "objectForKeyedSubscript:", *(void *)(*((void *)&v172 + 1) + 8 * i), v105, v107);
          if (v16)
          {
            uint64_t v17 = v16;
            if (*(void *)(v16 + 8) && *(void *)(v16 + 16) != 0)
            {
              objc_msgSend(v119, "addObject:");
              [v117 addObject:*(void *)(v17 + 16)];
              [*(id *)(v17 + 16) unregisterForAEMatrixMetadata];
              [*(id *)(v17 + 16) setStillImageCaptureEnabled:0];
              [*(id *)(v17 + 16) setSmartStyleAttachedMediaTimeMachineDelegate:0];
            }
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v172 objects:v190 count:16];
      }
      while (v13);
    }
    if ((a3 & 1) == 0)
    {
      long long v170 = 0u;
      long long v171 = 0u;
      long long v168 = 0u;
      long long v169 = 0u;
      obuint64_t j = *(id *)(DerivedStorage + 656);
      uint64_t v19 = [obj countByEnumeratingWithState:&v168 objects:v189 count:16];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v115 = *(void *)v169;
        do
        {
          uint64_t v21 = 0;
          do
          {
            if (*(void *)v169 != v115) {
              objc_enumerationMutation(obj);
            }
            uint64_t v22 = objc_msgSend(v122[82], "objectForKeyedSubscript:", *(void *)(*((void *)&v168 + 1) + 8 * v21), v105);
            if (v22) {
              uint64_t v23 = *(void **)(v22 + 16);
            }
            else {
              uint64_t v23 = 0;
            }
            long long v166 = 0u;
            long long v167 = 0u;
            long long v164 = 0u;
            long long v165 = 0u;
            long long v24 = (void *)[v23 captureStreams];
            uint64_t v25 = [v24 countByEnumeratingWithState:&v164 objects:v188 count:16];
            if (v25)
            {
              uint64_t v26 = v25;
              unsigned int v27 = 0;
              uint64_t v28 = *(void *)v165;
              do
              {
                for (uint64_t j = 0; j != v26; ++j)
                {
                  if (*(void *)v165 != v28) {
                    objc_enumerationMutation(v24);
                  }
                  int v30 = *(void **)(*((void *)&v164 + 1) + 8 * j);
                  if (objc_msgSend((id)objc_msgSend(v30, "stream"), "streaming"))
                  {
                    if ([v30 isSynchronizationMaster]) {
                      unsigned int v27 = v30;
                    }
                    else {
                      [v30 stop];
                    }
                  }
                }
                uint64_t v26 = [v24 countByEnumeratingWithState:&v164 objects:v188 count:16];
              }
              while (v26);
              if (v27) {
                [v27 stop];
              }
            }
            long long v162 = 0u;
            long long v163 = 0u;
            long long v160 = 0u;
            long long v161 = 0u;
            uint64_t v31 = (void *)[v23 captureStreams];
            uint64_t v32 = [v31 countByEnumeratingWithState:&v160 objects:v187 count:16];
            if (v32)
            {
              uint64_t v33 = v32;
              uint64_t v34 = *(void *)v161;
              do
              {
                for (uint64_t k = 0; k != v33; ++k)
                {
                  if (*(void *)v161 != v34) {
                    objc_enumerationMutation(v31);
                  }
                  [*(id *)(*((void *)&v160 + 1) + 8 * k) resignStreamStartStopDelegate];
                }
                uint64_t v33 = [v31 countByEnumeratingWithState:&v160 objects:v187 count:16];
              }
              while (v33);
            }
            ++v21;
          }
          while (v21 != v20);
          uint64_t v36 = [obj countByEnumeratingWithState:&v168 objects:v189 count:16];
          uint64_t v20 = v36;
        }
        while (v36);
      }
      FigVideoCaptureSourcesDeactivateWithDevices((CFArrayRef)v119, (const __CFArray *)v117, a5);
      uint64_t DerivedStorage = (uint64_t)v122;
      if (a6)
      {
        long long v158 = 0u;
        long long v159 = 0u;
        long long v156 = 0u;
        long long v157 = 0u;
        id v37 = v122[82];
        uint64_t v38 = [v37 countByEnumeratingWithState:&v156 objects:v186 count:16];
        if (v38)
        {
          uint64_t v39 = v38;
          uint64_t v40 = *(void *)v157;
          do
          {
            for (uint64_t m = 0; m != v39; ++m)
            {
              if (*(void *)v157 != v40) {
                objc_enumerationMutation(v37);
              }
              uint64_t v42 = objc_msgSend(v122[82], "objectForKeyedSubscript:", *(void *)(*((void *)&v156 + 1) + 8 * m), v105);
              if (v42) {
                uint64_t v42 = (void *)v42[2];
              }
              [v42 invalidateForParallelGraphRebuild];
            }
            uint64_t v39 = [v37 countByEnumeratingWithState:&v156 objects:v186 count:16];
          }
          while (v39);
        }
      }

      v122[82] = 0;
    }

    unint64_t v10 = 0x1E4F1C000;
  }
  else
  {
    unsigned int v111 = 0;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 664), "movieFileSinkPipelines", v105), "count")
    || objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 664), "audioFileSinkPipelines"), "count"))
  {
    id v43 = objc_alloc_init(*(Class *)(v10 + 2632));
    long long v152 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v155 = 0u;
    uint64_t v44 = (void *)[*(id *)(DerivedStorage + 664) movieFileSinkPipelines];
    uint64_t v45 = [v44 countByEnumeratingWithState:&v152 objects:v185 count:16];
    if (v45)
    {
      uint64_t v46 = v45;
      uint64_t v47 = *(void *)v153;
      do
      {
        for (uint64_t n = 0; n != v46; ++n)
        {
          if (*(void *)v153 != v47) {
            objc_enumerationMutation(v44);
          }
          objc_msgSend(v43, "addObject:", objc_msgSend(*(id *)(*((void *)&v152 + 1) + 8 * n), "sinkID"));
        }
        uint64_t v46 = [v44 countByEnumeratingWithState:&v152 objects:v185 count:16];
      }
      while (v46);
    }
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    int v49 = (void *)[*(id *)(DerivedStorage + 664) audioFileSinkPipelines];
    uint64_t v50 = [v49 countByEnumeratingWithState:&v148 objects:v184 count:16];
    if (v50)
    {
      uint64_t v51 = v50;
      uint64_t v52 = *(void *)v149;
      do
      {
        for (iuint64_t i = 0; ii != v51; ++ii)
        {
          if (*(void *)v149 != v52) {
            objc_enumerationMutation(v49);
          }
          objc_msgSend(v43, "addObject:", objc_msgSend(*(id *)(*((void *)&v148 + 1) + 8 * ii), "sinkID"));
        }
        uint64_t v51 = [v49 countByEnumeratingWithState:&v148 objects:v184 count:16];
      }
      while (v51);
    }
    long long v146 = 0u;
    long long v147 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    uint64_t v54 = [v43 countByEnumeratingWithState:&v144 objects:v183 count:16];
    if (v54)
    {
      uint64_t v55 = v54;
      uint64_t v56 = *(void *)v145;
      CFAllocatorRef v57 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        for (juint64_t j = 0; jj != v55; ++jj)
        {
          if (*(void *)v145 != v56) {
            objc_enumerationMutation(v43);
          }
          uint64_t v59 = *(void *)(*((void *)&v144 + 1) + 8 * jj);
          unsigned int v60 = objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes](objc_msgSend(v122[83], "movieFileSinkPipelineWithSinkID:", v59)), "objectAtIndexedSubscript:", 0);
          if (!v60)
          {
            unsigned int v60 = (void *)-[FigCaptureAudioFileSinkPipeline audioFileSinkNode]([v122[83] audioFileSinkPipelineWithSinkID:v59]);
            if (!v60) {
              continue;
            }
          }
          uint64_t v61 = [v60 lastFileSize];
          if (v61)
          {
            uint64_t v62 = v61;
            if (!v122[94]) {
              v122[94] = (id)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
            }
            [v60 lastFileDuration];
            CFDictionaryRef v63 = CMTimeCopyAsDictionary(&time, v57);
            [v122[94] setObject:v63 forKeyedSubscript:v59];

            if (!v122[95]) {
              v122[95] = (id)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
            }
            objc_msgSend(v122[95], "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", v62), v59);
          }
        }
        uint64_t v55 = [v43 countByEnumeratingWithState:&v144 objects:v183 count:16];
      }
      while (v55);
    }

    uint64_t DerivedStorage = (uint64_t)v122;
  }
  long long v141 = 0u;
  long long v142 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  uint64_t v64 = (void *)[*(id *)(DerivedStorage + 664) previewSinkPipelines];
  uint64_t v65 = [v64 countByEnumeratingWithState:&v139 objects:v182 count:16];
  if (v65)
  {
    uint64_t v66 = v65;
    uint64_t v67 = *(void *)v140;
    do
    {
      for (kuint64_t k = 0; kk != v66; ++kk)
      {
        if (*(void *)v140 != v67) {
          objc_enumerationMutation(v64);
        }
        uint64_t v69 = *(void **)(*((void *)&v139 + 1) + 8 * kk);
        if ([v69 sinkID]
          && (!*(unsigned char *)(DerivedStorage + 404) || *(_DWORD *)(DerivedStorage + 400) != 1))
        {
          if ([v69 imageQueueSinkNode])
          {
            if (!*(void *)(DerivedStorage + 504)) {
              *(void *)(DerivedStorage + 504) = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
            }
            if (!*(void *)(DerivedStorage + 512)) {
              *(void *)(DerivedStorage + 512) = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
            }
            objc_msgSend(*(id *)(DerivedStorage + 512), "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v69, "imageQueueUpdatedNotificationSent")), objc_msgSend(v69, "sinkID"));
          }
          objc_msgSend(*(id *)(DerivedStorage + 504), "setObject:forKeyedSubscript:", objc_msgSend(v69, "imageQueueSinkNode"), objc_msgSend(v69, "sinkID"));
          if ((a6 & 1) == 0) {
            objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v69, "imageQueueSinkNode"), "input"), "connection"), "detach");
          }
        }
        [*(id *)(DerivedStorage + 472) containsObject:v69];
      }
      uint64_t v66 = [v64 countByEnumeratingWithState:&v139 objects:v182 count:16];
    }
    while (v66);
  }
  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  uint64_t v70 = (void *)[*(id *)(DerivedStorage + 664) stillImageSinkPipelineSessionStorages];
  uint64_t v71 = [v70 countByEnumeratingWithState:&v135 objects:v181 count:16];
  if (v71)
  {
    uint64_t v72 = v71;
    uint64_t v73 = *(void *)v136;
    do
    {
      for (muint64_t m = 0; mm != v72; ++mm)
      {
        if (*(void *)v136 != v73) {
          objc_enumerationMutation(v70);
        }
        double v75 = *(void **)(*((void *)&v135 + 1) + 8 * mm);
        uint64_t v76 = objc_msgSend((id)objc_msgSend(v75, "stillImageSinkPipeline"), "sinkID");
        if ([v75 preparedBracket] && !*(void *)(DerivedStorage + 528)) {
          *(void *)(DerivedStorage + 52_Block_object_dispose(&STACK[0x458], 8) = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
        }
        objc_msgSend(*(id *)(DerivedStorage + 528), "setObject:forKeyedSubscript:", objc_msgSend(v75, "preparedBracket"), v76);
        if ((a6 & 1) == 0) {
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v75, "stillImageSinkPipeline"), "stillImageCoordinatorNode"), "setStillImageCaptureStatusDelegate:", 0);
        }
      }
      uint64_t v72 = [v70 countByEnumeratingWithState:&v135 objects:v181 count:16];
    }
    while (v72);
  }
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  objCGFloat a = (id)[*(id *)(DerivedStorage + 664) movieFileSinkPipelines];
  uint64_t v118 = [obja countByEnumeratingWithState:&v131 objects:v180 count:16];
  if (v118)
  {
    uint64_t v116 = *(void *)v132;
    do
    {
      for (nuint64_t n = 0; nn != v118; ++nn)
      {
        if (*(void *)v132 != v116) {
          objc_enumerationMutation(obja);
        }
        double v78 = *(void **)(*((void *)&v131 + 1) + 8 * nn);
        uint64_t v79 = CMBaseObjectGetDerivedStorage();
        if (!_FigIsCurrentDispatchQueue())
        {
          uint64_t v107 = v109;
          LODWORD(v106) = 0;
          FigDebugAssert3();
        }
        if (objc_msgSend((id)objc_msgSend(v78, "pendingIrisRecordings", v106, v107), "count"))
        {
          uint64_t v120 = nn;
          os_unfair_lock_lock((os_unfair_lock_t)(v79 + 360));
          uint64_t v80 = *(void *)(v79 + 424);
          os_unfair_lock_unlock((os_unfair_lock_t)(v79 + 360));
          if (!v80) {
            mach_absolute_time();
          }
          memset(v191, 0, sizeof(v191));
          long long v81 = (void *)[v78 pendingIrisRecordings];
          uint64_t v82 = [v81 countByEnumeratingWithState:v191 objects:v192 count:16];
          if (v82)
          {
            uint64_t v83 = v82;
            uint64_t v84 = **(void **)&v191[1];
            do
            {
              for (uint64_t i1 = 0; i1 != v83; ++i1)
              {
                if (**(void **)&v191[1] != v84) {
                  objc_enumerationMutation(v81);
                }
                char v86 = *(void **)(*((void *)&v191[0] + 1) + 8 * i1);
                id v87 = (id)[v86 irisMovieInfo];
                if (!v87) {
                  id v87 = +[BWIrisMovieInfo emptyIrisMovieInfoWithFigCaptureMovieFileRecordingSettings:](BWIrisMovieInfo, "emptyIrisMovieInfoWithFigCaptureMovieFileRecordingSettings:", [v86 settings]);
                }
                [v86 enqueuedHostTime];
                [v87 setProcessingTimeInMilliseconds:(double)FigHostTimeToNanoseconds() / 1000000.0];
                captureSession_postNotificationsForIrisRequestCompletedWithError(a1, [v78 sinkID], v87, 4294951863);
              }
              uint64_t v83 = [v81 countByEnumeratingWithState:v191 objects:v192 count:16];
            }
            while (v83);
          }
          objc_msgSend((id)objc_msgSend(v78, "pendingIrisRecordings"), "removeAllObjects");
          uint64_t DerivedStorage = (uint64_t)v122;
          nuint64_t n = v120;
        }
        if ((a6 & 1) == 0)
        {
          long long v129 = 0u;
          long long v130 = 0u;
          long long v127 = 0u;
          long long v128 = 0u;
          double v88 = (void *)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)v78);
          uint64_t v89 = [v88 countByEnumeratingWithState:&v127 objects:v179 count:16];
          if (v89)
          {
            uint64_t v90 = v89;
            uint64_t v91 = *(void *)v128;
            do
            {
              for (uint64_t i2 = 0; i2 != v90; ++i2)
              {
                if (*(void *)v128 != v91) {
                  objc_enumerationMutation(v88);
                }
                [*(id *)(*((void *)&v127 + 1) + 8 * i2) setRecordingStatusDelegate:0];
              }
              uint64_t v90 = [v88 countByEnumeratingWithState:&v127 objects:v179 count:16];
            }
            while (v90);
          }
        }
      }
      uint64_t v118 = [obja countByEnumeratingWithState:&v131 objects:v180 count:16];
    }
    while (v118);
  }
  uint64_t v93 = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)(v93 + 360));
  if (notify_is_valid_token(*(_DWORD *)(v93 + 584)))
  {
    if (dword_1EB4C5110)
    {
      unsigned int v177 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      char v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v95 = v177;
      if (os_log_type_enabled(v94, type)) {
        unsigned int v96 = v95;
      }
      else {
        unsigned int v96 = v95 & 0xFFFFFFFE;
      }
      if (v96)
      {
        uint64_t v97 = *(void *)(v93 + 104);
        uint64_t v98 = *(void *)(v93 + 576);
        LODWORD(v191[0]) = 136315650;
        *(void *)((char *)v191 + 4) = "captureSession_stopMonitoringForFigAssetWriterWritingVideoNotification";
        WORD6(v191[0]) = 2114;
        *(void *)((char *)v191 + 14) = v97;
        WORD3(v191[1]) = 2112;
        *((void *)&v191[1] + 1) = v98;
        LODWORD(v107) = 32;
        uint64_t v106 = v191;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }

    *(void *)(v93 + 576) = 0;
    notify_cancel(*(_DWORD *)(v93 + 584));
    *(_DWORD *)(v93 + 584) = -1;
  }
  *(void *)(v93 + 592) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v93 + 360));
  objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedContinuityDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedContinuityDisplayLayoutMonitor"), "removeLayoutObserver:", *(void *)(DerivedStorage + 712));

  *(void *)(DerivedStorage + 664) = 0;
  *(void *)(DerivedStorage + 68_Block_object_dispose(&STACK[0x458], 8) = 0;
  *(unsigned char *)(DerivedStorage + 696) = 0;

  *(void *)(DerivedStorage + 472) = 0;
  *(void *)(DerivedStorage + 672) = 0;

  *(void *)(DerivedStorage + 680) = 0;
  *(void *)(DerivedStorage + 616) = 0;

  *(void *)(DerivedStorage + 632) = 0;
  captureSession_stopMonitoringAudioPlaybackAndRouteChangeNotifications();
  if ((a4 & 1) == 0)
  {
    if ([*(id *)(DerivedStorage + 776) count])
    {
      long long v125 = 0u;
      long long v126 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      uint64_t v99 = (void *)[*(id *)(DerivedStorage + 776) allKeys];
      uint64_t v100 = [v99 countByEnumeratingWithState:&v123 objects:v178 count:16];
      if (v100)
      {
        uint64_t v101 = v100;
        uint64_t v102 = *(void *)v124;
        do
        {
          for (uint64_t i3 = 0; i3 != v101; ++i3)
          {
            if (*(void *)v124 != v102) {
              objc_enumerationMutation(v99);
            }
            uint64_t v104 = *(void *)(*((void *)&v123 + 1) + 8 * i3);
            objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", objc_msgSend(*(id *)(DerivedStorage + 776), "objectForKeyedSubscript:", v104, v106, v107), *(unsigned int *)(DerivedStorage + 768), a2, v111);
            [*(id *)(DerivedStorage + 776) setObject:0 forKeyedSubscript:v104];
          }
          uint64_t v101 = [v99 countByEnumeratingWithState:&v123 objects:v178 count:16];
        }
        while (v101);
      }
    }
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
}

void captureSession_stopMonitoringAudioPlaybackAndRouteChangeNotifications()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v1 = DerivedStorage, *DerivedStorage))
  {
    FigDebugAssert3();
  }
  else if (FigCaptureAudiomxdSupportEnabled())
  {
    if (!_FigIsCurrentDispatchQueue()) {
      FigDebugAssert3();
    }
    if (*((void *)v1 + 41))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *((void *)v1 + 41));

      *((void *)v1 + 41) = 0;
    }
    if (*((void *)v1 + 42))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *((void *)v1 + 42));

      *((void *)v1 + 42) = 0;
    }
  }
}

void __captureSession_startObservingInvalidAudioRecordingState_block_invoke(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (dword_1EB4C5110)
  {
    LODWORD(v40) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 200));
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 200));
  *(void *)(*(void *)(a1 + 32) + 200) = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v37 = v1;
    LODWORD(v36) = 0;
    FigDebugAssert3();
  }
  uint64_t v38 = DerivedStorage;
  if (objc_msgSend(*(id *)(DerivedStorage + 88), "isEqualToString:", 0x1EFA44100, v36, v37))
  {
    uint64_t v5 = (void *)[MEMORY[0x1E4F74F68] sharedInstance];
    long long v6 = (void *)[v5 attributeForKey:*MEMORY[0x1E4F74CC0]];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      FigDebugAssert3();
      return;
    }
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v40 objects:v47 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v41;
      unint64_t v10 = (os_unfair_lock_s *)(v38 + 84);
      uint64_t v11 = (_OWORD *)(v38 + 20);
      uint64_t v12 = (os_unfair_lock_s *)(v38 + 360);
LABEL_9:
      uint64_t v13 = 0;
      while (1)
      {
        if (*(void *)v41 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v14 = *(void **)(*((void *)&v40 + 1) + 8 * v13);
        long long v44 = 0u;
        long long v45 = 0u;
        objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", *MEMORY[0x1E4F74CB8]), "getBytes:length:", &v44, 32);
        *(_OWORD *)os_log_type_t type = v44;
        *(_OWORD *)&os_log_type_t type[16] = v45;
        FigCaptureGetPIDFromAuditToken(type);
        os_unfair_lock_lock(v10);
        long long v15 = *(_OWORD *)(v38 + 36);
        *(_OWORD *)os_log_type_t type = *v11;
        *(_OWORD *)&os_log_type_t type[16] = v15;
        if (FigCaptureAuditTokenIsValid((uint64_t)type))
        {
          long long v16 = *v11;
          long long v17 = *(_OWORD *)(v38 + 36);
        }
        else
        {
          long long v16 = *(_OWORD *)(v38 + 52);
          long long v17 = *(_OWORD *)(v38 + 68);
        }
        *(_OWORD *)os_log_type_t type = v16;
        *(_OWORD *)&os_log_type_t type[16] = v17;
        v39[0] = v44;
        v39[1] = v45;
        char v18 = FigCaptureAuditTokenProcessesAreEqual((long long *)type, v39);
        os_unfair_lock_unlock(v10);
        if (v18)
        {
          os_unfair_lock_lock(v12);
          int v19 = *(_DWORD *)(v38 + 408);
          os_unfair_lock_unlock(v12);
          if (!v19) {
            break;
          }
        }
        if (v8 == ++v13)
        {
          uint64_t v8 = [v6 countByEnumeratingWithState:&v40 objects:v47 count:16];
          if (v8) {
            goto LABEL_9;
          }
          return;
        }
      }
      LODWORD(v39[0]) = 0;
      uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v21 = v39[0];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = v21 & 0xFFFFFFFE;
      }
      if (v22)
      {
        uint64_t v23 = *(void *)(v38 + 104);
        *(_DWORD *)os_log_type_t type = 136315394;
        *(void *)&os_log_type_t type[4] = "captureSession_checkForInvalidAudioRecordingState";
        *(_WORD *)&type[12] = 2114;
        *(void *)&type[14] = v23;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFStringRef v24 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
      CFStringRef v25 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
      CFPropertyListRef v26 = (id)CFPreferencesCopyValue(@"LastShownInvalidCameraAppMicRecordingStateTTRPromptDate", @"com.apple.cameracapture.volatile", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
      unsigned int v27 = (const void *)[MEMORY[0x1E4F1C9C8] date];
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9A8], "currentCalendar"), "isDate:inSameDayAsDate:", v26, v27))
      {
        LODWORD(v39[0]) = 0;
        int v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v31 = v39[0];
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v32 = v31;
        }
        else {
          unsigned int v32 = v31 & 0xFFFFFFFE;
        }
        if (!v32) {
          goto LABEL_41;
        }
        *(_DWORD *)os_log_type_t type = 136315138;
        *(void *)&os_log_type_t type[4] = "captureSession_checkForInvalidAudioRecordingState";
      }
      else
      {
        uint64_t v28 = (id)CFPreferencesCopyValue(@"LastShownInvalidCameraAppMicRecordingStateTTRPromptBuildVersion", @"com.apple.cameracapture.volatile", v24, v25);
        id v29 = (id)MGCopyAnswer();
        if (![v28 isEqualToString:v29])
        {
          FigCapturePromptOpenTapToRadar(@"Invalid mic recording state found for Camera.app. Please file a radar.", @"Invalid Camera.app mic recording state", @"Invalid Camera.app mic recording state found", 1, 6, 6, 0.0);
          CFPreferencesSetValue(@"LastShownInvalidCameraAppMicRecordingStateTTRPromptDate", v27, @"com.apple.cameracapture.volatile", v24, v25);
          CFPreferencesSetValue(@"LastShownInvalidCameraAppMicRecordingStateTTRPromptBuildVersion", v29, @"com.apple.cameracapture.volatile", v24, v25);
          return;
        }
        LODWORD(v39[0]) = 0;
        uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v34 = v39[0];
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v35 = v34;
        }
        else {
          unsigned int v35 = v34 & 0xFFFFFFFE;
        }
        if (!v35) {
          goto LABEL_41;
        }
        *(_DWORD *)os_log_type_t type = 136315138;
        *(void *)&os_log_type_t type[4] = "captureSession_checkForInvalidAudioRecordingState";
      }
      _os_log_send_and_compose_impl();
LABEL_41:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t __captureSession_startAVConferenceBackgroundRunningTrackingTimerIfNeeded_block_invoke()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v5 = v0;
    LODWORD(v4) = 0;
    FigDebugAssert3();
  }
  uint64_t result = objc_msgSend(*(id *)(DerivedStorage + 120), "applicationState", v4, v5);
  if (result == 1)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t cs_notificationPayloadWithConfigurationIDAndErrorStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F1C9E8];
  uint64_t v4 = [NSNumber numberWithLongLong:a1];
  if (a2) {
    uint64_t v5 = [NSNumber numberWithInt:a2];
  }
  else {
    uint64_t v5 = 0;
  }
  return objc_msgSend(v3, "dictionaryWithObjectsAndKeys:", v4, @"ConfigurationID", v5, @"ErrorStatus", 0);
}

uint64_t cs_isTrueVideoCaptureEnabled(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v1 = objc_msgSend(a1, "parsedMovieFileSinkConfigurations", 0);
  uint64_t result = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v7;
    while (2)
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * v5), "videoConnectionConfiguration"), "movieFileSinkConfiguration"), "trueVideoCaptureEnabled"))return 1; {
        ++v5;
        }
      }
      while (v3 != v5);
      uint64_t result = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      uint64_t v3 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

void captureSession_stopGraph(const void *a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  uint64_t v160 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    unsigned int v159 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!*(unsigned char *)(DerivedStorage + 649))
  {
    captureSession_waitForGraphToStart((uint64_t)a1, 1);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
    int v13 = *(_DWORD *)(DerivedStorage + 408);
    locuint64_t k = (os_unfair_lock_s *)(DerivedStorage + 360);
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
    int v103 = v13;
    if (v13 == 2)
    {
      long long v156 = 0u;
      long long v157 = 0u;
      long long v154 = 0u;
      long long v155 = 0u;
      uint64_t v14 = (void *)[*(id *)(DerivedStorage + 664) cameraSourcePipelines];
      uint64_t v15 = [v14 countByEnumeratingWithState:&v154 objects:v169 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v155;
        do
        {
          for (uint64_t i = 0; i != v16; ++i)
          {
            if (*(void *)v155 != v17) {
              objc_enumerationMutation(v14);
            }
            [(id)-[FigCaptureCameraSourcePipeline captureDevice](*(void *)(*((void *)&v154 + 1) + 8 * i)) setStoppingForTrueVideoTransition:a3];
          }
          uint64_t v16 = [v14 countByEnumeratingWithState:&v154 objects:v169 count:16];
        }
        while (v16);
      }
      long long v152 = 0u;
      long long v153 = 0u;
      long long v150 = 0u;
      long long v151 = 0u;
      int v19 = objc_msgSend(*(id *)(DerivedStorage + 664), "previewSinkPipelines", v101, v102);
      uint64_t v20 = [v19 countByEnumeratingWithState:&v150 objects:v168 count:16];
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = *(void *)v151;
        do
        {
          for (uint64_t j = 0; j != v21; ++j)
          {
            if (*(void *)v151 != v22) {
              objc_enumerationMutation(v19);
            }
            [*(id *)(*((void *)&v150 + 1) + 8 * j) setStoppingForModeSwitch:1 parallelGraphRebuildEnabled:a3 ispFastSwitchEnabled:a4 smartStyleRenderingEnabledInTrueVideoGraph:a7];
          }
          uint64_t v21 = [v19 countByEnumeratingWithState:&v150 objects:v168 count:16];
        }
        while (v21);
      }
    }
    if (a5)
    {
      if ((a4 & 1) == 0)
      {
        long long v148 = 0u;
        long long v149 = 0u;
        long long v146 = 0u;
        long long v147 = 0u;
        CFStringRef v24 = *(void **)(DerivedStorage + 656);
        uint64_t v25 = [v24 countByEnumeratingWithState:&v146 objects:v167 count:16];
        if (v25)
        {
          uint64_t v26 = v25;
          uint64_t v27 = *(void *)v147;
          do
          {
            for (uint64_t k = 0; k != v26; ++k)
            {
              if (*(void *)v147 != v27) {
                objc_enumerationMutation(v24);
              }
              id v29 = objc_msgSend(*(id *)(DerivedStorage + 656), "objectForKeyedSubscript:", *(void *)(*((void *)&v146 + 1) + 8 * k), v101);
              if (v29) {
                id v29 = (void *)v29[2];
              }
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v29, "captureStream"), "stream"), "setWorkaroundToTurnTorchOnWhenStreamStartsIfNecessary:", 1);
            }
            uint64_t v26 = [v24 countByEnumeratingWithState:&v146 objects:v167 count:16];
          }
          while (v26);
        }
      }
      long long v144 = 0u;
      long long v145 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      int v30 = objc_msgSend(*(id *)(DerivedStorage + 664), "stillImageSinkPipelineSessionStorages", v101);
      uint64_t v31 = [v30 countByEnumeratingWithState:&v142 objects:v166 count:16];
      if (v31)
      {
        uint64_t v32 = v31;
        uint64_t v33 = *(void *)v143;
        do
        {
          for (uint64_t m = 0; m != v32; ++m)
          {
            if (*(void *)v143 != v33) {
              objc_enumerationMutation(v30);
            }
            unsigned int v35 = *(void **)(*((void *)&v142 + 1) + 8 * m);
            if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v35, "stillImageSinkPipeline"), "compressedShotBufferNode"), "compressionResourcesAllocated"))objc_msgSend(*(id *)(DerivedStorage + 632), "setGraphStateTransitionTimeoutSeconds:", 30); {
            objc_msgSend((id)objc_msgSend((id)objc_msgSend(v35, "stillImageSinkPipeline"), "compressedShotBufferNode"), "flushAndWaitUntilThreshold:", a6);
            }
          }
          uint64_t v32 = [v30 countByEnumeratingWithState:&v142 objects:v166 count:16];
        }
        while (v32);
      }
    }
    if (a2 == -16403)
    {
      long long v140 = 0u;
      long long v141 = 0u;
      long long v138 = 0u;
      long long v139 = 0u;
      uint64_t v36 = (void *)[*(id *)(DerivedStorage + 664) previewSinkPipelines];
      uint64_t v37 = [v36 countByEnumeratingWithState:&v138 objects:v165 count:16];
      if (v37)
      {
        uint64_t v38 = v37;
        uint64_t v39 = *(void *)v139;
        do
        {
          for (uint64_t n = 0; n != v38; ++n)
          {
            if (*(void *)v139 != v39) {
              objc_enumerationMutation(v36);
            }
            objc_msgSend(*(id *)(*((void *)&v138 + 1) + 8 * n), "setStoppingForClientBackgrounded:", 1, v101);
          }
          uint64_t v38 = [v36 countByEnumeratingWithState:&v138 objects:v165 count:16];
        }
        while (v38);
      }
    }
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    obuint64_t j = (id)objc_msgSend(*(id *)(DerivedStorage + 664), "movieFileSinkPipelines", v101);
    uint64_t v109 = DerivedStorage;
    uint64_t v111 = [obj countByEnumeratingWithState:&v134 objects:v164 count:16];
    if (v111)
    {
      uint64_t v108 = *(void *)v135;
      unint64_t v41 = 0x1E4F1C000uLL;
      int v114 = a1;
      do
      {
        uint64_t v42 = 0;
        do
        {
          if (*(void *)v135 != v108) {
            objc_enumerationMutation(obj);
          }
          uint64_t v112 = v42;
          long long v43 = *(void **)(*((void *)&v134 + 1) + 8 * v42);
          long long v130 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v133 = 0u;
          long long v44 = (void *)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)v43);
          uint64_t v116 = [v44 countByEnumeratingWithState:&v130 objects:v163 count:16];
          if (v116)
          {
            uint64_t v45 = *(void *)v131;
            uint64_t v115 = *(void *)v131;
            do
            {
              for (iuint64_t i = 0; ii != v116; ++ii)
              {
                if (*(void *)v131 != v45) {
                  objc_enumerationMutation(v44);
                }
                uint64_t v47 = *(void **)(*((void *)&v130 + 1) + 8 * ii);
                if ([v47 irisMovieProcessingSuspended])
                {
                  [v47 setIrisMovieProcessingSuspended:0];
                  uint64_t v48 = [v43 sinkID];
                  *(void *)&v171[0] = @"SectionID";
                  v170[0] = v48;
                  captureSession_postNotificationWithPayload(a1, @"DidResumeIrisMovieProcessing", (const void *)[*(id *)(v41 + 2536) dictionaryWithObjects:v170 forKeys:v171 count:1]);
                }
                if (-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)v43))
                {
                  int v49 = (void *)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)v43);
                  if (v49)
                  {
                    [v49 endIrisMovieCaptureTime];
                    if ((v128 & 0x100000000) != 0)
                    {
                      uint64_t v50 = [v43 sinkID];
                      uint64_t v51 = CMBaseObjectGetDerivedStorage();
                      if (!_FigIsCurrentDispatchQueue())
                      {
                        uint64_t v102 = v106;
                        LODWORD(v101) = 0;
                        FigDebugAssert3();
                      }
                      uint64_t v52 = (os_unfair_lock_s *)(v51 + 360);
                      os_unfair_lock_lock((os_unfair_lock_t)(v51 + 360));
                      id v53 = *(id *)(v51 + 448);
                      os_unfair_lock_unlock(v52);
                      long long v172 = 0u;
                      long long v173 = 0u;
                      memset(v171, 0, sizeof(v171));
                      uint64_t v54 = (void *)[v53 connectionConfigurations];
                      uint64_t v55 = [v54 countByEnumeratingWithState:v171 objects:v170 count:16];
                      if (v55)
                      {
                        uint64_t v56 = v55;
                        uint64_t v57 = **(void **)&v171[1];
LABEL_68:
                        uint64_t v58 = v44;
                        uint64_t v59 = 0;
                        while (1)
                        {
                          if (**(void **)&v171[1] != v57) {
                            objc_enumerationMutation(v54);
                          }
                          unsigned int v60 = objc_msgSend(*(id *)(*((void *)&v171[0] + 1) + 8 * v59), "irisSinkConfiguration", v101, v102);
                          if (objc_msgSend((id)objc_msgSend(v60, "sinkID"), "isEqual:", v50)) {
                            break;
                          }
                          if (v56 == ++v59)
                          {
                            uint64_t v56 = [v54 countByEnumeratingWithState:v171 objects:v170 count:16];
                            long long v44 = v58;
                            if (v56) {
                              goto LABEL_68;
                            }
                            goto LABEL_74;
                          }
                        }
                        char v61 = [v60 preservesIrisMovieCaptureSuspendedOnSessionStop];

                        a1 = v114;
                        unint64_t v41 = 0x1E4F1C000uLL;
                        long long v44 = v58;
                        uint64_t v45 = v115;
                        if (v61) {
                          continue;
                        }
                      }
                      else
                      {
LABEL_74:

                        a1 = v114;
                        unint64_t v41 = 0x1E4F1C000;
                        uint64_t v45 = v115;
                      }
                      captureSession_updateInflightConfigurationWithIrisSinkPropertyForKey((uint64_t)a1, objc_msgSend(v43, "sinkID", v101), @"BeginIrisMovieCaptureHostTime", 0);
                      uint64_t v62 = [v43 sinkID];
                      *(void *)&v171[0] = @"SectionID";
                      v170[0] = v62;
                      captureSession_postNotificationWithPayload(a1, @"DidResumeIrisMovieCapture", (const void *)[*(id *)(v41 + 2536) dictionaryWithObjects:v170 forKeys:v171 count:1]);
                    }
                  }
                  else
                  {
                    uint64_t v127 = 0;
                    uint64_t v128 = 0;
                    uint64_t v129 = 0;
                  }
                }
              }
              uint64_t v116 = [v44 countByEnumeratingWithState:&v130 objects:v163 count:16];
            }
            while (v116);
          }
          if (a3)
          {
            mach_absolute_time();
            CFDictionaryRef v63 = (void *)-[FigCaptureMovieFileSinkPipeline fileCoordinatorNode]((uint64_t)v43);
            LODWORD(v64) = 1036831949;
            [v63 waitForRecordingToStopWithTimeout:v64];
            mach_absolute_time();
            float v65 = (float)(FigHostTimeToNanoseconds() / 1000) / 1000000.0;
            uint64_t v66 = (void *)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v43);
            *(float *)&double v67 = v65;
            [v66 setDurationAlreadyWaitedForRecordingStop:v67];
          }
          uint64_t v42 = v112 + 1;
          uint64_t DerivedStorage = v109;
        }
        while (v112 + 1 != v111);
        uint64_t v111 = [obj countByEnumeratingWithState:&v134 objects:v164 count:16];
      }
      while (v111);
    }
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    uint64_t v68 = (void *)[*(id *)(DerivedStorage + 664) stillImageSinkPipelineSessionStorages];
    uint64_t v69 = [v68 countByEnumeratingWithState:&v123 objects:v162 count:16];
    if (v69)
    {
      uint64_t v70 = v69;
      uint64_t v71 = *(void *)v124;
      do
      {
        for (juint64_t j = 0; jj != v70; ++jj)
        {
          if (*(void *)v124 != v71) {
            objc_enumerationMutation(v68);
          }
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v123 + 1) + 8 * jj), "stillImageSinkPipeline"), "stillImageCoordinatorNode"), "willStopGraph:", a2 == -16407);
        }
        uint64_t v70 = [v68 countByEnumeratingWithState:&v123 objects:v162 count:16];
      }
      while (v70);
    }
    uint64_t v73 = *(void **)(DerivedStorage + 632);
    if (!a3) {
      goto LABEL_111;
    }
    if (a5 && !*(void *)(DerivedStorage + 728)) {
      *(void *)(DerivedStorage + 72_Block_object_dispose(&STACK[0x458], 8) = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 632), "memoryPool"), "newFlushAssertion:", @"parallelGraphRebuildFlushAssertion");
    }
    mach_absolute_time();
    if (dword_1EB4C5110)
    {
      unsigned int v159 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      id v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v75 = v159;
      if (os_log_type_enabled(v74, type)) {
        unsigned int v76 = v75;
      }
      else {
        unsigned int v76 = v75 & 0xFFFFFFFE;
      }
      if (v76)
      {
        uint64_t v77 = *(void *)(DerivedStorage + 104);
        LODWORD(v171[0]) = 136315394;
        *(void *)((char *)v171 + 4) = "captureSession_stopGraph";
        WORD6(v171[0]) = 2114;
        *(void *)((char *)v171 + 14) = v77;
        LODWORD(v102) = 22;
        uint64_t v101 = v171;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    objc_msgSend(v73, "stopSources:", &v160, v101, v102);
    mach_absolute_time();
    uint64_t v78 = FigHostTimeToNanoseconds();
    if (dword_1EB4C5110)
    {
      uint64_t v79 = v78;
      unsigned int v159 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v81 = v159;
      if (os_log_type_enabled(v80, type)) {
        unsigned int v82 = v81;
      }
      else {
        unsigned int v82 = v81 & 0xFFFFFFFE;
      }
      if (v82)
      {
        uint64_t v83 = *(void *)(DerivedStorage + 104);
        LODWORD(v171[0]) = 136315650;
        *(void *)((char *)v171 + 4) = "captureSession_stopGraph";
        WORD6(v171[0]) = 2114;
        *(void *)((char *)v171 + 14) = v83;
        WORD3(v171[1]) = 2048;
        *((double *)&v171[1] + 1) = (float)((float)(v79 / 1000) / 1000.0);
        LODWORD(v102) = 32;
        uint64_t v101 = v171;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v103 == 2)
    {
      char v84 = 0;
    }
    else
    {
LABEL_111:
      char v84 = a3 ^ 1;
      os_unfair_lock_lock(lock);
      id v85 = (id)objc_msgSend(*(id *)(DerivedStorage + 520), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 520), "allKeys"), "firstObject"));
      [*(id *)(DerivedStorage + 520) removeAllObjects];
      os_unfair_lock_unlock(lock);
      if (v85)
      {
        objc_msgSend((id)objc_msgSend(v85, "previewStitcherNode"), "markDelayedEndOfData");

        if (dword_1EB4C5110)
        {
          unsigned int v159 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          char v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v87 = v159;
          if (os_log_type_enabled(v86, type)) {
            unsigned int v88 = v87;
          }
          else {
            unsigned int v88 = v87 & 0xFFFFFFFE;
          }
          if (v88)
          {
            uint64_t v89 = *(void *)(v109 + 104);
            LODWORD(v171[0]) = 136316162;
            *(void *)((char *)v171 + 4) = "captureSession_stopGraph";
            WORD6(v171[0]) = 2114;
            *(void *)((char *)v171 + 14) = v89;
            WORD3(v171[1]) = 2048;
            *((void *)&v171[1] + 1) = v85;
            LOWORD(v172) = 1024;
            *(_DWORD *)((char *)&v172 + 2) = v103 == 2;
            WORD3(v172) = 1024;
            DWORD2(v172) = a3;
            LODWORD(v102) = 44;
            uint64_t v101 = v171;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t DerivedStorage = v109;
        }
      }
    }
    if ((v84 & 1) != 0 || !a5)
    {
      uint64_t v90 = *(void *)(DerivedStorage + 728);
      *(void *)(DerivedStorage + 72_Block_object_dispose(&STACK[0x458], 8) = 0;
    }
    else
    {
      uint64_t v90 = 0;
    }
    uint64_t v91 = *(void *)(DerivedStorage + 712);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __captureSession_stopGraph_block_invoke;
    block[3] = &unk_1E5C289C8;
    char v122 = a3;
    block[4] = v73;
    void block[5] = v91;
    void block[6] = v90;
    if (a3) {
      dispatch_async(*(dispatch_queue_t *)(DerivedStorage + 144), block);
    }
    else {
      __captureSession_stopGraph_block_invoke((uint64_t)block);
    }
  }
  *(unsigned char *)(DerivedStorage + 64_Block_object_dispose(&STACK[0x458], 8) = 0;
  *(_WORD *)(DerivedStorage + 650) = 0;
  *(unsigned char *)(DerivedStorage + 652) = 0;
  if (*(void *)(DerivedStorage + 704))
  {
    uint64_t v92 = mach_absolute_time();
    uint64_t v93 = *(void *)(DerivedStorage + 704);
    long long v117 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    char v94 = (void *)[*(id *)(DerivedStorage + 664) cameraSourcePipelines];
    uint64_t v95 = [v94 countByEnumeratingWithState:&v117 objects:v161 count:16];
    if (v95)
    {
      uint64_t v96 = v95;
      uint64_t v97 = v92 - v93;
      uint64_t v98 = *(void *)v118;
      do
      {
        for (kuint64_t k = 0; kk != v96; ++kk)
        {
          if (*(void *)v118 != v98) {
            objc_enumerationMutation(v94);
          }
          -[FigCaptureCameraSourcePipeline logCameraStreamingInformationToAggd:applicationID:](*(void *)(*((void *)&v117 + 1) + 8 * kk), v97, objc_msgSend(*(id *)(DerivedStorage + 632), "clientApplicationID", v101, v102));
        }
        uint64_t v96 = [v94 countByEnumeratingWithState:&v117 objects:v161 count:16];
      }
      while (v96);
    }
    *(void *)(DerivedStorage + 704) = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
  uint64_t v100 = *(void **)(DerivedStorage + 464);
  *(void *)(DerivedStorage + 464) = 0;
  *(unsigned char *)(DerivedStorage + 537) = 0;
  *(_WORD *)(DerivedStorage + 539) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
}

void __captureSession_updateGraphConfiguration_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    if (dword_1EB4C5110)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    captureSession_makeCommittedConfigurationLive(*(const void **)(a1 + 32));
  }
}

void __captureSession_stopGraph_block_invoke(uint64_t a1)
{
  v5[20] = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  mach_absolute_time();
  [*(id *)(a1 + 32) stop:v5];
  if (*(unsigned char *)(a1 + 56))
  {
    mach_absolute_time();
    FigHostTimeToNanoseconds();
    if (dword_1EB4C5110)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4) {
    objc_setProperty_nonatomic(v4, v2, 0, 16);
  }
}

void __captureSession_activateCameraCaptureSourcesAndCreateDevices_block_invoke(uint64_t a1, int a2, int a3, int a4)
{
  long long v8 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v9 = [*(id *)(a1 + 32) referencedObject];
  if (v9 && *(_DWORD *)(*(void *)(a1 + 40) + 768) == a2)
  {
    unint64_t v10 = (const void *)v9;
    if (dword_1EB4C5110)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    switch(a4)
    {
      case 2:
        if ((a3 & 1) == 0)
        {
          int v13 = (unsigned char *)(*(void *)(a1 + 40) + 372);
          uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v15 = 0;
          uint64_t v12 = 4294950890;
          goto LABEL_13;
        }
        uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        break;
      case 1:
        uint64_t v12 = 0;
        int v13 = (unsigned char *)(*(void *)(a1 + 40) + 382);
        goto LABEL_12;
      case 0:
        uint64_t v12 = 0;
        int v13 = (unsigned char *)(*(void *)(a1 + 40) + 380);
LABEL_12:
        int v15 = a3 ^ 1;
LABEL_13:
        captureSession_updateSessionStateWithNewInputCondition(v10, v13, v15, v12, 0);
        break;
    }
  }
}

uint64_t __captureSession_buildMicSourcePipeline_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 312) = 0;
  unint64_t v2 = *(void **)(v1 + 256);
  if (v2)
  {
    uint64_t v4 = 0;
    return [v2 setMXSessionProperty:*MEMORY[0x1E4F766F0] value:MEMORY[0x1E4F1CC28] error:&v4];
  }
  else
  {
    uint64_t result = *(void *)(v1 + 264);
    if (result)
    {
      return CMSessionSetProperty();
    }
  }
  return result;
}

void __captureSession_startObservingForAudiomxdDeath_block_invoke(uint64_t a1)
{
  unint64_t v2 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v3 = [*(id *)(a1 + 32) referencedObject];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    uint64_t v5 = DerivedStorage;
    captureSession_stopMonitoringAudioPlaybackAndRouteChangeNotifications();
    if (!*(unsigned char *)v5)
    {
      if (*(void *)(v5 + 256))
      {
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 3221225472;
        v7[2] = __captureSession_startObservingForAudiomxdDeath_block_invoke_2;
        v7[3] = &__block_descriptor_56_e5_v8__0l;
        uint64_t v6 = *(void *)(a1 + 40);
        v7[4] = v5;
        v7[5] = v6;
        void v7[6] = v3;
        captureSession_performBlockOnWorkerQueueSynchronously(v3, (uint64_t)v7);
      }
    }
  }
}

void __captureSession_startObservingForAudiomxdDeath_block_invoke_2(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    captureSession_updateSessionStateWithNewInputCondition(*(const void **)(a1 + 48), (unsigned char *)(*(void *)(a1 + 40) + 372), 0, 0, 0);
    [*(id *)(*(void *)(a1 + 32) + 256) removeObserverForType:1 observer:*(void *)(*(void *)(a1 + 32) + 320) name:*MEMORY[0x1E4F4E830]];

    *(void *)(*(void *)(a1 + 32) + 320) = 0;
  }
}

void __captureSession_startObservingForAudiomxdDeath_block_invoke_783(uint64_t a1)
{
  unint64_t v2 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v3 = [*(id *)(a1 + 32) referencedObject];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3 && !*(unsigned char *)DerivedStorage && *(void *)(DerivedStorage + 256))
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __captureSession_startObservingForAudiomxdDeath_block_invoke_2_784;
    void v6[3] = &__block_descriptor_56_e5_v8__0l;
    uint64_t v5 = *(void *)(a1 + 40);
    void v6[4] = DerivedStorage;
    void v6[5] = v5;
    v6[6] = v3;
    captureSession_performBlockOnWorkerQueueSynchronously(v3, (uint64_t)v6);
  }
}

void __captureSession_startObservingForAudiomxdDeath_block_invoke_2_784(uint64_t a1)
{
  v6[16] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)v1)
  {
    if (dword_1EB4C5110)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v1 = *(void *)(a1 + 32);
    }

    *(void *)(*(void *)(a1 + 32) + 256) = 0;
    uint64_t v4 = *(const void **)(a1 + 48);
    uint64_t v5 = @"ErrorStatus";
    v6[0] = [NSNumber numberWithInt:4294951751];
    captureSession_postNotificationWithPayload(v4, @"DidStopRunning", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v6 forKeys:&v5 count:1]);
  }
}

unint64_t stillImageSinkPipelineSessionStorage_stillImageOutputDimensionsForSettings(void *a1, void *a2)
{
  LODWORD(v4) = [a2 outputWidth];
  uint64_t v5 = [a2 outputHeight];
  [a2 videoStabilizationOverscanCropMultiplier];
  float v7 = v6;
  uint64_t v8 = [a1 cameraSourcePipeline];
  uint64_t v9 = (void *)[(id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v8) highResStillImageDimensions];
  id v10 = +[FigCaptureSourceFormatDimensions identifySourceFormatDimensionsFromDimensions:v4 | (unint64_t)(v5 << 32) availableHighResStillImageDimensions:v9];
  if (v7 != 0.0 && [v10 flavor])
  {
    unint64_t v11 = objc_msgSend((id)objc_msgSend(v9, "firstObject"), "dimensions");
    uint64_t v5 = HIDWORD(v11);
    LODWORD(v4) = v11;
  }
  if (!(v4 | v5))
  {
    unint64_t v4 = -[FigCaptureCameraSourcePipeline firmwareStillImageDimensionsAfterOverscanCropping](v8);
    if (FigCaptureVideoDimensionsAreValid(v4))
    {
      uint64_t v5 = HIDWORD(v4);
    }
    else
    {
      uint64_t v5 = -[FigCaptureCameraSourcePipeline stillImageOutputVideoFormat](v8);
      LODWORD(v4) = [(id)v5 width];
      LODWORD(v5) = [(id)v5 height];
    }
    if (!FigCaptureVideoDimensionsAreValid(v4 | ((unint64_t)v5 << 32)))
    {
      unint64_t v12 = [(id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v8) defaultHighResStillImageDimensions];
      LODWORD(v4) = v12;
      uint64_t v5 = HIDWORD(v12);
    }
    if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "stillImageConnectionConfiguration"), "sourceConfiguration"), "cinematicFramingEnabled") & 1) != 0|| objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "stillImageConnectionConfiguration"), "sourceConfiguration"), "manualCinematicFramingEnabled"))
    {
      int v13 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v8), "highResStillImageDimensions"), "firstObject");
      if (v13) {
        unint64_t v14 = [v13 dimensions];
      }
      else {
        unint64_t v14 = [(id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v8) cinematicFramingOutputDimensions];
      }
      LODWORD(v4) = v14;
      uint64_t v5 = HIDWORD(v14);
    }
    else
    {
      uint64_t v27 = -[FigCaptureCameraSourcePipeline captureSource](v8);
      if (csp_gdcExpandsImageDimensions(v27))
      {
        unint64_t v28 = [(id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v8) defaultHighResStillImageDimensions];
        uint64_t v5 = HIDWORD(v28);
        LODWORD(v4) = v28;
      }
    }
  }
  int v15 = [a2 squareCropEnabled];
  BOOL v16 = v4 != v5;
  if ((int)v4 >= (int)v5) {
    unsigned int v17 = v5;
  }
  else {
    unsigned int v17 = v4;
  }
  if ((v15 & v16) != 0) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = v5;
  }
  if ((v15 & v16) != 0) {
    unint64_t v4 = v17;
  }
  else {
    unint64_t v4 = v4;
  }
  [(id)-[FigCaptureCameraSourcePipeline captureDevice](v8) zoomFactor];
  int64_t v20 = BWDimensionsConformingToZoomWithoutUpscalingIfRequired(v4 | (v18 << 32), a2, v19);
  unsigned int v21 = v20;
  unint64_t v22 = HIDWORD(v20);
  if (v7 != 0.0)
  {
    FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)v20, v20 >> 32, (1.0 - v7) * 0.5, (1.0 - v7) * 0.5, v7, v7, (double)(int)v20 / (double)SHIDWORD(v20));
    double width = v29.size.width;
    double height = v29.size.height;
    BOOL IsNull = CGRectIsNull(v29);
    if (IsNull) {
      unint64_t v22 = v22;
    }
    else {
      unint64_t v22 = (int)height;
    }
    if (!IsNull) {
      unsigned int v21 = (int)width;
    }
  }
  return v21 | (v22 << 32);
}

uint64_t __captureSession_configureStillImageSinkNode_block_invoke(uint64_t a1, opaqueCMSampleBuffer *a2, void *a3, void *a4)
{
  captureSession_handleCapturedStillImage(*(const void **)(a1 + 56), *(void **)(a1 + 32), *(void *)(a1 + 40), a2, a3, a4);
  float v7 = *(void **)(a1 + 48);
  return [v7 clientReceivedPayloadForSettings:a4 status:a3 clientIsMidStillImageGraph:0];
}

void captureSession_handleCapturedStillImage(const void *a1, void *a2, uint64_t a3, opaqueCMSampleBuffer *a4, void *a5, void *a6)
{
  uint64_t v271 = *MEMORY[0x1E4F143B8];
  CMSampleBufferRef sbuf = 0;
  CFTypeRef cf = 0;
  CFTypeRef v264 = 0;
  CFTypeRef v265 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v240 = a2;
  unint64_t v11 = (void *)[a2 stillImageSinkPipelineSessionStorageWithSinkID:a3];
  unsigned int v246 = (void *)[v11 stillImageSinkPipeline];
  uint64_t v242 = [v11 cameraSourcePipeline];
  uint64_t v235 = (void *)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v242);
  int v255 = [a6 outputFormat];
  int IsBayerRaw = FigCapturePixelFormatIsBayerRaw([a6 rawOutputFormat]);
  int v12 = IsBayerRaw | FigCapturePixelFormatIsDemosaicedRaw([a6 rawOutputFormat]);
  objc_opt_class();
  uint64_t v248 = a6;
  uint64_t v249 = v11;
  CMAttachmentBearerRef target = a4;
  char isKindOfClass = objc_opt_isKindOfClass();
  if (a5)
  {
    uint64_t v230 = v6;
    *(_DWORD *)uint64_t v228 = a5;
    FigDebugAssert3();
LABEL_307:
    unsigned int v241 = 0;
    int v239 = 0;
    unsigned int v88 = 0;
    uint64_t v243 = 0;
    uint64_t v91 = 0;
    *(void *)unsigned int v251 = 0;
LABEL_308:
    uint64_t v195 = 0;
    goto LABEL_234;
  }
  if (!a4)
  {
    uint64_t v230 = v6;
    *(_DWORD *)uint64_t v228 = 0;
LABEL_306:
    FigDebugAssert3();
    a5 = (void *)FigSignalErrorAt();
    goto LABEL_307;
  }
  if (!a6)
  {
    uint64_t v230 = v6;
    *(_DWORD *)uint64_t v228 = 0;
    goto LABEL_306;
  }
  int v244 = v12;
  unsigned int v241 = objc_msgSend((id)CMGetAttachment(a4, @"StillImageProcessingFlags", 0), "unsignedIntValue");
  int v239 = (v241 >> 12) & 1;
  int v13 = [*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA44100];
  if (([v11 stillImagesAreOptimizedForOfflineVideoStabilization] & 1) != 0 || v13)
  {
    CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4F52FD8];
    int v15 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithDictionary:", CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F52FD8], 0));
    if ([v11 stillImagesAreOptimizedForOfflineVideoStabilization])
    {
      ClientSpecifiedMetadataForOfflineStillImageVideoStabilizatiouint64_t n = (void *)FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForOfflineStillImageVideoStabilization(a4);
      if (ClientSpecifiedMetadataForOfflineStillImageVideoStabilization)
      {
        [v15 addEntriesFromDictionary:ClientSpecifiedMetadataForOfflineStillImageVideoStabilization];

        LODWORD(ClientSpecifiedMetadataForOfflineStillImageVideoStabilization) = 1;
      }
      if (!v13) {
        goto LABEL_14;
      }
    }
    else
    {
      LODWORD(ClientSpecifiedMetadataForOfflineStillImageVideoStabilization) = 0;
      if (!v13) {
        goto LABEL_14;
      }
    }
    ClientSpecifiedMetadataForAggCGFloat d = FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForAggd(a4);
    if (ClientSpecifiedMetadataForAggd)
    {
      uint64_t v18 = (void *)ClientSpecifiedMetadataForAggd;
      [v15 addEntriesFromDictionary:ClientSpecifiedMetadataForAggd];

      goto LABEL_15;
    }
LABEL_14:
    if (!ClientSpecifiedMetadataForOfflineStillImageVideoStabilization)
    {
LABEL_16:

      goto LABEL_17;
    }
LABEL_15:
    CMSetAttachment(a4, v14, v15, 1u);
    goto LABEL_16;
  }
LABEL_17:
  float v19 = a4;
  int64_t v20 = objc_msgSend((id)CMGetAttachment(a4, @"PhotoManifest", 0), "descriptorForSampleBuffer:", a4);
  BOOL v250 = FigCaptureMetadataUtilitiesShouldIncludeDiagnosticMetadata() != 0;
  int v21 = [a6 outputOrientation];
  int v22 = [a6 outputMirroring];
  int v23 = [(id)-[FigCaptureCameraSourcePipeline captureDevice](v242) hasFlash];
  int v24 = [a6 flashMode];
  StillImageMetadataInSettingsForSampleBuffer = (const void *)FigCaptureMetadataUtilitiesGetStillImageMetadataInSettingsForSampleBuffer(a6, v19);
  IrisAssetIdentifierForSettingsAndSampleBuffer = (const void *)FigCaptureMetadataUtilitiesGetIrisAssetIdentifierForSettingsAndSampleBuffer(a6, v19);
  uint64_t v27 = (const void *)[a6 imageGroupIdentifier];
  uint64_t v237 = v20;
  uint64_t v231 = [v20 time];
  a4 = target;
  MetadataAttachments = FigCaptureMetadataUtilitiesCreateMetadataAttachments(target, v21, v22, v23, 1, v24, v250, 1, 0, 1, 1, 0, 0, 0, StillImageMetadataInSettingsForSampleBuffer, IrisAssetIdentifierForSettingsAndSampleBuffer, v27, 0, v231,
                          [*(id *)(DerivedStorage + 632) clientExpectsCameraMountedInLandscapeOrientation]);
  uint64_t v243 = MetadataAttachments;
  if (!v255)
  {
    int v30 = 0;
    unint64_t v11 = v249;
    goto LABEL_89;
  }
  CGRect v29 = MetadataAttachments;
  int v30 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v30 setObject:a3 forKeyedSubscript:@"SectionID"];
  objc_msgSend(v30, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(a6, "settingsID")), @"SettingsID");
  unsigned int v31 = [a6 outputWidth];
  uint64_t v32 = [a6 outputHeight];
  if ([a6 outputFormat] == 1785750887
    || [a6 outputFormat] == 1752589105)
  {
    a4 = target;
    uint64_t v33 = (__IOSurface *)CMGetAttachment(target, @"EncodedImageSurface", 0);
    unsigned int v34 = (void *)CMGetAttachment(target, @"EncodedImageSurfaceSize", 0);
    if ([a6 payloadType] == 1)
    {
      CFTypeRef v35 = CMGetAttachment(target, @"EncodedImageCodecType", 0);
      CFTypeRef v36 = CMGetAttachment(target, @"EncodedImageFileType", 0);
      uint64_t v37 = kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxySurface;
      if ((v241 & 0x1000) != 0)
      {
        uint64_t v38 = kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxySurfaceSize;
      }
      else
      {
        uint64_t v37 = kFigCaptureSessionNotificationPayloadKey_Surface;
        uint64_t v38 = kFigCaptureSessionNotificationPayloadKey_SurfaceSize;
      }
      if ((v241 & 0x1000) != 0) {
        uint64_t v39 = kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxyCodec;
      }
      else {
        uint64_t v39 = kFigCaptureSessionNotificationPayloadKey_PhotoCodec;
      }
      if ((v241 & 0x1000) != 0) {
        long long v40 = kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxyFileType;
      }
      else {
        long long v40 = kFigCaptureSessionNotificationPayloadKey_PhotoFileType;
      }
      [v30 setObject:v33 forKeyedSubscript:*v37];
      [v30 setObject:v34 forKeyedSubscript:*v38];
      [v30 setObject:v35 forKeyedSubscript:*v39];
      [v30 setObject:v36 forKeyedSubscript:*v40];
      if (v29) {
        [v30 setObject:v29 forKeyedSubscript:@"Metadata"];
      }
      memset(&v270, 0, sizeof(v270));
      CMSampleBufferGetPresentationTimeStamp(&v270, target);
      CFAllocatorRef v41 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime time = v270;
      CFDictionaryRef v42 = CMTimeCopyAsDictionary(&time, v41);
      a6 = v248;
      int v12 = v244;
      if (v42)
      {
        CFDictionaryRef v43 = v42;
        [v30 setObject:v42 forKeyedSubscript:@"PresentationTimestamp"];
      }
      objc_msgSend(v30, "setObject:forKeyedSubscript:", objc_msgSend(v248, "captureRequestIdentifier"), @"CaptureRequestIdentifier");
      objc_msgSend(v30, "setObject:forKeyedSubscript:", objc_msgSend(v237, "photoIdentifier"), @"PhotoIdentifier");
      unint64_t v11 = v249;
      if ([v248 depthDataDeliveryEnabled]
        && ([v248 embedsDepthDataInImage] & 1) == 0)
      {
        AttachedMediCGFloat a = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"Depth");
        if (AttachedMedia)
        {
          ImageBuffer = CMSampleBufferGetImageBuffer(AttachedMedia);
          if (ImageBuffer)
          {
            IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(ImageBuffer);
            if (IOSurface) {
              [v30 setObject:IOSurface forKeyedSubscript:@"DepthDataSurface"];
            }
          }
        }
        CFTypeRef v47 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F55B40], 0);
        if (v47) {
          [v30 setObject:v47 forKeyedSubscript:@"DepthMetadata"];
        }
      }
      if ([v248 portraitEffectsMatteDeliveryEnabled]
        && ([v248 embedsPortraitEffectsMatteInImage] & 1) == 0)
      {
        uint64_t v48 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, 0x1EFA74420);
        int v49 = v48;
        if (v48)
        {
          uint64_t v50 = CMSampleBufferGetImageBuffer(v48);
          if (v50)
          {
            IOSurfaceRef v51 = CVPixelBufferGetIOSurface(v50);
            if (v51) {
              [v30 setObject:v51 forKeyedSubscript:@"PortraitEffectsMatteSurface"];
            }
          }
        }
        CFTypeRef v52 = CMGetAttachment(v49, (CFStringRef)*MEMORY[0x1E4F55B80], 0);
        if (v52) {
          [v30 setObject:v52 forKeyedSubscript:@"PortraitEffectsMatteMetadata"];
        }
      }
      if (objc_msgSend((id)objc_msgSend(v248, "enabledSemanticSegmentationMatteURNs"), "count")
        && ([v248 embedsSemanticSegmentationMattesInImage] & 1) == 0)
      {
        id v53 = (void *)[v248 enabledSemanticSegmentationMatteURNs];
        if ([v53 containsObject:*MEMORY[0x1E4F55FC8]])
        {
          uint64_t v54 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"PersonSemanticsHair");
          uint64_t v55 = v54;
          if (v54)
          {
            uint64_t v56 = CMSampleBufferGetImageBuffer(v54);
            if (v56)
            {
              IOSurfaceRef v57 = CVPixelBufferGetIOSurface(v56);
              if (v57) {
                [v30 setObject:v57 forKeyedSubscript:@"HairSegmentationMatteSurface"];
              }
            }
          }
          CFTypeRef v58 = CMGetAttachment(v55, (CFStringRef)*MEMORY[0x1E4F55B88], 0);
          if (v58) {
            [v30 setObject:v58 forKeyedSubscript:@"HairSegmentationMatteMetadata"];
          }
        }
        uint64_t v59 = (void *)[v248 enabledSemanticSegmentationMatteURNs];
        if ([v59 containsObject:*MEMORY[0x1E4F55FD0]])
        {
          unsigned int v60 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"PersonSemanticsSkin");
          char v61 = v60;
          if (v60)
          {
            uint64_t v62 = CMSampleBufferGetImageBuffer(v60);
            if (v62)
            {
              IOSurfaceRef v63 = CVPixelBufferGetIOSurface(v62);
              if (v63) {
                [v30 setObject:v63 forKeyedSubscript:@"SkinSegmentationMatteSurface"];
              }
            }
          }
          CFTypeRef v64 = CMGetAttachment(v61, (CFStringRef)*MEMORY[0x1E4F55B88], 0);
          if (v64) {
            [v30 setObject:v64 forKeyedSubscript:@"SkinSegmentationMatteMetadata"];
          }
        }
        float v65 = (void *)[v248 enabledSemanticSegmentationMatteURNs];
        if ([v65 containsObject:*MEMORY[0x1E4F55FE0]])
        {
          uint64_t v66 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"PersonSemanticsTeeth");
          double v67 = v66;
          if (v66)
          {
            uint64_t v68 = CMSampleBufferGetImageBuffer(v66);
            if (v68)
            {
              IOSurfaceRef v69 = CVPixelBufferGetIOSurface(v68);
              if (v69) {
                [v30 setObject:v69 forKeyedSubscript:@"TeethSegmentationMatteSurface"];
              }
            }
          }
          CFTypeRef v70 = CMGetAttachment(v67, (CFStringRef)*MEMORY[0x1E4F55B88], 0);
          if (v70) {
            [v30 setObject:v70 forKeyedSubscript:@"TeethSegmentationMatteMetadata"];
          }
        }
        uint64_t v71 = (void *)[v248 enabledSemanticSegmentationMatteURNs];
        if ([v71 containsObject:*MEMORY[0x1E4F55FC0]])
        {
          uint64_t v72 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"PersonSemanticsGlasses");
          uint64_t v73 = v72;
          if (v72)
          {
            id v74 = CMSampleBufferGetImageBuffer(v72);
            if (v74)
            {
              IOSurfaceRef v75 = CVPixelBufferGetIOSurface(v74);
              if (v75) {
                [v30 setObject:v75 forKeyedSubscript:@"GlassesSegmentationMatteSurface"];
              }
            }
          }
          CFTypeRef v76 = CMGetAttachment(v73, (CFStringRef)*MEMORY[0x1E4F55B88], 0);
          if (v76) {
            [v30 setObject:v76 forKeyedSubscript:@"GlassesSegmentationMatteMetadata"];
          }
        }
      }
      if ([v248 cameraCalibrationDataDeliveryEnabled])
      {
        if (![v30 objectForKeyedSubscript:@"DepthMetadata"])
        {
          CFTypeRef v77 = CMGetAttachment(target, @"CameraCalibrationDataMetadata", 0);
          if (v77)
          {
            CFTypeRef v78 = v77;
            uint64_t v79 = v30;
            uint64_t v80 = @"DepthMetadata";
LABEL_84:
            [v79 setObject:v78 forKeyedSubscript:v80];
            goto LABEL_176;
          }
        }
      }
      goto LABEL_176;
    }
    unint64_t v11 = v249;
    if (![a6 payloadType])
    {
      memset(&v270, 0, sizeof(v270));
      CMSampleBufferGetPresentationTimeStamp(&v270, target);
      size_t v81 = [v34 longValue];
      CMVideoCodecType v82 = [a6 outputFormat];
      uint64_t v83 = (CMVideoFormatDescriptionRef *)[v249 stillImageFormatDescriptionPtr];
      CMTime time = v270;
      uint64_t v84 = BWSampleBufferCreateFromEncodedImageSurface(v33, v81, v82, v31 | (unint64_t)(v32 << 32), &time, v83, &sbuf);
      if (v84)
      {
        a5 = (void *)v84;
        uint64_t v230 = v6;
        *(_DWORD *)uint64_t v228 = v84;
        FigDebugAssert3();
        unsigned int v88 = 0;
        uint64_t v91 = 0;
        *(void *)unsigned int v251 = 0;
        uint64_t v195 = 0;
        goto LABEL_331;
      }
      uint64_t v85 = -[FigCaptureCameraSourcePipeline captureSource](v242);
      captureSession_transferAndSanitizeOutputBufferAttachments(v85, target, sbuf, v29, a6);
      [v30 setObject:sbuf forKeyedSubscript:@"SampleBuffer"];
    }
LABEL_89:
    int v12 = v244;
    goto LABEL_90;
  }
  if ([a6 bracketType]) {
    uint64_t v97 = [a6 bracketImageCount];
  }
  else {
    uint64_t v97 = 1;
  }
  if (objc_msgSend((id)objc_msgSend(a6, "bravoConstituentImageDeliveryDeviceTypes"), "count")) {
    uint64_t v97 = v97
  }
        * objc_msgSend((id)objc_msgSend(a6, "bravoConstituentImageDeliveryDeviceTypes"), "count");
  if ([a6 constantColorEnabled]) {
    uint64_t v97 = v97 + [a6 constantColorFallbackPhotoDeliveryEnabled];
  }
  uint64_t v101 = cs_figCaptureColorSpaceFromSourcePipeline(v242);
  uint64_t v102 = +[BWVideoFormat colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:](BWVideoFormat, "colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:", [(id)-[FigCaptureCameraSourcePipeline captureDevice](v242) supportsWideColor], v101, objc_msgSend(v235, "format"), objc_msgSend(v235, "dimensions"), objc_msgSend(a6, "outputFormat"));
  [a6 outputFormat];
  unint64_t v11 = v249;
  uint64_t v103 = objc_msgSend((id)objc_msgSend(v249, "pixelConverter"), "updateOutputPixelFormat:dimensions:poolCapacity:colorSpaceProperties:alwaysUseHardwareForConversion:", objc_msgSend(a6, "outputFormat"), v31 | (unint64_t)(v32 << 32), v97, v102, v102 != 0);
  if (v103)
  {
    a5 = (void *)v103;
    unsigned int v88 = 0;
    uint64_t v91 = 0;
    *(void *)unsigned int v251 = 0;
    uint64_t v195 = 0;
LABEL_324:
    a6 = v248;
    a4 = target;
LABEL_331:
    int v12 = v244;
    goto LABEL_234;
  }
  uint64_t v104 = (void *)[v249 pixelConverter];
  uint64_t v105 = objc_msgSend(v104, "convertSampleBuffer:cropRect:outputSampleBuffer:", target, &sbuf, *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
  int v12 = v244;
  if (v105)
  {
    a5 = (void *)v105;
    unsigned int v88 = 0;
    uint64_t v91 = 0;
    *(void *)unsigned int v251 = 0;
    uint64_t v195 = 0;
    a4 = target;
    goto LABEL_234;
  }
  if (!sbuf) {
    goto LABEL_183;
  }
  FigCaptureMetadataUtilitiesAddSampleBufferMetadataUsedByVideoEncoderToPixelBuffer(sbuf);
  CVImageBufferRef v106 = CMSampleBufferGetImageBuffer(sbuf);
  if (v106)
  {
    uint64_t v107 = v106;
    if ([v249 colorInfo])
    {
      if (!v102) {
        CVBufferSetAttachments(v107, (CFDictionaryRef)[v249 colorInfo], kCVAttachmentMode_ShouldPropagate);
      }
    }
  }
  if (![a6 payloadType])
  {
    uint64_t v155 = -[FigCaptureCameraSourcePipeline captureSource](v242);
    a4 = target;
    captureSession_transferAndSanitizeOutputBufferAttachments(v155, target, sbuf, v243, a6);
    CMSampleBufferRef v153 = sbuf;
    long long v154 = kFigCaptureSessionNotificationPayloadKey_SampleBuffer;
    goto LABEL_185;
  }
  if ([a6 payloadType] != 1)
  {
LABEL_183:
    a4 = target;
    goto LABEL_90;
  }
  uint64_t v108 = CMSampleBufferGetImageBuffer(sbuf);
  uint64_t v109 = CVPixelBufferGetIOSurface(v108);
  size_t AllocSize = IOSurfaceGetAllocSize(v109);
  memset(&v270, 0, sizeof(v270));
  CMSampleBufferGetPresentationTimeStamp(&v270, sbuf);
  CFAllocatorRef v111 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime time = v270;
  CFDictionaryRef v112 = CMTimeCopyAsDictionary(&time, v111);
  if (v109) {
    [v30 setObject:v109 forKeyedSubscript:@"Surface"];
  }
  if (AllocSize) {
    objc_msgSend(v30, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedLong:", AllocSize), @"SurfaceSize");
  }
  int v12 = v244;
  if (v243) {
    [v30 setObject:v243 forKeyedSubscript:@"Metadata"];
  }
  a4 = target;
  if (v112)
  {
    [v30 setObject:v112 forKeyedSubscript:@"PresentationTimestamp"];
  }
  if ([a6 depthDataDeliveryEnabled])
  {
    uint64_t v113 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"Depth");
    if (v113)
    {
      int v114 = CMSampleBufferGetImageBuffer(v113);
      if (v114)
      {
        IOSurfaceRef v115 = CVPixelBufferGetIOSurface(v114);
        if (v115) {
          [v30 setObject:v115 forKeyedSubscript:@"DepthDataSurface"];
        }
      }
    }
    CFTypeRef v116 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F55B40], 0);
    if (v116) {
      [v30 setObject:v116 forKeyedSubscript:@"DepthMetadata"];
    }
  }
  if ([a6 cameraCalibrationDataDeliveryEnabled])
  {
    if (![v30 objectForKeyedSubscript:@"DepthMetadata"])
    {
      CFTypeRef v117 = CMGetAttachment(target, @"CameraCalibrationDataMetadata", 0);
      if (v117) {
        [v30 setObject:v117 forKeyedSubscript:@"DepthMetadata"];
      }
    }
  }
  if ([a6 portraitEffectsMatteDeliveryEnabled])
  {
    long long v118 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, 0x1EFA74420);
    long long v119 = v118;
    if (v118)
    {
      long long v120 = CMSampleBufferGetImageBuffer(v118);
      if (v120)
      {
        IOSurfaceRef v121 = CVPixelBufferGetIOSurface(v120);
        if (v121) {
          [v30 setObject:v121 forKeyedSubscript:@"PortraitEffectsMatteSurface"];
        }
      }
    }
    CFTypeRef v122 = CMGetAttachment(v119, (CFStringRef)*MEMORY[0x1E4F55B80], 0);
    if (v122) {
      [v30 setObject:v122 forKeyedSubscript:@"PortraitEffectsMatteMetadata"];
    }
  }
  if (objc_msgSend((id)objc_msgSend(a6, "enabledSemanticSegmentationMatteURNs"), "count"))
  {
    long long v123 = (void *)[a6 enabledSemanticSegmentationMatteURNs];
    int v124 = [v123 containsObject:*MEMORY[0x1E4F55FC8]];
    long long v125 = (CFStringRef *)MEMORY[0x1E4F55B88];
    if (v124)
    {
      long long v126 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"PersonSemanticsHair");
      uint64_t v127 = v126;
      if (v126)
      {
        uint64_t v128 = CMSampleBufferGetImageBuffer(v126);
        if (v128)
        {
          IOSurfaceRef v129 = CVPixelBufferGetIOSurface(v128);
          if (v129) {
            [v30 setObject:v129 forKeyedSubscript:@"HairSegmentationMatteSurface"];
          }
        }
      }
      CFTypeRef v130 = CMGetAttachment(v127, *v125, 0);
      if (v130) {
        [v30 setObject:v130 forKeyedSubscript:@"HairSegmentationMatteMetadata"];
      }
    }
    long long v131 = (void *)[a6 enabledSemanticSegmentationMatteURNs];
    if ([v131 containsObject:*MEMORY[0x1E4F55FD0]])
    {
      long long v132 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"PersonSemanticsSkin");
      long long v133 = v132;
      if (v132)
      {
        long long v134 = CMSampleBufferGetImageBuffer(v132);
        if (v134)
        {
          IOSurfaceRef v135 = CVPixelBufferGetIOSurface(v134);
          if (v135) {
            [v30 setObject:v135 forKeyedSubscript:@"SkinSegmentationMatteSurface"];
          }
        }
      }
      CFTypeRef v136 = CMGetAttachment(v133, *v125, 0);
      if (v136) {
        [v30 setObject:v136 forKeyedSubscript:@"SkinSegmentationMatteMetadata"];
      }
    }
    long long v137 = (void *)[a6 enabledSemanticSegmentationMatteURNs];
    if ([v137 containsObject:*MEMORY[0x1E4F55FE0]])
    {
      long long v138 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"PersonSemanticsTeeth");
      long long v139 = v138;
      if (v138)
      {
        long long v140 = CMSampleBufferGetImageBuffer(v138);
        if (v140)
        {
          IOSurfaceRef v141 = CVPixelBufferGetIOSurface(v140);
          if (v141) {
            [v30 setObject:v141 forKeyedSubscript:@"TeethSegmentationMatteSurface"];
          }
        }
      }
      CFTypeRef v142 = CMGetAttachment(v139, *v125, 0);
      if (v142) {
        [v30 setObject:v142 forKeyedSubscript:@"TeethSegmentationMatteMetadata"];
      }
    }
    long long v143 = (void *)[a6 enabledSemanticSegmentationMatteURNs];
    if ([v143 containsObject:*MEMORY[0x1E4F55FC0]])
    {
      long long v144 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"PersonSemanticsGlasses");
      long long v145 = v144;
      if (v144)
      {
        long long v146 = CMSampleBufferGetImageBuffer(v144);
        if (v146)
        {
          IOSurfaceRef v147 = CVPixelBufferGetIOSurface(v146);
          if (v147) {
            [v30 setObject:v147 forKeyedSubscript:@"GlassesSegmentationMatteSurface"];
          }
        }
      }
      CFTypeRef v148 = CMGetAttachment(v145, *v125, 0);
      if (v148)
      {
        CFTypeRef v78 = v148;
        uint64_t v80 = @"GlassesSegmentationMatteMetadata";
        uint64_t v79 = v30;
        goto LABEL_84;
      }
    }
  }
LABEL_176:
  if ([a6 constantColorEnabled])
  {
    long long v149 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(a4, 0x1EFA74920);
    if (v149)
    {
      long long v150 = CMSampleBufferGetImageBuffer(v149);
      if (v150)
      {
        IOSurfaceRef v151 = CVPixelBufferGetIOSurface(v150);
        if (v151) {
          [v30 setObject:v151 forKeyedSubscript:@"ConstantColorConfidenceMapSurface"];
        }
      }
    }
    long long v152 = (opaqueCMSampleBuffer *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F55B28], 0);
    if (v152)
    {
      CMSampleBufferRef v153 = v152;
      long long v154 = kFigCaptureSessionNotificationPayloadKey_ConstantColorMetadata;
LABEL_185:
      [v30 setObject:v153 forKeyedSubscript:*v154];
    }
  }
LABEL_90:
  *(void *)unsigned int v251 = v30;
  if (!v12)
  {
    unsigned int v88 = 0;
    uint64_t v91 = 0;
    a5 = v30;
    goto LABEL_219;
  }
  CFStringRef v86 = (const __CFString *)*MEMORY[0x1E4F53070];
  uint64_t v234 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (!IsBayerRaw)
  {
    uint64_t v91 = (uint64_t)CMGetAttachment(a4, @"RawImageSurface", 0);
    if (!v91)
    {
      unsigned int v88 = 0;
LABEL_318:
      a5 = 0;
      uint64_t v195 = 4294950881;
      goto LABEL_234;
    }
    uint64_t v93 = objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a4, @"RawImageAssetSizes", 0), "objectForKeyedSubscript:", 0x1EFA74140), "unsignedLongValue");
    if (v93)
    {
      size_t v233 = v93;
      unsigned int v88 = (id)CMGetAttachment(a4, @"RawDNGDictionary", 0);
      if (v88)
      {
        uint64_t v94 = objc_msgSend((id)CMGetAttachment(a4, @"RawImageContainsDepthData", 0), "BOOLValue");
        uint64_t v95 = objc_msgSend((id)CMGetAttachment(a4, @"RawImageContainsSemanticSegmentationMattes", 0), "BOOLValue");
        uint64_t v89 = 0;
        unsigned int v96 = 0;
        goto LABEL_198;
      }
    }
    else
    {
      unsigned int v88 = 0;
    }
LABEL_317:
    uint64_t v91 = 0;
    goto LABEL_318;
  }
  unsigned int v87 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(a4, 0x1EFA743A0);
  unsigned int v88 = v87;
  if (!v87) {
    goto LABEL_317;
  }
  uint64_t v89 = CMSampleBufferGetImageBuffer(v87);
  uint64_t v90 = CVPixelBufferGetIOSurface(v89);
  uint64_t v91 = (uint64_t)v90;
  if (!v90)
  {
    unsigned int v88 = 0;
LABEL_314:
    a5 = 0;
    uint64_t v195 = 4294950881;
    goto LABEL_315;
  }
  size_t v92 = IOSurfaceGetAllocSize(v90);
  if (!v92)
  {
    unsigned int v88 = 0;
    goto LABEL_313;
  }
  size_t v233 = v92;
  if (FigCaptureSushiRawDNGDictionaryCreatedInGraph())
  {
    unsigned int v88 = (id)CMGetAttachment(v88, @"RawDNGDictionary", 0);
    goto LABEL_193;
  }
  if (![v249 rawDNGColorCalibrations])
  {
    uint64_t v98 = -[FigCaptureCameraSourcePipeline captureSource](v242);
    uint64_t v99 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v99) {
      uint64_t v100 = v99;
    }
    else {
      uint64_t v100 = 0;
    }
    long long v156 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v100 + 48);
    if (v156) {
      v156(v98, @"WhiteBalanceCalibrations", *MEMORY[0x1E4F1CF80], &cf);
    }
    if (!cf
      || ([v249 setRawDNGColorCalibrations:BWDNGColorCalibrations((void *)cf)],
          ![v249 rawDNGColorCalibrations]))
    {
      unsigned int v88 = 0;
      uint64_t v91 = 0;
      a5 = 0;
      uint64_t v195 = 4294950881;
      unint64_t v11 = v249;
      goto LABEL_331;
    }
  }
  unint64_t v157 = psn_pixelBufferDimensions(v89);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v89);
  unsigned int v158 = [a6 outputWidth];
  uint64_t v159 = [a6 outputHeight];
  uint64_t v160 = (void *)[v235 rawLensShadingCorrection];
  long long v161 = (void *)CMGetAttachment(v88, v86, 0);
  a5 = v161;
  if (!v161)
  {
    unsigned int v88 = 0;
    uint64_t v91 = 0;
    uint64_t v195 = 4294950881;
    unint64_t v11 = v249;
    goto LABEL_324;
  }
  long long v162 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v242), "sensorIDDictionaryByPortType"), "objectForKeyedSubscript:", objc_msgSend(v161, "objectForKeyedSubscript:", *MEMORY[0x1E4F54128]));
  unsigned int v88 = (void *)BWCreateSushiRawDNGDictionary(v157, PixelFormatType, v158 | (unint64_t)(v159 << 32), a5, (void *)[v249 rawDNGColorCalibrations], v160, objc_msgSend(v235, "sushiRawBlackBorderingEnabled"), 0, v162, 0, 0);
  a6 = v248;
  a4 = target;
  int v12 = v244;
  if (!v88)
  {
LABEL_313:
    uint64_t v91 = 0;
    goto LABEL_314;
  }
LABEL_193:
  v272.origin.CGFloat x = BWRawDenormalizedActiveRectFromDNGDictionary(v88);
  double width = v272.size.width;
  double height = v272.size.height;
  if (!CGRectIsNull(v272))
  {
    if ([a6 outputWidth] == width
      && [a6 outputHeight] == height)
    {
      uint64_t v165 = VTFillPixelBufferBorderWithBlack();
      if (v165)
      {
        a5 = (void *)v165;
        uint64_t v91 = 0;
        uint64_t v195 = 0;
        goto LABEL_315;
      }
      goto LABEL_197;
    }
    goto LABEL_313;
  }
LABEL_197:
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  unsigned int v96 = 128;
LABEL_198:
  a5 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [a5 setObject:a3 forKeyedSubscript:@"SectionID"];
  objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v248, "settingsID")), @"SettingsID");
  objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(v248, "captureRequestIdentifier"), @"CaptureRequestIdentifier");
  objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(v237, "photoIdentifier"), @"PhotoIdentifier");
  int v166 = [v248 rawOutputFileCodec];
  uint64_t v167 = [v234 objectForKeyedSubscript:*MEMORY[0x1E4F53D70]];
  int v168 = v166;
  a6 = v248;
  long long v169 = BWCreateRawMetadataFromMetadata(v243, v88, v96, v167, v94, v95, v168);
  if ([v248 payloadType] == 1)
  {
    a4 = target;
    if (IsBayerRaw)
    {
      [a5 setObject:v91 forKeyedSubscript:@"Surface"];
      uint64_t v170 = [NSNumber numberWithUnsignedLong:v233];
      long long v171 = kFigCaptureSessionNotificationPayloadKey_SurfaceSize;
    }
    else
    {
      uint64_t v178 = [v248 rawOutputFormat];
      uint64_t v179 = objc_msgSend((id)CMGetAttachment(target, @"RawImageFileType", 0), "intValue");
      if ((v241 & 0x1000) != 0)
      {
        [a5 setObject:v91 forKeyedSubscript:@"DeferredPhotoProxySurface"];
        objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedLong:", v233), @"DeferredPhotoProxySurfaceSize");
        objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v178), @"DeferredPhotoProxyCodec");
        uint64_t v170 = [NSNumber numberWithInt:v179];
        long long v171 = kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxyFileType;
      }
      else
      {
        [a5 setObject:v91 forKeyedSubscript:@"Surface"];
        objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedLong:", v233), @"SurfaceSize");
        objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", v178), @"PhotoCodec");
        uint64_t v170 = [NSNumber numberWithInt:v179];
        long long v171 = kFigCaptureSessionNotificationPayloadKey_PhotoFileType;
      }
    }
    int v12 = v244;
    [a5 setObject:v170 forKeyedSubscript:*v171];
    memset(&v270, 0, sizeof(v270));
    CMSampleBufferGetPresentationTimeStamp(&v270, target);
    CFAllocatorRef v180 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime time = v270;
    CFDictionaryRef v181 = CMTimeCopyAsDictionary(&time, v180);
    [a5 setObject:v181 forKeyedSubscript:@"PresentationTimestamp"];

    if ([v248 depthDataDeliveryEnabled])
    {
      CMTime v182 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, @"Depth");
      if (v182)
      {
        uint64_t v183 = CMSampleBufferGetImageBuffer(v182);
        if (v183) {
          [a5 setObject:CVPixelBufferGetIOSurface(v183) forKeyedSubscript:@"DepthDataSurface"];
        }
      }
      CFTypeRef v184 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F55B40], 0);
      if (v184) {
        [a5 setObject:v184 forKeyedSubscript:@"DepthMetadata"];
      }
    }
    if (![v248 cameraCalibrationDataDeliveryEnabled]) {
      goto LABEL_218;
    }
    if ([a5 objectForKeyedSubscript:@"DepthMetadata"]) {
      goto LABEL_218;
    }
    CFTypeRef v185 = CMGetAttachment(target, @"CameraCalibrationDataMetadata", 0);
    if (!v185) {
      goto LABEL_218;
    }
    CFTypeRef v175 = v185;
    unsigned int v177 = a5;
    int v176 = @"DepthMetadata";
    goto LABEL_217;
  }
  a4 = target;
  int v12 = v244;
  if (![v248 payloadType])
  {
    memset(&v270, 0, sizeof(v270));
    CMSampleBufferGetPresentationTimeStamp(&v270, target);
    long long v172 = (CFTypeRef *)[v249 rawFormatDescriptionPtr];
    CMTime time = v270;
    uint64_t v173 = BWSampleBufferCreateFromPixelBuffer(v89, (uint64_t)&time, v172, (CMSampleBufferRef *)&v265);
    if (!v173)
    {
      uint64_t v174 = -[FigCaptureCameraSourcePipeline captureSource](v242);
      captureSession_transferAndSanitizeOutputBufferAttachments(v174, target, v265, v169, v248);
      CFTypeRef v175 = v265;
      int v176 = @"SampleBuffer";
      unsigned int v177 = a5;
LABEL_217:
      [v177 setObject:v175 forKeyedSubscript:v176];
      goto LABEL_218;
    }
    uint64_t v195 = v173;
    uint64_t v230 = v6;
    *(_DWORD *)uint64_t v228 = v173;
    FigDebugAssert3();
    uint64_t v91 = 0;
    a5 = 0;
LABEL_315:
    unint64_t v11 = v249;
    goto LABEL_234;
  }
LABEL_218:
  [a5 setObject:v169 forKeyedSubscript:@"Metadata"];
  uint64_t v91 = (uint64_t)a5;
  unint64_t v11 = v249;
LABEL_219:
  if (![a6 previewEnabled]) {
    goto LABEL_229;
  }
  if (!a5)
  {
    uint64_t v230 = v6;
    *(_DWORD *)uint64_t v228 = 0;
    FigDebugAssert3();
    goto LABEL_308;
  }
  if ([a6 payloadType] == 1)
  {
    uint64_t v186 = v91;
    uint64_t v187 = (__IOSurface *)CMGetAttachment(a4, @"PreviewSurface", 0);
    if (v187)
    {
      uint64_t v188 = v187;
      [a5 setObject:v187 forKeyedSubscript:@"PreviewSurface"];
      CFTypeRef v189 = (CFTypeRef)[NSNumber numberWithUnsignedLong:IOSurfaceGetAllocSize(v188)];
      uint64_t v190 = kFigCaptureSessionNotificationPayloadKey_PreviewSurfaceSize;
LABEL_228:
      [a5 setObject:v189 forKeyedSubscript:*v190];
      uint64_t v91 = v186;
      goto LABEL_229;
    }
    uint64_t v230 = v6;
    *(_DWORD *)uint64_t v228 = 0;
    goto LABEL_328;
  }
  if (![a6 payloadType])
  {
    uint64_t v186 = v91;
    uint64_t v191 = (__CVBuffer *)CMGetAttachment(a4, @"PreviewPixelBuffer", 0);
    if (v191)
    {
      uint64_t v192 = v191;
      memset(&v270, 0, sizeof(v270));
      CMSampleBufferGetPresentationTimeStamp(&v270, a4);
      uint64_t v193 = (CFTypeRef *)[v11 previewFormatDescriptionPtr];
      CMTime time = v270;
      BWSampleBufferCreateFromPixelBuffer(v192, (uint64_t)&time, v193, (CMSampleBufferRef *)&v264);
      CFTypeRef v189 = v264;
      if (v264)
      {
        uint64_t v190 = kFigCaptureSessionNotificationPayloadKey_PreviewSampleBuffer;
        goto LABEL_228;
      }
      uint64_t v230 = v6;
      *(_DWORD *)uint64_t v228 = 0;
    }
    else
    {
      uint64_t v230 = v6;
      *(_DWORD *)uint64_t v228 = 0;
    }
LABEL_328:
    FigDebugAssert3();
    uint64_t v195 = 0;
    a5 = 0;
    uint64_t v91 = v186;
    goto LABEL_234;
  }
LABEL_229:
  if (([a6 thumbnailEnabled] & 1) != 0 || objc_msgSend(a6, "rawThumbnailEnabled"))
  {
    CFTypeRef v194 = CMGetAttachment(a4, @"ThumbnailSurface", 0);
    if (v194) {
      [a5 setObject:v194 forKeyedSubscript:@"ThumbnailSurface"];
    }
  }
  uint64_t v195 = 0;
  a5 = 0;
LABEL_234:

  if (cf) {
    CFRelease(cf);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (sbuf) {
    CFRelease(sbuf);
  }
  uint64_t v196 = v246;
  uint64_t v197 = *(void **)v251;
  if (v265) {
    CFRelease(v265);
  }
  if (v264) {
    CFRelease(v264);
  }
  if (a5 && !v91 && !v195 && (uint64_t v198 = (uint64_t)a5, v12 == 1) || (uint64_t v198 = v195, v195)) {
    uint64_t v91 = cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a3, objc_msgSend(a6, "settingsID", *(void *)v228, v230), v198);
  }
  uint64_t v245 = (void *)v91;
  if (a5)
  {
    uint64_t v197 = (void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a3, [a6 settingsID], (uint64_t)a5);
    objc_msgSend((id)objc_msgSend(v246, "portraitHDRStagingNode"), "bufferReceivedWithFlags:error:", 0, a5);
  }
  int v199 = objc_msgSend((id)objc_msgSend(v246, "stillImageCoordinatorNode", *(void *)v228), "responsiveShutterEnabled");
  if (v255) {
    int v200 = 1;
  }
  else {
    int v200 = v12;
  }
  if (!v199)
  {
    if (!v200) {
      goto LABEL_263;
    }
    goto LABEL_262;
  }
  if ([a6 resolutionFlavor] == 2) {
    char v201 = v200;
  }
  else {
    char v201 = 0;
  }
  if (v201)
  {
LABEL_262:
    uint64_t v202 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(objc_msgSend((id)objc_msgSend(v11, "stillImageSinkPipeline"), "sinkID"), objc_msgSend(a6, "settingsID"), 0);
    captureSession_postNotificationWithPayload(a1, @"ReadyForResponsiveRequest", v202);
  }
LABEL_263:
  if (v12)
  {
    v203 = v245;
    [v245 objectForKeyedSubscript:@"CaptureRequestIdentifier"];
    [v245 objectForKeyedSubscript:@"PhotoIdentifier"];
    long long v204 = kFigCaptureSessionIrisStillImageSinkNotification_RawStillImageComplete;
    if (v239) {
      long long v204 = kFigCaptureSessionIrisStillImageSinkNotification_DeferredPhotoProxyImageComplete;
    }
    long long v205 = *v204;
    long long v206 = (void *)[v245 objectForKeyedSubscript:@"Metadata"];
    long long v207 = (void *)[v206 objectForKeyedSubscript:*MEMORY[0x1E4F2FC20]];
    objc_msgSend((id)objc_msgSend(v207, "objectForKeyedSubscript:", *MEMORY[0x1E4F52B38]), "unsignedIntValue");
    if (dword_1EB4C5110)
    {
      int v263 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v203 = v245;
      uint64_t v196 = v246;
      a4 = target;
    }
    captureSession_postNotificationWithPayload(a1, v205, v203);
    a6 = v248;
  }
  if (v255)
  {
    [v197 objectForKeyedSubscript:@"CaptureRequestIdentifier"];
    [v197 objectForKeyedSubscript:@"PhotoIdentifier"];
    uint64_t v209 = kFigCaptureSessionIrisStillImageSinkNotification_StillImageComplete;
    if (v239) {
      uint64_t v209 = kFigCaptureSessionIrisStillImageSinkNotification_DeferredPhotoProxyImageComplete;
    }
    if ((isKindOfClass & 1) == 0) {
      uint64_t v209 = kFigCaptureSessionStillImageSinkNotification_StillImageComplete;
    }
    uint64_t v210 = *v209;
    if (dword_1EB4C5110)
    {
      int v263 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v211 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a6 = v248;
      unint64_t v11 = v249;
      uint64_t v196 = v246;
    }
    memset(&time, 0, sizeof(time));
    if (a4) {
      CMSampleBufferGetPresentationTimeStamp(&time, a4);
    }
    else {
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    }
    uint64_t v212 = (int *)MEMORY[0x1E4F1EBA8];
    int v213 = *MEMORY[0x1E4F1EBA8];
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      [a6 settingsID];
      CMTime v270 = time;
      double Seconds = CMTimeGetSeconds(&v270);
      if (a6) {
        objc_msgSend(a6, "stillImageUserInitiatedRequestPTS", Seconds);
      }
      else {
        memset(&v261[1], 0, sizeof(CMTime));
      }
      CMTime v270 = v261[1];
      CMTimeGetSeconds(&v270);
      kdebug_trace();
      int v213 = *v212;
    }
    if (v213)
    {
      CGRect v215 = fig_log_handle();
      if (os_signpost_enabled(v215))
      {
        CMTime v270 = time;
        Float64 v216 = CMTimeGetSeconds(&v270);
        int v217 = LODWORD(v216);
        if (a6) {
          [a6 stillImageUserInitiatedRequestPTS];
        }
        else {
          memset(v261, 0, 24);
        }
        CMTime v270 = v261[0];
        Float64 v218 = CMTimeGetSeconds(&v270);
        LODWORD(v270.CFDictionaryAddValue(theDict, key, value) = 67240448;
        HIDWORD(v270.CFDictionaryAddValue(theDict, key, value) = v217;
        LOWORD(v270.timescale) = 1026;
        *(CMTimeScale *)((char *)&v270.timescale + 2) = LODWORD(v218);
        _os_signpost_emit_with_name_impl(&dword_1A5887000, v215, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "StillImageCaptureNow", " enableTelemetry=YES N1=%{public,signpost.telemetry:number1}d N2=%{public,signpost.telemetry:number2}d", (uint8_t *)&v270, 0xEu);
      }
    }
    captureSession_postNotificationWithPayload(a1, v210, v197);
    objc_msgSend((id)objc_msgSend(v196, "portraitHDRStagingNode"), "bufferReceivedWithFlags:error:", v241, 0);
  }
  long long v259 = 0u;
  long long v260 = 0u;
  long long v257 = 0u;
  long long v258 = 0u;
  long long v219 = objc_msgSend(v240, "metadataSinkPipelines", *(void *)v229, v230);
  uint64_t v220 = [v219 countByEnumeratingWithState:&v257 objects:v268 count:16];
  if (v220)
  {
    uint64_t v221 = v220;
    int v222 = 0;
    uint64_t v223 = *(void *)v258;
    do
    {
      for (uint64_t i = 0; i != v221; ++i)
      {
        if (*(void *)v258 != v223) {
          objc_enumerationMutation(v219);
        }
        v222 |= -[FigCaptureMetadataSinkPipeline mrcLowPowerModeEnabled](*(void *)(*((void *)&v257 + 1) + 8 * i));
      }
      uint64_t v221 = [v219 countByEnumeratingWithState:&v257 objects:v268 count:16];
    }
    while (v221);
    if (([a6 burstQualityCaptureEnabled] & v222) == 1)
    {
      uint64_t v225 = [a6 settingsID];
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
      uint64_t v226 = [v11 mostRecentBurstSettingsID];
      os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
      if (v226 <= v225)
      {
        v256[0] = MEMORY[0x1E4F143A8];
        v256[1] = 3221225472;
        void v256[2] = __captureSession_handleCapturedStillImage_block_invoke;
        v256[3] = &unk_1E5C28720;
        v256[4] = v11;
        v256[5] = v240;
        v256[6] = v225;
        uint64_t v227 = CMBaseObjectGetDerivedStorage();
        captureSession_dispatchGraphCalloutWithGraphIDToWorkerQueueAfter(a1, *(void *)(v227 + 640), (uint64_t)v256, 0.266);
      }
    }
  }
  else
  {
    [a6 burstQualityCaptureEnabled];
  }
}

void captureSession_transferAndSanitizeOutputBufferAttachments(uint64_t a1, const void *a2, CMAttachmentBearerRef target, void *a4, void *a5)
{
  CMRemoveAllAttachments(target);
  uint64_t v10 = *MEMORY[0x1E4F2F6D8];
  uint64_t v11 = [a4 objectForKeyedSubscript:*MEMORY[0x1E4F2F6D8]];
  if (v11)
  {
    [a4 setObject:v11 forKeyedSubscript:@"FaceRegions"];
    [a4 removeObjectForKey:v10];
  }
  CMSetAttachments(target, (CFDictionaryRef)a4, 1u);
  if (a1)
  {
    id v21 = 0;
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v13 = v12 ? v12 : 0;
    CFStringRef v14 = *(void (**)(uint64_t, __CFString *, void, id *))(v13 + 48);
    if (v14)
    {
      v14(a1, @"AttributesDictionary", *MEMORY[0x1E4F1CF80], &v21);
      id v15 = v21;
    }
    else
    {
      id v15 = 0;
    }
    int v16 = objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", @"Sphere"), "BOOLValue");

    if (v16)
    {
      if ([a5 bracketType])
      {
        if ([a5 lensStabilizationDuringBracketEnabled])
        {
          unsigned int v17 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
          uint64_t v18 = (void *)[v17 objectForKeyedSubscript:*MEMORY[0x1E4F54280]];
          if ((objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", *MEMORY[0x1E4F54290]), "unsignedIntValue") & 6) != 0)
          {
            float v19 = (CFTypeRef *)MEMORY[0x1E4F1F390];
          }
          else if (([v18 isEqualToString:*MEMORY[0x1E4F54E60]] & 1) != 0 {
                 || ([v18 isEqualToString:*MEMORY[0x1E4F54E80]] & 1) != 0)
          }
          {
            float v19 = (CFTypeRef *)MEMORY[0x1E4F1F380];
          }
          else
          {
            char v20 = [v18 isEqualToString:*MEMORY[0x1E4F54E68]];
            float v19 = (CFTypeRef *)MEMORY[0x1E4F1F380];
            if ((v20 & 1) == 0 && ![v18 isEqualToString:*MEMORY[0x1E4F54E70]]) {
              float v19 = (CFTypeRef *)MEMORY[0x1E4F1F398];
            }
          }
        }
        else
        {
          float v19 = (CFTypeRef *)MEMORY[0x1E4F1F388];
        }
        if (*v19) {
          CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2F0], *v19, 1u);
        }
      }
    }
  }
}

uint64_t __captureSession_handleCapturedStillImage_block_invoke(uint64_t result, char a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t result = [*(id *)(result + 32) mostRecentBurstSettingsID];
    if (result <= *(void *)(v2 + 48))
    {
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      uint64_t v3 = objc_msgSend(*(id *)(v2 + 40), "metadataSinkPipelines", 0);
      uint64_t result = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (result)
      {
        uint64_t v4 = result;
        uint64_t v5 = *(void *)v9;
        do
        {
          uint64_t v6 = 0;
          do
          {
            if (*(void *)v9 != v5) {
              objc_enumerationMutation(v3);
            }
            uint64_t v7 = *(void *)(*((void *)&v8 + 1) + 8 * v6);
            if (-[FigCaptureMetadataSinkPipeline mrcLowPowerModeEnabled](v7)) {
              -[FigCaptureMetadataSinkPipeline setMrcSuspended:](v7, 0);
            }
            ++v6;
          }
          while (v4 != v6);
          uint64_t result = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
          uint64_t v4 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

void __captureSession_startMonitoringForFigAssetWriterWritingVideoNotificationIfNecessary_block_invoke(uint64_t a1, int token)
{
  state64[24] = *MEMORY[0x1E4F143B8];
  state64[0] = 0;
  uint32_t state = notify_get_state(token, state64);
  uint64_t v4 = state64[0];
  if (state || state64[0] > 1)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 360));
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = state64[0];
    if (*(void *)(v5 + 592) == state64[0])
    {
      BOOL v7 = 0;
      uint64_t v6 = *(void *)(v5 + 592);
    }
    else if (state64[0])
    {
      if (state64[0] == 1)
      {
        long long v9 = *(const void **)(a1 + 40);
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 3221225472;
        _OWORD v14[2] = __captureSession_startMonitoringForFigAssetWriterWritingVideoNotificationIfNecessary_block_invoke_2;
        void v14[3] = &__block_descriptor_40_e8_v12__0B8l;
        v14[4] = v5;
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        captureSession_dispatchGraphCalloutWithGraphIDToWorkerQueueAfter(v9, *(void *)(DerivedStorage + 640), (uint64_t)v14, 0.0);
        BOOL v7 = 0;
        uint64_t v5 = *(void *)(a1 + 32);
        *(unsigned char *)(v5 + 600) = *(unsigned char *)(v5 + 377);
        uint64_t v6 = state64[0];
      }
      else
      {
        BOOL v7 = 0;
      }
    }
    else
    {
      BOOL v7 = *(unsigned char *)(v5 + 600) != 0;
      *(unsigned char *)(v5 + 600) = 0;
    }
    *(void *)(v5 + 592) = v6;
    if (dword_1EB4C5110)
    {
      long long v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v5 = *(void *)(a1 + 32);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 360));
    uint64_t v12 = *(const void **)(a1 + 40);
    if (v4 == 1)
    {
      captureSession_postNotificationWithPayload(v12, @"DidStartFigAssetWriterRecording", 0);
    }
    else
    {
      captureSession_postNotificationWithPayload(v12, @"DidStopFigAssetWriterRecording", 0);
      char v13 = !v7;
      if (v4) {
        char v13 = 1;
      }
      if ((v13 & 1) == 0) {
        captureSession_showRecordingVideoWhileMultitaskingDialogIfNecessary();
      }
    }
  }
}

uint64_t __captureSession_startMonitoringForFigAssetWriterWritingVideoNotificationIfNecessary_block_invoke_2(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(result + 32) + 664), "cameraSourcePipelines"), "firstObject"));
    uint64_t result = [v2 captureInitiatedOnce];
    if ((result & 1) == 0)
    {
      return [v2 setCaptureInitiatedOnce:1];
    }
  }
  return result;
}

void __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = (const void *)[*(id *)(a1 + 32) referencedObject];
  if (v1)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_4;
    v2[3] = &__block_descriptor_40_e5_v8__0l;
    v2[4] = v1;
    captureSession_performBlockOnWorkerQueue(v1, (uint64_t)v2);
  }
}

uint64_t __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_4()
{
  return captureSession_handlePlaybackOrRouteStateChange();
}

id cs_containingBundleIdentifierForSecureCaptureExtensionBundleIdentifier(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = [MEMORY[0x1E4F223F8] bundleRecordWithBundleIdentifier:a1 allowPlaceholder:0 error:&v4];
  if (v4) {
    return 0;
  }
  uint64_t v2 = (void *)v1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  else {
    return (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "containingBundleRecord"), "bundleIdentifier"), "copy");
  }
}

void cs_cancelPocketDetectionTimeoutTimer()
{
  if (qword_1E96B6F60)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1E96B6F60);

    qword_1E96B6F60 = 0;
  }
}

uint64_t __captureSession_showCinematicFramingAlertIfApplicable_block_invoke(uint64_t a1)
{
  uint64_t v15 = 0;
  int v16 = &v15;
  uint64_t v17 = 0x3052000000;
  uint64_t v18 = __Block_byref_object_copy__24;
  float v19 = __Block_byref_object_dispose__24;
  uint64_t v2 = (void *)getBMStreamsClass_softClass;
  uint64_t v20 = getBMStreamsClass_softClass;
  if (!getBMStreamsClass_softClass)
  {
    uint64_t v10 = MEMORY[0x1E4F143A8];
    uint64_t v11 = 3221225472;
    uint64_t v12 = __getBMStreamsClass_block_invoke;
    char v13 = &unk_1E5C24978;
    CFStringRef v14 = &v15;
    __getBMStreamsClass_block_invoke((uint64_t)&v10);
    uint64_t v2 = (void *)v16[5];
  }
  _Block_object_dispose(&v15, 8);
  uint64_t v3 = objc_msgSend((id)objc_msgSend(v2, "discoverabilitySignal"), "source");
  IsCameracaptureCGFloat d = FigCaptureCurrentProcessIsCameracaptured();
  uint64_t v5 = &FigCaptureClientApplicationIdentifierCameracaptured;
  if (!IsCameracaptured) {
    uint64_t v5 = &FigCaptureClientApplicationIdentifierMediaserverd;
  }
  uint64_t v6 = *v5;
  uint64_t v7 = [NSString stringWithFormat:@"%@.centerstage-discovered", *v5];
  uint64_t v15 = 0;
  int v16 = &v15;
  uint64_t v17 = 0x3052000000;
  uint64_t v18 = __Block_byref_object_copy__24;
  float v19 = __Block_byref_object_dispose__24;
  long long v8 = (objc_class *)getBMDiscoverabilitySignalEventClass_softClass;
  uint64_t v20 = getBMDiscoverabilitySignalEventClass_softClass;
  if (!getBMDiscoverabilitySignalEventClass_softClass)
  {
    uint64_t v10 = MEMORY[0x1E4F143A8];
    uint64_t v11 = 3221225472;
    uint64_t v12 = __getBMDiscoverabilitySignalEventClass_block_invoke;
    char v13 = &unk_1E5C24978;
    CFStringRef v14 = &v15;
    __getBMDiscoverabilitySignalEventClass_block_invoke((uint64_t)&v10);
    long long v8 = (objc_class *)v16[5];
  }
  _Block_object_dispose(&v15, 8);
  return objc_msgSend(v3, "sendEvent:", (id)objc_msgSend([v8 alloc], "initWithIdentifier:bundleID:context:", v7, v6, *(void *)(a1 + 32)));
}

void sub_1A5BF0898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBMStreamsClass_block_invoke(uint64_t a1)
{
  BiomeStreamsLibrary();
  Class result = objc_getClass("BMStreams");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getBMStreamsClass_block_invoke_cold_1();
  }
  getBMStreamsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void BiomeStreamsLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!BiomeStreamsLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __BiomeStreamsLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E5C28AC8;
    uint64_t v2 = 0;
    BiomeStreamsLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!BiomeStreamsLibraryCore_frameworkLibrary) {
    BiomeStreamsLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __BiomeStreamsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BiomeStreamsLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getBMDiscoverabilitySignalEventClass_block_invoke(uint64_t a1)
{
  BiomeStreamsLibrary();
  Class result = objc_getClass("BMDiscoverabilitySignalEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getBMDiscoverabilitySignalEventClass_block_invoke_cold_1();
  }
  getBMDiscoverabilitySignalEventClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void __captureSession_startDeferredGraphSetupOnWorkerQueueAfter_block_invoke_2(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 360));
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v3 + 537) && !(*(unsigned __int8 *)(v3 + 376) | *(unsigned __int8 *)(v3 + 539)))
    {
      if (*(unsigned char *)(v3 + 112))
      {
        int v4 = *(unsigned __int8 *)(v3 + 538);
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 360));
        if (!v4) {
          return;
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 360));
      }
      uint64_t v5 = *(void *)(a1 + 40);
      captureSession_startDeferredGraphSetup(v5);
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 360));
    }
  }
}

uint64_t __initializeGlobals_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

void __captureSession_updatePreviewSinkConnectionEnabledState_block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 360));
  id v3 = *(id *)(*(void *)(a1 + 32) + 456);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 360));
  if (v3)
  {
    if (*(void *)(*(void *)(a1 + 32) + 632))
    {
      uint64_t v2 = [[FigCaptureSessionParsedConfiguration alloc] initWithSessionConfiguration:v3 clientSetsUserInitiatedCaptureRequestTime:captureSession_clientSetsUserInitiatedCaptureRequestTime() restrictions:*(void *)(*(void *)(a1 + 32) + 440)];
      if (v2) {
        captureSession_updateGraphConnectionEnabledState(*(void *)(a1 + 40), v2);
      }
    }
  }
}

uint64_t __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v1 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 664), "movieFileSinkPipelines", 0);
  uint64_t result = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v8;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v7 + 1) + 8 * v5);
        if ([v6 recording]) {
          [v6 setRecordedWhileMultitasking:1];
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v3 = result;
    }
    while (result);
  }
  return result;
}

void __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke_936(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 264);
  if ((v3 || *(void *)(v2 + 256)) && *(unsigned char *)(v2 + 313))
  {
    uint64_t v4 = *(void **)(v2 + 256);
    if (v4)
    {
      uint64_t v5 = *(unsigned __int8 *)(v2 + 312);
      uint64_t v7 = 0;
      [v4 setActive:0 withOptions:v5 error:&v7];
      uint64_t v2 = *(void *)(a1 + 32);
      uint64_t v3 = *(void *)(v2 + 264);
    }
    if (v3)
    {
      CMSessionEndInterruption();
      uint64_t v2 = *(void *)(a1 + 32);
    }
    uint64_t v6 = *(NSObject **)(v2 + 304);
    if (v6)
    {
      dispatch_source_cancel(v6);

      uint64_t v2 = *(void *)(a1 + 32);
      *(void *)(v2 + 304) = 0;
    }
    *(_WORD *)(v2 + 312) = 0;
  }
}

uint64_t __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke_2(uint64_t a1)
{
  id v2 = +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor];
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  return [v2 unregisterClient:v3];
}

void __captureSession_startObservingAVAudioSessionInterruptionNotification_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v5 = [*(id *)(a1 + 32) referencedObject];
  if (!v5) {
    goto LABEL_20;
  }
  uint64_t v6 = (const void *)v5;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  long long v8 = (void *)[a2 name];
  if (([v8 isEqualToString:*MEMORY[0x1E4F4E830]] & 1) == 0) {
    goto LABEL_18;
  }
  if (*DerivedStorage) {
    goto LABEL_20;
  }
  long long v9 = (void *)[a2 userInfo];
  uint64_t v10 = objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F4E868]), "integerValue");
  uint64_t v11 = (void *)[a2 userInfo];
  uint64_t v12 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E4F4E858]), "integerValue");
  char v13 = (void *)[a2 userInfo];
  objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x1E4F4E848]), "integerValue");
  if (!v10)
  {
LABEL_11:
    uint64_t v15 = (void *)[a2 userInfo];
    [v15 objectForKeyedSubscript:*MEMORY[0x1E4F4E870]];
    int v16 = (void *)[a2 userInfo];
    [v16 objectForKeyedSubscript:*MEMORY[0x1E4F4E878]];
    if (v10)
    {
      if (dword_1EB4C5110)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_16:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else if (dword_1EB4C5110)
    {
      uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      goto LABEL_16;
    }
    captureSession_updateSessionStateWithNewInputCondition(v6, DerivedStorage + 384, v10, 0, 0);
    goto LABEL_20;
  }
  if (v10 != 1)
  {
LABEL_18:
    float v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    goto LABEL_19;
  }
  if (!v12)
  {
    LODWORD(v10) = 1;
    goto LABEL_11;
  }
  if (dword_1EB4C5110)
  {
    CFStringRef v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
LABEL_19:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_20:
}

void __captureSession_startObservingCMSessionInterruptionNotification_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)MEMORY[0x1A6272C70]();
  uint64_t v5 = [*(id *)(a1 + 32) referencedObject];
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v6 = (const void *)v5;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  long long v8 = (void *)[a2 name];
  if (([v8 isEqualToString:*MEMORY[0x1E4F75DB0]] & 1) == 0)
  {
LABEL_11:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_13;
  }
  if (*DerivedStorage) {
    goto LABEL_13;
  }
  long long v9 = (void *)[a2 userInfo];
  int v10 = objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E4F75C30]), "intValue");
  if (!v10)
  {
    int v11 = 1;
    goto LABEL_8;
  }
  if (v10 != 1)
  {
    if (!dword_1EB4C5110) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  int v11 = 0;
LABEL_8:
  uint64_t v12 = (void *)[a2 userInfo];
  [v12 objectForKeyedSubscript:*MEMORY[0x1E4F75C40]];
  char v13 = (void *)[a2 userInfo];
  [v13 objectForKeyedSubscript:*MEMORY[0x1E4F75C48]];
  if (dword_1EB4C5110)
  {
    CFStringRef v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  captureSession_updateSessionStateWithNewInputCondition(v6, DerivedStorage + 384, v11, 0, 0);
LABEL_13:
}

void __cs_setPocketDetectionNeeded_block_invoke(uint64_t a1)
{
}

dispatch_group_t __cs_prewarmSystemOverride_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  cs_prewarmSystemOverride_overrideQueue = (uint64_t)dispatch_queue_create("capture-session-prewarm-system-override", v0);
  dispatch_group_t result = dispatch_group_create();
  cs_prewarmSystemOverride_overrideGroup = (uint64_t)result;
  return result;
}

void __captureSession_primeMemoryPoolPrewarmTimer_block_invoke(uint64_t a1)
{
}

void __captureSession_prewarm_block_invoke(uint64_t a1)
{
}

uint64_t captureSession_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    *uint64_t DerivedStorage = 1;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __captureSession_Invalidate_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = DerivedStorage;
    v4[5] = a1;
    captureSession_performBlockOnWorkerQueueSynchronously(a1, (uint64_t)v4);
  }
  return 0;
}

void captureSession_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureSession_Invalidate(a1);
  uint64_t v3 = *(NSObject **)(DerivedStorage + 136);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 136) = 0;
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 144);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 144) = 0;
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 152);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(DerivedStorage + 152) = 0;
  }
  uint64_t v6 = *(NSObject **)(DerivedStorage + 248);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(DerivedStorage + 24_Block_object_dispose(&STACK[0x458], 8) = 0;
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 168);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(DerivedStorage + 16_Block_object_dispose(&STACK[0x458], 8) = 0;
  }
  long long v8 = *(NSObject **)(DerivedStorage + 192);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(DerivedStorage + 192) = 0;
  }
  long long v9 = *(const void **)(DerivedStorage + 184);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 184) = 0;
  }

  *(void *)(DerivedStorage + 176) = 0;
  int v10 = *(const void **)(DerivedStorage + 88);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 8_Block_object_dispose(&STACK[0x458], 8) = 0;
  }
  int v11 = *(const void **)(DerivedStorage + 96);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 104);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 104) = 0;
  }
  char v13 = *(const void **)(DerivedStorage + 8);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x458], 8) = 0;
  }

  *(void *)(DerivedStorage + 736) = 0;
  *(void *)(DerivedStorage + 744) = 0;
}

__CFString *captureSession_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  uint64_t v5 = *(void *)(DerivedStorage + 104);
  CFIndex v6 = CFGetRetainCount(a1);
  if (*(unsigned char *)DerivedStorage) {
    uint64_t v7 = " (invalidated)";
  }
  else {
    uint64_t v7 = "";
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptureSession %@ retainCount: %ld%s allocator: %p, ", v5, v6, v7, v8);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t captureSession_CopySectionProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  else if (a2 && a3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = __captureSession_CopySectionProperty_block_invoke;
    void v13[3] = &unk_1E5C28B50;
    void v13[6] = a2;
    v13[7] = a3;
    v13[8] = a5;
    v13[9] = a4;
    float32x4_t v13[4] = &v14;
    void v13[5] = DerivedStorage;
    captureSession_performBlockOnWorkerQueueSynchronously(a1, (uint64_t)v13);
    uint64_t v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    FigDebugAssert3();
    uint64_t v11 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v11;
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_1A5BF23DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void captureSession_StopRunning(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage) {
    captureSession_updateSessionStateWithNewInputCondition(a1, DerivedStorage + 372, 0, 0, 1);
  }
}

void captureSession_FileSinkStartRecording(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v21 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      if (a3)
      {
        if ([a3 settingsID])
        {
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 3221225472;
          void v19[2] = __captureSession_FileSinkStartRecording_block_invoke;
          v19[3] = &unk_1E5C249A0;
          v19[5] = a3;
          void v19[6] = a1;
          void v19[4] = a2;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v19);
          uint64_t v11 = (void *)MEMORY[0x1A6272C70](v9, v10);
LABEL_8:
          return;
        }
        uint64_t v18 = v3;
        LODWORD(v17) = 0;
      }
      else
      {
        uint64_t v18 = v3;
        LODWORD(v17) = 0;
      }
      FigDebugAssert3();
      uint64_t v15 = FigSignalErrorAt();
      uint64_t v11 = (void *)MEMORY[0x1A6272C70](v15, v16);
      if (!v15) {
        goto LABEL_8;
      }
      uint64_t v14 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID", v17, v18), v15);
    }
    else
    {
      FigDebugAssert3();
      uint64_t v12 = FigSignalErrorAt();
      uint64_t v11 = (void *)MEMORY[0x1A6272C70](v12, v13);
      if (!v12) {
        goto LABEL_8;
      }
      uint64_t v14 = (const void *)cs_notificationPayloadWithErrorStatus(v12);
    }
    captureSession_postNotificationWithPayload(a1, @"DidStopRecording", v14);
    goto LABEL_8;
  }
}

void captureSession_FileSinkStopRecording(const void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = __captureSession_FileSinkStopRecording_block_invoke;
      void v6[3] = &unk_1E5C24F10;
      void v6[4] = a2;
      void v6[5] = a1;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v6);
    }
    else
    {
      FigDebugAssert3();
      FigSignalErrorAt();
    }
  }
}

void captureSession_FileSinkPauseRecording(const void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = __captureSession_FileSinkPauseRecording_block_invoke;
      void v6[3] = &unk_1E5C24F10;
      void v6[4] = a2;
      void v6[5] = a1;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v6);
    }
    else
    {
      FigDebugAssert3();
      FigSignalErrorAt();
    }
  }
}

void captureSession_FileSinkResumeRecording(const void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = __captureSession_FileSinkResumeRecording_block_invoke;
      void v6[3] = &unk_1E5C24F10;
      void v6[4] = a2;
      void v6[5] = a1;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v6);
    }
    else
    {
      FigDebugAssert3();
      FigSignalErrorAt();
    }
  }
}

void captureSession_StillImageSinkCaptureImage(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v24 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)DerivedStorage)
  {
    if (!a2)
    {
      FigDebugAssert3();
      uint64_t v12 = FigSignalErrorAt();
      if (!v12) {
        return;
      }
      uint64_t v14 = v12;
      uint64_t v15 = (void *)MEMORY[0x1A6272C70](v12, v13);
      uint64_t v16 = (const void *)cs_notificationPayloadWithErrorStatus(v14);
      goto LABEL_23;
    }
    if (a3)
    {
      if ([a3 settingsID])
      {
        if (!*(void *)(DerivedStorage + 344))
        {
          [a3 setStillImageRequestTime:mach_absolute_time()];
          uint64_t v9 = (int *)MEMORY[0x1E4F1EBA8];
          int v10 = *MEMORY[0x1E4F1EBA8];
          if (*MEMORY[0x1E4F1EBA8] == 1)
          {
            kdebug_trace();
            int v10 = *v9;
          }
          if (v10)
          {
            uint64_t v11 = fig_log_handle();
            if (os_signpost_enabled(v11))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1A5887000, v11, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "StillImageCaptureNow", (const char *)&unk_1A5F8B35A, buf, 2u);
            }
          }
          v22[0] = MEMORY[0x1E4F143A8];
          v22[1] = 3221225472;
          v22[2] = __captureSession_StillImageSinkCaptureImage_block_invoke;
          v22[3] = &unk_1E5C249A0;
          v22[5] = a2;
          void v22[6] = a1;
          v22[4] = a3;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v22);
          return;
        }
        uint64_t v21 = v3;
        LODWORD(v20) = 0;
        FigDebugAssert3();
        goto LABEL_21;
      }
      uint64_t v21 = v3;
      LODWORD(v20) = 0;
    }
    else
    {
      uint64_t v21 = v3;
      LODWORD(v20) = 0;
    }
    FigDebugAssert3();
LABEL_21:
    uint64_t v17 = FigSignalErrorAt();
    if (!v17) {
      return;
    }
    uint64_t v19 = v17;
    uint64_t v15 = (void *)MEMORY[0x1A6272C70](v17, v18);
    uint64_t v16 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID", v20, v21), v19);
LABEL_23:
    captureSession_postNotificationWithPayload(a1, @"StillImageComplete", v16);
  }
}

void captureSession_StillImageSinkPrepareToCaptureBracket(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v21 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      if (a3)
      {
        if ([a3 settingsID])
        {
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 3221225472;
          void v19[2] = __captureSession_StillImageSinkPrepareToCaptureBracket_block_invoke;
          v19[3] = &unk_1E5C249A0;
          v19[5] = a3;
          void v19[6] = a1;
          void v19[4] = a2;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v19);
          return;
        }
        uint64_t v18 = v3;
        LODWORD(v17) = 0;
      }
      else
      {
        uint64_t v18 = v3;
        LODWORD(v17) = 0;
      }
      FigDebugAssert3();
      uint64_t v14 = FigSignalErrorAt();
      if (v14)
      {
        uint64_t v16 = v14;
        uint64_t v12 = (void *)MEMORY[0x1A6272C70](v14, v15);
        uint64_t v13 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID", v17, v18), v16);
        goto LABEL_15;
      }
    }
    else
    {
      FigDebugAssert3();
      uint64_t v9 = FigSignalErrorAt();
      if (v9)
      {
        uint64_t v11 = v9;
        uint64_t v12 = (void *)MEMORY[0x1A6272C70](v9, v10);
        uint64_t v13 = (const void *)cs_notificationPayloadWithErrorStatus(v11);
LABEL_15:
        captureSession_postNotificationWithPayload(a1, @"BracketPreparationComplete", v13);
      }
    }
  }
}

void captureSession_IrisStillImageSinkCaptureImage(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v24 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      if (a3)
      {
        if ([a3 settingsID])
        {
          [a3 setStillImageRequestTime:mach_absolute_time()];
          uint64_t v9 = (int *)MEMORY[0x1E4F1EBA8];
          int v10 = *MEMORY[0x1E4F1EBA8];
          if (*MEMORY[0x1E4F1EBA8] == 1)
          {
            kdebug_trace();
            int v10 = *v9;
          }
          if (v10)
          {
            uint64_t v11 = fig_log_handle();
            if (os_signpost_enabled(v11))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1A5887000, v11, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "StillImageCaptureNow", (const char *)&unk_1A5F8B35A, buf, 2u);
            }
          }
          v22[0] = MEMORY[0x1E4F143A8];
          v22[1] = 3221225472;
          v22[2] = __captureSession_IrisStillImageSinkCaptureImage_block_invoke;
          v22[3] = &unk_1E5C249A0;
          v22[5] = a3;
          void v22[6] = a1;
          v22[4] = a2;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v22);
          return;
        }
        uint64_t v21 = v3;
        LODWORD(v20) = 0;
      }
      else
      {
        uint64_t v21 = v3;
        LODWORD(v20) = 0;
      }
      FigDebugAssert3();
      uint64_t v17 = FigSignalErrorAt();
      if (!v17) {
        return;
      }
      uint64_t v19 = v17;
      uint64_t v15 = (void *)MEMORY[0x1A6272C70](v17, v18);
      uint64_t v16 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID", v20, v21), v19);
    }
    else
    {
      FigDebugAssert3();
      uint64_t v12 = FigSignalErrorAt();
      if (!v12) {
        return;
      }
      uint64_t v14 = v12;
      uint64_t v15 = (void *)MEMORY[0x1A6272C70](v12, v13);
      uint64_t v16 = (const void *)cs_notificationPayloadWithErrorStatus(v14);
    }
    captureSession_postNotificationWithPayload(a1, @"IrisWillBeginCapture", v16);
  }
}

void captureSession_IrisStillImageSinkPrepareToCapture(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v21 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      if (a3)
      {
        if ([a3 settingsID])
        {
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 3221225472;
          void v19[2] = __captureSession_IrisStillImageSinkPrepareToCapture_block_invoke;
          v19[3] = &unk_1E5C249A0;
          v19[5] = a3;
          void v19[6] = a1;
          void v19[4] = a2;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v19);
          return;
        }
        uint64_t v18 = v3;
        LODWORD(v17) = 0;
      }
      else
      {
        uint64_t v18 = v3;
        LODWORD(v17) = 0;
      }
      FigDebugAssert3();
      uint64_t v14 = FigSignalErrorAt();
      if (v14)
      {
        uint64_t v16 = v14;
        uint64_t v12 = (void *)MEMORY[0x1A6272C70](v14, v15);
        uint64_t v13 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID", v17, v18), v16);
        goto LABEL_15;
      }
    }
    else
    {
      FigDebugAssert3();
      uint64_t v9 = FigSignalErrorAt();
      if (v9)
      {
        uint64_t v11 = v9;
        uint64_t v12 = (void *)MEMORY[0x1A6272C70](v9, v10);
        uint64_t v13 = (const void *)cs_notificationPayloadWithErrorStatus(v11);
LABEL_15:
        captureSession_postNotificationWithPayload(a1, @"IrisPreparationComplete", v13);
      }
    }
  }
}

void captureSession_IrisStillImageSinkBeginMomentCapture(const void *a1, const void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)DerivedStorage)
  {
    if (a2)
    {
      if (a3)
      {
        if ([a3 settingsID])
        {
          if (!*(void *)(DerivedStorage + 344))
          {
            *(void *)(DerivedStorage + 344) = a3;
            uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
            if (*MEMORY[0x1E4F1EBA8] == 1) {
              kdebug_trace();
            }
            uint64_t v10 = mach_absolute_time();
            if (*v9)
            {
              uint64_t v11 = fig_log_handle();
              if (os_signpost_enabled(v11))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl(&dword_1A5887000, v11, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "BeginMomentCapture", (const char *)&unk_1A5F8B35A, buf, 2u);
              }
            }
            captureSession_SetSectionProperty(a1, a2, @"UserInitiatedCaptureRequestTime", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(a3, "userInitiatedCaptureTime", v16, v17)));
            v21[0] = MEMORY[0x1E4F143A8];
            v21[1] = 3221225472;
            v21[2] = __captureSession_IrisStillImageSinkBeginMomentCapture_block_invoke;
            v21[3] = &unk_1E5C27F38;
            void v21[4] = a2;
            v21[5] = a3;
            v21[6] = a1;
            v21[7] = v10;
            captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v21);
            uint64_t v12 = (void *)MEMORY[0x1A6272C70]();
            uint64_t v13 = 0;
            goto LABEL_14;
          }
          uint64_t v18 = v3;
          LODWORD(v16) = 0;
          FigDebugAssert3();
          int v23 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v13 = 4294950895;
          goto LABEL_24;
        }
        uint64_t v18 = v3;
        LODWORD(v16) = 0;
      }
      else
      {
        uint64_t v18 = v3;
        LODWORD(v16) = 0;
      }
      FigDebugAssert3();
    }
    else
    {
      uint64_t v18 = v3;
      LODWORD(v16) = 0;
      FigDebugAssert3();
    }
    uint64_t v13 = FigSignalErrorAt();
    if (!v13)
    {
LABEL_25:
      uint64_t v12 = (void *)MEMORY[0x1A6272C70]();
      if (!a2)
      {
        uint64_t v14 = (const void *)cs_notificationPayloadWithErrorStatus(v13);
        goto LABEL_15;
      }
LABEL_14:
      uint64_t v14 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus((uint64_t)a2, objc_msgSend(a3, "settingsID", v16, v18), v13);
LABEL_15:
      captureSession_postNotificationWithPayload(a1, @"DidBeginMomentCapture", v14);
      return;
    }
LABEL_24:
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    void v19[2] = __captureSession_IrisStillImageSinkBeginMomentCapture_block_invoke_2;
    v19[3] = &__block_descriptor_44_e5_v8__0l;
    void v19[4] = a1;
    int v20 = v13;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v19);
    goto LABEL_25;
  }
}

void captureSession_IrisStillImageSinkCommitMomentCaptureToStillImageCapture(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v22 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)DerivedStorage)
  {
    if (a2 && a3 && [a3 settingsID])
    {
      uint64_t v8 = [a3 settingsID];
      if (v8 == [*(id *)(DerivedStorage + 344) settingsID])
      {
        uint64_t v9 = *(const void **)(DerivedStorage + 344);
        if (v9)
        {
          CFRelease(v9);
          *(void *)(DerivedStorage + 344) = 0;
        }
        [a3 setStillImageRequestTime:mach_absolute_time()];
        uint64_t v10 = (int *)MEMORY[0x1E4F1EBA8];
        int v11 = *MEMORY[0x1E4F1EBA8];
        if (*MEMORY[0x1E4F1EBA8] == 1)
        {
          kdebug_trace();
          int v11 = *v10;
        }
        if (v11)
        {
          uint64_t v12 = fig_log_handle();
          if (os_signpost_enabled(v12))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_1A5887000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "StillImageCaptureNow", (const char *)&unk_1A5F8B35A, buf, 2u);
          }
        }
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3221225472;
        void v19[2] = __captureSession_IrisStillImageSinkCommitMomentCaptureToStillImageCapture_block_invoke;
        v19[3] = &unk_1E5C28B78;
        void v19[6] = a1;
        void v19[7] = DerivedStorage;
        void v19[4] = a2;
        void v19[5] = a3;
        v19[8] = a2;
        int v20 = 0;
        captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v19);
        return;
      }
      FigDebugAssert3();
      int v22 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v13 = 4294950896;
    }
    else
    {
      FigDebugAssert3();
      uint64_t v13 = FigSignalErrorAt();
      if (!v13) {
        return;
      }
    }
    int v22 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __captureSession_IrisStillImageSinkCommitMomentCaptureToStillImageCapture_block_invoke_1022;
    v18[3] = &__block_descriptor_40_e5_v8__0l;
    void v18[4] = a1;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v18);
    uint64_t v16 = (void *)MEMORY[0x1A6272C70]();
    if (a2) {
      uint64_t v17 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, [a3 settingsID], v13);
    }
    else {
      uint64_t v17 = (const void *)cs_notificationPayloadWithErrorStatus(v13);
    }
    captureSession_postNotificationWithPayload(a1, @"IrisWillBeginCapture", v17);
  }
}

void captureSession_IrisStillImageSinkCommitMomentCaptureToMovieRecording(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v21 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)DerivedStorage)
  {
    if (a2
      && a3
      && [a3 settingsID]
      && (uint64_t v8 = [a3 settingsID], v8 == objc_msgSend(*(id *)(DerivedStorage + 344), "settingsID")))
    {
      uint64_t v9 = [*(id *)(DerivedStorage + 344) userInitiatedCaptureTime];
      int v10 = [*(id *)(DerivedStorage + 344) torchMode];
      int v11 = *(const void **)(DerivedStorage + 344);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(DerivedStorage + 344) = 0;
      }
      if (*MEMORY[0x1E4F1EBA8] == 1) {
        kdebug_trace();
      }
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      void v18[2] = __captureSession_IrisStillImageSinkCommitMomentCaptureToMovieRecording_block_invoke;
      v18[3] = &unk_1E5C28BA0;
      void v18[4] = a2;
      void v18[5] = a3;
      v18[6] = a1;
      void v18[7] = v9;
      int v19 = v10;
      v18[8] = DerivedStorage;
      v18[9] = a2;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v18);
    }
    else
    {
      FigDebugAssert3();
      uint64_t v12 = FigSignalErrorAt();
      if (v12)
      {
        uint64_t v13 = v12;
        int v21 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        void v17[2] = __captureSession_IrisStillImageSinkCommitMomentCaptureToMovieRecording_block_invoke_1026;
        v17[3] = &__block_descriptor_40_e5_v8__0l;
        void v17[4] = a1;
        captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v17);
        uint64_t v15 = (void *)MEMORY[0x1A6272C70]();
        if (a2) {
          uint64_t v16 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, [a3 settingsID], v13);
        }
        else {
          uint64_t v16 = (const void *)cs_notificationPayloadWithErrorStatus(v13);
        }
        captureSession_postNotificationWithPayload(a1, @"DidBeginRecordingMomentCaptureMovie", v16);
      }
    }
  }
}

void captureSession_IrisStillImageSinkCancelMomentCapture(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v19 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)DerivedStorage)
  {
    if (a2)
    {
      if ([*(id *)(DerivedStorage + 344) settingsID] == a3)
      {
        uint64_t v8 = *(const void **)(DerivedStorage + 344);
        if (v8)
        {
          CFRelease(v8);
          *(void *)(DerivedStorage + 344) = 0;
        }
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        void v17[2] = __captureSession_IrisStillImageSinkCancelMomentCapture_block_invoke;
        v17[3] = &unk_1E5C280F0;
        void v17[4] = a2;
        void v17[5] = a1;
        v17[6] = DerivedStorage;
        v17[7] = a3;
        v17[8] = a2;
        captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v17);
        return;
      }
      FigDebugAssert3();
    }
    uint64_t v9 = FigSignalErrorAt();
    if (v9)
    {
      uint64_t v10 = v9;
      int v19 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      void v16[2] = __captureSession_IrisStillImageSinkCancelMomentCapture_block_invoke_1028;
      v16[3] = &__block_descriptor_40_e5_v8__0l;
      void v16[4] = a1;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v16);
      uint64_t v14 = (void *)MEMORY[0x1A6272C70](v12, v13);
      if (a2) {
        uint64_t v15 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, a3, v10);
      }
      else {
        uint64_t v15 = (const void *)cs_notificationPayloadWithErrorStatus(v10);
      }
      captureSession_postNotificationWithPayload(a1, @"DidCancelMomentCapture", v15);
    }
  }
}

void captureSession_IrisStillImageSinkEndMomentCapture(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v10 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      if (*MEMORY[0x1E4F1EBA8] == 1) {
        kdebug_trace();
      }
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      v8[2] = __captureSession_IrisStillImageSinkEndMomentCapture_block_invoke;
      v8[3] = &unk_1E5C24C18;
      v8[4] = a2;
      void v8[5] = a1;
      v8[6] = DerivedStorage;
      void v8[7] = a3;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v8);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

void captureSession_VisionDataSinkTriggerBurst(const void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C5110)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = __captureSession_VisionDataSinkTriggerBurst_block_invoke;
      void v6[3] = &unk_1E5C24F10;
      void v6[4] = a2;
      void v6[5] = a1;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v6);
    }
    else
    {
      FigDebugAssert3();
      FigSignalErrorAt();
    }
  }
}

uint64_t __cs_shouldCachePreviewSinkSessionPropertyWithKey_block_invoke()
{
  uint64_t result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", @"PreviewFilters", @"SimulatedAperture", @"PortraitLightingEffectStrength", @"SemanticStyles", @"PrimaryCaptureRectAspectRatio", 0);
  cs_shouldCachePreviewSinkSessionPropertyWithKey_cachedPreviewSinkPropertyKeys = result;
  return result;
}

uint64_t cs_updateSmartStyleSupport(uint64_t a1, void *a2, void *a3)
{
  if (a2)
  {
    uint64_t result = [a2 constantColorEnabled];
    if (result) {
      return result;
    }
    uint64_t result = [a2 burstQualityCaptureEnabled];
    if (result) {
      return result;
    }
    uint64_t result = FigCapturePixelFormatIsDemosaicedRaw([a2 rawOutputFormat]);
    if (result) {
      return result;
    }
    uint64_t result = [a2 bracketType];
    if (result) {
      return result;
    }
    uint64_t result = cs_getCurrentSmartStyle();
    if (!result) {
      return result;
    }
    [a2 setSmartStyle:result];
    uint64_t result = [a2 clientQualityPrioritization];
    if (result == 1
      || (uint64_t result = FigCapturePixelFormatIsDemosaicedRaw([a2 rawOutputFormat]), (result & 1) != 0))
    {
      BOOL v6 = 1;
      if (!a3) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t result = [a2 outputFileType];
      BOOL v6 = result == 1785096550;
      if (!a3) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t result = cs_getCurrentSmartStyle();
    if (!result) {
      return result;
    }
    BOOL v6 = 0;
    if (!a3) {
      goto LABEL_16;
    }
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(a3, "videoSettings"), "objectForKeyedSubscript:", @"AVVideoCodecKey");
  if (result)
  {
    uint64_t result = BWOSTypeForString((void *)result);
    BOOL v7 = result != 1752589105;
    goto LABEL_17;
  }
LABEL_16:
  BOOL v7 = 0;
LABEL_17:
  if (!v6 && !v7)
  {
    [a2 setSmartStyleReversibilitySupported:1];
    return [a3 setSmartStyleReversibilitySupported:1];
  }
  return result;
}

uint64_t captureSession_captureStillImageNow(const void *a1, void *a2, void *a3)
{
  v97[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v54 = a2;
  BOOL v7 = (void *)[*(id *)(DerivedStorage + 664) stillImageSinkPipelineSessionStorageWithSinkID:a2];
  int v8 = (void *)[v7 stillImageSinkPipeline];
  uint64_t v56 = (void *)[v8 stillImageCoordinatorNode];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  int v53 = [a3 isBeginMomentCaptureSettings];
  uint64_t v10 = [v7 cameraSourcePipeline];
  if (isKindOfClass) {
    uint64_t v11 = objc_msgSend(*(id *)(DerivedStorage + 664), "movieFileSinkPipelineWithSinkID:", objc_msgSend(v8, "sinkID"));
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v10);
  if (_FigIsCurrentDispatchQueue())
  {
    if (v8) {
      goto LABEL_6;
    }
LABEL_96:
    uint64_t v48 = v51;
    LODWORD(v46) = 0;
LABEL_99:
    FigDebugAssert3();
    goto LABEL_103;
  }
  uint64_t v47 = v51;
  LODWORD(v46) = 0;
  FigDebugAssert3();
  if (!v8) {
    goto LABEL_96;
  }
LABEL_6:
  if (!v56)
  {
    uint64_t v48 = v51;
    LODWORD(v46) = 0;
    FigDebugAssert3();
    goto LABEL_103;
  }
  if ((objc_msgSend(v54, "isEqualToString:", objc_msgSend(v8, "sinkID")) & 1) == 0)
  {
    uint64_t v48 = v51;
    LODWORD(v46) = 0;
    goto LABEL_99;
  }
  uint64_t v55 = v7;
  if ((([*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA44100] & 1) != 0
     || [*(id *)(DerivedStorage + 88) isEqualToString:0x1EFA55980])
    && captureSession_isPrewarming())
  {
    if (dword_1EB4C5110)
    {
      int v93 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    objc_msgSend(*(id *)(DerivedStorage + 120), "updateApplicationState", v46, v47);
  }
  if (captureSession_isPrewarming())
  {
    uint64_t v48 = v51;
    LODWORD(v46) = 0;
LABEL_102:
    FigDebugAssert3();
LABEL_103:
    uint64_t v36 = FigSignalErrorAt();
    if (!v36) {
      return v36;
    }
    goto LABEL_106;
  }
  if (!*(unsigned char *)(DerivedStorage + 648))
  {
    uint64_t v48 = v51;
    LODWORD(v46) = 0;
    goto LABEL_102;
  }
  if ([*(id *)(DerivedStorage + 632) resumesConnectionsAsNodesArePrepared])
  {
    uint64_t v14 = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      uint64_t v47 = v51;
      LODWORD(v46) = 0;
      FigDebugAssert3();
    }
    if (dword_1EB4C5110)
    {
      int v93 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(unsigned char *)(v14 + 649))
    {
      captureSession_startDeferredGraphSetupWork((uint64_t)a1);
      [*(id *)(v14 + 632) waitForNonDeferredSourceNodesToStart];
    }
  }
  else
  {
    captureSession_waitForGraphToStart((uint64_t)a1, 0);
  }
  if (captureSession_clientIsCameraOrDerivative((uint64_t)a1)
    && [(id)-[FigCaptureCameraSourcePipeline captureDevice](v10) softISPEnabled]
    && !*(unsigned char *)(DerivedStorage + 651)
    && [a3 qualityPrioritization] == 3)
  {
    objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 632), "memoryPool"), "ensureMemoryAsyncWithSize:withMaximizeSystemMemory:useOptimizedMemorySizeDistributionsIfAvailable:", 400, 1, 0);
  }
  *(unsigned char *)(DerivedStorage + 651) = 1;
  uint64_t v16 = v55;
  if ((isKindOfClass & 1) != 0 && -[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)v11))
  {
    float v17 = [*(id *)(DerivedStorage + 632) resumesConnectionsAsNodesArePrepared] ? 2.0 : 1.0;
    uint64_t v18 = (void *)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)v11);
    *(float *)&double v19 = v17;
    if (([v18 waitUntilReadyToReceiveRequestsWithTimeout:v19] & 1) == 0)
    {
      int v93 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v16 = v55;
    }
  }
  if (objc_msgSend(v16, "videoStabilizationOverscanCropEnabled", v46, v47))
  {
    [v16 videoStabilizationOverscanCropMultiplier];
    objc_msgSend(a3, "setVideoStabilizationOverscanCropMultiplier:");
  }
  unint64_t v21 = stillImageSinkPipelineSessionStorage_stillImageOutputDimensionsForSettings(v16, a3);
  captureSession_updateOutputDimensionsAndResolutionFlavor(v21, v10, a3);
  [v12 zoomFactor];
  BWUpdateThumbnailAndPreviewDimensionsForRequestedSettings(a3, v22);
  if ((isKindOfClass & 1) != 0
    && -[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)v11)
    && [a3 movieMode])
  {
    CFTypeRef v52 = v8;
    uint64_t v49 = DerivedStorage;
    uint64_t v50 = a3;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    int v23 = (void *)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)v11);
    uint64_t v24 = [v23 countByEnumeratingWithState:&v88 objects:v95 count:16];
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = *(void *)v89;
      do
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v89 != v26) {
            objc_enumerationMutation(v23);
          }
          unint64_t v28 = *(void **)(*((void *)&v88 + 1) + 8 * i);
          if ([v28 irisMovieProcessingSuspended])
          {
            [v28 setIrisMovieProcessingSuspended:0];
            uint64_t v29 = [v11 sinkID];
            unsigned int v96 = @"SectionID";
            v97[0] = v29;
            captureSession_postNotificationWithPayload(a1, @"DidResumeIrisMovieProcessing", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v97 forKeys:&v96 count:1]);
          }
        }
        uint64_t v25 = [v23 countByEnumeratingWithState:&v88 objects:v95 count:16];
      }
      while (v25);
    }
    [v12 nonDestructiveCropSize];
    a3 = v50;
    objc_msgSend(v50, "setNonDestructiveCropSize:");
    uint64_t DerivedStorage = v49;
    int v8 = v52;
    uint64_t v16 = v55;
  }
  uint64_t v30 = [v16 previewSinkNode];
  if (!v30) {
    goto LABEL_74;
  }
  unsigned int v31 = (void *)v30;
  uint64_t v32 = [a3 stillImageUserInitiatedRequestTime];
  if ([v12 zeroShutterLagEnabled])
  {
    if ([v12 unifiedBracketingMode])
    {
      if (!v32) {
        uint64_t v32 = mach_absolute_time();
      }
      [v31 previewPTSDisplayedAtHostTime:v32 allowingExtrapolation:1];
      long long v71 = v73;
      uint64_t v72 = v74;
      [a3 setStillImageUserInitiatedRequestPTS:&v71];
      goto LABEL_65;
    }
    if ([v16 currentUserInitiatedRequestHostTime])
    {
      if (v16)
      {
        [v16 currentUserInitiatedRequestPTS];
        if ((v86 & 0x100000000) != 0)
        {
          uint64_t v33 = [a3 stillImageUserInitiatedRequestTime];
          if (v33 == [v16 currentUserInitiatedRequestHostTime])
          {
            [v16 currentUserInitiatedRequestPTS];
            long long v81 = v83;
            uint64_t v82 = v84;
            unsigned int v34 = &v81;
LABEL_94:
            [a3 setStillImageUserInitiatedRequestPTS:v34];
            goto LABEL_64;
          }
          if ([a3 burstQualityCaptureEnabled])
          {
            objc_msgSend(a3, "setStillImageUserInitiatedRequestTime:", objc_msgSend(v16, "currentUserInitiatedRequestHostTime"));
            [v16 currentUserInitiatedRequestPTS];
            long long v77 = v79;
            uint64_t v78 = v80;
            unsigned int v34 = &v77;
            goto LABEL_94;
          }
LABEL_64:
          [v16 setCurrentUserInitiatedRequestHostTime:0];
          long long v75 = *MEMORY[0x1E4F1F9F8];
          uint64_t v76 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          [v16 setCurrentUserInitiatedRequestPTS:&v75];
          goto LABEL_65;
        }
      }
      else
      {
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        uint64_t v87 = 0;
      }
    }
    [a3 burstQualityCaptureEnabled];
    [a3 stillImageUserInitiatedRequestTime];
    goto LABEL_64;
  }
LABEL_65:
  if ([a3 stillImageUserInitiatedRequestTime])
  {
    if (a3)
    {
      [a3 stillImageUserInitiatedRequestPTS];
      if ((v69 & 0x100000000) != 0) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
    }
    objc_msgSend(v31, "previewPTSDisplayedAtHostTime:allowingExtrapolation:", objc_msgSend(a3, "stillImageUserInitiatedRequestTime"), 1);
    long long v64 = v66;
    uint64_t v65 = v67;
    [a3 setStillImageUserInitiatedRequestPTS:&v64];
  }
  if (!a3)
  {
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    goto LABEL_74;
  }
LABEL_72:
  [a3 stillImageUserInitiatedRequestPTS];
LABEL_74:
  if (v53)
  {
    if (cs_touchDownMomentStillCaptureEnabled_onceToken != -1) {
      dispatch_once(&cs_touchDownMomentStillCaptureEnabled_onceToken, &__block_literal_global_571);
    }
    int v35 = [v56 beginStillImageMomentCaptureWithSettings:a3];
  }
  else
  {
    int v35 = [v56 captureStillImageNowWithSettings:a3];
  }
  LODWORD(v36) = v35;
  if (!v35)
  {
    if ([a3 burstQualityCaptureEnabled])
    {
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
      objc_msgSend(v16, "setMostRecentBurstSettingsID:", objc_msgSend(a3, "settingsID"));
      os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      uint64_t v37 = (void *)[*(id *)(DerivedStorage + 664) metadataSinkPipelines];
      uint64_t v38 = [v37 countByEnumeratingWithState:&v57 objects:v94 count:16];
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v40 = *(void *)v58;
        do
        {
          for (uint64_t j = 0; j != v39; ++j)
          {
            if (*(void *)v58 != v40) {
              objc_enumerationMutation(v37);
            }
            uint64_t v42 = *(void *)(*((void *)&v57 + 1) + 8 * j);
            if (-[FigCaptureMetadataSinkPipeline mrcLowPowerModeEnabled](v42)) {
              -[FigCaptureMetadataSinkPipeline setMrcSuspended:](v42, 1);
            }
          }
          uint64_t v39 = [v37 countByEnumeratingWithState:&v57 objects:v94 count:16];
        }
        while (v39);
      }
    }
    return 0;
  }
  uint64_t v48 = v51;
  LODWORD(v46) = v35;
  FigDebugAssert3();
LABEL_106:
  if (!v8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 360));
    if (!*(_DWORD *)(DerivedStorage + 408)) {
      LODWORD(v36) = -16409;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 360));
  }
  if (v36 == -12773) {
    uint64_t v36 = 4294951755;
  }
  else {
    uint64_t v36 = v36;
  }
  if ((v53 & 1) == 0)
  {
    long long v44 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus((uint64_t)v54, objc_msgSend(a3, "settingsID", v46, v48), v36);
    uint64_t v45 = kFigCaptureSessionIrisStillImageSinkNotification_WillBeginCapture;
    if ((isKindOfClass & 1) == 0) {
      uint64_t v45 = kFigCaptureSessionStillImageSinkNotification_StillImageComplete;
    }
    captureSession_postNotificationWithPayload(a1, *v45, v44);
  }
  return v36;
}

uint64_t captureSession_updateOutputDimensionsAndResolutionFlavor(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = [(id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](a2) highResStillImageDimensions];
  if ([a3 resolutionFlavor])
  {
    id v7 = +[FigCaptureSourceFormatDimensions identifyDimensionsFromFlavor:availableHighResStillImageDimensions:](FigCaptureSourceFormatDimensions, "identifyDimensionsFromFlavor:availableHighResStillImageDimensions:", [a3 resolutionFlavor], v6);
    a1 = [v7 dimensions];
  }
  else
  {
    id v7 = +[FigCaptureSourceFormatDimensions identifySourceFormatDimensionsFromDimensions:a1 availableHighResStillImageDimensions:v6];
  }
  unint64_t v8 = HIDWORD(a1);
  uint64_t v9 = (void *)[(id)-[FigCaptureCameraSourcePipeline captureDevice](a2) baseZoomFactorsByPortType];
  objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](a2), "masterCaptureStream"), "portType")), "floatValue");
  if (v10 == 0.0) {
    float v11 = 1.0;
  }
  else {
    float v11 = v10;
  }
  [(id)-[FigCaptureCameraSourcePipeline captureDevice](a2) zoomFactor];
  float v13 = v12 / v11;
  if (v13 >= 1.0 && FigCaptureVideoDimensionsAreValid([v7 maxUpscalingDimensions]))
  {
    unint64_t v14 = BWCropRectDimensionsForZoomFactor(a1, v13);
    unint64_t v8 = HIDWORD(v14);
    a1 = v14;
    if ((int)v14 <= (int)[v7 maxUpscalingDimensions]
      && (int)v8 <= (int)((unint64_t)[v7 maxUpscalingDimensions] >> 32))
    {
      unint64_t v17 = [v7 maxUpscalingDimensions];
      uint64_t v15 = 0;
      unint64_t v8 = HIDWORD(v17);
      a1 = v17;
    }
    else
    {
      uint64_t v15 = 1;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  [a3 setOutputWidth:a1];
  [a3 setOutputHeight:v8];
  objc_msgSend(a3, "setResolutionFlavor:", objc_msgSend(v7, "flavor"));
  return [a3 setBypassUpscaling:v15];
}

uint64_t cs_IrisStillImageSinkPrepareMovieRecording(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    uint64_t result = [a3 movieMode];
    if (result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!_FigIsCurrentDispatchQueue())
      {
        uint64_t v15 = v3;
        LODWORD(v13) = 0;
        FigDebugAssert3();
      }
      unint64_t v8 = objc_msgSend(*(id *)(DerivedStorage + 664), "movieFileSinkPipelineWithSinkID:", a2, v13, v15);
      uint64_t v9 = +[BWPendingIrisRecordingRequest irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:](BWPendingIrisRecordingRequest, "irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:", (id)objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "copy"));
      if (![v8 pendingIrisRecordings]) {
        objc_msgSend(v8, "setPendingIrisRecordings:", objc_msgSend(MEMORY[0x1E4F1CA48], "array"));
      }
      uint64_t v10 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "pendingIrisRecordings"), "lastObject"), "settings"), "settingsID");
      if (v10 >= [(FigCaptureRecordingSettings *)[(BWPendingIrisRecordingRequest *)v9 settings] settingsID])
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend((id)objc_msgSend(v8, "pendingIrisRecordings", v14, v16), "addObject:", v9);
      uint64_t result = [(BWPendingIrisRecordingRequest *)v9 setEnqueuedHostTime:mach_absolute_time()];
      if (dword_1EB4C5110)
      {
        float v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        return fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return result;
}

uint64_t FigImageControl_LockFocus()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7612) != 3)
  {
    *(_DWORD *)(DerivedStorage + 7612) = 3;
    *(unsigned char *)(DerivedStorage + 7580) = 0;
  }
  return 0;
}

uint64_t FigImageControl_ContinuousAutoFocusWithSmoothFocus(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 7583) != a2)
  {
    *(unsigned char *)(DerivedStorage + 7583) = a2;
    *(unsigned char *)(DerivedStorage + 7580) = 0;
  }
  return 0;
}

uint64_t FigImageControl_FocusScan(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, unsigned __int8 a9)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a7 | a6) >= 0x100)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (a7 <= a6) {
      unsigned int v17 = a6;
    }
    else {
      unsigned int v17 = a7;
    }
    if (a7 >= a6) {
      unsigned int v18 = a6;
    }
    else {
      unsigned int v18 = a7;
    }
    if (*(_DWORD *)(DerivedStorage + 7612) != 2
      || *(_DWORD *)(DerivedStorage + 7620) != a2
      || *(_DWORD *)(DerivedStorage + 7624) != a3
      || *(_DWORD *)(DerivedStorage + 7628) != a4
      || *(_DWORD *)(DerivedStorage + 7632) != a5
      || *(_DWORD *)(DerivedStorage + 7636) != v18
      || *(_DWORD *)(DerivedStorage + 7640) != v17
      || *(unsigned __int8 *)(DerivedStorage + 7583) != a8
      || *(unsigned __int8 *)(DerivedStorage + 7584) != a9)
    {
      if (*(unsigned char *)(DerivedStorage + 521)) {
        BOOL v19 = *(unsigned char *)(DerivedStorage + 624) != 0;
      }
      else {
        BOOL v19 = 0;
      }
      int v21 = *(_DWORD *)(DerivedStorage + 7596);
      if (*(unsigned char *)(DerivedStorage + 521)) {
        BOOL v22 = v21 == 0;
      }
      else {
        BOOL v22 = 1;
      }
      int v23 = !v22;
      if (v21 == -1) {
        int v23 = v19;
      }
      BOOL v24 = (!*(unsigned char *)(DerivedStorage + 621) || *(int *)(DerivedStorage + 656) >= 120)
         && *(unsigned char *)(DerivedStorage + 622) == 0;
      BOOL v25 = 0;
      if (!v24 && ((v23 ^ 1) & 1) == 0) {
        BOOL v25 = *(unsigned char *)(DerivedStorage + 623) != 0;
      }
      *(_DWORD *)(DerivedStorage + 7612) = 2;
      int v26 = *(_DWORD *)(DerivedStorage + 7600);
      if (v26 == -1) {
        BOOL v24 = 1;
      }
      else {
        BOOL v25 = 0;
      }
      *(_DWORD *)(DerivedStorage + 7620) = a2;
      if (v26) {
        char v27 = v23;
      }
      else {
        char v27 = 0;
      }
      *(_DWORD *)(DerivedStorage + 7624) = a3;
      if (v24) {
        BOOL v28 = v25;
      }
      else {
        BOOL v28 = v27;
      }
      *(_DWORD *)(DerivedStorage + 762_Block_object_dispose(&STACK[0x458], 8) = a4;
      *(_DWORD *)(DerivedStorage + 7632) = a5;
      *(_DWORD *)(DerivedStorage + 7636) = v18;
      *(_DWORD *)(DerivedStorage + 7640) = v17;
      if (v18) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = v17 == 255;
      }
      char v30 = !v29;
      *(unsigned char *)(DerivedStorage + 7582) = v30;
      *(unsigned char *)(DerivedStorage + 7584) = a9;
      *(unsigned char *)(DerivedStorage + 7583) = a8;
      *(unsigned char *)(DerivedStorage + 7586) = v23;
      *(unsigned char *)(DerivedStorage + 7585) = v28;
      *(unsigned char *)(DerivedStorage + 7580) = 0;
    }
    return 0;
  }
}

uint64_t FigImageControl_ManualFocus(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 || *(_DWORD *)(DerivedStorage + 7612) != 4 || *(_DWORD *)(DerivedStorage + 7644) != a2)
  {
    *(_DWORD *)(DerivedStorage + 7612) = 4;
    *(_DWORD *)(DerivedStorage + 7644) = a2;
    *(_DWORD *)(DerivedStorage + 7652) = a3;
    *(unsigned char *)(DerivedStorage + 7585) = 0;
    *(unsigned char *)(DerivedStorage + 7580) = 0;
  }
  return 0;
}

CFDictionaryRef FigImageControl_CopyPreFlashAFParameters(uint64_t a1)
{
  keys[4] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(DerivedStorage + 648)) {
    return 0;
  }
  uint64_t v3 = (os_unfair_lock_s *)DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 7612) != 1) {
    return 0;
  }
  keys[3] = 0;
  uint64_t v31 = 0;
  uint64_t v4 = *(unsigned int *)(DerivedStorage + 6220);
  if ((int)v4 >= 1)
  {
    int v5 = *(_DWORD *)(DerivedStorage + 644);
    if (v5 < 1) {
      int v5 = 85;
    }
    int v6 = *(_DWORD *)(DerivedStorage + 652);
    if (v6) {
      LOBYTE(v6) = *(void *)(DerivedStorage + 7704) > *(void *)(DerivedStorage + 7832);
    }
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(DerivedStorage + 5896);
    uint64_t v9 = DerivedStorage + 5736;
    unsigned int v10 = -1;
    do
    {
      if (*(void *)(v9 + 8 * v7 + 160) < v8) {
        unint64_t v8 = *(void *)(v9 + 8 * v7 + 160);
      }
      if (*(_DWORD *)(DerivedStorage + 6280) == *(_DWORD *)(v9 + 4 * v7)) {
        unsigned int v10 = v7;
      }
      ++v7;
    }
    while (v4 != v7);
    if ((v10 & 0x80000000) == 0)
    {
      char v11 = 100 * v8 >= *(void *)(DerivedStorage + 8 * v10 + 5896) * v5 ? 1 : v6;
      if ((v11 & 1) == 0)
      {
        int v22 = (int)(float)((float)*(int *)(DerivedStorage + 656) * 3.0);
        os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 7576));
        v3[1902]._uint64_t os_unfair_lock_opaque = v22;
        os_unfair_lock_unlock(v3 + 1894);
        return 0;
      }
    }
  }
  if (*(int *)(DerivedStorage + 636) < 1) {
    return 0;
  }
  int v26 = 0;
  uint64_t v25 = 0;
  int v24 = 0;
  getDefaultFocusScanRange(a1, &v26, (int *)&v25 + 1, &v25, &v24);
  float v12 = computeAFSearchPositions(a1, v26, SHIDWORD(v25), v25, v24, v25 == v26);
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v14 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int valuePtr = 2;
  CFNumberRef v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F52E70], v17);
  CFRelease(v17);
  int valuePtr = 56;
  CFNumberRef v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F52E60], v18);
  CFRelease(v18);
  BOOL v19 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F52E68], (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F52E58], v19);
  uint64_t v20 = (void *)*MEMORY[0x1E4F54768];
  keys[0] = *(void **)MEMORY[0x1E4F54778];
  keys[1] = v20;
  values = v12;
  CFTypeRef cf = Mutable;
  keys[2] = *(void **)MEMORY[0x1E4F54770];
  char v30 = v19;
  CFDictionaryRef v21 = CFDictionaryCreate(v13, (const void **)keys, (const void **)&values, 3, v14, v15);
  CFRelease(values);
  CFRelease(cf);
  sendFocusStartNotification(a1, 0);
  return v21;
}

uint64_t doLockFocusNow(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (unsigned char *)(result + 8289);
  if (!*(unsigned char *)(result + 8289))
  {
    if (*(unsigned char *)(result + 515)) {
      uint64_t result = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54A48], 0);
    }
    *uint64_t v3 = 1;
  }
  return result;
}

void setupFocusWindows(float a1, float a2, float a3, float a4, uint64_t a5, int a6)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v12 = 0uLL;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  *(_OWORD *)uint64_t v65 = 0u;
  long long v66 = 0u;
  int v52 = 0;
  if (!*(unsigned char *)(DerivedStorage + 9053))
  {
    uint64_t v13 = DerivedStorage;
    unint64_t v14 = 0;
    int v15 = *(_DWORD *)(DerivedStorage + 9040);
    *(_OWORD *)(DerivedStorage + 46_Block_object_dispose(&STACK[0x458], 8) = 0uLL;
    *(_OWORD *)(DerivedStorage + 484) = 0uLL;
    *(_OWORD *)(DerivedStorage + 436) = 0uLL;
    *(_OWORD *)(DerivedStorage + 452) = 0uLL;
    if (a6) {
      CFIndex v16 = 2;
    }
    else {
      CFIndex v16 = 1;
    }
    *(_DWORD *)(DerivedStorage + 176) = v16;
    unint64_t v17 = (v16 - 1);
    uint64_t v50 = (void *)*MEMORY[0x1E4F52F48];
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v49 = 1000 - (__int16)v15;
    uint64_t v48 = (void *)*MEMORY[0x1E4F52F78];
    uint64_t v47 = *MEMORY[0x1E4F52F88];
    uint64_t v46 = *MEMORY[0x1E4F52F50];
    uint64_t v19 = *MEMORY[0x1E4F52F80];
    uint64_t v45 = *MEMORY[0x1E4F52EA0];
    uint64_t v44 = *MEMORY[0x1E4F52F40];
    uint64_t v43 = *MEMORY[0x1E4F1CFD0];
    while (1)
    {
      uint64_t v64 = 0;
      long long v62 = v12;
      long long v63 = v12;
      *(_OWORD *)keys = v12;
      uint64_t v60 = 0;
      long long v58 = v12;
      long long v59 = v12;
      *(_OWORD *)values = v12;
      if (v14) {
        BOOL v20 = v14 >= v17;
      }
      else {
        BOOL v20 = 0;
      }
      double v21 = (double)(5 * (int)v14);
      if (v20) {
        double v21 = a4 * 1400.0;
      }
      int v22 = (int)v21;
      float v23 = (float)(int)v21;
      int v24 = (int)(float)(v23 + (float)(a4 * 1000.0));
      __int16 v55 = v24;
      int v25 = (int)(float)(v23 + (float)(a3 * 1000.0));
      float v26 = (float)(v22 >> 1);
      int v27 = (int)(float)-(float)(v26 - (float)(a1 * 1000.0));
      __int16 v56 = v25;
      __int16 valuePtr = v27;
      int v28 = (int)(float)-(float)(v26 - (float)(a2 * 1000.0));
      __int16 v53 = v28;
      if (v27 < 0)
      {
        LOWORD(v25) = v27 + v25;
        __int16 v56 = v25;
        __int16 valuePtr = 0;
        LOWORD(v27) = 0;
        if (v28 < 0)
        {
LABEL_38:
          LOWORD(v24) = v28 + v24;
          __int16 v55 = v24;
          __int16 v53 = 0;
          LOWORD(v2_Block_object_dispose(&STACK[0x458], 8) = 0;
        }
      }
      else if (v28 < 0)
      {
        goto LABEL_38;
      }
      if ((__int16)v25 + (unsigned __int16)v27 >= 1001)
      {
        LOWORD(v25) = 1000 - v27;
        __int16 v56 = 1000 - v27;
      }
      if ((__int16)v24 + (unsigned __int16)v28 >= 1001)
      {
        LOWORD(v24) = 1000 - v28;
        __int16 v55 = 1000 - v28;
      }
      if (v15 > (__int16)v25)
      {
        __int16 v56 = v15;
        int v29 = (__int16)(v27
                      - ((__int16)(v15 - v25 + ((unsigned __int16)((v15 - v25) & 0x8000) >> 15)) >> 1));
        int v30 = v29 & ~(v29 >> 31);
        if (v49 < v30) {
          LOWORD(v30) = 1000 - v15;
        }
        __int16 valuePtr = v30;
      }
      if (v15 > (__int16)v24)
      {
        __int16 v55 = v15;
        int v31 = (__int16)(v28
                      - ((__int16)(v15 - v24 + ((unsigned __int16)((v15 - v24) & 0x8000) >> 15)) >> 1));
        int v32 = v31 & ~(v31 >> 31);
        if (v49 < v32) {
          LOWORD(v32) = 1000 - v15;
        }
        __int16 v53 = v32;
      }
      keys[0] = v50;
      values[0] = CFNumberCreate(v18, kCFNumberSInt16Type, &valuePtr);
      keys[1] = v48;
      values[1] = CFNumberCreate(v18, kCFNumberSInt16Type, &v53);
      *(void *)&long long v62 = v47;
      *(void *)&long long v58 = CFNumberCreate(v18, kCFNumberSInt16Type, &v56);
      *((void *)&v62 + 1) = v46;
      *((void *)&v58 + 1) = CFNumberCreate(v18, kCFNumberSInt16Type, &v55);
      int v33 = (int)(float)((float)(a4 * 100000.0) / (float)v55);
      int v34 = v33 >> 2;
      if (a6) {
        int v34 = 3;
      }
      if (v14 == v17) {
        int v33 = v34;
      }
      int v52 = v33;
      *(void *)&long long v63 = v19;
      *(void *)&long long v59 = CFNumberCreate(v18, kCFNumberIntType, &v52);
      CFIndex v35 = 5;
      if (!v14 && a6)
      {
        int v51 = 4096;
        *((void *)&v63 + 1) = v45;
        CFNumberRef v36 = CFNumberCreate(v18, kCFNumberSInt16Type, &v51);
        uint64_t v64 = v44;
        *((void *)&v59 + 1) = v36;
        uint64_t v60 = v43;
        CFIndex v35 = 7;
      }
      uint64_t v37 = (_DWORD *)(v13 + 4 * v14);
      v37[45] = valuePtr;
      v37[61] = v53;
      v37[77] = v56;
      v37[93] = v55;
      v37[109] = v52;
      CFDictionaryRef v38 = CFDictionaryCreate(v18, (const void **)keys, (const void **)values, v35, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int v39 = 0;
      v65[v14] = v38;
      int v52 = 0;
      do
      {
        CFRelease(values[v39]);
        int v39 = v52 + 1;
        int v52 = v39;
      }
      while (v39 < (int)v35);
      ++v14;
      long long v12 = 0uLL;
      if (v14 == v16)
      {
        CFArrayRef v40 = CFArrayCreate(v18, (const void **)v65, v16, MEMORY[0x1E4F1D510]);
        int v41 = 0;
        int v52 = 0;
        do
        {
          CFRelease(v65[v41]);
          int v41 = v52 + 1;
          int v52 = v41;
        }
        while (v41 < (int)v16);
        uint64_t v42 = *(const void **)(v13 + 9032);
        if (v42) {
          CFRelease(v42);
        }
        *(void *)(v13 + 9032) = v40;
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 7604), 1u, memory_order_relaxed);
        return;
      }
    }
  }
}

uint64_t doManualFocusNow(uint64_t a1, uint64_t a2)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  keys[0] = @"FocusMode";
  keys[1] = @"LensPosition";
  values[0] = @"FixedFocusPoints";
  values[1] = @"LensPositionInfinity";
  CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v6 = af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, *MEMORY[0x1E4F54A98], a2);
  *(unsigned char *)(DerivedStorage + 80) = 0;
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

void doPeakTrackingAutofocusNow(uint64_t a1, int a2)
{
  int valuePtr = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 81))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return;
  }
  uint64_t v4 = DerivedStorage;
  storePreviousFocusState(DerivedStorage);
  *(_DWORD *)(v4 + 6220) = 0;
  *(_DWORD *)(v4 + 5496) = 0;
  *(_WORD *)(v4 + 80) = 256;
  *(unsigned char *)(v4 + 8289) = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v7 = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F54678], v7);
  CFRelease(v7);
  sendFocusStartNotification(a1, 0);
  if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E4F54B30], Mutable))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    if (!Mutable) {
      return;
    }
  }
  else if (!Mutable)
  {
    return;
  }
  CFRelease(Mutable);
}

uint64_t doAutofocusNow(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 81))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  else
  {
    uint64_t v3 = DerivedStorage;
    storePreviousFocusState(DerivedStorage);
    *(_DWORD *)(v3 + 6220) = 0;
    *(_DWORD *)(v3 + 5496) = 0;
    *(_WORD *)(v3 + 80) = 256;
    *(unsigned char *)(v3 + 8289) = 0;
    sendFocusStartNotification(a1, 0);
    uint64_t v4 = captureStreamSetPropertyOnActivityScheduler(a1, @"AutoFocusNow", (const void *)*MEMORY[0x1E4F1CFD0]);
    uint64_t result = 0;
    if (v4)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return v4;
    }
  }
  return result;
}

uint64_t sisn_createSampleBufferProcessorFunction()
{
  uint64_t v0 = FigSampleBufferProcessorCreateForCustom();
  if (v0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v0;
}

uint64_t BWTrackEditListArrayForRegularTrackInIrisTrimmedMovie(void *a1)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  memset(&v11, 0, sizeof(v11));
  if (a1)
  {
    [a1 movieTrimStartTime];
    [a1 movieStartTime];
    CMTimeSubtract(v3, &lhs, &rhs);
    CMTime v12 = v3[0];
    [a1 movieTrimEndTime];
    [a1 movieTrimStartTime];
  }
  else
  {
    memset(&lhs, 0, sizeof(lhs));
    memset(&rhs, 0, sizeof(rhs));
    CMTimeSubtract(v3, &lhs, &rhs);
    CMTime v12 = v3[0];
    memset(&v8, 0, sizeof(v8));
    memset(&v7, 0, sizeof(v7));
  }
  CMTimeSubtract(&v11, &v8, &v7);
  v3[0] = v12;
  v3[1] = v11;
  long long v4 = *MEMORY[0x1E4F1F9F8];
  uint64_t v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTime v6 = v11;
  v13[0] = mfeu_figFormatWriterTrackEditSegmentDictionaryForTimeMapping((uint64_t)v3);
  return [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:1];
}

uint64_t mfeu_figFormatWriterTrackEditSegmentDictionaryForTimeMapping(uint64_t a1)
{
  float32x4_t v13[4] = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime v11 = *(CMTime *)a1;
  CFDictionaryRef v3 = CMTimeCopyAsDictionary(&v11, v2);
  CMTime v11 = *(CMTime *)(a1 + 24);
  CFDictionaryRef v4 = CMTimeCopyAsDictionary(&v11, v2);
  CMTime v11 = *(CMTime *)(a1 + 48);
  CFDictionaryRef v5 = CMTimeCopyAsDictionary(&v11, v2);
  CMTime v11 = *(CMTime *)(a1 + 72);
  CFDictionaryRef v6 = CMTimeCopyAsDictionary(&v11, v2);
  uint64_t v7 = *MEMORY[0x1E4F32D70];
  v12[0] = *MEMORY[0x1E4F32D80];
  v12[1] = v7;
  v13[0] = v3;
  v13[1] = v4;
  uint64_t v8 = *MEMORY[0x1E4F32D88];
  void v12[2] = *MEMORY[0x1E4F32D98];
  v12[3] = v8;
  void v13[2] = v5;
  void v13[3] = v6;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:4];

  return v9;
}

uint64_t BWTrackEditListArrayForStillImageDisplayTimeTrackInIrisTrimmedMovie(void *a1, int32_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v20 = *MEMORY[0x1E4F1F9F8];
  uint64_t v4 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  *(_OWORD *)&void v21[8] = v20;
  *(void *)double v21 = v4;
  *(void *)&v21[24] = v4;
  CMTimeMake(&v22, 0, a2);
  if (a1)
  {
    [a1 stillImageCaptureTime];
    [a1 movieTrimStartTime];
  }
  else
  {
    memset(&lhs, 0, sizeof(lhs));
    memset(&rhs, 0, sizeof(rhs));
  }
  CMTimeSubtract(&v18, &lhs, &rhs);
  CMTimeMake(&v17, 0, a2);
  CMTimeMake(&v16, 1, a2);
  CMTime v15 = v18;
  CMTime v14 = v16;
  CMTime v10 = v22;
  *(_OWORD *)&v9[16] = *(_OWORD *)&v21[16];
  long long v8 = v20;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v21;
  CMTime v11 = v18;
  uint64_t v5 = mfeu_figFormatWriterTrackEditSegmentDictionaryForTimeMapping((uint64_t)&v8);
  long long v8 = *(_OWORD *)&v17.value;
  *(void *)uint64_t v9 = v17.epoch;
  *(CMTime *)&v9[8] = v16;
  CMTime v10 = v15;
  CMTime v11 = v14;
  uint64_t v6 = mfeu_figFormatWriterTrackEditSegmentDictionaryForTimeMapping((uint64_t)&v8);
  v19[0] = v5;
  v19[1] = v6;
  return [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:2];
}

uint64_t BWTrackEditListArrayForRegularTrackInIrisMovie(long long *a1, long long *a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  long long v3 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  long long v5 = *a1;
  uint64_t v6 = *((void *)a1 + 2);
  long long v7 = *MEMORY[0x1E4F1F9F8];
  uint64_t v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v10 = v6;
  long long v9 = v5;
  v11[0] = mfeu_figFormatWriterTrackEditSegmentDictionaryForTimeMapping((uint64_t)&v3);
  return [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
}

uint64_t FigCaptureVideoStabilizationStrengthStringToEnum(void *a1)
{
  if ([a1 isEqualToString:@"None"]) {
    return 0;
  }
  if ([a1 isEqualToString:@"Low"]) {
    return 1;
  }
  if ([a1 isEqualToString:@"Medium"]) {
    return 2;
  }
  if ([a1 isEqualToString:@"High"]) {
    return 3;
  }
  if ([a1 isEqualToString:@"Ultra"]) {
    return 4;
  }
  return 0;
}

uint64_t FigCaptureGetCameraDriverServiceName()
{
  if (fcc_probeCameraDriverService_onceToken != -1) {
    dispatch_once(&fcc_probeCameraDriverService_onceToken, &__block_literal_global_93);
  }
  if (!fcc_probeCameraDriverService_cameraDriverInfo) {
    return 0;
  }
  uint64_t v0 = NSString;
  uint64_t v1 = *(void *)fcc_probeCameraDriverService_cameraDriverInfo;
  return [v0 stringWithUTF8String:v1];
}

void FigCaptureTCCAccessRequest()
{
  tcc_service_singleton_for_CF_name();
  tcc_credential_singleton_for_self();
  uint64_t v0 = (void *)tcc_message_options_create();
  tcc_message_options_set_request_prompt_policy();
  tcc_server_message_request_authorization();
}

uint64_t __FigCaptureTCCAccessRequest_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3) {
    goto LABEL_12;
  }
  unint64_t authorization_right = tcc_authorization_record_get_authorization_right();
  if (authorization_right < 2 || authorization_right == 3)
  {
    long long v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    goto LABEL_9;
  }
  if (authorization_right != 2)
  {
LABEL_12:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0);
  }
  long long v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_9:
  return v5();
}

uint64_t FigCaptureSourceFormatHighResolutionFlavorToShortString(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"HighResFlavor:%d", a1);
}

uint64_t FigCaptureStillImageQSubResolutionFlavorToShortString(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"QSubFlavor:%d", a1);
}

uint64_t FigCaptureSourceSensorRawHighResolutionFlavorToShortString(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"SensorRawFlavor:%d", a1);
}

uint64_t FigCaptureGetExperimentsEnabled()
{
  return 0;
}

uint64_t __fcc_frontCameraOrientation_block_invoke()
{
  uint64_t result = MGGetSInt32Answer();
  if (result == 180) {
    fcc_frontCameraOrientation_sFrontCameraOrientatiouint64_t n = 1;
  }
  return result;
}

void sub_1A5C0C5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ubn_mergeInferenceMetadata(const void *a1, const void *a2, const void *a3)
{
  CFTypeRef v5 = CMGetAttachment(a1, @"Inferences", 0);
  uint64_t v6 = (const void *)MEMORY[0x1E4F1CC08];
  if (v5) {
    CFTypeRef v7 = v5;
  }
  else {
    CFTypeRef v7 = (CFTypeRef)MEMORY[0x1E4F1CC08];
  }
  CFTypeRef v8 = CMGetAttachment(a2, @"Inferences", 0);
  if (v8) {
    CFTypeRef v9 = v8;
  }
  else {
    CFTypeRef v9 = v6;
  }
  uint64_t v10 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v9];
  [v10 addEntriesFromDictionary:v7];
  CMSetAttachment(a3, @"Inferences", v10, 1u);
}

uint64_t ubn_mergeInferenceAttachedMedia(uint64_t a1, void *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)v13;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(a2);
        }
        uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * v9);
        CMTime v11 = +[BWInferenceEngineController inferenceMaskSbufFromSbuf:a1 attachedMediaKey:v10];
        if (v11) {
          BWSampleBufferSetAttachedMedia(a3, v10, (uint64_t)v11);
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t result = [a2 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_1A5C14420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5C147DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5C16DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a66, 8);
  _Unwind_Resume(a1);
}

void sub_1A5C194E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5C19950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t ubn_insertOutputRouterForInputAfterPreviousInputForBufferType(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v8 = objc_msgSend((id)objc_msgSend(a3, "outputSampleBufferRouterForBufferType:", a4), "outputSampleBufferRouter");
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  v13[0] = [NSNumber numberWithUnsignedLongLong:a4];
  uint64_t v10 = 1;
  objc_msgSend(a2, "addOutputSampleBufferRouter:forBufferTypes:", v9, objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v13, 1));
  uint64_t v12 = [NSNumber numberWithUnsignedLongLong:a4];
  objc_msgSend(a3, "addOutputSampleBufferRouter:forBufferTypes:", a1, objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v12, 1));
  return v10;
}

void sub_1A5C1CEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ubn_dispatch_async_block_invoke(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)MEMORY[0x1A6272C70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __ubn_dispatch_group_async_block_invoke(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)MEMORY[0x1A6272C70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t pgs_iir_TestCorrectionFitsForSmoothParameter(uint64_t a1, double *a2, uint64_t *a3, double *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, BOOL *a8, float a9)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a8)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v24 = FigSignalErrorAt();
    goto LABEL_8;
  }
  FigMotionInterpolateQuaternionsByAngle((uint64_t)a3, a4, a9);
  v28[0] = v16;
  v28[1] = v17;
  v28[2] = v18;
  v28[3] = v19;
  v27[0] = FigMotionMultiplyByInverseOfQuaternion(v28, a3);
  v27[1] = v20;
  void v27[2] = v21;
  v27[3] = v22;
  uint64_t v23 = pgs_computeTransformFromCameraMotion(v27, a2, a6, a7, (uint64_t)v29, *(float *)(a5 + 4));
  if (v23)
  {
    uint64_t v24 = v23;
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 44) = 1065353216;
  uint64_t v24 = pgs_limitTransformToOverscan(a1, (int *)(a5 + 88), (uint64_t)v29);
  if (v24)
  {
LABEL_8:
    BOOL v25 = 0;
    goto LABEL_5;
  }
  BOOL v25 = *(float *)(a1 + 44) >= 1.0;
LABEL_5:
  *a8 = v25;
  return v24;
}

uint64_t cimn_registerLivePhotosMetadata_once()
{
  v1[1] = *MEMORY[0x1E4F143B8];
  v1[0] = *MEMORY[0x1E4F1F020];
  CMMetadataDataTypeRegistryRegisterDataType(@"com.apple.quicktime.com.apple.quicktime.live-photo-info", @"Live Photos Private Metadata", (CFArrayRef)[MEMORY[0x1E4F1C978] arrayWithObjects:v1 count:1]);
  return FigLivePhotoMetadataCreateSoftwareVersionSetupDataWithAtomHeader((__CFData **)&sLivePhotoMetadataSoftwareVersionSetupDataWithAtomHeader);
}

id cimn_createCorrectedDetectedObjects(void *a1, _DWORD *a2, double a3, double a4, double a5, double a6)
{
  if (!a1)
  {
    long long v15 = 0;
    *a2 = 0;
    return v15;
  }
  uint64_t v11 = *MEMORY[0x1E4F538F8];
  uint64_t v12 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F538F8]];
  *a2 = [v12 count];
  if (![v12 count]) {
    return 0;
  }
  if (a5 != 1.0 || a6 != 1.0)
  {
    long long v14 = BWCreateCorrectedDetectedObjectsArray(v12, a3, a4, a5, a6, a3, a4, a5, a6);
    long long v15 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:a1];
    *a2 = [v14 count];
    [v15 setObject:v14 forKeyedSubscript:v11];

    return v15;
  }
  return a1;
}

uint64_t FigCaptureISPProcessingSessionGetClassID()
{
  if (FigCaptureISPProcessingSessionGetClassID_onceToken != -1) {
    dispatch_once(&FigCaptureISPProcessingSessionGetClassID_onceToken, &__block_literal_global_68);
  }
  return FigCaptureISPProcessingSessionGetClassID_sFigCaptureISPProcessingSessionClassID;
}

uint64_t __FigCaptureISPProcessingSessionGetClassID_block_invoke()
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigCaptureISPProcessingSessionDesc, ClassID, 1, &FigCaptureISPProcessingSessionGetClassID_sFigCaptureISPProcessingSessionClassID);
}

uint64_t FigCaptureISPProcessingSessionGetTypeID()
{
  if (FigCaptureISPProcessingSessionGetClassID_onceToken != -1) {
    dispatch_once(&FigCaptureISPProcessingSessionGetClassID_onceToken, &__block_literal_global_68);
  }
  uint64_t v0 = FigCaptureISPProcessingSessionGetClassID_sFigCaptureISPProcessingSessionClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

CFStringRef FigCaptureISPProcessingSessionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptureISPProcessingSession %p]", a1);
}

void sub_1A5C23764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A5C247D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A5C25D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fcdv_handleStreamControlTakenByAnotherClientNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void fcdv_handleStreamControlRelinquishedByAnotherClientNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void fcdv_handleStreamFrameReceiveTimeoutNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void fcdv_handleDeviceUnrecoverableError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v7 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", @"ErrorStatus"), "intValue");
  -[BWFigCaptureDeviceVendor _handleDeviceUnrecoverableError:fromDevice:](a2, v7, a4);
}

void fcdv_handleDeviceNoLongerAvailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1A5C27FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5C28288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5C283AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5C284D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5C286D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5C288B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5C289D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL mv2ip_pixelBufferContainsValidContent(__CVBuffer *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  int HasAttachment = CVBufferHasAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A78]);
  uint64_t v7 = 1;
  if (PixelFormatType == 1278226536 && !HasAttachment)
  {
    uint64_t v7 = 1;
    if (!CVPixelBufferLockBaseAddress(a1, 1uLL))
    {
      BaseAddress = (const __int16 *)CVPixelBufferGetBaseAddress(a1);
      if (BaseAddress)
      {
        uint64_t v9 = BaseAddress;
        if (mv2ip_getFP16MinMaxFromBuffer_onceToken != -1) {
          dispatch_once(&mv2ip_getFP16MinMaxFromBuffer_onceToken, &__block_literal_global_253);
        }
        float16x8_t v10 = (float16x8_t)vld1q_dup_s16(v9);
        if (Height)
        {
          uint64_t v11 = 0;
          unint64_t v12 = (Width & 0x3F) - (Width & 0x38);
          do
          {
            if (Width >= 0x40)
            {
              long long v14 = (float16x8_t *)v9;
              size_t v15 = Width >> 6;
              do
              {
                float16x8_t v10 = vmaxq_f16(vmaxq_f16(vmaxq_f16(vmaxq_f16(*v14, v14[1]), vmaxq_f16(v14[2], v14[3])), vmaxq_f16(vmaxq_f16(v14[4], v14[5]), vmaxq_f16(v14[6], v14[7]))), v10);
                v14 += 8;
                --v15;
              }
              while (v15);
              long long v13 = &v9[64 * (Width >> 6)];
            }
            else
            {
              long long v13 = v9;
            }
            if ((Width & 0x3F) >= 8)
            {
              double v16 = (float16x8_t *)v13;
              uint64_t v17 = (Width >> 3) & 7;
              do
              {
                float16x8_t v18 = *v16++;
                float16x8_t v10 = vmaxq_f16(v18, v10);
                --v17;
              }
              while (v17);
            }
            if (v12)
            {
              float16x8_t v24 = v10;
              __memcpy_chk();
              if (v12 <= 7)
              {
                __int16 v19 = *(__int16 *)((char *)&v25.i16[-1] + 2 * (Width & 0x3F) - ((2 * (int)Width) & 0x70));
                size_t v20 = (Width & 0x3F) - (Width & 0x38);
                do
                  v25.i16[v20++] = v19;
                while (v20 != 8);
              }
              float16x8_t v10 = vmaxq_f16(v25, v24);
            }
            v9 += BytesPerRow >> 1;
            ++v11;
          }
          while (v11 != Height);
        }
        float16x4_t v21 = vpmax_f16(*(float16x4_t *)v10.i8, (float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL));
        float16x4_t v22 = vpmax_f16(v21, v21);
        return vcvtq_f32_f16(vpmax_f16(v22, v22)).f32[0] > 0.49804;
      }
      else
      {
        return 1;
      }
    }
  }
  return v7;
}

id fcdlm_createLayoutMonitorForMainDisplay(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)[MEMORY[0x1E4F62958] configurationForDefaultMainDisplayMonitor];
  [v2 setNeedsUserInteractivePriority:1];
  [v2 setTransitionHandler:a1];
  long long v3 = (void *)[MEMORY[0x1E4F62940] monitorWithConfiguration:v2];
  return v3;
}

id fcdlm_createLayoutMonitorForExternalDisplay(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc_init(MEMORY[0x1E4F62970]);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v3 = (void *)[v2 connectedIdentities];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v18;
LABEL_3:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v18 != v6) {
        objc_enumerationMutation(v3);
      }
      if ([*(id *)(*((void *)&v17 + 1) + 8 * v7) isExternal]) {
        break;
      }
      if (v5 == ++v7)
      {
        uint64_t v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v5) {
          goto LABEL_3;
        }
        goto LABEL_13;
      }
    }
    uint64_t v8 = SBSCreateLayoutServiceEndpointForExternalDisplay();
    if (!v8) {
      goto LABEL_13;
    }
    uint64_t v9 = v8;
    if (dword_1EB4C50D0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v13 = objc_msgSend(MEMORY[0x1E4F62958], "configurationWithEndpoint:", v9, v15, v16);
    [v13 setNeedsUserInteractivePriority:1];
    [v13 setTransitionHandler:a1];
    id v12 = (id)[MEMORY[0x1E4F62940] monitorWithConfiguration:v13];
  }
  else
  {
LABEL_13:
    if (dword_1EB4C50D0)
    {
      uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    id v12 = 0;
  }
  objc_msgSend(v2, "invalidate", v15, v16);

  return v12;
}

id fcdlm_createLayoutMonitorForContinuityDisplay(uint64_t a1)
{
  id v2 = (void *)[MEMORY[0x1E4F62958] configurationForContinuityDisplay];
  [v2 setNeedsUserInteractivePriority:1];
  [v2 setTransitionHandler:a1];
  long long v3 = (void *)[MEMORY[0x1E4F62940] monitorWithConfiguration:v2];
  return v3;
}

void sub_1A5C2C638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1A5C2CA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

float *ColorsWheelContext_create(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, float a9)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  long long v17 = (float *)malloc_type_malloc(0x18uLL, 0x10200405AF6BDC9uLL);
  if (a2 < 0) {
    ColorsWheelContext_create_cold_1();
  }
  if (a3 < 0) {
    ColorsWheelContext_create_cold_2();
  }
  if (a4 < 0) {
    ColorsWheelContext_create_cold_3();
  }
  if (a5 < 0) {
    ColorsWheelContext_create_cold_4();
  }
  if (a6 < 0) {
    ColorsWheelContext_create_cold_5();
  }
  if (a7 < 0) {
    ColorsWheelContext_create_cold_6();
  }
  int v18 = a2 * a1;
  uint64_t v19 = (a2 * a1 / 100);
  int v20 = a3 * a1;
  int v21 = a3 * a1 / 100;
  v104[0] = v19;
  v104[1] = v21;
  int v22 = a4 * a1;
  int v23 = a4 * a1 / 100;
  int v24 = a5 * a1;
  int v25 = a5 * a1 / 100;
  v104[2] = v23;
  v104[3] = v25;
  int v26 = a6 * a1;
  int v27 = a6 * a1 / 100;
  int v28 = a7 * a1;
  int v29 = a7 * a1 / 100;
  v104[4] = v27;
  v104[5] = v29;
  int v30 = v21 + v19 + v23 + v25;
  if ((v30 + v27 + v29 < 0) ^ __OFADD__(v30, v27 + v29) | (v30 + v27 + v29 == 0)) {
    ColorsWheelContext_create_cold_7();
  }
  int v31 = v17;
  int v101 = v24;
  int v102 = v22;
  int v99 = v28;
  int v100 = v26;
  *((_DWORD *)v17 + 2) = v30 + v27 + v29;
  unsigned int v32 = v30 + v27 + v29;
  *(void *)long long v17 = malloc_type_malloc(3 * v32, 0x100004033FC2DF1uLL);
  *((_DWORD *)v31 + 3) = a8;
  if (v18 < 100)
  {
    unsigned int v38 = 0;
    int v36 = v32;
  }
  else
  {
    int v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 1;
    int v36 = v32;
    do
    {
      if (v34 >= *((int *)v31 + 2)) {
        ColorsWheelContext_create_cold_8();
      }
      ++v34;
      uint64_t v37 = (unsigned char *)(*(void *)v31 + v35);
      *(v37 - 1) = 0;
      *uint64_t v37 = v33 / (int)v19;
      v37[1] = -1;
      v35 += 3;
      v33 += 255;
    }
    while (v19 != v34);
    unsigned int v38 = v18 / 100;
  }
  if (v20 >= 100)
  {
    int v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = v38;
    uint64_t v42 = 3 * v38;
    do
    {
      if (v41 + v40 >= *((int *)v31 + 2)) {
        ColorsWheelContext_create_cold_8();
      }
      uint64_t v43 = *(void *)v31 + v42;
      *(_WORD *)uint64_t v43 = -256;
      *(unsigned char *)(v43 + 2) = ~(v39 / v21);
      v42 += 3;
      ++v40;
      v39 += 255;
    }
    while (v21 != v40);
    unsigned int v38 = v41 + v40;
  }
  if (v102 >= 100)
  {
    int v44 = 0;
    int v45 = 0;
    uint64_t v46 = 3 * v38;
    do
    {
      if (*((_DWORD *)v31 + 2) <= (signed int)(v38 + v45)) {
        ColorsWheelContext_create_cold_8();
      }
      uint64_t v47 = *(void *)v31 + v46;
      *(unsigned char *)uint64_t v47 = v44 / v23;
      *(_WORD *)(v47 + 1) = 255;
      ++v45;
      v46 += 3;
      v44 += 255;
    }
    while (v23 != v45);
    v38 += v45;
  }
  if (v101 >= 100)
  {
    int v48 = 0;
    int v49 = 0;
    uint64_t v50 = 3 * v38;
    do
    {
      if (*((_DWORD *)v31 + 2) <= (signed int)(v38 + v49)) {
        ColorsWheelContext_create_cold_8();
      }
      uint64_t v51 = *(void *)v31 + v50;
      *(unsigned char *)uint64_t v51 = -1;
      *(_WORD *)(v51 + 1) = ~(v48 / v25);
      ++v49;
      v50 += 3;
      v48 += 255;
    }
    while (v25 != v49);
    v38 += v49;
  }
  if (v100 >= 100)
  {
    int v52 = 0;
    int v53 = 0;
    uint64_t v54 = 3 * v38;
    do
    {
      if (*((_DWORD *)v31 + 2) <= (signed int)(v38 + v53)) {
        ColorsWheelContext_create_cold_8();
      }
      uint64_t v55 = *(void *)v31 + v54;
      *(_WORD *)uint64_t v55 = 255;
      *(unsigned char *)(v55 + 2) = v52 / v27;
      ++v53;
      v54 += 3;
      v52 += 255;
    }
    while (v27 != v53);
    v38 += v53;
  }
  if (v99 >= 100)
  {
    int v56 = 0;
    int v57 = 0;
    uint64_t v58 = 3 * v38;
    do
    {
      if (*((_DWORD *)v31 + 2) <= (signed int)(v38 + v57)) {
        ColorsWheelContext_create_cold_8();
      }
      uint64_t v59 = *(void *)v31 + v58;
      *(unsigned char *)uint64_t v59 = ~(v56 / v29);
      *(_WORD *)(v59 + 1) = -256;
      ++v57;
      v58 += 3;
      v56 += 255;
    }
    while (v29 != v57);
  }
  if (a8 < 0 && v36 > 1)
  {
    uint64_t v60 = 0;
    uint64_t v61 = v36 >> 1;
    int v62 = v19 + v21 + v23 + v25 + v27 + v29 - 1;
    do
    {
      long long v63 = (__int16 *)(*(void *)v31 + v60);
      uint64_t v64 = *(void *)v31 + 3 * v62;
      char v65 = *((unsigned char *)v63 + 2);
      __int16 v66 = *v63;
      char v67 = *(unsigned char *)(v64 + 2);
      *long long v63 = *(_WORD *)v64;
      *((unsigned char *)v63 + 2) = v67;
      *(_WORD *)uint64_t v64 = v66;
      *(unsigned char *)(v64 + 2) = v65;
      --v62;
      v60 += 3;
      --v61;
    }
    while (v61);
  }
  if (a8 >= 0) {
    int v68 = a8;
  }
  else {
    int v68 = -a8;
  }
  unsigned int v69 = v68 - 1;
  LODWORD(v70) = 6 - v68;
  if (a8 >= 0) {
    uint64_t v70 = v69;
  }
  else {
    uint64_t v70 = v70;
  }
  if ((int)v70 >= 1)
  {
    int v71 = 0;
    long long v72 = v104;
    do
    {
      int v73 = v71;
      int v75 = *v72++;
      int v74 = v75;
      v71 += v75;
      --v70;
    }
    while (v70);
    if (v71 > 0)
    {
      uint64_t v76 = *(__int16 **)v31;
      int v77 = v36 - 1;
      if (v71 != 1)
      {
        int v78 = 0;
        long long v79 = (__int16 *)((char *)v76 + 3 * (v71 - 1));
        int v80 = v73 + v74 - 2;
        long long v81 = *(__int16 **)v31;
        do
        {
          char v82 = *((unsigned char *)v81 + 2);
          __int16 v83 = *v81;
          char v84 = *((unsigned char *)v79 + 2);
          *long long v81 = *v79;
          *((unsigned char *)v81 + 2) = v84;
          *long long v79 = v83;
          *((unsigned char *)v79 + 2) = v82;
          long long v81 = (__int16 *)((char *)v81 + 3);
          long long v79 = (__int16 *)((char *)v79 - 3);
          BOOL v85 = ++v78 < v80--;
        }
        while (v85);
      }
      if (v71 < v77)
      {
        uint64_t v86 = (__int16 *)((char *)v76 + 3 * v77);
        uint64_t v87 = (__int16 *)((char *)v76 + 3 * v71);
        int v88 = v19 + v21 + v23 + v25 + v27 + v29 - 2;
        do
        {
          char v89 = *((unsigned char *)v87 + 2);
          __int16 v90 = *v87;
          char v91 = *((unsigned char *)v86 + 2);
          *uint64_t v87 = *v86;
          *((unsigned char *)v87 + 2) = v91;
          *uint64_t v86 = v90;
          *((unsigned char *)v86 + 2) = v89;
          uint64_t v87 = (__int16 *)((char *)v87 + 3);
          uint64_t v86 = (__int16 *)((char *)v86 - 3);
          BOOL v85 = ++v71 < v88--;
        }
        while (v85);
      }
      if (v36 >= 2)
      {
        int v92 = 0;
        int v93 = (__int16 *)((char *)v76 + 3 * (v36 - 1));
        int v94 = v19 + v21 + v23 + v25 + v27 + v29 - 2;
        do
        {
          char v95 = *((unsigned char *)v76 + 2);
          __int16 v96 = *v76;
          char v97 = *((unsigned char *)v93 + 2);
          *uint64_t v76 = *v93;
          *((unsigned char *)v76 + 2) = v97;
          *int v93 = v96;
          *((unsigned char *)v93 + 2) = v95;
          uint64_t v76 = (__int16 *)((char *)v76 + 3);
          int v93 = (__int16 *)((char *)v93 - 3);
          BOOL v85 = ++v92 < v94--;
        }
        while (v85);
      }
    }
  }
  void v31[4] = a9;
  return v31;
}

void ColorsWheelContext_destroy(void ***a1)
{
  if (a1)
  {
    free(**a1);
    free(*a1);
    *a1 = 0;
  }
}

uint64_t ColorsWheelContext_computeColorComponent(uint64_t a1, int a2, float a3, double a4, double a5, float a6)
{
  if (a3 < 0.0 || a3 > 1.0) {
    ColorsWheelContext_computeColorComponent_cold_1();
  }
  int v7 = *(_DWORD *)(a1 + 8);
  float v8 = *(float *)(a1 + 16);
  if (v8 != 0.0)
  {
    float v9 = v8 / 6.28318531;
    a3 = v9 + a3;
    float v10 = 1.0;
    if (a3 < 0.0)
    {
LABEL_9:
      a3 = a3 + v10;
      goto LABEL_10;
    }
    if (a3 > 1.0)
    {
      float v10 = -1.0;
      goto LABEL_9;
    }
  }
LABEL_10:
  float v11 = a3 * (float)(v7 - 1);
  int v12 = (int)v11;
  int v13 = ((int)v11 + 1) % v7;
  *(float *)&unsigned int v14 = (float)(int)v11;
  float v15 = v11 - *(float *)&v14;
  LOBYTE(v14) = *(unsigned char *)(*(void *)a1 + 3 * v12 + a2);
  LOBYTE(a6) = *(unsigned char *)(*(void *)a1 + 3 * v13 + a2);
  return (int)(float)((float)((float)(v15 * (float)((float)LODWORD(a6) / 255.0))
                                          + (float)((float)(1.0 - v15) * (float)((float)v14 / 255.0)))
                                  * 255.0);
}

uint64_t ColorsWheelContext_drawMatrix_f32(uint64_t result, int a2, int a3, float *a4, int a5, int a6, uint64_t a7, int a8, double a9, double a10, double a11, float a12, int a13)
{
  if (a3 >= 1)
  {
    int v13 = a4;
    uint64_t v14 = result;
    uint64_t v15 = 0;
    uint64_t v16 = a6;
    float v17 = 1.1755e-38;
    float v18 = 3.4028e38;
    uint64_t v19 = a4;
    uint64_t v20 = a2;
    do
    {
      uint64_t v21 = a2;
      int v22 = v19;
      if (a2 >= 1)
      {
        do
        {
          *(float *)&a10 = *v22;
          if (*v22 < v18) {
            float v18 = *v22;
          }
          if (*(float *)&a10 > v17) {
            float v17 = *v22;
          }
          int v22 = (float *)((char *)v22 + a6);
          --v21;
        }
        while (v21);
      }
      ++v15;
      uint64_t v19 = (float *)((char *)v19 + a5);
    }
    while (v15 != a3);
    uint64_t v23 = 0;
    float v24 = v17 - v18;
    uint64_t v35 = a8;
    int v25 = (unsigned char *)(a7 + 1);
    uint64_t v36 = a3;
    uint64_t v37 = a5;
    do
    {
      int v26 = v13;
      int v27 = v25;
      if (a2 >= 1)
      {
        do
        {
          float v28 = fmaxf(fminf((float)(*v26 - v18) / v24, 1.0), 0.0);
          *(v27 - 1) = ColorsWheelContext_computeColorComponent(v14, 0, v28, a10, a11, a12);
          *int v27 = ColorsWheelContext_computeColorComponent(v14, 1, v28, v29, v30, v31);
          uint64_t result = ColorsWheelContext_computeColorComponent(v14, 2, v28, v32, v33, v34);
          v27[1] = result;
          void v27[2] = -1;
          v27 += a13;
          int v26 = (float *)((char *)v26 + v16);
          --v20;
        }
        while (v20);
      }
      ++v23;
      uint64_t v20 = a2;
      v25 += v35;
      int v13 = (float *)((char *)v13 + v37);
    }
    while (v23 != v36);
  }
  return result;
}

void *FigCaptureCinematicFramingUpdateSampleBufferMetadata(void *a1, CMAttachmentBearerRef target, int a3)
{
  CMAttachmentBearerRef v3 = target;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (result)
  {
    uint64_t v6 = result;
    memset(&v54, 0, sizeof(v54));
    uint64_t v7 = *MEMORY[0x1E4F53DC8];
    float v8 = (const void *)[result objectForKeyedSubscript:*MEMORY[0x1E4F53DC8]];
    float v9 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    float v34 = v6;
    CMAttachmentBearerRef v35 = v3;
    if (v8)
    {
      uint64_t v32 = v7;
      DeepCopCGFloat y = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8, 1uLL);
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      uint64_t v39 = [DeepCopy countByEnumeratingWithState:&v50 objects:v57 count:16];
      if (v39)
      {
        uint64_t v37 = *(void *)v51;
        uint64_t v11 = *MEMORY[0x1E4F538F8];
        unsigned int v38 = DeepCopy;
        uint64_t v36 = *MEMORY[0x1E4F538F8];
        do
        {
          uint64_t v12 = 0;
          do
          {
            if (*(void *)v51 != v37) {
              objc_enumerationMutation(DeepCopy);
            }
            uint64_t v41 = v12;
            uint64_t v13 = *(void *)(*((void *)&v50 + 1) + 8 * v12);
            id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            long long v46 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            uint64_t v40 = v13;
            uint64_t v15 = objc_msgSend((id)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", v13), "objectForKeyedSubscript:", v11);
            uint64_t v16 = [v15 countByEnumeratingWithState:&v46 objects:v56 count:16];
            if (v16)
            {
              uint64_t v17 = v16;
              uint64_t v18 = *(void *)v47;
              do
              {
                for (uint64_t i = 0; i != v17; ++i)
                {
                  if (*(void *)v47 != v18) {
                    objc_enumerationMutation(v15);
                  }
                  uint64_t v20 = *(void *)(*((void *)&v46 + 1) + 8 * i);
                  FigCaptureUpdateToDisplayCoordinates(a1);
                  FigCaptureUpdateToDisplayCoordinates(a1);
                  FigCaptureUpdateToDisplayCoordinates(a1);
                  if (FigCFDictionaryGetCGRectIfPresent())
                  {
                    v59.origin.CGFloat x = 0.0;
                    v59.origin.CGFloat y = 0.0;
                    v59.size.double width = 1.0;
                    v59.size.double height = 1.0;
                    if (CGRectIntersectsRect(v54, v59)) {
                      [v14 addObject:v20];
                    }
                  }
                }
                uint64_t v17 = [v15 countByEnumeratingWithState:&v46 objects:v56 count:16];
              }
              while (v17);
            }
            DeepCopCGFloat y = v38;
            uint64_t v11 = v36;
            objc_msgSend((id)objc_msgSend(v38, "objectForKeyedSubscript:", v40, v32), "setObject:forKeyedSubscript:", v14, v36);
            uint64_t v12 = v41 + 1;
          }
          while (v41 + 1 != v39);
          uint64_t v39 = [v38 countByEnumeratingWithState:&v50 objects:v57 count:16];
        }
        while (v39);
      }
      uint64_t v6 = v34;
      objc_msgSend(v34, "setObject:forKeyedSubscript:", DeepCopy, v32, v32);

      float v9 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    }
    uint64_t v21 = *MEMORY[0x1E4F53DC0];
    int v22 = (const void *)[v6 objectForKeyedSubscript:*MEMORY[0x1E4F53DC0]];
    if (v22)
    {
      uint64_t v23 = (void *)CFPropertyListCreateDeepCopy(*v9, v22, 1uLL);
      id v24 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      uint64_t v25 = [v23 countByEnumeratingWithState:&v42 objects:v55 count:16];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = *(void *)v43;
        do
        {
          for (uint64_t j = 0; j != v26; ++j)
          {
            if (*(void *)v43 != v27) {
              objc_enumerationMutation(v23);
            }
            uint64_t v29 = *(void *)(*((void *)&v42 + 1) + 8 * j);
            FigCaptureUpdateToDisplayCoordinates(a1);
            FigCaptureUpdateToDisplayCoordinates(a1);
            FigCaptureUpdateToDisplayCoordinates(a1);
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              v60.origin.CGFloat x = 0.0;
              v60.origin.CGFloat y = 0.0;
              v60.size.double width = 1.0;
              v60.size.double height = 1.0;
              if (CGRectIntersectsRect(v54, v60)) {
                [v24 addObject:v29];
              }
            }
          }
          uint64_t v26 = [v23 countByEnumeratingWithState:&v42 objects:v55 count:16];
        }
        while (v26);
      }
      uint64_t v6 = v34;
      [v34 setObject:v24 forKeyedSubscript:v21];

      CMAttachmentBearerRef v3 = v35;
    }
    if (a3)
    {
      CFStringRef v30 = (const __CFString *)*MEMORY[0x1E4F531A8];
      float v31 = (void *)CMGetAttachment(v3, (CFStringRef)*MEMORY[0x1E4F531A8], 0);
      if (!v31) {
        float v31 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
      }
      objc_msgSend(v31, "setValuesForKeysWithDictionary:", objc_msgSend(a1, "manualFramingStateMetadata"));
      CMSetAttachment(v3, v30, v31, 1u);
    }
    return (void *)[v6 removeObjectForKey:*MEMORY[0x1E4F53260]];
  }
  return result;
}

uint64_t FigCaptureUpdateToDisplayCoordinates(void *a1)
{
  uint64_t result = FigCFDictionaryGetCGRectIfPresent();
  if (result)
  {
    objc_msgSend(a1, "warpCGRect:", 0.0, 0.0, 0.0, 0.0);
    return FigCFDictionarySetCGRect();
  }
  return result;
}

double ss_conformRectForMSR420vfPixelBuffer(__CVBuffer *a1, int a2, double a3, double a4, double a5, double a6)
{
  double v7 = psn_pixelBufferRect(a1);
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;
  if (a2) {
    int v15 = 2;
  }
  else {
    int v15 = 1;
  }
  float v14 = v7;
  double v16 = (double)(int)FigCaptureCeilFloatToMultipleOf(v15, v14);
  float v17 = v9;
  CGFloat v18 = (double)(int)FigCaptureCeilFloatToMultipleOf(v15, v17);
  float v19 = v11;
  double v20 = (double)(int)FigCaptureFloorFloatToMultipleOf(2, v19);
  float v21 = v13;
  double v22 = (double)(int)FigCaptureFloorFloatToMultipleOf(2, v21);
  v41.origin.CGFloat x = v16;
  double v36 = v18;
  v41.origin.CGFloat y = v18;
  v41.size.double width = v20;
  v41.size.double height = v22;
  double MaxX = CGRectGetMaxX(v41);
  v42.origin.CGFloat x = v7;
  v42.origin.CGFloat y = v9;
  v42.size.double width = v11;
  v42.size.double height = v13;
  if (MaxX > CGRectGetMaxX(v42))
  {
    v43.origin.CGFloat x = v7;
    v43.origin.CGFloat y = v9;
    v43.size.double width = v11;
    v43.size.double height = v13;
    double v20 = CGRectGetMaxX(v43) - v16;
  }
  v44.origin.CGFloat x = v16;
  v44.origin.CGFloat y = v36;
  v44.size.double width = v20;
  v44.size.double height = v22;
  double MaxY = CGRectGetMaxY(v44);
  v45.origin.CGFloat x = v7;
  v45.origin.CGFloat y = v9;
  v45.size.double width = v11;
  v45.size.double height = v13;
  if (MaxY > CGRectGetMaxY(v45))
  {
    v46.origin.CGFloat x = v7;
    v46.origin.CGFloat y = v9;
    v46.size.double width = v11;
    v46.size.double height = v13;
    double v22 = CGRectGetMaxY(v46) - v36;
  }
  float v25 = a5;
  double v26 = (double)(int)FigCaptureRoundFloatToMultipleOf(2, v25);
  float v27 = a6;
  FigCaptureRoundFloatToMultipleOf(2, v27);
  if (v20 >= v26) {
    double v28 = v26;
  }
  else {
    double v28 = v20;
  }
  double v29 = fmax(v28, 0.0);
  float v30 = a3;
  double v31 = (double)(int)FigCaptureRoundFloatToMultipleOf(v15, v30);
  float v32 = a4;
  FigCaptureRoundFloatToMultipleOf(v15, v32);
  v47.origin.CGFloat x = v16;
  v47.origin.CGFloat y = v36;
  v47.size.double width = v20;
  v47.size.double height = v22;
  double MinX = CGRectGetMinX(v47);
  v48.origin.CGFloat x = v16;
  v48.origin.CGFloat y = v36;
  v48.size.double width = v20;
  v48.size.double height = v22;
  double v34 = CGRectGetMaxX(v48) - v29;
  if (v34 >= v31) {
    double v34 = v31;
  }
  if (MinX < v34) {
    double MinX = v34;
  }
  v49.origin.CGFloat x = v16;
  v49.origin.CGFloat y = v36;
  v49.size.double width = v20;
  v49.size.double height = v22;
  CGRectGetMinY(v49);
  v50.origin.CGFloat x = v16;
  v50.origin.CGFloat y = v36;
  v50.size.double width = v20;
  v50.size.double height = v22;
  CGRectGetMaxY(v50);
  return MinX;
}

void captureDeferredPhotoProcessorServer_servedObjectRefconDestructor(CFTypeRef *a1)
{
  if (a1)
  {
    CFTypeRef v2 = *a1;
    if (*a1)
    {
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void (**)(CFTypeRef))(v4 + 24);
      if (v5) {
        v5(v2);
      }
      CFRelease(*a1);
    }
    free(a1);
  }
}

uint64_t captureDeferredPhotoProcessorServer_serializeNotification(int a1, int a2, int a3, CFDictionaryRef theDict, uint64_t a5, uint64_t a6)
{
  CFTypeRef cf = 0;
  if (!theDict) {
    return 0;
  }
  if (captureDeferredPhotoProcessor_createSerializedNotification(a3, theDict, a6, (CFMutableDictionaryRef *)&cf)|| FigXPCMessageSetCFDictionary())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 2;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t clspm_registerForNotifyName(const char *a1, dispatch_queue_t queue, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v9 = 0;
  double v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __clspm_registerForNotifyName_block_invoke;
  v8[3] = &unk_1E5C29318;
  v8[4] = a3;
  void v8[5] = &v9;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = __clspm_registerForNotifyName_block_invoke_2;
  handler[3] = &unk_1E5C29340;
  handler[4] = v8;
  if (!notify_register_dispatch(a1, &v12, queue, handler))
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __clspm_registerForNotifyName_block_invoke_3;
    void v6[3] = &unk_1E5C249F0;
    void v6[4] = v8;
    dispatch_async(queue, v6);
  }
  uint64_t v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1A5C369EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __clspm_registerForNotifyName_block_invoke(uint64_t a1)
{
  uint64_t state64 = 0;
  notify_get_state(*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), &state64);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __clspm_registerForNotifyName_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __clspm_registerForNotifyName_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t PixelSumASM(int8x16_t *a1, int a2, int a3, unsigned int a4, int32x4_t *a5, int32x4_t *a6)
{
  if ((a2 & 0x1F) != 0 || (a3 & 3) != 0 || (a1 & 0xF) != 0 || (a4 & 0xF) != 0) {
    return -1;
  }
  v70[6] = v6.i64[0];
  v70[7] = v7.i64[0];
  v70[4] = v8.i64[0];
  v70[5] = v9.i64[0];
  v70[2] = v10;
  v70[3] = v11;
  v70[0] = v12;
  v70[1] = v13;
  int v19 = (a3 + 255) >> 8;
  int v20 = a3;
  float v21 = a1;
  int32x4_t v23 = (int32x4_t)veorq_s8(v6, v6);
  int32x4_t v24 = (int32x4_t)veorq_s8(v7, v7);
  int8x16_t v25 = veorq_s8(v8, v8);
  int8x16_t v26 = veorq_s8(v9, v9);
  float v27 = a6;
  int v28 = a2;
  do
  {
    *float v27 = v23;
    v27[1] = v24;
    void v27[2] = (int32x4_t)v25;
    v27[3] = (int32x4_t)v26;
    v27 += 4;
    v28 -= 16;
  }
  while (v28);
  do
  {
    if (v20 > 256) {
      int v29 = 256;
    }
    else {
      int v29 = v20;
    }
    v20 -= v29;
    float v30 = (int8x16_t *)v70;
    int v31 = a2;
    int8x16_t v32 = veorq_s8((int8x16_t)v23, (int8x16_t)v23);
    int8x16_t v33 = veorq_s8((int8x16_t)v24, (int8x16_t)v24);
    do
    {
      *float v30 = v32;
      v30[1] = v33;
      v30 += 2;
      v31 -= 16;
    }
    while (v31);
    double v34 = v21;
    do
    {
      int v35 = (a2 + 2047) >> 11;
      int v36 = a2;
      uint64_t v37 = (uint16x8_t *)v70;
      int32x4_t v14 = (int32x4_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
      unsigned int v38 = v34;
      do
      {
        if (v36 > 2048) {
          int v39 = 2048;
        }
        else {
          int v39 = v36;
        }
        v36 -= v39;
        int16x8_t v15 = (int16x8_t)veorq_s8((int8x16_t)v15, (int8x16_t)v15);
        int16x8_t v16 = (int16x8_t)veorq_s8((int8x16_t)v16, (int8x16_t)v16);
        int16x8_t v17 = (int16x8_t)veorq_s8((int8x16_t)v17, (int8x16_t)v17);
        int16x8_t v18 = (int16x8_t)veorq_s8((int8x16_t)v18, (int8x16_t)v18);
        do
        {
          int8x16_t v40 = *v38;
          int8x16_t v41 = v38[1];
          CGRect v42 = (int8x16_t *)((char *)v38 + a4);
          int8x16_t v43 = *v42;
          int8x16_t v44 = v42[1];
          CGRect v45 = (int8x16_t *)((char *)v42 + a4);
          int8x16_t v46 = *v45;
          int8x16_t v47 = v45[1];
          CGRect v48 = (int8x16_t *)((char *)v45 + a4);
          int8x16_t v49 = v48[1];
          uint16x8_t v50 = vpadalq_u8((uint16x8_t)v18, *(uint8x16_t *)v48);
          uint16x8_t v51 = vpadalq_u8(vpadalq_u8(v37[1], (uint8x16_t)vzip2q_s8(v40, v43)), (uint8x16_t)vzip2q_s8(v46, *v48));
          uint16x8_t v52 = vpadalq_u8(vpadalq_u8(v37[2], (uint8x16_t)vzip1q_s8(v41, v44)), (uint8x16_t)vzip1q_s8(v47, v49));
          uint16x8_t v53 = vpadalq_u8(vpadalq_u8(v37[3], (uint8x16_t)vzip2q_s8(v41, v44)), (uint8x16_t)vzip2q_s8(v47, v49));
          *uint64_t v37 = vpadalq_u8(vpadalq_u8(*v37, (uint8x16_t)vzip1q_s8(v40, v43)), (uint8x16_t)vzip1q_s8(v46, *v48));
          v37[1] = v51;
          v37[2] = v52;
          v37[3] = v53;
          int16x8_t v15 = (int16x8_t)vpadalq_u8(vpadalq_u8((uint16x8_t)v15, (uint8x16_t)v40), (uint8x16_t)v41);
          int16x8_t v16 = (int16x8_t)vpadalq_u8(vpadalq_u8((uint16x8_t)v16, (uint8x16_t)v43), (uint8x16_t)v44);
          int16x8_t v17 = (int16x8_t)vpadalq_u8(vpadalq_u8((uint16x8_t)v17, (uint8x16_t)v46), (uint8x16_t)v47);
          int16x8_t v18 = (int16x8_t)vpadalq_u8(v50, (uint8x16_t)v49);
          unsigned int v38 = (int8x16_t *)((char *)v48 - 3 * a4 + 32);
          v37 += 4;
          v39 -= 32;
        }
        while (v39);
        int32x4_t v54 = (int32x4_t)vzip1q_s16(v15, v16);
        int32x4_t v55 = (int32x4_t)vzip2q_s16(v15, v16);
        int32x4_t v56 = (int32x4_t)vzip1q_s16(v17, v18);
        int32x4_t v57 = (int32x4_t)vzip2q_s16(v17, v18);
        uint16x8_t v58 = (uint16x8_t)vzip1q_s32(v54, v56);
        uint16x8_t v59 = (uint16x8_t)vzip2q_s32(v54, v56);
        uint16x8_t v60 = (uint16x8_t)vzip1q_s32(v55, v57);
        uint16x8_t v61 = (uint16x8_t)vzip2q_s32(v55, v57);
        int32x4_t v24 = vaddq_s32((int32x4_t)vaddl_high_u16(v58, v59), (int32x4_t)vaddl_high_u16(v60, v61));
        int32x4_t v23 = vaddq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v58.i8, *(uint16x4_t *)v59.i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v60.i8, *(uint16x4_t *)v61.i8)), v24);
        int32x4_t v14 = vaddq_s32(v14, v23);
        --v35;
      }
      while (v35);
      *a5++ = v14;
      double v34 = (int8x16_t *)((char *)v34 + 4 * a4);
      v29 -= 4;
    }
    while (v29);
    int v62 = (uint16x8_t *)v70;
    long long v63 = (uint32x4_t *)a6;
    int v64 = a2;
    do
    {
      uint16x8_t v65 = v62[1];
      uint32x4_t v66 = vaddw_high_u16(v63[1], *v62);
      uint32x4_t v67 = vaddw_u16(v63[2], *(uint16x4_t *)v65.i8);
      uint32x4_t v68 = vaddw_high_u16(v63[3], v65);
      *long long v63 = vaddw_u16(*v63, *(uint16x4_t *)v62->i8);
      v63[1] = v66;
      v63[2] = v67;
      v63[3] = v68;
      v62 += 2;
      v63 += 4;
      v64 -= 16;
    }
    while (v64);
    v21 += 16 * a4;
    --v19;
  }
  while (v19);
  return 0;
}

float MemDiff32(int32x4_t *a1, int32x4_t *a2, int a3)
{
  int32x4_t v3 = 0uLL;
  int32x4_t v4 = 0uLL;
  int v5 = a3 >> 3;
  do
  {
    int32x4_t v6 = *a1;
    int32x4_t v7 = a1[1];
    int32x4_t v8 = *a2;
    int32x4_t v9 = a2[1];
    a1 += 2;
    a2 += 2;
    int32x4_t v3 = vabaq_s32(v3, v6, v8);
    int32x4_t v4 = vabaq_s32(v4, v7, v9);
    --v5;
  }
  while (v5);
  int64x2_t v10 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v3, v4));
  LODWORD(result) = vpaddq_s64(v10, v10).u32[0];
  return result;
}

float MemDiffZeroMean32(int32x4_t *a1, unsigned int a2, int32x4_t *a3, unsigned int a4, int a5)
{
  int32x4_t v5 = 0uLL;
  int32x4_t v6 = 0uLL;
  int32x4_t v7 = vdupq_n_s32(a2);
  int32x4_t v8 = vdupq_n_s32(a4);
  int v9 = a5 >> 3;
  do
  {
    int32x4_t v10 = *a1;
    int32x4_t v11 = a1[1];
    int32x4_t v12 = *a3;
    int32x4_t v13 = a3[1];
    a1 += 2;
    a3 += 2;
    int32x4_t v5 = vabaq_s32(v5, vsubq_s32(v10, v7), vsubq_s32(v12, v8));
    int32x4_t v6 = vabaq_s32(v6, vsubq_s32(v11, v7), vsubq_s32(v13, v8));
    --v9;
  }
  while (v9);
  int64x2_t v14 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v5, v6));
  LODWORD(result) = vpaddq_s64(v14, v14).u32[0];
  return result;
}

float MemSum32(int32x4_t *a1, int a2)
{
  int32x4_t v2 = 0uLL;
  int32x4_t v3 = 0uLL;
  int v4 = a2 >> 3;
  do
  {
    int32x4_t v5 = *a1;
    int32x4_t v6 = a1[1];
    a1 += 2;
    int32x4_t v2 = vaddq_s32(v2, v5);
    int32x4_t v3 = vaddq_s32(v3, v6);
    --v4;
  }
  while (v4);
  int64x2_t v7 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v2, v3));
  LODWORD(result) = vpaddq_s64(v7, v7).u32[0];
  return result;
}

id sdpc_depthMetadataAttachmentDictionaryFromStereoDisparityMetadata(void *a1, CMAttachmentBearerRef target, int a3, int a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0))
  {
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    int32x4_t v8 = v7;
    if (a4) {
      int v9 = &unk_1EFB00470;
    }
    else {
      int v9 = &unk_1EFB00488;
    }
    [v7 setObject:v9 forKeyedSubscript:*MEMORY[0x1E4F558A8]];
    [v8 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F55870]];
    [v8 setObject:&unk_1EFB00470 forKeyedSubscript:*MEMORY[0x1E4F55860]];
    long long v74 = 0u;
    long long v75 = 0u;
    long long v73 = 0u;
    if (a3)
    {
      [a1 teleIntrinsicMatrix];
      DWORD2(v73) = v10;
      DWORD2(v74) = v11;
      *(void *)&long long v73 = v12;
      *(void *)&long long v74 = v13;
      DWORD2(v75) = v14;
      *(void *)&long long v75 = v15;
      [a1 teleIntrinsicMatrixReferenceDimensions];
    }
    else
    {
      [a1 wideIntrinsicMatrix];
      DWORD2(v73) = v18;
      DWORD2(v74) = v19;
      *(void *)&long long v73 = v20;
      *(void *)&long long v74 = v21;
      DWORD2(v75) = v22;
      *(void *)&long long v75 = v23;
      [a1 wideIntrinsicMatrixReferenceDimensions];
    }
    CGFloat v24 = v16;
    CGFloat v25 = v17;
    uint64_t v26 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v73 length:48];
    [v8 setObject:v26 forKeyedSubscript:*MEMORY[0x1E4F55878]];
    v79.double width = v24;
    v79.double height = v25;
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v79);
    [v8 setObject:DictionaryRepresentation forKeyedSubscript:*MEMORY[0x1E4F55880]];

    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    if (a3) {
      [a1 teleExtrinsicMatrix];
    }
    else {
      [a1 wideExtrinsicMatrix];
    }
    DWORD2(v69) = v29;
    DWORD2(v70) = v31;
    *(void *)&long long v69 = v28;
    *(void *)&long long v70 = v30;
    DWORD2(v71) = v33;
    DWORD2(v72) = v35;
    *(void *)&long long v71 = v32;
    *(void *)&long long v72 = v34;
    uint64_t v36 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v69 length:64];
    [v8 setObject:v36 forKeyedSubscript:*MEMORY[0x1E4F55868]];
    if (a3) {
      [a1 telePixelSizeInMillimeters];
    }
    else {
      [a1 widePixelSizeInMillimeters];
    }
    uint64_t v37 = objc_msgSend(NSNumber, "numberWithFloat:");
    [v8 setObject:v37 forKeyedSubscript:*MEMORY[0x1E4F558A0]];
    if (a3) {
      unsigned int v38 = (void *)[a1 teleLensDistortionCoefficients];
    }
    else {
      unsigned int v38 = (void *)[a1 wideLensDistortionCoefficients];
    }
    int v39 = v38;
    if (v38)
    {
      int8x16_t v40 = objc_msgSend(MEMORY[0x1E4F1CA58], "dataWithLength:", 4 * objc_msgSend(v38, "count"));
      int8x16_t v41 = (_DWORD *)[v40 mutableBytes];
      long long v65 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      uint64_t v42 = [v39 countByEnumeratingWithState:&v65 objects:v77 count:16];
      if (v42)
      {
        uint64_t v43 = v42;
        uint64_t v44 = *(void *)v66;
        do
        {
          for (uint64_t i = 0; i != v43; ++i)
          {
            if (*(void *)v66 != v44) {
              objc_enumerationMutation(v39);
            }
            [*(id *)(*((void *)&v65 + 1) + 8 * i) floatValue];
            *v41++ = v46;
          }
          uint64_t v43 = [v39 countByEnumeratingWithState:&v65 objects:v77 count:16];
        }
        while (v43);
      }
      [v8 setObject:v40 forKeyedSubscript:*MEMORY[0x1E4F55898]];
    }
    if (a3) {
      int8x16_t v47 = (void *)[a1 teleInverseLensDistortionCoefficients];
    }
    else {
      int8x16_t v47 = (void *)[a1 wideInverseLensDistortionCoefficients];
    }
    CGRect v48 = v47;
    if (v47)
    {
      int8x16_t v49 = objc_msgSend(MEMORY[0x1E4F1CA58], "dataWithLength:", 4 * objc_msgSend(v47, "count"));
      uint16x8_t v50 = (_DWORD *)[v49 mutableBytes];
      long long v61 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      uint64_t v51 = [v48 countByEnumeratingWithState:&v61 objects:v76 count:16];
      if (v51)
      {
        uint64_t v52 = v51;
        uint64_t v53 = *(void *)v62;
        do
        {
          for (uint64_t j = 0; j != v52; ++j)
          {
            if (*(void *)v62 != v53) {
              objc_enumerationMutation(v48);
            }
            [*(id *)(*((void *)&v61 + 1) + 8 * j) floatValue];
            *v50++ = v55;
          }
          uint64_t v52 = [v48 countByEnumeratingWithState:&v61 objects:v76 count:16];
        }
        while (v52);
      }
      [v8 setObject:v49 forKeyedSubscript:*MEMORY[0x1E4F55888]];
    }
    if (a3) {
      [a1 teleLensDistortionOpticalCenter];
    }
    else {
      [a1 wideLensDistortionOpticalCenter];
    }
    CFDictionaryRef v58 = CGPointCreateDictionaryRepresentation(*(CGPoint *)&v56);
    [v8 setObject:v58 forKeyedSubscript:*MEMORY[0x1E4F55890]];

    int v59 = [a1 version];
    objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v59 | (FigDepthDataGetCurrentMajorVersion() << 16)), *MEMORY[0x1E4F558B0]);
  }
  else
  {
    int32x4_t v8 = 0;
  }
  return v8;
}

uint64_t FigCaptureReferenceFrameSelection(const __CFArray *a1, int *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  *a2 = -1;
  if (a1 && (int Count = CFArrayGetCount(a1), Count > 0) && Count <= 7)
  {
    CFIndex v5 = 0;
    int32x4_t v6 = (const void *)*MEMORY[0x1E4F53CE8];
    uint64_t v7 = Count;
    int32x4_t v8 = v17;
    do
    {
      ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v5);
      if (ValueAtIndex)
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v6);
        if (Value) {
          CFNumberGetValue(Value, kCFNumberSInt64Type, v8);
        }
      }
      ++v5;
      int32x4_t v8 = (_OWORD *)((char *)v8 + 8);
    }
    while (v7 != v5);
    uint64_t v11 = 0;
    int64_t v12 = 0x8000000000000000;
    int v13 = -1;
    do
    {
      int64_t v14 = *((void *)v17 + v11);
      BOOL v15 = v12 < v14;
      if (v12 <= v14) {
        int64_t v12 = *((void *)v17 + v11);
      }
      if (v15) {
        int v13 = v11;
      }
      ++v11;
    }
    while (v7 != v11);
    *a2 = v13;
    if (v13 == -1)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigCaptureFrameMetadataIsUsableForPTSBasedReferenceFrameSelection(CFArrayRef theArray, int *a2)
{
  if (checkFigCaptureSampleBufferProcessorCommonTrace_checkFigCaptureSampleBufferProcessorCommonTraceOnceToken == -1)
  {
    if (!theArray) {
      goto LABEL_40;
    }
  }
  else
  {
    dispatch_once(&checkFigCaptureSampleBufferProcessorCommonTrace_checkFigCaptureSampleBufferProcessorCommonTraceOnceToken, &__block_literal_global_75);
    if (!theArray)
    {
LABEL_40:
      fig_log_get_emitter();
      FigDebugAssert3();
      int v20 = 0;
      if (a2) {
        goto LABEL_34;
      }
      goto LABEL_35;
    }
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    goto LABEL_40;
  }
  int v22 = a2;
  int v4 = 0;
  int v5 = 0;
  CFIndex v6 = 0;
  uint64_t v7 = 0;
  int v8 = 0;
  double v9 = 0.0;
  keCGFloat y = (void *)*MEMORY[0x1E4F54280];
  CGFloat v24 = (void *)*MEMORY[0x1E4F54290];
  uint64_t v28 = (void *)*MEMORY[0x1E4F54128];
  float v27 = (void *)*MEMORY[0x1E4F53EC0];
  uint64_t v26 = (void *)*MEMORY[0x1E4F53EE0];
  int v10 = (const void *)*MEMORY[0x1E4F54058];
  uint64_t v23 = (void *)*MEMORY[0x1E4F53D98];
  float v11 = 0.0;
  int64_t v12 = (const void *)*MEMORY[0x1E4F53E48];
  do
  {
    ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v6);
    if (CFDictionaryGetValue(ValueAtIndex, key))
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v24);
      if (Value)
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        if ((LOBYTE(valuePtr) & 0x11) != 1)
        {
          int v20 = 2;
          goto LABEL_32;
        }
      }
    }
    BOOL v15 = CFDictionaryGetValue(ValueAtIndex, v28);
    if (!v15) {
      goto LABEL_38;
    }
    double v16 = v15;
    if (v7 && !CFEqual(v7, v15))
    {
      int v20 = 4;
LABEL_32:
      a2 = v22;
      goto LABEL_33;
    }
    if (!CFDictionaryGetValue(ValueAtIndex, v27)
      || !CFDictionaryGetValue(ValueAtIndex, v26)
      || (int v31 = 0, (v17 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v10)) == 0)
      && (CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v23)) == 0
      || (CFNumberGetValue(v17, kCFNumberSInt32Type, &v31),
          double valuePtr = 0.0,
          (CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v12)) == 0)
      || (CFNumberGetValue(v18, kCFNumberDoubleType, &valuePtr), FigCaptureComputeImageGainFromMetadata()))
    {
LABEL_38:
      fig_log_get_emitter();
      FigDebugAssert3();
      int v20 = 1;
      goto LABEL_32;
    }
    if (v6)
    {
      int v19 = v31 - v8;
      if (v31 - v8 < 0) {
        int v19 = v8 - v31;
      }
      v4 += v19;
      if (vabdd_f64(valuePtr, v9) > 0.0000999999975) {
        ++v5;
      }
      float v11 = v11 + vabds_f32(0.0, 0.0);
    }
    ++v6;
    uint64_t v7 = v16;
    double v9 = valuePtr;
    int v8 = v31;
  }
  while (Count != v6);
  if (v5 <= 2) {
    int v20 = 8 * (v4 > 3);
  }
  else {
    int v20 = (8 * (v4 > 3)) | 0x10;
  }
  a2 = v22;
  if (v11 >= 3.0)
  {
    v20 |= 0x20u;
    if (v22) {
      goto LABEL_34;
    }
    goto LABEL_35;
  }
LABEL_33:
  if (!a2) {
    goto LABEL_35;
  }
LABEL_34:
  *a2 = v20;
LABEL_35:
  if (v20) {
    return 4294954516;
  }
  else {
    return 0;
  }
}

uint64_t FigCapturePTSBasedReferenceFrameSelection(int a1, const __CFArray *a2, CMTime *a3, int a4, _DWORD *a5, int *a6)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (checkFigCaptureSampleBufferProcessorCommonTrace_checkFigCaptureSampleBufferProcessorCommonTraceOnceToken != -1) {
    dispatch_once(&checkFigCaptureSampleBufferProcessorCommonTrace_checkFigCaptureSampleBufferProcessorCommonTraceOnceToken, &__block_literal_global_75);
  }
  CMTime time = *a3;
  double Seconds = CMTimeGetSeconds(&time);
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    if (Count >= 5) {
      goto LABEL_55;
    }
  }
  else
  {
    CFIndex Count = 0;
  }
  if (a4 <= 0 || Count < a4) {
    goto LABEL_55;
  }
  if (!a1)
  {
    IsUsableForPTSBasedReferenceFrameSelectiouint64_t n = FigCaptureFrameMetadataIsUsableForPTSBasedReferenceFrameSelection(a2, 0);
    if (IsUsableForPTSBasedReferenceFrameSelection)
    {
      uint64_t v42 = IsUsableForPTSBasedReferenceFrameSelection;
      fig_log_get_emitter();
      goto LABEL_75;
    }
  }
  if (Count < 1)
  {
LABEL_55:
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  CFIndex v15 = 0;
  double v16 = (const void *)*MEMORY[0x1E4F530C0];
  int v17 = -1;
  double v18 = 1.79769313e308;
  do
  {
    ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v15);
    if (ValueAtIndex)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, v16);
      if (!Value) {
        return 4294954516;
      }
      CMTimeMakeFromDictionary(&time, Value);
      double v21 = vabdd_f64(CMTimeGetSeconds(&time), Seconds);
      if (v21 < v18)
      {
        int v17 = v15;
        double v18 = v21;
      }
    }
    ++v15;
  }
  while (Count != v15);
  if (v17 == -1) {
    goto LABEL_55;
  }
  time.unsigned int value = 0;
  *(void *)&time.timescale = 0;
  if (!a2 || (int v22 = CFArrayGetCount(a2), v22 <= 0))
  {
    fig_log_get_emitter();
LABEL_58:
    FigDebugAssert3();
    goto LABEL_59;
  }
  int v45 = a4;
  int v46 = a6;
  int8x16_t v47 = a5;
  if (v22 > 0xB)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_59:
    uint64_t v42 = FigSignalErrorAt();
    if (!v42) {
      return v42;
    }
    fig_log_get_emitter();
LABEL_75:
    FigDebugAssert3();
    return v42;
  }
  CFIndex v23 = 0;
  keCGFloat y = (void *)*MEMORY[0x1E4F53EC0];
  CGRect v48 = (void *)*MEMORY[0x1E4F53ED0];
  CGFloat v24 = (const void *)*MEMORY[0x1E4F53EE0];
  int v44 = v22;
  uint64_t v25 = v22;
  int v26 = -1;
  float v27 = 1.1755e-38;
  do
  {
    CFDictionaryRef v28 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v23);
    if (v28)
    {
      CFDictionaryRef v29 = v28;
      uint64_t v51 = 0;
      CFArrayRef v30 = (const __CFArray *)CFDictionaryGetValue(v28, key);
      if (!v30) {
        goto LABEL_36;
      }
      CFArrayRef v31 = v30;
      CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(v29, v48);
      int valuePtr = 0;
      if (v32) {
        CFNumberGetValue(v32, kCFNumberSInt32Type, &valuePtr);
      }
      if (CFArrayGetCount(v31) >= 1)
      {
        CFIndex v33 = 0;
        uint64_t v34 = 0;
        do
        {
          CFNumberRef v35 = (const __CFNumber *)CFArrayGetValueAtIndex(v31, v33);
          CFNumberGetValue(v35, kCFNumberSInt64Type, &v51);
          BOOL v36 = valuePtr == 2 && v33 == 0;
          uint64_t v37 = (uint64_t)(float)((float)v51 * 0.1);
          if (!v36) {
            uint64_t v37 = 0;
          }
          v34 += v51 + v37;
          ++v33;
        }
        while (CFArrayGetCount(v31) > v33);
      }
      else
      {
LABEL_36:
        uint64_t v34 = 0;
      }
      CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(v29, v24);
      if (v38)
      {
        int valuePtr = 0;
        CFNumberGetValue(v38, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr) {
          v34 >>= 2;
        }
      }
      if (!v34) {
        goto LABEL_71;
      }
      unsigned int v39 = v23 - v17;
      if ((int)v23 - v17 < 0) {
        unsigned int v39 = v17 - v23;
      }
      float v40 = findReferenceFrameIndex_kDistanceFromCenterWeights[v39] * (float)v34;
      *((float *)&time.value + v23) = v40;
      if (v40 > v27)
      {
        int v26 = v23;
        float v27 = v40;
      }
    }
    ++v23;
  }
  while (v23 != v25);
  if (v26 == -1)
  {
LABEL_71:
    fig_log_get_emitter();
    goto LABEL_58;
  }
  LODWORD(v41) = v26;
  if (v45 == 1) {
    goto LABEL_63;
  }
  if (v45 != 2)
  {
    if (v26 >= v45)
    {
      LODWORD(v41) = v26 - v45 + 1;
      if (!v46) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  if (!v26)
  {
LABEL_62:
    LODWORD(v41) = 0;
    goto LABEL_63;
  }
  uint64_t v41 = v26 - 1;
  if (v26 != v44 - 1)
  {
    if (*((float *)&time.value + v41) < *((float *)&time.value + v26 + 1)) {
      LODWORD(v41) = v26;
    }
    if (!v46) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_63:
  if (v46) {
LABEL_64:
  }
    *int v46 = v26;
LABEL_65:
  if (v47) {
    *int8x16_t v47 = v41;
  }
  return 0;
}

uint64_t hallPositionIndexFromPortType(const void *a1, _DWORD *a2)
{
  if (a1 && a2)
  {
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52DD8]))
    {
      *a2 = 0;
      return 0;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52DF0]))
    {
      *a2 = 1;
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t bravoTransitionCameraIndexFromPortType(const void *a1, int *a2)
{
  if (a1 && a2)
  {
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52DD8]))
    {
      *a2 = 0;
      return 0;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52DF0]))
    {
      int v4 = 1;
LABEL_9:
      *a2 = v4;
      return 0;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F52DE8]))
    {
      int v4 = 2;
      goto LABEL_9;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

float FigMotionAlign3x1Vector(float *a1, double *a2)
{
  return a2[1] * a1[1] + *a1 * *a2 + a1[2] * a2[2];
}

int *FigMotionIncreaseRingIndex(int *result, int a2)
{
  *float result = (*result + 1) % a2;
  return result;
}

uint64_t FigMotionCalculateAdjustedFocusPosition(int *a1, float a2, float a3)
{
  float v3 = (float)*a1 - (float)(a3 * a2);
  if (v3 >= 0.0)
  {
    if (v3 <= 255.0) {
      int v4 = (int)(float)(v3 + 0.5);
    }
    else {
      int v4 = 255;
    }
  }
  else
  {
    int v4 = 0;
  }
  *a1 = v4;
  return 0;
}

uint64_t FigMotionGetGravityZ(const __CFDictionary *a1, float *a2)
{
  int64_t v12 = 0;
  if (a1)
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F53F90]);
    if (Value)
    {
      uint64_t v4 = FigMotionISPMotionDataFromCFData(Value, &v12);
      if (v4)
      {
        uint64_t v10 = v4;
        fig_log_get_emitter();
        FigDebugAssert3();
        return v10;
      }
      int v5 = *((_DWORD *)v12 + 1);
      if (v5 < 1)
      {
        float v7 = 0.0;
        if (!v5) {
          goto LABEL_8;
        }
      }
      else
      {
        CFIndex v6 = v12 + 44;
        float v7 = 0.0;
        uint64_t v8 = *((unsigned int *)v12 + 1);
        do
        {
          int v9 = *(_DWORD *)v6;
          v6 += 40;
          float v7 = v7 + (float)((float)v9 * 0.000015259);
          --v8;
        }
        while (v8);
      }
      float v7 = v7 / (float)v5;
LABEL_8:
      uint64_t v10 = 0;
      *a2 = v7;
      return v10;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionComputeBlurScores(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFArrayRef v4 = (const __CFArray *)MEMORY[0x1F4188790](a1, a2, a3, a4);
  unsigned int v57 = v8;
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  float v70 = v9;
  if (!v4 || (uint64_t v10 = v7, v11 = v6, v12 = v5, v13 = v4, Count = CFArrayGetCount(v4), Count <= 0))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  uint64_t v56 = v10;
  bzero(v68, 0x2818uLL);
  bzero(v67, 0x4038uLL);
  theArraCGFloat y = v13;
  CFIndex v60 = CFArrayGetCount(v13);
  if (v60 <= 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v49 = FigSignalErrorAt();
LABEL_53:
    uint64_t v29 = v56;
    if (!v49)
    {
LABEL_14:
      CFIndex v30 = 0;
      float v55 = v70;
      keCGFloat y = (void *)*MEMORY[0x1E4F530C0];
      while (1)
      {
        *(_DWORD *)(v29 + 4 * v30) = 2139095039;
        ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v30);
        double v65 = 0.0;
        double v66 = 0.0;
        double v64 = 0.0;
        if (v55 <= 0.0 && !FigCFDictionaryGetFloatIfPresent()
          || (FigCFDictionaryGetDoubleIfPresent(),
              FigCFDictionaryGetDoubleIfPresent(),
              double v65 = v65 / 1000000.0,
              (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, key)) == 0))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          return FigSignalErrorAt();
        }
        CMTimeMakeFromDictionary(&time, Value);
        double Seconds = CMTimeGetSeconds(&time);
        FigMotionComputeFramePTSOffsetFromISPCrop(ValueAtIndex, &v64);
        double v34 = v64;
        long long v62 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
        uint64_t SensorValidCropRect = FigMotionGetSensorValidCropRect(ValueAtIndex);
        if (SensorValidCropRect)
        {
          uint64_t v49 = SensorValidCropRect;
          fig_log_get_emitter();
          goto LABEL_50;
        }
        CFIndex v58 = v30;
        unsigned int v36 = *((double *)&v62 + 1);
        if (v57 < 2)
        {
          unsigned int v37 = v36 >> 1;
          unsigned int v61 = *((double *)&v62 + 1);
        }
        else
        {
          unsigned int v37 = 0;
          unsigned int v61 = vcvtms_u32_f32((float)(v36 - 1) / (float)(v57 - 1));
        }
        unsigned int v38 = v11;
        float v39 = 0.0;
        if (v37 < v36) {
          break;
        }
LABEL_41:
        uint64_t v29 = v56;
        *(float *)(v56 + 4 * v5_Block_object_dispose(&STACK[0x458], 8) = v39 / (float)v57;
        CFIndex v30 = v58 + 1;
        if (v58 + 1 == Count) {
          return 0;
        }
      }
      double v40 = Seconds + v34;
      while (1)
      {
        if (v38)
        {
          double v41 = v40 - v66 + v65 * (double)(int)v37 / (double)(int)(v36 - 1);
          memset(v75, 0, sizeof(v75));
          memset(v74, 0, sizeof(v74));
          float64x2_t v77 = 0u;
          memset(v78, 0, sizeof(v78));
          memset(v76, 0, 144);
          double v42 = v66 / (double)v11;
          BOOL v79 = v12 - 3 < 2;
          *((float *)v76 + 1) = v70;
          float v43 = 0.0;
          unsigned int v44 = v38;
          while (1)
          {
            FigMotionComputeQuaternionForTimeStamp((uint64_t)v68, v75, v69, v41);
            if (!v69[0] || (FigMotionComputeQuaternionForTimeStamp((uint64_t)v68, v74, v69, v42 + v41), !v69[0]))
            {
              fig_log_get_emitter();
              FigDebugAssert3();
              goto LABEL_38;
            }
            float32x2_t v80 = *(float32x2_t *)&v75[0].f64[0];
            float64x2_t v81 = vnegq_f64(*(float64x2_t *)((char *)v75 + 8));
            float64_t v82 = -v75[1].f64[1];
            v73[0] = FigMotionMultiplyQuaternions((double *)&v80, (double *)v74);
            v73[1] = v45;
            v73[2] = v46;
            v73[3] = v47;
            float32x2_t v80 = 0;
            FigMotionComputeTranslationFromCameraMotion(v73, (uint64_t)&v77, (uint64_t)v76, (float *)&v80);
            if (v12 - 2 > 2)
            {
              float32x2_t v72 = 0;
              float32x2_t v71 = 0;
              uint64_t v51 = FigMotionComputeLensMovementAndSagForTimeStamp((uint64_t)v67, &v72, 0, v12, v41, 1.0);
              if (v51)
              {
                uint64_t v49 = v51;
                fig_log_get_emitter();
LABEL_48:
                FigDebugAssert3();
                goto LABEL_49;
              }
              uint64_t v49 = FigMotionComputeLensMovementAndSagForTimeStamp((uint64_t)v67, &v71, 0, v12, v42 + v41, 1.0);
              if (v49)
              {
                fig_log_get_emitter();
                goto LABEL_48;
              }
              float32x2_t v50 = vsub_f32(v80, vsub_f32(v71, v72));
            }
            else
            {
              uint64_t v49 = v48;
              float32x2_t v50 = v80;
            }
            float v43 = v43 + sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v50, v50).i32[1]), v50.f32[0], v50.f32[0]));
            double v41 = v42 + v41;
            if (!--v44)
            {
              if (v49) {
                goto LABEL_49;
              }
              goto LABEL_35;
            }
          }
        }
        fig_log_get_emitter();
        FigDebugAssert3();
        float v43 = 0.0;
LABEL_38:
        uint64_t v49 = FigSignalErrorAt();
        if (v49) {
          break;
        }
LABEL_35:
        float v39 = v39 + v43;
        v37 += v61;
        unsigned int v38 = v11;
        if (v37 >= v36) {
          goto LABEL_41;
        }
      }
LABEL_49:
      fig_log_get_emitter();
      goto LABEL_50;
    }
  }
  else
  {
    bzero(&v77, 0x14A0uLL);
    bzero(v76, 0x2FD0uLL);
    unsigned int v14 = 0;
    CFIndex v15 = 0;
    unsigned int v16 = v68[0];
    while (1)
    {
      CFDictionaryRef v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v15);
      if (!v17)
      {
        LODWORD(v68[0]) = v16;
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v49 = FigSignalErrorAt();
        goto LABEL_53;
      }
      v80.i32[0] = 0;
      LODWORD(v75[0].f64[0]) = 0;
      uint64_t MotionDataFromISP = FigMotionGetMotionDataFromISP(v17, &v77, 0, 110, (int *)&v80, 0, (uint64_t)v76, 510, (int *)v75);
      if (MotionDataFromISP) {
        break;
      }
      uint64_t v19 = v80.u32[0];
      int v20 = (double *)v78;
      if (v80.i32[0] >= 1)
      {
        do
        {
          *(double *)&v68[v14 + 1] = *(v20 - 1) + -0.005;
          double v21 = &v68[4 * v14 + 257];
          long long v22 = *(_OWORD *)v20;
          long long v23 = *((_OWORD *)v20 + 1);
          v20 += 6;
          *double v21 = v22;
          v21[1] = v23;
          unsigned int v16 = (v16 + 1);
          unsigned int v14 = v16;
          --v19;
        }
        while (v19);
      }
      uint64_t v24 = LODWORD(v75[0].f64[0]);
      if (SLODWORD(v75[0].f64[0]) >= 1)
      {
        int v25 = v67[v12];
        int v26 = (uint64_t *)v76 + 1;
        do
        {
          float v27 = &v67[1024 * (unint64_t)v12 + 2 * v25];
          *((void *)v27 + 1) = *(v26 - 1);
          uint64_t v28 = *v26;
          v26 += 3;
          *((void *)v27 + 1025) = v28;
          int v25 = ((unsigned __int16)v67[v12] + 1) & 0x1FF;
          v67[v12] = v25;
          --v24;
        }
        while (v24);
      }
      if (++v15 == v60)
      {
        LODWORD(v68[0]) = v16;
        uint64_t v29 = v56;
        goto LABEL_14;
      }
    }
    uint64_t v49 = MotionDataFromISP;
    LODWORD(v68[0]) = v16;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  fig_log_get_emitter();
LABEL_50:
  FigDebugAssert3();
  return v49;
}

uint64_t FigMotionComputeQuaternionAndAttitudeFromArray(const __CFArray *a1, double *a2, long double *a3, double a4)
{
  if (!a1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_16:
    uint64_t v20 = FigSignalErrorAt();
    if (v20) {
      goto LABEL_14;
    }
LABEL_19:
    double v22 = a2[2];
    *a3 = -atan2(a2[1] * (a2[3] + a2[3]) - *a2 * (v22 + v22), 1.0 - a2[1] * (a2[1] + a2[1]) - v22 * (v22 + v22));
    a3[1] = asin(*a2 * (a2[1] + a2[1]) + a2[2] * (a2[3] + a2[3]));
    double v23 = a2[3];
    uint64_t v20 = 0;
    a3[2] = -atan2(a2[1] * (a2[2] + a2[2]) - *a2 * (v23 + v23), 1.0 - a2[1] * (a2[1] + a2[1]) - v23 * (v23 + v23));
    return v20;
  }
  int Count = CFArrayGetCount(a1);
  *(_OWORD *)buffer = 0u;
  long long v27 = 0u;
  if (Count < 1) {
    goto LABEL_15;
  }
  CFIndex v9 = 0;
  uint64_t v10 = Count;
  float v11 = 1.0;
  int v12 = -1;
  do
  {
    ValueAtIndeCGFloat x = (const __CFArray *)CFArrayGetValueAtIndex(a1, v9);
    if (ValueAtIndex)
    {
      CFArrayRef v14 = ValueAtIndex;
      if ((int)CFArrayGetCount(ValueAtIndex) >= 1)
      {
        CFNumberRef v15 = (const __CFNumber *)CFArrayGetValueAtIndex(v14, 0);
        if (v15)
        {
          double valuePtr = 0.0;
          CFNumberGetValue(v15, kCFNumberDoubleType, &valuePtr);
          float v16 = valuePtr - a4;
          float v17 = fabsf(v16);
          if (v11 > v17)
          {
            CFDataRef v18 = (const __CFData *)CFArrayGetValueAtIndex(v14, 2);
            if (v18)
            {
              CFDataRef v19 = v18;
              v28.length = CFDataGetLength(v18);
              v28.locatiouint64_t n = 0;
              CFDataGetBytes(v19, v28, buffer);
              float v11 = v17;
              int v12 = v9;
            }
          }
        }
      }
    }
    ++v9;
  }
  while (v10 != v9);
  if (v12 < 0)
  {
LABEL_15:
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_16;
  }
  if (v11 <= 0.011)
  {
    long long v21 = v27;
    *(_OWORD *)a2 = *(_OWORD *)buffer;
    *((_OWORD *)a2 + 1) = v21;
    goto LABEL_19;
  }
  low_freq_error_logging();
  uint64_t v20 = 4294954513;
LABEL_14:
  fig_log_get_emitter();
  FigDebugAssert3();
  return v20;
}

uint64_t FigMotionClearFocalLengthData(uint64_t a1)
{
  if (a1)
  {
    memset_pattern16((void *)(a1 + 480), &unk_1A5F0C840, 0xCuLL);
    memset_pattern16((void *)(a1 + 492), &unk_1A5F0C840, 0xCuLL);
    memset_pattern16((void *)(a1 + 504), &unk_1A5F0C840, 0xCuLL);
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionStashQuadraBinningFactor(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    FigCFDictionaryGetInt32IfPresent();
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionStashFocalLengthData(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    FigCFDictionaryGetFloatIfPresent();
    FigCFDictionaryGetFloatIfPresent();
    FigCFDictionaryGetFloatIfPresent();
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionUpdateBaseZoomFactorAdjustment(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    FigCFDictionaryGetFloatIfPresent();
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeBravoTranslation(float a1, float a2, uint64_t a3, uint64_t a4, unsigned int a5, float *a6, float *a7)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  float v34 = 0.0;
  if (!FigCFDictionaryGetFloatIfPresent())
  {
    if (!FigCFDictionaryGetFloatIfPresent() && !FigCFDictionaryGetFloatIfPresent())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
    float v34 = 0.0 * a2;
  }
  uint64_t v13 = 0;
  uint64_t v14 = *(unsigned int *)(a4 + 440);
  uint64_t v15 = *(void *)(a4 + 4 + 8 * v14);
  uint64_t v38 = *(void *)(a4 + 4 + 8 * a5);
  v39[0] = v15;
  uint64_t v37 = 0;
  float v17 = *a6;
  float v16 = a6[1];
  *(float *)unsigned int v36 = *a6;
  *(float *)&v36[1] = v16;
  uint64_t v35 = 0;
  uint64_t v18 = BravoCurrentToReferenceMapping[3 * v14 + a5];
  float v19 = (float)(*(float *)(a4 + 4 * v18 + 76) * *(float *)(a4 + 40 + 4 * a5)) / *(float *)(a4 + 40 + 4 * v14);
  char v20 = 1;
  float v21 = (float)((float)*(int *)(a4 + 64 + 4 * a5) * a1) / (float)*(int *)(a4 + 64 + 4 * v14);
  do
  {
    float v22 = *(float *)&v36[v13];
    char v23 = v20;
    *((float *)&v37 + v13) = v22 + (float)(a1 * *((float *)&v39[-1] + v13));
    *(float *)&v36[v13 - 2] = v22 + (float)(v19 * (float)(v21 * *((float *)v39 + v13)));
    uint64_t v13 = 1;
    char v20 = 0;
  }
  while ((v23 & 1) != 0);
  uint64_t v24 = (float *)(a4 + 48 * (int)v18);
  float v25 = v17 - *(float *)&v35;
  float v26 = v16 - *((float *)&v35 + 1);
  float v27 = (float)((float)((float)(v16 - *((float *)&v35 + 1)) * v24[35]) + (float)(v24[34] * (float)(v17 - *(float *)&v35)))
      + (float)(v24[36] * v34);
  float v28 = 0.0;
  if (fabsf(v27) <= 0.00000001)
  {
    float v29 = 0.0;
  }
  else
  {
    float v29 = 0.0;
    if (v34 > 0.00000001)
    {
      float v31 = v24[26];
      float v32 = v24[27];
      CFIndex v30 = v24 + 26;
      float v29 = (float)(*(float *)&v37
                  + (float)((float)(v34
                                  * (float)((float)((float)(v26 * v32) + (float)(v31 * v25)) + (float)(v30[2] * v34)))
                          / v27))
          - v17;
      float v28 = (float)(*((float *)&v37 + 1)
                  + (float)((float)(v34
                                  * (float)((float)((float)(v26 * v30[5]) + (float)(v30[4] * v25))
                                          + (float)(v30[6] * v34)))
                          / v27))
          - v16;
    }
  }
  uint64_t result = 0;
  *a7 = v29;
  a7[1] = v28;
  return result;
}

uint64_t FigMotionGetTimeStampAtPositionRatio(const __CFDictionary *a1, double *a2, float a3)
{
  if (a1 && a2)
  {
    double v13 = 0.0;
    if (!FigCFDictionaryGetDoubleIfPresent()) {
      return FigSignalErrorAt();
    }
    double v12 = 0.0;
    if (!FigCFDictionaryGetDoubleIfPresent()) {
      return FigSignalErrorAt();
    }
    double v12 = v12 / 1000000.0;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F530C0]);
    if (!Value) {
      return FigSignalErrorAt();
    }
    CMTimeMakeFromDictionary(&time, Value);
    double Seconds = CMTimeGetSeconds(&time);
    double v10 = 0.0;
    uint64_t v8 = FigMotionComputeFramePTSOffsetFromISPCrop(a1, &v10);
    if (v8)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      *a2 = Seconds + v10 + v13 * -0.5 + a3 * v12;
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeMotionBlur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, int a6, float *a7, unint64_t a8, float32x2_t *a9)
{
  v47[1] = *(float32x2_t *)MEMORY[0x1E4F143B8];
  if (a6 < 2)
  {
    double v20 = *(double *)(a2 + 72);
    double v21 = *(double *)(a2 + 48) * 0.5;
    double v18 = v20 - v21;
    double v19 = v20 + v21;
    double v15 = 0.0;
  }
  else
  {
    double v14 = *(double *)(a2 + 64);
    double v15 = v14 / ((double)a6 + -1.0);
    double v16 = *(double *)(a2 + 72) - v14 * 0.5;
    double v17 = *(double *)(a2 + 48) * 0.5;
    double v18 = v16 - v17;
    double v19 = v16 + v17;
  }
  if (a7) {
    *a7 = 0.0;
  }
  if (a8) {
    *(_DWORD *)a8 = 0;
  }
  if (a9) {
    *a9 = 0;
  }
  if (a6 >= 1)
  {
    float v22 = 1.0 / (float)a6;
    BOOL v23 = (a8 | (unint64_t)a9) != 0;
    uint64_t v24 = a6;
    float v25 = a5;
    do
    {
      char v43 = 1;
      char v42 = 1;
      memset(v41, 0, sizeof(v41));
      memset(v40, 0, sizeof(v40));
      FigMotionComputeQuaternionForTimeStamp(a1, v41, &v43, v18);
      FigMotionComputeQuaternionForTimeStamp(a1, v40, &v42, v19);
      if (v43) {
        BOOL v26 = v42 == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (!v26)
      {
        float v27 = v22;
        if (a5) {
          float v27 = *v25;
        }
        float v38 = v27;
        float64_t v44 = v41[0].f64[0];
        float64x2_t v45 = vnegq_f64(*(float64x2_t *)((char *)v41 + 8));
        double v46 = -v41[1].f64[1];
        double v28 = FigMotionMultiplyQuaternions(&v44, (double *)v40);
        float64_t v44 = v28;
        v45.f64[0] = v29;
        v45.f64[1] = v30;
        double v46 = v31;
        float32x2_t v32 = 0;
        if (a4 && *(unsigned char *)(a2 + 12))
        {
          v47[0] = 0;
          float32x2_t v39 = 0;
          FigMotionComputeLensMovementAndSagForTimeStamp(a4, v47, 0, *(_DWORD *)(a2 + 136), v18, *(float *)(a2 + 16));
          FigMotionComputeLensMovementAndSagForTimeStamp(a4, &v39, 0, *(_DWORD *)(a2 + 136), v19, *(float *)(a2 + 16));
          float32x2_t v32 = vsub_f32(v39, v47[0]);
        }
        if (a7)
        {
          long double v33 = acos(v28);
          *(float *)&long double v33 = (v33 + v33) * 180.0 / 3.14159265;
          *a7 = *a7 + (float)(*(float *)&v33 * v38);
        }
        if (v23)
        {
          v47[0] = 0;
          FigMotionComputeTranslationFromCameraMotion(&v44, a3, a2, (float *)v47);
          float32x2_t v34 = vsub_f32(v47[0], v32);
          if (a8) {
            *(float *)a8 = *(float *)a8
          }
                         + (float)(sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v34, v34).i32[1]), v34.f32[0], v34.f32[0]))
                                 * v38);
          if (a9) {
            *a9 = vmla_n_f32(*a9, v34, v38);
          }
        }
      }
      double v18 = v15 + v18;
      double v19 = v15 + v19;
      ++v25;
      --v24;
    }
    while (v24);
  }
  return 0;
}

uint64_t FigMotionComputeLensMovementForTimeStamp(uint64_t a1, float32x2_t *a2, unsigned int a3, double a4, float a5)
{
  return FigMotionComputeLensMovementAndSagForTimeStamp(a1, a2, 0, a3, a4, a5);
}

float FigMotionComputeTranslationFromCameraMotion(double *a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  FigMotionRotationMatrixFromQuaternion(a1, *(unsigned __int8 *)(a2 + 48), v13);
  float result = v14;
  if (fabsf(v14) >= 0.00000001)
  {
    float v8 = *(float *)(a3 + 4);
    if (v8 == 0.0)
    {
      float v9 = (float)*(int *)a3;
      float v10 = *(float *)(a2 + 20);
      uint64_t v11 = 36;
      if (v10 > v9) {
        uint64_t v11 = 28;
      }
      uint64_t v12 = 32;
      if (v10 > v9) {
        uint64_t v12 = 24;
      }
      float v8 = *(float *)(a3 + 8) * (float)(*(float *)(a2 + v12) + (float)(*(float *)(a2 + v11) * v9));
    }
    float result = (float)(v8 * v13[5]) / v14;
    *a4 = (float)(v8 * v13[2]) / v14;
    a4[1] = result;
  }
  return result;
}

uint64_t FigMotionComputeAverageQuaternionForTimePeriod(uint64_t a1, _OWORD *a2, _OWORD *a3, double a4, double a5)
{
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v26 = 0x3FF0000000000000uLL;
  long long v27 = 0uLL;
  do
  {
    double v8 = *(double *)(a1 + v6);
    if (v8 > a4 + -0.002 && v8 < a5 + 0.002 && v7 <= 19)
    {
      long long v11 = a2[1];
      uint64_t v12 = &v28[2 * v7];
      _OWORD *v12 = *a2;
      v12[1] = v11;
      ++v7;
    }
    a2 += 2;
    v6 += 8;
  }
  while (v6 != 2048);
  if (v7)
  {
    uint64_t v13 = 0;
    while (vabdd_f64(*(double *)(a1 + v13), a4) >= 0.003)
    {
      v13 += 8;
      if (v13 == 2048)
      {
        uint64_t v14 = 4294967293;
        goto LABEL_22;
      }
    }
    uint64_t v15 = 0;
    while (vabdd_f64(*(double *)(a1 + v15), a5) >= 0.003)
    {
      v15 += 8;
      if (v15 == 2048)
      {
        uint64_t v14 = 4294967292;
        goto LABEL_22;
      }
    }
    if (v7 >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = v7;
      double v19 = v28;
      do
      {
        float v20 = 1.0 - 1.0 / ((double)(int)v17 + 1.0);
        FigMotionInterpolateQuaternionsByAngle((uint64_t)v19, (double *)&v26, v20);
        *(void *)&long long v26 = v21;
        *((void *)&v26 + 1) = v22;
        *(void *)&long long v27 = v23;
        *((void *)&v27 + 1) = v24;
        ++v17;
        v19 += 2;
      }
      while (v18 != v17);
    }
    uint64_t v14 = 0;
    long long v25 = v27;
    *a3 = v26;
    a3[1] = v25;
  }
  else
  {
    uint64_t v14 = 0xFFFFFFFFLL;
LABEL_22:
    low_freq_error_logging();
  }
  return v14;
}

uint64_t GetFocalLengthParametersFromArrayUsingModuleLensID(CFNumberRef number, CFArrayRef theArray, uint64_t a3)
{
  int valuePtr = 0;
  if (!number || CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    if (CFArrayGetCount(theArray) < 1) {
      return 0;
    }
    CFIndex v6 = 0;
    while (1)
    {
      ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(theArray, v6);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID != CFGetTypeID(ValueAtIndex)) {
        break;
      }
      if (!number) {
        goto LABEL_17;
      }
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"LensID");
      if (!Value) {
        goto LABEL_17;
      }
      CFArrayRef v10 = Value;
      int v11 = valuePtr;
      if (CFArrayGetCount(Value) >= 1)
      {
        uint64_t v12 = 0;
        while (1)
        {
          int v19 = -1;
          FigCFArrayGetIntAtIndex();
          if (!v19 || v19 == v11) {
            break;
          }
          if (CFArrayGetCount(v10) <= ++v12) {
            goto LABEL_15;
          }
        }
LABEL_17:
        CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"LensCoefficient");
        if (v15)
        {
          CFNumberRef v16 = v15;
          CFTypeID v17 = CFNumberGetTypeID();
          if (v17 == CFGetTypeID(v16))
          {
            *(_DWORD *)(a3 + 20) = 0;
            *(_DWORD *)(a3 + 2_Block_object_dispose(&STACK[0x458], 8) = 0;
            *(_DWORD *)(a3 + 36) = 0;
            CFNumberGetValue(v16, kCFNumberFloatType, (void *)(a3 + 24));
            uint64_t result = 0;
            *(_DWORD *)(a3 + 32) = *(_DWORD *)(a3 + 24);
            *(unsigned char *)(a3 + 16) = 1;
            return result;
          }
        }
        break;
      }
LABEL_15:
      if (CFArrayGetCount(theArray) <= ++v6) {
        return 0;
      }
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionCalculateAdjustedLensPosition(const __CFDictionary *a1, uint64_t a2, float *a3, float a4, float a5)
{
  int valuePtr = 0;
  if (a1 && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F53D98])) != 0)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    float v10 = (float)valuePtr - (float)(*(float *)(a2 + 40) * a4);
    if (v10 >= 0.0)
    {
      if (v10 <= 255.0) {
        int v11 = (int)(float)(v10 + 0.5);
      }
      else {
        int v11 = 255;
      }
    }
    else
    {
      int v11 = 0;
    }
    int valuePtr = v11;
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t result = 0;
      float v13 = (float)v11;
      BOOL v14 = *(float *)(a2 + 20) <= (float)v11;
      uint64_t v15 = 32;
      if (!v14) {
        uint64_t v15 = 24;
      }
      float v16 = *(float *)(a2 + v15);
      uint64_t v17 = 28;
      if (v14) {
        uint64_t v17 = 36;
      }
      *a3 = (float)(v16 + (float)(*(float *)(a2 + v17) * v13)) * a5;
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return result;
}

double FigMotionApplyDigitalZoomToTransform(int a1, float *a2, int8x16_t a3, int32x4_t a4, double a5, double a6, int8x16_t a7)
{
  if (*(float *)a3.i32 > 0.0)
  {
    *(float *)a7.i32 = 1.0 / *(float *)a3.i32;
    if (a1) {
      float v7 = 1.0 / *(float *)a3.i32;
    }
    else {
      float v7 = *(float *)a3.i32;
    }
    float v8 = *(double *)a4.i64;
    *(float *)a4.i32 = (float)(1.0 - v7) * v8;
    float v9 = a5;
    float v10 = (float)(1.0 - v7) * v9;
    if (a1) {
      *(float *)a3.i32 = FigMotionPostMultiplyScalingTranslationToTransform(a2, 1.0 / *(float *)a3.i32, *(float *)a4.i32, *(float *)a7.i32, v10);
    }
    else {
      *(double *)a3.i64 = FigMotionPreMultiplyScalingTranslationToTransform((uint64_t)a2, a3, a4, *(float *)a3.i32, v10, a7);
    }
  }
  return *(double *)a3.i64;
}

uint64_t FigMotionComputeTransformFromCameraMotion(double *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, float *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  float64x2_t v8 = 0uLL;
  float64x2_t v9 = 0uLL;
  if (a4) {
    float64x2_t v9 = vcvtq_f64_f32(*a4);
  }
  unsigned int v10 = *(_DWORD *)(a3 + 4);
  float64x2_t v11 = *(float64x2_t *)a2;
  if (a5) {
    float64x2_t v8 = vcvtq_f64_f32(*a5);
  }
  uint64_t v19 = v10;
  float64x2_t v20 = vaddq_f64(v11, v9);
  uint64_t v17 = v10;
  float64x2_t v18 = vsubq_f64(v11, v8);
  float64x2_t v16 = v11;
  FigMotionRotationMatrixFromQuaternion(a1, *(unsigned __int8 *)(a2 + 48), (float *)v21);
  FigMotionComputeTransformFromRotation((uint64_t)&v19, (uint64_t)&v17, v21, (uint64_t)a6);
  float v12 = *(float *)(a3 + 20);
  if (v12 > 0.0)
  {
    float v13 = v16.f64[0];
    float v14 = v16.f64[1];
    FigMotionPostMultiplyScalingTranslationToTransform(a6, 1.0 / v12, (float)(1.0 - (float)(1.0 / v12)) * v13, 1.0 / v12, (float)(1.0 - (float)(1.0 / v12)) * v14);
  }
  return 0;
}

float FigMotionRotationMatrixFromQuaternion(double *a1, int a2, float *a3)
{
  double v3 = a1[1];
  double v4 = a1[2];
  double v5 = *a1;
  if (a2)
  {
    double v3 = -v3;
    double v6 = -a1[3];
  }
  else
  {
    double v6 = a1[3];
  }
  float v7 = v4 + v4;
  float v8 = v3 + v3;
  float v9 = v6 + v6;
  float v10 = v4;
  float v11 = v3;
  float v12 = v6;
  float v13 = v12 * v9;
  float v14 = (float)(1.0 - (float)(v11 * v8)) - v13;
  float v15 = 1.0 - (float)(v10 * v7);
  float v16 = v15 - v13;
  a3[8] = v15 - (float)(v11 * v8);
  float v17 = v11 * v9;
  float v18 = v5;
  float v19 = v18 * v7;
  float v20 = v17 - v19;
  a3[4] = v16;
  a3[5] = v19 + v17;
  float v21 = (float)(v10 * v8) - (float)(v18 * v9);
  *a3 = v14;
  a3[1] = (float)(v10 * v8) + (float)(v18 * v9);
  float v22 = v18 * v8;
  a3[2] = (float)(v10 * v9) - v22;
  a3[3] = v21;
  float result = v22 + (float)(v10 * v9);
  a3[6] = result;
  a3[7] = v20;
  return result;
}

double FigMotionInverseOfQuaternion(uint64_t a1)
{
  return *(double *)a1;
}

double FigMotionQuaternionDotProduct(double *a1, double *a2)
{
  return a1[1] * a2[1] + *a1 * *a2 + a1[2] * a2[2] + a1[3] * a2[3];
}

double FigMotionGetQuaternionLength(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1 + a1[2] * a1[2] + a1[3] * a1[3]);
}

void FigMotionAttitudeFromQuaternion(long double *a1, double a2, double a3, double a4, double a5)
{
  double v9 = a4 + a4;
  double v10 = a5 + a5;
  double v11 = a3 + a3;
  double v12 = 1.0 - a3 * (a3 + a3);
  a1[2] = -atan2(a3 * (a4 + a4) - a2 * (a5 + a5), v12 - a5 * (a5 + a5));
  *a1 = -atan2(a3 * v10 - a2 * v9, v12 - a4 * v9);
  a1[1] = asin(a2 * v11 + a4 * v10);
}

float FigMotionAdjustParallaxShiftForScalingFactor(float result, double a2, float a3, float a4)
{
  if (a3 > 0.0 && vabds_f32(a3, a4) > 0.001) {
    return result * (float)(a4 / a3);
  }
  return result;
}

uint64_t FigMotionComputeDistortionCenter(const __CFDictionary *a1, int a2, int a3, int a4, int a5, float64x2_t *a6, float a7, float a8)
{
  unsigned int value = 0;
  CGPoint point = (CGPoint)*MEMORY[0x1E4F1DAD8];
  CGPoint v19 = point;
  CGPoint v17 = point;
  if (a1 && a6)
  {
    double v14 = ((double)a2 + -1.0) * 0.5;
    double v15 = ((double)a3 + -1.0) * 0.5;
    v20.f64[0] = v14;
    v20.f64[1] = v15;
    if (FigMotionComputeSensorCroppedReferenceCenter(a1, (float64x2_t *)&v19))
    {
      if (CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x1E4F53DF8], (const void **)&value)
        && CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value, &point))
      {
        v20.f64[0] = v14 + (point.x - v19.x) * a8 * (double)a4;
        v20.f64[1] = v15 + (point.y - v19.y) * a8 * (double)a5;
      }
      else if (CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x1E4F54108], (const void **)&value) {
             && CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value, &v17))
      }
      {
        v20.f64[0] = v14 + (v17.x - v19.x) * a8 * (double)a4;
        v20.f64[1] = v15 + (v17.y - v19.y) * a8 * (double)a5;
        if (FigMotionAdjustPointForSphereMovement((uint64_t)a1, &v20, a7, a8))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
      }
    }
    *a6 = v20;
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeOpticalCenterInBuffer(const __CFDictionary *a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, float64x2_t *a6, float a7)
{
  unsigned int value = 0;
  CGPoint point = (CGPoint)*MEMORY[0x1E4F1DAD8];
  if (a1 && a6)
  {
    int v9 = a5;
    int v11 = a3;
    unint64_t v14 = HIDWORD(a2);
    float v16 = 1.0;
    if (FigMotionComputeLensPositionScalingFactor(a1, a2, a3, a3, a5, &v16))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    v18.f64[0] = ((double)(int)a2 + -1.0) * 0.5;
    v18.f64[1] = ((double)(int)v14 + -1.0) * 0.5;
    if (!CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x1E4F54108], (const void **)&value)
      || !CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value, &point)
      || (uint64_t result = FigMotionMapPointFromRawToBuffer(a1, a2, v11, a4, &v18, point.x, point.y, v16), !result))
    {
      if (!v9 || (uint64_t result = FigMotionAdjustPointForSphereMovement((uint64_t)a1, &v18, a7, v16), !result))
      {
        uint64_t result = 0;
        *a6 = v18;
      }
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigMotionMapPointFromRawToBuffer(const __CFDictionary *a1, uint64_t a2, int a3, int a4, float64x2_t *a5, float64_t a6, float64_t a7, float a8)
{
  if (a1 && a5)
  {
    float v13 = (CGRect *)MEMORY[0x1E4F1DB28];
    CGSize v28 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
    CGPoint v29 = (CGPoint)*MEMORY[0x1E4F1DB28];
    float64x2_t v32 = *(float64x2_t *)MEMORY[0x1E4F1DB28];
    uint64_t SensorValidCropRect = FigMotionGetSensorValidCropRect(a1);
    if (SensorValidCropRect)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      FigCFDictionaryGetCGRectIfPresent();
      v34.CGPoint origin = v29;
      v34.CGSize size = v28;
      if (CGRectEqualToRect(v34, *v13)) {
        unint64_t v15 = -1;
      }
      else {
        unint64_t v15 = 0;
      }
      int8x16_t v16 = (int8x16_t)vdupq_n_s64(v15);
      v17.i64[0] = (int)a2;
      v17.i64[1] = SHIDWORD(a2);
      float64x2_t v18 = (float64x2_t)vbslq_s8(v16, (int8x16_t)vcvtq_f64_s64(v17), (int8x16_t)v28);
      __asm { FMOV            V1.2D, #-1.0 }
      v17.i64[0] = a3;
      v17.i64[1] = a4;
      __asm { FMOV            V5.2D, #0.5 }
      float64x2_t v25 = vmlaq_f64((float64x2_t)vbicq_s8((int8x16_t)v29, v16), _Q5, vaddq_f64(v18, _Q1));
      float64x2_t v26 = vmlaq_f64(v32, _Q5, vaddq_f64((float64x2_t)v28, _Q1));
      _Q5.f64[0] = a6;
      _Q5.f64[1] = a7;
      *a5 = vmlaq_f64(v25, vcvtq_f64_s64(v17), vmulq_n_f64(vsubq_f64(_Q5, v26), a8));
    }
    return SensorValidCropRect;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeRawSensorCenterInBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 && a5)
  {
    FigCFDictionaryGetIntIfPresent();
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeParallaxShift(float a1, float a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  float v27 = NAN;
  if (a5) {
    float v14 = *(float *)(a5 + 520);
  }
  else {
    float v14 = 0.0;
  }
  *(void *)a8 = 0;
  int FloatIfPresent = FigCFDictionaryGetFloatIfPresent();
  int v16 = FigCFDictionaryGetFloatIfPresent();
  uint64_t result = FigCFDictionaryGetFloatIfPresent();
  if (FloatIfPresent) {
    BOOL v18 = v16 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  char v20 = v18 || a7 != 0;
  if (a5 && (v20 & 1) != 0)
  {
    uint64_t v21 = a5 + 4 * *(unsigned int *)(a5 + 444);
    float v22 = *(float *)(v21 + 480);
    float v27 = *(float *)(v21 + 492);
    float v23 = 1.0;
  }
  else
  {
    float v23 = 1.0;
    float v22 = NAN;
  }
  float v24 = v22 + -10.0;
  float v25 = 0.0;
  if (v27 > 0.0 && v24 > v27) {
    float v25 = (float)((float)(v23 * NAN) * a3) / fmaxf((float)((float)(v24 * v27) / (float)(v24 - v27)) / 1000.0, v14);
  }
  *(float *)a8 = v25 * a1;
  *(float *)(a8 + 4) = v25 * a2;
  return result;
}

uint64_t FigMotionComputeWideToNarrowShift(const __CFDictionary *a1, const __CFDictionary *a2, const void *a3, float64x2_t *a4, float64x2_t *a5, int a6, unsigned int a7, int a8, double a9, double a10, float a11, uint64_t a12, int *a13, uint64_t a14, double *a15, float64x2_t *a16)
{
  if (a1 && a14 && a15)
  {
    float v22 = a13;
    if (!a13) {
      float v22 = (int *)(a14 + 100);
    }
    int v23 = *v22;
    v84[0] = 0;
    float v24 = (const void *)*MEMORY[0x1E4F54128];
    CFNumberRef Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F54128]);
    uint64_t v26 = bravoTransitionCameraIndexFromPortType(Value, (int *)v84);
    if (v26)
    {
      uint64_t v71 = v26;
      fig_log_get_emitter();
      goto LABEL_56;
    }
    unsigned int v83 = 0;
    if (a2) {
      a3 = CFDictionaryGetValue(a2, v24);
    }
    uint64_t v27 = bravoTransitionCameraIndexFromPortType(a3, (int *)&v83);
    if (v27)
    {
      uint64_t v71 = v27;
      fig_log_get_emitter();
      goto LABEL_56;
    }
    float v30 = *(float *)(a14 + 152 + 4 * v84[0]);
    if (v30 <= 0.0) {
      float v31 = 1.0;
    }
    else {
      float v31 = 1.0 / v30;
    }
    float v32 = *(float *)(a14 + 152 + 4 * v83);
    if (v32 <= 0.0) {
      float v33 = 1.0;
    }
    else {
      float v33 = 1.0 / v32;
    }
    float v82 = 1.0;
    if (FigMotionComputeLensPositionScalingFactor(a1, a6, v28, *(_DWORD *)(a14 + 4 * v84[0] + 164) * a8, v29, &v82))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    float32x2_t v81 = 0;
    float v34 = v31 * v82;
    double v35 = 0.0;
    float v78 = v31 * v82;
    if ((v23 & 1) == 0)
    {
      float64x2_t v76 = 0u;
      float v36 = 0.0;
      double v37 = 0.0;
      double v38 = 0.0;
      goto LABEL_32;
    }
    uint64_t v39 = FigMotionComputeAverageSpherePosition();
    if (!v39)
    {
      uint64_t v41 = v83;
      uint64_t v40 = v84[0];
      float v34 = v78;
      float v42 = v78
          * (float)((float)(v33
                          * (float)((float)((float)((float)(*(float *)(a14
                                                                     + 4
                                                                     * BravoCurrentToReferenceMapping[3 * v83 + v84[0]]
                                                                     + 176)
                                                          * *(float *)(a14 + 140 + 4 * v84[0]))
                                                  / *(float *)(a14 + 140 + 4 * v83))
                                          * (float)*(int *)(a14 + 164 + 4 * v84[0]))
                                  / (float)*(int *)(a14 + 164 + 4 * v83)))
                  / v31);
      if (!a2)
      {
        char v43 = (float32x2_t *)(a14 + 8 * v84[0]);
        float v45 = v43[6].f32[0];
        float64_t v44 = v43 + 6;
        float v46 = v45;
        if (vabds_f32(v81.f32[0], v45) < (float)(0.8 / v78))
        {
          float v47 = *(float *)(a14 + 8 * v84[0] + 52);
          if (vabds_f32(v81.f32[1], v47) < (float)(0.8 / v78))
          {
            v81.f32[0] = (float)(v81.f32[0] * 0.06) + (float)(v46 * 0.94);
            v81.f32[1] = (float)(v81.f32[1] * 0.06) + (float)(v47 * 0.94);
          }
        }
        float32x2_t v48 = v81;
        *float64_t v44 = v81;
        uint64_t v49 = a14 + 8 * v41;
        float v51 = *(float *)(v49 + 48);
        float32x2_t v50 = (void *)(v49 + 48);
        float v52 = v51;
        uint64_t v53 = (float *)v50 + 127;
        uint64_t v54 = *(v50 - 3);
        *(void *)((char *)v50 + 50_Block_object_dispose(&STACK[0x458], 8) = v54;
        if (vabds_f32(*(float *)&v54, v51) < (float)(0.8 / v42))
        {
          float v55 = (float *)(a14 + 8 * v41 + 560);
          float v56 = *v55;
          float v57 = *(float *)(a14 + 8 * v41 + 52);
          if (vabds_f32(*v55, v57) < (float)(0.8 / v42))
          {
            *uint64_t v53 = (float)(*(float *)&v54 * 0.06) + (float)(v52 * 0.94);
            *float v55 = (float)(v56 * 0.06) + (float)(v57 * 0.94);
          }
        }
        uint64_t v58 = *(void *)v53;
        *float32x2_t v50 = v58;
        float v36 = (float)(v42 * COERCE_FLOAT(HIDWORD(v58) ^ 0x80000000)) + (float)(v48.f32[1] * v78);
        v81.f32[0] = (float)(v42 * COERCE_FLOAT(v58 ^ 0x80000000)) + (float)(v48.f32[0] * v78);
        v81.f32[1] = v36;
        goto LABEL_31;
      }
      float v77 = v78
          * (float)((float)(v33
                          * (float)((float)((float)((float)(*(float *)(a14
                                                                     + 4
                                                                     * BravoCurrentToReferenceMapping[3 * v83 + v84[0]]
                                                                     + 176)
                                                          * *(float *)(a14 + 140 + 4 * v84[0]))
                                                  / *(float *)(a14 + 140 + 4 * v83))
                                          * (float)*(int *)(a14 + 164 + 4 * v84[0]))
                                  / (float)*(int *)(a14 + 164 + 4 * v83)))
                  / v31);
      float32x2_t v80 = 0;
      uint64_t v39 = FigMotionComputeAverageSpherePosition();
      if (!v39)
      {
        float v42 = v77;
        float v34 = v78;
        float32x2_t v81 = vmla_n_f32(vmul_n_f32(vneg_f32(v80), v77), v81, v78);
        uint64_t v41 = v83;
        uint64_t v40 = v84[0];
        float v36 = v81.f32[1];
LABEL_31:
        double v38 = v81.f32[0];
        double v37 = v36;
        float64x2_t v76 = vcvtq_f64_f32(vmla_n_f32(vmul_n_f32(vneg_f32(*(float32x2_t *)(a14 + 72 + 8 * v41)), v42), *(float32x2_t *)(a14 + 72 + 8 * v40), v34));
LABEL_32:
        double v59 = 0.0;
        if ((v23 & 4) == 0)
        {
LABEL_39:
          double v66 = 0.0;
          double v67 = 0.0;
          if ((v23 & 2) == 0) {
            goto LABEL_44;
          }
          float32x2_t v80 = 0;
          if (!a5 || !a4)
          {
            fig_log_get_emitter();
            FigDebugAssert3();
            return FigSignalErrorAt();
          }
          float32x2_t v79 = vmul_f32(vcvt_f32_s32(vadd_s32((int32x2_t)__PAIR64__(a7, a6), (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
          unsigned int v69 = v83;
          uint64_t v68 = v84[0];
          *(float32x2_t *)(a14 + 104 + 8 * v83) = vcvt_f32_f64(*a5);
          *(float32x2_t *)(a14 + 104 + 8 * v6_Block_object_dispose(&STACK[0x458], 8) = vcvt_f32_f64(*a4);
          *(_DWORD *)(a14 + 540) = v69;
          uint64_t v70 = FigMotionComputeBravoTranslation(v82, v34, (uint64_t)a1, a14 + 100, v68, (float *)&v79, (float *)&v80);
          if (!v70)
          {
            v81.f32[0] = v80.f32[0] + v81.f32[0];
            float v36 = v80.f32[1] + v81.f32[1];
            double v66 = v80.f32[0];
            double v67 = v80.f32[1];
LABEL_44:
            *a15 = v81.f32[0];
            a15[1] = v36;
            uint64_t v71 = 0;
            if (a16)
            {
              a16->f64[0] = v38;
              a16->f64[1] = v37;
              a16[1] = v76;
              a16[2].f64[0] = v35;
              a16[2].f64[1] = v59;
              a16[3].f64[0] = v66;
              a16[3].f64[1] = v67;
            }
            return v71;
          }
          uint64_t v71 = v70;
          fig_log_get_emitter();
LABEL_56:
          FigDebugAssert3();
          return v71;
        }
        unsigned int v61 = v83;
        uint64_t v60 = v84[0];
        if (v84[0] == 2)
        {
          *(_DWORD *)(a14 + 544) = v83;
          int v62 = 1;
          if (!a2) {
            goto LABEL_38;
          }
        }
        else
        {
          int v62 = 0;
          if (!a2)
          {
LABEL_38:
            uint64_t v63 = a14 + 48 * BravoCurrentToReferenceMapping[3 * v61 + v60];
            FigMotionComputeParallaxShift(*(float *)(v63 + 216), *(float *)(v63 + 232), v34, (uint64_t)a1, a14 + 100, v60, v62, a14 + 548);
            float v34 = v78;
            float v64 = *(float *)(a14 + 548);
            float v65 = *(float *)(a14 + 552);
            float v36 = v81.f32[1] + (float)(v65 * a11);
            v81.f32[0] = v81.f32[0] + (float)(v64 * a11);
            v81.f32[1] = v36;
            double v35 = v64;
            double v59 = v65;
            goto LABEL_39;
          }
        }
        FigMotionStashFocalLengthData((uint64_t)a2, a14 + 100);
        FigCFDictionaryGetInt32IfPresent();
        float v34 = v78;
        unsigned int v61 = v83;
        uint64_t v60 = v84[0];
        goto LABEL_38;
      }
    }
    uint64_t v71 = v39;
    fig_log_get_emitter();
    goto LABEL_56;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionSphereShiftStateUpdateWithMetadata(uint64_t a1, CFDictionaryRef theDict)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  unsigned int v18 = 0;
  CFNumberRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F54128]);
  unsigned int v16 = bravoTransitionCameraIndexFromPortType(Value, (int *)&v18);
  if (v16)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    FigMotionStashFocalLengthData((uint64_t)theDict, a1 + 100);
    FigMotionStashQuadraBinningFactor((uint64_t)theDict, a1 + 100);
    FigMotionComputeShiftStateAverageSpherePositionWithFrameSkipping(a1, (uint64_t)theDict, v18, v5);
    FigMotionUpdateBaseZoomFactorAdjustment((uint64_t)theDict, a1 + 100);
    FigMotionUpdateSagPositionUsingOISShift(a1, v18, *(float *)(a1 + 8 * v18 + 24), *(float *)(a1 + 8 * v18 + 28));
    uint64_t v6 = 0;
    uint64_t v7 = *MEMORY[0x1E4F52DF0];
    v19[0] = *MEMORY[0x1E4F52DD8];
    v19[1] = v7;
    void v19[2] = *MEMORY[0x1E4F52DE8];
    float v8 = (const void *)*MEMORY[0x1E4F54300];
    keCGFloat y = (void *)*MEMORY[0x1E4F542F8];
    do
    {
      int v9 = (const void *)v19[v6];
      if (!CFEqual(Value, v9) && !bravoTransitionCameraIndexFromPortType(v9, (int *)&v18))
      {
        CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v8);
        if (v10)
        {
          int v11 = v9;
        }
        else
        {
          CFDictionaryRef v10 = theDict;
          int v11 = key;
        }
        double v12 = CFDictionaryGetValue(v10, v11);
        uint64_t v14 = (uint64_t)v12;
        if (v12)
        {
          FigMotionStashFocalLengthData((uint64_t)v12, a1 + 100);
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetFloatIfPresent();
        }
        FigMotionComputeShiftStateAverageSpherePositionWithFrameSkipping(a1, v14, v18, v13);
        FigMotionUpdateSagPositionUsingOISShift(a1, v18, *(float *)(a1 + 8 * v18 + 24), *(float *)(a1 + 8 * v18 + 28));
      }
      ++v6;
    }
    while (v6 != 3);
  }
  return v16;
}

float32x2_t FigMotionComputeShiftStateAverageSpherePositionWithFrameSkipping(uint64_t a1, uint64_t a2, unsigned int a3, float32x2_t result)
{
  uint64_t v6 = (float32x2_t *)(a1 + 8 * a3 + 556);
  *uint64_t v6 = 0;
  if (a2 && FigCFDictionaryGetInt32IfPresent() && FigCFDictionaryGetInt32IfPresent())
  {
    uint64_t result = vmul_f32(vcvt_f32_s32(0), (float32x2_t)vdup_n_s32(0x3B800000u));
    *uint64_t v6 = result;
    int v7 = 1;
  }
  else
  {
    int v7 = 0;
  }
  int v8 = *(unsigned __int8 *)(a1 + 96) | v7;
  *(unsigned char *)(a1 + 96) |= v7;
  if (v8)
  {
    int v9 = (float32x2_t *)(a1 + 8 * a3);
    __int32 v11 = v9->i32[0];
    CFDictionaryRef v10 = v9 + 3;
    v12.i32[0] = v11;
    if (v7)
    {
      float32x2_t v13 = *v6;
      uint64_t result = vmul_f32(vadd_f32(*v10, *v6), (float32x2_t)0x3F0000003F000000);
      *CFDictionaryRef v10 = result;
      *(float32x2_t *)(a1 + 8 * a3) = v13;
    }
    else
    {
      v12.i32[1] = *(_DWORD *)(a1 + 8 * a3 + 4);
      uint64_t result = vmul_f32(vadd_f32(v12, *v10), (float32x2_t)0x3F0000003F000000);
      *CFDictionaryRef v10 = result;
    }
  }
  return result;
}

uint64_t FigMotionUpdateSagPositionUsingOISShift(uint64_t result, unsigned int a2, float a3, float a4)
{
  double v4 = (float *)(result + 8 * a2);
  float v5 = v4[18];
  v4 += 18;
  double v6 = *(double *)(result + 632);
  float v7 = (1.0 - v6) * v5 + v6 * a3;
  float v8 = (1.0 - v6) * v4[1] + v6 * a4;
  float *v4 = v7;
  v4[1] = v8;
  return result;
}

uint64_t FigMotionHardwareAvailable()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  long long v4 = 0u;
  long long v5 = 0u;
  *(_OWORD *)__big = 0u;
  long long v3 = 0u;
  size_t v1 = 64;
  if ((FigMotionHardwareAvailable_checked & 1) == 0)
  {
    FigMotionHardwareAvailable_available = 1;
    if (!sysctlbyname("hw.model", __big, &v1, 0, 0) && strnstr(__big, "DEV", 0x40uLL)) {
      FigMotionHardwareAvailable_available = 0;
    }
    FigMotionHardwareAvailable_checkeCGFloat d = 1;
  }
  return FigMotionHardwareAvailable_available;
}

uint64_t FigMotionComputeAverageQuaternionFromArray(const __CFArray *a1, _OWORD *a2, double a3, double a4)
{
  v38[118] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int Count = CFArrayGetCount(a1);
    long long v35 = 0u;
    long long v36 = 0u;
    if (Count < 1) {
      goto LABEL_21;
    }
    CFIndex v9 = 0;
    int v10 = 0;
    char v11 = 0;
    char v12 = 0;
    uint64_t v13 = Count;
    do
    {
      ValueAtIndeCGFloat x = (const __CFArray *)CFArrayGetValueAtIndex(a1, v9);
      if (ValueAtIndex)
      {
        CFArrayRef v15 = ValueAtIndex;
        if ((int)CFArrayGetCount(ValueAtIndex) >= 1)
        {
          CFNumberRef v16 = (const __CFNumber *)CFArrayGetValueAtIndex(v15, 0);
          if (v16)
          {
            CFNumberRef v17 = v16;
            CFDataRef v18 = (const __CFData *)CFArrayGetValueAtIndex(v15, 2);
            if (v18)
            {
              CFDataRef v19 = v18;
              double valuePtr = 0.0;
              CFNumberGetValue(v17, kCFNumberDoubleType, &valuePtr);
              double v20 = valuePtr;
              if (valuePtr > a3 + -0.0025 && valuePtr < a4 + 0.0025 && v10 <= 19)
              {
                *(_OWORD *)buffer = 0u;
                long long v33 = 0u;
                v40.length = CFDataGetLength(v19);
                v40.locatiouint64_t n = 0;
                CFDataGetBytes(v19, v40, buffer);
                double v20 = valuePtr;
                uint64_t v21 = (double *)&v37[48 * v10];
                v21[1] = valuePtr;
                long long v22 = v33;
                *((_OWORD *)v21 + 1) = *(_OWORD *)buffer;
                *((_OWORD *)v21 + 2) = v22;
                ++v10;
              }
              v11 |= vabdd_f64(v20, a3) < 0.0035;
              v12 |= vabdd_f64(v20, a4) < 0.0035;
            }
          }
        }
      }
      ++v9;
    }
    while (v13 != v9);
    if (v10 && (v11 & 1) != 0 && (v12 & 1) != 0)
    {
      long long v35 = 0x3FF0000000000000uLL;
      long long v36 = 0uLL;
      if (v10 >= 1)
      {
        uint64_t v23 = 0;
        float v24 = v38;
        do
        {
          float v25 = 1.0 - 1.0 / ((double)(int)v23 + 1.0);
          FigMotionInterpolateQuaternionsByAngle((uint64_t)v24, (double *)&v35, v25);
          *(void *)&long long v35 = v26;
          *((void *)&v35 + 1) = v27;
          *(void *)&long long v36 = v28;
          *((void *)&v36 + 1) = v29;
          ++v23;
          v24 += 6;
        }
        while (v10 != v23);
      }
      uint64_t result = 0;
      long long v31 = v36;
      *a2 = v35;
      a2[1] = v31;
    }
    else
    {
LABEL_21:
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return result;
}

BOOL IDsEqualAboveFirstHexDigit(unsigned int a1, int a2)
{
  return (a2 ^ a1) < 0x10;
}

uint64_t FigSampleBufferProcessorCreateForMotionAttachments(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  CFTypeRef v58 = 0;
  unsigned int v57 = 0;
  if (!a3) {
    goto LABEL_63;
  }
  long long v3 = a3;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigSampleBufferProcessorGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    uint64_t v46 = v6;
    fig_log_get_emitter();
LABEL_65:
    FigDebugAssert3();
    goto LABEL_53;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 464) = 0x100000001;
  *(_DWORD *)(DerivedStorage + 40) = 0;
  *(_DWORD *)(DerivedStorage + 560) = 0;
  *(_DWORD *)(DerivedStorage + 64) = 3;
  *(_DWORD *)(DerivedStorage + 592) = 0;
  *(void *)(DerivedStorage + 56_Block_object_dispose(&STACK[0x458], 8) = 0x3F6CAC083126E979;
  FigMotionInitializeQuaternion((void *)(DerivedStorage + 480));
  *(unsigned char *)(DerivedStorage + 472) = 0;
  if (a2)
  {
    FigCFDictionaryGetIntIfPresent();
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F535B0]);
    FigCFDictionaryGetDoubleIfPresent();
    CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F53558]);
    if (!v8)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_61;
    }
    CFArrayRef v9 = v8;
    CFDictionaryRef theDict = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F53560]);
    if (theDict)
    {
      CFIndex Count = CFArrayGetCount(v9);
      if (Count <= 7)
      {
        CFIndex v11 = Count;
        float32x2_t v48 = v3;
        CFDictionaryRef v55 = a2;
        if (Count >= 1)
        {
          CFIndex v12 = 0;
          uint64_t v13 = (const void *)*MEMORY[0x1E4F52E00];
          keCGFloat y = (void *)*MEMORY[0x1E4F535A0];
          float v52 = (void *)*MEMORY[0x1E4F52D28];
          CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x1E4F52DF8];
          CFTypeRef v49 = (CFTypeRef)*MEMORY[0x1E4F52E10];
          float32x2_t v50 = (void *)*MEMORY[0x1E4F52D08];
          do
          {
            ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v9, v12);
            if (!ValueAtIndex) {
              goto LABEL_59;
            }
            CFArrayRef v15 = ValueAtIndex;
            if (!CFEqual(ValueAtIndex, v13))
            {
              LODWORD(CFDictionaryAddValue(theDict, key, value) = 0;
              CameraCharacterizationDatCGFloat a = portIndexFromPortType(v15, (int *)&value);
              if (CameraCharacterizationData) {
                goto LABEL_58;
              }
              unsigned int v17 = value;
              CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(a2, key);
              if (v18) {
                CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(v18, v15);
              }
              else {
                CFDictionaryRef v19 = 0;
              }
              CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v15);
              if (!v20) {
                goto LABEL_59;
              }
              CFDictionaryRef v21 = v20;
              float valuePtr = 0.0;
              CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(v20, v52);
              if (v22) {
                CFNumberGetValue(v22, kCFNumberFloatType, &valuePtr);
              }
              if (CFEqual(v15, cf2) || CFEqual(v15, v49)) {
                FigCFDictionaryGetBooleanIfPresent();
              }
              CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(v21, v50);
              if (v23)
              {
                CameraCharacterizationDatCGFloat a = FigMotionGetCameraCharacterizationData(v23, v19, valuePtr, (uint64_t)v15, DerivedStorage + 56 * v17 + 72);
                if (CameraCharacterizationData)
                {
LABEL_58:
                  uint64_t v46 = CameraCharacterizationData;
                  fig_log_get_emitter();
                  goto LABEL_65;
                }
              }
              a2 = v55;
            }
          }
          while (v11 != ++v12);
        }
        FigCFDictionaryGetIntIfPresent();
        FigCFDictionaryGetIntIfPresent();
        CFArrayRef v24 = (const __CFArray *)CFDictionaryGetValue(a2, @"MotionAttachmentTypes");
        if (v24)
        {
          CFArrayRef v25 = v24;
          CFTypeID TypeID = CFArrayGetTypeID();
          if (TypeID == CFGetTypeID(v25))
          {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 8, MEMORY[0x1E4F1D530], 0);
            for (uint64_t i = 0; i != 8; ++i)
              CFDictionarySetValue(Mutable, *(&off_1E5C29640 + i), (const void *)dword_1A5F0C878[i]);
            int v29 = CFArrayGetCount(v25);
            if (v29 >= 1)
            {
              CFIndex v30 = 0;
              uint64_t v31 = v29;
              do
              {
                float v32 = CFArrayGetValueAtIndex(v25, v30);
                unsigned int value = 0;
                if (CFDictionaryGetValueIfPresent(Mutable, v32, (const void **)&value)) {
                  *(_DWORD *)(DerivedStorage + 40) |= value;
                }
                ++v30;
              }
              while (v31 != v30);
            }
            a2 = v55;
            if (Mutable) {
              CFRelease(Mutable);
            }
          }
        }
        FigCFDictionaryGetIntIfPresent();
        CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(a2, @"MotionCallbackThreadPriority");
        long long v3 = v48;
        if (v33) {
          CFNumberGetValue(v33, kCFNumberSInt32Type, &v57);
        }
        goto LABEL_38;
      }
    }
LABEL_63:
    fig_log_get_emitter();
    goto LABEL_60;
  }
LABEL_38:
  *long long v3 = v58;
  CFTypeRef v58 = 0;
  *(unsigned char *)(DerivedStorage + 24) = 1;
  *(_DWORD *)(DerivedStorage + 2_Block_object_dispose(&STACK[0x458], 8) = 2;
  float v34 = malloc_type_calloc(*(int *)(DerivedStorage + 64), 8uLL, 0x2004093837F09uLL);
  *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x458], 8) = v34;
  if (!v34 || (int v35 = *(_DWORD *)(DerivedStorage + 40)) == 0 || v35 >= 512)
  {
LABEL_59:
    fig_log_get_emitter();
LABEL_60:
    FigDebugAssert3();
LABEL_61:
    uint64_t v46 = FigSignalErrorAt();
    goto LABEL_53;
  }
  if ((v35 & 0x180) != 0)
  {
    *(unsigned char *)(DerivedStorage + 576) = 1;
    long long v36 = malloc_type_malloc(12 * *(int *)(DerivedStorage + 64) + 12, 0x10000403E1C8BA9uLL);
    *(void *)(DerivedStorage + 640) = v36;
    if (v36)
    {
      double v37 = malloc_type_malloc(0x14A0uLL, 0x1000040AC875A91uLL);
      *(void *)(DerivedStorage + 600) = v37;
      if (v37)
      {
        CFMutableArrayRef v38 = CFArrayCreateMutable(v5, (*(_DWORD *)(DerivedStorage + 64) << 8) + 256, MEMORY[0x1E4F1D510]);
        *(void *)(DerivedStorage + 584) = v38;
        if (v38)
        {
          uint64_t v39 = 0;
          char v40 = 1;
          uint64_t v41 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          while (1)
          {
            char v42 = v40;
            CFMutableArrayRef v43 = CFArrayCreateMutable(v5, (*(_DWORD *)(DerivedStorage + 64) << 9) + 512, v41);
            *(void *)(DerivedStorage + 8 * v39 + 624) = v43;
            if (!v43) {
              break;
            }
            char v40 = 0;
            uint64_t v39 = 1;
            if ((v42 & 1) == 0)
            {
              float64_t v44 = malloc_type_malloc(0x2FD0uLL, 0x1000040504FFAC1uLL);
              *(void *)(DerivedStorage + 60_Block_object_dispose(&STACK[0x458], 8) = v44;
              if (v44)
              {
                float v45 = malloc_type_malloc(0x528uLL, 0x10000403E1C8BA9uLL);
                *(void *)(DerivedStorage + 616) = v45;
                if (v45) {
                  goto LABEL_52;
                }
              }
              goto LABEL_59;
            }
          }
        }
      }
    }
    goto LABEL_59;
  }
  *(void *)(DerivedStorage + 32) = FigCoreMotionAllocWithPriority(1, 1, 1, v57, 0.033333, 0.005);
LABEL_52:
  *(void *)(DerivedStorage + 656) = 0;
  *(unsigned char *)(DerivedStorage + 664) = 0;
  sbp_ma_resetStorage(DerivedStorage);
  uint64_t v46 = 0;
LABEL_53:
  if (v58) {
    CFRelease(v58);
  }
  return v46;
}

void sbp_ma_resetStorage(uint64_t a1)
{
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)(a1 + 56) = -*(_DWORD *)(a1 + 64);
  sbp_ma_releaseBufferedFrames(a1);
  *(_DWORD *)(a1 + 652) = 0;
  *(_DWORD *)(a1 + 64_Block_object_dispose(&STACK[0x458], 8) = ~*(_DWORD *)(a1 + 64);
  int32x4_t v2 = *(const void **)(a1 + 656);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 656) = 0;
  }
}

uint64_t sbp_ma_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x458], 8) = 0;
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    int32x4_t v2 = *(void **)(DerivedStorage + 32);
    if (v2)
    {
      FigCoreMotionRelease(v2);
      *(void *)(v1 + 32) = 0;
    }
    long long v3 = *(void **)(v1 + 600);
    if (v3)
    {
      *(void *)(v1 + 600) = 0;
      free(v3);
    }
    long long v4 = *(void **)(v1 + 608);
    if (v4)
    {
      *(void *)(v1 + 60_Block_object_dispose(&STACK[0x458], 8) = 0;
      free(v4);
    }
    CFAllocatorRef v5 = *(void **)(v1 + 616);
    if (v5)
    {
      *(void *)(v1 + 616) = 0;
      free(v5);
    }
    uint64_t v6 = *(const void **)(v1 + 584);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v1 + 584) = 0;
    }
    uint64_t v7 = 0;
    char v8 = 1;
    do
    {
      char v9 = v8;
      uint64_t v10 = v1 + 8 * v7;
      CFIndex v11 = *(const void **)(v10 + 624);
      if (v11)
      {
        CFIndex v12 = (void *)(v10 + 624);
        CFRelease(v11);
        void *v12 = 0;
      }
      char v8 = 0;
      uint64_t v7 = 1;
    }
    while ((v9 & 1) != 0);
    uint64_t v13 = *(void **)(v1 + 640);
    if (v13)
    {
      *(void *)(v1 + 640) = 0;
      free(v13);
    }
    sbp_ma_releaseBufferedFrames(v1);
    uint64_t v14 = *(void **)(v1 + 48);
    if (v14)
    {
      *(void *)(v1 + 4_Block_object_dispose(&STACK[0x458], 8) = 0;
      free(v14);
    }
    *(unsigned char *)(v1 + 24) = 0;
  }
  return 0;
}

__CFString *sbp_ma_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProcessor_MotionAttachments %p>", a1);
  return Mutable;
}

uint64_t sbp_ma_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (a4)
    {
      uint64_t v4 = vars8;
      if (!*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
        return 4294954512;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t sbp_ma_setProperty(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = vars8;
    if (!*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
      return 4294954512;
    }
  }
  return FigSignalErrorAt();
}

void sbp_ma_releaseBufferedFrames(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    int v2 = *(_DWORD *)(a1 + 64);
    if (v2 >= 1)
    {
      for (uint64_t i = 0; i < v2; ++i)
      {
        uint64_t v4 = *(const void **)(*(void *)(a1 + 48) + 8 * i);
        if (v4)
        {
          CFRelease(v4);
          *(void *)(*(void *)(a1 + 48) + 8 * i) = 0;
          int v2 = *(_DWORD *)(a1 + 64);
        }
      }
    }
  }
}

uint64_t sbp_ma_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x458], 8) = a2;
    *(void *)(DerivedStorage + 16) = a3;
    return 0;
  }
}

uint64_t sbp_ma_processSampleBuffer(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (uint64_t)DerivedStorage;
  if (*DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_49;
  }
  if (!DerivedStorage[576]) {
    goto LABEL_28;
  }
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F53070];
  CFDictionaryRef v6 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (!v6) {
    goto LABEL_28;
  }
  CFDictionaryRef v7 = v6;
  char v8 = (const void *)*MEMORY[0x1E4F55710];
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E4F55710]);
  if (!Value)
  {
    CFDictionaryRef v19 = (const __CFDictionary *)CMGetAttachment(a2, v5, 0);
    CFDictionaryRef v20 = v19;
    if (*(unsigned char *)(v4 + 664))
    {
      CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F55708]);
      if (!v21)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v22 = FigSignalErrorAt();
LABEL_22:
        uint64_t v23 = v22;
        if (v22)
        {
LABEL_47:
          fig_log_get_emitter();
          FigDebugAssert3();
LABEL_49:
          uint64_t v28 = 0;
          goto LABEL_39;
        }
        goto LABEL_28;
      }
      CFDictionaryRef v20 = v21;
      CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E4F55718]);
      if (FigCFEqual()) {
        goto LABEL_28;
      }
    }
    uint64_t v22 = sbp_ma_extractAndBufferISPMotionDataFromMetadataDictionary(v4, v20);
    goto LABEL_22;
  }
  CFArrayRef v10 = Value;
  if (*(_DWORD *)(v4 + 64) != 1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  if (*(_DWORD *)(v4 + 44))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  if (*(_DWORD *)(v4 + 64) == 1)
  {
    CFIndex v11 = *(const void **)(v4 + 656);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(v4 + 656) = 0;
    }
    *(unsigned char *)(v4 + 664) = 1;
    FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription((CMSampleBufferRef)a2);
    if (!FormatDescription) {
      goto LABEL_50;
    }
    uint64_t v13 = FormatDescription;
    uint64_t Count = CFArrayGetCount(v10);
    *(void *)(v4 + 656) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      CFIndex v15 = 0;
      CFDictionaryRef v16 = 0;
      while (1)
      {
        ValueAtIndeCGFloat x = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v15);
        uint64_t v18 = sbp_ma_processInitialCinematicFutureMetadata(v4, v16, ValueAtIndex, v13);
        if (v18) {
          goto LABEL_44;
        }
        ++v15;
        CFDictionaryRef v16 = ValueAtIndex;
        if (Count == v15) {
          goto LABEL_25;
        }
      }
    }
    ValueAtIndeCGFloat x = 0;
LABEL_25:
    CFDictionaryRef v24 = (const __CFDictionary *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F55708]);
    if (v24)
    {
      uint64_t v18 = sbp_ma_processInitialCinematicFutureMetadata(v4, ValueAtIndex, v24, v13);
      if (v18)
      {
LABEL_44:
        uint64_t v23 = v18;
        fig_log_get_emitter();
        FigDebugAssert3();
        goto LABEL_45;
      }
      CFDictionaryRemoveValue(v7, v8);
    }
    else
    {
LABEL_50:
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v23 = FigSignalErrorAt();
      if (v23)
      {
LABEL_45:
        float v32 = *(const void **)(v4 + 656);
        if (v32)
        {
          CFRelease(v32);
          *(void *)(v4 + 656) = 0;
        }
        goto LABEL_47;
      }
    }
  }
LABEL_28:
  int v25 = *(_DWORD *)(v4 + 64);
  if (v25)
  {
    if (*(_DWORD *)(v4 + 44) == v25)
    {
      uint64_t v26 = *(void *)(v4 + 48);
      uint64_t v27 = *(int *)(v4 + 56);
      uint64_t v28 = *(opaqueCMSampleBuffer **)(v26 + 8 * v27);
      *(void *)(v26 + 8 * v27) = 0;
    }
    else
    {
      uint64_t v28 = 0;
    }
    *(void *)(*(void *)(v4 + 48) + 8 * *(int *)(v4 + 60)) = CFRetain(a2);
    FigMotionIncreaseRingIndex((int *)(v4 + 60), *(_DWORD *)(v4 + 64));
    FigMotionIncreaseRingIndex((int *)(v4 + 56), *(_DWORD *)(v4 + 64));
    int v29 = *(_DWORD *)(v4 + 44);
    if (v29 < *(_DWORD *)(v4 + 64)) {
      *(_DWORD *)(v4 + 44) = v29 + 1;
    }
  }
  else
  {
    uint64_t v28 = (opaqueCMSampleBuffer *)CFRetain(a2);
  }
  if (v28)
  {
    uint64_t v23 = sbp_ma_attachMotionData(v4, v28);
    if (v23)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
LABEL_39:
  CFIndex v30 = *(void (**)(void, uint64_t, opaqueCMSampleBuffer *))(v4 + 8);
  if (v30)
  {
    v30(*(void *)(v4 + 16), v23, v28);
    uint64_t v23 = 0;
  }
  if (v28) {
    CFRelease(v28);
  }
  return v23;
}

uint64_t sbp_ma_finishPendingProcessing()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = DerivedStorage;
    if (*(int *)(DerivedStorage + 64) >= 1)
    {
      uint64_t v3 = *(unsigned int *)(DerivedStorage + 56);
      if ((v3 & 0x80000000) == 0)
      {
        for (uint64_t i = *(opaqueCMSampleBuffer **)(*(void *)(DerivedStorage + 48) + 8 * v3);
              i;
              uint64_t i = *(opaqueCMSampleBuffer **)(*(void *)(v2 + 48) + 8 * *(int *)(v2 + 56)))
        {
          if (*(void *)(v2 + 640)) {
            FigMotionIncreaseRingIndex((int *)(v2 + 648), *(_DWORD *)(v2 + 64) + 1);
          }
          uint64_t v5 = sbp_ma_attachMotionData(v2, i);
          if (v5)
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
          CFDictionaryRef v6 = *(void (**)(void, uint64_t, opaqueCMSampleBuffer *))(v2 + 8);
          if (v6) {
            v6(*(void *)(v2 + 16), v5, i);
          }
          CFRelease(i);
          *(void *)(*(void *)(v2 + 48) + 8 * *(int *)(v2 + 56)) = 0;
          FigMotionIncreaseRingIndex((int *)(v2 + 56), *(_DWORD *)(v2 + 64));
        }
      }
    }
    sbp_ma_resetStorage(v2);
    return 0;
  }
}

uint64_t sbp_ma_attachMotionData(uint64_t a1, CMSampleBufferRef sbuf)
{
  memset(&v22, 0, sizeof(v22));
  FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(sbuf);
  if (FormatDescription)
  {
    uint64_t v5 = FormatDescription;
    CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F53070];
    CFDictionaryRef v7 = (__CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    CFMutableDictionaryRef Mutable = v7;
    if (v7
      || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
    {
      if (*(unsigned char *)(a1 + 664))
      {
        char v9 = *(const void **)(a1 + 656);
        if (v9)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F55710], v9);
          CFArrayRef v10 = *(const void **)(a1 + 656);
          if (v10)
          {
            CFRelease(v10);
            *(void *)(a1 + 656) = 0;
          }
        }
        CFIndex v11 = (const void *)*MEMORY[0x1E4F55708];
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Mutable, (const void *)*MEMORY[0x1E4F55708]);
        if (!Value) {
          goto LABEL_27;
        }
        CFDictionaryRef v13 = Value;
        CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F55718]);
        if (FigCFEqual())
        {
          CFDictionaryRemoveValue(Mutable, v11);
          uint64_t v14 = 0;
          if (!v7) {
            goto LABEL_20;
          }
          return v14;
        }
        CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F530C0]);
        if (!v16)
        {
LABEL_27:
          fig_log_get_emitter();
          FigDebugAssert3();
          uint64_t v19 = FigSignalErrorAt();
LABEL_19:
          uint64_t v14 = v19;
          if (!v7)
          {
LABEL_20:
            CMSetAttachment(sbuf, v6, Mutable, 1u);
            CFRelease(Mutable);
          }
          return v14;
        }
        CMTimeMakeFromDictionary(&v22, v16);
        CMTime v21 = v22;
        uint64_t v17 = a1;
        CFDictionaryRef v18 = v13;
      }
      else
      {
        CFDictionaryRef v15 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F530C0], 0);
        if (v15) {
          CMTimeMakeFromDictionary(&v22, v15);
        }
        else {
          CMSampleBufferGetPresentationTimeStamp(&v22, sbuf);
        }
        CMTime v21 = v22;
        uint64_t v17 = a1;
        CFDictionaryRef v18 = Mutable;
      }
      uint64_t v19 = sbp_ma_addMotionDataToMetadataDictionary(v17, v18, &v21, v5);
      goto LABEL_19;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t sbp_ma_processInitialCinematicFutureMetadata(uint64_t a1, const __CFDictionary *a2, CFDictionaryRef theDict, const opaqueCMFormatDescription *a4)
{
  uint64_t v7 = sbp_ma_extractAndBufferISPMotionDataFromMetadataDictionary(a1, theDict);
  if (v7)
  {
    uint64_t v9 = v7;
    fig_log_get_emitter();
    goto LABEL_13;
  }
  if (!a2) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F530C0]);
  if (Value)
  {
    memset(&v12, 0, sizeof(v12));
    CMTimeMakeFromDictionary(&v12, Value);
    CMTime v11 = v12;
    uint64_t v9 = sbp_ma_addMotionDataToMetadataDictionary(a1, a2, &v11, a4);
    if (!v9)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 656), a2);
      return v9;
    }
    fig_log_get_emitter();
LABEL_13:
    FigDebugAssert3();
    return v9;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t sbp_ma_extractAndBufferISPMotionDataFromMetadataDictionary(uint64_t a1, CFDictionaryRef theDict)
{
  CFDictionaryRef v2 = theDict;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  __int32 v45 = 0;
  uint64_t v43 = 0;
  float32x2_t v44 = 0;
  uint64_t v4 = *(int *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 560);
  uint64_t MotionDataFromISP = FigMotionGetMotionDataFromISP(theDict, *(float64x2_t **)(a1 + 600), *(void *)(a1 + 616), 110, (int *)&v43 + 1, &v44, *(void *)(a1 + 608), 510, (int *)&v43);
  if (MotionDataFromISP)
  {
    uint64_t v29 = MotionDataFromISP;
    fig_log_get_emitter();
LABEL_46:
    FigDebugAssert3();
    return v29;
  }
  if (SHIDWORD(v43) >= 1)
  {
    CFDictionaryRef v41 = v2;
    uint64_t v7 = (v4 << 8) + 256;
    CFDataRef v8 = (const __CFData *)*MEMORY[0x1E4F1CFC8];
    if (v5 < 1)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 584));
      if (Count + SHIDWORD(v43) < v7 && SHIDWORD(v43) >= 1)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v20 = 8;
        do
        {
          double valuePtr = 0.0;
          double valuePtr = *(double *)(*(void *)(a1 + 600) + v20) - *(double *)(a1 + 568);
          CFNumberRef v21 = CFNumberCreate(v19, kCFNumberDoubleType, &valuePtr);
          CFDataRef v22 = CFDataCreate(v19, (const UInt8 *)(*(void *)(a1 + 600) + v20 + 8), 32);
          CFDataRef v23 = CFDataCreate(v19, (const UInt8 *)(*(void *)(a1 + 616) + v17), 12);
          values = v21;
          CFDataRef v47 = v8;
          CFDataRef v48 = v22;
          CFDataRef v49 = v23;
          CFArrayRef v24 = CFArrayCreate(v19, (const void **)&values, 4, MEMORY[0x1E4F1D510]);
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 584), v24);
          if (v21) {
            CFRelease(v21);
          }
          if (v22) {
            CFRelease(v22);
          }
          if (v23) {
            CFRelease(v23);
          }
          if (v24) {
            CFRelease(v24);
          }
          ++v18;
          v17 += 12;
          v20 += 48;
        }
        while (v18 < SHIDWORD(v43));
      }
    }
    else
    {
      uint64_t v9 = 0;
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v11 = 8;
      CMTime v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        double valuePtr = 0.0;
        double valuePtr = *(double *)(*(void *)(a1 + 600) + v11) - *(double *)(a1 + 568);
        CFNumberRef v13 = CFNumberCreate(v10, kCFNumberDoubleType, &valuePtr);
        CFDataRef v14 = CFDataCreate(v10, (const UInt8 *)(*(void *)(a1 + 600) + v11 + 8), 32);
        values = v13;
        CFDataRef v47 = v8;
        CFDataRef v48 = v14;
        CFArrayRef v15 = CFArrayCreate(v10, (const void **)&values, 3, v12);
        CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 584), *(int *)(a1 + 592), v15);
        *(_DWORD *)(a1 + 592) = (*(int *)(a1 + 592) + 1) % v7;
        if (v13) {
          CFRelease(v13);
        }
        if (v14) {
          CFRelease(v14);
        }
        if (v15) {
          CFRelease(v15);
        }
        ++v9;
        v11 += 48;
      }
      while (v9 < SHIDWORD(v43));
    }
    uint64_t v25 = *(void *)(a1 + 640);
    CFDictionaryRef v2 = v41;
    if (v25)
    {
      uint64_t v26 = (float32x2_t *)(v25 + 12 * *(int *)(a1 + 652));
      float32x2_t v27 = v44;
      v26[1].i32[0] = v45;
      *uint64_t v26 = v27;
      FigMotionIncreaseRingIndex((int *)(a1 + 652), *(_DWORD *)(a1 + 64) + 1);
      FigMotionIncreaseRingIndex((int *)(a1 + 648), *(_DWORD *)(a1 + 64) + 1);
    }
  }
  if ((int)v43 < 1) {
    return 0;
  }
  LODWORD(valuePtr) = 0;
  CFDictionaryRef Value = CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E4F54128]);
  uint64_t v29 = hallPositionIndexFromPortType(Value, &valuePtr);
  if (v29)
  {
    fig_log_get_emitter();
    goto LABEL_46;
  }
  uint64_t v30 = ((uint64_t)*(int *)(a1 + 64) << 9) + 512;
  CFIndex v31 = CFArrayGetCount(*(CFArrayRef *)(a1 + 8 * LODWORD(valuePtr) + 624));
  if (v31 + (int)v43 < v30 && (int)v43 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    CFAllocatorRef v35 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    long long v36 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      CFNumberRef v37 = CFNumberCreate(v35, kCFNumberDoubleType, (const void *)(*(void *)(a1 + 608) + v33));
      CFDataRef v38 = CFDataCreate(v35, (const UInt8 *)(*(void *)(a1 + 608) + v33 + 8), 8);
      values = v37;
      CFDataRef v47 = v38;
      CFArrayRef v39 = CFArrayCreate(v35, (const void **)&values, 2, v36);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8 * LODWORD(valuePtr) + 624), v39);
      if (v37) {
        CFRelease(v37);
      }
      if (v38) {
        CFRelease(v38);
      }
      if (v39) {
        CFRelease(v39);
      }
      ++v34;
      v33 += 24;
    }
    while (v34 < (int)v43);
  }
  return v29;
}

uint64_t sbp_ma_addMotionDataToMetadataDictionary(uint64_t a1, const __CFDictionary *a2, CMTime *a3, CMVideoFormatDescriptionRef videoDesc)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  double v83 = 0.0;
  uint64_t v82 = 0;
  uint64_t bytes = 0;
  if (!*(unsigned char *)(a1 + 24))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 560);
  memset(v80, 0, sizeof(v80));
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(videoDesc);
  for (uint64_t i = 0; i != 392; i += 56)
  {
    uint64_t v10 = a1 + i;
    *(double *)(v10 + 72) = ((double)(int)Dimensions + -1.0) * 0.5;
    *(double *)(v10 + 80) = ((double)SHIDWORD(Dimensions) + -1.0) * 0.5;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F54128]);
  if (Value)
  {
    CMTime v12 = Value;
    if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F52E00]))
    {
      CMTime time = *a3;
      double Seconds = CMTimeGetSeconds(&time);
      time.unsigned int value = 0;
      if (FigMotionComputeFramePTSOffsetFromISPCrop(a2, (double *)&time.value))
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      double v14 = Seconds + *(double *)&time.value;
      FigCFDictionarySetDouble();
      if (!FigCFDictionaryGetInt32IfPresent()) {
        FigCFDictionaryGetInt32IfPresent();
      }
      if (FigCFDictionaryGetDoubleIfPresent() && v83 <= 0.0) {
        double v83 = 0.0;
      }
      if (*(unsigned char *)(a1 + 576))
      {
        unsigned int v15 = *(_DWORD *)(a1 + 648);
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v16 = *(void *)(a1 + 640) + 12 * v15;
          int v17 = *(_DWORD *)(v16 + 8);
          uint64_t bytes = *(void *)v16;
          LODWORD(v82) = v17;
        }
      }
      else
      {
        uint64_t v18 = *(void **)(a1 + 32);
        if (v18) {
          FigCoreMotionGetGravity(v18, (const char *)&bytes, (uint64_t)&bytes + 4, (uint64_t)&v82);
        }
      }
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDataRef v20 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)&bytes, 12);
      if (v20)
      {
        CFDataRef v21 = v20;
        CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F559F0], v20);
        CFRelease(v21);
        LODWORD(valuePtr[0]) = 1065353216;
        LODWORD(values) = 0;
        CFTypeRef cf1 = v12;
        uint64_t v22 = portIndexFromPortType(v12, (int *)&values);
        if (!v22)
        {
          LODWORD(v85[0]) = 1;
          int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
          int v24 = LODWORD(v85[0]);
          if (Int32IfPresent && SLODWORD(v85[0]) <= 0)
          {
            int v24 = 1;
            LODWORD(v85[0]) = 1;
          }
          if (FigMotionComputeLensPositionScalingFactor(a2, Dimensions, HIDWORD(Dimensions), *(_DWORD *)(a1 + 464) * v24, (*(_DWORD *)(a1 + 468) * v24), (float *)valuePtr))
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
          FigCFDictionarySetFloat();
          float v25 = *(float *)(a1 + 56 * values + 116);
          if (v25 <= 0.0) {
            float v25 = 1.0;
          }
          float v26 = *(float *)valuePtr * v25;
          if (FigCFDictionaryGetFloatIfPresent() && *((float *)v80 + 1) > 0.00000011921) {
            goto LABEL_41;
          }
          int v27 = *(unsigned __int8 *)(a1 + 472);
          if (CFDictionaryContainsKey(a2, (const void *)*MEMORY[0x1E4F54118]))
          {
            if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F52DE8]) {
              || (LODWORD(time.CFDictionaryAddValue(theDict, key, value) = 0, FigCFDictionaryGetIntIfPresent()) && LODWORD(time.value)
            }
              || (CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F52DF8]) || CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F52E10])) && v27)
            {
              LODWORD(time.CFDictionaryAddValue(theDict, key, value) = 0;
              FigCFDictionaryGetFloatIfPresent();
              float v28 = v26 * *(float *)&time.value;
              *((float *)v80 + 1) = v26 * *(float *)&time.value;
              if ((float)(v26 * *(float *)&time.value) > 0.00000011921)
              {
LABEL_39:
                if (v28 <= 0.00000011921) {
                  *((float *)v80 + 1) = (float)(int)Dimensions * 0.7;
                }
LABEL_41:
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
                if ((*(unsigned char *)(a1 + 40) & 0x80) != 0 && v7 <= 0)
                {
                  CFArrayRef v29 = sbp_ma_copyAndFlushISPData(*(const __CFArray **)(a1 + 584));
                  if (v29)
                  {
                    CFArrayRef v30 = v29;
                    valuePtr[0] = -*(double *)(a1 + 568);
                    CFNumberRef v31 = CFNumberCreate(v19, kCFNumberDoubleType, valuePtr);
                    uint64_t v32 = *MEMORY[0x1E4F55A08];
                    time.unsigned int value = *MEMORY[0x1E4F55A10];
                    *(void *)&time.timescale = v32;
                    *(void *)&long long values = v31;
                    *((void *)&values + 1) = v30;
                    CFDictionaryRef v33 = CFDictionaryCreate(v19, (const void **)&time, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F55A28], v33);
                    CFRelease(v33);
                    CFRelease(v30);
                    CFRelease(v31);
                  }
                }
                if ((*(unsigned char *)(a1 + 41) & 1) == 0)
                {
                  uint64_t v34 = 0;
                  goto LABEL_64;
                }
                CFMutableArrayRef Mutable = CFArrayCreateMutable(v19, 2, MEMORY[0x1E4F1D510]);
                if (!Mutable)
                {
                  fig_log_get_emitter();
                  FigDebugAssert3();
                  return FigSignalErrorAt();
                }
                long long v36 = Mutable;
                int32_t v76 = Dimensions;
                int v77 = v7;
                uint64_t v37 = 0;
                uint64_t v34 = 0;
                char v38 = 1;
                CFArrayRef v39 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
                while (1)
                {
                  char v40 = v38;
                  uint64_t v41 = a1 + 8 * v37;
                  if (CFArrayGetCount(*(CFArrayRef *)(v41 + 624)) >= 1)
                  {
                    CFArrayRef v42 = *(const __CFArray **)(v41 + 624);
                    LODWORD(values) = v37;
                    CFArrayRef v43 = sbp_ma_copyAndFlushISPData(v42);
                    if (v43)
                    {
                      CFArrayRef v44 = v43;
                      CFNumberRef v45 = CFNumberCreate(v19, kCFNumberIntType, &values);
                      if (!v45)
                      {
                        fig_log_get_emitter();
                        FigDebugAssert3();
                        uint64_t v34 = FigSignalErrorAt();
                        goto LABEL_59;
                      }
                      CFNumberRef v46 = v45;
                      time.unsigned int value = (CMTimeValue)v45;
                      *(void *)&time.timescale = v44;
                      CFArrayRef v47 = CFArrayCreate(v19, (const void **)&time, 2, v39);
                      if (!v47)
                      {
                        fig_log_get_emitter();
                        FigDebugAssert3();
                        uint64_t v34 = FigSignalErrorAt();
                        CFRelease(v46);
LABEL_59:
                        CFRelease(v44);
                        if (v34)
                        {
                          fig_log_get_emitter();
                          FigDebugAssert3();
                        }
                        goto LABEL_55;
                      }
                      CFArrayRef v48 = v47;
                      CFArrayAppendValue(v36, v47);
                      CFRelease(v46);
                      CFRelease(v48);
                      CFRelease(v44);
                    }
                    uint64_t v34 = 0;
                  }
LABEL_55:
                  char v38 = 0;
                  uint64_t v37 = 1;
                  if ((v40 & 1) == 0)
                  {
                    CopCGFloat y = CFArrayCreateCopy(v19, v36);
                    int v7 = v77;
                    if (Copy)
                    {
                      CFArrayRef v50 = Copy;
                      CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F55A20], Copy);
                      CFRelease(v50);
                    }
                    CFRelease(v36);
                    LODWORD(Dimensions) = v76;
LABEL_64:
                    float v51 = *(void **)(a1 + 32);
                    if (v51)
                    {
                      if (v7 <= 0)
                      {
                        time.unsigned int value = 0;
                        FigCoreMotionCopyMotionData(v51, &time);
                        if (time.value)
                        {
                          CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F55A30], (const void *)time.value);
                          CFRelease((CFTypeRef)time.value);
                        }
                      }
                    }
                    if ((*(unsigned char *)(a1 + 40) & 0x56) == 0) {
                      return v34;
                    }
                    double v52 = (double)SHIDWORD(v82);
                    if (*(void *)(a1 + 32)) {
                      double v53 = v14 + v83 * -0.5 + 0.005;
                    }
                    else {
                      double v53 = v14 + v83 * -0.5;
                    }
                    double v54 = v53 + v52 / 1000000.0;
                    if (v7 < 1)
                    {
                      double v56 = v53;
                    }
                    else
                    {
                      int v55 = *(_DWORD *)(a1 + 560);
                      double v56 = v53 + (double)((int)Dimensions - v55) / (double)(2 * (int)Dimensions) * (v54 - v53);
                      double v54 = v53 + (double)(v55 + (int)Dimensions) / (double)(2 * (int)Dimensions) * (v54 - v53);
                    }
                    unsigned int v79 = 0;
                    uint64_t v57 = portIndexFromPortType(cf1, (int *)&v79);
                    if (v57)
                    {
                      uint64_t v34 = v57;
                      fig_log_get_emitter();
                      goto LABEL_117;
                    }
                    unsigned int v86 = 0;
                    long long values = xmmword_1A5F0C858;
                    long long v89 = unk_1A5F0C868;
                    memset(v85, 0, sizeof(v85));
                    CFArrayRef v58 = *(const __CFArray **)(a1 + 584);
                    unsigned int v59 = *(_DWORD *)(a1 + 28);
                    if (v58)
                    {
                      if (v59 < 2)
                      {
                        unsigned int v60 = FigMotionComputeQuaternionAndAttitudeFromArray(v58, (double *)(a1 + 480), v85, v53 + v52 / 2000000.0);
                        goto LABEL_83;
                      }
                      if (v59 == 2)
                      {
                        unsigned int v60 = FigMotionComputeAverageQuaternionFromArray(v58, (_OWORD *)(a1 + 480), v56, v54);
LABEL_83:
                        unsigned int v86 = v60;
                      }
LABEL_88:
                      CFNumberRef v63 = CFNumberCreate(v19, kCFNumberSInt32Type, &v86);
                      CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F55A38], v63);
                      CFRelease(v63);
                      if ((*(unsigned char *)(a1 + 40) & 0x52) != 0)
                      {
                        LODWORD(v80[0]) = 0;
                        FigCFDictionaryGetInt32IfPresent();
                        FigMotionCalculateAdjustedFocusPosition((int *)v80, *(float *)&v82, *(float *)(a1 + 56 * v79 + 112));
                        if (!*(unsigned char *)(a1 + 544))
                        {
                          long long v64 = *(_OWORD *)(a1 + 496);
                          *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 480);
                          *(_OWORD *)(a1 + 52_Block_object_dispose(&STACK[0x458], 8) = v64;
                          *(unsigned char *)(a1 + 544) = 1;
                        }
                        double v65 = FigMotionMultiplyByInverseOfQuaternion((double *)(a1 + 512), (uint64_t *)(a1 + 480));
                        valuePtr[0] = v65;
                        valuePtr[1] = v66;
                        valuePtr[2] = v67;
                        valuePtr[3] = v68;
                        long long v69 = *(_OWORD *)(a1 + 496);
                        *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 480);
                        *(_OWORD *)(a1 + 52_Block_object_dispose(&STACK[0x458], 8) = v69;
                        int v70 = *(_DWORD *)(a1 + 40);
                        if ((v70 & 0x40) != 0)
                        {
                          memset(&time, 0, sizeof(time));
                          FigMotionAttitudeFromQuaternion((long double *)&time.value, v65, v66, v67, v68);
                          CFDataRef v71 = CFDataCreate(v19, (const UInt8 *)&time, 24);
                          CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F559F8], v71);
                          if (v71) {
                            CFRelease(v71);
                          }
                          int v70 = *(_DWORD *)(a1 + 40);
                        }
                        if ((v70 & 2) != 0)
                        {
                          FigMotionComputeTranslationFromCameraMotion(valuePtr, a1 + 56 * v79 + 72, (uint64_t)v80, (float *)&time);
                          unsigned int v86 = v72;
                          if (!v72)
                          {
                            *(float32x2_t *)(a1 + 552) = vadd_f32((float32x2_t)time.value, *(float32x2_t *)(a1 + 552));
                            CFDataRef v73 = CFDataCreate(v19, (const UInt8 *)(a1 + 552), 8);
                            CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F55A58], v73);
                            if (v73) {
                              CFRelease(v73);
                            }
                            int v70 = *(_DWORD *)(a1 + 40);
                            goto LABEL_100;
                          }
LABEL_118:
                          fig_log_get_emitter();
                          FigDebugAssert3();
                        }
                        else
                        {
LABEL_100:
                          if ((v70 & 0x10) != 0)
                          {
                            unsigned int v86 = FigMotionComputeTransformFromCameraMotion(valuePtr, a1 + 56 * v79 + 72, (uint64_t)v80, 0, 0, (float *)&time);
                            if (v86) {
                              goto LABEL_118;
                            }
                            CFDataRef v74 = CFDataCreate(v19, (const UInt8 *)&time, 36);
                            CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F55A50], v74);
                            if (v74) {
                              CFRelease(v74);
                            }
                          }
                        }
                      }
                      uint64_t v34 = v86;
                      if (!v86) {
                        return v34;
                      }
                      fig_log_get_emitter();
LABEL_117:
                      FigDebugAssert3();
                      return v34;
                    }
                    if (v59 < 2)
                    {
                      unsigned int QuaternionAndAttitude = FigCoreMotionGetQuaternionAndAttitude(*(void **)(a1 + 32), (double *)&values, 0, v85, 0);
                      goto LABEL_86;
                    }
                    if (v59 == 2)
                    {
                      unsigned int QuaternionAndAttitude = FigCoreMotionGetAverageQuaternion(*(void **)(a1 + 32), (uint64_t)&values, 0);
LABEL_86:
                      unsigned int v86 = QuaternionAndAttitude;
                    }
                    long long v62 = v89;
                    *(_OWORD *)(a1 + 480) = values;
                    *(_OWORD *)(a1 + 496) = v62;
                    goto LABEL_88;
                  }
                }
              }
            }
          }
          uint64_t v22 = FigMotionCalculateAdjustedLensPosition(a2, a1 + 56 * values + 72, (float *)v80 + 1, *(float *)&v82, *(float *)valuePtr);
          if (!v22)
          {
            float v28 = *((float *)v80 + 1);
            goto LABEL_39;
          }
        }
        uint64_t v34 = v22;
        fig_log_get_emitter();
        FigDebugAssert3();
        fig_log_get_emitter();
        goto LABEL_117;
      }
      fig_log_get_emitter();
      FigDebugAssert3();
      FigSignalErrorAt();
      return 0;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

CFArrayRef sbp_ma_copyAndFlushISPData(const __CFArray *theArray)
{
  if (theArray)
  {
    uint64_t v1 = theArray;
    CopCGFloat y = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theArray);
    CFArrayRemoveAllValues(v1);
    return Copy;
  }
  return theArray;
}

uint64_t F32toF16_0(float a1)
{
  int v1 = HIWORD(LODWORD(a1)) & 0x8000;
  unsigned int v2 = (LODWORD(a1) >> 23);
  unsigned int v3 = ((((LODWORD(a1) & 0x7FFFFFu) >> 13) | (LODWORD(a1) >> 23 << 10)) + 0x4000) | v1;
  if (v2 < 0x71) {
    LOWORD(v3) = HIWORD(a1) & 0x8000;
  }
  unsigned __int16 v4 = v1 | 0x7C00;
  if (v2 >= 0x8F) {
    LOWORD(v3) = v4;
  }
  unsigned __int16 v5 = v4 | LOWORD(a1) & 0x3FF;
  if ((LODWORD(a1) & 0x7FFFFF) == 0) {
    unsigned __int16 v5 = v4;
  }
  if (v2 != 255) {
    return (unsigned __int16)v3;
  }
  return v5;
}

float F16toF32(unsigned int a1)
{
  unsigned int v1 = (a1 >> 10) & 0x1F;
  int v2 = a1 & 0x3FF;
  if (v1 == 31)
  {
    LODWORD(result) = v2 | 0x7F800000;
  }
  else if (v1)
  {
    if (v1 > 0xE) {
      float v4 = (float)(1 << (v1 - 15));
    }
    else {
      float v4 = 1.0 / (float)(1 << (15 - v1));
    }
    float result = (float)((float)((float)v2 * 0.00097656) + 1.0) * v4;
  }
  else if ((a1 & 0x3FF) != 0)
  {
    float result = (float)v2 * 0.000000059605;
  }
  else
  {
    float result = 0.0;
  }
  if ((a1 & 0x8000u) != 0) {
    return -result;
  }
  return result;
}

void *BWSmartStyleInfoDictionary(void *a1, void *a2, __CVBuffer *a3, __CVBuffer *a4, __CVBuffer *a5, uint64_t a6, int a7)
{
  int v39 = 1065353216;
  int v40 = 1065353216;
  double v14 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  if (a3)
  {
    id DataFromPixelBufferWithoutPadding = _getDataFromPixelBufferWithoutPadding(a3, a6 != 0, a7);
    if (!DataFromPixelBufferWithoutPadding)
    {
      id v23 = 0;
      id v24 = 0;

      goto LABEL_32;
    }
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a3);
    if (PixelFormatType != 1278226536 && PixelFormatType != 1278226534)
    {
      fig_log_get_emitter();
LABEL_30:
      FigDebugAssert3();
      id v23 = 0;
      id v24 = 0;
      goto LABEL_31;
    }
    BOOL v16 = PixelFormatType == 1278226536;
    [v14 setObject:DataFromPixelBufferWithoutPadding forKeyedSubscript:*MEMORY[0x1E4F55E10]];
    uint64_t v17 = [NSNumber numberWithBool:v16];
    [v14 setObject:v17 forKeyedSubscript:*MEMORY[0x1E4F55E18]];
  }
  else
  {
    id DataFromPixelBufferWithoutPadding = 0;
  }
  uint64_t v18 = [a2 objectForKeyedSubscript:*MEMORY[0x1E4F53F18]];
  if (v18) {
    [v14 setObject:v18 forKeyedSubscript:*MEMORY[0x1E4F55DE0]];
  }
  if ([MEMORY[0x1E4F55F08] computeLinearImageExposureWithMetadata:a2 outputBaseGain:&v40 outputBaselineExposure:&v39])goto LABEL_33; {
  [v14 setObject:&unk_1EFB00518 forKeyedSubscript:*MEMORY[0x1E4F55E08]];
  }
  LODWORD(v19) = v39;
  uint64_t v20 = [NSNumber numberWithFloat:v19];
  [v14 setObject:v20 forKeyedSubscript:*MEMORY[0x1E4F55DD0]];
  LODWORD(v21) = v40;
  uint64_t v22 = [NSNumber numberWithFloat:v21];
  [v14 setObject:v22 forKeyedSubscript:*MEMORY[0x1E4F55DF8]];
  id v23 = 0;
  id v24 = 0;
  if (!a4 || !a5) {
    goto LABEL_17;
  }
  if (CVPixelBufferGetPixelFormatType(a4) != 1278226536 || CVPixelBufferGetPixelFormatType(a5) != 1278226536)
  {
LABEL_33:
    fig_log_get_emitter();
    goto LABEL_30;
  }
  id v24 = _getDataFromPixelBufferWithoutPadding(a4, 1, a7);
  if (!v24)
  {
    id v23 = 0;
    goto LABEL_31;
  }
  id v23 = _getDataFromPixelBufferWithoutPadding(a5, 1, a7);
  if (!v23) {
    goto LABEL_31;
  }
  [v14 setObject:v24 forKeyedSubscript:*MEMORY[0x1E4F55E28]];
  [v14 setObject:v23 forKeyedSubscript:*MEMORY[0x1E4F55E48]];
  objc_msgSend(v14, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetWidth(a4)), *MEMORY[0x1E4F55E40]);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetHeight(a4)), *MEMORY[0x1E4F55E30]);
  uint64_t v25 = [NSNumber numberWithUnsignedInt:1278226536];
  [v14 setObject:v25 forKeyedSubscript:*MEMORY[0x1E4F55E38]];
LABEL_17:
  uint64_t v26 = *MEMORY[0x1E4F534B0];
  if ([a1 objectForKeyedSubscript:*MEMORY[0x1E4F534B0]])
  {
    uint64_t v27 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v26), "intValue");
    uint64_t v28 = [NSNumber numberWithInt:v27];
    [v14 setObject:v28 forKeyedSubscript:*MEMORY[0x1E4F55E20]];
  }
  if (!a6)
  {
    if (!objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F534F0]), "BOOLValue"))goto LABEL_31; {
    uint64_t v36 = *MEMORY[0x1E4F53518];
    }
    if (![a1 objectForKeyedSubscript:*MEMORY[0x1E4F53518]]) {
      goto LABEL_31;
    }
    uint64_t v34 = (void *)[a1 objectForKeyedSubscript:v36];
    CFAllocatorRef v35 = (void *)MEMORY[0x1E4F55E50];
    goto LABEL_28;
  }
  uint64_t v29 = [a1 objectForKeyedSubscript:*MEMORY[0x1E4F534D8]];
  [v14 setObject:v29 forKeyedSubscript:*MEMORY[0x1E4F55DE8]];
  uint64_t v30 = [a1 objectForKeyedSubscript:*MEMORY[0x1E4F534E0]];
  [v14 setObject:v30 forKeyedSubscript:*MEMORY[0x1E4F55DF0]];
  uint64_t v31 = [a1 objectForKeyedSubscript:*MEMORY[0x1E4F53508]];
  [v14 setObject:v31 forKeyedSubscript:*MEMORY[0x1E4F55E00]];
  uint64_t v32 = [a1 objectForKeyedSubscript:*MEMORY[0x1E4F53E68]];
  int v33 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F10]), "BOOLValue");
  if (v32)
  {
    if (v33) {
      uint64_t v34 = &unk_1EFB04F78;
    }
    else {
      uint64_t v34 = (void *)v32;
    }
    CFAllocatorRef v35 = (void *)MEMORY[0x1E4F55DD8];
LABEL_28:
    [v14 setObject:v34 forKeyedSubscript:*v35];
  }
LABEL_31:

LABEL_32:
  return v14;
}

id _getDataFromPixelBufferWithoutPadding(__CVBuffer *a1, int a2, int a3)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  OSType v7 = PixelFormatType;
  if (PixelFormatType == 1278226536)
  {
    unint64_t v8 = 2;
  }
  else
  {
    if (PixelFormatType != 1278226534) {
      return 0;
    }
    unint64_t v8 = 4;
  }
  if (CVPixelBufferLockBaseAddress(a1, 1uLL)) {
    return 0;
  }
  if (a2)
  {
    unsigned int v9 = 0;
  }
  else
  {
    if (a3) {
      uint64_t v11 = 3;
    }
    else {
      uint64_t v11 = 2;
    }
    uint64_t v12 = [MEMORY[0x1E4F55F18] configurationForUseCase:v11];
    [MEMORY[0x1E4F55F28] coefficientPixelBufferSizeForConfiguration:v12 float16:v7 == 1278226536];
    unsigned int v9 = (v13 * v14 * (double)v8);
  }
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  size_t v19 = Width * v8;
  size_t v20 = v19 * Height;
  if (!a2) {
    size_t v20 = v9;
  }
  size_t v26 = v20;
  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
  if (Height)
  {
    unsigned int v21 = 0;
    unint64_t v22 = 1;
    do
    {
      [v10 appendBytes:BaseAddress length:v19];
      v21 += BytesPerRow;
      char v23 = a2 ^ 1;
      if (v9 > v21) {
        char v23 = 0;
      }
      if (v23) {
        break;
      }
      BaseAddress += BytesPerRow;
    }
    while (Height > v22++);
  }
  if ([v10 length] != v26)
  {

    id v10 = 0;
  }
  if (CVPixelBufferUnlockBaseAddress(a1, 1uLL))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v10;
}

char *BWPreviewSynchronizerCreate(const void *a1)
{
  int v2 = (char *)malloc_type_malloc(0x30uLL, 0x10200403042BB7FuLL);
  *(void *)int v2 = 0;
  if (a1)
  {
    *(void *)int v2 = CFRetain(a1);
    *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x458], 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    if (FigSignalErrorAt())
    {
      BWPreviewSynchronizerDestroy((const void **)v2);
      return 0;
    }
  }
  return v2;
}

double BWPreviewSynchronizerReset(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x458], 8) = 0u;
  return 0.0;
}

double BWPreviewSynchronizerGetInsertionTime(double *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  double v4 = CACurrentMediaTime();
  if (a2)
  {
    CMTime v23 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CFDictionaryRef v5 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F530C0], 0);
    if (v5) {
      CMTimeMakeFromDictionary(&v23, v5);
    }
    else {
      CMSampleBufferGetPresentationTimeStamp(&v23, (CMSampleBufferRef)a2);
    }
    CMTime time = v23;
    double Seconds = CMTimeGetSeconds(&time);
    double v7 = a1[3];
    if (v7 <= 0.0)
    {
      a1[3] = Seconds;
      double v7 = Seconds;
    }
    double v8 = Seconds - v7;
    double v9 = a1[2];
    if (v8 <= v9 * 1.9 || v9 == 0.0) {
      double v11 = v8;
    }
    else {
      double v11 = a1[2];
    }
    if ((unint64_t)CAImageQueueGetTimes() < 2)
    {
      double v20 = a1[1];
      if (v20 > 0.0) {
        double v4 = v20 + a1[4];
      }
    }
    else
    {
      double v12 = *(double *)&v23.value;
      double v13 = *(double *)&v23.timescale - *(double *)&v23.value;
      double v14 = v11 / (*(double *)&v23.timescale - *(double *)&v23.value);
      double v15 = round(v14);
      if (v14 >= 1.0) {
        double v14 = v15;
      }
      if (v14 >= 1.0) {
        double v16 = v14 + 0.35;
      }
      else {
        double v16 = v14 * 1.35;
      }
      a1[4] = v13;
      double v17 = v12 - v13 + v13 * v16;
      double v18 = v13 * 0.5;
      double v19 = v17 + v13 * 0.01;
      if (v17 - a1[1] <= v18) {
        double v4 = v19;
      }
      else {
        double v4 = v17;
      }
    }
    a1[2] = v11;
    a1[3] = Seconds;
    a1[1] = v4;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v4;
}

void sub_1A5C55D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBMCameraCaptureAutoFocusROIClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMCameraCaptureAutoFocusROI");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getBMCameraCaptureAutoFocusROIClass_block_invoke_cold_1();
  }
  getBMCameraCaptureAutoFocusROIClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t BiomeLibraryLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __BiomeLibraryLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E5C296A0;
    uint64_t v4 = 0;
    BiomeLibraryLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = BiomeLibraryLibraryCore_frameworkLibrary;
  if (!BiomeLibraryLibraryCore_frameworkLibrary) {
    BiomeLibraryLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __BiomeLibraryLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BiomeLibraryLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getBiomeLibrarySymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BiomeLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBiomeLibrarySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t FigVirtualDisplaySourceCameraViewfinderStreamCreate(const __CFAllocator *a1, void *a2)
{
  if (!a2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  FigVirtualDisplaySourceGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    uint64_t v6 = v4;
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    return v6;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)uint64_t DerivedStorage = 0;
  uint64_t v6 = VTPixelTransferSessionCreate(a1, (VTPixelTransferSessionRef *)(DerivedStorage + 56));
  if (v6)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  *a2 = 0;
  return v6;
}

uint64_t FigVirtualDisplaySourceCameraViewfinderStreamEnqueueFrame(double a1, double a2, double a3, double a4, uint64_t a5, opaqueCMSampleBuffer *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CVPixelBufferRef destinationBuffer = 0;
  CMTime v43 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (*(_DWORD *)DerivedStorage == 1 && (uint64_t v12 = DerivedStorage, *(void *)(DerivedStorage + 48)))
  {
    CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(a6);
    if (ImageBuffer)
    {
      double v14 = ImageBuffer;
      double v15 = (double)(int)((int)(a3 + 0.5) & 0xFFFFFFFE);
      double v16 = (double)(int)((int)(a4 + 0.5) & 0xFFFFFFFE);
      double v40 = *(double *)(v12 + 8);
      double v41 = a2;
      double v17 = *(double *)(v12 + 24);
      double v39 = *(double *)(v12 + 16);
      double v18 = *(double *)(v12 + 32);
      CMSampleBufferGetPresentationTimeStamp(&v43, a6);
      CMTime hostTime = v43;
      uint64_t v19 = CMClockConvertHostTimeToSystemUnits(&hostTime);
      BOOL v20 = v18 < v16 || v17 < v15;
      double v21 = (double)(int)((int)(a4 + 0.5) & 0xFFFFFFFE);
      double v22 = v15;
      if (v20)
      {
        double v23 = v18 / v16;
        if (v18 / v16 >= v17 / v15) {
          double v23 = v17 / v15;
        }
        double v22 = (double)(int)((int)(v23 * v15) & 0xFFFFFFFE);
        double v21 = (double)(int)((int)(v23 * v16) & 0xFFFFFFFE);
      }
      uint64_t v24 = *(void *)(v12 + 48);
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = *(uint64_t (**)(uint64_t, void, uint64_t, CVPixelBufferRef *, double, double))(v26 + 88);
      if (v27)
      {
        uint64_t v28 = v27(v24, 0, 1, &destinationBuffer, v22, v21);
        if (v28)
        {
          uint64_t v35 = v28;
        }
        else
        {
          v45.origin.CGFloat x = (double)(int)(a1 + 0.5);
          v45.origin.CGFloat y = (double)(int)(v41 + 0.5);
          v45.size.double width = v15;
          v45.size.double height = v16;
          CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v45);
          VTSessionSetProperty(*(VTSessionRef *)(v12 + 56), (CFStringRef)*MEMORY[0x1E4F45170], DictionaryRepresentation);
          CFRelease(DictionaryRepresentation);
          uint64_t v30 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(v12 + 56), v14, destinationBuffer);
          if (v30)
          {
            uint64_t v35 = v30;
            fig_log_get_emitter();
            goto LABEL_27;
          }
          uint64_t v31 = *(void *)(v12 + 48);
          CVPixelBufferRef v32 = destinationBuffer;
          uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v33) {
            uint64_t v34 = v33;
          }
          else {
            uint64_t v34 = 0;
          }
          uint64_t v36 = *(uint64_t (**)(uint64_t, CVPixelBufferRef, uint64_t, void, void, double, double, double, double, double, double, double, double))(v34 + 80);
          if (v36)
          {
            uint64_t v37 = v36(v31, v32, v19, 0, 0, 0.0, 0.0, v22, v21, v40, v39, v17, v18);
            uint64_t v35 = 0;
            if (!v37) {
              goto LABEL_28;
            }
            uint64_t v35 = v37;
          }
          else
          {
            uint64_t v35 = 4294954514;
          }
        }
      }
      else
      {
        uint64_t v35 = 4294954514;
      }
      fig_log_get_emitter();
LABEL_27:
      FigDebugAssert3();
      goto LABEL_28;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v35 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v35 = 0;
  }
LABEL_28:
  if (destinationBuffer) {
    CFRelease(destinationBuffer);
  }
  return v35;
}

uint64_t stream_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  unsigned int v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 40) = 0;
  }
  int v2 = *(const void **)(DerivedStorage + 48);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x458], 8) = 0;
  }
  long long v3 = *(const void **)(DerivedStorage + 56);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 56) = 0;
  }
  return 0;
}

uint64_t stream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual((CFTypeRef)*MEMORY[0x1E4F34FC0], a2))
  {
    double v7 = @"CameraViewfinderStream";
    goto LABEL_3;
  }
  if (CFEqual(@"Destination", a2))
  {
    double v7 = *(__CFString **)(DerivedStorage + 40);
    if (!v7)
    {
      CFTypeRef v8 = 0;
      goto LABEL_4;
    }
LABEL_3:
    CFTypeRef v8 = CFRetain(v7);
LABEL_4:
    uint64_t result = 0;
    *a4 = v8;
    return result;
  }
  return 4294954512;
}

uint64_t stream_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(@"Destination", a2)) {
    return 4294954512;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 40);
  *(void *)(DerivedStorage + 40) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v6) {
    CFRelease(v6);
  }
  return 0;
}

uint64_t stream_PlugProcessor(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(_DWORD *)DerivedStorage || *(void *)(DerivedStorage + 48))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 4294955223;
    }
    else
    {
      *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x458], 8) = a2;
      CFRetain(a2);
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294955226;
  }
}

uint64_t stream_UnplugProcessor(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (uint64_t v4 = DerivedStorage, !*(_DWORD *)DerivedStorage) && *(const void **)(DerivedStorage + 48) == a2)
  {
    CFRelease(a2);
    uint64_t result = 0;
    *(void *)(v4 + 4_Block_object_dispose(&STACK[0x458], 8) = 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294955226;
  }
  return result;
}

uint64_t stream_Start()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage || (uint64_t v1 = DerivedStorage, !*(void *)(DerivedStorage + 48)))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294955226;
  }
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  long long v16 = *MEMORY[0x1E4F1DB28];
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v5 + 56);
  if (!v6)
  {
    uint64_t DimensionsFromTimingMode = 4294954514;
LABEL_18:
    fig_log_get_emitter();
LABEL_19:
    FigDebugAssert3();
    goto LABEL_20;
  }
  uint64_t v7 = v6(v3, &v18, &v17);
  if (v7)
  {
    uint64_t DimensionsFromTimingMode = v7;
    goto LABEL_18;
  }
  uint64_t v8 = FigDisplayModes_LookupTimingModeIDByIndex();
  if (v8)
  {
    uint64_t DimensionsFromTimingMode = v8;
    fig_log_get_emitter();
    goto LABEL_19;
  }
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  double v13 = *(uint64_t (**)(uint64_t, void, void))(v11 + 64);
  if (!v13)
  {
    uint64_t DimensionsFromTimingMode = 4294954514;
    goto LABEL_18;
  }
  uint64_t v14 = v13(v9, 0, 0);
  if (v14)
  {
    uint64_t DimensionsFromTimingMode = v14;
    goto LABEL_18;
  }
  uint64_t DimensionsFromTimingMode = FigDisplayModes_ExtractDimensionsFromTimingMode();
  if (DimensionsFromTimingMode) {
    goto LABEL_18;
  }
  *(_OWORD *)(v1 + _Block_object_dispose(&STACK[0x458], 8) = v16;
  *(_OWORD *)(v1 + 24) = xmmword_1A5F0C9A0;
LABEL_20:
  if (v18) {
    CFRelease(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (DimensionsFromTimingMode)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    *(_DWORD *)uint64_t v1 = 1;
  }
  return DimensionsFromTimingMode;
}

uint64_t stream_Stop()
{
  *(_DWORD *)CMBaseObjectGetDerivedStorage() = 0;
  return 0;
}

uint64_t stream_Suspend()
{
  return 0;
}

uint64_t stream_Resume()
{
  return 0;
}

uint64_t utlLandmarkToC0(int a1, double *a2, double *a3, float64x2_t *a4, float64x2_t a5)
{
  if (a2 && a3 && a4)
  {
    a5.f64[0] = *a3 + *a2 * a3[2];
    double v5 = 1.0 - (a3[1] + a2[1] * a3[3]);
    a4->f64[0] = a5.f64[0];
    a4->f64[1] = v5;
    rotatedC0toSensorOrientation(a1, a4, a5);
    return 1;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
}

float64_t rotatedC0toSensorOrientation(int a1, float64x2_t *a2, float64x2_t a3)
{
  switch(a1)
  {
    case 2:
      a3.f64[0] = 1.0 - a2->f64[0];
      a2->f64[0] = a3.f64[0];
      return a3.f64[0];
    case 3:
      __asm { FMOV            V1.2D, #1.0 }
      a3 = vsubq_f64(_Q1, *a2);
      *a2 = a3;
      return a3.f64[0];
    case 4:
      a3.f64[0] = 1.0 - a2->f64[1];
      a2->f64[1] = a3.f64[0];
      return a3.f64[0];
    case 5:
      double v8 = a2->f64[1];
      float v9 = a2->f64[0];
      goto LABEL_10;
    case 6:
      double v8 = a2->f64[1];
      float v10 = a2->f64[0];
      goto LABEL_8;
    case 7:
      float v10 = a2->f64[0];
      double v8 = 1.0 - a2->f64[1];
LABEL_8:
      float v9 = 1.0 - v10;
      goto LABEL_10;
    case 8:
      float v9 = a2->f64[0];
      double v8 = 1.0 - a2->f64[1];
LABEL_10:
      a3.f64[0] = v9;
      a2->f64[0] = v8;
      a2->f64[1] = a3.f64[0];
      break;
    default:
      return a3.f64[0];
  }
  return a3.f64[0];
}

void vcn_encoderCallback(uint64_t a1, void *value, uint64_t a3, int a4, opaqueCMSampleBuffer *target)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  float v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8])
  {
    LODWORD(v33.CFDictionaryAddValue(theDict, key, value) = 0;
    CMSampleBufferGetPresentationTimeStamp(&time, target);
    CMTimeGetSeconds(&time);
    CMSampleBufferGetDecodeTimeStamp(&v34, target);
    CMTimeGetSeconds(&v34);
    FigCFDictionaryGetIntIfPresent();
    if (*v9 == 1)
    {
      [(id)a1 pipelineTraceID];
      kdebug_trace();
    }
  }
  if (!a3)
  {
LABEL_13:
    if (!value) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (target)
  {
    float v10 = *(void **)(a1 + 272);
    uint64_t v11 = @"encoder callback, but returned sample buffer?!?";
LABEL_12:
    [v10 logErrorNumber:a3 errorString:v11];
    goto LABEL_13;
  }
  CMTimeValue v37 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  if (value)
  {
    CMTimeMakeFromDictionary(&v33, (CFDictionaryRef)[value objectForKeyedSubscript:@"VideoCompressorNodeAttachedPTS"]);
    CMTimeValue v37 = v33.value;
    CMTimeFlags flags = v33.flags;
    CMTimeScale timescale = v33.timescale;
    CMTimeEpoch epoch = v33.epoch;
    [value setObject:0 forKeyedSubscript:@"VideoCompressorNodeAttachedPTS"];
  }
  else
  {
    CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  uint64_t v14 = *(void **)(a1 + 272);
  if ((flags & 1) == 0)
  {
    uint64_t v11 = @"encoder callback leaking";
    float v10 = *(void **)(a1 + 272);
    goto LABEL_12;
  }
  v33.unsigned int value = v37;
  v33.CMTimeScale timescale = timescale;
  v33.CMTimeFlags flags = flags;
  v33.CMTimeEpoch epoch = epoch;
  [v14 logErrorNumber:a3, objc_msgSend(NSString, "stringWithFormat:", @"encoder callback dropping %.4lf", CMTimeGetSeconds(&v33)) errorString];
  v33.unsigned int value = v37;
  v33.CMTimeScale timescale = timescale;
  v33.CMTimeFlags flags = flags;
  v33.CMTimeEpoch epoch = epoch;
  objc_msgSend(*(id *)(a1 + 16), "emitDroppedSample:", +[BWDroppedSample newDroppedSampleWithReason:pts:](BWDroppedSample, "newDroppedSampleWithReason:pts:", 0x1EFA67FE0, &v33));
  if (value)
  {
LABEL_14:
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], value, 1u);
  }
LABEL_15:
  if (target)
  {
    uint64_t DataBuffer = CMSampleBufferGetDataBuffer(target);
    if (DataBuffer)
    {
      long long v16 = DataBuffer;
      size_t DataLength = CMBlockBufferGetDataLength(DataBuffer);
      if (*(void *)(a1 + 312) && DataLength != 0) {
        +[BWBufferometer trackBuffer:trackedSize:tag:bufferType:](BWBufferometer, "trackBuffer:trackedSize:tag:bufferType:", v16, DataLength, [NSString stringWithFormat:@"%@ Compressed Video", objc_msgSend((id)a1, "name")], @"CMBlockBuffer");
      }
    }
    uint64_t v19 = *(const void **)(a1 + 264);
    if (v19)
    {
      CMSetAttachment(target, @"FileCompletionScaledThumbnailSourcePixelBuffer", v19, 1u);
      BOOL v20 = *(const void **)(a1 + 264);
      if (v20)
      {
        CFRelease(v20);
        *(void *)(a1 + 264) = 0;
      }
    }
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    double v21 = *(void **)(a1 + 328);
    uint64_t v22 = [v21 countByEnumeratingWithState:&v29 objects:v36 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v30;
      do
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          if (*(void *)v30 != v24) {
            objc_enumerationMutation(v21);
          }
          CFStringRef v26 = *(const __CFString **)(*((void *)&v29 + 1) + 8 * i);
          CMSetAttachment(target, v26, (CFTypeRef)[value objectForKeyedSubscript:v26], 1u);
          [value setObject:0 forKeyedSubscript:v26];
        }
        uint64_t v23 = [v21 countByEnumeratingWithState:&v29 objects:v36 count:16];
      }
      while (v23);
    }
    uint64_t v27 = *(NSObject **)(a1 + 144);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __vcn_encoderCallback_block_invoke;
    block[3] = &unk_1E5C24F10;
    block[4] = a1;
    void block[5] = target;
    dispatch_sync(v27, block);
  }
}

uint64_t __vcn_encoderCallback_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 194))
  {
    *(unsigned char *)(v2 + 194) = 1;
    if (dword_1EB4C50B0)
    {
      int v8 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "emitSampleBuffer:", *(void *)(a1 + 40), v5, v6);
}

uint64_t rl_concreteRendererWithParametersForType(uint64_t result, void *a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t a6, int a7)
{
  if (a3 && a4)
  {
    switch((int)result)
    {
      case 0:
        uint64_t v11 = (void *)[a2 provideStreamingSDOFFilterRenderer];
        *a3 = (uint64_t)v11;
        objc_opt_class();
        uint64_t result = objc_opt_isKindOfClass();
        if (result)
        {
          if ((unint64_t)[a5 count] >= 2)
          {
            uint64_t v12 = -[BWStreamingCVAFilterRendererParameters initWithColorFilter:colorLookupCache:studioAndContourRenderingEnabled:stageRenderingEnabled:]([BWStreamingCVAFilterRendererParameters alloc], "initWithColorFilter:colorLookupCache:studioAndContourRenderingEnabled:stageRenderingEnabled:", [a5 lastObject], objc_msgSend(a2, "provideColorLookupCache"), objc_msgSend(v11, "studioAndContourRenderingEnabled"), objc_msgSend(v11, "stageRenderingEnabled"));
            goto LABEL_16;
          }
          uint64_t result = 0;
          goto LABEL_17;
        }
        return result;
      case 1:
        uint64_t result = [a2 provideStillImageMetalBlurMapRenderer];
        goto LABEL_14;
      case 2:
        uint64_t result = [a2 provideStillImageMetalSDOFRenderer];
LABEL_14:
        *a3 = result;
        *a4 = 0;
        return result;
      case 3:
        uint64_t result = [a2 provideStillImageCoreImageBlurMapRenderer];
        goto LABEL_19;
      case 4:
        *a3 = [a2 provideCoreImageFilterRenderer];
        if (a7) {
          uint64_t v15 = a6;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v12 = [[BWCoreImageFilterRendererParameters alloc] initWithFilters:a5 originalOutputFilter:v15];
        goto LABEL_16;
      case 5:
        *a3 = [a2 provideMetalFilterRenderer];
        uint64_t v12 = -[BWMetalColorCubeRendererParameters initWithColorFilter:colorLookupCache:]([BWMetalColorCubeRendererParameters alloc], "initWithColorFilter:colorLookupCache:", [a5 lastObject], objc_msgSend(a2, "provideColorLookupCache"));
LABEL_16:
        uint64_t result = v12;
LABEL_17:
        *a4 = result;
        break;
      case 6:
        uint64_t result = [a2 provideApplySmartStyleRenderer];
LABEL_19:
        *a3 = result;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t visn_pixelFormatsArrayFromPixelFormatTypeValue(uint64_t a1)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v3[0] = a1;
    return [MEMORY[0x1E4F1C978] arrayWithObjects:v3 count:1];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      return a1;
    }
    else {
      return 0;
    }
  }
}

const void *visn_setSynchronizedSlaveFrameLivePhotoKeyFrameMetadata(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t result = (const void *)BWSampleBufferGetAttachedMedia(a3, @"SynchronizedSlaveFrame");
  if (result)
  {
    uint64_t v6 = (void *)CMGetAttachment(result, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    [v6 setObject:a1 forKeyedSubscript:*MEMORY[0x1E4F55D10]];
    uint64_t v7 = *MEMORY[0x1E4F52DC0];
    return (const void *)[v6 setObject:a2 forKeyedSubscript:v7];
  }
  return result;
}

double visn_transformRectangle(uint64_t a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7 = 0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  double v28 = a4 * (double)(int)a2;
  double v29 = a5 * (double)SHIDWORD(a2);
  double v30 = v28 + a6 * (double)(int)a2;
  double v31 = v29;
  double v32 = v28;
  double v33 = v29 + a7 * (double)SHIDWORD(a2);
  double v34 = v30;
  double v35 = v33;
  do
  {
    uint64_t v8 = 0;
    uint64_t v9 = &v28 + 2 * v7;
    double v10 = *v9;
    double v11 = v9[1];
    uint64_t v12 = (float *)(a1 + 8);
    do
    {
      double v13 = v11 * *(v12 - 1) + *(v12 - 2) * v10;
      float v14 = *v12;
      v12 += 3;
      *(float *)&double v13 = v13 + v14;
      v26.i32[v8++] = LODWORD(v13);
    }
    while (v8 != 3);
    uint64_t v15 = (const float *)v27;
    float32x2_t v16 = vld1_dup_f32(v15);
    *(float64x2_t *)&v27[16 * v7++ + 8] = vcvtq_f64_f32(vdiv_f32(v26, v16));
  }
  while (v7 != 4);
  uint64_t v17 = 0;
  float v18 = 3.4028e38;
  float v19 = 1.1755e-38;
  float v20 = 1.1755e-38;
  float v21 = 3.4028e38;
  do
  {
    float v22 = *(double *)&v27[v17 + 8];
    float v21 = fminf(v21, v22);
    float v23 = *(double *)&v27[v17 + 16];
    float v18 = fminf(v18, v23);
    float v20 = fmaxf(v20, v22);
    float v19 = fmaxf(v19, v23);
    v17 += 16;
  }
  while (v17 != 64);
  int v24 = a2 - a3;
  if ((int)a2 < a3) {
    ++v24;
  }
  return (float)(fmaxf(fminf((float)a3, v21 - (float)(v24 >> 1)), 0.0) / (float)a3);
}

uint64_t __jdpc_createStateMachine_block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 _serviceNextRequest];
}

uint64_t __jdpc_createStateMachine_block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 _execute];
}

uint64_t cdpr_notificationFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  CFTypeRef cf = 0;
  if (captureDeferredPhotoProcessor_createDeserializedNotification(a2, a3, a4, (uint64_t *)&cf))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef v7 = 0;
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = 4;
    CFTypeRef v7 = cf;
  }
  *a5 = v7;
  return result;
}

uint64_t cdpr_messageHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFTypeRef v11 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v10 = 0;
  FigXPCMessageCopyCFString();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 12));
  if (*(unsigned char *)(DerivedStorage + 9))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v7 = 4294950474;
    goto LABEL_8;
  }
  uint64_t v4 = FigXPCMessageCopyCFDictionary();
  if (v4)
  {
    uint64_t v7 = v4;
    fig_log_get_emitter();
LABEL_18:
    FigDebugAssert3();
    goto LABEL_8;
  }
  DeserializedNotificatiouint64_t n = captureDeferredPhotoProcessor_createDeserializedNotification((uint64_t)cf, a2, (uint64_t)v11, (uint64_t *)&v10);
  if (DeserializedNotification)
  {
    uint64_t v7 = DeserializedNotification;
    fig_log_get_emitter();
    goto LABEL_18;
  }
  if (*(void *)(DerivedStorage + 16))
  {
    uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v7 = v6;
    if (!v6) {
      goto LABEL_8;
    }
    (*(void (**)(uint64_t, CFTypeRef, CFTypeRef))(DerivedStorage + 16))(v6, cf, v10);
    CFRelease((CFTypeRef)v7);
  }
  uint64_t v7 = 0;
LABEL_8:
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 12));
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v7;
}

__CFString *captureDeferredPhotoProcessorRemote_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptureDeferredPhotoProcessorRemote %p retainCount: %ld%s allocator: %p, objectID: %lld>", a1, v5, v6, v7, *(void *)DerivedStorage);
  return Mutable;
}

uint64_t captureDeferredPhotoProcessorRemote_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = 0;
  if (!a4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v9 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = DerivedStorage;
  if (!CFEqual(a2, @"ServerConnectionDied"))
  {
    uint64_t ObjectID = captureDeferredPhotoProcessorRemote_getObjectID(a1, &v13);
    if (ObjectID)
    {
      uint64_t v9 = ObjectID;
      fig_log_get_emitter();
    }
    else
    {
      uint64_t v9 = FigXPCSendStdCopyPropertyMessage();
      if (!v9) {
        goto LABEL_9;
      }
      fig_log_get_emitter();
    }
    FigDebugAssert3();
    goto LABEL_9;
  }
  uint64_t v9 = 0;
  if (*(unsigned char *)(v8 + 9)) {
    CFTypeRef v10 = (void *)MEMORY[0x1E4F1CFD0];
  }
  else {
    CFTypeRef v10 = (void *)MEMORY[0x1E4F1CFC8];
  }
  *a4 = *v10;
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t captureDeferredPhotoProcessorRemote_SetProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = captureDeferredPhotoProcessorRemote_getObjectID(a1, &v4);
  if (ObjectID)
  {
    uint64_t v2 = ObjectID;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  uint64_t v2 = FigXPCSendStdSetPropertyMessage();
  if (v2)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureDeferredPhotoProcessorRemote_CopyUnfinishedPhotoIdentifiers(uint64_t a1)
{
  uint64_t v2 = 0;
  if (captureDeferredPhotoProcessorRemote_createBasicMessage(a1, 1668311411, &v2)
    || FigXPCRemoteClientSendSyncMessageCreatingReply()
    || FigXPCMessageCopyCFObject())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return 0;
}

uint64_t captureDeferredPhotoProcessorRemote_ProcessPhoto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v3 = captureDeferredPhotoProcessorRemote_createPhotoIdentifierMessage(a1, 1885893743, a2, a3, &v6);
  if (v3 || (uint64_t v3 = FigXPCMessageSetCFString(), v3))
  {
    uint64_t v4 = v3;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_4;
  }
  uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
  if (v4)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredPhotoProcessorRemote_CancelPhotoProcessing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v3 = captureDeferredPhotoProcessorRemote_createPhotoIdentifierMessage(a1, 1668311156, a2, a3, &v6);
  if (v3)
  {
    uint64_t v4 = v3;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
  if (v4)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredPhotoProcessorRemote_Prewarm()
{
  return 4294954514;
}

uint64_t captureDeferredPhotoProcessorRemote_CancelAllPrewarming(uint64_t a1)
{
  uint64_t v5 = 0;
  if (!FigCaptureDeferredPhotoProcessorIsAllowedToPrewarm())
  {
    uint64_t v3 = 0;
    goto LABEL_4;
  }
  uint64_t v2 = captureDeferredPhotoProcessorRemote_createBasicMessage(a1, 1668313709, &v5);
  if (v2)
  {
    uint64_t v3 = v2;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_4;
  }
  uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
  if (v3)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  return v3;
}

uint64_t captureDeferredPhotoProcessorRemote_DeletePersistentStorageForPhoto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v3 = captureDeferredPhotoProcessorRemote_createPhotoIdentifierMessage(a1, 1685091188, a2, a3, &v6);
  if (v3)
  {
    uint64_t v4 = v3;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
  if (v4)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredPhotoProcessorRemote_PrettyPrintContainerDescription(uint64_t a1)
{
  v2[0] = 0;
  v2[1] = 0;
  if (captureDeferredPhotoProcessorRemote_getObjectID(a1, v2)
    || FigXPCCreateBasicMessage()
    || FigXPCMessageSetCFString())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else if (FigXPCRemoteClientSendSyncMessageCreatingReply() || FigXPCMessageCopyCFString())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return 0;
}

uint64_t captureDeferredPhotoProcessorRemote_createBasicMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (!a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  uint64_t ObjectID = captureDeferredPhotoProcessorRemote_getObjectID(a1, &v7);
  if (ObjectID)
  {
    uint64_t v5 = ObjectID;
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    return v5;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  *a3 = v8;
  return v5;
}

uint64_t captureDeferredPhotoProcessorRemote_createPhotoIdentifierMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (!a5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  uint64_t ObjectID = captureDeferredPhotoProcessorRemote_getObjectID(a1, &v9);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
  {
    uint64_t v7 = ObjectID;
    fig_log_get_emitter();
LABEL_11:
    FigDebugAssert3();
    return v7;
  }
  uint64_t v7 = FigXPCMessageSetCFString();
  if (v7)
  {
    fig_log_get_emitter();
    goto LABEL_11;
  }
  *a5 = v10;
  return v7;
}

uint64_t __FigCaptureSpeakerInterferenceMitigationInitialize_block_invoke()
{
  sIsSpeakerInterferenceMitigationRequiredLocuint64_t k = FigSimpleMutexCreate();
  uint64_t result = FigCaptureAudiomxdSupportEnabled();
  if (result)
  {
    CStringPtr = CFStringGetCStringPtr(@"SpeakerInterferenceMitigationRequiredChanged", 0x8000100u);
    if (FigCaptureCurrentProcessIsCameracaptured()
      || FigCaptureCurrentProcessIsMediaserverd())
    {
      return notify_register_check(CStringPtr, &gSpeakerInterferenceMitigationToken);
    }
    else
    {
      uint64_t result = FigCaptureCurrentProcessIsAudiomxd();
      if (result)
      {
        sNotifyQueue = FigDispatchQueueCreateWithPriority();
        uint64_t result = notify_register_dispatch(CStringPtr, &gSpeakerInterferenceMitigationToken, (dispatch_queue_t)sNotifyQueue, &__block_literal_global_5);
        if (!result)
        {
          uint64_t state64 = 0;
          uint64_t result = notify_get_state(gSpeakerInterferenceMitigationToken, &state64);
          sIsSpeakerInterferenceMitigationRequireCGFloat d = state64;
        }
      }
    }
  }
  return result;
}

void __FigCaptureSpeakerInterferenceMitigationInitialize_block_invoke_2()
{
  uint64_t state64 = 0;
  notify_get_state(gSpeakerInterferenceMitigationToken, &state64);
  FigCaptureSpeakerSetInterferenceMitigationIsRequired(state64, 0);
}

uint64_t BWStillImageCaptureIDForSampleBuffer(const void *a1)
{
  uint64_t v2 = (void *)CMGetAttachment(a1, @"StillSettings", 0);
  if (!v2)
  {
    uint64_t v2 = (void *)CMGetAttachment(a1, @"BWStillImageCaptureSettings", 0);
    if (!v2) {
      return -1;
    }
  }
  return [v2 settingsID];
}

uint64_t BWStillImageProcessingFlagsForSampleBuffer(const void *a1)
{
  uint64_t v1 = (void *)CMGetAttachment(a1, @"StillImageProcessingFlags", 0);
  return [v1 unsignedIntValue];
}

void BWStillImageSetProcessingFlagsForSampleBuffer(const void *a1, int a2)
{
  uint64_t v3 = (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend((id)CMGetAttachment(a1, @"StillImageProcessingFlags", 0), "unsignedIntValue") | a2);
  CMSetAttachment(a1, @"StillImageProcessingFlags", v3, 1u);
}

void BWStillImageUnsetProcessingFlagsForSampleBuffer(const void *a1, int a2)
{
  uint64_t v3 = (const void *)objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend((id)CMGetAttachment(a1, @"StillImageProcessingFlags", 0), "unsignedIntValue") & ~a2);
  CMSetAttachment(a1, @"StillImageProcessingFlags", v3, 1u);
}

unint64_t BWCropRectDimensionsForZoomFactor(uint64_t a1, float a2)
{
  FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)a1, a1 >> 32, 0.0, 0.0, 1.0 / a2, 1.0 / a2, (double)(int)a1 / (double)SHIDWORD(a1));
  double width = v5.size.width;
  double height = v5.size.height;
  if (CGRectIsNull(v5)) {
    FigDebugAssert3();
  }
  return (int)width | ((unint64_t)(int)height << 32);
}

unint64_t BWDimensionsConformingToZoomWithoutUpscalingIfRequired(unint64_t a1, void *a2, float a3)
{
  unint64_t v6 = HIDWORD(a1);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  int v7 = [a2 isZoomWithoutUpscalingEnabled];
  if (a3 > 1.0 && v7)
  {
    unint64_t v8 = BWCropRectDimensionsForZoomFactor(a1, a3);
    unsigned int v9 = v8;
    unint64_t v10 = HIDWORD(v8);
    if (dword_1EB4C52F0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    LODWORD(v10) = v6;
    unsigned int v9 = a1;
  }
  return v9 | ((unint64_t)v10 << 32);
}

uint64_t BWUpdateThumbnailAndPreviewDimensionsForRequestedSettings(void *a1, float a2)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v5 = [a1 thumbnailWidth];
  uint64_t v6 = [a1 thumbnailHeight];
  if (!FigCaptureVideoDimensionsAreValid(v5 | (unint64_t)(v6 << 32)))
  {
    uint64_t v22 = 0;
    if ([a1 outputFileType] != 1751476579
      && [a1 outputFileType] != 1751476582
      || ([a1 outputWidth],
          [a1 outputHeight],
          CMPhotoDetermineMIAFCompliantThumbnailMaxPixelSize()))
    {
      uint64_t v22 = 320;
    }
    FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect(v22, v22, 0.0, 0.0, 1.0, 1.0, (double)[a1 outputWidth] / (double)objc_msgSend(a1, "outputHeight"));
    double width = v23.size.width;
    double height = v23.size.height;
    if (CGRectIsNull(v23))
    {
      uint64_t v21 = v2;
      LODWORD(v20) = 0;
      FigDebugAssert3();
    }
    else
    {
      uint64_t v5 = (int)width;
      uint64_t v6 = (int)height;
      if ([a1 outputWidth] <= v5) {
        uint64_t v5 = [a1 outputWidth];
      }
      if ([a1 outputHeight] <= v6) {
        uint64_t v6 = [a1 outputHeight];
      }
    }
  }
  objc_msgSend(a1, "setThumbnailWidth:", v5, v20, v21);
  [a1 setThumbnailHeight:v6];
  if ([a1 rawThumbnailEnabled])
  {
    unint64_t v9 = BWDimensionsConformingToZoomWithoutUpscalingIfRequired([a1 rawThumbnailWidth] | (unint64_t)(objc_msgSend(a1, "rawThumbnailHeight") << 32), a1, a2);
    uint64_t v10 = HIDWORD(v9);
    if ([a1 outputWidth] <= v9) {
      unint64_t v9 = [a1 outputWidth];
    }
    if ([a1 outputHeight] <= v10) {
      uint64_t v10 = [a1 outputHeight];
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v9 = 0;
  }
  [a1 setRawThumbnailWidth:v9];
  [a1 setRawThumbnailHeight:v10];
  if ([a1 previewEnabled])
  {
    uint64_t v11 = [a1 previewWidth];
    uint64_t v12 = [a1 previewHeight];
    uint64_t v13 = MGGetSInt32Answer();
    uint64_t v14 = MGGetSInt32Answer();
    if (v11 && v12)
    {
      unsigned int v15 = [a1 outputWidth];
      unsigned int v16 = v13;
      if (v15 > v13) {
        unsigned int v16 = [a1 outputWidth];
      }
      if (v11 >= v16)
      {
        uint64_t v11 = v13;
        if ([a1 outputWidth] > v13) {
          uint64_t v11 = [a1 outputWidth];
        }
      }
      unsigned int v17 = [a1 outputHeight];
      unsigned int v18 = v14;
      if (v17 > v14) {
        unsigned int v18 = [a1 outputHeight];
      }
      if (v12 >= v18)
      {
        if ([a1 outputHeight] > v14) {
          uint64_t v14 = [a1 outputHeight];
        }
      }
      else
      {
        uint64_t v14 = v12;
      }
    }
    else
    {
      uint64_t v11 = v13;
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v11 = 0;
  }
  [a1 setPreviewWidth:v11];
  return [a1 setPreviewHeight:v14];
}

BWStillImageFocusPixelBlurScoreResult *BWFocusPixelBlurScoreForMetadata(void *a1)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v2 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F53EA8]];
  if (v2)
  {
    uint64_t v3 = v2;
    if ([v2 length] == 4136)
    {
      uint64_t v4 = (unsigned char *)[v3 bytes];
      if (*v4)
      {
        uint64_t v6 = v4[27] * v4[26];
        if (v6)
        {
          unsigned int v7 = 0;
          unint64_t v8 = v4 + 44;
          float v9 = 0.0;
          float v10 = 0.0;
          do
          {
            unsigned int v11 = *(v8 - 1);
            if (*v8) {
              BOOL v12 = v11 == 0;
            }
            else {
              BOOL v12 = 1;
            }
            if (!v12)
            {
              LOBYTE(v5) = *(v8 - 2);
              float v5 = (float)LODWORD(v5) / 255.0;
              float v13 = (float)((float)v11 * 8.0) * v5;
              ++v7;
              float v10 = v10 + v13;
              float v9 = v9
                 + (float)((float)((float)((float)*((__int16 *)v8 - 2) * 0.0039062)
                                 * (float)((float)*((__int16 *)v8 - 2) * 0.0039062))
                         * v13);
            }
            v8 += 8;
            --v6;
          }
          while (v6);
          if (v7 < 0xA)
          {
            uint64_t v14 = 5;
          }
          else
          {
            if (fabsf(v10) >= 0.0001)
            {
              uint64_t v14 = 0;
              float v15 = sqrtf(v9 / v10);
              goto LABEL_15;
            }
            uint64_t v14 = 6;
          }
        }
        else
        {
          uint64_t v14 = 4;
        }
      }
      else
      {
        uint64_t v14 = 3;
      }
    }
    else
    {
      uint64_t v14 = 2;
    }
  }
  else
  {
    uint64_t v14 = 1;
  }
  float v15 = NAN;
LABEL_15:
  unsigned int v16 = [BWStillImageFocusPixelBlurScoreResult alloc];
  *(float *)&double v17 = v15;
  unsigned int v18 = [(BWStillImageFocusPixelBlurScoreResult *)v16 initWithStatus:v14 score:v17];
  return v18;
}

void *BWGetWhiteBalanceMetadataFromFrameStatistics(void *a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(a1, "awbStable"));
  [v2 setObject:v3 forKeyedSubscript:*MEMORY[0x1E4F53C98]];
  uint64_t v4 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(a1, "awbLocked"));
  [v2 setObject:v4 forKeyedSubscript:*MEMORY[0x1E4F53C68]];
  uint64_t v5 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(a1, "awbRGain"));
  [v2 setObject:v5 forKeyedSubscript:*MEMORY[0x1E4F53C70]];
  uint64_t v6 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(a1, "awbGGain"));
  [v2 setObject:v6 forKeyedSubscript:*MEMORY[0x1E4F53C48]];
  uint64_t v7 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(a1, "awbBGain"));
  [v2 setObject:v7 forKeyedSubscript:*MEMORY[0x1E4F53C10]];
  uint64_t v8 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(a1, "awbComboRGain"));
  [v2 setObject:v8 forKeyedSubscript:*MEMORY[0x1E4F53C28]];
  uint64_t v9 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(a1, "awbComboGGain"));
  [v2 setObject:v9 forKeyedSubscript:*MEMORY[0x1E4F53C20]];
  uint64_t v10 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(a1, "awbComboBGain"));
  [v2 setObject:v10 forKeyedSubscript:*MEMORY[0x1E4F53C18]];
  if ([a1 awbSkinRGain]
    && [a1 awbSkinGGain]
    && [a1 awbSkinBGain])
  {
    uint64_t v11 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(a1, "awbSkinRGain"));
    [v2 setObject:v11 forKeyedSubscript:*MEMORY[0x1E4F53C88]];
    uint64_t v12 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(a1, "awbSkinGGain"));
    [v2 setObject:v12 forKeyedSubscript:*MEMORY[0x1E4F53C80]];
    uint64_t v13 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(a1, "awbSkinBGain"));
    [v2 setObject:v13 forKeyedSubscript:*MEMORY[0x1E4F53C78]];
  }
  if ([a1 awbSpatialCCMMixingFactor])
  {
    uint64_t v14 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(a1, "awbSpatialCCMMixingFactor"));
    [v2 setObject:v14 forKeyedSubscript:*MEMORY[0x1E4F53C90]];
  }
  uint64_t v15 = [a1 colorCorrectionMatrix];
  [v2 setObject:v15 forKeyedSubscript:*MEMORY[0x1E4F53D70]];
  uint64_t v16 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(a1, "cct"));
  [v2 setObject:v16 forKeyedSubscript:*MEMORY[0x1E4F53D50]];
  return v2;
}

uint64_t BWCopyWhiteBalanceMetadata(void *a1, void *a2)
{
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D50]), *MEMORY[0x1E4F53D50]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C68]), *MEMORY[0x1E4F53C68]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C98]), *MEMORY[0x1E4F53C98]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C70]), *MEMORY[0x1E4F53C70]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C48]), *MEMORY[0x1E4F53C48]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C10]), *MEMORY[0x1E4F53C10]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C28]), *MEMORY[0x1E4F53C28]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C20]), *MEMORY[0x1E4F53C20]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C18]), *MEMORY[0x1E4F53C18]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C40]), *MEMORY[0x1E4F53C40]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C38]), *MEMORY[0x1E4F53C38]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C30]), *MEMORY[0x1E4F53C30]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C88]), *MEMORY[0x1E4F53C88]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C80]), *MEMORY[0x1E4F53C80]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C78]), *MEMORY[0x1E4F53C78]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53D70]), *MEMORY[0x1E4F53D70]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54040]), *MEMORY[0x1E4F54040]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53C90]), *MEMORY[0x1E4F53C90]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", @"AwbOutputMetadata"), @"AwbOutputMetadata");
  uint64_t v4 = [a1 objectForKeyedSubscript:@"MIWBOutputMetadata"];
  return [a2 setObject:v4 forKeyedSubscript:@"MIWBOutputMetadata"];
}

uint64_t BWCopyLTMMetadata(void *a1, void *a2)
{
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54000]), *MEMORY[0x1E4F54000]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53FF8]), *MEMORY[0x1E4F53FF8]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54398]), *MEMORY[0x1E4F54398]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F533B0]), *MEMORY[0x1E4F533B0]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53348]), *MEMORY[0x1E4F53348]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53358]), *MEMORY[0x1E4F53358]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F531F8]), *MEMORY[0x1E4F531F8]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F533A8]), *MEMORY[0x1E4F533A8]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53340]), *MEMORY[0x1E4F53340]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53350]), *MEMORY[0x1E4F53350]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F531F0]), *MEMORY[0x1E4F531F0]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54010]), *MEMORY[0x1E4F54010]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53EF8]), *MEMORY[0x1E4F53EF8]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53F18]), *MEMORY[0x1E4F53F18]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53CF0]), *MEMORY[0x1E4F53CF0]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53338]), *MEMORY[0x1E4F53338]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53330]), *MEMORY[0x1E4F53330]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F53380]), *MEMORY[0x1E4F53380]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54040]), *MEMORY[0x1E4F54040]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F54050]), *MEMORY[0x1E4F54050]);
  uint64_t v4 = *MEMORY[0x1E4F54048];
  uint64_t v5 = [a1 objectForKeyedSubscript:*MEMORY[0x1E4F54048]];
  return [a2 setObject:v5 forKeyedSubscript:v4];
}

uint64_t BWInferenceTypeForInferenceAttachmentKey(void *a1)
{
  if (([a1 isEqualToString:0x1EFA6A380] & 1) != 0
    || ([a1 isEqualToString:0x1EFA6A3A0] & 1) != 0)
  {
    return 104;
  }
  if (([a1 isEqualToString:0x1EFA6A0A0] & 1) != 0
    || ([a1 isEqualToString:0x1EFA6A1A0] & 1) != 0)
  {
    return 802;
  }
  if ([a1 isEqualToString:0x1EFA6A1C0]) {
    return 201;
  }
  return 0;
}

uint64_t BWPropagateInferenceAttachedMedia(void *a1, void *a2, CFTypeRef *a3, opaqueCMSampleBuffer *a4)
{
  if (!a1) {
    return 4294954516;
  }
  if (!a2) {
    return 4294954516;
  }
  if (!a3) {
    return 4294954516;
  }
  if (!a4) {
    return 4294954516;
  }
  uint64_t v8 = [a1 inferenceBufferForAttachedMediaKey:a2];
  if (!v8) {
    return 4294954516;
  }
  uint64_t v9 = (__CVBuffer *)v8;
  uint64_t v10 = [a1 metadataForAttachedMediaKey:a2];
  uint64_t v11 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v12 = BWMetadataAttachmentKeyForAttachedMediaKey(a2);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = objc_msgSend((id)objc_msgSend(a1, "inferenceAttachedMediaMetadata"), "objectForKeyedSubscript:", a2);
    if (v14)
    {
      [v11 setObject:v14 forKeyedSubscript:v13];
      goto LABEL_9;
    }
    return 4294954516;
  }
LABEL_9:
  return BWSampleBufferSetAttachedMediaFromPixelBuffer(a4, (uint64_t)a2, v9, a3, v10, v11, v10 == 0);
}

uint64_t BWIsDeferredPhotoProxyImage(unsigned int a1)
{
  return (a1 >> 12) & 1;
}

uint64_t dcn_convertU16toFloatForImage_NEON(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3, int32x2_t a4)
{
  a4.i32[0] = *(_DWORD *)(a3 + 8);
  int32x2_t v66 = a4;
  a4.i32[0] = *(_DWORD *)(a3 + 4);
  int32x2_t v67 = a4;
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  size_t v11 = CVPixelBufferGetBytesPerRow(a2);
  BOOL v12 = FigDepthFormatIs16Bit(PixelFormatType);
  if (v12) {
    uint64_t v13 = 16;
  }
  else {
    uint64_t v13 = 32;
  }
  unsigned int v65 = *(_DWORD *)(a3 + 12);
  pixelBuffer = a1;
  uint64_t v14 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if (v14)
  {
    uint64_t v63 = v14;
    FigDebugAssert3();
  }
  else
  {
    uint64_t v15 = CVPixelBufferLockBaseAddress(a2, 0);
    if (v15)
    {
      uint64_t v63 = v15;
      FigDebugAssert3();
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
    }
    else
    {
      BOOL v16 = FigDepthFormatIsDepth(PixelFormatType) && *(unsigned char *)(a3 + 16) == 0;
      BaseAddress = (uint16x8_t *)CVPixelBufferGetBaseAddress(a1);
      unsigned int v18 = (float16x8_t *)CVPixelBufferGetBaseAddress(a2);
      int32x4_t v19 = vdupq_n_s32(v65);
      float32x4_t v20 = (float32x4_t)vdupq_lane_s32(v66, 0);
      float32x4_t v21 = (float32x4_t)vdupq_lane_s32(v67, 0);
      if (v16)
      {
        if (v12)
        {
          if (Height)
          {
            uint64_t v22 = 0;
            int8x16_t v23 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
            do
            {
              if (Width)
              {
                size_t v24 = 0;
                uint64_t v25 = v18;
                float32x2_t v26 = BaseAddress;
                do
                {
                  uint16x8_t v27 = *v26++;
                  int32x4_t v28 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v27.i8);
                  int32x4_t v29 = (int32x4_t)vmovl_high_u16(v27);
                  float32x4_t v30 = vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v28)), (float32x4_t)0);
                  float32x4_t v31 = vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v29)), (float32x4_t)0);
                  float32x4_t v32 = vrecpeq_f32(v30);
                  float32x4_t v33 = vrecpeq_f32(v31);
                  *uint64_t v25 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v19, v28), v23, (int8x16_t)vmulq_f32(v32, vrecpsq_f32(v30, v32)))), (float32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v19, v29), v23, (int8x16_t)vmulq_f32(v33, vrecpsq_f32(v31, v33))));
                  v24 += 8;
                  uint64_t v25 = (float16x8_t *)((char *)v25 + v13);
                }
                while (Width > v24);
              }
              ++v22;
              BaseAddress = (uint16x8_t *)((char *)BaseAddress + BytesPerRow);
              unsigned int v18 = (float16x8_t *)((char *)v18 + v11);
            }
            while (v22 != Height);
          }
        }
        else if (Height)
        {
          uint64_t v42 = 0;
          int8x16_t v43 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
          do
          {
            if (Width)
            {
              size_t v44 = 0;
              CGRect v45 = (int8x16_t *)v18;
              CFNumberRef v46 = BaseAddress;
              do
              {
                uint16x8_t v47 = *v46++;
                int32x4_t v48 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v47.i8);
                int32x4_t v49 = (int32x4_t)vmovl_high_u16(v47);
                int8x16_t v50 = (int8x16_t)vceqq_s32(v19, v48);
                float32x4_t v51 = vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v48)), (float32x4_t)0);
                float32x4_t v52 = vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v49)), (float32x4_t)0);
                float32x4_t v53 = vrecpeq_f32(v51);
                float32x4_t v54 = vrecpeq_f32(v52);
                *CGRect v45 = vbslq_s8(v50, v43, (int8x16_t)vmulq_f32(v53, vrecpsq_f32(v51, v53)));
                v45[1] = vbslq_s8((int8x16_t)vceqq_s32(v19, v49), v43, (int8x16_t)vmulq_f32(v54, vrecpsq_f32(v52, v54)));
                v45 += 2;
                v44 += 8;
              }
              while (Width > v44);
            }
            ++v42;
            BaseAddress = (uint16x8_t *)((char *)BaseAddress + BytesPerRow);
            unsigned int v18 = (float16x8_t *)((char *)v18 + v11);
          }
          while (v42 != Height);
        }
      }
      else if (v12)
      {
        if (Height)
        {
          uint64_t v34 = 0;
          int8x16_t v35 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
          do
          {
            if (Width)
            {
              size_t v36 = 0;
              CMTimeValue v37 = v18;
              char v38 = BaseAddress;
              do
              {
                uint16x8_t v39 = *v38++;
                int32x4_t v40 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8);
                int32x4_t v41 = (int32x4_t)vmovl_high_u16(v39);
                *CMTimeValue v37 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v19, v40), v35, (int8x16_t)vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v40)), (float32x4_t)0))), (float32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v19, v41), v35, (int8x16_t)vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v41)), (float32x4_t)0)));
                v36 += 8;
                CMTimeValue v37 = (float16x8_t *)((char *)v37 + v13);
              }
              while (Width > v36);
            }
            ++v34;
            BaseAddress = (uint16x8_t *)((char *)BaseAddress + BytesPerRow);
            unsigned int v18 = (float16x8_t *)((char *)v18 + v11);
          }
          while (v34 != Height);
        }
      }
      else if (Height)
      {
        uint64_t v55 = 0;
        int8x16_t v56 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
        do
        {
          if (Width)
          {
            size_t v57 = 0;
            CFArrayRef v58 = (int8x16_t *)v18;
            unsigned int v59 = BaseAddress;
            do
            {
              uint16x8_t v60 = *v59++;
              int32x4_t v61 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.i8);
              int32x4_t v62 = (int32x4_t)vmovl_high_u16(v60);
              *CFArrayRef v58 = vbslq_s8((int8x16_t)vceqq_s32(v19, v61), v56, (int8x16_t)vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v61)), (float32x4_t)0));
              v58[1] = vbslq_s8((int8x16_t)vceqq_s32(v19, v62), v56, (int8x16_t)vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v62)), (float32x4_t)0));
              v58 += 2;
              v57 += 8;
            }
            while (Width > v57);
          }
          ++v55;
          BaseAddress = (uint16x8_t *)((char *)BaseAddress + BytesPerRow);
          unsigned int v18 = (float16x8_t *)((char *)v18 + v11);
        }
        while (v55 != Height);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      return 0;
    }
  }
  return v63;
}

double pixelSumComputeCompatibleROI(int a1, double a2)
{
  int v2 = (int)a2;
  if (a1 - 32 < (int)a2) {
    int v2 = a1 - 32;
  }
  int v3 = v2 & 0xF;
  if (v2 <= 0) {
    int v3 = -(-v2 & 0xF);
  }
  return (double)((v2 - v3) & ~((v2 - v3) >> 31));
}

uint64_t pixelSumForROI(__CVBuffer *a1, int32x4_t *a2, int32x4_t *a3, double a4, double a5, double a6, double a7)
{
  if (!a1 || !a2 || !a3)
  {
    FigDebugAssert3();
    return 0xFFFFFFFFLL;
  }
  if ((CVPixelBufferGetPixelFormatType(a1) & 0xFFFFFFEF) != 0x34323066)
  {
    FigDebugAssert3();
    return 4294967294;
  }
  unsigned int Width = CVPixelBufferGetWidth(a1);
  unsigned int Height = CVPixelBufferGetHeight(a1);
  signed int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  if ((BytesPerRowOfPlane & 0xF) != 0)
  {
    FigDebugAssert3();
    return 4294967293;
  }
  uint64_t v17 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if (v17)
  {
    uint64_t v19 = v17;
    FigDebugAssert3();
    return v19;
  }
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (a4 >= 0.0)
  {
    uint64_t v19 = 0xFFFFFFFFLL;
    if (a4 >= (double)Width || a5 < 0.0) {
      goto LABEL_24;
    }
    BOOL v20 = a5 >= (double)Height || a6 < 1.0;
    BOOL v21 = v20 || a7 < 1.0;
    BOOL v22 = !v21 && a4 + a6 <= (double)Width;
    if (!v22 || a5 + a7 > (double)Height) {
      goto LABEL_24;
    }
    unsigned int v25 = BytesPerRowOfPlane * a5;
    if ((((_BYTE)v25 + a4 + (_BYTE)BaseAddressOfPlane) & 0xF) != 0)
    {
      FigDebugAssert3();
      uint64_t v19 = 4294967294;
      goto LABEL_24;
    }
    signed int v26 = a6;
    if ((a6 & 0x1F) != 0)
    {
      FigDebugAssert3();
      uint64_t v19 = 4294967292;
      goto LABEL_24;
    }
    signed int v27 = a7;
    if ((a7 & 3) != 0)
    {
      FigDebugAssert3();
      uint64_t v19 = 4294967291;
      goto LABEL_24;
    }
    int32x4_t v28 = (int8x16_t *)&BaseAddressOfPlane[v25 + a4];
    if (PixelSumASM(v28, a6, a7, BytesPerRowOfPlane, a2, a3))
    {
      if (v27)
      {
        uint64_t v29 = 0;
        unint64_t v30 = v26 & 0xFFFFFFFFFFFFFFF0;
        float32x4_t v31 = v28;
        do
        {
          if (v26)
          {
            if (v26 >= 0x10)
            {
              unint64_t v35 = 0;
              uint64_t v34 = (int8x16_t *)((char *)v31 + v30);
              int32x4_t v36 = 0uLL;
              int32x4_t v37 = 0uLL;
              int32x4_t v38 = 0uLL;
              int32x4_t v39 = 0uLL;
              do
              {
                uint8x16_t v40 = (uint8x16_t)v31[v35 / 0x10];
                uint16x8_t v41 = vmovl_u8(*(uint8x8_t *)v40.i8);
                uint16x8_t v42 = vmovl_high_u8(v40);
                int32x4_t v39 = (int32x4_t)vaddw_high_u16((uint32x4_t)v39, v42);
                int32x4_t v38 = (int32x4_t)vaddw_u16((uint32x4_t)v38, *(uint16x4_t *)v42.i8);
                int32x4_t v37 = (int32x4_t)vaddw_high_u16((uint32x4_t)v37, v41);
                int32x4_t v36 = (int32x4_t)vaddw_u16((uint32x4_t)v36, *(uint16x4_t *)v41.i8);
                v35 += 16;
              }
              while (v30 != v35);
              int v33 = vaddvq_s32(vaddq_s32(vaddq_s32(v36, v38), vaddq_s32(v37, v39)));
              unint64_t v32 = v26 & 0xFFFFFFFFFFFFFFF0;
              if (v30 == v26) {
                goto LABEL_42;
              }
            }
            else
            {
              unint64_t v32 = 0;
              int v33 = 0;
              uint64_t v34 = v31;
            }
            unint64_t v43 = v26 - v32;
            do
            {
              int v44 = v34->u8[0];
              uint64_t v34 = (int8x16_t *)((char *)v34 + 1);
              v33 += v44;
              --v43;
            }
            while (v43);
          }
          else
          {
            int v33 = 0;
          }
LABEL_42:
          a2->i32[v29] = v33;
          float32x4_t v31 = (int8x16_t *)((char *)v31 + BytesPerRowOfPlane);
          ++v29;
        }
        while (v29 != v27);
      }
      if (v26)
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          if (v27)
          {
            uint64_t v46 = 0;
            __int32 v47 = 0;
            uint64_t v48 = v27;
            do
            {
              v47 += v28->u8[v46];
              v46 += BytesPerRowOfPlane;
              --v48;
            }
            while (v48);
          }
          else
          {
            __int32 v47 = 0;
          }
          a3->i32[i] = v47;
          int32x4_t v28 = (int8x16_t *)((char *)v28 + 1);
        }
      }
    }
    uint64_t v19 = 0;
    goto LABEL_25;
  }
  uint64_t v19 = 0xFFFFFFFFLL;
LABEL_24:
  FigDebugAssert3();
LABEL_25:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return v19;
}

uint64_t findOffsetFromSums(int32x4_t *a1, int32x4_t *a2, int a3, int a4, int a5, int a6, float *a7, int *a8, float *a9)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (!a1 || !a2 || a3 < 0) {
    return result;
  }
  int v13 = a4;
  LODWORD(v14) = 2 * a4;
  if (a3 < 2 * a4) {
    return 4294967294;
  }
  uint64_t v15 = a8;
  BOOL v16 = a7;
  uint64_t v17 = a9;
  if (!a3 || !a7)
  {
    if (a7) {
      *a7 = 0.0;
    }
    if (a9) {
      *a9 = 0.0;
    }
    int v27 = 0;
    uint64_t result = 0;
    if (a8) {
      goto LABEL_74;
    }
    return result;
  }
  uint64_t v75 = (a3 - 2 * a4);
  if ((((_BYTE)a3 - 2 * (_BYTE)a4) & 7) != 0)
  {
    FigDebugAssert3();
    uint64_t v17 = a9;
  }
  CFDataRef v73 = v16;
  if (a5)
  {
    MemSum32(a1, a3);
    uint64_t v19 = v15;
    int v20 = v13;
    int v22 = v21;
    MemSum32(a2, a3);
    uint64_t v17 = a9;
    int v23 = v22 / a3;
    int v13 = v20;
    uint64_t v15 = v19;
    BOOL v16 = v73;
    LODWORD(v74) = v24 / a3;
    HIDWORD(v74) = v23;
    if (a9) {
      goto LABEL_12;
    }
LABEL_21:
    signed int v26 = 0;
    goto LABEL_22;
  }
  uint64_t v74 = 0;
  if (!v17) {
    goto LABEL_21;
  }
LABEL_12:
  unsigned int v25 = (int *)malloc_type_calloc((int)v14, 4uLL, 0x100004052888210uLL);
  uint64_t v17 = a9;
  signed int v26 = v25;
  if (!v25) {
    return 4294967293;
  }
LABEL_22:
  CFDataRef v71 = a2;
  int32x4_t v28 = (int32x4_t *)((char *)a1 + 4 * v13 - 4);
  if (v13 >= 1)
  {
    long long v69 = v26;
    int v70 = v15;
    int v29 = 0;
    uint64_t v30 = 0;
    int v68 = v14;
    if ((int)v14 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v14;
    }
    int v67 = v13;
    int v31 = 1 - v13;
    int v27 = 0x7FFFFFFF;
    unint64_t v32 = v71;
    do
    {
      if (a5) {
        MemDiffZeroMean32(v28, HIDWORD(v74), v32, v74, v75);
      }
      else {
        MemDiff32(v28, v32, v75);
      }
      uint64_t v17 = a9;
      if (a9)
      {
        *signed int v26 = v33;
        v30 += v33;
      }
      unint64_t v32 = (int32x4_t *)((char *)v32 + 4);
      if (v33 < v27)
      {
        int v27 = v33;
        int v29 = v31;
      }
      ++v26;
      ++v31;
      --v14;
    }
    while (v14);
    LODWORD(v14) = v68;
    signed int v26 = v69;
    uint64_t v34 = (int)llround((double)v30 / (double)v68);
    uint64_t v15 = v70;
    BOOL v16 = v73;
    int v13 = v67;
    if (!a9) {
      goto LABEL_53;
    }
    goto LABEL_38;
  }
  int v29 = 0;
  uint64_t v34 = 0;
  int v27 = 0x7FFFFFFF;
  if (v17)
  {
LABEL_38:
    int v35 = v29 + v13;
    int v36 = v13 / 5;
    uint64_t v37 = ((v35 - v36) & ~((v35 - v36) >> 31)) + 1;
    int v38 = 0x7FFFFFFF;
    int32x4_t v39 = v26;
    do
    {
      int v41 = *v39++;
      int v40 = v41;
      if (v41 < v38) {
        int v38 = v40;
      }
      --v37;
    }
    while (v37);
    int v42 = v35 + v36;
    if (v42 >= (int)v14 - 1) {
      int v43 = v14 - 1;
    }
    else {
      int v43 = v42;
    }
    int v44 = &v26[v43];
    int v45 = v14 - v43;
    do
    {
      int v47 = *v44++;
      int v46 = v47;
      if (v47 < v38) {
        int v38 = v46;
      }
      --v45;
    }
    while (v45);
    if (v34 < 1) {
      float v48 = 0.0;
    }
    else {
      float v48 = (float)(v38 - v27) / (float)v34;
    }
    *uint64_t v17 = v48;
  }
LABEL_53:
  float v49 = (float)v29;
  *BOOL v16 = (float)v29;
  if (a6)
  {
    if (v26)
    {
      int v50 = v29 + v13;
      int v51 = v29 + v13 - 2;
      if (v29 + v13 < 2) {
        int v52 = 0;
      }
      else {
        int v52 = v26[v51];
      }
      if (v50 < (int)v14)
      {
        if (v52)
        {
          int v53 = v26[v50];
          if (v53)
          {
            int v54 = v50 - 1;
            if (v52 >= v53) {
              int v51 = v54;
            }
            uint64_t v55 = v75;
            if ((int)v75 < 1)
            {
              float v61 = 0.0;
              float v60 = 0.0;
            }
            else
            {
              int8x16_t v56 = &v71->i32[v51];
              __int32 v59 = *v56;
              size_t v57 = v56 + 1;
              int v58 = v59;
              float v60 = 0.0;
              float v61 = 0.0;
              do
              {
                int v63 = *v57++;
                int v62 = v63;
                float v64 = (float)(v63 - v58);
                float v61 = v61 + (float)(v64 * v64);
                __int32 v65 = v28->i32[0];
                int32x4_t v28 = (int32x4_t *)((char *)v28 + 4);
                float v60 = v60 + (float)((float)(v65 - v58) * v64);
                int v58 = v62;
                --v55;
              }
              while (v55);
            }
            if (fabsf(v61) > 1.0e-10)
            {
              float v66 = v60 / v61;
              if (v52 >= v53) {
                float v49 = v66 + v49;
              }
              else {
                float v49 = v66 + -1.0 + v49;
              }
            }
          }
        }
      }
    }
    else
    {
      FigDebugAssert3();
      float v49 = (float)v29;
    }
    *BOOL v16 = v49;
  }
  free(v26);
  if (v15)
  {
LABEL_74:
    uint64_t result = 0;
    *uint64_t v15 = v27;
    return result;
  }
  return 0;
}

uint64_t PortraitLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  int v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = PortraitLibraryCore_frameworkLibrary;
  uint64_t v5 = PortraitLibraryCore_frameworkLibrary;
  if (!PortraitLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E5C299A8;
    long long v7 = *(_OWORD *)&off_1E5C299B8;
    v3[3] = _sl_dlopen();
    PortraitLibraryCore_frameworkLibrarCGFloat y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A5C7F80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __PortraitLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  PortraitLibraryCore_frameworkLibrarCGFloat y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t PortraitLibrary()
{
  uint64_t v1 = 0;
  uint64_t result = PortraitLibraryCore();
  if (!result) {
    PortraitLibrary_cold_1(&v1);
  }
  return result;
}

Class __getPTEffectClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTEffect");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTEffectClass_block_invoke_cold_1();
  }
  getPTEffectClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPTEffectDescriptorClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTEffectDescriptor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTEffectDescriptorClass_block_invoke_cold_1();
  }
  getPTEffectDescriptorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTTextureClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTTextureClass_softClass;
  uint64_t v8 = getPTTextureClass_softClass;
  if (!getPTTextureClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTTextureClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTTextureClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C7FA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTTextureClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTTexture");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTTextureClass_block_invoke_cold_1();
  }
  getPTTextureClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTRenderPipelineClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTRenderPipelineClass_softClass;
  uint64_t v8 = getPTRenderPipelineClass_softClass;
  if (!getPTRenderPipelineClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTRenderPipelineClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTRenderPipelineClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C7FBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTRenderPipelineClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTRenderPipeline");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTRenderPipelineClass_block_invoke_cold_1();
  }
  getPTRenderPipelineClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTRenderRequestClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTRenderRequestClass_softClass;
  uint64_t v8 = getPTRenderRequestClass_softClass;
  if (!getPTRenderRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTRenderRequestClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTRenderRequestClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C7FD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTRenderRequestClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTRenderRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTRenderRequestClass_block_invoke_cold_1();
  }
  getPTRenderRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTRenderPipelineDescriptorClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTRenderPipelineDescriptorClass_softClass;
  uint64_t v8 = getPTRenderPipelineDescriptorClass_softClass;
  if (!getPTRenderPipelineDescriptorClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTRenderPipelineDescriptorClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTRenderPipelineDescriptorClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C7FE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTRenderPipelineDescriptorClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTRenderPipelineDescriptor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTRenderPipelineDescriptorClass_block_invoke_cold_1();
  }
  getPTRenderPipelineDescriptorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTTuningParametersClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTTuningParametersClass_softClass;
  uint64_t v8 = getPTTuningParametersClass_softClass;
  if (!getPTTuningParametersClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTTuningParametersClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTTuningParametersClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C7FFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTTuningParametersClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTTuningParameters");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTTuningParametersClass_block_invoke_cold_1();
  }
  getPTTuningParametersClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTCinematographyStreamClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTCinematographyStreamClass_softClass;
  uint64_t v8 = getPTCinematographyStreamClass_softClass;
  if (!getPTCinematographyStreamClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTCinematographyStreamClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTCinematographyStreamClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C800F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTCinematographyStreamClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTCinematographyStream");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTCinematographyStreamClass_block_invoke_cold_1();
  }
  getPTCinematographyStreamClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTCinematographyStreamOptionsClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTCinematographyStreamOptionsClass_softClass;
  uint64_t v8 = getPTCinematographyStreamOptionsClass_softClass;
  if (!getPTCinematographyStreamOptionsClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTCinematographyStreamOptionsClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTCinematographyStreamOptionsClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C80240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTCinematographyStreamOptionsClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTCinematographyStreamOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTCinematographyStreamOptionsClass_block_invoke_cold_1();
  }
  getPTCinematographyStreamOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTCinematographyRefinementClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTCinematographyRefinementClass_softClass;
  uint64_t v8 = getPTCinematographyRefinementClass_softClass;
  if (!getPTCinematographyRefinementClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTCinematographyRefinementClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTCinematographyRefinementClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C80388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTCinematographyRefinementClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTCinematographyRefinement");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTCinematographyRefinementClass_block_invoke_cold_1();
  }
  getPTCinematographyRefinementClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTCinematographyExcludeAsCinematicChoiceSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getPTCinematographyExcludeAsCinematicChoiceSymbolLoc_ptr;
  uint64_t v6 = getPTCinematographyExcludeAsCinematicChoiceSymbolLoc_ptr;
  if (!getPTCinematographyExcludeAsCinematicChoiceSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)PortraitLibrary();
    v4[3] = (uint64_t)dlsym(v1, "PTCinematographyExcludeAsCinematicChoice");
    getPTCinematographyExcludeAsCinematicChoiceSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C804D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getPTCinematographyExcludeAsCinematicChoiceSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)PortraitLibrary();
  Class result = dlsym(v2, "PTCinematographyExcludeAsCinematicChoice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPTCinematographyExcludeAsCinematicChoiceSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t getPTCinematographyExcludeAsCinematicChoice()
{
  PTCinematographyExcludeAsCinematicChoiceSymbolLoCGFloat c = getPTCinematographyExcludeAsCinematicChoiceSymbolLoc();
  if (!PTCinematographyExcludeAsCinematicChoiceSymbolLoc) {
    getPTCinematographyExcludeAsCinematicChoice_cold_1();
  }
  return *(void *)PTCinematographyExcludeAsCinematicChoiceSymbolLoc;
}

uint64_t getPTGlobalCinematographyMetadataVersion1Class()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTGlobalCinematographyMetadataVersion1Class_softClass;
  uint64_t v8 = getPTGlobalCinematographyMetadataVersion1Class_softClass;
  if (!getPTGlobalCinematographyMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTGlobalCinematographyMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTGlobalCinematographyMetadataVersion1Class_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C80634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalCinematographyMetadataVersion1Class_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTGlobalCinematographyMetadataVersion1");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTGlobalCinematographyMetadataVersion1Class_block_invoke_cold_1();
  }
  getPTGlobalCinematographyMetadataVersion1Class_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTGlobalRenderingMetadataVersion1Class()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTGlobalRenderingMetadataVersion1Class_softClass;
  uint64_t v8 = getPTGlobalRenderingMetadataVersion1Class_softClass;
  if (!getPTGlobalRenderingMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTGlobalRenderingMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTGlobalRenderingMetadataVersion1Class_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C8077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalRenderingMetadataVersion1Class_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTGlobalRenderingMetadataVersion1");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTGlobalRenderingMetadataVersion1Class_block_invoke_cold_1();
  }
  getPTGlobalRenderingMetadataVersion1Class_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTGlobalRenderingMetadataVersion2Class()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTGlobalRenderingMetadataVersion2Class_softClass;
  uint64_t v8 = getPTGlobalRenderingMetadataVersion2Class_softClass;
  if (!getPTGlobalRenderingMetadataVersion2Class_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTGlobalRenderingMetadataVersion2Class_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTGlobalRenderingMetadataVersion2Class_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C808C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalRenderingMetadataVersion2Class_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTGlobalRenderingMetadataVersion2");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTGlobalRenderingMetadataVersion2Class_block_invoke_cold_1();
  }
  getPTGlobalRenderingMetadataVersion2Class_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTGlobalStabilizationMetadataVersion1Class()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTGlobalStabilizationMetadataVersion1Class_softClass;
  uint64_t v8 = getPTGlobalStabilizationMetadataVersion1Class_softClass;
  if (!getPTGlobalStabilizationMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTGlobalStabilizationMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTGlobalStabilizationMetadataVersion1Class_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C80A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalStabilizationMetadataVersion1Class_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTGlobalStabilizationMetadataVersion1");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTGlobalStabilizationMetadataVersion1Class_block_invoke_cold_1();
  }
  getPTGlobalStabilizationMetadataVersion1Class_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTGlobalVideoHeaderMetadataVersion1Class()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTGlobalVideoHeaderMetadataVersion1Class_softClass;
  uint64_t v8 = getPTGlobalVideoHeaderMetadataVersion1Class_softClass;
  if (!getPTGlobalVideoHeaderMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTGlobalVideoHeaderMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTGlobalVideoHeaderMetadataVersion1Class_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C80B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalVideoHeaderMetadataVersion1Class_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTGlobalVideoHeaderMetadataVersion1");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTGlobalVideoHeaderMetadataVersion1Class_block_invoke_cold_1();
  }
  getPTGlobalVideoHeaderMetadataVersion1Class_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTGlobalVideoMetadataClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTGlobalVideoMetadataClass_softClass;
  uint64_t v8 = getPTGlobalVideoMetadataClass_softClass;
  if (!getPTGlobalVideoMetadataClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTGlobalVideoMetadataClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTGlobalVideoMetadataClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C80C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalVideoMetadataClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTGlobalVideoMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTGlobalVideoMetadataClass_block_invoke_cold_1();
  }
  getPTGlobalVideoMetadataClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTTimedRenderingMetadataVersion1Class()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTTimedRenderingMetadataVersion1Class_softClass;
  uint64_t v8 = getPTTimedRenderingMetadataVersion1Class_softClass;
  if (!getPTTimedRenderingMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTTimedRenderingMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTTimedRenderingMetadataVersion1Class_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C80DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTTimedRenderingMetadataVersion1Class_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTTimedRenderingMetadataVersion1");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTTimedRenderingMetadataVersion1Class_block_invoke_cold_1();
  }
  getPTTimedRenderingMetadataVersion1Class_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTTimedRenderingMetadataVersion2Class()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTTimedRenderingMetadataVersion2Class_softClass;
  uint64_t v8 = getPTTimedRenderingMetadataVersion2Class_softClass;
  if (!getPTTimedRenderingMetadataVersion2Class_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTTimedRenderingMetadataVersion2Class_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTTimedRenderingMetadataVersion2Class_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C80F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTTimedRenderingMetadataVersion2Class_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTTimedRenderingMetadataVersion2");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTTimedRenderingMetadataVersion2Class_block_invoke_cold_1();
  }
  getPTTimedRenderingMetadataVersion2Class_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTTimedStabilizationMetadataVersion1Class()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTTimedStabilizationMetadataVersion1Class_softClass;
  uint64_t v8 = getPTTimedStabilizationMetadataVersion1Class_softClass;
  if (!getPTTimedStabilizationMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTTimedStabilizationMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTTimedStabilizationMetadataVersion1Class_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C81074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTTimedStabilizationMetadataVersion1Class_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTTimedStabilizationMetadataVersion1");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTTimedStabilizationMetadataVersion1Class_block_invoke_cold_1();
  }
  getPTTimedStabilizationMetadataVersion1Class_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTSerializationClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTSerializationClass_softClass;
  uint64_t v8 = getPTSerializationClass_softClass;
  if (!getPTSerializationClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTSerializationClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTSerializationClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C811BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTSerializationClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTSerialization");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTSerializationClass_block_invoke_cold_1();
  }
  getPTSerializationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPTDisparityPostProcessingClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTDisparityPostProcessing");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTDisparityPostProcessingClass_block_invoke_cold_1();
  }
  getPTDisparityPostProcessingClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPTEffectRenderRequestClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTEffectRenderRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTEffectRenderRequestClass_block_invoke_cold_1();
  }
  getPTEffectRenderRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTEffectReactionClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__29;
  long long v7 = __Block_byref_object_dispose__29;
  uint64_t v0 = getPTEffectReactionClass_softClass;
  uint64_t v8 = getPTEffectReactionClass_softClass;
  if (!getPTEffectReactionClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getPTEffectReactionClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getPTEffectReactionClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5C813B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTEffectReactionClass_block_invoke(uint64_t a1)
{
  PortraitLibrary();
  Class result = objc_getClass("PTEffectReaction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getPTEffectReactionClass_block_invoke_cold_1();
  }
  getPTEffectReactionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigCameraViewfinderServerStart()
{
  if (FigCameraViewfinderServerStart_once != -1) {
    dispatch_once(&FigCameraViewfinderServerStart_once, &__block_literal_global_81);
  }
  return 0;
}

FigCameraViewfinderServer *__FigCameraViewfinderServerStart_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  Class result = objc_alloc_init(FigCameraViewfinderServer);
  FigCameraViewfinderServerStart_serverSingletouint64_t n = (uint64_t)result;
  return result;
}

void sub_1A5C85E34(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t FigSerializedDepthImageBufferMetadataComputeSerializationSize(CVPixelBufferRef pixelBuffer, _DWORD *a2, void *a3)
{
  if (a2) {
    *a2 = 1;
  }
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  *a3 = CVPixelBufferGetBytesPerRow(pixelBuffer) * Height + 16;
  return 0;
}

uint64_t FigSerializedDepthImageBufferMetadataSerializeIntoBuffer(__CVBuffer *a1, uint64_t a2, _DWORD *a3)
{
  size_t Height = CVPixelBufferGetHeight(a1);
  if (CVPixelBufferGetBytesPerRow(a1) * Height + 16 == a2)
  {
    *a3 = 1;
    int Width = CVPixelBufferGetWidth(a1);
    int v8 = CVPixelBufferGetHeight(a1);
    int BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    a3[1] = Width;
    a3[2] = v8;
    a3[3] = BytesPerRow;
    a3[4] = PixelFormatType;
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    memcpy(a3 + 5, BaseAddress, (BytesPerRow * v8));
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigSerializedDepthImageBufferMetadataDeserializeIntoCVPixelBuffer(_DWORD *a1, uint64_t a2, CVPixelBufferRef *a3)
{
  CVPixelBufferRef pixelBufferOut = 0;
  if (*a1 != 1) {
    goto LABEL_24;
  }
  size_t v6 = a1[1];
  size_t v5 = a1[2];
  size_t v8 = a1[3];
  OSType v7 = a1[4];
  uint64_t v9 = *a3;
  if (*a3)
  {
    CVPixelBufferRef pixelBufferOut = *a3;
    if (v6 != CVPixelBufferGetWidth(v9)
      || v5 != CVPixelBufferGetHeight(v9)
      || v7 != CVPixelBufferGetPixelFormatType(v9))
    {
LABEL_24:
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v17 = FigSignalErrorAt();
      goto LABEL_25;
    }
LABEL_9:
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v9);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 1uLL);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
    int v13 = BaseAddress;
    if (v8 == BytesPerRow)
    {
      memcpy(BaseAddress, a1 + 5, (v8 * v5));
    }
    else
    {
      if (BytesPerRow >= v8) {
        size_t v14 = v8;
      }
      else {
        size_t v14 = BytesPerRow;
      }
      if (BytesPerRow >= v8) {
        size_t v15 = BytesPerRow - v8;
      }
      else {
        size_t v15 = 0;
      }
      if (v5)
      {
        BOOL v16 = (char *)(a1 + 5);
        do
        {
          memcpy(v13, v16, v14);
          if (BytesPerRow > v8) {
            bzero(&v13[v14], v15);
          }
          v16 += v8;
          v13 += BytesPerRow;
          LODWORD(v5) = v5 - 1;
        }
        while (v5);
      }
    }
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 1uLL);
    if (*a3) {
      return 0;
    }
LABEL_29:
    uint64_t v17 = 0;
    *a3 = pixelBufferOut;
    return v17;
  }
  uint64_t v10 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, v5, v7, 0, &pixelBufferOut);
  if (!v10)
  {
    uint64_t v9 = pixelBufferOut;
    goto LABEL_9;
  }
  uint64_t v17 = v10;
  fig_log_get_emitter();
  FigDebugAssert3();
  FigSignalErrorAt();
LABEL_25:
  if (*a3) {
    return v17;
  }
  if (!v17) {
    goto LABEL_29;
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v17;
}

BOOL bweia_addRequirement(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = [a1 name];
  objc_msgSend((id)objc_msgSend(a1, "imageDescriptor"), "sizeForLayout:", 255);
  double v12 = v11;
  double v14 = v13;
  size_t v15 = objc_alloc_init(BWInferenceVideoFormatRequirements);
  [(BWVideoFormatRequirements *)v15 setWidth:(unint64_t)v12];
  [(BWVideoFormatRequirements *)v15 setHeight:(unint64_t)v14];
  v20[0] = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(a1, "imageDescriptor"), "pixelFormat"));
  -[BWVideoFormatRequirements setSupportedPixelFormats:](v15, "setSupportedPixelFormats:", [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:1]);
  [(BWVideoFormatRequirements *)v15 setSupportedColorSpaceProperties:a3];
  [(BWInferenceVideoFormatRequirements *)v15 setDeviceOriented:0];
  [(BWVideoFormatRequirements *)v15 setBytesPerRowAlignment:64];
  uint64_t v19 = v15;
  id v16 = +[BWInferenceVideoFormat formatByResolvingRequirements:](BWInferenceVideoFormat, "formatByResolvingRequirements:", [MEMORY[0x1E4F1C978] arrayWithObjects:&v19 count:1]);
  if ([a1 isInput]) {
    uint64_t v17 = [a4 bindEspressoInput:v10 fromAttachedMediaUsingKey:a2 withVideoFormat:v16 count:a5];
  }
  else {
    uint64_t v17 = [a4 bindEspressoOutput:v10 asAttachedMediaUsingKey:a2 withVideoFormat:v16 count:a5];
  }
  return v17 != 0;
}

void multiStreamCameraSourceNode_intermediateTapServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_rawServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_stillImageServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_stillImageIntermediateTapServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_stillImageRawServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_depthServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_lightSourceMaskServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_keypointDescriptorDataServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_semanticMasksServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_secureDetectedObjectsServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_secureEyeReliefStatusServiceQueueCallback(uint64_t a1)
{
}

void multiStreamCameraSourceNode_preLTMThumbnailServiceQueueCallback(uint64_t a1)
{
}

uint64_t mscsn_metadataOutputConfigurationKeyForOutputIndex(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 9:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F53AE8];
      goto LABEL_6;
    case 10:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F53AD8];
      goto LABEL_6;
    case 12:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F53B20];
      goto LABEL_6;
    case 18:
      uint64_t v3 = (uint64_t *)MEMORY[0x1E4F53B08];
LABEL_6:
      uint64_t result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mscsn_semanticMaskOutputConfigurationKeyForSemanticMaskType(void *a1)
{
  if ([a1 isEqualToString:*MEMORY[0x1E4F53B40]])
  {
    uint64_t v2 = MEMORY[0x1E4F53AA8];
    return *(void *)v2;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F53B50]])
  {
    uint64_t v2 = MEMORY[0x1E4F53AC8];
    return *(void *)v2;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F53B48]])
  {
    uint64_t v2 = MEMORY[0x1E4F53AB8];
    return *(void *)v2;
  }
  if ([a1 isEqualToString:*MEMORY[0x1E4F53B88]]) {
    return *MEMORY[0x1E4F53B30];
  }
  else {
    return 0;
  }
}

void mscsn_handlePoolReadyNotification(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  uint64_t v11 = 0;
  double v12 = &v11;
  uint64_t v13 = 0x3052000000;
  double v14 = __Block_byref_object_copy__31;
  size_t v15 = __Block_byref_object_dispose__31;
  uint64_t v16 = a2;
  if (theDict)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F544E0]);
    if (CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F553F0]))
    {
      OSType v7 = *(NSObject **)(v12[5] + 3488);
      CFRetain(theDict);
      uint64_t v8 = objc_msgSend((id)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F544F0]), "copy");
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __mscsn_handlePoolReadyNotification_block_invoke;
      void v9[3] = &unk_1E5C29C30;
      v9[4] = &v11;
      v9[5] = theDict;
      int v10 = 6;
      v9[6] = v8;
      dispatch_async(v7, v9);
    }
  }
  _Block_object_dispose(&v11, 8);
}

void sub_1A5C92F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t mscsn_setStreamOutputBlockBufferHandler(void *a1, uint64_t a2, void *a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    size_t v5 = (void *)[a3 copy];
    uint64_t v13 = v5;
    uint64_t v14 = a2;
    uint64_t v12 = *MEMORY[0x1E4F553C8];
    v15[0] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:&v14 count:1];
  }
  else
  {
    uint64_t v10 = a2;
    uint64_t v8 = *MEMORY[0x1E4F553C8];
    uint64_t v9 = *MEMORY[0x1E4F1D260];
    uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  }
  return [a1 setProperty:*MEMORY[0x1E4F54CC8] value:v6];
}

CMAttachmentBearerRef mscsn_createScaledAndZoomedSampleBufferFromSampleBuffer(void *a1, __CVBuffer *a2, int a3, void *a4, uint64_t a5, VTPixelTransferSessionRef *a6, CFTypeRef *a7, double a8, double a9, float a10)
{
  CMAttachmentBearerRef target = 0;
  CFTypeRef cf = 0;
  if (!a1 || !a2 || !a4 || !a6 || !a7)
  {
    FigDebugAssert3();
    unsigned int v18 = 0;
LABEL_141:
    int v130 = 0;
    goto LABEL_142;
  }
  unsigned int v18 = (__CVBuffer *)[a4 newPixelBuffer];
  if (!v18)
  {
    FigDebugAssert3();
    goto LABEL_141;
  }
  CFStringRef v19 = (const __CFString *)*MEMORY[0x1E4F53070];
  CFTypeRef v20 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (!*a6) {
    VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a6);
  }
  CFStringRef v148 = v19;
  CMSampleBufferRef v153 = a7;
  kedouble y = (const __CFString *)*MEMORY[0x1E4F24C18];
  BOOL v21 = CVBufferHasAttachment(v18, (CFStringRef)*MEMORY[0x1E4F24C18])
     || CVBufferHasAttachment(v18, (CFStringRef)*MEMORY[0x1E4F24A90])
     || CVBufferHasAttachment(v18, (CFStringRef)*MEMORY[0x1E4F24BC8]) != 0;
  BOOL v150 = v21;
  int Width = CVPixelBufferGetWidth(a2);
  int Height = CVPixelBufferGetHeight(a2);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  unsigned int v25 = (void *)CMGetAttachment(a1, @"TotalZoomFactor", 0);
  if (v25)
  {
    [v25 floatValue];
    float v27 = v26;
  }
  else
  {
    float v27 = 1.0;
  }
  double v28 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double v144 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double v145 = *MEMORY[0x1E4F1DB20];
  double v146 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  valuePtr.CGPoint origin = 0uLL;
  __asm { FMOV            V0.2D, #1.0 }
  valuePtr.CGSize size = _Q0;
  IOSurfaceRef v151 = (opaqueCMSampleBuffer *)a1;
  unint64_t v143 = Width | ((unint64_t)Height << 32);
  if (!v20)
  {
    uint64_t v134 = v10;
    LODWORD(v133) = 0;
LABEL_158:
    FigDebugAssert3();
LABEL_28:
    double v44 = v145;
    double v43 = v146;
    double v139 = v146;
    double v45 = v144;
    double v155 = v144;
    double v142 = v145;
    CGFloat v46 = v146;
    CGFloat v47 = v28;
    CGFloat v48 = v144;
    CGFloat v49 = v145;
    goto LABEL_62;
  }
  if (!FigCaptureVideoDimensionsAreValid(Width | ((unint64_t)Height << 32)))
  {
    uint64_t v134 = v10;
    LODWORD(v133) = 0;
    goto LABEL_158;
  }
  int CGRectIfPresent = FigCFDictionaryGetCGRectIfPresent();
  v168.origin.CGFloat x = mscsn_validPixelBufferRectFromMetadata((uint64_t)v20, Width | ((unint64_t)Height << 32));
  CGFloat x = v168.origin.x;
  double v34 = v168.size.width;
  double v35 = v168.size.height;
  recCGAffineTransform t1 = v168.origin.y;
  BOOL IsNull = CGRectIsNull(v168);
  BOOL v37 = IsNull;
  if (!CGRectIfPresent && IsNull && (v34 < (double)Width || v35 < (double)Height)) {
    goto LABEL_28;
  }
  FigCaptureMetadataUtilitiesScaleRect(valuePtr.origin.x, valuePtr.origin.y, valuePtr.size.width, valuePtr.size.height, (float)(v27 / a10));
  double v40 = v38;
  double v41 = v39;
  if (a8 != *MEMORY[0x1E4F1DB30] || a9 != *(double *)(MEMORY[0x1E4F1DB30] + 8))
  {
    double v40 = (a8 + 1.0) * v38;
    double v41 = (a9 + 1.0) * v39;
    if (v37 && (v40 >= 1.0 || v41 >= 1.0)) {
      goto LABEL_28;
    }
  }
  double v140 = v28;
  v174.origin.CGFloat x = (1.0 - v40) * 0.5;
  v174.origin.double y = (1.0 - v41) * 0.5;
  v174.size.double width = v40;
  v174.size.double height = v41;
  BOOL v50 = CGRectEqualToRect(valuePtr, v174);
  double v51 = (double)Height;
  double v52 = round(v40 * (double)Width * 0.5);
  double v53 = v52 + v52;
  if (v52 + v52 < (double)(int)a5)
  {
    double v54 = rect1;
LABEL_32:
    BOOL v55 = 0;
    double v57 = (double)SHIDWORD(a5);
    double v53 = (double)(int)a5;
    goto LABEL_33;
  }
  BOOL v55 = v50;
  double v56 = round(v41 * v51 * 0.5);
  double v57 = v56 + v56;
  double v54 = rect1;
  if (v56 + v56 < (double)SHIDWORD(a5)) {
    goto LABEL_32;
  }
LABEL_33:
  double v58 = ((double)Width - v53) * 0.5;
  double v59 = ceil(v58);
  double v60 = floor(v58);
  if (v58 >= 0.0) {
    double v61 = v60;
  }
  else {
    double v61 = v59;
  }
  double v62 = (v51 - v57) * 0.5;
  double v63 = ceil(v62);
  double v64 = floor(v62);
  if (v62 >= 0.0) {
    double v65 = v64;
  }
  else {
    double v65 = v63;
  }
  if (!v37)
  {
    CGFloat v66 = x;
    double v67 = v34;
    double v68 = v35;
    double v69 = v61;
    v175.origin.CGFloat x = v61;
    double v70 = v65;
    v175.origin.double y = v65;
    v175.size.double width = v53;
    v175.size.double height = v57;
    double v71 = v57;
    double v156 = x;
    double v72 = v53;
    if (CGRectContainsRect(*(CGRect *)(&v54 - 1), v175))
    {
      double v65 = v70;
      double v61 = v69;
      double v57 = v71;
      double v53 = v72;
    }
    else
    {
      float v73 = v72 / v71;
      RectWithAspectRatioInsideunint64_t Dimensions = FigCaptureMakeRectWithAspectRatioInsideDimensions((int)v34 | ((unint64_t)(int)v35 << 32), 1, v73);
      double v53 = v75;
      double v57 = v76;
      BOOL v55 = 0;
      double v61 = v156 + RectWithAspectRatioInsideDimensions;
      double v65 = rect1 + v77;
    }
  }
  if (PixelFormatType == 1885745712 || PixelFormatType == 1882468912)
  {
    if ((int)v61 % 6 >= 4) {
      int v78 = 6 * ((int)v61 / 6) + 6;
    }
    else {
      int v78 = 6 * ((int)v61 / 6);
    }
    double v61 = (double)v78;
  }
  CGFloat v49 = v61;
  CGFloat v48 = v65;
  CGFloat v47 = v53;
  CGFloat v46 = v57;
  double v79 = FigCaptureTransformRectToCoordinateSpaceOfRect(v61, v65, v53, v57, 0.0, 0.0, (double)Width);
  double v139 = v82;
  double v142 = v79;
  double v155 = v80;
  if (v55)
  {
    double v28 = v140;
    double v44 = v145;
    double v43 = v146;
    double v45 = v144;
  }
  else
  {
    double v83 = FigCaptureTransformRectToCoordinateSpaceOfRect(valuePtr.origin.x, valuePtr.origin.y, valuePtr.size.width, valuePtr.size.height, v79, v80, v81);
    if (v83 >= 0.0) {
      double v44 = v83;
    }
    else {
      double v44 = 0.0;
    }
    if (1.0 - v44 < v85) {
      double v85 = 1.0 - v44;
    }
    if (v84 >= 0.0) {
      double v45 = v84;
    }
    else {
      double v45 = 0.0;
    }
    double v28 = v85;
    if (1.0 - v45 >= v86) {
      double v43 = v86;
    }
    else {
      double v43 = 1.0 - v45;
    }
  }
LABEL_62:
  v169.origin.CGFloat x = v49;
  v169.origin.double y = v48;
  v169.size.double width = v47;
  v169.size.double height = v46;
  if (CGRectIsNull(v169))
  {
    CFDictionaryRef DictionaryRepresentation = 0;
  }
  else
  {
    v170.origin.CGFloat x = v49;
    v170.origin.double y = v48;
    v170.size.double width = v47;
    v170.size.double height = v46;
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v170);
  }
  OSStatus v88 = VTSessionSetProperty(*a6, (CFStringRef)*MEMORY[0x1E4F45170], DictionaryRepresentation);
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  if (v88) {
    goto LABEL_159;
  }
  int v89 = CVPixelBufferGetWidth(v18);
  int v90 = CVPixelBufferGetHeight(v18);
  int v137 = v90;
  int v138 = v89;
  BOOL v92 = (int)a5 < v89 || SHIDWORD(a5) < v90;
  rect1CGFloat a = v92;
  if (v92)
  {
    int v135 = Width;
    int v136 = Height;
    CFTypeRef v147 = v20;
    VTSessionSetProperty(*a6, (CFStringRef)*MEMORY[0x1E4F45168], (CFTypeRef)*MEMORY[0x1E4F45450]);
    LODWORD(valuePtr.origin.x) = 0;
    CFNumberRef v93 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    LODWORD(v163) = 0;
    CFNumberRef v94 = CFNumberCreate(0, kCFNumberSInt32Type, &v163);
    v167[0] = a5;
    CFNumberRef v95 = CFNumberCreate(0, kCFNumberSInt32Type, v167);
    HIDWORD(v166) = HIDWORD(a5);
    CFNumberRef v96 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v166 + 4);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24A70], v93);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24A80], v94);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24A88], v95);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24A68], v96);
    OSStatus v98 = VTSessionSetProperty(*a6, @"DestinationCleanAperture", Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v93) {
      CFRelease(v93);
    }
    if (v94) {
      CFRelease(v94);
    }
    if (v95) {
      CFRelease(v95);
    }
    int Height = v136;
    if (v96) {
      CFRelease(v96);
    }
    CFTypeRef v20 = v147;
    if (v98) {
      goto LABEL_159;
    }
    int Width = v135;
  }
  if (!VTPixelTransferSessionTransferImage(*a6, a2, v18))
  {
    uint64_t v160 = 0;
    int v99 = (CFStringRef *)MEMORY[0x1E4F24A78];
    BOOL v100 = rect1a;
    if (rect1a)
    {
      CVPixelBufferGetWidth(v18);
      CVPixelBufferGetHeight(v18);
      CFStringRef v101 = *v99;
      CFTypeRef v102 = CVBufferCopyAttachment(v18, *v99, 0);
      if (v102) {
        CFDictionaryRef v103 = (const __CFDictionary *)CFAutorelease(v102);
      }
      else {
        CFDictionaryRef v103 = 0;
      }
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v103, (const void *)*MEMORY[0x1E4F24A88]);
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&v160 + 4);
      CFNumberRef v105 = (const __CFNumber *)CFDictionaryGetValue(v103, (const void *)*MEMORY[0x1E4F24A68]);
      CFNumberGetValue(v105, kCFNumberSInt32Type, &v160);
      CVBufferRemoveAttachment(v18, v101);
    }
    if (!v150)
    {
      CVBufferRemoveAttachment(v18, key);
      CVBufferRemoveAttachment(v18, (CFStringRef)*MEMORY[0x1E4F24A90]);
      CVBufferRemoveAttachment(v18, (CFStringRef)*MEMORY[0x1E4F24BC8]);
    }
    if (DictionaryRepresentation) {
      CVBufferRemoveAttachment(v18, *v99);
    }
    if (!BWCMSampleBufferCreateCopyWithNewPixelBuffer(v151, v18, v153, (CMSampleBufferRef *)&cf)
      && !BWCMSampleBufferCreateCopyIncludingMetadata((CMSampleBufferRef)cf, (CMSampleBufferRef *)&target))
    {
      if (a3) {
        CMSetAttachment(target, @"StillImageCaptureType", (CFTypeRef)objc_msgSend(NSNumber, "numberWithInt:"), 1u);
      }
      CVImageBufferRef v106 = (void *)CMGetAttachment(target, v148, 0);
      [v106 setObject:0 forKeyedSubscript:*MEMORY[0x1E4F54370]];
      if (DictionaryRepresentation)
      {
        if (rect1a)
        {
          double v28 = v28 * ((double)SHIDWORD(v160) / (double)v138);
          double v43 = v43 * ((double)(int)v160 / (double)v137);
          double v44 = (1.0 - v28) * 0.5;
          double v45 = (1.0 - v43) * 0.5;
        }
        v171.origin.CGFloat x = v44;
        v171.origin.double y = v45;
        v171.size.double width = v28;
        v171.size.double height = v43;
        if (CGRectIsNull(v171))
        {
          [v106 setObject:0 forKeyedSubscript:*MEMORY[0x1E4F53260]];
        }
        else
        {
          v172.origin.CGFloat x = v44;
          v172.origin.double y = v45;
          v172.size.double width = v28;
          v172.size.double height = v43;
          CFDictionaryRef v107 = CGRectCreateDictionaryRepresentation(v172);
          [v106 setObject:v107 forKeyedSubscript:*MEMORY[0x1E4F53260]];
          if (v107) {
            CFRelease(v107);
          }
        }
        int v108 = objc_msgSend((id)objc_msgSend(v106, "objectForKeyedSubscript:", *MEMORY[0x1E4F54168], v133, v134), "intValue");
        int v109 = objc_msgSend((id)objc_msgSend(v106, "objectForKeyedSubscript:", *MEMORY[0x1E4F54160]), "intValue");
        _ZF = v108 == Width && v109 == Height;
        int v111 = !_ZF;
        CFDictionaryRef v112 = (void *)MEMORY[0x1E4F53EE8];
        if (_ZF)
        {
          FigCFDictionarySetCGRect();
          if ([v106 objectForKeyedSubscript:*MEMORY[0x1E4F54218]]) {
            FigCFDictionarySetCGRect();
          }
          objc_msgSend(v106, "setObject:forKeyedSubscript:", objc_msgSend(v106, "objectForKeyedSubscript:", *MEMORY[0x1E4F54198]), *v112);
        }
        v173.origin.CGFloat x = mscsn_validPixelBufferRectFromMetadata((uint64_t)v20, v143);
        double v113 = v173.origin.x;
        double y = v173.origin.y;
        if (CGRectIsNull(v173))
        {
          double v115 = v139;
          double v116 = v142;
        }
        else
        {
          double v116 = v142 - v113 / (double)Width;
          double v155 = v155 - y / (double)Height;
          double v115 = v155 * -2.0 + 1.0;
        }
        v167[0] = 0;
        CFTypeRef v117 = (const void *)*v112;
        if (FigCFDictionaryGetInt32IfPresent()) {
          CFDictionarySetValue((CFMutableDictionaryRef)v106, v117, (const void *)[NSNumber numberWithInt:(int)(v115 * (double)v167[0])]);
        }
        BOOL v100 = rect1a;
        if (v111)
        {
          uint64_t v166 = 0;
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetInt32IfPresent();
          CGSize v152 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
          long long v154 = *MEMORY[0x1E4F1DB28];
          valuePtr.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB28];
          valuePtr.CGSize size = v152;
          if (FigCFDictionaryGetCGRectIfPresent())
          {
            double v118 = ceil(v116 * valuePtr.size.width);
            double v119 = floor(v116 * valuePtr.size.width);
            if (v116 * valuePtr.size.width >= 0.0) {
              double v120 = v119;
            }
            else {
              double v120 = v118;
            }
            double v121 = valuePtr.origin.x + v120;
            double v122 = ceil(v155 * valuePtr.size.height);
            double v123 = floor(v155 * valuePtr.size.height);
            if (v155 * valuePtr.size.height < 0.0) {
              double v123 = v122;
            }
            valuePtr.origin.CGFloat x = v121;
            valuePtr.origin.double y = valuePtr.origin.y + v123;
            valuePtr.size.double width = (double)SHIDWORD(v166) - v121 * 2.0;
            valuePtr.size.double height = (double)(int)v166 - valuePtr.origin.y * 2.0;
            FigCFDictionarySetCGRect();
          }
          long long v163 = v154;
          CGSize v164 = v152;
          if (FigCFDictionaryGetCGRectIfPresent())
          {
            double v124 = ceil(v116 * v164.width);
            double v125 = floor(v116 * v164.width);
            if (v116 * v164.width >= 0.0) {
              double v126 = v125;
            }
            else {
              double v126 = v124;
            }
            double v127 = *(double *)&v163 + v126;
            double v128 = ceil(v155 * v164.height);
            double v129 = floor(v155 * v164.height);
            if (v155 * v164.height < 0.0) {
              double v129 = v128;
            }
            *(double *)&long long v163 = v127;
            *((double *)&v163 + 1) = *((double *)&v163 + 1) + v129;
            v164.double width = (double)SHIDWORD(v166) - v127 * 2.0;
            v164.double height = (double)(int)v166 - *((double *)&v163 + 1) * 2.0;
            FigCFDictionarySetCGRect();
          }
        }
      }
      if (v100) {
        FigCFDictionarySetCGRect();
      }
      goto LABEL_141;
    }
  }
LABEL_159:
  FigDebugAssert3();
  int v130 = 1;
LABEL_142:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  CMAttachmentBearerRef result = target;
  if (target) {
    int v132 = v130;
  }
  else {
    int v132 = 0;
  }
  if (v132 == 1)
  {
    CFRelease(target);
    return 0;
  }
  return result;
}

void mscsn_removeNonpropagatedAttachmentsFromReflectedStreamingFrame(void *a1)
{
  mscsn_removeNonpropagatedAttachmentsFromAttachmentBearer(a1);
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a1);
  if (ImageBuffer)
  {
    mscsn_removeNonpropagatedAttachmentsFromAttachmentBearer(ImageBuffer);
  }
}

void __mscsn_handlePoolReadyNotification_block_invoke(uint64_t a1)
{
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E4F544E8]);
  if (Value)
  {
    uint64_t v3 = Value;
    uint64_t v4 = *(void **)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)
                  + 384
                  + ((uint64_t)*(int *)(a1 + 56) << 9)
                  + 16);
    uint64_t v5 = [v4 preparedPixelBufferPool];
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      if (([v4 providesPixelBufferPool] & 1) == 0) {
        [v6 setCVPixelBufferPool:v3 attributes:*(void *)(a1 + 48)];
      }
    }
    OSType v7 = *(const void **)(a1 + 48);
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = *(const void **)(a1 + 40);
    CFRelease(v8);
  }
}

uint64_t mscsn_sphereIsUnstableOrInActiveModeBasedOnMetadata(void *a1)
{
  uint64_t v2 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F54290]];
  if (v2) {
    unsigned int v3 = ([v2 intValue] >> 4) & 1;
  }
  else {
    unsigned int v3 = 0;
  }
  uint64_t v4 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F54BD0]];
  return [v4 isEqualToString:*MEMORY[0x1E4F54E60]] | v3;
}

void mscsn_removeNonpropagatedAttachmentsFromAttachmentBearer(const void *a1)
{
  CMRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F530E0]);
  CMRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53100]);
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F530F0];
  CMRemoveAttachment(a1, v2);
}

double mscsn_validPixelBufferRectFromMetadata(uint64_t a1, uint64_t a2)
{
  long long v4 = *MEMORY[0x1E4F1DB20];
  long long v5 = *MEMORY[0x1E4F1DB20];
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  if (FigCFDictionaryGetCGRectIfPresent()
    && *(double *)&v6 == (double)(int)a2
    && *((double *)&v6 + 1) == (double)SHIDWORD(a2))
  {
    *(void *)&long long v5 = v4;
  }
  return *(double *)&v5;
}

uint64_t pem_cmPhotoAuxImageTypeForPhotoEncoderNodeAuxImageType(int a1)
{
  if ((a1 - 1) > 0xB) {
    return 0;
  }
  else {
    return dword_1A5F0CA68[a1 - 1];
  }
}

uint64_t pem_cmPhotoAuxImageCustomTypeURNForPhotoEncoderNodeAuxImageType(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 1:
      unsigned int v3 = (uint64_t *)MEMORY[0x1E4F55FA0];
      goto LABEL_12;
    case 4:
      unsigned int v3 = (uint64_t *)MEMORY[0x1E4F55FB8];
      goto LABEL_12;
    case 5:
      unsigned int v3 = (uint64_t *)MEMORY[0x1E4F55FC8];
      goto LABEL_12;
    case 6:
      unsigned int v3 = (uint64_t *)MEMORY[0x1E4F55FD0];
      goto LABEL_12;
    case 7:
      unsigned int v3 = (uint64_t *)MEMORY[0x1E4F55FE0];
      goto LABEL_12;
    case 8:
      unsigned int v3 = (uint64_t *)MEMORY[0x1E4F55FC0];
      goto LABEL_12;
    case 9:
      unsigned int v3 = (uint64_t *)MEMORY[0x1E4F55FD8];
      goto LABEL_12;
    case 10:
      unsigned int v3 = (uint64_t *)MEMORY[0x1E4F55FA8];
      goto LABEL_12;
    case 11:
      unsigned int v3 = (uint64_t *)MEMORY[0x1E4F55F90];
      goto LABEL_12;
    case 12:
      unsigned int v3 = (uint64_t *)MEMORY[0x1E4F55FE8];
LABEL_12:
      uint64_t result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

__CFString *BWInferenceTypePathComponent(int a1)
{
  uint64_t result = @"unknown_inference";
  if (a1 > 149)
  {
    if (a1 > 200)
    {
      if (a1 > 2000)
      {
        unsigned int v3 = @"motion_analysis";
        long long v4 = @"experiments";
        if (a1 != 60000) {
          long long v4 = @"unknown_inference";
        }
        BOOL v5 = a1 == 2001;
LABEL_16:
        if (v5) {
          return v3;
        }
        else {
          return v4;
        }
      }
      else
      {
        switch(a1)
        {
          case 801:
            uint64_t result = @"landmarks";
            break;
          case 802:
            uint64_t result = @"face_segments_with_landmarks";
            break;
          case 803:
            uint64_t result = @"PhotosCuration";
            break;
          case 804:
            uint64_t result = @"vision_faceprint";
            break;
          default:
            if (a1 == 201) {
              uint64_t result = @"matting";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 150:
          uint64_t result = @"fusiontracker";
          break;
        case 151:
          uint64_t result = @"humanpose";
          break;
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
          return result;
        case 159:
          uint64_t result = @"deep_stereo_photo_transfer";
          break;
        case 160:
          uint64_t result = @"deep_zoom";
          break;
        case 161:
          uint64_t result = @"faceprint";
          break;
        default:
          unsigned int v3 = @"learnednr";
          long long v4 = @"quadralearnednr";
          if (a1 != 171) {
            long long v4 = @"unknown_inference";
          }
          BOOL v5 = a1 == 170;
          goto LABEL_16;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 101:
        uint64_t result = @"smart_camera";
        break;
      case 102:
        uint64_t result = @"person_segmentation";
        break;
      case 103:
        uint64_t result = @"rgb_based_person_segmentation";
        break;
      case 104:
        uint64_t result = @"person_semantics";
        break;
      case 105:
        uint64_t result = @"streaming_person_segmentation";
        break;
      case 106:
        uint64_t result = @"monoculardepth";
        break;
      case 107:
        uint64_t result = @"learned_matting";
        break;
      case 108:
        uint64_t result = @"faststereodisparity";
        break;
      case 109:
        uint64_t result = @"videodepth";
        break;
      case 110:
        uint64_t result = @"disparityfiltering";
        break;
      case 111:
        uint64_t result = @"realtimefsdnet";
        break;
      case 112:
        uint64_t result = @"disparityderectification";
        break;
      case 113:
        uint64_t result = @"stereorectification";
        break;
      case 114:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
        return result;
      case 115:
        uint64_t result = @"disparitypostprocessing";
        break;
      case 116:
        uint64_t result = @"text_localization";
        break;
      case 117:
        uint64_t result = @"opticalflow";
        break;
      case 118:
        uint64_t result = @"anst_refiner256";
        break;
      case 130:
        uint64_t result = @"visual-intelligence-object-detection";
        break;
      default:
        if (!a1) {
          uint64_t result = @"internal_provider";
        }
        break;
    }
  }
  return result;
}

__CFString *BWInferenceTypeShortDescription(int a1)
{
  uint64_t result = @"Unknown Inference";
  if (a1 > 149)
  {
    if (a1 > 200)
    {
      if (a1 > 2000)
      {
        unsigned int v3 = @"motion-analysis";
        long long v4 = @"experimental";
        if (a1 != 60000) {
          long long v4 = @"Unknown Inference";
        }
        BOOL v5 = a1 == 2001;
LABEL_16:
        if (v5) {
          return v3;
        }
        else {
          return v4;
        }
      }
      else
      {
        switch(a1)
        {
          case 801:
            uint64_t result = @"landmarks";
            break;
          case 802:
            uint64_t result = @"face-segments-with-landmarks";
            break;
          case 803:
            uint64_t result = @"PhotosCuration";
            break;
          case 804:
            uint64_t result = @"vision-faceprint";
            break;
          default:
            if (a1 == 201) {
              uint64_t result = @"matting";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 150:
          uint64_t result = @"fusion-tracker";
          break;
        case 151:
          uint64_t result = @"human-pose";
          break;
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
          return result;
        case 159:
          uint64_t result = @"deep-stereo-photo-transfer";
          break;
        case 160:
          uint64_t result = @"deep-zoom";
          break;
        case 161:
          uint64_t result = @"faceprint";
          break;
        default:
          unsigned int v3 = @"Learned-Noise-Reduction";
          long long v4 = @"Learned-Noise-Reduction-For-Quadra";
          if (a1 != 171) {
            long long v4 = @"Unknown Inference";
          }
          BOOL v5 = a1 == 170;
          goto LABEL_16;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 101:
        uint64_t result = @"smartcam";
        break;
      case 102:
        uint64_t result = @"person-segmentation";
        break;
      case 103:
        uint64_t result = @"rgb-segmentation";
        break;
      case 104:
        uint64_t result = @"person-semantics";
        break;
      case 105:
        uint64_t result = @"streaming-person-segmentation";
        break;
      case 106:
        uint64_t result = @"monocular-depth";
        break;
      case 107:
        uint64_t result = @"learned-matting";
        break;
      case 108:
        uint64_t result = @"fast-stereo-disparity";
        break;
      case 109:
        uint64_t result = @"video-depth";
        break;
      case 110:
        uint64_t result = @"disparity-filtering";
        break;
      case 111:
        uint64_t result = @"real-time-fsdnet";
        break;
      case 112:
        uint64_t result = @"disparity-derectification";
        break;
      case 113:
        uint64_t result = @"stereo-rectification";
        break;
      case 114:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
        return result;
      case 115:
        uint64_t result = @"disparity-post-processing";
        break;
      case 116:
        uint64_t result = @"text-localization";
        break;
      case 117:
        uint64_t result = @"optical-flow";
        break;
      case 118:
        uint64_t result = @"vmrefiner";
        break;
      case 130:
        uint64_t result = @"visual-intelligence-object-detection";
        break;
      default:
        if (!a1) {
          uint64_t result = @"internal-provider";
        }
        break;
    }
  }
  return result;
}

uint64_t BWInferenceVersionMakeMajorMinor(unsigned __int16 a1, unsigned __int16 a2)
{
  return a1 | (a2 << 16);
}

__CFString *BWInferenceStatusDescription(int a1)
{
  uint64_t result = @"unknown status";
  if (a1 > -31703)
  {
    unsigned int v3 = @"success";
    if (a1) {
      unsigned int v3 = @"unknown status";
    }
    if (a1 == -31701) {
      long long v4 = @"missing resource";
    }
    else {
      long long v4 = v3;
    }
    if (a1 == -31702) {
      return @"resource allocation failed";
    }
    else {
      return v4;
    }
  }
  else
  {
    switch(a1)
    {
      case -31761:
        uint64_t result = @"<graph> unsatisfiable node created";
        break;
      case -31760:
        uint64_t result = @"<graph> generic graph construction error";
        break;
      case -31759:
      case -31758:
      case -31757:
      case -31756:
      case -31755:
      case -31754:
      case -31753:
      case -31752:
      case -31751:
      case -31750:
      case -31749:
      case -31739:
      case -31738:
      case -31737:
      case -31736:
      case -31735:
      case -31734:
      case -31733:
      case -31732:
      case -31731:
      case -31730:
      case -31729:
      case -31728:
      case -31727:
      case -31726:
      case -31725:
      case -31724:
      case -31723:
      case -31722:
      case -31721:
        return result;
      case -31748:
        uint64_t result = @"<scaling> missing output identifier";
        break;
      case -31747:
        uint64_t result = @"<scaling> provider allocation error";
        break;
      case -31746:
        uint64_t result = @"<scaling> unsatisfied output requirements";
        break;
      case -31745:
        uint64_t result = @"<scaling> missing output requirements";
        break;
      case -31744:
        uint64_t result = @"<scaling> output video buffer preprocessing error";
        break;
      case -31743:
        uint64_t result = @"<scaling> output video buffer allocation error";
        break;
      case -31742:
        uint64_t result = @"<scaling> output video format error";
        break;
      case -31741:
        uint64_t result = @"<scaling> input video format error";
        break;
      case -31740:
        uint64_t result = @"<scaling> generic error";
        break;
      case -31720:
        uint64_t result = @"<inference> output metadata allocation failed";
        break;
      case -31719:
        uint64_t result = @"<inference> missing output metadata";
        break;
      case -31718:
        uint64_t result = @"<inference> output video buffer allocation failed";
        break;
      case -31717:
        uint64_t result = @"<inference> missing output video buffer";
        break;
      case -31716:
        uint64_t result = @"<inference> output video format error";
        break;
      case -31715:
        uint64_t result = @"<inference> input metadata allocation failed";
        break;
      case -31714:
        uint64_t result = @"<inference> missing input metadata";
        break;
      case -31713:
        uint64_t result = @"<inference> input video buffer allocation failed";
        break;
      case -31712:
        uint64_t result = @"<inference> missing input video buffer";
        break;
      case -31711:
        uint64_t result = @"<inference> input video format error";
        break;
      case -31710:
        uint64_t result = @"<inference> generic error";
        break;
      default:
        BOOL v5 = @"<scheduler> jobs in inconsistent state";
        if (a1 != -31781) {
          BOOL v5 = @"unknown status";
        }
        if (a1 == -31782) {
          uint64_t result = @"<inference> version error";
        }
        else {
          uint64_t result = v5;
        }
        break;
    }
  }
  return result;
}

uint64_t BWInferenceGetAttachedInference(const void *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = objc_msgSend((id)CMGetAttachment(a1, @"Inferences", 0), "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", a2));
  if (![v4 isValid]) {
    return 0;
  }
  BOOL v5 = (void *)[v4 inferences];
  return [v5 objectForKeyedSubscript:a3];
}

id BWInferenceGetLowResPersonInstanceMasksFromSampleBuffer(const void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = BWSampleBufferCopyDictionaryOfAttachedMedia(a1);
  CFStringRef v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  unsigned int v3 = (void *)MEMORY[0x1A6272C70]();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v4 = objc_msgSend((id)objc_msgSend(v1, "allKeys", 0), "sortedArrayUsingSelector:", sel_compare_);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ([v9 hasPrefix:@"LowResPersonInstanceMask"]) {
          objc_msgSend(v2, "addObject:", CMSampleBufferGetImageBuffer((CMSampleBufferRef)objc_msgSend(v1, "objectForKeyedSubscript:", v9)));
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }

  id result = (id)[v2 count];
  if (result) {
    return (id)[v2 copy];
  }
  return result;
}

uint64_t FigDepthRotateBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t v7 = FigDepthBytesPerPixelForDepthFormat(PixelFormatType);
  OSType v8 = CVPixelBufferGetPixelFormatType(a2);
  if (v7 == FigDepthBytesPerPixelForDepthFormat(v8) && (v7 == 2 || v7 == 4))
  {
    unsigned __int8 Width = CVPixelBufferGetWidth(a1);
    unsigned __int8 Height = CVPixelBufferGetHeight(a1);
    char BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    char v12 = CVPixelBufferGetWidth(a2);
    char v13 = CVPixelBufferGetHeight(a2);
    char v14 = CVPixelBufferGetBytesPerRow(a2);
    if (((Width | Height) & 7) != 0 || (v12 & 7) != 0 || (v13 & 7) != 0 || (BytesPerRow & 0xF) != 0 || (v14 & 0xF) != 0)
    {
      size_t v48 = CVPixelBufferGetWidth(a1);
      size_t v49 = CVPixelBufferGetHeight(a1);
      size_t v50 = CVPixelBufferGetBytesPerRow(a1);
      OSType v51 = CVPixelBufferGetPixelFormatType(a1);
      uint64_t v52 = FigDepthBytesPerPixelForDepthFormat(v51);
      if (v52)
      {
        uint64_t v53 = v52;
        size_t v54 = CVPixelBufferGetWidth(a2);
        size_t v55 = CVPixelBufferGetHeight(a2);
        size_t v56 = CVPixelBufferGetBytesPerRow(a2);
        if (CVPixelBufferLockBaseAddress(a1, 1uLL))
        {
          FigDebugAssert3();
        }
        else
        {
          pixelBufferCGFloat a = a1;
          BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
          if (CVPixelBufferLockBaseAddress(a2, 0))
          {
            FigDebugAssert3();
            CFTypeRef v102 = pixelBuffera;
            CVPixelBufferLockFlags v103 = 1;
          }
          else
          {
            double v58 = (char *)CVPixelBufferGetBaseAddress(a2);
            LODWORD(v59) = v53;
            switch(a3)
            {
              case 1:
                goto LABEL_48;
              case 2:
                uint64_t v59 = -v53;
                goto LABEL_57;
              case 3:
                uint64_t v59 = -v53;
                char v97 = &BaseAddress[(v49 - 1) * v50];
                size_t v50 = -(uint64_t)v50;
                goto LABEL_47;
              case 4:
                BaseAddress += (v49 - 1) * v50;
                size_t v50 = -(uint64_t)v50;
                LODWORD(v59) = v53;
                if (!v55) {
                  break;
                }
                goto LABEL_49;
              case 5:
                LODWORD(v59) = v50;
                goto LABEL_44;
              case 6:
                uint64_t v59 = -(uint64_t)v50;
                BaseAddress += (v49 - 1) * v50;
LABEL_44:
                LODWORD(v50) = v53;
                if (!v55) {
                  break;
                }
                goto LABEL_49;
              case 7:
                uint64_t v59 = -(uint64_t)v50;
                char v97 = &BaseAddress[(v49 - 1) * v50];
                size_t v50 = -v53;
LABEL_47:
                BaseAddress = &v97[v53 * (v48 - 1)];
LABEL_48:
                if (v55) {
                  goto LABEL_49;
                }
                break;
              case 8:
                LODWORD(v59) = v50;
                size_t v50 = -v53;
LABEL_57:
                BaseAddress += v53 * (v48 - 1);
                if (!v55) {
                  break;
                }
LABEL_49:
                for (uint64_t i = 0; i != v55; ++i)
                {
                  size_t v99 = v54;
                  BOOL v100 = v58;
                  for (uint64_t j = BaseAddress; v99; --v99)
                  {
                    *BOOL v100 = *j;
                    BOOL v100 = (_DWORD *)((char *)v100 + v53);
                    uint64_t j = (_DWORD *)((char *)j + (int)v59);
                  }
                  v58 += v56;
                  BaseAddress += (int)v50;
                }
                break;
              default:
                FigSignalErrorAt();
                break;
            }
            CVPixelBufferUnlockBaseAddress(pixelBuffera, 1uLL);
            CFTypeRef v102 = a2;
            CVPixelBufferLockFlags v103 = 0;
          }
          CVPixelBufferUnlockBaseAddress(v102, v103);
        }
      }
      else
      {
        FigSignalErrorAt();
      }
      return 0;
    }
    CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)CVPixelBufferGetWidth(a1);
    size_t v15 = CVPixelBufferGetHeight(a1);
    size_t v16 = CVPixelBufferGetBytesPerRow(a1);
    size_t v17 = CVPixelBufferGetWidth(a2);
    size_t v18 = CVPixelBufferGetHeight(a2);
    size_t v19 = CVPixelBufferGetBytesPerRow(a2);
    CFTypeRef v20 = a1;
    uint64_t v21 = CVPixelBufferLockBaseAddress(a1, 1uLL);
    uint64_t v22 = v21;
    if (v7 == 2)
    {
      if (!v21)
      {
        uint64_t v23 = CVPixelBufferLockBaseAddress(a2, 0);
        if (!v23)
        {
          int v24 = (int16x8_t *)CVPixelBufferGetBaseAddress(v20);
          unsigned int v25 = (char *)CVPixelBufferGetBaseAddress(a2);
          switch(a3)
          {
            case 1:
              if (v18)
              {
                for (size_t k = 0; k < v18; k += 8)
                {
                  if (v17)
                  {
                    uint64_t v27 = 0;
                    for (size_t m = 0; m < v17; m += 8)
                    {
                      int v29 = &v24[v27].i8[v16];
                      long long v30 = *(_OWORD *)v29;
                      int v31 = &v29[v16];
                      long long v32 = *(_OWORD *)v31;
                      int v33 = (long long *)&v31[v16];
                      long long v34 = *v33;
                      double v35 = (long long *)((char *)v33 + v16);
                      long long v36 = *v35;
                      BOOL v37 = (long long *)((char *)v35 + v16);
                      long long v38 = *v37;
                      double v39 = (long long *)((char *)v37 + v16);
                      long long v40 = *v39;
                      long long v41 = *(long long *)((char *)v39 + v16);
                      *(int16x8_t *)&v25[v27 * 16] = v24[v27];
                      int v42 = &v25[v27 * 16 + v19];
                      *(_OWORD *)int v42 = v30;
                      double v43 = &v42[v19];
                      *(_OWORD *)double v43 = v32;
                      double v44 = &v43[v19];
                      *(_OWORD *)double v44 = v34;
                      double v45 = &v44[v19];
                      *(_OWORD *)double v45 = v36;
                      CGFloat v46 = &v45[v19];
                      *(_OWORD *)CGFloat v46 = v38;
                      CGFloat v47 = &v46[v19];
                      *(_OWORD *)CGFloat v47 = v40;
                      *(_OWORD *)&v47[v19] = v41;
                      ++v27;
                    }
                  }
                  int v24 = (int16x8_t *)((char *)v24 + 8 * (int)v16);
                  v25 += 8 * v19;
                }
              }
              goto LABEL_157;
            case 2:
              if (v18)
              {
                size_t v104 = 0;
                uint64_t v105 = (uint64_t)v24[-1].i64 + 2 * (void)pixelBuffer;
                do
                {
                  if (v17)
                  {
                    uint64_t v106 = 0;
                    size_t v107 = 0;
                    int v108 = v25;
                    do
                    {
                      int v109 = (int16x8_t *)(v105 + v106 + v16);
                      int16x8_t v110 = *v109;
                      int v111 = (int16x8_t *)((char *)v109 + v16);
                      int16x8_t v112 = *v111;
                      double v113 = (int16x8_t *)((char *)v111 + v16);
                      int16x8_t v114 = *v113;
                      double v115 = (int16x8_t *)((char *)v113 + v16);
                      int16x8_t v116 = *v115;
                      CFTypeRef v117 = (int16x8_t *)((char *)v115 + v16);
                      int16x8_t v118 = *v117;
                      double v119 = (int16x8_t *)((char *)v117 + v16);
                      int8x16_t v120 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v105 + v106));
                      int8x16_t v121 = (int8x16_t)vrev64q_s16(v110);
                      int8x16_t v122 = (int8x16_t)vrev64q_s16(v112);
                      int8x16_t v123 = (int8x16_t)vrev64q_s16(v114);
                      int8x16_t v124 = (int8x16_t)vrev64q_s16(v116);
                      int8x16_t v125 = (int8x16_t)vrev64q_s16(v118);
                      int8x16_t v126 = (int8x16_t)vrev64q_s16(*v119);
                      int8x16_t v127 = (int8x16_t)vrev64q_s16(*(int16x8_t *)((char *)v119 + v16));
                      *(void *)&long long v128 = vextq_s8(v120, v120, 8uLL).u64[0];
                      *((void *)&v128 + 1) = v120.i64[0];
                      v120.i64[0] = vextq_s8(v121, v121, 8uLL).u64[0];
                      v120.i64[1] = v121.i64[0];
                      v121.i64[0] = vextq_s8(v122, v122, 8uLL).u64[0];
                      v121.i64[1] = v122.i64[0];
                      v122.i64[0] = vextq_s8(v123, v123, 8uLL).u64[0];
                      v122.i64[1] = v123.i64[0];
                      v123.i64[0] = vextq_s8(v124, v124, 8uLL).u64[0];
                      v123.i64[1] = v124.i64[0];
                      v124.i64[0] = vextq_s8(v125, v125, 8uLL).u64[0];
                      v124.i64[1] = v125.i64[0];
                      v125.i64[0] = vextq_s8(v126, v126, 8uLL).u64[0];
                      v125.i64[1] = v126.i64[0];
                      v126.i64[0] = vextq_s8(v127, v127, 8uLL).u64[0];
                      v126.i64[1] = v127.i64[0];
                      *int v108 = v128;
                      *(int8x16_t *)((char *)v108 + v19) = v120;
                      double v129 = (int8x16_t *)((char *)v108 + v19 + v19);
                      *double v129 = v121;
                      int v130 = (int8x16_t *)((char *)v129 + v19);
                      *int v130 = v122;
                      long long v131 = (int8x16_t *)((char *)v130 + v19);
                      *long long v131 = v123;
                      int v132 = (int8x16_t *)((char *)v131 + v19);
                      *int v132 = v124;
                      uint64_t v133 = (int8x16_t *)((char *)v132 + v19);
                      *uint64_t v133 = v125;
                      *(int8x16_t *)((char *)v133 + v19) = v126;
                      v107 += 8;
                      ++v108;
                      v106 -= 16;
                    }
                    while (v17 > v107);
                  }
                  v104 += 8;
                  v105 += 8 * (int)v16;
                  v25 += 8 * v19;
                }
                while (v18 > v104);
              }
              goto LABEL_157;
            case 3:
              if (v18)
              {
                size_t v134 = 0;
                uint64_t v135 = (uint64_t)v24[-1].i64 + 2 * (void)pixelBuffer + (v15 - 8) * v16;
                do
                {
                  if (v17)
                  {
                    uint64_t v136 = 0;
                    size_t v137 = 0;
                    int v138 = v25;
                    do
                    {
                      double v139 = (int16x8_t *)(v135 + v136 + v16);
                      int16x8_t v140 = *v139;
                      IOSurfaceRef v141 = (int16x8_t *)((char *)v139 + v16);
                      int16x8_t v142 = *v141;
                      unint64_t v143 = (int16x8_t *)((char *)v141 + v16);
                      int16x8_t v144 = *v143;
                      double v145 = (int16x8_t *)((char *)v143 + v16);
                      int16x8_t v146 = *v145;
                      CFTypeRef v147 = (int16x8_t *)((char *)v145 + v16);
                      int16x8_t v148 = *v147;
                      long long v149 = (int16x8_t *)((char *)v147 + v16);
                      int8x16_t v150 = (int8x16_t)vrev64q_s16(*(int16x8_t *)((char *)v149 + v16));
                      int8x16_t v151 = (int8x16_t)vrev64q_s16(*v149);
                      int8x16_t v152 = (int8x16_t)vrev64q_s16(v148);
                      int8x16_t v153 = (int8x16_t)vrev64q_s16(v146);
                      int8x16_t v154 = (int8x16_t)vrev64q_s16(v144);
                      int8x16_t v155 = (int8x16_t)vrev64q_s16(v142);
                      int8x16_t v156 = (int8x16_t)vrev64q_s16(v140);
                      int8x16_t v157 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v135 + v136));
                      *(void *)&long long v158 = vextq_s8(v150, v150, 8uLL).u64[0];
                      *((void *)&v158 + 1) = v150.i64[0];
                      v150.i64[0] = vextq_s8(v151, v151, 8uLL).u64[0];
                      v150.i64[1] = v151.i64[0];
                      v151.i64[0] = vextq_s8(v152, v152, 8uLL).u64[0];
                      v151.i64[1] = v152.i64[0];
                      v152.i64[0] = vextq_s8(v153, v153, 8uLL).u64[0];
                      v152.i64[1] = v153.i64[0];
                      v153.i64[0] = vextq_s8(v154, v154, 8uLL).u64[0];
                      v153.i64[1] = v154.i64[0];
                      v154.i64[0] = vextq_s8(v155, v155, 8uLL).u64[0];
                      v154.i64[1] = v155.i64[0];
                      v155.i64[0] = vextq_s8(v156, v156, 8uLL).u64[0];
                      v155.i64[1] = v156.i64[0];
                      v156.i64[0] = vextq_s8(v157, v157, 8uLL).u64[0];
                      v156.i64[1] = v157.i64[0];
                      *int v138 = v158;
                      *(int8x16_t *)((char *)v138 + v19) = v150;
                      uint64_t v159 = (int8x16_t *)((char *)v138 + v19 + v19);
                      *uint64_t v159 = v151;
                      uint64_t v160 = (int8x16_t *)((char *)v159 + v19);
                      *uint64_t v160 = v152;
                      long long v161 = (int8x16_t *)((char *)v160 + v19);
                      int8x16_t *v161 = v153;
                      long long v162 = (int8x16_t *)((char *)v161 + v19);
                      *long long v162 = v154;
                      long long v163 = (int8x16_t *)((char *)v162 + v19);
                      *long long v163 = v155;
                      *(int8x16_t *)((char *)v163 + v19) = v156;
                      v137 += 8;
                      ++v138;
                      v136 -= 16;
                    }
                    while (v17 > v137);
                  }
                  v134 += 8;
                  v135 += -8 * (int)v16;
                  v25 += 8 * v19;
                }
                while (v18 > v134);
              }
              goto LABEL_157;
            case 4:
              if (v18)
              {
                size_t v164 = 0;
                uint64_t v165 = &v24->i8[(v15 - 8) * v16];
                do
                {
                  if (v17)
                  {
                    uint64_t v166 = 0;
                    for (size_t n = 0; n < v17; n += 8)
                    {
                      long long v168 = *(_OWORD *)&v165[v166];
                      CGRect v169 = &v165[v166 + v16];
                      long long v170 = *(_OWORD *)v169;
                      CGRect v171 = &v169[v16];
                      long long v172 = *(_OWORD *)v171;
                      CGRect v173 = (long long *)&v171[v16];
                      long long v174 = *v173;
                      CGRect v175 = (long long *)((char *)v173 + v16);
                      long long v176 = *v175;
                      unsigned int v177 = (long long *)((char *)v175 + v16);
                      long long v178 = *v177;
                      uint64_t v179 = (long long *)((char *)v177 + v16);
                      long long v180 = *v179;
                      *(_OWORD *)&v25[v166] = *(long long *)((char *)v179 + v16);
                      CFDictionaryRef v181 = &v25[v166 + v19];
                      *(_OWORD *)CFDictionaryRef v181 = v180;
                      CMTime v182 = &v181[v19];
                      *(_OWORD *)CMTime v182 = v178;
                      uint64_t v183 = &v182[v19];
                      *(_OWORD *)uint64_t v183 = v176;
                      CFTypeRef v184 = &v183[v19];
                      *(_OWORD *)CFTypeRef v184 = v174;
                      CFTypeRef v185 = &v184[v19];
                      *(_OWORD *)CFTypeRef v185 = v172;
                      uint64_t v186 = &v185[v19];
                      *(_OWORD *)uint64_t v186 = v170;
                      *(_OWORD *)&v186[v19] = v168;
                      v166 += 16;
                    }
                  }
                  v164 += 8;
                  v165 -= 8 * (int)v16;
                  v25 += 8 * v19;
                }
                while (v18 > v164);
              }
              goto LABEL_157;
            case 5:
              if (v18)
              {
                for (iuint64_t i = 0; ii < v18; ii += 8)
                {
                  if (v17)
                  {
                    size_t v188 = 0;
                    CFTypeRef v189 = (int64x2_t *)v25;
                    uint64_t v190 = v24;
                    do
                    {
                      int16x8_t v191 = *v190;
                      uint64_t v192 = (int16x8_t *)((char *)v190 + v16);
                      int16x8_t v193 = *v192;
                      CFTypeRef v194 = (int16x8_t *)((char *)v192 + v16);
                      int16x8_t v195 = *v194;
                      uint64_t v196 = (int16x8_t *)((char *)v194 + v16);
                      int16x8_t v197 = *v196;
                      uint64_t v198 = (int16x8_t *)((char *)v196 + v16);
                      int16x8_t v199 = *v198;
                      int v200 = (int16x8_t *)((char *)v198 + v16);
                      int16x8_t v201 = *v200;
                      uint64_t v202 = (int16x8_t *)((char *)v200 + v16);
                      int16x8_t v203 = *v202;
                      long long v204 = (int16x8_t *)((char *)v202 + v16);
                      int32x4_t v205 = (int32x4_t)vzip1q_s16(v191, v193);
                      int32x4_t v206 = (int32x4_t)vzip2q_s16(v191, v193);
                      int32x4_t v207 = (int32x4_t)vzip1q_s16(v195, v197);
                      int32x4_t v208 = (int32x4_t)vzip2q_s16(v195, v197);
                      int32x4_t v209 = (int32x4_t)vzip1q_s16(v199, v201);
                      int32x4_t v210 = (int32x4_t)vzip2q_s16(v199, v201);
                      int32x4_t v211 = (int32x4_t)vzip1q_s16(v203, *v204);
                      int32x4_t v212 = (int32x4_t)vzip2q_s16(v203, *v204);
                      int64x2_t v213 = (int64x2_t)vzip1q_s32(v205, v207);
                      int64x2_t v214 = (int64x2_t)vzip2q_s32(v205, v207);
                      int64x2_t v215 = (int64x2_t)vzip1q_s32(v206, v208);
                      int64x2_t v216 = (int64x2_t)vzip2q_s32(v206, v208);
                      int64x2_t v217 = (int64x2_t)vzip1q_s32(v209, v211);
                      int64x2_t v218 = (int64x2_t)vzip2q_s32(v209, v211);
                      int64x2_t v219 = (int64x2_t)vzip1q_s32(v210, v212);
                      int64x2_t v220 = vzip2q_s64(v213, v217);
                      v213.i64[1] = v217.i64[0];
                      int64x2_t v221 = vzip2q_s64(v214, v218);
                      v214.i64[1] = v218.i64[0];
                      int64x2_t v222 = vzip2q_s64(v215, v219);
                      v215.i64[1] = v219.i64[0];
                      int64x2_t v223 = (int64x2_t)vzip2q_s32(v210, v212);
                      int64x2_t v224 = vzip2q_s64(v216, v223);
                      v216.i64[1] = v223.i64[0];
                      *CFTypeRef v189 = v213;
                      *(int64x2_t *)((char *)v189 + v19) = v220;
                      uint64_t v225 = (int64x2_t *)((char *)v189 + v19 + v19);
                      *uint64_t v225 = v214;
                      uint64_t v226 = (int64x2_t *)((char *)v225 + v19);
                      *uint64_t v226 = v221;
                      uint64_t v227 = (int64x2_t *)((char *)v226 + v19);
                      *uint64_t v227 = v215;
                      uint64_t v228 = (int64x2_t *)((char *)v227 + v19);
                      int64x2_t *v228 = v222;
                      uint64_t v229 = (int64x2_t *)((char *)v228 + v19);
                      *uint64_t v229 = v216;
                      *(int64x2_t *)((char *)v229 + v19) = v224;
                      v188 += 8;
                      ++v189;
                      uint64_t v190 = (int16x8_t *)((char *)v204 + 8 * (int)v16 + -7 * v16);
                    }
                    while (v17 > v188);
                  }
                  ++v24;
                  v25 += 8 * v19;
                }
              }
              goto LABEL_157;
            case 6:
              if (v18)
              {
                size_t v230 = 0;
                uint64_t v231 = &v24->i8[(v15 - 8) * v16];
                do
                {
                  if (v17)
                  {
                    uint64_t v232 = 0;
                    size_t v233 = 0;
                    uint64_t v234 = (int64x2_t *)v25;
                    do
                    {
                      int16x8_t v235 = *(int16x8_t *)&v231[v232];
                      uint64_t v236 = (int16x8_t *)&v231[v232 + v16];
                      int16x8_t v237 = *v236;
                      uint64_t v238 = (int16x8_t *)((char *)v236 + v16);
                      int16x8_t v239 = *v238;
                      long long v240 = (int16x8_t *)((char *)v238 + v16);
                      int16x8_t v241 = *v240;
                      uint64_t v242 = (int16x8_t *)((char *)v240 + v16);
                      int16x8_t v243 = *v242;
                      int v244 = (int16x8_t *)((char *)v242 + v16);
                      int16x8_t v245 = *v244;
                      unsigned int v246 = (int16x8_t *)((char *)v244 + v16);
                      int16x8_t v247 = *(int16x8_t *)((char *)v246 + v16);
                      int32x4_t v248 = (int32x4_t)vzip1q_s16(v247, *v246);
                      int32x4_t v249 = (int32x4_t)vzip2q_s16(v247, *v246);
                      int32x4_t v250 = (int32x4_t)vzip1q_s16(v245, v243);
                      int32x4_t v251 = (int32x4_t)vzip2q_s16(v245, v243);
                      int32x4_t v252 = (int32x4_t)vzip1q_s16(v241, v239);
                      int32x4_t v253 = (int32x4_t)vzip2q_s16(v241, v239);
                      int32x4_t v254 = (int32x4_t)vzip1q_s16(v237, v235);
                      int32x4_t v255 = (int32x4_t)vzip2q_s16(v237, v235);
                      int64x2_t v256 = (int64x2_t)vzip1q_s32(v248, v250);
                      int64x2_t v257 = (int64x2_t)vzip2q_s32(v248, v250);
                      int64x2_t v258 = (int64x2_t)vzip1q_s32(v249, v251);
                      int64x2_t v259 = (int64x2_t)vzip2q_s32(v249, v251);
                      int64x2_t v260 = (int64x2_t)vzip1q_s32(v252, v254);
                      int64x2_t v261 = (int64x2_t)vzip2q_s32(v252, v254);
                      int64x2_t v262 = (int64x2_t)vzip1q_s32(v253, v255);
                      int64x2_t v263 = vzip2q_s64(v256, v260);
                      v256.i64[1] = v260.i64[0];
                      int64x2_t v264 = vzip2q_s64(v257, v261);
                      v257.i64[1] = v261.i64[0];
                      int64x2_t v265 = vzip2q_s64(v258, v262);
                      v258.i64[1] = v262.i64[0];
                      int64x2_t v266 = (int64x2_t)vzip2q_s32(v253, v255);
                      int64x2_t v267 = vzip2q_s64(v259, v266);
                      v259.i64[1] = v266.i64[0];
                      int64x2_t *v234 = v256;
                      *(int64x2_t *)((char *)v234 + v19) = v263;
                      float v268 = (int64x2_t *)((char *)v234 + v19 + v19);
                      *float v268 = v257;
                      uint64_t v269 = (int64x2_t *)((char *)v268 + v19);
                      *uint64_t v269 = v264;
                      CMTime v270 = (int64x2_t *)((char *)v269 + v19);
                      *CMTime v270 = v258;
                      uint64_t v271 = (int64x2_t *)((char *)v270 + v19);
                      int64x2_t *v271 = v265;
                      CGRect v272 = (int64x2_t *)((char *)v271 + v19);
                      int64x2_t *v272 = v259;
                      *(int64x2_t *)((char *)v272 + v19) = v267;
                      v233 += 8;
                      ++v234;
                      v232 += -8 * (int)v16;
                    }
                    while (v17 > v233);
                  }
                  v230 += 8;
                  v231 += 16;
                  v25 += 8 * v19;
                }
                while (v18 > v230);
              }
              goto LABEL_157;
            case 7:
              if (v18)
              {
                size_t v273 = 0;
                uint64_t v274 = (uint64_t)v24[-1].i64 + 2 * (void)pixelBuffer + (v15 - 8) * v16;
                do
                {
                  if (v17)
                  {
                    uint64_t v275 = 0;
                    size_t v276 = 0;
                    id v277 = (int64x2_t *)v25;
                    do
                    {
                      int16x8_t v278 = *(int16x8_t *)(v274 + v275);
                      uint64_t v279 = (int16x8_t *)(v274 + v275 + v16);
                      int16x8_t v280 = *v279;
                      int v281 = (int16x8_t *)((char *)v279 + v16);
                      int16x8_t v282 = *v281;
                      float v283 = (int16x8_t *)((char *)v281 + v16);
                      int16x8_t v284 = *v283;
                      int v285 = (int16x8_t *)((char *)v283 + v16);
                      int16x8_t v286 = *v285;
                      int v287 = (int16x8_t *)((char *)v285 + v16);
                      int16x8_t v288 = *v287;
                      uint64_t v289 = (int16x8_t *)((char *)v287 + v16);
                      int16x8_t v290 = *(int16x8_t *)((char *)v289 + v16);
                      int32x4_t v291 = (int32x4_t)vzip1q_s16(v290, *v289);
                      int32x4_t v292 = (int32x4_t)vzip2q_s16(v290, *v289);
                      int32x4_t v293 = (int32x4_t)vzip1q_s16(v288, v286);
                      int32x4_t v294 = (int32x4_t)vzip2q_s16(v288, v286);
                      int32x4_t v295 = (int32x4_t)vzip1q_s16(v284, v282);
                      int32x4_t v296 = (int32x4_t)vzip2q_s16(v284, v282);
                      int32x4_t v297 = (int32x4_t)vzip1q_s16(v280, v278);
                      int32x4_t v298 = (int32x4_t)vzip2q_s16(v280, v278);
                      int64x2_t v299 = (int64x2_t)vzip1q_s32(v291, v293);
                      int64x2_t v300 = (int64x2_t)vzip2q_s32(v291, v293);
                      int64x2_t v301 = (int64x2_t)vzip1q_s32(v292, v294);
                      int64x2_t v302 = (int64x2_t)vzip2q_s32(v292, v294);
                      int64x2_t v303 = (int64x2_t)vzip1q_s32(v295, v297);
                      int64x2_t v304 = (int64x2_t)vzip2q_s32(v295, v297);
                      int64x2_t v305 = (int64x2_t)vzip1q_s32(v296, v298);
                      int64x2_t v306 = (int64x2_t)vzip2q_s32(v296, v298);
                      int64x2_t v307 = vzip2q_s64(v302, v306);
                      v302.i64[1] = v306.i64[0];
                      int64x2_t v308 = vzip2q_s64(v301, v305);
                      v301.i64[1] = v305.i64[0];
                      int64x2_t v309 = vzip2q_s64(v300, v304);
                      v300.i64[1] = v304.i64[0];
                      int64x2_t v310 = vzip2q_s64(v299, v303);
                      v299.i64[1] = v303.i64[0];
                      *id v277 = v307;
                      *(int64x2_t *)((char *)v277 + v19) = v302;
                      uint64_t v311 = (int64x2_t *)((char *)v277 + v19 + v19);
                      *uint64_t v311 = v308;
                      uint64_t v312 = (int64x2_t *)((char *)v311 + v19);
                      *uint64_t v312 = v301;
                      uint64_t v313 = (int64x2_t *)((char *)v312 + v19);
                      *uint64_t v313 = v309;
                      uint64_t v314 = (int64x2_t *)((char *)v313 + v19);
                      *uint64_t v314 = v300;
                      uint64_t v315 = (int64x2_t *)((char *)v314 + v19);
                      *uint64_t v315 = v310;
                      *(int64x2_t *)((char *)v315 + v19) = v299;
                      v276 += 8;
                      ++v277;
                      v275 += -8 * (int)v16;
                    }
                    while (v17 > v276);
                  }
                  v273 += 8;
                  v274 -= 16;
                  v25 += 8 * v19;
                }
                while (v18 > v273);
              }
              goto LABEL_157;
            case 8:
              if (v18)
              {
                size_t v316 = 0;
                uint64_t v317 = (uint64_t)v24[-1].i64 + 2 * (void)pixelBuffer;
                do
                {
                  if (v17)
                  {
                    uint64_t v318 = 0;
                    size_t v319 = 0;
                    int v320 = (int64x2_t *)v25;
                    do
                    {
                      int16x8_t v321 = *(int16x8_t *)(v317 + v318);
                      id v322 = (int16x8_t *)(v317 + v318 + v16);
                      int16x8_t v323 = *v322;
                      uint64_t v324 = (int16x8_t *)((char *)v322 + v16);
                      int16x8_t v325 = *v324;
                      uint64_t v326 = (int16x8_t *)((char *)v324 + v16);
                      int16x8_t v327 = *v326;
                      uint64_t v328 = (int16x8_t *)((char *)v326 + v16);
                      int16x8_t v329 = *v328;
                      uint64_t v330 = (int16x8_t *)((char *)v328 + v16);
                      int16x8_t v331 = *v330;
                      uint64_t v332 = (int16x8_t *)((char *)v330 + v16);
                      int16x8_t v333 = *(int16x8_t *)((char *)v332 + v16);
                      int32x4_t v334 = (int32x4_t)vzip1q_s16(v321, v323);
                      int32x4_t v335 = (int32x4_t)vzip2q_s16(v321, v323);
                      int32x4_t v336 = (int32x4_t)vzip1q_s16(v325, v327);
                      int32x4_t v337 = (int32x4_t)vzip2q_s16(v325, v327);
                      int32x4_t v338 = (int32x4_t)vzip1q_s16(v329, v331);
                      int32x4_t v339 = (int32x4_t)vzip2q_s16(v329, v331);
                      int32x4_t v340 = (int32x4_t)vzip1q_s16(*v332, v333);
                      int32x4_t v341 = (int32x4_t)vzip2q_s16(*v332, v333);
                      int64x2_t v342 = (int64x2_t)vzip1q_s32(v334, v336);
                      int64x2_t v343 = (int64x2_t)vzip2q_s32(v334, v336);
                      int64x2_t v344 = (int64x2_t)vzip1q_s32(v335, v337);
                      int64x2_t v345 = (int64x2_t)vzip2q_s32(v335, v337);
                      int64x2_t v346 = (int64x2_t)vzip1q_s32(v338, v340);
                      int64x2_t v347 = (int64x2_t)vzip2q_s32(v338, v340);
                      int64x2_t v348 = (int64x2_t)vzip1q_s32(v339, v341);
                      int64x2_t v349 = (int64x2_t)vzip2q_s32(v339, v341);
                      int64x2_t v350 = vzip2q_s64(v345, v349);
                      v345.i64[1] = v349.i64[0];
                      int64x2_t v351 = vzip2q_s64(v344, v348);
                      v344.i64[1] = v348.i64[0];
                      int64x2_t v352 = vzip2q_s64(v343, v347);
                      v343.i64[1] = v347.i64[0];
                      int64x2_t v353 = vzip2q_s64(v342, v346);
                      v342.i64[1] = v346.i64[0];
                      *int v320 = v350;
                      *(int64x2_t *)((char *)v320 + v19) = v345;
                      uint64_t v354 = (int64x2_t *)((char *)v320 + v19 + v19);
                      *uint64_t v354 = v351;
                      uint64_t v355 = (int64x2_t *)((char *)v354 + v19);
                      *uint64_t v355 = v344;
                      uint64_t v356 = (int64x2_t *)((char *)v355 + v19);
                      *uint64_t v356 = v352;
                      uint64_t v357 = (int64x2_t *)((char *)v356 + v19);
                      *uint64_t v357 = v343;
                      int v358 = (int64x2_t *)((char *)v357 + v19);
                      *int v358 = v353;
                      *(int64x2_t *)((char *)v358 + v19) = v342;
                      v319 += 8;
                      ++v320;
                      v318 += 8 * (int)v16;
                    }
                    while (v17 > v319);
                  }
                  v316 += 8;
                  v317 -= 16;
                  v25 += 8 * v19;
                }
                while (v18 > v316);
              }
              goto LABEL_157;
            default:
              goto LABEL_59;
          }
        }
        uint64_t v22 = v23;
        goto LABEL_168;
      }
    }
    else if (!v21)
    {
      uint64_t v61 = CVPixelBufferLockBaseAddress(a2, 0);
      if (!v61)
      {
        double v62 = (int32x4_t *)CVPixelBufferGetBaseAddress(v20);
        double v63 = (int8x16_t *)CVPixelBufferGetBaseAddress(a2);
        switch(a3)
        {
          case 1:
            if (v18)
            {
              for (juint64_t j = 0; jj < v18; jj += 8)
              {
                if (v17)
                {
                  uint64_t v65 = 0;
                  for (ksize_t k = 0; kk < v17; kk += 8)
                  {
                    int32x4_t v68 = v62[v65 + 1];
                    double v67 = &v62[v65].i8[v16];
                    long long v70 = *(_OWORD *)v67;
                    long long v71 = *((_OWORD *)v67 + 1);
                    double v69 = &v67[v16];
                    long long v73 = *(_OWORD *)v69;
                    long long v74 = *((_OWORD *)v69 + 1);
                    double v72 = (long long *)&v69[v16];
                    long long v76 = *v72;
                    long long v77 = v72[1];
                    double v75 = (long long *)((char *)v72 + v16);
                    long long v79 = *v75;
                    long long v80 = v75[1];
                    int v78 = (long long *)((char *)v75 + v16);
                    long long v82 = *v78;
                    long long v83 = v78[1];
                    double v81 = (long long *)((char *)v78 + v16);
                    long long v85 = *v81;
                    long long v86 = v81[1];
                    double v84 = (long long *)((char *)v81 + v16);
                    i8 = v63[v65].i8;
                    long long v88 = *v84;
                    long long v89 = v84[1];
                    *(int32x4_t *)i8 = v62[v65];
                    *((int32x4_t *)i8 + 1) = v68;
                    int v90 = &v63[v65].i8[v19];
                    *(_OWORD *)int v90 = v70;
                    *((_OWORD *)v90 + 1) = v71;
                    char v91 = &v90[v19];
                    *(_OWORD *)char v91 = v73;
                    *((_OWORD *)v91 + 1) = v74;
                    BOOL v92 = &v91[v19];
                    *(_OWORD *)BOOL v92 = v76;
                    *((_OWORD *)v92 + 1) = v77;
                    CFNumberRef v93 = &v92[v19];
                    *(_OWORD *)CFNumberRef v93 = v79;
                    *((_OWORD *)v93 + 1) = v80;
                    CFNumberRef v94 = &v93[v19];
                    *(_OWORD *)CFNumberRef v94 = v82;
                    *((_OWORD *)v94 + 1) = v83;
                    CFNumberRef v95 = &v94[v19];
                    *(_OWORD *)CFNumberRef v95 = v85;
                    *((_OWORD *)v95 + 1) = v86;
                    CFNumberRef v96 = &v95[v19];
                    *(_OWORD *)CFNumberRef v96 = v88;
                    *((_OWORD *)v96 + 1) = v89;
                    v65 += 2;
                  }
                }
                double v62 = (int32x4_t *)((char *)v62 + 8 * (int)v16);
                double v63 = (int8x16_t *)((char *)v63 + 8 * v19);
              }
            }
            goto LABEL_157;
          case 2:
            if (v18)
            {
              size_t v359 = 0;
              uint64_t v360 = (uint64_t)v62[-2].i64 + 4 * (void)pixelBuffer;
              do
              {
                if (v17)
                {
                  size_t v361 = 0;
                  uint64_t v362 = v63;
                  uint64_t v363 = (int32x4_t *)v360;
                  do
                  {
                    int8x16_t v364 = (int8x16_t)vrev64q_s32(v363[1]);
                    id v365 = (int32x4_t *)((char *)v363 + v16 + v16);
                    int32x4_t v367 = *v365;
                    int32x4_t v368 = v365[1];
                    id v366 = (int32x4_t *)((char *)v365 + v16);
                    int32x4_t v370 = *v366;
                    int32x4_t v371 = v366[1];
                    uint64_t v369 = (int32x4_t *)((char *)v366 + v16);
                    int32x4_t v373 = *v369;
                    int32x4_t v374 = v369[1];
                    uint64_t v372 = (int32x4_t *)((char *)v369 + v16);
                    int32x4_t v376 = *v372;
                    int32x4_t v377 = v372[1];
                    v375 = (int32x4_t *)((char *)v372 + v16);
                    int32x4_t v379 = *v375;
                    int32x4_t v380 = v375[1];
                    id v378 = (int32x4_t *)((char *)v375 + v16);
                    int8x16_t v381 = vextq_s8(v364, v364, 8uLL);
                    int8x16_t v382 = (int8x16_t)vrev64q_s32(*v363);
                    int8x16_t v383 = vextq_s8(v382, v382, 8uLL);
                    int8x16_t v384 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v363[1] + v16));
                    int32x4_t v385 = *v378;
                    int32x4_t v386 = v378[1];
                    int8x16_t v387 = vextq_s8(v384, v384, 8uLL);
                    int8x16_t v388 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)v363 + v16));
                    int8x16_t v389 = vextq_s8(v388, v388, 8uLL);
                    int8x16_t v390 = (int8x16_t)vrev64q_s32(v368);
                    int8x16_t v391 = (int8x16_t)vrev64q_s32(v367);
                    int8x16_t v392 = vextq_s8(v390, v390, 8uLL);
                    int8x16_t v393 = vextq_s8(v391, v391, 8uLL);
                    int8x16_t v394 = (int8x16_t)vrev64q_s32(v371);
                    int8x16_t v395 = vextq_s8(v394, v394, 8uLL);
                    int8x16_t v396 = (int8x16_t)vrev64q_s32(v370);
                    int8x16_t v397 = vextq_s8(v396, v396, 8uLL);
                    int8x16_t v398 = (int8x16_t)vrev64q_s32(v374);
                    int8x16_t v399 = vextq_s8(v398, v398, 8uLL);
                    int8x16_t v400 = (int8x16_t)vrev64q_s32(v373);
                    int8x16_t v401 = vextq_s8(v400, v400, 8uLL);
                    int8x16_t v402 = (int8x16_t)vrev64q_s32(v377);
                    int8x16_t v403 = (int8x16_t)vrev64q_s32(v376);
                    int8x16_t v404 = vextq_s8(v402, v402, 8uLL);
                    int8x16_t v405 = (int8x16_t)vrev64q_s32(v380);
                    uint64_t v406 = (int8x16_t *)((char *)v362 + v19);
                    *uint64_t v362 = v381;
                    v362[1] = v383;
                    v362 += 2;
                    int8x16_t v407 = vextq_s8(v405, v405, 8uLL);
                    int8x16_t v408 = (int8x16_t)vrev64q_s32(v379);
                    *uint64_t v406 = v387;
                    v406[1] = v389;
                    uint64_t v409 = (int8x16_t *)((char *)v406 + v19);
                    int8x16_t v410 = vextq_s8(v408, v408, 8uLL);
                    int8x16_t *v409 = v392;
                    v409[1] = v393;
                    uint64_t v411 = (int8x16_t *)((char *)v409 + v19);
                    int8x16_t *v411 = v395;
                    v411[1] = v397;
                    id v412 = (int8x16_t *)((char *)v411 + v19);
                    *id v412 = v399;
                    v412[1] = v401;
                    id v413 = (int8x16_t *)((char *)v412 + v19);
                    int8x16_t *v413 = v404;
                    v413[1] = vextq_s8(v403, v403, 8uLL);
                    uint64_t v414 = (int8x16_t *)((char *)v413 + v19);
                    int8x16_t v415 = (int8x16_t)vrev64q_s32(v386);
                    int8x16_t v416 = (int8x16_t)vrev64q_s32(v385);
                    *uint64_t v414 = v407;
                    v414[1] = v410;
                    uint64_t v417 = (int8x16_t *)((char *)v414 + v19);
                    int8x16_t *v417 = vextq_s8(v415, v415, 8uLL);
                    v417[1] = vextq_s8(v416, v416, 8uLL);
                    v361 += 8;
                    v363 -= 2;
                  }
                  while (v17 > v361);
                }
                v359 += 8;
                v360 += 8 * (int)v16;
                double v63 = (int8x16_t *)((char *)v63 + 8 * v19);
              }
              while (v18 > v359);
            }
            goto LABEL_157;
          case 3:
            if (v18)
            {
              size_t v418 = 0;
              uint64_t v419 = (uint64_t)v62[-2].i64 + 4 * (void)pixelBuffer + (v15 - 8) * v16;
              do
              {
                if (v17)
                {
                  size_t v420 = 0;
                  id v421 = v63;
                  uint64_t v422 = (int32x4_t *)v419;
                  do
                  {
                    int32x4_t v423 = *v422;
                    int32x4_t v424 = v422[1];
                    int32x4_t v426 = *(int32x4_t *)((char *)v422 + v16);
                    id v425 = (int32x4_t *)((char *)v422 + v16 + v16);
                    int32x4_t v428 = *v425;
                    int32x4_t v429 = v425[1];
                    uint64_t v427 = (int32x4_t *)((char *)v425 + v16);
                    int32x4_t v431 = *v427;
                    int32x4_t v432 = v427[1];
                    id v430 = (int32x4_t *)((char *)v427 + v16);
                    int32x4_t v434 = *v430;
                    int32x4_t v435 = v430[1];
                    long long v433 = (int32x4_t *)((char *)v430 + v16);
                    int32x4_t v437 = *v433;
                    int32x4_t v438 = v433[1];
                    long long v436 = (int32x4_t *)((char *)v433 + v16);
                    int32x4_t v440 = *v436;
                    int32x4_t v441 = v436[1];
                    long long v439 = (int32x4_t *)((char *)v436 + v16);
                    int8x16_t v442 = (int8x16_t)vrev64q_s32(v439[1]);
                    int8x16_t v443 = (int8x16_t)vrev64q_s32(*v439);
                    int8x16_t v444 = (int8x16_t)vrev64q_s32(v441);
                    int8x16_t v445 = vextq_s8(v444, v444, 8uLL);
                    int8x16_t v446 = vextq_s8(v442, v442, 8uLL);
                    int8x16_t v447 = (int8x16_t)vrev64q_s32(v440);
                    int8x16_t v448 = vextq_s8(v447, v447, 8uLL);
                    int8x16_t v449 = (int8x16_t)vrev64q_s32(v438);
                    int8x16_t v450 = (int8x16_t)vrev64q_s32(v437);
                    int8x16_t v451 = (int8x16_t)vrev64q_s32(v435);
                    int8x16_t v452 = vextq_s8(v443, v443, 8uLL);
                    int8x16_t v453 = (int8x16_t)vrev64q_s32(v434);
                    int8x16_t v454 = vextq_s8(v453, v453, 8uLL);
                    int8x16_t v455 = (int8x16_t)vrev64q_s32(v432);
                    int8x16_t v456 = (int8x16_t)vrev64q_s32(v431);
                    int8x16_t v457 = (int8x16_t)vrev64q_s32(v429);
                    int8x16_t v458 = (int8x16_t)vrev64q_s32(v428);
                    int8x16_t v459 = vextq_s8(v458, v458, 8uLL);
                    int8x16_t v460 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v422[1] + v16));
                    uint64_t v461 = (int8x16_t *)((char *)v421 + v19);
                    int8x16_t *v421 = v446;
                    v421[1] = v452;
                    v421 += 2;
                    int8x16_t v462 = (int8x16_t)vrev64q_s32(v426);
                    int8x16_t v463 = vextq_s8(v462, v462, 8uLL);
                    *uint64_t v461 = v445;
                    v461[1] = v448;
                    uint64_t v464 = (int8x16_t *)((char *)v461 + v19);
                    *uint64_t v464 = vextq_s8(v449, v449, 8uLL);
                    v464[1] = vextq_s8(v450, v450, 8uLL);
                    uint64_t v465 = (int8x16_t *)((char *)v464 + v19);
                    *uint64_t v465 = vextq_s8(v451, v451, 8uLL);
                    v465[1] = v454;
                    uint64_t v466 = (int8x16_t *)((char *)v465 + v19);
                    int8x16_t v467 = (int8x16_t)vrev64q_s32(v424);
                    int8x16_t v468 = (int8x16_t)vrev64q_s32(v423);
                    *uint64_t v466 = vextq_s8(v455, v455, 8uLL);
                    v466[1] = vextq_s8(v456, v456, 8uLL);
                    v469 = (int8x16_t *)((char *)v466 + v19);
                    int8x16_t *v469 = vextq_s8(v457, v457, 8uLL);
                    v469[1] = v459;
                    uint64_t v470 = (int8x16_t *)((char *)v469 + v19);
                    *uint64_t v470 = vextq_s8(v460, v460, 8uLL);
                    v470[1] = v463;
                    uint64_t v471 = (int8x16_t *)((char *)v470 + v19);
                    *uint64_t v471 = vextq_s8(v467, v467, 8uLL);
                    v471[1] = vextq_s8(v468, v468, 8uLL);
                    v420 += 8;
                    v422 -= 2;
                  }
                  while (v17 > v420);
                }
                v418 += 8;
                v419 += -8 * (int)v16;
                double v63 = (int8x16_t *)((char *)v63 + 8 * v19);
              }
              while (v18 > v418);
            }
            goto LABEL_157;
          case 4:
            if (v18)
            {
              size_t v472 = 0;
              uint64_t v473 = &v62->i8[(v15 - 8) * v16];
              do
              {
                if (v17)
                {
                  uint64_t v474 = 0;
                  for (msize_t m = 0; mm < v17; mm += 8)
                  {
                    long long v477 = *(_OWORD *)&v473[v474 * 16];
                    long long v478 = *(_OWORD *)&v473[v474 * 16 + 16];
                    uint64_t v476 = &v473[v474 * 16 + v16];
                    long long v480 = *(_OWORD *)v476;
                    long long v481 = *((_OWORD *)v476 + 1);
                    long long v479 = &v476[v16];
                    long long v483 = *(_OWORD *)v479;
                    long long v484 = *((_OWORD *)v479 + 1);
                    long long v482 = (long long *)&v479[v16];
                    long long v486 = *v482;
                    long long v487 = v482[1];
                    long long v485 = (long long *)((char *)v482 + v16);
                    long long v489 = *v485;
                    long long v490 = v485[1];
                    long long v488 = (long long *)((char *)v485 + v16);
                    long long v492 = *v488;
                    long long v493 = v488[1];
                    long long v491 = (long long *)((char *)v488 + v16);
                    long long v495 = *v491;
                    long long v496 = v491[1];
                    long long v494 = (long long *)((char *)v491 + v16);
                    uint64_t v497 = v63[v474].i8;
                    long long v498 = v494[1];
                    *(_OWORD *)uint64_t v497 = *v494;
                    *((_OWORD *)v497 + 1) = v498;
                    uint64_t v499 = &v63[v474].i8[v19];
                    *(_OWORD *)uint64_t v499 = v495;
                    *((_OWORD *)v499 + 1) = v496;
                    uint64_t v500 = &v499[v19];
                    *(_OWORD *)uint64_t v500 = v492;
                    *((_OWORD *)v500 + 1) = v493;
                    uint64_t v501 = &v500[v19];
                    *(_OWORD *)uint64_t v501 = v489;
                    *((_OWORD *)v501 + 1) = v490;
                    uint64_t v502 = &v501[v19];
                    *(_OWORD *)uint64_t v502 = v486;
                    *((_OWORD *)v502 + 1) = v487;
                    uint64_t v503 = &v502[v19];
                    *(_OWORD *)uint64_t v503 = v483;
                    *((_OWORD *)v503 + 1) = v484;
                    uint64_t v504 = &v503[v19];
                    *(_OWORD *)uint64_t v504 = v480;
                    *((_OWORD *)v504 + 1) = v481;
                    v505 = &v504[v19];
                    *(_OWORD *)v505 = v477;
                    *((_OWORD *)v505 + 1) = v478;
                    v474 += 2;
                  }
                }
                v472 += 8;
                v473 -= 8 * (int)v16;
                double v63 = (int8x16_t *)((char *)v63 + 8 * v19);
              }
              while (v18 > v472);
            }
            goto LABEL_157;
          case 5:
            if (v18)
            {
              for (nsize_t n = 0; nn < v18; nn += 8)
              {
                if (v17)
                {
                  size_t v507 = 0;
                  v508 = (int32x4_t *)v63;
                  v509 = v62;
                  do
                  {
                    int32x4_t v511 = *v509;
                    int32x4_t v512 = v509[1];
                    v510 = (int32x4_t *)((char *)v509 + v16);
                    int32x4_t v514 = *v510;
                    int32x4_t v515 = v510[1];
                    v513 = (int32x4_t *)((char *)v510 + v16);
                    int32x4_t v517 = *v513;
                    int32x4_t v518 = v513[1];
                    v516 = (int32x4_t *)((char *)v513 + v16);
                    int32x4_t v520 = *v516;
                    int32x4_t v521 = v516[1];
                    long long v519 = (int32x4_t *)((char *)v516 + v16);
                    int32x4_t v523 = *v519;
                    int32x4_t v524 = v519[1];
                    v522 = (int32x4_t *)((char *)v519 + v16);
                    int32x4_t v526 = *v522;
                    int32x4_t v527 = v522[1];
                    long long v525 = (int32x4_t *)((char *)v522 + v16);
                    int32x4_t v529 = *v525;
                    int32x4_t v530 = v525[1];
                    v528 = (int32x4_t *)((char *)v525 + v16);
                    int32x4_t v531 = *v528;
                    int32x4_t v532 = v528[1];
                    v509 = (int32x4_t *)((char *)v528 + 8 * (int)v16 + -7 * v16);
                    int64x2_t v533 = (int64x2_t)vzip1q_s32(v511, v514);
                    int64x2_t v534 = (int64x2_t)vzip2q_s32(v511, v514);
                    int64x2_t v535 = (int64x2_t)vzip1q_s32(v512, v515);
                    int64x2_t v536 = (int64x2_t)vzip2q_s32(v512, v515);
                    int64x2_t v537 = (int64x2_t)vzip1q_s32(v517, v520);
                    int64x2_t v538 = (int64x2_t)vzip2q_s32(v517, v520);
                    int64x2_t v539 = (int64x2_t)vzip1q_s32(v518, v521);
                    int64x2_t v540 = (int64x2_t)vzip2q_s32(v518, v521);
                    int64x2_t v541 = (int64x2_t)vzip1q_s32(v523, v526);
                    int64x2_t v542 = (int64x2_t)vzip2q_s32(v523, v526);
                    int64x2_t v543 = (int64x2_t)vzip1q_s32(v524, v527);
                    int64x2_t v544 = (int64x2_t)vzip2q_s32(v524, v527);
                    int64x2_t v545 = (int64x2_t)vzip1q_s32(v529, v531);
                    int64x2_t v546 = (int64x2_t)vzip2q_s32(v529, v531);
                    int64x2_t v547 = (int64x2_t)vzip1q_s32(v530, v532);
                    int64x2_t v548 = (int64x2_t)vzip2q_s32(v530, v532);
                    int64x2_t v549 = vzip2q_s64(v533, v537);
                    v529.i64[0] = v533.i64[0];
                    v529.i64[1] = v537.i64[0];
                    v530.i64[0] = v541.i64[0];
                    v530.i64[1] = v545.i64[0];
                    int64x2_t v550 = vzip2q_s64(v541, v545);
                    int64x2_t v551 = vzip2q_s64(v534, v538);
                    v533.i64[0] = v534.i64[0];
                    v533.i64[1] = v538.i64[0];
                    *(void *)&long long v552 = v535.i64[0];
                    *((void *)&v552 + 1) = v539.i64[0];
                    v534.i64[0] = v542.i64[0];
                    v534.i64[1] = v546.i64[0];
                    *(void *)&long long v553 = v543.i64[0];
                    *((void *)&v553 + 1) = v547.i64[0];
                    int64x2_t v554 = vzip2q_s64(v542, v546);
                    v541.i64[0] = v536.i64[0];
                    v541.i64[1] = v540.i64[0];
                    v542.i64[0] = v544.i64[0];
                    v542.i64[1] = v548.i64[0];
                    v555 = (int64x2_t *)&v508->i8[v19];
                    int32x4_t *v508 = v529;
                    v508[1] = v530;
                    v508 += 2;
                    int64x2_t *v555 = v549;
                    v555[1] = v550;
                    v556 = (int64x2_t *)((char *)v555 + v19);
                    int64x2_t *v556 = v533;
                    v556[1] = v534;
                    v557 = (int64x2_t *)((char *)v556 + v19);
                    int64x2_t *v557 = v551;
                    v557[1] = v554;
                    v558 = &v557->i8[v19];
                    *(_OWORD *)v558 = v552;
                    *((_OWORD *)v558 + 1) = v553;
                    v559 = (int64x2_t *)&v558[v19];
                    int64x2_t *v559 = vzip2q_s64(v535, v539);
                    v559[1] = vzip2q_s64(v543, v547);
                    v560 = (int64x2_t *)((char *)v559 + v19);
                    int64x2_t *v560 = v541;
                    v560[1] = v542;
                    v561 = (int64x2_t *)((char *)v560 + v19);
                    int64x2_t *v561 = vzip2q_s64(v536, v540);
                    v561[1] = vzip2q_s64(v544, v548);
                    v507 += 8;
                  }
                  while (v17 > v507);
                }
                v62 += 2;
                double v63 = (int8x16_t *)((char *)v63 + 8 * v19);
              }
            }
            goto LABEL_157;
          case 6:
            if (v18)
            {
              size_t v562 = 0;
              v563 = (int32x4_t *)((char *)v62 + (v15 - 8) * v16);
              do
              {
                if (v17)
                {
                  size_t v564 = 0;
                  v565 = (int32x4_t *)v63;
                  v566 = v563;
                  do
                  {
                    int32x4_t v568 = *v566;
                    int32x4_t v569 = v566[1];
                    v567 = (int32x4_t *)((char *)v566 + v16);
                    int32x4_t v571 = *v567;
                    int32x4_t v572 = v567[1];
                    v570 = (int32x4_t *)((char *)v567 + v16);
                    int32x4_t v574 = *v570;
                    int32x4_t v575 = v570[1];
                    v573 = (int32x4_t *)((char *)v570 + v16);
                    int32x4_t v577 = *v573;
                    int32x4_t v578 = v573[1];
                    v576 = (int32x4_t *)((char *)v573 + v16);
                    int32x4_t v580 = *v576;
                    int32x4_t v581 = v576[1];
                    v579 = (int32x4_t *)((char *)v576 + v16);
                    int32x4_t v583 = *v579;
                    int32x4_t v584 = v579[1];
                    v582 = (int32x4_t *)((char *)v579 + v16);
                    int32x4_t v586 = *v582;
                    int32x4_t v587 = v582[1];
                    v585 = (int32x4_t *)((char *)v582 + v16);
                    int32x4_t v588 = *v585;
                    int32x4_t v589 = v585[1];
                    v566 = (int32x4_t *)((char *)v585 - 7 * v16 + -8 * (int)v16);
                    int64x2_t v590 = (int64x2_t)vzip1q_s32(v588, v586);
                    int64x2_t v591 = (int64x2_t)vzip2q_s32(v588, v586);
                    int64x2_t v592 = (int64x2_t)vzip1q_s32(v589, v587);
                    int64x2_t v593 = (int64x2_t)vzip2q_s32(v589, v587);
                    int64x2_t v594 = (int64x2_t)vzip1q_s32(v583, v580);
                    int64x2_t v595 = (int64x2_t)vzip2q_s32(v583, v580);
                    int64x2_t v596 = (int64x2_t)vzip1q_s32(v584, v581);
                    int64x2_t v597 = (int64x2_t)vzip2q_s32(v584, v581);
                    int64x2_t v598 = (int64x2_t)vzip1q_s32(v577, v574);
                    int64x2_t v599 = (int64x2_t)vzip2q_s32(v577, v574);
                    int64x2_t v600 = (int64x2_t)vzip1q_s32(v578, v575);
                    int64x2_t v601 = (int64x2_t)vzip2q_s32(v578, v575);
                    int64x2_t v602 = (int64x2_t)vzip1q_s32(v571, v568);
                    int64x2_t v603 = (int64x2_t)vzip2q_s32(v571, v568);
                    int64x2_t v604 = (int64x2_t)vzip1q_s32(v572, v569);
                    int64x2_t v605 = (int64x2_t)vzip2q_s32(v572, v569);
                    int64x2_t v606 = vzip2q_s64(v590, v594);
                    v572.i64[0] = v590.i64[0];
                    v572.i64[1] = v594.i64[0];
                    v590.i64[0] = v598.i64[0];
                    v590.i64[1] = v602.i64[0];
                    int64x2_t v607 = vzip2q_s64(v598, v602);
                    int64x2_t v608 = vzip2q_s64(v591, v595);
                    *(void *)&long long v609 = v591.i64[0];
                    *((void *)&v609 + 1) = v595.i64[0];
                    int64x2_t v610 = vzip2q_s64(v592, v596);
                    v591.i64[0] = v592.i64[0];
                    v591.i64[1] = v596.i64[0];
                    *(void *)&long long v611 = v599.i64[0];
                    *((void *)&v611 + 1) = v603.i64[0];
                    v592.i64[0] = v600.i64[0];
                    v592.i64[1] = v604.i64[0];
                    int64x2_t v612 = vzip2q_s64(v599, v603);
                    v602.i64[0] = v593.i64[0];
                    v602.i64[1] = v597.i64[0];
                    v603.i64[0] = v601.i64[0];
                    v603.i64[1] = v605.i64[0];
                    v613 = (int64x2_t *)&v565->i8[v19];
                    int32x4_t *v565 = v572;
                    v565[1] = (int32x4_t)v590;
                    v565 += 2;
                    int64x2_t *v613 = v606;
                    v613[1] = v607;
                    v614 = &v613->i8[v19];
                    *(_OWORD *)v614 = v609;
                    *((_OWORD *)v614 + 1) = v611;
                    v615 = (int64x2_t *)&v614[v19];
                    int64x2_t *v615 = v608;
                    v615[1] = v612;
                    v616 = (int64x2_t *)((char *)v615 + v19);
                    int64x2_t *v616 = v591;
                    v616[1] = v592;
                    v617 = (int64x2_t *)((char *)v616 + v19);
                    int64x2_t *v617 = v610;
                    v617[1] = vzip2q_s64(v600, v604);
                    v618 = (int64x2_t *)((char *)v617 + v19);
                    int64x2_t *v618 = v602;
                    v618[1] = v603;
                    v619 = (int64x2_t *)((char *)v618 + v19);
                    int64x2_t *v619 = vzip2q_s64(v593, v597);
                    v619[1] = vzip2q_s64(v601, v605);
                    v564 += 8;
                  }
                  while (v17 > v564);
                }
                v562 += 8;
                v563 += 2;
                double v63 = (int8x16_t *)((char *)v63 + 8 * v19);
              }
              while (v18 > v562);
            }
            goto LABEL_157;
          case 7:
            if (v18)
            {
              size_t v620 = 0;
              uint64_t v621 = (uint64_t)v62[-2].i64 + 4 * (void)pixelBuffer + (v15 - 8) * v16;
              do
              {
                if (v17)
                {
                  size_t v622 = 0;
                  v623 = (int64x2_t *)v63;
                  v624 = (int32x4_t *)v621;
                  do
                  {
                    int32x4_t v626 = *v624;
                    int32x4_t v627 = v624[1];
                    v625 = (int32x4_t *)((char *)v624 + v16);
                    int32x4_t v629 = *v625;
                    int32x4_t v630 = v625[1];
                    v628 = (int32x4_t *)((char *)v625 + v16);
                    int32x4_t v632 = *v628;
                    int32x4_t v633 = v628[1];
                    v631 = (int32x4_t *)((char *)v628 + v16);
                    int32x4_t v635 = *v631;
                    int32x4_t v636 = v631[1];
                    v634 = (int32x4_t *)((char *)v631 + v16);
                    int32x4_t v638 = *v634;
                    int32x4_t v639 = v634[1];
                    v637 = (int32x4_t *)((char *)v634 + v16);
                    int32x4_t v641 = *v637;
                    int32x4_t v642 = v637[1];
                    v640 = (int32x4_t *)((char *)v637 + v16);
                    int32x4_t v644 = *v640;
                    int32x4_t v645 = v640[1];
                    v643 = (int32x4_t *)((char *)v640 + v16);
                    int32x4_t v646 = *v643;
                    int32x4_t v647 = v643[1];
                    v624 = (int32x4_t *)((char *)v643 - 7 * v16 + -8 * (int)v16);
                    int64x2_t v648 = (int64x2_t)vzip1q_s32(v646, v644);
                    int64x2_t v649 = (int64x2_t)vzip2q_s32(v646, v644);
                    int64x2_t v650 = (int64x2_t)vzip1q_s32(v647, v645);
                    int64x2_t v651 = (int64x2_t)vzip2q_s32(v647, v645);
                    int64x2_t v652 = (int64x2_t)vzip1q_s32(v641, v638);
                    int64x2_t v653 = (int64x2_t)vzip2q_s32(v641, v638);
                    int64x2_t v654 = (int64x2_t)vzip1q_s32(v642, v639);
                    int64x2_t v655 = (int64x2_t)vzip2q_s32(v642, v639);
                    int64x2_t v656 = (int64x2_t)vzip1q_s32(v635, v632);
                    int64x2_t v657 = (int64x2_t)vzip2q_s32(v635, v632);
                    int64x2_t v658 = (int64x2_t)vzip1q_s32(v636, v633);
                    int64x2_t v659 = (int64x2_t)vzip2q_s32(v636, v633);
                    int64x2_t v660 = (int64x2_t)vzip1q_s32(v629, v626);
                    int64x2_t v661 = (int64x2_t)vzip2q_s32(v629, v626);
                    int64x2_t v662 = (int64x2_t)vzip1q_s32(v630, v627);
                    int64x2_t v663 = (int64x2_t)vzip2q_s32(v630, v627);
                    int64x2_t v664 = vzip2q_s64(v651, v655);
                    int64x2_t v665 = vzip2q_s64(v659, v663);
                    v651.i64[1] = v655.i64[0];
                    v659.i64[1] = v663.i64[0];
                    int64x2_t v666 = vzip2q_s64(v650, v654);
                    int64x2_t v667 = vzip2q_s64(v658, v662);
                    v650.i64[1] = v654.i64[0];
                    v658.i64[1] = v662.i64[0];
                    int64x2_t v668 = vzip2q_s64(v649, v653);
                    int64x2_t v669 = vzip2q_s64(v657, v661);
                    v649.i64[1] = v653.i64[0];
                    v657.i64[1] = v661.i64[0];
                    int64x2_t v670 = vzip2q_s64(v648, v652);
                    v648.i64[1] = v652.i64[0];
                    v671 = (int64x2_t *)((char *)v623 + v19);
                    int64x2_t *v623 = v664;
                    v623[1] = v665;
                    v623 += 2;
                    int64x2_t *v671 = v651;
                    v671[1] = v659;
                    v672 = (int64x2_t *)((char *)v671 + v19);
                    int64x2_t *v672 = v666;
                    v672[1] = v667;
                    v673 = (int64x2_t *)((char *)v672 + v19);
                    int64x2_t *v673 = v650;
                    v673[1] = v658;
                    v674 = (int64x2_t *)((char *)v673 + v19);
                    int64x2_t *v674 = v668;
                    v674[1] = v669;
                    v675 = (int64x2_t *)((char *)v674 + v19);
                    int64x2_t *v675 = v649;
                    v675[1] = v657;
                    v676 = (int64x2_t *)((char *)v675 + v19);
                    int64x2_t *v676 = v670;
                    v676[1] = vzip2q_s64(v656, v660);
                    v677 = (int64x2_t *)((char *)v676 + v19);
                    v656.i64[1] = v660.i64[0];
                    int64x2_t *v677 = v648;
                    v677[1] = v656;
                    v622 += 8;
                  }
                  while (v17 > v622);
                }
                v620 += 8;
                v621 -= 32;
                double v63 = (int8x16_t *)((char *)v63 + 8 * v19);
              }
              while (v18 > v620);
            }
            goto LABEL_157;
          case 8:
            if (v18)
            {
              size_t v678 = 0;
              uint64_t v679 = (uint64_t)v62[-2].i64 + 4 * (void)pixelBuffer;
              do
              {
                if (v17)
                {
                  size_t v680 = 0;
                  v681 = (int64x2_t *)v63;
                  v682 = (int32x4_t *)v679;
                  do
                  {
                    int32x4_t v684 = *v682;
                    int32x4_t v685 = v682[1];
                    v683 = (int32x4_t *)((char *)v682 + v16);
                    int32x4_t v687 = *v683;
                    int32x4_t v688 = v683[1];
                    v686 = (int32x4_t *)((char *)v683 + v16);
                    int32x4_t v690 = *v686;
                    int32x4_t v691 = v686[1];
                    v689 = (int32x4_t *)((char *)v686 + v16);
                    int32x4_t v693 = *v689;
                    int32x4_t v694 = v689[1];
                    v692 = (int32x4_t *)((char *)v689 + v16);
                    int32x4_t v696 = *v692;
                    int32x4_t v697 = v692[1];
                    v695 = (int32x4_t *)((char *)v692 + v16);
                    int32x4_t v699 = *v695;
                    int32x4_t v700 = v695[1];
                    v698 = (int32x4_t *)((char *)v695 + v16);
                    int32x4_t v702 = *v698;
                    int32x4_t v703 = v698[1];
                    v701 = (int32x4_t *)((char *)v698 + v16);
                    int32x4_t v704 = *v701;
                    int32x4_t v705 = v701[1];
                    v682 = (int32x4_t *)((char *)v701 + 8 * (int)v16 + -7 * v16);
                    int64x2_t v706 = (int64x2_t)vzip1q_s32(v684, v687);
                    int64x2_t v707 = (int64x2_t)vzip2q_s32(v684, v687);
                    int64x2_t v708 = (int64x2_t)vzip1q_s32(v685, v688);
                    int64x2_t v709 = (int64x2_t)vzip2q_s32(v685, v688);
                    int64x2_t v710 = (int64x2_t)vzip1q_s32(v690, v693);
                    int64x2_t v711 = (int64x2_t)vzip2q_s32(v690, v693);
                    int64x2_t v712 = (int64x2_t)vzip1q_s32(v691, v694);
                    int64x2_t v713 = (int64x2_t)vzip2q_s32(v691, v694);
                    int64x2_t v714 = (int64x2_t)vzip1q_s32(v696, v699);
                    int64x2_t v715 = (int64x2_t)vzip2q_s32(v696, v699);
                    int64x2_t v716 = (int64x2_t)vzip1q_s32(v697, v700);
                    int64x2_t v717 = (int64x2_t)vzip2q_s32(v697, v700);
                    int64x2_t v718 = (int64x2_t)vzip1q_s32(v702, v704);
                    int64x2_t v719 = (int64x2_t)vzip2q_s32(v702, v704);
                    int64x2_t v720 = (int64x2_t)vzip1q_s32(v703, v705);
                    int64x2_t v721 = (int64x2_t)vzip2q_s32(v703, v705);
                    int64x2_t v722 = vzip2q_s64(v709, v713);
                    int64x2_t v723 = vzip2q_s64(v717, v721);
                    v709.i64[1] = v713.i64[0];
                    v717.i64[1] = v721.i64[0];
                    int64x2_t v724 = vzip2q_s64(v708, v712);
                    int64x2_t v725 = vzip2q_s64(v716, v720);
                    v708.i64[1] = v712.i64[0];
                    v716.i64[1] = v720.i64[0];
                    int64x2_t v726 = vzip2q_s64(v707, v711);
                    int64x2_t v727 = vzip2q_s64(v715, v719);
                    v707.i64[1] = v711.i64[0];
                    v715.i64[1] = v719.i64[0];
                    int64x2_t v728 = vzip2q_s64(v706, v710);
                    v706.i64[1] = v710.i64[0];
                    v729 = (int64x2_t *)((char *)v681 + v19);
                    int64x2_t *v681 = v722;
                    v681[1] = v723;
                    v681 += 2;
                    int64x2_t *v729 = v709;
                    v729[1] = v717;
                    v730 = (int64x2_t *)((char *)v729 + v19);
                    int64x2_t *v730 = v724;
                    v730[1] = v725;
                    v731 = (int64x2_t *)((char *)v730 + v19);
                    int64x2_t *v731 = v708;
                    v731[1] = v716;
                    v732 = (int64x2_t *)((char *)v731 + v19);
                    int64x2_t *v732 = v726;
                    v732[1] = v727;
                    v733 = (int64x2_t *)((char *)v732 + v19);
                    int64x2_t *v733 = v707;
                    v733[1] = v715;
                    v734 = (int64x2_t *)((char *)v733 + v19);
                    int64x2_t *v734 = v728;
                    v734[1] = vzip2q_s64(v714, v718);
                    v735 = (int64x2_t *)((char *)v734 + v19);
                    v714.i64[1] = v718.i64[0];
                    int64x2_t *v735 = v706;
                    v735[1] = v714;
                    v680 += 8;
                  }
                  while (v17 > v680);
                }
                v678 += 8;
                v679 -= 32;
                double v63 = (int8x16_t *)((char *)v63 + 8 * v19);
              }
              while (v18 > v678);
            }
LABEL_157:
            uint64_t v22 = 0;
            break;
          default:
LABEL_59:
            uint64_t v22 = FigSignalErrorAt();
            break;
        }
        CVPixelBufferUnlockBaseAddress(v20, 1uLL);
        v736 = a2;
        CVPixelBufferLockFlags v737 = 0;
        goto LABEL_159;
      }
      uint64_t v22 = v61;
LABEL_168:
      FigDebugAssert3();
      v736 = v20;
      CVPixelBufferLockFlags v737 = 1;
LABEL_159:
      CVPixelBufferUnlockBaseAddress(v736, v737);
      return v22;
    }
    FigDebugAssert3();
    return v22;
  }
  return FigSignalErrorAt();
}

uint64_t FigDepthConvertRotationAndMirroringToExifOrientation(int a1, int a2)
{
  if (a1 > 179)
  {
    if (a1 != 180)
    {
      if (a1 == 270)
      {
        BOOL v2 = a2 == 0;
        unsigned int v3 = 7;
LABEL_8:
        if (v2) {
          return v3 + 1;
        }
        else {
          return v3;
        }
      }
LABEL_11:
      FigSignalErrorAt();
      return 1;
    }
    BOOL v5 = a2 == 0;
    unsigned int v6 = 3;
  }
  else
  {
    if (a1)
    {
      if (a1 == 90)
      {
        BOOL v2 = a2 == 0;
        unsigned int v3 = 5;
        goto LABEL_8;
      }
      goto LABEL_11;
    }
    BOOL v5 = a2 == 0;
    unsigned int v6 = 1;
  }
  if (v5) {
    return v6;
  }
  else {
    return v6 + 1;
  }
}

uint64_t FigDepthRotateCalibrationData(double *a1, float32x4_t *a2, double *a3, float32x4_t *a4, int a5)
{
  if ((a5 - 9) <= 0xFFFFFFF7) {
    return FigSignalErrorAt();
  }
  switch(a5)
  {
    case 2:
      float32x4_t v5 = (float32x4_t)xmmword_1A5DBD350;
      float32x4_t v6 = (float32x4_t)xmmword_1A5EFDE70;
      goto LABEL_6;
    case 3:
      float32x4_t v5 = (float32x4_t)xmmword_1A5DBD350;
      float32x4_t v6 = (float32x4_t)xmmword_1A5F0C020;
LABEL_6:
      float32x4_t v7 = (float32x4_t)xmmword_1A5F0C010;
      break;
    case 4:
      float32x4_t v5 = (float32x4_t)xmmword_1A5DBD350;
      float32x4_t v6 = (float32x4_t)xmmword_1A5F0C020;
      float32x4_t v7 = (float32x4_t)xmmword_1A5EFDE60;
      break;
    case 5:
      float32x4_t v5 = (float32x4_t)xmmword_1A5DBD350;
      float32x4_t v6 = (float32x4_t)xmmword_1A5EFDE60;
      goto LABEL_10;
    case 6:
      float32x4_t v5 = (float32x4_t)xmmword_1A5DBD350;
      float32x4_t v6 = (float32x4_t)xmmword_1A5F0C010;
LABEL_10:
      float32x4_t v7 = (float32x4_t)xmmword_1A5EFDE70;
      break;
    case 7:
      float32x4_t v5 = (float32x4_t)xmmword_1A5DBD350;
      float32x4_t v6 = (float32x4_t)xmmword_1A5F0C010;
      goto LABEL_13;
    case 8:
      float32x4_t v5 = (float32x4_t)xmmword_1A5DBD350;
      float32x4_t v6 = (float32x4_t)xmmword_1A5EFDE60;
LABEL_13:
      float32x4_t v7 = (float32x4_t)xmmword_1A5F0C020;
      break;
    default:
      float32x4_t v7 = *(float32x4_t *)MEMORY[0x1E4F14998];
      float32x4_t v6 = *(float32x4_t *)(MEMORY[0x1E4F14998] + 16);
      float32x4_t v5 = *(float32x4_t *)(MEMORY[0x1E4F14998] + 32);
      break;
  }
  if (!a1) {
    return FigSignalErrorAt();
  }
  float v8 = *a1;
  float v9 = a1[1];
  float32x4_t v10 = vaddq_f32(v5, vmlaq_n_f32(vmulq_n_f32(v7, v8), v6, v9));
  float32x4_t v11 = vabsq_f32(v10);
  float v12 = v11.f32[1];
  *(float64x2_t *)a1 = vcvtq_f64_f32((float32x2_t)(v10.i64[0] & 0x7FFFFFFF7FFFFFFFLL));
  if (a2)
  {
    float32x4_t v13 = a2[2];
    float32x4_t v14 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v13.f32[0]), v6, *(float32x2_t *)v13.f32, 1), v5, v13, 2);
    v13.i64[0] = 0;
    int8x16_t v15 = (int8x16_t)v14;
    v15.i32[0] = vaddq_f32(v14, v11).u32[0];
    int8x16_t v16 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v13, v14), 0), v15, (int8x16_t)v14);
    int8x16_t v17 = v16;
    v17.i32[3] = v14.i32[3];
    if (*(float *)&v16.i32[1] < 0.0)
    {
      v18.i32[0] = v16.i32[0];
      *(float *)&v18.i32[1] = v11.f32[1] + *(float *)&v16.i32[1];
      v18.i64[1] = __PAIR64__(v14.u32[3], v16.u32[2]);
      int8x16_t v17 = v18;
    }
    a2[2] = (float32x4_t)v17;
  }
  if (a3)
  {
    double v19 = a3[1];
    if (*a3 != *MEMORY[0x1E4F1DAD8] || v19 != *(double *)(MEMORY[0x1E4F1DAD8] + 8))
    {
      float v21 = *a3;
      float v22 = v19;
      float32x4_t v23 = vmlaq_n_f32(vmulq_n_f32(v7, v21), v6, v22);
      float32x4_t v24 = vaddq_f32(v5, v23);
      v23.i64[0] = 0;
      int8x16_t v25 = (int8x16_t)v24;
      v25.i32[0] = vaddq_f32(v24, v11).u32[0];
      unint64_t v26 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v23, v24), 0), v25, (int8x16_t)v24).u64[0];
      float32x2_t v27 = (float32x2_t)v26;
      if (*((float *)&v26 + 1) < 0.0)
      {
        v28.i32[0] = v26;
        v28.f32[1] = v12 + *((float *)&v26 + 1);
        float32x2_t v27 = v28;
      }
      *(float64x2_t *)a3 = vcvtq_f64_f32(v27);
    }
  }
  if (a4)
  {
    uint64_t v29 = 0;
    int32x4_t v30 = vzip1q_s32((int32x4_t)v7, (int32x4_t)v5);
    int32x4_t v31 = vzip1q_s32(v30, (int32x4_t)v6);
    int32x4_t v32 = vzip1q_s32(vzip2q_s32((int32x4_t)v7, (int32x4_t)v5), vdupq_laneq_s32((int32x4_t)v6, 2));
    int32x4_t v33 = vzip2q_s32(v30, vdupq_lane_s32(*(int32x2_t *)v6.f32, 1));
    v31.i32[3] = 0;
    v33.i32[3] = 0;
    v32.i32[3] = 0;
    float32x4_t v34 = *a4;
    float32x4_t v35 = a4[1];
    float32x4_t v36 = a4[2];
    v40[0] = v31;
    v40[1] = v33;
    _OWORD v40[2] = v32;
    float32x4_t v41 = 0u;
    float32x4_t v42 = 0u;
    float32x4_t v43 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v41 + v29 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(v40[v29])), v35, *(float32x2_t *)&v40[v29], 1), v36, (float32x4_t)v40[v29], 2);
      ++v29;
    }
    while (v29 != 3);
    float32x4_t v37 = v42;
    float32x4_t v38 = v43;
    *a4 = v41;
    a4[1] = v37;
    a4[2] = v38;
  }
  return 0;
}

uint64_t FigDepthRotateMetadataDictionary(void *a1, int a2)
{
  if (!a1
    || (uint64_t v4 = *MEMORY[0x1E4F55880],
        (CFDictionaryRef v5 = (const __CFDictionary *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55880]]) == 0))
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  size.double width = 0.0;
  size.double height = 0.0;
  if (!CGSizeMakeWithDictionaryRepresentation(v5, &size)) {
    return FigSignalErrorAt();
  }
  uint64_t v6 = *MEMORY[0x1E4F55878];
  float32x4_t v7 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55878]];
  memset(v24, 0, sizeof(v24));
  if (!v7)
  {
    float v9 = 0;
    goto LABEL_8;
  }
  float v8 = v7;
  if ([v7 length] != 48) {
    return FigSignalErrorAt();
  }
  float v9 = v24;
  [v8 getBytes:v24 length:48];
LABEL_8:
  uint64_t v10 = *MEMORY[0x1E4F55890];
  CFDictionaryRef v11 = (const __CFDictionary *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55890]];
  point.CGFloat x = 0.0;
  point.double y = 0.0;
  if (v11)
  {
    p_CGPoint point = &point;
    if (!CGPointMakeWithDictionaryRepresentation(v11, &point)) {
      goto LABEL_28;
    }
  }
  else
  {
    p_CGPoint point = 0;
  }
  uint64_t v13 = *MEMORY[0x1E4F55868];
  float32x4_t v14 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55868]];
  memset(v22, 0, sizeof(v22));
  if (v14)
  {
    int8x16_t v15 = v14;
    if ([v14 length] != 64)
    {
LABEL_28:
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
    int8x16_t v16 = v22;
    [v15 getBytes:v22 length:64];
  }
  else
  {
    int8x16_t v16 = 0;
  }
  uint64_t result = FigDepthRotateCalibrationData(&size.width, (float32x4_t *)v9, &p_point->x, (float32x4_t *)v16, a2);
  if (!result)
  {
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(size);
    [a1 setObject:DictionaryRepresentation forKeyedSubscript:v4];

    if (v9)
    {
      double v19 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v9 length:48];
      [a1 setObject:v19 forKeyedSubscript:v6];
    }
    if (p_point)
    {
      CFDictionaryRef v20 = CGPointCreateDictionaryRepresentation(point);
      [a1 setObject:v20 forKeyedSubscript:v10];
    }
    if (v16)
    {
      float v21 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v16 length:64];
      [a1 setObject:v21 forKeyedSubscript:v13];
    }
    return 0;
  }
  return result;
}

uint64_t FigDepthConvertBuffer(__CVBuffer *a1, __CVBuffer *a2)
{
  CVPixelBufferRef pixelBufferOut = 0;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  OSType v5 = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType == v5)
  {
    FigDebugAssert3();
LABEL_102:
    uint64_t v33 = FigSignalErrorAt();
    goto LABEL_94;
  }
  OSType v6 = v5;
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  int v9 = PixelFormatType == 1717855600;
  if (PixelFormatType == 1751410032) {
    int v9 = 1;
  }
  int v11 = v6 == 1717855600 || v6 == 1751410032;
  BOOL v12 = PixelFormatType == 1751411059 || PixelFormatType == 1751410032;
  if (v9 != v11)
  {
    size_t v13 = Height;
    char BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    char v15 = CVPixelBufferGetBytesPerRow(a2);
    if ((Width & 7) == 0 && (BytesPerRow & 0xF) == 0 && (v15 & 0xF) == 0)
    {
      size_t v16 = CVPixelBufferGetBytesPerRow(a1);
      OSType v17 = CVPixelBufferGetPixelFormatType(a1);
      size_t v18 = CVPixelBufferGetWidth(a2);
      size_t v19 = CVPixelBufferGetHeight(a2);
      size_t v20 = CVPixelBufferGetBytesPerRow(a2);
      OSType v21 = CVPixelBufferGetPixelFormatType(a2);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      CVPixelBufferLockBaseAddress(a2, 0);
      BaseAddress = (float16x8_t *)CVPixelBufferGetBaseAddress(a1);
      float32x4_t v23 = (float32x4_t *)CVPixelBufferGetBaseAddress(a2);
      if (v17 == 1751411059 || v17 == 1751410032)
      {
        if (v21 == 1751411059 || v21 == 1751410032)
        {
          if (v19)
          {
            uint64_t v24 = 0;
            float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
            do
            {
              if (v18)
              {
                uint64_t v26 = 0;
                for (size_t i = 0; i < v18; i += 8)
                {
                  float16x8_t v28 = BaseAddress[v26];
                  float32x4_t v29 = vmaxq_f32(vcvtq_f32_f16(*(float16x4_t *)v28.i8), v25);
                  float32x4_t v30 = vmaxq_f32(vcvt_hight_f32_f16(v28), v25);
                  float32x4_t v31 = vrecpeq_f32(v29);
                  float32x4_t v32 = vrecpeq_f32(v30);
                  v23[v26++] = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v31, vrecpsq_f32(v29, v31))), vmulq_f32(v32, vrecpsq_f32(v30, v32)));
                }
              }
              ++v24;
              BaseAddress = (float16x8_t *)((char *)BaseAddress + v16);
              float32x4_t v23 = (float32x4_t *)((char *)v23 + v20);
            }
            while (v24 != v19);
          }
        }
        else if (v19)
        {
          uint64_t v56 = 0;
          float32x4_t v57 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
          do
          {
            if (v18)
            {
              size_t v58 = 0;
              uint64_t v59 = v23;
              double v60 = BaseAddress;
              do
              {
                float16x8_t v61 = *v60++;
                float32x4_t v62 = vmaxq_f32(vcvtq_f32_f16(*(float16x4_t *)v61.i8), v57);
                float32x4_t v63 = vmaxq_f32(vcvt_hight_f32_f16(v61), v57);
                float32x4_t v64 = vrecpeq_f32(v62);
                float32x4_t v65 = vrecpeq_f32(v63);
                *uint64_t v59 = vmulq_f32(v64, vrecpsq_f32(v62, v64));
                v59[1] = vmulq_f32(v65, vrecpsq_f32(v63, v65));
                v59 += 2;
                v58 += 8;
              }
              while (v18 > v58);
            }
            ++v56;
            BaseAddress = (float16x8_t *)((char *)BaseAddress + v16);
            float32x4_t v23 = (float32x4_t *)((char *)v23 + v20);
          }
          while (v56 != v19);
        }
      }
      else if (v21 == 1751411059 || v21 == 1751410032)
      {
        if (v19)
        {
          uint64_t v45 = 0;
          float32x4_t v46 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
          do
          {
            if (v18)
            {
              size_t v47 = 0;
              size_t v48 = (float16x8_t *)v23;
              size_t v49 = (float32x4_t *)BaseAddress;
              do
              {
                float32x4_t v50 = *v49;
                float32x4_t v51 = v49[1];
                v49 += 2;
                float32x4_t v52 = vmaxq_f32(v50, v46);
                float32x4_t v53 = vmaxq_f32(v51, v46);
                float32x4_t v54 = vrecpeq_f32(v52);
                float32x4_t v55 = vrecpeq_f32(v53);
                *v48++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v54, vrecpsq_f32(v52, v54))), vmulq_f32(v55, vrecpsq_f32(v53, v55)));
                v47 += 8;
              }
              while (v18 > v47);
            }
            ++v45;
            BaseAddress = (float16x8_t *)((char *)BaseAddress + v16);
            float32x4_t v23 = (float32x4_t *)((char *)v23 + v20);
          }
          while (v45 != v19);
        }
      }
      else if (v19)
      {
        uint64_t v66 = 0;
        float32x4_t v67 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
        do
        {
          if (v18)
          {
            uint64_t v68 = 0;
            for (size_t j = 0; j < v18; j += 8)
            {
              long long v70 = &v23[v68];
              float32x4_t v71 = vmaxq_f32((float32x4_t)BaseAddress[v68], v67);
              float32x4_t v72 = vmaxq_f32((float32x4_t)BaseAddress[v68 + 1], v67);
              float32x4_t v73 = vrecpeq_f32(v71);
              float32x4_t v74 = vrecpeq_f32(v72);
              float32x4_t v75 = vmulq_f32(v73, vrecpsq_f32(v71, v73));
              float32x4_t v76 = vmulq_f32(v74, vrecpsq_f32(v72, v74));
              *long long v70 = vmulq_f32(v75, vrecpsq_f32(v71, v75));
              v70[1] = vmulq_f32(v76, vrecpsq_f32(v72, v76));
              v68 += 2;
            }
          }
          ++v66;
          BaseAddress = (float16x8_t *)((char *)BaseAddress + v16);
          float32x4_t v23 = (float32x4_t *)((char *)v23 + v20);
        }
        while (v66 != v19);
      }
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      goto LABEL_93;
    }
    if (v12 || v6 == 1751411059 || v6 == 1751410032)
    {
      OSType v35 = ((PixelFormatType - 1717856627) & 0xFDFFFFFF) != 0 ? 1717855600 : 1717856627;
      if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Width, v13, v35, 0, &pixelBufferOut)) {
        goto LABEL_101;
      }
    }
    if (PixelFormatType == 1751411059 || PixelFormatType == 1751410032)
    {
      if (v6 == 1751411059 || v6 == 1751410032)
      {
        if (figDepthConvertBufferFloat16ToFloat32(a1, pixelBufferOut)) {
          goto LABEL_101;
        }
        float32x4_t v36 = pixelBufferOut;
        if (CVPixelBufferLockBaseAddress(pixelBufferOut, 0)) {
          goto LABEL_100;
        }
        float32x4_t v37 = (float *)CVPixelBufferGetBaseAddress(v36);
        size_t v38 = CVPixelBufferGetHeight(v36);
        size_t v39 = CVPixelBufferGetWidth(v36);
        size_t v40 = CVPixelBufferGetBytesPerRow(v36);
        if (v38)
        {
          for (uint64_t k = 0; k != v38; ++k)
          {
            if (v39)
            {
              for (uint64_t m = 0; m != v39; ++m)
              {
                float v43 = v37[m];
                if (v43 >= 0.0001) {
                  float v44 = 1.0 / v43;
                }
                else {
                  float v44 = 10000.0;
                }
                v37[m] = v44;
              }
            }
            float32x4_t v37 = (float *)((char *)v37 + v40);
          }
        }
        if (CVPixelBufferUnlockBaseAddress(v36, 0))
        {
LABEL_100:
          FigDebugAssert3();
LABEL_101:
          FigDebugAssert3();
          goto LABEL_102;
        }
        if (figDepthConvertBufferFloat32ToFloat16(pixelBufferOut, a2)) {
          goto LABEL_101;
        }
      }
      else if (figDepthConvertBufferFloat16ToFloat32(a1, pixelBufferOut) {
             || !figDepthClampAndInvertFloat32_C(pixelBufferOut, a2))
      }
      {
        goto LABEL_101;
      }
    }
    else if (v6 == 1751411059 || v6 == 1751410032)
    {
      if (!figDepthClampAndInvertFloat32_C(a1, pixelBufferOut)
        || figDepthConvertBufferFloat32ToFloat16(pixelBufferOut, a2))
      {
        goto LABEL_101;
      }
    }
    else if (!figDepthClampAndInvertFloat32_C(a1, a2))
    {
      goto LABEL_101;
    }
LABEL_93:
    uint64_t v33 = 0;
    goto LABEL_94;
  }
  if (!v12)
  {
    if (v6 != 1751411059 && v6 != 1751410032) {
      goto LABEL_93;
    }
    int v34 = figDepthConvertBufferFloat32ToFloat16(a1, a2);
    goto LABEL_60;
  }
  uint64_t v33 = 0;
  if (v6 != 1751410032 && v6 != 1751411059)
  {
    int v34 = figDepthConvertBufferFloat16ToFloat32(a1, a2);
LABEL_60:
    if (v34) {
      goto LABEL_101;
    }
    goto LABEL_93;
  }
LABEL_94:
  CVPixelBufferRelease(pixelBufferOut);
  return v33;
}

BOOL FigDepthFormatIsDepth(int a1)
{
  return a1 == 1717855600 || a1 == 1751410032;
}

BOOL FigDepthFormatIs16Bit(int a1)
{
  return a1 == 1751410032 || a1 == 1751411059;
}

uint64_t figDepthConvertBufferFloat16ToFloat32(__CVBuffer *a1, __CVBuffer *a2)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  src.datCGFloat a = CVPixelBufferGetBaseAddress(a1);
  src.double height = CVPixelBufferGetHeight(a1);
  src.double width = CVPixelBufferGetWidth(a1);
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  dest.datCGFloat a = CVPixelBufferGetBaseAddress(a2);
  dest.double height = CVPixelBufferGetHeight(a2);
  dest.double width = CVPixelBufferGetWidth(a2);
  dest.rowBytes = CVPixelBufferGetBytesPerRow(a2);
  if (vImageConvert_Planar16FtoPlanarF(&src, &dest, 0))
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return 0;
  }
}

uint64_t figDepthConvertBufferFloat32ToFloat16(__CVBuffer *a1, __CVBuffer *a2)
{
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  src.datCGFloat a = CVPixelBufferGetBaseAddress(a1);
  src.double height = CVPixelBufferGetHeight(a1);
  src.double width = CVPixelBufferGetWidth(a1);
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  dest.datCGFloat a = CVPixelBufferGetBaseAddress(a2);
  dest.double height = CVPixelBufferGetHeight(a2);
  dest.double width = CVPixelBufferGetWidth(a2);
  dest.rowBytes = CVPixelBufferGetBytesPerRow(a2);
  if (vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0))
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return 0;
  }
}

uint64_t figDepthClampAndInvertFloat32_C(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferLockBaseAddress(a1, 1uLL))
  {
    FigDebugAssert3();
    return 0;
  }
  if (CVPixelBufferLockBaseAddress(a2, 0))
  {
    FigDebugAssert3();
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    return 0;
  }
  BaseAddress = (float *)CVPixelBufferGetBaseAddress(a1);
  OSType v5 = (float *)CVPixelBufferGetBaseAddress(a2);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  size_t v9 = CVPixelBufferGetBytesPerRow(a2);
  if (Height)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      if (Width)
      {
        for (uint64_t j = 0; j != Width; ++j)
        {
          float v12 = BaseAddress[j];
          if (v12 >= 0.0001) {
            float v13 = 1.0 / v12;
          }
          else {
            float v13 = 10000.0;
          }
          v5[j] = v13;
        }
      }
      BaseAddress = (float *)((char *)BaseAddress + BytesPerRow);
      OSType v5 = (float *)((char *)v5 + v9);
    }
  }
  uint64_t v14 = 1;
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return v14;
}

uint64_t FigDepthScaleBuffer(__CVBuffer *a1, __CVBuffer *a2)
{
  double Width = (double)CVPixelBufferGetWidth(a1);
  double Height = (double)CVPixelBufferGetHeight(a1);
  return FigDepthScaleBufferWithCrop(a1, a2, 0.0, 0.0, Width, Height);
}

uint64_t FigDepthScaleBufferWithCrop(__CVBuffer *a1, __CVBuffer *a2, double a3, double a4, double a5, double a6)
{
  int v11 = a1;
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v11);
  size_t Width = CVPixelBufferGetWidth(a2);
  size_t Height = CVPixelBufferGetHeight(a2);
  size_t v16 = CVPixelBufferGetBytesPerRow(a2);
  OSType v17 = CVPixelBufferGetPixelFormatType(a2);
  uint64_t v18 = FigDepthBytesPerPixelForDepthFormat(PixelFormatType);
  if (v18)
  {
    uint64_t v19 = v18;
    if (v18 == FigDepthBytesPerPixelForDepthFormat(v17))
    {
      unint64_t v20 = (unint64_t)a5;
      unint64_t v21 = (unint64_t)a6;
      float v22 = (float)(unint64_t)a5 / (float)Width;
      float v23 = (float)v21 / (float)Height;
      unint64_t v358 = v20;
      if (v22 != v23)
      {
        uint64_t v24 = a2;
LABEL_16:
        int v27 = 0;
LABEL_17:
        unint64_t v356 = v21;
        uint64_t v29 = CVPixelBufferLockBaseAddress(v11, 1uLL);
        if (v29)
        {
          uint64_t v353 = v29;
          FigDebugAssert3();
        }
        else
        {
          uint64_t v30 = CVPixelBufferLockBaseAddress(v24, 0);
          if (v30)
          {
            uint64_t v353 = v30;
            FigDebugAssert3();
            CVPixelBufferUnlockBaseAddress(v11, 1uLL);
          }
          else
          {
            BaseAddress = (int16x4_t *)CVPixelBufferGetBaseAddress(v11);
            uint64_t v357 = v24;
            float32x4_t v32 = (float32x4_t *)CVPixelBufferGetBaseAddress(v24);
            uint64_t v45 = v32;
            switch(v27)
            {
              case -4:
                float32x4_t v46 = (float32x4_t *)((char *)v32 + v16);
                if (v19 != 4)
                {
                  uint64_t v355 = v11;
                  FigFloat16ConvertToFloat32();
                  if (v358 == 2)
                  {
                    float32x4_t v75 = v45;
                  }
                  else
                  {
                    unint64_t v113 = 0;
                    int16x8_t v114 = BaseAddress;
                    float32x4_t v75 = v45;
                    do
                    {
                      double v115 = (float32x4_t *)((char *)v75 + v16);
                      FigFloat16ConvertToFloat32();
                      FigFloat16ConvertToFloat32();
                      int16x8_t v114 = (int16x4_t *)((char *)v114 + 4);
                      FigFloat16ConvertToFloat32();
                      v75->i16[0] = FigFloat32ConvertToFloat16();
                      v75->i16[1] = FigFloat32ConvertToFloat16();
                      v75->i16[2] = FigFloat32ConvertToFloat16();
                      v75->i16[3] = FigFloat32ConvertToFloat16();
                      v75->i16[4] = FigFloat32ConvertToFloat16();
                      v75->i16[5] = FigFloat32ConvertToFloat16();
                      v75->i16[6] = FigFloat32ConvertToFloat16();
                      v75->i16[7] = FigFloat32ConvertToFloat16();
                      v115->i16[0] = FigFloat32ConvertToFloat16();
                      v115->i16[1] = FigFloat32ConvertToFloat16();
                      v115->i16[2] = FigFloat32ConvertToFloat16();
                      v115->i16[3] = FigFloat32ConvertToFloat16();
                      v115->i16[4] = FigFloat32ConvertToFloat16();
                      v115->i16[5] = FigFloat32ConvertToFloat16();
                      v115->i16[6] = FigFloat32ConvertToFloat16();
                      v115->i16[7] = FigFloat32ConvertToFloat16();
                      v113 += 2;
                      ++v75;
                    }
                    while (v358 - 2 > v113);
                    float32x4_t v46 = (float32x4_t *)((char *)v75 + v16);
                  }
                  FigFloat16ConvertToFloat32();
                  FigFloat16ConvertToFloat32();
                  v75->i16[0] = FigFloat32ConvertToFloat16();
                  v75->i16[1] = FigFloat32ConvertToFloat16();
                  v75->i16[2] = FigFloat32ConvertToFloat16();
                  v75->i16[3] = FigFloat32ConvertToFloat16();
                  v75->i16[4] = FigFloat32ConvertToFloat16();
                  v75->i16[5] = FigFloat32ConvertToFloat16();
                  v75->i16[6] = FigFloat32ConvertToFloat16();
                  v75->i16[7] = FigFloat32ConvertToFloat16();
                  *(__int16 *)((char *)v75->i16 + v16) = FigFloat32ConvertToFloat16();
                  v46->i16[1] = FigFloat32ConvertToFloat16();
                  v46->i16[2] = FigFloat32ConvertToFloat16();
                  v46->i16[3] = FigFloat32ConvertToFloat16();
                  v46->i16[4] = FigFloat32ConvertToFloat16();
                  v46->i16[5] = FigFloat32ConvertToFloat16();
                  v46->i16[6] = FigFloat32ConvertToFloat16();
                  v46->i16[7] = FigFloat32ConvertToFloat16();
                  int8x16_t v122 = (float16x8_t *)((char *)v45 + 2 * v16);
                  if (v356 == 1)
                  {
                    unint64_t v123 = v358;
                  }
                  else
                  {
                    uint64_t v196 = 0;
                    uint64_t v197 = 2 * v16;
                    uint64_t v198 = 4 * v16;
                    unint64_t v123 = v358;
                    float32x4_t v199 = (float32x4_t)xmmword_1A5F0CAC0;
                    float32x4_t v200 = (float32x4_t)xmmword_1A5F0CAE0;
                    int16x8_t v201 = (int8x8_t *)&BaseAddress[1];
                    float32x4_t v202 = (float32x4_t)xmmword_1A5F0CB10;
                    uint64_t v203 = 3 * v16;
                    uint64_t v204 = 5 * v16;
                    do
                    {
                      int16x4_t v205 = *BaseAddress;
                      *(int16x4_t *)v116.i8 = *(int16x4_t *)((char *)BaseAddress + BytesPerRow);
                      int16x4_t v206 = vdup_lane_s16(*BaseAddress, 0);
                      int16x4_t v207 = vdup_lane_s16(*(int16x4_t *)v116.i8, 0);
                      if (v358 == 4)
                      {
                        int32x4_t v208 = (float16x8_t *)((char *)v122 + v16);
                        int32x4_t v209 = (float16x8_t *)((char *)v122 + v197);
                        int32x4_t v210 = (float16x8_t *)((char *)v122 + v203);
                        int32x4_t v211 = v122;
                      }
                      else
                      {
                        unint64_t v212 = 0;
                        int64x2_t v213 = v45;
                        int64x2_t v214 = v201;
                        float32x4_t v215 = v200;
                        float32x4_t v216 = v199;
                        do
                        {
                          *(int16x4_t *)v217.i8 = v207;
                          *(int16x4_t *)v218.i8 = v206;
                          int16x4_t v207 = *(int16x4_t *)v116.i8;
                          int16x4_t v206 = v205;
                          int64x2_t v219 = (float16x8_t *)((char *)v213 + v197);
                          *(int8x8_t *)v116.i8 = vext_s8(*(int8x8_t *)v218.i8, (int8x8_t)v205, 6uLL);
                          v218.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v116.i8, v205);
                          *(int16x4_t *)v116.i8 = vzip1_s16(*(int16x4_t *)v116.i8, v205);
                          float16x8_t v220 = (float16x8_t)vzip1q_s16(v116, v116);
                          int16x4_t v221 = (int16x4_t)vext_s8(*(int8x8_t *)v217.i8, (int8x8_t)v207, 6uLL);
                          v217.u64[1] = (unint64_t)vzip2_s16(v221, v207);
                          *(int16x4_t *)v119.f32 = vzip1_s16(v221, v207);
                          int16x4_t v205 = (int16x4_t)*v214;
                          int16x4_t v222 = (int16x4_t)vext_s8((int8x8_t)v206, *v214, 2uLL);
                          *(int8x8_t *)v116.i8 = *(int8x8_t *)((char *)v214 + BytesPerRow);
                          float16x8_t v223 = (float16x8_t)vzip1q_s16((int16x8_t)v119, (int16x8_t)v119);
                          int64x2_t v224 = (float16x8_t *)((char *)v213 + v203);
                          *(int16x4_t *)v121.f32 = vzip1_s16(v206, v222);
                          *(int16x4_t *)v225.i8 = vzip2_s16(v206, v222);
                          v225.i64[1] = v225.i64[0];
                          float16x8_t v226 = (float16x8_t)vzip2q_s16(v218, v218);
                          float16x8_t v227 = (float16x8_t)vzip1q_s16((int16x8_t)v121, (int16x8_t)v121);
                          *(int8x8_t *)v218.i8 = vext_s8((int8x8_t)v207, *(int8x8_t *)v116.i8, 2uLL);
                          *(int16x4_t *)v228.i8 = vzip2_s16(v207, *(int16x4_t *)v218.i8);
                          v228.i64[1] = v228.i64[0];
                          float16x8_t v229 = (float16x8_t)vzip2q_s16(v217, v217);
                          *(int16x4_t *)v217.i8 = vzip1_s16(v207, *(int16x4_t *)v218.i8);
                          float16x8_t v230 = (float16x8_t)vzip1q_s16(v217, v217);
                          float32x4_t v231 = vcvtq_f32_f16(*(float16x4_t *)v220.i8);
                          float32x4_t v232 = vcvt_hight_f32_f16(v220);
                          float32x4_t v233 = vcvtq_f32_f16(*(float16x4_t *)v226.i8);
                          float16x8_t v234 = (float16x8_t)vzip2q_s16(v225, v225);
                          float32x4_t v235 = vcvt_hight_f32_f16(v226);
                          float32x4_t v236 = vcvtq_f32_f16(*(float16x4_t *)v227.i8);
                          float32x4_t v237 = vcvt_hight_f32_f16(v227);
                          float32x4_t v238 = vcvtq_f32_f16(*(float16x4_t *)v223.i8);
                          float32x4_t v239 = vcvt_hight_f32_f16(v223);
                          float16x8_t v240 = (float16x8_t)vzip2q_s16(v228, v228);
                          float32x4_t v241 = vcvtq_f32_f16(*(float16x4_t *)v229.i8);
                          float32x4_t v120 = vcvt_hight_f32_f16(v229);
                          float32x4_t v121 = vcvtq_f32_f16(*(float16x4_t *)v230.i8);
                          float32x4_t v242 = vcvt_hight_f32_f16(v230);
                          float32x4_t v243 = vcvtq_f32_f16(*(float16x4_t *)v234.i8);
                          float32x4_t v244 = vcvt_hight_f32_f16(v234);
                          float32x4_t v245 = vcvtq_f32_f16(*(float16x4_t *)v240.i8);
                          float32x4_t v246 = vcvt_hight_f32_f16(v240);
                          *int64x2_t v219 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v231, (float32x4_t)xmmword_1A5F0CAA0), (float32x4_t)xmmword_1A5F0CAB0, v236), v216, v238), (float32x4_t)xmmword_1A5F0CAD0, v121)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v232, (float32x4_t)xmmword_1A5F0CAA0), (float32x4_t)xmmword_1A5F0CAB0, v237), v216, v239),
                                      (float32x4_t)xmmword_1A5F0CAD0,
                                      v242));
                          v219[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v233, (float32x4_t)xmmword_1A5F0CAA0), (float32x4_t)xmmword_1A5F0CAB0, v243), v216, v241), (float32x4_t)xmmword_1A5F0CAD0, v245)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v235, (float32x4_t)xmmword_1A5F0CAA0), (float32x4_t)xmmword_1A5F0CAB0, v244), v216, v120),
                                        (float32x4_t)xmmword_1A5F0CAD0,
                                        v246));
                          *int64x2_t v224 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v231, v215), (float32x4_t)xmmword_1A5F0CAF0, v236), (float32x4_t)xmmword_1A5F0CB00, v238), (float32x4_t)xmmword_1A5F0CB10, v121)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v232, v215), (float32x4_t)xmmword_1A5F0CAF0, v237), (float32x4_t)xmmword_1A5F0CB00, v239), (float32x4_t)xmmword_1A5F0CB10, v242));
                          v224[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v233, v215), (float32x4_t)xmmword_1A5F0CAF0, v243), (float32x4_t)xmmword_1A5F0CB00, v241), (float32x4_t)xmmword_1A5F0CB10, v245)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v235, v215), (float32x4_t)xmmword_1A5F0CAF0, v244), (float32x4_t)xmmword_1A5F0CB00, v120), (float32x4_t)xmmword_1A5F0CB10, v246));
                          int16x8_t v247 = (float16x8_t *)((char *)v213 + v198);
                          *int16x8_t v247 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v231, (float32x4_t)xmmword_1A5F0CB00), (float32x4_t)xmmword_1A5F0CB10, v236), v215, v238), (float32x4_t)xmmword_1A5F0CAF0, v121)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v232, (float32x4_t)xmmword_1A5F0CB00), (float32x4_t)xmmword_1A5F0CB10, v237), v215, v239),
                                      (float32x4_t)xmmword_1A5F0CAF0,
                                      v242));
                          v247[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v233, (float32x4_t)xmmword_1A5F0CB00), (float32x4_t)xmmword_1A5F0CB10, v243), v215, v241), (float32x4_t)xmmword_1A5F0CAF0, v245)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v235, (float32x4_t)xmmword_1A5F0CB00), (float32x4_t)xmmword_1A5F0CB10, v244), v215, v120),
                                        (float32x4_t)xmmword_1A5F0CAF0,
                                        v246));
                          float32x4_t v248 = vmlaq_f32(vmulq_f32(v232, v216), (float32x4_t)xmmword_1A5F0CAD0, v237);
                          float32x4_t v118 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v233, v216), (float32x4_t)xmmword_1A5F0CAD0, v243), (float32x4_t)xmmword_1A5F0CAA0, v241), (float32x4_t)xmmword_1A5F0CAB0, v245);
                          float32x4_t v117 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v235, v216), (float32x4_t)xmmword_1A5F0CAD0, v244), (float32x4_t)xmmword_1A5F0CAA0, v120), (float32x4_t)xmmword_1A5F0CAB0, v246);
                          float16x8_t v249 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v231, v216), (float32x4_t)xmmword_1A5F0CAD0, v236), (float32x4_t)xmmword_1A5F0CAA0, v238), (float32x4_t)xmmword_1A5F0CAB0, v121)), vmlaq_f32(vmlaq_f32(v248, (float32x4_t)xmmword_1A5F0CAA0, v239), (float32x4_t)xmmword_1A5F0CAB0, v242));
                          float32x4_t v119 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v118), v117);
                          int32x4_t v250 = (float16x8_t *)((char *)v213 + v204);
                          *int32x4_t v250 = v249;
                          v250[1] = (float16x8_t)v119;
                          v212 += 4;
                          ++v214;
                          v213 += 2;
                        }
                        while (v358 - 4 > v212);
                        int32x4_t v211 = (float16x8_t *)((char *)v213 + v197);
                        int32x4_t v208 = (float16x8_t *)((char *)v213 + v203);
                        int32x4_t v209 = (float16x8_t *)((char *)v213 + v198);
                        int32x4_t v210 = (float16x8_t *)((char *)v213 + v204);
                        float32x4_t v199 = v216;
                        float32x4_t v200 = v215;
                        float32x4_t v202 = (float32x4_t)xmmword_1A5F0CB10;
                      }
                      int16x4_t v251 = (int16x4_t)vext_s8((int8x8_t)v206, (int8x8_t)v205, 6uLL);
                      *(int16x4_t *)v117.f32 = vzip1_s16(v251, v205);
                      *(int16x4_t *)v252.i8 = vzip2_s16(v251, v205);
                      v252.i64[1] = v252.i64[0];
                      float16x8_t v253 = (float16x8_t)vzip1q_s16((int16x8_t)v117, (int16x8_t)v117);
                      float16x8_t v254 = (float16x8_t)vzip2q_s16(v252, v252);
                      int16x4_t v255 = (int16x4_t)vext_s8((int8x8_t)v207, *(int8x8_t *)v116.i8, 6uLL);
                      *(int16x4_t *)v118.f32 = vzip1_s16(v255, *(int16x4_t *)v116.i8);
                      *(int16x4_t *)v256.i8 = vzip2_s16(v255, *(int16x4_t *)v116.i8);
                      v256.i64[1] = v256.i64[0];
                      float16x8_t v257 = (float16x8_t)vzip1q_s16((int16x8_t)v118, (int16x8_t)v118);
                      float16x8_t v258 = (float16x8_t)vzip2q_s16(v256, v256);
                      int16x4_t v259 = (int16x4_t)vext_s8((int8x8_t)v205, (int8x8_t)vdup_lane_s16(v205, 3), 2uLL);
                      *(int16x4_t *)v119.f32 = vzip1_s16(v205, v259);
                      *(int16x4_t *)v260.i8 = vzip2_s16(v205, v259);
                      v260.i64[1] = v260.i64[0];
                      float16x8_t v261 = (float16x8_t)vzip1q_s16((int16x8_t)v119, (int16x8_t)v119);
                      float16x8_t v262 = (float16x8_t)vzip2q_s16(v260, v260);
                      int16x4_t v263 = (int16x4_t)vext_s8(*(int8x8_t *)v116.i8, (int8x8_t)vdup_lane_s16(*(int16x4_t *)v116.i8, 3), 2uLL);
                      *(int16x4_t *)v120.f32 = vzip1_s16(*(int16x4_t *)v116.i8, v263);
                      *(int16x4_t *)v264.i8 = vzip2_s16(*(int16x4_t *)v116.i8, v263);
                      v264.i64[1] = v264.i64[0];
                      float16x8_t v265 = (float16x8_t)vzip1q_s16((int16x8_t)v120, (int16x8_t)v120);
                      float16x8_t v266 = (float16x8_t)vzip2q_s16(v264, v264);
                      float32x4_t v267 = vcvtq_f32_f16(*(float16x4_t *)v253.i8);
                      float32x4_t v268 = vcvt_hight_f32_f16(v253);
                      float32x4_t v269 = vcvtq_f32_f16(*(float16x4_t *)v254.i8);
                      float32x4_t v270 = vcvt_hight_f32_f16(v254);
                      float32x4_t v271 = vcvtq_f32_f16(*(float16x4_t *)v261.i8);
                      float32x4_t v272 = vcvt_hight_f32_f16(v261);
                      float32x4_t v273 = vcvtq_f32_f16(*(float16x4_t *)v262.i8);
                      float32x4_t v119 = vcvt_hight_f32_f16(v262);
                      float32x4_t v120 = vcvtq_f32_f16(*(float16x4_t *)v257.i8);
                      float32x4_t v118 = vcvt_hight_f32_f16(v257);
                      float32x4_t v274 = vcvtq_f32_f16(*(float16x4_t *)v258.i8);
                      float32x4_t v275 = vcvt_hight_f32_f16(v258);
                      float32x4_t v117 = vcvtq_f32_f16(*(float16x4_t *)v265.i8);
                      float32x4_t v276 = vcvt_hight_f32_f16(v265);
                      float32x4_t v277 = vcvtq_f32_f16(*(float16x4_t *)v266.i8);
                      float32x4_t v278 = vcvt_hight_f32_f16(v266);
                      float16x8_t *v211 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v267, (float32x4_t)xmmword_1A5F0CAA0), (float32x4_t)xmmword_1A5F0CAB0, v271), v199, v120), (float32x4_t)xmmword_1A5F0CAD0, v117)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, (float32x4_t)xmmword_1A5F0CAA0), (float32x4_t)xmmword_1A5F0CAB0, v272), v199, v118),
                                  (float32x4_t)xmmword_1A5F0CAD0,
                                  v276));
                      v211[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v269, (float32x4_t)xmmword_1A5F0CAA0), (float32x4_t)xmmword_1A5F0CAB0, v273), v199, v274), (float32x4_t)xmmword_1A5F0CAD0, v277)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v270, (float32x4_t)xmmword_1A5F0CAA0), (float32x4_t)xmmword_1A5F0CAB0, v119), v199, v275),
                                    (float32x4_t)xmmword_1A5F0CAD0,
                                    v278));
                      *int32x4_t v208 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v267, v200), (float32x4_t)xmmword_1A5F0CAF0, v271), (float32x4_t)xmmword_1A5F0CB00, v120), v202, v117)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, v200), (float32x4_t)xmmword_1A5F0CAF0, v272), (float32x4_t)xmmword_1A5F0CB00, v118), v202, v276));
                      v208[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v269, v200), (float32x4_t)xmmword_1A5F0CAF0, v273), (float32x4_t)xmmword_1A5F0CB00, v274), v202, v277)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v270, v200), (float32x4_t)xmmword_1A5F0CAF0, v119), (float32x4_t)xmmword_1A5F0CB00, v275), v202, v278));
                      *int32x4_t v209 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v267, (float32x4_t)xmmword_1A5F0CB00), v202, v271), v200, v120), (float32x4_t)xmmword_1A5F0CAF0, v117)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, (float32x4_t)xmmword_1A5F0CB00), v202, v272), v200, v118), (float32x4_t)xmmword_1A5F0CAF0, v276));
                      v209[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v269, (float32x4_t)xmmword_1A5F0CB00), v202, v273), v200, v274), (float32x4_t)xmmword_1A5F0CAF0, v277)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v270, (float32x4_t)xmmword_1A5F0CB00), v202, v119), v200, v275), (float32x4_t)xmmword_1A5F0CAF0, v278));
                      float32x4_t v121 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v267, v199), (float32x4_t)xmmword_1A5F0CAD0, v271), (float32x4_t)xmmword_1A5F0CAA0, v120), (float32x4_t)xmmword_1A5F0CAB0, v117);
                      float32x4_t v279 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v270, v199), (float32x4_t)xmmword_1A5F0CAD0, v119), (float32x4_t)xmmword_1A5F0CAA0, v275), (float32x4_t)xmmword_1A5F0CAB0, v278);
                      float16x8_t v280 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v121), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, v199), (float32x4_t)xmmword_1A5F0CAD0, v272), (float32x4_t)xmmword_1A5F0CAA0, v118), (float32x4_t)xmmword_1A5F0CAB0, v276));
                      int16x8_t v116 = (int16x8_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v269, v199), (float32x4_t)xmmword_1A5F0CAD0, v273), (float32x4_t)xmmword_1A5F0CAA0, v274), (float32x4_t)xmmword_1A5F0CAB0, v277)), v279);
                      *int32x4_t v210 = v280;
                      v210[1] = (float16x8_t)v116;
                      int8x16_t v122 = (float16x8_t *)((char *)v122 + v198);
                      int16x8_t v201 = (int8x8_t *)((char *)v201 + BytesPerRow);
                      uint64_t v45 = (float32x4_t *)((char *)v45 + v198);
                      BaseAddress = (int16x4_t *)((char *)BaseAddress + BytesPerRow);
                      BOOL v173 = v196++ == v356 - 2;
                    }
                    while (!v173);
                  }
                  unint64_t v281 = v123;
                  FigFloat16ConvertToFloat32();
                  unint64_t v282 = v281 - 2;
                  if (v281 == 2)
                  {
                    float v283 = (__int16 *)((char *)v122->i16 + v16);
                  }
                  else
                  {
                    uint64_t v350 = 0;
                    unint64_t v351 = 0;
                    do
                    {
                      int64x2_t v352 = (__int16 *)((char *)v122->i16 + v16);
                      FigFloat16ConvertToFloat32();
                      FigFloat16ConvertToFloat32();
                      FigFloat16ConvertToFloat32();
                      v122->i16[0] = FigFloat32ConvertToFloat16();
                      v122->i16[1] = FigFloat32ConvertToFloat16();
                      v122->i16[2] = FigFloat32ConvertToFloat16();
                      v122->i16[3] = FigFloat32ConvertToFloat16();
                      v122->i16[4] = FigFloat32ConvertToFloat16();
                      v122->i16[5] = FigFloat32ConvertToFloat16();
                      v122->i16[6] = FigFloat32ConvertToFloat16();
                      v122->i16[7] = FigFloat32ConvertToFloat16();
                      *int64x2_t v352 = FigFloat32ConvertToFloat16();
                      v352[1] = FigFloat32ConvertToFloat16();
                      v352[2] = FigFloat32ConvertToFloat16();
                      void v352[3] = FigFloat32ConvertToFloat16();
                      v352[4] = FigFloat32ConvertToFloat16();
                      v352[5] = FigFloat32ConvertToFloat16();
                      v352[6] = FigFloat32ConvertToFloat16();
                      v352[7] = FigFloat32ConvertToFloat16();
                      v351 += 2;
                      ++v122;
                      v350 += 4;
                    }
                    while (v282 > v351);
                    float v283 = (__int16 *)((char *)v122->i16 + v16);
                  }
                  FigFloat16ConvertToFloat32();
                  FigFloat16ConvertToFloat32();
                  v122->i16[0] = FigFloat32ConvertToFloat16();
                  v122->i16[1] = FigFloat32ConvertToFloat16();
                  v122->i16[2] = FigFloat32ConvertToFloat16();
                  v122->i16[3] = FigFloat32ConvertToFloat16();
                  v122->i16[4] = FigFloat32ConvertToFloat16();
                  v122->i16[5] = FigFloat32ConvertToFloat16();
                  v122->i16[6] = FigFloat32ConvertToFloat16();
                  v122->i16[7] = FigFloat32ConvertToFloat16();
                  *(__int16 *)((char *)v122->i16 + v16) = FigFloat32ConvertToFloat16();
                  v283[1] = FigFloat32ConvertToFloat16();
                  v283[2] = FigFloat32ConvertToFloat16();
                  v283[3] = FigFloat32ConvertToFloat16();
                  v283[4] = FigFloat32ConvertToFloat16();
                  v283[5] = FigFloat32ConvertToFloat16();
                  v283[6] = FigFloat32ConvertToFloat16();
                  v283[7] = FigFloat32ConvertToFloat16();
                  goto LABEL_158;
                }
                *(int16x4_t *)v34.i8 = *BaseAddress;
                *(int32x2_t *)v47.i8 = vdup_lane_s32((int32x2_t)*BaseAddress, 0);
                size_t v48 = v357;
                unint64_t v49 = v358 - 2;
                if (v358 == 2)
                {
                  v35.i64[0] = v47.i64[0];
                  float32x4_t v50 = v32;
                }
                else
                {
                  unint64_t v94 = 0;
                  CFNumberRef v95 = (int8x8_t *)&BaseAddress[1];
                  v33.i64[0] = 0x3E0000003EC00000;
                  float32x4_t v50 = v32;
                  do
                  {
                    v36.i64[0] = v34.i64[0];
                    CFNumberRef v96 = (float32x4_t *)((char *)v50 + v16);
                    *(int8x8_t *)v35.i8 = vext_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v34.i8, 4uLL);
                    v47.i64[1] = v34.i64[0];
                    int8x8_t v97 = *v95++;
                    *(int8x8_t *)v34.i8 = v97;
                    float32x4_t v98 = (float32x4_t)vzip1q_s32(v35, v35);
                    *(int8x8_t *)v35.i8 = vext_s8(*(int8x8_t *)v36.i8, v97, 4uLL);
                    v37.i64[1] = v35.i64[0];
                    float32x4_t v37 = (float32x4_t)vzip2q_s32((int32x4_t)v37, (int32x4_t)v37);
                    float32x4_t v99 = vmlaq_f32(vmulq_f32(v98, (float32x4_t)xmmword_1A5F0CB20), (float32x4_t)xmmword_1A5F0CB30, (float32x4_t)vzip1q_s32(v36, v36));
                    int32x4_t v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vzip2q_s32(v47, v47), (float32x4_t)xmmword_1A5F0CB20), (float32x4_t)xmmword_1A5F0CB30, v37);
                    *float32x4_t v50 = v99;
                    v50[1] = v38;
                    v50 += 2;
                    *CFNumberRef v96 = v99;
                    v96[1] = (float32x4_t)v38;
                    v94 += 2;
                    v47.i64[0] = v36.i64[0];
                  }
                  while (v49 > v94);
                  float32x4_t v46 = (float32x4_t *)((char *)v50 + v16);
                }
                v33.i64[1] = v34.i64[0];
                float32x4_t v100 = (float32x4_t)vzip1q_s32(v35, v35);
                float32x4_t v101 = (float32x4_t)vzip1q_s32(v34, v34);
                int32x4_t v102 = (int32x4_t)vmlaq_f32(vmulq_f32(v100, (float32x4_t)xmmword_1A5F0CB20), (float32x4_t)xmmword_1A5F0CB30, v101);
                float32x4_t v103 = vmlaq_lane_f32(vmulq_f32((float32x4_t)vzip2q_s32(v33, v33), (float32x4_t)xmmword_1A5F0CB20), (float32x4_t)xmmword_1A5F0CB30, *(float32x2_t *)v34.i8, 1);
                *float32x4_t v50 = v102;
                v50[1] = v103;
                *float32x4_t v46 = (float32x4_t)v102;
                v46[1] = v103;
                size_t v104 = (float32x4_t *)((char *)v32 + 2 * v16);
                if (v356 == 1)
                {
                  uint64_t v105 = (int32x2_t *)BaseAddress;
                }
                else
                {
                  uint64_t v129 = 0;
                  uint64_t v130 = 2 * v16;
                  uint64_t v131 = 4 * v16;
                  v34.i64[1] = 0x3F0C00003F440000;
                  v100.i64[1] = 0x3EA800003DE00000;
                  v101.i64[0] = 0x3C8000003D400000;
                  v102.i64[1] = 0x3D4000003C800000;
                  int v132 = (int8x8_t *)&BaseAddress[1];
                  v103.i64[0] = 0x3DA000003E700000;
                  v37.i64[0] = 0x3F0C00003EC80000;
                  uint64_t v133 = 3 * v16;
                  uint64_t v134 = 5 * v16;
                  do
                  {
                    uint64_t v105 = (int32x2_t *)((char *)BaseAddress + BytesPerRow);
                    *(int16x4_t *)v39.i8 = *BaseAddress;
                    *(int16x4_t *)v38.i8 = *(int16x4_t *)((char *)BaseAddress + BytesPerRow);
                    if (v358 == 2)
                    {
                      uint64_t v135 = (float32x4_t *)((char *)v104 + v16);
                      uint64_t v136 = (float32x4_t *)((char *)v104 + v130);
                      size_t v137 = (float32x4_t *)((char *)v104 + v133);
                      *(int32x2_t *)v40.f32 = vdup_lane_s32(*(int32x2_t *)v39.i8, 0);
                      *(int32x2_t *)v41.f32 = vdup_lane_s32(*(int32x2_t *)v38.i8, 0);
                      int v138 = v104;
                    }
                    else
                    {
                      unint64_t v139 = 0;
                      *(int32x2_t *)v140.f32 = vdup_lane_s32(*(int32x2_t *)v38.i8, 0);
                      int8x8_t v141 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 0);
                      int16x8_t v142 = v45;
                      unint64_t v143 = v132;
                      do
                      {
                        v42.i64[0] = v38.i64[0];
                        v43.i64[0] = v39.i64[0];
                        int16x8_t v144 = (float32x4_t *)((char *)v142 + v130);
                        double v145 = (float32x4_t *)((char *)v142 + v133);
                        int16x8_t v146 = (float32x4_t *)((char *)v142 + v131);
                        CFTypeRef v147 = (float32x4_t *)((char *)v142 + v134);
                        *(int8x8_t *)v38.i8 = vext_s8(v141, *(int8x8_t *)v39.i8, 4uLL);
                        v40.i64[1] = v39.i64[0];
                        *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v140.f32, *(int8x8_t *)v42.f32, 4uLL);
                        v140.i64[1] = v42.i64[0];
                        float32x4_t v148 = (float32x4_t)vzip1q_s32(v38, v38);
                        *(int8x8_t *)v39.i8 = *v143;
                        float32x4_t v149 = (float32x4_t)vzip2q_s32((int32x4_t)v40, (int32x4_t)v40);
                        *(int8x8_t *)v38.i8 = *(int8x8_t *)((char *)v143 + BytesPerRow);
                        *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)&v40.u32[2], *v143, 4uLL);
                        v44.i64[1] = v40.i64[0];
                        float32x4_t v150 = (float32x4_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v41);
                        *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v42.f32, *(int8x8_t *)v38.i8, 4uLL);
                        float32x4_t v151 = vmulq_f32(v148, (float32x4_t)xmmword_1A5F0CAA0);
                        float32x4_t v152 = vmulq_f32(v149, (float32x4_t)xmmword_1A5F0CAA0);
                        float32x4_t v153 = vmulq_f32(v148, (float32x4_t)xmmword_1A5F0CAE0);
                        float32x4_t v154 = vmulq_f32(v148, (float32x4_t)xmmword_1A5F0CB00);
                        float32x4_t v155 = vmulq_f32(v149, (float32x4_t)xmmword_1A5F0CAE0);
                        float32x4_t v156 = vmulq_f32(v149, (float32x4_t)xmmword_1A5F0CB00);
                        float32x4_t v157 = vmulq_f32(v148, (float32x4_t)xmmword_1A5F0CAC0);
                        float32x4_t v158 = vmulq_f32(v149, (float32x4_t)xmmword_1A5F0CAC0);
                        float32x4_t v159 = (float32x4_t)vzip1q_s32((int32x4_t)v43, (int32x4_t)v43);
                        float32x4_t v160 = vmlaq_f32(v151, (float32x4_t)xmmword_1A5F0CAB0, v159);
                        float32x4_t v161 = vmlaq_f32(v153, (float32x4_t)xmmword_1A5F0CAF0, v159);
                        float32x4_t v162 = vmlaq_f32(v154, (float32x4_t)xmmword_1A5F0CB10, v159);
                        float32x4_t v163 = vmlaq_f32(v157, (float32x4_t)xmmword_1A5F0CAD0, v159);
                        v159.i64[1] = v41.i64[0];
                        float32x4_t v164 = (float32x4_t)vzip2q_s32(v44, v44);
                        float32x4_t v140 = (float32x4_t)vzip2q_s32((int32x4_t)v140, (int32x4_t)v140);
                        float32x4_t v165 = vmlaq_f32(v152, (float32x4_t)xmmword_1A5F0CAB0, v164);
                        float32x4_t v166 = vmlaq_f32(v155, (float32x4_t)xmmword_1A5F0CAF0, v164);
                        float32x4_t v167 = vmlaq_f32(v156, (float32x4_t)xmmword_1A5F0CB10, v164);
                        float32x4_t v168 = vmlaq_f32(v158, (float32x4_t)xmmword_1A5F0CAD0, v164);
                        float32x4_t v169 = (float32x4_t)vzip1q_s32((int32x4_t)v42, (int32x4_t)v42);
                        float32x4_t v170 = (float32x4_t)vzip2q_s32((int32x4_t)v159, (int32x4_t)v159);
                        *int16x8_t v144 = vmlaq_f32(vmlaq_f32(v160, (float32x4_t)xmmword_1A5F0CAC0, v150), (float32x4_t)xmmword_1A5F0CAD0, v169);
                        v144[1] = vmlaq_f32(vmlaq_f32(v165, (float32x4_t)xmmword_1A5F0CAC0, v140), (float32x4_t)xmmword_1A5F0CAD0, v170);
                        *double v145 = vmlaq_f32(vmlaq_f32(v161, (float32x4_t)xmmword_1A5F0CB00, v150), (float32x4_t)xmmword_1A5F0CB10, v169);
                        v145[1] = vmlaq_f32(vmlaq_f32(v166, (float32x4_t)xmmword_1A5F0CB00, v140), (float32x4_t)xmmword_1A5F0CB10, v170);
                        v139 += 2;
                        ++v143;
                        *int16x8_t v146 = vmlaq_f32(vmlaq_f32(v162, (float32x4_t)xmmword_1A5F0CAE0, v150), (float32x4_t)xmmword_1A5F0CAF0, v169);
                        v146[1] = vmlaq_f32(vmlaq_f32(v167, (float32x4_t)xmmword_1A5F0CAE0, v140), (float32x4_t)xmmword_1A5F0CAF0, v170);
                        *CFTypeRef v147 = vmlaq_f32(vmlaq_f32(v163, (float32x4_t)xmmword_1A5F0CAA0, v150), (float32x4_t)xmmword_1A5F0CAB0, v169);
                        v147[1] = vmlaq_f32(vmlaq_f32(v168, (float32x4_t)xmmword_1A5F0CAA0, v140), (float32x4_t)xmmword_1A5F0CAB0, v170);
                        v142 += 2;
                        int8x8_t v141 = *(int8x8_t *)v43.f32;
                        v140.i64[0] = v42.i64[0];
                      }
                      while (v49 > v139);
                      int v138 = (float32x4_t *)((char *)v142 + v130);
                      uint64_t v135 = (float32x4_t *)((char *)v142 + v133);
                      uint64_t v136 = (float32x4_t *)((char *)v142 + v131);
                      size_t v137 = (float32x4_t *)((char *)v142 + v134);
                    }
                    v42.i64[1] = v39.i64[0];
                    v43.i64[1] = v38.i64[0];
                    float32x4_t v40 = (float32x4_t)vzip1q_s32((int32x4_t)v40, (int32x4_t)v40);
                    float32x4_t v42 = (float32x4_t)vzip2q_s32((int32x4_t)v42, (int32x4_t)v42);
                    float32x4_t v41 = (float32x4_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v41);
                    float32x4_t v43 = (float32x4_t)vzip2q_s32((int32x4_t)v43, (int32x4_t)v43);
                    float32x4_t v171 = (float32x4_t)vzip1q_s32(v39, v39);
                    float32x4_t v172 = (float32x4_t)vzip1q_s32(v38, v38);
                    *int v138 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v40, (float32x4_t)xmmword_1A5F0CAA0), (float32x4_t)xmmword_1A5F0CAB0, v171), (float32x4_t)xmmword_1A5F0CAC0, v41), (float32x4_t)xmmword_1A5F0CAD0, v172);
                    v138[1] = vmlaq_lane_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v42, (float32x4_t)xmmword_1A5F0CAA0), (float32x4_t)xmmword_1A5F0CAB0, *(float32x2_t *)v39.i8, 1), (float32x4_t)xmmword_1A5F0CAC0, v43), (float32x4_t)xmmword_1A5F0CAD0, *(float32x2_t *)v38.i8, 1);
                    *uint64_t v135 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v40, (float32x4_t)xmmword_1A5F0CAE0), (float32x4_t)xmmword_1A5F0CAF0, v171), (float32x4_t)xmmword_1A5F0CB00, v41), (float32x4_t)xmmword_1A5F0CB10, v172);
                    v135[1] = vmlaq_lane_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v42, (float32x4_t)xmmword_1A5F0CAE0), (float32x4_t)xmmword_1A5F0CAF0, *(float32x2_t *)v39.i8, 1), (float32x4_t)xmmword_1A5F0CB00, v43), (float32x4_t)xmmword_1A5F0CB10, *(float32x2_t *)v38.i8, 1);
                    *uint64_t v136 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v40, (float32x4_t)xmmword_1A5F0CB00), (float32x4_t)xmmword_1A5F0CB10, v171), (float32x4_t)xmmword_1A5F0CAE0, v41), (float32x4_t)xmmword_1A5F0CAF0, v172);
                    v136[1] = vmlaq_lane_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v42, (float32x4_t)xmmword_1A5F0CB00), (float32x4_t)xmmword_1A5F0CB10, *(float32x2_t *)v39.i8, 1), (float32x4_t)xmmword_1A5F0CAE0, v43), (float32x4_t)xmmword_1A5F0CAF0, *(float32x2_t *)v38.i8, 1);
                    *size_t v137 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v40, (float32x4_t)xmmword_1A5F0CAC0), (float32x4_t)xmmword_1A5F0CAD0, v171), (float32x4_t)xmmword_1A5F0CAA0, v41), (float32x4_t)xmmword_1A5F0CAB0, v172);
                    v137[1] = vmlaq_lane_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v42, (float32x4_t)xmmword_1A5F0CAC0), (float32x4_t)xmmword_1A5F0CAD0, *(float32x2_t *)v39.i8, 1), (float32x4_t)xmmword_1A5F0CAA0, v43), (float32x4_t)xmmword_1A5F0CAB0, *(float32x2_t *)v38.i8, 1);
                    size_t v104 = (float32x4_t *)((char *)v104 + v131);
                    int v132 = (int8x8_t *)((char *)v132 + BytesPerRow);
                    uint64_t v45 = (float32x4_t *)((char *)v45 + v131);
                    BaseAddress = (int16x4_t *)((char *)BaseAddress + BytesPerRow);
                    BOOL v173 = v129++ == v356 - 2;
                  }
                  while (!v173);
                }
                *(int32x2_t *)v34.i8 = *v105;
                *(int32x2_t *)v100.f32 = vdup_lane_s32(*v105, 0);
                if (v358 == 2)
                {
                  long long v174 = (float32x4_t *)((char *)v104 + v16);
                }
                else
                {
                  unint64_t v337 = 0;
                  int32x4_t v338 = (int8x8_t *)&v105[1];
                  do
                  {
                    v102.i64[0] = v34.i64[0];
                    v103.i64[1] = v34.i64[0];
                    int32x4_t v339 = (float32x4_t *)((char *)v104 + v16);
                    int8x8_t v340 = *v338++;
                    *(int8x8_t *)v34.i8 = v340;
                    *(int8x8_t *)v101.f32 = vext_s8(*(int8x8_t *)&v103.u32[2], v340, 4uLL);
                    v37.i64[1] = v101.i64[0];
                    *(int8x8_t *)v100.f32 = vext_s8(*(int8x8_t *)v100.f32, *(int8x8_t *)&v103.u32[2], 4uLL);
                    float32x4_t v100 = (float32x4_t)vzip1q_s32((int32x4_t)v100, (int32x4_t)v100);
                    float32x4_t v103 = (float32x4_t)vzip2q_s32((int32x4_t)v103, (int32x4_t)v103);
                    float32x4_t v37 = (float32x4_t)vzip2q_s32((int32x4_t)v37, (int32x4_t)v37);
                    float32x4_t v341 = vmlaq_f32(vmulq_f32(v100, (float32x4_t)xmmword_1A5F0CB20), (float32x4_t)xmmword_1A5F0CB30, (float32x4_t)vzip1q_s32(v102, v102));
                    float32x4_t v342 = vmlaq_f32(vmulq_f32(v103, (float32x4_t)xmmword_1A5F0CB20), (float32x4_t)xmmword_1A5F0CB30, v37);
                    *size_t v104 = v341;
                    v104[1] = v342;
                    v104 += 2;
                    *int32x4_t v339 = v341;
                    v339[1] = v342;
                    v337 += 2;
                    v100.i64[0] = v102.i64[0];
                  }
                  while (v358 - 2 > v337);
                  long long v174 = (float32x4_t *)((char *)v104 + v16);
                  v100.i64[0] = v101.i64[0];
                }
                v101.i64[1] = v34.i64[0];
                float32x4_t v343 = vmlaq_f32(vmulq_f32((float32x4_t)vzip1q_s32((int32x4_t)v100, (int32x4_t)v100), (float32x4_t)xmmword_1A5F0CB20), (float32x4_t)xmmword_1A5F0CB30, (float32x4_t)vzip1q_s32(v34, v34));
                float32x4_t v344 = vmlaq_lane_f32(vmulq_f32((float32x4_t)vzip2q_s32((int32x4_t)v101, (int32x4_t)v101), (float32x4_t)xmmword_1A5F0CB20), (float32x4_t)xmmword_1A5F0CB30, *(float32x2_t *)v34.i8, 1);
                *size_t v104 = v343;
                v104[1] = v344;
                float32x4_t *v174 = v343;
                v174[1] = v344;
                break;
              case -2:
                if (v19 == 4)
                {
                  *(int16x4_t *)v60.f32 = *BaseAddress;
                  int8x8_t v61 = (int8x8_t)vdup_lane_s32((int32x2_t)*BaseAddress, 0);
                  size_t v48 = v357;
                  unint64_t v62 = v358 - 2;
                  if (v358 == 2)
                  {
                    *(int8x8_t *)v63.f32 = v61;
                    float32x4_t v64 = v32;
                  }
                  else
                  {
                    unint64_t v106 = 0;
                    size_t v107 = (int8x8_t *)&BaseAddress[1];
                    float32x4_t v64 = v32;
                    do
                    {
                      v108.i64[0] = v60.i64[0];
                      *(int8x8_t *)v109.f32 = vext_s8(v61, *(int8x8_t *)v60.f32, 4uLL);
                      v109.i64[1] = v60.i64[0];
                      int8x8_t v110 = *v107++;
                      *(int8x8_t *)v60.f32 = v110;
                      *(int8x8_t *)v63.f32 = vext_s8(*(int8x8_t *)&v109.u32[2], v110, 4uLL);
                      int8x8_t v61 = *(int8x8_t *)&v109.u32[2];
                      v108.i64[1] = v63.i64[0];
                      *v64++ = vmlaq_f32(vmulq_f32(v109, (float32x4_t)xmmword_1A5F0CB80), (float32x4_t)xmmword_1A5F0CB90, v108);
                      v106 += 2;
                    }
                    while (v62 > v106);
                  }
                  v63.i64[1] = v60.i64[0];
                  *(int32x2_t *)&v60.u32[2] = vdup_lane_s32(*(int32x2_t *)v60.f32, 1);
                  *float32x4_t v64 = vmlaq_f32(vmulq_f32(v63, (float32x4_t)xmmword_1A5F0CB80), (float32x4_t)xmmword_1A5F0CB90, v60);
                  int v111 = (float32x4_t *)((char *)v32 + v16);
                  if (v356 == 1)
                  {
                    int16x8_t v112 = (int32x2_t *)BaseAddress;
                  }
                  else
                  {
                    uint64_t v175 = 0;
                    uint64_t v176 = 2 * v16;
                    unsigned int v177 = (int8x8_t *)&BaseAddress[1];
                    do
                    {
                      int16x8_t v112 = (int32x2_t *)((char *)BaseAddress + BytesPerRow);
                      *(int16x4_t *)v178.f32 = *BaseAddress;
                      *(int16x4_t *)v179.f32 = *(int16x4_t *)((char *)BaseAddress + BytesPerRow);
                      if (v358 == 2)
                      {
                        long long v180 = (float32x4_t *)((char *)v111 + v16);
                        *(int32x2_t *)v181.f32 = vdup_lane_s32(*(int32x2_t *)v178.f32, 0);
                        *(int32x2_t *)v182.f32 = vdup_lane_s32(*(int32x2_t *)v179.f32, 0);
                        uint64_t v183 = v111;
                      }
                      else
                      {
                        unint64_t v184 = 0;
                        int8x8_t v185 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v179.f32, 0);
                        int8x8_t v186 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v178.f32, 0);
                        uint64_t v187 = v45;
                        size_t v188 = v177;
                        do
                        {
                          v189.i64[0] = v179.i64[0];
                          *(int8x8_t *)v190.f32 = vext_s8(v186, *(int8x8_t *)v178.f32, 4uLL);
                          v190.i64[1] = v178.i64[0];
                          *(int8x8_t *)v191.f32 = vext_s8(v185, *(int8x8_t *)v179.f32, 4uLL);
                          v191.i64[1] = v179.i64[0];
                          *(int8x8_t *)v178.f32 = *v188;
                          *(int8x8_t *)v179.f32 = *(int8x8_t *)((char *)v188 + BytesPerRow);
                          *(int8x8_t *)v181.f32 = vext_s8(*(int8x8_t *)&v190.u32[2], *v188, 4uLL);
                          int8x8_t v186 = *(int8x8_t *)&v190.u32[2];
                          v192.i64[0] = v190.i64[1];
                          v192.i64[1] = v181.i64[0];
                          *(int8x8_t *)v182.f32 = vext_s8(*(int8x8_t *)&v191.u32[2], *(int8x8_t *)v179.f32, 4uLL);
                          int8x8_t v185 = *(int8x8_t *)&v191.u32[2];
                          v189.i64[1] = v182.i64[0];
                          *(float32x4_t *)((char *)v187 + v16) = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v190, (float32x4_t)xmmword_1A5F0CB40), (float32x4_t)xmmword_1A5F0CB50, v192), (float32x4_t)xmmword_1A5F0CB60, v191), (float32x4_t)xmmword_1A5F0CB70, v189);
                          *(float32x4_t *)((char *)v187 + 2 * v16) = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v190, (float32x4_t)xmmword_1A5F0CB60), (float32x4_t)xmmword_1A5F0CB70, v192), (float32x4_t)xmmword_1A5F0CB40, v191), (float32x4_t)xmmword_1A5F0CB50, v189);
                          v184 += 2;
                          ++v188;
                          ++v187;
                        }
                        while (v62 > v184);
                        uint64_t v183 = (float32x4_t *)((char *)v187 + v16);
                        long long v180 = (float32x4_t *)((char *)v187 + v176);
                      }
                      v181.i64[1] = v178.i64[0];
                      v182.i64[1] = v179.i64[0];
                      *(int32x2_t *)&v178.u32[2] = vdup_lane_s32(*(int32x2_t *)v178.f32, 1);
                      *(int32x2_t *)&v179.u32[2] = vdup_lane_s32(*(int32x2_t *)v179.f32, 1);
                      *uint64_t v183 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v181, (float32x4_t)xmmword_1A5F0CB40), (float32x4_t)xmmword_1A5F0CB50, v178), (float32x4_t)xmmword_1A5F0CB60, v182), (float32x4_t)xmmword_1A5F0CB70, v179);
                      *long long v180 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v181, (float32x4_t)xmmword_1A5F0CB60), (float32x4_t)xmmword_1A5F0CB70, v178), (float32x4_t)xmmword_1A5F0CB40, v182), (float32x4_t)xmmword_1A5F0CB50, v179);
                      int v111 = (float32x4_t *)((char *)v111 + v176);
                      unsigned int v177 = (int8x8_t *)((char *)v177 + BytesPerRow);
                      uint64_t v45 = (float32x4_t *)((char *)v45 + v176);
                      BaseAddress = (int16x4_t *)((char *)BaseAddress + BytesPerRow);
                      BOOL v173 = v175++ == v356 - 2;
                    }
                    while (!v173);
                  }
                  *(int32x2_t *)v193.f32 = *v112;
                  int8x8_t v194 = (int8x8_t)vdup_lane_s32(*v112, 0);
                  if (v358 == 2)
                  {
                    *(int8x8_t *)v195.f32 = v194;
                  }
                  else
                  {
                    unint64_t v345 = 0;
                    int64x2_t v346 = (int8x8_t *)&v112[1];
                    do
                    {
                      v347.i64[0] = v193.i64[0];
                      *(int8x8_t *)v348.f32 = vext_s8(v194, *(int8x8_t *)v193.f32, 4uLL);
                      v348.i64[1] = v193.i64[0];
                      int8x8_t v349 = *v346++;
                      *(int8x8_t *)v193.f32 = v349;
                      *(int8x8_t *)v195.f32 = vext_s8(*(int8x8_t *)&v348.u32[2], v349, 4uLL);
                      int8x8_t v194 = *(int8x8_t *)&v348.u32[2];
                      v347.i64[1] = v195.i64[0];
                      *v111++ = vmlaq_f32(vmulq_f32(v348, (float32x4_t)xmmword_1A5F0CB80), (float32x4_t)xmmword_1A5F0CB90, v347);
                      v345 += 2;
                    }
                    while (v358 - 2 > v345);
                  }
                  v195.i64[1] = v193.i64[0];
                  *(int32x2_t *)&v193.u32[2] = vdup_lane_s32(*(int32x2_t *)v193.f32, 1);
                  *int v111 = vmlaq_f32(vmulq_f32(v195, (float32x4_t)xmmword_1A5F0CB80), (float32x4_t)xmmword_1A5F0CB90, v193);
                }
                else
                {
                  uint64_t v355 = v11;
                  FigFloat16ConvertToFloat32();
                  if (v358 == 2)
                  {
                    long long v83 = v45;
                  }
                  else
                  {
                    unint64_t v124 = 0;
                    int8x16_t v125 = BaseAddress;
                    long long v83 = v45;
                    do
                    {
                      FigFloat16ConvertToFloat32();
                      FigFloat16ConvertToFloat32();
                      int8x16_t v125 = (int16x4_t *)((char *)v125 + 4);
                      FigFloat16ConvertToFloat32();
                      v83->i16[0] = FigFloat32ConvertToFloat16();
                      v83->i16[1] = FigFloat32ConvertToFloat16();
                      v83->i16[2] = FigFloat32ConvertToFloat16();
                      v83->i16[3] = FigFloat32ConvertToFloat16();
                      v124 += 2;
                      long long v83 = (float32x4_t *)((char *)v83 + 8);
                    }
                    while (v358 - 2 > v124);
                  }
                  FigFloat16ConvertToFloat32();
                  FigFloat16ConvertToFloat32();
                  v83->i16[0] = FigFloat32ConvertToFloat16();
                  v83->i16[1] = FigFloat32ConvertToFloat16();
                  v83->i16[2] = FigFloat32ConvertToFloat16();
                  v83->i16[3] = FigFloat32ConvertToFloat16();
                  int8x16_t v126 = (float16x8_t *)((char *)v45 + v16);
                  if (v356 == 1)
                  {
                    int8x16_t v127 = BaseAddress;
                    unint64_t v128 = v358;
                  }
                  else
                  {
                    uint64_t v284 = 0;
                    uint64_t v285 = 2 * v16;
                    unint64_t v128 = v358;
                    int16x8_t v286 = (int8x8_t *)&BaseAddress[1];
                    do
                    {
                      int8x16_t v127 = (int16x4_t *)((char *)BaseAddress + BytesPerRow);
                      int16x4_t v287 = *BaseAddress;
                      int16x4_t v288 = *(int16x4_t *)((char *)BaseAddress + BytesPerRow);
                      int16x4_t v289 = vdup_lane_s16(*BaseAddress, 0);
                      int16x4_t v290 = vdup_lane_s16(v288, 0);
                      if (v358 == 4)
                      {
                        int32x4_t v291 = (float16x8_t *)((char *)v126 + v16);
                        int32x4_t v292 = v126;
                      }
                      else
                      {
                        unint64_t v293 = 0;
                        int32x4_t v294 = v45;
                        int32x4_t v295 = v286;
                        do
                        {
                          int8x8_t v296 = (int8x8_t)v290;
                          int8x8_t v297 = (int8x8_t)v289;
                          int16x4_t v290 = v288;
                          int16x4_t v289 = v287;
                          int16x4_t v298 = (int16x4_t)vext_s8(v297, (int8x8_t)v287, 6uLL);
                          float16x4_t v299 = (float16x4_t)vzip1_s16(v298, v289);
                          float16x4_t v300 = (float16x4_t)vzip2_s16(v298, v289);
                          int16x4_t v301 = (int16x4_t)vext_s8(v296, (int8x8_t)v288, 6uLL);
                          float16x4_t v302 = (float16x4_t)vzip1_s16(v301, v288);
                          float16x4_t v303 = (float16x4_t)vzip2_s16(v301, v288);
                          int16x4_t v287 = (int16x4_t)*v295;
                          int16x4_t v288 = *(int16x4_t *)((char *)v295 + BytesPerRow);
                          int16x4_t v304 = (int16x4_t)vext_s8((int8x8_t)v289, *v295, 2uLL);
                          int16x4_t v305 = (int16x4_t)vext_s8((int8x8_t)v290, (int8x8_t)v288, 2uLL);
                          float32x4_t v306 = vcvtq_f32_f16(v299);
                          float32x4_t v307 = vcvtq_f32_f16(v300);
                          float32x4_t v308 = vcvtq_f32_f16(v302);
                          float32x4_t v309 = vcvtq_f32_f16(v303);
                          float32x4_t v310 = vcvtq_f32_f16((float16x4_t)vzip1_s16(v289, v304));
                          float32x4_t v311 = vcvtq_f32_f16((float16x4_t)vzip2_s16(v289, v304));
                          float32x4_t v312 = vcvtq_f32_f16((float16x4_t)vzip1_s16(v290, v305));
                          float32x4_t v313 = vcvtq_f32_f16((float16x4_t)vzip2_s16(v290, v305));
                          *(float16x8_t *)((char *)v294 + v16) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v306, (float32x4_t)xmmword_1A5F0CB40), (float32x4_t)xmmword_1A5F0CB50, v310), (float32x4_t)xmmword_1A5F0CB60, v308), (float32x4_t)xmmword_1A5F0CB70, v312)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v307, (float32x4_t)xmmword_1A5F0CB40), (float32x4_t)xmmword_1A5F0CB50, v311),
                                                                       (float32x4_t)xmmword_1A5F0CB60,
                                                                       v309),
                                                                     (float32x4_t)xmmword_1A5F0CB70,
                                                                     v313));
                          *(float16x8_t *)((char *)v294 + 2 * v16) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v306, (float32x4_t)xmmword_1A5F0CB60), (float32x4_t)xmmword_1A5F0CB70, v310), (float32x4_t)xmmword_1A5F0CB40, v308), (float32x4_t)xmmword_1A5F0CB50, v312)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v307, (float32x4_t)xmmword_1A5F0CB60),
                                                                             (float32x4_t)xmmword_1A5F0CB70,
                                                                             v311),
                                                                           (float32x4_t)xmmword_1A5F0CB40,
                                                                           v309),
                                                                         (float32x4_t)xmmword_1A5F0CB50,
                                                                         v313));
                          v293 += 4;
                          ++v295;
                          ++v294;
                        }
                        while (v358 - 4 > v293);
                        int32x4_t v292 = (float16x8_t *)((char *)v294 + v16);
                        int32x4_t v291 = (float16x8_t *)((char *)v294 + v285);
                      }
                      int16x4_t v314 = (int16x4_t)vext_s8((int8x8_t)v289, (int8x8_t)v287, 6uLL);
                      float16x4_t v315 = (float16x4_t)vzip1_s16(v314, v287);
                      float16x4_t v316 = (float16x4_t)vzip2_s16(v314, v287);
                      int16x4_t v317 = (int16x4_t)vext_s8((int8x8_t)v290, (int8x8_t)v288, 6uLL);
                      float16x4_t v318 = (float16x4_t)vzip1_s16(v317, v288);
                      float16x4_t v319 = (float16x4_t)vzip2_s16(v317, v288);
                      int16x4_t v320 = (int16x4_t)vext_s8((int8x8_t)v287, (int8x8_t)vdup_lane_s16(v287, 3), 2uLL);
                      float16x4_t v321 = (float16x4_t)vzip1_s16(v287, v320);
                      float16x4_t v322 = (float16x4_t)vzip2_s16(v287, v320);
                      int16x4_t v323 = (int16x4_t)vext_s8((int8x8_t)v288, (int8x8_t)vdup_lane_s16(v288, 3), 2uLL);
                      float16x4_t v324 = (float16x4_t)vzip1_s16(v288, v323);
                      float16x4_t v325 = (float16x4_t)vzip2_s16(v288, v323);
                      float32x4_t v326 = vcvtq_f32_f16(v315);
                      float32x4_t v327 = vcvtq_f32_f16(v316);
                      float32x4_t v328 = vcvtq_f32_f16(v318);
                      float32x4_t v329 = vcvtq_f32_f16(v319);
                      float32x4_t v330 = vcvtq_f32_f16(v321);
                      float32x4_t v331 = vcvtq_f32_f16(v322);
                      float32x4_t v332 = vcvtq_f32_f16(v324);
                      float32x4_t v333 = vcvtq_f32_f16(v325);
                      *int32x4_t v292 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v326, (float32x4_t)xmmword_1A5F0CB40), (float32x4_t)xmmword_1A5F0CB50, v330), (float32x4_t)xmmword_1A5F0CB60, v328), (float32x4_t)xmmword_1A5F0CB70, v332)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v327, (float32x4_t)xmmword_1A5F0CB40), (float32x4_t)xmmword_1A5F0CB50, v331), (float32x4_t)xmmword_1A5F0CB60, v329),
                                  (float32x4_t)xmmword_1A5F0CB70,
                                  v333));
                      *int32x4_t v291 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v326, (float32x4_t)xmmword_1A5F0CB60), (float32x4_t)xmmword_1A5F0CB70, v330), (float32x4_t)xmmword_1A5F0CB40, v328), (float32x4_t)xmmword_1A5F0CB50, v332)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v327, (float32x4_t)xmmword_1A5F0CB60), (float32x4_t)xmmword_1A5F0CB70, v331), (float32x4_t)xmmword_1A5F0CB40, v329),
                                  (float32x4_t)xmmword_1A5F0CB50,
                                  v333));
                      int8x16_t v126 = (float16x8_t *)((char *)v126 + v285);
                      int16x8_t v286 = (int8x8_t *)((char *)v286 + BytesPerRow);
                      uint64_t v45 = (float32x4_t *)((char *)v45 + v285);
                      BaseAddress = (int16x4_t *)((char *)BaseAddress + BytesPerRow);
                      BOOL v173 = v284++ == v356 - 2;
                    }
                    while (!v173);
                  }
                  unint64_t v334 = v128;
                  FigFloat16ConvertToFloat32();
                  unint64_t v335 = v334 - 2;
                  if (v335)
                  {
                    for (unint64_t i = 0; i < v335; i += 2)
                    {
                      FigFloat16ConvertToFloat32();
                      FigFloat16ConvertToFloat32();
                      int8x16_t v127 = (int16x4_t *)((char *)v127 + 4);
                      FigFloat16ConvertToFloat32();
                      v126->i16[0] = FigFloat32ConvertToFloat16();
                      v126->i16[1] = FigFloat32ConvertToFloat16();
                      v126->i16[2] = FigFloat32ConvertToFloat16();
                      v126->i16[3] = FigFloat32ConvertToFloat16();
                      int8x16_t v126 = (float16x8_t *)((char *)v126 + 8);
                    }
                  }
                  FigFloat16ConvertToFloat32();
                  FigFloat16ConvertToFloat32();
                  v126->i16[0] = FigFloat32ConvertToFloat16();
                  v126->i16[1] = FigFloat32ConvertToFloat16();
                  v126->i16[2] = FigFloat32ConvertToFloat16();
                  v126->i16[3] = FigFloat32ConvertToFloat16();
LABEL_158:
                  int v11 = v355;
                  size_t v48 = v357;
                }
                break;
              case 2:
                if (v19 == 2)
                {
                  size_t v48 = v357;
                  if (Height)
                  {
                    for (uint64_t j = 0; j != Height; ++j)
                    {
                      if (Width)
                      {
                        size_t v66 = 0;
                        float32x4_t v67 = (unsigned long long *)v45;
                        uint64_t v68 = (const __int16 *)BaseAddress;
                        do
                        {
                          unsigned long long v69 = (unsigned __int128)vld2q_s16(v68);
                          v68 += 16;
                          *v67++ = v69;
                          v66 += 8;
                        }
                        while (Width > v66);
                      }
                      BaseAddress = (int16x4_t *)((char *)BaseAddress + 2 * BytesPerRow);
                      uint64_t v45 = (float32x4_t *)((char *)v45 + v16);
                    }
                  }
                }
                else
                {
                  size_t v48 = v357;
                  if (Height)
                  {
                    for (uint64_t k = 0; k != Height; ++k)
                    {
                      if (Width)
                      {
                        size_t v85 = 0;
                        long long v86 = (unsigned long long *)v45;
                        uint64_t v87 = (const float *)BaseAddress;
                        do
                        {
                          unsigned long long v88 = (unsigned __int128)vld2q_f32(v87);
                          v87 += 8;
                          *v86++ = v88;
                          v85 += 4;
                        }
                        while (Width > v85);
                      }
                      BaseAddress = (int16x4_t *)((char *)BaseAddress + 2 * BytesPerRow);
                      uint64_t v45 = (float32x4_t *)((char *)v45 + v16);
                    }
                  }
                }
                break;
              case 4:
                if (v19 == 2)
                {
                  size_t v48 = v357;
                  if (Height)
                  {
                    for (uint64_t m = 0; m != Height; ++m)
                    {
                      if (Width)
                      {
                        size_t v71 = 0;
                        float32x4_t v72 = (unsigned long long *)v45;
                        float32x4_t v73 = (const __int16 *)BaseAddress;
                        do
                        {
                          unsigned long long v74 = (unsigned __int128)vld4q_s16(v73);
                          v73 += 32;
                          *v72++ = v74;
                          v71 += 8;
                        }
                        while (Width > v71);
                      }
                      BaseAddress = (int16x4_t *)((char *)BaseAddress + 4 * BytesPerRow);
                      uint64_t v45 = (float32x4_t *)((char *)v45 + v16);
                    }
                  }
                }
                else
                {
                  size_t v48 = v357;
                  if (Height)
                  {
                    for (uint64_t n = 0; n != Height; ++n)
                    {
                      if (Width)
                      {
                        size_t v90 = 0;
                        char v91 = (unsigned long long *)v45;
                        BOOL v92 = (const float *)BaseAddress;
                        do
                        {
                          unsigned long long v93 = (unsigned __int128)vld2q_f32(v92);
                          *v91++ = v93;
                          v90 += 4;
                          v92 += 16;
                        }
                        while (Width > v90);
                      }
                      BaseAddress = (int16x4_t *)((char *)BaseAddress + 4 * BytesPerRow);
                      uint64_t v45 = (float32x4_t *)((char *)v45 + v16);
                    }
                  }
                }
                break;
              default:
                int v51 = (int)(a3 + (double)v358 + -1.0);
                int v52 = (int)(a4 + (double)v356 + -1.0);
                if (v19 == 2)
                {
                  size_t v48 = v357;
                  if (Height)
                  {
                    uint64_t v53 = 0;
                    float v54 = a4;
                    do
                    {
                      if ((int)(float)(v54 + 0.5) >= v52) {
                        int v55 = (int)(a4 + (double)v356 + -1.0);
                      }
                      else {
                        int v55 = (int)(float)(v54 + 0.5);
                      }
                      if (Width)
                      {
                        uint64_t v56 = 0;
                        float32x4_t v57 = (char *)BaseAddress + BytesPerRow * v55;
                        float v58 = a3;
                        do
                        {
                          int v59 = (int)(float)(v58 + 0.5);
                          if (v59 >= v51) {
                            int v59 = (int)(a3 + (double)v358 + -1.0);
                          }
                          v45->i16[v56++] = *(_WORD *)&v57[2 * v59];
                          float v58 = v22 + v58;
                        }
                        while (Width != v56);
                      }
                      ++v53;
                      uint64_t v45 = (float32x4_t *)((char *)v45 + v16);
                      float v54 = v23 + v54;
                    }
                    while (v53 != Height);
                  }
                }
                else
                {
                  size_t v48 = v357;
                  if (Height)
                  {
                    uint64_t v76 = 0;
                    float v77 = a4;
                    do
                    {
                      if ((int)(float)(v77 + 0.5) >= v52) {
                        int v78 = (int)(a4 + (double)v356 + -1.0);
                      }
                      else {
                        int v78 = (int)(float)(v77 + 0.5);
                      }
                      if (Width)
                      {
                        uint64_t v79 = 0;
                        long long v80 = (char *)BaseAddress + BytesPerRow * v78;
                        float v81 = a3;
                        do
                        {
                          int v82 = (int)(float)(v81 + 0.5);
                          if (v82 >= v51) {
                            int v82 = (int)(a3 + (double)v358 + -1.0);
                          }
                          v45->i32[v79++] = *(_DWORD *)&v80[4 * v82];
                          float v81 = v22 + v81;
                        }
                        while (Width != v79);
                      }
                      ++v76;
                      uint64_t v45 = (float32x4_t *)((char *)v45 + v16);
                      float v77 = v23 + v77;
                    }
                    while (v76 != Height);
                  }
                }
                break;
            }
            CVPixelBufferUnlockBaseAddress(v11, 1uLL);
            CVPixelBufferUnlockBaseAddress(v48, 0);
            return 0;
          }
        }
        return v353;
      }
      if (v22 == 2.0)
      {
        uint64_t v24 = a2;
        unint64_t v25 = 0x20u / v19;
        uint64_t v26 = v25 >> 1;
        int v27 = 2;
LABEL_6:
        uint64_t v28 = 1;
LABEL_11:
        if ((v25 - 1) & v20 | v28 & v21 || ((v26 - 1) & Width) != 0) {
          int v27 = 0;
        }
        if (CVPixelBufferGetWidth(v11) == v20 && CVPixelBufferGetHeight(v11) == v21) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      if (v22 == 4.0)
      {
        uint64_t v24 = a2;
        unint64_t v25 = 0x40u / v19;
        uint64_t v26 = v25 >> 2;
        int v27 = 4;
      }
      else
      {
        uint64_t v24 = a2;
        if (v22 == 0.5)
        {
          unint64_t v25 = 8u / v19;
          uint64_t v26 = 2 * v25;
          int v27 = -2;
          goto LABEL_6;
        }
        if (v22 != 0.25)
        {
          int v27 = 0;
          uint64_t v28 = 0;
          unint64_t v25 = 1;
          uint64_t v26 = 1;
          goto LABEL_11;
        }
        unint64_t v25 = 8u / v19;
        uint64_t v26 = 4 * v25;
        int v27 = -4;
      }
      uint64_t v28 = 3;
      goto LABEL_11;
    }
  }
  return FigSignalErrorAt();
}

BOOL FigDepthFormatIs32Bit(int a1)
{
  return a1 == 1717855600 || a1 == 1717856627;
}

uint64_t FigDepthFormatIsFixed16(int a1)
{
  BOOL v1 = a1 == 825437747 || a1 == 1932996149;
  return a1 == 825306677 || v1;
}

uint64_t FigDepthDataGetCurrentMajorVersion()
{
  return 1;
}

CVPixelBufferRef FigDepthConvertToRGBA(__CVBuffer *a1, int a2, int a3)
{
  CVPixelBufferRef v60 = a1;
  CVPixelBufferRef pixelBuffer = 0;
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  if (!a1) {
    goto LABEL_56;
  }
  uint64_t v8 = Height;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  int v10 = PixelFormatType;
  if (PixelFormatType <= 1717856626)
  {
    if (PixelFormatType == 825306677 || PixelFormatType == 825437747) {
      goto LABEL_12;
    }
    int v11 = 1717855600;
  }
  else if (PixelFormatType > 1751411058)
  {
    if (PixelFormatType == 1751411059) {
      goto LABEL_12;
    }
    int v11 = 1932996149;
  }
  else
  {
    if (PixelFormatType == 1717856627) {
      goto LABEL_12;
    }
    int v11 = 1751410032;
  }
  if (PixelFormatType != v11)
  {
LABEL_56:
    FigDebugAssert3();
    return pixelBuffer;
  }
LABEL_12:
  if (BWCreateIOSurfaceBackedCVPixelBuffer(Width, v8, 32, &pixelBuffer, @"DepthConverter RGBA")) {
    goto LABEL_56;
  }
  int v12 = 0;
  if (v10 <= 1751410031)
  {
    if (v10 == 825306677) {
      goto LABEL_20;
    }
    int v13 = 825437747;
  }
  else
  {
    if (v10 == 1751410032 || v10 == 1932996149) {
      goto LABEL_20;
    }
    int v13 = 1751411059;
  }
  if (v10 != v13) {
    goto LABEL_22;
  }
LABEL_20:
  if (BWCreateIOSurfaceBackedCVPixelBuffer(Width, v8, 1278226534, &v60, @"DepthConverter Float")) {
    goto LABEL_56;
  }
  int v12 = 1;
LABEL_22:
  if (v10 <= 1751410031)
  {
    if (v10 == 825306677) {
      goto LABEL_29;
    }
    int v14 = 825437747;
  }
  else
  {
    if (v10 == 1751410032 || v10 == 1751411059)
    {
      if (!figDepthConvertBufferFloat16ToFloat32(a1, v60)) {
        goto LABEL_45;
      }
LABEL_71:
      FigDebugAssert3();
      if (!v12) {
        return pixelBuffer;
      }
      goto LABEL_64;
    }
    int v14 = 1932996149;
  }
  if (v10 != v14) {
    goto LABEL_45;
  }
LABEL_29:
  char v15 = v60;
  if (!v60
    || (int v16 = CVPixelBufferGetWidth(a1), v16 != CVPixelBufferGetWidth(v15))
    || (int v58 = a3, v17 = CVPixelBufferGetHeight(a1), v17 != CVPixelBufferGetHeight(v15)))
  {
    FigDebugAssert3();
    goto LABEL_71;
  }
  int v57 = v12;
  char FixedPointFractionalBits = CVPixelBufferGetFixedPointFractionalBits();
  if (a2) {
    char v19 = FixedPointFractionalBits + 1;
  }
  else {
    char v19 = FixedPointFractionalBits;
  }
  char v55 = v19;
  char v56 = a2 != 0;
  objc_msgSend((id)objc_msgSend((id)CVPixelBufferGetAttributes(), "objectForKeyedSubscript:", *MEMORY[0x1E4F24D00]), "floatValue");
  float v21 = v20;
  CVPixelBufferLockBaseAddress(v15, 0);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddress = (unsigned __int16 *)CVPixelBufferGetBaseAddress(a1);
  float v23 = (float *)CVPixelBufferGetBaseAddress(v15);
  int BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  int v25 = CVPixelBufferGetBytesPerRow(v15);
  if (v17)
  {
    for (int i = 0; i != v17; ++i)
    {
      if (v16)
      {
        uint64_t v27 = 0;
        do
        {
          unsigned int v28 = BaseAddress[v27];
          float v29 = (float)((float)-v21 / (float)(1 << v56)) + (float)((float)(1.0 / (float)(1 << v55)) * (float)v28);
          if (v28 == 0x1FFF) {
            float v29 = NAN;
          }
          v23[v27++] = v29;
        }
        while (v16 != v27);
      }
      BaseAddress = (unsigned __int16 *)((char *)BaseAddress + BytesPerRow);
      float v23 = (float *)((char *)v23 + v25);
    }
  }
  CVPixelBufferUnlockBaseAddress(v15, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  int v12 = v57;
  a3 = v58;
LABEL_45:
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  CVPixelBufferLockBaseAddress(v60, 1uLL);
  uint64_t v30 = CVPixelBufferGetBaseAddress(pixelBuffer);
  float32x4_t v31 = (float *)CVPixelBufferGetBaseAddress(v60);
  int v32 = CVPixelBufferGetBytesPerRow(pixelBuffer);
  int v33 = CVPixelBufferGetBytesPerRow(v60);
  int v34 = v33;
  if (a3)
  {
    int v59 = (void **)ColorsWheelContext_create(80, 30, 20, 20, 30, 0, 0, 1, 0.0);
    ColorsWheelContext_drawMatrix_f32((uint64_t)v59, Width, v8, v31, v34, 4, (uint64_t)v30, v32, v35, v36, v37, v38, 4);
    ColorsWheelContext_destroy(&v59);
    goto LABEL_63;
  }
  uint64_t v39 = (v8 * Width);
  if (!v39)
  {
    float v41 = 1.1755e-38;
    float v40 = 3.4028e38;
    if (!v8) {
      goto LABEL_63;
    }
    goto LABEL_58;
  }
  float v40 = 3.4028e38;
  float v41 = 1.1755e-38;
  float32x4_t v42 = v31;
  do
  {
    float v43 = *v42++;
    float v44 = v43;
    if (v43 > v41) {
      float v41 = v44;
    }
    if (v44 < v40) {
      float v40 = v44;
    }
    --v39;
  }
  while (v39);
  if (v8)
  {
LABEL_58:
    int v45 = 0;
    int v46 = 0;
    float v47 = v41 - v40;
    int v48 = 3;
    do
    {
      if (Width)
      {
        unint64_t v49 = (float *)((char *)v31 + (v45 & 0xFFFFFFFC));
        uint64_t v50 = Width;
        unsigned int v51 = v48;
        do
        {
          float v52 = *v49++;
          int v53 = (int)(float)((float)((float)(v52 - v40) * 255.0) / v47);
          v30[v51 - 3] = v53;
          v30[v51 - 2] = v53;
          v30[v51 - 1] = v53;
          v30[v51] = -1;
          v51 += 4;
          --v50;
        }
        while (v50);
      }
      ++v46;
      v48 += v32;
      v45 += v33;
    }
    while (v46 != v8);
  }
LABEL_63:
  CVPixelBufferUnlockBaseAddress(v60, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  if (v12) {
LABEL_64:
  }
    CFRelease(v60);
  return pixelBuffer;
}

CVPixelBufferRef FigCreateRGBAPixelBufferFromSegmentationMask(__CVBuffer *a1)
{
  CFTypeRef cf = 0;
  CVPixelBufferRef pixelBuffer = 0;
  if (a1)
  {
    BOOL v1 = a1;
    size_t Width = CVPixelBufferGetWidth(a1);
    size_t Height = CVPixelBufferGetHeight(v1);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v1);
    if (PixelFormatType - 1278226488 <= 0x30
      && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0)
    {
      OSType v5 = PixelFormatType;
      if (!BWCreateIOSurfaceBackedCVPixelBuffer(Width, Height, 32, &pixelBuffer, @"SegmentationMask RGBA"))
      {
        if (v5 != 1278226536)
        {
LABEL_9:
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(v1, 1uLL);
          size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v1);
          BaseAddress = (char *)CVPixelBufferGetBaseAddress(v1);
          size_t v8 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          size_t v9 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          if (Height << 32)
          {
            uint64_t v11 = 0;
            uint64_t v12 = (int)Height;
            uint64_t v13 = (int)Width;
            if ((unint64_t)(int)Width <= 1) {
              uint64_t v13 = 1;
            }
            if ((unint64_t)(int)Height <= 1) {
              uint64_t v12 = 1;
            }
            do
            {
              if (Width << 32)
              {
                uint64_t v14 = 0;
                char v15 = &BaseAddress[v11 * BytesPerRow];
                do
                {
                  uint64_t v16 = v14 << (2 * (v5 != 1278226488));
                  if (v5 == 1278226488) {
                    LOWORD(v16) = v15[v16];
                  }
                  else {
                    LODWORD(v16) = (int)(float)(*(float *)&v15[v16] * 255.0);
                  }
                  int16x4_t v17 = (int16x4_t)0xFF00FF00FF00FFLL;
                  v17.i16[0] = v16;
                  *(int16x4_t *)v10.i8 = vzip1_s16(v17, v17);
                  v10.i16[2] = v16;
                  *(_DWORD *)&v9[4 * v14++] = vmovn_s16(v10).u32[0];
                }
                while (v13 != v14);
              }
              ++v11;
              v9 += v8;
            }
            while (v11 != v12);
          }
          CVPixelBufferUnlockBaseAddress(v1, 1uLL);
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
          if (cf) {
            CFRelease(cf);
          }
          return pixelBuffer;
        }
        if (!BWCreateIOSurfaceBackedCVPixelBuffer(Width, Height, 1278226534, (CVPixelBufferRef *)&cf, @"SegmentationMask Float")&& !figDepthConvertBufferFloat16ToFloat32(v1, (__CVBuffer *)cf))
        {
          BOOL v1 = (__CVBuffer *)cf;
          goto LABEL_9;
        }
      }
    }
    FigDebugAssert3();
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    FigDebugAssert3();
  }
  if (pixelBuffer) {
    CFRelease(pixelBuffer);
  }
  return 0;
}

CVPixelBufferRef FigDepthCreateRGBAPixelBufferFromInfraredPixelBuffer(__CVBuffer *a1)
{
  CVPixelBufferRef pixelBuffer = 0;
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  if (a1
    && (uint64_t v4 = Height, CVPixelBufferGetPixelFormatType(a1) == 1278226742)
    && !BWCreateIOSurfaceBackedCVPixelBuffer(Width, v4, 32, &pixelBuffer, @"DepthFromIR RGBA"))
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
    OSType v6 = (unsigned __int16 *)CVPixelBufferGetBaseAddress(a1);
    int BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
    unsigned int v8 = CVPixelBufferGetBytesPerRow(a1);
    if (v4)
    {
      int v9 = 0;
      int v10 = 0;
      int v11 = 3;
      do
      {
        uint64_t v12 = Width;
        int v13 = v9;
        unsigned int v14 = v11;
        if (Width)
        {
          do
          {
            unsigned int v15 = v6[v13];
            if (v15 >= 0x4000) {
              char v16 = -1;
            }
            else {
              char v16 = v15 >> 6;
            }
            BaseAddress[v14 - 3] = v16;
            BaseAddress[v14 - 2] = v16;
            BaseAddress[v14 - 1] = v16;
            BaseAddress[v14] = -1;
            v14 += 4;
            ++v13;
            --v12;
          }
          while (v12);
        }
        ++v10;
        v11 += BytesPerRow;
        v9 += v8 >> 1;
      }
      while (v10 != v4);
    }
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
  else
  {
    FigDebugAssert3();
  }
  return pixelBuffer;
}

uint64_t FigDepthComputeNormalizedFocalLength(void *a1, float *a2)
{
  uint64_t v4 = (void *)[a1 objectForKeyedSubscript:*MEMORY[0x1E4F55878]];
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F14998] + 16);
  v11[0] = *MEMORY[0x1E4F14998];
  v11[1] = v5;
  void v11[2] = *(_OWORD *)(MEMORY[0x1E4F14998] + 32);
  if (!v4) {
    goto LABEL_4;
  }
  OSType v6 = v4;
  if ([v4 length] == 48)
  {
    [v6 getBytes:v11 length:48];
LABEL_4:
    CFDictionaryRef v7 = (const __CFDictionary *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E4F55880], *MEMORY[0x1E4F1DB30], *(void *)(MEMORY[0x1E4F1DB30] + 8));
    if (v7 && CGSizeMakeWithDictionaryRepresentation(v7, &v10))
    {
      float v8 = 0.0;
      if (v10.width > 0.0) {
        float v8 = *(float *)v11 / v10.width;
      }
      if (a2) {
        *a2 = v8;
      }
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigDepthBlurEffectRenderingParametersV1FromCFData(void *a1, _OWORD *a2)
{
  if (a1
    && a2
    && (unint64_t)[a1 length] > 0x2F
    && (v7 = 0u, v8 = 0u, long long v6 = 0u, [a1 getBytes:&v6 length:48], v6 == 1145980242)
    && *(void *)((char *)&v6 + 4) == 0x3000000001)
  {
    uint64_t result = 0;
    long long v5 = v7;
    *a2 = v6;
    a2[1] = v5;
    a2[2] = v8;
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
  return result;
}

uint64_t FigDepthBlurEffectRenderingParametersV2FromCFData(void *a1, void *a2)
{
  if (a1
    && a2
    && (unint64_t)[a1 length] > 0x13F
    && (memset(__src, 0, sizeof(__src)),
        [a1 getBytes:__src length:320],
        LODWORD(__src[0]) == 1145980242)
    && *(void *)((char *)__src + 4) == 0x14000000002)
  {
    memcpy(a2, __src, 0x140uLL);
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
}

uint64_t FigDepthBlurEffectRenderingParametersV3FromCFData(void *a1, void *a2)
{
  if (a1
    && a2
    && (unint64_t)[a1 length] > 0x1D7
    && (memset(__src, 0, 472), [a1 getBytes:__src length:472], LODWORD(__src[0]) == 1145980242)
    && *(void *)((char *)__src + 4) == 0x1D800000003)
  {
    memcpy(a2, __src, 0x1D8uLL);
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
}

uint64_t FigDepthBlurEffectRenderingParametersV4FromCFData(void *a1, void *a2)
{
  if (!a1 || !a2 || (unint64_t)[a1 length] <= 0xF || (objc_msgSend(a1, "length") & 7) != 0)
  {
    FigDebugAssert3();
    uint64_t v4 = 0;
    goto LABEL_18;
  }
  uint64_t v4 = malloc_type_malloc([a1 length], 0xA867F5B7uLL);
  if (!v4)
  {
    FigDebugAssert3();
    uint64_t v9 = 4294954510;
    goto LABEL_19;
  }
  objc_msgSend(a1, "getBytes:length:", v4, objc_msgSend(a1, "length"));
  if (*v4 != 1145980242)
  {
LABEL_17:
    FigDebugAssert3();
LABEL_18:
    uint64_t v9 = 4294954516;
LABEL_19:
    free(v4);
    return v9;
  }
  if ((v4[1] - 8) <= 0xFFFFFFFB)
  {
    FigDebugAssert3();
    goto LABEL_17;
  }
  uint64_t v5 = v4[2];
  if ([a1 length] != v5) {
    goto LABEL_17;
  }
  unint64_t v6 = v4[2] - 16;
  if (v6 >= 8)
  {
    unint64_t v7 = v6 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    uint64_t v8 = 4;
    while (SLOWORD(v4[v8]) > 0)
    {
      v8 += 2;
      if (!--v7) {
        goto LABEL_15;
      }
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v9 = 0;
  *a2 = v4;
  return v9;
}

uint64_t FigDepthBlurEffectRenderingVersion4_GetParameter(_DWORD *a1, unsigned __int16 a2, int a3, _DWORD *a4)
{
  if (!a1) {
    goto LABEL_26;
  }
  if (*a1 != 1145980242) {
    goto LABEL_26;
  }
  if ((a1[1] - 8) <= 0xFFFFFFFB) {
    goto LABEL_26;
  }
  uint64_t v4 = a1[2];
  if (v4 <= 0x10) {
    goto LABEL_26;
  }
  unint64_t v5 = (unint64_t)(v4 + 0x7FFFFFFF0) >> 3;
  signed int v6 = v5 >> 1;
  int v7 = LOWORD(a1[2 * (v5 >> 1) + 4]);
  if (v7 != a2 && v5 >= 2)
  {
    int v9 = 0;
    int v10 = v5 - 1;
    do
    {
      if ((__int16)v7 <= (__int16)a2)
      {
        if ((__int16)v7 < (__int16)a2)
        {
          int v9 = v6 + 1;
          int v11 = v10 + v6 + 1;
          if (v11 + 1 >= 0) {
            int v12 = v11 + 1;
          }
          else {
            int v12 = v11 + 2;
          }
          signed int v6 = v12 >> 1;
          if (SLOWORD(a1[2 * v6 + 4]) <= (__int16)v7) {
            goto LABEL_26;
          }
          int v7 = LOWORD(a1[2 * v6 + 4]);
        }
      }
      else
      {
        if (SLOWORD(a1[2 * ((v6 + v9) / 2) + 4]) >= (__int16)v7) {
          goto LABEL_26;
        }
        int v10 = v6 - 1;
        int v7 = LOWORD(a1[2 * ((v6 + v9) / 2) + 4]);
        signed int v6 = (v6 + v9) / 2;
      }
    }
    while (v7 != a2 && v9 < v10);
  }
  if (v7 != a2)
  {
    FigDebugAssert3();
    return 4294954512;
  }
  if (HIWORD(a1[2 * v6 + 4]) == (unsigned __int16)a3)
  {
    switch(a3)
    {
      case 1:
        uint64_t v13 = 0;
        *a4 = a1[2 * v6 + 5];
        break;
      case 2:
      case 3:
        uint64_t v13 = 0;
        *a4 = a1[2 * v6 + 5];
        break;
      case 4:
        uint64_t v13 = 0;
        *(unsigned char *)a4 = a1[2 * v6 + 5];
        break;
      default:
        goto LABEL_26;
    }
  }
  else
  {
LABEL_26:
    FigDebugAssert3();
    return 4294954516;
  }
  return v13;
}

uint64_t FigDepthBlurEffectRenderingMinimumSimulatedAperture(void *a1, float *a2)
{
  if (!a1) {
    goto LABEL_14;
  }
  if (!a2) {
    goto LABEL_14;
  }
  *a2 = 0.0;
  if ((unint64_t)[a1 length] <= 0xB) {
    goto LABEL_14;
  }
  uint64_t v4 = [a1 bytes];
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = v4;
  if ([a1 length] != *(_DWORD *)(v4 + 8) || *(_DWORD *)v5 != 1145980242) {
    goto LABEL_14;
  }
  int v6 = *(_DWORD *)(v5 + 4);
  if (v6 >= 4) {
    int v6 = 4;
  }
  if (v6 < 0x10000)
  {
    switch(v6)
    {
      case 2:
      case 3:
        float v7 = *(float *)(v5 + 100);
        *a2 = v7;
        if (v7 <= 0.0) {
          goto LABEL_14;
        }
        uint64_t v8 = 0;
        break;
      case 4:
        uint64_t Parameter = FigDepthBlurEffectRenderingVersion4_GetParameter((_DWORD *)v5, 0x259u, 1, a2);
        if (!Parameter) {
          goto LABEL_14;
        }
        uint64_t v8 = Parameter;
        FigDebugAssert3();
        break;
      default:
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    FigDebugAssert3();
    return 4294954516;
  }
  return v8;
}

uint64_t FigDepthBlurEffectRenderingMaximumSimulatedAperture(void *a1, float *a2)
{
  if (a1
    && a2
    && (*a2 = 0.0, (unint64_t)[a1 length] > 0xB)
    && (uint64_t v4 = [a1 bytes]) != 0
    && (uint64_t v5 = v4, [a1 length] == *(_DWORD *)(v4 + 8))
    && *(_DWORD *)v5 == 1145980242)
  {
    int v6 = *(_DWORD *)(v5 + 4);
    if (v6 >= 4) {
      int v6 = 4;
    }
    if (v6 >= 0x10000) {
      int v6 = 1;
    }
    switch(v6)
    {
      case 2:
      case 3:
        float v7 = *(float *)(v5 + 268);
        *a2 = v7;
        if (v7 <= 0.0) {
          goto LABEL_15;
        }
        uint64_t v8 = 0;
        break;
      case 4:
        uint64_t Parameter = FigDepthBlurEffectRenderingVersion4_GetParameter((_DWORD *)v5, 0x25Au, 1, a2);
        if (!Parameter) {
          goto LABEL_15;
        }
        uint64_t v8 = Parameter;
        FigDebugAssert3();
        break;
      default:
        goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
    FigDebugAssert3();
    return 4294954516;
  }
  return v8;
}

void sub_1A5CA2888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *FigCaptureSourceUnderlyingDeviceTypes(int a1)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = &unk_1EFB04010;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 7:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      v3[0] = objc_msgSend(NSNumber, "numberWithInt:");
      uint64_t result = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v3 count:1];
      break;
    case 4:
      uint64_t result = &unk_1EFB04028;
      break;
    case 6:
      uint64_t result = &unk_1EFB04058;
      break;
    case 9:
      uint64_t result = &unk_1EFB04040;
      break;
    case 12:
      uint64_t result = &unk_1EFB04070;
      break;
    case 13:
      uint64_t result = &unk_1EFB04088;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FigCaptureSourceDeviceTypeIsSubsetOfDeviceType(int a1, int a2, int a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v6 = (void *)[MEMORY[0x1E4F1CA80] set];
  float v7 = (void *)[MEMORY[0x1E4F1CA80] set];
  uint64_t v8 = FigCaptureSourceUnderlyingDeviceTypes(a1);
  int v9 = FigCaptureSourceUnderlyingDeviceTypes(a2);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v10 = [v8 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v24;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v24 != v12) {
          objc_enumerationMutation(v8);
        }
        objc_msgSend(v6, "addObject:", BWCaptureDevicePositionAndDeviceTypeToPortType(a3, objc_msgSend(*(id *)(*((void *)&v23 + 1) + 8 * v13++), "intValue")));
      }
      while (v11 != v13);
      uint64_t v11 = [v8 countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v11);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v14 = [v9 countByEnumeratingWithState:&v19 objects:v27 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v20;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v20 != v16) {
          objc_enumerationMutation(v9);
        }
        objc_msgSend(v7, "addObject:", BWCaptureDevicePositionAndDeviceTypeToPortType(a3, objc_msgSend(*(id *)(*((void *)&v19 + 1) + 8 * v17++), "intValue")));
      }
      while (v15 != v17);
      uint64_t v15 = [v9 countByEnumeratingWithState:&v19 objects:v27 count:16];
    }
    while (v15);
  }
  return [v6 isSubsetOfSet:v7];
}

uint64_t FigCaptureSourceGetMediaTypeForUniqueID(void *a1)
{
  if ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_audio:0"]) {
    return 1936684398;
  }
  uint64_t v2 = 1986618469;
  if (([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:0"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:1"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:2"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:3"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:4"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:5"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:6"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:7"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:8"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:9"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_video:99"] & 1) == 0
    && ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.private.built-in_pointcloud:1"] & 1) == 0&& (objc_msgSend(a1, "isEqualToString:", @"com.apple.avfoundation.avcapturedevice.private.built-in_metadata:1") & 1) == 0&& (objc_msgSend(a1, "isEqualToString:", @"com.apple.avfoundation.avcapturedevice.private.built-in_metadata:2") & 1) == 0&& (objc_msgSend(a1, "isEqualToString:", @"com.apple.avfoundation.avcapturedevice.private.built-in_metadata:3") & 1) == 0)
  {
    if ([a1 isEqualToString:@"com.apple.avfoundation.avcapturedevice.built-in_deskview:1"])return 1986618469; {
    else
    }
      return 0;
  }
  return v2;
}

CFStringRef FigCaptureSourceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptureSource %p]", a1);
}

uint64_t __scheduler_job_invoke_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, *(void *)(a1 + 40));
}

uint64_t __scheduler_job_invoke_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, *(void *)(a1 + 40));
}

void FigCaptureSessionServerInvokeContinuityCameraMultitaskingDialogIfNeeded()
{
  if (FigCaptureIsWombatEnabled(0) && BWDeviceIsiPad())
  {
    if (captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_notifyRegisterOnce != -1) {
      dispatch_once(&captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_notifyRegisterOnce, &__block_literal_global_30_0);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &__block_literal_global_88);
  }
}

void captureSessionServer_continuityCameraMultitaskingDisallowed()
{
  v16[3] = *MEMORY[0x1E4F143B8];
  time_t v0 = time(0);
  os_unfair_lock_lock(&captureSessionServer_continuityCameraMultitaskingDisallowed_lock);
  if ((captureSessionServer_continuityCameraMultitaskingDisallowed_inAlert & 1) != 0
    || ((int v1 = sContinuityCameraMultitaskingDialogShownCount, sContinuityCameraPreviousMultitaskingDialogEndedTime)
      ? (BOOL v2 = sContinuityCameraMultitaskingDialogShownCount < 1)
      : (BOOL v2 = 1),
        !v2 ? (BOOL v3 = v0 - sContinuityCameraPreviousMultitaskingDialogEndedTime <= 86399) : (BOOL v3 = 0),
        v3))
  {
    os_unfair_lock_unlock(&captureSessionServer_continuityCameraMultitaskingDisallowed_lock);
  }
  else
  {
    captureSessionServer_continuityCameraMultitaskingDisallowed_inAlert = 1;
    os_unfair_lock_unlock(&captureSessionServer_continuityCameraMultitaskingDisallowed_lock);
    uint64_t v4 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.CMCapture"];
    uint64_t v5 = [v4 localizedStringForKey:@"CONTINUITY_CAMERA_IN_USE_HEADER" value:&stru_1EFA403E0 table:@"Localizable"];
    uint64_t v6 = [v4 localizedStringForKey:@"CONTINUITY_CAMERA_IN_USE_MESSAGE" value:&stru_1EFA403E0 table:@"Localizable"];
    uint64_t v7 = [v4 localizedStringForKey:@"CONTINUITY_CAMERA_IN_USE_OK" value:&stru_1EFA403E0 table:@"Localizable"];
    uint64_t v8 = *MEMORY[0x1E4F1D9A8];
    v15[0] = *MEMORY[0x1E4F1D990];
    v15[1] = v8;
    v16[0] = v5;
    v16[1] = v6;
    void v15[2] = *MEMORY[0x1E4F1D9E0];
    void v16[2] = v7;
    CFDictionaryRef v9 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:3];
    SInt32 error = 0;
    uint64_t v10 = CFUserNotificationCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0.0, 0, &error, v9);
    if (v10)
    {
      uint64_t v11 = v10;
      CFOptionFlags responseFlags = 0;
      CFUserNotificationReceiveResponse(v10, 0.0, &responseFlags);
      CFRelease(v11);
    }
    time_t v12 = time(0);
    CFPreferencesSetAppValue(@"continuity_camera_in_use.previous_time", (CFPropertyListRef)[NSNumber numberWithLong:v12], @"com.apple.cameracapture");
    CFPreferencesSetAppValue(@"continuity_camera_in_use.count", (CFPropertyListRef)[NSNumber numberWithInt:v1 + (v1 >= 0)], @"com.apple.cameracapture");
    os_unfair_lock_lock(&captureSessionServer_continuityCameraMultitaskingDisallowed_lock);
    sContinuityCameraPreviousMultitaskingDialogEndedTime = v12;
    sContinuityCameraMultitaskingDialogShownCFIndex Count = v1 + (v1 >= 0);
    captureSessionServer_continuityCameraMultitaskingDisallowed_inAlert = 0;
    os_unfair_lock_unlock(&captureSessionServer_continuityCameraMultitaskingDisallowed_lock);
  }
}

uint64_t FigCaptureSessionServerStart()
{
  v6[16] = *MEMORY[0x1E4F143B8];
  mach_absolute_time();
  v5[0] = 1;
  v5[1] = captureSessionServer_handleReplyMessage;
  void v5[2] = captureSessionServer_handleNoReplyMessage;
  memset(&v5[3], 0, 24);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  sPrewarmingResourcesLocuint64_t k = 0;
  sPrewarmingSessionsByBundleID = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  sPrewarmingSessionCountByBundleID = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "removeItemAtURL:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:isDirectory:", NSTemporaryDirectory(), 1), "URLByAppendingPathComponent:isDirectory:", 0x1EFA57920, 1), 0);
  +[FigCaptureLockScreenPrewarmingMonitor start];
  +[FigCaptureClientApplicationStateMonitor startPrewarmingMonitorWithHandler:&__block_literal_global_13];
  sWombatEnabledPIDArradouble y = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  sWombatInUsePIDArradouble y = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  sWombatStateLocuint64_t k = FigSimpleMutexCreate();
  if (FigCaptureAudiomxdSupportEnabled())
  {
    v6[0] = 0;
    time_t v0 = (void *)[MEMORY[0x1E4F74F68] sharedInstance];
    [v0 setAttribute:MEMORY[0x1E4F1CC28] forKey:*MEMORY[0x1E4F74F18] error:v6];
  }
  else
  {
    sMXSystemController = [objc_alloc(MEMORY[0x1E4F74F70]) initWithPID:getpid()];
    [(id)sMXSystemController setAttributeForKey:*MEMORY[0x1E4F76A40] andValue:MEMORY[0x1E4F1CC28]];
  }
  CFPreferencesSetValue(@"ContinuityCaptureInUse", (CFPropertyListRef)*MEMORY[0x1E4F1CFC8], @"com.apple.cameracapture.volatile", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  +[FigCaptureClientApplicationStateMonitor startContinuityCaptureTerminationMonitorWithHandler:&__block_literal_global_19_0];
  +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor];
  +[FigCaptureDisplayLayoutMonitor sharedDisplayLayoutMonitor];
  if (MGGetBoolAnswer()) {
    +[FigCaptureDisplayLayoutMonitor sharedExternalDisplayLayoutMonitor];
  }
  +[FigCaptureDisplayLayoutMonitor sharedContinuityDisplayLayoutMonitor];
  +[FigCaptureDeviceLockStateMonitor sharedDeviceLockStateMonitor];
  BWGetDisplaySupportsPerseus();
  int v1 = (const char *)*MEMORY[0x1E4F55F80];
  global_queue = dispatch_get_global_queue(0, 0);
  notify_register_dispatch(v1, (int *)&sGPUErrorNotificationToken, global_queue, &__block_literal_global_27_0);
  FigCaptureStartPreferencesOSStateHandlers();
  if (dword_1EB4C53B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.capturesession", (uint64_t)v5, 0);
}

uint64_t __FigCaptureSessionServerStart_block_invoke_2(uint64_t a1, uint64_t a2)
{
  captureSessionServer_setWombatEnabledState(0, a2);
  return captureSessionServer_setWombatInUseState(0, a2);
}

uint64_t captureSessionServer_setWombatEnabledState(uint64_t a1, uint64_t a2)
{
  v13[16] = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock((pthread_mutex_t *)sWombatStateLock);
  if (dword_1EB4C53B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v5 = objc_msgSend((id)sWombatEnabledPIDArray, "containsObject:", objc_msgSend(NSNumber, "numberWithInt:", a2, v11, v12));
  if (!a1)
  {
    if (!v5) {
      return pthread_mutex_unlock((pthread_mutex_t *)sWombatStateLock);
    }
    objc_msgSend((id)sWombatEnabledPIDArray, "removeObject:", objc_msgSend(NSNumber, "numberWithInt:", a2));
    if ([(id)sWombatEnabledPIDArray count]) {
      return pthread_mutex_unlock((pthread_mutex_t *)sWombatStateLock);
    }
    goto LABEL_13;
  }
  if (v5)
  {
    BOOL v6 = 0;
  }
  else
  {
    BOOL v6 = [(id)sWombatEnabledPIDArray count] == 0;
    objc_msgSend((id)sWombatEnabledPIDArray, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", a2));
  }
  if (captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_notifyRegisterOnce != -1) {
    dispatch_once(&captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_notifyRegisterOnce, &__block_literal_global_30_0);
  }
  if (v6)
  {
LABEL_13:
    if (dword_1EB4C53B0)
    {
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (FigCaptureAudiomxdSupportEnabled())
    {
      v13[0] = 0;
      uint64_t v8 = (void *)[MEMORY[0x1E4F74F68] sharedInstance];
      uint64_t v9 = [NSNumber numberWithBool:a1];
      [v8 setAttribute:v9 forKey:*MEMORY[0x1E4F74F18] error:v13];
    }
    else
    {
      objc_msgSend((id)sMXSystemController, "setAttributeForKey:andValue:", *MEMORY[0x1E4F76A40], objc_msgSend(NSNumber, "numberWithBool:", a1));
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sWombatStateLock);
}

uint64_t captureSessionServer_setWombatInUseState(int a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)sWombatStateLock);
  int v4 = objc_msgSend((id)sWombatInUsePIDArray, "containsObject:", objc_msgSend(NSNumber, "numberWithInt:", a2));
  if (a1)
  {
    if ((v4 & 1) == 0)
    {
      if (![(id)sWombatInUsePIDArray count]) {
        CFPreferencesSetValue(@"ContinuityCaptureInUse", (CFPropertyListRef)*MEMORY[0x1E4F1CFD0], @"com.apple.cameracapture.volatile", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
      }
      objc_msgSend((id)sWombatInUsePIDArray, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", a2));
    }
  }
  else if (v4)
  {
    objc_msgSend((id)sWombatInUsePIDArray, "removeObject:", objc_msgSend(NSNumber, "numberWithInt:", a2));
    if (![(id)sWombatInUsePIDArray count]) {
      CFPreferencesSetValue(@"ContinuityCaptureInUse", (CFPropertyListRef)*MEMORY[0x1E4F1CFC8], @"com.apple.cameracapture.volatile", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    }
  }
  int v5 = (pthread_mutex_t *)sWombatStateLock;
  return pthread_mutex_unlock(v5);
}

void __FigCaptureSessionServerStart_block_invoke_3()
{
  if (FigDebugIsInternalBuild())
  {
    CFStringRef v0 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
    CFStringRef v1 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
    CFPropertyListRef v2 = (id)CFPreferencesCopyValue(@"LastShownGPUErrorTTRPromptDate", @"com.apple.cameracapture.volatile", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    BOOL v3 = (const void *)[MEMORY[0x1E4F1C9C8] date];
    if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9A8], "currentCalendar"), "isDate:inSameDayAsDate:", v2, v3) & 1) == 0)
    {
      int v4 = (id)CFPreferencesCopyValue(@"LastShownGPUErrorTTRPromptBuildVersion", @"com.apple.cameracapture.volatile", v0, v1);
      id v5 = (id)MGCopyAnswer();
      if (([v4 isEqualToString:v5] & 1) == 0)
      {
        FigCapturePromptOpenTapToRadar(@"Photo processing error. Please file a radar.", @"GPU error during processing", @"GPU error during processing", 2, 2, 6, 0.0);
        CFPreferencesSetValue(@"LastShownGPUErrorTTRPromptDate", v3, @"com.apple.cameracapture.volatile", v0, v1);
        CFPreferencesSetValue(@"LastShownGPUErrorTTRPromptBuildVersion", v5, @"com.apple.cameracapture.volatile", v0, v1);
      }
    }
  }
}

uint64_t __captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_block_invoke()
{
  uint64_t result = BWDeviceIsiPad();
  if (result)
  {
    sContinuityCameraPreviousMultitaskingDialogEndedTime = CFPreferencesGetAppIntegerValue(@"continuity_camera_in_use.previous_time", @"com.apple.cameracapture", 0);
    sContinuityCameraMultitaskingDialogShownCFIndex Count = CFPreferencesGetAppIntegerValue(@"continuity_camera_in_use.count", @"com.apple.cameracapture", 0);
    global_queue = dispatch_get_global_queue(0, 0);
    uint64_t result = notify_register_dispatch("com.apple.MediaExperience.DisallowedActivationDueToContinuityCapture", &gFigXPCServerCaptureSession_block_invoke_registeredToken, global_queue, &__block_literal_global_33);
    if (!result)
    {
      uint64_t state64 = 0;
      return notify_get_state(gFigXPCServerCaptureSession_block_invoke_registeredToken, &state64);
    }
  }
  return result;
}

void __captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_block_invoke_2(int a1, int token)
{
  uint64_t state64 = 0;
  if (gFigXPCServerCaptureSession_block_invoke_registeredToken == token && !notify_get_state(token, &state64)) {
    captureSessionServer_continuityCameraMultitaskingDisallowed();
  }
}

void captureSessionServer_releaseServerStorage(void *a1)
{
  v22[22] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFPropertyListRef v2 = *(const void **)a1;
    if (v2) {
      CFRelease(v2);
    }
    BOOL v3 = (const void *)*((void *)a1 + 1);
    if (v3) {
      CFRelease(v3);
    }
    int v4 = (const void *)*((void *)a1 + 2);
    if (v4) {
      CFRelease(v4);
    }
    id v5 = (const void *)*((void *)a1 + 3);
    if (v5) {
      CFRelease(v5);
    }

    uint64_t v6 = *((void *)a1 + 5);
    if (v6)
    {
      v22[0] = 0;
      if (!FigCaptureSessionSupportsLaunchPrewarmingBundleID(v6, v22) || !v22[0]) {
        goto LABEL_26;
      }
      os_log_type_t v21 = OS_LOG_TYPE_INFO;
      int v7 = FigCaptureSessionDetachFromClient(*((const void **)a1 + 5), &v21);
      os_unfair_lock_lock((os_unfair_lock_t)&sPrewarmingResourcesLock);
      int v8 = objc_msgSend((id)objc_msgSend((id)sPrewarmingSessionCountByBundleID, "objectForKeyedSubscript:", v22[0]), "intValue");
      if (v7) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = v8 == 1;
      }
      BOOL v10 = !v9 || v21 == OS_LOG_TYPE_DEFAULT;
      int v11 = v10;
      if (!v10)
      {
        [(id)sPrewarmingSessionsByBundleID setObject:*((void *)a1 + 5) forKeyedSubscript:v22[0]];
        if (dword_1EB4C53B0)
        {
          HIBYTE(v20) = 0;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      uint64_t v13 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend((id)objc_msgSend((id)sPrewarmingSessionCountByBundleID, "objectForKeyedSubscript:", v22[0], v19, v20), "intValue")- 1);
      [(id)sPrewarmingSessionCountByBundleID setObject:v13 forKeyedSubscript:v22[0]];
      os_unfair_lock_unlock((os_unfair_lock_t)&sPrewarmingResourcesLock);
      if (v11)
      {
LABEL_26:
        if (dword_1EB4C53B0)
        {
          os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
          uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v14, v21);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v15 = *((void *)a1 + 5);
        if (v15)
        {
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = *(void (**)(uint64_t))(v17 + 24);
          if (v18) {
            v18(v15);
          }
        }
      }
      CFRelease(*((CFTypeRef *)a1 + 5));
    }
    free(a1);
  }
}

uint64_t captureSessionServer_handleSessionFileSinkStartRecordingMessage(int a1, void *a2)
{
  uint64_t v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionFileSinkStartRecording);
}

uint64_t captureSessionServer_handleSessionStillImageSinkCaptureImageMessage(int a1, void *a2)
{
  uint64_t v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionStillImageSinkCaptureImage);
}

uint64_t captureSessionServer_handleSessionStillImageSinkPrepareToCaptureBracketMessage(int a1, void *a2)
{
  uint64_t v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionStillImageSinkPrepareToCaptureBracket);
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkCaptureImageMessage(int a1, void *a2)
{
  uint64_t v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionIrisStillImageSinkCaptureImage);
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkPrepareToCaptureMessage(int a1, void *a2)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  int v11 = 0;
  uint64_t v3 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v11, &cf, 0);
  uint64_t v4 = v11;
  if (v11)
  {
    id v5 = [[FigCaptureIrisPreparedSettings alloc] initWithXPCEncoding:xpc_dictionary_get_value(a2, (const char *)*MEMORY[0x1E4F20290])];
    CFTypeRef v6 = cf;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    if (*(void *)(v8 + 96))
    {
      (*(void (**)(const void *, CFTypeRef, FigCaptureIrisPreparedSettings *))(v8 + 104))(v4, v6, v5);
    }
    else
    {
      uint64_t v12 = @"ErrorStatus";
      v13[0] = &unk_1EFB00FE0;
      [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:&v12 count:1];
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
  }
  else
  {
    id v5 = 0;
  }

  if (cf) {
    CFRelease(cf);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkBeginMomentCaptureMessage(int a1, void *a2)
{
  uint64_t v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionIrisStillImageSinkBeginMomentCapture);
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkCommitMomentCaptureToStillImageCaptureMessage(int a1, void *a2)
{
  uint64_t v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionIrisStillImageSinkCommitMomentCaptureToStillImageCapture);
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkCommitMomentCaptureToMovieRecordingMessage(int a1, void *a2)
{
  uint64_t v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionIrisStillImageSinkCommitMomentCaptureToMovieRecording);
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkCancelMomentCaptureMessage(int a1, void *a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v12 = 0;
  uint64_t v3 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v12, &cf, 0);
  uint64_t v4 = v12;
  if (v12)
  {
    int64_t int64 = xpc_dictionary_get_int64(a2, (const char *)*MEMORY[0x1E4F20290]);
    CFTypeRef v6 = cf;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(void (**)(const void *, CFTypeRef, int64_t))(v8 + 136);
    if (v9)
    {
      v9(v4, v6, int64);
    }
    else
    {
      uint64_t v13 = @"ErrorStatus";
      v14[0] = &unk_1EFB00FE0;
      [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v4);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkEndMomentCaptureMessage(int a1, void *a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v12 = 0;
  uint64_t v3 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v12, &cf, 0);
  uint64_t v4 = v12;
  if (v12)
  {
    int64_t int64 = xpc_dictionary_get_int64(a2, (const char *)*MEMORY[0x1E4F20290]);
    CFTypeRef v6 = cf;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v9 = *(void (**)(const void *, CFTypeRef, int64_t))(v8 + 144);
    if (v9)
    {
      v9(v4, v6, int64);
    }
    else
    {
      uint64_t v13 = @"ErrorStatus";
      v14[0] = &unk_1EFB00FE0;
      [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v4);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

void captureSessionServer_handleCancelPrewarm()
{
  CFStringRef v0 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  FigXPCMessageCopyCFString();
  if (*v0)
  {
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (*v0 == 1)
    {
      CFPropertyListRef v2 = CStringPtrAndBufferToFree;
      if (CStringPtrAndBufferToFree)
      {
        size_t v3 = strlen(CStringPtrAndBufferToFree);
        strncpy(__dst, &v2[v3 - 8], 8uLL);
      }
      kdebug_trace();
    }
    free(0);
  }
  FigCaptureSessionCancelPrewarm(0);
}

uint64_t captureSessionServer_handleSessionVisionDataSinkTriggerBurstMessage(int a1, void *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v10 = 0;
  uint64_t v2 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v10, &cf, 0);
  CFTypeRef v3 = v10;
  if (v10)
  {
    CFTypeRef v4 = cf;
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v6 = v5 ? v5 : 0;
    uint64_t v7 = *(void (**)(CFTypeRef, CFTypeRef))(v6 + 152);
    if (v7) {
      v7(v3, v4);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v2;
}

uint64_t FigCaptureSessionStopRunning(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFTypeRef v4 = *(uint64_t (**)(uint64_t))(v3 + 40);
  if (v4)
  {
    return v4(a1);
  }
  else
  {
    uint64_t v6 = @"ErrorStatus";
    v7[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t captureSessionServer_handleCommonSectionPayloadMessage(int a1, void *a2, uint64_t a3, void (*a4)(const void *, CFTypeRef, id))
{
  CFTypeRef cf = 0;
  id v10 = 0;
  uint64_t v8 = 0;
  uint64_t v5 = captureSessionServer_messageUnpackCopy(a1, a2, a3, (uint64_t)&v8, &cf, &v10);
  uint64_t v6 = v8;
  if (v8) {
    a4(v8, cf, v10);
  }

  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v5;
}

uint64_t FigCaptureSessionFileSinkStartRecording(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v8)
  {
    return v8(a1, a2, a3);
  }
  else
  {
    id v10 = @"ErrorStatus";
    v11[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t captureSessionServer_handleCommonSectionMessage(int a1, void *a2, void (*a3)(CFTypeRef, CFTypeRef))
{
  CFTypeRef v7 = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v7, &cf, 0);
  CFTypeRef v5 = v7;
  if (v7) {
    a3(v7, cf);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v4;
}

uint64_t FigCaptureSessionFileSinkPauseRecording(uint64_t a1, uint64_t a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (v6)
  {
    return v6(a1, a2);
  }
  else
  {
    uint64_t v8 = @"ErrorStatus";
    v9[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t FigCaptureSessionFileSinkResumeRecording(uint64_t a1, uint64_t a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
  {
    return v6(a1, a2);
  }
  else
  {
    uint64_t v8 = @"ErrorStatus";
    v9[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t FigCaptureSessionFileSinkStopRecording(uint64_t a1, uint64_t a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 56);
  if (v6)
  {
    return v6(a1, a2);
  }
  else
  {
    uint64_t v8 = @"ErrorStatus";
    v9[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t FigCaptureSessionStillImageSinkCaptureImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 80);
  if (v8)
  {
    return v8(a1, a2, a3);
  }
  else
  {
    id v10 = @"ErrorStatus";
    v11[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t FigCaptureSessionStillImageSinkPrepareToCaptureBracket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 88);
  if (v8)
  {
    return v8(a1, a2, a3);
  }
  else
  {
    id v10 = @"ErrorStatus";
    v11[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t FigCaptureSessionIrisStillImageSinkCaptureImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 96);
  if (v8)
  {
    return v8(a1, a2, a3);
  }
  else
  {
    id v10 = @"ErrorStatus";
    v11[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t FigCaptureSessionIrisStillImageSinkBeginMomentCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 112);
  if (v8)
  {
    return v8(a1, a2, a3);
  }
  else
  {
    id v10 = @"ErrorStatus";
    v11[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t FigCaptureSessionIrisStillImageSinkCommitMomentCaptureToStillImageCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 120);
  if (v8)
  {
    return v8(a1, a2, a3);
  }
  else
  {
    id v10 = @"ErrorStatus";
    v11[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t FigCaptureSessionIrisStillImageSinkCommitMomentCaptureToMovieRecording(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 128);
  if (v8)
  {
    return v8(a1, a2, a3);
  }
  else
  {
    id v10 = @"ErrorStatus";
    v11[0] = &unk_1EFB00FE0;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
}

uint64_t hdrn_createSampleBufferProcessor()
{
  FigCaptureWaitForPreloadShadersCompletion();
  uint64_t v0 = FigSampleBufferProcessorCreateForCustom();
  if (v0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v0;
}

uint64_t FigSampleBufferProcessorProcessSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }
  return v6(a1, a2);
}

Class __getBrightnessSystemClientClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!CoreBrightnessLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    v3[3] = __CoreBrightnessLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5C2AE48;
    uint64_t v5 = 0;
    CoreBrightnessLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  if (!CoreBrightnessLibraryCore_frameworkLibrary) {
    __getBrightnessSystemClientClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("BrightnessSystemClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getBrightnessSystemClientClass_block_invoke_cold_2();
  }
  getBrightnessSystemClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __CoreBrightnessLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreBrightnessLibraryCore_frameworkLibrardouble y = result;
  return result;
}

void sub_1A5CAF868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getSTExecutableIdentityClass()
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__33;
  uint64_t v7 = __Block_byref_object_dispose__33;
  uint64_t v0 = getSTExecutableIdentityClass_softClass;
  uint64_t v8 = getSTExecutableIdentityClass_softClass;
  if (!getSTExecutableIdentityClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getSTExecutableIdentityClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getSTExecutableIdentityClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5CAFB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getSTAttributedEntityClass()
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__33;
  uint64_t v7 = __Block_byref_object_dispose__33;
  uint64_t v0 = getSTAttributedEntityClass_softClass;
  uint64_t v8 = getSTAttributedEntityClass_softClass;
  if (!getSTAttributedEntityClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getSTAttributedEntityClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getSTAttributedEntityClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5CAFC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SystemStatusLibraryCore()
{
  if (!SystemStatusLibraryCore_frameworkLibrary) {
    SystemStatusLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  return SystemStatusLibraryCore_frameworkLibrary;
}

uint64_t __SystemStatusLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SystemStatusLibraryCore_frameworkLibrardouble y = result;
  return result;
}

Class __getSTActivityAttributionClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  Class result = objc_getClass("STActivityAttribution");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getSTActivityAttributionClass_block_invoke_cold_1();
  }
  getSTActivityAttributionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void SystemStatusLibrary()
{
  uint64_t v0 = 0;
  if (!SystemStatusLibraryCore()) {
    SystemStatusLibrary_cold_1(&v0);
  }
}

Class __getSTMediaStatusDomainPublisherClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  Class result = objc_getClass("STMediaStatusDomainPublisher");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getSTMediaStatusDomainPublisherClass_block_invoke_cold_1();
  }
  getSTMediaStatusDomainPublisherClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getSTDynamicActivityAttributionPublisherClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  Class result = objc_getClass("STDynamicActivityAttributionPublisher");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getSTDynamicActivityAttributionPublisherClass_block_invoke_cold_1();
  }
  getSTDynamicActivityAttributionPublisherClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getSTExecutableIdentityClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  Class result = objc_getClass("STExecutableIdentity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getSTExecutableIdentityClass_block_invoke_cold_1();
  }
  getSTExecutableIdentityClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getSTAttributedEntityClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  Class result = objc_getClass("STAttributedEntity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getSTAttributedEntityClass_block_invoke_cold_1();
  }
  getSTAttributedEntityClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void asn_activeCMSessionAudioRouteDidChangeHandler(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v7 = (void *)MEMORY[0x1A6272C70]();
  if (a5)
  {
    CFNumberRef Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F74F90]);
    if (Value)
    {
      if (CFEqual(Value, @"ReceiverAndMicrophone"))
      {
        -[BWAudioSourceNode _setCMSessionPropertyWithKey:value:]((uint64_t)a2);
      }
      else
      {
        BOOL v9 = (void *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F74F80]);
        if (v9) {
          -[BWAudioSourceNode _selectMicForAudioRoute:](a2, v9);
        }
      }
    }
  }
}

void sub_1A5CB2A7C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A5CB2EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double FODMGTimeInMilliseconds(unint64_t a1, double a2, double a3, double a4)
{
  if (FODMGTimeInMilliseconds_once != -1) {
    dispatch_once(&FODMGTimeInMilliseconds_once, &__block_literal_global_92);
  }
  LODWORD(a3) = FODMGTimeInMilliseconds_info;
  LODWORD(a4) = *(_DWORD *)algn_1E96B7FE4;
  return (double)a1 * (double)*(unint64_t *)&a3 / (double)*(unint64_t *)&a4 / 1000000.0;
}

uint64_t __FODMGTimeInMilliseconds_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&FODMGTimeInMilliseconds_info);
}

void sub_1A5CB5478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t deviceMotionCallback(uint64_t result, void *a2)
{
  if (result)
  {
    double v2 = *(double *)(result + 88);
    uint64_t v3 = *(unsigned __int8 *)(result + 96);
    long long v4 = *(_OWORD *)(result + 48);
    v6[2] = *(_OWORD *)(result + 32);
    void v6[3] = v4;
    void v6[4] = *(_OWORD *)(result + 64);
    uint64_t v7 = *(void *)(result + 80);
    long long v5 = *(_OWORD *)(result + 16);
    v6[0] = *(_OWORD *)result;
    v6[1] = v5;
    return [a2 didUpdateFusedMotionWithDeviceMotion:v6 time:v3 ifsync:v2];
  }
  return result;
}

long double rollFromQuaternion(double *a1)
{
  double v1 = a1[2];
  return -atan2(a1[1] * (a1[3] + a1[3]) - *a1 * (v1 + v1), 1.0 - a1[1] * (a1[1] + a1[1]) - v1 * (v1 + v1));
}

long double yawFromQuaternion(double *a1)
{
  double v1 = a1[3];
  return -atan2(a1[1] * (a1[2] + a1[2]) - *a1 * (v1 + v1), 1.0 - a1[1] * (a1[1] + a1[1]) - v1 * (v1 + v1));
}

uint64_t FigCoreMotionAllocWithPriority(int a1, int a2, int a3, uint64_t a4, float a5, float a6)
{
  uint64_t v12 = [FigCoreMotionDelegate alloc];
  uint64_t v13 = [NSNumber numberWithUnsignedInt:a4];
  *(float *)&double v14 = a5;
  *(float *)&double v15 = a6;
  return (uint64_t)[(FigCoreMotionDelegate *)v12 initWithAccelerometer:a1 != 0 gravityZ:a2 != 0 fusedMotion:a3 != 0 accelUpdateInterval:v13 fusedMotionUpdateInterval:v14 motionCallbackThreadPriority:v15];
}

uint64_t FigCoreMotionCopyMotionData(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  if (objc_msgSend(a1, "isCopyingAllData", 0, 0, 0, 0, 0, 0, 0, 0)) {
    uint64_t v5 = [a1 copyAllFusedMotionData];
  }
  else {
    uint64_t v5 = [a1 copyNewFusedMotionData];
  }
  uint64_t v6 = (const void *)v5;
  if (v5)
  {
    *(void *)&long long v9 = *MEMORY[0x1E4F55A08];
    *(void *)&long long v8 = v5;
    *a2 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v8 forKeys:&v9 count:1];
    CFRelease(v6);
  }
  else
  {
    *a2 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v8 forKeys:&v9 count:0];
  }
  return [v4 drain];
}

uint64_t FigCoreMotionGetGravity(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "getGravityX:y:z:forTimeStamp:", a2, a3, a4);
}

uint64_t FigCoreMotionGetAverageQuaternion(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_msgSend(a1, "updateCurrentQuaternionForTimeStamps:withEnd:");
  if (a3) {
    [a1 getCurrentDeltaQuaternion:a2];
  }
  else {
    [a1 getCurrentQuaternion:a2];
  }
  return v6;
}

uint64_t FigCoreMotionGetQuaternionAndAttitude(void *a1, double *a2, int a3, long double *a4, int a5)
{
  uint64_t v10 = objc_msgSend(a1, "updateCurrentQuaternionForTimeStamp:");
  if (!a3)
  {
    [a1 getCurrentQuaternion:a2];
    if (a5)
    {
      [a1 getCurrentDeltaAttitudeRoll:a4 pitch:a4 + 1 yaw:a4 + 2];
      return v10;
    }
LABEL_6:
    [a1 getCurrentAttitudeRoll:a4 pitch:a4 + 1 yaw:a4 + 2];
    return v10;
  }
  [a1 getCurrentDeltaQuaternion:a2];
  if (!a5) {
    goto LABEL_6;
  }
  *a4 = rollFromQuaternion(a2);
  a4[1] = asin(*a2 * (a2[1] + a2[1]) + a2[2] * (a2[3] + a2[3]));
  a4[2] = yawFromQuaternion(a2);
  return v10;
}

uint64_t FigCaptureBuildMotionAttachmentsNode(void *a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5, unsigned int a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, unsigned __int8 a11, char a12, char a13, char a14, _DWORD *a15)
{
  uint64_t v38 = 0;
  int v37 = 0;
  uint64_t v20 = [+[FigCaptureCameraParameters sharedInstance] motionAttachmentsParameters];
  if (a12) {
    int v21 = 2;
  }
  else {
    int v21 = a11;
  }
  long long v22 = [BWMotionAttachmentsNode alloc];
  BYTE5(v32) = a14;
  BYTE4(v32) = a13;
  LODWORD(v32) = [a5 priority];
  *(float *)&double v23 = a9;
  long long v24 = -[BWMotionAttachmentsNode initWithSensorIDDictionaryByPortType:cameraInfoByPortType:tuningParameters:activePortTypes:horizontalSensorBinningFactor:verticalSensorBinningFactor:maxSupportedFrameRate:motionAttachmentsMode:motionAttachmentsSource:motionCallbackThreadPriority:provideSourceVideoWithMotionAttachmentsOutput:provideOfflineVISMotionDataOutput:errorOut:](v22, "initWithSensorIDDictionaryByPortType:cameraInfoByPortType:tuningParameters:activePortTypes:horizontalSensorBinningFactor:verticalSensorBinningFactor:maxSupportedFrameRate:motionAttachmentsMode:motionAttachmentsSource:motionCallbackThreadPriority:provideSourceVideoWithMotionAttachmentsOutput:provideOfflineVISMotionDataOutput:errorOut:", a7, a8, v20, a10, a3, a4, v23, __PAIR64__(a6, v21), v32, &v37);
  if (v37)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v29 = 0;
  }
  else
  {
    long long v25 = v24;
    if ([a1 addNode:v24 error:&v38])
    {
      uint64_t v26 = [a1 graph];
      uint64_t v27 = [(BWNode *)v25 input];
      unsigned int v28 = (void *)v26;
      uint64_t v29 = a2;
      if ([v28 connectOutput:a2 toInput:v27 pipelineStage:a5])
      {
        if (a13) {
          uint64_t v30 = [(BWMotionAttachmentsNode *)v25 sourceVideoWithMotionAttachmentsOutput];
        }
        else {
          uint64_t v30 = [(BWMotionAttachmentsNode *)v25 offlineVISMotionDataOutput];
        }
        uint64_t v29 = v30;
      }
      else
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v29 = a2;
    }
  }
  *a15 = v37;
  return v29;
}

uint64_t FigMetadataItemConnectionConfigurationRequiresObjectDetection(void *a1)
{
  CFArrayRef Identifiers = CMMetadataFormatDescriptionGetIdentifiers((CMMetadataFormatDescriptionRef)[a1 formatDescription]);
  if (([(__CFArray *)Identifiers containsObject:*MEMORY[0x1E4F1F138]] & 1) != 0
    || ([(__CFArray *)Identifiers containsObject:*MEMORY[0x1E4F1F140]] & 1) != 0
    || ([(__CFArray *)Identifiers containsObject:*MEMORY[0x1E4F1F128]] & 1) != 0
    || ([(__CFArray *)Identifiers containsObject:*MEMORY[0x1E4F1F130]] & 1) != 0)
  {
    return 1;
  }
  uint64_t v3 = *MEMORY[0x1E4F1F148];
  return [(__CFArray *)Identifiers containsObject:v3];
}

void *FigCaptureConnectionConfigurationWithSourceType(void *a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)v11;
LABEL_3:
  uint64_t v7 = 0;
  while (1)
  {
    if (*(void *)v11 != v6) {
      objc_enumerationMutation(a1);
    }
    long long v8 = *(void **)(*((void *)&v10 + 1) + 8 * v7);
    if (objc_msgSend((id)objc_msgSend(v8, "sourceConfiguration"), "sourceType") == a2) {
      return v8;
    }
    if (v5 == ++v7)
    {
      uint64_t v5 = [a1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        goto LABEL_3;
      }
      return 0;
    }
  }
}

uint64_t FigCaptureConnectionConfigurationsFilterWithBlock(void *a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  void v3[2] = __FigCaptureConnectionConfigurationsFilterWithBlock_block_invoke;
  v3[3] = &unk_1E5C2B078;
  v3[4] = a2;
  return objc_msgSend(a1, "filteredArrayUsingPredicate:", objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithBlock:", v3));
}

uint64_t __FigCaptureConnectionConfigurationsFilterWithBlock_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __BWInferenceSmartCameraCurrentVersion_block_invoke()
{
  BOOL v0 = +[BWEspressoInferenceAdapter allowE5ForInferenceType:101];
  uint64_t result = (uint64_t)+[BWEspressoInferenceAdapter findAvailableVersion:&unk_1EFB041F0 defaultOverrideKey:@"smart_camera_pipeline_version" versionLocator:BWInferenceSmartCameraNetworkForVersion e5Bundle:v0];
  BWInferenceSmartCameraCurrentVersion_versiouint64_t n = result;
  word_1EB4C5E14 = WORD2(result);
  return result;
}

BWInferenceVideoRequirement *lnrpc_inferenceVideoRequirementForVideoFormat(uint64_t a1, void *a2)
{
  uint64_t result = 0;
  v6[1] = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    uint64_t v4 = -[BWVideoFormatRequirements initWithPixelBufferAttributes:]([BWInferenceVideoFormatRequirements alloc], "initWithPixelBufferAttributes:", [a2 pixelBufferAttributes]);
    if (v4
      && (v6[0] = v4,
          (id v5 = +[BWInferenceVideoFormat formatByResolvingRequirements:](BWInferenceVideoFormat, "formatByResolvingRequirements:", [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:1])) != 0))
    {
      return [[BWInferenceVideoRequirement alloc] initWithAttachedMediaKey:a1 videoFormat:v5];
    }
    else
    {
      FigDebugAssert3();
      return 0;
    }
  }
  return result;
}

uint64_t lnrpc_formatFromInputFormatsByQSubResolutionFlavor(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    if (a2)
    {
      uint64_t v7 = (void *)[a1 objectForKeyedSubscript:&unk_1EFB01190];
      if ([v7 count] && objc_msgSend(v7, "count") != 1) {
        goto LABEL_30;
      }
      goto LABEL_9;
    }
    return 0;
  }
  if (!a4)
  {
    if ((a2 & 1) == 0 && !a3) {
      return 0;
    }
    long long v9 = (void *)[a1 objectForKeyedSubscript:&unk_1EFB01190];
    if ([v9 count] && objc_msgSend(v9, "count") != 1) {
      goto LABEL_30;
    }
    long long v10 = (void *)[v9 firstObject];
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v11 = (void *)[a1 objectForKeyedSubscript:&unk_1EFB011A8];
    uint64_t v12 = [v11 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v22;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v22 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          uint64_t v17 = [v16 width];
          uint64_t v18 = [v10 width];
          if (a2)
          {
            if (v17 == v18)
            {
              uint64_t v19 = [v16 height];
              if (v19 == [v10 height]) {
                return (uint64_t)v16;
              }
            }
          }
          else
          {
            if (v17 != v18) {
              return (uint64_t)v16;
            }
            uint64_t v20 = [v16 height];
            if (v20 != [v10 height]) {
              return (uint64_t)v16;
            }
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v21 objects:v25 count:16];
        uint64_t v16 = 0;
      }
      while (v13);
      return (uint64_t)v16;
    }
    return 0;
  }
  uint64_t v7 = (void *)[a1 objectForKeyedSubscript:&unk_1EFB01178];
  if ([v7 count] && objc_msgSend(v7, "count") != 1)
  {
LABEL_30:
    FigDebugAssert3();
    return 0;
  }
LABEL_9:
  return [v7 firstObject];
}

uint64_t __lnrpc_createStateMachine_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return -[BWLearnedNRProcessorController _serviceNextRequest](a2);
}

uint64_t __lnrpc_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return -[BWLearnedNRProcessorController _process](a2);
}

void cmmsn_deviceMotionCallback(long long *a1, uint64_t a2)
{
  if (a1)
  {
    v12[0] = 0;
    v12[1] = v12;
    uint64_t v2 = *((void *)a1 + 11);
    void v12[2] = 0x2020000000;
    v12[3] = v2;
    v9[0] = 0;
    v9[1] = v9;
    void v9[2] = 0x4010000000;
    void v9[3] = "";
    long long v3 = a1[1];
    long long v10 = *a1;
    long long v11 = v3;
    v7[0] = 0;
    v7[1] = v7;
    void v7[2] = 0x3010000000;
    uint64_t v4 = *((void *)a1 + 4);
    v7[3] = "";
    v7[4] = v4;
    int v8 = *((_DWORD *)a1 + 10);
    id v5 = *(NSObject **)(a2 + 152);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __cmmsn_deviceMotionCallback_block_invoke;
    void v6[3] = &unk_1E5C2B178;
    void v6[4] = a2;
    _OWORD v6[5] = v12;
    void v6[6] = v9;
    void v6[7] = v7;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
    _Block_object_dispose(v9, 8);
    _Block_object_dispose(v12, 8);
  }
}

void __cmmsn_deviceMotionCallback_block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  if (*(unsigned char *)(v1 + 112))
  {
    uint64_t v2 = *(void *)(v1 + 120) + 60 * *(int *)(v1 + 128);
    *(void *)(v2 + _Block_object_dispose(&STACK[0x458], 8) = *(void *)(*(void *)(a1[5] + 8) + 24);
    *(void *)(v2 + 16) = *(void *)(*(void *)(a1[6] + 8) + 32);
    *(void *)(v2 + 24) = *(void *)(*(void *)(a1[6] + 8) + 40);
    *(void *)(v2 + 32) = *(void *)(*(void *)(a1[6] + 8) + 48);
    *(void *)(v2 + 40) = *(void *)(*(void *)(a1[6] + 8) + 56);
    *(_DWORD *)(v2 + 4_Block_object_dispose(&STACK[0x458], 8) = *(_DWORD *)(*(void *)(a1[7] + 8) + 32);
    *(_DWORD *)(v2 + 52) = *(_DWORD *)(*(void *)(a1[7] + 8) + 36);
    *(_DWORD *)(v2 + 56) = *(_DWORD *)(*(void *)(a1[7] + 8) + 40);
    ++*(_DWORD *)(a1[4] + 128);
    uint64_t v3 = a1[4];
    if (*(_DWORD *)(v3 + 128) >= *(_DWORD *)(v3 + 108)) {
      -[BWCoreMotionMetadataSourceNode _emitMetadataSampleBuffer](v3);
    }
  }
}

uint64_t captureDeferredPhotoProcessor_createSerializedNotification(int a1, CFDictionaryRef theDict, uint64_t a3, CFMutableDictionaryRef *a4)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  int v16 = 0;
  if (a4)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    MutableCopdouble y = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, theDict);
    long long v9 = (void *)cdpp_surfaceSerializedPayloadKeysByPayloadKey();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __captureDeferredPhotoProcessor_createSerializedNotification_block_invoke;
    v12[3] = &unk_1E5C2B1C0;
    void v12[6] = theDict;
    v12[7] = MutableCopy;
    void v12[4] = a3;
    void v12[5] = &v13;
    [v9 enumerateKeysAndObjectsUsingBlock:v12];
    *a4 = MutableCopy;
    uint64_t v10 = *((unsigned int *)v14 + 6);
  }
  else
  {
    FigDebugAssert3();
    uint64_t v10 = 4294954516;
    *((_DWORD *)v14 + 6) = -12780;
  }
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_1A5CBD590(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t cdpp_surfaceSerializedPayloadKeysByPayloadKey()
{
  v2[9] = *MEMORY[0x1E4F143B8];
  v1[0] = @"Surface";
  v2[0] = [NSString stringWithUTF8String:kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_Surface_Serialized];
  v1[1] = @"PreviewSurface";
  v2[1] = [NSString stringWithUTF8String:kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_PreviewSurface_Serialized];
  void v1[2] = @"ThumbnailSurface";
  void v2[2] = [NSString stringWithUTF8String:kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_ThumbnailSurface_Serialized];
  v1[3] = @"DepthDataSurface";
  v2[3] = [NSString stringWithUTF8String:kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_DepthDataSurface_Serialized];
  void v1[4] = @"PortraitEffectsMatteSurface";
  v2[4] = [NSString stringWithUTF8String:kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_PortraitEffectsMatteSurface_Serialized];
  v1[5] = @"HairSegmentationMatteSurface";
  void v2[5] = [NSString stringWithUTF8String:kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_HairSegmentationMatteSurface_Serialized];
  void v1[6] = @"SkinSegmentationMatteSurface";
  v2[6] = [NSString stringWithUTF8String:kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_SkinSegmentationMatteSurface_Serialized];
  v1[7] = @"TeethSegmentationMatteSurface";
  v2[7] = [NSString stringWithUTF8String:kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_TeethSegmentationMatteSurface_Serialized];
  v1[8] = @"GlassesSegmentationMatteSurface";
  v2[8] = [NSString stringWithUTF8String:kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_GlassesSegmentationMatteSurface_Serialized];
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:v1 count:9];
}

void __captureDeferredPhotoProcessor_createSerializedNotification_block_invoke(uint64_t a1, const void *a2, void *a3, unsigned char *a4)
{
  CFNumberRef Value = (__IOSurface *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), a2);
  if (Value)
  {
    long long v9 = Value;
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 == IOSurfaceGetTypeID())
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), a2);
      xpc_object_t XPCObject = IOSurfaceCreateXPCObject(v9);
      if (XPCObject)
      {
        uint64_t v12 = XPCObject;
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), (const char *)[a3 UTF8String], XPCObject);
        xpc_release(v12);
      }
      else
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -12786;
        *a4 = 1;
      }
    }
  }
}

uint64_t captureDeferredPhotoProcessor_createDeserializedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  if (a4)
  {
    MutableCopdouble y = FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      uint64_t v7 = (void *)cdpp_surfaceSerializedPayloadKeysByPayloadKey();
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __captureDeferredPhotoProcessor_createDeserializedNotification_block_invoke;
      v10[3] = &unk_1E5C2B1E8;
      void v10[4] = a2;
      v10[5] = &v11;
      v10[6] = MutableCopy;
      [v7 enumerateKeysAndObjectsUsingBlock:v10];
      uint64_t v8 = *((unsigned int *)v12 + 6);
    }
    else
    {
      FigDebugAssert3();
      uint64_t v8 = 4294954510;
      *((_DWORD *)v12 + 6) = -12786;
    }
    *a4 = MutableCopy;
  }
  else
  {
    FigDebugAssert3();
    uint64_t v8 = 4294954516;
    *((_DWORD *)v12 + 6) = -12780;
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1A5CBD9D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __captureDeferredPhotoProcessor_createDeserializedNotification_block_invoke(uint64_t a1, const void *a2, void *a3, unsigned char *a4)
{
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), (const char *)[a3 UTF8String]);
  if (value)
  {
    long long v9 = value;
    if ([a3 hasSuffix:@"Surface_Serialized"])
    {
      IOSurfaceRef v10 = IOSurfaceLookupFromXPCObject(v9);
      if (v10)
      {
        IOSurfaceRef v11 = v10;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), a2, v10);
        CFRelease(v11);
      }
      else
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -12786;
        *a4 = 1;
      }
    }
  }
}

uint64_t captureDeferredPhotoProcessor_sendXPCNotificationWithPayload(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFTypeRef cf = 0;
  uint64_t v7 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    if (*(void *)(DerivedStorage + 80))
    {
      if (FigXPCCreateBasicMessage()
        || FigXPCMessageSetCFString()
        || captureDeferredPhotoProcessor_createSerializedNotification(0, a3, v7, (CFMutableDictionaryRef *)&cf)|| FigXPCMessageSetCFDictionary())
      {
        FigDebugAssert3();
      }
      else
      {
        xpc_connection_send_notification();
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return FigXPCRelease();
}

void captureDeferredPhotoProcessor_performBlockOnWorkerQueueAsync(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v6 = *(NSObject **)(v5 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __captureDeferredPhotoProcessor_performBlockOnWorkerQueueAsync_block_invoke;
    block[3] = &unk_1E5C28920;
    block[4] = a2;
    void block[5] = a1;
    dispatch_async(v6, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

void captureDeferredPhotoProcessor_cleanupForCurrentProcessingRequest(const void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v7 = v1;
    LODWORD(v5) = 0;
    FigDebugAssert3();
  }

  *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x458], 8) = 0;
  [+[BWDeferredTransactionBroker sharedInstance] closeTransaction:2];
  if ([*(id *)(DerivedStorage + 40) count] && *(unsigned char *)DerivedStorage)
  {
    captureDeferredPhotoProcessor_workloop(a1);
  }
  else
  {
    objc_msgSend(+[FigCaptureDeferredProcessingEngine sharedProcessingEngine](FigCaptureDeferredProcessingEngine, "sharedProcessingEngine", v5, v7), "releaseResourcesForClientPID:", *(unsigned int *)(DerivedStorage + 32));
    dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 8), &__block_literal_global_175);
    if (dword_1EB4C4F10)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    [+[BWDeferredTransactionBroker sharedInstance] closeTransaction:2];
  }
}

CFTypeRef fcdpp_copyAttachedMediaSurfaceDataFromSampleBufferIntoNotificationPayload(void *a1, uint64_t a2, const __CFString *a3, int a4, void *a5, uint64_t a6, uint64_t a7)
{
  AttachedMediCGFloat a = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(a1, a2);
  int v14 = AttachedMedia;
  if (AttachedMedia)
  {
    CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(AttachedMedia);
    if (ImageBuffer)
    {
      IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(ImageBuffer);
      if (IOSurface) {
        [a5 setObject:IOSurface forKeyedSubscript:a6];
      }
    }
  }
  if (a4) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = (opaqueCMSampleBuffer *)a1;
  }
  CFTypeRef result = CMGetAttachment(v17, a3, 0);
  if (result)
  {
    return (CFTypeRef)[a5 setObject:result forKeyedSubscript:a7];
  }
  return result;
}

uint64_t captureDeferredPhotoProcessor_Invalidate(const void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C4F10)
  {
    int v7 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*DerivedStorage)
  {
    *uint64_t DerivedStorage = 0;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = __captureDeferredPhotoProcessor_Invalidate_block_invoke;
    void v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = DerivedStorage;
    v5[5] = a1;
    captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v5);
  }
  return 0;
}

void captureDeferredPhotoProcessor_Finalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C4F10)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  captureDeferredPhotoProcessor_Invalidate(a1);
  uint64_t v4 = *(NSObject **)(DerivedStorage + 8);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x458], 8) = 0;
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 16);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(DerivedStorage + 16) = 0;
  }
}

id captureDeferredPhotoProcessor_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  id v3 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  CFIndex v4 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    uint64_t v5 = "";
  }
  else {
    uint64_t v5 = " (never set/invalidated)";
  }
  objc_msgSend(v3, "appendFormat:", @"<FigCaptureDeferredPhotoProcessor %p retainCount: %ld%s allocator: %p>", a1, v4, v5, CFGetAllocator(a1));
  return v3;
}

uint64_t captureDeferredPhotoProcessor_CopyProperty(const void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage) {
    goto LABEL_8;
  }
  if (!a2)
  {
    FigDebugAssert3();
LABEL_8:
    return FigSignalErrorAt();
  }
  uint64_t v8 = DerivedStorage;
  if (FigCFEqual())
  {
    uint64_t v15 = 0;
    int v16 = &v15;
    uint64_t v17 = 0x2020000000;
    char v18 = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = __captureDeferredPhotoProcessor_CopyProperty_block_invoke;
    void v14[3] = &unk_1E5C24A38;
    v14[4] = &v15;
    void v14[5] = v8;
    captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v14);
    if (*((unsigned char *)v16 + 24)) {
      uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CFTypeRef v10 = CFRetain(*v9);
  }
  else
  {
    if (!FigCFEqual()) {
      return 4294954509;
    }
    uint64_t v15 = 0;
    int v16 = &v15;
    uint64_t v17 = 0x2020000000;
    char v18 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = __captureDeferredPhotoProcessor_CopyProperty_block_invoke_2;
    void v13[3] = &unk_1E5C24978;
    float32x4_t v13[4] = &v15;
    captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v13);
    if (*((unsigned char *)v16 + 24)) {
      uint64_t v12 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v12 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CFTypeRef v10 = CFRetain(*v12);
  }
  *a4 = v10;
  _Block_object_dispose(&v15, 8);
  return 0;
}

void sub_1A5CBF848(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t captureDeferredPhotoProcessor_SetProperty(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    if (a2)
    {
      int v7 = DerivedStorage;
      if (!FigCFEqual()) {
        return 4294954509;
      }
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      void v9[2] = __captureDeferredPhotoProcessor_SetProperty_block_invoke;
      void v9[3] = &__block_descriptor_56_e5_v8__0l;
      void v9[4] = a3;
      v9[5] = v7;
      v9[6] = a1;
      captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v9);
      return 0;
    }
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

void captureDeferredPhotoProcessor_workloop(const void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    uint64_t v25 = v1;
    LODWORD(v23) = 0;
    FigDebugAssert3();
  }
  if (*(unsigned char *)(DerivedStorage + 56)
    || *(void *)(DerivedStorage + 48)
    || ![*(id *)(DerivedStorage + 40) count])
  {
    CFIndex v4 = 0;
  }
  else
  {
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x458], 8) = (id)[*(id *)(DerivedStorage + 40) firstObject];
    [*(id *)(DerivedStorage + 40) removeObjectAtIndex:0];
    if (*(unsigned char *)(DerivedStorage + 1) && captureDeferredPhotoProcessor_workloop_waitForShaderCompilationToken != -1) {
      dispatch_once(&captureDeferredPhotoProcessor_workloop_waitForShaderCompilationToken, &__block_literal_global_125_0);
    }
    uint64_t v5 = objc_msgSend(*(id *)(DerivedStorage + 48), "captureRequestIdentifier", v23, v25);
    uint64_t v6 = [*(id *)(DerivedStorage + 48) photoIdentifier];
    [NSString stringWithFormat:@"%@/%@", v5, v6];
    if (dword_1EB4C4F10)
    {
      unsigned int v35 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithObjects:", v6, 0, v26);
    unsigned int v35 = 0;
    uint64_t v9 = [[FigCaptureDeferredProcessingJob alloc] initWithProcessorRequest:*(void *)(DerivedStorage + 48) delegate:*(void *)(DerivedStorage + 96) error:&v35];
    CFIndex v4 = v9;
    if (v9)
    {
      objc_msgSend(*(id *)(DerivedStorage + 48), "setContainer:", -[FigCaptureDeferredProcessingJob container](v9, "container"));
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      CFTypeRef v10 = objc_msgSend(-[FigCaptureDeferredProcessingJob container](v4, "container"), "photoDescriptors");
      uint64_t v11 = [v10 countByEnumeratingWithState:&v31 objects:v38 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v32;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v32 != v13) {
              objc_enumerationMutation(v10);
            }
            uint64_t v15 = *(void **)(*((void *)&v31 + 1) + 8 * i);
            if ((objc_msgSend(v8, "containsObject:", objc_msgSend(v15, "photoIdentifier")) & 1) == 0) {
              objc_msgSend(v8, "addObject:", objc_msgSend(v15, "photoIdentifier"));
            }
          }
          uint64_t v12 = [v10 countByEnumeratingWithState:&v31 objects:v38 count:16];
        }
        while (v12);
      }
    }
    v36[0] = @"CaptureRequestIdentifier";
    v36[1] = @"PhotoIdentifiers";
    v37[0] = v5;
    v37[1] = v8;
    captureDeferredPhotoProcessor_sendXPCNotificationWithPayload((uint64_t)a1, @"WillBeginProcessingPhotoProxy", (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:v36 count:2]);
    if (!*(unsigned char *)(DerivedStorage + 1))
    {
      uint64_t v17 = *(void **)(DerivedStorage + 96);
      uint64_t v18 = *(void *)(DerivedStorage + 48);
      uint64_t v19 = 4294950476;
      [v17 request:v18 failedWithError:4294950476];
LABEL_34:
      cdpp_reportAnalytics(v19);
      goto LABEL_6;
    }
    if (v35)
    {
      if (+[FigCaptureDeferredProcessingJob isPotentiallyRecoverableError:](FigCaptureDeferredProcessingJob, "isPotentiallyRecoverableError:"))
      {
        if (dword_1EB4C4F10)
        {
          *(_DWORD *)os_log_type_t type = 0;
          os_log_type_t v29 = OS_LOG_TYPE_DEFAULT;
          int v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v22 = 4294950471;
        unsigned int v35 = -16825;
      }
      else
      {
        uint64_t v22 = v35;
      }
      objc_msgSend(*(id *)(DerivedStorage + 96), "request:failedWithError:", *(void *)(DerivedStorage + 48), v22, v24, v27);
      uint64_t v19 = v35;
      goto LABEL_34;
    }
    if (v4)
    {
      dispatch_qos_class_t v20 = [(FigCaptureDeferredPhotoProcessorRequest *)[(FigCaptureDeferredProcessingJob *)v4 processorRequest] qosClass];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __captureDeferredPhotoProcessor_workloop_block_invoke_131;
      block[3] = &unk_1E5C24430;
      block[4] = v4;
      dispatch_block_t v21 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v20, 0, block);
      captureDeferredPhotoProcessor_performBlockOnWorkerQueueAsync(a1, (uint64_t)v21);
    }
  }
LABEL_6:
}

uint64_t cdpp_reportAnalytics(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(BWDeferredProcessingAnalyticsPayload);
  [(BWDeferredProcessingAnalyticsPayload *)v2 setError:a1];
  if (a1 == -16140)
  {
    [(BWDeferredProcessingAnalyticsPayload *)v2 setProcessingResult:0x1EFA64D00];
    [(BWDeferredProcessingAnalyticsPayload *)v2 setContainerProcessingCount:0xFFFFFFFFLL];
  }
  else if (!+[FigCaptureDeferredProcessingJob isPotentiallyRecoverableError:a1])
  {
    [(BWDeferredProcessingAnalyticsPayload *)v2 setProcessingResult:0x1EFA64CE0];
  }
  id v3 = +[BWCoreAnalyticsReporter sharedInstance];
  return [(BWCoreAnalyticsReporter *)v3 sendEvent:v2];
}

uint64_t __captureDeferredPhotoProcessor_workloop_block_invoke_131(uint64_t a1)
{
  id v2 = +[FigCaptureDeferredProcessingEngine sharedProcessingEngine];
  uint64_t v3 = *(void *)(a1 + 32);
  return [v2 executeJob:v3];
}

id captureDeferredPhotoProcessor_CopyUnfinishedPhotoIdentifiers()
{
  int v3 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage) {
    return 0;
  }
  id v1 = [+[BWDeferredProcessingContainerManager sharedInstance] manifestsForApplicationID:*(void *)(DerivedStorage + 24) err:&v3];
  if (v3) {
    FigDebugAssert3();
  }
  return v1;
}

uint64_t captureDeferredPhotoProcessor_ProcessPhoto(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C4F10)
  {
    int v17 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v12 = [[FigCaptureDeferredPhotoProcessorRequest alloc] initWithApplicationID:*(void *)(DerivedStorage + 24) captureRequstIdentifier:a2 photoIdentifier:a3 clientPID:*(unsigned int *)(DerivedStorage + 32) message:a5 qosClass:qos_class_self() parent:0];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    void v15[2] = __captureDeferredPhotoProcessor_ProcessPhoto_block_invoke;
    void v15[3] = &unk_1E5C2B238;
    v15[6] = DerivedStorage;
    void v15[7] = a1;
    v15[8] = a2;
    v15[9] = a3;
    void v15[4] = v12;
    v15[5] = &v18;
    v15[10] = a4;
    captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v15);
    if (*((_DWORD *)v19 + 6) == -16829) {
      *((_DWORD *)v19 + 6) = 0;
    }

    uint64_t v13 = *((unsigned int *)v19 + 6);
  }
  else
  {
    uint64_t v13 = FigSignalErrorAt();
  }
  _Block_object_dispose(&v18, 8);
  return v13;
}

void sub_1A5CC0604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t captureDeferredPhotoProcessor_CancelPhotoProcessing(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    int v7 = cdpp_validateIdentifiersAreUUIDs(a2, a3);
    *((_DWORD *)v12 + 6) = v7;
    if (v7)
    {
      FigDebugAssert3();
    }
    else
    {
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __captureDeferredPhotoProcessor_CancelPhotoProcessing_block_invoke;
      v10[3] = &unk_1E5C28850;
      v10[5] = DerivedStorage;
      v10[6] = a3;
      void v10[4] = &v11;
      captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v10);
    }
    uint64_t v8 = *((unsigned int *)v12 + 6);
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1A5CC07A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureDeferredPhotoProcessor_PrewarmSerialized()
{
  return 4294954514;
}

uint64_t captureDeferredPhotoProcessor_CancelAllPrewarming(const void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C4F10)
  {
    int v7 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage) {
    return FigSignalErrorAt();
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __captureDeferredPhotoProcessor_CancelAllPrewarming_block_invoke;
  void v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v5);
  return 0;
}

uint64_t captureDeferredPhotoProcessor_DeletePersistentStorageForPhoto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = cdpp_validateIdentifiersAreUUIDs(a2, a3);
    if (v7)
    {
      uint64_t v11 = v7;
      FigDebugAssert3();
      return v11;
    }
    else
    {
      uint64_t v8 = +[BWDeferredProcessingContainerManager sharedInstance];
      uint64_t v9 = *((void *)v6 + 3);
      return [(BWDeferredProcessingContainerManager *)v8 deleteContainerForApplicationID:v9 captureRequestIdentifier:a2];
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

id captureDeferredPhotoProcessor_PrettyPrintContainerDescription(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (*DerivedStorage)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __captureDeferredPhotoProcessor_PrettyPrintContainerDescription_block_invoke;
    v7[3] = &unk_1E5C2B280;
    void v7[6] = DerivedStorage;
    void v7[7] = a2;
    v7[4] = &v8;
    void v7[5] = a1;
    captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v7);
  }
  else
  {
    FigDebugAssert3();
  }
  id v5 = (id)v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A5CC0C14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A5CC1734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

uint64_t cdpp_validateIdentifiersAreUUIDs(uint64_t a1, uint64_t a2)
{
  CFIndex v4 = (void *)MEMORY[0x1A6272C70]();
  id v5 = (id)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:a1];
  id v6 = (id)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:a2];
  if (v5 && v6) {
    return 0;
  }
  FigDebugAssert3();
  return 4294950470;
}

void __captureDeferredPhotoProcessor_performBlockOnWorkerQueueAsync_block_invoke(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1A6272C70]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  int v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1A5CC3518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A5CC38C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5CC6884(_Unwind_Exception *a1)
{
}

void sub_1A5CD80A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5CDE484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t AppleCVALibrary_1()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!AppleCVALibraryCore_frameworkLibrary_1)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    void v2[2] = (void *)3221225472;
    v2[3] = __AppleCVALibraryCore_block_invoke_1;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E5C2B3F8;
    uint64_t v4 = 0;
    AppleCVALibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  uint64_t v0 = AppleCVALibraryCore_frameworkLibrary_1;
  if (!AppleCVALibraryCore_frameworkLibrary_1) {
    AppleCVALibrary_cold_1_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __AppleCVALibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  AppleCVALibraryCore_frameworkLibrary_1 = result;
  return result;
}

uint64_t getDKNotificationAgentClass()
{
  uint64_t v2 = 0;
  long long v3 = &v2;
  uint64_t v4 = 0x3052000000;
  uint64_t v5 = __Block_byref_object_copy__36;
  id v6 = __Block_byref_object_dispose__36;
  uint64_t v0 = getDKNotificationAgentClass_softClass;
  uint64_t v7 = getDKNotificationAgentClass_softClass;
  if (!getDKNotificationAgentClass_softClass)
  {
    DockKitCoreLibraryCore();
    void v3[5] = (uint64_t)objc_getClass("DKNotificationAgent");
    getDKNotificationAgentClass_softClass = v3[5];
    uint64_t v0 = v3[5];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A5CDECA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __DockKitCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  DockKitCoreLibraryCore_frameworkLibrardouble y = result;
  return result;
}

Class __getDKTrackingAgentClass_block_invoke(uint64_t a1)
{
  DockKitCoreLibraryCore();
  Class result = objc_getClass("DKTrackingAgent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  getDKTrackingAgentClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getDKNotificationAgentClass_block_invoke(uint64_t a1)
{
  DockKitCoreLibraryCore();
  Class result = objc_getClass("DKNotificationAgent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  getDKNotificationAgentClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigSetupIOSurfaceAccelerator(uint64_t a1)
{
  mach_port_t v2 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v3 = IOServiceMatching("AppleM2ScalerCSCDriver");
  uint64_t result = IOServiceGetMatchingService(v2, v3);
  if (result)
  {
    io_object_t v5 = result;
    CFDictionaryRef v6 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(result, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
    if (v6)
    {
      CFDictionaryRef v7 = v6;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, @"IOSurfaceAcceleratorFilterHorizontalTapsCount");
      CFNumberGetValue(Value, kCFNumberSInt32Type, (void *)a1);
      CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(v7, @"IOSurfaceAcceleratorFilterVerticalTapsCount");
      CFNumberGetValue(v9, kCFNumberSInt32Type, (void *)(a1 + 4));
      CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(v7, @"IOSurfaceAcceleratorFilterHorizontalPhasesCount");
      CFNumberGetValue(v10, kCFNumberSInt32Type, (void *)(a1 + 8));
      CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v7, @"IOSurfaceAcceleratorFilterVerticalPhasesCount");
      CFNumberGetValue(v11, kCFNumberSInt32Type, (void *)(a1 + 12));
      CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v7, @"IOSurfaceAcceleratorFilterCoefficientsPrePointBits");
      CFNumberGetValue(v12, kCFNumberSInt32Type, (void *)(a1 + 16));
      CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v7, @"IOSurfaceAcceleratorFilterCoefficientsPostPointBits");
      CFNumberGetValue(v13, kCFNumberSInt32Type, (void *)(a1 + 20));
      CFRelease(v7);
    }
    return IOObjectRelease(v5);
  }
  return result;
}

uint64_t FigSetupIOSurfaceAcceleratorCustomFilter1to1(uint64_t a1, unsigned int *a2, float *a3, float *a4, float *a5, float *a6)
{
  uint64_t v10 = a2[1];
  unsigned int v11 = a2[4];
  unsigned int v12 = a2[5];
  uint64_t v13 = a2[2];
  uint64_t v14 = *a2;
  uint64_t v15 = a2[3];
  int v16 = malloc_type_calloc(1uLL, 4 * (2 * (v13 * v14 + v15 * v10)), 0x100004052888210uLL);
  if (!v16) {
    return 3758097085;
  }
  uint64_t v17 = v16;
  if (v10)
  {
    float v18 = (float)(unint64_t)(1 << v12);
    uint64_t v19 = ~(-1 << (v12 + v11));
    uint64_t v20 = 4 * v15;
    uint64_t v21 = v10;
    uint64_t v17 = v16;
    do
    {
      float v22 = *a6++;
      *uint64_t v17 = (int)(float)((float)(v22 * v18) + 0.5) & v19;
      uint64_t v17 = (_DWORD *)((char *)v17 + v20);
      --v21;
    }
    while (v21);
    uint64_t v23 = v10;
    do
    {
      float v24 = *a4++;
      *uint64_t v17 = (int)(float)((float)(v24 * v18) + 0.5) & v19;
      uint64_t v17 = (_DWORD *)((char *)v17 + v20);
      --v23;
    }
    while (v23);
  }
  if (v14)
  {
    float v25 = (float)(unint64_t)(1 << v12);
    uint64_t v26 = ~(-1 << (v12 + v11));
    uint64_t v27 = 4 * v13;
    uint64_t v28 = v14;
    do
    {
      float v29 = *a5++;
      *uint64_t v17 = (int)(float)((float)(v29 * v25) + 0.5) & v26;
      uint64_t v17 = (_DWORD *)((char *)v17 + v27);
      --v28;
    }
    while (v28);
    uint64_t v30 = v14;
    do
    {
      float v31 = *a3++;
      *uint64_t v17 = (int)(float)((float)(v31 * v25) + 0.5) & v26;
      uint64_t v17 = (_DWORD *)((char *)v17 + v27);
      --v30;
    }
    while (v30);
  }
  long long v32 = v16;
  uint64_t v33 = IOSurfaceAcceleratorSetCustomFilter();
  free(v32);
  return v33;
}

_DWORD *multiBandNoiseReductionContextCreate(int a1, int a2, const __CFDictionary *a3)
{
  CFDictionaryRef v6 = (char *)malloc_type_malloc(0x210uLL, 0x10E0040BC18C1E7uLL);
  CFDictionaryRef v7 = v6;
  if (!v6) {
    goto LABEL_17;
  }
  bzero(v6 + 4, 0x20CuLL);
  _DWORD *v7 = 1459126783;
  v7[16] = a2;
  *((unsigned char *)v7 + 520) = CFDictionaryGetValue(a3, @"TMBNR_Fusion") == (const void *)*MEMORY[0x1E4F1CFD0];
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  *((void *)v7 + 5_Block_object_dispose(&STACK[0x4C8], 8) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, v9, v10);
  *((void *)v7 + 59) = Mutable;
  if (Mutable)
  {
    if (a3)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F52DD8]);
      if (Value)
      {
        CFDictionaryRef v13 = Value;
        CFTypeID v14 = CFGetTypeID(Value);
        if (v14 == CFDictionaryGetTypeID()) {
          CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)get_noise_models_for_sensor_id, v7);
        }
      }
      CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F52DF0]);
      if (v15)
      {
        CFDictionaryRef v16 = v15;
        CFTypeID v17 = CFGetTypeID(v15);
        if (v17 == CFDictionaryGetTypeID()) {
          CFDictionaryApplyFunction(v16, (CFDictionaryApplierFunction)get_noise_models_for_sensor_id, v7);
        }
      }
      CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F52DF8]);
      if (v18)
      {
        CFDictionaryRef v19 = v18;
        CFTypeID v20 = CFGetTypeID(v18);
        if (v20 == CFDictionaryGetTypeID()) {
          CFDictionaryApplyFunction(v19, (CFDictionaryApplierFunction)get_noise_models_for_sensor_id, v7);
        }
      }
    }
    int valuePtr = 0;
    *((void *)v7 + 60) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    int valuePtr = 3;
    *((void *)v7 + 61) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    char v21 = 1;
    int valuePtr = 1;
    *((void *)v7 + 62) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    intptr_t v22 = 2;
    int valuePtr = 2;
    *((void *)v7 + 63) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    int valuePtr = 4;
    *((void *)v7 + 64) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    void v7[2] = 0;
    *((void *)v7 + 2) = 0;
    if (a1 != 1)
    {
      if (a1 == 3)
      {
        intptr_t v22 = -2;
      }
      else
      {
        intptr_t v22 = 0;
        if (a1 != 2) {
          char v21 = 0;
        }
      }
    }
    *(void *)uint64_t v33 = 0;
    if (a3)
    {
      CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a3, @"kglContextAddress");
      if (v23)
      {
        CFNumberRef v24 = v23;
        CFTypeID v25 = CFGetTypeID(v23);
        if (v25 == CFNumberGetTypeID()) {
          CFNumberGetValue(v24, kCFNumberSInt64Type, v33);
        }
      }
    }
    uint64_t v26 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    global_queue = dispatch_get_global_queue(v22, 0);
    uint64_t v28 = dispatch_queue_create_with_target_V2("noise-reduction-context-init", v26, global_queue);
    *((void *)v7 + 2) = v28;
    char v29 = v21 ^ 1;
    if (!v28) {
      char v29 = 1;
    }
    if (v29)
    {
      multiBandNoiseReductionContextInit_internal((uint64_t)(v7 + 2), *(void **)v33, a3);
    }
    else
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __multiBandNoiseReductionGPUContextInit_block_invoke;
      block[3] = &unk_1E5C264A0;
      block[4] = *(void *)v33;
      void block[5] = v7 + 2;
      void block[6] = a3;
      dispatch_async(v28, block);
    }
  }
  else
  {
LABEL_17:
    multiBandNoiseReductionContextDestroy(v7);
    return 0;
  }
  return v7;
}

void get_noise_models_for_sensor_id(const __CFString *a1, const void *a2, uint64_t a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  long long range = 0u;
  *(_OWORD *)float32x4_t v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long valuePtr = 0u;
  v71[4] = xmmword_1E5C2B490;
  v71[5] = *(_OWORD *)&off_1E5C2B4A0;
  v71[6] = xmmword_1E5C2B4B0;
  uint64_t v72 = 1;
  v71[0] = xmmword_1E5C2B450;
  v71[1] = unk_1E5C2B460;
  v71[2] = xmmword_1E5C2B470;
  v71[3] = unk_1E5C2B480;
  v69[2] = xmmword_1E5C2B4E8;
  v69[3] = unk_1E5C2B4F8;
  uint64_t v70 = 1;
  v69[0] = xmmword_1E5C2B4C8;
  v69[1] = *(_OWORD *)algn_1E5C2B4D8;
  CFTypeID v5 = CFGetTypeID(a1);
  if (v5 != CFStringGetTypeID()) {
    goto LABEL_62;
  }
  CFTypeID v6 = CFGetTypeID(a2);
  if (v6 != CFDictionaryGetTypeID()) {
    goto LABEL_62;
  }
  if (*(unsigned char *)(a3 + 520)) {
    CFDictionaryRef v7 = v69;
  }
  else {
    CFDictionaryRef v7 = v71;
  }
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (*(unsigned char *)(a3 + 520)) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = 5;
  }
  while (1)
  {
    long long range = 0u;
    *(_OWORD *)float32x4_t v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long valuePtr = 0u;
    CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, *((const void **)v7 + 1));
    if (!Value)
    {
      if (!*((unsigned char *)v7 + 16)) {
        goto LABEL_61;
      }
      goto LABEL_59;
    }
    uint64_t v10 = Value;
    CFTypeID v11 = CFGetTypeID(Value);
    if (v11 != CFDictionaryGetTypeID() && *((unsigned char *)v7 + 16)) {
      goto LABEL_59;
    }
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 != CFDictionaryGetTypeID()) {
      goto LABEL_61;
    }
    CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v10, @"Bands");
    v67[0] = 0;
    v67[1] = 0;
    if (!v13) {
      break;
    }
    CFArrayRef v14 = v13;
    CFTypeID v15 = CFGetTypeID(v13);
    if (v15 != CFArrayGetTypeID()) {
      break;
    }
    HIDWORD(range) = CFArrayGetCount(v14);
    CFDictionaryRef v16 = malloc_type_malloc(96 * SHIDWORD(range), 0x1020040D89758F9uLL);
    v67[0] = v16;
    if (!v16) {
      break;
    }
    bzero(v16, 96 * SHIDWORD(range));
    CFNumberRef context = 0;
    CFNumberRef v75 = (CFNumberRef)v67[0];
    uint64_t v76 = 0;
    float v77 = v67[1];
    v79.length = SHIDWORD(range);
    v79.locatiouint64_t n = 0;
    CFArrayApplyFunction(v14, v79, (CFArrayApplierFunction)band_iterator, &context);
    if (context) {
      break;
    }
    CFTypeID v17 = malloc_type_malloc(8 * (int)v76, 0x100004000313F17uLL);
    v67[1] = v17;
    if (!v17) {
      break;
    }
    v68[0] = 0;
    v68[1] = v67[0];
    v68[2] = 0;
    v68[3] = v17;
    v80.length = SHIDWORD(range);
    v80.locatiouint64_t n = 0;
    CFArrayApplyFunction(v14, v80, (CFArrayApplierFunction)band_iterator, v68);
    if (LODWORD(v68[0])) {
      break;
    }
    CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v10, @"HighGainThreshold");
    if (v18 && (CFArrayRef v19 = v18, v20 = CFGetTypeID(v18), v20 == CFArrayGetTypeID()))
    {
      if (CFArrayGetCount(v19) > 5) {
        goto LABEL_61;
      }
      CFNumberRef context = (CFNumberRef)((char *)&v61 + 8);
      handle_band_data(v19, (int *)&range + 2, (uint64_t *)&context);
    }
    else
    {
      CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, @"HighGainThreshold");
      if (!v21 || (CFNumberRef v22 = v21, v23 = CFGetTypeID(v21), v23 != CFNumberGetTypeID()))
      {
LABEL_61:
        fig_log_get_emitter();
        FigDebugAssert3();
        goto LABEL_62;
      }
      CFNumberGetValue(v22, kCFNumberFloatType, (char *)&v61 + 8);
      DWORD2(range) = 1;
    }
    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, @"GammaY");
    if (!v24) {
      goto LABEL_61;
    }
    CFNumberRef v25 = v24;
    CFTypeID v26 = CFGetTypeID(v24);
    if (v26 != CFNumberGetTypeID()) {
      goto LABEL_61;
    }
    CFNumberGetValue(v25, kCFNumberFloatType, &valuePtr);
    CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, @"BandFactorY");
    if (!v27) {
      goto LABEL_61;
    }
    CFNumberRef v28 = v27;
    CFTypeID v29 = CFGetTypeID(v27);
    if (v29 != CFNumberGetTypeID()) {
      goto LABEL_61;
    }
    CFNumberGetValue(v28, kCFNumberFloatType, (char *)&valuePtr + 4);
    CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, @"BiasFactor");
    if (!v30) {
      goto LABEL_61;
    }
    CFNumberRef v31 = v30;
    CFTypeID v32 = CFGetTypeID(v30);
    if (v32 != CFNumberGetTypeID()) {
      goto LABEL_61;
    }
    CFNumberGetValue(v31, kCFNumberFloatType, (char *)&valuePtr + 8);
    CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, @"SlopeFactor");
    if (!v33) {
      goto LABEL_61;
    }
    CFNumberRef v34 = v33;
    CFTypeID v35 = CFGetTypeID(v33);
    if (v35 != CFNumberGetTypeID()) {
      goto LABEL_61;
    }
    CFNumberGetValue(v34, kCFNumberFloatType, (void *)((unint64_t)&valuePtr | 0xC));
    CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, @"GammaC");
    if (!v36) {
      goto LABEL_61;
    }
    CFNumberRef v37 = v36;
    CFTypeID v38 = CFGetTypeID(v36);
    if (v38 != CFNumberGetTypeID()) {
      goto LABEL_61;
    }
    CFNumberGetValue(v37, kCFNumberFloatType, &v60);
    CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, @"BandFactorC");
    if (!v39) {
      goto LABEL_61;
    }
    CFNumberRef v40 = v39;
    CFTypeID v41 = CFGetTypeID(v39);
    if (v41 != CFNumberGetTypeID()) {
      goto LABEL_61;
    }
    CFNumberGetValue(v40, kCFNumberFloatType, (char *)&v60 + 4);
    CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, @"LensShadingFactorLuma");
    if (!v42) {
      goto LABEL_61;
    }
    CFNumberRef v43 = v42;
    CFTypeID v44 = CFGetTypeID(v42);
    if (v44 != CFNumberGetTypeID()) {
      goto LABEL_61;
    }
    CFNumberGetValue(v43, kCFNumberFloatType, (char *)&v60 + 8);
    CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, @"LensShadingFactorChroma");
    if (!v45) {
      goto LABEL_61;
    }
    CFNumberRef v46 = v45;
    CFTypeID v47 = CFGetTypeID(v45);
    if (v47 != CFNumberGetTypeID()) {
      goto LABEL_61;
    }
    CFNumberGetValue(v46, kCFNumberFloatType, (char *)&v60 + 12);
    CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, @"ChromaDemoireStrength");
    if (!v48) {
      goto LABEL_61;
    }
    CFNumberRef v49 = v48;
    CFTypeID v50 = CFGetTypeID(v48);
    if (v50 != CFNumberGetTypeID()) {
      goto LABEL_61;
    }
    CFNumberGetValue(v49, kCFNumberFloatType, &v61);
    if (!CFStringGetCString(a1, buffer, 10, 0)) {
      goto LABEL_62;
    }
    uint64_t v58 = v8;
    LODWORD(v68[0]) = 0;
    LODWORD(v68[0]) = strtoul(buffer, 0, 16);
    CFNumberRef v51 = CFNumberCreate(allocator, kCFNumberSInt32Type, v68);
    CFNumberRef v52 = CFNumberCreate(allocator, kCFNumberSInt32Type, v7);
    CFNumberRef context = v51;
    CFNumberRef v75 = v52;
    CFArrayRef v53 = CFArrayCreate(allocator, (const void **)&context, 2, MEMORY[0x1E4F1D510]);
    CFDataRef v54 = CFDataCreate(allocator, (const UInt8 *)&valuePtr, 144);
    CFDataRef v55 = v54;
    if (v53 && v54)
    {
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 472), v53, v54);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 464), v53, v10);
    }
    if (v51) {
      CFRelease(v51);
    }
    if (v52) {
      CFRelease(v52);
    }
    if (v53) {
      CFRelease(v53);
    }
    if (v55) {
      CFRelease(v55);
    }
    uint64_t v8 = v58;
LABEL_59:
    CFDictionaryRef v7 = (_OWORD *)((char *)v7 + 24);
    if (!--v8) {
      return;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  free(v67[0]);
  v67[0] = 0;
  free(v67[1]);
  v67[1] = 0;
LABEL_62:
  free(v67[0]);
  v67[0] = 0;
  free(v67[1]);
}

void multiBandNoiseReductionContextDestroy(_DWORD *a1)
{
  if (a1 && *a1 == 1459126783)
  {
    mach_port_t v2 = a1 + 2;
    WaitForInitializationToFinish_0((uint64_t)(a1 + 2));
    CFDictionaryRef v3 = (const void *)*((void *)a1 + 3);
    if (v3)
    {
      CFRelease(v3);
      *((void *)a1 + 3) = 0;
    }
    [MEMORY[0x1E4F38D58] setCurrentContext:*((void *)a1 + 7)];
    glUseProgram(0);
    glActiveTexture(0x84C0u);
    glBindTexture(0xDE1u, 0);
    glActiveTexture(0x84C1u);
    glBindTexture(0xDE1u, 0);
    glBindFramebuffer(0x8D40u, 0);
    glDeleteFramebuffers(4, a1 + 27);
    glDeleteFramebuffers(4, a1 + 48);
    glDeleteFramebuffers(4, a1 + 56);
    glDeleteFramebuffers(4, a1 + 37);
    glDeleteFramebuffers(1, a1 + 43);
    glDeleteTextures(4, a1 + 23);
    glDeleteTextures(4, a1 + 33);
    glDeleteTextures(4, a1 + 44);
    glDeleteTextures(4, a1 + 52);
    glDeleteTextures(2, a1 + 31);
    glDeleteTextures(2, a1 + 41);
    releasePixelBuffers((uint64_t)(a1 + 2));
    glDeleteProgram(a1[77]);
    glDeleteProgram(a1[80]);
    glDeleteProgram(a1[86]);
    glDeleteProgram(a1[83]);
    glDeleteProgram(a1[89]);
    glDeleteProgram(a1[92]);
    glDeleteProgram(a1[95]);
    glDeleteProgram(a1[98]);
    glDeleteProgram(a1[101]);
    glDeleteProgram(a1[104]);
    glDeleteProgram(a1[107]);
    glDeleteProgram(a1[110]);
    glDeleteProgram(a1[113]);
    [MEMORY[0x1E4F38D58] setCurrentContext:0];
    if (*((unsigned char *)a1 + 306))
    {
      uint64_t v4 = (void *)*((void *)a1 + 7);
      if (v4) {
    }
      }
    CFTypeID v5 = *((void *)a1 + 2);
    if (v5) {
      dispatch_release(v5);
    }
    *((void *)a1 + 57) = 0;
    *(_OWORD *)(a1 + 106) = 0u;
    *(_OWORD *)(a1 + 110) = 0u;
    *(_OWORD *)(a1 + 9_Block_object_dispose(&STACK[0x4C8], 8) = 0u;
    *(_OWORD *)(a1 + 102) = 0u;
    *(_OWORD *)(a1 + 90) = 0u;
    *(_OWORD *)(a1 + 94) = 0u;
    *(_OWORD *)(a1 + 82) = 0u;
    *(_OWORD *)(a1 + 86) = 0u;
    *(_OWORD *)(a1 + 74) = 0u;
    *(_OWORD *)(a1 + 7_Block_object_dispose(&STACK[0x4C8], 8) = 0u;
    *(_OWORD *)(a1 + 66) = 0u;
    *(_OWORD *)(a1 + 70) = 0u;
    *(_OWORD *)(a1 + 5_Block_object_dispose(&STACK[0x4C8], 8) = 0u;
    *(_OWORD *)(a1 + 62) = 0u;
    *(_OWORD *)(a1 + 50) = 0u;
    *(_OWORD *)(a1 + 54) = 0u;
    *(_OWORD *)(a1 + 42) = 0u;
    *(_OWORD *)(a1 + 46) = 0u;
    *(_OWORD *)(a1 + 34) = 0u;
    *(_OWORD *)(a1 + 3_Block_object_dispose(&STACK[0x4C8], 8) = 0u;
    *(_OWORD *)(a1 + 26) = 0u;
    *(_OWORD *)(a1 + 30) = 0u;
    *(_OWORD *)(a1 + 1_Block_object_dispose(&STACK[0x4C8], 8) = 0u;
    *(_OWORD *)(a1 + 22) = 0u;
    *(_OWORD *)(a1 + 10) = 0u;
    *(_OWORD *)(a1 + 14) = 0u;
    *mach_port_t v2 = 0u;
    *(_OWORD *)(a1 + 6) = 0u;
    CFDictionaryRef v6 = (const __CFDictionary *)*((void *)a1 + 59);
    if (v6)
    {
      CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)free_calibration_data_allocations, 0);
      CFDictionaryRef v7 = (const void *)*((void *)a1 + 59);
      if (v7) {
        CFRelease(v7);
      }
    }
    uint64_t v8 = (const void *)*((void *)a1 + 58);
    if (v8) {
      CFRelease(v8);
    }
    CFNumberRef v9 = (const void *)*((void *)a1 + 60);
    if (v9)
    {
      CFRelease(v9);
      *((void *)a1 + 60) = 0;
    }
    uint64_t v10 = (const void *)*((void *)a1 + 61);
    if (v10)
    {
      CFRelease(v10);
      *((void *)a1 + 61) = 0;
    }
    CFTypeID v11 = (const void *)*((void *)a1 + 62);
    if (v11)
    {
      CFRelease(v11);
      *((void *)a1 + 62) = 0;
    }
    CFTypeID v12 = (const void *)*((void *)a1 + 63);
    if (v12)
    {
      CFRelease(v12);
      *((void *)a1 + 63) = 0;
    }
    CFArrayRef v13 = (const void *)*((void *)a1 + 64);
    if (v13) {
      CFRelease(v13);
    }
    bzero(a1, 0x210uLL);
    free(a1);
  }
}

void free_calibration_data_allocations(int a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  free(*((void **)BytePtr + 16));
  CFDictionaryRef v3 = (void *)*((void *)BytePtr + 17);
  free(v3);
}

_DWORD *multiBandNoiseReductionReleaseBuffers(_DWORD *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*result == 1459126783)
    {
      uint64_t v2 = (uint64_t)(result + 2);
      WaitForInitializationToFinish_0((uint64_t)(result + 2));
      [MEMORY[0x1E4F38D58] setCurrentContext:*((void *)v1 + 7)];
      glActiveTexture(0x84C0u);
      *(void *)(v1 + 19) = -1;
      v1[22] = -1;
      glDeleteTextures(4, v1 + 44);
      glGenTextures(4, v1 + 44);
      glDeleteTextures(4, v1 + 52);
      glGenTextures(4, v1 + 52);
      glDeleteTextures(4, v1 + 23);
      glGenTextures(4, v1 + 23);
      glDeleteTextures(4, v1 + 33);
      glGenTextures(4, v1 + 33);
      glDeleteTextures(2, v1 + 31);
      glGenTextures(2, v1 + 31);
      CFDictionaryRef v3 = v1 + 41;
      glDeleteTextures(2, v3);
      glGenTextures(2, v3);
      releasePixelBuffers(v2);
      glFinish();
      uint64_t v4 = (void *)MEMORY[0x1E4F38D58];
      return (_DWORD *)[v4 setCurrentContext:0];
    }
  }
  return result;
}

uint64_t multiBandNoiseReductionWithTuningOptions(_DWORD *a1, CMSampleBufferRef sbuf, opaqueCMSampleBuffer *a3, const __CFDictionary *a4)
{
  if (sbuf != a3 && a1 && *a1 == 1459126783)
  {
    CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
    CVPixelBufferRef v14 = CMSampleBufferGetImageBuffer(a3);
    CFDictionaryRef v9 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F53070], 0);
    CFTypeRef v10 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55C58], 0);
    CFTypeRef v11 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55AC0], 0);
    uint64_t v12 = multiBandNoiseReductionGPU((uint64_t)a1, ImageBuffer, &v14, 1, v9, a4, v10, v11);
    if (v12)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return v12;
}

uint64_t multiBandNoiseReductionGPU(uint64_t a1, __CVBuffer *a2, CVPixelBufferRef *a3, int a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, const void *a8)
{
  v166[3] = *MEMORY[0x1E4F143B8];
  CFTypeID v15 = (_DWORD *)(a1 + 8);
  WaitForInitializationToFinish_0(a1 + 8);
  if (!*(void *)(a1 + 56)) {
    goto LABEL_151;
  }
  if ((*v15 & 0xFFFFFFFD) == 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v140 = 4294967294;
    goto LABEL_127;
  }
  objc_msgSend(MEMORY[0x1E4F38D58], "setCurrentContext:");
  if (!a2 || !a3 || *a3 == a2) {
    goto LABEL_151;
  }
  int16x8_t v144 = a7;
  uint64_t v153 = (uint64_t)v15;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  if ((PixelFormatType & 0xFFFFFFEF) != 0x34323066)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v140 = FigSignalErrorAt();
    goto LABEL_127;
  }
  OSType v17 = PixelFormatType;
  CFDictionaryRef theDict = a5;
  unint64_t v143 = a8;
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a2, 1uLL);
  int v20 = CVPixelBufferGetWidthOfPlane(a2, 0);
  int v21 = CVPixelBufferGetHeightOfPlane(a2, 0);
  if (v17 != CVPixelBufferGetPixelFormatType(*a3)
    || WidthOfPlane != CVPixelBufferGetWidthOfPlane(*a3, 1uLL)
    || HeightOfPlane != CVPixelBufferGetHeightOfPlane(*a3, 1uLL)
    || v20 != CVPixelBufferGetWidthOfPlane(*a3, 0)
    || v21 != CVPixelBufferGetHeightOfPlane(*a3, 0))
  {
LABEL_151:
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v140 = 4294954516;
    goto LABEL_127;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a2);
  if (!IOSurface) {
    goto LABEL_152;
  }
  CFAllocatorRef allocator = (CFAllocatorRef)a4;
  if (a4 >= 1)
  {
    uint64_t v22 = a4;
    CFTypeID v23 = a3;
    while (CVPixelBufferGetIOSurface(*v23))
    {
      ++v23;
      if (!--v22) {
        goto LABEL_17;
      }
    }
    goto LABEL_152;
  }
LABEL_17:
  if (WidthOfPlane < 1
    || *(_DWORD *)(a1 + 68) < WidthOfPlane
    || HeightOfPlane < 1
    || *(_DWORD *)(a1 + 72) < HeightOfPlane
    || (v20 & 3) != 0
    || (v21 & 3) != 0)
  {
LABEL_152:
    fig_log_get_emitter();
LABEL_154:
    FigDebugAssert3();
    uint64_t v140 = 0xFFFFFFFFLL;
    goto LABEL_127;
  }
  int v152 = CVPixelBufferGetWidthOfPlane(a2, 0);
  int v149 = CVPixelBufferGetHeightOfPlane(a2, 0);
  kedouble y = CVPixelBufferGetPixelFormatType(a2);
  glActiveTexture(0x84C0u);
  IOSurfaceRef v24 = CVPixelBufferGetIOSurface(a2);
  if (!v24) {
    goto LABEL_153;
  }
  unsigned __int8 v146 = v20;
  buffer = v24;
  unsigned __int8 v145 = v21;
  int v154 = a4;
  int v25 = CVPixelBufferGetWidthOfPlane(a2, 0);
  int v26 = CVPixelBufferGetHeightOfPlane(a2, 0);
  OSType v27 = CVPixelBufferGetPixelFormatType(a2);
  OSType v28 = v27;
  if (*(_DWORD *)(a1 + 76) != v25 || *(_DWORD *)(a1 + 80) != v26 || *(_DWORD *)(a1 + 88) != v27)
  {
    uint64_t v29 = 0;
    uint64_t v30 = a1 + 248;
    do
    {
      CFNumberRef v31 = *(__CVBuffer **)(v30 + v29);
      if (v31)
      {
        CVPixelBufferRelease(v31);
        *(void *)(v30 + v29) = 0;
      }
      v29 += 8;
    }
    while (v29 != 24);
    uint64_t v32 = 0;
    CFNumberRef v33 = (GLuint *)(a1 + 112);
    uint64_t v34 = a1 + 248;
    do
    {
      if (v32)
      {
        int v35 = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(v34 + v32 - 8), 1uLL);
        CFNumberRef v36 = *(__CVBuffer **)(v34 + v32 - 8);
      }
      else
      {
        int v35 = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
        CFNumberRef v36 = a2;
      }
      int v37 = CVPixelBufferGetHeightOfPlane(v36, 1uLL);
      YCC420CVPixelBufferRef = createYCC420CVPixelBufferRef(v35, v37, v28);
      *(void *)(v34 + v32) = YCC420CVPixelBufferRef;
      CFNumberRef v39 = CVPixelBufferGetIOSurface(YCC420CVPixelBufferRef);
      if (!v39) {
        goto LABEL_153;
      }
      CFNumberRef v40 = v39;
      if (!v32)
      {
        if (BindTextureToFbo(*(void **)(a1 + 56), v39, *(_DWORD *)(a1 + 128), 0, 0x1908u, 0)) {
          goto LABEL_153;
        }
      }
      if (BindTextureToFbo(*(void **)(a1 + 56), v40, *(v33 - 4), *v33, 0x8227u, 0)
        || BindTextureToFbo(*(void **)(a1 + 56), v40, v33[17], v33[21], 0x1908u, 1uLL))
      {
        goto LABEL_153;
      }
      v32 += 8;
      ++v33;
    }
    while (v32 != 24);
  }
  *(void *)(a1 + 240) = a2;
  if (BindTextureToFbo(*(void **)(a1 + 56), buffer, *(_DWORD *)(a1 + 124), 0, 0x1908u, 0)
    || BindTextureToFbo(*(void **)(a1 + 56), buffer, *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 192), 0x1908u, 1uLL)|| BindTextureToFbo(*(void **)(a1 + 56), buffer, *(_DWORD *)(a1 + 92), *(_DWORD *)(a1 + 108), 0x8227u, 0))
  {
LABEL_153:
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    FigDebugAssert3();
    glBindTexture(0xDE1u, 0);
    fig_log_get_emitter();
    goto LABEL_154;
  }
  if (*(_DWORD *)(a1 + 76) != v152 || *(_DWORD *)(a1 + 80) != v149 || *(_DWORD *)(a1 + 84) != v154)
  {
    if (v154 != 1) {
      goto LABEL_65;
    }
LABEL_51:
    releaseOutputPixelBuffers(v153);
    uint64_t v41 = 0;
    int v42 = 1;
    uint64_t v43 = 136;
    while (1)
    {
      uint64_t v44 = a1 + v41;
      CFNumberRef v45 = v41 ? (CVPixelBufferRef *)(a1 + v41 + 272) : a3;
      int v46 = CVPixelBufferGetWidthOfPlane(*v45, 1uLL);
      int v47 = CVPixelBufferGetHeightOfPlane(*v45, 1uLL);
      CFNumberRef v48 = createYCC420CVPixelBufferRef(v46, v47, key);
      *(void *)(v44 + 280) = v48;
      IOSurfaceRef v49 = CVPixelBufferGetIOSurface(v48);
      if (!v49) {
        goto LABEL_153;
      }
      CFTypeID v50 = v49;
      CFNumberRef v51 = CVPixelBufferGetIOSurface(*v45);
      if (!v51
        || BindLumaAndChromaTexturesToDualFbo(*(void **)(a1 + 56), v50, *(_DWORD *)(a1 + v43), v51, *(_DWORD *)(a1 + v43 + 72), *(_DWORD *)(a1 + v43 + 16)))
      {
        goto LABEL_153;
      }
      if (v42 == 3)
      {
        CFNumberRef v52 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(v44 + 280));
        if (!v52
          || BindTextureToFbo(*(void **)(a1 + 56), v52, *(_DWORD *)(a1 + v43 + 76), *(_DWORD *)(a1 + v43 + 92), 0x1908u, 1uLL))
        {
          goto LABEL_153;
        }
      }
      else if (v42 == 1 {
             && BindTextureToFbo(*(void **)(a1 + 56), v50, *(_DWORD *)(a1 + v43 + 32), 0, 0x1908u, 0))
      }
      {
        goto LABEL_153;
      }
      v41 += 8;
      ++v42;
      v43 += 4;
      if (v41 == 24) {
        goto LABEL_65;
      }
    }
  }
  if (v154 == 1 && *(_DWORD *)(a1 + 88) != key) {
    goto LABEL_51;
  }
LABEL_65:
  *(_DWORD *)(a1 + 76) = v152;
  *(_DWORD *)(a1 + 80) = v149;
  *(_DWORD *)(a1 + 84) = v154;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x4C8], 8) = key;
  CFArrayRef v53 = CVPixelBufferGetIOSurface(*a3);
  if (!v53
    || BindTextureToFbo(*(void **)(a1 + 56), v53, *(_DWORD *)(a1 + 164), *(_DWORD *)(a1 + 172), 0x1908u, 0))
  {
    goto LABEL_153;
  }
  if (v154 >= 1)
  {
    uint64_t v54 = 0;
    do
    {
      CFDataRef v55 = CVPixelBufferGetIOSurface(a3[v54]);
      if (!v55) {
        goto LABEL_153;
      }
      char v56 = v55;
      if (v54 >= (v154 - 1))
      {
        if (BindTextureToFbo(*(void **)(a1 + 56), v55, *(_DWORD *)(a1 + 4 * v54 + 208), *(_DWORD *)(a1 + 4 * v54 + 224), 0x1908u, 1uLL))goto LABEL_153; {
        uint64_t v57 = v54 + 1;
        }
      }
      else
      {
        uint64_t v57 = v54 + 1;
        uint64_t v58 = CVPixelBufferGetIOSurface(a3[v54 + 1]);
        if (!v58) {
          goto LABEL_153;
        }
        int v59 = v58;
        if (BindLumaAndChromaTexturesToDualFbo(*(void **)(a1 + 56), v58, *(_DWORD *)(a1 + 8 + 4 * v57 + 124), v56, *(_DWORD *)(a1 + 8 + 4 * v54 + 200), *(_DWORD *)(a1 + 8 + 4 * v57 + 140)))goto LABEL_153; {
        if (!v54)
        }
        {
          if (BindTextureToFbo(*(void **)(a1 + 56), v59, *(_DWORD *)(a1 + 4 * v57 + 164), 0, 0x1908u, 0))goto LABEL_153; {
          uint64_t v57 = 1;
          }
        }
      }
      *(void *)(a1 + 8 * v54 + 272) = a3[v54];
      uint64_t v54 = v57;
    }
    while ((CFAllocatorRef)v57 != allocator);
  }
  glBindTexture(0xDE1u, 0);
  uint64_t v60 = 0;
  IOSurfaceRef v165 = IOSurface;
  memset(v166, 0, 24);
  do
  {
    CVBufferPropagateAttachments(a2, *(CVBufferRef *)(a1 + v60 * 8 + 248));
    IOSurfaceRef v61 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a1 + v60 * 8 + 248));
    v166[v60] = v61;
    if (!v61)
    {
      fig_log_get_emitter();
      goto LABEL_154;
    }
    ++v60;
  }
  while (v60 != 3);
  float v162 = 0.0;
  uint64_t v161 = 0;
  get_exposure_parameters(theDict, a6, (float *)&v161);
  device_parameters = get_device_parameters(a1, theDict, a6, v144, v143);
  uint64_t v63 = 0;
  uint64_t v64 = v161;
  long long v65 = v164;
  float v66 = v162;
  do
  {
    compute_noise_model(v153, (uint64_t)v65, (uint64_t)device_parameters, v63++, 1, *(float *)&v64, *((float *)&v64 + 1), v66);
    v65 += 14;
  }
  while (v63 != 4);
  GLfloat v67 = *((float *)device_parameters + 8);
  uint64_t v68 = (CFRunLoopMode *)MEMORY[0x1E4F1D410];
  bufferCGFloat a = (IOSurfaceRef)device_parameters;
  if (*(void *)(a1 + 24))
  {
    RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
    Current = CFRunLoopGetCurrent();
    float32x4_t v150 = RunLoopSource;
    CFRunLoopAddSource(Current, RunLoopSource, *v68);
  }
  else
  {
    float32x4_t v150 = 0;
  }
  if (((v145 | v146) & 0xF) != 0 || !*(unsigned char *)(a1 + 304))
  {
    allocatorCGFloat b = (GLuint *)(a1 + 344);
    size_t v90 = (GLuint *)(a1 + 196);
    char v91 = (CVPixelBufferRef *)(a1 + 248);
    for (uint64_t i = 10; i != 52; i += 14)
    {
      glActiveTexture(0x84C0u);
      glBindTexture(0xDE1u, *(v90 - 26));
      glTexParameterf(0xDE1u, 0x2802u, 33648.0);
      glTexParameterf(0xDE1u, 0x2803u, 33648.0);
      glTexParameterf(0xDE1u, 0x2800u, 9729.0);
      glTexParameterf(0xDE1u, 0x2801u, 9729.0);
      glBindFramebuffer(0x8D40u, *(v90 - 21));
      unsigned long long v93 = *(GLuint **)&v164[i];
      bindVertexAttributes((uint64_t)v93);
      int v94 = CVPixelBufferGetWidthOfPlane(*v91, 0);
      if (v94 >= 0) {
        int v95 = v94;
      }
      else {
        int v95 = v94 + 1;
      }
      GLsizei v96 = v95 >> 1;
      GLsizei v97 = CVPixelBufferGetHeightOfPlane(*v91, 0);
      int v98 = CVPixelBufferGetWidthOfPlane(*(v91 - 1), 0);
      if (v98 >= 0) {
        int v99 = v98;
      }
      else {
        int v99 = v98 + 1;
      }
      int v100 = v99 >> 1;
      int v101 = CVPixelBufferGetHeightOfPlane(*(v91 - 1), 0);
      glViewport(0, 0, v96, v97);
      glUseProgram(*v93);
      GLint UniformLocation = glGetUniformLocation(*v93, "pixel_pitch");
      glUniform2f(UniformLocation, 1.0 / (float)(v100 - 1), 1.0 / (float)(v101 - 1));
      glDrawArrays(5u, 0, 4);
      glFlush();
      glActiveTexture(0x84C0u);
      glBindTexture(0xDE1u, *(v90 - 5));
      glTexParameterf(0xDE1u, 0x2802u, 33648.0);
      glTexParameterf(0xDE1u, 0x2803u, 33648.0);
      glTexParameterf(0xDE1u, 0x2800u, 9729.0);
      glTexParameterf(0xDE1u, 0x2801u, 9729.0);
      bindVertexAttributes((uint64_t)allocatorb);
      GLuint v103 = *v90++;
      glBindFramebuffer(0x8D40u, v103);
      int v104 = CVPixelBufferGetWidthOfPlane(*v91, 1uLL);
      if (v104 >= 0) {
        int v105 = v104;
      }
      else {
        int v105 = v104 + 1;
      }
      GLsizei v106 = v105 >> 1;
      GLsizei v107 = CVPixelBufferGetHeightOfPlane(*v91, 1uLL);
      int v108 = CVPixelBufferGetWidthOfPlane(*(v91 - 1), 1uLL);
      if (v108 >= 0) {
        int v109 = v108;
      }
      else {
        int v109 = v108 + 1;
      }
      int v110 = v109 >> 1;
      int v111 = CVPixelBufferGetHeightOfPlane(*(v91 - 1), 1uLL);
      glViewport(0, 0, v106, v107);
      glUseProgram(*allocatorb);
      GLint v112 = glGetUniformLocation(*allocatorb, "pixel_pitch");
      glUniform2f(v112, 1.0 / (float)(v110 - 1), 1.0 / (float)(v111 - 1));
      glDrawArrays(5u, 0, 4);
      glFlush();
      ++v91;
    }
  }
  else
  {
    int v163 = 0;
    float v71 = v164[12];
    float v72 = v164[13];
    int v73 = *(_DWORD *)(a1 + 32);
    int v74 = *(_DWORD *)(a1 + 36);
    int v75 = *(_DWORD *)(a1 + 40);
    int v76 = *(_DWORD *)(a1 + 44);
    int v77 = *(_DWORD *)(a1 + 48);
    int v78 = *(_DWORD *)(a1 + 52);
    unsigned int v79 = v76 * v74;
    CFRange v80 = (unsigned int *)malloc_type_calloc(1uLL, 4 * (2 * (v76 * v74 + v75 * v73)), 0x100004052888210uLL);
    if (v80)
    {
      float v81 = v80;
      m2m_filter_coefficients(v74, v76, v77, v78, v80, v72);
      m2m_filter_coefficients(v74, v76, v77, v78, &v81[v79], v71);
      m2m_filter_coefficients(v73, v75, v77, v78, &v81[v79 + v79], v72);
      m2m_filter_coefficients(v73, v75, v77, v78, &v81[v79 + v79 + v75 * v73], v71);
      IOSurfaceAcceleratorSetCustomFilter();
      free(v81);
    }
    uint64_t v82 = 0;
    allocatorCGFloat a = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    long long v83 = (const void *)*MEMORY[0x1E4F6ED70];
    double v84 = (const void *)*MEMORY[0x1E4F1CFD0];
    size_t v85 = (const void *)*MEMORY[0x1E4F6ECB8];
    long long v86 = (const void *)*MEMORY[0x1E4F6EC80];
    keyCGFloat a = (void *)*MEMORY[0x1E4F6ED60];
    while (v82 != 24)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, v83, v84);
      CFDictionarySetValue(Mutable, v85, v84);
      CFDictionarySetValue(Mutable, v86, v84);
      if (v82 != 16) {
        CFDictionarySetValue(Mutable, keya, v84);
      }
      int v88 = IOSurfaceAcceleratorTransferSurface();
      CFRelease(Mutable);
      v82 += 8;
      if (v88)
      {
        int v89 = 0;
        goto LABEL_121;
      }
    }
    if (v163 <= 0)
    {
      CFStringRef v113 = (const __CFString *)*MEMORY[0x1E4F1D418];
      do
        CFRunLoopRunInMode(v113, 1.0, 1u);
      while (v163 < 1);
    }
  }
  int16x8_t v114 = (float *)((char *)buffera + 24);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 188));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  glActiveTexture(0x84C1u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 104));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glBindFramebuffer(0x8D40u, *(_DWORD *)(a1 + 236));
  bindVertexAttributes(a1 + 356);
  int v115 = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(a1 + 296), 1uLL);
  if (v115 >= 0) {
    int v116 = v115;
  }
  else {
    int v116 = v115 + 1;
  }
  GLsizei v117 = v116 >> 1;
  GLsizei v118 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(a1 + 296), 1uLL);
  glViewport(0, 0, v117, v118);
  glUseProgram(*(_DWORD *)(a1 + 356));
  GLint v119 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "luma_sigma_constant");
  glUniform1f(v119, v164[44]);
  GLint v120 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "chroma_sigma_r");
  glUniform1f(v120, v164[46]);
  GLint v121 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "chroma_sigma_b");
  glUniform1f(v121, v164[47]);
  GLint v122 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "lens_shading_factors");
  glUniform2f(v122, *((float *)buffera + 6) + -1.0, *((float *)buffera + 7) + -1.0);
  GLint v123 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "chroma_demoire_strength");
  glUniform1f(v123, v67);
  GLint v124 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "pixel_pitch");
  glUniform2f(v124, 1.0 / (float)v117, 1.0 / (float)v118);
  glDrawArrays(5u, 0, 4);
  glFlush();
  remix_denoise_luma_chroma_level(v153, (uint64_t)v164, v114, 3, v67);
  int v125 = 2;
  do
  {
    remix_denoise_luma_chroma_level(v153, (uint64_t)v164, v114, v125, v67);
    BOOL v126 = v125-- != 0;
  }
  while (v125 != 0 && v126);
  GLsizei v127 = (int)CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(a1 + 272), 0) / 4;
  GLsizei v128 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(a1 + 272), 0);
  int v129 = (int)CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(a1 + 280), 0) / 4;
  int v130 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(a1 + 280), 0);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 124));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  glActiveTexture(0x84C1u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 128));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glActiveTexture(0x84C2u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 168));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glBindFramebuffer(0x8D40u, *(_DWORD *)(a1 + 172));
  bindVertexAttributes(a1 + 368);
  glViewport(0, 0, v127, v128);
  glUseProgram(*(_DWORD *)(a1 + 368));
  GLint v131 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "diff_remix");
  glUniform1f(v131, v164[6]);
  GLint v132 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "pixel_pitch");
  GLfloat v133 = 1.0 / (double)(v129 - 1);
  GLfloat v134 = 1.0 / (double)(v130 - 1);
  glUniform2f(v132, v133, v134);
  GLint v135 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "luma_sigma_intercept");
  glUniform1f(v135, v164[0]);
  GLint v136 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "luma_sigma_max");
  glUniform1f(v136, v164[2]);
  GLint v137 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "luma_sigma_slope");
  glUniform1f(v137, v164[1]);
  GLint v138 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "flatness_threshold");
  glUniform1f(v138, v164[9]);
  glDrawArrays(5u, 0, 4);
  glFlush();
  int v89 = 1;
LABEL_121:
  if (v150)
  {
    unint64_t v139 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v139, v150, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  }
  if (!v89)
  {
    fig_log_get_emitter();
    goto LABEL_154;
  }
  if (v154 >= 2) {
    bzero((void *)(a1 + 280), 8 * (v154 - 1));
  }
  multibandNoiseReductionFinalize(a6);
  uint64_t v140 = 0;
LABEL_127:
  glGetError();
  [MEMORY[0x1E4F38D58] setCurrentContext:0];
  return v140;
}

uint64_t multiBandNoiseReductionPyramidLayers(_DWORD *a1)
{
  if (a1 && *a1 == 1459126783) {
    return 4;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294954516;
}

uint64_t multiBandNoiseReductionWithPyramid(_DWORD *a1, CMSampleBufferRef sbuf, CVPixelBufferRef *a3, int a4, const __CFDictionary *a5)
{
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  CFDictionaryRef v11 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F53070], 0);
  if (ImageBuffer != *a3 && a1 && *a1 == 1459126783 && ((CFDictionaryRef v12 = v11, a4 == 1) || a4 == 4))
  {
    CFTypeRef v13 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F55C58], 0);
    uint64_t v14 = multiBandNoiseReductionGPU((uint64_t)a1, ImageBuffer, a3, a4, v12, a5, v13, 0);
    if (v14)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return v14;
}

uint64_t multiBandNoiseReductionPyramidFusionMaxBuffers(_DWORD *a1)
{
  if (a1 && *a1 == 1459126783) {
    return 4;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294954516;
}

uint64_t multiBandPyramidFusion(const __CFNumber *Value, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, CFDictionaryRef theDict)
{
  CFNumberRef v113 = Value;
  v130[28] = *MEMORY[0x1E4F143B8];
  if ((int)a4 > 4) {
    return 4294954516;
  }
  uint64_t v11 = a4;
  v107[1] = v7;
  LODWORD(v117) = 0;
  CFDictionaryRef v111 = a6;
  if (theDict && (CFDictionaryRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"TNRFusionAlgorithm")) != 0)
  {
    CFDictionaryRef Value = (const __CFNumber *)CFNumberGetValue(Value, kCFNumberIntType, &v117);
    int v14 = (int)v117;
  }
  else
  {
    int v14 = 0;
  }
  v107[2] = v107;
  CFDictionaryRef v108 = theDict;
  unint64_t v15 = v11;
  uint64_t v16 = MEMORY[0x1F4188790](Value, a2, a3, a4);
  uint64_t v20 = MEMORY[0x1F4188790](v16, v17, v18, v19);
  uint64_t v24 = MEMORY[0x1F4188790](v20, v21, v22, v23);
  MEMORY[0x1F4188790](v24, v25, v26, v27);
  memset(v129, 0, sizeof(v129));
  long long v128 = 0u;
  long long v127 = 0u;
  long long v126 = 0u;
  memset(v125, 0, sizeof(v125));
  long long v124 = 0u;
  long long v123 = 0u;
  long long v122 = 0u;
  GLint v119 = v28;
  GLint v120 = v29;
  GLint v121 = (GLuint *)((char *)v107 - v30);
  uint64_t v112 = (uint64_t)v113 + 8;
  DWORD2(v12_Block_object_dispose(&STACK[0x4C8], 8) = v11;
  id v117 = (id)*((void *)v113 + 7);
  GLsizei v118 = v31;
  objc_msgSend(MEMORY[0x1E4F38D58], "setCurrentContext:");
  if ((int)v11 >= 1) {
    memcpy(v125, a2, 8 * v11);
  }
  uint64_t v32 = 0;
  BYTE12(v12_Block_object_dispose(&STACK[0x4C8], 8) = v14 == 1;
  v129[6] = a3;
  CFNumberRef v33 = (char *)v113 + 240;
  do
  {
    uint64_t v34 = a5;
    if (v32) {
      uint64_t v34 = *(void *)&v33[v32];
    }
    if (!v34)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v8 = 4294954514;
      goto LABEL_83;
    }
    *(void *)((char *)&v126 + v32) = v34;
    v32 += 8;
  }
  while (v32 != 32);
  uint64_t v109 = v11;
  if ((int)v11 >= 1)
  {
    uint64_t v35 = 0;
    BOOL v36 = 1;
    float32x2_t v37 = (float32x2_t)vdup_n_s32(0x437F0000u);
    while (1)
    {
      CFTypeID v38 = *(__CVBuffer **)(v125[v35] + 24);
      int WidthOfPlane = CVPixelBufferGetWidthOfPlane(v38, 0);
      int HeightOfPlane = CVPixelBufferGetHeightOfPlane(v38, 0);
      int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v38, 0);
      if (CVPixelBufferLockBaseAddress(v38, 1uLL))
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        fig_log_get_emitter();
        uint64_t v8 = 0xFFFFFFFFLL;
LABEL_96:
        FigDebugAssert3();
        goto LABEL_82;
      }
      BaseAddressOfPlane = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(v38, 0);
      if (HeightOfPlane < 1)
      {
        int v45 = 0;
        int v44 = 0;
      }
      else
      {
        uint64_t v43 = 0;
        int v44 = 0;
        int v45 = 0;
        do
        {
          int v46 = BaseAddressOfPlane;
          uint64_t v47 = WidthOfPlane;
          if (WidthOfPlane >= 1)
          {
            do
            {
              unsigned int v49 = *v46++;
              unsigned int v48 = v49;
              BOOL v50 = v49 >= 0x81;
              if (v49 >= 0x81) {
                unsigned int v48 = 0;
              }
              v45 += v48;
              if (!v50) {
                ++v44;
              }
              --v47;
            }
            while (v47);
          }
          ++v43;
          BaseAddressOfPlane += BytesPerRowOfPlane;
        }
        while (v43 != HeightOfPlane);
      }
      if ((double)WidthOfPlane * 0.05 * (double)HeightOfPlane >= (double)v44) {
        break;
      }
      *((float *)v129 + 3 * v35) = (float)((float)v45 / (float)v44) / 255.0;
      int v51 = CVPixelBufferGetWidthOfPlane(v38, 1uLL);
      int v52 = CVPixelBufferGetHeightOfPlane(v38, 1uLL);
      int v53 = CVPixelBufferGetBytesPerRowOfPlane(v38, 1uLL);
      uint64_t v54 = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(v38, 1uLL);
      if (v52 < 1)
      {
        int v60 = 0;
        int32x2_t v57 = 0;
      }
      else
      {
        uint64_t v56 = 0;
        int32x2_t v57 = 0;
        do
        {
          uint64_t v58 = v54;
          uint64_t v59 = v51;
          if (v51 >= 1)
          {
            do
            {
              v55.i32[0] = *v58;
              v55.i32[1] = v58[1];
              int32x2_t v57 = vadd_s32(v57, v55);
              v58 += 2;
              --v59;
            }
            while (v59);
          }
          ++v56;
          v54 += v53;
        }
        while (v56 != v52);
        int v60 = (v51 & ~(v51 >> 31)) * v52;
      }
      *(float *)v55.i32 = (float)v60;
      *(float32x2_t *)((char *)v129 + 12 * v35 + 4) = vdiv_f32(vdiv_f32(vcvt_f32_s32(v57), (float32x2_t)vdup_lane_s32(v55, 0)), v37);
      CVPixelBufferUnlockBaseAddress(v38, 1uLL);
      BOOL v36 = ++v35 < v15;
      if (v35 == v15) {
        goto LABEL_41;
      }
    }
    if (v36)
    {
      IOSurfaceRef v61 = &v129[1];
      do
      {
        *((void *)v61 - 1) = 0x3F00000000000000;
        *IOSurfaceRef v61 = 1056964608;
        v61 += 3;
        --v15;
      }
      while (v15);
    }
  }
LABEL_41:
  float v116 = 0.0;
  uint64_t v115 = 0;
  CFDictionaryRef v62 = v111;
  CFDictionaryRef v63 = v108;
  get_exposure_parameters(v111, v108, (float *)&v115);
  device_parameters = get_device_parameters((uint64_t)v113, v62, v63, 0, 0);
  uint64_t v65 = 0;
  uint64_t v66 = v115;
  float v67 = v116;
  uint64_t v68 = &v129[7];
  uint64_t v69 = v112;
  do
  {
    compute_noise_model(v69, (uint64_t)v68, (uint64_t)device_parameters, v65++, 0, *(float *)&v66, *((float *)&v66 + 1), v67);
    v68 += 7;
  }
  while (v65 != 4);
  LODWORD(v11) = v109;
  glGenTextures(v109, v118);
  glGenTextures(v11, v119);
  glGenTextures(v11, v120);
  glGenTextures(v11, v121);
  glGenTextures(4, (GLuint *)&v122 + 1);
  glGenTextures(4, (GLuint *)&v123 + 1);
  glGenFramebuffers(1, (GLuint *)&v124 + 1);
  glGenFramebuffers(1, (GLuint *)&v124 + 3);
  glGenFramebuffers(1, (GLuint *)&v124 + 2);
  if (BYTE12(v128))
  {
    uint64_t v71 = (uint64_t)v113;
    int v72 = CVPixelBufferGetWidthOfPlane(*((CVPixelBufferRef *)v113 + 33), 0);
    size_t v73 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(v71 + 264), 0);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v71 + 240));
    YCC420CVPixelBufferRef = createYCC420CVPixelBufferRef(v72, v73, PixelFormatType);
    *(void *)&long long v128 = YCC420CVPixelBufferRef;
    if (!YCC420CVPixelBufferRef)
    {
LABEL_98:
      fig_log_get_emitter();
      FigDebugAssert3();
LABEL_100:
      uint64_t v8 = 0xFFFFFFFFLL;
      goto LABEL_83;
    }
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(YCC420CVPixelBufferRef);
    if (!IOSurface)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      CVPixelBufferRelease((CVPixelBufferRef)v128);
      *(void *)&long long v128 = 0;
      goto LABEL_100;
    }
    IOSurfaceRef v77 = IOSurface;
    uint64_t v8 = 1;
    glGenTextures(1, (GLuint *)&v122);
    glActiveTexture(0x84C0u);
    glBindTexture(0xDE1u, v122);
    if (v72 >= 0) {
      int v78 = v72;
    }
    else {
      int v78 = v72 + 1;
    }
    BYTE4(v106) = 0;
    LODWORD(v106) = 0;
    if ((objc_msgSend(v117, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v77, 3553, 33323, (v78 >> 1), v73, 33319, 5121, v106) & 1) == 0)
    {
      fig_log_get_emitter();
      goto LABEL_102;
    }
    if (!v63) {
      goto LABEL_56;
    }
  }
  else
  {
    *(void *)&long long v128 = 0;
    LODWORD(v122) = 0;
    if (!v63) {
      goto LABEL_56;
    }
  }
  CFDataRef v79 = (const __CFData *)CFDictionaryGetValue(v63, @"kTMBNRTuningParameters");
  if (v79)
  {
    BytePtr = CFDataGetBytePtr(v79);
    if (BytePtr)
    {
      long long v81 = *((_OWORD *)BytePtr + 1);
      *(_OWORD *)&v129[35] = *(_OWORD *)BytePtr;
      *(_OWORD *)&v129[37] = v81;
      long long v82 = *((_OWORD *)BytePtr + 2);
      long long v83 = *((_OWORD *)BytePtr + 3);
      long long v84 = *((_OWORD *)BytePtr + 5);
      *(_OWORD *)&v129[43] = *((_OWORD *)BytePtr + 4);
      *(_OWORD *)&v129[45] = v84;
      *(_OWORD *)&v129[39] = v82;
      *(_OWORD *)&v129[41] = v83;
      goto LABEL_57;
    }
  }
LABEL_56:
  LODWORD(v70) = v66;
  initialize_fusion_parameters((uint64_t)&v129[35], BYTE12(v128), v70);
LABEL_57:
  float v114 = 0.0;
  size_t v85 = (GLuint *)((char *)v113 + 416);
  uint64_t v86 = fuse_remix_level((uint64_t)&v117, (GLuint *)v113 + 104, 3u, 0, 1, 0.0);
  if (v86)
  {
    uint64_t v8 = v86;
    fig_log_get_emitter();
LABEL_102:
    FigDebugAssert3();
    goto LABEL_83;
  }
  if (compute_mismatch_coefficient((uint64_t)&v117, &v114, *(float *)&v66)) {
    goto LABEL_98;
  }
  float v87 = v114;
  uint64_t v88 = v112;
  if (BYTE12(v128) && v114 > 0.0)
  {
    uint64_t v89 = 0;
    size_t v90 = v130;
    do
    {
      compute_noise_model(v88, (uint64_t)v90, (uint64_t)device_parameters, v89++, 1, *(float *)&v66, *((float *)&v66 + 1), v67);
      v90 += 7;
    }
    while (v89 != 4);
  }
  unint64_t v91 = 0;
  BOOL v92 = (GLuint *)((char *)v113 + 452);
  unsigned long long v93 = (GLuint *)((char *)v113 + 440);
  int v94 = (GLuint *)((char *)v113 + 428);
  int v110 = (char *)v113 + 144;
  CFDictionaryRef v111 = (CFDictionaryRef)((char *)&v127 + 8);
  while (1)
  {
    if (v91 < 0xFFFFFFFFFFFFFFFDLL) {
      int v95 = v93;
    }
    else {
      int v95 = v92;
    }
    uint64_t v96 = fuse_remix_level((uint64_t)&v117, v95, (int)v91 + 3, 1, 0, v87);
    if (v96
      || (v91 + 3 >= 3 ? (GLsizei v97 = v85) : (GLsizei v97 = v94),
          uint64_t v96 = fuse_remix_level((uint64_t)&v117, v97, (int)v91 + 3, 0, 0, v87),
          v96))
    {
LABEL_92:
      uint64_t v8 = v96;
      fig_log_get_emitter();
      goto LABEL_96;
    }
    if (v91 != -3 && BYTE12(v128) && v87 > 0.0) {
      break;
    }
LABEL_80:
    if (--v91 == -4)
    {
      multibandNoiseReductionFinalize(v108);
      uint64_t v8 = 0;
      goto LABEL_82;
    }
  }
  int v98 = (__CVBuffer *)*((void *)v111 + v91);
  int v99 = CVPixelBufferGetWidthOfPlane(v98, 0);
  int v100 = CVPixelBufferGetHeightOfPlane(v98, 0);
  OSType v101 = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)v126);
  int32x4_t v102 = createYCC420CVPixelBufferRef(v99, v100, v101);
  if (!v102) {
    goto LABEL_93;
  }
  GLuint v103 = v102;
  int v104 = CVPixelBufferGetIOSurface(v102);
  if (!v104)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CVPixelBufferRelease(v103);
    goto LABEL_94;
  }
  uint64_t v96 = BindTextureToFbo(*((void **)v113 + 7), v104, *(_DWORD *)&v110[4 * v91], DWORD2(v124), 0x8227u, 0);
  if (v96) {
    goto LABEL_92;
  }
  denoise_luma_level(v112, DWORD2(v124), (uint64_t)v130, v122, v91 + 3);
  if (!CVPixelBufferCopyPlane(v98, v103))
  {
    CVPixelBufferRelease(v103);
    goto LABEL_80;
  }
LABEL_93:
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_94:
  uint64_t v8 = 0xFFFFFFFFLL;
LABEL_82:
  LODWORD(v11) = v109;
LABEL_83:
  glGetError();
  if ((void)v128)
  {
    CVPixelBufferRelease((CVPixelBufferRef)v128);
    *(void *)&long long v128 = 0;
  }
  glDeleteTextures(v11, v118);
  glDeleteTextures(v11, v119);
  glDeleteTextures(v11, v120);
  glDeleteTextures(v11, v121);
  glDeleteTextures(1, (const GLuint *)&v122);
  glDeleteTextures(4, (const GLuint *)&v122 + 1);
  glDeleteTextures(4, (const GLuint *)&v123 + 1);
  glDeleteFramebuffers(1, (const GLuint *)&v124 + 1);
  glDeleteFramebuffers(1, (const GLuint *)&v124 + 3);
  glDeleteFramebuffers(1, (const GLuint *)&v124 + 2);
  [MEMORY[0x1E4F38D58] setCurrentContext:0];
  return v8;
}

float get_exposure_parameters(CFDictionaryRef theDict, CFDictionaryRef a2, float *a3)
{
  if (a2)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, @"ClientSpecifiedMetadata");
    if (Value) {
      CFDictionaryRef theDict = Value;
    }
  }
  int valuePtr = 1017370378;
  int v22 = 256;
  int v23 = 256;
  int v21 = 256;
  __int16 v20 = 4096;
  __int16 v19 = 4096;
  __int16 v18 = 4096;
  if (!theDict) {
    goto LABEL_19;
  }
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F53E48]);
  if (v6) {
    CFNumberGetValue(v6, kCFNumberFloatType, &valuePtr);
  }
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F53C08]);
  if (v7) {
    CFNumberGetValue(v7, kCFNumberIntType, &v23);
  }
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F543A0]);
  if (v8) {
    CFNumberGetValue(v8, kCFNumberIntType, &v22);
  }
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F54388]);
  if (v9) {
    CFNumberGetValue(v9, kCFNumberIntType, &v21);
  }
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F53C48]);
  if (v10) {
    CFNumberGetValue(v10, kCFNumberShortType, &v20);
  }
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F53C70]);
  if (v11) {
    CFNumberGetValue(v11, kCFNumberShortType, &v19);
  }
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F53C10]);
  if (v12)
  {
    CFNumberGetValue(v12, kCFNumberShortType, &v18);
    float v13 = (float)v18;
  }
  else
  {
LABEL_19:
    float v13 = 4096.0;
  }
  float v14 = (float)v20;
  float v15 = (double)v23 * 0.00390625 * ((double)v22 * 0.00390625) * ((double)v21 * 0.00390625);
  float v16 = (float)v19 / v14;
  *a3 = v15;
  a3[1] = v16;
  float result = v13 / v14;
  a3[2] = result;
  return result;
}

const UInt8 *get_device_parameters(uint64_t a1, CFDictionaryRef theDict, const __CFDictionary *a3, const void *a4, const void *a5)
{
  if (theDict)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F54210]);
    if (!a3) {
      goto LABEL_10;
    }
  }
  else
  {
    CFDictionaryRef Value = 0;
    if (!a3) {
      goto LABEL_10;
    }
  }
  if (!Value)
  {
    CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(a3, @"ClientSpecifiedMetadata");
    CFDictionaryRef Value = v10;
    if (v10)
    {
      CFTypeID v11 = CFGetTypeID(v10);
      if (v11 == CFDictionaryGetTypeID()) {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F54210]);
      }
      else {
        CFDictionaryRef Value = 0;
      }
    }
  }
LABEL_10:
  uint64_t valuePtr = 0;
  if (a4)
  {
    CFTypeID v12 = CFGetTypeID(a4);
    if (v12 == CFNumberGetTypeID()) {
      CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    }
  }
  if (!a5
    || (CFTypeID v13 = CFGetTypeID(a5), v13 != CFNumberGetTypeID())
    || (CFNumberGetValue((CFNumberRef)a5, kCFNumberSInt32Type, &valuePtr), valuePtr != 1))
  {
    switch(HIDWORD(valuePtr))
    {
      case 0:
        float v14 = (void **)(a1 + 480);
        if (!Value) {
          goto LABEL_29;
        }
        goto LABEL_26;
      case 1:
        float v14 = (void **)(a1 + 488);
        if (!Value) {
          goto LABEL_29;
        }
        goto LABEL_26;
      case 2:
        float v14 = (void **)(a1 + 496);
        if (!Value) {
          goto LABEL_29;
        }
        goto LABEL_26;
      case 3:
        float v14 = (void **)(a1 + 504);
        if (Value) {
          goto LABEL_26;
        }
        goto LABEL_29;
      default:
        goto LABEL_29;
    }
  }
  float v14 = (void **)(a1 + 512);
  if (Value)
  {
LABEL_26:
    float v15 = *v14;
    if (*v14)
    {
      float result = get_device_parameters_for_fusion_type(a1, Value, *v14);
      if (result) {
        return result;
      }
      if (v15 == *(void **)(a1 + 488))
      {
        float result = get_device_parameters_for_fusion_type(a1, Value, *(void **)(a1 + 480));
        if (result) {
          return result;
        }
      }
    }
  }
LABEL_29:
  if (get_device_parameters_spamCountDown >= 1) {
    --get_device_parameters_spamCountDown;
  }
  return (const UInt8 *)&N53_RFC;
}

void compute_noise_model(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, float a6, float a7, float a8)
{
  float v15 = 0.0;
  float v16 = 1.0;
  float v17 = 1.0;
  float v18 = 1.0;
  float v19 = 0.0;
  float v20 = 0.0;
  if (*(_DWORD *)(a3 + 124) > a4)
  {
    uint64_t v21 = *(void *)(a3 + 128);
    uint64_t v23 = v21 + 96 * a4;
    float v16 = scan_entries(*(float **)(v23 + 24), *(_DWORD *)(v23 + 16), a6);
    float v17 = scan_entries(*(float **)(v23 + 8), *(_DWORD *)v23, a6);
    float v18 = scan_entries(*(float **)(v23 + 40), *(_DWORD *)(v23 + 32), a6);
    int v24 = *(_DWORD *)(v23 + 48);
    if (v24 >= 1) {
      float v15 = scan_entries(*(float **)(v21 + 96 * a4 + 56), v24, a6);
    }
    int v25 = *(_DWORD *)(v21 + 96 * a4 + 64);
    if (v25 >= 1) {
      float v19 = scan_entries(*(float **)(v21 + 96 * a4 + 72), v25, a6);
    }
    int v26 = *(_DWORD *)(v21 + 96 * a4 + 80);
    if (v26 < 1) {
      float v20 = 0.0;
    }
    else {
      float v20 = scan_entries(*(float **)(v21 + 96 * a4 + 88), v26, a6);
    }
  }
  *(float *)(a2 + 24) = v18;
  *(float *)(a2 + 2_Block_object_dispose(&STACK[0x4C8], 8) = v15;
  *(float *)(a2 + 32) = v19;
  *(float *)(a2 + 36) = v20;
  if (a5) {
    float v27 = v16;
  }
  else {
    float v27 = 1.0;
  }
  if (!a5) {
    float v17 = 1.0;
  }
  float v28 = ldexpf(1.0, -a4);
  float v29 = (double)-a4 / pow(a6, (float)(v28 / *(float *)(a3 + 4)));
  float v30 = exp2f(v29);
  float v31 = (float)(v17 * powf(a6, *(float *)a3)) * v30;
  float v32 = (float)(1.0 / sqrtf((float)(1 << a4))) * 0.0039216;
  float v33 = v32 * v31;
  *(float *)a2 = (float)(v32 * v31) / *(float *)(a3 + 8);
  if (a6 <= 8.0) {
    float v34 = v31 / *(float *)(a3 + 12);
  }
  else {
    float v34 = v31 / (*(float *)(a3 + 12) + *(float *)(a3 + 12));
  }
  *(float *)(a2 + 4) = v34;
  *(float *)(a2 + _Block_object_dispose(&STACK[0x4C8], 8) = v33;
  float v35 = (double)~a4 / 1.9;
  float v36 = (float)((float)(a4 + 1) * (float)(a4 + 1)) * powf(*(float *)(a3 + 20), v35);
  float v37 = v32 * v27;
  float v38 = a6 * a7;
  float v39 = *(float *)(a3 + 16);
  *(float *)(a2 + 16) = v36 * (float)(v37 * powf(v38, v39));
  *(float *)(a2 + 20) = v36 * (float)(v37 * powf(a6 * a8, v39));
  if (!a4)
  {
    float v41 = scan_entries((float *)(a3 + 40), *(_DWORD *)(a3 + 120), a6);
    if (v41 < 4.0)
    {
      *(void *)(a2 + 40) = a1 + 300;
      int v40 = 1061997773;
      goto LABEL_23;
    }
    if (v41 >= 6.0)
    {
      *(void *)(a2 + 40) = a1 + 324;
      int v40 = 1053609165;
      goto LABEL_23;
    }
  }
  *(void *)(a2 + 40) = a1 + 312;
  int v40 = 1056964608;
LABEL_23:
  *(_DWORD *)(a2 + 4_Block_object_dispose(&STACK[0x4C8], 8) = v40;
  *(_DWORD *)(a2 + 52) = 1056964608;
}

CVPixelBufferRef createYCC420CVPixelBufferRef(int a1, int a2, OSType a3)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFNumberRef v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24ED8], (const void *)*MEMORY[0x1E4F1CFD0]);
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v6, 0, v7, v8);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v10);
  CFRelease(v10);
  CVPixelBufferCreate(v6, a1, a2, a3, Mutable, &pixelBufferOut);
  CFRelease(Mutable);
  return pixelBufferOut;
}

uint64_t initialize_fusion_parameters(uint64_t result, int a2, double a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  float v3 = 1.0;
  double v4 = 1.0;
  if (*(float *)&a3 > 1.0)
  {
    double v4 = 0.0;
    if (*(float *)&a3 <= 10.0) {
      double v4 = (float)((float)(10.0 - *(float *)&a3) / 9.0);
    }
  }
  unint64_t v5 = 0;
  float v6 = v4 * 0.5 + 0.5;
  double v7 = v6;
  float v8 = 1.0 - v7 + v7 * 1.4;
  float v48 = v8;
  uint64_t v49 = 0x3F8CCCCD3F99999ALL;
  int v50 = 1065353216;
  *(float *)&double v7 = 1.0 - v7 + v7 * 1.3;
  int v45 = LODWORD(v7);
  uint64_t v46 = 0x3F8666663F8CCCCDLL;
  int v47 = 1065353216;
  double v9 = 0.0;
  if (*(float *)&a3 <= 10.0) {
    double v9 = (float)((float)(10.0 - *(float *)&a3) / 9.0);
  }
  if (*(float *)&a3 > 1.0)
  {
    unsigned int v10 = 1;
  }
  else
  {
    double v9 = 1.0;
    unsigned int v10 = 0;
  }
  int32x2_t v42 = vdup_n_s32(0x3ECCCCCDu);
  float v11 = 0.2;
  float v12 = 0.3;
  if (!a2)
  {
    float v12 = 0.2;
    float v11 = 0.1;
  }
  float v43 = v12;
  float v44 = v11;
  CFTypeID v13 = (float *)&v45;
  if (a2) {
    CFTypeID v13 = &v48;
  }
  float v14 = 0.0;
  if (*(float *)&a3 <= 10.0) {
    float v14 = (float)(10.0 - *(float *)&a3) / 5.0;
  }
  if (*(float *)&a3 > 5.0) {
    float v3 = v14;
  }
  double v15 = (v9 * 0.3 + 1.0) * 1.3;
  float64x2_t v16 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v3 * -0.299000012 + 0.300000012), 0);
  float32x2_t v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
  int8x8_t v18 = (int8x8_t)vdup_n_s32(v10);
  int8x8_t v19 = (int8x8_t)vcvt_f32_f64(v16);
  int64x2_t v20 = (int64x2_t)xmmword_1A5F0CCF0;
  __asm
  {
    FMOV            V5.2S, #10.0
    FMOV            V7.2D, #2.5
    FMOV            V16.2D, #3.0
    FMOV            V17.2D, #1.0
    FMOV            V18.2D, #0.5
  }
  int8x8_t v30 = (int8x8_t)vdup_n_s32(0x3A83126Fu);
  __asm { FMOV            V20.2S, #-1.0 }
  int64x2_t v32 = vdupq_n_s64(2uLL);
  do
  {
    float v33 = (float32x2_t *)(result + 48 + v5);
    v33[-4] = *(float32x2_t *)&v13[v5 / 4];
    int64x2_t v34 = vceqzq_s64(v20);
    int8x8_t v35 = (int8x8_t)vmovn_s64(v34);
    float32x2_t v36 = (float32x2_t)vbsl_s8(v35, (int8x8_t)0x4000000040000000, _D5);
    v33[-6] = (float32x2_t)vbsl_s8(v35, v19, v30);
    v33[-2] = (float32x2_t)qword_1A5F0CD20[v5 / 8];
    int8x8_t v37 = (int8x8_t)vcge_f32(v36, v17);
    int8x8_t v38 = vand_s8(v18, v37);
    v39.i64[0] = v38.u32[0];
    v39.i64[1] = v38.u32[1];
    int8x16_t v40 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v39, 0x3FuLL));
    int8x8_t v41 = vbic_s8(v18, v37);
    v39.i64[0] = v41.u32[0];
    v39.i64[1] = v41.u32[1];
    *float v33 = vcvt_f32_f64(vmlaq_f64((float64x2_t)vbslq_s8((int8x16_t)v34, _Q18, _Q17), (float64x2_t)vandq_s8(vbslq_s8(v40, (int8x16_t)vcvtq_f64_f32(vdiv_f32(vsub_f32(v36, v17), vadd_f32(v36, _D20))), _Q17), (int8x16_t)vcgezq_s64(vshlq_n_s64(v39, 0x3FuLL))), (float64x2_t)vbslq_s8((int8x16_t)v34, _Q16, _Q7)));
    int v33[2] = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32((float32x2_t)qword_1A5F0CD30[v5 / 8]), v15));
    v33[4] = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)&v42 + v5)), v15));
    int64x2_t v20 = vaddq_s64(v20, v32);
    v5 += 8;
  }
  while (v5 != 16);
  return result;
}

uint64_t fuse_remix_level(uint64_t a1, GLuint *a2, unsigned int a3, int a4, GLint a5, GLfloat a6)
{
  float v12 = *(void **)a1;
  uint64_t v82 = *(unsigned int *)(a1 + 160);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(*(void *)(a1 + 88) + 8 * a3), 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(*(void *)(a1 + 88) + 8 * a3), 0);
  size_t v13 = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(*(void *)(a1 + 88) + 8 * a3), 1uLL);
  size_t v14 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(*(void *)(a1 + 88) + 8 * a3), 1uLL);
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a1 + 8 * a3 + 120));
  if (!IOSurface)
  {
    uint64_t v19 = 0xFFFFFFFFLL;
    goto LABEL_6;
  }
  IOSurfaceRef v16 = IOSurface;
  *(void *)double height = v14;
  uint64_t v17 = a3;
  glActiveTexture(0x84C0u);
  uint64_t v18 = a1 + 4 * a3;
  if (!a4)
  {
    glBindTexture(0xDE1u, *(_DWORD *)(v18 + 44));
    BYTE4(v70) = 0;
    LODWORD(v70) = 0;
    if (objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v16, 3553, 33321, WidthOfPlane, HeightOfPlane, 6403, 5121, v70))goto LABEL_8; {
    uint64_t v19 = 1;
    }
LABEL_6:
    fig_log_get_emitter();
LABEL_54:
    FigDebugAssert3();
    return v19;
  }
  glBindTexture(0xDE1u, *(_DWORD *)(v18 + 60));
  BYTE4(v70) = 0;
  uint64_t v19 = 1;
  LODWORD(v70) = 1;
  if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v16, 3553, 33323, v13, *(void *)height, 33319, 5121, v70) & 1) == 0)goto LABEL_6; {
LABEL_8:
  }
  uint64_t v20 = 76;
  if (a4) {
    uint64_t v20 = 84;
  }
  GLuint v21 = *(_DWORD *)(a1 + v20);
  uint64_t v22 = a1 + 4 * a3;
  uint64_t v23 = (GLuint *)(v22 + 60);
  int v24 = (GLuint *)(v22 + 44);
  if (a4) {
    int v25 = v23;
  }
  else {
    int v25 = v24;
  }
  glBindFramebuffer(0x8D40u, v21);
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *v25, 0);
  if (glCheckFramebufferStatus(0x8D40u) != 36053) {
    return 0xFFFFFFFFLL;
  }
  if ((int)v82 >= 1)
  {
    int v77 = v13;
    uint64_t v78 = a3;
    uint64_t v26 = 0;
    GLenum v27 = 33992;
    while (1)
    {
      IOSurfaceRef v28 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(*(void *)(a1 + 88 + 8 * v26) + 8 * a3));
      if (!v28) {
        goto LABEL_53;
      }
      IOSurfaceRef v29 = v28;
      glActiveTexture(v27 - 8);
      glBindTexture(0xDE1u, *(_DWORD *)(*(void *)(a1 + 8) + 4 * v26));
      BYTE4(v71) = 0;
      LODWORD(v71) = 0;
      if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v29, 3553, 33321, WidthOfPlane, HeightOfPlane, 6403, 5121, v71) & 1) == 0)break; {
      glTexParameterf(0xDE1u, 0x2802u, 33648.0);
      }
      glTexParameterf(0xDE1u, 0x2803u, 33648.0);
      float v30 = ((v26 == 0) & (a4 ^ 1)) != 0 ? 9728.0 : 9729.0;
      glTexParameterf(0xDE1u, 0x2800u, v30);
      glTexParameterf(0xDE1u, 0x2801u, v30);
      glActiveTexture(v27);
      glBindTexture(0xDE1u, *(_DWORD *)(*(void *)(a1 + 16) + 4 * v26));
      BYTE4(v72) = 0;
      LODWORD(v72) = 1;
      if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v29, 3553, 33323, v13, *(void *)height, 33319, 5121, v72) & 1) == 0)break; {
      glTexParameterf(0xDE1u, 0x2802u, 33648.0);
      }
      glTexParameterf(0xDE1u, 0x2803u, 33648.0);
      if (((v26 == 0) & a4) != 0) {
        float v31 = 9728.0;
      }
      else {
        float v31 = 9729.0;
      }
      glTexParameterf(0xDE1u, 0x2800u, v31);
      glTexParameterf(0xDE1u, 0x2801u, v31);
      ++v26;
      ++v27;
      if (v82 == v26)
      {
        uint64_t v17 = a3;
        if ((int)a3 >= 3) {
          goto LABEL_51;
        }
        uint64_t v32 = 0;
        uint64_t v33 = a3 + 1;
        if ((WidthOfPlane & 0x80000000) == 0) {
          int v34 = WidthOfPlane;
        }
        else {
          int v34 = WidthOfPlane + 1;
        }
        int v35 = v34 >> 1;
        if ((HeightOfPlane & 0x80000000) == 0) {
          int v36 = HeightOfPlane;
        }
        else {
          int v36 = HeightOfPlane + 1;
        }
        unsigned int v75 = v36 >> 1;
        unsigned int v76 = v35;
        if ((v13 & 0x80000000) == 0) {
          int v37 = v13;
        }
        else {
          int v37 = v13 + 1;
        }
        unsigned int v74 = v37 >> 1;
        if (height[0] >= 0) {
          int v38 = height[0];
        }
        else {
          int v38 = height[0] + 1;
        }
        uint64_t v39 = (v38 >> 1);
        GLenum v40 = 33996;
        while (1)
        {
          uint64_t v41 = v33;
          IOSurfaceRef v42 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(*(void *)(a1 + 88 + 8 * v32) + 8 * v33));
          if (!v42) {
            break;
          }
          IOSurfaceRef v43 = v42;
          glActiveTexture(v40 - 8);
          glBindTexture(0xDE1u, *(_DWORD *)(*(void *)(a1 + 24) + 4 * v32));
          BYTE4(v71) = 0;
          LODWORD(v71) = 0;
          if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v43, 3553, 33321, v76, v75, 6403, 5121, v71) & 1) == 0)goto LABEL_61; {
          glTexParameterf(0xDE1u, 0x2802u, 33648.0);
          }
          glTexParameterf(0xDE1u, 0x2803u, 33648.0);
          glTexParameterf(0xDE1u, 0x2800u, 9729.0);
          glTexParameterf(0xDE1u, 0x2801u, 9729.0);
          glActiveTexture(v40);
          glBindTexture(0xDE1u, *(_DWORD *)(*(void *)(a1 + 32) + 4 * v32));
          BYTE4(v73) = 0;
          LODWORD(v73) = 1;
          if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v43, 3553, 33323, v74, v39, 33319, 5121, v73) & 1) == 0)goto LABEL_61; {
          glTexParameterf(0xDE1u, 0x2802u, 33648.0);
          }
          glTexParameterf(0xDE1u, 0x2803u, 33648.0);
          glTexParameterf(0xDE1u, 0x2800u, 9729.0);
          glTexParameterf(0xDE1u, 0x2801u, 9729.0);
          ++v32;
          ++v40;
          uint64_t v33 = v41;
          if (v82 == v32)
          {
            LODWORD(v13) = v77;
            uint64_t v17 = v78;
            goto LABEL_48;
          }
        }
LABEL_53:
        fig_log_get_emitter();
        uint64_t v19 = 0xFFFFFFFFLL;
        goto LABEL_54;
      }
    }
LABEL_61:
    fig_log_get_emitter();
    uint64_t v19 = 1;
    goto LABEL_54;
  }
  if ((int)a3 <= 2)
  {
    uint64_t v33 = a3 + 1;
LABEL_48:
    glActiveTexture(0x84D0u);
    uint64_t v44 = 44;
    if (a4) {
      uint64_t v44 = 60;
    }
    glBindTexture(0xDE1u, *(_DWORD *)(a1 + v44 + 4 * v33));
    glTexParameterf(0xDE1u, 0x2802u, 33648.0);
    glTexParameterf(0xDE1u, 0x2803u, 33648.0);
    glTexParameterf(0xDE1u, 0x2800u, 9729.0);
    glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  }
LABEL_51:
  bindVertexAttributes((uint64_t)a2);
  if (a4)
  {
    int v45 = height[0];
    glViewport(0, 0, v13, height[0]);
  }
  else
  {
    int v45 = HeightOfPlane;
    LODWORD(v13) = WidthOfPlane;
    glViewport(0, 0, WidthOfPlane, HeightOfPlane);
  }
  glUseProgram(*a2);
  GLint UniformLocation = glGetUniformLocation(*a2, "transform");
  glUniformMatrix3fv(UniformLocation, v82 - 1, 0, *(const GLfloat **)(a1 + 216));
  GLint v47 = glGetUniformLocation(*a2, "luma_sigma_intercept");
  float v48 = (GLfloat *)(a1 + 56 * v17);
  glUniform1f(v47, v48[56]);
  GLint v49 = glGetUniformLocation(*a2, "luma_sigma_slope");
  glUniform1f(v49, v48[57]);
  GLint v50 = glGetUniformLocation(*a2, "luma_sigma_max");
  glUniform1f(v50, v48[58]);
  GLint v51 = glGetUniformLocation(*a2, "luma_sigma_constant");
  glUniform1f(v51, v48[58]);
  GLint v52 = glGetUniformLocation(*a2, "chroma_sigma_r");
  glUniform1f(v52, v48[60]);
  GLint v53 = glGetUniformLocation(*a2, "chroma_sigma_b");
  glUniform1f(v53, v48[61]);
  GLint v54 = glGetUniformLocation(*a2, "long_short_fusion");
  glUniform1i(v54, *(unsigned __int8 *)(a1 + 164));
  GLint v55 = glGetUniformLocation(*a2, "pixel_pitch");
  GLfloat v56 = 1.0 / (double)(int)v13;
  GLfloat v57 = 1.0 / (double)v45;
  glUniform2f(v55, v56, v57);
  GLint v58 = glGetUniformLocation(*a2, "compute_similarity_map");
  glUniform1i(v58, a5);
  GLint v59 = glGetUniformLocation(*a2, "mismatch_coefficient");
  glUniform1f(v59, a6);
  GLint v60 = glGetUniformLocation(*a2, "num_buffers");
  glUniform1i(v60, v82);
  GLint v61 = glGetUniformLocation(*a2, "dc_value");
  glUniform3fv(v61, v82, (const GLfloat *)(a1 + 168));
  GLint v62 = glGetUniformLocation(*a2, "black_threshold");
  CFDictionaryRef v63 = (GLfloat *)(a1 + 4 * v17);
  glUniform2f(v62, 0.0, v63[112]);
  GLint v64 = glGetUniformLocation(*a2, "sharpening");
  glUniform1f(v64, v63[116]);
  GLint v65 = glGetUniformLocation(*a2, "adaptive_blur");
  glUniform1f(v65, v63[120]);
  GLint v66 = glGetUniformLocation(*a2, "diff_weight");
  glUniform1f(v66, v63[124]);
  GLint v67 = glGetUniformLocation(*a2, "strength");
  uint64_t v68 = 16;
  if (a4) {
    uint64_t v68 = 20;
  }
  glUniform1f(v67, v63[v68 + 112]);
  glDrawArrays(5u, 0, 4);
  glFlush();
  glGetError();
  return 0;
}

uint64_t compute_mismatch_coefficient(uint64_t a1, float *a2, float a3)
{
  *a2 = 0.0;
  float v6 = *(__CVBuffer **)(a1 + 144);
  unsigned int WidthOfPlane = CVPixelBufferGetWidthOfPlane(v6, 0);
  unsigned int HeightOfPlane = CVPixelBufferGetHeightOfPlane(v6, 0);
  unsigned int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v6, 0);
  if (CVPixelBufferLockBaseAddress(v6, 1uLL)
    || (unsigned int v10 = *(__CVBuffer **)(a1 + 152)) != 0 && CVPixelBufferCopyPlane(v10, v6))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0xFFFFFFFFLL;
  }
  BaseAddressOfPlane = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(v6, 0);
  if (*(unsigned char *)(a1 + 164))
  {
    float v12 = malloc_type_malloc((int)(WidthOfPlane * HeightOfPlane), 0x858D5BBCuLL);
    src.datCGFloat a = BaseAddressOfPlane;
    src.double height = HeightOfPlane;
    src.double width = WidthOfPlane;
    src.rowBytes = BytesPerRowOfPlane;
    dest.datCGFloat a = v12;
    dest.double height = HeightOfPlane;
    dest.double width = WidthOfPlane;
    dest.rowBytes = WidthOfPlane;
    vImageMax_Planar8(&src, &dest, 0, 0, 0, 3uLL, 3uLL, 0);
    src.datCGFloat a = v12;
    src.double height = HeightOfPlane;
    src.double width = WidthOfPlane;
    src.rowBytes = WidthOfPlane;
    dest.datCGFloat a = BaseAddressOfPlane;
    dest.double height = HeightOfPlane;
    dest.double width = WidthOfPlane;
    dest.rowBytes = BytesPerRowOfPlane;
    vImageMin_Planar8(&src, &dest, 0, 0, 0, 3uLL, 3uLL, 0);
  }
  else
  {
    float v12 = 0;
  }
  if ((int)HeightOfPlane < 1)
  {
    int v14 = 0;
    if (!v12) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = 0;
    do
    {
      uint64_t v15 = WidthOfPlane;
      IOSurfaceRef v16 = BaseAddressOfPlane;
      if ((int)WidthOfPlane >= 1)
      {
        do
        {
          int v17 = *v16++;
          v14 += v17;
          --v15;
        }
        while (v15);
      }
      ++v13;
      BaseAddressOfPlane += (int)BytesPerRowOfPlane;
    }
    while (v13 != HeightOfPlane);
    if (!v12) {
      goto LABEL_14;
    }
  }
  free(v12);
LABEL_14:
  if (*(unsigned char *)(a1 + 164))
  {
    float v19 = (float)(a3 + -10.0) / 10.0;
    float v20 = 1.0;
    if (v19 <= 1.0) {
      float v20 = (float)(a3 + -10.0) / 10.0;
    }
    _NF = v19 < 0.0;
    float v22 = 0.0;
    if (!_NF) {
      float v22 = v20;
    }
    float v23 = (v22 * -2.0 + 3.0) * (float)(v22 * v22);
    __asm { FMOV            V2.2D, #1.0 }
    _Q1 = vcvtq_f64_f32(vcvt_f32_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_1A5F0CD00, v23), _Q2)));
  }
  else
  {
    __asm { FMOV            V1.2D, #1.0 }
  }
  float32x2_t v29 = vcvt_f32_f64(vdivq_f64((float64x2_t)xmmword_1A5F0CD10, _Q1));
  float v18 = (double)v14 / ((double)(int)HeightOfPlane * 255.0 * (double)(int)WidthOfPlane);
  float v30 = (float)(v18 - v29.f32[0]) / vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v29, 1), v29).f32[0];
  float v31 = 1.0;
  if (v30 <= 1.0) {
    float v31 = v30;
  }
  _NF = v30 < 0.0;
  float v32 = 0.0;
  if (!_NF) {
    float v32 = v31;
  }
  float v33 = (v32 * -2.0 + 3.0) * (float)(v32 * v32);
  double v34 = 1.0 - v33;
  double v35 = 0.0;
  if (a3 <= 20.0) {
    double v35 = (float)((float)(20.0 - a3) / 10.0);
  }
  if (a3 > 10.0) {
    double v36 = v35;
  }
  else {
    double v36 = 1.0;
  }
  float v37 = v34 * (1.0 - v36);
  *a2 = v37;
  CVPixelBufferUnlockBaseAddress(v6, 1uLL);
  return 0;
}

uint64_t BindTextureToFbo(void *a1, IOSurfaceRef buffer, GLuint a3, GLuint a4, unsigned int a5, size_t planeIndex)
{
  int v6 = planeIndex;
  if (planeIndex == 1 || a5 == 33319) {
    int v13 = 2;
  }
  else {
    int v13 = 4;
  }
  if (a5 == 33319) {
    uint64_t v14 = 33323;
  }
  else {
    uint64_t v14 = 6408;
  }
  size_t v15 = planeIndex;
  int WidthOfPlane = IOSurfaceGetWidthOfPlane(buffer, planeIndex);
  size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(buffer, v15);
  glBindTexture(0xDE1u, a3);
  BYTE4(v21) = 0;
  LODWORD(v21) = v6;
  int v18 = objc_msgSend(a1, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", buffer, 3553, v14, (WidthOfPlane / v13), HeightOfPlane, a5, 5121, v21);
  uint64_t v19 = v18 ^ 1u;
  if (v18)
  {
    if (a4)
    {
      glBindFramebuffer(0x8D40u, a4);
      glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, a3, 0);
      if (glCheckFramebufferStatus(0x8D40u) == 36053) {
        return v19;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v19;
}

void denoise_luma_level(uint64_t a1, GLuint a2, uint64_t a3, GLuint a4, unsigned int a5)
{
  glActiveTexture(0x84C0u);
  unsigned int v10 = a5;
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 4 * a5 + 84));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  if (a4)
  {
    glActiveTexture(0x84C1u);
    glBindTexture(0xDE1u, a4);
    glTexParameterf(0xDE1u, 0x2802u, 33648.0);
    glTexParameterf(0xDE1u, 0x2803u, 33648.0);
    glTexParameterf(0xDE1u, 0x2800u, 9729.0);
    glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  }
  GLint v11 = a4 != 0;
  glBindFramebuffer(0x8D40u, a2);
  bindVertexAttributes(a1 + 396);
  uint64_t v12 = a1 + 8 * a5;
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(v12 + 232), 0);
  if (WidthOfPlane >= 0) {
    int v14 = WidthOfPlane;
  }
  else {
    int v14 = WidthOfPlane + 1;
  }
  GLsizei v15 = v14 >> 1;
  GLsizei HeightOfPlane = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(v12 + 232), 0);
  glViewport(0, 0, v15, HeightOfPlane);
  glUseProgram(*(_DWORD *)(a1 + 396));
  GLint UniformLocation = glGetUniformLocation(*(_DWORD *)(a1 + 396), "luma_sigma_intercept");
  int v18 = (GLfloat *)(a3 + 56 * v10);
  glUniform1f(UniformLocation, *v18);
  GLint v19 = glGetUniformLocation(*(_DWORD *)(a1 + 396), "luma_sigma_slope");
  glUniform1f(v19, v18[1]);
  GLint v20 = glGetUniformLocation(*(_DWORD *)(a1 + 396), "luma_sigma_max");
  glUniform1f(v20, v18[2]);
  GLint v21 = glGetUniformLocation(*(_DWORD *)(a1 + 396), "lens_shading_factor");
  glUniform1f(v21, 0.0);
  GLint v22 = glGetUniformLocation(*(_DWORD *)(a1 + 396), "pixel_pitch");
  glUniform2f(v22, 1.0 / (float)v15, 1.0 / (float)HeightOfPlane);
  GLint v23 = glGetUniformLocation(*(_DWORD *)(a1 + 396), "use_alpha");
  glUniform1i(v23, v11);
  glDrawArrays(5u, 0, 4);
  glFlush();
}

uint64_t CVPixelBufferCopyPlane(__CVBuffer *a1, CVPixelBufferRef pixelBuffer)
{
  if (CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL)) {
    return 0xFFFFFFFFLL;
  }
  if (CVPixelBufferLockBaseAddress(a1, 0))
  {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else
  {
    int WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
    LODWORD(v6) = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
    int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    int v8 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    unsigned int v10 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
    if ((int)v6 >= 1)
    {
      GLint v11 = v10;
      uint64_t v6 = v6;
      do
      {
        memcpy(v11, BaseAddressOfPlane, WidthOfPlane);
        BaseAddressOfPlane += BytesPerRowOfPlane;
        v11 += v8;
        --v6;
      }
      while (v6);
    }
    CVPixelBufferUnlockBaseAddress(a1, 0);
    uint64_t v4 = 0;
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  return v4;
}

void multibandNoiseReductionFinalize(const __CFDictionary *a1)
{
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, 0, 0);
  glBindFramebuffer(0x8D40u, 0);
  glBindTexture(0xDE1u, 0);
  int valuePtr = 1;
  if (a1
    && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"Synchronization")) != 0
    && (CFNumberGetValue(Value, kCFNumberIntType, &valuePtr), valuePtr != 1))
  {
    glFinish();
  }
  else
  {
    glFlush();
  }
}

uint64_t handle_band_data(const void *a1, int *a2, uint64_t *a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFArrayGetTypeID())
  {
    int Count = CFArrayGetCount((CFArrayRef)a1);
    if ((Count & 1) == 0)
    {
      if (Count >= 0) {
        int v8 = Count;
      }
      else {
        int v8 = Count + 1;
      }
      *a2 = v8 >> 1;
      uint64_t v9 = *a3;
      if (!*a3) {
        return 0;
      }
      if (Count < 2)
      {
LABEL_14:
        uint64_t result = 0;
        *a3 = v9;
        return result;
      }
      uint64_t v10 = 0;
      CFIndex v11 = 1;
      while (1)
      {
        ValueAtIndeCGFloat x = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, v11 - 1);
        if (!ValueAtIndex) {
          break;
        }
        CFNumberRef v13 = ValueAtIndex;
        CFTypeID v14 = CFGetTypeID(ValueAtIndex);
        if (v14 != CFNumberGetTypeID()) {
          break;
        }
        CFNumberGetValue(v13, kCFNumberFloatType, (void *)v9);
        CFNumberRef v15 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, v11);
        if (!v15) {
          break;
        }
        CFNumberRef v16 = v15;
        CFTypeID v17 = CFGetTypeID(v15);
        if (v17 != CFNumberGetTypeID()) {
          break;
        }
        CFNumberGetValue(v16, kCFNumberFloatType, (void *)(v9 + 4));
        ++v10;
        v9 += 8;
        v11 += 2;
        if (v10 >= *a2) {
          goto LABEL_14;
        }
      }
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0xFFFFFFFFLL;
}

CFDictionaryRef band_iterator(const __CFDictionary *cf, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v19 = v3;
  if (*(_DWORD *)a2) {
    goto LABEL_2;
  }
  CFDictionaryRef v4 = cf;
  if (!cf || (v5 = *(void *)(a2 + 8), CFTypeID v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()))
  {
    fig_log_get_emitter();
LABEL_26:
    CFTypeRef cf = (const __CFDictionary *)FigDebugAssert3();
LABEL_2:
    *(_DWORD *)a2 = -1;
    return cf;
  }
  CFNumberRef Value = CFDictionaryGetValue(v4, @"LumaDenoiseStrength");
  *(void *)(v5 + _Block_object_dispose(&STACK[0x4C8], 8) = v3;
  if (handle_band_data(Value, (int *)v5, &v19)) {
    goto LABEL_25;
  }
  *(void *)(v5 + 24) = v19;
  int v8 = CFDictionaryGetValue(v4, @"ChromaDenoiseStrength");
  if (handle_band_data(v8, (int *)(v5 + 16), &v19)) {
    goto LABEL_25;
  }
  *(void *)(v5 + 40) = v19;
  uint64_t v9 = CFDictionaryGetValue(v4, @"LumaRemixWeight");
  if (handle_band_data(v9, (int *)(v5 + 32), &v19)) {
    goto LABEL_25;
  }
  uint64_t v10 = v19;
  *(void *)(v5 + 56) = v19;
  CFIndex v11 = CFDictionaryGetValue(v4, @"BlueBoost");
  uint64_t v12 = (int *)(v5 + 48);
  if (v11)
  {
    if (handle_band_data(v11, v12, &v19)) {
      goto LABEL_25;
    }
    uint64_t v10 = v19;
  }
  else
  {
    int *v12 = 0;
  }
  *(void *)(v5 + 72) = v10;
  CFNumberRef v13 = CFDictionaryGetValue(v4, @"FlatnessBoost");
  CFTypeID v14 = (int *)(v5 + 64);
  if (v13)
  {
    if (handle_band_data(v13, v14, &v19)) {
      goto LABEL_25;
    }
    uint64_t v10 = v19;
  }
  else
  {
    *CFTypeID v14 = 0;
  }
  *(void *)(v5 + 8_Block_object_dispose(&STACK[0x4C8], 8) = v10;
  CFTypeRef cf = (const __CFDictionary *)CFDictionaryGetValue(v4, @"FlatnessThreshold");
  CFNumberRef v15 = (int *)(v5 + 80);
  if (cf)
  {
    CFTypeRef cf = (const __CFDictionary *)handle_band_data(cf, (int *)(v5 + 80), &v19);
    if (!cf)
    {
      int v16 = *v15;
      goto LABEL_20;
    }
LABEL_25:
    fig_log_get_emitter();
    goto LABEL_26;
  }
  int v16 = 0;
  *CFNumberRef v15 = 0;
LABEL_20:
  int v17 = *(_DWORD *)(v5 + 16) + *(_DWORD *)v5 + *(_DWORD *)(v5 + 32) + *(_DWORD *)(v5 + 48) + *(_DWORD *)(v5 + 64) + v16;
  uint64_t v18 = *(void *)(a2 + 24);
  if (v18)
  {
    if (v17 == (v19 - v18) >> 3)
    {
      *(void *)(a2 + 24) = v19;
      goto LABEL_23;
    }
    goto LABEL_25;
  }
LABEL_23:
  *(_DWORD *)(a2 + 16) += v17;
  *(void *)(a2 + 8) += 96;
  return cf;
}

uint64_t __multiBandNoiseReductionGPUContextInit_block_invoke(uint64_t a1)
{
  return multiBandNoiseReductionContextInit_internal(*(void *)(a1 + 40), *(void **)(a1 + 32), *(CFDictionaryRef *)(a1 + 48));
}

uint64_t multiBandNoiseReductionContextInit_internal(uint64_t a1, void *a2, CFDictionaryRef theDict)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int AlgorithmFromTuningOptions = noiseReductionGetAlgorithmFromTuningOptions(theDict);
  *(void *)(a1 + 16) = 0;
  double v7 = (CFTypeRef *)(a1 + 16);
  if (IOSurfaceAcceleratorCreate())
  {
    if (*v7) {
      CFRelease(*v7);
    }
    LOBYTE(v_Block_object_dispose(&STACK[0x4C8], 8) = 0;
    CFTypeRef *v7 = 0;
  }
  else
  {
    FigSetupIOSurfaceAccelerator(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      LOBYTE(v_Block_object_dispose(&STACK[0x4C8], 8) = *(_DWORD *)(a1 + 28) >= 7u && *(_DWORD *)(a1 + 24) > 6u;
    }
  }
  int v20 = 0;
  *(unsigned char *)(a1 + 296) = v8;
  *(unsigned char *)(a1 + 297) = 1;
  *(unsigned char *)(a1 + 29_Block_object_dispose(&STACK[0x4C8], 8) = a2 == 0;
  if (a2) {
    goto LABEL_6;
  }
  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  GLint params = 1;
  if (!v10
    || (CFIndex v11 = v10,
        [v10 setObject:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F38D70]],
        a2 = (void *)[objc_alloc(MEMORY[0x1E4F38D58]) initWithAPI:3 properties:v11],
        v11,
        !a2))
  {
    fig_log_get_emitter();
    uint64_t v19 = v3;
    LODWORD(v1_Block_object_dispose(&STACK[0x4C8], 8) = 0;
    FigDebugAssert3();
    goto LABEL_16;
  }
  if ([a2 setParameter:608 to:&params])
  {

LABEL_16:
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x4C8], 8) = 0;
    uint64_t result = objc_msgSend(MEMORY[0x1E4F38D58], "setCurrentContext:", 0, v18, v19);
    *(_DWORD *)a1 = 2;
    return result;
  }
LABEL_6:
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x4C8], 8) = a2;
  [MEMORY[0x1E4F38D58] setCurrentContext:a2];
  int v9 = *(_DWORD *)(a1 + 56);
  if (v9 != 1)
  {
    if (v9) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
  }
  int v20 = v9;
  [*(id *)(a1 + 48) setParameter:608 to:&v20];
  glGetIntegerv(0xD33u, &params);
  GLint v13 = params;
  *(_DWORD *)(a1 + 60) = params;
  *(_DWORD *)(a1 + 64) = v13;
  glGetIntegerv(0x84E8u, &params);
  GLint v14 = params;
  if (*(_DWORD *)(a1 + 60) < params) {
    *(_DWORD *)(a1 + 60) = params;
  }
  if (*(_DWORD *)(a1 + 64) < v14) {
    *(_DWORD *)(a1 + 64) = v14;
  }
  glGetIntegerv(0xD3Au, &params);
  if (*(_DWORD *)(a1 + 60) < params) {
    *(_DWORD *)(a1 + 60) = params;
  }
  if (*(_DWORD *)(a1 + 64) < v22) {
    *(_DWORD *)(a1 + 64) = v22;
  }
  *(void *)(a1 + 6_Block_object_dispose(&STACK[0x4C8], 8) = -1;
  *(_DWORD *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x4C8], 8) = 0u;
  glGenTextures(4, (GLuint *)(a1 + 84));
  glGenTextures(4, (GLuint *)(a1 + 124));
  glGenTextures(4, (GLuint *)(a1 + 168));
  glGenTextures(4, (GLuint *)(a1 + 200));
  glGenTextures(2, (GLuint *)(a1 + 116));
  glGenTextures(2, (GLuint *)(a1 + 156));
  glGenFramebuffers(4, (GLuint *)(a1 + 100));
  glGenFramebuffers(4, (GLuint *)(a1 + 184));
  glGenFramebuffers(4, (GLuint *)(a1 + 216));
  glGenFramebuffers(4, (GLuint *)(a1 + 140));
  glGenFramebuffers(1, (GLuint *)(a1 + 164));
  compile_shader((GLuint *)(a1 + 300), (uint64_t *)NoiseReductionBoxBlur334_prog);
  compile_shader((GLuint *)(a1 + 312), (uint64_t *)NoiseReductionBoxBlur554_prog);
  compile_shader((GLuint *)(a1 + 324), (uint64_t *)NoiseReductionBoxBlur774_prog);
  compile_shader((GLuint *)(a1 + 336), (uint64_t *)NoiseReductionBoxBlur2_554_prog);
  compile_shader((GLuint *)(a1 + 348), (uint64_t *)NoiseReductionChromaDenoiseX2_prog);
  if (AlgorithmFromTuningOptions == 3) {
    CFNumberRef v15 = NoiseReductionLumaRemix4Advanced_prog;
  }
  else {
    CFNumberRef v15 = NoiseReductionLumaRemix4_prog;
  }
  if (AlgorithmFromTuningOptions == 3) {
    int v16 = NoiseReductionLumaDenoiseChromaRemixX2Advanced_prog;
  }
  else {
    int v16 = NoiseReductionLumaDenoiseChromaRemixX2_prog;
  }
  if (AlgorithmFromTuningOptions == 3) {
    int v17 = NoiseReductionLumaChromaRemixDenoiseX2Advanced_prog;
  }
  else {
    int v17 = NoiseReductionLumaChromaRemixDenoiseX2_prog;
  }
  compile_shader((GLuint *)(a1 + 360), (uint64_t *)v15);
  compile_shader((GLuint *)(a1 + 372), (uint64_t *)v16);
  compile_shader((GLuint *)(a1 + 384), (uint64_t *)v17);
  compile_shader((GLuint *)(a1 + 396), (uint64_t *)NoiseReductionLumaDenoiseX2_prog);
  compile_shader((GLuint *)(a1 + 408), (uint64_t *)NoiseReductionLumaFusion_prog);
  compile_shader((GLuint *)(a1 + 420), (uint64_t *)NoiseReductionLumaRemixFusion_prog);
  compile_shader((GLuint *)(a1 + 432), (uint64_t *)NoiseReductionChromaFusion_prog);
  compile_shader((GLuint *)(a1 + 444), (uint64_t *)NoiseReductionChromaRemixFusion_prog);
  glUseProgram(0);
  return [MEMORY[0x1E4F38D58] setCurrentContext:0];
}

void compile_shader(GLuint *a1, uint64_t *a2)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  v29[0] = a1 + 1;
  v29[1] = a1 + 2;
  if (!a2 || (v2 = *a2) == 0 || (uint64_t v3 = a2[1]) == 0)
  {
    fig_log_get_emitter();
LABEL_27:
    FigDebugAssert3();
    return;
  }
  uint64_t v5 = *(GLchar **)v3;
  GLuint Shader_1 = gl_UtilsCreateShader_1(0x8B31u, *(GLchar **)v2);
  if (!Shader_1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_26:
    fig_log_get_emitter();
    goto LABEL_27;
  }
  GLuint v7 = Shader_1;
  GLuint v8 = gl_UtilsCreateShader_1(0x8B30u, v5);
  if (!v8)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    glDeleteShader(v7);
    goto LABEL_26;
  }
  GLuint v9 = v8;
  GLint params = 0;
  GLuint Program = glCreateProgram();
  GLuint v11 = Program;
  if (Program)
  {
    glAttachShader(Program, v7);
    glAttachShader(v11, v9);
    glLinkProgram(v11);
    glGetProgramiv(v11, 0x8B82u, &params);
    if (!params)
    {
      glDeleteProgram(v11);
      GLuint v11 = 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  glDeleteShader(v7);
  glDeleteShader(v9);
  if (!v11) {
    goto LABEL_26;
  }
  glUseProgram(v11);
  *a1 = v11;
  uint64_t v12 = *(const GLchar ***)(v2 + 16);
  GLint v13 = *v12;
  if (*v12)
  {
    GLint v14 = v12 + 2;
    do
    {
      glBindAttribLocation(v11, *((_DWORD *)v14 - 2), v13);
      CFNumberRef v15 = (const GLchar *)*v14;
      v14 += 2;
      GLint v13 = v15;
    }
    while (v15);
    glLinkProgram(v11);
  }
  int v16 = *(const GLchar ***)(v2 + 8);
  int v17 = *v16;
  if (*v16)
  {
    int v18 = 0;
    uint64_t v19 = v16 + 2;
    do
    {
      int AttribLocation = glGetAttribLocation(v11, v17);
      GLint v21 = (int *)v29[v18];
      if (v21)
      {
        *GLint v21 = AttribLocation;
        ++v18;
      }
      int v22 = *v19;
      v19 += 2;
      int v17 = v22;
    }
    while (v22);
  }
  uint64_t v23 = *(const GLchar ***)(v3 + 8);
  int v24 = *v23;
  if (*v23)
  {
    int v25 = v23 + 2;
    do
    {
      GLint UniformLocation = glGetUniformLocation(v11, v24);
      glUniform1i(UniformLocation, *((_DWORD *)v25 - 2));
      GLenum v27 = (const GLchar *)*v25;
      v25 += 2;
      int v24 = v27;
    }
    while (v27);
  }
}

uint64_t gl_UtilsCreateShader_1(GLenum a1, GLchar *a2)
{
  string = a2;
  uint64_t Shader = glCreateShader(a1);
  uint64_t v3 = Shader;
  if (Shader)
  {
    GLint params = 0;
    glShaderSource(Shader, 1, (const GLchar *const *)&string, 0);
    glCompileShader(v3);
    glGetShaderiv(v3, 0x8B81u, &params);
    if (!params)
    {
      glDeleteShader(v3);
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v3;
}

void WaitForInitializationToFinish_0(uint64_t a1)
{
  if (*(_DWORD *)a1 != 1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 8);
    if (v1)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __WaitForInitializationToFinish_block_invoke_0;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_sync(v1, block);
    }
  }
}

void releasePixelBuffers(uint64_t a1)
{
  for (uint64_t i = 240; i != 264; i += 8)
  {
    uint64_t v3 = *(__CVBuffer **)(a1 + i);
    if (v3)
    {
      CVPixelBufferRelease(v3);
      *(void *)(a1 + i) = 0;
    }
  }
  releaseOutputPixelBuffers(a1);
}

uint64_t __WaitForInitializationToFinish_block_invoke_0(uint64_t result)
{
  uint64_t v1 = *(_DWORD **)(result + 32);
  if (*v1 != 2) {
    *uint64_t v1 = 1;
  }
  return result;
}

void releaseOutputPixelBuffers(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) == 1)
  {
    uint64_t v1 = 0;
    uint64_t v2 = a1 + 272;
    do
    {
      uint64_t v3 = *(__CVBuffer **)(v2 + v1);
      if (v3)
      {
        CVPixelBufferRelease(v3);
        *(void *)(v2 + v1) = 0;
      }
      v1 += 8;
    }
    while (v1 != 24);
  }
}

uint64_t BindLumaAndChromaTexturesToDualFbo(void *a1, IOSurfaceRef buffer, GLuint a3, __IOSurface *a4, GLuint a5, GLuint a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int WidthOfPlane = IOSurfaceGetWidthOfPlane(buffer, 0);
  size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(buffer, 0);
  glBindTexture(0xDE1u, a3);
  if (WidthOfPlane >= 0) {
    int v14 = WidthOfPlane;
  }
  else {
    int v14 = WidthOfPlane + 1;
  }
  BYTE4(v21) = 0;
  LODWORD(v21) = 0;
  if ((objc_msgSend(a1, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", buffer, 3553, 33323, (v14 >> 1), HeightOfPlane, 33319, 5121, v21) & 1) == 0)
  {
    fig_log_get_emitter();
    uint64_t v19 = 1;
LABEL_15:
    FigDebugAssert3();
    return v19;
  }
  int v15 = IOSurfaceGetWidthOfPlane(a4, 1uLL);
  size_t v16 = IOSurfaceGetHeightOfPlane(a4, 1uLL);
  glBindTexture(0xDE1u, a5);
  if (v15 >= 0) {
    int v17 = v15;
  }
  else {
    int v17 = v15 + 1;
  }
  BYTE4(v22) = 0;
  LODWORD(v22) = 1;
  int v18 = objc_msgSend(a1, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", a4, 3553, 6408, (v17 >> 1), v16, 6408, 5121, v22);
  uint64_t v19 = v18 ^ 1u;
  if ((v18 & 1) == 0)
  {
    fig_log_get_emitter();
    goto LABEL_15;
  }
  glBindFramebuffer(0x8D40u, a6);
  *(void *)bufs = 0x8CE100008CE0;
  glDrawBuffers(2, bufs);
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, a3, 0);
  glFramebufferTexture2D(0x8D40u, 0x8CE1u, 0xDE1u, a5, 0);
  if (glCheckFramebufferStatus(0x8D40u) == 36053) {
    return v19;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

atomic_uint *accelCompletionCallback(atomic_uint *result, int a2)
{
  if (!a2) {
    atomic_fetch_add_explicit(result, 1u, memory_order_relaxed);
  }
  return result;
}

void m2m_filter_coefficients(int a1, int a2, char a3, int a4, unsigned int *a5, float a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  float v6 = sqrt(a6) * a6;
  if (a6 <= 1.0) {
    float v7 = v6;
  }
  else {
    float v7 = 1.0;
  }
  if (a2 >= 1)
  {
    uint64_t v10 = 0;
    if (a1 >= 15) {
      int v11 = 15;
    }
    else {
      int v11 = a1;
    }
    int v12 = a1 - 1;
    if (a1 < 1) {
      int v12 = a1;
    }
    int v13 = v12 >> 1;
    float v14 = (float)a2;
    float v15 = (float)v13;
    int v16 = ~(-1 << (a4 + a3));
    int v17 = 1 << a4;
    int v18 = v13 * a2;
    if (v11 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v11;
    }
    uint64_t v20 = a2;
    uint64_t v21 = v18;
    uint64_t v22 = 4 * a2;
    uint64_t v23 = a5;
    do
    {
      if (a1 < 1)
      {
        int v24 = 0;
      }
      else
      {
        int v24 = 0;
        float v25 = -(float)((float)((float)((float)((float)(int)v10 / v14) + 1.0) + v15) * v7);
        uint64_t v26 = v36;
        uint64_t v27 = v19;
        do
        {
          float v28 = fabsf(v25);
          *v26++ = v28 <= 1.0;
          if (v28 <= 1.0) {
            ++v24;
          }
          float v25 = v7 + v25;
          --v27;
        }
        while (v27);
      }
      unsigned int v29 = (float)(ldexpf(1.0 / (float)v24, a4) + 0.5) & v16;
      unsigned int v30 = v29 + v17;
      if (a1 >= 1)
      {
        float v31 = v36;
        uint64_t v32 = v19;
        float v33 = v23;
        do
        {
          if (*v31++)
          {
            *float v33 = v29;
            v30 -= v29;
          }
          else
          {
            *float v33 = 0;
          }
          float v33 = (unsigned int *)((char *)v33 + v22);
          --v32;
        }
        while (v32);
      }
      a5[v10 + v21] = v30;
      ++v10;
      ++v23;
    }
    while (v10 != v20);
  }
}

void bindVertexAttributes(uint64_t a1)
{
  glVertexAttribPointer(*(_DWORD *)(a1 + 4), 2, 0x1406u, 0, 16, &bindVertexAttributes_verts);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 4));
  glVertexAttribPointer(*(_DWORD *)(a1 + 8), 2, 0x1406u, 0, 16, &unk_1A5F0CD48);
  GLuint v2 = *(_DWORD *)(a1 + 8);
  glEnableVertexAttribArray(v2);
}

void remix_denoise_luma_chroma_level(uint64_t a1, uint64_t a2, float *a3, int a4, GLfloat a5)
{
  if (a4 >= 3) {
    uint64_t v8 = 372;
  }
  else {
    uint64_t v8 = 384;
  }
  if (a4 >= 3) {
    uint64_t v9 = a1 + 372;
  }
  else {
    uint64_t v9 = a1 + 384;
  }
  unsigned int v10 = a4 - 1;
  uint64_t v11 = a1 + 264;
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(a1 + 264 + 8 * (a4 - 1)), 1uLL);
  GLsizei HeightOfPlane = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(v11 + 8 * v10), 1uLL);
  int v14 = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(v11 + 8 * a4), 1uLL);
  int v38 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(v11 + 8 * a4), 1uLL);
  bindVertexAttributes(v9);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 168 + 4 * v10));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  glActiveTexture(0x84C1u);
  uint64_t v15 = a1 + 4 * a4;
  glBindTexture(0xDE1u, *(_DWORD *)(v15 + 84));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  glActiveTexture(0x84C2u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 168 + 4 * a4));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glActiveTexture(0x84C3u);
  glBindTexture(0xDE1u, *(_DWORD *)(v15 + 200));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  if (a4 <= 2)
  {
    glActiveTexture(0x84C4u);
    uint64_t v16 = a1 + 4 * (a4 + 1);
    glBindTexture(0xDE1u, *(_DWORD *)(v16 + 84));
    glTexParameterf(0xDE1u, 0x2802u, 33648.0);
    glTexParameterf(0xDE1u, 0x2803u, 33648.0);
    glTexParameterf(0xDE1u, 0x2800u, 9729.0);
    glTexParameterf(0xDE1u, 0x2801u, 9729.0);
    glActiveTexture(0x84C5u);
    glBindTexture(0xDE1u, *(_DWORD *)(v16 + 124));
    glTexParameterf(0xDE1u, 0x2802u, 33648.0);
    glTexParameterf(0xDE1u, 0x2803u, 33648.0);
    glTexParameterf(0xDE1u, 0x2800u, 9729.0);
    glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  }
  if (v14 >= 0) {
    int v17 = v14;
  }
  else {
    int v17 = v14 + 1;
  }
  int v18 = v17 >> 1;
  if (WidthOfPlane >= 0) {
    int v19 = WidthOfPlane;
  }
  else {
    int v19 = WidthOfPlane + 1;
  }
  GLsizei v20 = v19 >> 1;
  glBindFramebuffer(0x8D40u, *(_DWORD *)(a1 + 4 * a4 + 140));
  glViewport(0, 0, v20, HeightOfPlane);
  glUseProgram(*(_DWORD *)(a1 + v8));
  GLint UniformLocation = glGetUniformLocation(*(_DWORD *)(a1 + v8), "luma_diff_remix");
  uint64_t v22 = (GLfloat *)(a2 + 56 * a4);
  glUniform1f(UniformLocation, v22[6]);
  GLint v23 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "chroma_diff_remix");
  glUniform1f(v23, 1.0);
  GLint v24 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "pixel_pitch");
  glUniform2f(v24, 1.0 / (float)(v18 - 1), 1.0 / (float)(v38 - 1));
  GLint v25 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "luma_sigma_intercept");
  glUniform1f(v25, *v22);
  GLint v26 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "luma_sigma_max");
  glUniform1f(v26, v22[2]);
  GLint v27 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "luma_sigma_slope");
  glUniform1f(v27, v22[1]);
  GLint v28 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "luma_sigma_constant");
  glUniform1f(v28, v22[2]);
  GLint v29 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "chroma_sigma_r");
  uint64_t v30 = a2 + 56 * v10;
  glUniform1f(v29, *(GLfloat *)(v30 + 16));
  GLint v31 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "chroma_sigma_b");
  glUniform1f(v31, *(GLfloat *)(v30 + 20));
  GLint v32 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "lens_shading_factors");
  glUniform2f(v32, *a3 + -1.0, a3[1] + -1.0);
  GLint v33 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "chroma_demoire_strength");
  glUniform1f(v33, a5);
  GLint v34 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "denoise_pixel_pitch");
  glUniform2f(v34, 1.0 / (float)v20, 1.0 / (float)HeightOfPlane);
  GLint v35 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "blue_boost_factor");
  glUniform1f(v35, v22[7]);
  GLint v36 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "flatness_boost_factor");
  glUniform1f(v36, v22[8]);
  GLint v37 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "flatness_threshold");
  glUniform1f(v37, v22[9]);
  glDrawArrays(5u, 0, 4);
  glFlush();
}

const UInt8 *get_device_parameters_for_fusion_type(uint64_t a1, void *a2, void *a3)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = a2;
  values[1] = a3;
  uint64_t result = (const UInt8 *)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  if (result)
  {
    uint64_t v5 = result;
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 472), result);
    CFRelease(v5);
    if (Value) {
      return CFDataGetBytePtr(Value);
    }
    else {
      return 0;
    }
  }
  return result;
}

float scan_entries(float *a1, int a2, float a3)
{
  float result = 1.0;
  uint64_t v5 = (a2 - 1);
  if (a2 >= 1)
  {
    if (*a1 >= a3)
    {
      return a1[1];
    }
    else if (a1[2 * (a2 - 1)] <= a3)
    {
      return a1[2 * v5 + 1];
    }
    else if (a2 >= 2)
    {
      for (uint64_t i = a1 + 2; ; i += 2)
      {
        float v7 = *(i - 2);
        if (v7 <= a3 && *i > a3) {
          break;
        }
        if (!--v5) {
          return result;
        }
      }
      return *(i - 1) + (float)((float)((float)(a3 - v7) * (float)(i[1] - *(i - 1))) / (float)(*i - v7));
    }
  }
  return result;
}

void *nrasp_interpolateArrayOfValuesForGain(void *a1, float a2)
{
  uint64_t v3 = a1;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v19;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v8 = (void *)[MEMORY[0x1E4F1CA48] array];
          long long v14 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          long long v17 = 0u;
          uint64_t v9 = [v3 countByEnumeratingWithState:&v14 objects:v22 count:16];
          if (v9)
          {
            uint64_t v10 = v9;
            uint64_t v11 = *(void *)v15;
            do
            {
              for (uint64_t j = 0; j != v10; ++j)
              {
                if (*(void *)v15 != v11) {
                  objc_enumerationMutation(v3);
                }
                objc_msgSend(v8, "addObject:", nrasp_interpolateValueForGain(*(void **)(*((void *)&v14 + 1) + 8 * j), a2));
              }
              uint64_t v10 = [v3 countByEnumeratingWithState:&v14 objects:v22 count:16];
            }
            while (v10);
          }
          return v8;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v18 objects:v23 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  return v3;
}

uint64_t nrasp_interpolateValueForGain(void *a1, float a2)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return (uint64_t)a1;
  }
  int v5 = [a1 count];
  int v6 = v5;
  if (v5 < 1 || (v5 & 1) != 0)
  {
    fig_log_get_emitter();
    uint64_t v26 = v2;
    LODWORD(v25) = 0;
    FigDebugAssert3();
  }
  objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", 0, v25, v26), "floatValue");
  if (v7 >= a2)
  {
    GLint v23 = a1;
    uint64_t v24 = 1;
  }
  else
  {
    int v8 = v6 - 2;
    objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v6 - 2), "floatValue");
    if (v9 > a2)
    {
      if (v6 < 3) {
        goto LABEL_15;
      }
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      do
      {
        objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v10), "floatValue");
        float v13 = v12;
        int v14 = v10 + 2;
        objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v10 + 2), "floatValue");
        if (v13 <= a2 && v15 > a2)
        {
          float v17 = v15;
          objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v10 + 1), "floatValue");
          float v19 = v18;
          objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v10 + 3), "floatValue");
          LODWORD(v21) = llroundf(v19 + (float)((float)((float)(a2 - v13) * (float)(v20 - v19)) / (float)(v17 - v13)));
          uint64_t v11 = [NSNumber numberWithInt:v21];
        }
        v10 += 2;
      }
      while (v8 > v14);
      if (!v11)
      {
LABEL_15:
        fig_log_get_emitter();
        FigDebugAssert3();
        return 0;
      }
      return v11;
    }
    uint64_t v24 = v6 - 1;
    GLint v23 = a1;
  }
  return [v23 objectAtIndexedSubscript:v24];
}

const char *gr_sprintNode(const char *a1, void *a2)
{
  float result = gr_sprintString(a1, (CFStringRef)[a2 name]);
  if (!*a1)
  {
    float result = gr_sprintString(a1, (CFStringRef)[a2 nodeSubType]);
    if (!*a1)
    {
      CFStringRef v5 = (const __CFString *)[a2 nodeType];
      return gr_sprintString(a1, v5);
    }
  }
  return result;
}

uint64_t BWSignalErrorAt()
{
  FigSignalErrorAt();
  uint64_t v0 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v1 = *MEMORY[0x1E4F28760];
  return [v0 errorWithDomain:v1 code:-50 userInfo:0];
}

uint64_t gr_countOfBuffersRetainedOutsideEmitCallbackOfOutput(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v6 = [a1 mediaType];
  float v7 = objc_msgSend((id)objc_msgSend(a1, "connection"), "input");
  if ((gr_outputAndInputShareAPipelineStage(a1, a2, v7) & 1) == 0) {
    a3 += gr_outputOrInputIsStillImagePipelineStage(a1, a2, v7) ^ 1;
  }
  uint64_t v8 = objc_msgSend((id)objc_msgSend(v7, "mediaConfigurationForAttachedMediaKey:", a2), "retainedBufferCount")+ a3;
  if ([v7 _passthroughModeForAttachedMediaKey:a2] == 1)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    float v9 = objc_msgSend((id)objc_msgSend(v7, "node"), "outputs");
    uint64_t v10 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      unsigned int v19 = a3;
      uint64_t v12 = *(void *)v21;
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v21 != v12) {
            objc_enumerationMutation(v9);
          }
          int v14 = *(void **)(*((void *)&v20 + 1) + 8 * v13);
          uint64_t v15 = objc_msgSend(v14, "attachedMediaKeyDrivenByInputAttachedMediaKey:inputIndex:", a2, objc_msgSend(v7, "index"));
          if (v15)
          {
            uint64_t v16 = v15;
            if ([v14 mediaType] == v6
              && [v14 _passthroughModeForAttachedMediaKey:v16] == 1)
            {
              int v17 = gr_countOfBuffersRetainedOutsideEmitCallbackOfOutput(v14, v16, v19);
              if (v17 <= (int)v8) {
                uint64_t v8 = v8;
              }
              else {
                uint64_t v8 = v17;
              }
            }
          }
          ++v13;
        }
        while (v11 != v13);
        uint64_t v11 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v11);
    }
  }
  return v8;
}

uint64_t gr_logStringForInput(void *a1)
{
  if ([a1 name]) {
    uint64_t v2 = (__CFString *)[NSString stringWithFormat:@", '%@'", objc_msgSend(a1, "name")];
  }
  else {
    uint64_t v2 = &stru_1EFA403E0;
  }
  return [NSString stringWithFormat:@"<%p, %d, '%@'%@>", a1, objc_msgSend(a1, "index"), BWStringForOSType(objc_msgSend(a1, "mediaType")), v2];
}

uint64_t gr_logStringForOutput(void *a1, uint64_t a2)
{
  if ([a1 name]) {
    uint64_t v4 = (__CFString *)[NSString stringWithFormat:@", '%@'", objc_msgSend(a1, "name")];
  }
  else {
    uint64_t v4 = &stru_1EFA403E0;
  }
  return [NSString stringWithFormat:@"<%p, %d, '%@'%@>", a1, a2, BWStringForOSType(objc_msgSend(a1, "mediaType")), v4];
}

const char *gr_sprintString(const char *result, CFStringRef theString)
{
  *(_OWORD *)float result = 0u;
  *((_OWORD *)result + 1) = 0u;
  if (theString)
  {
    uint64_t v2 = (char *)result;
    float result = CFStringGetCStringPtr(theString, 0x8000100u);
    if (result) {
      return (const char *)snprintf(v2, 0x20uLL, "%.*s", 31, result);
    }
  }
  return result;
}

uint64_t BWDeepFusionEnhancedResolutionCanProcessUsingQuadraFrame(const void *a1, char *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  float v24 = NAN;
  if (!a1
    || !a2
    || (uint64_t v3 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F53070], 0)) == 0
    || (uint64_t v4 = v3,
        objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E4F54148]), "intValue") != 1))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E4F54130]), "floatValue");
  CFStringRef v5 = (const void *)[v4 objectForKeyedSubscript:*MEMORY[0x1E4F54128]];
  if (!v5)
  {
    int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_24;
  }
  int v6 = v5;
  unsigned int v21 = -1;
  uint64_t v7 = portIndexFromPortType(v5, (int *)&v21);
  if (v7)
  {
    uint64_t v11 = v7;
    FigDebugAssert3();
    unsigned int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v16 = v23;
    if (os_log_type_enabled(v15, type)) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (v17)
    {
      int v26 = 136315394;
      GLint v27 = "BWDeepFusionEnhancedResolutionCanProcessUsingQuadraFrame";
      __int16 v28 = 2112;
      GLint v29 = v6;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_25;
  }
  uint64_t v25 = v4;
  uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v25 count:1];
  uint64_t v9 = FigMotionComputeBlurScores(v8, v21, 4, 5);
  if (v9)
  {
    uint64_t v11 = v9;
    FigDebugAssert3();
    unsigned int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    float v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v19 = v23;
    if (os_log_type_enabled(v18, type)) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = v19 & 0xFFFFFFFE;
    }
    if (v20)
    {
      int v26 = 136315138;
      GLint v27 = "BWDeepFusionEnhancedResolutionCanProcessUsingQuadraFrame";
      _os_log_send_and_compose_impl();
    }
LABEL_25:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v11;
  }
  if (v24 > 127.0)
  {
LABEL_24:
    char v10 = 0;
    goto LABEL_10;
  }
  char v10 = 1;
LABEL_10:
  uint64_t v11 = 0;
  *a2 = v10;
  return v11;
}

uint64_t fvcd_handleAutofocusProcessorNotification(int a1, uint64_t a2, CFTypeRef cf2, uint64_t a4, uint64_t a5)
{
  if (!a2 || !cf2) {
    return FigDebugAssert3();
  }
  if (CFEqual(@"SubjectAreaChanged", cf2))
  {
    uint64_t v8 = @"SubjectAreaChanged";
  }
  else if (CFEqual(@"DidStartFocusOperation", cf2))
  {
    uint64_t v8 = @"DidStartFocusOperation";
  }
  else if (CFEqual(@"DidCompleteFocusOperation", cf2))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 1492));
    [*(id *)(a2 + 1512) focusScanDidComplete];
    [*(id *)(a2 + 1528) focusScanDidComplete];
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 1492));
    if (*(void *)(a2 + 1312) && ([(id)a2 depthDataDeliveryEnabled] & 1) == 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a2 + 1280));
      if (*(unsigned char *)(a2 + 1324))
      {
        [*(id *)(a2 + 1312) focusModeDidChange];
        *(unsigned char *)(a2 + 1324) = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 1280));
    }
    uint64_t v8 = @"DidCompleteFocusOperation";
  }
  else
  {
    uint64_t result = CFEqual(@"DidCancelFocusOperation", cf2);
    if (!result) {
      return result;
    }
    uint64_t v8 = @"DidCancelFocusOperation";
  }
  return [(id)a2 _postNotificationWithPayload:v8 notificationPayload:a5];
}

void sub_1A5CF5AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A5CF8F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1A5CFDBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_1A5D02F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t fvcd_handleRegionOfInterestChangedForCameraControlsFromFramingDelegates(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (*(unsigned char *)(result + 3548)) {
    BOOL v3 = (a2 | a3) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return result;
  }
  uint64_t v4 = (CGRect *)result;
  if (*(unsigned char *)(result + 232) || !*(unsigned char *)(result + 3624) && *(unsigned char *)(result + 4088)) {
    return result;
  }
  if (!a2)
  {
    CGFloat v7 = *MEMORY[0x1E4F1DB20];
    CGFloat v9 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat v11 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat v13 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    if (a3) {
      goto LABEL_10;
    }
LABEL_12:
    uint64_t v15 = *MEMORY[0x1E4F1DB20];
    uint64_t v17 = *(void *)(MEMORY[0x1E4F1DB20] + 8);
    uint64_t v19 = *(void *)(MEMORY[0x1E4F1DB20] + 16);
    uint64_t v21 = *(void *)(MEMORY[0x1E4F1DB20] + 24);
    goto LABEL_13;
  }
  [(id)a2 regionOfInterestForCameraControls];
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  if (!a3) {
    goto LABEL_12;
  }
LABEL_10:
  [(id)a3 regionOfInterestForCameraControls];
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
LABEL_13:
  v29.origin.double x = v7;
  v29.origin.double y = v9;
  v29.size.double width = v11;
  v29.size.double height = v13;
  CGRect v30 = CGRectUnion(v29, *(CGRect *)&v15);
  double x = v30.origin.x;
  double y = v30.origin.y;
  double width = v30.size.width;
  double height = v30.size.height;
  uint64_t result = CGRectIsInfinite(v30);
  if ((result & 1) == 0)
  {
    v31.origin.double x = x;
    v31.origin.double y = y;
    v31.size.double width = width;
    v31.size.double height = height;
    uint64_t result = CGRectIsEmpty(v31);
    if ((result & 1) == 0)
    {
      v32.origin.double x = x;
      v32.origin.double y = y;
      v32.size.double width = width;
      v32.size.double height = height;
      uint64_t result = CGRectContainsRect(v4[111], v32);
      if (result)
      {
        uint64_t v26 = *MEMORY[0x1E4F54B58];
        double v27 = *MEMORY[0x1E4F1DAD8];
        return -[BWFigVideoCaptureDevice _updateSensorRegionOfInterest:forZoomFactor:previewShiftInSensorSpace:streamProperty:]((uint64_t)v4, v26, x, y, width, height, 1.0, v27);
      }
    }
  }
  return result;
}

char *__fvcd_serviceRetryStillImageCapture_block_invoke(uint64_t a1)
{
  uint64_t result = (char *)-[BWFigVideoCaptureDevice _captureStillImageNowOnStreamWithOptions:captureStreamProperties:](*(void *)(a1 + 32), *(void **)(*(void *)(a1 + 32) + 2512), *(void **)(*(void *)(a1 + 32) + 2520));
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = *(char **)(a1 + 32);
    return -[BWFigVideoCaptureDevice _terminateCaptureAndEmitStillImageCaptureError:stillImageCaptureNowOptions:stillImageCaptureStreamProperties:](v4, v3);
  }
  return result;
}

void sub_1A5D1B00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureMemoryReporterStart()
{
  -[FigCaptureMemoryReporter _startReporting]((uint64_t)+[FigCaptureMemoryReporter sharedInstance](FigCaptureMemoryReporter, "sharedInstance"));
  if (dword_1EB4C51B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

void *__getReportMemoryExceptionFromTaskSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  uint64_t v7 = 0;
  double v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v2 = (void *)libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  uint64_t v10 = libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  if (!libMemoryResourceExceptionLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __libMemoryResourceExceptionLibraryCore_block_invoke;
    v4[4] = &unk_1E5C24A38;
    CFStringRef v5 = &v7;
    double v6 = v4;
    long long v11 = xmmword_1E5C2BFA0;
    uint64_t v12 = 0;
    v8[3] = _sl_dlopen();
    libMemoryResourceExceptionLibraryCore_frameworkLibrardouble y = *(void *)(v5[1] + 24);
    uint64_t v2 = (void *)v8[3];
  }
  _Block_object_dispose(&v7, 8);
  if (!v2) {
    __getReportMemoryExceptionFromTaskSymbolLoc_block_invoke_cold_1(v4);
  }
  if (v4[0]) {
    free(v4[0]);
  }
  uint64_t result = dlsym(v2, "ReportMemoryExceptionFromTask");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getReportMemoryExceptionFromTaskSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A5D1B60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __libMemoryResourceExceptionLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  libMemoryResourceExceptionLibraryCore_frameworkLibrardouble y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t FigRemoteQueueSenderGetTypeID()
{
  return sRemoteQueueSenderID;
}

uint64_t rqSenderRegister()
{
  sRemoteQueueSenderClass = 0;
  *(void *)algn_1EB4C5AD8 = "FigRemoteQueueSender";
  qword_1EB4C5AE0 = (uint64_t)rqSenderInit;
  unk_1EB4C5AE8 = 0;
  qword_1EB4C5AF0 = (uint64_t)rqSenderFinalize;
  unk_1EB4C5AF8 = 0;
  qword_1EB4C5B00 = 0;
  unk_1EB4C5B08 = 0;
  qword_1EB4C5B10 = (uint64_t)rqSenderCopyDebugDesc;
  uint64_t result = _CFRuntimeRegisterClass();
  sRemoteQueueSenderID = result;
  return result;
}

intptr_t rqSenderCancelDequeues(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 104));
}

uint64_t FigRemoteQueueSenderSetMaximumBufferAge(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 216) = a2;
  return 0;
}

uint64_t FigRemoteQueueSenderEnqueue(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  uint64_t v4 = rqSenderEnqueue(a1, a2, 1uLL);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  return v4;
}

uint64_t FigRemoteQueueSenderResetWithApplier(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  uint64_t v4 = rqSenderReset(a1, a2);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  return v4;
}

uint64_t rqSenderReset(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(*(void *)(a1 + 32) + 4))
  {
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  if (a2)
  {
    uint64_t v4 = (char *)malloc_type_calloc(*(unsigned int *)(a1 + 40), 0x20uLL, 0x1000040E0EAB150uLL);
    if (!v4)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      uint64_t v5 = 4294950630;
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  int v6 = read(*(_DWORD *)(a1 + 52), __buf, 0x200uLL);
  uint64_t v7 = (v6 >> 1) & ~(v6 >> 31);
  if (*(_DWORD *)(a1 + 40) < v7)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v8 + 4) < (int)v7)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v8 = *(void *)(a1 + 32);
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 4), -(int)v7, memory_order_relaxed);
  uint64_t v9 = *(NSObject **)(a1 + 88);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __rqSenderReset_block_invoke;
  block[3] = &__block_descriptor_tmp_60;
  block[4] = a1;
  dispatch_sync(v9, block);
  if (*(unsigned char *)(a1 + 114))
  {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL);
    *(unsigned char *)(a1 + 114) = 0;
  }
  if (*(unsigned char *)(a1 + 113))
  {
    uint64_t v10 = *(void *)(a1 + 144);
    if (v10) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, a1);
    }
    if (*(_DWORD *)(a1 + 40))
    {
      unint64_t v11 = 0;
      uint64_t v12 = 32;
      do
      {
        rqSenderCleanupQueueElement(*(void *)(a1 + 32) + v12);
        ++v11;
        v12 += 32;
      }
      while (v11 < *(unsigned int *)(a1 + 40));
    }
    if (a2) {
      uint64_t v5 = 4294950631;
    }
    else {
      uint64_t v5 = 0;
    }
    goto LABEL_23;
  }
  if (v7)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = v16 + 32 * (unsigned __int16)__buf[v14];
      int v34 = 0;
      uint64_t v32 = 0;
      IOSurfaceRef buffer = 0;
      uint64_t v19 = *(void *)(v17 + 32);
      uint64_t v18 = v17 + 32;
      uint64_t v32 = v19;
      IOSurfaceRef buffer = *(IOSurfaceRef *)(v18 + 16);
      int v34 = *(_DWORD *)(v18 + 28);
      uint64_t v20 = v34;
      if (*(int *)(v16 + 4 * v34 + 20) <= 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v20 = v34;
      }
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 4 * v20 + 20), 0xFFFFFFFF, memory_order_relaxed);
      if (a2 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 16))(a2, v7, v14, &v32))
      {
        uint64_t v21 = v4;
        long long v22 = &v4[32 * v15];
        uint64_t v23 = v32;
        *(void *)long long v22 = v32;
        float v24 = buffer;
        *((void *)v22 + 2) = buffer;
        *((_DWORD *)v22 + 7) = v34;
        if (v23)
        {
          *((void *)v22 + 1) = FigSharedMemBlockGetRemoteAddress(v23);
          float v24 = buffer;
        }
        uint64_t v4 = v21;
        if (v24) {
          *(_DWORD *)&v21[32 * v15 + 24] = IOSurfaceGetID(v24);
        }
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)(a1 + 32) + 4 * v34 + 20), 1u, memory_order_relaxed);
        __buf[v15] = v15;
        ++v15;
      }
      else
      {
        uint64_t v25 = *(void *)(a1 + 144);
        if (v25) {
          (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v25, a1);
        }
        rqSenderCleanupQueueElement(v18);
      }
      ++v14;
    }
    while (v7 != v14);
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v26 = *(void *)(a1 + 32);
  *(_DWORD *)(v26 + 4) = v15;
  uint64_t v27 = *(unsigned int *)(a1 + 40);
  if (v15 >= v27) {
    int v28 = 0;
  }
  else {
    int v28 = v15;
  }
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x4C8], 8) = v28;
  if (v15 < 1)
  {
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_23;
  }
  memcpy((void *)(v26 + 32), v4, 32 * v27);
  __dmb(0xBu);
  if (write(*(_DWORD *)(a1 + 56), __buf, 2 * v15) == 2 * v15)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v29 = *(void *)(a1 + 144);
    if (v29) {
      (*(void (**)(uint64_t, uint64_t))(v29 + 16))(v29, a1);
    }
    if (*(_DWORD *)(a1 + 40))
    {
      unint64_t v30 = 0;
      uint64_t v31 = 32;
      do
      {
        rqSenderCleanupQueueElement(*(void *)(a1 + 32) + v31);
        ++v30;
        v31 += 32;
      }
      while (v30 < *(unsigned int *)(a1 + 40));
    }
    *(unsigned char *)(a1 + 113) = 1;
    uint64_t v5 = 4294950631;
  }
LABEL_23:
  free(v4);
  return v5;
}

uint64_t FigRemoteQueueSenderReset(uint64_t a1)
{
  return FigRemoteQueueSenderResetWithApplier(a1, 0);
}

uint64_t FigRemoteQueueSenderResetIfFullAndEnqueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FigRemoteQueueSenderResetIfFullAndEnqueueSequence(a1, a2, 1uLL, a3);
}

uint64_t FigRemoteQueueSenderResetIfFullAndEnqueueSequence(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  uint64_t v8 = rqSenderEnqueue(a1, a2, a3);
  if (v8 == -16669)
  {
    uint64_t v8 = rqSenderReset(a1, a4);
    if (!v8) {
      uint64_t v8 = rqSenderEnqueue(a1, a2, a3);
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  return v8;
}

uint64_t FigRemoteQueueSenderRegisterIOSurface(uint64_t a1, __IOSurface *a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  uint64_t v4 = rqSenderRegisterIOSurface(a1, a2);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  return v4;
}

uint64_t FigRemoteQueueSenderReleaseIOSurfaces(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 156) && *(int *)(a1 + 152) > 0)
    {
      uint64_t result = *(void *)(a1 + 168);
      if (result)
      {
        if (CFDictionaryGetCount((CFDictionaryRef)result) >= 1)
        {
          CFRetain((CFTypeRef)a1);
          int v5 = *(_DWORD *)(a1 + 152);
          v6[0] = MEMORY[0x1E4F143A8];
          v6[1] = 0x40000000;
          void v6[2] = __FigRemoteQueueSenderReleaseIOSurfaces_block_invoke;
          void v6[3] = &unk_1E5C2BFC0;
          void v6[4] = a2;
          _OWORD v6[5] = a1;
          FigRemoteQueueProcessAssertion_awakeClientAndRunCallback(v5, (uint64_t)v6);
        }
        return 0;
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 4294950633;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  return result;
}

void __FigRemoteQueueSenderReleaseIOSurfaces_block_invoke(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(a1 + 40) + 72));
  if (!FigRemoteQueueIOSurfaceSender_ReleaseIOSurfaces(*(_DWORD *)(*(void *)(a1 + 40) + 156))) {
    rqSurfacesRemoveAll(*(void *)(a1 + 40) + 168);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(*(void *)(a1 + 40) + 72));
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(a1 + 40));
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  CFRelease(v3);
}

void rqSurfacesRemoveAll(uint64_t a1)
{
  uint64_t v2 = *(__CFDictionary **)a1;
  if (v2)
  {
    CFDictionaryRemoveAllValues(v2);
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      for (uint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 8);
        uint64_t v7 = (void *)(v6 + v4);
        uint64_t v8 = *(const void **)(v6 + v4);
        if (v8 && *(_DWORD *)(a1 + 48))
        {
          uint64_t v9 = v6 + v4;
          uint64_t v10 = *(void *)(v6 + v4 + 24);
          if (v10 != -1) {
            *(void *)(v6 + 32 * v10 + 16) = *(void *)(v9 + 16);
          }
          uint64_t v11 = *(void *)(v9 + 16);
          if (v11 != -1) {
            *(void *)(v6 + 32 * v11 + 24) = v10;
          }
          if (i == *(void *)(a1 + 24)) {
            *(void *)(a1 + 24) = v11;
          }
          if (i == *(void *)(a1 + 32)) {
            *(void *)(a1 + 32) = *(void *)(v9 + 24);
          }
          CFRelease(v8);
          void *v7 = 0;
          v7[1] = 0;
          *(void *)(v9 + 16) = *(void *)(a1 + 40);
          *(void *)(v9 + 24) = -1;
          *(void *)(a1 + 40) = i;
          uint64_t v3 = *(void *)(a1 + 16);
        }
        v4 += 32;
      }
    }
    uint64_t v12 = *(void **)(a1 + 8);
    if (v12)
    {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x4C8], 8) = 0;
      free(v12);
    }
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = -1;
    *(void *)(a1 + 32) = -1;
    *(void *)(a1 + 40) = -1;
  }
}

uint64_t FigRemoteQueueIOSurfaceReceiver_ReleaseIOSurface(unsigned int a1, mach_port_t port)
{
  if (port)
  {
    IOSurfaceRef v3 = IOSurfaceLookupFromMachPort(port);
    if (v3)
    {
      IOSurfaceRef v4 = v3;
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)rqSharedSurfaces, (const void *)a1);
      if (Value)
      {
        CFArrayRef v6 = Value;
        v9.length = CFArrayGetCount(Value);
        v9.locatiouint64_t n = 0;
        FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v6, v9, v4);
        if (FirstIndexOfValue != -1) {
          CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
        }
      }
      CFRelease(v4);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigMachPortReleaseSendRight_();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return 0;
}

uint64_t FigRemoteQueueIOSurfaceReceiver_ReleaseIOSurfaces(void *key)
{
  return 0;
}

uint64_t FigRemoteQueueReceiverGetTypeID()
{
  return sRemoteQueueReceiverID;
}

uint64_t rqReceiverRegister()
{
  sRemoteQueueReceiverClass = 0;
  unk_1EB4C5FB0 = "FigRemoteQueueReceiver";
  qword_1EB4C5FB8 = (uint64_t)rqReceiverInit;
  unk_1EB4C5FC0 = 0;
  qword_1EB4C5FC8 = (uint64_t)rqReceiverFinalize;
  unk_1EB4C5FD0 = 0;
  qword_1EB4C5FD8 = 0;
  unk_1EB4C5FE0 = 0;
  qword_1EB4C5FE8 = (uint64_t)rqReceiverCopyDebugDesc;
  uint64_t result = _CFRuntimeRegisterClass();
  sRemoteQueueReceiverID = result;
  return result;
}

uint64_t FigRemoteQueueReceiverDequeue(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  uint64_t v4 = rqReceiverDequeue(a1, a2);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  return v4;
}

void __FigRemoteQueueReceiverSetHandler_block_invoke(uint64_t a1)
{
  int v4 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t FigRemoteQueueReceiverUnsetHandler(uint64_t a1)
{
  return FigRemoteQueueReceiverSetHandler(a1, 0, 0);
}

void rqSenderFinalize(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    rqSenderReset(a1, 0);
  }
  uint64_t v2 = *(NSObject **)(a1 + 80);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __rqSenderFinalize_block_invoke;
    block[3] = &__block_descriptor_tmp_47;
    block[4] = a1;
    dispatch_sync(v3, block);
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 104), 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(*(dispatch_object_t *)(a1 + 80));
  }
  int v4 = *(NSObject **)(a1 + 104);
  if (v4) {
    dispatch_release(v4);
  }
  int v5 = *(NSObject **)(a1 + 96);
  if (v5) {
    dispatch_release(v5);
  }
  CFArrayRef v6 = *(NSObject **)(a1 + 88);
  if (v6) {
    dispatch_release(v6);
  }
  int v7 = *(_DWORD *)(a1 + 52);
  if ((v7 & 0x80000000) == 0) {
    close(v7);
  }
  int v8 = *(_DWORD *)(a1 + 56);
  if ((v8 & 0x80000000) == 0) {
    close(v8);
  }
  int v9 = *(_DWORD *)(a1 + 60);
  if ((v9 & 0x80000000) == 0) {
    close(v9);
  }
  int v10 = *(_DWORD *)(a1 + 64);
  if ((v10 & 0x80000000) == 0) {
    close(v10);
  }
  FigRemoteQueueSenderSetContext((void *)a1, 0, 0, 0);
  FigSimpleMutexDestroy();
  FigSharedMemBlockRelease(*(void *)(a1 + 32));
  uint64_t v11 = *(const void **)(a1 + 24);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)(a1 + 16);
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = *(void **)(a1 + 120);
  if (v13)
  {
    os_release(v13);
    *(void *)(a1 + 120) = 0;
  }
  if (*(_DWORD *)(a1 + 156))
  {
    CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 168);
    if (v14 && CFDictionaryGetCount(v14) && !*(unsigned char *)(a1 + 113))
    {
      if (*(unsigned char *)(a1 + 160)) {
        FigMachPortReleaseReceiveRight_();
      }
      int v16 = *(_DWORD *)(a1 + 152);
      int v17 = *(_DWORD *)(a1 + 156);
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 0x40000000;
      void v18[2] = __rqSenderFinalize_block_invoke_2;
      v18[3] = &__block_descriptor_tmp_48;
      int v19 = v17;
      FigRemoteQueueProcessAssertion_awakeClientAndRunCallback(v16, (uint64_t)v18);
    }
    else
    {
      if (*(unsigned char *)(a1 + 160)) {
        FigMachPortReleaseReceiveRight_();
      }
      FigMachPortReleaseSendRight_();
    }
  }
  rqSurfacesRemoveAll(a1 + 168);
  int v15 = *(const void **)(a1 + 168);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 16_Block_object_dispose(&STACK[0x4C8], 8) = 0;
  }
}

CFStringRef rqSenderCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigRemoteQueueSender %p> {\n}", a1);
}

void __rqSenderFinalize_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 112))
  {
    dispatch_resume(*(dispatch_object_t *)(v1 + 80));
    *(unsigned char *)(*(void *)(a1 + 32) + 112) = 0;
  }
}

uint64_t __rqSenderFinalize_block_invoke_2(uint64_t a1)
{
  FigRemoteQueueIOSurfaceSender_ReleaseIOSurfaces(*(_DWORD *)(a1 + 32));
  return FigMachPortReleaseSendRight_();
}

uint64_t __rqSurfacesReleaseAgedOut_block_invoke(uint64_t a1)
{
  FigRemoteQueueIOSurfaceSender_ReleaseIOSurface(*(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36));
  return FigMachPortReleaseSendRight_();
}

uint64_t __rqSenderReset_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(int *)(*(void *)(v1 + 32) + 4) >= 1 && !*(unsigned char *)(v1 + 113)) {
    *(unsigned char *)(v1 + 114) = 1;
  }
  return result;
}

void rqReceiverFinalize(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 96)) {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 104));
  }
  if (*(void *)(a1 + 56)) {
    rqReceiverFinalize_cold_2();
  }
  if (*(void *)(a1 + 48)) {
    rqReceiverFinalize_cold_1();
  }
  int v2 = *(_DWORD *)(a1 + 36);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  int v3 = *(_DWORD *)(a1 + 32);
  if ((v3 & 0x80000000) == 0) {
    close(v3);
  }
  FigRemoteQueueReceiverSetContext((void *)a1, 0, 0);
  FigSimpleMutexDestroy();
  FigSharedMemBlockRelease(*(void *)(a1 + 24));
  int v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }
  int v5 = *(void **)(a1 + 72);
  if (v5)
  {
    os_release(v5);
    *(void *)(a1 + 72) = 0;
  }
}

CFStringRef rqReceiverCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigRemoteQueueReceiver %p> {\n}", a1);
}

CFMutableDictionaryRef __rqReceiverCreate_block_invoke()
{
  rqSurfaceRegistrationQueue = (uint64_t)dispatch_queue_create("FigRemoteQueueSurfaceOperations", 0);
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  rqSharedSurfaces = (uint64_t)result;
  return result;
}

void __rqReceiverCreate_block_invoke_2(uint64_t a1)
{
  FigMachPortReleaseReceiveRight_();
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  CFAllocatorRef v2 = (const void *)*(unsigned int *)(a1 + 40);
  int v3 = (__CFDictionary *)rqSharedSurfaces;
  CFDictionaryRemoveValue(v3, v2);
}

void __rqReceiverSetSource_block_invoke_2(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFAllocatorRef v2 = *(NSObject **)(a1 + 40);
  dispatch_release(v2);
}

void sub_1A5D1D53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A5D1DD48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

Class __getACCConnectionInfoClass_block_invoke(uint64_t a1)
{
  CoreAccessoriesLibrary();
  Class result = objc_getClass("ACCConnectionInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getACCConnectionInfoClass_block_invoke_cold_1();
  }
  getACCConnectionInfoClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t CoreAccessoriesLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!CoreAccessoriesLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    void v2[2] = (void *)3221225472;
    v2[3] = __CoreAccessoriesLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    void v2[5] = v2;
    long long v3 = xmmword_1E5C2C140;
    uint64_t v4 = 0;
    CoreAccessoriesLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  uint64_t v0 = CoreAccessoriesLibraryCore_frameworkLibrary;
  if (!CoreAccessoriesLibraryCore_frameworkLibrary) {
    CoreAccessoriesLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __CoreAccessoriesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreAccessoriesLibraryCore_frameworkLibrardouble y = result;
  return result;
}

uint64_t __fccp_fineTuneSDOFTuningParametersForContinuousZoom_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  uint64_t v7 = [MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v6];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __fccp_fineTuneSDOFTuningParametersForContinuousZoom_block_invoke_2;
  v10[3] = &unk_1E5C2C180;
  uint64_t v8 = *(void *)(a1 + 40);
  void v10[4] = v6;
  v10[5] = v8;
  int v11 = *(_DWORD *)(a1 + 56);
  v10[6] = v7;
  [a3 enumerateKeysAndObjectsUsingBlock:v10];
  return objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithDictionary:", v7), a2);
}

uint64_t __fccp_fineTuneSDOFTuningParametersForContinuousZoom_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2), "floatValue");
  float v7 = v6;
  [a3 floatValue];
  float v9 = *(float *)&v8;
  if (*(void *)(a1 + 40))
  {
    int v10 = objc_msgSend(a2, "hasPrefix:");
    HIDWORD(v_Block_object_dispose(&STACK[0x4C8], 8) = 0;
    if (v10) {
      float v9 = 0.0;
    }
  }
  *(float *)&double v8 = (float)(v9 * (float)(1.0 - *(float *)(a1 + 56))) + (float)(v7 * *(float *)(a1 + 56));
  uint64_t v11 = [NSNumber numberWithFloat:v8];
  uint64_t v12 = *(void **)(a1 + 48);
  return [v12 setObject:v11 forKeyedSubscript:a2];
}

void sub_1A5D23D18(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Block_object_dispose((const void *)(v3 - 136), 8);
  objc_destroyWeak((id *)(v3 - 104));
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

BOOL __msp_configureTextLocalizationNode_block_invoke(uint64_t a1, opaqueCMSampleBuffer *a2, const void *a3)
{
  uint64_t v3 = a3;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  AttachedInference = (void *)BWInferenceGetAttachedInference(a3, 116, 0x1EFA6A1E0);
  if ([objc_loadWeak((id *)(a1 + 40)) logger])
  {
    float v7 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(AttachedInference, "count"));
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v8 = [AttachedInference countByEnumeratingWithState:&v54 objects:v59 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v55;
      uint64_t v11 = *MEMORY[0x1E4F55680];
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v55 != v10) {
            objc_enumerationMutation(AttachedInference);
          }
          objc_msgSend(v7, "addObject:", objc_msgSend(*(id *)(*((void *)&v54 + 1) + 8 * i), "objectForKeyedSubscript:", v11));
        }
        uint64_t v9 = [AttachedInference countByEnumeratingWithState:&v54 objects:v59 count:16];
      }
      while (v9);
    }
  }
  else
  {
    float v7 = 0;
  }
  uint64_t v13 = [AttachedInference count];
  if (![AttachedInference count]) {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [AttachedInference count];
  memset(&v53, 0, sizeof(v53));
  CMSampleBufferGetPresentationTimeStamp(&v53, a2);
  Weauint64_t k = objc_loadWeak((id *)(a1 + 40));
  id v15 = objc_loadWeak((id *)(a1 + 48));
  uint64_t v16 = [AttachedInference count];
  *(_OWORD *)&v51.CGFloat a = *(_OWORD *)&v53.value;
  *(void *)&v51.CGFloat c = v53.epoch;
  [Weak node:v15 didEmitCodesCount:v16 emittedIdentifiers:v7 originalPTS:&v51];
  if ([AttachedInference count])
  {
    CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(a2);
    int v18 = objc_msgSend((id)CMGetAttachment(ImageBuffer, @"RotationDegrees", 0), "intValue");
    int v19 = objc_msgSend((id)CMGetAttachment(ImageBuffer, @"MirroredHorizontal", 0), "BOOLValue");
    int v20 = objc_msgSend((id)CMGetAttachment(ImageBuffer, @"MirroredVertical", 0), "BOOLValue");
    CGSize v42 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    CGPoint v43 = (CGPoint)*MEMORY[0x1E4F1DB20];
    rect.CGPoint origin = (CGPoint)*MEMORY[0x1E4F1DB20];
    rect.CGSize size = v42;
    CFDictionaryRef v21 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F530D8], 0);
    CGRectMakeWithDictionaryRepresentation(v21, &rect);
    memset(&v51, 0, sizeof(v51));
    FigCaptureGetTransformForMirroringRotationAndCrop(v19, v20, v18, (uint64_t)&v51, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
    CGAffineTransform v50 = v51;
    if (!CGAffineTransformIsIdentity(&v50))
    {
      long long v22 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(AttachedInference, "count"));
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      uint64_t v23 = [AttachedInference countByEnumeratingWithState:&v46 objects:v58 count:16];
      if (!v23)
      {
        AttachedInference = v22;
        if (!v13) {
          return v13 != 0;
        }
        goto LABEL_30;
      }
      uint64_t v24 = v23;
      uint64_t v38 = v13;
      uint64_t v39 = v3;
      uint64_t v41 = *(void *)v47;
      uint64_t v25 = *MEMORY[0x1E4F55670];
      int v40 = v19 ^ v20;
      uint64_t v26 = *MEMORY[0x1E4F55660];
      uint64_t v27 = *MEMORY[0x1E4F55668];
      int v28 = v22;
      do
      {
        for (uint64_t j = 0; j != v24; ++j)
        {
          if (*(void *)v47 != v41) {
            objc_enumerationMutation(AttachedInference);
          }
          unint64_t v30 = AttachedInference;
          uint64_t v31 = *(void **)(*((void *)&v46 + 1) + 8 * j);
          uint64_t v32 = objc_msgSend(v31, "mutableCopy", v38, v39);
          v45.CGPoint origin = v43;
          v45.CGSize size = v42;
          if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)[v31 objectForKeyedSubscript:v25], &v45))
          {
            CGAffineTransform v50 = v51;
            CGRect v61 = CGRectApplyAffineTransform(v45, &v50);
            CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v61);
            [v32 setObject:DictionaryRepresentation forKeyedSubscript:v25];

            long long v22 = v28;
          }
          if (v40)
          {
            objc_msgSend((id)objc_msgSend(v31, "objectForKeyedSubscript:", v26), "floatValue");
            *(float *)&double v35 = -v34;
            objc_msgSend(v32, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithFloat:", v35), v26);
          }
          v44.CGPoint origin = v43;
          v44.CGSize size = v42;
          if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)[v31 objectForKeyedSubscript:v27], &v44))
          {
            CGAffineTransform v50 = v51;
            CGRect v62 = CGRectApplyAffineTransform(v44, &v50);
            CFDictionaryRef v36 = CGRectCreateDictionaryRepresentation(v62);
            [v32 setObject:v36 forKeyedSubscript:v27];

            long long v22 = v28;
          }
          [v22 addObject:v32];

          AttachedInference = v30;
        }
        uint64_t v24 = [v30 countByEnumeratingWithState:&v46 objects:v58 count:16];
      }
      while (v24);
      AttachedInference = v22;
      uint64_t v13 = v38;
      uint64_t v3 = v39;
    }
  }
  if (v13)
  {
LABEL_30:
    CMSetAttachment(v3, (CFStringRef)*MEMORY[0x1E4F53190], AttachedInference, 1u);
    CMSetAttachment(v3, (CFStringRef)*MEMORY[0x1E4F53198], (CFTypeRef)objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(AttachedInference, "count")), 1u);
    CMRemoveAttachment(v3, @"Inferences");
  }
  return v13 != 0;
}

uint64_t FigCaptureSourceServerStart()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v9[0] = 1;
  v9[1] = captureSourceServer_handleReplyMessage;
  void v9[2] = captureSourceServer_handleNoReplyMessage;
  memset(&v9[3], 0, 24);
  if (captureSourceServer_initializeStatics_onceToken != -1) {
    dispatch_once(&captureSourceServer_initializeStatics_onceToken, &__block_literal_global_56);
  }
  AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"CelestialToCameraCaptureMigrationCompleted", @"com.apple.cameracapture", 0);
  int v1 = CFPreferencesGetAppBooleanValue(@"VolatileDomainMigrationCompleted", @"com.apple.cameracapture.volatile", 0);
  int v2 = v1;
  if (!AppBooleanValue || !v1)
  {
    CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
    CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
    if (AppBooleanValue)
    {
      if (v1) {
        goto LABEL_7;
      }
    }
    else
    {
      CFPreferencesSetMultiple(0, (CFArrayRef)&unk_1EFB044F0, @"com.apple.celestial", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
      CFPreferencesSetValue(@"CelestialToCameraCaptureMigrationCompleted", (CFPropertyListRef)*MEMORY[0x1E4F1CFD0], @"com.apple.cameracapture", v3, v4);
      if (v2) {
        goto LABEL_7;
      }
    }
    CFPreferencesSetMultiple(0, (CFArrayRef)&unk_1EFB04508, @"com.apple.cameracapture", v3, v4);
    CFPreferencesSetValue(@"VolatileDomainMigrationCompleted", (CFPropertyListRef)*MEMORY[0x1E4F1CFD0], @"com.apple.cameracapture.volatile", v3, v4);
LABEL_7:
    CFPreferencesSynchronize(@"com.apple.cameracapture", v3, v4);
    CFPreferencesSynchronize(@"com.apple.cameracapture.volatile", v3, v4);
    CFPreferencesSynchronize(@"com.apple.celestial", v3, v4);
    if (dword_1EB4C51D0) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  if (dword_1EB4C51D0)
  {
LABEL_12:
    int v11 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_13:
  FigCaptureSourceInitialize((uint64_t)+[FigCaptureSourceBackings sharedCaptureSourceBackings], 1);
  if (FigCaptureAudiomxdSupportEnabled()
    && (FigCaptureCurrentProcessIsCameracaptured()
     || FigCaptureCurrentProcessIsMediaserverd()))
  {
    FigCaptureSpeakerSetInterferenceMitigationIsRequired(0, 1);
  }
  return FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.capturesource", (uint64_t)v9, 0);
}

uint64_t captureSourceServer_handleNoReplyMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v1 = OpCode;
    FigDebugAssert3();
  }
  else
  {
    uint64_t v1 = 4294966630;
  }
  return v1;
}

uint64_t captureSourceServer_handleSourceDestructionMessage(int a1, xpc_object_t xdict)
{
  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v2 = FigXPCServerDisassociateObjectWithConnection();
  if (v2) {
    FigDebugAssert3();
  }
  return v2;
}

uint64_t captureSourceServer_handleSourceInvalidateMessage(int a1, void *a2)
{
  uint64_t v10 = 0;
  uint64_t v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v2)
  {
    uint64_t v7 = v2;
    FigDebugAssert3();
  }
  else
  {
    id v9 = 0;
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, void, id *))(v4 + 48);
    if (v5
      && !v5(v10, 0x1EFA6CCA0, *MEMORY[0x1E4F1CF80], &v9)
      && (char v6 = [v9 BOOLValue], v9, (v6 & 1) != 0))
    {
      return 0;
    }
    else
    {
      uint64_t v7 = 4294954516;
      FigDebugAssert3();
    }
  }
  return v7;
}

uint64_t captureSourceServer_handleCopyProxySourceMessage(uint64_t a1, uint64_t a2, void *a3)
{
  CGSize v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  id v38 = 0;
  id v39 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  xpc_connection_get_audit_token();
  long long v34 = 0u;
  long long v35 = 0u;
  if ((FigCaptureClientHasEntitlement(&v34, @"com.apple.private.avfoundation.capture.proxy-devices.allow") & 1) == 0)
  {
    FigDebugAssert3();
    uint64_t SerializedSource = FigSignalErrorAt();
    goto LABEL_32;
  }
  uint64_t v4 = FigXPCMessageCopyCFString();
  if (v4)
  {
    uint64_t SerializedSource = v4;
LABEL_41:
    FigDebugAssert3();
    goto LABEL_32;
  }
  uint64_t v5 = FigXPCMessageCopyCFData();
  if (v5)
  {
    uint64_t SerializedSource = v5;
    goto LABEL_41;
  }
  [v38 getBytes:&v36 length:32];
  pthread_mutex_lock((pthread_mutex_t *)sSourceListLock);
  if (CFArrayGetCount((CFArrayRef)sSourceList) < 1)
  {
    uint64_t SerializedSource = 0;
    goto LABEL_30;
  }
  xpc_object_t xdict = a3;
  CFIndex v6 = 0;
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  while (1)
  {
    ValueAtIndedouble x = CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v6);
    id v33 = 0;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    int v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t, id *))(v10 + 48);
    if (!v11)
    {
      uint64_t SerializedSource = 4294954514;
LABEL_29:
      FigDebugAssert3();
      goto LABEL_30;
    }
    uint64_t v12 = v11(ValueAtIndex, 0x1EFA6CF20, v7, &v33);
    if (v12)
    {
      uint64_t SerializedSource = v12;
      goto LABEL_29;
    }
    int v13 = [v33 BOOLValue];

    id v33 = 0;
    if (v13)
    {
      uint64_t SerializedSource = FigSignalErrorAt();
      goto LABEL_30;
    }
    id v32 = 0;
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(const void *, __CFString *, uint64_t, id *))(v15 + 48);
    if (!v16)
    {
      uint64_t SerializedSource = 4294954514;
      goto LABEL_29;
    }
    uint64_t v17 = v16(ValueAtIndex, @"AttributesDictionary", v7, &v32);
    if (v17)
    {
      uint64_t SerializedSource = v17;
      goto LABEL_29;
    }
    uint64_t v18 = [v32 objectForKeyedSubscript:@"UniqueID"];

    id v32 = 0;
    if ([v39 isEqualToString:v18])
    {
      id v31 = 0;
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      CFDictionaryRef v21 = *(void (**)(const void *, uint64_t, uint64_t, id *))(v20 + 48);
      if (v21) {
        v21(ValueAtIndex, 0x1EFA568E0, v7, &v31);
      }
      long long v34 = 0u;
      long long v35 = 0u;
      [v31 getBytes:&v34 length:32];

      id v31 = 0;
      v30[0] = v36;
      v30[1] = v37;
      *(_OWORD *)xpc_object_t value = v34;
      long long v29 = v35;
      if (FigCaptureAuditTokenProcessesAreEqual(v30, (long long *)value)) {
        break;
      }
    }
    if (CFArrayGetCount((CFArrayRef)sSourceList) <= ++v6)
    {
      uint64_t SerializedSource = 0;
      goto LABEL_30;
    }
  }
  *(void *)&v30[0] = 0;
  uint64_t v24 = FigCaptureSourceProxyCreate(v7, ValueAtIndex, &v42);
  if (v24)
  {
    uint64_t SerializedSource = v24;
    goto LABEL_29;
  }
  CFArrayAppendValue((CFMutableArrayRef)sProxySourceList, v42);
  uint64_t v25 = FigXPCServerAssociateObjectWithConnection();
  if (v25)
  {
    uint64_t SerializedSource = v25;
    goto LABEL_29;
  }
  value[0] = 0;
  uint64_t SerializedSource = captureSourceServer_createSerializedSource((uint64_t)ValueAtIndex, *(uint64_t *)&v30[0], value);
  if (SerializedSource) {
    goto LABEL_29;
  }
  xpc_object_t v26 = value[0];
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E4F202A8], value[0]);
  xpc_release(v26);
LABEL_30:
  pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
  if (v42) {
    CFRelease(v42);
  }
LABEL_32:

  return SerializedSource;
}

uint64_t captureSourceServer_handleCheckTCCAccessMessage(int a1, void *a2)
{
  uint64_t v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v2)
  {
    FigDebugAssert3();
  }
  else
  {
    xpc_connection_get_audit_token();
    long long v5 = 0u;
    long long v6 = 0u;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __captureSourceServer_checkCameraAccessForClientAsync_block_invoke;
    block[3] = &__block_descriptor_64_e5_v8__0l;
    dispatch_async((dispatch_queue_t)sCameraAccessCheckQueue, block);
  }
  return v2;
}

void captureSourceServer_handleMaxStillImageJPEGDataSizeMessage(xpc_object_t xdict)
{
  if (captureSourceServer_handleMaxStillImageJPEGDataSizeMessage_onceToken != -1) {
    dispatch_once(&captureSourceServer_handleMaxStillImageJPEGDataSizeMessage_onceToken, &__block_literal_global_35_0);
  }
  uint64_t v2 = (const char *)*MEMORY[0x1E4F202A8];
  uint64_t v3 = captureSourceServer_handleMaxStillImageJPEGDataSizeMessage_maxDataSize;
  xpc_dictionary_set_uint64(xdict, v2, v3);
}

uint64_t captureSourceServer_handleShowSystemUserInterfaceMessage(void *a1)
{
  int int64 = xpc_dictionary_get_int64(a1, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_SystemUserInterface);
  string = xpc_dictionary_get_string(a1, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_BundleID);
  uint64_t v4 = xpc_dictionary_get_string(a1, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_AppName);
  if (int64) {
    BOOL v5 = string == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || v4 == 0)
  {
    FigDebugAssert3();
    return 4294954516;
  }
  else
  {
    uint64_t v7 = v4;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], string, 0x8000100u);
    CFStringRef v10 = CFStringCreateWithCString(v8, v7, 0x8000100u);
    FigCaptureSourceShowSystemUserInterface(int64, v9, v10);
    if (v9) {
      CFRelease(v9);
    }
    if (v10) {
      CFRelease(v10);
    }
    return 0;
  }
}

uint64_t captureSourceServer_handleCopyWildcardProprietaryDefaultMessage(int a1, void *a2)
{
  CFTypeRef v12 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v11 = 0;
  uint64_t v4 = xpc_connection_copy_entitlement_value();
  BOOL v5 = (void *)v4;
  if (!v4 || MEMORY[0x1A62739E0](v4) != MEMORY[0x1E4F14570] || !xpc_BOOL_get_value(v5))
  {
    uint64_t v6 = 4294954513;
    goto LABEL_4;
  }
  uint64_t v8 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v8)
  {
    uint64_t v6 = v8;
    goto LABEL_23;
  }
  uint64_t v9 = FigXPCMessageCopyCFString();
  if (v9)
  {
    uint64_t v6 = v9;
    goto LABEL_23;
  }
  if (MEMORY[0] < 7uLL || !MEMORY[0x70])
  {
    uint64_t v6 = 4294954514;
LABEL_23:
    FigDebugAssert3();
    goto LABEL_4;
  }
  uint64_t v10 = MEMORY[0x70](cf, v12, &v11);
  if (v10)
  {
    uint64_t v6 = v10;
    goto LABEL_23;
  }
  if (!v11) {
    CFTypeRef v11 = (CFTypeRef)*MEMORY[0x1E4F1D260];
  }
  FigXPCMessageSetCFObject();
  uint64_t v6 = 0;
LABEL_4:
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v5) {
    xpc_release(v5);
  }
  return v6;
}

uint64_t captureSourceServer_handleSetWildcardProprietaryDefaultMessage(int a1, void *a2)
{
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  CFTypeRef cf1 = 0;
  uint64_t v4 = xpc_connection_copy_entitlement_value();
  BOOL v5 = (void *)v4;
  if (!v4 || MEMORY[0x1A62739E0](v4) != MEMORY[0x1E4F14570] || !xpc_BOOL_get_value(v5))
  {
    uint64_t v6 = 4294954513;
    goto LABEL_4;
  }
  uint64_t v8 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v8)
  {
    uint64_t v6 = v8;
    goto LABEL_24;
  }
  uint64_t v9 = FigXPCMessageCopyCFString();
  if (v9)
  {
    uint64_t v6 = v9;
    goto LABEL_24;
  }
  uint64_t v10 = FigXPCMessageCopyCFObject();
  if (v10)
  {
    uint64_t v6 = v10;
    goto LABEL_24;
  }
  CFTypeRef v12 = 0;
  if (MEMORY[0] < 7uLL || !MEMORY[0x78])
  {
    uint64_t v6 = 4294954514;
LABEL_24:
    FigDebugAssert3();
    goto LABEL_4;
  }
  uint64_t v11 = MEMORY[0x78](cf, v14, 0, &v12);
  if (v11)
  {
    uint64_t v6 = v11;
    goto LABEL_24;
  }
  if (v12)
  {
    FigXPCMessageSetCFObject();
    CFRelease(v12);
  }
  uint64_t v6 = 0;
LABEL_4:
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (cf1) {
    CFRelease(cf1);
  }
  if (v5) {
    xpc_release(v5);
  }
  return v6;
}

uint64_t captureSourceServer_handleUnregisterNotificationForProprietaryDefaultChangesMessage(int a1, void *a2)
{
  uint64_t v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v2)
  {
    uint64_t v4 = v2;
    goto LABEL_8;
  }
  uint64_t v3 = FigXPCMessageCopyCFString();
  if (v3)
  {
    uint64_t v4 = v3;
    goto LABEL_8;
  }
  if (MEMORY[0] < 2uLL || !MEMORY[0x38])
  {
    uint64_t v4 = 4294954514;
LABEL_8:
    FigDebugAssert3();
    return v4;
  }
  uint64_t v4 = MEMORY[0x38](0, 0);
  if (v4) {
    goto LABEL_8;
  }
  return v4;
}

uint64_t captureSourceServer_handlePublishFrameSenderEndpointMessage(void *a1)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_Endpoint);
  if (!value) {
    goto LABEL_16;
  }
  xpc_object_t v3 = value;
  uint64_t v4 = FigXPCMessageCopyCFString();
  if (v4)
  {
    uint64_t v9 = v4;
LABEL_15:
    FigDebugAssert3();
    return v9;
  }
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5)
  {
    uint64_t v9 = v5;
    goto LABEL_15;
  }
  int64_t int64 = xpc_dictionary_get_int64(a1, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointPID);
  if (!int64) {
    goto LABEL_16;
  }
  int64_t v7 = xpc_dictionary_get_int64(a1, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointProxyPID);
  uint64_t v8 = FigXPCMessageCopyCFData();
  if (v8)
  {
    uint64_t v9 = v8;
    goto LABEL_15;
  }
  FigXPCMessageCopyCFData();
  FigXPCMessageCopyCFString();
  if (!+[CMCaptureFrameSenderEndpointsServerSideSingleton addEndpoint:v3 endpointUniqueID:0 endpointType:0 endpointPID:int64 endpointProxyPID:v7 endpointAuditToken:0 endpointProxyAuditToken:0 endpointCameraUniqueID:@"unknown"])
  {
LABEL_16:
    FigDebugAssert3();
    return 0;
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28C40], "defaultCenter"), "postNotificationName:object:", @"FrameServerEndpointsChanged", 0);
  return 0;
}

uint64_t captureSourceServer_handleSuppressFrameSenderEndpointMessage(_xpc_connection_s *a1)
{
  uint64_t v2 = FigXPCMessageCopyCFString();
  if (v2) {
    goto LABEL_8;
  }
  piCGFloat d = xpc_connection_get_pid(a1);
  if ([0 isEqualToString:@"all-endpoint-uids"])
  {
    if (!+[CMCaptureFrameSenderEndpointsServerSideSingleton removeAllEndpointsWithPID:pid])
    {
LABEL_8:
      FigDebugAssert3();
      return v2;
    }
  }
  else if (!+[CMCaptureFrameSenderEndpointsServerSideSingleton removeEndpointWithUniqueID:0])
  {
    goto LABEL_8;
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28C40], "defaultCenter"), "postNotificationName:object:", @"FrameServerEndpointsChanged", 0);
  return v2;
}

uint64_t captureSourceServer_handleCopyFrameSenderEndpointsMessage(void *a1)
{
  id v2 = +[CMCaptureFrameSenderEndpointsServerSideSingleton createXPCArrayOfFrameSenderEndpoints];
  if (v2)
  {
    xpc_dictionary_set_value(a1, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointArray, v2);
    uint64_t v3 = 0;
  }
  else
  {
    FigDebugAssert3();
    uint64_t v3 = 4294954516;
  }
  FigXPCRelease();
  return v3;
}

uint64_t captureSourceServer_handleUpdateCameraOverrideHistoryMessage(_xpc_connection_s *a1, void *a2, void *a3)
{
  int v5 = (int)a1;
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  CFTypeRef v13 = 0;
  char v11 = 0;
  xpc_connection_get_pid(a1);
  uint64_t v6 = captureSourceServer_getAndRetainSourceObjectFromMessage(v5, a2);
  if (v6)
  {
    uint64_t v9 = v6;
LABEL_19:
    FigDebugAssert3();
    xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, (int)v9);
    goto LABEL_7;
  }
  uint64_t v7 = FigXPCMessageCopyCFString();
  if (v7)
  {
    uint64_t v9 = v7;
    goto LABEL_19;
  }
  uint64_t v8 = FigXPCMessageCopyCFDictionary();
  if (v8)
  {
    uint64_t v9 = v8;
    goto LABEL_19;
  }
  xpc_dictionary_get_BOOL(a2, (const char *)kFigCaptureSourceRemoteCameraOverrideHistoryMessageKey_SetOverride);
  xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, 0);
  xpc_dictionary_set_BOOL(a3, (const char *)kFigCaptureSourceRemoteCameraOverrideHistoryReplyMessageKey_OverrideChangedValue, v11 != 0);
  if (v11) {
    FigXPCMessageSetCFArray();
  }
  uint64_t v9 = 0;
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v9;
}

uint64_t captureSourceServer_handleSetPixelBufferPropertyMessage(int a1, void *a2)
{
  CFTypeRef v16 = 0;
  CFTypeRef cf = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v3 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if (v3)
  {
    uint64_t v8 = v3;
LABEL_27:
    FigDebugAssert3();
    goto LABEL_17;
  }
  uint64_t v4 = FigXPCMessageCopyCFString();
  if (v4)
  {
    uint64_t v8 = v4;
    goto LABEL_27;
  }
  xpc_object_t value = xpc_dictionary_get_value(a2, (const char *)kFigCaptureSourceRemoteProprietaryDefaultMessagePayload_Value);
  if (value)
  {
    uint64_t v6 = IOSurfaceLookupFromXPCObject(value);
    if (!v6)
    {
      FigDebugAssert3();
      uint64_t v8 = 0;
      goto LABEL_17;
    }
    uint64_t v7 = v6;
    uint64_t v8 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 0, &pixelBufferOut);
    CFRelease(v7);
    if (v8) {
      goto LABEL_27;
    }
    uint64_t v8 = (uint64_t)pixelBufferOut;
    if (!pixelBufferOut) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  CFTypeRef v10 = v16;
  CFTypeRef v9 = cf;
  if (cf && (char v11 = *(void **)(CMBaseObjectGetVTable() + 16)) != 0) {
    CFTypeRef v12 = v11;
  }
  else {
    CFTypeRef v12 = 0;
  }
  if (*v12 >= 6uLL && (CFTypeRef v13 = (uint64_t (*)(CFTypeRef, CFTypeRef, uint64_t))v12[13]) != 0) {
    uint64_t v8 = v13(v9, v10, v8);
  }
  else {
    uint64_t v8 = 4294954514;
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v8;
}

void captureSourceServer_serializeActiveFormat(void *a1, void *a2)
{
  uint64_t v3 = (void *)[a1 copyXPCEncoding];
  xpc_dictionary_set_value(a2, (const char *)*MEMORY[0x1E4F202A8], v3);
  xpc_release(v3);
}

void captureSourceServer_servedObjectRefconDestructor(uint64_t a1)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    uint64_t v46 = v1;
    LODWORD(v45) = 0;
    FigDebugAssert3();
  }
  CFRetain(v3);
  id v58 = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(const void *, uint64_t, uint64_t, id *))(v6 + 48);
  if (v7)
  {
    v7(v3, 0x1EFA6CF00, v4, &v58);
    id v8 = v58;
  }
  else
  {
    id v8 = 0;
  }
  char v9 = objc_msgSend(v8, "BOOLValue", v45, v46);
  id v57 = 0;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFTypeRef v12 = *(void (**)(const void *, uint64_t, uint64_t, id *))(v11 + 48);
  if (v12) {
    v12(v3, 0x1EFA6CCA0, v4, &v57);
  }
  int v13 = [v57 BOOLValue];

  *(void *)&long long v14 = -1;
  *((void *)&v14 + 1) = -1;
  long long v59 = v14;
  long long v60 = v14;
  xpc_connection_get_audit_token();
  if (!pthread_mutex_lock((pthread_mutex_t *)sSourceListLock))
  {
    if (v9)
    {
LABEL_19:
      if (CFArrayGetCount((CFArrayRef)sProxySourceList) >= 1)
      {
        CFIndex v16 = 0;
        while (1)
        {
          ValueAtIndedouble x = CFArrayGetValueAtIndex((CFArrayRef)sProxySourceList, v16);
          if (ValueAtIndex == v3)
          {
            CFArrayRemoveValueAtIndex((CFMutableArrayRef)sProxySourceList, v16);
            goto LABEL_50;
          }
          if ((v9 & 1) == 0)
          {
            uint64_t v18 = ValueAtIndex;
            if (FigCaptureSourceProxyRealSourceEqualsSource((uint64_t)ValueAtIndex, (uint64_t)v3)) {
              break;
            }
          }
          if (++v16 >= CFArrayGetCount((CFArrayRef)sProxySourceList)) {
            goto LABEL_50;
          }
        }
        FigCaptureSourceProxyDetachFromRealSource(v18);
      }
LABEL_50:
      objc_msgSend(NSString, "stringWithFormat:", @"sSourceList(%d)", CFArrayGetCount((CFArrayRef)sSourceList));
      objc_msgSend(NSString, "stringWithFormat:", @"sPrewarmingSourceList(%d)", objc_msgSend((id)sPrewarmingSourceList, "count"));
      pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
      if (v13) {
        goto LABEL_17;
      }
LABEL_51:
      if (v3)
      {
        uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v30 = v29 ? v29 : 0;
        id v31 = *(void (**)(const void *))(v30 + 24);
        if (v31) {
          v31(v3);
        }
      }
      goto LABEL_57;
    }
    if (CFArrayGetCount((CFArrayRef)sSourceList) < 1) {
      goto LABEL_50;
    }
    CFIndex v19 = 0;
    while (CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v19) != v3)
    {
      if (++v19 >= CFArrayGetCount((CFArrayRef)sSourceList)) {
        goto LABEL_50;
      }
    }
    id v56 = 0;
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    long long v22 = *(void (**)(const void *, uint64_t, uint64_t, id *))(v21 + 48);
    if (v22) {
      v22(v3, 0x1EFA6CF20, v4, &v56);
    }
    int v23 = [v56 BOOLValue];
    if (v13)
    {
      id v55 = 0;
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      xpc_object_t v26 = *(void (**)(const void *, uint64_t, uint64_t, id *))(v25 + 48);
      if (v26)
      {
        v26(v3, 0x1EFA568E0, v4, &v55);
        id v27 = v55;
      }
      else
      {
        id v27 = 0;
      }
      *(void *)&long long v28 = -1;
      *((void *)&v28 + 1) = -1;
      *(_OWORD *)CGRect v62 = v28;
      *(_OWORD *)&v62[16] = v28;
      [v27 getBytes:v62 length:32];
      long long v53 = *(_OWORD *)v62;
      long long v54 = *(_OWORD *)&v62[16];
      if (FigCaptureAuditTokenIsValid((uint64_t)&v53))
      {
        long long v53 = v59;
        long long v54 = v60;
        *(_OWORD *)os_log_type_t type = *(_OWORD *)v62;
        long long v52 = *(_OWORD *)&v62[16];
        if (!FigCaptureAuditTokensAreEqual(&v53, type))
        {

LABEL_49:
          if (!v23) {
            goto LABEL_50;
          }
          goto LABEL_19;
        }
      }
      [(id)sPrewarmingSourceList addObject:v3];
    }
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)sSourceList, v19);
    goto LABEL_49;
  }
  if (!v13) {
    goto LABEL_51;
  }
LABEL_17:
  *(void *)&long long v15 = -1;
  *((void *)&v15 + 1) = -1;
  *(_OWORD *)CGRect v62 = v15;
  *(_OWORD *)&v62[16] = v15;
  xpc_connection_get_audit_token();
  long long v53 = *(_OWORD *)v62;
  long long v54 = *(_OWORD *)&v62[16];
  FigCaptureSourceDetachFromClient((uint64_t)v3, &v53);
LABEL_57:
  CFRelease(v3);

  if (!pthread_mutex_lock((pthread_mutex_t *)sSourceListLock))
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v32 = (void *)[(id)sPrewarmingAssociatedConnectionsByObjectID allKeys];
    uint64_t v33 = [v32 countByEnumeratingWithState:&v47 objects:v61 count:16];
    if (v33)
    {
      uint64_t v34 = v33;
      uint64_t v35 = *(void *)v48;
      while (2)
      {
        for (uint64_t i = 0; i != v34; ++i)
        {
          if (*(void *)v48 != v35) {
            objc_enumerationMutation(v32);
          }
          uint64_t v37 = *(void *)(*((void *)&v47 + 1) + 8 * i);
          uint64_t v38 = [(id)sPrewarmingAssociatedConnectionsByObjectID objectForKeyedSubscript:v37];
          uint64_t v39 = [(id)sPrewarmingAssociatedSourcesByObjectID objectForKeyedSubscript:v37];
          if (v38 == *(void *)a1 && v39 == *(void *)(a1 + 8))
          {
            [(id)sPrewarmingAssociatedSourcesByObjectID setObject:0 forKeyedSubscript:v37];
            [(id)sPrewarmingAssociatedConnectionsByObjectID setObject:0 forKeyedSubscript:v37];
            goto LABEL_75;
          }
        }
        uint64_t v34 = [v32 countByEnumeratingWithState:&v47 objects:v61 count:16];
        if (v34) {
          continue;
        }
        break;
      }
    }
    if (dword_1EB4C51D0)
    {
      LODWORD(v53) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v41 = v53;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
        unsigned int v42 = v41;
      }
      else {
        unsigned int v42 = v41 & 0xFFFFFFFE;
      }
      if (v42)
      {
        uint64_t v43 = *(void *)(a1 + 8);
        piCGFloat d = xpc_connection_get_pid(*(xpc_connection_t *)a1);
        *(_DWORD *)CGRect v62 = 136315650;
        *(void *)&v62[4] = "captureSourceServer_servedObjectRefconDestructor";
        *(_WORD *)&v62[12] = 2048;
        *(void *)&v62[14] = v43;
        *(_WORD *)&v62[22] = 1024;
        *(_DWORD *)&v62[24] = pid;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_75:
    pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
  }
  free((void *)a1);
}

void __captureSourceServer_handleCopySourcesMessage_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)sSourceListLock);
    if (CFArrayGetCount((CFArrayRef)sSourceList) >= 1)
    {
      CFIndex v2 = 0;
      do
      {
        ValueAtIndedouble x = CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v2);
        FigVideoCaptureSourceSetClientProcessHasAccessToCamera((uint64_t)ValueAtIndex, 0);
        ++v2;
      }
      while (v2 < CFArrayGetCount((CFArrayRef)sSourceList));
    }
    uint64_t v4 = (pthread_mutex_t *)sSourceListLock;
    pthread_mutex_unlock(v4);
  }
  else
  {
    uint64_t v5 = objc_opt_new();
    pthread_mutex_lock((pthread_mutex_t *)sSourceListLock);
    if (CFArrayGetCount((CFArrayRef)sSourceList) >= 1)
    {
      CFIndex v6 = 0;
      uint64_t v7 = *MEMORY[0x1E4F1CF80];
      do
      {
        id v8 = CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v6);
        *(void *)&long long v21 = 0;
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(void (**)(const void *, uint64_t, uint64_t, long long *))(v10 + 48);
        if (v11) {
          v11(v8, 0x1EFA568E0, v7, &v21);
        }
        long long v29 = 0u;
        long long v30 = 0u;
        [(id)v21 getBytes:&v29 length:32];
        blocuint64_t k = v29;
        long long v26 = v30;
        PIDFromAuditTokeuint64_t n = FigCaptureGetPIDFromAuditToken(&block);
        objc_msgSend(v5, "setObject:forKeyedSubscript:", (void)v21, objc_msgSend(NSNumber, "numberWithInt:", PIDFromAuditToken));

        ++v6;
      }
      while (v6 < CFArrayGetCount((CFArrayRef)sSourceList));
    }
    pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    int v13 = (void *)[v5 allValues];
    uint64_t v14 = [v13 countByEnumeratingWithState:&v21 objects:&v29 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v22;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v22 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          long long v19 = 0u;
          long long v20 = 0u;
          [v18 getBytes:&v19 length:32];
          long long v27 = v19;
          long long v28 = v20;
          *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
          *((void *)&block + 1) = 3221225472;
          *(void *)&long long v26 = __captureSourceServer_checkCameraAccessForClientAsync_block_invoke;
          *((void *)&v26 + 1) = &__block_descriptor_64_e5_v8__0l;
          dispatch_async((dispatch_queue_t)sCameraAccessCheckQueue, &block);
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v21 objects:&v29 count:16];
      }
      while (v15);
    }
  }
}

uint64_t __captureSourceServer_checkCameraAccessForClientAsync_block_invoke(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  long long v16 = *(_OWORD *)(a1 + 32);
  long long v17 = v2;
  HasAccessToCamerCGFloat a = FigCaptureSourceClientHasAccessToCamera(&v16);
  pthread_mutex_lock((pthread_mutex_t *)sSourceListLock);
  if (CFArrayGetCount((CFArrayRef)sSourceList) >= 1)
  {
    CFIndex v4 = 0;
    uint64_t v5 = *MEMORY[0x1E4F1CF80];
    do
    {
      ValueAtIndedouble x = CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v4);
      id v15 = 0;
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void (**)(const void *, uint64_t, uint64_t, id *))(v8 + 48);
      if (v9) {
        v9(ValueAtIndex, 0x1EFA568E0, v5, &v15);
      }
      long long v16 = 0u;
      long long v17 = 0u;
      [v15 getBytes:&v16 length:32];
      long long v13 = v16;
      long long v14 = v17;
      FigCaptureGetPIDFromAuditToken(&v13);
      long long v10 = *(_OWORD *)(a1 + 48);
      long long v13 = *(_OWORD *)(a1 + 32);
      long long v14 = v10;
      v12[0] = v16;
      v12[1] = v17;
      if (FigCaptureAuditTokenProcessesAreEqual(&v13, v12)) {
        FigVideoCaptureSourceSetClientProcessHasAccessToCamera((uint64_t)ValueAtIndex, HasAccessToCamera);
      }

      ++v4;
    }
    while (v4 < CFArrayGetCount((CFArrayRef)sSourceList));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
}

uint64_t __captureSourceServer_handleMaxStillImageJPEGDataSizeMessage_block_invoke()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v0 = +[FigCaptureSourceBackings sharedCaptureSourceBackings];
  if (!v0)
  {
    uint64_t result = FigDebugAssert3();
    goto LABEL_13;
  }
  uint64_t v1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v0, "sourceInfoDictionaries"), "firstObject"), "objectForKeyedSubscript:", 0x1EFA53CE0);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t result = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (!result)
  {
LABEL_13:
    unint64_t v8 = 0;
    goto LABEL_14;
  }
  uint64_t v3 = result;
  unint64_t v4 = 0;
  uint64_t v5 = *(void *)v10;
  do
  {
    uint64_t v6 = 0;
    do
    {
      if (*(void *)v10 != v5) {
        objc_enumerationMutation(v1);
      }
      uint64_t v7 = [*(id *)(*((void *)&v9 + 1) + 8 * v6) sensorDimensions];
      if ((int)v7 * HIDWORD(v7) > v4) {
        unint64_t v4 = (int)v7 * HIDWORD(v7);
      }
      ++v6;
    }
    while (v3 != v6);
    uint64_t result = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    uint64_t v3 = result;
  }
  while (result);
  unint64_t v8 = 2 * v4 / 3;
LABEL_14:
  captureSourceServer_handleMaxStillImageJPEGDataSizeMessage_maxDataSize = v8;
  return result;
}

uint64_t __captureSourceServer_initializeStatics_block_invoke()
{
  sSourceListLocuint64_t k = FigSimpleMutexCreate();
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v1 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  sSourceList = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  sPrewarmingSourceList = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  sProxySourceList = (uint64_t)CFArrayCreateMutable(v0, 0, v1);
  sPrewarmingAssociatedSourcesByuint64_t ObjectID = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  sPrewarmingAssociatedConnectionsByuint64_t ObjectID = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  sCameraAccessCheckQueue = FigDispatchQueueCreateWithPriority();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

void FigRemoteQueueProcessAssertion_awakeClientAndRunCallback(int a1, uint64_t a2)
{
  global_queue = dispatch_get_global_queue(0, 0);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __FigRemoteQueueProcessAssertion_awakeClientAndRunCallback_block_invoke;
  void v5[3] = &unk_1E5C2C238;
  int v6 = a1;
  v5[4] = a2;
  dispatch_async(global_queue, v5);
}

void dfp_addBuffer(void *a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = [a2 err];
  if (!v6)
  {
    uint64_t v7 = 0;
    switch([a3 type])
    {
      case 8:
        goto LABEL_12;
      case 9:
        uint64_t v7 = 1;
        goto LABEL_12;
      case 10:
        uint64_t v7 = 2;
        goto LABEL_12;
      case 11:
        uint64_t v7 = 3;
        goto LABEL_12;
      case 12:
        uint64_t v7 = 4;
        goto LABEL_12;
      case 19:
        return;
      case 22:
        uint64_t v7 = 8;
        goto LABEL_12;
      case 23:
        uint64_t v7 = 5;
        goto LABEL_12;
      case 24:
        uint64_t v7 = 7;
        goto LABEL_12;
      case 25:
        uint64_t v7 = 9;
        goto LABEL_12;
      case 27:
        uint64_t v7 = 6;
LABEL_12:
        unint64_t v8 = (void *)[a2 expectedBufferTypes];
        if ((objc_msgSend(v8, "containsObject:", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(a3, "type"))) & 1) == 0)goto LABEL_27; {
        if (dword_1E96B6828)
        }
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        long long v10 = (__CVBuffer *)objc_msgSend(a3, "buffer", v17, v18);
        CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F52DD0];
        long long v12 = (void *)CVBufferCopyAttachment(v10, (CFStringRef)*MEMORY[0x1E4F52DD0], 0);
        if (v12)
        {
          uint64_t v13 = [a1 addInputResource:v12 type:v7];
        }
        else if ([a3 lscGainMap] && (objc_opt_respondsToSelector() & 1) != 0)
        {
          uint64_t v13 = objc_msgSend(a1, "addBuffer:metadata:type:lscGainMap:lscGainMapParameters:", objc_msgSend(a3, "buffer"), objc_msgSend(a3, "metadata"), v7, objc_msgSend(a3, "lscGainMap"), objc_msgSend(a3, "lscGainMapParameters"));
        }
        else
        {
          uint64_t v13 = objc_msgSend(a1, "addBuffer:metadata:type:", objc_msgSend(a3, "buffer"), objc_msgSend(a3, "metadata"), v7);
        }
        uint64_t v14 = v13;

        CVBufferRemoveAttachment((CVBufferRef)[a3 buffer], v11);
        if (v14) {
          goto LABEL_22;
        }
        return;
      default:
LABEL_27:
        long long v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v14 = 4294954516;
        goto LABEL_22;
    }
  }
  uint64_t v14 = v6;
  if (dword_1E96B6828)
  {
    id v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_22:
  if (!objc_msgSend(a2, "err", v17, v18)) {
    [a2 setErr:v14];
  }
}

void __dfp_createStateMachine_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16)
  {
    if (dword_1E96B6828)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t __dfp_createStateMachine_block_invoke_2(uint64_t a1, id *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWDeepFusionProcessorController _resetProcessor]((uint64_t)a2);
  -[BWDeepFusionProcessorController _serviceNextRequest](a2);
  return -[BWDeepFusionProcessorController _updateStateIfNeeded]((uint64_t)a2);
}

uint64_t __dfp_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  -[BWDeepFusionProcessorController _resetProcessor](a2);
  if (objc_msgSend((id)objc_msgSend(*(id *)(a2 + 176), "input"), "onlyApplyingSemanticStyle")) {
    -[BWDeepFusionProcessorController _setupProcessorForOnlyApplyingSemanticStyle](a2);
  }
  else {
    -[BWDeepFusionProcessorController _setupProcessor](a2);
  }
  return -[BWDeepFusionProcessorController _updateStateIfNeeded](a2);
}

uint64_t __dfp_createStateMachine_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x1A6272C70]();
  if (objc_msgSend((id)objc_msgSend(*(id *)(a2 + 176), "input"), "onlyApplyingSemanticStyle")) {
    -[BWDeepFusionProcessorController _processOnlyApplyingSemanticStyle](a2);
  }
  else {
    -[BWDeepFusionProcessorController _process](a2);
  }
  return -[BWDeepFusionProcessorController _updateStateIfNeeded](a2);
}

void btfn_temporalFilterSessionCallback(dispatch_queue_t *a1, int a2, uint64_t a3, long long *a4, const void *a5)
{
  if (a1 && !a2)
  {
    if (a5)
    {
      dispatch_assert_queue_not_V2(a1[27]);
      unint64_t v8 = a1;
      CFRetain(a5);
      long long v9 = a1[27];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __btfn_temporalFilterSessionCallback_block_invoke;
      block[3] = &unk_1E5C280F0;
      long long v11 = *a4;
      uint64_t v12 = *((void *)a4 + 2);
      void block[4] = a1;
      void block[5] = a5;
      dispatch_async(v9, block);
    }
  }
}

void __btfn_temporalFilterSessionCallback_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v18 = 0;
  long long v2 = (_OWORD *)(a1 + 48);
  uint64_t v3 = [MEMORY[0x1E4F29238] valueWithBytes:a1 + 48 objCType:"{?=qiIq}"];
  int v4 = [*(id *)(*(void *)(a1 + 32) + 224) containsObject:v3];
  uint64_t v5 = *(void *)(a1 + 32);
  if (v4)
  {
    [*(id *)(v5 + 224) removeObject:v3];
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = (opaqueCMSampleBuffer *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(v5 + 120));
    uint64_t v6 = v7;
    if (v7 && !*(unsigned char *)(*(void *)(a1 + 32) + 232))
    {
      CFDictionaryRef v8 = (const __CFDictionary *)CMGetAttachment(v7, (CFStringRef)*MEMORY[0x1E4F53070], 0);
      if (!v8
        || (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v8, (const void *)*MEMORY[0x1E4F530C0])) == 0
        || (memset(&v16, 0, sizeof(v16)),
            CMTimeMakeFromDictionary(&v16, Value),
            *(_OWORD *)&time1.xpc_object_t value = *v2,
            time1.CMTimeEpoch epoch = *(void *)(a1 + 64),
            CMTime time2 = v16,
            CMTimeCompare(&time1, &time2))
        || BWCMSampleBufferCreateCopyWithNewPixelBuffer(v6, *(__CVBuffer **)(a1 + 40), &v18, (CMSampleBufferRef *)&cf))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        *(_OWORD *)&time1.xpc_object_t value = *v2;
        time1.CMTimeEpoch epoch = *(void *)(a1 + 64);
        -[BWTemporalFilterNode _dropInputSampleWithPTS:](v13, (long long *)&time1.value);
      }
      else
      {
        uint64_t v10 = *(void *)(a1 + 32);
        if (!*(void *)(v10 + 176) && dword_1E96B6DC8)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v10 = *(void *)(a1 + 32);
        }
        objc_msgSend(*(id *)(v10 + 128), "emitSampleBuffer:", cf, v14, v15);
        ++*(void *)(*(void *)(a1 + 32) + 176);
      }
    }
  }
  uint64_t v12 = *(const void **)(a1 + 40);
  if (v12) {
    CFRelease(v12);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
}

uint64_t BWOverlaidRectangleDrawRectanglesInBitmapContext(void *a1, CGContext *a2, __CVBuffer *a3)
{
  int v4 = a1;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  uint64_t result = [a1 countByEnumeratingWithState:&v95 objects:v103 count:16];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v96;
    CGFloat v8 = *MEMORY[0x1E4F1DB28];
    CGFloat v9 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    CGFloat v10 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
    CGFloat v11 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
    CGFloat v83 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    CGFloat v84 = *MEMORY[0x1E4F1DB30];
    __asm { FMOV            V0.2D, #1.0 }
    int8x16_t v81 = _Q0;
    int8x16_t v80 = (int8x16_t)xmmword_1A5F0D120;
    uint64_t v89 = *(void *)v96;
    size_t v90 = v4;
    double v87 = v9;
    double v88 = *MEMORY[0x1E4F1DB28];
    double v85 = v11;
    double v86 = v10;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v96 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v17 = *(void **)(*((void *)&v95 + 1) + 8 * v16);
        objc_msgSend(v17, "bounds", *(_OWORD *)&v80, *(_OWORD *)&v81);
        CGFloat x = v109.origin.x;
        double y = v109.origin.y;
        double width = v109.size.width;
        double height = v109.size.height;
        if (!CGRectIsNull(v109))
        {
          v110.origin.CGFloat x = x;
          v110.origin.double y = y;
          v110.size.double width = width;
          v110.size.double height = height;
          v127.origin.CGFloat x = v8;
          v127.origin.double y = v9;
          v127.size.double width = v10;
          v127.size.double height = v11;
          if (!CGRectEqualToRect(v110, v127))
          {
            int v22 = [v17 displayStyle];
            int v23 = [v17 displayStyle];
            int v24 = [v17 displayStyle];
            if (v24 == 4)
            {
              DeviceGradouble y = CGColorSpaceCreateDeviceGray();
              components.CGFloat a = 0.0;
              double v26 = 1.0;
              goto LABEL_11;
            }
            double y = (double)CGBitmapContextGetHeight(a2) - y - height;
            DeviceGradouble y = CGColorSpaceCreateDeviceGray();
            components.CGFloat a = 0.0;
            double v26 = 1.0;
            if (v23 == 3)
            {
LABEL_11:
              components.CGFloat b = 0.0;
              long long v27 = CGColorCreate(DeviceGray, &components.a);
              v107.double height = v83;
              v107.double width = v84;
              CGContextSetShadowWithColor(a2, v107, 0.0, v27);
              char v28 = 1;
              if (v27) {
                goto LABEL_12;
              }
            }
            else
            {
              objc_msgSend((id)objc_msgSend(v17, "rampAnimation"), "currentValue");
              components.CGFloat b = v79;
              long long v27 = CGColorCreate(DeviceGray, &components.a);
              v108.double width = 1.0;
              v108.double height = -1.0;
              CGContextSetShadowWithColor(a2, v108, 0.0, v27);
              char v28 = 0;
              if (v27) {
LABEL_12:
              }
                CFRelease(v27);
            }
            components.CGFloat a = 0.04;
            double v29 = 0.0;
            if ((v28 & 1) == 0)
            {
              if (v22 == 2) {
                double v30 = 0.1;
              }
              else {
                double v30 = 0.125;
              }
              objc_msgSend((id)objc_msgSend(v17, "rampAnimation"), "currentValue");
              double v29 = v30 * v31;
            }
            components.CGFloat b = v29;
            id v32 = CGColorCreate(DeviceGray, &components.a);
            double v33 = 0.96;
            if (v22 == 2) {
              double v33 = v26;
            }
            v104.CGFloat a = v33;
            objc_msgSend((id)objc_msgSend(v17, "rampAnimation"), "currentValue");
            v104.CGFloat b = v34 * 0.94;
            if (v23 == 3 || v24 == 4)
            {
              int32x2_t v35 = vdup_n_s32(v23 == 3);
              v36.i64[0] = v35.u32[0];
              v36.i64[1] = v35.u32[1];
              *(int8x16_t *)&v104.CGFloat a = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v36, 0x3FuLL)), v80, v81);
            }
            uint64_t v37 = CGColorCreate(DeviceGray, &v104.a);
            CGContextSetFillColorWithColor(a2, v32);
            CGContextSetStrokeColorWithColor(a2, v37);
            if (v32) {
              CFRelease(v32);
            }
            if (v37) {
              CFRelease(v37);
            }
            uint64_t v7 = v89;
            if (DeviceGray) {
              CFRelease(DeviceGray);
            }
            size_t v38 = CGBitmapContextGetWidth(a2);
            if (v38 >= CGBitmapContextGetHeight(a2)) {
              size_t v39 = CGBitmapContextGetHeight(a2);
            }
            else {
              size_t v39 = CGBitmapContextGetWidth(a2);
            }
            double v40 = 7.0;
            if (v39 < 0x438) {
              double v40 = 5.0;
            }
            if (v22 != 2) {
              double v40 = 3.0;
            }
            if (v24 == 4) {
              double v40 = 4.0;
            }
            if (v23 == 3) {
              double v41 = 3.0;
            }
            else {
              double v41 = v40;
            }
            CGContextSetLineWidth(a2, v41);
            if (width >= height) {
              double v42 = height;
            }
            else {
              double v42 = width;
            }
            BOOL v43 = [v17 animationState] == 0;
            double v94 = v42;
            if (v22 == 2)
            {
              BOOL v43 = [v17 animationState] == 0;
              CGRect v44 = (float *)&unk_1A5F0D108;
            }
            else
            {
              CGRect v44 = (float *)&unk_1A5F0D100;
            }
            double v45 = v44[v43];
            objc_msgSend((id)objc_msgSend(v17, "rampAnimation"), "currentValue");
            float v47 = v45 + (1.0 - v45) * v46;
            if (v23 == 3) {
              float v48 = 1.0;
            }
            else {
              float v48 = v47;
            }
            if (v48 != 1.0)
            {
              v111.origin.CGFloat x = x;
              v111.origin.double y = y;
              v111.size.double width = width;
              v111.size.double height = height;
              double MidX = CGRectGetMidX(v111);
              v112.origin.CGFloat x = x;
              v112.origin.double y = y;
              v112.size.double width = width;
              v112.size.double height = height;
              double MidY = CGRectGetMidY(v112);
              long long v93 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
              *(_OWORD *)&components.CGFloat a = *MEMORY[0x1E4F1DAB8];
              long long v92 = *(_OWORD *)&components.a;
              *(_OWORD *)&components.CGFloat c = v93;
              *(_OWORD *)&components.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
              long long v91 = *(_OWORD *)&components.tx;
              CGAffineTransformMakeTranslation(&v104, -MidX, -MidY);
              *(_OWORD *)&t1.CGFloat a = v92;
              *(_OWORD *)&t1.CGFloat c = v93;
              *(_OWORD *)&t1.tCGFloat x = v91;
              CGAffineTransformConcat(&components, &t1, &v104);
              CGAffineTransformMakeScale(&t2, v48, v48);
              CGAffineTransform v100 = components;
              CGAffineTransformConcat(&t1, &v100, &t2);
              CGAffineTransform components = t1;
              CGAffineTransformMakeTranslation(&v100, MidX, MidY);
              CGAffineTransform v99 = components;
              CGAffineTransformConcat(&t1, &v99, &v100);
              CGAffineTransform components = t1;
              v113.origin.CGFloat x = x;
              v113.origin.double y = y;
              v113.size.double width = width;
              v113.size.double height = height;
              CGRect v114 = CGRectApplyAffineTransform(v113, &t1);
              CGFloat x = v114.origin.x;
              double y = v114.origin.y;
              double width = v114.size.width;
              double height = v114.size.height;
            }
            v115.origin.CGFloat x = x;
            v115.origin.double y = y;
            v115.size.double width = width;
            v115.size.double height = height;
            CGRect v116 = CGRectInset(v115, v41 * -0.5, v41 * -0.5);
            float64_t v51 = v116.origin.x;
            CGFloat v52 = v116.origin.y;
            double v53 = v116.size.width;
            double v54 = v116.size.height;
            objc_msgSend((id)objc_msgSend(v17, "rampAnimation"), "currentValue");
            if (v55 == 1.0)
            {
              v117.origin.CGFloat x = v51;
              v117.origin.double y = v52;
              v117.size.double width = v53;
              v117.size.double height = v54;
              CGRect v118 = CGRectIntegral(v117);
              float64_t v51 = v118.origin.x;
              CGFloat v52 = v118.origin.y;
              double v53 = v118.size.width;
              double v54 = v118.size.height;
            }
            _ZF = v23 == 3 || v22 == 2;
            double v57 = 7.0;
            if (!_ZF) {
              double v57 = 24.0;
            }
            if (v23 == 3) {
              double v57 = 1.6;
            }
            double v58 = v57 * v48;
            if (v94 >= v58 + v58) {
              double v59 = v58;
            }
            else {
              double v59 = v94 * 0.5;
            }
            v119.origin.CGFloat x = v51;
            v119.origin.double y = v52;
            v119.size.double width = v53;
            v119.size.double height = v54;
            CGPathRef v60 = CGPathCreateWithRoundedRect(v119, v59, v59, 0);
            CGRect v61 = v60;
            if (v24 == 4)
            {
              CGFloat v11 = v85;
              if (v60) {
                CFRelease(v60);
              }
              v120.origin.CGFloat x = v51;
              v120.origin.double y = v52;
              v120.size.double width = v53;
              v120.size.double height = v54;
              CGRect v61 = CGPathCreateWithRect(v120, 0);
            }
            else
            {
              CGFloat v11 = v85;
            }
            CGContextBeginPath(a2);
            CGContextAddPath(a2, v61);
            if (v24 == 4)
            {
              v62.f64[0] = v52;
              double v63 = FigCaptureMetadataUtilitiesRoundRectToEvenCoordinatesPreservingSquareness(1u, v51, v62, v53, v54, 0.0);
              CGFloat v65 = v64;
              CGFloat v67 = v66;
              CGFloat v69 = v68;
              FigDraw420Rectangle(a3, (int)v63, (int)v64, (int)v66, (int)v68, 208, 58, 153);
              v121.origin.CGFloat x = v63;
              v121.origin.double y = v65;
              v121.size.double width = v67;
              v121.size.double height = v69;
              CGRect v122 = CGRectInset(v121, 1.0, 1.0);
              CGFloat v70 = v122.origin.x;
              CGFloat v71 = v122.origin.y;
              CGFloat v72 = v122.size.width;
              CGFloat v73 = v122.size.height;
              FigDraw420Rectangle(a3, (int)v122.origin.x, (int)v122.origin.y, (int)v122.size.width, (int)v122.size.height, 208, 58, 153);
              v123.origin.CGFloat x = v70;
              v123.origin.double y = v71;
              v123.size.double width = v72;
              v123.size.double height = v73;
              CGRect v124 = CGRectInset(v123, 1.0, 1.0);
              CGFloat v74 = v124.origin.x;
              CGFloat v75 = v124.origin.y;
              CGFloat v76 = v124.size.width;
              CGFloat v77 = v124.size.height;
              FigDraw420Rectangle(a3, (int)v124.origin.x, (int)v124.origin.y, (int)v124.size.width, (int)v124.size.height, 208, 58, 153);
              v125.origin.CGFloat x = v74;
              v125.origin.double y = v75;
              v125.size.double width = v76;
              v125.size.double height = v77;
              CGRect v126 = CGRectInset(v125, 1.0, 1.0);
              FigDraw420Rectangle(a3, (int)v126.origin.x, (int)v126.origin.y, (int)v126.size.width, (int)v126.size.height, 208, 58, 153);
            }
            else
            {
              if (v23 == 3) {
                CGPathDrawingMode v78 = kCGPathStroke;
              }
              else {
                CGPathDrawingMode v78 = kCGPathFillStroke;
              }
              CGContextDrawPath(a2, v78);
            }
            int v4 = v90;
            CGFloat v9 = v87;
            CGFloat v8 = v88;
            CGFloat v10 = v86;
            CGContextResetClip(a2);
            if (v61) {
              CFRelease(v61);
            }
          }
        }
        ++v16;
      }
      while (v6 != v16);
      uint64_t result = [v4 countByEnumeratingWithState:&v95 objects:v103 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

uint64_t fillGDCParametersFromDistortionModels(float64x2_t *a1, double *a2, uint64_t a3, float a4, float a5)
{
  *(void *)&long long v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  if (a1 && a2 && a3)
  {
    *(float32x2_t *)&long long v31 = vcvt_f32_f64(a1[1]);
    *(void *)&long long v32 = __PAIR64__(LODWORD(a5), LODWORD(a4));
    double v5 = a1->f64[0];
    double v6 = a1->f64[1];
    float v7 = a1->f64[0];
    float v8 = v6;
    *((float *)&v32 + 2) = v7;
    *((float *)&v40 + 1) = v8;
    *((void *)&v40 + 1) = 0;
    *(void *)&long long v41 = 0;
    *((double *)&v41 + 1) = a4;
    double v42 = a5;
    float64x2_t v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[1] * *a2), 0);
    float64x2_t v10 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v5 * v6), 0);
    CGFloat v11 = (float64x2_t *)(a2 + 12);
    uint64_t v12 = a1 + 6;
    for (uint64_t i = 32; i != 64; i += 8)
    {
      float64x2_t v14 = v11[-4];
      float64x2_t v15 = *v11++;
      uint64_t v16 = (float32x2_t *)((char *)&v27 + i);
      v16[-4] = vcvt_f32_f64(vmlaq_f64(v14, v15, v9));
      float64x2_t v17 = v12[-4];
      float64x2_t v18 = *v12++;
      *uint64_t v16 = vcvt_f32_f64(vmlaq_f64(v17, v18, v10));
    }
    uint64_t result = 0;
    *(double *)(a3 + 240) = v42;
    long long v20 = v40;
    *(_OWORD *)(a3 + 192) = v39;
    *(_OWORD *)(a3 + 20_Block_object_dispose(&STACK[0x4C8], 8) = v20;
    *(_OWORD *)(a3 + 224) = v41;
    long long v21 = v36;
    *(_OWORD *)(a3 + 12_Block_object_dispose(&STACK[0x4C8], 8) = v35;
    *(_OWORD *)(a3 + 144) = v21;
    long long v22 = v38;
    *(_OWORD *)(a3 + 160) = v37;
    *(_OWORD *)(a3 + 176) = v22;
    long long v23 = v32;
    *(_OWORD *)(a3 + 64) = v31;
    *(_OWORD *)(a3 + 80) = v23;
    long long v24 = v34;
    *(_OWORD *)(a3 + 96) = v33;
    *(_OWORD *)(a3 + 112) = v24;
    long long v25 = v28;
    *(_OWORD *)a3 = v27;
    *(_OWORD *)(a3 + 16) = v25;
    long long v26 = v30;
    *(_OWORD *)(a3 + 32) = v29;
    *(_OWORD *)(a3 + 4_Block_object_dispose(&STACK[0x4C8], 8) = v26;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return result;
}

id sidn_depthMetadataAttachmentDictionaryFromBravoDisparityMetadata(void *a1, opaqueCMSampleBuffer *target, int a3, int a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F53070], 0))
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    float64x2_t v9 = v8;
    if (a4) {
      float64x2_t v10 = &unk_1EFB01A30;
    }
    else {
      float64x2_t v10 = &unk_1EFB01A48;
    }
    [v8 setObject:v10 forKeyedSubscript:*MEMORY[0x1E4F558A8]];
    [v9 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F55870]];
    [v9 setObject:&unk_1EFB01A30 forKeyedSubscript:*MEMORY[0x1E4F55860]];
    long long v67 = 0u;
    long long v68 = 0u;
    long long v66 = 0u;
    if (a3) {
      [a1 teleIntrinsicMatrix];
    }
    else {
      [a1 wideIntrinsicMatrix];
    }
    DWORD2(v66) = v12;
    DWORD2(v67) = v14;
    *(void *)&long long v66 = v11;
    *(void *)&long long v67 = v13;
    DWORD2(v6_Block_object_dispose(&STACK[0x4C8], 8) = v16;
    *(void *)&long long v68 = v15;
    uint64_t v17 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v66 length:48];
    [v9 setObject:v17 forKeyedSubscript:*MEMORY[0x1E4F55878]];
    CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(target);
    CGFloat Width = (double)CVPixelBufferGetWidth(ImageBuffer);
    v72.double height = (double)CVPixelBufferGetHeight(ImageBuffer);
    v72.double width = Width;
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v72);
    [v9 setObject:DictionaryRepresentation forKeyedSubscript:*MEMORY[0x1E4F55880]];

    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    if (a3) {
      [a1 teleExtrinsicMatrix];
    }
    else {
      [a1 wideExtrinsicMatrix];
    }
    DWORD2(v62) = v22;
    DWORD2(v63) = v24;
    *(void *)&long long v62 = v21;
    *(void *)&long long v63 = v23;
    DWORD2(v64) = v26;
    DWORD2(v65) = v28;
    *(void *)&long long v64 = v25;
    *(void *)&long long v65 = v27;
    uint64_t v29 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v62 length:64];
    [v9 setObject:v29 forKeyedSubscript:*MEMORY[0x1E4F55868]];
    if (a3) {
      [a1 telePixelSizeInMillimeters];
    }
    else {
      [a1 widePixelSizeInMillimeters];
    }
    uint64_t v30 = objc_msgSend(NSNumber, "numberWithFloat:");
    [v9 setObject:v30 forKeyedSubscript:*MEMORY[0x1E4F558A0]];
    if (a3) {
      long long v31 = (void *)[a1 teleLensDistortionCoefficients];
    }
    else {
      long long v31 = (void *)[a1 wideLensDistortionCoefficients];
    }
    long long v32 = v31;
    if (v31)
    {
      long long v33 = objc_msgSend(MEMORY[0x1E4F1CA58], "dataWithLength:", 4 * objc_msgSend(v31, "count"));
      long long v34 = (_DWORD *)[v33 mutableBytes];
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      uint64_t v35 = [v32 countByEnumeratingWithState:&v58 objects:v70 count:16];
      if (v35)
      {
        uint64_t v36 = v35;
        uint64_t v37 = *(void *)v59;
        do
        {
          for (uint64_t i = 0; i != v36; ++i)
          {
            if (*(void *)v59 != v37) {
              objc_enumerationMutation(v32);
            }
            [*(id *)(*((void *)&v58 + 1) + 8 * i) floatValue];
            *v34++ = v39;
          }
          uint64_t v36 = [v32 countByEnumeratingWithState:&v58 objects:v70 count:16];
        }
        while (v36);
      }
      [v9 setObject:v33 forKeyedSubscript:*MEMORY[0x1E4F55898]];
    }
    if (a3) {
      long long v40 = (void *)[a1 teleInverseLensDistortionCoefficients];
    }
    else {
      long long v40 = (void *)[a1 wideInverseLensDistortionCoefficients];
    }
    long long v41 = v40;
    if (v40)
    {
      double v42 = objc_msgSend(MEMORY[0x1E4F1CA58], "dataWithLength:", 4 * objc_msgSend(v40, "count"));
      BOOL v43 = (_DWORD *)[v42 mutableBytes];
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      uint64_t v44 = [v41 countByEnumeratingWithState:&v54 objects:v69 count:16];
      if (v44)
      {
        uint64_t v45 = v44;
        uint64_t v46 = *(void *)v55;
        do
        {
          for (uint64_t j = 0; j != v45; ++j)
          {
            if (*(void *)v55 != v46) {
              objc_enumerationMutation(v41);
            }
            [*(id *)(*((void *)&v54 + 1) + 8 * j) floatValue];
            *v43++ = v48;
          }
          uint64_t v45 = [v41 countByEnumeratingWithState:&v54 objects:v69 count:16];
        }
        while (v45);
      }
      [v9 setObject:v42 forKeyedSubscript:*MEMORY[0x1E4F55888]];
    }
    if (a3) {
      [a1 teleLensDistortionOpticalCenter];
    }
    else {
      [a1 wideLensDistortionOpticalCenter];
    }
    CFDictionaryRef v51 = CGPointCreateDictionaryRepresentation(*(CGPoint *)&v49);
    [v9 setObject:v51 forKeyedSubscript:*MEMORY[0x1E4F55890]];

    int v52 = [a1 version];
    objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(NSNumber, "numberWithInt:", v52 | (FigDepthDataGetCurrentMajorVersion() << 16)), *MEMORY[0x1E4F558B0]);
  }
  else
  {
    float64x2_t v9 = 0;
  }
  return v9;
}

uint64_t MediaAnalysisLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = MediaAnalysisLibraryCore_frameworkLibrary;
  uint64_t v5 = MediaAnalysisLibraryCore_frameworkLibrary;
  if (!MediaAnalysisLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E5C2CAA0;
    long long v7 = *(_OWORD *)&off_1E5C2CAB0;
    v3[3] = _sl_dlopen();
    MediaAnalysisLibraryCore_frameworkLibrardouble y = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1A5D3CC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __MediaAnalysisLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  MediaAnalysisLibraryCore_frameworkLibrardouble y = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t MediaAnalysisLibrary()
{
  uint64_t v1 = 0;
  uint64_t result = MediaAnalysisLibraryCore();
  if (!result) {
    MediaAnalysisLibrary_cold_1(&v1);
  }
  return result;
}

uint64_t getVCPCaptureAnalysisSessionClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  long long v6 = __Block_byref_object_copy__39;
  long long v7 = __Block_byref_object_dispose__39;
  uint64_t v0 = getVCPCaptureAnalysisSessionClass_softClass;
  uint64_t v8 = getVCPCaptureAnalysisSessionClass_softClass;
  if (!getVCPCaptureAnalysisSessionClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getVCPCaptureAnalysisSessionClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getVCPCaptureAnalysisSessionClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5D3CE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVCPCaptureAnalysisSessionClass_block_invoke(uint64_t a1)
{
  MediaAnalysisLibrary();
  Class result = objc_getClass("VCPCaptureAnalysisSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getVCPCaptureAnalysisSessionClass_block_invoke_cold_1();
  }
  getVCPCaptureAnalysisSessionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc_ptr;
  uint64_t v6 = getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc_ptr;
  if (!getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc_ptr)
  {
    uint64_t v1 = (void *)MediaAnalysisLibrary();
    v4[3] = (uint64_t)dlsym(v1, "VCPCaptureAnalysisDispatchQueuePropertyKey");
    getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5D3CF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaAnalysisLibrary();
  Class result = dlsym(v2, "VCPCaptureAnalysisDispatchQueuePropertyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t getVCPCaptureAnalysisDispatchQueuePropertyKey()
{
  VCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoCGFloat c = getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc();
  if (!VCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc) {
    getVCPCaptureAnalysisDispatchQueuePropertyKey_cold_1();
  }
  return *(void *)VCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc;
}

void *__getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaAnalysisLibrary();
  Class result = dlsym(v2, "VCPCaptureAnalysisSubjectMotionScoreKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaAnalysisLibrary();
  Class result = dlsym(v2, "VCPCaptureAnalysisMotionDivScoreKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t fdek_registerKeySpaceAndPredefinedMetadataKeys()
{
  uint64_t v0 = 0;
  sMetadataKeySpace = FigFlatDictionaryKeySpaceRegister(0x59u, 1702391150);
  do
  {
    uint64_t result = FigFlatDictionaryKeyRegisterExistingKey(sMetadataKeySpace, *(int **)((char *)&FigFlatDictionaryMakerNoteKeys + v0));
    v0 += 8;
  }
  while (v0 != 712);
  return result;
}

uint64_t RegisterFigCaptureDeviceType()
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigCaptureDeviceDesc, ClassID, 1, &sFigCaptureDeviceID);
}

uint64_t FigCaptureDeviceGetTypeID()
{
  MEMORY[0x1A62711C0](&FigCaptureDeviceGetClassID_sRegisterFigCaptureDeviceTypeOnce, RegisterFigCaptureDeviceType);
  uint64_t v0 = sFigCaptureDeviceID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t RegisterFigCaptureStreamType()
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigCaptureStreamDesc, ClassID, 1, &sFigCaptureStreamID);
}

uint64_t FigCaptureStreamGetTypeID()
{
  MEMORY[0x1A62711C0](&FigCaptureStreamGetClassID_sRegisterFigCaptureStreamTypeOnce, RegisterFigCaptureStreamType);
  uint64_t v0 = sFigCaptureStreamID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t RegisterFigCaptureSynchronizedStreamsGroupType()
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigCaptureSynchronizedStreamsGroupDesc, ClassID, 1, &sFigCaptureSynchronizedStreamsGroupID);
}

uint64_t FigCaptureSynchronizedStreamsGroupGetTypeID()
{
  MEMORY[0x1A62711C0](&FigCaptureSynchronizedStreamsGroupGetClassID_sRegisterFigCaptureSynchronizedStreamsGroupTypeOnce, RegisterFigCaptureSynchronizedStreamsGroupType);
  uint64_t v0 = sFigCaptureSynchronizedStreamsGroupID;
  return MEMORY[0x1F40DB8F8](v0);
}

CFStringRef FigCaptureDeviceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptureDevice %p]", a1);
}

CFStringRef FigCaptureStreamCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptureStream %p]", a1);
}

CFStringRef FigCaptureSynchronizedStreamsGroupCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCaptureSynchronizedStreamsGroup %p]", a1);
}

uint64_t FigExternalStorageDeviceManagerRemoteCreate(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = remoteExternalStorageDeviceManagerClient_EnsureClientEstablished();
  if (v4) {
    goto LABEL_12;
  }
  FigExternalStorageDeviceManagerGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4) {
    goto LABEL_12;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t v6 = DerivedStorage;
  *uint64_t DerivedStorage = FigSimpleMutexCreate();
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4 || (uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v4))
  {
LABEL_12:
    uint64_t v7 = v4;
    fig_log_get_emitter();
LABEL_14:
    FigDebugAssert3();
    goto LABEL_8;
  }
  v6[1] = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v7 = FigXPCRemoteClientAssociateObject();
  if (v7)
  {
    fig_log_get_emitter();
    goto LABEL_14;
  }
  *a3 = 0;
LABEL_8:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t remoteExternalStorageDeviceManagerClient_EnsureClientEstablished()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __remoteExternalStorageDeviceManagerClient_EnsureClientEstablished_block_invoke;
  block[3] = &unk_1E5C24978;
  void block[4] = &v3;
  if (remoteExternalStorageDeviceManagerClient_EnsureClientEstablished_gFigExternalStorageDeviceManagerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteExternalStorageDeviceManagerClient_EnsureClientEstablished_gFigExternalStorageDeviceManagerRemoteClientSetupOnce, block);
  }
  if (gFigExternalStorageDeviceManagerRemoteClient)
  {
    uint64_t v0 = *((unsigned int *)v4 + 6);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v0 = FigSignalErrorAt();
    *((_DWORD *)v4 + 6) = v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5D3E320(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigExternalStorageDeviceManagerRemoteSupported()
{
  if (!remoteExternalStorageDeviceManagerClient_EnsureClientEstablished()) {
    return 1;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0;
}

uint64_t remoteExternalStorageDeviceManagerClient_DeadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result) {
    *(unsigned char *)(result + 16) = 1;
  }
  return result;
}

uint64_t remoteExternalStorageDeviceManagerClient_handleServerMessage()
{
  if (CMBaseObjectGetDerivedStorage())
  {
    uint64_t OpCode = FigXPCMessageGetOpCode();
    if (!OpCode) {
      return 4294948025;
    }
    uint64_t v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
    return v1;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t remoteFigExternalStorageDeviceManager_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    FigXPCRemoteClientDisassociateObject();
    pthread_mutex_lock(*(pthread_mutex_t **)v1);
    if (!*(unsigned char *)(v1 + 16)
      && (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendAsyncMessage()))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      pthread_mutex_unlock(*(pthread_mutex_t **)v1);
    }
    else
    {
      _Block_release(*(const void **)(v1 + 40));
      pthread_mutex_unlock(*(pthread_mutex_t **)v1);
      FigSimpleMutexDestroy();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    FigSignalErrorAt();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return FigXPCRelease();
}

__CFString *remoteFigExternalStorageDeviceManager_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    CFAllocatorRef v4 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(v4, 0);
    CFIndex v6 = CFGetRetainCount(a1);
    CFAllocatorRef v7 = CFGetAllocator(a1);
    CFStringAppendFormat(Mutable, 0, @"<FigExternalStorageDeviceManagerRemote %p retainCount: %ld allocator: %p objectID %016llx", a1, v6, v7, *(void *)(v3 + 8));
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  return Mutable;
}

uint64_t remoteFigExternalStorageDeviceManager_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = 0;
  if (!a2 || !a4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_5;
  }
  *a4 = 0;
  uint64_t ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v7);
  if (ObjectID)
  {
    uint64_t v5 = ObjectID;
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    goto LABEL_5;
  }
  uint64_t v5 = FigXPCSendStdCopyPropertyMessage();
  if (v5)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
LABEL_5:
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteExternalStorageDeviceManagerClient_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a1 && !*(unsigned char *)(DerivedStorage + 16))
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t remoteFigExternalStorageDeviceManager_beginMonitoring(uint64_t a1, uint64_t a2, pthread_mutex_t *a3, pthread_mutex_t *a4)
{
  uint64_t v12 = 0;
  uint64_t DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_6;
  }
  uint64_t v8 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  v8[3] = a4;
  v8[4] = a3;
  uint64_t ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v12);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v10 = ObjectID;
    fig_log_get_emitter();
LABEL_11:
    FigDebugAssert3();
    goto LABEL_5;
  }
  uint64_t v10 = FigXPCRemoteClientSendSyncMessage();
  if (v10)
  {
    fig_log_get_emitter();
    goto LABEL_11;
  }
LABEL_5:
  pthread_mutex_unlock(*v8);
LABEL_6:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v10;
}

uint64_t remoteFigExternalStorageDeviceManager_copyStorageDeviceNextAvailableURLArray(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v3 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  uint64_t ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v7);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFArray(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v5 = ObjectID;
    fig_log_get_emitter();
LABEL_15:
    FigDebugAssert3();
    goto LABEL_8;
  }
  uint64_t v5 = FigXPCMessageCopyCFArray();
  if (v5)
  {
    fig_log_get_emitter();
    goto LABEL_15;
  }
LABEL_8:
  pthread_mutex_unlock(*v3);
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

uint64_t remoteFigExternalStorageDeviceManager_copyStorageDeviceNextAvailableSecurityScopeWrappedURLDataArray(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v3 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  uint64_t ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v7);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFArray(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v5 = ObjectID;
    fig_log_get_emitter();
LABEL_15:
    FigDebugAssert3();
    goto LABEL_8;
  }
  uint64_t v5 = FigXPCMessageCopyCFArray();
  if (v5)
  {
    fig_log_get_emitter();
    goto LABEL_15;
  }
LABEL_8:
  pthread_mutex_unlock(*v3);
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

uint64_t remoteFigExternalStorageDeviceManager_copyStorageDeviceProperty(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v3 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  uint64_t ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v7);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v5 = ObjectID;
    fig_log_get_emitter();
LABEL_15:
    FigDebugAssert3();
    goto LABEL_8;
  }
  uint64_t v5 = FigXPCMessageCopyCFObject();
  if (v5)
  {
    fig_log_get_emitter();
    goto LABEL_15;
  }
LABEL_8:
  pthread_mutex_unlock(*v3);
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

uint64_t remoteFigExternalStorageDeviceManager_checkAuthorizationStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v10 = 0;
  uint64_t DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_9;
  }
  CFIndex v6 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  uint64_t ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v10);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v8 = ObjectID;
    fig_log_get_emitter();
LABEL_13:
    FigDebugAssert3();
    goto LABEL_8;
  }
  uint64_t v8 = FigXPCMessageCopyCFNumber();
  if (v8)
  {
    fig_log_get_emitter();
    goto LABEL_13;
  }
  *a3 = FigCFNumberGetSInt32();
LABEL_8:
  pthread_mutex_unlock(*v6);
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t remoteFigExternalStorageDeviceManager_requestAuthorization(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v10 = 0;
  uint64_t DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_7;
  }
  CFIndex v6 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  _OWORD v6[5] = (pthread_mutex_t *)_Block_copy(a3);
  uint64_t ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v10);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v8 = ObjectID;
    fig_log_get_emitter();
LABEL_12:
    FigDebugAssert3();
    goto LABEL_6;
  }
  uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
  if (v8)
  {
    fig_log_get_emitter();
    goto LABEL_12;
  }
LABEL_6:
  pthread_mutex_unlock(*v6);
LABEL_7:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t FigLocalQueueGetTypeID()
{
  return sLocalQueueID;
}

uint64_t localQueueRegister()
{
  sLocalQueueClass = 0;
  unk_1E96B8060 = "FigLocalQueue";
  qword_1E96B8068 = (uint64_t)localQueueInit;
  unk_1E96B8070 = 0;
  qword_1E96B8078 = (uint64_t)localQueueFinalize;
  unk_1E96B8080 = 0;
  qword_1E96B8088 = 0;
  unk_1E96B8090 = 0;
  qword_1E96B8098 = (uint64_t)localQueueCopyDebugDesc;
  uint64_t result = _CFRuntimeRegisterClass();
  sLocalQueueID = result;
  return result;
}

uint64_t FigLocalQueueCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    MEMORY[0x1A62711C0](&FigLocalQueueGetTypeID_registerOnce, localQueueRegister);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v5 = (void *)Instance;
      uint64_t v6 = FigSimpleMutexCreate();
      void v5[2] = v6;
      if (v6)
      {
        uint64_t v7 = FigDispatchQueueCreateWithPriority();
        void v5[3] = v7;
        if (v7)
        {
          uint64_t result = 0;
          *a3 = v5;
          return result;
        }
      }
      fig_log_get_emitter();
      FigDebugAssert3();
      CFRelease(v5);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    return 4294949966;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294949967;
  }
}

uint64_t FigLocalQueueEnqueue(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (!*(void *)(a1 + 40)) {
    goto LABEL_13;
  }
  int v6 = *a2;
  if (*a2 == 6) {
    goto LABEL_5;
  }
  if (v6 == 5)
  {
    uint64_t v7 = (CFTypeRef *)(a2 + 3);
LABEL_7:
    CFTypeRef v8 = *v7;
    if (*v7) {
      CFRetain(*v7);
    }
    goto LABEL_10;
  }
  if (v6 == 3)
  {
LABEL_5:
    uint64_t v7 = (CFTypeRef *)(a2 + 1);
    goto LABEL_7;
  }
  CFTypeRef v8 = 0;
LABEL_10:
  CFRetain((CFTypeRef)a1);
  float64x2_t v9 = *(NSObject **)(a1 + 32);
  if (!v9) {
    float64x2_t v9 = *(NSObject **)(a1 + 24);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = __FigLocalQueueEnqueue_block_invoke;
  _OWORD v11[3] = &unk_1E5C2D3E8;
  void v11[4] = a3;
  v11[5] = a1;
  long long v12 = *(_OWORD *)a2;
  int v13 = a2[4];
  void v11[6] = v8;
  dispatch_async(v9, v11);
LABEL_13:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return 0;
}

void __FigLocalQueueEnqueue_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    CFAllocatorRef v4 = (long long *)(a1 + 56);
    if (v3)
    {
      uint64_t v5 = *(void (**)(uint64_t, long long *))(v3 + 16);
      long long v9 = *v4;
      int v10 = *(_DWORD *)(a1 + 72);
      v5(v3, &v9);
    }
    else
    {
      int v6 = *(void (**)(uint64_t, long long *))(v2 + 16);
      long long v9 = *v4;
      int v10 = *(_DWORD *)(a1 + 72);
      v6(v2, &v9);
    }
  }
  uint64_t v7 = *(const void **)(a1 + 48);
  if (v7) {
    CFRelease(v7);
  }
  CFTypeRef v8 = *(const void **)(a1 + 40);
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t FigLocalQueueSetReceiverHandler(uint64_t a1, NSObject *a2, const void *a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  int v6 = *(NSObject **)(a1 + 32);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 40);
  if (v7)
  {
    _Block_release(v7);
    *(void *)(a1 + 40) = 0;
  }
  if (a3) {
    *(void *)(a1 + 40) = _Block_copy(a3);
  }
  if (a2)
  {
    dispatch_retain(a2);
    *(void *)(a1 + 32) = a2;
  }
  CFTypeRef v8 = *(pthread_mutex_t **)(a1 + 16);
  return pthread_mutex_unlock(v8);
}

uint64_t FigLocalQueueUnsetReceiverHandler(uint64_t a1)
{
  return FigLocalQueueSetReceiverHandler(a1, 0, 0);
}

double localQueueInit(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t localQueueFinalize(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  CFAllocatorRef v4 = (const void *)a1[5];
  if (v4) {
    _Block_release(v4);
  }
  return FigSimpleMutexDestroy();
}

CFStringRef localQueueCopyDebugDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigLocalQueue %p> {\n    senderQueue %p\n    receiverQueue %p\n}", a1, a1[3], a1[4]);
}

uint64_t FigCaptureDeferredContainerManagerServerStart()
{
  v1[0] = 1;
  v1[1] = captureDeferredContainerManager_handleReplyMessage;
  void v1[2] = captureDeferredContainerManager_handleNoReplyMessage;
  memset(&v1[3], 0, 24);
  if (captureDeferredContainerManager_initializeStatics_onceToken != -1) {
    dispatch_once(&captureDeferredContainerManager_initializeStatics_onceToken, &__block_literal_global_113);
  }
  return FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.capture.deferred.containermanager.xpc", (uint64_t)v1, 0);
}

uint64_t captureDeferredContainerManager_handleNoReplyMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    return 4294954514;
  }
  return v1;
}

uint64_t captureDeferredContainerManager_getAndRetainContainerObjectFromMessage(int a1, xpc_object_t xdict)
{
  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v2)
  {
    uint64_t v4 = v2;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954513;
  }
  return v4;
}

uint64_t captureDeferredContainerManager_serializeNotification(int a1, int a2, int a3, CFDictionaryRef theDict)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex Count = CFDictionaryGetCount(theDict);
  MutableCopdouble y = CFDictionaryCreateMutableCopy(v5, Count, theDict);
  if (FigXPCMessageSetCFDictionary())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64_t v8 = 1;
    if (!MutableCopy) {
      return v8;
    }
    goto LABEL_3;
  }
  uint64_t v8 = 2;
  if (MutableCopy) {
LABEL_3:
  }
    CFRelease(MutableCopy);
  return v8;
}

float bwvip_boundingBoxArea(void *a1)
{
  getVNDetectedObjectObservationClass();
  char isKindOfClass = objc_opt_isKindOfClass();
  float result = 0.0;
  if (isKindOfClass)
  {
    objc_msgSend(a1, "boundingBox", 0.0);
    float v5 = v4;
    float v7 = v6;
    return v5 * v7;
  }
  return result;
}

uint64_t FigCaptureVersatileRawPatternForVersatileBayerPattern(unsigned int a1)
{
  if (a1 > 8) {
    return 0;
  }
  else {
    return *(unsigned int *)&aBggrgbrggrbgrg[4 * a1];
  }
}

BOOL FigCapturePixelFormatIsDemosaicedRaw(BOOL result)
{
  if (result) {
    return FigCaptureUncompressedPixelFormatForPixelFormat(result) == 1751527984;
  }
  return result;
}

uint64_t BWPixelFormatIsFixedPoint(int a1)
{
  BOOL v1 = a1 == 825437747 || a1 == 1932996149;
  return a1 == 825306677 || v1;
}

uint64_t FigCapturePixelFormatIsTenBitPacked(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1882468913)
  {
    if (a1 == 1651587122) {
      return result;
    }
    int v3 = 1882468912;
    goto LABEL_7;
  }
  if (a1 != 1882468914 && a1 != 1885745712)
  {
    int v3 = 1885745714;
LABEL_7:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t FigCaptureUnPackedPixelFormatForPixelFormat(uint64_t a1)
{
  uint64_t v1 = a1;
  if (FigCapturePixelFormatIsTenBit(a1))
  {
    if (v1 == 1885746228) {
      int v2 = 2019963956;
    }
    else {
      int v2 = v1;
    }
    if (v1 == 1885745714) {
      int v3 = 2019963442;
    }
    else {
      int v3 = v2;
    }
    if (v1 == 1885745712) {
      unsigned int v4 = 2019963440;
    }
    else {
      unsigned int v4 = v3;
    }
    if (v1 == 1882469428) {
      int v5 = 2016687156;
    }
    else {
      int v5 = v1;
    }
    if (v1 == 1882468914) {
      int v6 = 2016686642;
    }
    else {
      int v6 = v5;
    }
    if (v1 == 1882468912) {
      unsigned int v7 = 2016686640;
    }
    else {
      unsigned int v7 = v6;
    }
    if ((int)v1 <= 1885745711) {
      return v7;
    }
    else {
      return v4;
    }
  }
  return v1;
}

uint64_t FigCapturePixelFormatTypeFromPlistValue(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return BWOSTypeForString(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return [a1 intValue];
    }
    else
    {
      return 0;
    }
  }
}

void sub_1A5D458CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureSourceProxyCreate(uint64_t a1, const void *a2, void *a3)
{
  FigCaptureSourceGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
    uint64_t v12 = v5;
    fig_log_get_emitter();
    goto LABEL_11;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = *(uint64_t (**)(const void *, uint64_t, void))(v8 + 56);
  if (!v9)
  {
    uint64_t v12 = 4294954514;
LABEL_10:
    fig_log_get_emitter();
LABEL_11:
    FigDebugAssert3();
    return v12;
  }
  uint64_t v10 = v9(a2, 0x1EFA6CF20, MEMORY[0x1E4F1CC38]);
  if (v10)
  {
    uint64_t v12 = v10;
    goto LABEL_10;
  }
  if (a2) {
    CFTypeRef v11 = CFRetain(a2);
  }
  else {
    CFTypeRef v11 = 0;
  }
  *(void *)(DerivedStorage + _Block_object_dispose(&STACK[0x4C8], 8) = v11;
  *(void *)(DerivedStorage + 16) = FigDispatchQueueCreateWithPriority();
  *(unsigned char *)(DerivedStorage + 24) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  uint64_t v12 = 0;
  *a3 = 0;
  return v12;
}

uint64_t captureSourceProxy_handleRealCaptureSourceNotification()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

BOOL FigCaptureSourceProxyRealSourceEqualsSource(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return !*(unsigned char *)DerivedStorage && *(void *)(DerivedStorage + 8) == a2;
}

void FigCaptureSourceProxyDetachFromRealSource(const void *a1)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 24) = 0;
  v7[0] = @"OldPropertyValue";
  v7[1] = @"NewPropertyValue";
  v8[0] = MEMORY[0x1E4F1CC38];
  v8[1] = MEMORY[0x1E4F1CC28];
  int v2 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:2];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && @"Connected")
  {
    uint64_t v4 = DerivedStorage;
    CFRetain(@"Connected");
    if (v2) {
      CFRetain(v2);
    }
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v5 = *(NSObject **)(v4 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __captureSourceProxy_postNotificationWithPayload_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    void block[4] = @"Connected";
    void block[5] = a1;
    void block[6] = v2;
    dispatch_async(v5, block);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
}

void __captureSourceProxy_postNotificationWithPayload_block_invoke(void *a1)
{
  int v2 = (void *)MEMORY[0x1A6272C70]();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  int v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t captureSourceProxy_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    uint64_t v2 = *(void *)(DerivedStorage + 8);
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, void))(v4 + 56);
    if (v5) {
      v5(v2, 0x1EFA6CF20, *MEMORY[0x1E4F1CFC8]);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    int v6 = *(const void **)(v1 + 8);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v1 + _Block_object_dispose(&STACK[0x4C8], 8) = 0;
    }
  }
  return 0;
}

void captureSourceProxy_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureSourceProxy_Invalidate();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  if (v1)
  {
    dispatch_release(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
}

__CFString *captureSourceProxy_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    int v6 = " (invalidated)";
  }
  else {
    int v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptureSourceProxy %p retainCount: %ld%s allocator: %p, ", a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t captureSourceProxy_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  v29[2] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"IsProxy"))
  {
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
    *a4 = *MEMORY[0x1E4F1CFD0];
    CFRetain(v8);
    return 0;
  }
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"HasProxy")) {
    return 4294954516;
  }
  if (!CFEqual(a2, @"CurrentPropertyValues"))
  {
    uint64_t v9 = FigCaptureSourceCopyProperty_0(*(void *)(DerivedStorage + 8), (uint64_t)a2, a3, (uint64_t)a4);
    if (v9)
    {
      fig_log_get_emitter();
LABEL_28:
      FigDebugAssert3();
    }
    return v9;
  }
  int v22 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  v29[0] = @"VideoZoomFactor";
  v29[1] = @"ExposureTargetBias";
  CFTypeRef v11 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v29 count:2];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (!v12) {
    goto LABEL_25;
  }
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)v25;
  while (2)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      if (*(void *)v25 != v14) {
        objc_enumerationMutation(v11);
      }
      uint64_t v16 = *(void *)(*((void *)&v24 + 1) + 8 * i);
      id v23 = 0;
      uint64_t v17 = *(void *)(DerivedStorage + 8);
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      long long v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, id *))(v19 + 48);
      if (!v20)
      {
        uint64_t v9 = 4294954514;
LABEL_27:
        fig_log_get_emitter();
        goto LABEL_28;
      }
      uint64_t v21 = v20(v17, v16, a3, &v23);
      if (v21)
      {
        uint64_t v9 = v21;
        goto LABEL_27;
      }
      if (v23)
      {
        [v22 setObject:v23 forKeyedSubscript:v16];
      }
    }
    uint64_t v13 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v13) {
      continue;
    }
    break;
  }
LABEL_25:
  uint64_t v9 = 0;
  *a4 = v22;
  return v9;
}

uint64_t captureSourceProxy_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  void v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    CFAllocatorRef v7 = DerivedStorage;
    if (CFEqual(a2, @"HasProxy")) {
      return 4294954516;
    }
    v14[0] = 0x1EFA6CF80;
    v14[1] = 0x1EFA6CFA0;
    v15[0] = a2;
    v15[1] = a3;
    uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:2];
    uint64_t v10 = *((void *)v7 + 1);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 56);
    if (v13)
    {
      uint64_t v8 = v13(v10, 0x1EFA6CF60, v9);
      if (!v8) {
        return v8;
      }
    }
    else
    {
      uint64_t v8 = 4294954514;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t captureSourceProxy_LockForConfiguration()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v2 = *(void *)(DerivedStorage + 8);
    if (v2 && (uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16)) != 0) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    CFIndex v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    if (v5)
    {
      uint64_t v6 = v5(v2);
      if (!v6) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 4294954514;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    return v6;
  }
  return FigSignalErrorAt();
}

uint64_t captureSourceProxy_UnlockForConfiguration()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v2 = *(void *)(DerivedStorage + 8);
    if (v2 && (uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16)) != 0) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    CFIndex v5 = *(uint64_t (**)(uint64_t))(v4 + 16);
    if (v5)
    {
      uint64_t v6 = v5(v2);
      if (!v6) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 4294954514;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    return v6;
  }
  return FigSignalErrorAt();
}

id captureDeferredContainerManager_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  id v3 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  CFIndex v4 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    CFIndex v5 = " (invalidated)";
  }
  else {
    CFIndex v5 = "";
  }
  objc_msgSend(v3, "appendFormat:", @"<FigCaptureDeferredContainerManager %p retainCount: %ld%s allocator: %p>", a1, v4, v5, CFGetAllocator(a1));
  return v3;
}

uint64_t captureDeferredContainerManager_CopyProperty(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    if (a2) {
      return 4294954509;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t captureDeferredContainerManager_SetProperty(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    if (a2) {
      return 4294954509;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

id captureDeferredContainerManager_CopySharedContainerIdentifiers(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  id v2 = [+[BWDeferredCaptureContainerManager sharedInstance] manifestsForApplicationID:a2 err:&v4];
  if (v4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v2;
}

uint64_t captureDeferredContainerManager_QueryContainerStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFAllocatorRef v7 = +[BWDeferredCaptureContainerManager sharedInstance];
  return [(BWDeferredCaptureContainerManager *)v7 queryContainerStatusForApplicationID:a2 captureRequestIdentifier:a3 status:a4];
}

id captureDeferredContainerManager_CopyRemoteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  return [+[BWDeferredCaptureContainerManager sharedInstance] copyRemoteContainerForApplicationID:a2 captureRequestIdentifier:a3 err:&v4];
}

uint64_t captureDeferredContainerManager_ReleaseRemoteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex v5 = +[BWDeferredCaptureContainerManager sharedInstance];
  return [(BWDeferredCaptureContainerManager *)v5 releaseRemoteContainerForApplicationID:a2 captureRequestIdentifier:a3];
}

uint64_t captureDeferredContainerManager_DeleteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex v5 = +[BWDeferredCaptureContainerManager sharedInstance];
  return [(BWDeferredCaptureContainerManager *)v5 deleteContainerForApplicationID:a2 captureRequestIdentifier:a3];
}

void __FigCaptureSourceInitialize_block_invoke(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  sVibeMitigatiouint64_t n = [[FigCaptureSourceVibeMitigation alloc] initWithFigCaptureSourceBackings:*(void *)(a1 + 32)];
  if (*(unsigned char *)(a1 + 40))
  {
    id v2 = *(void **)(a1 + 32);
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v3 = (void *)[v2 sourceInfoDictionaries];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v39 objects:v44 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v40;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v40 != v6) {
            objc_enumerationMutation(v3);
          }
          if (objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v39 + 1) + 8 * i), "objectForKeyedSubscript:", 0x1EFA53DC0), "BOOLValue"))
          {
            +[FigCaptureCalibrationMonitor initializeSharedInstanceWithCaptureSourceBackings:v2];
            goto LABEL_12;
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v39 objects:v44 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
  }
LABEL_12:
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v33 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  obuint64_t j = (id)[v8 sourceInfoDictionaries];
  uint64_t v10 = [obj countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v40;
    do
    {
      for (uint64_t j = 0; j != v11; ++j)
      {
        if (*(void *)v40 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = (void *)[*(id *)(*((void *)&v39 + 1) + 8 * j) objectForKeyedSubscript:0x1EFA53CC0];
        uint64_t v15 = objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", @"DeviceType"), "intValue");
        int v16 = objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", @"Position"), "intValue");
        if (v15 <= 0xF && ((1 << v15) & 0x84AC) != 0)
        {
          int v18 = v16;
          objc_msgSend(v9, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", v15));
          uint64_t v19 = BWCaptureDevicePositionAndDeviceTypeToPortType(v18, v15);
          if (v19) {
            [v33 addObject:v19];
          }
        }
      }
      uint64_t v11 = [obj countByEnumeratingWithState:&v39 objects:v44 count:16];
    }
    while (v11);
  }
  if (FigCapturePlatformSupportsExternalCameras()
    && ([v9 containsObject:&unk_1EFB022D0] & 1) == 0)
  {
    [v33 addObject:*MEMORY[0x1E4F52DF8]];
    [v9 addObject:&unk_1EFB022D0];
  }
  FigCaptureCameraStreamingPowerLogInitialize(v33, v9);

  sThermalMonitor_0 = objc_alloc_init(FigCaptureThermalMonitor);
  sPowerMonitor = objc_alloc_init(FigCapturePowerMonitor);
  [(id)sThermalMonitor_0 setThermalHandler:&__block_literal_global_117];
  [(id)sPowerMonitor setPowerHandler:&__block_literal_global_32_1];
  long long v34 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  objCGFloat a = (id)[*(id *)(a1 + 32) sourceInfoDictionaries];
  uint64_t v20 = [obja countByEnumeratingWithState:&v35 objects:v43 count:16];
  if (v20)
  {
    uint64_t v21 = v20;
    unsigned int v30 = 0;
    uint64_t v22 = *(void *)v36;
    do
    {
      for (uint64_t k = 0; k != v21; ++k)
      {
        if (*(void *)v36 != v22) {
          objc_enumerationMutation(obja);
        }
        long long v24 = (void *)[*(id *)(*((void *)&v35 + 1) + 8 * k) objectForKeyedSubscript:0x1EFA53CC0];
        unsigned int v25 = objc_msgSend((id)objc_msgSend(v24, "objectForKeyedSubscript:", @"DeviceType"), "intValue");
        if (v25 <= 0xC)
        {
          if (((1 << v25) & 0x4AC) != 0)
          {
            uint64_t v26 = BWCaptureDevicePositionAndDeviceTypeToPortType(objc_msgSend((id)objc_msgSend(v24, "objectForKeyedSubscript:", @"Position"), "intValue"), v25);
            if (!v26)
            {
              uint64_t v28 = v29;
              LODWORD(v27) = 0;
              FigDebugAssert3();
            }
            objc_msgSend(v34, "setObject:forKeyedSubscript:", objc_msgSend(v24, "objectForKeyedSubscript:", @"SensorThermalLevelsByTemperature", v27, v28), v26);
          }
          else if (((1 << v25) & 0x1040) != 0)
          {
            unsigned int v30 = objc_msgSend((id)objc_msgSend(v24, "objectForKeyedSubscript:", @"PearlModuleType"), "intValue");
          }
        }
      }
      uint64_t v21 = [obja countByEnumeratingWithState:&v35 objects:v43 count:16];
    }
    while (v21);
  }
  else
  {
    unsigned int v30 = 0;
  }
  sSystemPressureMonitor = [[FigCaptureSystemPressureMonitor alloc] initWithPearlModuleType:v30 sensorThermalLevelsByTemperatureByPortType:v34];
  [(id)sSystemPressureMonitor setSystemPressureLevelChangedHandler:&__block_literal_global_38_0];
  FigCaptureSourceCreateSystemStyleEnabledStorage();
}

uint64_t __FigCaptureSourceInitialize_block_invoke_2(uint64_t a1, void *a2)
{
  int v3 = [a2 thermalLevel];
  unsigned int v4 = [(id)sPowerMonitor powerPressureLevel];
  [a2 maxTorchLevel];
  float v6 = v5;
  [(id)sPowerMonitor maxTorchLevel];
  if (v6 >= v7) {
    uint64_t v8 = (void *)sPowerMonitor;
  }
  else {
    uint64_t v8 = a2;
  }
  [v8 maxTorchLevel];
  return cs_handleThermalPressureOrPowerChange(v3, v4, v9);
}

uint64_t cs_handleThermalPressureOrPowerChange(int a1, unsigned int a2, float a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  float v6 = (void *)sActiveVideoCaptureSources;
  uint64_t v7 = [(id)sActiveVideoCaptureSources countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        void v17[2] = __cs_handleThermalPressureOrPowerChange_block_invoke;
        _OWORD v17[3] = &__block_descriptor_40_e154_i16__0__FigCaptureSourceStorage_qiCC____8I____OpaqueFigSimpleMutex__q____CFString__i__________OpaqueFigCaptureSource_f___i__OpaqueFigFlashlight__iBBB_BB_8l;
        int v18 = a1;
        float v19 = a3;
        captureSource_safelyAccessStorage(v11, (uint64_t)v17);
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v8);
  }
  if (sTimeOfFlightAFEnabled)
  {
    BOOL v12 = a1 > 1 || a2 > 0x1D;
    int v13 = v12;
    if (sTimeOfFlightAFSuspended != v13)
    {
      sTimeOfFlightAFSuspendeCGFloat d = v13;
      if (dword_1EB4C4FD0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      cs_updateTimeOfFlightAFEnabledStatus();
    }
  }
  if (sStructuredLightAFEnabled && sStructuredLightAFSuspended != a1 > 1)
  {
    sStructuredLightAFSuspendeCGFloat d = a1 > 1;
    if (dword_1EB4C4FD0)
    {
      uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cs_updateStructuredLightAFEnabledStatus();
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
}

uint64_t __FigCaptureSourceInitialize_block_invoke_3(uint64_t a1, void *a2)
{
  int v3 = [(id)sThermalMonitor_0 thermalLevel];
  unsigned int v4 = [a2 powerPressureLevel];
  [a2 maxTorchLevel];
  float v6 = v5;
  [(id)sThermalMonitor_0 maxTorchLevel];
  if (v6 >= v7) {
    uint64_t v8 = (void *)sThermalMonitor_0;
  }
  else {
    uint64_t v8 = a2;
  }
  [v8 maxTorchLevel];
  return cs_handleThermalPressureOrPowerChange(v3, v4, v9);
}

void __FigCaptureSourceInitialize_block_invoke_4(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock((pthread_mutex_t *)sAllVideoCaptureSourcesLock);
  float v9 = (void *)[(id)sAllVideoCaptureSources copy];
  pthread_mutex_unlock((pthread_mutex_t *)sAllVideoCaptureSourcesLock);
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  obuint64_t j = v9;
  uint64_t v45 = [v9 countByEnumeratingWithState:&v51 objects:v59 count:16];
  int v10 = 0;
  if (v45)
  {
    uint64_t v44 = *(void *)v52;
    if (a2 <= a3) {
      int v11 = a3;
    }
    else {
      int v11 = a2;
    }
    unsigned int v12 = a2 != 0;
    if (a3) {
      v12 |= 2u;
    }
    unsigned int v39 = v12;
    unsigned int v40 = v11;
    if (v11 <= a4) {
      unsigned int v13 = a4;
    }
    else {
      unsigned int v13 = v11;
    }
    unsigned int v37 = v12 | 4;
    unsigned int v38 = v13;
    unsigned int v42 = a3;
    int v43 = a4;
    unsigned int v41 = a2;
    do
    {
      for (uint64_t i = 0; i != v45; ++i)
      {
        if (*(void *)v52 != v44) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(const void **)(*((void *)&v51 + 1) + 8 * i);
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          uint64_t v17 = DerivedStorage;
          int v46 = v10;
          BOOL v18 = a4 != 0;
          FigSimpleMutexCheckIsNotLockedOnThisThread();
          pthread_mutex_lock(*(pthread_mutex_t **)(v17 + 48));
          int v19 = objc_msgSend((id)objc_msgSend(*(id *)(v17 + 104), "objectForKeyedSubscript:", @"DeviceType"), "intValue");
          int v20 = v19;
          BOOL v22 = v19 == 6 || v19 == 12;
          if (v18 && v22) {
            uint64_t v23 = v38;
          }
          else {
            uint64_t v23 = v40;
          }
          if (v18 && v22) {
            uint64_t v24 = v37;
          }
          else {
            uint64_t v24 = v39;
          }
          uint64_t v25 = (void *)[*(id *)(v17 + 144) allKeys];
          if (!v25)
          {
            uint64_t v25 = (void *)[*(id *)(v17 + 152) allKeys];
            if (!v25)
            {
              uint64_t v26 = BWCaptureDevicePositionAndDeviceTypeToPortType(objc_msgSend((id)objc_msgSend(*(id *)(v17 + 104), "objectForKeyedSubscript:", @"Position"), "intValue"), v20);
              if (v26)
              {
                uint64_t v58 = v26;
                uint64_t v25 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v58 count:1];
              }
              else
              {
                uint64_t v25 = 0;
              }
            }
          }
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          uint64_t v27 = [v25 countByEnumeratingWithState:&v47 objects:v57 count:16];
          if (v27)
          {
            uint64_t v28 = v27;
            uint64_t v29 = *(void *)v48;
            do
            {
              for (uint64_t j = 0; j != v28; ++j)
              {
                if (*(void *)v48 != v29) {
                  objc_enumerationMutation(v25);
                }
                int v31 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", *(void *)(*((void *)&v47 + 1) + 8 * j)), "intValue");
                if ((int)v23 <= v31) {
                  unsigned int v32 = v31;
                }
                else {
                  unsigned int v32 = v23;
                }
                if (v31) {
                  uint64_t v23 = v32;
                }
                else {
                  uint64_t v23 = v23;
                }
                if (v31) {
                  uint64_t v24 = v24 | 8;
                }
                else {
                  uint64_t v24 = v24;
                }
              }
              uint64_t v28 = [v25 countByEnumeratingWithState:&v47 objects:v57 count:16];
            }
            while (v28);
          }
          v55[0] = @"Level";
          uint64_t v33 = [NSNumber numberWithInt:v23];
          v55[1] = @"Factors";
          v56[0] = v33;
          v56[1] = [NSNumber numberWithUnsignedInt:v24];
          long long v34 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v56 forKeys:v55 count:2];
          [*(id *)(v17 + 176) setObject:v34 forKeyedSubscript:@"SystemPressureState"];
          [*(id *)(v17 + 80) setSystemPressureLevel:v23];
          [*(id *)(v17 + 80) setSystemPressureFactors:v24];
          [*(id *)(v17 + 80) setThermalSystemPressureLevel:v41];
          [*(id *)(v17 + 80) setPeakPowerSystemPressureLevel:v42];
          if (v23 == 4) {
            [*(id *)(v17 + 80) shutDownSystemPressuredDevice];
          }
          pthread_mutex_unlock(*(pthread_mutex_t **)(v17 + 48));
          captureSource_postNotificationWithPayload(v15, @"SystemPressureState", v34);
          int v10 = v46;
          if (v46 <= (int)v23) {
            int v10 = v23;
          }
          a4 = v43;
        }
      }
      uint64_t v45 = [obj countByEnumeratingWithState:&v51 objects:v59 count:16];
    }
    while (v45);
  }

  if (sPreviousMaxSystemPressureLevel >= 4 && v10 <= 3) {
    objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "resumeSystemPressuredDevice");
  }
  sPreviousMaxSystemPressureLevel = v10;
}

void captureSource_handleCMIOExtensionPropertyChangeNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"DeviceType"), "intValue");
  if (objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", @"UniqueID"), "isEqualToString:", objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"UniqueID")))
  {
    if (dword_1EB4C4FD0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, @"SourceCMIOExtensionPropertyChanged", (uint64_t)a5, 0, 0);
  }
}

void captureSource_handleDevicePropertyChangedNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", @"UniqueID"), "isEqualToString:", objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 104), "objectForKeyedSubscript:", @"UniqueID")))
  {
    if (FigCFEqual())
    {
      float v7 = kFigCaptureSourceProperty_Hidden;
    }
    else if (FigCFEqual())
    {
      float v7 = kFigCaptureSourceProperty_ReadyToUnhide;
    }
    else if (FigCFEqual())
    {
      float v7 = kFigCaptureSourceProperty_DockedTrackingActive;
    }
    else if (FigCFEqual())
    {
      float v7 = kFigCaptureSourceProperty_BatteryState;
    }
    else
    {
      if (!FigCFEqual()) {
        return;
      }
      float v7 = kFigCaptureSourceProperty_BatteryLevel;
    }
    uint64_t v8 = [a5 objectForKeyedSubscript:@"Value"];
    float v9 = *v7;
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, v9, v8, 0, 0);
  }
}

void captureSource_handleAttachedAccessoriesNotification(uint64_t a1, const void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v7 = [a5 objectForKeyedSubscript:0x1EFA6D3C0];
  if ([a3 isEqualToString:0x1EFA71FA0])
  {
    uint64_t v8 = kFigCaptureSourceProperty_WalletAccessoryConnected;
  }
  else
  {
    if (![a3 isEqualToString:0x1EFA71FC0]) {
      return;
    }
    uint64_t v8 = kFigCaptureSourceProperty_BatteryPackAccessoryConnected;
  }
  float v9 = *v8;
  captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, v9, v7, 0, 0);
}

uint64_t FigAudioCaptureSourceCreateWithSourceInfo(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, CFTypeRef *a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (cs_initializeStatics_onceToken != -1) {
    dispatch_once(&cs_initializeStatics_onceToken, &__block_literal_global_93_0);
  }
  FigCaptureSourceGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8)
  {
    FigDebugAssert3();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    long long v10 = a3[1];
    *(_OWORD *)(DerivedStorage + 16) = *a3;
    *(_OWORD *)(DerivedStorage + 32) = v10;
    long long v11 = *(_OWORD *)(DerivedStorage + 32);
    *(_OWORD *)clockOut = *(_OWORD *)(DerivedStorage + 16);
    long long v17 = v11;
    if (FigCaptureAuditTokenIsValid((uint64_t)clockOut))
    {
      long long v12 = *(_OWORD *)(DerivedStorage + 32);
      *(_OWORD *)clockOut = *(_OWORD *)(DerivedStorage + 16);
      long long v17 = v12;
      *(void *)(DerivedStorage + 72) = FigCaptureCopyClientCodeSigningIdentifier(clockOut);
    }
    *(void *)uint64_t DerivedStorage = (int)FigAtomicAdd32();
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x4C8], 8) = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 56) = FigDispatchQueueCreateWithPriority();
    id v13 = (id)[a2 objectForKeyedSubscript:0x1EFA53CC0];
    *(void *)(DerivedStorage + 104) = v13;
    *(_DWORD *)(DerivedStorage + _Block_object_dispose(&STACK[0x4C8], 8) = objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", @"SourceType"), "intValue");
    id v14 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    clockOut[0] = 0;
    if ((FigCaptureAudiomxdSupportEnabled() & 1) == 0)
    {
      CMAudioDeviceClockCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"VirtualAudioDevice_Default", clockOut);
      if (clockOut[0])
      {
        [v14 setObject:clockOut[0] forKeyedSubscript:@"Clock"];
        CFRelease(clockOut[0]);
      }
    }
    [v14 setObject:&unk_1EFB022A0 forKeyedSubscript:0x1EFA6BF00];
    [v14 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"Connected"];
    [v14 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"Streaming"];
    [v14 setObject:&unk_1EFB02378 forKeyedSubscript:@"MediaType"];
    objc_msgSend(v14, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1C978], "array"), @"Formats");
    *(void *)(DerivedStorage + 176) = v14;
    v19[0] = 0x1EFA6CCA0;
    *(void *)(DerivedStorage + 184) = (id)[MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:1];
    *(void *)(DerivedStorage + 64) = 1;
    *(unsigned char *)(DerivedStorage + 13) = 1;
    *a5 = cf;
  }
  return v8;
}

void __FigProprietaryDefaultsCaptureSourceCreateWithSourceInfo_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  v7[0] = @"ProprietaryDefaultKey";
  v7[1] = @"ProprietaryDefaultValue";
  v8[0] = a2;
  v8[1] = a3;
  unsigned int v4 = (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:2];
  float v5 = (const void *)[*(id *)(a1 + 32) retainReferencedObject];
  if (v5)
  {
    float v6 = v5;
    captureSource_postNotificationWithPayload(v5, @"ProprietaryDefaultChanged", v4);
    CFRelease(v6);
  }
}

uint64_t captureSource_deactivateInternal(const void *a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = [MEMORY[0x1E4F1CA48] array];
  if (!*(unsigned char *)(DerivedStorage + 12))
  {
    unsigned int v4 = (void *)result;
    FigSimpleMutexCheckIsLockedOnThisThread();
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
    if (*(unsigned char *)(DerivedStorage + 13)
      && (*(unsigned char *)(DerivedStorage + 13) = 0, (float v5 = *(void **)(DerivedStorage + 80)) != 0))
    {
      unsigned int v37 = a1;
      *(void *)(DerivedStorage + 80) = 0;
      pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      [v5 releaseResources];
      if ([v5 pearlInfraredCaptureStream]) {
        BOOL v36 = (int)[(id)sSystemPressureMonitor systemPressureLevelFromPearlProjector] > 0;
      }
      else {
        BOOL v36 = 0;
      }
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      uint64_t v7 = (void *)[v5 captureStreams];
      uint64_t v8 = [v7 countByEnumeratingWithState:&v43 objects:v54 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v44;
        do
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (*(void *)v44 != v10) {
              objc_enumerationMutation(v7);
            }
            long long v12 = *(void **)(*((void *)&v43 + 1) + 8 * i);
            if ((int)objc_msgSend((id)sSystemPressureMonitor, "systemPressureLevelFromImageSensorWithPortType:", objc_msgSend(v12, "portType")) >= 1)objc_msgSend(v4, "addObject:", objc_msgSend(v12, "portType")); {
          }
            }
          uint64_t v9 = [v7 countByEnumeratingWithState:&v43 objects:v54 count:16];
        }
        while (v9);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      id v13 = v37;
      CMNotificationCenterRemoveListener();
      [v5 drainNotifications];
      if (dword_1EB4C4FD0)
      {
        v42[0] = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        id v13 = v37;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"Focus"), "BOOLValue"))
      {
        uint64_t v15 = NSNumber;
        [v5 lensPosition];
        objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(v15, "numberWithFloat:"), @"LensPosition");
      }
      memset(&v54[128], 0, 24);
      objc_msgSend(v5, "exposureDuration", v34, v35);
      CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime time = *(CMTime *)&v54[128];
      CFDictionaryRef v17 = CMTimeCopyAsDictionary(&time, v16);
      [*(id *)(DerivedStorage + 176) setObject:v17 forKeyedSubscript:@"ExposureDuration"];
      CFRelease(v17);
      BOOL v18 = NSNumber;
      [v5 ISO];
      objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(v18, "numberWithFloat:"), @"ISO");
      int v19 = NSNumber;
      [v5 exposureTargetOffset];
      objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(v19, "numberWithFloat:"), @"ExposureTargetOffset");
      [v5 deviceWhiteBalanceGains];
      time.xpc_object_t value = __PAIR64__(v21, v20);
      time.CMTimeScale timescale = v22;
      uint64_t v23 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:&time length:12];
      [*(id *)(DerivedStorage + 176) setObject:v23 forKeyedSubscript:@"DeviceWhiteBalanceGains"];

      [v5 grayWorldDeviceWhiteBalanceGains];
      v42[0] = v24;
      v42[1] = v25;
      void v42[2] = v26;
      uint64_t v27 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:v42 length:12];
      [*(id *)(DerivedStorage + 176) setObject:v27 forKeyedSubscript:@"GrayWorldDeviceWhiteBalanceGains"];

      if ([v5 smartCameraEnabled])
      {
        uint64_t v28 = MEMORY[0x1E4F1CC28];
        uint64_t v29 = MEMORY[0x1E4F1CC08];
        [*(id *)(DerivedStorage + 176) setObject:MEMORY[0x1E4F1CC08] forKeyedSubscript:@"SceneClassificationConfidences"];
        pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));

        long long v51 = @"NewPropertyValue";
        uint64_t v52 = v28;
        captureSource_postNotificationWithPayload(v13, @"SceneClassificationActive", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v52 forKeys:&v51 count:1]);
        long long v49 = @"NewPropertyValue";
        uint64_t v50 = v29;
        captureSource_postNotificationWithPayload(v13, @"SceneClassificationConfidences", (const void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v50 forKeys:&v49 count:1]);
      }
      else
      {
        pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      }
      captureSource_postNotificationWithPayload(v13, @"SourceDeactivated", 0);
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"Focus"), "BOOLValue"))captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v13, @"AdjustingFocus", MEMORY[0x1E4F1CC28], 0, 0); {
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"Exposure"), "BOOLValue"))captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v13, @"AdjustingExposure", MEMORY[0x1E4F1CC28], 0, 0);
      }
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"WhiteBalance"), "BOOLValue"))captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v13, @"AdjustingWhiteBalance", MEMORY[0x1E4F1CC28], 0, 0); {
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"Flash"), "BOOLValue"))captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v13, @"FlashActive", MEMORY[0x1E4F1CC28], 0, 0);
      }
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", @"SIS"), "BOOLValue"))captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v13, @"IsStillImageStabilizationScene", MEMORY[0x1E4F1CC28], 0, 0); {
      if ([*(id *)(DerivedStorage + 104) objectForKeyedSubscript:@"Option25"])
      }
      {
        CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*MEMORY[0x1E4F1DB20]);
        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v13, @"Option25Changed", (uint64_t)DictionaryRepresentation, 0, 0);

        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v13, @"Option25Changed2", MEMORY[0x1E4F1CC28], 0, 0);
      }
      if (v36) {
        [(id)sSystemPressureMonitor startMonitoringPearlProjectorTemperatureUntilNominal];
      }
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      uint64_t result = [v4 countByEnumeratingWithState:&v38 objects:v48 count:16];
      if (result)
      {
        uint64_t v31 = result;
        uint64_t v32 = *(void *)v39;
        do
        {
          uint64_t v33 = 0;
          do
          {
            if (*(void *)v39 != v32) {
              objc_enumerationMutation(v4);
            }
            [(id)sSystemPressureMonitor startMonitoringImageSensorTemperatureUntilNominalWithPortType:*(void *)(*((void *)&v38 + 1) + 8 * v33++)];
          }
          while (v31 != v33);
          uint64_t result = [v4 countByEnumeratingWithState:&v38 objects:v48 count:16];
          uint64_t v31 = result;
        }
        while (result);
      }
    }
    else
    {
      float v6 = *(pthread_mutex_t **)(DerivedStorage + 48);
      return pthread_mutex_unlock(v6);
    }
  }
  return result;
}

uint64_t cs_resetTimeOfFlightAutoFocus(void *a1)
{
  if (!a1) {
    return 4294954516;
  }
  FigSimpleMutexCheckIsLockedOnThisThread();
  uint64_t result = [a1 setPropertyIfSupported:*MEMORY[0x1E4F52DA0] value:MEMORY[0x1E4F1CC28]];
  if (!result)
  {
    sTimeOfFlightAFEnableCGFloat d = 0;
    sTimeOfFlightAFSuspendeCGFloat d = 1;
    if ([0 streaming]) {
      [0 stop];
    }
    if (dword_1EB4C4FD0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return result;
}

uint64_t cs_updateStructuredLightAFTargetStreamResources()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  FigSimpleMutexCheckIsLockedOnThisThread();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v0 = (void *)sActiveVideoCaptureSources;
  uint64_t result = [(id)sActiveVideoCaptureSources countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)v10;
    while (2)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v10 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void *)(*((void *)&v9 + 1) + 8 * v4);
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          uint64_t v7 = DerivedStorage;
          if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", 0x1EFA6B2C0), "BOOLValue"))
          {
            sStructuredLightAFTargetStreamSource = v5;
            id v8 = (id)objc_msgSend((id)objc_msgSend(*(id *)(v7 + 80), "captureStream"), "stream");
            sStructuredLightAFTargetStreauint64_t m = (uint64_t)v8;
            sStructuredLightAFTargetStreamStreaming = 0;
            FigSimpleMutexCheckIsLockedOnThisThread();
            [v8 registerForNotification:@"StreamStarted" listener:v8 callback:cs_structuredLightAFAssistHandleStructuredLightAFTargetStreamStartedNotification];
            return [v8 registerForNotification:@"StreamStopped" listener:v8 callback:cs_structuredLightAFAssistHandleStructuredLightAFTargetStreamStoppedNotification];
          }
        }
        ++v4;
      }
      while (v2 != v4);
      uint64_t result = [v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      uint64_t v2 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

void FigVideoCaptureSourcesDeactivateWithDevices(CFArrayRef theArray, const __CFArray *a2, char a3)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (a2)
    {
LABEL_3:
      CFIndex v6 = CFArrayGetCount(a2);
      goto LABEL_6;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  CFIndex v6 = 0;
LABEL_6:
  id v12 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:Count];
  if (Count != v6) {
    FigDebugAssert3();
  }
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(theArray, i);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(DerivedStorage + 8) == 1)
      {
        uint64_t v10 = DerivedStorage;
        if (sTimeOfFlightAFEnabled && (a3 & 1) == 0)
        {
          sTimeOfFlightAFEnableCGFloat d = 0;
          sTimeOfFlightAFSuspendeCGFloat d = 1;
          cs_updateTimeOfFlightAFEnabledStatus();
        }
        if (sStructuredLightAFEnabled)
        {
          sStructuredLightAFEnableCGFloat d = 0;
          sStructuredLightAFSuspendeCGFloat d = 1;
          sStructuredLightAFTargetStreamStreaming = 0;
          cs_updateStructuredLightAFEnabledStatus();
        }
        long long v11 = (void *)sStructuredLightAFTargetStream;
        if (sStructuredLightAFTargetStream)
        {
          FigSimpleMutexCheckIsLockedOnThisThread();
          [v11 unregisterForNotification:@"StreamStarted" listener:v11];
          [v11 unregisterForNotification:@"StreamStopped" listener:v11];

          sStructuredLightAFTargetStreauint64_t m = 0;
          sStructuredLightAFTargetStreamSource = 0;
        }
        if (!*(unsigned char *)(v10 + 12) && CFArrayGetValueAtIndex(a2, i) == *(const void **)(v10 + 80))
        {
          if ([(id)sActiveVideoCaptureSources containsObject:ValueAtIndex])
          {
            [v12 addObject:ValueAtIndex];
            [(id)sActiveVideoCaptureSources removeObject:ValueAtIndex];
          }
          captureSource_deactivateInternal(ValueAtIndex);
        }
      }
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
}

void cs_updateStructuredLightAFEnabledStatus()
{
  v18[3] = *MEMORY[0x1E4F143B8];
  FigSimpleMutexCheckIsLockedOnThisThread();
  BOOL v1 = 0;
  int v16 = 0;
  if (sStructuredLightAFTargetStreamStreaming == 1 && sStructuredLightAFEnabled != 0) {
    BOOL v1 = sStructuredLightAFSuspended == 0;
  }
  char v3 = [(id)sStructuredLightAFAssistStream streaming];
  id v4 = cs_copyActiveCaptureDevice();
  id v5 = +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor];
  CFIndex v6 = v5;
  if (v1)
  {
    if ((v3 & 1) == 0)
    {
      uint64_t v7 = (void *)sStructuredLightAFAssistStream;
      if (!sStructuredLightAFAssistStream)
      {
        sStructuredLightAFAssistStreauint64_t m = [v5 copyStreamFromDevice:v4 position:2 deviceType:5 deviceClientPriority:1 allowsStreamControlLoss:1 error:&v16];
        int v8 = v16;
        if (v16 == -12681)
        {
          LODWORD(v18[0]) = 0;
          FigSimpleMutexCheckIsLockedOnThisThread();
          sStructuredLightAFAssistStreamControlledByAnotherClient = [v6 copyStreamWithoutControlFromDevice:v4 position:2 deviceType:5 error:v18];
          if (sStructuredLightAFAssistStreamControlledByAnotherClient) {
            cs_structuredLightAFAssistRegisterForAssistStreamNotifications();
          }
          int v8 = v16;
        }
        if (v8)
        {
          FigDebugAssert3();
          goto LABEL_23;
        }
        cs_structuredLightAFAssistRegisterForAssistStreamNotifications();
        uint64_t v7 = (void *)sStructuredLightAFAssistStream;
      }
      uint64_t v9 = *MEMORY[0x1E4F53A38];
      v17[0] = *MEMORY[0x1E4F53A30];
      v17[1] = v9;
      v18[0] = &unk_1EFB022A0;
      v18[1] = &unk_1EFB022E8;
      void v17[2] = *MEMORY[0x1E4F53A40];
      void v18[2] = &unk_1EFB02318;
      uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:3];
      int v11 = [v7 setProperty:*MEMORY[0x1E4F549C8] value:v10];
      if (v11)
      {
        uint64_t v15 = v0;
        LODWORD(v14) = v11;
        FigDebugAssert3();
      }
      else
      {
        [v7 setPropertyIfSupported:*MEMORY[0x1E4F54BF0] value:MEMORY[0x1E4F1CC38]];
      }
      objc_msgSend((id)sStructuredLightAFAssistStream, "start", v14, v15);
    }
  }
  else if (sStructuredLightAFAssistStream | sStructuredLightAFAssistStreamControlledByAnotherClient)
  {
    if (sStructuredLightAFAssistStream) {
      uint64_t v12 = sStructuredLightAFAssistStream;
    }
    else {
      uint64_t v12 = sStructuredLightAFAssistStreamControlledByAnotherClient;
    }
    [(id)sStructuredLightAFAssistStream stop];
    FigSimpleMutexCheckIsLockedOnThisThread();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    FigSimpleMutexCheckIsLockedOnThisThread();
    id v13 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v12, 0);
    [v6 takeBackStreams:v13 device:v4 totalStreamingDuration:0];

    sStructuredLightAFAssistStreauint64_t m = 0;
    sStructuredLightAFAssistStreamControlledByAnotherClient = 0;
  }
LABEL_23:
}

uint64_t FigVideoCaptureSourcesEnableTimeOfFlightAFIfSupported()
{
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  cs_updateTimeOfFlightAFEnabledStatus();
  uint64_t v0 = (pthread_mutex_t *)sActiveVideoCaptureSourceLock;
  return pthread_mutex_unlock(v0);
}

uint64_t FigVideoCaptureSourcesNeedDeferredTimeOfFlightAFEnablement()
{
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  [(id)sActiveVideoCaptureSources firstObject];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (sTimeOfFlightAFEnabled ? (BOOL v1 = sTimeOfFlightAFSuspended == 0) : (BOOL v1 = 0), v1)) {
    uint64_t v2 = [*(id *)(DerivedStorage + 80) timeOfFlightAFEnabled] ^ 1;
  }
  else {
    uint64_t v2 = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  return v2;
}

void *FigCaptureSourceShowSystemUserInterface(int a1, const void *a2, const void *a3)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  if (FigCFEqual())
  {
    v30[0] = 0x1EFA55AE0;
    v30[1] = 0x1EFA55940;
    long long v30[2] = @"com.apple.VideoConference.AVConferenceTestRunneriOS";
    v30[3] = @"com.apple.AVConferenceTestRunnertvOS";
    id v5 = (void *)MEMORY[0x1E4F1C978];
    CFIndex v6 = (const void **)v30;
    uint64_t v7 = 4;
  }
  else
  {
    uint64_t v29 = a2;
    id v5 = (void *)MEMORY[0x1E4F1C978];
    CFIndex v6 = &v29;
    uint64_t v7 = 1;
  }
  int v8 = (void *)[v5 arrayWithObjects:v6 count:v7];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t result = (void *)[v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (!result) {
    return result;
  }
  uint64_t v10 = result;
  uint64_t v11 = *(void *)v25;
  uint64_t v12 = *MEMORY[0x1E4F62718];
  while (2)
  {
    id v13 = 0;
    do
    {
      if (*(void *)v25 != v11) {
        objc_enumerationMutation(v8);
      }
      uint64_t v14 = *(void *)(*((void *)&v24 + 1) + 8 * (void)v13);
      uint64_t v23 = 0;
      uint64_t result = objc_msgSend(MEMORY[0x1E4F963E8], "handleForPredicate:error:", objc_msgSend(MEMORY[0x1E4F96430], "predicateMatchingBundleIdentifier:", v14), &v23);
      if (v23) {
        return result;
      }
      uint64_t v15 = (void *)[result currentState];
      if ([v15 taskState] == 4
        && objc_msgSend((id)objc_msgSend(v15, "endowmentNamespaces"), "containsObject:", v12))
      {
        if (a1 == 1)
        {
          int v16 = @"com.apple.replaykit.VideoConferenceControlCenterModule";
        }
        else
        {
          if (a1 != 2) {
            return (void *)FigDebugAssert3();
          }
          int v16 = @"com.apple.replaykit.AudioConferenceControlCenterModule";
        }
        getCCSControlCenterServiceClass();
        if (objc_opt_class())
        {
          getCCSModulePresentationOptionsClass();
          if (objc_opt_class())
          {
            pthread_mutex_lock((pthread_mutex_t *)sShowSystemUserInterfaceLock);
            CFDictionaryRef v17 = dispatch_semaphore_create(0);
            cs_updateShowSystemUserInterfaceDefaults(a2, a3);
            v22[0] = MEMORY[0x1E4F143A8];
            v22[1] = 3221225472;
            v22[2] = __FigCaptureSourceShowSystemUserInterface_block_invoke;
            v22[3] = &unk_1E5C24430;
            CGPoint v22[4] = v17;
            BOOL v18 = (void *)[(id)getCCSControlCenterServiceClass() sharedInstance];
            v21[0] = MEMORY[0x1E4F143A8];
            v21[1] = 3221225472;
            long long v21[2] = __FigCaptureSourceShowSystemUserInterface_block_invoke_2;
            v21[3] = &unk_1E5C2D530;
            void v21[4] = v22;
            v21[5] = v16;
            [v18 setVisibility:1 forModuleWithIdentifier:v16 completionHandler:v21];
            dispatch_time_t v19 = dispatch_time(0, 5000000000);
            dispatch_semaphore_wait(v17, v19);
            dispatch_release(v17);
            return (void *)pthread_mutex_unlock((pthread_mutex_t *)sShowSystemUserInterfaceLock);
          }
        }
        return (void *)FigDebugAssert3();
      }
      id v13 = (char *)v13 + 1;
    }
    while (v10 != v13);
    uint64_t result = (void *)[v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
    uint64_t v10 = result;
    if (result) {
      continue;
    }
    break;
  }
  return result;
}

uint64_t getCCSControlCenterServiceClass()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x3052000000;
  CFIndex v6 = __Block_byref_object_copy__40;
  uint64_t v7 = __Block_byref_object_dispose__40;
  uint64_t v0 = getCCSControlCenterServiceClass_softClass;
  uint64_t v8 = getCCSControlCenterServiceClass_softClass;
  if (!getCCSControlCenterServiceClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getCCSControlCenterServiceClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getCCSControlCenterServiceClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5D5067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getCCSModulePresentationOptionsClass()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x3052000000;
  CFIndex v6 = __Block_byref_object_copy__40;
  uint64_t v7 = __Block_byref_object_dispose__40;
  uint64_t v0 = getCCSModulePresentationOptionsClass_softClass;
  uint64_t v8 = getCCSModulePresentationOptionsClass_softClass;
  if (!getCCSModulePresentationOptionsClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    void v2[2] = __getCCSModulePresentationOptionsClass_block_invoke;
    v2[3] = &unk_1E5C24978;
    v2[4] = &v3;
    __getCCSModulePresentationOptionsClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A5D5076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cs_updateShowSystemUserInterfaceDefaults(const void *a1, const void *a2)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPreferencesSetValue(@"show-system-ui-bundle-id", a1, @"com.apple.cameracapture.volatile", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  CFPreferencesSetValue(@"show-system-ui-app-name", a2, @"com.apple.cameracapture.volatile", v4, v5);
  return CFPreferencesSynchronize(@"com.apple.cameracapture.volatile", v4, v5);
}

intptr_t __FigCaptureSourceShowSystemUserInterface_block_invoke(uint64_t a1)
{
  cs_updateShowSystemUserInterfaceDefaults(0, 0);
  uint64_t v2 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v2);
}

uint64_t __FigCaptureSourceShowSystemUserInterface_block_invoke_2(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)[(id)getCCSControlCenterServiceClass() sharedInstance];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = [(id)getCCSModulePresentationOptionsClass() defaultOptions];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __FigCaptureSourceShowSystemUserInterface_block_invoke_3;
    void v8[3] = &unk_1E5C2D508;
    v8[4] = *(void *)(a1 + 32);
    return [v3 presentModuleWithIdentifier:v4 options:v5 completionHandler:v8];
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v7();
  }
}

uint64_t __FigCaptureSourceShowSystemUserInterface_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t FigVideoCaptureSourceGetUnderlyingFastSwitchingFormatsForFormatAndPortType(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v16 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x3052000000;
  id v13 = __Block_byref_object_copy__40;
  uint64_t v14 = __Block_byref_object_dispose__40;
  uint64_t v15 = 0;
  uint64_t v4 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(a1, a2, &v16);
  uint64_t v5 = (const void *)v4;
  int v6 = v16;
  if (v16)
  {
    FigDebugAssert3();
    if (v5) {
LABEL_5:
    }
      CFRelease(v5);
  }
  else
  {
    if (v4)
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      void v9[2] = __FigVideoCaptureSourceGetUnderlyingFastSwitchingFormatsForFormatAndPortType_block_invoke;
      void v9[3] = &unk_1E5C2D580;
      void v9[4] = &v10;
      int v6 = captureSource_safelyAccessStorage(v4, (uint64_t)v9);
      if (v6) {
        FigDebugAssert3();
      }
      goto LABEL_5;
    }
    FigDebugAssert3();
    int v6 = 0;
  }
  if (a3) {
    *a3 = v6;
  }
  uint64_t v7 = v11[5];
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1A5D50B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __FigVideoCaptureSourceGetUnderlyingFastSwitchingFormatsForFormatAndPortType_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v3 = *(void **)(a2 + 96);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ([v8 isFastSwitchingConfigurationRequired])
        {
          uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
          if (!v9)
          {
            *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [MEMORY[0x1E4F1CA48] array];
            uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
          }
          [v9 addObject:v8];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }
  return 0;
}

void FigCaptureSourceGetClientAuditToken(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  id v9 = 0;
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  *a2 = v4;
  a2[1] = v4;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, void, id *))(v6 + 48);
  if (v7)
  {
    if (v7(a1, 0x1EFA568E0, *MEMORY[0x1E4F1CF80], &v9)) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v9 == 0;
    }
    if (!v8)
    {
      [v9 getBytes:a2 length:32];
    }
  }
}

uint64_t FigCaptureSourceDetachFromClient(uint64_t a1, long long *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C4FD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
  uint64_t v5 = (long long *)(DerivedStorage + 16);
  long long v6 = a2[1];
  long long v14 = *a2;
  long long v15 = v6;
  long long v7 = *(_OWORD *)(DerivedStorage + 32);
  v13[0] = *(_OWORD *)(DerivedStorage + 16);
  v13[1] = v7;
  if (FigCaptureAuditTokensAreEqual(&v14, v13))
  {
    *(void *)&long long v8 = -1;
    *((void *)&v8 + 1) = -1;
    *uint64_t v5 = v8;
    *(_OWORD *)(DerivedStorage + 32) = v8;
    id v9 = *(void **)(DerivedStorage + 80);
    long long v10 = *(_OWORD *)(DerivedStorage + 32);
    long long v14 = *v5;
    long long v15 = v10;
    [v9 updateClientAuditToken:&v14];
  }
  else if (dword_1EB4C4FD0)
  {
    long long v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
  return 0;
}

CFArrayRef FigCaptureSourceCopySources(int a1)
{
  if (FigCaptureCurrentProcessIsCameracaptured()
    || FigCaptureCurrentProcessIsMediaserverd())
  {
    long long v5 = 0u;
    long long v6 = 0u;
    FigCaptureGetCurrentProcessAuditToken(&v5);
    v4[0] = v5;
    v4[1] = v6;
    return FigCaptureSourceCopySourcesForClientAuditToken(a1, v4, 0, 1);
  }
  else
  {
    uint64_t v3 = (objc_class *)MEMORY[0x1E4F1C978];
    return (const __CFArray *)objc_alloc_init(v3);
  }
}

void __cs_initializeStatics_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigCaptureInitializeSingletons();
  sActiveVideoCaptureSources = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  sActiveVideoCaptureSourceLocuint64_t k = FigSimpleMutexCreate();
  sAllVideoCaptureSourcesLocuint64_t k = FigSimpleMutexCreate();
  sAllProprietaryDefaultsCaptureSources = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  sAllProprietaryDefaultsCaptureSourcesLocuint64_t k = FigSimpleMutexCreate();
  sShowSystemUserInterfaceLocuint64_t k = FigSimpleMutexCreate();
  sAllVideoCaptureSources = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  sNewCaptureSourceTokeuint64_t n = FigGetUpTimeNanoseconds() / 0xF4240uLL;
  if (cs_initializeCameraHistoryTemporaryItems_onceToken != -1)
  {
    dispatch_once(&cs_initializeCameraHistoryTemporaryItems_onceToken, &__block_literal_global_103_0);
  }
}

id __cs_initializeCameraHistoryTemporaryItems_block_invoke()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  sServerUserDefaults = (uint64_t)(id)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v0 = (void *)[(id)sServerUserDefaults objectForKey:@"boot-time"];
  uint64_t v1 = mach_continuous_time();
  mach_timebase_info info = 0;
  if (mach_timebase_info(&info) || info.numer == 1 && info.denom == 1) {
    double v2 = (double)v1;
  }
  else {
    double v2 = (double)info.numer / (double)info.denom * (double)v1;
  }
  double v3 = v2 / -1000000000.0;
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  double v5 = v4 + v3;
  if (dword_1EB4C4FD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  objc_msgSend(v0, "doubleValue", v15, v18);
  if (vabdd_f64(v5, v7) <= 1.0)
  {
    if (dword_1EB4C4FD0)
    {
      long long v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    objc_msgSend((id)sServerUserDefaults, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithDouble:", v5), @"boot-time");
    [(id)sServerUserDefaults setObject:0 forKey:@"tmp"];
  }
  id v9 = objc_msgSend((id)sServerUserDefaults, "objectForKey:", @"tmp", v16, v19);
  if ([v9 count])
  {
    sTemporaryCameraHistoryItems = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v9];
    if (dword_1EB4C4FD0)
    {
      long long v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    sTemporaryCameraHistoryItems = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  sTemporaryCameraHistoryItemsLocuint64_t k = FigReentrantMutexCreate();
  long long v11 = (void *)[(id)sTemporaryCameraHistoryItems objectForKeyedSubscript:@"camera-history-downplay-override-list"];
  if ([v11 count]) {
    id v12 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithArray:v11];
  }
  else {
    id v12 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  sCameraHistoryDownplayOverrideList = (uint64_t)v12;
  long long v13 = objc_msgSend((id)sTemporaryCameraHistoryItems, "objectForKeyedSubscript:", @"camera-histories-updated-with-overriding-camera", v17, v20);
  if ([v13 count]) {
    id result = (id)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v13];
  }
  else {
    id result = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  sCameraHistoriesUpdatedWithOverridingCamerCGFloat a = (uint64_t)result;
  return result;
}

uint64_t __cs_handleThermalPressureOrPowerChange_block_invoke(uint64_t a1, uint64_t a2)
{
  return 0;
}

id __cs_metadataIdentifierKeyForObjectsDetectionConfigurationKey_block_invoke()
{
  v14[9] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F55988];
  uint64_t v1 = *MEMORY[0x1E4F54488];
  v13[0] = *MEMORY[0x1E4F544A8];
  v13[1] = v1;
  uint64_t v2 = *MEMORY[0x1E4F1F140];
  v14[0] = v0;
  v14[1] = v2;
  uint64_t v3 = *MEMORY[0x1E4F55978];
  uint64_t v4 = *MEMORY[0x1E4F544A0];
  _OWORD v13[2] = *MEMORY[0x1E4F54498];
  void v13[3] = v4;
  uint64_t v5 = *MEMORY[0x1E4F55980];
  void v14[2] = v3;
  void v14[3] = v5;
  uint64_t v6 = *MEMORY[0x1E4F1F130];
  uint64_t v7 = *MEMORY[0x1E4F54480];
  float32x4_t v13[4] = *MEMORY[0x1E4F54478];
  void v13[5] = v7;
  uint64_t v8 = *MEMORY[0x1E4F55970];
  v14[4] = v6;
  void v14[5] = v8;
  uint64_t v9 = *MEMORY[0x1E4F1F128];
  uint64_t v10 = *MEMORY[0x1E4F54470];
  void v13[6] = *MEMORY[0x1E4F54468];
  v13[7] = v10;
  uint64_t v11 = *MEMORY[0x1E4F55968];
  void v14[6] = v9;
  void v14[7] = v11;
  float v13[8] = *MEMORY[0x1E4F544B0];
  v14[8] = *MEMORY[0x1E4F1F148];
  id result = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:9];
  cs_metadataIdentifierKeyForObjectsDetectionConfigurationKey_sMetadataKeysByConfigurationKeysDict = (uint64_t)result;
  return result;
}

void captureSource_updateCachedZoomFactorPropertyAndNotify(const void *a1, const void *a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  long long v4[2] = __captureSource_updateCachedZoomFactorPropertyAndNotify_block_invoke;
  v4[3] = &unk_1E5C2D640;
  v4[4] = a2;
  captureSource_safelyAccessStorage((uint64_t)a1, (uint64_t)v4);
  captureSource_postNotificationWithPayload(a1, @"VideoZoomRampUpdate", a2);
}

uint64_t __captureSource_updateCachedZoomFactorPropertyAndNotify_block_invoke(uint64_t a1, uint64_t a2)
{
  return 0;
}

void captureSource_handleFlashlightNotification(uint64_t a1, const void *a2, void *a3, uint64_t a4, void *a5)
{
  if ([a3 isEqualToString:@"FlashlightLevel"])
  {
    uint64_t v8 = (void *)[a5 objectForKeyedSubscript:@"FlashlightValue"];
    uint64_t v9 = NSNumber;
    [v8 floatValue];
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, @"TorchActive", [v9 numberWithInt:v10 > 0.0], 0, 0);
    uint64_t v11 = @"TorchLevel";
    id v12 = a2;
    uint64_t v13 = (uint64_t)v8;
    char v14 = 1;
  }
  else
  {
    if (![a3 isEqualToString:@"FlashlightOverheated"]) {
      return;
    }
    uint64_t v13 = [a5 objectForKeyedSubscript:@"FlashlightValue"];
    uint64_t v11 = @"TorchOverheated";
    id v12 = a2;
    char v14 = 0;
  }
  captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v12, v11, v13, v14, 0);
}

void captureSource_handleThirdPartyTorchLevelCommand(const void *a1, float a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (a2 == 0.0)
  {
    captureSource_turnOffAndTeardownFigFlashlight(a1);
    return;
  }
  if (!*(void *)(DerivedStorage + 216))
  {
    long long v5 = *(_OWORD *)(DerivedStorage + 32);
    long long v21 = *(_OWORD *)(DerivedStorage + 16);
    long long v22 = v5;
    v19[0] = 0;
    v19[1] = v19;
    void v19[2] = 0x2020000000;
    char v20 = 1;
    uint64_t v6 = [FigCaptureClientApplicationStateMonitor alloc];
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __captureSource_handleThirdPartyTorchLevelCommand_block_invoke;
    v18[3] = &unk_1E5C2D668;
    void v18[4] = v19;
    void v18[5] = DerivedStorage;
    v18[6] = a1;
    v17[0] = v21;
    v17[1] = v22;
    *(void *)(DerivedStorage + 216) = [(FigCaptureClientApplicationStateMonitor *)v6 initWithClientAuditToken:v17 mediaEnvironment:0 forThirdPartyTorch:1 applicationAndLayoutStateHandler:v18];
    _Block_object_dispose(v19, 8);
  }
  if (*(_DWORD *)(DerivedStorage + 224) == 1)
  {
    FigDebugAssert3();
    return;
  }
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = v7;
  uint64_t v9 = (CFTypeRef *)(v7 + 208);
  if (!*(void *)(v7 + 208))
  {
    long long v10 = *(_OWORD *)(v7 + 32);
    long long v21 = *(_OWORD *)(v7 + 16);
    long long v22 = v10;
    PIDFromAuditTokeuint64_t n = FigCaptureGetPIDFromAuditToken(&v21);
    CFStringRef v12 = (const __CFString *)[*(id *)(v8 + 216) applicationID];
    if (FigFlashlightCreate(*MEMORY[0x1E4F1CF80], 0, PIDFromAuditToken, v12, v9)
      || (CMNotificationCenterGetDefaultLocalCenter(), CMNotificationCenterAddListener())
      || (CMNotificationCenterGetDefaultLocalCenter(), CMNotificationCenterAddListener()))
    {
      FigDebugAssert3();
LABEL_19:
      FigDebugAssert3();
      return;
    }
  }
  uint64_t v13 = *(void *)(DerivedStorage + 208);
  if (v13 && (uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16)) != 0) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(unsigned int (**)(uint64_t, float))(v15 + 40);
  if (!v16 || v16(v13, a2)) {
    goto LABEL_19;
  }
}

void sub_1A5D52004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __captureSource_setPropertyInternal_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  *(unsigned char *)(v2 + 230) = 0;
  if (*(int *)(v2 + 200) <= 0) {
    uint64_t v3 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  else {
    uint64_t v3 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  }
  captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v1, @"AdjustingFocus", *v3, 0, 0);
}

void __captureSource_handleThirdPartyTorchLevelCommand_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(a1 + 40) + 48));
  }
  *(_DWORD *)(*(void *)(a1 + 40) + 224) = a3;
  if (a3 == 1) {
    captureSource_turnOffAndTeardownFigFlashlight(*(const void **)(a1 + 48));
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  if (!*(unsigned char *)(v5 + 24))
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(*(void *)(a1 + 40) + 48));
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(unsigned char *)(v5 + 24) = 0;
}

uint64_t cs_structuredLightAFAssistHandleStructuredLightAFTargetStreamStartedNotification(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  if (sStructuredLightAFTargetStream == a2)
  {
    if ((sStructuredLightAFTargetStreamStreaming & 1) == 0)
    {
      sStructuredLightAFTargetStreamStreaming = 1;
      cs_updateStructuredLightAFEnabledStatus();
    }
  }
  else
  {
    FigDebugAssert3();
  }
  uint64_t v3 = (pthread_mutex_t *)sActiveVideoCaptureSourceLock;
  return pthread_mutex_unlock(v3);
}

uint64_t cs_structuredLightAFAssistHandleStructuredLightAFTargetStreamStoppedNotification(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  if (sStructuredLightAFTargetStream == a2)
  {
    if (sStructuredLightAFTargetStreamStreaming == 1)
    {
      sStructuredLightAFEnableCGFloat d = 0;
      sStructuredLightAFTargetStreamStreaming = 0;
      cs_updateStructuredLightAFEnabledStatus();
    }
  }
  else
  {
    FigDebugAssert3();
  }
  uint64_t v3 = (pthread_mutex_t *)sActiveVideoCaptureSourceLock;
  return pthread_mutex_unlock(v3);
}

uint64_t cs_structuredLightAFAssistRegisterForAssistStreamNotifications()
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterAddListener();
}

uint64_t cs_structuredLightAFAssistHandleStructuredLightAFAssistStreamControlTakenByAnotherClientNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  if (sStructuredLightAFTargetStreamSource == a2 && sStructuredLightAFAssistStream == a4)
  {
    if (!sStructuredLightAFAssistStreamControlledByAnotherClient)
    {
      sStructuredLightAFAssistStreamControlledByAnotherClient = a4;
      sStructuredLightAFAssistStreauint64_t m = 0;
    }
  }
  else
  {
    FigDebugAssert3();
  }
  uint64_t v6 = (pthread_mutex_t *)sActiveVideoCaptureSourceLock;
  return pthread_mutex_unlock(v6);
}

uint64_t cs_structuredLightAFAssistHandleStructuredLightAFAssistStreamControlRelinquishedByAnotherClientNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  if (sStructuredLightAFTargetStreamSource == a2 && sStructuredLightAFAssistStreamControlledByAnotherClient == a4 && a4)
  {
    id v6 = cs_copyActiveCaptureDevice();
    id v7 = +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor];
    v9[0] = sStructuredLightAFAssistStreamControlledByAnotherClient;
    LODWORD(v7) = objc_msgSend(v7, "requestControlOfStreams:device:deviceClientPriority:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v9, 1), v6, 1);

    if (!v7)
    {
      sStructuredLightAFAssistStreauint64_t m = sStructuredLightAFAssistStreamControlledByAnotherClient;
      sStructuredLightAFAssistStreamControlledByAnotherClient = 0;
      cs_updateStructuredLightAFEnabledStatus();
    }
  }
  else
  {
    FigDebugAssert3();
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
}

Class __getCCSControlCenterServiceClass_block_invoke(uint64_t a1)
{
  ControlCenterServicesLibrary();
  Class result = objc_getClass("CCSControlCenterService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getCCSControlCenterServiceClass_block_invoke_cold_1();
  }
  getCCSControlCenterServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void ControlCenterServicesLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!ControlCenterServicesLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __ControlCenterServicesLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E5C2D6A8;
    uint64_t v2 = 0;
    ControlCenterServicesLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  if (!ControlCenterServicesLibraryCore_frameworkLibrary) {
    ControlCenterServicesLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __ControlCenterServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ControlCenterServicesLibraryCore_frameworkLibrardouble y = result;
  return result;
}

Class __getCCSModulePresentationOptionsClass_block_invoke(uint64_t a1)
{
  ControlCenterServicesLibrary();
  Class result = objc_getClass("CCSModulePresentationOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getCCSModulePresentationOptionsClass_block_invoke_cold_1();
  }
  getCCSModulePresentationOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t captureSource_Invalidate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 12)) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  CFTypeRef v5 = 0;
  int v6 = *(_DWORD *)(DerivedStorage + 8);
  if (v6 == 5)
  {
    id v7 = &sAllProprietaryDefaultsCaptureSources;
    uint64_t v8 = &sAllProprietaryDefaultsCaptureSourcesLock;
LABEL_16:
    pthread_mutex_lock((pthread_mutex_t *)*v8);
    [(id)*v7 removeObject:a1];
    uint64_t DerivedStorage = pthread_mutex_unlock((pthread_mutex_t *)*v8);
    goto LABEL_17;
  }
  if (v6 == 1)
  {
    pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
    if (sTimeOfFlightAFEnabled
      && [*(id *)(v4 + 80) device]
      && !cs_resetTimeOfFlightAutoFocus((void *)[*(id *)(v4 + 80) device]))
    {
      [*(id *)(v4 + 80) setTimeOfFlightAFEnabled:0];
    }
    if ([(id)sActiveVideoCaptureSources containsObject:a1])
    {
      if (a1) {
        CFTypeRef v5 = CFRetain(a1);
      }
      else {
        CFTypeRef v5 = 0;
      }
      captureSource_deactivateInternal(a1);
      [(id)sActiveVideoCaptureSources removeObject:a1];
    }
    else
    {
      CFTypeRef v5 = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
    id v7 = &sAllVideoCaptureSources;
    uint64_t v8 = &sAllVideoCaptureSourcesLock;
    goto LABEL_16;
  }
LABEL_17:
  *(unsigned char *)(v4 + 12) = 1;
  FigCaptureDeviceGetNotificationCenter(DerivedStorage, v3);
  uint64_t v9 = FigNotificationCenterRemoveWeakListener();
  FigCaptureDeviceGetNotificationCenter(v9, v10);
  uint64_t v11 = FigNotificationCenterRemoveWeakListener();
  FigCaptureDeviceGetNotificationCenter(v11, v12);
  uint64_t v13 = FigNotificationCenterRemoveWeakListener();
  FigCaptureDeviceGetNotificationCenter(v13, v14);
  uint64_t v15 = FigNotificationCenterRemoveWeakListener();
  FigCaptureDeviceGetNotificationCenter(v15, v16);
  uint64_t v17 = FigNotificationCenterRemoveWeakListener();
  FigCaptureDeviceGetNotificationCenter(v17, v18);
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();

  *(void *)(v4 + 232) = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 48));
  uint64_t v19 = *(const void **)(v4 + 72);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(v4 + 72) = 0;
  }

  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;

  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;

  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 12_Block_object_dispose(&STACK[0x4C8], 8) = 0;

  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 152) = 0;

  *(void *)(v4 + 144) = 0;
  *(void *)(v4 + 184) = 0;

  *(void *)(v4 + 192) = 0;
  captureSource_turnOffAndTeardownFigFlashlight(a1);
  char v20 = *(void **)(v4 + 216);
  *(void *)(v4 + 216) = 0;
  pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 48));
  if (v5) {
    CFRelease(v5);
  }
  [v20 invalidate];

  return 0;
}

void captureSource_Finalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB4C4FD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  captureSource_Invalidate(a1);
  if (*(void *)(DerivedStorage + 48))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 4_Block_object_dispose(&STACK[0x4C8], 8) = 0;
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 56);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 56) = 0;
  }
}

uint64_t captureSource_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  id v3 = [NSString alloc];
  CFIndex v4 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 12)) {
    CFTypeRef v5 = " (invalidated)";
  }
  else {
    CFTypeRef v5 = "";
  }
  CFAllocatorRef v6 = CFGetAllocator(a1);
  uint64_t v7 = BWPhotoEncoderStringFromEncodingScheme(*(unsigned int *)(DerivedStorage + 8));
  return [v3 initWithFormat:@"<FigCaptureSource %p> retainCount: %ld%s, allocator: %p, type: %@, position: %@, active = %d, token = %lld, prewarmEnableCGFloat d = %d", a1, v4, v5, v6, v7, BWPhotoEncoderStringFromEncodingScheme(*(unsigned int *)(DerivedStorage + 88)), *(unsigned __int8 *)(DerivedStorage + 13), *(void *)DerivedStorage, *(unsigned __int8 *)(DerivedStorage + 240)];
}

uint64_t captureSource_UnregisterNotificationForProprietaryDefaultChanges(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 12))
  {
    if (a2)
    {
      [*(id *)(DerivedStorage + 232) stopObservingChangesForKey:a2];
      return 0;
    }
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t captureSource_UpdateCameraOverrideHistory(uint64_t a1, int a2, void *a3, void *a4, int a5, unsigned char *a6, void **a7)
{
  uint64_t v7 = a7;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  *a7 = 0;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 12)) {
    return 4294954511;
  }
  int v53 = a5;
  int v54 = a2;
  uint64_t v52 = a6;
  uint64_t v15 = (id *)&unk_1EB4C5000;
  if (!a5)
  {
    if (dword_1EB4C4FD0)
    {
      LODWORD(v55) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v15 = (id *)&unk_1EB4C5000;
    }
    pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
    if ([v15[422] objectForKeyedSubscript:a3]) {
      uint64_t v28 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithArray:", objc_msgSend(v15[422], "objectForKeyedSubscript:", a3));
    }
    else {
      uint64_t v28 = [MEMORY[0x1E4F1CA48] array];
    }
    uint64_t v29 = (void *)v28;
    pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
    if ([v29 count])
    {
      uint64_t v30 = 0;
      while (!cs_cameraInfosAreEqualExcludingRank(a4, objc_msgSend(v29, "objectAtIndexedSubscript:", v30, v47, v48)))
      {
        if (++v30 >= (unint64_t)[v29 count]) {
          goto LABEL_32;
        }
      }
      [v29 removeObjectAtIndex:v30];
      pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
      int v31 = 1;
    }
    else
    {
LABEL_32:
      pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
      int v31 = 0;
      if ([v15[422] objectForKeyedSubscript:a3]) {
        goto LABEL_42;
      }
    }
    if (dword_1EB4C4FD0)
    {
      LODWORD(v55) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v15 = (id *)&unk_1EB4C5000;
    }
    objc_msgSend(v15[422], "setObject:forKeyedSubscript:", v29, a3, v47, v48);
    [(id)sServerUserDefaults setObject:v15[422] forKey:@"tmp"];
LABEL_42:
    pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
    uint64_t v33 = (void *)[(id)sCameraHistoriesUpdatedWithOverridingCamera allKeys];
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    uint64_t v34 = [v33 countByEnumeratingWithState:&v55 objects:v66 count:16];
    if (v34)
    {
      uint64_t v35 = v34;
      int v49 = v31;
      uint64_t v50 = v7;
      uint64_t v51 = a1;
      char v36 = 0;
      uint64_t v37 = *(void *)v56;
      do
      {
        for (uint64_t i = 0; i != v35; ++i)
        {
          if (*(void *)v56 != v37) {
            objc_enumerationMutation(v33);
          }
          uint64_t v39 = *(void *)(*((void *)&v55 + 1) + 8 * i);
          if (cs_cameraInfosAreEqualExcludingRank(a4, objc_msgSend((id)sCameraHistoriesUpdatedWithOverridingCamera, "objectForKeyedSubscript:", v39, v47, v48)))
          {
            [(id)sCameraHistoryDownplayOverrideList removeObject:v39];
            [(id)sCameraHistoriesUpdatedWithOverridingCamera setObject:0 forKeyedSubscript:v39];
            char v36 = 1;
          }
        }
        uint64_t v35 = [v33 countByEnumeratingWithState:&v55 objects:v66 count:16];
      }
      while (v35);
      int v31 = v49;
      if (v36)
      {
        uint64_t v7 = v50;
        a1 = v51;
        long long v26 = (id *)&unk_1EB4C5000;
        if (dword_1EB4C4FD0)
        {
          long long v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
        long long v24 = &FigCaptureTempFileManagerStart_once;
        [(id)sTemporaryCameraHistoryItems setObject:sCameraHistoriesUpdatedWithOverridingCamera forKeyedSubscript:@"camera-histories-updated-with-overriding-camera"];
        [(id)sServerUserDefaults setObject:sTemporaryCameraHistoryItems forKey:@"tmp"];
        pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
        int v41 = 1;
        goto LABEL_58;
      }
      int v41 = 0;
      uint64_t v7 = v50;
      a1 = v51;
    }
    else
    {
      int v41 = 0;
    }
    long long v24 = &FigCaptureTempFileManagerStart_once;
    long long v26 = (id *)&unk_1EB4C5000;
LABEL_58:
    int v27 = v31 | v41;
    goto LABEL_59;
  }
  if (dword_1EB4C4FD0)
  {
    LODWORD(v55) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v15 = (id *)&unk_1EB4C5000;
  }
  pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  if ([v15[422] objectForKeyedSubscript:a3]) {
    uint64_t v18 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithArray:", objc_msgSend(v15[422], "objectForKeyedSubscript:", a3));
  }
  else {
    uint64_t v18 = [MEMORY[0x1E4F1CA48] array];
  }
  uint64_t v19 = (void *)v18;
  pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  int v20 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", @"OverrideRanking"), "intValue");
  if ([v19 count])
  {
    uint64_t v21 = 0;
    do
    {
      long long v22 = objc_msgSend(v19, "objectAtIndexedSubscript:", v21, v47, v48);
      if (cs_cameraInfosAreEqualExcludingRank(a4, v22)) {
        return 0;
      }
      int v23 = objc_msgSend((id)objc_msgSend(v22, "objectForKeyedSubscript:", @"OverrideRanking"), "intValue");
      if (v20)
      {
        if (v20 <= v23) {
          goto LABEL_20;
        }
      }
      else if (v23 > 0)
      {
LABEL_20:
        if (v21 == 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
        [v19 insertObject:a4 atIndex:v21];
        long long v24 = &FigCaptureTempFileManagerStart_once;
        while (++v21 < (unint64_t)[v19 count])
        {
          if (cs_cameraInfosAreEqualExcludingRank(a4, (void *)[v19 objectAtIndexedSubscript:v21]))
          {
            [v19 removeObjectAtIndex:v21];
            goto LABEL_22;
          }
        }
        goto LABEL_22;
      }
    }
    while (++v21 < (unint64_t)[v19 count]);
  }
  objc_msgSend(v19, "addObject:", a4, v47, v48);
  long long v24 = &FigCaptureTempFileManagerStart_once;
LABEL_22:
  if (dword_1EB4C4FD0)
  {
    LODWORD(v55) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    long long v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  long long v26 = (id *)&unk_1EB4C5000;
  [(id)sTemporaryCameraHistoryItems setObject:v19 forKeyedSubscript:a3];
  [(id)sServerUserDefaults setObject:sTemporaryCameraHistoryItems forKey:@"tmp"];
  pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  int v27 = 1;
LABEL_59:
  if (v53 && v27)
  {
    if (dword_1EB4C4FD0)
    {
      LODWORD(v55) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      unsigned int v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v43 = v55;
      if (os_log_type_enabled(v42, type[0])) {
        unsigned int v44 = v43;
      }
      else {
        unsigned int v44 = v43 & 0xFFFFFFFE;
      }
      if (v44)
      {
        int v60 = 136315651;
        long long v61 = "captureSource_UpdateCameraOverrideHistory";
        __int16 v62 = 1025;
        int v63 = v54;
        __int16 v64 = 2113;
        long long v65 = a3;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cs_updateCameraHistoryDownplayOverrideListForPreferenceKey(0);
  }
  if (v27)
  {
    *uint64_t v52 = 1;
    pthread_mutex_lock((pthread_mutex_t *)v24[267]);
    uint64_t v45 = [v26[422] objectForKeyedSubscript:a3];
    if (v45)
    {
      long long v46 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithArray:v45];
      uint64_t *v7 = v46;
    }
    else
    {
      long long v46 = *v7;
    }
    cs_sendNotificationOfNewTransientValue(a1, v46, a3);
    pthread_mutex_unlock((pthread_mutex_t *)v24[267]);
  }
  return 0;
}

uint64_t captureSource_PerformReactionEffect(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 12))
  {
    if (a2)
    {
      [*(id *)(DerivedStorage + 80) performReactionEffect:a2];
      return 0;
    }
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t captureSource_SetPixelBufferProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }
  return v8(a1, a2, a3);
}

uint64_t captureSource_CopyWildcardProprietaryDefault(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 12))
  {
    if (a2 && a3)
    {
      uint64_t v7 = (void *)[*(id *)(DerivedStorage + 232) objectsForWildcardKey:a2];
      [v7 count];
      *a3 = v7;
      return 0;
    }
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t captureSource_SetWildcardProprietaryDefault(uint64_t a1, const __CFString *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 12))
  {
    if (a2 && a4)
    {
      uint64_t v8 = DerivedStorage;
      if (!CFStringHasPrefix(a2, @"signal/"))
      {
        *a4 = (id)[*(id *)(v8 + 232) setObject:a3 forWildcardKey:a2];
        return 0;
      }
    }
    else
    {
      FigDebugAssert3();
    }
  }
  return FigSignalErrorAt();
}

void cs_sendNotificationOfNewTransientValue(uint64_t a1, void *a2, void *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock((pthread_mutex_t *)sAllProprietaryDefaultsCaptureSourcesLock);
  id v6 = objc_alloc(MEMORY[0x1E4F1C978]);
  uint64_t v7 = (void *)[v6 initWithArray:sAllProprietaryDefaultsCaptureSources];
  pthread_mutex_unlock((pthread_mutex_t *)sAllProprietaryDefaultsCaptureSourcesLock);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v35 objects:v42 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v36;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v36 != v10) {
          objc_enumerationMutation(v7);
        }
        if (*(void *)(*((void *)&v35 + 1) + 8 * i) != a1) {
          [*(id *)(CMBaseObjectGetDerivedStorage() + 232) sendNotificationOfNewTransientValue:a2 forKey:a3];
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v35 objects:v42 count:16];
    }
    while (v9);
  }

  if ([a3 isEqualToString:@"signal/request-gestures-default-disabled-notification"])
  {
    if (ReplayKitLibraryCore())
    {
      uint64_t v12 = getshowReactionsTipSymbolLoc();
      if (a2)
      {
        if (v12)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v13 = [a2 stringByReplacingOccurrencesOfString:@"." withString:@"-"];
            uint64_t v14 = [NSString stringWithFormat:@"videoeffects/%@/did-show-gestures-default-disabled-notification", v13];
            uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
            uint64_t v16 = [*(id *)(DerivedStorage + 232) objectForKey:v14];
            if (v16
              && (uint64_t v17 = (void *)v16, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              && [v17 BOOLValue])
            {
              LODWORD(v41) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v19 = v41;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
                unsigned int v20 = v19;
              }
              else {
                unsigned int v20 = v19 & 0xFFFFFFFE;
              }
              if (v20)
              {
                int v43 = 136315394;
                unsigned int v44 = "cs_handleRequestGesturesDefaultDisabledNotificationSignal";
                __int16 v45 = 2112;
                uint64_t v46 = v14;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            else
            {
              int v41 = 0;
              uint64_t v21 = (void *)[objc_alloc(MEMORY[0x1E4F223C8]) initWithBundleIdentifier:a2 allowPlaceholder:1 error:&v41];
              if (!v21)
              {
                *(_DWORD *)os_log_type_t type = 0;
                os_log_type_t v39 = OS_LOG_TYPE_DEFAULT;
                long long v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v23 = *(_DWORD *)type;
                if (os_log_type_enabled(v22, v39)) {
                  unsigned int v24 = v23;
                }
                else {
                  unsigned int v24 = v23 & 0xFFFFFFFE;
                }
                if (v24)
                {
                  int v43 = 136315650;
                  unsigned int v44 = "cs_handleRequestGesturesDefaultDisabledNotificationSignal";
                  __int16 v45 = 2112;
                  uint64_t v46 = (uint64_t)a2;
                  __int16 v47 = 2112;
                  uint64_t v48 = v41;
                  LODWORD(v34) = 32;
                  uint64_t v33 = &v43;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t v25 = objc_msgSend(v21, "localizedName", v33, v34);
              long long v26 = (uint64_t (*)(uint64_t, void *))getshowReactionsTipSymbolLoc();
              if (!v26) {
                cs_sendNotificationOfNewTransientValue_cold_1();
              }
              int v27 = v26(v25, a2);
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v39 = OS_LOG_TYPE_DEFAULT;
              uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v29 = *(_DWORD *)type;
              if (os_log_type_enabled(v28, v39)) {
                unsigned int v30 = v29;
              }
              else {
                unsigned int v30 = v29 & 0xFFFFFFFE;
              }
              if (v30)
              {
                if (v27) {
                  int v31 = "was";
                }
                else {
                  int v31 = "was not";
                }
                uint64_t v32 = [v21 localizedName];
                int v43 = 136315906;
                unsigned int v44 = "cs_handleRequestGesturesDefaultDisabledNotificationSignal";
                __int16 v45 = 2080;
                uint64_t v46 = (uint64_t)v31;
                __int16 v47 = 2112;
                uint64_t v48 = a2;
                __int16 v49 = 2112;
                uint64_t v50 = v32;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              if (v27) {
                [*(id *)(DerivedStorage + 232) setObject:MEMORY[0x1E4F1CC38] forKey:v14];
              }
            }
          }
        }
      }
    }
  }
}