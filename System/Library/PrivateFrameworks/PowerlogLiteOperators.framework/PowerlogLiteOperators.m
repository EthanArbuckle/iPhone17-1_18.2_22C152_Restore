id PLLogSMC()
{
  void *v0;
  uint64_t vars8;

  if (qword_1EBD57B30 != -1) {
    dispatch_once(&qword_1EBD57B30, &__block_literal_global_12);
  }
  v0 = (void *)qword_1EBD57B28;
  return v0;
}

id PLLogDisplay()
{
  if (qword_1EBD58640 != -1) {
    dispatch_once(&qword_1EBD58640, &__block_literal_global_25);
  }
  v0 = (void *)qword_1EBD58638;
  return v0;
}

void sub_1D269BB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 200), 8);
  _Block_object_dispose((const void *)(v34 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D269F068(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id PLLogIOReport()
{
  if (qword_1EBD583F8 != -1) {
    dispatch_once(&qword_1EBD583F8, &__block_literal_global_20);
  }
  v0 = (void *)qword_1EBD583F0;
  return v0;
}

id PLLogXPC()
{
  if (qword_1EBD5AEE8 != -1) {
    dispatch_once(&qword_1EBD5AEE8, &__block_literal_global_49);
  }
  v0 = (void *)qword_1EBD5AEE0;
  return v0;
}

id PLLogThermal()
{
  if (qword_1EBD57788 != -1) {
    dispatch_once(&qword_1EBD57788, &__block_literal_global);
  }
  v0 = (void *)_MergedGlobals_1;
  return v0;
}

void sub_1D26AE764(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void sub_1D26B5F18(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t a1), void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v20 = objc_begin_catch(a1);
      if ([*(id *)(v19 + 2496) debugEnabled])
      {
        uint64_t v21 = objc_opt_class();
        a9 = MEMORY[0x1E4F143A8];
        a10 = 3221225472;
        a11 = __52__PLBatteryAgent_logEventPointBatteryPanicShutdown___block_invoke_2;
        a12 = &__block_descriptor_40_e5_v8__0lu32l8;
        a13 = v21;
        if (qword_1EBD5CC70 != -1) {
          dispatch_once(&qword_1EBD5CC70, &a9);
        }
        if (byte_1EBD5CA98)
        {
          v22 = [NSString stringWithFormat:@"BatteryPanicShutdown data could not be parsed"];
          v23 = (void *)MEMORY[0x1E4F929B8];
          v24 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Hardware/PLBatteryAgent.m"];
          v25 = [v24 lastPathComponent];
          v26 = [NSString stringWithUTF8String:"-[PLBatteryAgent logEventPointBatteryPanicShutdown:]"];
          [v23 logMessage:v22 fromFile:v25 fromFunction:v26 fromLineNumber:7439];

          v27 = PLLogCommon();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v22;
            _os_log_debug_impl(&dword_1D2690000, v27, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
          }
        }
      }

      objc_end_catch();
      JUMPOUT(0x1D26B5ECCLL);
    }
    objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

id PLLogAudio()
{
  if (qword_1EBD58AA0 != -1) {
    dispatch_once(&qword_1EBD58AA0, &__block_literal_global_33);
  }
  v0 = (void *)qword_1EBD58A98;
  return v0;
}

BOOL AWDMETRICSCellularPowerLogReadFrom(void *a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 806952)
      {
        switch((int)v17)
        {
          case 816640:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogShutdown);
            [a1 addCellularPowerLogXOShutdown:v18];
            goto LABEL_41;
          case 816641:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogAPPSPerfLevels:v18];
            goto LABEL_180;
          case 816642:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogShutdown);
            [a1 addCellularPowerLogAPPSCXOShutdown:v18];
LABEL_41:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogShutdownReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816643:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogAPPSSleepVeto:v18];
            goto LABEL_180;
          case 816644:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogMCPMSleepVeto:v18];
            goto LABEL_180;
          case 816645:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogMPSSPerfLevels:v18];
            goto LABEL_180;
          case 816646:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogGPSStates:v18];
            goto LABEL_180;
          case 816647:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogAOPUARTStates:v18];
            goto LABEL_180;
          case 816648:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWLANUARTStates:v18];
            goto LABEL_180;
          case 816649:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogPCIeStates:v18];
            goto LABEL_180;
          case 816650:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogL1SleepStates:v18];
            goto LABEL_180;
          case 816651:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTEConfiguredCASCCStates:v18];
            goto LABEL_180;
          case 816652:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTEActivatedCASCCStates:v18];
            goto LABEL_180;
          case 816653:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTERxTxActivityStates:v18];
            goto LABEL_180;
          case 816654:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTECarrierComponentInfo);
            [a1 addCellularPowerLogLTECarrierComponentInfo:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTECarrierComponentInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816655:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTEAggregatedDLTBS:v18];
            goto LABEL_180;
          case 816656:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTERSRP:v18];
            goto LABEL_180;
          case 816657:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTESINR:v18];
            goto LABEL_180;
          case 816658:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTETxPower:v18];
            goto LABEL_180;
          case 816659:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTERxDiversity:v18];
            goto LABEL_180;
          case 816660:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTEULCAState:v18];
            goto LABEL_180;
          case 816661:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogPowerEstimator:v18];
            goto LABEL_180;
          case 816662:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPagingDRXCycle);
            [a1 addCellularPowerLogLTEPagingDRXCycle:v18];
            goto LABEL_67;
          case 816663:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPagingDRXCycle);
            [a1 addCellularPowerLogNRPagingDRXCycle:v18];
LABEL_67:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPagingDRXCycleReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816664:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogProtocolState:v18];
            goto LABEL_180;
          case 816665:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogPLMNSearch:v18];
            goto LABEL_180;
          case 816666:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogGSMTxPower:v18];
            goto LABEL_180;
          case 816667:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogGSMRxRSSI:v18];
            goto LABEL_180;
          case 816668:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogGSMRABMode:v18];
            goto LABEL_180;
          case 816669:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogGSMRxDiversity:v18];
            goto LABEL_180;
          case 816670:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWCDMATxPower:v18];
            goto LABEL_180;
          case 816671:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWCDMARxRSSI:v18];
            goto LABEL_180;
          case 816672:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRSCGRel);
            [a1 addCellularPowerLogNRSCGRel:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRSCGRelReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816673:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWCDMARxDiversity:v18];
            goto LABEL_180;
          case 816674:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWCDMARABMode:v18];
            goto LABEL_180;
          case 816675:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWCDMARABType:v18];
            goto LABEL_180;
          case 816676:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogEVDOTxPower:v18];
            goto LABEL_180;
          case 816677:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogEVDORxRSSI:v18];
            goto LABEL_180;
          case 816678:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogHybridRABMode:v18];
            goto LABEL_180;
          case 816679:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogEVDORxDiversity:v18];
            goto LABEL_180;
          case 816680:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogCDMA1XTxPower:v18];
            goto LABEL_180;
          case 816681:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogCDMA1XRxRSSI:v18];
            goto LABEL_180;
          case 816682:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogCDMA1XRABMode:v18];
            goto LABEL_180;
          case 816683:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogCDMA1XRxDiversity:v18];
            goto LABEL_180;
          case 816684:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWCDMACDRXConfig);
            [a1 addCellularPowerLogWCDMACDRXConfig:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWCDMACDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816685:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTECDRXConfig);
            [a1 addCellularPowerLogLTECDRXConfig:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTECDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816686:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWCDMARRCStateChange);
            [a1 addCellularPowerLogWCDMARRCStateChange:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWCDMARRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816687:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTERRCStateChange);
            [a1 addCellularPowerLogLTERRCStateChange:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTERRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816688:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogSystemEvent);
            [a1 addCellularPowerLogSystemEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogSystemEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816689:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogRATChangeEvent);
            [a1 addCellularPowerLogRATReselectionEvent:v18];
            goto LABEL_109;
          case 816690:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogRATChangeEvent);
            [a1 addCellularPowerLogRATRedirectionEvent:v18];
LABEL_109:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogRATChangeEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816691:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogGSMRRCStateChange);
            [a1 addCellularPowerLogGSMRRCStateChange:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogGSMRRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816692:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLog1xEVDORRCStateChange);
            [a1 addCellularPowerLogCDMA1XRRCStateChange:v18];
            goto LABEL_117;
          case 816693:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLog1xEVDORRCStateChange);
            [a1 addCellularPowerLogHybridRRCStateChange:v18];
LABEL_117:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLog1xEVDORRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816694:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogServiceEvent);
            [a1 addCellularPowerLogServiceStateEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogServiceEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816695:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPLMNScanEvent);
            [a1 addCellularPowerLogPLMNScanEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPLMNScanEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816696:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPLMNSearchEvent);
            [a1 addCellularPowerLogPLMNSearchEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPLMNSearchEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816697:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRSARRCStateChange);
            [a1 addCellularPowerLogNRSARRCStateChange:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRSARRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816698:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRNSAENDCEvent);
            [a1 addCellularPowerLogNRNSAENDCEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRNSAENDCEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816699:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCDRXConfig);
            [a1 addCellularPowerLogNRCDRXConfig:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRCDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816700:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6BWP:v18];
            goto LABEL_180;
          case 816701:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogRFTunerStatsHist:v18];
            goto LABEL_180;
          case 816702:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6CASCCConfigured:v18];
            goto LABEL_180;
          case 816703:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6CASCCActivated:v18];
            goto LABEL_180;
          case 816704:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6RxTx:v18];
            goto LABEL_180;
          case 816705:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCarrierComponentInfo);
            [a1 addCellularPowerLogNRsub6CarrierComponentInfo:v18];
            goto LABEL_163;
          case 816706:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6DLTBS:v18];
            goto LABEL_180;
          case 816707:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6RSRP:v18];
            goto LABEL_180;
          case 816708:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6ULCAState:v18];
            goto LABEL_180;
          case 816709:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6TxPower:v18];
            goto LABEL_180;
          case 816710:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6RxDiversity:v18];
            goto LABEL_180;
          case 816711:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogSPMI:v18];
            goto LABEL_180;
          case 816712:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveBWP:v18];
            goto LABEL_180;
          case 816713:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveAntennaPanel:v18];
            goto LABEL_180;
          case 816714:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRFRCoverage);
            [a1 addCellularPowerLogNRFRCoverage:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRFRCoverageReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816715:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveBeamID:v18];
            goto LABEL_180;
          case 816716:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogSFTStateEvent);
            [a1 addCellularPowerLogSFTState:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogSFTStateEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816717:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveCASCCConfigured:v18];
            goto LABEL_180;
          case 816718:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveCASCCActivated:v18];
            goto LABEL_180;
          case 816719:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveRxTx:v18];
            goto LABEL_180;
          case 816720:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCarrierComponentInfo);
            [a1 addCellularPowerLogNRmmWaveCarrierComponentInfo:v18];
LABEL_163:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRCarrierComponentInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816721:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveDLTBS:v18];
            goto LABEL_180;
          case 816722:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRMmWaveRSRP:v18];
            goto LABEL_180;
          case 816723:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogSFTRxTx:v18];
            goto LABEL_180;
          case 816724:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRMmWaveTxPower:v18];
            goto LABEL_180;
          case 816725:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRMmWaveULCAState:v18];
            goto LABEL_180;
          case 816726:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6BWPSCC:v18];
            goto LABEL_180;
          case 816727:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveBWPSCC:v18];
            goto LABEL_180;
          case 816728:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRDCEvent);
            [a1 addCellularPowerLogNRDCEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRDCEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816729:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWUS);
            [a1 addCellularPowerLogWUS:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWUSReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816730:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6BWPSA:v18];
LABEL_180:
            if (PBReaderPlaceMark()
              && (AWDMETRICSCellularPowerLogHistogramReadFrom((uint64_t)v18, a2) & 1) != 0)
            {
              goto LABEL_182;
            }
            goto LABEL_186;
          default:
            if (v17 != 806953) {
              goto LABEL_37;
            }
            v18 = objc_alloc_init(AWDMETRICSCellularDynamicRatSelection);
            [a1 addCellularDynamicRatSelection:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularDynamicRatSelectionReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
        }
      }
      if (v17 == 786435)
      {
        v18 = objc_alloc_init(AWDMETRICSCellularPerClientProfileTriggerCount);
        [a1 addCellularPerClientProfileTriggerCount:v18];
        if (!PBReaderPlaceMark()
          || (AWDMETRICSCellularPerClientProfileTriggerCountReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_186:

          return 0;
        }
        goto LABEL_182;
      }
      if (v17 == 806936) {
        break;
      }
      if (v17 == 806937)
      {
        v18 = objc_alloc_init(AWDMETRICSCellularNrSdmEndcRelease);
        [a1 addCellularNrSdmEndcRelease:v18];
        if (!PBReaderPlaceMark()
          || (AWDMETRICSCellularNrSdmEndcReleaseReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
          goto LABEL_186;
        }
LABEL_182:
        PBReaderRecallMark();

        goto LABEL_183;
      }
LABEL_37:
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_183:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    v18 = objc_alloc_init(AWDMETRICSCellularNrSDMActivation);
    [a1 addCellularNrSDMActivation:v18];
    if (!PBReaderPlaceMark() || (AWDMETRICSCellularNrSDMActivationReadFrom((uint64_t)v18, a2) & 1) == 0) {
      goto LABEL_186;
    }
    goto LABEL_182;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogHistogramReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_46;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_48;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_48:
        *(void *)(a1 + 8) = v19;
        goto LABEL_58;
      case 2u:
        v24 = objc_alloc_init(AWDMETRICSMBin);
        [(id)a1 addBin:v24];
        if (PBReaderPlaceMark() && AWDMETRICSMBinReadFrom((uint64_t)v24, a2))
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_52:
        uint64_t v36 = 28;
        goto LABEL_57;
      case 4u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v27 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_56:
        uint64_t v36 = 24;
LABEL_57:
        *(_DWORD *)(a1 + v36) = v27;
        goto LABEL_58;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_58;
    }
  }
}

BOOL AWDMETRICSMBinReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 2u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTERRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_74:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_86:
      uint64_t v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogServiceEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogSystemEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogPLMNScanEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_74:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v50 = 16;
          goto LABEL_87;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_86:
      uint64_t v50 = 32;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPerClientProfileTriggerCountReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_39:
        *(void *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PLLogCoalition()
{
  if (qword_1EBD58CB8 != -1) {
    dispatch_once(&qword_1EBD58CB8, &__block_literal_global_35);
  }
  v0 = (void *)qword_1EBD58CB0;
  return v0;
}

id PLLogCamera()
{
  if (qword_1EBD57A58 != -1) {
    dispatch_once(&qword_1EBD57A58, &__block_literal_global_9);
  }
  v0 = (void *)_MergedGlobals_1_8;
  return v0;
}

id PLLogCLPC()
{
  if (qword_1EBD5A1D8 != -1) {
    dispatch_once(&qword_1EBD5A1D8, &__block_literal_global_41);
  }
  v0 = (void *)qword_1EBD5A1D0;
  return v0;
}

id PLLogNetwork()
{
  if (qword_1EBD57AC0 != -1) {
    dispatch_once(&qword_1EBD57AC0, &__block_literal_global_11);
  }
  v0 = (void *)qword_1EBD57AB8;
  return v0;
}

void sub_1D26D0E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose((const void *)(v71 - 224), 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose(&STACK[0x2B8], 8);
  _Block_object_dispose(&STACK[0x2D8], 8);
  _Unwind_Resume(a1);
}

#error "1D26D1C88: too big function (funcsize=0)"

id removeCTPrefixFromString(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 hasPrefix:v3])
  {
    objc_msgSend(v4, "substringFromIndex:", objc_msgSend(v3, "length"));
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v5 = v4;
  }
  v6 = v5;

  return v6;
}

void __TelephonyNotificationCB_block_invoke(uint64_t a1)
{
  if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F23FC0]))
  {
    v2 = @"kCTRegistrationCellChangedNotification";
  }
  else if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F24178]))
  {
    v2 = @"kCTRegistrationStatusChangedNotification";
  }
  else if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F24080]))
  {
    v2 = @"kCTRegistrationDataStatusChangedNotification";
  }
  else if (CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F240A0]))
  {
    v2 = @"kCTRegistrationOperatorNameChangedNotification";
  }
  else
  {
    if (!CFEqual(*(CFTypeRef *)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4F24298])) {
      goto LABEL_12;
    }
    v2 = @"kCTTimeUpdateNotification";
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:@"Valid" forKey:v2];
LABEL_12:
  [*(id *)(a1 + 32) logTelephonyRegMsgWith:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  id v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
  }
}

void TelephonyNotificationCB(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    v7 = +[PLBBAgent getBBAgent];
    if (v7)
    {
      uint64_t v13 = 0;
      BOOL v14 = &v13;
      uint64_t v15 = 0x3032000000;
      v16 = __Block_byref_object_copy__10;
      char v17 = __Block_byref_object_dispose__10;
      id v18 = [MEMORY[0x1E4F1CA60] dictionaryWithDictionary:a5];
      [(id)v14[5] setObject:@"not set" forKey:@"kCTRegistrationCellChangedNotification"];
      [(id)v14[5] setObject:@"not set" forKey:@"kCTRegistrationStatusChangedNotification"];
      [(id)v14[5] setObject:@"not set" forKey:@"kCTRegistrationDataStatusChangedNotification"];
      [(id)v14[5] setObject:@"not set" forKey:@"kCTRegistrationOperatorNameChangedNotification"];
      if (a3) {
        CFRetain(a3);
      }
      char v8 = [v7 workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __TelephonyNotificationCB_block_invoke;
      block[3] = &unk_1E692F010;
      uint64_t v11 = &v13;
      unint64_t v12 = a3;
      id v10 = v7;
      dispatch_async(v8, block);

      _Block_object_dispose(&v13, 8);
    }
  }
}

void sub_1D26FE258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AWDMETRICSCellularPowerLogPLMNSearchEventReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_71;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_73;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_71:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_73:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x20u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_77:
          uint64_t v55 = 32;
          goto LABEL_98;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_81:
          uint64_t v55 = 24;
          goto LABEL_98;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x10u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_85:
          uint64_t v55 = 28;
          goto LABEL_98;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 4u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_89:
          uint64_t v55 = 20;
          goto LABEL_98;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_93:
          uint64_t v55 = 16;
          goto LABEL_98;
        case 7u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x40u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v52 = *v3;
        unint64_t v53 = *(void *)(a2 + v52);
        if (v53 == -1 || v53 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
        *(void *)(a2 + v52) = v53 + 1;
        v26 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0) {
          goto LABEL_95;
        }
        v50 += 7;
        BOOL v14 = v51++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_97;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_95:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_97:
      uint64_t v55 = 36;
LABEL_98:
      *(_DWORD *)(a1 + v55) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t type metadata accessor for UrsaRequest(uint64_t a1)
{
  return sub_1D270178C(a1, (uint64_t *)&unk_1EA695F30);
}

uint64_t sub_1D27014D8(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for UrsaRequest(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t sub_1D2701520(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for UrsaRequest(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t sub_1D2701568(uint64_t a1, uint64_t a2)
{
  return sub_1D27016EC(a1, a2, type metadata accessor for UrsaRequest);
}

uint64_t sub_1D2701580(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for UrsaRequest(0) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  void *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t sub_1D27015C8()
{
  return sub_1D27017C4(type metadata accessor for UrsaRequest);
}

uint64_t sub_1D27015E0(uint64_t a1, uint64_t a2)
{
  return sub_1D2701820(a1, a2, type metadata accessor for UrsaRequest);
}

uint64_t sub_1D27015F8(double a1)
{
  uint64_t result = type metadata accessor for UrsaRequest(0);
  uint64_t v4 = v1 + *(int *)(result + 40);
  *(double *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t sub_1D2701630()
{
  return *(unsigned char *)(v0 + *(int *)(type metadata accessor for UrsaResponse(0) + 24)) & 1;
}

uint64_t type metadata accessor for UrsaResponse(uint64_t a1)
{
  return sub_1D270178C(a1, (uint64_t *)&unk_1EA695F40);
}

uint64_t sub_1D2701678()
{
  return sub_1D2701690(type metadata accessor for UrsaResponse);
}

uint64_t sub_1D2701690(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 28));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1D27016EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  v6 = (void *)(v3 + *(int *)(a3(0) + 28));
  uint64_t result = swift_bridgeObjectRelease();
  void *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t sub_1D2701738()
{
  uint64_t v1 = (unsigned char *)(v0 + *(int *)(type metadata accessor for UrsaResponse(0) + 32));
  if (v1[4]) {
    return 0;
  }
  else {
    return *(unsigned int *)v1;
  }
}

uint64_t type metadata accessor for UrsaIssue(uint64_t a1)
{
  return sub_1D270178C(a1, (uint64_t *)&unk_1EA695F50);
}

uint64_t sub_1D270178C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D27017C4(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 36));
  if (v2[1]) {
    uint64_t v3 = *v2;
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1D2701820(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  v6 = (void *)(v3 + *(int *)(a3(0) + 36));
  uint64_t result = swift_bridgeObjectRelease();
  void *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t sub_1D270186C()
{
  uint64_t v0 = sub_1D2ADB768();
  __swift_allocate_value_buffer(v0, qword_1EA6967A0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA6967A0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694798);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA6947A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1D2B020A0;
  unint64_t v4 = v19 + v3;
  unint64_t v5 = v19 + v3 + v1[14];
  *(void *)(v19 + v3) = 1;
  *(void *)unint64_t v5 = "cr_key";
  *(void *)(v5 + 8) = 6;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1E4F70FD0];
  uint64_t v7 = sub_1D2ADB748();
  char v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "build";
  *(void *)(v9 + 8) = 5;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "device";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  unint64_t v12 = (void *)(v4 + 3 * v2);
  char v13 = (char *)v12 + v1[14];
  *unint64_t v12 = 4;
  *(void *)char v13 = "response_flag";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  BOOL v14 = (void *)(v4 + 4 * v2);
  int v15 = (char *)v14 + v1[14];
  *BOOL v14 = 5;
  *(void *)int v15 = "request_id";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  v16 = (void *)(v4 + 5 * v2);
  char v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)char v17 = "fetch_window_start";
  *((void *)v17 + 1) = 18;
  v17[16] = 2;
  v8();
  return sub_1D2ADB758();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1D2701B68()
{
  while (1)
  {
    uint64_t result = sub_1D2ADB658();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        type metadata accessor for UrsaRequest(0);
        sub_1D2ADB698();
        break;
      case 6:
        type metadata accessor for UrsaRequest(0);
        sub_1D2ADB688();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_1D2701CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for UrsaRequest(0);
  unint64_t v10 = (int *)result;
  if (*(void *)(v5 + *(int *)(result + 20) + 8)) {
    uint64_t result = sub_1D2ADB728();
  }
  if (!v4)
  {
    if (*(void *)(v5 + v10[6] + 8)) {
      sub_1D2ADB728();
    }
    if (*(void *)(v5 + v10[7] + 8)) {
      sub_1D2ADB728();
    }
    if (*(void *)(v5 + v10[8] + 8)) {
      sub_1D2ADB728();
    }
    sub_1D2703238(v5, a1, a2, a3, type metadata accessor for UrsaRequest);
    sub_1D2701E28(v5);
    return sub_1D2ADB608();
  }
  return result;
}

uint64_t sub_1D2701E28(uint64_t a1)
{
  uint64_t result = type metadata accessor for UrsaRequest(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 40) + 8) & 1) == 0) {
    return sub_1D2ADB718();
  }
  return result;
}

uint64_t sub_1D2701EA4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1D2ADB618();
  uint64_t v5 = a1[6];
  uint64_t v6 = (void *)(a2 + a1[5]);
  void *v6 = 0;
  v6[1] = 0;
  uint64_t v7 = (void *)(a2 + v5);
  void *v7 = 0;
  v7[1] = 0;
  uint64_t v8 = a1[8];
  unint64_t v9 = (void *)(a2 + a1[7]);
  *unint64_t v9 = 0;
  v9[1] = 0;
  unint64_t v10 = (void *)(a2 + v8);
  *unint64_t v10 = 0;
  v10[1] = 0;
  uint64_t v11 = a1[10];
  unint64_t v12 = (void *)(a2 + a1[9]);
  *unint64_t v12 = 0;
  v12[1] = 0;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  return result;
}

uint64_t sub_1D2701F10()
{
  return 0x7571655261737255;
}

uint64_t (*sub_1D2701F3C())()
{
  return nullsub_1;
}

uint64_t sub_1D2701F60()
{
  return sub_1D2701B68();
}

uint64_t sub_1D2701F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D2701CA4(a1, a2, a3);
}

uint64_t sub_1D2701F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D2704654(&qword_1EA694788, (void (*)(uint64_t))type metadata accessor for UrsaRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t sub_1D2702014@<X0>(uint64_t a1@<X8>)
{
  return sub_1D2703874(&qword_1EA695610, (uint64_t)qword_1EA6967A0, a1);
}

uint64_t sub_1D2702038()
{
  sub_1D2704654(&qword_1EA694740, (void (*)(uint64_t))type metadata accessor for UrsaRequest);
  return sub_1D2ADB6C8();
}

uint64_t sub_1D27020A8()
{
  sub_1D2704654(&qword_1EA694740, (void (*)(uint64_t))type metadata accessor for UrsaRequest);
  return sub_1D2ADB6D8();
}

uint64_t sub_1D270212C()
{
  uint64_t v0 = sub_1D2ADB768();
  __swift_allocate_value_buffer(v0, qword_1EA6967B8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA6967B8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694798);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA6947A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1D2B020B0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "success";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = sub_1D2ADB748();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "failure_reason";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  unint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)unint64_t v12 = "issues";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  BOOL v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)BOOL v14 = "error_code";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return sub_1D2ADB758();
}

uint64_t sub_1D270237C()
{
  uint64_t result = sub_1D2ADB658();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for UrsaResponse(0);
          uint64_t v4 = v3;
          sub_1D2ADB668();
          goto LABEL_5;
        case 2:
          type metadata accessor for UrsaResponse(0);
          uint64_t v4 = v3;
          sub_1D2ADB698();
          goto LABEL_5;
        case 3:
          type metadata accessor for UrsaIssue(0);
          sub_1D2704654(&qword_1EA694720, (void (*)(uint64_t))type metadata accessor for UrsaIssue);
          uint64_t v4 = v3;
          sub_1D2ADB6A8();
          goto LABEL_5;
        case 4:
          type metadata accessor for UrsaResponse(0);
          uint64_t v4 = v3;
          sub_1D2ADB678();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_1D2ADB658();
    }
  }
  return result;
}

uint64_t sub_1D2702508()
{
  uint64_t result = type metadata accessor for UrsaResponse(0);
  uint64_t v3 = result;
  if (*(unsigned char *)(v0 + *(int *)(result + 24)) != 2) {
    uint64_t result = sub_1D2ADB6F8();
  }
  if (!v1)
  {
    if (*(void *)(v0 + *(int *)(v3 + 28) + 8)) {
      sub_1D2ADB728();
    }
    if (*(void *)(*(void *)v0 + 16))
    {
      type metadata accessor for UrsaIssue(0);
      sub_1D2704654(&qword_1EA694720, (void (*)(uint64_t))type metadata accessor for UrsaIssue);
      sub_1D2ADB738();
    }
    if ((*(unsigned char *)(v0 + *(int *)(v3 + 32) + 4) & 1) == 0) {
      sub_1D2ADB708();
    }
    return sub_1D2ADB608();
  }
  return result;
}

uint64_t sub_1D27026A0@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1D2ADB618();
  uint64_t v5 = a1[7];
  *((unsigned char *)a2 + a1[6]) = 2;
  unint64_t v6 = (void *)((char *)a2 + v5);
  void *v6 = 0;
  v6[1] = 0;
  uint64_t v7 = (char *)a2 + a1[8];
  *(_DWORD *)uint64_t v7 = 0;
  v7[4] = 1;
  return result;
}

uint64_t sub_1D2702704()
{
  return 0x7073655261737255;
}

uint64_t sub_1D2702724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = sub_1D2ADB628();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_1D2702794(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = sub_1D2ADB628();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1D2702804())()
{
  return nullsub_1;
}

uint64_t sub_1D2702828()
{
  return sub_1D270237C();
}

uint64_t sub_1D2702840()
{
  return sub_1D2702508();
}

uint64_t sub_1D2702858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D2704654(&qword_1EA694780, (void (*)(uint64_t))type metadata accessor for UrsaResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t sub_1D27028D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1D2703874(&qword_1EA695618, (uint64_t)qword_1EA6967B8, a1);
}

uint64_t sub_1D27028F8()
{
  sub_1D2704654(&qword_1EA694758, (void (*)(uint64_t))type metadata accessor for UrsaResponse);
  return sub_1D2ADB6C8();
}

uint64_t sub_1D2702964()
{
  sub_1D2704654(&qword_1EA694758, (void (*)(uint64_t))type metadata accessor for UrsaResponse);
  return sub_1D2ADB6D8();
}

uint64_t sub_1D27029E4()
{
  uint64_t v0 = sub_1D2ADB768();
  __swift_allocate_value_buffer(v0, qword_1EA6967D0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA6967D0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694798);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EA6947A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1D2B020C0;
  unint64_t v4 = v30 + v3;
  unint64_t v5 = v30 + v3 + v1[14];
  *(void *)(v30 + v3) = 1;
  *(void *)unint64_t v5 = "radar";
  *(void *)(v5 + 8) = 5;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = sub_1D2ADB748();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v30 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "impact";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v30 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "timestamp_start";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  unint64_t v12 = (void *)(v30 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *unint64_t v12 = 4;
  *(void *)uint64_t v13 = "timestamp_end";
  *((void *)v13 + 1) = 13;
  v13[16] = 2;
  v8();
  BOOL v14 = (void *)(v30 + v3 + 4 * v2);
  int v15 = (char *)v14 + v1[14];
  *BOOL v14 = 5;
  *(void *)int v15 = "hit_in";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  v16 = (void *)(v30 + v3 + 5 * v2);
  char v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)char v17 = "fixed_in";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  unsigned int v18 = (void *)(v30 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  void *v18 = 7;
  *(void *)uint64_t v19 = "is_critical";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v30 + v3 + 7 * v2);
  unint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)unint64_t v21 = "timestamp_invalid";
  *((void *)v21 + 1) = 17;
  v21[16] = 2;
  v8();
  uint64_t v22 = v30 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "dri_message";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  char v23 = (void *)(v30 + v3 + 9 * v2);
  char v24 = (char *)v23 + v1[14];
  void *v23 = 10;
  *(void *)char v24 = "notification_message";
  *((void *)v24 + 1) = 20;
  v24[16] = 2;
  v8();
  unsigned int v25 = (void *)(v30 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  void *v25 = 11;
  *(void *)uint64_t v26 = "process";
  *((void *)v26 + 1) = 7;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v30 + v3 + 11 * v2);
  unint64_t v28 = (char *)v27 + v1[14];
  void *v27 = 12;
  *(void *)unint64_t v28 = "domain";
  *((void *)v28 + 1) = 6;
  v28[16] = 2;
  v8();
  return sub_1D2ADB758();
}

uint64_t sub_1D2702E1C()
{
  while (1)
  {
    uint64_t result = sub_1D2ADB658();
    uint64_t v3 = v0;
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
      case 2:
        type metadata accessor for UrsaIssue(0);
        sub_1D2ADB678();
        goto LABEL_8;
      case 3:
      case 4:
      case 8:
        type metadata accessor for UrsaIssue(0);
        sub_1D2ADB688();
        goto LABEL_8;
      case 5:
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
        type metadata accessor for UrsaIssue(0);
        sub_1D2ADB698();
        goto LABEL_8;
      case 7:
        type metadata accessor for UrsaIssue(0);
        sub_1D2ADB668();
LABEL_8:
        uint64_t v3 = 0;
        break;
      default:
        break;
    }
    uint64_t v0 = v3;
  }
}

uint64_t sub_1D2702FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = type metadata accessor for UrsaIssue(0);
  unint64_t v10 = (int *)result;
  if ((*(unsigned char *)(v5 + *(int *)(result + 20) + 4) & 1) == 0) {
    uint64_t result = sub_1D2ADB708();
  }
  if (!v4)
  {
    if ((*(unsigned char *)(v5 + v10[6] + 4) & 1) == 0) {
      sub_1D2ADB708();
    }
    if ((*(unsigned char *)(v5 + v10[7] + 8) & 1) == 0) {
      sub_1D2ADB718();
    }
    if ((*(unsigned char *)(v5 + v10[8] + 8) & 1) == 0) {
      sub_1D2ADB718();
    }
    sub_1D2703238(v5, a1, a2, a3, type metadata accessor for UrsaIssue);
    sub_1D27032B4(v5);
    sub_1D270332C(v5);
    sub_1D27033A4(v5);
    sub_1D270341C(v5);
    sub_1D2703494(v5);
    sub_1D270350C(v5);
    sub_1D2703584(v5);
    return sub_1D2ADB608();
  }
  return result;
}

uint64_t sub_1D2703238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  if (*(void *)(a1 + *(int *)(result + 36) + 8)) {
    return sub_1D2ADB728();
  }
  return result;
}

uint64_t sub_1D27032B4(uint64_t a1)
{
  uint64_t result = type metadata accessor for UrsaIssue(0);
  if (*(void *)(a1 + *(int *)(result + 40) + 8)) {
    return sub_1D2ADB728();
  }
  return result;
}

uint64_t sub_1D270332C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UrsaIssue(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 44)) != 2) {
    return sub_1D2ADB6F8();
  }
  return result;
}

uint64_t sub_1D27033A4(uint64_t a1)
{
  uint64_t result = type metadata accessor for UrsaIssue(0);
  if ((*(unsigned char *)(a1 + *(int *)(result + 48) + 8) & 1) == 0) {
    return sub_1D2ADB718();
  }
  return result;
}

uint64_t sub_1D270341C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UrsaIssue(0);
  if (*(void *)(a1 + *(int *)(result + 52) + 8)) {
    return sub_1D2ADB728();
  }
  return result;
}

uint64_t sub_1D2703494(uint64_t a1)
{
  uint64_t result = type metadata accessor for UrsaIssue(0);
  if (*(void *)(a1 + *(int *)(result + 56) + 8)) {
    return sub_1D2ADB728();
  }
  return result;
}

uint64_t sub_1D270350C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UrsaIssue(0);
  if (*(void *)(a1 + *(int *)(result + 60) + 8)) {
    return sub_1D2ADB728();
  }
  return result;
}

uint64_t sub_1D2703584(uint64_t a1)
{
  uint64_t result = type metadata accessor for UrsaIssue(0);
  if (*(void *)(a1 + *(int *)(result + 64) + 8)) {
    return sub_1D2ADB728();
  }
  return result;
}

uint64_t sub_1D2703600@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1D2ADB618();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(_DWORD *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 4) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = 1;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = a1[10];
  unint64_t v12 = (void *)(a2 + a1[9]);
  *unint64_t v12 = 0;
  v12[1] = 0;
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v13 = 0;
  v13[1] = 0;
  uint64_t v14 = a1[12];
  *(unsigned char *)(a2 + a1[11]) = 2;
  uint64_t v15 = a2 + v14;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = a1[14];
  char v17 = (void *)(a2 + a1[13]);
  *char v17 = 0;
  v17[1] = 0;
  unsigned int v18 = (void *)(a2 + v16);
  void *v18 = 0;
  v18[1] = 0;
  uint64_t v19 = a1[16];
  uint64_t v20 = (void *)(a2 + a1[15]);
  *uint64_t v20 = 0;
  v20[1] = 0;
  unint64_t v21 = (void *)(a2 + v19);
  *unint64_t v21 = 0;
  v21[1] = 0;
  return result;
}

uint64_t sub_1D27036B8()
{
  return 0x7573734961737255;
}

uint64_t sub_1D27036D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1D2ADB628();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t sub_1D270373C(uint64_t a1)
{
  uint64_t v3 = sub_1D2ADB628();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t sub_1D27037A4()
{
  return sub_1D2702E1C();
}

uint64_t sub_1D27037BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D2702FF4(a1, a2, a3);
}

uint64_t sub_1D27037D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D2704654(&qword_1EA694778, (void (*)(uint64_t))type metadata accessor for UrsaIssue);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t sub_1D2703850@<X0>(uint64_t a1@<X8>)
{
  return sub_1D2703874(qword_1EA695620, (uint64_t)qword_1EA6967D0, a1);
}

uint64_t sub_1D2703874@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1D2ADB768();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t sub_1D2703910()
{
  sub_1D2704654(&qword_1EA694720, (void (*)(uint64_t))type metadata accessor for UrsaIssue);
  return sub_1D2ADB6C8();
}

uint64_t sub_1D270397C()
{
  return sub_1D2ADBAF8();
}

uint64_t sub_1D27039D4()
{
  sub_1D2704654(&qword_1EA694720, (void (*)(uint64_t))type metadata accessor for UrsaIssue);
  return sub_1D2ADB6D8();
}

uint64_t sub_1D2703A50()
{
  return sub_1D2ADBAF8();
}

uint64_t sub_1D2703AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UrsaIssue(0) - 8;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1D270667C(a1 + v12, (uint64_t)v10);
        sub_1D270667C(a2 + v12, (uint64_t)v7);
        char v15 = sub_1D2703C08((uint64_t)v10, (uint64_t)v7);
        sub_1D27066E0((uint64_t)v7);
        sub_1D27066E0((uint64_t)v10);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1D2703C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D2ADB628();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v77 - v9;
  uint64_t v11 = (int *)type metadata accessor for UrsaIssue(0);
  unint64_t v12 = v11;
  uint64_t v13 = v11[5];
  uint64_t v14 = (_DWORD *)(a1 + v13);
  char v15 = *(unsigned char *)(a1 + v13 + 4);
  uint64_t v16 = (_DWORD *)(a2 + v13);
  int v17 = *(unsigned __int8 *)(a2 + v13 + 4);
  if (v15)
  {
    if (!v17) {
      return v17 & 1;
    }
  }
  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_78;
    }
  }
  uint64_t v18 = v11[6];
  uint64_t v19 = (_DWORD *)(a1 + v18);
  char v20 = *(unsigned char *)(a1 + v18 + 4);
  unint64_t v21 = (_DWORD *)(a2 + v18);
  int v17 = *(unsigned __int8 *)(a2 + v18 + 4);
  if (v20)
  {
    if (!v17) {
      return v17 & 1;
    }
  }
  else
  {
    if (*v19 != *v21) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_78;
    }
  }
  uint64_t v22 = v11[7];
  char v23 = (double *)(a1 + v22);
  char v24 = *(unsigned char *)(a1 + v22 + 8);
  unsigned int v25 = (double *)(a2 + v22);
  int v17 = *(unsigned __int8 *)(a2 + v22 + 8);
  if (v24)
  {
    if (!v17) {
      return v17 & 1;
    }
  }
  else
  {
    if (*v23 != *v25) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_78;
    }
  }
  uint64_t v26 = v11[8];
  uint64_t v27 = (double *)(a1 + v26);
  char v28 = *(unsigned char *)(a1 + v26 + 8);
  char v29 = (double *)(a2 + v26);
  int v17 = *(unsigned __int8 *)(a2 + v26 + 8);
  if (v28)
  {
    if (!v17) {
      return v17 & 1;
    }
  }
  else
  {
    if (*v27 != *v29) {
      LOBYTE(v17) = 1;
    }
    if (v17) {
      goto LABEL_78;
    }
  }
  uint64_t v30 = v11[9];
  unsigned int v31 = (void *)(a1 + v30);
  uint64_t v32 = *(void *)(a1 + v30 + 8);
  unint64_t v33 = (void *)(a2 + v30);
  uint64_t v34 = v33[1];
  if (!v32)
  {
    if (v34) {
      goto LABEL_78;
    }
    goto LABEL_32;
  }
  if (!v34) {
    goto LABEL_78;
  }
  if (*v31 == *v33 && v32 == v34 || (char v35 = sub_1D2ADBA48(), LOBYTE(v17) = 0, (v35 & 1) != 0))
  {
LABEL_32:
    uint64_t v36 = v12[10];
    uint64_t v37 = (void *)(a1 + v36);
    uint64_t v38 = *(void *)(a1 + v36 + 8);
    char v39 = (void *)(a2 + v36);
    uint64_t v40 = v39[1];
    if (v38)
    {
      if (!v40) {
        goto LABEL_78;
      }
      if (*v37 != *v39 || v38 != v40)
      {
        char v41 = sub_1D2ADBA48();
        LOBYTE(v17) = 0;
        if ((v41 & 1) == 0) {
          return v17 & 1;
        }
      }
    }
    else if (v40)
    {
      goto LABEL_78;
    }
    uint64_t v42 = v12[11];
    int v43 = *(unsigned __int8 *)(a1 + v42);
    int v44 = *(unsigned __int8 *)(a2 + v42);
    if (v43 == 2)
    {
      if (v44 != 2) {
        goto LABEL_78;
      }
    }
    else if (v44 == 2 || ((((v44 & 1) == 0) ^ v43) & 1) == 0)
    {
      goto LABEL_78;
    }
    uint64_t v45 = v12[12];
    unsigned int v46 = (double *)(a1 + v45);
    char v47 = *(unsigned char *)(a1 + v45 + 8);
    unint64_t v48 = (double *)(a2 + v45);
    int v17 = *(unsigned __int8 *)(a2 + v45 + 8);
    if (v47)
    {
      if (!v17) {
        return v17 & 1;
      }
    }
    else
    {
      if (*v46 != *v48) {
        LOBYTE(v17) = 1;
      }
      if (v17) {
        goto LABEL_78;
      }
    }
    uint64_t v49 = v12[13];
    char v50 = (void *)(a1 + v49);
    uint64_t v51 = *(void *)(a1 + v49 + 8);
    uint64_t v52 = (void *)(a2 + v49);
    uint64_t v53 = v52[1];
    if (v51)
    {
      if (!v53) {
        goto LABEL_78;
      }
      if (*v50 != *v52 || v51 != v53)
      {
        char v54 = sub_1D2ADBA48();
        LOBYTE(v17) = 0;
        if ((v54 & 1) == 0) {
          return v17 & 1;
        }
      }
    }
    else if (v53)
    {
      goto LABEL_78;
    }
    uint64_t v55 = v12[14];
    v56 = (void *)(a1 + v55);
    uint64_t v57 = *(void *)(a1 + v55 + 8);
    v58 = (void *)(a2 + v55);
    uint64_t v59 = v58[1];
    if (v57)
    {
      if (!v59) {
        goto LABEL_78;
      }
      if (*v56 != *v58 || v57 != v59)
      {
        char v60 = sub_1D2ADBA48();
        LOBYTE(v17) = 0;
        if ((v60 & 1) == 0) {
          return v17 & 1;
        }
      }
    }
    else if (v59)
    {
      goto LABEL_78;
    }
    uint64_t v61 = v12[15];
    v62 = (void *)(a1 + v61);
    uint64_t v63 = *(void *)(a1 + v61 + 8);
    v64 = (void *)(a2 + v61);
    uint64_t v65 = v64[1];
    if (v63)
    {
      if (!v65) {
        goto LABEL_78;
      }
      if (*v62 != *v64 || v63 != v65)
      {
        char v66 = sub_1D2ADBA48();
        LOBYTE(v17) = 0;
        if ((v66 & 1) == 0) {
          return v17 & 1;
        }
      }
    }
    else if (v65)
    {
      goto LABEL_78;
    }
    uint64_t v67 = v12[16];
    v68 = (void *)(a1 + v67);
    uint64_t v69 = *(void *)(a1 + v67 + 8);
    v70 = (void *)(a2 + v67);
    uint64_t v71 = v70[1];
    if (v69)
    {
      if (v71)
      {
        if (*v68 != *v70 || v69 != v71)
        {
          char v72 = sub_1D2ADBA48();
          LOBYTE(v17) = 0;
          if ((v72 & 1) == 0) {
            return v17 & 1;
          }
        }
LABEL_80:
        v74 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v74(v10, a1, v4);
        v74(v8, a2, v4);
        sub_1D2704654(&qword_1EA694790, MEMORY[0x1E4F70E60]);
        char v75 = sub_1D2ADB7C8();
        v76 = *(void (**)(char *, uint64_t))(v5 + 8);
        v76(v8, v4);
        v76(v10, v4);
        LOBYTE(v17) = v75;
        return v17 & 1;
      }
    }
    else if (!v71)
    {
      goto LABEL_80;
    }
LABEL_78:
    LOBYTE(v17) = 0;
  }
  return v17 & 1;
}

uint64_t sub_1D27040B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_1D2ADB628();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = type metadata accessor for UrsaResponse(0);
  uint64_t v12 = v11;
  uint64_t v13 = *(int *)(v11 + 24);
  int v14 = *((unsigned __int8 *)a1 + v13);
  int v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 2)
  {
    if (v15 != 2) {
      goto LABEL_18;
    }
  }
  else if (v15 == 2 || ((((v15 & 1) == 0) ^ v14) & 1) == 0)
  {
    goto LABEL_18;
  }
  uint64_t v16 = *(int *)(v11 + 28);
  int v17 = (uint64_t *)((char *)a1 + v16);
  uint64_t v18 = *(uint64_t *)((char *)a1 + v16 + 8);
  uint64_t v19 = (uint64_t *)((char *)a2 + v16);
  uint64_t v20 = v19[1];
  if (!v18)
  {
    if (v20) {
      goto LABEL_18;
    }
LABEL_15:
    if (sub_1D2703AA8(*a1, *a2))
    {
      uint64_t v23 = *(int *)(v12 + 32);
      char v24 = (_DWORD *)((char *)a1 + v23);
      char v25 = *((unsigned char *)a1 + v23 + 4);
      uint64_t v26 = (_DWORD *)((char *)a2 + v23);
      int v27 = *((unsigned __int8 *)a2 + v23 + 4);
      if (v25)
      {
        if (!v27) {
          goto LABEL_18;
        }
      }
      else
      {
        if (*v24 != *v26) {
          LOBYTE(v27) = 1;
        }
        if (v27) {
          goto LABEL_18;
        }
      }
      char v29 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v29(v10, (char *)a1 + *(int *)(v12 + 20), v4);
      v29(v8, (char *)a2 + *(int *)(v12 + 20), v4);
      sub_1D2704654(&qword_1EA694790, MEMORY[0x1E4F70E60]);
      char v22 = sub_1D2ADB7C8();
      uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
      v30(v8, v4);
      v30(v10, v4);
      return v22 & 1;
    }
LABEL_18:
    char v22 = 0;
    return v22 & 1;
  }
  if (!v20) {
    goto LABEL_18;
  }
  if (*v17 == *v19 && v18 == v20) {
    goto LABEL_15;
  }
  char v22 = 0;
  if (sub_1D2ADBA48()) {
    goto LABEL_15;
  }
  return v22 & 1;
}

uint64_t sub_1D2704318(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D2ADB628();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v11 = (int *)type metadata accessor for UrsaRequest(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  int v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  if (!v14)
  {
    if (v16) {
      goto LABEL_50;
    }
    goto LABEL_10;
  }
  if (!v16) {
    goto LABEL_50;
  }
  BOOL v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (char v18 = 0, (sub_1D2ADBA48() & 1) != 0))
  {
LABEL_10:
    uint64_t v19 = v11[6];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = *(void *)(a1 + v19 + 8);
    char v22 = (void *)(a2 + v19);
    uint64_t v23 = v22[1];
    if (v21)
    {
      if (!v23) {
        goto LABEL_50;
      }
      if (*v20 != *v22 || v21 != v23)
      {
        char v18 = 0;
        if ((sub_1D2ADBA48() & 1) == 0) {
          return v18 & 1;
        }
      }
    }
    else if (v23)
    {
      goto LABEL_50;
    }
    uint64_t v25 = v11[7];
    uint64_t v26 = (void *)(a1 + v25);
    uint64_t v27 = *(void *)(a1 + v25 + 8);
    char v28 = (void *)(a2 + v25);
    uint64_t v29 = v28[1];
    if (v27)
    {
      if (!v29) {
        goto LABEL_50;
      }
      if (*v26 != *v28 || v27 != v29)
      {
        char v18 = 0;
        if ((sub_1D2ADBA48() & 1) == 0) {
          return v18 & 1;
        }
      }
    }
    else if (v29)
    {
      goto LABEL_50;
    }
    uint64_t v31 = v11[8];
    uint64_t v32 = (void *)(a1 + v31);
    uint64_t v33 = *(void *)(a1 + v31 + 8);
    uint64_t v34 = (void *)(a2 + v31);
    uint64_t v35 = v34[1];
    if (v33)
    {
      if (!v35) {
        goto LABEL_50;
      }
      if (*v32 != *v34 || v33 != v35)
      {
        char v18 = 0;
        if ((sub_1D2ADBA48() & 1) == 0) {
          return v18 & 1;
        }
      }
    }
    else if (v35)
    {
      goto LABEL_50;
    }
    uint64_t v37 = v11[9];
    uint64_t v38 = (void *)(a1 + v37);
    uint64_t v39 = *(void *)(a1 + v37 + 8);
    uint64_t v40 = (void *)(a2 + v37);
    uint64_t v41 = v40[1];
    if (v39)
    {
      if (!v41) {
        goto LABEL_50;
      }
      if (*v38 != *v40 || v39 != v41)
      {
        char v18 = 0;
        if ((sub_1D2ADBA48() & 1) == 0) {
          return v18 & 1;
        }
      }
    }
    else if (v41)
    {
      goto LABEL_50;
    }
    uint64_t v42 = v11[10];
    int v43 = (double *)(a1 + v42);
    char v44 = *(unsigned char *)(a1 + v42 + 8);
    uint64_t v45 = (double *)(a2 + v42);
    int v46 = *(unsigned __int8 *)(a2 + v42 + 8);
    if (v44)
    {
      if (v46)
      {
LABEL_46:
        char v47 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v47(v10, a1, v4);
        v47(v8, a2, v4);
        sub_1D2704654(&qword_1EA694790, MEMORY[0x1E4F70E60]);
        char v18 = sub_1D2ADB7C8();
        unint64_t v48 = *(void (**)(char *, uint64_t))(v5 + 8);
        v48(v8, v4);
        v48(v10, v4);
        return v18 & 1;
      }
    }
    else
    {
      if (*v43 != *v45) {
        LOBYTE(v46) = 1;
      }
      if ((v46 & 1) == 0) {
        goto LABEL_46;
      }
    }
LABEL_50:
    char v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1D2704654(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D270469C()
{
  return sub_1D2704654(&qword_1EA694738, (void (*)(uint64_t))type metadata accessor for UrsaRequest);
}

uint64_t sub_1D27046E4()
{
  return sub_1D2704654(&qword_1EA694740, (void (*)(uint64_t))type metadata accessor for UrsaRequest);
}

uint64_t sub_1D270472C()
{
  return sub_1D2704654(&qword_1EA694718, (void (*)(uint64_t))type metadata accessor for UrsaRequest);
}

uint64_t sub_1D2704774()
{
  return sub_1D2704654(&qword_1EA694748, (void (*)(uint64_t))type metadata accessor for UrsaRequest);
}

uint64_t sub_1D27047BC()
{
  return sub_1D2704654(&qword_1EA694750, (void (*)(uint64_t))type metadata accessor for UrsaResponse);
}

uint64_t sub_1D2704804()
{
  return sub_1D2704654(&qword_1EA694758, (void (*)(uint64_t))type metadata accessor for UrsaResponse);
}

uint64_t sub_1D270484C()
{
  return sub_1D2704654(&qword_1EA694728, (void (*)(uint64_t))type metadata accessor for UrsaResponse);
}

uint64_t sub_1D2704894()
{
  return sub_1D2704654(&qword_1EA694760, (void (*)(uint64_t))type metadata accessor for UrsaResponse);
}

uint64_t sub_1D27048DC()
{
  return sub_1D2704654(&qword_1EA694768, (void (*)(uint64_t))type metadata accessor for UrsaIssue);
}

uint64_t sub_1D2704924()
{
  return sub_1D2704654(&qword_1EA694720, (void (*)(uint64_t))type metadata accessor for UrsaIssue);
}

uint64_t sub_1D270496C()
{
  return sub_1D2704654(&qword_1EA694730, (void (*)(uint64_t))type metadata accessor for UrsaIssue);
}

uint64_t sub_1D27049B4()
{
  return sub_1D2704654(&qword_1EA694770, (void (*)(uint64_t))type metadata accessor for UrsaIssue);
}

uint64_t *sub_1D27049FC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1D2ADB628();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    char v18 = (uint64_t *)((char *)a1 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    void *v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (uint64_t *)((char *)a1 + v17);
    char v22 = (uint64_t *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = a3[9];
    uint64_t v25 = a3[10];
    uint64_t v26 = (uint64_t *)((char *)a1 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    void *v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = (char *)a1 + v25;
    uint64_t v30 = (char *)a2 + v25;
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1D2704B5C(uint64_t a1)
{
  uint64_t v2 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D2704C14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  char v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (void *)(a1 + v16);
  uint64_t v21 = (void *)(a2 + v16);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v23);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  void *v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = a1 + v24;
  uint64_t v29 = a2 + v24;
  *(void *)uint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D2704D24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  char v18 = (void *)(a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  *(unsigned char *)(v23 + 8) = *((unsigned char *)v24 + 8);
  *(void *)uint64_t v23 = v25;
  return a1;
}

uint64_t sub_1D2704E8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  return a1;
}

uint64_t sub_1D2704F48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  char v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  void *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  void *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[10];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(void *)uint64_t v33 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  return a1;
}

uint64_t sub_1D2705060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D2705074);
}

uint64_t sub_1D2705074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D2ADB628();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1D2705144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D2705158);
}

uint64_t sub_1D2705158(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1D2ADB628();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_1D2705218()
{
  uint64_t result = sub_1D2ADB628();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1D27052C0(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1D2ADB628();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *((unsigned char *)v7 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v14 = (void *)((char *)v7 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[8];
    char v18 = (char *)v7 + v17;
    uint64_t v19 = (char *)a2 + v17;
    v18[4] = v19[4];
    *(_DWORD *)char v18 = *(_DWORD *)v19;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1D27053F0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

void *sub_1D2705480(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D2ADB628();
  unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1D2705564(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D2ADB628();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  int v16 = *(_DWORD *)v15;
  v14[4] = v15[4];
  *(_DWORD *)uint64_t v14 = v16;
  return a1;
}

void *sub_1D2705654(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D2ADB628();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  v12[4] = v13[4];
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  return a1;
}

void *sub_1D2705710(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D2ADB628();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[8];
  int v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(_DWORD *)int v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  return a1;
}

uint64_t sub_1D27057E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D27057F8);
}

uint64_t sub_1D27057F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1D2ADB628();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1D27058A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D27058BC);
}

void *sub_1D27058BC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1D2ADB628();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1D2705964()
{
  uint64_t result = sub_1D2ADB628();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1D2705A1C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v47 = *a2;
    *a1 = *a2;
    a1 = (void *)(v47 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1D2ADB628();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    int v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)int v16 = *(void *)v17;
    v16[8] = v17[8];
    char v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    v18[8] = v19[8];
    *(void *)char v18 = *(void *)v19;
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = (void *)((char *)a1 + v20);
    uint64_t v23 = (void *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    void *v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = (void *)((char *)a1 + v21);
    uint64_t v26 = (void *)((char *)a2 + v21);
    uint64_t v27 = v26[1];
    void *v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    uint64_t v29 = (char *)a1 + v28;
    uint64_t v30 = (char *)a2 + v28;
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = a3[13];
    uint64_t v32 = a3[14];
    uint64_t v33 = (void *)((char *)a1 + v31);
    uint64_t v34 = (void *)((char *)a2 + v31);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = (void *)((char *)a1 + v32);
    uint64_t v37 = (void *)((char *)a2 + v32);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = a3[15];
    uint64_t v40 = a3[16];
    uint64_t v41 = (void *)((char *)a1 + v39);
    uint64_t v42 = (void *)((char *)a2 + v39);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    char v44 = (void *)((char *)a1 + v40);
    uint64_t v45 = (void *)((char *)a2 + v40);
    uint64_t v46 = v45[1];
    *char v44 = *v45;
    v44[1] = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1D2705C08(uint64_t a1)
{
  uint64_t v2 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D2705CD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)(a1 + v19);
  uint64_t v22 = (void *)(a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = (void *)(a1 + v20);
  uint64_t v25 = (void *)(a2 + v20);
  uint64_t v26 = v25[1];
  void *v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  *(void *)uint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  uint64_t v30 = a3[13];
  uint64_t v31 = a3[14];
  uint64_t v32 = (void *)(a1 + v30);
  uint64_t v33 = (void *)(a2 + v30);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  v32[1] = v34;
  uint64_t v35 = (void *)(a1 + v31);
  uint64_t v36 = (void *)(a2 + v31);
  uint64_t v37 = v36[1];
  *uint64_t v35 = *v36;
  v35[1] = v37;
  uint64_t v38 = a3[15];
  uint64_t v39 = a3[16];
  uint64_t v40 = (void *)(a1 + v38);
  uint64_t v41 = (void *)(a2 + v38);
  uint64_t v42 = v41[1];
  *uint64_t v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = (void *)(a1 + v39);
  char v44 = (void *)(a2 + v39);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D2705E6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(unsigned char *)(v8 + 4) = *((unsigned char *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = v10;
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  LOBYTE(v10) = *(unsigned char *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = v10;
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  LOBYTE(v10) = *(unsigned char *)(v19 + 8);
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v10;
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  void *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v26 = a3[12];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  char v29 = *(unsigned char *)(v28 + 8);
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = v29;
  uint64_t v30 = a3[13];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[14];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[15];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (void *)(a2 + v36);
  *uint64_t v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[16];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  *uint64_t v40 = *v41;
  v40[1] = v41[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D270607C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  uint64_t v20 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  uint64_t v24 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  return a1;
}

uint64_t sub_1D27061B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = *(unsigned char *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  void *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(void *)uint64_t v30 = *(void *)v31;
  *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
  uint64_t v32 = a3[13];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (uint64_t *)(a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[14];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *uint64_t v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[15];
  uint64_t v43 = (void *)(a1 + v42);
  char v44 = (uint64_t *)(a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  *uint64_t v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[16];
  unint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (uint64_t *)(a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  *unint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D2706358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D270636C);
}

uint64_t sub_1D270636C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D2ADB628();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1D270643C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D2706450);
}

uint64_t sub_1D2706450(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1D2ADB628();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36) + 8) = a2;
  }
  return result;
}

uint64_t sub_1D2706510()
{
  uint64_t result = sub_1D2ADB628();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1D270667C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UrsaIssue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D27066E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UrsaIssue(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1D270673C()
{
  qword_1EA695F68 = 0x6F6A614D61737255;
  qword_1EA695F70 = 0xEF302E315F645F72;
}

void sub_1D2706770()
{
  qword_1EA695F80 = 0x6F6A614D61737255;
  qword_1EA695F88 = 0xEF302E315F705F72;
}

uint64_t variable initialization expression of UrsaClient.currentTask()
{
  return 0;
}

id UrsaClient.__allocating_init(_:)(char a1)
{
  id v3 = objc_allocWithZone(v1);
  return UrsaClient.init(_:)(a1);
}

id UrsaClient.init(_:)(char a1)
{
  *(void *)&v1[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask] = 0;
  id v3 = v1;
  uint64_t v4 = (void *)sub_1D2ADB7D8();
  id v5 = objc_msgSend(self, sel_containerWithIdentifier_, v4);

  *(void *)&v3[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_container] = v5;
  if ((a1 & 1) == 0)
  {
    uint64_t v8 = qword_1EA695F78;
    id v9 = v5;
    if (v8 == -1) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  uint64_t v6 = qword_1EA695F60;
  id v7 = v5;
  if (v6 != -1) {
LABEL_11:
  }
    swift_once();
LABEL_5:
  swift_bridgeObjectRetain();
  unint64_t v10 = (void *)sub_1D2ADB7D8();
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v5, sel_codeServiceWithName_, v10);

  uint64_t v12 = OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_codeService;
  *(void *)&v3[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_codeService] = v11;
  *(void *)&v3[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_client] = nullsub_1(v11);
  if (qword_1EA695F90 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_1D2ADB798();
  __swift_project_value_buffer(v13, (uint64_t)qword_1EA6967E8);
  uint64_t v14 = v3;
  uint64_t v15 = sub_1D2ADB778();
  os_log_type_t v16 = sub_1D2ADB938();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v25 = v18;
    id v19 = objc_msgSend(*(id *)&v3[v12], sel_serviceName);
    uint64_t v20 = sub_1D2ADB7E8();
    unint64_t v22 = v21;

    sub_1D270AB54(v20, v22, &v25);
    sub_1D2ADB968();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1D2690000, v15, v16, "running %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D942ABA0](v18, -1, -1);
    MEMORY[0x1D942ABA0](v17, -1, -1);
  }
  else
  {
  }
  uint64_t v23 = (objc_class *)type metadata accessor for UrsaClient();
  v26.receiver = v14;
  v26.super_class = v23;
  return objc_msgSendSuper2(&v26, sel_init);
}

uint64_t UrsaClient.submitUrsa(_:_:_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v40 = a8;
  uint64_t v39 = a7;
  uint64_t v38 = a6;
  uint64_t v37 = a5;
  uint64_t v43 = a12;
  uint64_t v44 = a13;
  uint64_t v36 = a11;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6947C8);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UrsaRequest(0);
  uint64_t v41 = *(void *)(v21 - 8);
  uint64_t v22 = *(void *)(v41 + 64);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  objc_super v26 = (char *)&v35 - v25;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v49 = v37;
  uint64_t v50 = v38;
  uint64_t v51 = v39;
  uint64_t v52 = v40;
  double v53 = a9;
  uint64_t v54 = a10;
  uint64_t v55 = v36;
  sub_1D270C71C(&qword_1EA694740, (void (*)(uint64_t))type metadata accessor for UrsaRequest);
  sub_1D2ADB6E8();
  uint64_t v27 = sub_1D2ADB8E8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v20, 1, 1, v27);
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v42;
  swift_unknownObjectWeakInit();
  sub_1D270B62C((uint64_t)v26, (uint64_t)v24, type metadata accessor for UrsaRequest);
  unint64_t v30 = (*(unsigned __int8 *)(v41 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  uint64_t v31 = (void *)swift_allocObject();
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = v28;
  sub_1D270C764((uint64_t)v24, (uint64_t)v31 + v30, type metadata accessor for UrsaRequest);
  uint64_t v32 = (void *)((char *)v31 + ((v22 + v30 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v33 = v44;
  *uint64_t v32 = v43;
  v32[1] = v33;
  swift_retain();
  *(void *)(v29 + OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask) = sub_1D2709610((uint64_t)v20, (uint64_t)&unk_1EA6947D8, (uint64_t)v31);
  swift_release();
  return sub_1D270B694((uint64_t)v26, type metadata accessor for UrsaRequest);
}

uint64_t sub_1D2706EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[23] = a6;
  v7[24] = a7;
  v7[21] = a4;
  v7[22] = a5;
  uint64_t v8 = sub_1D2ADB798();
  v7[25] = v8;
  v7[26] = *(void *)(v8 - 8);
  v7[27] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UrsaResponse(0);
  v7[28] = v9;
  v7[29] = *(void *)(v9 - 8);
  v7[30] = swift_task_alloc();
  v7[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694828);
  v7[32] = swift_task_alloc();
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  v7[35] = swift_task_alloc();
  v7[36] = swift_task_alloc();
  v7[37] = swift_task_alloc();
  v7[38] = type metadata accessor for UrsaRequest(0);
  v7[39] = swift_task_alloc();
  v7[40] = swift_task_alloc();
  v7[41] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6947C8);
  v7[42] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D27070E0, 0, 0);
}

uint64_t sub_1D27070E0()
{
  v114 = v0;
  unint64_t v1 = v0 + 21;
  uint64_t v2 = v0[42];
  uint64_t v3 = v0[21] + 16;
  uint64_t v4 = sub_1D2ADB8E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = swift_allocObject();
  swift_beginAccess();
  uint64_t v6 = (void *)MEMORY[0x1D942AC50](v3);
  swift_unknownObjectWeakInit();

  id v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v5;
  v0[43] = sub_1D27091F4(v2, (uint64_t)&unk_1EA694838, (uint64_t)v7);
  if (qword_1EA695F90 != -1) {
    swift_once();
  }
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[22];
  v0[44] = __swift_project_value_buffer(v0[25], (uint64_t)qword_1EA6967E8);
  sub_1D270B62C(v9, v8, type metadata accessor for UrsaRequest);
  unint64_t v10 = sub_1D2ADB778();
  os_log_type_t v11 = sub_1D2ADB938();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[41];
  if (v12)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v113[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    sub_1D270C71C(&qword_1EA694740, (void (*)(uint64_t))type metadata accessor for UrsaRequest);
    uint64_t v16 = sub_1D2ADB6C8();
    v0[20] = sub_1D270AB54(v16, v17, v113);
    sub_1D2ADB968();
    swift_bridgeObjectRelease();
    sub_1D270B694(v13, type metadata accessor for UrsaRequest);
    _os_log_impl(&dword_1D2690000, v10, v11, "Running request: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D942ABA0](v15, -1, -1);
    MEMORY[0x1D942ABA0](v14, -1, -1);
  }
  else
  {
    sub_1D270B694(v0[41], type metadata accessor for UrsaRequest);
  }

  uint64_t v18 = *v1 + 16;
  swift_beginAccess();
  uint64_t v19 = MEMORY[0x1D942AC50](v18);
  if (v19)
  {
    uint64_t v20 = (void *)v19;
    uint64_t v21 = *(void **)(v19 + OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_client);
    v0[45] = v21;
    id v22 = v21;

    uint64_t v23 = (void *)swift_task_alloc();
    v0[46] = v23;
    void *v23 = v0;
    v23[1] = sub_1D2708094;
    uint64_t v24 = v0[37];
    uint64_t v25 = v0[22];
    return sub_1D270CCA8(v24, v25, (uint64_t)v22);
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[29] + 56))(v0[37], 1, 1, v0[28]);
  sub_1D2ADB908();
  uint64_t v27 = v0[36];
  uint64_t v28 = v0[28];
  uint64_t v29 = v0[29];
  sub_1D270C650(v0[37], v27, &qword_1EA694828);
  unint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v27, 1, v28);
  uint64_t v32 = v0[36];
  if (v31 == 1)
  {
    sub_1D270C5F4(v32, &qword_1EA694828);
LABEL_16:
    uint64_t v43 = v0[35];
    uint64_t v44 = v0[28];
    sub_1D270C650(v0[37], v43, &qword_1EA694828);
    int v45 = v30(v43, 1, v44);
    uint64_t v46 = v0[44];
    if (v45 == 1)
    {
      v111 = v30;
      uint64_t v47 = v0[39];
      uint64_t v48 = v0[37];
      uint64_t v49 = v0[34];
      uint64_t v51 = v0[26];
      uint64_t v50 = v0[27];
      uint64_t v52 = v0[25];
      uint64_t v53 = v0[22];
      sub_1D270C5F4(v0[35], &qword_1EA694828);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v50, v46, v52);
      sub_1D270B62C(v53, v47, type metadata accessor for UrsaRequest);
      sub_1D270C650(v48, v49, &qword_1EA694828);
      uint64_t v54 = sub_1D2ADB778();
      os_log_type_t v55 = sub_1D2ADB948();
      BOOL v56 = os_log_type_enabled(v54, v55);
      uint64_t v57 = v0[39];
      uint64_t v58 = v0[34];
      if (v56)
      {
        os_log_type_t v110 = v55;
        uint64_t v59 = v0[33];
        uint64_t v105 = v0[28];
        uint64_t v60 = swift_slowAlloc();
        uint64_t v108 = swift_slowAlloc();
        v113[0] = v108;
        *(_DWORD *)uint64_t v60 = 136315394;
        uint64_t v61 = sub_1D27015C8();
        v0[11] = sub_1D270AB54(v61, v62, v113);
        sub_1D2ADB968();
        swift_bridgeObjectRelease();
        sub_1D270B694(v57, type metadata accessor for UrsaRequest);
        *(_WORD *)(v60 + 12) = 2080;
        sub_1D270C650(v58, v59, &qword_1EA694828);
        int v63 = v111(v59, 1, v105);
        uint64_t v64 = v0[33];
        if (v63 == 1)
        {
          uint64_t v65 = 0x206E776F6E6B6E55;
          sub_1D270C5F4(v0[33], &qword_1EA694828);
          unint64_t v66 = 0xEE006E6F73616572;
        }
        else
        {
          uint64_t v65 = sub_1D2701678();
          unint64_t v66 = v88;
          sub_1D270B694(v64, type metadata accessor for UrsaResponse);
        }
        uint64_t v89 = v0[34];
        uint64_t v90 = v0[26];
        uint64_t v104 = v0[25];
        uint64_t v107 = v0[27];
        v0[12] = sub_1D270AB54(v65, v66, v113);
        sub_1D2ADB968();
        swift_bridgeObjectRelease();
        sub_1D270C5F4(v89, &qword_1EA694828);
        _os_log_impl(&dword_1D2690000, v54, v110, "response for %s failed with: %s", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D942ABA0](v108, -1, -1);
        MEMORY[0x1D942ABA0](v60, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v107, v104);
      }
      else
      {
        uint64_t v80 = v0[26];
        uint64_t v79 = v0[27];
        uint64_t v81 = v0[25];
        sub_1D270B694(v0[39], type metadata accessor for UrsaRequest);
        sub_1D270C5F4(v58, &qword_1EA694828);

        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
      }
      uint64_t v91 = v0[32];
      uint64_t v92 = v0[28];
      sub_1D270C650(v0[37], v91, &qword_1EA694828);
      int v93 = v111(v91, 1, v92);
      uint64_t v94 = v0[32];
      if (v93 == 1)
      {
        uint64_t v95 = 0x206E776F6E6B6E55;
        sub_1D270C5F4(v0[32], &qword_1EA694828);
        unint64_t v96 = 0xEE006E6F73616572;
      }
      else
      {
        uint64_t v95 = sub_1D2701678();
        unint64_t v96 = v97;
        sub_1D270B694(v94, type metadata accessor for UrsaResponse);
      }
      uint64_t v82 = v0[37];
      sub_1D270C6B4();
      v83 = (void *)swift_allocError();
      uint64_t *v98 = v95;
      v98[1] = v96;
    }
    else
    {
      uint64_t v67 = v0[40];
      uint64_t v68 = v0[35];
      uint64_t v69 = v0[22];
      int v70 = sub_1D2701738();
      sub_1D270B694(v68, type metadata accessor for UrsaResponse);
      sub_1D270B62C(v69, v67, type metadata accessor for UrsaRequest);
      uint64_t v71 = sub_1D2ADB778();
      os_log_type_t v72 = sub_1D2ADB948();
      BOOL v73 = os_log_type_enabled(v71, v72);
      uint64_t v74 = v0[40];
      if (v73)
      {
        uint64_t v75 = swift_slowAlloc();
        v106 = (void *)swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        v113[0] = v109;
        *(_DWORD *)uint64_t v75 = 136315394;
        uint64_t v76 = sub_1D27015C8();
        v0[15] = sub_1D270AB54(v76, v77, v113);
        sub_1D2ADB968();
        swift_bridgeObjectRelease();
        sub_1D270B694(v74, type metadata accessor for UrsaRequest);
        *(_WORD *)(v75 + 12) = 2112;
        type metadata accessor for CKError(0);
        v0[17] = v70;
        sub_1D270A798(MEMORY[0x1E4FBC860]);
        sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
        sub_1D2ADB5C8();
        uint64_t v78 = _swift_stdlib_bridgeErrorToNSError();
        v0[18] = v78;
        sub_1D2ADB968();
        void *v106 = v78;
        _os_log_impl(&dword_1D2690000, v71, v72, "response for %s failed with: %@", (uint8_t *)v75, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694848);
        swift_arrayDestroy();
        MEMORY[0x1D942ABA0](v106, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1D942ABA0](v109, -1, -1);
        MEMORY[0x1D942ABA0](v75, -1, -1);
      }
      else
      {
        sub_1D270B694(v0[40], type metadata accessor for UrsaRequest);
      }

      uint64_t v82 = v0[37];
      type metadata accessor for CKError(0);
      v0[14] = v70;
      sub_1D270A798(MEMORY[0x1E4FBC860]);
      sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
      sub_1D2ADB5C8();
      v83 = (void *)v0[13];
    }
    swift_willThrow();
    sub_1D270C5F4(v82, &qword_1EA694828);
    v99 = (void (*)(void *, void))v0[23];
    id v100 = v83;
    v99(v83, 0);

    goto LABEL_34;
  }
  sub_1D270C764(v32, v0[31], type metadata accessor for UrsaResponse);
  if ((sub_1D2701630() & 1) == 0)
  {
    sub_1D270B694(v0[31], type metadata accessor for UrsaResponse);
    goto LABEL_16;
  }
  sub_1D270B62C(v0[31], v0[30], type metadata accessor for UrsaResponse);
  uint64_t v33 = sub_1D2ADB778();
  os_log_type_t v34 = sub_1D2ADB938();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v36 = v0[30];
  if (v35)
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v112 = swift_slowAlloc();
    v113[0] = v112;
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v38 = sub_1D270937C();
    unint64_t v39 = sub_1D270C7CC();
    uint64_t v40 = MEMORY[0x1D9428300](v38, v39);
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    v0[19] = sub_1D270AB54(v40, v42, v113);
    sub_1D2ADB968();
    swift_bridgeObjectRelease();
    sub_1D270B694(v36, type metadata accessor for UrsaResponse);
    _os_log_impl(&dword_1D2690000, v33, v34, "response prior to serialization: %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D942ABA0](v112, -1, -1);
    MEMORY[0x1D942ABA0](v37, -1, -1);
  }
  else
  {
    sub_1D270B694(v0[30], type metadata accessor for UrsaResponse);
  }

  uint64_t v84 = v0[37];
  uint64_t v85 = v0[31];
  v86 = (void (*)(void, void *))v0[23];
  sub_1D270937C();
  sub_1D270C7CC();
  v87 = (void *)sub_1D2ADB858();
  swift_bridgeObjectRelease();
  v86(0, v87);

  sub_1D270B694(v85, type metadata accessor for UrsaResponse);
  sub_1D270C5F4(v84, &qword_1EA694828);
LABEL_34:
  uint64_t v101 = *v1 + 16;
  swift_beginAccess();
  v102 = (char *)MEMORY[0x1D942AC50](v101);
  if (v102)
  {
    *(void *)&v102[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask] = 0;

    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694808);
  sub_1D2ADB8F8();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v103 = (uint64_t (*)(void))v0[1];
  return v103();
}

uint64_t sub_1D2708094()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1D2708D9C;
  }
  else
  {

    uint64_t v3 = sub_1D27081B0;
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

uint64_t sub_1D27081B0()
{
  uint64_t v91 = v0;
  unint64_t v1 = (void *)v0[47];
  (*(void (**)(void, void, uint64_t, void))(v0[29] + 56))(v0[37], 0, 1, v0[28]);
  sub_1D2ADB908();
  uint64_t v2 = v0[37];
  if (v1)
  {
    uint64_t v3 = v1;
LABEL_27:
    sub_1D270C5F4(v2, &qword_1EA694828);
    uint64_t v76 = (void (*)(void *, void))v0[23];
    id v77 = v3;
    v76(v3, 0);

    goto LABEL_28;
  }
  uint64_t v4 = v0[36];
  uint64_t v6 = v0[28];
  uint64_t v5 = v0[29];
  sub_1D270C650(v2, v4, &qword_1EA694828);
  id v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  int v8 = v7(v4, 1, v6);
  uint64_t v9 = v0[36];
  if (v8 == 1)
  {
    sub_1D270C5F4(v9, &qword_1EA694828);
LABEL_9:
    uint64_t v20 = v0[35];
    uint64_t v21 = v0[28];
    sub_1D270C650(v0[37], v20, &qword_1EA694828);
    int v22 = v7(v20, 1, v21);
    uint64_t v23 = v0[44];
    if (v22 == 1)
    {
      unint64_t v88 = v7;
      uint64_t v24 = v0[39];
      uint64_t v25 = v0[37];
      uint64_t v26 = v0[34];
      uint64_t v28 = v0[26];
      uint64_t v27 = v0[27];
      uint64_t v29 = v0[25];
      uint64_t v30 = v0[22];
      sub_1D270C5F4(v0[35], &qword_1EA694828);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v23, v29);
      sub_1D270B62C(v30, v24, type metadata accessor for UrsaRequest);
      sub_1D270C650(v25, v26, &qword_1EA694828);
      int v31 = sub_1D2ADB778();
      os_log_type_t v32 = sub_1D2ADB948();
      BOOL v33 = os_log_type_enabled(v31, v32);
      uint64_t v34 = v0[39];
      uint64_t v35 = v0[34];
      if (v33)
      {
        os_log_type_t v87 = v32;
        uint64_t v36 = v0[33];
        uint64_t v82 = v0[28];
        uint64_t v37 = swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        v90[0] = v85;
        *(_DWORD *)uint64_t v37 = 136315394;
        uint64_t v38 = sub_1D27015C8();
        v0[11] = sub_1D270AB54(v38, v39, v90);
        sub_1D2ADB968();
        swift_bridgeObjectRelease();
        sub_1D270B694(v34, type metadata accessor for UrsaRequest);
        *(_WORD *)(v37 + 12) = 2080;
        sub_1D270C650(v35, v36, &qword_1EA694828);
        int v40 = v88(v36, 1, v82);
        uint64_t v41 = v0[33];
        if (v40 == 1)
        {
          uint64_t v42 = 0x206E776F6E6B6E55;
          sub_1D270C5F4(v0[33], &qword_1EA694828);
          unint64_t v43 = 0xEE006E6F73616572;
        }
        else
        {
          uint64_t v42 = sub_1D2701678();
          unint64_t v43 = v64;
          sub_1D270B694(v41, type metadata accessor for UrsaResponse);
        }
        uint64_t v65 = v0[34];
        uint64_t v66 = v0[26];
        uint64_t v84 = v0[27];
        uint64_t v67 = v0[25];
        v0[12] = sub_1D270AB54(v42, v43, v90);
        sub_1D2ADB968();
        swift_bridgeObjectRelease();
        sub_1D270C5F4(v65, &qword_1EA694828);
        _os_log_impl(&dword_1D2690000, v31, v87, "response for %s failed with: %s", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D942ABA0](v85, -1, -1);
        MEMORY[0x1D942ABA0](v37, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v84, v67);
      }
      else
      {
        uint64_t v57 = v0[26];
        uint64_t v56 = v0[27];
        uint64_t v58 = v0[25];
        sub_1D270B694(v0[39], type metadata accessor for UrsaRequest);
        sub_1D270C5F4(v35, &qword_1EA694828);

        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
      }
      uint64_t v68 = v0[32];
      uint64_t v69 = v0[28];
      sub_1D270C650(v0[37], v68, &qword_1EA694828);
      int v70 = v88(v68, 1, v69);
      uint64_t v71 = v0[32];
      if (v70 == 1)
      {
        uint64_t v72 = 0x206E776F6E6B6E55;
        sub_1D270C5F4(v0[32], &qword_1EA694828);
        unint64_t v73 = 0xEE006E6F73616572;
      }
      else
      {
        uint64_t v72 = sub_1D2701678();
        unint64_t v73 = v74;
        sub_1D270B694(v71, type metadata accessor for UrsaResponse);
      }
      uint64_t v59 = v0[37];
      sub_1D270C6B4();
      uint64_t v3 = (void *)swift_allocError();
      *uint64_t v75 = v72;
      v75[1] = v73;
    }
    else
    {
      uint64_t v44 = v0[40];
      uint64_t v45 = v0[35];
      uint64_t v46 = v0[22];
      int v47 = sub_1D2701738();
      sub_1D270B694(v45, type metadata accessor for UrsaResponse);
      sub_1D270B62C(v46, v44, type metadata accessor for UrsaRequest);
      uint64_t v48 = sub_1D2ADB778();
      os_log_type_t v49 = sub_1D2ADB948();
      BOOL v50 = os_log_type_enabled(v48, v49);
      uint64_t v51 = v0[40];
      if (v50)
      {
        uint64_t v52 = swift_slowAlloc();
        v83 = (void *)swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        v90[0] = v86;
        *(_DWORD *)uint64_t v52 = 136315394;
        uint64_t v53 = sub_1D27015C8();
        v0[15] = sub_1D270AB54(v53, v54, v90);
        sub_1D2ADB968();
        swift_bridgeObjectRelease();
        sub_1D270B694(v51, type metadata accessor for UrsaRequest);
        *(_WORD *)(v52 + 12) = 2112;
        type metadata accessor for CKError(0);
        v0[17] = v47;
        sub_1D270A798(MEMORY[0x1E4FBC860]);
        sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
        sub_1D2ADB5C8();
        uint64_t v55 = _swift_stdlib_bridgeErrorToNSError();
        v0[18] = v55;
        sub_1D2ADB968();
        void *v83 = v55;
        _os_log_impl(&dword_1D2690000, v48, v49, "response for %s failed with: %@", (uint8_t *)v52, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694848);
        swift_arrayDestroy();
        MEMORY[0x1D942ABA0](v83, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1D942ABA0](v86, -1, -1);
        MEMORY[0x1D942ABA0](v52, -1, -1);
      }
      else
      {
        sub_1D270B694(v0[40], type metadata accessor for UrsaRequest);
      }

      uint64_t v59 = v0[37];
      type metadata accessor for CKError(0);
      v0[14] = v47;
      sub_1D270A798(MEMORY[0x1E4FBC860]);
      sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
      sub_1D2ADB5C8();
      uint64_t v3 = (void *)v0[13];
    }
    swift_willThrow();
    uint64_t v2 = v59;
    goto LABEL_27;
  }
  sub_1D270C764(v9, v0[31], type metadata accessor for UrsaResponse);
  if ((sub_1D2701630() & 1) == 0)
  {
    sub_1D270B694(v0[31], type metadata accessor for UrsaResponse);
    goto LABEL_9;
  }
  sub_1D270B62C(v0[31], v0[30], type metadata accessor for UrsaResponse);
  unint64_t v10 = sub_1D2ADB778();
  os_log_type_t v11 = sub_1D2ADB938();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[30];
  if (v12)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    v90[0] = v89;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v15 = sub_1D270937C();
    unint64_t v16 = sub_1D270C7CC();
    uint64_t v17 = MEMORY[0x1D9428300](v15, v16);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    v0[19] = sub_1D270AB54(v17, v19, v90);
    sub_1D2ADB968();
    swift_bridgeObjectRelease();
    sub_1D270B694(v13, type metadata accessor for UrsaResponse);
    _os_log_impl(&dword_1D2690000, v10, v11, "response prior to serialization: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D942ABA0](v89, -1, -1);
    MEMORY[0x1D942ABA0](v14, -1, -1);
  }
  else
  {
    sub_1D270B694(v0[30], type metadata accessor for UrsaResponse);
  }

  uint64_t v60 = v0[37];
  uint64_t v61 = v0[31];
  unint64_t v62 = (void (*)(void, void *))v0[23];
  sub_1D270937C();
  sub_1D270C7CC();
  int v63 = (void *)sub_1D2ADB858();
  swift_bridgeObjectRelease();
  v62(0, v63);

  sub_1D270B694(v61, type metadata accessor for UrsaResponse);
  sub_1D270C5F4(v60, &qword_1EA694828);
LABEL_28:
  uint64_t v78 = v0[21] + 16;
  swift_beginAccess();
  uint64_t v79 = (char *)MEMORY[0x1D942AC50](v78);
  if (v79)
  {
    *(void *)&v79[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask] = 0;

    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694808);
  sub_1D2ADB8F8();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v80 = (uint64_t (*)(void))v0[1];
  return v80();
}

uint64_t sub_1D2708D9C()
{
  unint64_t v1 = *(void **)(v0 + 376);
  uint64_t v2 = *(void (**)(void *, void))(v0 + 184);
  id v3 = v1;
  v2(v1, 0);

  uint64_t v4 = *(void *)(v0 + 168) + 16;
  swift_beginAccess();
  uint64_t v5 = (char *)MEMORY[0x1D942AC50](v4);
  if (v5)
  {
    *(void *)&v5[OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask] = 0;

    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694808);
  sub_1D2ADB8F8();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1D2708F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 48) = v5;
  void *v5 = v4;
  v5[1] = sub_1D2709004;
  return MEMORY[0x1F4187DE0](300000000000);
}

uint64_t sub_1D2709004()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x1F4188298](sub_1D2709134, 0, 0);
  }
}

uint64_t sub_1D2709134()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x1D942AC50](v1);
  if (v2)
  {
    id v3 = v2;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x98))();
  }
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1D27091F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1D2ADB8E8();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1D2ADB8D8();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1D270C5F4(a1, &qword_1EA6947C8);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D2ADB8A8();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1D270937C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UrsaIssue(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UrsaResponse(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(*(void *)v1 + 16);
  sub_1D270B62C(v1, (uint64_t)v8, type metadata accessor for UrsaResponse);
  if (v9)
  {
    sub_1D270B694((uint64_t)v8, type metadata accessor for UrsaResponse);
  }
  else
  {
    uint64_t v10 = sub_1D2701630();
    sub_1D270B694((uint64_t)v8, type metadata accessor for UrsaResponse);
    if ((v10 & 1) == 0) {
      return MEMORY[0x1E4FBC860];
    }
  }
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v12 = *(void *)v1;
  uint64_t v13 = *(void *)(*(void *)v1 + 16);
  if (v13)
  {
    uint64_t v14 = v12 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v15 = *(void *)(v3 + 72);
    uint64_t v17 = v12;
    swift_bridgeObjectRetain();
    do
    {
      sub_1D270B62C(v14, (uint64_t)v5, type metadata accessor for UrsaIssue);
      sub_1D2709BC4();
      sub_1D2ADB7A8();
      uint64_t v16 = swift_bridgeObjectRelease();
      MEMORY[0x1D94282E0](v16);
      if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D2ADB888();
      }
      sub_1D2ADB898();
      sub_1D2ADB878();
      sub_1D270B694((uint64_t)v5, type metadata accessor for UrsaIssue);
      v14 += v15;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    return v18;
  }
  return result;
}

uint64_t sub_1D2709610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D2ADB8E8();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1D2ADB8D8();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1D270C5F4(a1, &qword_1EA6947C8);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D2ADB8A8();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

void sub_1D2709930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v4 = sub_1D2ADB5D8();
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = (id)v4;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

Swift::Void __swiftcall UrsaClient.cancel()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC21PowerlogLiteOperators10UrsaClient_currentTask))
  {
    swift_retain();
    sub_1D2ADB8F8();
    swift_release();
  }
}

id UrsaClient.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void UrsaClient.init()()
{
}

id UrsaClient.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UrsaClient();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D2709BC4()
{
  uint64_t v32 = 0;
  uint64_t v1 = sub_1D2ADBB28();
  uint64_t v29 = *(void *)(v1 - 8);
  uint64_t v30 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)&v47 + 1) = type metadata accessor for UrsaIssue(0);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v46);
  sub_1D270B62C(v0, (uint64_t)boxed_opaque_existential_0, type metadata accessor for UrsaIssue);
  sub_1D2ADBB08();
  uint64_t v28 = v3;
  uint64_t v5 = sub_1D2ADBB18();
  swift_retain();
  uint64_t v6 = sub_1D2ADB9B8();
  uint64_t v27 = v5;
  swift_release();
  uint64_t v31 = v6;
  sub_1D2ADBA38();
  if (*((void *)&v40 + 1))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      long long v36 = v38;
      v37[0] = v39;
      v37[1] = v40;
      unint64_t v9 = *((void *)&v38 + 1);
      uint64_t v8 = v38;
      long long v46 = v38;
      sub_1D270C380((uint64_t)v37, (uint64_t)&v47);
      if (!v9) {
        break;
      }
      unint64_t v10 = 0xE000000000000000;
      uint64_t v41 = 0;
      unint64_t v42 = 0xE000000000000000;
      uint64_t v11 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0) {
        uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v43 = v8;
      unint64_t v44 = v9;
      *(void *)&long long v45 = 0;
      *((void *)&v45 + 1) = v11;
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_1D2ADB828();
      if (v13)
      {
        uint64_t v14 = v12;
        uint64_t v15 = v13;
        do
        {
          if ((v15 != 0xE100000000000000 || v14 != 95) && (sub_1D2ADBA48() & 1) == 0) {
            MEMORY[0x1D94282A0](v14, v15);
          }
          swift_bridgeObjectRelease();
          uint64_t v14 = sub_1D2ADB828();
          uint64_t v15 = v16;
        }
        while (v16);
        uint64_t v8 = v41;
        unint64_t v10 = v42;
      }
      else
      {
        uint64_t v8 = 0;
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v47);
      if (v10 && (v8 == 0x466E776F6E6B6E75 && v10 == 0xED000073646C6569 || (sub_1D2ADBA48() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = 0;
        goto LABEL_23;
      }
LABEL_24:
      long long v46 = v36;
      sub_1D270C380((uint64_t)v37, (uint64_t)&v47);
      uint64_t v43 = v8;
      unint64_t v44 = v10;
      sub_1D270C320(&v47, &v45);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694810);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694800);
      if ((swift_dynamicCast() & 1) == 0)
      {
        long long v34 = 0u;
        long long v35 = 0u;
        long long v33 = 0u;
      }
      if (v32)
      {
        sub_1D270C5F4((uint64_t)&v36, &qword_1EA6947E8);
        swift_bridgeObjectRelease();
        swift_release();
        __break(1u);
        goto LABEL_40;
      }
      sub_1D270C5F4((uint64_t)&v36, &qword_1EA6947E8);
      if (*((void *)&v33 + 1))
      {
        long long v46 = v33;
        long long v47 = v34;
        long long v48 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = sub_1D270AA2C(0, v7[2] + 1, 1, v7);
        }
        unint64_t v18 = v7[2];
        unint64_t v17 = v7[3];
        if (v18 >= v17 >> 1) {
          uint64_t v7 = sub_1D270AA2C((void *)(v17 > 1), v18 + 1, 1, v7);
        }
        v7[2] = v18 + 1;
        unint64_t v19 = &v7[6 * v18];
        long long v20 = v46;
        long long v21 = v48;
        v19[3] = v47;
        v19[4] = v21;
        v19[2] = v20;
      }
      else
      {
        sub_1D270C5F4((uint64_t)&v33, &qword_1EA6947F0);
      }
      sub_1D2ADBA38();
      if (!*((void *)&v40 + 1)) {
        goto LABEL_34;
      }
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v47);
LABEL_23:
    unint64_t v10 = 0;
    goto LABEL_24;
  }
  uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
LABEL_34:
  swift_release();
  swift_release();
  if (v7[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6947E0);
    uint64_t v22 = sub_1D2ADBA18();
  }
  else
  {
    uint64_t v22 = MEMORY[0x1E4FBC868];
  }
  *(void *)&long long v46 = v22;
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = v32;
  sub_1D270B758(v23, 1, &v46);
  if (v24)
  {
LABEL_40:
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = v46;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
    return v25;
  }
  return result;
}

uint64_t sub_1D270A09C()
{
  uint64_t v0 = sub_1D2ADB798();
  __swift_allocate_value_buffer(v0, qword_1EA6967E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA6967E8);
  return sub_1D2ADB788();
}

uint64_t type metadata accessor for UrsaClient()
{
  return self;
}

uint64_t sub_1D270A130(uint64_t a1)
{
  uint64_t v2 = sub_1D270C71C(&qword_1EA694878, type metadata accessor for CKError);
  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_1D270A19C(uint64_t a1)
{
  uint64_t v2 = sub_1D270C71C(&qword_1EA694878, type metadata accessor for CKError);
  return MEMORY[0x1F40E6E10](a1, v2);
}

uint64_t sub_1D270A208(uint64_t a1)
{
  uint64_t v2 = sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
  return MEMORY[0x1F40E4480](a1, v2);
}

id sub_1D270A274()
{
  return *v0;
}

uint64_t sub_1D270A27C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1D270A284()
{
  return sub_1D2ADB7E8();
}

uint64_t sub_1D270A294(uint64_t a1)
{
  uint64_t v2 = sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
  return MEMORY[0x1F40E44F0](a1, v2);
}

uint64_t sub_1D270A300(uint64_t a1)
{
  uint64_t v2 = sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
  return MEMORY[0x1F40E44A8](a1, v2);
}

uint64_t sub_1D270A36C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
  id v5 = a1;
  return MEMORY[0x1F40E4498](v5, a2, v4);
}

uint64_t sub_1D270A3FC()
{
  id v1 = *v0;
  uint64_t v2 = sub_1D2ADB958();

  return v2;
}

uint64_t sub_1D270A434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
  return MEMORY[0x1F40E44D8](a1, a2, v4);
}

uint64_t sub_1D270A4B0()
{
  return sub_1D2ADBAF8();
}

void *sub_1D270A510@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1D270A520(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1D270A52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
  return MEMORY[0x1F40E44B8](a1, a2, a3, v6);
}

BOOL sub_1D270A5B0(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D270A5C4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1D270A6A0;
  return v6(a1);
}

uint64_t sub_1D270A6A0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_1D270A798(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6947E0);
  uint64_t v2 = sub_1D2ADBA18();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D270C650(v6, (uint64_t)&v15, &qword_1EA694800);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1D270BBBC(v15, v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1D270A8E4);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1D270C320(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D270A8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_1D2ADBA48() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_1D2ADBA48() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (sub_1D2ADBA48()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

void *sub_1D270AA2C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6947F8);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D270C20C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D270AB54(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1D270AC28(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1D270C380((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1D270C380((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1D270AC28(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1D2ADB978();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1D270ADE4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1D2ADB9A8();
  if (!v8)
  {
    sub_1D2ADB9D8();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1D2ADBA28();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1D270ADE4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1D270AE7C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D270B05C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1D270B05C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1D270AE7C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1D270AFF4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1D2ADB998();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1D2ADB9D8();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1D2ADB838();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1D2ADBA28();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1D2ADB9D8();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1D270AFF4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694858);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1D270B05C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694858);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  BOOL v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D2ADBA28();
  __break(1u);
  return result;
}

uint64_t sub_1D270B1AC()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *((void *)v0 + 3);
  uint64_t v3 = *((void *)v0 + 4);
  uint64_t v4 = *((void *)v0 + 5);
  uint64_t v5 = *((void *)v0 + 6);
  uint64_t v6 = *((void *)v0 + 7);
  uint64_t v7 = *((void *)v0 + 8);
  uint64_t v8 = *((void *)v0 + 9);
  double v9 = v0[10];
  uint64_t v10 = *((void *)v0 + 12);
  uint64_t v12 = *((void *)v0 + 11);
  swift_bridgeObjectRetain();
  sub_1D27014D8(v1, v2);
  swift_bridgeObjectRetain();
  sub_1D2701520(v3, v4);
  swift_bridgeObjectRetain();
  sub_1D2701568(v5, v6);
  swift_bridgeObjectRetain();
  sub_1D2701580(v7, v8);
  sub_1D27015F8(v9);
  swift_bridgeObjectRetain();
  return sub_1D27015E0(v12, v10);
}

uint64_t sub_1D270B290()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D270B2C8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UrsaRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v6 = sub_1D2ADB628();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, v5, v4);
}

uint64_t sub_1D270B424()
{
  uint64_t v2 = *(void *)(type metadata accessor for UrsaRequest(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  double v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *double v9 = v1;
  v9[1] = sub_1D270B538;
  return sub_1D2706EC4((uint64_t)v9, v10, v11, v4, v5, v7, v8);
}

uint64_t sub_1D270B538()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1D270B62C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D270B694(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_1D270B758(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  sub_1D270C650(a1 + 32, (uint64_t)&v44, &qword_1EA694800);
  uint64_t v7 = v44;
  uint64_t v8 = v45;
  uint64_t v42 = v44;
  uint64_t v43 = v45;
  sub_1D270C320(v46, v41);
  double v9 = (void *)*a3;
  unint64_t v11 = sub_1D270BBBC(v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1D270C128);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1D270BC40();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    long long v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    long long v21 = (uint64_t *)(v20[6] + 16 * v11);
    *long long v21 = v7;
    v21[1] = v8;
    sub_1D270C320(v41, (_OWORD *)(v20[7] + 32 * v11));
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    uint64_t v25 = v4 - 1;
    if (!v25)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v26 = a1 + 80;
    while (1)
    {
      sub_1D270C650(v26, (uint64_t)&v44, &qword_1EA694800);
      uint64_t v27 = v44;
      uint64_t v28 = v45;
      uint64_t v42 = v44;
      uint64_t v43 = v45;
      sub_1D270C320(v46, v41);
      uint64_t v29 = (void *)*a3;
      unint64_t v30 = sub_1D270BBBC(v27, v28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1D270C128);
      uint64_t v32 = v29[2];
      BOOL v33 = (v31 & 1) == 0;
      BOOL v23 = __OFADD__(v32, v33);
      uint64_t v34 = v32 + v33;
      if (v23) {
        break;
      }
      char v35 = v31;
      if (v29[3] < v34)
      {
        sub_1D270BE28(v34, 1);
        unint64_t v30 = sub_1D270BBBC(v27, v28, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1D270C128);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_25;
        }
      }
      if (v35) {
        goto LABEL_10;
      }
      uint64_t v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      long long v38 = (uint64_t *)(v37[6] + 16 * v30);
      *long long v38 = v27;
      v38[1] = v28;
      sub_1D270C320(v41, (_OWORD *)(v37[7] + 32 * v30));
      uint64_t v39 = v37[2];
      BOOL v23 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v37[2] = v40;
      v26 += 48;
      if (!--v25) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1D270BE28(v14, a2 & 1);
  uint64_t v16 = sub_1D270BBBC(v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1D270C128);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    unint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v47 = v18;
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694808);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1D2ADBA78();
  __break(1u);
LABEL_26:
  sub_1D2ADB988();
  sub_1D2ADB818();
  sub_1D2ADB9C8();
  sub_1D2ADB818();
  sub_1D2ADB9E8();
  __break(1u);
}

uint64_t sub_1D270BB7C()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1D270BBB4(uint64_t a1, uint64_t a2)
{
  sub_1D2709930(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1D270BBBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  sub_1D2ADBAE8();
  sub_1D2ADB7F8();
  uint64_t v5 = sub_1D2ADBAF8();
  return a3(a1, a2, v5);
}

void *sub_1D270BC40()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6947E0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D2ADB9F8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1D270C380(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    long long v21 = (void *)(*(void *)(v4 + 48) + v16);
    *long long v21 = v19;
    v21[1] = v18;
    sub_1D270C320(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1D270BE28(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6947E0);
  uint64_t v6 = sub_1D2ADBA08();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      long long v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1D270C320(v24, v35);
      }
      else
      {
        sub_1D270C380((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1D2ADBAE8();
      sub_1D2ADB7F8();
      uint64_t result = sub_1D2ADBAF8();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1D270C320(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_1D270C128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1D2ADBA48() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1D2ADBA48() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1D270C20C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA694800);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D2ADBA28();
  __break(1u);
  return result;
}

_OWORD *sub_1D270C320(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1D270C380(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1D270C3DC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D270C414(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1D270CCA0;
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA694818 + dword_1EA694818);
  return v6(a1, v4);
}

uint64_t sub_1D270C4CC()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D270C50C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1D270B538;
  v3[5] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[6] = v4;
  void *v4 = v3;
  v4[1] = sub_1D2709004;
  return MEMORY[0x1F4187DE0](300000000000);
}

uint64_t sub_1D270C5F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D270C650(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1D270C6B4()
{
  unint64_t result = qword_1EA695F98[0];
  if (!qword_1EA695F98[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA695F98);
  }
  return result;
}

void type metadata accessor for CKError(uint64_t a1)
{
}

uint64_t sub_1D270C71C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D270C764(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1D270C7CC()
{
  unint64_t result = qword_1EA694850;
  if (!qword_1EA694850)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA694850);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for UrsaClient.CustomUrsaError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for UrsaClient.CustomUrsaError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for UrsaClient.CustomUrsaError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for UrsaClient.CustomUrsaError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UrsaClient.CustomUrsaError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UrsaClient.CustomUrsaError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1D270C94C()
{
  return 0;
}

ValueMetadata *type metadata accessor for UrsaClient.CustomUrsaError()
{
  return &type metadata for UrsaClient.CustomUrsaError;
}

uint64_t sub_1D270C964()
{
  return sub_1D270C71C(&qword_1EA694868, type metadata accessor for CKError);
}

uint64_t sub_1D270C9AC()
{
  return sub_1D270C71C(&qword_1EA694870, type metadata accessor for CKError);
}

uint64_t sub_1D270C9F4()
{
  return sub_1D270C71C(&qword_1EA694878, type metadata accessor for CKError);
}

uint64_t sub_1D270CA3C()
{
  return sub_1D270C71C(&qword_1EA694880, type metadata accessor for CKError);
}

uint64_t sub_1D270CA84()
{
  return sub_1D270C71C(&qword_1EA694888, type metadata accessor for CKError);
}

uint64_t sub_1D270CACC()
{
  return sub_1D270C71C(&qword_1EA694890, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_1D270CB28(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1D270CB70()
{
  return sub_1D270C71C(&qword_1EA694898, type metadata accessor for Code);
}

unint64_t sub_1D270CBBC()
{
  unint64_t result = qword_1EA6948A0;
  if (!qword_1EA6948A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA6948A0);
  }
  return result;
}

uint64_t sub_1D270CC10()
{
  return sub_1D270C71C(&qword_1EA6948A8, type metadata accessor for Code);
}

uint64_t sub_1D270CC58()
{
  return sub_1D270C71C(&qword_1EA694840, type metadata accessor for CKError);
}

uint64_t sub_1D270CCA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6948C0);
  v3[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D270CD40, 0, 0);
}

uint64_t sub_1D270CD40()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  sub_1D270D0F4(v0[3], v1);
  uint64_t v3 = type metadata accessor for UrsaRequest(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 0, 1, v3);
  id v4 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_1EA6948C8));
  uint64_t v5 = sub_1D2ADB5F8();
  v0[6] = v5;
  uint64_t v6 = swift_task_alloc();
  v0[7] = v6;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v2;
  uint64_t v7 = swift_task_alloc();
  v0[8] = v7;
  *(void *)(v7 + 16) = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  uint64_t v9 = type metadata accessor for UrsaResponse(0);
  *uint64_t v8 = v0;
  v8[1] = sub_1D270CEDC;
  uint64_t v10 = v0[2];
  return MEMORY[0x1F4188148](v10, &unk_1EA6948D8, v6, sub_1D270D74C, v7, 0, 0, v9);
}

uint64_t sub_1D270CEDC()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1D270D06C;
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = sub_1D270D000;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D270D000()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D270D06C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D270D0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UrsaRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D270D158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return MEMORY[0x1F4188298](sub_1D270D17C, 0, 0);
}

uint64_t sub_1D270D17C()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = type metadata accessor for UrsaResponse(0);
  void *v2 = v0;
  v2[1] = sub_1D270D278;
  uint64_t v4 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v4, 0, 0, 0x725574696D627573, 0xEE00293A5F286173, sub_1D270D81C, v1, v3);
}

uint64_t sub_1D270D278()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D270D3B4, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1D270D3B4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D270D418(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_1D270B538;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1D270D17C, 0, 0);
}

uint64_t sub_1D270D4CC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6948E8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_1D2ADB5E8();
  return sub_1D2ADB928();
}

uint64_t sub_1D270D614(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UrsaResponse(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6948F0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (void *)((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1D270D92C(a1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9[1] = *v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6948E8);
    return sub_1D2ADB8B8();
  }
  else
  {
    sub_1D270D994((uint64_t)v7, (uint64_t)v4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6948E8);
    return sub_1D2ADB8C8();
  }
}

id sub_1D270D74C()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_cancel);
}

uint64_t sub_1D270D75C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_1D270B538;
  return sub_1D270CCA8(a1, a2, v6);
}

ValueMetadata *type metadata accessor for UrsaServiceAPIClient()
{
  return &type metadata for UrsaServiceAPIClient;
}

uint64_t sub_1D270D81C(uint64_t a1)
{
  return sub_1D270D4CC(a1);
}

uint64_t sub_1D270D824()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6948E8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t sub_1D270D8B8(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6948E8);
  return sub_1D270D614(a1);
}

uint64_t sub_1D270D92C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA6948F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D270D994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UrsaResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t bq_sealed(mach_port_t a1)
{
  unsigned __int16 v2 = 0;
  if (!controlReadU16(a1, 0, &v2)) {
    return (v2 >> 13) & 1;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    bq_sealed_cold_1();
  }
  return 0xFFFFFFFFLL;
}

uint64_t bq_sleep_mode(uint64_t a1, int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((readBlock(a1, 64, 0, inputStruct, 0) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    if ((inputStruct[0] & 0x20) == 0 || a3)
    {
      char v6 = inputStruct[0] | 0x20;
      goto LABEL_11;
    }
    return 1;
  }
  if ((inputStruct[0] & 0x20) == 0 && !a3) {
    return 1;
  }
  char v6 = inputStruct[0] & 0xDF;
LABEL_11:
  inputStruct[0] = v6;
  if ((writeBlock(a1, 64, 0, inputStruct) & 0x80000000) != 0) {
    return 4294967294;
  }
  if ((readBlock(a1, 64, 0, inputStruct, 0) & 0x80000000) != 0) {
    return 4294967293;
  }
  if (((inputStruct[0] & 0x20) == 0) != a2) {
    return 0;
  }
  return 4294967292;
}

uint64_t bq_write_dfchecksum(uint64_t a1, unsigned int a2)
{
  mach_port_t v3 = a1;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if ((readBlock(a1, 57, 0, inputStruct, 0) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  __int16 v6 = __rev16(a2);
  return ((int)writeBlock(v3, 57, 0, inputStruct) >> 31);
}

uint64_t bq_vlow_enable(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v4 = controlRead16(a1, 28);
  unsigned __int16 v5 = v4;
  if (v4 > 0xC602u)
  {
    if (v4 <= 0xCEC5u)
    {
      if (v4 > 0xC71Eu)
      {
        if (v4 > 0xCEBBu)
        {
          if (v4 == 52924) {
            goto LABEL_60;
          }
          int v9 = 52933;
        }
        else
        {
          if (v4 == 50975) {
            goto LABEL_60;
          }
          int v9 = 52923;
        }
      }
      else
      {
        if (v4 <= 0xC71Cu)
        {
          if (v4 != 50691)
          {
            int v7 = 50692;
            goto LABEL_59;
          }
LABEL_47:
          unsigned __int16 v10 = (v4 & 0x7FFF) + a2;
          goto LABEL_64;
        }
        if (v4 == 50973) {
          goto LABEL_47;
        }
        int v9 = 50974;
      }
LABEL_46:
      if (v4 != v9) {
        goto LABEL_89;
      }
      goto LABEL_47;
    }
    if (v4 > 0xD401u)
    {
      if (v4 > 0xD743u)
      {
        if (v4 == 55108) {
          goto LABEL_47;
        }
        int v7 = 55109;
      }
      else
      {
        if (v4 == 54274) {
          goto LABEL_47;
        }
        int v7 = 54275;
      }
    }
    else
    {
      if (v4 <= 0xD0ABu)
      {
        if (v4 == 52934) {
          goto LABEL_60;
        }
        int v9 = 53419;
        goto LABEL_46;
      }
      if (v4 == 53420) {
        goto LABEL_47;
      }
      int v7 = 53421;
    }
LABEL_59:
    if (v4 != v7) {
      goto LABEL_89;
    }
LABEL_60:
    unsigned __int16 v10 = (v4 & 0x7FFF) - (a2 ^ 1);
    goto LABEL_64;
  }
  if (v4 > 0x4EC5u)
  {
    if (v4 > 0x5401u)
    {
      if (v4 > 0x5743u)
      {
        if (v4 == 22340) {
          goto LABEL_53;
        }
        int v6 = 22341;
      }
      else
      {
        if (v4 == 21506) {
          goto LABEL_53;
        }
        int v6 = 21507;
      }
    }
    else
    {
      if (v4 <= 0x50ABu)
      {
        if (v4 != 20166)
        {
          int v8 = 20651;
          goto LABEL_42;
        }
        goto LABEL_51;
      }
      if (v4 == 20652) {
        goto LABEL_61;
      }
      int v6 = 20653;
    }
LABEL_50:
    if (v4 == v6) {
      goto LABEL_51;
    }
LABEL_89:
    if ((v4 & 0x8000u) != 0) {
      return 4294967289;
    }
    else {
      return 4294967290;
    }
  }
  if (v4 > 0x471Eu)
  {
    if (v4 > 0x4EBBu)
    {
      if (v4 != 20156)
      {
        int v8 = 20165;
LABEL_42:
        if (v4 != v8) {
          goto LABEL_89;
        }
        goto LABEL_53;
      }
    }
    else if (v4 != 18207)
    {
      int v8 = 20155;
      goto LABEL_42;
    }
LABEL_51:
    if (a2) {
      return 1;
    }
    unsigned __int16 v10 = v4 - 1;
    goto LABEL_64;
  }
  if (v4 > 0x471Cu)
  {
    if (v4 == 18205) {
      goto LABEL_53;
    }
LABEL_61:
    if (a2) {
      unsigned __int16 v10 = v4 + 1;
    }
    else {
      unsigned __int16 v10 = v4 - 1;
    }
    goto LABEL_64;
  }
  if (v4 != 17923)
  {
    int v6 = 17924;
    goto LABEL_50;
  }
LABEL_53:
  if (!a2) {
    return 4294967292;
  }
  unsigned __int16 v10 = v4 + 1;
LABEL_64:
  if ((readBlock(a1, 49, 0, inputStruct, 0) & 0x80000000) != 0) {
    return 4294967294;
  }
  if (v18 != a2)
  {
    unsigned __int8 v18 = a2;
    if ((writeBlock(a1, 49, 0, inputStruct) & 0x80000000) == 0)
    {
      int Block = readBlock(a1, 49, 0, inputStruct, 0);
      uint64_t result = 4294967294;
      if (Block < 0 || v18 != a2) {
        return result;
      }
      goto LABEL_78;
    }
    return 4294967294;
  }
  if ((v5 & 0x8000) == 0)
  {
    if (v5 != 20652 && v5 != 18206) {
      return 4294967290;
    }
    unsigned __int16 v12 = controlRead16(a1, 28);
    if (v12 != v5 || (__int16)v12 <= -1) {
      return 4294967293;
    }
    else {
      return 1;
    }
  }
LABEL_78:
  if ((bq_write_dfchecksum(a1, v10) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  unsigned __int16 v15 = controlRead16(a1, 28);
  if (v10 != v15 || (__int16)v15 <= -1) {
    return 4294967293;
  }
  else {
    return 0;
  }
}

uint64_t gasgauge_swupdate()
{
  return gasgauge_swupdate_log(0);
}

uint64_t gasgauge_swupdate_log(uint64_t (*a1)())
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = log_default;
  }
  size_t v4 = 64;
  if (sysctlbyname("hw.model", v5, &v4, 0, 0))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      gasgauge_swupdate_log_cold_1();
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)mach_port_t v3 = 0;
      _os_log_impl(&dword_1D2690000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "No gas gauge update for this platform.", v3, 2u);
    }
    ((void (*)(const char *))v1)("No gas gauge update for this platform.");
    return 0;
  }
}

uint64_t log_default()
{
  return 0;
}

uint64_t gasgauge_start_update_thread()
{
  return startUpdateThread(0);
}

uint64_t gasgauge_info(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = *(_DWORD *)(*(void *)(result + 8) + 24);
  *a4 = *(_DWORD *)(result + 4);
  *a3 = *(_DWORD *)(result + 16);
  return result;
}

unsigned int *gasgauge_open()
{
  if (!okToLoad()) {
    return 0;
  }
  uint64_t v0 = (unsigned int *)malloc(0x18uLL);
  if (v0)
  {
    uint64_t v1 = ggctl_connect(0);
    unsigned int *v0 = v1;
    if (v1)
    {
      uint64_t v2 = v1;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      long long v5 = 0u;
      memset(v4, 0, sizeof(v4));
      ggctl_get_device_configuration(v1, v4);
      if (!ggctl_map_currentlog(v2, (void *)v0 + 1))
      {
        v0[4] = 0;
        v0[1] = HIDWORD(v5);
        return v0;
      }
      ggctl_disconnect(*v0);
    }
    free(v0);
    return 0;
  }
  return v0;
}

void gasgauge_close(void *a1)
{
  if (a1)
  {
    if (a1[1])
    {
      MEMORY[0x1D9428C90](*(unsigned int *)a1, 0, *MEMORY[0x1E4F14960]);
      a1[1] = 0;
    }
    ggctl_disconnect(*(unsigned int *)a1);
    free(a1);
  }
}

uint64_t gasgauge_currentlog_interval(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  if (*v1) {
    return *(unsigned int *)(a1 + 4);
  }
  return 1;
}

uint64_t gasgauge_currentlog_sleepinterval(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  if (*v1) {
    return 30;
  }
  return 0;
}

uint64_t gasgauge_currentlog_start__(unsigned int *a1, int a2, char a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *a1;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  long long v5 = (unsigned __int8 *)*((void *)a1 + 1);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    unsigned __int8 *v5 = 1;
  }
  if (!*v5) {
    goto LABEL_17;
  }
  int v6 = a3 & 3;
  uint64_t v7 = ggctl_open_device(v4, 1, v6 == 1);
  if ((v7 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = v7;
  if (v6 == 1)
  {
    uint64_t v9 = ggctl_drainDataLog(v7);
    if (v9)
    {
      uint64_t v10 = v9;
      ggctl_close_device(*a1, v8);
      goto LABEL_14;
    }
  }
  uint64_t v10 = ggctl_enable_currentlog(*a1, 1u);
  ggctl_close_device(*a1, v8);
  if (v10)
  {
LABEL_14:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      gasgauge_currentlog_start___cold_1();
    }
    return v10;
  }
  long long v5 = (unsigned __int8 *)*((void *)a1 + 1);
LABEL_17:
  a1[4] = *((_DWORD *)v5 + 6);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v12 = *v5;
    int v15 = 67109120;
    int v16 = v12;
    _os_log_impl(&dword_1D2690000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "data log supported: %d", (uint8_t *)&v15, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v13 = *(_DWORD *)(*((void *)a1 + 1) + 4);
    int v15 = 67109120;
    int v16 = v13;
    _os_log_impl(&dword_1D2690000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "data log clients: %d", (uint8_t *)&v15, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    int v14 = *(_DWORD *)(*((void *)a1 + 1) + 24);
    int v15 = 67109120;
    int v16 = v14;
    _os_log_impl(&dword_1D2690000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "data log entries: %u", (uint8_t *)&v15, 8u);
  }
  return 0;
}

uint64_t gasgauge_currentlog_start(unsigned int *a1)
{
  return gasgauge_currentlog_start__(a1, 0, 1);
}

uint64_t gasgauge_currentlog_start_collection(unsigned int *a1, char a2)
{
  return gasgauge_currentlog_start__(a1, 0, a2);
}

uint64_t gasgauge_currentlog_stop(uint64_t a1)
{
  if (!a1) {
    return 4294967294;
  }
  mach_port_t v2 = *(_DWORD *)a1;
  if (!v2) {
    return 4294967293;
  }
  mach_port_t v3 = *(unsigned char **)(a1 + 8);
  if (!v3) {
    return 4294967293;
  }
  if (!*v3) {
    return 0;
  }
  uint64_t result = ggctl_enable_currentlog(v2, 0);
  if (result)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      gasgauge_currentlog_stop_cold_1();
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t gasgauge_currentlog_entries(unsigned int *a1, uint64_t a2, unint64_t *a3, char a4)
{
  uint64_t v4 = 4294967294;
  if (!a1 || !a3) {
    return v4;
  }
  uint64_t v7 = *a1;
  if (!v7) {
    return 4294967293;
  }
  uint64_t v8 = *((void *)a1 + 1);
  if (!v8) {
    return 4294967293;
  }
  uint64_t v9 = a2;
  int v10 = a4 & 3;
  if (!*(unsigned char *)v8)
  {
    if (v10 != 1) {
      return v4;
    }
    if (!a2)
    {
      uint64_t v4 = 0;
      *a3 = 1;
      return v4;
    }
    if (!*a3) {
      return 0;
    }
    uint64_t v17 = ggctl_open_device(v7, 1, 1);
    if ((v17 & 0x80000000) == 0)
    {
      uint64_t v12 = v17;
      int v18 = ggctl_hdqRead16(v17, 20);
      if (v18 < 0)
      {
        uint64_t v4 = v18 & (v18 >> 31);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          gasgauge_currentlog_entries_cold_1();
        }
      }
      else
      {
        *(_DWORD *)uint64_t v9 = 0;
        gettimeofday((timeval *)(v9 + 8), 0);
        uint64_t v4 = 0;
        --*(void *)(v9 + 8);
        *a3 = 1;
      }
      goto LABEL_38;
    }
    return 0xFFFFFFFFLL;
  }
  if (v10 == 1)
  {
    uint64_t v11 = ggctl_open_device(v7, 1, 1);
    if ((v11 & 0x80000000) == 0)
    {
      uint64_t v12 = v11;
      uint64_t v13 = ggctl_drainDataLog(v11);
      unsigned int v14 = a1[4];
      uint64_t v8 = *((void *)a1 + 1);
      int v15 = (_DWORD *)(v8 + 24);
      if (v14 <= *(_DWORD *)(v8 + 24))
      {
        uint64_t v4 = v13;
        if (v13)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            gasgauge_currentlog_entries_cold_2();
          }
LABEL_38:
          ggctl_close_device(*a1, v12);
          return v4;
        }
        goto LABEL_23;
      }
      return 4294967292;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v14 = a1[4];
  int v15 = (_DWORD *)(v8 + 24);
  if (v14 > *(_DWORD *)(v8 + 24)) {
    return 4294967292;
  }
  uint64_t v12 = 0xFFFFFFFFLL;
LABEL_23:
  if (v9)
  {
    uint64_t v19 = (_DWORD *)(v8 + 24);
    if (v14 >= *(_DWORD *)(v8 + 24))
    {
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v20 = 0;
      do
      {
        if (v20 >= *a3) {
          break;
        }
        unsigned int v21 = a1[1];
        if (*v19 - v14 > v21) {
          unsigned int v14 = *v19 - v21;
        }
        a1[4] = v14 + 1;
        ++v20;
        uint64_t v22 = v8 + 24 * (int)(v14 % v21);
        long long v23 = *(_OWORD *)(v22 + 32);
        *(void *)(v9 + 16) = *(void *)(v22 + 48);
        *(_OWORD *)uint64_t v9 = v23;
        v9 += 24;
        unsigned int v14 = a1[4];
        uint64_t v8 = *((void *)a1 + 1);
        uint64_t v19 = (_DWORD *)(v8 + 24);
      }
      while (v14 < *(_DWORD *)(v8 + 24));
    }
  }
  else
  {
    unsigned int v24 = a1[1];
    if (*v15 - v14 < v24) {
      unsigned int v24 = *v15 - v14;
    }
    unint64_t v20 = v24;
  }
  uint64_t v4 = 0;
  *a3 = v20;
  if (v12 != -1) {
    goto LABEL_38;
  }
  return v4;
}

uint64_t gasgauge_currentlog_get_entries(unsigned int *a1, uint64_t a2, unint64_t *a3)
{
  return gasgauge_currentlog_entries(a1, a2, a3, 1);
}

uint64_t gasgauge_sn(mach_port_t *a1, char *a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(v12, 0, sizeof(v12));
  if (ggctl_get_device_configuration(*a1, v12)) {
    return 4294967274;
  }
  uint64_t v7 = ggctl_open_device(*a1, 1, 1);
  if ((v7 & 0x80000000) != 0) {
    return 4294967277;
  }
  uint64_t v8 = v7;
  if (LODWORD(v12[0])) {
    uint64_t v9 = LODWORD(v12[0]);
  }
  else {
    uint64_t v9 = 2;
  }
  uint64_t Block = readBlock(v7, 0xFFFFFFFFLL, v9, __src, 0);
  if ((Block & 0x80000000) != 0)
  {
    memset(__src, 48, 6);
    uint64_t Block = 4294967291;
  }
  ggctl_close_device(*a1, v8);
  if (a3 >= 0x12) {
    size_t v10 = 18;
  }
  else {
    size_t v10 = a3;
  }
  strncpy(a2, __src, v10);
  return Block;
}

uint64_t gasgauge_disconnect(mach_port_t *a1)
{
  long long v6 = 0u;
  memset(v5, 0, sizeof(v5));
  if (ggctl_get_device_configuration(*a1, v5)) {
    return 4294967274;
  }
  if (!DWORD1(v6)) {
    return 0;
  }
  uint64_t v3 = ggctl_open_device(*a1, 1, 1);
  if ((v3 & 0x80000000) != 0) {
    return 4294967277;
  }
  uint64_t v4 = v3;
  uint64_t result = gaugeDisconnect(v3);
  if ((result & 0x80000000) == 0)
  {
    ggctl_close_device(*a1, v4);
    return 4294967282;
  }
  return result;
}

uint64_t gasgauge_watch()
{
  return 0xFFFFFFFFLL;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void bq_sealed_cold_1()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_1D2690000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "could not read gas gauge control status", v0, 2u);
}

void gasgauge_swupdate_log_cold_1()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = __error();
  uint64_t v1 = strerror(*v0);
  int v2 = 136315138;
  uint64_t v3 = v1;
  _os_log_error_impl(&dword_1D2690000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "could not find hw.model: %s", (uint8_t *)&v2, 0xCu);
}

void gasgauge_currentlog_start___cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D2690000, MEMORY[0x1E4F14500], v0, "cannot enable current log (%d)", v1, v2, v3, v4, v5);
}

void gasgauge_currentlog_stop_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D2690000, MEMORY[0x1E4F14500], v0, "cannot disable currentlog %#x", v1, v2, v3, v4, v5);
}

void gasgauge_currentlog_entries_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D2690000, MEMORY[0x1E4F14500], v0, "cannot read average current (%d)", v1, v2, v3, v4, v5);
}

void gasgauge_currentlog_entries_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D2690000, MEMORY[0x1E4F14500], v0, "cannot drain data log (%d)", v1, v2, v3, v4, v5);
}

uint64_t ggctl_connect(io_object_t *a1)
{
  io_connect_t connect = 0;
  mach_port_t v2 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v3 = IOServiceMatching("AppleHDQGasGaugeControl");
  io_service_t MatchingService = IOServiceGetMatchingService(v2, v3);
  if (MatchingService)
  {
    io_object_t v5 = MatchingService;
    uint64_t v6 = IOServiceOpen(MatchingService, *MEMORY[0x1E4F14960], 0, &connect);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = logger;
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
        ggctl_connect_cold_2(v7, v8, v9, v10, v11, v12, v13, v14);
      }
      io_connect_t connect = 0;
    }
    if (a1) {
      *a1 = v5;
    }
    else {
      IOObjectRelease(v5);
    }
    return connect;
  }
  else
  {
    int v15 = logger;
    uint64_t result = os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR);
    if (result)
    {
      ggctl_connect_cold_1(v15);
      return 0;
    }
  }
  return result;
}

uint64_t ggctl_disconnect(uint64_t connect)
{
  if (connect) {
    return IOServiceClose(connect);
  }
  return connect;
}

void ggctl_reset(mach_port_t a1, unsigned int a2)
{
  kern_return_t v2;
  NSObject *v3;
  uint8_t buf[8];
  uint64_t input;

  input = a2;
  mach_port_t v2 = IOConnectCallMethod(a1, 0, &input, 1u, 0, 0, 0, 0, 0, 0);
  CFDictionaryRef v3 = logger;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
      ggctl_reset_cold_1();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D2690000, v3, OS_LOG_TYPE_DEFAULT, "gas gauge: reset", buf, 2u);
    }
    ++gauge_reset_count;
  }
}

uint64_t ggctl_get_hdq_state(mach_port_t a1)
{
  kern_return_t v1;
  uint32_t outputCnt;
  uint64_t output;

  output = 0;
  outputCnt = 1;
  uint64_t v1 = IOConnectCallMethod(a1, 1u, 0, 0, 0, 0, &output, &outputCnt, 0, 0);
  if (v1 == -536870183) {
    return 4294967294;
  }
  if (v1) {
    return 0xFFFFFFFFLL;
  }
  return output != 0;
}

uint64_t ggctl_get_device_configuration(mach_port_t a1, void *outputStruct)
{
  size_t outputStructCnt = 352;
  return IOConnectCallStructMethod(a1, 2u, 0, 0, outputStruct, &outputStructCnt);
}

uint64_t ggctl_enable_currentlog(mach_port_t a1, unsigned int a2)
{
  uint64_t input = a2;
  return IOConnectCallScalarMethod(a1, 3u, &input, 1u, 0, 0);
}

uint64_t ggctl_map_currentlog(uint64_t a1, void *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t result = MEMORY[0x1D9428C80](a1, 0, *MEMORY[0x1E4F14960], &v6, &v5, 1);
  uint64_t v4 = v6;
  if (result) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t ggctl_open_device(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1;
  if (!a3) {
    return v3;
  }
  int hdq_state = ggctl_get_hdq_state(a1);
  if (hdq_state < 0)
  {
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
      ggctl_open_device_cold_2();
    }
  }
  else
  {
    if (hdq_state)
    {
      if (IOConnectCallScalarMethod(v3, 6u, 0, 0, 0, 0)
        && os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
      {
        ggctl_open_device_cold_4();
      }
      return v3;
    }
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
      ggctl_open_device_cold_3();
    }
    ggctl_reset(v3, 1u);
  }
  uint64_t v5 = logger;
  if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
    ggctl_open_device_cold_1(v5);
  }
  return 0xFFFFFFFFLL;
}

uint64_t hdqBreak(mach_port_t a1)
{
  kern_return_t v1;
  unsigned int v2;

  uint64_t v1 = IOConnectCallScalarMethod(a1, 6u, 0, 0, 0, 0);
  if (v1 == -536870183) {
    mach_port_t v2 = -2;
  }
  else {
    mach_port_t v2 = -1;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t ggctl_hdqBreak(mach_port_t a1)
{
  kern_return_t v1;
  unsigned int v2;

  uint64_t v1 = IOConnectCallScalarMethod(a1, 6u, 0, 0, 0, 0);
  if (v1 == -536870183) {
    mach_port_t v2 = -2;
  }
  else {
    mach_port_t v2 = -1;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t ggctl_hdqRead8(mach_port_t a1, int a2)
{
  output[1] = *MEMORY[0x1E4F143B8];
  output[0] = 0;
  uint64_t input = a2;
  int64x2_t v5 = vdupq_n_s64(8uLL);
  uint32_t outputCnt = 1;
  if (IOConnectCallScalarMethod(a1, 7u, &input, 3u, output, &outputCnt)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return LODWORD(output[0]);
  }
}

uint64_t ggctl_hdqRead16(mach_port_t a1, int a2)
{
  output[1] = *MEMORY[0x1E4F143B8];
  output[0] = 0;
  uint32_t outputCnt = 1;
  uint64_t v3 = a2;
  if (IOConnectCallScalarMethod(a1, 8u, &v3, 1u, output, &outputCnt)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return LODWORD(output[0]);
  }
}

uint64_t ggctl_hdqWrite8(mach_port_t a1, char a2, unsigned __int8 a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 & 0x7F | (a3 << 8) | 0x80u;
  long long v5 = xmmword_1D2B02930;
  if (IOConnectCallScalarMethod(a1, 7u, &v4, 3u, 0, 0)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t ggctl_controlRead16(mach_port_t a1, int a2)
{
  output[1] = *MEMORY[0x1E4F143B8];
  output[0] = 0;
  uint32_t outputCnt = 1;
  uint64_t v3 = a2;
  if (IOConnectCallScalarMethod(a1, 0xBu, &v3, 1u, output, &outputCnt)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return LODWORD(output[0]);
  }
}

uint64_t ggctl_controlWrite16(mach_port_t a1, int a2, int a3)
{
  input[2] = *MEMORY[0x1E4F143B8];
  input[0] = a2;
  input[1] = a3;
  if (IOConnectCallScalarMethod(a1, 0xAu, input, 2u, 0, 0)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t ggctl_readBlock(mach_port_t a1, int a2, int a3, void *outputStruct, unsigned char *a5)
{
  input[2] = *MEMORY[0x1E4F143B8];
  input[0] = a2;
  input[1] = a3;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  size_t v7 = 32;
  if (IOConnectCallMethod(a1, 9u, input, 2u, 0, 0, &output, &outputCnt, outputStruct, &v7)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = output;
  }
  return result;
}

uint64_t ggctl_writeBlock(mach_port_t a1, int a2, int a3, void *inputStruct)
{
  input[2] = *MEMORY[0x1E4F143B8];
  input[0] = a2;
  input[1] = a3;
  if (IOConnectCallMethod(a1, 0xFu, input, 2u, inputStruct, 0x20uLL, 0, 0, 0, 0)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t ggctl_drainDataLog(mach_port_t a1)
{
  if (IOConnectCallMethod(a1, 0xEu, 0, 0, 0, 0, 0, 0, 0, 0)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t ggctl_gaugeInterrupts(mach_port_t a1, unsigned int a2)
{
  kern_return_t v2;
  unsigned int v3;
  uint64_t input;

  uint64_t input = a2;
  mach_port_t v2 = IOConnectCallScalarMethod(a1, 0x10u, &input, 1u, 0, 0);
  if (v2 == -536870183) {
    uint64_t v3 = -2;
  }
  else {
    uint64_t v3 = -1;
  }
  if (v2) {
    return v3;
  }
  else {
    return 0;
  }
}

CFDictionaryRef pmps_service()
{
  keys = @"built-in";
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (result)
  {
    CFDictionaryRef v1 = result;
    mach_port_t v2 = IOServiceMatching("IOPMPowerSource");
    CFDictionarySetValue(v2, @"IOPropertyMatch", v1);
    CFRelease(v1);
    return (CFDictionaryRef)IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], v2);
  }
  return result;
}

uint64_t uart_open_device(uint64_t a1, uint64_t a2, int a3)
{
  return ggctl_open_device(a1, 0, a3);
}

uint64_t hdqRead16(mach_port_t a1, int a2)
{
  output[1] = *MEMORY[0x1E4F143B8];
  output[0] = 0;
  uint32_t outputCnt = 1;
  uint64_t v3 = a2;
  if (IOConnectCallScalarMethod(a1, 8u, &v3, 1u, output, &outputCnt)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return LODWORD(output[0]);
  }
}

uint64_t hdqWrite8(mach_port_t a1, char a2, unsigned __int8 a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 & 0x7F | (a3 << 8) | 0x80u;
  long long v5 = xmmword_1D2B02930;
  if (IOConnectCallScalarMethod(a1, 7u, &v4, 3u, 0, 0)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t controlOp16(mach_port_t a1, int a2)
{
  uint64_t input = a2;
  if (IOConnectCallScalarMethod(a1, 0xAu, &input, 1u, 0, 0)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t controlRead16(mach_port_t a1, int a2)
{
  output[1] = *MEMORY[0x1E4F143B8];
  output[0] = 0;
  uint32_t outputCnt = 1;
  uint64_t v3 = a2;
  if (IOConnectCallScalarMethod(a1, 0xBu, &v3, 1u, output, &outputCnt)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return LODWORD(output[0]);
  }
}

uint64_t controlWrite16(mach_port_t a1, int a2, int a3)
{
  input[2] = *MEMORY[0x1E4F143B8];
  input[0] = a2;
  input[1] = a3;
  if (IOConnectCallScalarMethod(a1, 0xAu, input, 2u, 0, 0)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t writeBlock(mach_port_t a1, int a2, int a3, void *inputStruct)
{
  input[2] = *MEMORY[0x1E4F143B8];
  input[0] = a2;
  input[1] = a3;
  if (IOConnectCallMethod(a1, 0xFu, input, 2u, inputStruct, 0x20uLL, 0, 0, 0, 0)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t drainDataLog(mach_port_t a1)
{
  if (IOConnectCallMethod(a1, 0xEu, 0, 0, 0, 0, 0, 0, 0, 0)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t gaugeEnableInterrupts(mach_port_t a1)
{
  kern_return_t v1;
  unsigned int v2;
  uint64_t input;

  uint64_t input = 1;
  CFDictionaryRef v1 = IOConnectCallScalarMethod(a1, 0x10u, &input, 1u, 0, 0);
  if (v1 == -536870183) {
    mach_port_t v2 = -2;
  }
  else {
    mach_port_t v2 = -1;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t gaugeDisableInterrupts(mach_port_t a1)
{
  kern_return_t v1;
  unsigned int v2;
  uint64_t input;

  uint64_t input = 0;
  CFDictionaryRef v1 = IOConnectCallScalarMethod(a1, 0x10u, &input, 1u, 0, 0);
  if (v1 == -536870183) {
    mach_port_t v2 = -2;
  }
  else {
    mach_port_t v2 = -1;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t gaugeDisconnect(mach_port_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)uint64_t input = xmmword_1D2B02940;
  IOConnectCallScalarMethod(a1, 0xAu, input, 2u, 0, 0);
  for (int i = 0; i != 3; ++i)
  {
    input[0] = 0;
    uint32_t outputCnt = 1;
    uint64_t v8 = 23;
    if (IOConnectCallScalarMethod(a1, 0xBu, &v8, 1u, input, &outputCnt)) {
      int v3 = -1;
    }
    else {
      int v3 = input[0];
    }
    if (!v3) {
      break;
    }
    uint64_t v4 = logger;
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
    {
      LODWORD(input[0]) = 67109376;
      HIDWORD(input[0]) = i;
      LOWORD(input[1]) = 1024;
      *(_DWORD *)((char *)&input[1] + 2) = v3;
      _os_log_error_impl(&dword_1D2690000, v4, OS_LOG_TYPE_ERROR, "%d: retry OpenProtector (%d)", (uint8_t *)input, 0xEu);
    }
    usleep(0xF4240u);
  }
  __int16 v7 = 0;
  input[0] = 0;
  uint32_t outputCnt = 1;
  uint64_t v8 = 32;
  IOConnectCallScalarMethod(a1, 0xBu, &v8, 1u, input, &outputCnt);
  if (controlReadU16(a1, 0, &v7)) {
    return 4294967291;
  }
  if (v3) {
    unsigned int v6 = -36;
  }
  else {
    unsigned int v6 = 0;
  }
  if ((v7 & 0x2000) != 0) {
    return v6;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t controlReadU16(mach_port_t a1, int a2, _WORD *a3)
{
  output[1] = *MEMORY[0x1E4F143B8];
  output[0] = 0;
  uint32_t outputCnt = 1;
  uint64_t v5 = a2;
  if (IOConnectCallScalarMethod(a1, 0xBu, &v5, 1u, output, &outputCnt)) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = LODWORD(output[0]);
  }
  if ((result & 0x80000000) == 0)
  {
    if (a3) {
      *a3 = result;
    }
    return 0;
  }
  return result;
}

uint64_t hdqReadS16(mach_port_t a1, int a2, _WORD *a3)
{
  output[1] = *MEMORY[0x1E4F143B8];
  output[0] = 0;
  uint32_t outputCnt = 1;
  uint64_t v5 = a2;
  if (IOConnectCallScalarMethod(a1, 8u, &v5, 1u, output, &outputCnt)) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = LODWORD(output[0]);
  }
  if ((result & 0x80000000) == 0)
  {
    if (a3) {
      *a3 = result;
    }
    return 0;
  }
  return result;
}

uint64_t hdqReadU16(mach_port_t a1, int a2, _WORD *a3)
{
  output[1] = *MEMORY[0x1E4F143B8];
  output[0] = 0;
  uint32_t outputCnt = 1;
  uint64_t v5 = a2;
  if (IOConnectCallScalarMethod(a1, 8u, &v5, 1u, output, &outputCnt)) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = LODWORD(output[0]);
  }
  if ((result & 0x80000000) == 0)
  {
    if (a3) {
      *a3 = result;
    }
    return 0;
  }
  return result;
}

uint64_t hdqReadS8(mach_port_t a1, int a2, unsigned char *a3)
{
  uint64_t result = ggctl_hdqRead8(a1, a2);
  if ((result & 0x80000000) == 0)
  {
    if (a3) {
      *a3 = result;
    }
    return 0;
  }
  return result;
}

uint64_t hdqReadU8(mach_port_t a1, int a2, unsigned char *a3)
{
  uint64_t result = ggctl_hdqRead8(a1, a2);
  if ((result & 0x80000000) == 0)
  {
    if (a3) {
      *a3 = result;
    }
    return 0;
  }
  return result;
}

uint64_t controlReadS16(mach_port_t a1, int a2, _WORD *a3)
{
  output[1] = *MEMORY[0x1E4F143B8];
  output[0] = 0;
  uint32_t outputCnt = 1;
  uint64_t v5 = a2;
  if (IOConnectCallScalarMethod(a1, 0xBu, &v5, 1u, output, &outputCnt)) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = LODWORD(output[0]);
  }
  if ((result & 0x80000000) == 0)
  {
    if (a3) {
      *a3 = result;
    }
    return 0;
  }
  return result;
}

uint64_t dumpBuffer(unsigned __int8 *a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v4 = a2;
    do
    {
      int v5 = *a1++;
      printf(" %02x", v5);
      --v4;
    }
    while (v4);
  }
  return putchar(10);
}

uint64_t registerName(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x600)
  {
    if (a2 - 1281 > 1 || (*(_DWORD *)a1 | 4) != 0x1E) {
      goto LABEL_8;
    }
    return 0;
  }
  if ((*(_DWORD *)a1 | 2) == 0xE) {
    return 0;
  }
LABEL_8:
  uint64_t v2 = *(void *)(a1 + 72);
  if (!v2
    && (a2 < 0x600 || (uint64_t v2 = *(void *)(a1 + 48)) == 0)
    && (a2 < 0x501 || (uint64_t v2 = *(void *)(a1 + 40)) == 0)
    && (a2 < 0x313 || (uint64_t v2 = *(void *)(a1 + 32)) == 0)
    && (a2 < 0x132 || (uint64_t v2 = *(void *)(a1 + 24)) == 0))
  {
    if (a2 < 0x119) {
      return *(void *)(a1 + 8);
    }
    uint64_t v2 = *(void *)(a1 + 16);
    if (!v2) {
      return *(void *)(a1 + 8);
    }
  }
  return v2;
}

uint64_t readRegister(_WORD *a1, uint64_t a2, mach_port_t a3)
{
  int v4 = *(_DWORD *)(a2 + 4);
  uint64_t result = 0xFFFFFFFFLL;
  if (v4 <= 1)
  {
    if (v4)
    {
      if (v4 == 1)
      {
        int v6 = *(_DWORD *)a2;
        return hdqReadU16(a3, v6, a1);
      }
    }
    else
    {
      int v9 = *(_DWORD *)a2;
      return hdqReadS16(a3, v9, a1);
    }
  }
  else
  {
    switch(v4)
    {
      case 100:
        __int16 v7 = *(uint64_t (**)(_WORD *))(a2 + 64);
        if (v7)
        {
          return v7(a1);
        }
        break;
      case 10:
        int v8 = *(_DWORD *)a2;
        return controlReadU16(a3, v8, a1);
      case 2:
        uint64_t result = ggctl_hdqRead8(a3, *(_DWORD *)a2);
        if ((result & 0x80000000) == 0)
        {
          if (a1) {
            *(unsigned char *)a1 = result;
          }
          return 0;
        }
        break;
    }
  }
  return result;
}

uint64_t getFWVersion(mach_port_t a1, __int16 *a2)
{
  __int16 v3 = getFWVersion_gFWVersion;
  if (getFWVersion_gFWVersion) {
    goto LABEL_2;
  }
  if (!controlReadU16(a1, 2, &getFWVersion_gFWVersion))
  {
    __int16 v3 = getFWVersion_gFWVersion;
    if (getFWVersion_gFWVersion == 256)
    {
      __int16 v3 = 1536;
      getFWVersion_gFWVersion = 1536;
    }
LABEL_2:
    uint64_t result = 0;
    *a2 = v3;
    return result;
  }
  return 0xFFFFFFFFLL;
}

double readLifetimeData(_OWORD *a1, uint64_t a2, mach_port_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v8 = 0;
  if ((getFWVersion(a3, (__int16 *)&v8) & 0x80000000) == 0
    && v8 >= 0x313u
    && !ggctl_readBlock(a3, -1, 4, &outputStruct, 0))
  {
    long long v6 = v10;
    *a1 = outputStruct;
    a1[1] = v6;
    if (!ggctl_readBlock(a3, -1, 6, &outputStruct, 0))
    {
      double result = *(double *)&outputStruct;
      long long v7 = v10;
      a1[2] = outputStruct;
      a1[3] = v7;
    }
  }
  return result;
}

double readRaTableData(_OWORD *a1, uint64_t a2, mach_port_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v7 = 0;
  if ((getFWVersion(a3, (__int16 *)&v7) & 0x80000000) == 0
    && v7 >= 0x600u
    && !ggctl_readBlock(a3, -1, 7, outputStruct, 0))
  {
    double result = *(double *)outputStruct;
    long long v6 = outputStruct[1];
    *a1 = outputStruct[0];
    a1[1] = v6;
  }
  return result;
}

double readIMAXAndSOCSmoothData(_OWORD *a1, uint64_t a2, mach_port_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v7 = 0;
  if ((getFWVersion(a3, (__int16 *)&v7) & 0x80000000) == 0
    && v7 >= 0x600u
    && !ggctl_readBlock(a3, -1, 8, outputStruct, 0))
  {
    double result = *(double *)outputStruct;
    long long v6 = outputStruct[1];
    *a1 = outputStruct[0];
    a1[1] = v6;
  }
  return result;
}

uint64_t findRaWeightMulitplier(int a1)
{
  uint64_t v1 = 0;
  while ((unsigned __int16)battery_health_metric_config[v1] != a1)
  {
    v1 += 4;
    if (v1 == 68) {
      return 0;
    }
  }
  return *(unsigned int *)&battery_health_metric_config[v1 + 2];
}

float calculateWra(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned __int16 a9)
{
  return (double)a2 * 0.137995
       + (double)a1 * 0.0693069
       + (double)a3 * 0.137376
       + (double)a4 * 0.137376
       + (double)a5 * 0.137376
       + (double)a6 * 0.137376
       + (double)a7 * 0.137376
       + (double)a8 * 0.0872525
       + (double)a9 * 0.0185644;
}

float calculateChemicalWeightedRa(unsigned int a1, float a2)
{
  return (float)((float)a1 * a2) / 1000.0;
}

CFDictionaryRef readShutdownReasonData(mach_port_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v7 = 0;
  long long v6 = 0u;
  memset(v5, 0, sizeof(v5));
  memset(v12, 0, sizeof(v12));
  if (ggctl_logShutdownReason(a1, (uint64_t)v5, 1u))
  {
    uint64_t v2 = logger;
    if (!os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v9 = "readShutdownReasonData";
    __int16 v10 = 1024;
    int v11 = 2502;
    __int16 v3 = "%s:%d cannot read data";
LABEL_4:
    _os_log_impl(&dword_1D2690000, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 0x12u);
    return 0;
  }
  if (!*((void *)&v6 + 1))
  {
    uint64_t v2 = logger;
    if (!os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v9 = "readShutdownReasonData";
    __int16 v10 = 1024;
    int v11 = 2506;
    __int16 v3 = "%s:%d invalid timestamp";
    goto LABEL_4;
  }
  return parseShutdownReason((__int16 *)v5, (const UInt8 *)v12, a1);
}

uint64_t ggctl_logShutdownReason(mach_port_t a1, uint64_t a2, unsigned int a3)
{
  kern_return_t v4;
  long long v5;
  long long v7;
  uint64_t input;
  uint64_t v9;
  size_t v10;
  long long outputStruct;
  long long v12;
  long long v13;
  long long v14;
  _OWORD inputStruct[3];
  int v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  __int16 v10 = 64;
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (a3)
  {
    uint64_t v13 = 0u;
    uint64_t v14 = 0u;
    long long outputStruct = 0u;
    uint64_t v12 = 0u;
    uint64_t input = a3;
    int v4 = IOConnectCallMethod(a1, 0x11u, &input, 1u, inputStruct, 0x40uLL, 0, 0, &outputStruct, &v10);
    if (!v4)
    {
      int v5 = v12;
      *(_OWORD *)a2 = outputStruct;
      *(_OWORD *)(a2 + 16) = v5;
      *(_OWORD *)(a2 + 32) = v13;
      *(_DWORD *)(a2 + 48) = v14;
    }
  }
  else
  {
    int v7 = *(_OWORD *)(a2 + 16);
    inputStruct[0] = *(_OWORD *)a2;
    inputStruct[1] = v7;
    inputStruct[2] = *(_OWORD *)(a2 + 32);
    int v16 = *(_DWORD *)(a2 + 48);
    uint64_t v9 = a3;
    int v4 = IOConnectCallMethod(a1, 0x11u, &v9, 1u, inputStruct, 0x40uLL, 0, 0, &outputStruct, &v10);
  }
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

CFDictionaryRef parseShutdownReason(__int16 *a1, const UInt8 *a2, mach_port_t a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v41 = 0;
  keys[0] = @"ShutDownTimestamp";
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t valuePtr = *((void *)a1 + 5);
  values[0] = CFNumberCreate(v6, kCFNumberLongType, &valuePtr);
  keys[1] = @"ShutDownUISoc";
  int v34 = *((_DWORD *)a1 + 12);
  values[1] = CFNumberCreate(v6, kCFNumberFloatType, &v34);
  keys[2] = @"ShutDownTemperature";
  int v33 = *a1;
  values[2] = CFNumberCreate(v6, kCFNumberIntType, &v33);
  keys[3] = @"ShutDownPresentDOD";
  int v32 = a1[1];
  values[3] = CFNumberCreate(v6, kCFNumberIntType, &v32);
  keys[4] = @"ShutDownMaxRa08";
  int v31 = a1[2];
  values[4] = CFNumberCreate(v6, kCFNumberIntType, &v31);
  keys[5] = @"ShutDownNominalChargeCapacity";
  int v30 = (unsigned __int16)a1[3];
  values[5] = CFNumberCreate(v6, kCFNumberIntType, &v30);
  keys[6] = @"ShutDownPrevNominalChargeCapacity";
  int v29 = (unsigned __int16)a1[4];
  values[6] = CFNumberCreate(v6, kCFNumberIntType, &v29);
  keys[7] = @"ShutDownFullChargeCapacity";
  int v28 = a1[5];
  values[7] = CFNumberCreate(v6, kCFNumberIntType, &v28);
  keys[8] = @"ShutDownPrevFullChargeCapacity";
  int v27 = a1[6];
  values[8] = CFNumberCreate(v6, kCFNumberIntType, &v27);
  keys[9] = @"ShutDownRemainingCapacity";
  int v26 = a1[7];
  values[9] = CFNumberCreate(v6, kCFNumberIntType, &v26);
  keys[10] = @"ShutDownPrevRemainingCapacity";
  int v25 = a1[8];
  values[10] = CFNumberCreate(v6, kCFNumberIntType, &v25);
  keys[11] = @"ShutDownCycleCount";
  int v24 = (unsigned __int16)a1[9];
  values[11] = CFNumberCreate(v6, kCFNumberIntType, &v24);
  keys[12] = @"ShutDownMaxDischargeCurrent";
  int v23 = a1[10];
  values[12] = CFNumberCreate(v6, kCFNumberIntType, &v23);
  keys[13] = @"ShutDownTimeAbove95";
  int v22 = *((unsigned __int8 *)a1 + 22);
  values[13] = CFNumberCreate(v6, kCFNumberIntType, &v22);
  keys[14] = @"ShutDownVoltage";
  int v21 = *(__int16 *)((char *)a1 + 23);
  values[14] = CFNumberCreate(v6, kCFNumberIntType, &v21);
  keys[15] = @"ShutDownPrevVoltage";
  int v20 = *(__int16 *)((char *)a1 + 25);
  values[15] = CFNumberCreate(v6, kCFNumberIntType, &v20);
  keys[16] = @"ShutDownAverageCurrent";
  int v19 = *(__int16 *)((char *)a1 + 27);
  values[16] = CFNumberCreate(v6, kCFNumberIntType, &v19);
  keys[17] = @"ShutDownPrevAverageCurrent";
  int v18 = *(__int16 *)((char *)a1 + 29);
  values[17] = CFNumberCreate(v6, kCFNumberIntType, &v18);
  keys[18] = @"ShutDownCycleCountLastQmax";
  int v17 = *((unsigned __int8 *)a1 + 31);
  values[18] = CFNumberCreate(v6, kCFNumberIntType, &v17);
  keys[19] = @"ShutDownResScale";
  int v16 = (unsigned __int16)a1[16];
  values[19] = CFNumberCreate(v6, kCFNumberIntType, &v16);
  keys[20] = @"ShutDownQstart";
  int v15 = a1[17];
  values[20] = CFNumberCreate(v6, kCFNumberIntType, &v15);
  keys[21] = @"ShutDownPassedCharge";
  int v14 = a1[18];
  values[21] = CFNumberCreate(v6, kCFNumberIntType, &v14);
  keys[22] = @"ShutDownDOD0";
  int v13 = (unsigned __int16)a1[19];
  *(void *)&long long v43 = CFNumberCreate(v6, kCFNumberIntType, &v13);
  *(void *)&long long v39 = @"Raw";
  *((void *)&v43 + 1) = CFDataCreate(v6, (const UInt8 *)a1, 52);
  uint64_t v48 = 0;
  *(_OWORD *)bytes = 0u;
  long long v47 = 0u;
  size_t v37 = 40;
  uint64_t v51 = 0;
  long long outputStruct = 0u;
  long long v50 = 0u;
  uint64_t input = 1;
  if (!IOConnectCallMethod(a3, 0x12u, &input, 1u, 0, 0, 0, 0, &outputStruct, &v37))
  {
    *(_OWORD *)bytes = outputStruct;
    long long v47 = v50;
    uint64_t v48 = v51;
  }
  *((void *)&v39 + 1) = @"ShutDownDLog";
  *(void *)&long long v44 = CFDataCreate(v6, bytes, 40);
  *(void *)&long long v40 = @"timeSinceAwake";
  uint64_t v12 = *(void *)a2;
  *((void *)&v44 + 1) = CFNumberCreate(v6, kCFNumberLongType, &v12);
  *((void *)&v40 + 1) = @"ShutDownRaTableRaw";
  *(void *)&long long v45 = CFDataCreate(v6, a2 + 8, 32);
  uint64_t v41 = @"ShutDownRSS";
  uint64_t v11 = *((unsigned __int16 *)a2 + 20);
  *((void *)&v45 + 1) = CFNumberCreate(v6, kCFNumberIntType, &v11);
  CFDictionaryRef v7 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, 28, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v8 = 27;
  do
  {
    CFRelease(values[v8]);
    unint64_t v9 = v8-- + 1;
  }
  while (v9 > 1);
  return v7;
}

uint64_t writeBatteryDiagnosticData(mach_port_t a1)
{
  v5[44] = *MEMORY[0x1E4F143B8];
  bzero(v4, 0x258uLL);
  size_t outputStructCnt = 352;
  return IOConnectCallStructMethod(a1, 2u, 0, 0, v5, &outputStructCnt);
}

BOOL okToLoad()
{
  memset(&v1, 0, sizeof(v1));
  return stat("/dev/cu.gas-gauge", &v1) == 0;
}

uint64_t startUpdateThread(unsigned int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(&v7, 0, sizeof(v7));
  if (stat("/dev/cu.gas-gauge", &v7)) {
    return 0xFFFFFFFFLL;
  }
  pthread_t v6 = 0;
  memset(&v7, 0, 64);
  pthread_attr_init((pthread_attr_t *)&v7);
  pthread_attr_setdetachstate((pthread_attr_t *)&v7, 2);
  logger = (uint64_t)os_log_create("com.apple.AppleHDQGasGauge", "battery");
  if (!logger) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = pthread_create(&v6, (const pthread_attr_t *)&v7, (void *(__cdecl *)(void *))updateThread, (void *)a1);
  if (v2)
  {
    int v4 = logger;
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v5 = 0;
      _os_log_error_impl(&dword_1D2690000, v4, OS_LOG_TYPE_ERROR, "pthread_create", v5, 2u);
      int v4 = logger;
    }
    os_release(v4);
  }
  else
  {
    pthread_attr_destroy((pthread_attr_t *)&v7);
  }
  return v2;
}

uint64_t updateThread(uint64_t a1)
{
  kern_return_t v66;
  int v67;
  NSObject *v68;
  int v69;
  int v70;
  NSObject *v71;
  CFAbsoluteTime v72;
  BOOL v73;
  BOOL v74;
  char v75;
  double v76;
  double v77;
  NSObject *v78;
  NSObject *v79;
  int v80;
  int v81;
  int v82;
  NSObject *v83;
  int v84;
  NSObject *v85;
  int v86;
  CFTypeRef CFProperty;
  CFTypeRef v88;
  CFTypeID v89;
  int v90;
  unsigned __int8 v91;
  NSObject *v92;
  int v93;
  int hdq_state;
  CFPropertyListRef v95;
  BOOL v96;
  mach_port_t v97;
  int v98;
  int *v99;
  int v100;
  NSObject *v101;
  unsigned int v102;
  int v103;
  int v104;
  NSObject *v105;
  NSObject *v106;
  int v107;
  BOOL v108;
  uint64_t v109;
  int v110;
  int v111;
  CFNumberRef v112;
  CFNumberRef v113;
  int v114;
  BOOL v115;
  NSObject *v116;
  int v117;
  int Block;
  NSObject *v119;
  __darwin_time_t v120;
  unint64_t v121;
  NSObject *v122;
  __darwin_time_t v123;
  int v124;
  NSObject *v125;
  __darwin_time_t v126;
  unint64_t v127;
  NSObject *v128;
  NSObject *v129;
  __darwin_time_t v130;
  char v131;
  NSObject *v132;
  unint64_t v133;
  BOOL v134;
  BOOL v135;
  unint64_t v136;
  BOOL v137;
  NSObject *v138;
  int v139;
  int v140;
  NSObject *v141;
  NSObject *v142;
  int v143;
  NSObject *v144;
  uint64_t v145;
  int BatteryData;
  CFDictionaryRef ChargerData;
  BOOL v148;
  int v149;
  int v150;
  BOOL v151;
  int v152;
  int v153;
  __int16 v154;
  NSObject *v155;
  BOOL v156;
  __int16 v157;
  int v158;
  unsigned int v159;
  NSObject *v160;
  NSObject *v161;
  BOOL v162;
  int v163;
  BOOL v164;
  NSObject *v165;
  NSObject *v166;
  BOOL v167;
  CFDictionaryRef v168;
  NSObject *v169;
  CFAllocatorRef v170;
  int v171;
  __CFString *v172;
  int v173;
  int v174;
  NSObject *v175;
  BOOL v176;
  unsigned int v177;
  int v179;
  CFNumberRef v180;
  uint64_t v181;
  uint64_t v182;
  int U16;
  BOOL v184;
  NSObject *v185;
  unint64_t v186;
  NSObject *v187;
  CFNumberRef v188;
  uint64_t v189;
  uint64_t v190;
  CFNumberRef v191;
  uint64_t v192;
  CFNumberRef v193;
  uint64_t v194;
  CFNumberRef v195;
  uint64_t v196;
  CFNumberRef v197;
  uint64_t v198;
  unsigned int v199;
  CFNumberRef v200;
  uint64_t v201;
  const void *v202;
  uint64_t v203;
  CFNumberRef v204;
  uint64_t v205;
  char *v206;
  CFNumberRef v207;
  uint64_t v208;
  CFNumberRef v209;
  uint64_t v210;
  CFNumberRef v211;
  uint64_t v212;
  CFNumberRef v213;
  uint64_t v214;
  CFDictionaryRef v215;
  CFDictionaryRef v216;
  CFDictionaryRef v217;
  NSObject *v218;
  CFDictionaryRef v219;
  CFDictionaryRef v220;
  NSObject *v221;
  CFDictionaryRef v222;
  NSObject *v223;
  int S16;
  int v226;
  NSObject *v227;
  time_t v228;
  uint64_t v229;
  NSObject *v230;
  const char *v231;
  char v232;
  time_t v233;
  char v234;
  uint64_t v235;
  BOOL v236;
  NSObject *v237;
  const char *v238;
  int v239;
  int v240;
  NSObject *v241;
  __int16 v242;
  BOOL v243;
  NSObject *v244;
  int v245;
  int v246;
  int v247;
  NSObject *v248;
  char v249;
  NSObject *v250;
  int v251;
  NSObject *v252;
  int v253;
  int v254;
  int v255;
  NSObject *v256;
  NSObject *v257;
  uint64_t v258;
  BOOL v259;
  NSObject *v260;
  const char *v261;
  uint32_t v262;
  CFAbsoluteTime v263;
  NSObject *v264;
  NSObject *v265;
  int v266;
  BOOL v267;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  os_log_t logc;
  int v272;
  int v273;
  BOOL v274;
  int v275;
  int v276;
  int v277;
  uint64_t v278;
  os_log_t v279;
  BOOL v280;
  NSObject *v281;
  time_t v282;
  BOOL v283;
  char v284;
  BOOL v285;
  int v286;
  uint64_t v287;
  BOOL v288;
  int v289;
  int v290;
  int v291;
  uint64_t v292;
  int v293;
  CFPropertyListRef v294;
  int v295;
  BOOL *v296;
  unsigned int v297;
  BOOL v298;
  BOOL v299;
  CFStringRef v300;
  CFStringRef v301;
  CFStringRef mode;
  io_connect_t v303;
  BOOL v304;
  BOOL v305;
  CFAllocatorRef allocator;
  io_connect_t kernelPort;
  CFTypeRef v308;
  BOOL v309;
  int v310;
  char v311;
  char v312;
  char v313[7];
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  BOOL v330;
  int v331;
  char v332;
  char v333[15];
  char v334;
  char v335[15];
  char v336;
  char v337[15];
  size_t v338;
  int valuePtr;
  uint64_t refCon;
  intptr_t notificationID;
  io_object_t notifier;
  IONotificationPortRef thePortRef;
  unsigned __int16 v344;
  int v345;
  io_object_t notification[2];
  uint8_t v347[4];
  int v348[3];
  uint8_t v349[4];
  const char *v350;
  __int16 v351;
  int v352;
  void *keys[2];
  long long v354;
  long long v355;
  unsigned char input[52];
  double v357;
  int v358;
  void *v359[2];
  long long v360;
  long long v361;
  long long v362;
  long long v363;
  long long v364;
  long long v365;
  long long v366;
  long long v367;
  long long v368;
  long long v369;
  long long v370;
  long long v371;
  long long v372;
  long long v373;
  long long v374;
  long long v375;
  long long v376;
  long long v377;
  long long v378;
  long long v379;
  long long v380;
  uint8_t buf[32];
  long long v382;
  long long v383;
  long long v384;
  long long v385;
  long long v386;
  long long v387;
  long long v388;
  long long v389;
  long long v390;
  long long v391;
  long long v392;
  long long v393;
  long long v394;
  long long v395;
  long long v396;
  long long v397;
  long long v398;
  long long v399;
  long long v400;
  long long v401;
  char v402[64];
  uint64_t v403;

  v403 = *MEMORY[0x1E4F143B8];
  *(void *)notification = 0;
  v345 = 0;
  v344 = 0;
  thePortRef = 0;
  notifier = 0;
  notificationID = 0;
  refCon = 0;
  pthread_setname_np("GasGauge-updateThread");
  uint64_t v2 = &unk_1EA696000;
  gRestrictLogMessagesCounter = 0;
  __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
  int v4 = logger;
  if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D2690000, v4, OS_LOG_TYPE_DEFAULT, "gasgauge: updateThread start", buf, 2u);
  }
  unsigned int v5 = pmps_service();
  if (v5)
  {
    io_service_t v6 = v5;
    mach_port_t v7 = *MEMORY[0x1E4F2EEF0];
    uint64_t v8 = IONotificationPortCreate(*MEMORY[0x1E4F2EEF0]);
    if (IOServiceAddInterestNotification(v8, v6, "IOGeneralInterest", (IOServiceInterestCallback)iokit_callback, &refCon, notification))
    {
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
        updateThread_cold_10();
      }
      return 0;
    }
    Current = CFRunLoopGetCurrent();
    RunLoopSource = IONotificationPortGetRunLoopSource(v8);
    CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F1D418];
    CFRunLoopAddSource(Current, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
    kernelPort = IORegisterForSystemPower(&refCon, &thePortRef, (IOServiceInterestCallback)iokit_callback, &notifier);
    if (kernelPort && thePortRef)
    {
      uint64_t v12 = CFRunLoopGetCurrent();
      int v13 = IONotificationPortGetRunLoopSource(thePortRef);
      CFRunLoopAddSource(v12, v13, v11);
      uint64_t v14 = ggctl_connect(&notification[1]);
      if (!v14) {
        return 0;
      }
      io_connect_t v15 = v14;
      *(void *)buf = 0;
      v359[0] = 0;
      mach_error_t v16 = MEMORY[0x1D9428C80](v14, 0, *MEMORY[0x1E4F14960], buf, v359, 1);
      if (v16) {
        int v17 = 0;
      }
      else {
        int v17 = *(BOOL **)buf;
      }
      if (v16)
      {
        mach_error_t v18 = v16;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
          updateThread_cold_9(v18);
        }
        IOServiceClose(v15);
        return 0;
      }
      v292 = *(void *)buf;
      v296 = v17;
      mode = v11;
      *(void *)buf = 352;
      IOConnectCallStructMethod(v15, 2u, 0, 0, &dword_1EA6965A8, (size_t *)buf);
      byte_1EA6964F4 = dword_1EA69664C != 0;
      v344 = word_1EA696636;
      v289 = dword_1EA696700;
      uint64_t valuePtr = dword_1EA69663C;
      v300 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
      v301 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
      CFNumberRef v20 = (const __CFNumber *)CFPreferencesCopyValue(@"UpdateSampleConfig", @"com.apple.gasgauge", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
      if (v20)
      {
        CFNumberRef v21 = v20;
        CFTypeID v22 = CFGetTypeID(v20);
        if (v22 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v21, kCFNumberSInt32Type, &valuePtr);
          int v23 = logger;
          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = valuePtr;
            _os_log_impl(&dword_1D2690000, v23, OS_LOG_TYPE_DEFAULT, "changed updateSampleConfig=%#x", buf, 8u);
          }
        }
        CFRelease(v21);
      }
      v297 = valuePtr;
      CFNumberRef v24 = (const __CFNumber *)CFPreferencesCopyValue(@"CriticalBattery", @"com.apple.gasgauge", v301, v300);
      if (v24)
      {
        CFNumberRef v25 = v24;
        CFTypeID v26 = CFGetTypeID(v24);
        if (v26 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v25, kCFNumberSInt32Type, &word_1EA696634);
          CFRelease(v25);
        }
        else
        {
          int Value = CFBooleanGetValue(v25);
          CFRelease(v25);
          if (!Value)
          {
            v265 = logger;
            v295 = 0;
            if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D2690000, v265, OS_LOG_TYPE_DEFAULT, "Critical battery shutdown disabled", buf, 2u);
              v295 = 0;
            }
            goto LABEL_30;
          }
        }
      }
      v295 = 1;
LABEL_30:
      CFBooleanRef v28 = (const __CFBoolean *)CFPreferencesCopyValue(@"UserMode", @"com.apple.gasgauge", v301, v300);
      if (v28)
      {
        CFBooleanRef v29 = v28;
        CFTypeID v30 = CFGetTypeID(v28);
        v298 = v30 == CFBooleanGetTypeID() && CFBooleanGetValue(v29) != 0;
        CFRelease(v29);
        int v31 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v298;
          _os_log_impl(&dword_1D2690000, v31, OS_LOG_TYPE_DEFAULT, "gas gauge: userModeEnabled=%d", buf, 8u);
        }
      }
      else
      {
        v298 = 0;
      }
      CFNumberRef v32 = (const __CFNumber *)CFPreferencesCopyValue(@"CriticalFlagDelay", @"com.apple.gasgauge", v301, v300);
      if (v32)
      {
        CFNumberRef v33 = v32;
        CFTypeID v34 = CFGetTypeID(v32);
        if (v34 == CFNumberGetTypeID()) {
          CFNumberGetValue(v33, kCFNumberSInt32Type, &v344);
        }
        CFRelease(v33);
        char v35 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v344;
          _os_log_impl(&dword_1D2690000, v35, OS_LOG_TYPE_DEFAULT, "gas gauge: critical flag delay %d", buf, 8u);
        }
      }
      CFBooleanRef v36 = (const __CFBoolean *)CFPreferencesCopyValue(@"DebugPolling", @"com.apple.gasgauge", v301, v300);
      if (v36)
      {
        CFBooleanRef v37 = v36;
        CFTypeID v38 = CFGetTypeID(v36);
        if (v38 == CFBooleanGetTypeID()) {
          debug_polling = CFBooleanGetValue(v37) != 0;
        }
        CFRelease(v37);
        long long v39 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = debug_polling;
          _os_log_impl(&dword_1D2690000, v39, OS_LOG_TYPE_DEFAULT, "gas gauge: debug_polling=%d", buf, 8u);
        }
      }
      CFNumberRef v40 = (const __CFNumber *)CFPreferencesCopyValue(@"RestricLogCounter", @"com.apple.gasgauge", v301, v300);
      if (v40)
      {
        CFNumberRef v41 = v40;
        CFTypeID v42 = CFGetTypeID(v40);
        if (v42 == CFNumberGetTypeID()) {
          CFNumberGetValue(v41, kCFNumberSInt32Type, &gRestrictLogCounter);
        }
        CFRelease(v41);
        long long v43 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = gRestrictLogCounter;
          _os_log_impl(&dword_1D2690000, v43, OS_LOG_TYPE_DEFAULT, "gas gauge: log counter %d", buf, 8u);
        }
      }
      v310 = dword_1EA696640;
      if (dword_1EA696640)
      {
        long long v44 = IONotificationPortCreate(v7);
        uint64_t v45 = IOServiceAddInterestNotification(v44, notification[1], "IOGeneralInterest", (IOServiceInterestCallback)iokit_callback, &refCon, notification);
        long long v46 = logger;
        if (v45)
        {
          uint64_t v47 = v45;
          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
            updateThread_cold_8(v47, v46, v48, v49, v50, v51, v52, v53);
          }
        }
        else
        {
          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D2690000, v46, OS_LOG_TYPE_DEFAULT, "gasgauge: listening for battery interrupts", buf, 2u);
          }
          unint64_t v54 = CFRunLoopGetCurrent();
          uint64_t v55 = IONotificationPortGetRunLoopSource(v44);
          CFRunLoopAddSource(v54, v55, v11);
        }
      }
      v345 = 0;
      getUPOData(@"IOPMUBootUPOState", &v345);
      v304 = v345 != 0;
      getUPOData(@"IOPMUBootBatteryHealthMetric", &dword_1EA6965A0);
      v338 = 64;
      if (sysctlbyname("hw.model", v402, &v338, 0, 0) && os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
        updateThread_cold_7();
      }
      v303 = v15;
      __darwin_time_t v56 = UpSeconds();
      uint64_t v57 = logger;
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134219776;
        *(void *)&uint8_t buf[4] = v56;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v295;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = (unsigned __int16)word_1EA696634;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = valuePtr;
        *(_WORD *)&buf[30] = 1024;
        LODWORD(v382) = byte_1EA6964F4;
        WORD2(v382) = 1024;
        *(_DWORD *)((char *)&v382 + 6) = v344;
        WORD5(v382) = 1024;
        HIDWORD(v382) = dword_1EA696638;
        LOWORD(v383) = 1024;
        *(_DWORD *)((char *)&v383 + 2) = v345;
        _os_log_impl(&dword_1D2690000, v57, OS_LOG_TYPE_DEFAULT, "gasgauge: %llu updateThread critical(%d, 0x%x), uscfg=0x%x, dyn=%d cfd=%d cfd-voltage=%d, upos=%x", buf, 0x36u);
      }
      v287 = a1;
      v283 = a1 != 0;
      LOBYTE(v58) = 0;
      v288 = 0;
      v309 = 0;
      v305 = 0;
      v299 = 0;
      char v59 = 0;
      v311 = 0;
      v284 = 0;
      v282 = 0;
      int v60 = 0;
      v293 = 0;
      int v61 = 0;
      qword_1EA696598 = time(0);
      v285 = (dword_1EA696650 | dword_1EA696694) != 0;
      v291 = (v297 >> 2) & 1;
      v290 = (v297 >> 3) & 1;
      allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      v308 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
      v294 = (CFPropertyListRef)*MEMORY[0x1E4F1CFC8];
      double v62 = 0.0;
      double v63 = 0.0;
      LOBYTE(v286) = 1;
      int v64 = -1;
      mach_port_t v65 = -1;
      while (1)
      {
        v401 = 0u;
        v400 = 0u;
        v399 = 0u;
        v398 = 0u;
        v397 = 0u;
        v396 = 0u;
        v395 = 0u;
        v394 = 0u;
        v393 = 0u;
        v392 = 0u;
        v391 = 0u;
        v390 = 0u;
        v389 = 0u;
        v388 = 0u;
        v387 = 0u;
        v386 = 0u;
        v385 = 0u;
        v384 = 0u;
        v383 = 0u;
        v382 = 0u;
        memset(buf, 0, sizeof(buf));
        v380 = 0u;
        v379 = 0u;
        v378 = 0u;
        v377 = 0u;
        v376 = 0u;
        v375 = 0u;
        v374 = 0u;
        v373 = 0u;
        v372 = 0u;
        v371 = 0u;
        v370 = 0u;
        v368 = 0u;
        v369 = 0u;
        v366 = 0u;
        v367 = 0u;
        v364 = 0u;
        v365 = 0u;
        v362 = 0u;
        v363 = 0u;
        v360 = 0u;
        v361 = 0u;
        *(_OWORD *)v359 = 0u;
        if (v310 && v65 != -1)
        {
          *(void *)uint64_t input = 1;
          uint64_t v66 = IOConnectCallScalarMethod(v65, 0x10u, (const uint64_t *)input, 1u, 0, 0);
          uint64_t v67 = v66 == -536870183 ? -2 : -1;
          if (v66)
          {
            uint64_t v68 = *((void *)v3 + 287);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t input = 67109120;
              *(_DWORD *)&input[4] = v67;
              _os_log_impl(&dword_1D2690000, v68, OS_LOG_TYPE_DEFAULT, "cannot enable gauge interrupts (%d)", input, 8u);
            }
          }
        }
        LODWORD(refCon) = 0;
        if (v60)
        {
          uint64_t v69 = v2[450];
          if (v69)
          {
            int v70 = v69 - 1;
          }
          else
          {
            if (v62 == 0.0) {
              goto LABEL_81;
            }
            uint64_t v71 = *((void *)v3 + 287);
            if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v72 = CFAbsoluteTimeGetCurrent();
              *(_DWORD *)uint64_t input = 67109632;
              *(_DWORD *)&input[4] = v60;
              *(_WORD *)&input[8] = 2048;
              *(double *)&input[10] = v72 - v62;
              *(_WORD *)&input[18] = 1024;
              *(_DWORD *)&input[20] = gRestrictLogCounter;
              _os_log_impl(&dword_1D2690000, v71, OS_LOG_TYPE_DEFAULT, "failure last_update_failed_counter=%d last_success at %g, supressing %d subsequent errors", input, 0x18u);
            }
            int v70 = gRestrictLogCounter;
          }
          v2[450] = v70;
        }
LABEL_81:
        unint64_t v73 = v64 != -1;
        unint64_t v74 = v64 < 50;
        uint64_t v75 = v73 && v74;
        if (v73 && v74) {
          uint64_t v76 = 5.0;
        }
        else {
          uint64_t v76 = 20.0;
        }
        if (v59)
        {
LABEL_527:
          IOObjectRelease(v6);
          MEMORY[0x1D9428C90](v303, 0, *MEMORY[0x1E4F14960], v296);
          IOServiceClose(v303);
          v2[450] = 0;
          v264 = *((void *)v3 + 287);
          if (os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D2690000, v264, OS_LOG_TYPE_DEFAULT, "gasgauge: updateThread terminated", buf, 2u);
          }
          return 0;
        }
        if (!(v61 | v60)) {
          goto LABEL_122;
        }
        id v77 = CFAbsoluteTimeGetCurrent();
        if (debug_polling && (uint64_t v78 = *((void *)v3 + 287), os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG)))
        {
          *(_DWORD *)uint64_t input = 136316418;
          *(void *)&input[4] = "updateThread";
          *(_WORD *)&input[12] = 1024;
          *(_DWORD *)&input[14] = 2802;
          *(_WORD *)&input[18] = 1024;
          *(_DWORD *)&input[20] = v61;
          *(_WORD *)&input[24] = 1024;
          *(_DWORD *)&input[26] = v58 & 1;
          *(_WORD *)&input[30] = 2048;
          *(double *)&input[32] = v77;
          *(_WORD *)&input[40] = 2048;
          *(double *)&input[42] = v63;
          _os_log_debug_impl(&dword_1D2690000, v78, OS_LOG_TYPE_DEBUG, "*** %s:%d updatesDone=%d last_update_ignored=%d now=%f deadline=%f *** ", input, 0x32u);
          if ((v58 & 1) == 0)
          {
LABEL_92:
            double v63 = v76 + v77;
            goto LABEL_93;
          }
        }
        else if ((v58 & 1) == 0)
        {
          goto LABEL_92;
        }
        uint64_t v76 = 0.0;
        if (v77 < v63) {
          uint64_t v76 = v63 - v77;
        }
LABEL_93:
        if (debug_polling)
        {
          uint64_t v79 = *((void *)v3 + 287);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t input = 136316674;
            *(void *)&input[4] = "updateThread";
            *(_WORD *)&input[12] = 1024;
            *(_DWORD *)&input[14] = 2860;
            *(_WORD *)&input[18] = 1024;
            *(_DWORD *)&input[20] = v61;
            *(_WORD *)&input[24] = 1024;
            *(_DWORD *)&input[26] = v58 & 1;
            *(_WORD *)&input[30] = 2048;
            *(double *)&input[32] = v77;
            *(_WORD *)&input[40] = 2048;
            *(double *)&input[42] = v63;
            *(_WORD *)&input[50] = 2048;
            v357 = v76;
            _os_log_error_impl(&dword_1D2690000, v79, OS_LOG_TYPE_ERROR, "*** %s:%d updatesDone=%d last_update_ignored=%d now=%f deadline=%f update_interval=%f *** ", input, 0x3Cu);
          }
        }
        if (v76 == 0.0)
        {
          int v58 = 0;
          LODWORD(refCon) = 0;
LABEL_121:
          LOBYTE(v58) = v58 != 0;
          goto LABEL_122;
        }
        if (CFRunLoopRunInMode(mode, v76, 1u) != kCFRunLoopRunHandledSource)
        {
          int v58 = 0;
          goto LABEL_121;
        }
        int v58 = 0;
        uint64_t v80 = refCon;
        uint64_t v81 = 1;
        if ((int)refCon > -536870145)
        {
          if (refCon == -536870144 || refCon == -536723200) {
            goto LABEL_113;
          }
          uint64_t v82 = -469794560;
        }
        else
        {
          if ((refCon + 536870288) <= 0x20
            && ((1 << (refCon - 112)) & 0x100010001) != 0)
          {
            goto LABEL_113;
          }
          uint64_t v82 = -536870320;
        }
        if (refCon != v82)
        {
          uint64_t v81 = debug_polling;
          if (debug_polling)
          {
            v83 = *((void *)v3 + 287);
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t input = 136315906;
              *(void *)&input[4] = "updateThread";
              *(_WORD *)&input[12] = 1024;
              *(_DWORD *)&input[14] = 2879;
              *(_WORD *)&input[18] = 1024;
              *(_DWORD *)&input[20] = v61;
              *(_WORD *)&input[24] = 1024;
              *(_DWORD *)&input[26] = v80;
              _os_log_error_impl(&dword_1D2690000, v83, OS_LOG_TYPE_ERROR, "*** %s:%d updatesDone=%d message.messageType=%#x  (ign) *** ", input, 0x1Eu);
            }
            uint64_t v81 = 0;
            int v58 = 1;
          }
          else
          {
            int v58 = 1;
          }
        }
LABEL_113:
        if (v80 > -536870145)
        {
          if (v80 == -536870144 || v80 == -469794560) {
            goto LABEL_121;
          }
          uint64_t v84 = -536723200;
        }
        else
        {
          if ((v80 + 536870288) <= 0x20 && ((1 << (v80 - 112)) & 0x100010001) != 0) {
            goto LABEL_121;
          }
          uint64_t v84 = -536870320;
        }
        if (v80 == v84) {
          goto LABEL_121;
        }
        if (v81)
        {
LABEL_122:
          if (debug_polling && (uint64_t v85 = *((void *)v3 + 287), os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)))
          {
            *(_DWORD *)uint64_t input = 136316162;
            *(void *)&input[4] = "updateThread";
            *(_WORD *)&input[12] = 1024;
            *(_DWORD *)&input[14] = 2897;
            *(_WORD *)&input[18] = 1024;
            *(_DWORD *)&input[20] = v61;
            *(_WORD *)&input[24] = 1024;
            *(_DWORD *)&input[26] = refCon;
            *(_WORD *)&input[30] = 1024;
            *(_DWORD *)&input[32] = v311 & 1;
            _os_log_error_impl(&dword_1D2690000, v85, OS_LOG_TYPE_ERROR, "*** %s:%d updatesDone=%d message.messageType=%#x system_sleep=%d *** ", input, 0x24u);
            if (v61) {
              goto LABEL_125;
            }
LABEL_126:
            CFProperty = IORegistryEntryCreateCFProperty(v6, @"AdapterInfo", allocator, 0);
            unint64_t v88 = IORegistryEntryCreateCFProperty(v6, @"AppleRawExternalConnected", allocator, 0);
            LODWORD(keys[0]) = 0;
            if (CFProperty)
            {
              uint64_t v89 = CFGetTypeID(CFProperty);
              if (v89 == CFNumberGetTypeID()) {
                CFNumberGetValue((CFNumberRef)CFProperty, kCFNumberSInt32Type, keys);
              }
              CFRelease(CFProperty);
              uint64_t v90 = (int)keys[0];
              if (v309 != (LODWORD(keys[0]) == 0))
              {
LABEL_132:
                uint64_t v91 = v305 ^ (v88 != v308);
                goto LABEL_133;
              }
              uint64_t v91 = 0;
            }
            else
            {
              uint64_t v90 = 0;
              uint64_t v91 = 0;
              if (!v309) {
                goto LABEL_132;
              }
            }
LABEL_133:
            if (debug_polling)
            {
              uint64_t v92 = logger;
              if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t input = 136316418;
                *(void *)&input[4] = "updateThread";
                *(_WORD *)&input[12] = 1024;
                *(_DWORD *)&input[14] = 2921;
                *(_WORD *)&input[18] = 1024;
                *(_DWORD *)&input[20] = v61;
                *(_WORD *)&input[24] = 1024;
                *(_DWORD *)&input[26] = v91 & 1;
                *(_WORD *)&input[30] = 1024;
                *(_DWORD *)&input[32] = v90;
                *(_WORD *)&input[36] = 1024;
                *(_DWORD *)&input[38] = v88 == v308;
                _os_log_impl(&dword_1D2690000, v92, OS_LOG_TYPE_DEFAULT, "*** %s:%d updatesDone=%d same_adaptor=%d adaptor_type=%d external_connected=%d *** ", input, 0x2Au);
              }
            }
            if ((v91 & (v61 != 0)) != 1 || v76 == 0.0)
            {
              int v93 = (int)keys[0];
              v309 = LODWORD(keys[0]) != 0;
              v305 = v88 == v308;
              uint64_t v2 = (_DWORD *)&unk_1EA696000;
              if (v88) {
                CFRelease(v88);
              }
              if (v93 != 0 && v304)
              {
                setUPOData(@"IOPMUBootUPOState", 0);
                v304 = 0;
              }
              ++debug_cnt_ut_recv;
              uint64_t v86 = refCon;
              __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
              goto LABEL_147;
            }
            uint64_t v2 = (_DWORD *)&unk_1EA696000;
            if (v88) {
              CFRelease(v88);
            }
            char v59 = 0;
            mach_port_t v65 = -1;
            LOBYTE(v58) = 1;
LABEL_141:
            __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          }
          else
          {
            if (!v61) {
              goto LABEL_126;
            }
LABEL_125:
            uint64_t v86 = refCon;
            if (refCon == -536723200) {
              goto LABEL_126;
            }
LABEL_147:
            if (v86 == -469794560)
            {
              LOBYTE(v58) = 1;
              if (v76 != 0.0) {
                uint64_t v75 = 1;
              }
            }
            if ((v311 & (v86 != -536870144)) != 0)
            {
LABEL_156:
              char v59 = 0;
              mach_port_t v65 = -1;
              v311 = 1;
            }
            else if (v86 == -536870288)
            {
              IOAllowPowerChange(kernelPort, notificationID);
              char v59 = 0;
              mach_port_t v65 = -1;
              LOBYTE(v58) = 1;
            }
            else
            {
              if (v60 && v86 == -536870272)
              {
                IOAllowPowerChange(kernelPort, notificationID);
                goto LABEL_156;
              }
              if (v303 == -1)
              {
                char v59 = 0;
                ++v60;
                goto LABEL_166;
              }
              if (v86 == -536870144)
              {
                if (v299) {
                  updateThermalCoolDownState(notification[1], 0);
                }
                v299 = 0;
                if (v311)
                {
                  v311 = 0;
                  qword_1EA696598 = time(0);
                }
                else
                {
                  v311 = 0;
                }
              }
              int hdq_state = ggctl_get_hdq_state(v303);
              if (hdq_state == -2)
              {
                char v59 = 1;
                goto LABEL_445;
              }
              if (hdq_state)
              {
                if (hdq_state < 0)
                {
                  if (os_log_type_enabled(*((os_log_t *)v3 + 287), OS_LOG_TYPE_ERROR)) {
                    updateThread_cold_2(&v332, v333);
                  }
                  char v59 = 0;
                  goto LABEL_444;
                }
                v98 = hdqBreak(v303);
                if (v98 != -2)
                {
                  if (v98 < 0)
                  {
                    v99 = v3;
                    id v100 = ++updateThread_debug_break_failures;
                    uint64_t v101 = *((void *)v99 + 287);
                    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint64_t input = 136315906;
                      *(void *)&input[4] = "updateThread";
                      *(_WORD *)&input[12] = 1024;
                      *(_DWORD *)&input[14] = 3024;
                      *(_WORD *)&input[18] = 1024;
                      *(_DWORD *)&input[20] = v100;
                      *(_WORD *)&input[24] = 1024;
                      *(_DWORD *)&input[26] = -1;
                      _os_log_error_impl(&dword_1D2690000, v101, OS_LOG_TYPE_ERROR, "%s:%d break failed break_failures=%d (%d)", input, 0x1Eu);
                      id v100 = updateThread_debug_break_failures;
                    }
                    if ((-858993459 * v100) <= 0x33333333)
                    {
                      statsAndLogs(notification[1], 0);
                      __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                    }
                    else
                    {
                      v102 = -1227133513 * v100;
                      __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                      if (v102 <= 0x24924924) {
                        debugLog(notification[1], 63);
                      }
                    }
                  }
                  else if (updateThread_debug_break_failures)
                  {
                    statsAndLogs(notification[1], 1);
                    debugLog(notification[1], 0);
                    updateThread_debug_break_failures = 0;
                  }
                }
                if (v310)
                {
                  if (v61)
                  {
                    v103 = gaugeDisableInterrupts(v303);
                    if (v103 < 0)
                    {
                      uint64_t v104 = v103;
                      uint64_t v105 = *((void *)v3 + 287);
                      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)uint64_t input = 136315650;
                        *(void *)&input[4] = "updateThread";
                        *(_WORD *)&input[12] = 1024;
                        *(_DWORD *)&input[14] = 3044;
                        *(_WORD *)&input[18] = 1024;
                        *(_DWORD *)&input[20] = v104;
                        _os_log_error_impl(&dword_1D2690000, v105, OS_LOG_TYPE_ERROR, "%s:%d cannot disable gauge interrupts (%d)", input, 0x18u);
                      }
                    }
                  }
                }
                if (refCon == -536870272)
                {
                  v111 = OSThermalNotificationCurrentLevel();
                  v299 = v111 > 14;
                  uint64_t v2 = (_DWORD *)&unk_1EA696000;
                  if (v111 >= 15) {
                    updateThermalCoolDownState(notification[1], 1);
                  }
                  IOAllowPowerChange(kernelPort, notificationID);
                  char v59 = 0;
                  v311 = 1;
                  goto LABEL_445;
                }
                uint64_t v2 = (_DWORD *)&unk_1EA696000;
                if (refCon == -536870320) {
                  goto LABEL_527;
                }
                if (v61)
                {
                  v278 = 0;
                  goto LABEL_203;
                }
                if ((getFWVersion(v303, &word_1EA6964D6) & 0x80000000) != 0)
                {
                  char v59 = 0;
                  int v61 = 0;
                  ++v60;
                  mach_port_t v65 = v303;
                }
                else
                {
                  uint64_t v112 = CFNumberCreate(allocator, kCFNumberIntType, &word_1EA6964D6);
                  if (v112)
                  {
                    v113 = v112;
                    IORegistryEntrySetCFProperty(v6, @"GasGaugeFirmwareVersion", v112);
                    CFRelease(v113);
                  }
                  v114 = (unsigned __int16)word_1EA6964D6;
                  uint64_t v115 = (unsigned __int16)word_1EA6964D6 - 1281 < 2;
                  *v296 = (unsigned __int16)word_1EA6964D6 > 0x131u;
                  if (v114 == 265)
                  {
                    v116 = logger;
                    v295 = 0;
                    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)uint64_t input = 0;
                      _os_log_impl(&dword_1D2690000, v116, OS_LOG_TYPE_DEFAULT, "gas gauge firmware 1.09: disabling critical battery shutdown", input, 2u);
                      v295 = 0;
                    }
                  }
                  LOBYTE(v291) = v291 | v115;
                  keys[0] = 0;
                  if ((readChargeTable(v303, (__CFData **)keys) & 0x80000000) != 0)
                  {
                    char v59 = 0;
                    int v61 = 0;
                    ++v60;
                    mach_port_t v65 = v303;
                    goto LABEL_141;
                  }
                  __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                  if (keys[0])
                  {
                    *(void **)buf = keys[0];
                    v359[0] = @"ChargeTable";
                    v278 = 1;
                  }
                  else
                  {
                    v278 = 0;
                  }
                  if (dword_1EA6965A8) {
                    v117 = dword_1EA6965A8;
                  }
                  else {
                    v117 = 2;
                  }
                  uint64_t Block = ggctl_readBlock(v303, -1, v117, updateThread_batteryInfo, 0);
                  if (Block < 0) {
                    strcpy((char *)updateThread_batteryInfo, "000000");
                  }
                  if (v290)
                  {
                    byte_1EA6964D8 = dword_1EA696648;
                    if ((_BYTE)dword_1EA696648)
                    {
                      LOBYTE(v290) = 1;
                    }
                    else
                    {
                      v161 = logger;
                      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                      {
                        *(void *)uint64_t input = 67109376;
                        *(_WORD *)&input[8] = 1024;
                        *(_DWORD *)&input[10] = Block;
                        _os_log_error_impl(&dword_1D2690000, v161, OS_LOG_TYPE_ERROR, "disabled passedCharge PCFF=%d err=%d", input, 0xEu);
                      }
                      LOBYTE(v290) = 0;
                      uint64_t v2 = (_DWORD *)&unk_1EA696000;
                    }
                  }
                  else
                  {
                    LOBYTE(v290) = 0;
                  }
                  if (byte_1EA6964F4) {
                    word_1EA6964D4 = 136;
                  }
                  if (hdqReadS16(v303, 60, &word_1EA6964D2)) {
                    word_1EA6964D2 = 0;
                  }
                  if (controlReadU16(v303, 8, &word_1EA6964D0))
                  {
                    word_1EA6964D0 = 0;
                    v274 = 0;
                    v275 = 1;
                    uint64_t v109 = v278;
LABEL_280:
                    v330 = v61 < 16;
                    *(void *)&buf[8 * v109] = CFNumberCreate(allocator, kCFNumberIntType, &v330);
                    v359[v109] = @"ForceFullGGUpdateOnBoot";
                    HIDWORD(v133) = -1431655764 * v61 + 143165576;
                    LODWORD(v133) = HIDWORD(v133);
                    v134 = (v133 >> 2) < 0x4444445 && v61 < 16;
                    if (v134)
                    {
                      v135 = 1;
                    }
                    else
                    {
                      HIDWORD(v136) = -1813430636 * v61 + 9544368;
                      LODWORD(v136) = HIDWORD(v136);
                      v135 = (v136 >> 4) < 0x123457;
                    }
                    v279 = (os_log_t)v109;
                    if (debug_polling)
                    {
                      v137 = v135;
                      v138 = logger;
                      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)uint64_t input = 136316418;
                        *(void *)&input[4] = "updateThread";
                        *(_WORD *)&input[12] = 1024;
                        *(_DWORD *)&input[14] = 3254;
                        *(_WORD *)&input[18] = 1024;
                        *(_DWORD *)&input[20] = v61;
                        *(_WORD *)&input[24] = 1024;
                        *(_DWORD *)&input[26] = v137;
                        *(_WORD *)&input[30] = 1024;
                        *(_DWORD *)&input[32] = v134;
                        *(_WORD *)&input[36] = 1024;
                        *(_DWORD *)&input[38] = v61 < 16;
                        _os_log_impl(&dword_1D2690000, v138, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d, fullUpdate=%d, bootFullUpdate=%d, forceFullUpdate=%d] ", input, 0x2Au);
                        v139 = debug_polling;
                      }
                      else
                      {
                        v139 = 1;
                      }
                      if (v61) {
                        v140 = v137;
                      }
                      else {
                        v140 = 0;
                      }
                      __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                      v135 = v137;
                      if (v139)
                      {
                        uint64_t v109 = (uint64_t)v279;
                        if (v140)
                        {
                          v140 = 1;
                          statsAndLogs(notification[1], 1);
                        }
                      }
                      else
                      {
                        uint64_t v109 = (uint64_t)v279;
                      }
                    }
                    else
                    {
                      if (v61) {
                        v140 = v135;
                      }
                      else {
                        v140 = 0;
                      }
                      __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                    }
                    if (v275)
                    {
LABEL_440:
                      if (*v296 && *(_DWORD *)(v292 + 4)) {
                        ++*(_DWORD *)(v292 + 28);
                      }
                      char v59 = 0;
                      ++debug_cnt_ut_err;
LABEL_444:
                      ++v60;
                      goto LABEL_445;
                    }
                    v267 = v135;
                    if (debug_polling)
                    {
                      v141 = *((void *)v3 + 287);
                      if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)uint64_t input = 136315650;
                        *(void *)&input[4] = "updateThread";
                        *(_WORD *)&input[12] = 1024;
                        *(_DWORD *)&input[14] = 3295;
                        *(_WORD *)&input[18] = 1024;
                        *(_DWORD *)&input[20] = v61;
                        _os_log_impl(&dword_1D2690000, v141, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d POLLING THE BATTERY", input, 0x18u);
                      }
                    }
                    v142 = (v109 + 1);
                    v143 = !v298;
                    if (!v61) {
                      v143 = 1;
                    }
                    v272 = v143;
                    if (v143 != 1) {
                      goto LABEL_317;
                    }
                    v144 = (v109 + 1);
                    if (v267) {
                      v145 = 18;
                    }
                    else {
                      v145 = 10;
                    }
                    BatteryData = readBatteryData((uint64_t)&updateThread_updates, v145, v303);
                    if (BatteryData == v145)
                    {
                      calculateBatteryHealthMetric();
                      v142 = v144;
                      goto LABEL_317;
                    }
                    v276 = BatteryData;
                    log = *((void *)v3 + 287);
                    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)uint64_t input = 67109376;
                      *(_DWORD *)&input[4] = v145;
                      *(_WORD *)&input[8] = 1024;
                      *(_DWORD *)&input[10] = v276;
                      _os_log_impl(&dword_1D2690000, log, OS_LOG_TYPE_DEFAULT, "cannot read battery data count=%d (err=%d)", input, 0xEu);
                    }
                    calculateBatteryHealthMetric();
                    v142 = v144;
                    LODWORD(ChargerData) = v276;
                    if (v276)
                    {
                      v148 = 0;
                    }
                    else
                    {
LABEL_317:
                      v149 = word_1EA6964DA;
                      v150 = word_1EA6964E2;
                      if (word_1EA6964E2) {
                        v151 = 0;
                      }
                      else {
                        v151 = word_1EA6964DA == 3600;
                      }
                      v152 = (unsigned __int16)word_1EA69650A;
                      if (v151 || (unsigned __int16)word_1EA69650A == 0xFFFF)
                      {
                        logb = v142;
                        v160 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t input = 67110144;
                          *(_DWORD *)&input[4] = v152;
                          *(_WORD *)&input[8] = 1024;
                          *(_DWORD *)&input[10] = word_1EA6964E4;
                          *(_WORD *)&input[14] = 1024;
                          *(_DWORD *)&input[16] = word_1EA6964DC;
                          *(_WORD *)&input[20] = 1024;
                          *(_DWORD *)&input[22] = v149;
                          *(_WORD *)&input[26] = 1024;
                          *(_DWORD *)&input[28] = v150;
                          _os_log_impl(&dword_1D2690000, v160, OS_LOG_TYPE_DEFAULT, "gas gauge reset detected (flags %#x capacity %d/%dmAh voltage %dmV current %dmA)", input, 0x20u);
                        }
                        v148 = 0;
                        LODWORD(ChargerData) = -1;
                        __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                        v142 = logb;
                      }
                      else
                      {
                        if (!v61 && v345)
                        {
                          loga = v142;
                          v345 = 0;
                          v153 = word_1EA6964DC;
                          v154 = 100 * (word_1EA6964DC / 100) + 100;
                          v155 = logger;
                          v156 = os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT);
                          v157 = v154;
                          v158 = v154;
                          if (v156)
                          {
                            *(void *)uint64_t input = 67110144;
                            v159 = ((26215 * v154) >> 18) + ((26215 * v154) >> 31);
                            *(_WORD *)&input[8] = 1024;
                            *(_DWORD *)&input[10] = v153;
                            *(_WORD *)&input[14] = 1024;
                            *(_DWORD *)&input[16] = word_1EA6964E4;
                            *(_WORD *)&input[20] = 1024;
                            *(_DWORD *)&input[22] = v158;
                            *(_WORD *)&input[26] = 1024;
                            *(_DWORD *)&input[28] = ((26215 * v158) >> 18) + ((26215 * v158) >> 31);
                            _os_log_impl(&dword_1D2690000, v155, OS_LOG_TYPE_DEFAULT, "mask real UPOState=%x FCC=%d RemCap=%d new FCC=%d new RemCap=%d", input, 0x20u);
                          }
                          else
                          {
                            v159 = ((26215 * v154) >> 18) + ((26215 * v154) >> 31);
                          }
                          word_1EA6964DC = v157;
                          word_1EA6964E4 = v159;
                          v142 = loga;
                        }
                        if ((v272 ^ 1))
                        {
                          LODWORD(ChargerData) = 0;
                          v162 = v305;
                        }
                        else
                        {
                          v162 = v305;
                          if (v305) {
                            v163 = 24;
                          }
                          else {
                            v163 = 22;
                          }
                          LODWORD(ChargerData) = hdqReadS16(v303, v163, &word_1EA6964E6);
                        }
                        v148 = ChargerData == 0;
                        v164 = ChargerData != 0;
                        if ((v297 & 2) == 0) {
                          v164 = 1;
                        }
                        if ((v164 || !v162) | (v272 ^ 1) & 1)
                        {
                          __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                        }
                        else
                        {
                          ChargerData = readChargerData(v291 & 1, v290 & 1, v303);
                          *(void *)&buf[8 * (void)v142] = ChargerData;
                          __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                          if (ChargerData)
                          {
                            if (v287) {
                              CFShow(ChargerData);
                            }
                            LODWORD(ChargerData) = 0;
                            v359[(void)v142] = @"ChargerData";
                            v142 = ((char *)&v279->isa + 2);
                          }
                        }
                      }
                    }
                    v277 = (int)ChargerData;
                    v280 = v148;
                    if (v148 && (unsigned __int16)word_1EA6964D6 >= 0x501u)
                    {
                      v329 = (unsigned __int16)word_1EA6964DE;
                      *(void *)&buf[8 * (void)v142] = CFNumberCreate(allocator, kCFNumberIntType, &v329);
                      v359[(void)v142] = @"NominalChargeCapacity";
                      v165 = ((char *)&v142->isa + 1);
                    }
                    else
                    {
                      v165 = v142;
                    }
                    if (debug_polling)
                    {
                      v166 = *((void *)v3 + 287);
                      if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)uint64_t input = 67109376;
                        *(_DWORD *)&input[4] = dword_1EA696650;
                        *(_WORD *)&input[8] = 1024;
                        *(_DWORD *)&input[10] = dword_1EA696694;
                        _os_log_impl(&dword_1D2690000, v166, OS_LOG_TYPE_DEFAULT, "determineVACVoltage, vacLevelCount=%d, vac95LevelCount=%d", input, 0xEu);
                      }
                    }
                    v167 = v305;
                    v266 = v140;
                    if (!byte_1EA6964F4 || v61 != 0 && !v305)
                    {
                      if (v285 && (v61 == 0 || v305))
                      {
                        v173 = determineVACVoltage();
                        if (v173 != dword_1EA6964F8)
                        {
                          v174 = v173;
                          dword_1EA6964F8 = v173;
                          v175 = *((void *)v3 + 287);
                          if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)uint64_t input = 67109120;
                            *(_DWORD *)&input[4] = v174;
                            _os_log_impl(&dword_1D2690000, v175, OS_LOG_TYPE_DEFAULT, "Added atvAbsMaxVoltageMV=%u to battery dict", input, 8u);
                            v174 = dword_1EA6964F8;
                          }
                          v170 = allocator;
                          v328 = v174;
                          v169 = v165;
                          *(void *)&buf[8 * (void)v165] = CFNumberCreate(allocator, kCFNumberIntType, &v328);
                          v172 = @"atvAbsMaxVoltageMV";
                          v167 = v305;
                          v171 = v272;
LABEL_375:
                          v359[(void)v169] = v172;
                          v169 = ((char *)v169 + 1);
                          goto LABEL_376;
                        }
                        v167 = v305;
                      }
                      v170 = allocator;
                      v169 = v165;
                      goto LABEL_371;
                    }
                    v168 = dynamicATV(v303);
                    v169 = v165;
                    *(void *)&buf[8 * (void)v165] = v168;
                    v170 = allocator;
                    if (v168)
                    {
                      v171 = v272;
                      if (v287) {
                        CFShow(v168);
                      }
                      v172 = @"AppleDynamicATV";
                      goto LABEL_375;
                    }
LABEL_371:
                    v171 = v272;
LABEL_376:
                    v176 = v280;
                    if ((v297 & 2) != 0) {
                      v176 = 0;
                    }
                    if ((v171 & (v176 && v167)) == 1)
                    {
                      *(void *)uint64_t input = 0;
                      keys[0] = 0;
                      *(void *)uint64_t input = CFNumberCreate(v170, kCFNumberIntType, &dword_1EA6964F8);
                      keys[0] = @"ChargingVoltage";
                      *(void *)&buf[8 * (void)v169] = CFDictionaryCreate(v170, (const void **)keys, (const void **)input, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      v359[(void)v169] = @"ChargerData";
                      v169 = ((char *)v169 + 1);
                      CFRelease(*(CFTypeRef *)input);
                    }
                    if (dword_1EA6966D8)
                    {
                      v177 = determinePoSMThreshold();
                      if (v177 != dword_1EA696500) {
                        dword_1EA696500 = v177;
                      }
                      *(_DWORD *)uint64_t input = HIWORD(v177);
                      LODWORD(keys[0]) = (unsigned __int16)v177;
                      if ((unsigned __int16)v177 == 0xFFFF || HIWORD(v177) == 0xFFFF) {
                        v179 = 0;
                      }
                      else {
                        v179 = dword_1EA6966D8;
                      }
                      *(_DWORD *)v349 = v179;
                      *(void *)&buf[8 * (void)v169] = CFNumberCreate(v170, kCFNumberIntType, v349);
                      v359[(void)v169] = @"PoSMEnabled";
                      v180 = CFNumberCreate(allocator, kCFNumberIntType, input);
                      v181 = 8 * (void)v169 + 8;
                      *(void *)&buf[v181] = v180;
                      *(void **)((char *)v359 + v181) = @"PoSMUpperThreshold";
                      v169 = ((char *)v169 + 2);
                      *(void *)&buf[8 * (void)v169] = CFNumberCreate(allocator, kCFNumberIntType, keys);
                      v359[(void)v169] = @"PoSMLowerThreshold";
                    }
                    else
                    {
                      *(_DWORD *)uint64_t input = 0;
                      *(void *)&buf[8 * (void)v169] = CFNumberCreate(v170, kCFNumberIntType, input);
                      v359[(void)v169] = @"PoSMEnabled";
                    }
                    if ((v280 & v297) != 0) {
                      U16 = 0;
                    }
                    else {
                      U16 = v277;
                    }
                    if ((v171 & v280 & v297) == 1) {
                      U16 = hdqReadU16(v303, 110, &word_1EA6964E8);
                    }
                    __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                    uint64_t v2 = (_DWORD *)&unk_1EA696000;
                    v184 = v274;
                    v185 = v169;
                    v186 = (unint64_t)&v169->isa + 1;
                    if (!U16)
                    {
                      v187 = v185;
                      logc = v185;
                      v327 = 10 * word_1EA6964E0 - 27320;
                      *(void *)&buf[8 * v186] = CFNumberCreate(allocator, kCFNumberIntType, &v327);
                      v359[v186] = @"Temperature";
                      v326 = word_1EA6964E2;
                      v188 = CFNumberCreate(allocator, kCFNumberIntType, &v326);
                      v189 = 8 * (void)v187;
                      v190 = 8 * (void)v187 + 16;
                      *(void *)&buf[v190] = v188;
                      *(void **)((char *)v359 + v190) = @"Amperage";
                      v325 = word_1EA6964DA;
                      v191 = CFNumberCreate(allocator, kCFNumberIntType, &v325);
                      v192 = 8 * (void)v187 + 24;
                      *(void *)&buf[v192] = v191;
                      *(void **)((char *)v359 + v192) = @"Voltage";
                      v324 = word_1EA6964E6;
                      v193 = CFNumberCreate(allocator, kCFNumberIntType, &v324);
                      v194 = 8 * (void)v187 + 32;
                      *(void *)&buf[v194] = v193;
                      *(void **)((char *)v359 + v194) = @"TimeRemaining";
                      int v64 = word_1EA6964E4;
                      v323 = word_1EA6964E4;
                      v195 = CFNumberCreate(allocator, kCFNumberIntType, &v323);
                      v196 = v189 + 40;
                      *(void *)&buf[v196] = v195;
                      *(void **)((char *)v359 + v196) = @"CurrentCapacity";
                      v322 = word_1EA6964DC;
                      v197 = CFNumberCreate(allocator, kCFNumberIntType, &v322);
                      v198 = v189 + 48;
                      *(void *)&buf[v198] = v197;
                      *(void **)((char *)v359 + v198) = @"MaxCapacity";
                      HIWORD(v199) = -18304;
                      LOWORD(v199) = word_1EA696506;
                      *(_DWORD *)uint64_t input = llroundf((float)((float)((float)word_1EA6964EA * -0.000061035) + 1.0) * (float)v199);
                      v200 = CFNumberCreate(allocator, kCFNumberIntType, input);
                      v201 = v189 + 56;
                      *(void *)&buf[v201] = v200;
                      *(void **)((char *)v359 + v201) = @"AbsoluteCapacity";
                      v202 = v308;
                      if (!v274) {
                        v202 = v294;
                      }
                      v203 = v189 + 64;
                      *(void *)&buf[v203] = v202;
                      *(void **)((char *)v359 + v203) = @"AtCriticalLevel";
                      v321 = (unsigned __int16)word_1EA69650A;
                      v204 = CFNumberCreate(allocator, kCFNumberIntType, &v321);
                      v205 = v189 + 72;
                      *(void *)&buf[v205] = v204;
                      *(void **)((char *)v359 + v205) = @"AppleRawBatteryFlags";
                      v206 = (char *)&logc[1].isa + 2;
                      if (v297)
                      {
                        v320 = (unsigned __int16)word_1EA6964E8;
                        *(void *)&buf[8 * (void)v206] = CFNumberCreate(allocator, kCFNumberIntType, &v320);
                        v359[(void)v206] = @"ITMiscStatus";
                        v319 = word_1EA6964E8 & 3;
                        v207 = CFNumberCreate(allocator, kCFNumberIntType, &v319);
                        v208 = v189 + 88;
                        *(void *)&buf[v208] = v207;
                        *(void **)((char *)v359 + v208) = @"ITSimulationCounter";
                        v318 = ((unsigned __int16)word_1EA6964E8 >> 2) & 3;
                        v209 = CFNumberCreate(allocator, kCFNumberIntType, &v318);
                        v210 = v189 + 96;
                        *(void *)&buf[v210] = v209;
                        *(void **)((char *)v359 + v210) = @"RaUpdateCounter";
                        v206 = (char *)&logc[1].isa + 5;
                      }
                      v317 = word_1EA69650A & 0x80;
                      *(void *)&buf[8 * (void)v206] = CFNumberCreate(allocator, kCFNumberIntType, &v317);
                      v359[(void)v206] = @"OCVTakenFlag";
                      v316 = word_1EA69650A & 0x200;
                      v211 = CFNumberCreate(allocator, kCFNumberIntType, &v316);
                      v212 = 8 * (void)v206 + 8;
                      *(void *)&buf[v212] = v211;
                      *(void **)((char *)v359 + v212) = @"FCFlag";
                      v186 = (unint64_t)(v206 + 2);
                      if (!v267) {
                        goto LABEL_406;
                      }
                      v315 = (unsigned __int16)word_1EA696504;
                      *(void *)&buf[8 * v186] = CFNumberCreate(allocator, kCFNumberIntType, &v315);
                      v359[v186] = @"CycleCount";
                      v314 = word_1EA6964D2;
                      v213 = CFNumberCreate(allocator, kCFNumberIntType, &v314);
                      v214 = 8 * (void)v206 + 24;
                      *(void *)&buf[v214] = v213;
                      *(void **)((char *)v359 + v214) = @"DesignCapacity";
                      v186 = (unint64_t)(v206 + 4);
                      v215 = parseBatteryData(v297 & 1, v283);
                      *(void *)&buf[8 * (void)(v206 + 4)] = v215;
                      if (v215)
                      {
                        U16 = 0;
                        if (v287) {
                          CFShow(v215);
                        }
                        v359[v186] = @"BatteryData";
                        v186 = (unint64_t)(v206 + 5);
                        v184 = v274;
                      }
                      else
                      {
LABEL_406:
                        v184 = v274;
                        U16 = 0;
                      }
                      uint64_t v2 = (_DWORD *)&unk_1EA696000;
                    }
                    if (v289 && (updateThread_oneTime & 1) == 0)
                    {
                      v355 = 0u;
                      memset(input, 0, sizeof(input));
                      *(_OWORD *)keys = 0u;
                      v354 = 0u;
                      if (ggctl_logShutdownReason(v303, (uint64_t)input, 1u) || !*(void *)&input[40])
                      {
                        v218 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)v349 = 136315394;
                          v350 = "updateThread";
                          v351 = 1024;
                          v352 = 3577;
                          _os_log_impl(&dword_1D2690000, v218, OS_LOG_TYPE_DEFAULT, "%s:%d  Error Reading Shutdown reason", v349, 0x12u);
                        }
                        uint64_t v2 = (_DWORD *)&unk_1EA696000;
                      }
                      else
                      {
                        ggctl_logShutdownReason2(v303, keys, 1u);
                        v216 = parseShutdownReason((__int16 *)input, (const UInt8 *)keys, v303);
                        if (v216)
                        {
                          v217 = v216;
                          if (v287) {
                            CFShow(v216);
                          }
                          *(void *)&buf[8 * v186] = v217;
                          v359[v186++] = @"BatteryShutdownReason";
                        }
                        memset(input, 0, sizeof(input));
                        ggctl_logShutdownReason(v303, (uint64_t)input, 0);
                        *(_OWORD *)keys = 0u;
                        v354 = 0u;
                        v355 = 0u;
                        ggctl_logShutdownReason2(v303, keys, 0);
                        uint64_t v2 = (_DWORD *)&unk_1EA696000;
                      }
                      updateThread_oneTime = 1;
                      v184 = v274;
                    }
                    if (v184) {
                      readIMAXAndSOCSmoothData(byte_1EA69656E, v182, v303);
                    }
                    if (!U16)
                    {
                      v219 = CFDictionaryCreate(allocator, (const void **)v359, (const void **)buf, v186, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      if (v219)
                      {
                        v220 = v219;
                        if (v287) {
                          CFShow(v219);
                        }
                        if (debug_polling)
                        {
                          v221 = logger;
                          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)uint64_t input = 136315650;
                            *(void *)&input[4] = "updateThread";
                            *(_WORD *)&input[12] = 1024;
                            *(_DWORD *)&input[14] = 3600;
                            *(_WORD *)&input[18] = 1024;
                            *(_DWORD *)&input[20] = v61;
                            _os_log_impl(&dword_1D2690000, v221, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d PUBLISHING BATTERY data", input, 0x18u);
                          }
                        }
                        v222 = v220;
                        U16 = IORegistryEntrySetCFProperties(v6, v220);
                        if (U16)
                        {
                          v281 = logger;
                          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)uint64_t input = 67109120;
                            *(_DWORD *)&input[4] = U16;
                            _os_log_error_impl(&dword_1D2690000, v281, OS_LOG_TYPE_ERROR, "IORegistryEntrySetCFProperties(0x%x)", input, 8u);
                          }
                        }
                        CFRelease(v222);
                        ++debug_cnt_ut_sent;
                      }
                      else
                      {
                        v223 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)uint64_t input = 136315650;
                          *(void *)&input[4] = "updateThread";
                          *(_WORD *)&input[12] = 1024;
                          *(_DWORD *)&input[14] = 3608;
                          *(_WORD *)&input[18] = 1024;
                          *(_DWORD *)&input[20] = v61;
                          _os_log_error_impl(&dword_1D2690000, v223, OS_LOG_TYPE_ERROR, "%s:%d  updatesDone=%d dictionary failed", input, 0x18u);
                        }
                        U16 = 0;
                      }
                      uint64_t v2 = (_DWORD *)&unk_1EA696000;
                    }
                    do
                      CFRelease(*(CFTypeRef *)&buf[8 * v186 - 8]);
                    while (v186-- > 1);
                    if (U16) {
                      goto LABEL_440;
                    }
                    if (v298)
                    {
                      if (v286)
                      {
                        S16 = controlReadS16(v303, 25, 0);
                        if (S16)
                        {
                          v226 = S16;
                          v227 = logger;
                          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)uint64_t input = 67109120;
                            *(_DWORD *)&input[4] = v226;
                            _os_log_error_impl(&dword_1D2690000, v227, OS_LOG_TYPE_ERROR, "CCA: usermode cannot disable DLOG (%#x)", input, 8u);
                          }
                          LOBYTE(v286) = 1;
                        }
                        else
                        {
                          LOBYTE(v286) = 0;
                          *(_DWORD *)(v292 + 24) = 0;
                          *(_DWORD *)(v292 + 16) = 0;
                          *(void *)(v292 + 8) = 0;
                        }
                        goto LABEL_517;
                      }
                      LOBYTE(v286) = 0;
LABEL_518:
                      if (v2[450])
                      {
                        v2[450] = 0;
                        v258 = logger;
                        v259 = os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT);
                        if (v62 == 0.0)
                        {
                          if (v259)
                          {
                            *(_WORD *)uint64_t input = 0;
                            v260 = v258;
                            v261 = "gasgauge success after previous failure";
                            v262 = 2;
                            goto LABEL_524;
                          }
                        }
                        else if (v259)
                        {
                          v263 = CFAbsoluteTimeGetCurrent();
                          *(_DWORD *)uint64_t input = 134217984;
                          *(double *)&input[4] = v263 - v62;
                          v260 = v258;
                          v261 = "gasgauge success after previous %gs failure";
                          v262 = 12;
LABEL_524:
                          _os_log_impl(&dword_1D2690000, v260, OS_LOG_TYPE_DEFAULT, v261, input, v262);
                        }
                      }
                      double v62 = CFAbsoluteTimeGetCurrent();
                      char v59 = 0;
                      int v60 = 0;
                      word_1EA69658E = word_1EA6964DA;
                      word_1EA696590 = word_1EA6964E2;
                      dword_1EA696592 = *(_DWORD *)&word_1EA6964DC;
                      word_1EA696596 = word_1EA6964E4;
                      ++v61;
                      goto LABEL_445;
                    }
                    if ((unsigned __int16)word_1EA6964D6 < 0x132u) {
                      goto LABEL_518;
                    }
                    if (v284)
                    {
                      v228 = time(0);
                      if (v228 < v282)
                      {
                        v229 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t input = 134217984;
                          *(void *)&input[4] = v282;
                          v230 = v229;
                          v231 = "CCA: wait for deadline now=%lu";
                          goto LABEL_476;
                        }
                        goto LABEL_477;
                      }
                      v233 = v228;
                      if ((unsigned __int16)word_1EA6964D6 < 0x600u)
                      {
                        LOWORD(keys[0]) = 0;
                        v239 = controlReadU16(v303, 0, keys);
                        if (v239)
                        {
                          v240 = v239;
                          v241 = logger;
                          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)uint64_t input = 67109120;
                            *(_DWORD *)&input[4] = v240;
                            _os_log_error_impl(&dword_1D2690000, v241, OS_LOG_TYPE_ERROR, "CCA: cannot read DLOG status (%#x)", input, 8u);
                          }
                          goto LABEL_477;
                        }
                        v242 = (__int16)keys[0];
                        v235 = logger;
                        v243 = os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT);
                        if ((v242 & 0x800) != 0)
                        {
                          if (!v243) {
                            goto LABEL_477;
                          }
                          goto LABEL_475;
                        }
                        if (v243)
                        {
                          *(_DWORD *)uint64_t input = 67109376;
                          *(_DWORD *)&input[4] = v61;
                          *(_WORD *)&input[8] = 2048;
                          *(void *)&input[10] = v233;
                          v237 = v235;
                          v238 = "CCA: re-enable DLOG updatesDone=%d, now=%lu";
LABEL_472:
                          _os_log_impl(&dword_1D2690000, v237, OS_LOG_TYPE_DEFAULT, v238, input, 0x12u);
                        }
LABEL_473:
                        v232 = 0;
                        v282 = 0;
                      }
                      else
                      {
                        v234 = word_1EA69650A;
                        v235 = logger;
                        v236 = os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT);
                        if ((v234 & 0x20) == 0)
                        {
                          if (v236)
                          {
                            *(_DWORD *)uint64_t input = 67109376;
                            *(_DWORD *)&input[4] = v61;
                            *(_WORD *)&input[8] = 2048;
                            *(void *)&input[10] = v233;
                            v237 = v235;
                            v238 = "CCA: re-enable DLOG updatesDone=%u, now=%lu";
                            goto LABEL_472;
                          }
                          goto LABEL_473;
                        }
                        if (!v236) {
                          goto LABEL_477;
                        }
LABEL_475:
                        *(_DWORD *)uint64_t input = 134217984;
                        *(void *)&input[4] = v233;
                        v230 = v235;
                        v231 = "CCA: GasGauge still calibrating now=%lu";
LABEL_476:
                        _os_log_impl(&dword_1D2690000, v230, OS_LOG_TYPE_DEFAULT, v231, input, 0xCu);
LABEL_477:
                        v232 = 1;
                      }
                    }
                    else
                    {
                      v232 = 0;
                    }
                    if (v286)
                    {
                      if (*(_DWORD *)(v292 + 4)) {
                        goto LABEL_485;
                      }
                      v244 = logger;
                      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                      {
                        v245 = *(_DWORD *)(v292 + 4);
                        *(_DWORD *)uint64_t input = 67109120;
                        *(_DWORD *)&input[4] = v245;
                        _os_log_impl(&dword_1D2690000, v244, OS_LOG_TYPE_DEFAULT, "disabling DLOG (num_clients=%i)", input, 8u);
                      }
                      v246 = controlReadS16(v303, 25, 0);
                      if (v246)
                      {
                        v247 = v246;
                        v248 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)uint64_t input = 67109120;
                          *(_DWORD *)&input[4] = v247;
                          _os_log_error_impl(&dword_1D2690000, v248, OS_LOG_TYPE_ERROR, "cannot disable DLOG (%#x)", input, 8u);
                        }
LABEL_485:
                        v286 = 1;
                      }
                      else
                      {
                        v286 = 0;
                        *(_DWORD *)(v292 + 24) = 0;
                        *(_DWORD *)(v292 + 16) = 0;
                        *(void *)(v292 + 8) = 0;
                      }
                    }
                    else
                    {
                      v286 = 0;
                    }
                    if (*(_DWORD *)(v292 + 4)) {
                      v249 = v232;
                    }
                    else {
                      v249 = 1;
                    }
                    if ((v249 & 1) == 0)
                    {
                      if (!v61 || v286 != 1)
                      {
                        v250 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                        {
                          v251 = *(_DWORD *)(v292 + 4);
                          *(_DWORD *)uint64_t input = 67109376;
                          *(_DWORD *)&input[4] = v61;
                          *(_WORD *)&input[8] = 1024;
                          *(_DWORD *)&input[10] = v251;
                          _os_log_impl(&dword_1D2690000, v250, OS_LOG_TYPE_DEFAULT, "gathering data log updatesDone=%d num_clients=%d", input, 0xEu);
                        }
                      }
                      if ((*(_DWORD *)(v292 + 4) & 0x80000000) != 0
                        && os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                      {
                        updateThread_cold_4(&v312, v313);
                      }
                      if (drainDataLog(v303))
                      {
                        v252 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
                          updateThread_cold_3(v347, v348, v252);
                        }
                      }
                      v286 = 1;
                    }
                    if (v232)
                    {
                      v253 = 1;
                    }
                    else if ((unsigned __int16)word_1EA6964D6 < 0x600u)
                    {
                      v253 = v266;
                      if ((unsigned __int16)word_1EA6964D6 <= 0x501u) {
                        v253 = 0;
                      }
                    }
                    else
                    {
                      v253 = ((unsigned __int16)word_1EA69650A >> 5) & 1;
                    }
                    v284 = v253;
                    if ((v286 & v253) == 1)
                    {
                      v254 = controlReadS16(v303, 25, 0);
                      if (v254)
                      {
                        v255 = v254;
                        v256 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)uint64_t input = 67109120;
                          *(_DWORD *)&input[4] = v255;
                          _os_log_error_impl(&dword_1D2690000, v256, OS_LOG_TYPE_ERROR, "CCA: cannot disable DLOG (%#x)", input, 8u);
                        }
                        v284 = 0;
                        LOBYTE(v286) = 1;
                      }
                      else
                      {
                        *(_DWORD *)(v292 + 16) = 0;
                        *(void *)(v292 + 8) = 0;
                        v282 = time(0) + 20;
                        v257 = logger;
                        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t input = 67109376;
                          *(_DWORD *)&input[4] = v61;
                          *(_WORD *)&input[8] = 2048;
                          *(void *)&input[10] = v282;
                          _os_log_impl(&dword_1D2690000, v257, OS_LOG_TYPE_DEFAULT, "CCA: disabled DLOG updatesDone=%d ccaDeadline=%lu", input, 0x12u);
                        }
                        LOBYTE(v286) = 0;
                        v284 = 1;
                      }
                    }
                    __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
LABEL_517:
                    uint64_t v2 = &unk_1EA696000;
                    goto LABEL_518;
                  }
LABEL_203:
                  if (debug_polling)
                  {
                    v106 = *((void *)v3 + 287);
                    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)uint64_t input = 136315650;
                      *(void *)&input[4] = "updateThread";
                      *(_WORD *)&input[12] = 1024;
                      *(_DWORD *)&input[14] = 3146;
                      *(_WORD *)&input[18] = 1024;
                      *(_DWORD *)&input[20] = v61;
                      _os_log_impl(&dword_1D2690000, v106, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d READING FLAGS", input, 0x18u);
                    }
                  }
                  uint64_t v107 = hdqReadU16(v303, 10, &word_1EA69650A);
                  uint64_t v108 = 0;
                  v275 = v107;
                  if (v107 || (unsigned __int16)word_1EA69650A == 0xFFFF)
                  {
                    uint64_t v109 = v278;
                  }
                  else
                  {
                    uint64_t v109 = v278;
                    if (((v295 ^ 1) & 1) == 0)
                    {
                      if (word_1EA696634)
                      {
                        v273 = 0;
                        if ((v297 & 0x20) != 0)
                        {
                          os_log_type_t v110 = v288
                              && (unsigned __int16)(word_1EA696634 & word_1EA69650A) == (unsigned __int16)word_1EA696634;
                          v288 = (unsigned __int16)(word_1EA696634 & word_1EA69650A) == (unsigned __int16)word_1EA696634;
                        }
                        else
                        {
                          os_log_type_t v110 = (unsigned __int16)(word_1EA696634 & word_1EA69650A) == (unsigned __int16)word_1EA696634;
                        }
                      }
                      else if (v61 && dword_1EA696638 >= word_1EA6964DA)
                      {
                        v273 = 0;
                        os_log_type_t v110 = 1;
                      }
                      else
                      {
                        os_log_type_t v110 = ((unsigned __int16)word_1EA69650A >> 2) & 1;
                        v273 = 1;
                      }
                      if (debug_polling)
                      {
                        v119 = *((void *)v3 + 287);
                        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
                        {
                          v120 = UpSeconds();
                          *(_DWORD *)uint64_t input = 136317186;
                          *(void *)&input[4] = "updateThread";
                          *(_WORD *)&input[12] = 1024;
                          *(_DWORD *)&input[14] = 3178;
                          *(_WORD *)&input[18] = 1024;
                          *(_DWORD *)&input[20] = v61;
                          *(_WORD *)&input[24] = 1024;
                          *(_DWORD *)&input[26] = v110;
                          *(_WORD *)&input[30] = 1024;
                          *(_DWORD *)&input[32] = v305;
                          __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                          *(_WORD *)&input[36] = 2048;
                          *(void *)&input[38] = v120;
                          *(_WORD *)&input[46] = 1024;
                          *(_DWORD *)&input[48] = v344;
                          LOWORD(v357) = 1024;
                          *(_DWORD *)((char *)&v357 + 2) = dword_1EA696638;
                          HIWORD(v357) = 1024;
                          v358 = word_1EA6964DA;
                          _os_log_impl(&dword_1D2690000, v119, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d criticalValue=%d external_connected=%d UpSeconds=%llu cfd=%d cfd-voltage=%d batteryInfo.voltage=%d", input, 0x40u);
                        }
                      }
                      if (!v344) {
                        goto LABEL_263;
                      }
                      v121 = UpSeconds();
                      if (v121 <= v344)
                      {
                        if (!v61) {
                          goto LABEL_533;
                        }
                        v124 = word_1EA6964DA;
                        if (dword_1EA696638 >= word_1EA6964DA)
                        {
                          v127 = v121;
                          v128 = logger;
                          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)uint64_t input = 136316162;
                            *(void *)&input[4] = "updateThread";
                            *(_WORD *)&input[12] = 1024;
                            *(_DWORD *)&input[14] = 3201;
                            *(_WORD *)&input[18] = 1024;
                            *(_DWORD *)&input[20] = v61;
                            *(_WORD *)&input[24] = 2048;
                            *(void *)&input[26] = v127;
                            *(_WORD *)&input[34] = 1024;
                            *(_DWORD *)&input[36] = v124;
                            _os_log_impl(&dword_1D2690000, v128, OS_LOG_TYPE_DEFAULT, "%s:%d updatesDone=%d UpSeconds=%llu voltage=%d (low)", input, 0x28u);
                          }
                          v273 = 0;
                          os_log_type_t v110 = 1;
                          __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                          goto LABEL_263;
                        }
                        __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                        if (v305)
                        {
LABEL_533:
                          if (debug_polling)
                          {
                            if (v110)
                            {
                              v125 = *((void *)v3 + 287);
                              if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
                              {
                                v126 = UpSeconds();
                                *(_DWORD *)uint64_t input = 136315906;
                                *(void *)&input[4] = "updateThread";
                                *(_WORD *)&input[12] = 1024;
                                *(_DWORD *)&input[14] = 3209;
                                *(_WORD *)&input[18] = 2048;
                                *(void *)&input[20] = v126;
                                *(_WORD *)&input[28] = 1024;
                                *(_DWORD *)&input[30] = v344;
                                _os_log_impl(&dword_1D2690000, v125, OS_LOG_TYPE_DEFAULT, "%s:%d UpSeconds=%llu (cfd = %u) forcing critical to 0", input, 0x22u);
                              }
                            }
                          }
                          if (!v273) {
                            os_log_type_t v110 = 0;
                          }
                          v273 = v273 << 31 >> 31;
                        }
                      }
                      else if (debug_polling)
                      {
                        v122 = *((void *)v3 + 287);
                        if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
                        {
                          v123 = UpSeconds();
                          *(_DWORD *)uint64_t input = 136315906;
                          *(void *)&input[4] = "updateThread";
                          *(_WORD *)&input[12] = 1024;
                          *(_DWORD *)&input[14] = 3191;
                          *(_WORD *)&input[18] = 2048;
                          *(void *)&input[20] = v123;
                          *(_WORD *)&input[28] = 1024;
                          *(_DWORD *)&input[30] = v344;
                          _os_log_impl(&dword_1D2690000, v122, OS_LOG_TYPE_DEFAULT, "%s:%d deadline expired at UpSeconds=%llu (cfd = %u)", input, 0x22u);
                        }
                      }
LABEL_263:
                      if (!word_1EA696634)
                      {
                        v331 = v273;
                        *(void *)((unint64_t)buf | (8 * v278)) = CFNumberCreate(allocator, kCFNumberIntType, &v331);
                        *(void *)((unint64_t)v359 & 0xFFFFFFFFFFFFFFF7 | (8 * (v278 & 1))) = @"SOCBasedShutdown";
                        uint64_t v109 = v278 + 1;
                      }
                      if (debug_polling)
                      {
                        if (v110)
                        {
                          v129 = *((void *)v3 + 287);
                          if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
                          {
                            v130 = UpSeconds();
                            *(_DWORD *)uint64_t input = 136316674;
                            *(void *)&input[4] = "updateThread";
                            *(_WORD *)&input[12] = 1024;
                            *(_DWORD *)&input[14] = 3227;
                            *(_WORD *)&input[18] = 1024;
                            *(_DWORD *)&input[20] = v61;
                            *(_WORD *)&input[24] = 1024;
                            *(_DWORD *)&input[26] = 1;
                            *(_WORD *)&input[30] = 1024;
                            *(_DWORD *)&input[32] = v305;
                            __int16 v3 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
                            *(_WORD *)&input[36] = 2048;
                            *(void *)&input[38] = v130;
                            *(_WORD *)&input[46] = 1024;
                            *(_DWORD *)&input[48] = word_1EA6964DA;
                            _os_log_impl(&dword_1D2690000, v129, OS_LOG_TYPE_DEFAULT, "%s:%d  updatesDone=%d criticalValue=%d external_connected=%d UpSeconds=%llu batteryInfo.voltage=%d", input, 0x34u);
                          }
                        }
                      }
                      uint64_t v108 = v110 != 0;
                      uint64_t v2 = (_DWORD *)&unk_1EA696000;
                    }
                  }
                  if ((v75 & 1) == 0 || (v293 > 2 ? (v131 = 1) : (v131 = v108), (v131 & 1) != 0 || v60))
                  {
                    v274 = v108;
                    v293 = 0;
                    goto LABEL_280;
                  }
                  ++v293;
                  v132 = *((void *)v3 + 287);
                  if (os_log_type_enabled(v132, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)uint64_t input = 0;
                    _os_log_impl(&dword_1D2690000, v132, OS_LOG_TYPE_INFO, "flags update only", input, 2u);
                  }
                  char v59 = 0;
                  int v60 = 0;
LABEL_445:
                  mach_port_t v65 = v303;
                }
              }
              else
              {
                uint64_t v95 = CFPreferencesCopyValue(@"ResetEnabled", @"com.apple.gasgauge", v301, v300);
                unint64_t v96 = os_log_type_enabled(*((os_log_t *)v3 + 287), OS_LOG_TYPE_ERROR);
                if (v95 == v294)
                {
                  unint64_t v97 = v303;
                  if (v96) {
                    updateThread_cold_5(&v336, v337);
                  }
                }
                else
                {
                  if (v96) {
                    updateThread_cold_6(&v334, v335);
                  }
                  unint64_t v97 = v303;
                  ggctl_reset(v303, 1u);
                }
                char v59 = 0;
                ++v60;
                mach_port_t v65 = v97;
              }
            }
          }
        }
        else
        {
          char v59 = 0;
LABEL_166:
          mach_port_t v65 = -1;
        }
      }
    }
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
      updateThread_cold_1();
    }
  }
  return 0;
}

uint64_t batteryThread(unsigned int a1)
{
  return 0;
}

uint64_t iokit_callback(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  *(_DWORD *)double result = a3;
  *(void *)(result + 8) = a4;
  return result;
}

void getUPOData(CFStringRef key, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  io_registry_entry_t v4 = find_pmu_pmu_service;
  unsigned int v5 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (find_pmu_pmu_service) {
    goto LABEL_7;
  }
  CFMutableDictionaryRef v6 = IOServiceMatching("IOService");
  if (v6)
  {
    mach_port_t v7 = v6;
    int v15 = 0;
    CFAllocatorRef v8 = *v5;
    find_pmu_zero_number = (uint64_t)CFNumberCreate(*v5, kCFNumberSInt32Type, &v15);
    CFDictionaryRef v9 = CFDictionaryCreate(v8, (const void **)find_pmu_tmp, (const void **)&find_pmu_zero_number, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v9)
    {
      CFDictionaryRef v10 = v9;
      CFDictionarySetValue(v7, @"IOPropertyMatch", v9);
      CFRelease(v10);
      find_pmu_pmu_service = IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], v7);
    }
    else
    {
      CFRelease(v7);
    }
  }
  io_registry_entry_t v4 = find_pmu_pmu_service;
  if (find_pmu_pmu_service)
  {
LABEL_7:
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v4, key, *v5, 0);
    if (CFProperty)
    {
      uint64_t v12 = CFProperty;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID != CFGetTypeID(v12) || !CFNumberGetValue((CFNumberRef)v12, kCFNumberSInt32Type, a2))
      {
        uint64_t v14 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315394;
          mach_error_t v16 = "/Library/Caches/com.apple.xbs/Sources/AppleHDQGasGauge/AppleHDQGasGauge.c";
          __int16 v17 = 1024;
          int v18 = 2348;
          _os_log_impl(&dword_1D2690000, v14, OS_LOG_TYPE_DEFAULT, "%s:%d cannot read upo data", (uint8_t *)&v15, 0x12u);
        }
      }
      CFRelease(v12);
    }
  }
}

void setUPOData(const __CFString *a1, int a2)
{
  int v14 = a2;
  CFMutableDictionaryRef v3 = IOServiceMatching("IOService");
  if (v3)
  {
    io_registry_entry_t v4 = v3;
    int valuePtr = 0;
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    CFDictionaryRef v6 = CFDictionaryCreate(v5, (const void **)&setUPOData_tmp, (const void **)&v12, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v6)
    {
      CFDictionaryRef v7 = v6;
      CFDictionarySetValue(v4, @"IOPropertyMatch", v6);
      CFRelease(v7);
      io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], v4);
      if (!MatchingService) {
        return;
      }
      io_registry_entry_t v9 = MatchingService;
      CFNumberRef v10 = CFNumberCreate(v5, kCFNumberSInt32Type, &v14);
      IORegistryEntrySetCFProperty(v9, a1, v10);
      IOObjectRelease(v9);
      CFNumberRef v11 = v10;
    }
    else
    {
      CFNumberRef v11 = v4;
    }
    CFRelease(v11);
  }
}

void updateThermalCoolDownState(io_registry_entry_t a1, int a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  keys[0] = (void *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "ThermalCoolDown", 0x8000100u);
  CFAllocatorRef v5 = (void **)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    CFAllocatorRef v5 = (void **)MEMORY[0x1E4F1CFC8];
  }
  values = *v5;
  CFDictionaryRef v6 = CFDictionaryCreate(v4, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v6)
  {
    CFDictionaryRef v7 = v6;
    IORegistryEntrySetCFProperties(a1, v6);
    CFRelease(v7);
  }
  else if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
  {
    updateThermalCoolDownState_cold_1();
  }
}

void statsAndLogs(io_registry_entry_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFStringRef v12 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  keys = (void *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "stats", 0x8000100u);
  CFAllocatorRef v5 = (const void *)*MEMORY[0x1E4F1CFC8];
  values = (void *)*MEMORY[0x1E4F1CFC8];
  if (a2)
  {
    CFStringRef v12 = CFStringCreateWithCString(v4, "log", 0x8000100u);
    CFTypeRef cf = v5;
    CFIndex v6 = 2;
  }
  else
  {
    CFIndex v6 = 1;
  }
  CFDictionaryRef v7 = CFDictionaryCreate(v4, (const void **)&keys, (const void **)&values, v6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    if (IORegistryEntrySetCFProperties(a1, v7) && os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
      statsAndLogs_cold_2();
    }
    CFRelease(v8);
    CFRelease(values);
    if (a2) {
      CFRelease(cf);
    }
  }
  else if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
  {
    statsAndLogs_cold_1();
  }
}

void debugLog(io_registry_entry_t a1, int a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = a2;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  keys[0] = (void *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "debug", 0x8000100u);
  values = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryRef v4 = CFDictionaryCreate(v3, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    if (IORegistryEntrySetCFProperties(a1, v4))
    {
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
        debugLog_cold_2();
      }
    }
    CFRelease(v5);
    CFRelease(values);
  }
  else if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
  {
    debugLog_cold_1();
  }
}

uint64_t readChargeTable(mach_port_t a1, __CFData **a2)
{
  *(void *)&v48[26] = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  if (!dword_1EA6965AC) {
    return 0;
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  if (!ggctl_readBlock(a1, -1, dword_1EA6965AC, &outputStruct, 0))
  {
    int v4 = v47;
    if (v47 == 255)
    {
      unsigned int v9 = outputStruct;
      unint64_t v10 = (unint64_t)outputStruct >> 4;
      uint64_t v11 = 6 * v10 + 4;
      if (outputStruct <= 0x4FuLL)
      {
        unsigned __int8 v13 = 0;
        unsigned int v37 = v46;
        p_unsigned __int8 outputStruct = (char *)&outputStruct;
        do
        {
          char v15 = *p_outputStruct++;
          v13 += v15;
          --v11;
        }
        while (v11);
        int v16 = v13;
        if (v13)
        {
          uint64_t v17 = logger;
          uint64_t v3 = 0;
          if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            int v39 = v16;
            __int16 v40 = 1024;
            int v41 = v45;
            __int16 v42 = 1024;
            int v43 = 256 - (v16 - v45);
            CFIndex v6 = "gas gauge charge table bad checksum: checksum %#x checksum byte %#x expecting %#x";
            CFDictionaryRef v7 = v17;
            uint32_t v8 = 20;
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v19 = (unint64_t)v46 >> 4;
          uint64_t v20 = 4 * v19 + 8;
          Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v20 * (unint64_t)v10);
          CFDataSetLength(Mutable, v20 * (unint64_t)v10);
          if (v9 >= 0x10)
          {
            uint64_t v22 = 0;
            if (v19 <= 1) {
              uint64_t v23 = 1;
            }
            else {
              uint64_t v23 = v19;
            }
            uint64_t v36 = v23;
            if (v10 <= 1) {
              uint64_t v24 = 1;
            }
            else {
              uint64_t v24 = v10;
            }
            CFNumberRef v25 = v48;
            uint64_t v26 = 10;
            do
            {
              MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
              CFBooleanRef v28 = &MutableBytePtr[v22 * v20];
              CFBooleanRef v29 = (char *)(&outputStruct + 6 * v22);
              *(_WORD *)CFBooleanRef v28 = 100 * v29[4];
              *((_WORD *)v28 + 1) = 100 * v29[5];
              *((_DWORD *)v28 + 1) = v19;
              if (v37 >= 0x10)
              {
                CFTypeID v30 = &MutableBytePtr[v26];
                uint64_t v31 = v19 - 1;
                uint64_t v32 = v36;
                CFNumberRef v33 = v25;
                do
                {
                  if (v31) {
                    int v34 = updateThread_batteryInfo[(*v33 & 0xF) + 64];
                  }
                  else {
                    LOWORD(v34) = -1;
                  }
                  *((_WORD *)v30 - 1) = v34;
                  unsigned int v35 = *v33++;
                  *(_WORD *)CFTypeID v30 = *(int *)((char *)&updateThread_batteryInfo[80] + (((unint64_t)v35 >> 2) & 0x3C));
                  v30 += 4;
                  --v31;
                  --v32;
                }
                while (v32);
              }
              ++v22;
              v26 += v20;
              v25 += 6;
            }
            while (v22 != v24);
          }
          uint64_t v3 = 0;
          *a2 = Mutable;
        }
      }
      else
      {
        uint64_t v12 = logger;
        uint64_t v3 = 0;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          int v39 = v10;
          __int16 v40 = 1024;
          int v41 = 6 * v10 + 4;
          CFIndex v6 = "gas gauge charge table inconsistent: %d data entries, %d bytes";
          CFDictionaryRef v7 = v12;
          uint32_t v8 = 14;
          goto LABEL_14;
        }
      }
    }
    else
    {
      uint64_t v5 = logger;
      uint64_t v3 = 0;
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v39 = v4;
        CFIndex v6 = "gas gauge charge table invalid type: %#x";
        CFDictionaryRef v7 = v5;
        uint32_t v8 = 8;
LABEL_14:
        _os_log_impl(&dword_1D2690000, v7, OS_LOG_TYPE_DEFAULT, v6, buf, v8);
        return 0;
      }
    }
  }
  return v3;
}

uint64_t readRemainingCapacity__(_WORD *a1, int *a2, mach_port_t a3)
{
  unsigned __int16 v8 = 0;
  if ((getFWVersion(a3, (__int16 *)&v8) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (v8 <= 0x118u) {
    int v6 = *a2;
  }
  else {
    int v6 = 50;
  }
  return hdqReadS16(a3, v6, a1);
}

uint64_t readFAC__(_WORD *a1, uint64_t a2, mach_port_t a3)
{
  __int16 v6 = 0;
  if ((getFWVersion(a3, &v6) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (v6 == 1536) {
    return 0;
  }
  return hdqReadU16(a3, 14, a1);
}

uint64_t readBatteryData(uint64_t a1, uint64_t a2, mach_port_t a3)
{
  unsigned __int16 v10 = 0;
  if ((getFWVersion(a3, (__int16 *)&v10) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if ((int)a2 >= 1)
  {
    uint64_t v6 = 0;
    unsigned int v7 = v10;
    while (1)
    {
      if (*(_DWORD *)(a1 + 4) == -1) {
        return v6;
      }
      if (registerName(a1, v7))
      {
        uint64_t Register = readRegister(*(_WORD **)(a1 + 56), a1, a3);
        if ((Register & 0x80000000) != 0) {
          break;
        }
      }
      ++v6;
      a1 += 80;
      if (a2 == v6) {
        return a2;
      }
    }
    return Register;
  }
  return a2;
}

void calculateBatteryHealthMetric()
{
  if ((unsigned __int16)word_1EA6964D6 >= 0x600u)
  {
    uint64_t v0 = 0;
    float v1 = (double)(bswap32((unsigned __int16)word_1EA696550) >> 16) * 0.137995
       + (double)(bswap32((unsigned __int16)word_1EA69654E) >> 16) * 0.0693069
       + (double)(bswap32((unsigned __int16)word_1EA696552) >> 16) * 0.137376
       + (double)(bswap32((unsigned __int16)word_1EA696554) >> 16) * 0.137376
       + (double)(bswap32((unsigned __int16)word_1EA696556) >> 16) * 0.137376
       + (double)(bswap32((unsigned __int16)word_1EA696558) >> 16) * 0.137376
       + (double)(bswap32((unsigned __int16)word_1EA69655A) >> 16) * 0.137376
       + (double)(bswap32((unsigned __int16)word_1EA69655C) >> 16) * 0.0872525
       + (double)(bswap32((unsigned __int16)word_1EA69655E) >> 16) * 0.0185644;
    word_1EA6965A4 = (int)v1;
    while (battery_health_metric_config[v0] != word_1EA6964D0)
    {
      v0 += 4;
      if (v0 == 68)
      {
        float v2 = 0.0;
        goto LABEL_7;
      }
    }
    float v2 = (float)*(unsigned int *)&battery_health_metric_config[v0 + 2];
LABEL_7:
    float v3 = (float)(v2 * v1) / 1000.0;
    word_1EA6965A6 = (int)v3;
    if (dword_1EA6965A0 < (int)v3)
    {
      dword_1EA6965A0 = (int)v3;
      setUPOData(@"IOPMUBootBatteryHealthMetric", (int)v3);
    }
  }
}

CFDictionaryRef readChargerData(int a1, int a2, mach_port_t a3)
{
  values[8] = *(void **)MEMORY[0x1E4F143B8];
  if (readBatteryData((uint64_t)&readChargerData_chargerRegs, 5, a3) != 5) {
    return 0;
  }
  memset(&values[2], 0, 48);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt8Type, &readChargerData_notChargingReason);
  keys[0] = @"NotChargingReason";
  values[1] = CFNumberCreate(v6, kCFNumberSInt8Type, &readChargerData_chargerAlert);
  keys[1] = @"ChargerAlert";
  if (!a1) {
    goto LABEL_11;
  }
  int v7 = readChargerData_notChargingReason & 0x10;
  if (a2)
  {
    if ((readChargerData_notChargingReason & 0x10) != 0)
    {
      int v7 = (readChargerData_notChargingReason >> 4) & 1;
      LOWORD(v19) = 0;
      if ((hdqReadU16(a3, 52, &v19) & 0x80000000) == 0)
      {
        uint64_t v8 = 1717986919 * byte_1EA6964D8 * word_1EA6964D2;
        if ((int)((v8 >> 34) + ((unint64_t)v8 >> 63)) > (unsigned __int16)v19) {
          int v7 = 0;
        }
      }
    }
  }
  if (v7)
  {
    values[2] = *(void **)MEMORY[0x1E4F1CFD0];
    *(void *)&long long v21 = @"ChargerTimeout";
    uint64_t v9 = 3;
  }
  else
  {
LABEL_11:
    uint64_t v9 = 2;
  }
  if ((readChargerData_notChargingReason & 0x20) != 0)
  {
    values[v9] = (void *)*MEMORY[0x1E4F1CFD0];
    keys[v9++] = @"ChargerWatchdogTimeout";
  }
  values[v9] = CFNumberCreate(v6, kCFNumberSInt8Type, &readChargerData_chargingCurrent);
  keys[v9] = @"ChargingCurrent";
  CFNumberRef v11 = CFNumberCreate(v6, kCFNumberSInt8Type, &readChargerData_chargingVoltage);
  uint64_t v12 = 8 * v9 + 8;
  *(void **)((char *)values + v12) = v11;
  *(void **)((char *)keys + v12) = @"ChargingVoltage";
  CFNumberRef v13 = CFNumberCreate(v6, kCFNumberSInt8Type, &readChargerData_chargerStatus);
  uint64_t v14 = 8 * v9 + 16;
  *(void **)((char *)values + v14) = v13;
  *(void **)((char *)keys + v14) = @"ChargerStatus";
  time_t v19 = time(0);
  CFNumberRef v15 = CFNumberCreate(v6, kCFNumberLongType, &v19);
  uint64_t v16 = 8 * v9 + 24;
  *(void **)((char *)values + v16) = v15;
  *(void **)((char *)keys + v16) = @"UpdateTime";
  CFDictionaryRef v10 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, v9 + 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  do
  {
    CFRelease(values[v9 + 3]);
    unint64_t v17 = v9 + 4;
    --v9;
  }
  while (v17 > 1);
  return v10;
}

CFDictionaryRef dynamicATV(mach_port_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFNumberRef v21 = 0;
  time_t v19 = 0;
  *(_OWORD *)uint64_t input = xmmword_1D2B02950;
  uint64_t v23 = 0;
  if (IOConnectCallScalarMethod(a1, 7u, input, 3u, 0, 0))
  {
    float v1 = logger;
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR)) {
      dynamicATV_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
  }
  unsigned int v9 = word_1EA6964D4 + (unsigned __int16)word_1EA6964DE;
  int v10 = word_1EA6964D2;
  if (v9 <= (__int16)(v10 + ((unsigned __int16)(v10 & 0x8000) >> 15)) >> 1) {
    int v11 = (__int16)(word_1EA6964D2 + ((word_1EA6964D2 & 0x8000u) >> 15)) >> 1;
  }
  else {
    int v11 = word_1EA6964D4 + (unsigned __int16)word_1EA6964DE;
  }
  if (v9 <= word_1EA6964D2) {
    int v10 = v11;
  }
  dword_1EA6964FC = v10;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &dword_1EA6964FC);
  int v18 = @"atvBatteryCapacityMA";
  if (dword_1EA696650)
  {
    int v13 = determineVACVoltage();
    if (v13 != dword_1EA6964F8) {
      dword_1EA6964F8 = v13;
    }
    CFNumberRef v21 = CFNumberCreate(v12, kCFNumberIntType, &dword_1EA6964F8);
    time_t v19 = @"atvAbsMaxVoltageMV";
    unint64_t v14 = 2;
  }
  else
  {
    unint64_t v14 = 1;
  }
  CFDictionaryRef v15 = CFDictionaryCreate(v12, (const void **)&v18, (const void **)&values, v14, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  do
    CFRelease(*(&v19 + v14));
  while (v14-- > 1);
  return v15;
}

uint64_t determineVACVoltage()
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unsigned int v0 = dword_1EA6964F8;
  uint64_t v1 = dword_1EA696650;
  if (dword_1EA696650)
  {
    if (determineVACVoltage_lastBatteryCycleCount != (unsigned __int16)word_1EA696504 || dword_1EA6964F8 == 0)
    {
      determineVACVoltage_lastBatteryCycleCount = (unsigned __int16)word_1EA696504;
      uint64_t v3 = &dword_1EA696654;
      while (1)
      {
        unsigned int v5 = *v3++;
        unsigned __int16 v4 = v5;
        unsigned int v6 = HIWORD(v5);
        if (v5 < 0x10000 || v6 > (unsigned __int16)word_1EA696504) {
          break;
        }
        if (!--v1)
        {
          int v8 = determineVACVoltage_vacBasedVoltageMV;
          if (determineVACVoltage_vacBasedVoltageMV) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
      }
      int v8 = v4;
      if (v4) {
        goto LABEL_17;
      }
LABEL_16:
      int v8 = LOWORD(updateThread_batteryInfo[dword_1EA696650 + 104]);
LABEL_17:
      determineVACVoltage_vacBasedVoltageMV = v8;
      unsigned int v9 = logger;
      if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = 67109120;
        int v38 = v8;
        _os_log_impl(&dword_1D2690000, v9, OS_LOG_TYPE_DEFAULT, "determineVACVoltage:: vacBasedVoltageMV=%d", (uint8_t *)&v37, 8u);
        int v8 = determineVACVoltage_vacBasedVoltageMV;
      }
      if (v0) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v8 == 0;
      }
      if (!v10) {
        unsigned int v0 = v8;
      }
    }
  }
  uint64_t v11 = dword_1EA696694;
  if (dword_1EA696694 && (unsigned __int16)word_1EA6964D6 >= 0x313u)
  {
    unsigned __int8 v12 = word_1EA69653E;
    if ((unsigned __int16)word_1EA6964D6 <= 0x500u) {
      __int16 v13 = word_1EA69653E;
    }
    else {
      __int16 v13 = word_1EA69653C;
    }
    unint64_t v14 = (unsigned __int8 *)&word_1EA69653E + 1;
    if ((unsigned __int16)word_1EA6964D6 > 0x500u) {
      unint64_t v14 = (unsigned __int8 *)&word_1EA69653C + 1;
    }
    unsigned __int16 v15 = *v14 | (unsigned __int16)(v13 << 8);
    if ((unsigned __int16)word_1EA6964D6 <= 0x500u) {
      unsigned __int8 v12 = byte_1EA696540;
    }
    if (v12 && v15 != 0)
    {
      if (determineVACVoltage_lastTimeAbove95 != v12
        || ((unsigned __int16)determineVACVoltage_lastToT == v15 ? (BOOL v17 = v0 == 0) : (BOOL v17 = 1), v17))
      {
        determineVACVoltage_lastTimeAbove95 = v12;
        determineVACVoltage_lastToT = v15;
        unint64_t v18 = (42949673 * (unint64_t)(v12 * v15)) >> 32;
        time_t v19 = &dword_1EA696698;
        while (1)
        {
          unsigned int v21 = *v19++;
          unsigned __int16 v20 = v21;
          unsigned int v22 = HIWORD(v21);
          if (v21 < 0x10000 || v18 < v22) {
            break;
          }
          if (!--v11)
          {
            int v24 = determineVACVoltage_vac95BasedVoltageMV;
            if (determineVACVoltage_vac95BasedVoltageMV) {
              goto LABEL_54;
            }
            goto LABEL_53;
          }
        }
        int v24 = v20;
        if (v20) {
          goto LABEL_54;
        }
LABEL_53:
        int v24 = LOWORD(updateThread_batteryInfo[dword_1EA696694 + 121]);
LABEL_54:
        determineVACVoltage_vac95BasedVoltageMV = v24;
        CFNumberRef v25 = logger;
        if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 67109376;
          int v38 = v24;
          __int16 v39 = 1024;
          unsigned int v40 = v0;
          _os_log_impl(&dword_1D2690000, v25, OS_LOG_TYPE_DEFAULT, "determineVACVoltage:: vac95BasedVoltageMV=%d absMaxVoltageMV=%d", (uint8_t *)&v37, 0xEu);
          int v24 = determineVACVoltage_vac95BasedVoltageMV;
        }
        if (v0) {
          BOOL v26 = 1;
        }
        else {
          BOOL v26 = v24 == 0;
        }
        if (!v26) {
          unsigned int v0 = v24;
        }
      }
    }
  }
  unsigned int v27 = determineVACVoltage_vacBasedVoltageMV;
  if (determineVACVoltage_vacBasedVoltageMV >= v0 || determineVACVoltage_vacBasedVoltageMV == 0) {
    unsigned int v27 = v0;
  }
  if (determineVACVoltage_vac95BasedVoltageMV >= v27 || determineVACVoltage_vac95BasedVoltageMV == 0) {
    uint64_t v30 = v27;
  }
  else {
    uint64_t v30 = determineVACVoltage_vac95BasedVoltageMV;
  }
  uint64_t v31 = dword_1EA6964F8;
  int v32 = word_1EA6964DA;
  if (dword_1EA6964F8) {
    BOOL v33 = v30 >= word_1EA6964DA;
  }
  else {
    BOOL v33 = 1;
  }
  if (v33) {
    return v30;
  }
  int v34 = logger;
  if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
  {
    int v37 = 67109376;
    int v38 = v32;
    __int16 v39 = 1024;
    unsigned int v40 = v30;
    _os_log_impl(&dword_1D2690000, v34, OS_LOG_TYPE_DEFAULT, "determineVACVoltage:: waiting for vbat(%d) < vac(%d)", (uint8_t *)&v37, 0xEu);
    return dword_1EA6964F8;
  }
  return v31;
}

uint64_t determinePoSMThreshold()
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if ((unsigned __int16)word_1EA6964D6 <= 0x500u)
  {
    if ((unsigned __int16)word_1EA6964D6 < 0x313u) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v2 = &word_1EA69653E;
    unsigned int v0 = (__int16 *)&byte_1EA696540;
    uint64_t v1 = (unsigned __int8 *)&word_1EA69653E + 1;
  }
  else
  {
    unsigned int v0 = &word_1EA69653E;
    uint64_t v1 = (unsigned __int8 *)&word_1EA69653C + 1;
    uint64_t v2 = &word_1EA69653C;
  }
  unsigned int v3 = *v1 | (*(unsigned __int8 *)v2 << 8);
  unsigned int v4 = *(unsigned __int8 *)v0;
  int v5 = (unsigned __int16)dword_1EA6966DC;
  BOOL v6 = (unsigned __int16)dword_1EA6966DC != 0;
  int v7 = (unsigned __int16)word_1EA6966E0;
  BOOL v8 = word_1EA6966E0 != 0;
  int v9 = (unsigned __int16)word_1EA6966E8;
  BOOL v10 = word_1EA6966E8 != 0;
  BOOL v11 = determinePoSMThreshold_lastBatteryCycleCount != (unsigned __int16)word_1EA696504
     && (unsigned __int16)dword_1EA6966DC != 0;
  BOOL v12 = (unsigned __int16)determinePoSMThreshold_lastToT != v3 && word_1EA6966E0 != 0;
  BOOL v13 = determinePoSMThreshold_lastAbove95 != v4
     || (unsigned __int16)determinePoSMThreshold_lastToT != v3;
  BOOL v14 = determinePoSMThreshold_lastAbove95 != v4 && word_1EA6966E8 != 0;
  BOOL v32 = v11;
  BOOL v33 = v14;
  int v15 = (unsigned __int16)dword_1EA6966E4;
  BOOL v31 = (unsigned __int16)dword_1EA6966E4 != 0;
  if ((_WORD)dword_1EA6966E4) {
    BOOL v16 = v13;
  }
  else {
    BOOL v16 = 0;
  }
  if (v11)
  {
    determinePoSMThreshold_lastBatteryCycleCount = (unsigned __int16)word_1EA696504;
    if ((unsigned __int16)word_1EA696504 <= HIWORD(dword_1EA6966DC)) {
      int v17 = -1;
    }
    else {
      int v17 = dword_1EA6966EC;
    }
    determinePoSMThreshold_vacThreshold = v17;
  }
  if (v12)
  {
    determinePoSMThreshold_lastToT = v3;
    if (v3 <= HIWORD(*(_DWORD *)&word_1EA6966E0)) {
      int v18 = -1;
    }
    else {
      int v18 = dword_1EA6966F0;
    }
    determinePoSMThreshold_vacpThreshold = v18;
  }
  if (v16)
  {
    determinePoSMThreshold_lastToT = v3;
    determinePoSMThreshold_lastAbove95 = v4;
    if ((42949673 * (unint64_t)(v4 * v3)) >> 32 <= HIWORD(dword_1EA6966E4)) {
      int v19 = -1;
    }
    else {
      int v19 = dword_1EA6966F4;
    }
    determinePoSMThreshold_vac95Threshold = v19;
  }
  int v34 = (unsigned __int16)word_1EA696504;
  if (word_1EA6966E8)
  {
    determinePoSMThreshold_lastAbove95 = v4;
    if (v4 <= HIWORD(*(_DWORD *)&word_1EA6966E8))
    {
      unsigned int v21 = &unk_1EA696000;
      unsigned int v20 = -1;
    }
    else
    {
      unsigned int v20 = dword_1EA6966F8;
      unsigned int v21 = (_DWORD *)&unk_1EA696000;
    }
    v21[479] = v20;
  }
  else
  {
    unsigned int v20 = determinePoSMThreshold_vac95pThreshold;
  }
  if (determinePoSMThreshold_vacThreshold == -1 || v5 == 0) {
    unsigned int v24 = -1;
  }
  else {
    unsigned int v24 = determinePoSMThreshold_vacThreshold;
  }
  if (determinePoSMThreshold_vacpThreshold >= v24 || v7 == 0) {
    unsigned int v26 = v24;
  }
  else {
    unsigned int v26 = determinePoSMThreshold_vacpThreshold;
  }
  if (determinePoSMThreshold_vac95Threshold < v26 && v15 != 0) {
    unsigned int v26 = determinePoSMThreshold_vac95Threshold;
  }
  if (v20 >= v26 || v9 == 0) {
    uint64_t v22 = v26;
  }
  else {
    uint64_t v22 = v20;
  }
  CFBooleanRef v29 = logger;
  if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    BOOL v36 = v6;
    __int16 v37 = 1024;
    int v38 = v8;
    __int16 v39 = 1024;
    int v40 = v31;
    __int16 v41 = 1024;
    int v42 = v10;
    _os_log_impl(&dword_1D2690000, v29, OS_LOG_TYPE_DEFAULT, "determinePoSMThreshold, enabled:%d %d %d %d ", buf, 0x1Au);
    CFBooleanRef v29 = logger;
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    BOOL v36 = v32;
    __int16 v37 = 1024;
    int v38 = v12;
    __int16 v39 = 1024;
    int v40 = v16;
    __int16 v41 = 1024;
    int v42 = v33;
    _os_log_impl(&dword_1D2690000, v29, OS_LOG_TYPE_DEFAULT, "determinePoSMThreshold, changed:%d %d %d %d ", buf, 0x1Au);
    CFBooleanRef v29 = logger;
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110912;
    BOOL v36 = v34;
    __int16 v37 = 1024;
    int v38 = HIWORD(dword_1EA6966DC);
    __int16 v39 = 1024;
    int v40 = v3;
    __int16 v41 = 1024;
    int v42 = (unsigned __int16)word_1EA6966E2;
    __int16 v43 = 1024;
    int v44 = (42949673 * (unint64_t)(v4 * v3)) >> 32;
    __int16 v45 = 1024;
    int v46 = HIWORD(dword_1EA6966E4);
    __int16 v47 = 1024;
    unsigned int v48 = v4;
    __int16 v49 = 1024;
    int v50 = (unsigned __int16)word_1EA6966EA;
    _os_log_impl(&dword_1D2690000, v29, OS_LOG_TYPE_DEFAULT, "determinePoSMThreshold, cmp:%d>%u %d>%u %d>%u %d>%u", buf, 0x32u);
    CFBooleanRef v29 = logger;
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110144;
    BOOL v36 = v22;
    __int16 v37 = 1024;
    int v38 = determinePoSMThreshold_vacThreshold;
    __int16 v39 = 1024;
    int v40 = determinePoSMThreshold_vacpThreshold;
    __int16 v41 = 1024;
    int v42 = determinePoSMThreshold_vac95Threshold;
    __int16 v43 = 1024;
    int v44 = determinePoSMThreshold_vac95pThreshold;
    _os_log_impl(&dword_1D2690000, v29, OS_LOG_TYPE_DEFAULT, "determinePoSMThreshold,minThreshold=%u threshold:%u %u %u %u", buf, 0x20u);
  }
  return v22;
}

CFDictionaryRef parseBatteryData(int a1, int a2)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  *(void *)&valuePtr[4] = 0;
  uint64_t v121 = 0;
  long long v120 = 0u;
  long long v119 = 0u;
  long long v118 = 0u;
  long long v117 = 0u;
  long long v116 = 0u;
  long long v115 = 0u;
  long long v114 = 0u;
  long long v113 = 0u;
  long long v112 = 0u;
  long long v111 = 0u;
  long long v110 = 0u;
  long long v109 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  uint64_t v106 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v107 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)updateThread_batteryInfo, 32);
  v93[0] = @"MfgData";
  v108[0] = createStringWithBytes((UInt8 *)updateThread_batteryInfo, 0x12uLL);
  v93[1] = @"Serial";
  *(void *)int valuePtr = word_1EA6964D2;
  v108[1] = CFNumberCreate(v4, kCFNumberIntType, valuePtr);
  v93[2] = @"DesignCapacity";
  int v64 = (unsigned __int16)word_1EA696506;
  values = CFNumberCreate(v4, kCFNumberIntType, &v64);
  if (values)
  {
    *(void *)&long long v109 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    *(void *)&long long v94 = @"Qmax";
    CFRelease(values);
    uint64_t v5 = 4;
  }
  else
  {
    uint64_t v5 = 3;
  }
  int v63 = word_1EA6964DC;
  v108[v5 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v63);
  v93[v5] = @"MaxCapacity";
  int v62 = (unsigned __int16)word_1EA696504;
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberIntType, &v62);
  uint64_t v7 = 8 * v5 + 8;
  *(void *)((char *)&v108[-1] + v7) = v6;
  *(void **)((char *)v93 + v7) = @"CycleCount";
  int v61 = (unsigned __int16)word_1EA696508;
  CFNumberRef v8 = CFNumberCreate(v4, kCFNumberIntType, &v61);
  uint64_t v9 = 8 * v5 + 16;
  *(void *)((char *)&v108[-1] + v9) = v8;
  *(void **)((char *)v93 + v9) = @"StateOfCharge";
  int v60 = word_1EA6964DA;
  CFNumberRef v10 = CFNumberCreate(v4, kCFNumberIntType, &v60);
  uint64_t v11 = 8 * v5 + 24;
  *(void *)((char *)&v108[-1] + v11) = v10;
  *(void **)((char *)v93 + v11) = @"Voltage";
  int v59 = (unsigned __int16)word_1EA69650A;
  CFNumberRef v12 = CFNumberCreate(v4, kCFNumberIntType, &v59);
  uint64_t v13 = 8 * v5 + 32;
  *(void *)((char *)&v108[-1] + v13) = v12;
  *(void **)((char *)v93 + v13) = @"Flags";
  CFStringRef StringWithBytes = createStringWithBytes((UInt8 *)updateThread_batteryInfo + 2, 4uLL);
  uint64_t v15 = 8 * v5 + 40;
  *(void *)((char *)&v108[-1] + v15) = StringWithBytes;
  *(void **)((char *)v93 + v15) = @"ManufactureDate";
  __int16 v58 = word_1EA6964D0;
  CFNumberRef v16 = CFNumberCreate(v4, kCFNumberSInt16Type, &v58);
  uint64_t v17 = 8 * v5 + 48;
  *(void *)((char *)&v108[-1] + v17) = v16;
  *(void **)((char *)v93 + v17) = @"ChemID";
  uint64_t v18 = v5 + 7;
  if (word_1EA6964D6 != 1536)
  {
    int v57 = (unsigned __int16)word_1EA69650C;
    v108[v18 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v57);
    v93[v18] = @"FullAvailableCapacity";
    uint64_t v18 = v5 | 8;
    if ((unsigned __int16)word_1EA6964D6 < 0x313u) {
      goto LABEL_20;
    }
  }
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  uint64_t v125 = 0;
  time_t v92 = time(0);
  keys[0] = @"UpdateTime";
  v126[0] = CFNumberCreate(v4, kCFNumberLongType, &v92);
  keys[1] = @"MaximumTemperature";
  int v91 = (__int16)(byte_1EA69650E << 8) | byte_1EA69650F;
  v126[1] = CFNumberCreate(v4, kCFNumberIntType, &v91);
  keys[2] = @"MinimumTemperature";
  int v90 = (__int16)(byte_1EA696510 << 8) | byte_1EA696511;
  v126[2] = CFNumberCreate(v4, kCFNumberIntType, &v90);
  keys[3] = @"MaximumPackVoltage";
  int v89 = (__int16)(byte_1EA696512 << 8) | byte_1EA696513;
  v126[3] = CFNumberCreate(v4, kCFNumberIntType, &v89);
  keys[4] = @"MinimumPackVoltage";
  int v88 = (__int16)(byte_1EA696514 << 8) | byte_1EA696515;
  v126[4] = CFNumberCreate(v4, kCFNumberIntType, &v88);
  keys[5] = @"MaximumChargeCurrent";
  int v87 = (__int16)(byte_1EA696516 << 8) | byte_1EA696517;
  v126[5] = CFNumberCreate(v4, kCFNumberIntType, &v87);
  keys[6] = @"MaximumDischargeCurrent";
  int v86 = (__int16)(byte_1EA696518 << 8) | byte_1EA696519;
  v126[6] = CFNumberCreate(v4, kCFNumberIntType, &v86);
  keys[7] = @"MaximumOverChargedCapacity";
  int v85 = (__int16)(byte_1EA69651A << 8) | byte_1EA69651B;
  v126[7] = CFNumberCreate(v4, kCFNumberIntType, &v85);
  keys[8] = @"MaximumOverDischargedCapacity";
  int v84 = (__int16)(byte_1EA69651C << 8) | byte_1EA69651D;
  v126[8] = CFNumberCreate(v4, kCFNumberIntType, &v84);
  keys[9] = @"MaximumFCC";
  int v83 = (__int16)(byte_1EA69651E << 8) | byte_1EA69651F;
  v126[9] = CFNumberCreate(v4, kCFNumberIntType, &v83);
  keys[10] = @"MinimumFCC";
  int v82 = (__int16)(byte_1EA696520 << 8) | byte_1EA696521;
  v126[10] = CFNumberCreate(v4, kCFNumberIntType, &v82);
  keys[11] = @"MaximumDeltaVoltage";
  int v81 = (__int16)(byte_1EA696522 << 8) | byte_1EA696523;
  v126[11] = CFNumberCreate(v4, kCFNumberIntType, &v81);
  keys[12] = @"MinimumDeltaVoltage";
  int v80 = (__int16)(byte_1EA696524 << 8) | byte_1EA696525;
  v126[12] = CFNumberCreate(v4, kCFNumberIntType, &v80);
  keys[13] = @"LowAvgCurrentLastRun";
  int v79 = (__int16)(byte_1EA696526 << 8) | byte_1EA696527;
  v126[13] = CFNumberCreate(v4, kCFNumberIntType, &v79);
  keys[14] = @"HighAvgCurrentLastRun";
  int v78 = (__int16)(byte_1EA696528 << 8) | byte_1EA696529;
  v126[14] = CFNumberCreate(v4, kCFNumberIntType, &v78);
  keys[15] = @"MaximumQmax";
  int v77 = (__int16)(byte_1EA69652A << 8) | byte_1EA69652B;
  v126[15] = CFNumberCreate(v4, kCFNumberIntType, &v77);
  keys[16] = @"MinimumQmax";
  int v76 = (__int16)(byte_1EA69652C << 8) | byte_1EA69652D;
  v126[16] = CFNumberCreate(v4, kCFNumberIntType, &v76);
  keys[17] = @"MaximumRa0-8";
  int v75 = (__int16)(byte_1EA69652E << 8) | byte_1EA69652F;
  v126[17] = CFNumberCreate(v4, kCFNumberIntType, &v75);
  keys[18] = @"MinimumRa0-8";
  int v74 = (__int16)(byte_1EA696530 << 8) | byte_1EA696531;
  v126[18] = CFNumberCreate(v4, kCFNumberIntType, &v74);
  keys[19] = @"AverageTemperature";
  int v73 = byte_1EA696532;
  v126[19] = CFNumberCreate(v4, kCFNumberIntType, &v73);
  keys[20] = @"TemperatureSamples";
  unsigned int v72 = bswap32(unk_1EA696533);
  v126[20] = CFNumberCreate(v4, kCFNumberIntType, &v72);
  keys[21] = @"FlashWriteCount";
  unsigned int v71 = __rev16(unk_1EA696537);
  *(void *)&long long v127 = CFNumberCreate(v4, kCFNumberIntType, &v71);
  *(void *)&long long v123 = @"RDISCnt";
  unsigned int v70 = __rev16(unk_1EA696539);
  *((void *)&v127 + 1) = CFNumberCreate(v4, kCFNumberIntType, &v70);
  *((void *)&v123 + 1) = @"CycleCountLastQmax";
  int v69 = byte_1EA69653B;
  *(void *)&long long v128 = CFNumberCreate(v4, kCFNumberIntType, &v69);
  if ((unsigned __int16)word_1EA6964D6 < 0x501u)
  {
    if ((unsigned __int16)word_1EA6964D6 < 0x313u)
    {
      uint64_t v22 = 24;
      goto LABEL_12;
    }
    int v19 = &word_1EA69653E;
  }
  else
  {
    int v19 = &word_1EA69653C;
  }
  unsigned int v20 = __rev16((unsigned __int16)*v19);
  *(void *)&long long v124 = @"TotalOperatingTime";
  unsigned int v68 = v20;
  *((void *)&v128 + 1) = CFNumberCreate(v4, kCFNumberIntType, &v68);
  int v21 = *((unsigned __int8 *)v19 + 2);
  *((void *)&v124 + 1) = @"TimeAbove95Perc";
  int v67 = v21;
  *(void *)&long long v129 = CFNumberCreate(v4, kCFNumberIntType, &v67);
  uint64_t v22 = 26;
LABEL_12:
  keys[v22] = @"Raw";
  v126[v22] = CFDataCreate(v4, (const UInt8 *)&byte_1EA69650E, 64);
  CFDictionaryRef v23 = CFDictionaryCreate(v4, (const void **)keys, (const void **)v126, v22 | 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  do
  {
    CFRelease(v126[v22]);
    unint64_t v24 = v22-- + 1;
  }
  while (v24 > 1);
  if (!v23)
  {
    if (os_log_type_enabled((os_log_t)logger, OS_LOG_TYPE_ERROR))
    {
      parseBatteryData_cold_2();
      if (!a1) {
        goto LABEL_22;
      }
LABEL_21:
      int v56 = (unsigned __int16)word_1EA6964E8;
      v108[v18 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v56);
      v93[v18] = @"ITMiscStatus";
      int v55 = word_1EA6964E8 & 3;
      CFNumberRef v25 = CFNumberCreate(v4, kCFNumberIntType, &v55);
      uint64_t v26 = 8 * v18 + 8;
      *(void *)((char *)&v108[-1] + v26) = v25;
      *(void **)((char *)v93 + v26) = @"ITSimulationCounter";
      v18 += 2;
      goto LABEL_22;
    }
LABEL_20:
    if (!a1) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (a2) {
    CFShow(v23);
  }
  v108[v18 - 1] = v23;
  v93[v18++] = @"LifetimeData";
  if (a1) {
    goto LABEL_21;
  }
LABEL_22:
  if ((unsigned __int16)word_1EA6964D6 >= 0x600u)
  {
    *(void *)&valuePtr[4] = CFDataCreate(v4, (const UInt8 *)&word_1EA69654E, 32);
    if (*(void *)&valuePtr[4])
    {
      v108[v18 - 1] = CFArrayCreate(v4, (const void **)&valuePtr[4], 1, MEMORY[0x1E4F1D510]);
      v93[v18++] = @"RaTableRaw";
      CFRelease(*(CFTypeRef *)&valuePtr[4]);
    }
    int v54 = (unsigned __int16)word_1EA6965A4;
    v108[v18 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v54);
    v93[v18] = @"WeightedRa";
    int v53 = (unsigned __int16)word_1EA6965A6;
    CFNumberRef v27 = CFNumberCreate(v4, kCFNumberIntType, &v53);
    uint64_t v28 = 8 * v18 + 8;
    *(void *)((char *)&v108[-1] + v28) = v27;
    *(void **)((char *)v93 + v28) = @"ChemicalWeightedRa";
    int v52 = dword_1EA6965A0;
    CFNumberRef v29 = CFNumberCreate(v4, kCFNumberIntType, &v52);
    uint64_t v30 = 8 * v18 + 16;
    *(void *)((char *)&v108[-1] + v30) = v29;
    *(void **)((char *)v93 + v30) = @"BatteryHealthMetric";
    uint64_t v31 = v18 + 3;
    if ((unsigned __int16)word_1EA6964D6 < 0x600u)
    {
      v18 += 3;
    }
    else
    {
      v108[v31 - 1] = CFDataCreate(v4, byte_1EA69656E, 32);
      v93[v31] = @"iMaxAndSocSmoothTable";
      unsigned int v51 = __rev16(*(unsigned __int16 *)&byte_1EA69656E[1]);
      CFNumberRef v32 = CFNumberCreate(v4, kCFNumberIntType, &v51);
      uint64_t v33 = 8 * v18 + 32;
      *(void *)((char *)&v108[-1] + v33) = v32;
      *(void **)((char *)v93 + v33) = @"RSS";
      v18 += 5;
    }
  }
  int v50 = (unsigned __int16)word_1EA6964EC;
  v108[v18 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v50);
  v93[v18] = @"ResScale";
  int v49 = word_1EA6964EE;
  CFNumberRef v34 = CFNumberCreate(v4, kCFNumberIntType, &v49);
  uint64_t v35 = 8 * v18 + 8;
  *(void *)((char *)&v108[-1] + v35) = v34;
  *(void **)((char *)v93 + v35) = @"Qstart";
  int v48 = word_1EA6964F0;
  CFNumberRef v36 = CFNumberCreate(v4, kCFNumberIntType, &v48);
  uint64_t v37 = 8 * v18 + 16;
  *(void *)((char *)&v108[-1] + v37) = v36;
  *(void **)((char *)v93 + v37) = @"PassedCharge";
  uint64_t v38 = v18 + 3;
  int v47 = (unsigned __int16)word_1EA6964F2;
  values = CFNumberCreate(v4, kCFNumberIntType, &v47);
  if (values)
  {
    v108[v38 - 1] = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    v93[v38] = @"DOD0";
    uint64_t v38 = v18 + 4;
    CFRelease(values);
  }
  int v46 = word_1EA6964EA;
  values = CFNumberCreate(v4, kCFNumberIntType, &v46);
  if (values)
  {
    v108[v38 - 1] = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    v93[v38++] = @"PresentDOD";
    CFRelease(values);
  }
  int v45 = (unsigned __int16)word_1EA69650A;
  v108[v38 - 1] = CFNumberCreate(v4, kCFNumberIntType, &v45);
  v93[v38] = @"GaugeFlagRaw";
  uint64_t v44 = gauge_reset_count;
  CFNumberRef v39 = CFNumberCreate(v4, kCFNumberLongLongType, &v44);
  uint64_t v40 = 8 * v38 + 8;
  *(void *)((char *)&v108[-1] + v40) = v39;
  *(void **)((char *)v93 + v40) = @"GaugeResetCounter";
  if (v38 >= 27) {
    parseBatteryData_cold_1();
  }
  CFDictionaryRef v41 = CFDictionaryCreate(v4, (const void **)v93, (const void **)&v107, v38 + 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v38 >= -1)
  {
    do
    {
      CFRelease((CFTypeRef)v108[v38]);
      unint64_t v42 = v38 + 2;
      --v38;
    }
    while (v42 > 1);
  }
  return v41;
}

uint64_t ggctl_logShutdownReason2(uint64_t result, _OWORD *a2, unsigned int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  size_t v8 = 48;
  if (a2)
  {
    if (a3)
    {
      long long v10 = 0u;
      long long v11 = 0u;
      long long outputStruct = 0u;
      uint64_t input = a3;
      double result = IOConnectCallMethod(result, 0x13u, &input, 1u, inputStruct, 0x30uLL, 0, 0, &outputStruct, &v8);
      if (!result)
      {
        long long v4 = v10;
        *a2 = outputStruct;
        a2[1] = v4;
        a2[2] = v11;
      }
    }
    else
    {
      long long v5 = a2[1];
      inputStruct[0] = *a2;
      inputStruct[1] = v5;
      inputStruct[2] = a2[2];
      uint64_t v7 = a3;
      return IOConnectCallMethod(result, 0x13u, &v7, 1u, inputStruct, 0x30uLL, 0, 0, &outputStruct, &v8);
    }
  }
  return result;
}

__darwin_time_t UpSeconds()
{
  if (!UpSeconds_boottime)
  {
    v1.tv_sec = 16;
    sysctlbyname("kern.boottime", &UpSeconds_boottime, (size_t *)&v1, 0, 0);
  }
  v1.tv_sec = 0;
  *(void *)&v1.tv_usec = 0;
  gettimeofday(&v1, 0);
  return v1.tv_sec - UpSeconds_boottime;
}

CFStringRef createStringWithBytes(UInt8 *bytes, unint64_t a2)
{
  unint64_t v2 = 0;
  if (a2)
  {
    unsigned int v3 = 1;
    do
    {
      if (!bytes[v2]) {
        break;
      }
      unint64_t v2 = v3++;
    }
    while (v2 < a2);
  }
  return CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, v2, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

unsigned char *OUTLINED_FUNCTION_3(unsigned char *result, unsigned char *a2)
{
  *double result = 0;
  *a2 = 0;
  return result;
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

void OUTLINED_FUNCTION_9(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void ggctl_connect_cold_1(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136315138;
  unint64_t v2 = "AppleHDQGasGaugeControl";
  _os_log_error_impl(&dword_1D2690000, log, OS_LOG_TYPE_ERROR, "could not find %s service", (uint8_t *)&v1, 0xCu);
}

void ggctl_connect_cold_2(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ggctl_reset_cold_1()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_0(&dword_1D2690000, v0, v1, "gas gauge: cannot issue a reset", v2, v3, v4, v5, v6);
}

void ggctl_open_device_cold_1(NSObject *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = __error();
  uint64_t v3 = strerror(*v2);
  int v4 = 136315394;
  uint64_t v5 = "checkreset";
  __int16 v6 = 2080;
  uint64_t v7 = v3;
  _os_log_error_impl(&dword_1D2690000, a1, OS_LOG_TYPE_ERROR, "%s: %s", (uint8_t *)&v4, 0x16u);
}

void ggctl_open_device_cold_2()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_0(&dword_1D2690000, v0, v1, "gas gauge: cannot determine the state of SWI line", v2, v3, v4, v5, v6);
}

void ggctl_open_device_cold_3()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_0(&dword_1D2690000, v0, v1, "gas gauge: SWI line low, issuing reset", v2, v3, v4, v5, v6);
}

void ggctl_open_device_cold_4()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6(&dword_1D2690000, v0, v1, "%s:%d break failed (%d)", v2, v3, v4, v5, 2u);
}

void updateThread_cold_1()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_0(&dword_1D2690000, v0, v1, "gasgauge: could not register for system power notifications", v2, v3, v4, v5, v6);
}

void updateThread_cold_2(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3(a1, a2);
  OUTLINED_FUNCTION_2(&dword_1D2690000, v2, (uint64_t)v2, "gasgauge: SWI line, cannot determine the state of line", v3);
}

void updateThread_cold_3(uint8_t *buf, _DWORD *a2, os_log_t log)
{
  *(_DWORD *)buf = 67109120;
  *a2 = -1;
  _os_log_error_impl(&dword_1D2690000, log, OS_LOG_TYPE_ERROR, "cannot drain the data log (%d)", buf, 8u);
}

void updateThread_cold_4(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3(a1, a2);
  OUTLINED_FUNCTION_2(&dword_1D2690000, v2, (uint64_t)v2, "num_client<0, client error?", v3);
}

void updateThread_cold_5(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3(a1, a2);
  OUTLINED_FUNCTION_2(&dword_1D2690000, v2, (uint64_t)v2, "gasgauge: SWI line low reset disabled, ignoring", v3);
}

void updateThread_cold_6(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3(a1, a2);
  OUTLINED_FUNCTION_2(&dword_1D2690000, v2, (uint64_t)v2, "gasgauge: SWI line low issuing reset", v3);
}

void updateThread_cold_7()
{
  unsigned int v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_9(&dword_1D2690000, v1, v2, "could not find hw.model: %s", v3, v4, v5, v6, 2u);
}

void updateThread_cold_8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_1D2690000, a2, a3, "gasgauge: could not register for battery events err=%x", a5, a6, a7, a8, 0);
}

void updateThread_cold_9(mach_error_t a1)
{
  mach_error_string(a1);
  OUTLINED_FUNCTION_9(&dword_1D2690000, v1, v2, "gasgauge: could not map data log: %s", v3, v4, v5, v6, 2u);
}

void updateThread_cold_10()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_0(&dword_1D2690000, v0, v1, "gasgauge: could not register for power source events", v2, v3, v4, v5, v6);
}

void updateThermalCoolDownState_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5(&dword_1D2690000, v0, v1, "%s:%d cannot update thermal state", v2, v3, v4, v5, 2u);
}

void statsAndLogs_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5(&dword_1D2690000, v0, v1, "%s:%d cannot create dictionary", v2, v3, v4, v5, 2u);
}

void statsAndLogs_cold_2()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6(&dword_1D2690000, v0, v1, "%s:%d cannot dump stats and logs (%x)", v2, v3, v4, v5, 2u);
}

void debugLog_cold_1()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5(&dword_1D2690000, v0, v1, "%s:%d cannot create dictionary", v2, v3, v4, v5, 2u);
}

void debugLog_cold_2()
{
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6(&dword_1D2690000, v0, v1, "%s:%d cannot dump stats and logs (%x)", v2, v3, v4, v5, 2u);
}

void dynamicATV_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void parseBatteryData_cold_1()
{
  __assert_rtn("parseBatteryData", "AppleHDQGasGauge.c", 1565, "batteryDataCount<=kNumBatteryDataUpdateKeys");
}

void parseBatteryData_cold_2()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_0(&dword_1D2690000, v0, v1, "Cannot create the lifetime dictionary", v2, v3, v4, v5, v6);
}

void SetAPIErrorMessage(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  bzero(__str, 0x400uLL);
  if (!GlobalAPIErrorMessage)
  {
    GlobalAPIErrorMessage = (uint64_t)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
    vsnprintf(__str, 0x400uLL, a1, &a9);
    snprintf((char *)GlobalAPIErrorMessage, 0x400uLL, "%s", __str);
  }
}

uint64_t ASPParseBufferToCxt(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 36) = -1;
  if (a3 < 8) {
    return 0;
  }
  unsigned int v6 = a3 >> 3;
  while (2)
  {
    unint64_t v9 = *a2;
    uint64_t v8 = a2 + 1;
    int v7 = v9;
    unint64_t v10 = HIDWORD(v9);
    unsigned int v11 = v6 - 1;
    if (v9 <= 0x30000000 && v11 >= v10)
    {
      switch(v7)
      {
        case 1:
          uint64_t v13 = *v8;
          BOOL v14 = "version";
          goto LABEL_77;
        case 2:
          uint64_t v13 = *v8;
          BOOL v14 = "hostWriteXacts";
          goto LABEL_77;
        case 3:
          uint64_t v13 = *v8;
          BOOL v14 = "hostReadXacts";
          goto LABEL_77;
        case 4:
          uint64_t v13 = *v8;
          *(void *)(a1 + 72) = *v8;
          BOOL v14 = "hostWrites";
          goto LABEL_77;
        case 5:
          uint64_t v13 = *v8;
          BOOL v14 = "hostWritesDyn";
          goto LABEL_77;
        case 6:
          uint64_t v13 = *v8;
          BOOL v14 = "hostWritesStatic";
          goto LABEL_77;
        case 7:
          uint64_t v13 = *v8;
          *(void *)(a1 + 64) = *v8;
          BOOL v14 = "hostReads";
          goto LABEL_77;
        case 8:
          uint64_t v13 = *v8;
          BOOL v14 = "validLbas";
          goto LABEL_77;
        case 9:
          uint64_t v13 = *v8;
          BOOL v14 = "shutdowns";
          goto LABEL_77;
        case 10:
          uint64_t v13 = *v8;
          BOOL v14 = "boots";
          goto LABEL_77;
        case 11:
          uint64_t v13 = *v8;
          BOOL v14 = "uncleanBoots";
          goto LABEL_77;
        case 12:
          uint64_t v13 = *v8;
          *(void *)(a1 + 144) = *v8;
          BOOL v14 = "IND_pool_free";
          goto LABEL_77;
        case 13:
          uint64_t v13 = *v8;
          *(void *)(a1 + 152) = *v8;
          BOOL v14 = "IND_pool_count";
          goto LABEL_77;
        case 14:
          uint64_t v15 = "hostWriteLogHisto";
          uint64_t v16 = a1;
          int v17 = 14;
          goto LABEL_44;
        case 15:
          uint64_t v15 = "hostReadLogHisto";
          uint64_t v16 = a1;
          int v17 = 15;
LABEL_44:
          uint64_t v18 = v8;
          unsigned int v19 = 10;
          goto LABEL_51;
        case 16:
          uint64_t v13 = *v8;
          BOOL v14 = "gcWrites";
          goto LABEL_77;
        case 17:
          uint64_t v13 = *v8;
          *(void *)(a1 + 88) = *v8;
          BOOL v14 = "wearLevMoves";
          goto LABEL_77;
        case 18:
          uint64_t v13 = *v8;
          *(void *)(a1 + 104) = *v8;
          BOOL v14 = "nandWrites";
          goto LABEL_77;
        case 19:
          uint64_t v13 = *v8;
          *(void *)(a1 + 96) = *v8;
          BOOL v14 = "nandReads";
          goto LABEL_77;
        case 20:
          uint64_t v13 = *v8;
          *(void *)(a1 + 112) = *v8;
          BOOL v14 = "bandErases";
          goto LABEL_77;
        case 22:
          uint64_t v13 = *v8;
          BOOL v14 = "numPfail";
          goto LABEL_77;
        case 23:
          uint64_t v13 = *v8;
          BOOL v14 = "numEfail";
          goto LABEL_77;
        case 24:
          uint64_t v13 = *v8;
          BOOL v14 = "numPerformanceRefreshes";
          goto LABEL_77;
        case 27:
          uint64_t v13 = *v8;
          BOOL v14 = "hostWritesMeta";
          goto LABEL_77;
        case 28:
          uint64_t v13 = *v8;
          *(void *)(a1 + 168) = *v8;
          BOOL v14 = "numSleepOps";
          goto LABEL_77;
        case 30:
          uint64_t v13 = *v8;
          BOOL v14 = "cntTimeWentBackWardOnBoot";
          goto LABEL_77;
        case 31:
          uint64_t v13 = *v8;
          BOOL v14 = "cntTimeWentBackWard";
          goto LABEL_77;
        case 34:
          uint64_t v13 = *v8;
          BOOL v14 = "powerOnHours";
          goto LABEL_77;
        case 36:
          uint64_t v13 = *v8;
          BOOL v14 = "smartCritWarnings";
          goto LABEL_77;
        case 37:
          uint64_t v13 = *v8;
          BOOL v14 = "numFlushes";
          goto LABEL_77;
        case 38:
          uint64_t v13 = *v8;
          BOOL v14 = "numUnmap";
          goto LABEL_77;
        case 39:
          uint64_t v13 = *v8;
          BOOL v14 = "numUnmapSec";
          goto LABEL_77;
        case 41:
          uint64_t v13 = *v8;
          BOOL v14 = "clogProgram";
          goto LABEL_77;
        case 42:
          uint64_t v13 = *v8;
          BOOL v14 = "clogPFail";
          goto LABEL_77;
        case 43:
          uint64_t v13 = *v8;
          BOOL v14 = "clogRead";
          goto LABEL_77;
        case 44:
          uint64_t v13 = *v8;
          BOOL v14 = "clogRFail";
          goto LABEL_77;
        case 45:
          uint64_t v13 = *v8;
          *(void *)(a1 + 176) = *v8;
          BOOL v14 = "maxHighEnduranceBlockErases";
          goto LABEL_77;
        case 46:
          uint64_t v13 = *v8;
          BOOL v14 = "numFactoryBad";
          goto LABEL_77;
        case 47:
          uint64_t v13 = *v8;
          BOOL v14 = "numGrownBad";
          goto LABEL_77;
        case 48:
          uint64_t v13 = *v8;
          *(void *)(a1 + 80) = *v8;
          BOOL v14 = "numFreeVirtualBlocks";
          goto LABEL_77;
        case 49:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 56) = *v8;
          BOOL v14 = "bytesPerPage";
          goto LABEL_77;
        case 50:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 52) = *v8;
          BOOL v14 = "pagesPerVirtualBlock";
          goto LABEL_77;
        case 51:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 48) = *v8;
          BOOL v14 = "blocksPerVirtualBlock";
          goto LABEL_77;
        case 52:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 44) = *v8;
          BOOL v14 = "numVirtualBlocks";
          goto LABEL_77;
        case 53:
          uint64_t v13 = *v8;
          *(_DWORD *)(a1 + 32) = *v8;
          BOOL v14 = "exportVersion";
          goto LABEL_77;
        case 54:
          uint64_t v15 = "ECBins";
          uint64_t v16 = a1;
          int v17 = 54;
          goto LABEL_50;
        case 55:
          uint64_t v15 = "RCBins";
          uint64_t v16 = a1;
          int v17 = 55;
LABEL_50:
          uint64_t v18 = v8;
          unsigned int v19 = 100;
          goto LABEL_51;
        case 56:
          uint64_t v13 = *v8;
          *(void *)(a1 + 160) = *v8;
          BOOL v14 = "utilFormatTime";
          goto LABEL_77;
        case 57:
          uint64_t v13 = *v8;
          BOOL v14 = "calendarTime";
          goto LABEL_77;
        case 58:
          uint64_t v13 = *v8;
          BOOL v14 = "wallTime";
          goto LABEL_77;
        case 59:
          uint64_t v13 = *v8;
          BOOL v14 = "cmdq_flush_us";
          goto LABEL_77;
        case 60:
          uint64_t v13 = *v8;
          BOOL v14 = "cmdq_unmap_us";
          goto LABEL_77;
        case 61:
          uint64_t v13 = *v8;
          BOOL v14 = "cmdq_pri0_r_us";
          goto LABEL_77;
        case 62:
          uint64_t v13 = *v8;
          BOOL v14 = "cmdq_pri0_w_us";
          goto LABEL_77;
        case 63:
          uint64_t v13 = *v8;
          BOOL v14 = "cmdq_pri1_r_us";
          goto LABEL_77;
        case 64:
          uint64_t v13 = *v8;
          BOOL v14 = "cmdq_pri1_w_us";
          goto LABEL_77;
        case 65:
          uint64_t v13 = *v8;
          BOOL v14 = "cmdq_pri2_r_us";
          goto LABEL_77;
        case 66:
          uint64_t v13 = *v8;
          BOOL v14 = "cmdq_pri2_w_us";
          goto LABEL_77;
        case 67:
          uint64_t v13 = *v8;
          BOOL v14 = "cmdq_pri3_r_us";
          goto LABEL_77;
        case 68:
          uint64_t v13 = *v8;
          BOOL v14 = "cmdq_pri3_w_us";
          goto LABEL_77;
        case 69:
          uint64_t v13 = *v8;
          BOOL v14 = "host_idle_ms";
          goto LABEL_77;
        case 70:
          uint64_t v13 = *v8;
          BOOL v14 = "cmd_hysteresis_window_us";
          goto LABEL_77;
        case 71:
          uint64_t v13 = *v8;
          BOOL v14 = "cmd_lowPriHoldoffDelay_us";
          goto LABEL_77;
        case 72:
          uint64_t v13 = *v8;
          BOOL v14 = "cmd_lowPriHoldoffEnabled";
LABEL_77:
          unsigned int v20 = (void *)a1;
          goto LABEL_78;
        default:
          switch(v7)
          {
            case 73:
              uint64_t v13 = *v8;
              BOOL v14 = "cmd_expedite_num_success";
              goto LABEL_77;
            case 75:
              uint64_t v13 = *v8;
              BOOL v14 = "cmd_expedite_num_failures";
              goto LABEL_77;
            case 76:
              uint64_t v13 = *v8;
              BOOL v14 = "num_trimerase";
              goto LABEL_77;
            case 77:
              uint64_t v13 = *v8;
              BOOL v14 = "staticSizeInMB";
              goto LABEL_77;
            case 80:
              uint64_t v13 = *v8;
              BOOL v14 = "slcInvalidations";
              goto LABEL_77;
            case 81:
              uint64_t v13 = *v8;
              BOOL v14 = "slcGCInvalidations";
              goto LABEL_77;
            case 82:
              uint64_t v13 = *v8;
              BOOL v14 = "hostSectorsDuringGCon";
              goto LABEL_77;
            case 83:
              uint64_t v13 = *v8;
              BOOL v14 = "highWaterMarkSLCUsed";
              goto LABEL_77;
            case 84:
              uint64_t v13 = *v8;
              BOOL v14 = "intermediateBandErases";
              goto LABEL_77;
            case 85:
              uint64_t v13 = *v8;
              BOOL v14 = "intermediatePartitionStart";
              goto LABEL_77;
            case 86:
              uint64_t v13 = *v8;
              BOOL v14 = "userPartitionStart";
              goto LABEL_77;
            case 87:
              uint64_t v13 = *v8;
              BOOL v14 = "iolog_lbas";
              goto LABEL_77;
            case 88:
              uint64_t v15 = "bandsAgeBins";
              uint64_t v16 = a1;
              int v17 = 88;
              goto LABEL_44;
            case 89:
              uint64_t v15 = "intermediateBandsAgeBins";
              uint64_t v16 = a1;
              int v17 = 89;
              goto LABEL_44;
            case 90:
              uint64_t v15 = "qosPerCmdQ";
              uint64_t v16 = a1;
              int v17 = 90;
              uint64_t v18 = v8;
              unsigned int v19 = 160;
              goto LABEL_51;
            case 91:
              uint64_t v15 = "maxQosPerCmdQ";
              uint64_t v16 = a1;
              int v17 = 91;
              goto LABEL_44;
            case 92:
              uint64_t v13 = *v8;
              BOOL v14 = "shutdownDuringGC";
              goto LABEL_77;
            case 93:
              uint64_t v15 = "numBandsRefreshedForAgePerTier";
              uint64_t v16 = a1;
              int v17 = 93;
LABEL_130:
              uint64_t v18 = v8;
              unsigned int v19 = 3;
              goto LABEL_51;
            case 94:
              uint64_t v15 = "bdrDeltaHot";
              uint64_t v16 = a1;
              int v17 = 94;
LABEL_93:
              uint64_t v18 = v8;
              unsigned int v19 = 20;
              goto LABEL_51;
            case 95:
              uint64_t v13 = *v8;
              BOOL v14 = "numRefreshOnClockLoss";
              goto LABEL_77;
            case 96:
              uint64_t v13 = *v8;
              BOOL v14 = "numRefreshOnErrNandRefreshRel";
              goto LABEL_77;
            case 97:
              uint64_t v13 = *v8;
              BOOL v14 = "numBGRefreshMoves";
              goto LABEL_77;
            case 98:
              uint64_t v13 = *v8;
              BOOL v14 = "numBGPaddingMoves";
              goto LABEL_77;
            case 99:
              uint64_t v13 = *v8;
              BOOL v14 = "hostWritesPhoto";
              goto LABEL_77;
            case 100:
              uint64_t v13 = *v8;
              BOOL v14 = "INDPooldFree";
              goto LABEL_77;
            case 101:
              uint64_t v13 = *v8;
              BOOL v14 = "INDContigCount";
              goto LABEL_77;
            case 102:
              uint64_t v13 = *v8;
              BOOL v14 = "INDValidContigCount";
              goto LABEL_77;
            case 103:
              uint64_t v13 = *v8;
              BOOL v14 = "INDMinContigSize";
              goto LABEL_77;
            case 104:
              uint64_t v13 = *v8;
              BOOL v14 = "INDMaxContigSize";
              goto LABEL_77;
            case 105:
              uint64_t v13 = *v8;
              BOOL v14 = "INDAveContigSize";
              goto LABEL_77;
            case 106:
              uint64_t v13 = *v8;
              BOOL v14 = "INDpoolSize";
              goto LABEL_77;
            case 107:
              uint64_t v13 = *v8;
              BOOL v14 = "pushSyncWrites";
              goto LABEL_77;
            case 109:
              uint64_t v13 = *v8;
              BOOL v14 = "cmd_rw_hysteresis_us";
              goto LABEL_77;
            case 110:
              uint64_t v13 = *v8;
              BOOL v14 = "photoFlowMode";
              goto LABEL_77;
            case 112:
              uint64_t v13 = *v8;
              BOOL v14 = "numBandsPaddedForAge";
              goto LABEL_77;
            case 113:
              uint64_t v15 = "bandsPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 113;
              goto LABEL_144;
            case 114:
              uint64_t v15 = "bandsPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 114;
              goto LABEL_102;
            case 115:
              uint64_t v15 = "secsPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 115;
              goto LABEL_144;
            case 116:
              uint64_t v15 = "secsPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 116;
              goto LABEL_102;
            case 118:
              uint64_t v15 = "overWritesPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 118;
              goto LABEL_144;
            case 119:
              uint64_t v15 = "overWritesPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 119;
              goto LABEL_102;
            case 120:
              uint64_t v15 = "padSectorsPerFlow";
              uint64_t v16 = a1;
              int v17 = 120;
              goto LABEL_44;
            case 121:
              uint64_t v15 = "padSizes";
              uint64_t v16 = a1;
              int v17 = 121;
              goto LABEL_144;
            case 122:
              uint64_t v15 = "unmapsPerHostFlow";
              uint64_t v16 = a1;
              int v17 = 122;
LABEL_144:
              uint64_t v18 = v8;
              unsigned int v19 = 4;
              goto LABEL_51;
            case 123:
              uint64_t v15 = "unmapsPerSpecialFlow";
              uint64_t v16 = a1;
              int v17 = 123;
LABEL_102:
              uint64_t v18 = v8;
              unsigned int v19 = 5;
              goto LABEL_51;
            case 124:
              uint64_t v15 = "coldestCycle";
              uint64_t v16 = a1;
              int v17 = 124;
              goto LABEL_123;
            case 125:
              uint64_t v15 = "hottestCycle";
              uint64_t v16 = a1;
              int v17 = 125;
LABEL_123:
              uint64_t v18 = v8;
              unsigned int v19 = 2;
              goto LABEL_51;
            case 126:
              uint64_t v13 = *v8;
              BOOL v14 = "gcLonlyWrites";
              goto LABEL_77;
            case 127:
              uint64_t v13 = *v8;
              BOOL v14 = "gcPLWrites";
              goto LABEL_77;
            case 129:
              uint64_t v13 = *v8;
              BOOL v14 = "pagesPerVirtualBlockSlc";
              goto LABEL_77;
            case 130:
              uint64_t v13 = *v8;
              BOOL v14 = "bdrPadding";
              goto LABEL_77;
            case 131:
              uint64_t v15 = "errInjCounters";
              uint64_t v16 = a1;
              int v17 = 131;
LABEL_149:
              uint64_t v18 = v8;
              unsigned int v19 = 8;
              goto LABEL_51;
            case 132:
              uint64_t v13 = *v8;
              BOOL v14 = "raidSuccessfulReconstructionInternal";
              goto LABEL_77;
            case 133:
              uint64_t v13 = *v8;
              BOOL v14 = "raidSuccessfulReconstructionHost";
              goto LABEL_77;
            case 134:
              uint64_t v13 = *v8;
              BOOL v14 = "raidFailedReconstructionInternal";
              goto LABEL_77;
            case 135:
              uint64_t v13 = *v8;
              BOOL v14 = "raidFailedReconstructionHost";
              goto LABEL_77;
            case 136:
              uint64_t v13 = *v8;
              BOOL v14 = "raidBandsPerHostFlow";
              goto LABEL_77;
            case 137:
              uint64_t v13 = *v8;
              BOOL v14 = "raidSecsPerHostFlow";
              goto LABEL_77;
            case 138:
              uint64_t v13 = *v8;
              BOOL v14 = "gcFreeL";
              goto LABEL_77;
            case 139:
              uint64_t v13 = *v8;
              BOOL v14 = "gcDestinations";
              goto LABEL_77;
            case 140:
              uint64_t v13 = *v8;
              BOOL v14 = "gcFragments";
              goto LABEL_77;
            case 141:
              uint64_t v13 = *v8;
              BOOL v14 = "numMemChoke";
              goto LABEL_77;
            case 142:
              uint64_t v13 = *v8;
              BOOL v14 = "maxMemChokeDuration";
              goto LABEL_77;
            case 143:
              uint64_t v13 = *v8;
              BOOL v14 = "memChokeDuration";
              goto LABEL_77;
            default:
              switch(v7)
              {
                case 144:
                  uint64_t v13 = *v8;
                  BOOL v14 = "numMemExtreme";
                  goto LABEL_77;
                case 145:
                  uint64_t v13 = *v8;
                  BOOL v14 = "maxMemExtremeDuration";
                  goto LABEL_77;
                case 146:
                  uint64_t v13 = *v8;
                  BOOL v14 = "memExtremeDuration";
                  goto LABEL_77;
                case 147:
                  uint64_t v13 = *v8;
                  BOOL v14 = "bandGetsExtreme";
                  goto LABEL_77;
                case 148:
                  uint64_t v13 = *v8;
                  BOOL v14 = "bandGetsLow";
                  goto LABEL_77;
                case 149:
                  uint64_t v13 = *v8;
                  BOOL v14 = "numHostChoke";
                  goto LABEL_77;
                case 152:
                  uint64_t v13 = *v8;
                  BOOL v14 = "AbortSkip_ProgramError";
                  goto LABEL_77;
                case 153:
                  uint64_t v13 = *v8;
                  BOOL v14 = "AbortSkip_ReadErrorOpenBand";
                  goto LABEL_77;
                case 154:
                  uint64_t v13 = *v8;
                  BOOL v14 = "AbortSkip_FailedRebuildingParity";
                  goto LABEL_77;
                case 155:
                  uint64_t v13 = *v8;
                  BOOL v14 = "AbortPad_OpenRefreshBand";
                  goto LABEL_77;
                case 156:
                  uint64_t v13 = *v8;
                  BOOL v14 = "AbortPad_CloseBands";
                  goto LABEL_77;
                case 157:
                  uint64_t v13 = *v8;
                  BOOL v14 = "AbortPad_SetPhoto";
                  goto LABEL_77;
                case 158:
                  uint64_t v13 = *v8;
                  BOOL v14 = "AbortPad_GcNoSource";
                  goto LABEL_77;
                case 159:
                  uint64_t v13 = *v8;
                  BOOL v14 = "AbortPad_Format";
                  goto LABEL_77;
                case 160:
                  uint64_t v13 = *v8;
                  BOOL v14 = "nandDiscoveryDuration";
                  goto LABEL_77;
                case 161:
                  uint64_t v13 = *v8;
                  BOOL v14 = "coreCCEnableDuration";
                  goto LABEL_77;
                case 163:
                  uint64_t v13 = *v8;
                  BOOL v14 = "coreOpenDuration";
                  goto LABEL_77;
                case 164:
                  uint64_t v13 = *v8;
                  BOOL v14 = "coreWritableDuration";
                  goto LABEL_77;
                case 165:
                  uint64_t v13 = *v8;
                  BOOL v14 = "coreClogLoadDuration";
                  goto LABEL_77;
                case 167:
                  uint64_t v13 = *v8;
                  BOOL v14 = "bulkPFail";
                  goto LABEL_77;
                case 169:
                  uint64_t v13 = *v8;
                  BOOL v14 = "bulkRFail";
                  goto LABEL_77;
                case 172:
                  uint64_t v13 = *v8;
                  BOOL v14 = "raidSmartErrors";
                  goto LABEL_77;
                case 182:
                  uint64_t v13 = *v8;
                  BOOL v14 = "internalUeccs";
                  goto LABEL_77;
                case 183:
                  uint64_t v13 = *v8;
                  BOOL v14 = "e2eFail";
                  goto LABEL_77;
                case 184:
                  uint64_t v13 = *v8;
                  BOOL v14 = "TempSensorMax";
                  goto LABEL_77;
                case 185:
                  uint64_t v13 = *v8;
                  BOOL v14 = "TempSensorMin";
                  goto LABEL_77;
                case 186:
                  uint64_t v13 = *v8;
                  BOOL v14 = "powerUpFromDDR";
                  goto LABEL_77;
                case 187:
                  uint64_t v13 = *v8;
                  BOOL v14 = "numMemLow";
                  goto LABEL_77;
                case 188:
                  uint64_t v13 = *v8;
                  BOOL v14 = "maxMemLowDuration";
                  goto LABEL_77;
                case 189:
                  uint64_t v13 = *v8;
                  BOOL v14 = "memLowDuration";
                  goto LABEL_77;
                case 190:
                  uint64_t v13 = *v8;
                  BOOL v14 = "numFences";
                  goto LABEL_77;
                case 191:
                  uint64_t v13 = *v8;
                  BOOL v14 = "hostPassiveIO";
                  goto LABEL_77;
                case 192:
                  uint64_t v13 = *v8;
                  BOOL v14 = "odtsMax";
                  goto LABEL_77;
                case 193:
                  uint64_t v13 = *v8;
                  BOOL v14 = "defragMFromOrphans";
                  goto LABEL_77;
                case 194:
                  uint64_t v13 = *v8;
                  BOOL v14 = "defragMFromFragments";
                  goto LABEL_77;
                case 195:
                  uint64_t v13 = *v8;
                  BOOL v14 = "defragMTime";
                  goto LABEL_77;
                case 196:
                  uint64_t v13 = *v8;
                  BOOL v14 = "defragMMaxTime";
                  goto LABEL_77;
                case 197:
                  uint64_t v13 = *v8;
                  BOOL v14 = "raidFailedLbaMismatch";
                  goto LABEL_77;
                case 198:
                  uint64_t v13 = *v8;
                  BOOL v14 = "numSyscfgWrites";
                  goto LABEL_77;
                case 199:
                  uint64_t v13 = *v8;
                  BOOL v14 = "indmbUnitsXfer";
                  goto LABEL_77;
                case 200:
                  uint64_t v13 = *v8;
                  BOOL v14 = "indmbUnitsCache";
                  goto LABEL_77;
                case 201:
                  uint64_t v13 = *v8;
                  BOOL v14 = "indmbUnitsInd";
                  goto LABEL_77;
                case 202:
                  uint64_t v13 = *v8;
                  BOOL v14 = "wcacheFS_Mbytes";
                  goto LABEL_77;
                case 203:
                  uint64_t v13 = *v8;
                  BOOL v14 = "wcacheDS_Mbytes";
                  goto LABEL_77;
                case 204:
                  uint64_t v13 = *v8;
                  BOOL v14 = "powerOnSeconds";
                  goto LABEL_77;
                case 205:
                  uint64_t v13 = *v8;
                  BOOL v14 = "numUnknownTokenHostRead";
                  goto LABEL_77;
                case 206:
                  uint64_t v13 = *v8;
                  BOOL v14 = "numUnmmapedTokenHostRead";
                  goto LABEL_77;
                case 207:
                  uint64_t v15 = "numOfThrottlingEntriesPerLevel";
                  uint64_t v16 = a1;
                  int v17 = 207;
LABEL_213:
                  uint64_t v18 = v8;
                  unsigned int v19 = 16;
                  goto LABEL_51;
                case 208:
                  uint64_t v13 = *v8;
                  BOOL v14 = "wcacheFS_MbytesMin";
                  goto LABEL_77;
                case 209:
                  uint64_t v13 = *v8;
                  BOOL v14 = "wcacheFS_MbytesMax";
                  goto LABEL_77;
                case 210:
                  uint64_t v13 = *v8;
                  BOOL v14 = "prepareForShutdownFailCounter";
                  goto LABEL_77;
                case 211:
                  uint64_t v13 = *v8;
                  BOOL v14 = "lpsrEntry";
                  goto LABEL_77;
                case 212:
                  uint64_t v13 = *v8;
                  BOOL v14 = "lpsrExit";
                  goto LABEL_77;
                case 213:
                  uint64_t v15 = "crcInternalReadFail";
                  uint64_t v16 = a1;
                  int v17 = 213;
                  goto LABEL_149;
                case 214:
                  uint64_t v13 = *v8;
                  BOOL v14 = "wcacheFSEvictCnt";
                  goto LABEL_77;
                case 215:
                  uint64_t v13 = *v8;
                  BOOL v14 = "wcacheFSEvictSize";
                  goto LABEL_77;
                case 216:
                  uint64_t v13 = *v8;
                  BOOL v14 = "wcacheFSWr";
                  goto LABEL_77;
                case 217:
                  uint64_t v13 = *v8;
                  BOOL v14 = "wcacheDSWr";
                  goto LABEL_77;
                case 218:
                  uint64_t v15 = "wcacheFSEvictSizeLogDist";
                  uint64_t v16 = a1;
                  int v17 = 218;
                  goto LABEL_44;
                case 219:
                  uint64_t v13 = *v8;
                  BOOL v14 = "prepareForShutdownTimeoutCounter";
                  goto LABEL_77;
                case 220:
                  uint64_t v13 = *v8;
                  BOOL v14 = "prepareForShutdownCancelCounter";
                  goto LABEL_77;
                case 221:
                  uint64_t v13 = *v8;
                  BOOL v14 = "RD_openBandCount";
                  goto LABEL_77;
                case 222:
                  uint64_t v13 = *v8;
                  BOOL v14 = "RD_openBandNops";
                  goto LABEL_77;
                case 223:
                  uint64_t v13 = *v8;
                  BOOL v14 = "RD_closedBandEvictCount";
                  goto LABEL_77;
                default:
                  switch(v7)
                  {
                    case 224:
                      uint64_t v13 = *v8;
                      BOOL v14 = "RD_closedBandEvictSectors";
                      goto LABEL_77;
                    case 225:
                      uint64_t v13 = *v8;
                      BOOL v14 = "RD_closedBandFragmentCount";
                      goto LABEL_77;
                    case 226:
                      uint64_t v13 = *v8;
                      BOOL v14 = "RD_closedBandFragmentSectors";
                      goto LABEL_77;
                    case 227:
                      uint64_t v15 = "wcacheFSOverWrLogSizeCnts";
                      uint64_t v16 = a1;
                      int v17 = 227;
                      goto LABEL_44;
                    case 228:
                      uint64_t v15 = "wcacheFSOverWrSizeByFlow";
                      uint64_t v16 = a1;
                      int v17 = 228;
                      goto LABEL_144;
                    case 229:
                      uint64_t v15 = "indmbXferCountTo";
                      uint64_t v16 = a1;
                      int v17 = 229;
                      goto LABEL_123;
                    case 230:
                      uint64_t v15 = "indmbAccumulatedTimeBetweenXfers";
                      uint64_t v16 = a1;
                      int v17 = 230;
                      goto LABEL_123;
                    case 231:
                      uint64_t v13 = *v8;
                      BOOL v14 = "maxGracefulBootTimeMs";
                      goto LABEL_77;
                    case 232:
                      uint64_t v13 = *v8;
                      BOOL v14 = "maxUngracefulBootTimeMs";
                      goto LABEL_77;
                    case 233:
                      uint64_t v13 = *v8;
                      BOOL v14 = "averageGracefulBootTimeMs";
                      goto LABEL_77;
                    case 234:
                      uint64_t v13 = *v8;
                      BOOL v14 = "averageUngracefulBootTimeMs";
                      goto LABEL_77;
                    case 235:
                      uint64_t v15 = "gracefulBootTimeLogMs";
                      uint64_t v16 = a1;
                      int v17 = 235;
                      goto LABEL_149;
                    case 236:
                      uint64_t v15 = "ungracefulBootTimeLogMs";
                      uint64_t v16 = a1;
                      int v17 = 236;
                      goto LABEL_149;
                    case 237:
                      uint64_t v15 = "CalibrationCount";
                      uint64_t v16 = a1;
                      int v17 = 237;
                      goto LABEL_144;
                    case 238:
                      uint64_t v13 = *v8;
                      BOOL v14 = "CalibrationLastTmp";
                      goto LABEL_77;
                    case 239:
                      uint64_t v13 = *v8;
                      BOOL v14 = "CalibrationMaxTmp";
                      goto LABEL_77;
                    case 240:
                      uint64_t v13 = *v8;
                      BOOL v14 = "CalibrationMinTmp";
                      goto LABEL_77;
                    case 241:
                      uint64_t v13 = *v8;
                      BOOL v14 = "ungracefulBootWorstIndicator";
                      goto LABEL_77;
                    case 242:
                      uint64_t v13 = *v8;
                      BOOL v14 = "metaMismatchReread";
                      goto LABEL_77;
                    case 243:
                      uint64_t v13 = *v8;
                      BOOL v14 = "numS3SleepOps";
                      goto LABEL_77;
                    case 244:
                      uint64_t v13 = *v8;
                      BOOL v14 = "odtsCurrent";
                      goto LABEL_77;
                    case 245:
                      uint64_t v13 = *v8;
                      BOOL v14 = "prefetchReads";
                      goto LABEL_77;
                    case 246:
                      uint64_t v13 = *v8;
                      BOOL v14 = "prefetchHits";
                      goto LABEL_77;
                    case 247:
                      uint64_t v13 = *v8;
                      BOOL v14 = "prefetchWritesInvalidation";
                      goto LABEL_77;
                    case 248:
                      uint64_t v13 = *v8;
                      BOOL v14 = "indmbUnitsTotal";
                      goto LABEL_77;
                    case 249:
                      uint64_t v13 = *v8;
                      BOOL v14 = "selfThrottlingEngage";
                      goto LABEL_77;
                    case 250:
                      uint64_t v13 = *v8;
                      BOOL v14 = "selfThrottlingDisengage";
                      goto LABEL_77;
                    case 252:
                      uint64_t v13 = *v8;
                      BOOL v14 = "AbortSkip_WlpMode";
                      goto LABEL_77;
                    case 253:
                      uint64_t v13 = *v8;
                      BOOL v14 = "hostWritesWlpMode";
                      goto LABEL_77;
                    case 254:
                      uint64_t v13 = *v8;
                      BOOL v14 = "numClogDoubleUnc";
                      goto LABEL_77;
                    case 256:
                      uint64_t v13 = *v8;
                      BOOL v14 = "AbortPad_WlpMode";
                      goto LABEL_77;
                    case 257:
                      uint64_t v13 = *v8;
                      BOOL v14 = "bonfireIntermediateBandErases";
                      goto LABEL_77;
                    case 258:
                      uint64_t v13 = *v8;
                      BOOL v14 = "bonfireUserBandErases";
                      goto LABEL_77;
                    case 259:
                      uint64_t v13 = *v8;
                      BOOL v14 = "bonfireIntermediateBandProgs";
                      goto LABEL_77;
                    case 260:
                      uint64_t v13 = *v8;
                      BOOL v14 = "bonfireUserBandProgs";
                      goto LABEL_77;
                    case 261:
                      uint64_t v13 = *v8;
                      BOOL v14 = "bonfireIntermediatePageReads";
                      goto LABEL_77;
                    case 262:
                      uint64_t v13 = *v8;
                      BOOL v14 = "bonfireUserPageReads";
                      goto LABEL_77;
                    case 263:
                      uint64_t v13 = *v8;
                      BOOL v14 = "refreshUtil00";
                      goto LABEL_77;
                    case 264:
                      uint64_t v13 = *v8;
                      BOOL v14 = "failToReadUtil00";
                      goto LABEL_77;
                    case 265:
                      uint64_t v15 = "readCountHisto";
                      uint64_t v16 = a1;
                      int v17 = 265;
                      goto LABEL_102;
                    case 266:
                      uint64_t v15 = "readAmpHisto";
                      uint64_t v16 = a1;
                      int v17 = 266;
                      goto LABEL_213;
                    case 267:
                      uint64_t v13 = *v8;
                      BOOL v14 = "totalReadAmp";
                      goto LABEL_77;
                    case 268:
                      uint64_t v15 = "nvmeModeSelect";
                      uint64_t v16 = a1;
                      int v17 = 268;
                      goto LABEL_144;
                    case 269:
                      uint64_t v15 = "numBootBlockRefreshSuccess";
                      uint64_t v16 = a1;
                      int v17 = 269;
                      goto LABEL_149;
                    case 270:
                      uint64_t v15 = "numBootBlockRefreshFail";
                      uint64_t v16 = a1;
                      int v17 = 270;
                      goto LABEL_149;
                    case 271:
                      uint64_t v13 = *v8;
                      BOOL v14 = "numUnsupportedAsi";
                      goto LABEL_77;
                    case 272:
                      uint64_t v13 = *v8;
                      BOOL v14 = "NumTerminatedProgramSegs";
                      goto LABEL_77;
                    case 273:
                      uint64_t v13 = *v8;
                      BOOL v14 = "indParityPagesDrops";
                      goto LABEL_77;
                    case 274:
                      uint64_t v13 = *v8;
                      BOOL v14 = "indFlowPrograms";
                      goto LABEL_77;
                    case 277:
                      uint64_t v15 = "powerBudgetSelect";
                      uint64_t v16 = a1;
                      int v17 = 277;
                      goto LABEL_144;
                    case 279:
                      uint64_t v13 = *v8;
                      BOOL v14 = "RxBurnNandWrites";
                      goto LABEL_77;
                    case 280:
                      uint64_t v15 = "E2EDPErrorCounters";
                      uint64_t v16 = a1;
                      int v17 = 280;
LABEL_281:
                      uint64_t v18 = v8;
                      unsigned int v19 = 12;
                      goto LABEL_51;
                    case 281:
                      uint64_t v13 = *v8;
                      BOOL v14 = "wcacheSectorsMax";
                      goto LABEL_77;
                    case 282:
                      uint64_t v13 = *v8;
                      BOOL v14 = "wcacheSectorsMin";
                      goto LABEL_77;
                    case 283:
                      uint64_t v13 = *v8;
                      BOOL v14 = "wcacheSectorsCur";
                      goto LABEL_77;
                    case 284:
                      uint64_t v13 = *v8;
                      BOOL v14 = "wcacheDS_SectorsMax";
                      goto LABEL_77;
                    case 285:
                      uint64_t v13 = *v8;
                      BOOL v14 = "wcacheDS_SectorsMin";
                      goto LABEL_77;
                    case 286:
                      uint64_t v13 = *v8;
                      BOOL v14 = "wcacheDS_SectorsCur";
                      goto LABEL_77;
                    case 287:
                      uint64_t v13 = *v8;
                      BOOL v14 = "wcacheFS_Reads";
                      goto LABEL_77;
                    case 288:
                      uint64_t v13 = *v8;
                      BOOL v14 = "wcacheDS_Reads";
                      goto LABEL_77;
                    case 289:
                      uint64_t v15 = "mspBootBlockReadFail";
                      uint64_t v16 = a1;
                      int v17 = 289;
                      goto LABEL_283;
                    case 290:
                      uint64_t v15 = "mspBootBlockProgFail";
                      uint64_t v16 = a1;
                      int v17 = 290;
                      goto LABEL_283;
                    case 291:
                      uint64_t v15 = "mspBootBlockEraseFail";
                      uint64_t v16 = a1;
                      int v17 = 291;
                      goto LABEL_283;
                    case 292:
                      uint64_t v13 = *v8;
                      BOOL v14 = "bandsRefreshedOnError";
                      goto LABEL_77;
                    default:
                      switch(v7)
                      {
                        case 298:
                          uint64_t v15 = "perHostReads";
                          uint64_t v16 = a1;
                          int v17 = 298;
                          goto LABEL_123;
                        case 299:
                          uint64_t v15 = "perHostReadXacts";
                          uint64_t v16 = a1;
                          int v17 = 299;
                          goto LABEL_123;
                        case 300:
                          uint64_t v15 = "perHostWrites";
                          uint64_t v16 = a1;
                          int v17 = 300;
                          goto LABEL_123;
                        case 301:
                          uint64_t v15 = "perHostWriteXacts";
                          uint64_t v16 = a1;
                          int v17 = 301;
                          goto LABEL_123;
                        case 302:
                          uint64_t v15 = "perHostNumFlushes";
                          uint64_t v16 = a1;
                          int v17 = 302;
                          goto LABEL_123;
                        case 303:
                          uint64_t v15 = "perHostNumFences";
                          uint64_t v16 = a1;
                          int v17 = 303;
                          goto LABEL_123;
                        case 304:
                          uint64_t v15 = "commitPadSectorsPerFlow";
                          uint64_t v16 = a1;
                          int v17 = 304;
                          goto LABEL_44;
                        case 305:
                          uint64_t v15 = "wcacheDSOverWrLogSizeCnts";
                          uint64_t v16 = a1;
                          int v17 = 305;
                          goto LABEL_44;
                        case 306:
                          uint64_t v15 = "wcacheDSOverWrSizeByFlow";
                          uint64_t v16 = a1;
                          int v17 = 306;
                          goto LABEL_144;
                        case 307:
                          uint64_t v15 = "CmdRaisePrioiryEvents";
                          uint64_t v16 = a1;
                          int v17 = 307;
                          goto LABEL_44;
                        case 308:
                          uint64_t v13 = *v8;
                          BOOL v14 = "utilNumVerification";
                          goto LABEL_77;
                        case 309:
                          uint64_t v13 = *v8;
                          BOOL v14 = "utilRefreshes";
                          goto LABEL_77;
                        case 310:
                          uint64_t v13 = *v8;
                          BOOL v14 = "utilBDRErrors";
                          goto LABEL_77;
                        case 311:
                          uint64_t v13 = *v8;
                          BOOL v14 = "indBandsPerFlow";
                          goto LABEL_77;
                        case 312:
                          uint64_t v13 = *v8;
                          BOOL v14 = "secsPerIndFlow";
                          goto LABEL_77;
                        case 313:
                          uint64_t v13 = *v8;
                          BOOL v14 = "indDecodedECC";
                          goto LABEL_77;
                        case 314:
                          uint64_t v15 = "numBootBlockValidateSuccess";
                          uint64_t v16 = a1;
                          int v17 = 314;
                          goto LABEL_149;
                        case 315:
                          uint64_t v15 = "numBootBlockValidateFail";
                          uint64_t v16 = a1;
                          int v17 = 315;
                          goto LABEL_149;
                        case 316:
                          uint64_t v15 = "clogPagesFillingPercentage";
                          uint64_t v16 = a1;
                          int v17 = 316;
                          goto LABEL_144;
                        case 317:
                          uint64_t v13 = *v8;
                          BOOL v14 = "bdrCalTimeAccFactor";
                          goto LABEL_77;
                        case 318:
                          uint64_t v13 = *v8;
                          BOOL v14 = "bootChainRdError";
                          goto LABEL_77;
                        case 319:
                          uint64_t v13 = *v8;
                          BOOL v14 = "bootChainBlankError";
                          goto LABEL_77;
                        case 320:
                          uint64_t v13 = *v8;
                          BOOL v14 = "bootChainRefreshError";
                          goto LABEL_77;
                        case 321:
                          uint64_t v13 = *v8;
                          BOOL v14 = "bootChainVersionError";
                          goto LABEL_77;
                        case 322:
                          uint64_t v13 = *v8;
                          BOOL v14 = "mspBootBlockMismatch";
                          goto LABEL_77;
                        case 323:
                          uint64_t v13 = *v8;
                          BOOL v14 = "mspBootBlockMismatchErr";
                          goto LABEL_77;
                        case 324:
                          uint64_t v15 = "bitflipAddr";
                          uint64_t v16 = a1;
                          int v17 = 324;
                          goto LABEL_102;
                        case 325:
                          uint64_t v15 = "bitflipCount";
                          uint64_t v16 = a1;
                          int v17 = 325;
                          goto LABEL_102;
                        case 326:
                          uint64_t v15 = "bitflipDupes";
                          uint64_t v16 = a1;
                          int v17 = 326;
                          goto LABEL_102;
                        case 327:
                          uint64_t v15 = "bandsMaxTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 327;
                          goto LABEL_324;
                        case 328:
                          uint64_t v15 = "bandsMinTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 328;
                          goto LABEL_324;
                        case 329:
                          uint64_t v15 = "bandsLifeTimeTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 329;
LABEL_324:
                          uint64_t v18 = v8;
                          unsigned int v19 = 30;
                          goto LABEL_51;
                        case 330:
                          uint64_t v15 = "bandsDeltaTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 330;
                          uint64_t v18 = v8;
                          unsigned int v19 = 22;
                          goto LABEL_51;
                        case 331:
                          uint64_t v15 = "bandsCrossTempHisto";
                          uint64_t v16 = a1;
                          int v17 = 331;
                          uint64_t v18 = v8;
                          unsigned int v19 = 45;
                          goto LABEL_51;
                        case 332:
                          uint64_t v15 = "wcacheWaitLogMs";
                          uint64_t v16 = a1;
                          int v17 = 332;
                          goto LABEL_44;
                        case 333:
                          uint64_t v15 = "wcacheDS_segsSortedLogSize";
                          uint64_t v16 = a1;
                          int v17 = 333;
                          goto LABEL_44;
                        case 334:
                          uint64_t v13 = *v8;
                          BOOL v14 = "numFirmwareWrites";
                          goto LABEL_77;
                        case 335:
                          uint64_t v13 = *v8;
                          BOOL v14 = "numBisWrites";
                          goto LABEL_77;
                        case 336:
                          uint64_t v13 = *v8;
                          BOOL v14 = "numBootChainUpdates";
                          goto LABEL_77;
                        case 337:
                          uint64_t v13 = *v8;
                          BOOL v14 = "cntCalTimeWentBackWard";
                          goto LABEL_77;
                        case 338:
                          uint64_t v13 = *v8;
                          BOOL v14 = "indBoRecoveries";
                          goto LABEL_77;
                        case 340:
                          uint64_t v13 = *v8;
                          BOOL v14 = "numCrossTempUecc";
                          goto LABEL_77;
                        case 341:
                          uint64_t v13 = *v8;
                          BOOL v14 = "latencyMonitorError";
                          goto LABEL_77;
                        case 343:
                          uint64_t v13 = *v8;
                          BOOL v14 = "utilUeccReads";
                          goto LABEL_77;
                        case 344:
                          uint64_t v13 = *v8;
                          BOOL v14 = "numOfAvoidedGCDueToTemp";
                          goto LABEL_77;
                        case 345:
                          uint64_t v13 = *v8;
                          BOOL v14 = "forceShutdowns";
                          goto LABEL_77;
                        case 346:
                          uint64_t v13 = *v8;
                          BOOL v14 = "gcSlcDestinations";
                          goto LABEL_77;
                        case 347:
                          uint64_t v13 = *v8;
                          BOOL v14 = "indReplayExtUsed";
                          goto LABEL_77;
                        case 348:
                          uint64_t v13 = *v8;
                          BOOL v14 = "defectsPerPackageOverflow";
                          goto LABEL_77;
                        case 349:
                          uint64_t v13 = *v8;
                          BOOL v14 = "RxBurnIntBandsProgrammed";
                          goto LABEL_77;
                        case 350:
                          uint64_t v13 = *v8;
                          BOOL v14 = "RxBurnUsrBandsProgrammed";
                          goto LABEL_77;
                        case 351:
                          uint64_t v13 = *v8;
                          BOOL v14 = "RxBurnIntNandWrites";
                          goto LABEL_77;
                        case 352:
                          uint64_t v13 = *v8;
                          BOOL v14 = "RxBurnUsrNandWrites";
                          goto LABEL_77;
                        case 353:
                          uint64_t v13 = *v8;
                          BOOL v14 = "clogLastStripeUeccs";
                          goto LABEL_77;
                        case 354:
                          uint64_t v13 = *v8;
                          BOOL v14 = "GC_MidDestSrcSwitchSLC2TLC";
                          goto LABEL_77;
                        case 355:
                          uint64_t v13 = *v8;
                          BOOL v14 = "GC_MidDestSrcSwitchTLC2SLC";
                          goto LABEL_77;
                        case 356:
                          uint64_t v13 = *v8;
                          BOOL v14 = "nvme_stats_shutdown_count_host0_normal";
                          goto LABEL_77;
                        case 357:
                          uint64_t v13 = *v8;
                          BOOL v14 = "nvme_stats_shutdown_count_host1_normal";
                          goto LABEL_77;
                        case 358:
                          uint64_t v13 = *v8;
                          BOOL v14 = "nvme_stats_shutdown_count_host0_s2r";
                          goto LABEL_77;
                        case 359:
                          uint64_t v13 = *v8;
                          BOOL v14 = "nvme_stats_shutdown_count_host1_s2r";
                          goto LABEL_77;
                        case 360:
                          uint64_t v15 = "gcPDusterIntrSrcValidityHisto";
                          uint64_t v16 = a1;
                          int v17 = 360;
                          goto LABEL_213;
                        case 361:
                          uint64_t v15 = "gcPDusterUserSrcValidityHisto";
                          uint64_t v16 = a1;
                          int v17 = 361;
                          goto LABEL_213;
                        case 362:
                          uint64_t v13 = *v8;
                          BOOL v14 = "raidFailedReadParity";
                          goto LABEL_77;
                        case 364:
                          uint64_t v13 = *v8;
                          BOOL v14 = "lhotNumSkipes";
                          goto LABEL_77;
                        default:
                          switch(v7)
                          {
                            case 365:
                              uint64_t v13 = *v8;
                              BOOL v14 = "lhotNumIsHotCalls";
                              goto LABEL_77;
                            case 366:
                              uint64_t v13 = *v8;
                              BOOL v14 = "lhotFullLap";
                              goto LABEL_77;
                            case 367:
                              uint64_t v13 = *v8;
                              BOOL v14 = "lhotSkipPrecent";
                              goto LABEL_77;
                            case 368:
                              uint64_t v13 = *v8;
                              BOOL v14 = "eraseSuspendEvents";
                              goto LABEL_77;
                            case 369:
                              uint64_t v13 = *v8;
                              BOOL v14 = "eraseSuspendedStatuses";
                              goto LABEL_77;
                            case 370:
                              uint64_t v13 = *v8;
                              BOOL v14 = "eraseSuspendedBands";
                              goto LABEL_77;
                            case 371:
                              uint64_t v13 = *v8;
                              BOOL v14 = "eraseSuspendSituationsBelowThreshold";
                              goto LABEL_77;
                            case 372:
                              uint64_t v13 = *v8;
                              BOOL v14 = "eraseSuspendSituationsAboveThreshold";
                              goto LABEL_77;
                            case 373:
                              uint64_t v13 = *v8;
                              BOOL v14 = "eraseSuspendReadChainsProcessed";
                              goto LABEL_77;
                            case 374:
                              uint64_t v13 = *v8;
                              BOOL v14 = "bdrLastDoneHr";
                              goto LABEL_77;
                            case 375:
                              uint64_t v13 = *v8;
                              BOOL v14 = "bdrBackupThreshHrs";
                              goto LABEL_77;
                            case 376:
                              uint64_t v13 = *v8;
                              BOOL v14 = "clogPortableProgBufs";
                              goto LABEL_77;
                            case 377:
                              uint64_t v13 = *v8;
                              BOOL v14 = "clogPortableDropBufs";
                              goto LABEL_77;
                            case 378:
                              uint64_t v13 = *v8;
                              BOOL v14 = "clogPortablePadSectors";
                              goto LABEL_77;
                            case 379:
                              uint64_t v13 = *v8;
                              BOOL v14 = "numRetiredBlocks";
                              goto LABEL_77;
                            case 381:
                              uint64_t v13 = *v8;
                              BOOL v14 = "numRefreshOnErrNandRefreshPerf";
                              goto LABEL_77;
                            case 382:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidReconstructReads";
                              goto LABEL_77;
                            case 383:
                              uint64_t v13 = *v8;
                              BOOL v14 = "gcReadsNoBlog";
                              goto LABEL_77;
                            case 384:
                              uint64_t v13 = *v8;
                              BOOL v14 = "AbortSkip_MPBXReadVerifyClosedBand";
                              goto LABEL_77;
                            case 385:
                              uint64_t v13 = *v8;
                              BOOL v14 = "openBandReadFail";
                              goto LABEL_77;
                            case 386:
                              uint64_t v13 = *v8;
                              BOOL v14 = "AbortSkip_MPBXReadVerifyOpenBand";
                              goto LABEL_77;
                            case 387:
                              uint64_t v13 = *v8;
                              BOOL v14 = "AbortSkip_MBPXFailedRebuildingParity";
                              goto LABEL_77;
                            case 388:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidSuccessfulPMXReconstructionInternal";
                              goto LABEL_77;
                            case 389:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidSuccessfulPMXReconstructionHost";
                              goto LABEL_77;
                            case 390:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedPMXReconstructionInternal";
                              goto LABEL_77;
                            case 391:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedPMXReconstructionHost";
                              goto LABEL_77;
                            case 392:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidSuccessfulRMXReconstructionInternal";
                              goto LABEL_77;
                            case 393:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidSuccessfulRMXReconstructionHost";
                              goto LABEL_77;
                            case 394:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedRMXReconstructionInternal";
                              goto LABEL_77;
                            case 395:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedRMXReconstructionHost";
                              goto LABEL_77;
                            case 396:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedReadParityInternal";
                              goto LABEL_77;
                            case 397:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedReadQParityInternal";
                              goto LABEL_77;
                            case 398:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedReadQParity";
                              goto LABEL_77;
                            case 399:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedReadQCopy";
                              goto LABEL_77;
                            case 400:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedReconstructionQParity";
                              goto LABEL_77;
                            case 401:
                              uint64_t v13 = *v8;
                              BOOL v14 = "offlineBlocksCnt";
                              goto LABEL_77;
                            case 402:
                              uint64_t v13 = *v8;
                              BOOL v14 = "bork0Revectors";
                              goto LABEL_77;
                            case 403:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedReadBlog";
                              goto LABEL_77;
                            case 404:
                              uint64_t v13 = *v8;
                              BOOL v14 = "numReliabilityRefreshes";
                              goto LABEL_77;
                            case 405:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedReadQCopyInternal";
                              goto LABEL_77;
                            case 406:
                              uint64_t v15 = "raidReconstructSuccessFlow";
                              uint64_t v16 = a1;
                              int v17 = 406;
                              goto LABEL_102;
                            case 407:
                              uint64_t v15 = "raidReconstructFailFlow";
                              uint64_t v16 = a1;
                              int v17 = 407;
                              goto LABEL_102;
                            case 408:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidReconstructFailP";
                              goto LABEL_77;
                            case 409:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidReconstructFailQ";
                              goto LABEL_77;
                            case 410:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidReconstructFailUECC";
                              goto LABEL_77;
                            case 411:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidReconstructFailUnsupp";
                              goto LABEL_77;
                            case 412:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidUECCOpenBand";
                              goto LABEL_77;
                            case 414:
                              uint64_t v13 = *v8;
                              BOOL v14 = "ueccReads";
                              goto LABEL_77;
                            case 416:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidSuccessfulVerify";
                              goto LABEL_77;
                            case 417:
                              uint64_t v13 = *v8;
                              BOOL v14 = "raidFailedVerify";
                              goto LABEL_77;
                            case 418:
                              uint64_t v13 = *v8;
                              BOOL v14 = "numBandsVerified";
                              goto LABEL_77;
                            case 419:
                              uint64_t v13 = *v8;
                              BOOL v14 = "cache_heads";
                              goto LABEL_77;
                            case 420:
                              uint64_t v13 = *v8;
                              BOOL v14 = "AbortSkip_RMXtoMPBX";
                              goto LABEL_77;
                            case 421:
                              uint64_t v13 = *v8;
                              BOOL v14 = "s3eFwVer";
                              goto LABEL_77;
                            case 422:
                              uint64_t v13 = *v8;
                              BOOL v14 = "readVerifyNative";
                              goto LABEL_77;
                            case 423:
                              uint64_t v13 = *v8;
                              BOOL v14 = "reducedReadVerifyNative";
                              goto LABEL_77;
                            case 424:
                              uint64_t v13 = *v8;
                              BOOL v14 = "readVerifySlc";
                              goto LABEL_77;
                            case 425:
                              uint64_t v13 = *v8;
                              BOOL v14 = "reducedReadVerifySlc";
                              goto LABEL_77;
                            case 426:
                              uint64_t v13 = *v8;
                              BOOL v14 = "RxBurnEvictions";
                              goto LABEL_77;
                            case 427:
                              uint64_t v13 = *v8;
                              BOOL v14 = "directToTLCBands";
                              goto LABEL_77;
                            case 428:
                              uint64_t v13 = *v8;
                              BOOL v14 = "nandDesc";
                              goto LABEL_77;
                            case 429:
                              uint64_t v13 = *v8;
                              BOOL v14 = "fwUpdatesPercentUsed";
                              goto LABEL_77;
                            case 430:
                              uint64_t v13 = *v8;
                              BOOL v14 = "slcPercentUsed";
                              goto LABEL_77;
                            case 431:
                              uint64_t v13 = *v8;
                              BOOL v14 = "percentUsed";
                              goto LABEL_77;
                            default:
                              switch(v7)
                              {
                                case 432:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "hostAutoWrites";
                                  goto LABEL_77;
                                case 433:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "hostAutoWriteXacts";
                                  goto LABEL_77;
                                case 434:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "gcDestDynamic";
                                  goto LABEL_77;
                                case 435:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "gcDestStatic";
                                  goto LABEL_77;
                                case 436:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "gcDestWearlevel";
                                  goto LABEL_77;
                                case 437:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "gcDestParity";
                                  goto LABEL_77;
                                case 438:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "AbortSkip_Format";
                                  goto LABEL_77;
                                case 440:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "raidSLCPadding";
                                  goto LABEL_77;
                                case 441:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "raidGCBands";
                                  goto LABEL_77;
                                case 442:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "raidGCSectors";
                                  goto LABEL_77;
                                case 443:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "raidGCPadding";
                                  goto LABEL_77;
                                case 444:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "raidSLCBandsPerHostFlow";
                                  goto LABEL_77;
                                case 445:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "raidSLCSecsPerHostFlow";
                                  goto LABEL_77;
                                case 446:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "rxBurnMinCycleRuns";
                                  goto LABEL_77;
                                case 447:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "clogNumFastCxt";
                                  goto LABEL_77;
                                case 448:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "clogNumRapidReboots";
                                  goto LABEL_77;
                                case 449:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "clogFastCxtAbvThr";
                                  goto LABEL_77;
                                case 450:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "rxBurnDiffModeRuns";
                                  goto LABEL_77;
                                case 452:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "indReadVerifyFail";
                                  goto LABEL_77;
                                case 453:
                                  uint64_t v15 = "numOfThrottlingEntriesPerReadLevel";
                                  uint64_t v16 = a1;
                                  int v17 = 453;
                                  goto LABEL_213;
                                case 454:
                                  uint64_t v15 = "numOfThrottlingEntriesPerWriteLevel";
                                  uint64_t v16 = a1;
                                  int v17 = 454;
                                  goto LABEL_213;
                                case 456:
                                  uint64_t v15 = "slcFifoDepth";
                                  uint64_t v16 = a1;
                                  int v17 = 456;
                                  goto LABEL_44;
                                case 457:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "wcacheSectorsDirtyIdle";
                                  goto LABEL_77;
                                case 458:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "wcacheDS_SectorsDirtyIdle";
                                  goto LABEL_77;
                                case 459:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "wcacheFS_MbytesDirtyIdle";
                                  goto LABEL_77;
                                case 460:
                                  uint64_t v15 = "CacheDepthVsThroughput";
                                  uint64_t v16 = a1;
                                  int v17 = 460;
                                  uint64_t v18 = v8;
                                  unsigned int v19 = 256;
                                  goto LABEL_51;
                                case 461:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "directToTLCSectors";
                                  goto LABEL_77;
                                case 462:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "fallbackToWaterfall";
                                  goto LABEL_77;
                                case 463:
                                  uint64_t v15 = "balanceProportionBucketsHistogram";
                                  uint64_t v16 = a1;
                                  int v17 = 463;
LABEL_448:
                                  uint64_t v18 = v8;
                                  unsigned int v19 = 11;
                                  goto LABEL_51;
                                case 464:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "lockToTlc";
                                  goto LABEL_77;
                                case 465:
                                  uint64_t v15 = "burstSizeHistogram";
                                  uint64_t v16 = a1;
                                  int v17 = 465;
                                  goto LABEL_44;
                                case 466:
                                  uint64_t v15 = "qosDirectToTLC";
                                  uint64_t v16 = a1;
                                  int v17 = 466;
                                  goto LABEL_470;
                                case 467:
                                  uint64_t v15 = "maxQosDirectToTLC";
                                  uint64_t v16 = a1;
                                  int v17 = 467;
                                  goto LABEL_144;
                                case 468:
                                  uint64_t v15 = "wcacheDirtyAtFlush";
                                  uint64_t v16 = a1;
                                  int v17 = 468;
                                  goto LABEL_213;
                                case 469:
                                  uint64_t v15 = "raidReconstructSuccessPartition";
                                  uint64_t v16 = a1;
                                  int v17 = 469;
                                  goto LABEL_123;
                                case 470:
                                  uint64_t v15 = "raidReconstructFailPartition";
                                  uint64_t v16 = a1;
                                  int v17 = 470;
                                  goto LABEL_123;
                                case 471:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "raidUncleanBootBandFail";
                                  goto LABEL_77;
                                case 472:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "raidReconstructFailBandFlowHost";
                                  goto LABEL_77;
                                case 473:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "raidReconstructFailBandFlowGC";
                                  goto LABEL_77;
                                case 476:
                                  uint64_t v15 = "raidSuccessfulRecoLbaRange";
                                  uint64_t v16 = a1;
                                  int v17 = 476;
                                  goto LABEL_123;
                                case 477:
                                  uint64_t v15 = "raidFailedRecoLbaRange";
                                  uint64_t v16 = a1;
                                  int v17 = 477;
                                  goto LABEL_123;
                                case 481:
                                  uint64_t v15 = "skinnyBandErases_481";
                                  uint64_t v16 = a1;
                                  int v17 = 481;
                                  goto LABEL_283;
                                case 483:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "tlcOverHeatWaterfall";
                                  goto LABEL_77;
                                case 484:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "skinnyCyclesConvert";
                                  goto LABEL_77;
                                case 485:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "non_proportional_directToTLCSectors";
                                  goto LABEL_77;
                                case 486:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "maxFailedFastCxtSync";
                                  goto LABEL_77;
                                case 487:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "numFormatUserArea";
                                  goto LABEL_77;
                                case 488:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "clogFastCxtSyncAborted";
                                  goto LABEL_77;
                                case 489:
                                  uint64_t v15 = "clogOccupationSectors";
                                  uint64_t v16 = a1;
                                  int v17 = 489;
                                  goto LABEL_102;
                                case 490:
                                  uint64_t v15 = "bdrTmpHist";
                                  uint64_t v16 = a1;
                                  int v17 = 490;
LABEL_470:
                                  uint64_t v18 = v8;
                                  unsigned int v19 = 64;
                                  goto LABEL_51;
                                case 491:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "numFWUpdates";
                                  goto LABEL_77;
                                case 492:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "numClogLoadFails";
                                  goto LABEL_77;
                                case 493:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "rxBurnNumForcedDiffMode";
                                  goto LABEL_77;
                                case 494:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "RD_numSaves";
                                  goto LABEL_77;
                                case 495:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "eanCompressWrites";
                                  goto LABEL_77;
                                case 496:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "eanHostWrites";
                                  goto LABEL_77;
                                case 497:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "bandPreErases";
                                  goto LABEL_77;
                                case 498:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "eanHostUnmaps";
                                  goto LABEL_77;
                                case 499:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "eanHostFlushes";
                                  goto LABEL_77;
                                case 500:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "eanFastWrites";
                                  goto LABEL_77;
                                case 501:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "autowriteDS2FSCollisions";
                                  goto LABEL_77;
                                case 502:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "autowriteWaitTransferTaskBlocks";
                                  goto LABEL_77;
                                case 503:
                                  uint64_t v15 = "avgCycle";
                                  uint64_t v16 = a1;
                                  int v17 = 503;
                                  goto LABEL_123;
                                case 504:
                                  uint64_t v13 = *v8;
                                  BOOL v14 = "RD_DeferredClearsOverflowCnt";
                                  goto LABEL_77;
                                default:
                                  switch(v7)
                                  {
                                    case 505:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "maxVerticsInBand";
                                      goto LABEL_77;
                                    case 506:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "numVertics";
                                      goto LABEL_77;
                                    case 507:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "exceededCVertics";
                                      goto LABEL_77;
                                    case 510:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "raidReconstructFailMismatch";
                                      goto LABEL_77;
                                    case 511:
                                      uint64_t v15 = "mspbootBlockRefreshCnt";
                                      uint64_t v16 = a1;
                                      int v17 = 511;
                                      goto LABEL_283;
                                    case 516:
                                      uint64_t v15 = "mspBootBlockRefreshTime";
                                      uint64_t v16 = a1;
                                      int v17 = 516;
                                      goto LABEL_283;
                                    case 517:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "mspBootBlockCountPerMsp";
                                      goto LABEL_77;
                                    case 518:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "skinnyRevectorSLC";
                                      goto LABEL_77;
                                    case 519:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "skinnyRevectorTLC";
                                      goto LABEL_77;
                                    case 520:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "perfSetupAttempts";
                                      goto LABEL_77;
                                    case 521:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "perfSetupSuccesses";
                                      goto LABEL_77;
                                    case 522:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "perfWriteAttempts";
                                      goto LABEL_77;
                                    case 523:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "perfWriteSuccesses";
                                      goto LABEL_77;
                                    case 524:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "perfReadAttempts";
                                      goto LABEL_77;
                                    case 525:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "perfReadSuccesses";
                                      goto LABEL_77;
                                    case 526:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "perfCleanupAttempts";
                                      goto LABEL_77;
                                    case 527:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "perfCleanupSuccesses";
                                      goto LABEL_77;
                                    case 530:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "firstFailedDieId";
                                      goto LABEL_77;
                                    case 531:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "numDieFailures";
                                      goto LABEL_77;
                                    case 532:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "spareAvailablePercent";
                                      goto LABEL_77;
                                    case 533:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "dataFabricErr";
                                      goto LABEL_77;
                                    case 534:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "downlinkFabricErr";
                                      goto LABEL_77;
                                    case 535:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "prpAccTimeoutErr";
                                      goto LABEL_77;
                                    case 537:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "uplinkFabricErr";
                                      goto LABEL_77;
                                    case 538:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "skinnyBandsGBB";
                                      goto LABEL_77;
                                    case 539:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "AbortPad_GcMustPadBand";
                                      goto LABEL_77;
                                    case 540:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "AbortPad_GcMustPadSkinny";
                                      goto LABEL_77;
                                    case 541:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "bdrHostPingInitial";
                                      goto LABEL_77;
                                    case 542:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "bdrHostPingMoreNeeded";
                                      goto LABEL_77;
                                    case 543:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "bandParityAllocationFailed";
                                      goto LABEL_77;
                                    case 544:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "fastHwBurstToSlc";
                                      goto LABEL_77;
                                    case 545:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "slowHwToTlc";
                                      goto LABEL_77;
                                    case 546:
                                      uint64_t v15 = "slcDemandBurstSizeDetected";
                                      uint64_t v16 = a1;
                                      int v17 = 546;
                                      goto LABEL_44;
                                    case 547:
                                      uint64_t v15 = "slcDemandBurstDur";
                                      uint64_t v16 = a1;
                                      int v17 = 547;
                                      goto LABEL_44;
                                    case 548:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "fastHwToTlcBurst";
                                      goto LABEL_77;
                                    case 549:
                                      uint64_t v15 = "slcDemandBurstSizeSlc";
                                      uint64_t v16 = a1;
                                      int v17 = 549;
                                      goto LABEL_44;
                                    case 551:
                                      uint64_t v15 = "balanceProportionBucketsHistogramTlc";
                                      uint64_t v16 = a1;
                                      int v17 = 551;
                                      goto LABEL_448;
                                    case 553:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "slowHwFlushToSlc";
                                      goto LABEL_77;
                                    case 557:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "slowHwToSlc";
                                      goto LABEL_77;
                                    case 558:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "flushNwToSlc";
                                      goto LABEL_77;
                                    case 559:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "flushNwToTlc";
                                      goto LABEL_77;
                                    case 560:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "oslcHw";
                                      goto LABEL_77;
                                    case 561:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "oslcTransitions";
                                      goto LABEL_77;
                                    case 563:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "slcDemandFlushCount";
                                      goto LABEL_77;
                                    case 564:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "slcDemandBurstCount";
                                      goto LABEL_77;
                                    case 565:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "oslcBaseAvgPE";
                                      goto LABEL_77;
                                    case 566:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "raidReconstructFailNoSPBX";
                                      goto LABEL_77;
                                    case 567:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "raidReconstructFailDouble";
                                      goto LABEL_77;
                                    case 568:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "oslcFastWAmpUOnOff";
                                      goto LABEL_77;
                                    case 569:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "oslcSlowWAmpUOnOff";
                                      goto LABEL_77;
                                    case 570:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "raidReconstructFailInvalid";
                                      goto LABEL_77;
                                    case 572:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "oslcLastWAmpUx10";
                                      goto LABEL_77;
                                    case 573:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "raidFailedReadNoBlog";
                                      goto LABEL_77;
                                    case 574:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "raidReconstructFailBlank";
                                      goto LABEL_77;
                                    case 575:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "oslcHotTLCOnOff";
                                      goto LABEL_77;
                                    case 576:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "gcVPackDestinations";
                                      goto LABEL_77;
                                    case 581:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "averageTLCPECycles";
                                      goto LABEL_77;
                                    case 582:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "averageSLCPECycles";
                                      goto LABEL_77;
                                    case 583:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "numAtomicBoots";
                                      goto LABEL_77;
                                    case 584:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "clogMinorMismatch";
                                      goto LABEL_77;
                                    case 586:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "raidExpectedFailRMXReconstructionInternal";
                                      goto LABEL_77;
                                    case 587:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "raidExpectedFailRMXReconstructionHost";
                                      goto LABEL_77;
                                    case 588:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "oslcGCinvalidations";
                                      goto LABEL_77;
                                    case 589:
                                      uint64_t v13 = *v8;
                                      BOOL v14 = "oslcGCActivateReason";
                                      goto LABEL_77;
                                    default:
                                      switch(v7)
                                      {
                                        case 590:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "oslcLowCleanBandsUOnOff";
                                          goto LABEL_77;
                                        case 591:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "oslcTooManyGCMustOnOff";
                                          goto LABEL_77;
                                        case 592:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "oslcBaseHostWrites";
                                          goto LABEL_77;
                                        case 593:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "oslcBaseBandErases";
                                          goto LABEL_77;
                                        case 594:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "oslcBdrBands";
                                          goto LABEL_77;
                                        case 595:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "oslcBdrValid";
                                          goto LABEL_77;
                                        case 596:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "unexpectedBlanksInternal";
                                          goto LABEL_77;
                                        case 597:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "unexpectedBlanksOnRV";
                                          goto LABEL_77;
                                        case 601:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "waterfallLockSectors";
                                          goto LABEL_77;
                                        case 602:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "oslcGCActiveWrites";
                                          goto LABEL_77;
                                        case 603:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "chipIdTemperatureSample";
                                          goto LABEL_77;
                                        case 604:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "gcVPackWrites";
                                          goto LABEL_77;
                                        case 605:
                                          uint64_t v15 = "gcActiveReasons";
                                          uint64_t v16 = a1;
                                          int v17 = 605;
                                          goto LABEL_44;
                                        case 606:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "eanMaxInitTimeMs";
                                          goto LABEL_77;
                                        case 607:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "eanMinToFirstReadTimeMs";
                                          goto LABEL_77;
                                        case 608:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "skinnyAPGMRetire";
                                          goto LABEL_77;
                                        case 609:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "unexpectedBlanksHost";
                                          goto LABEL_77;
                                        case 610:
                                          uint64_t v15 = "pcieAerCounters";
                                          uint64_t v16 = a1;
                                          int v17 = 610;
                                          goto LABEL_470;
                                        case 611:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "fastHwToTlcBalance";
                                          goto LABEL_77;
                                        case 612:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "perfOSLCRuns";
                                          goto LABEL_77;
                                        case 613:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "slcDemandBurstWritesInGC";
                                          goto LABEL_77;
                                        case 614:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "slcDemandBurstWritesInTT";
                                          goto LABEL_77;
                                        case 615:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "slcDemandBurstWritesInNRP";
                                          goto LABEL_77;
                                        case 616:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "perfTotalDmaMb";
                                          goto LABEL_77;
                                        case 617:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "eanAvgInitTimeMs";
                                          goto LABEL_77;
                                        case 618:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "eanAvgToFirstReadTimeMs";
                                          goto LABEL_77;
                                        case 619:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "eanMaxBootReadTimeMs";
                                          goto LABEL_77;
                                        case 620:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "eanAvgBootReadTimeMs";
                                          goto LABEL_77;
                                        case 621:
                                          uint64_t v15 = "eanBootReadsHist";
                                          uint64_t v16 = a1;
                                          int v17 = 621;
                                          goto LABEL_44;
                                        case 622:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "maxBgInitTimeMs";
                                          goto LABEL_77;
                                        case 623:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "avgBgInitTimeMs";
                                          goto LABEL_77;
                                        case 624:
                                          uint64_t v15 = "clogFailReason";
                                          uint64_t v16 = a1;
                                          int v17 = 624;
                                          goto LABEL_213;
                                        case 625:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "eanMinBootReadMBPerSec";
                                          goto LABEL_77;
                                        case 626:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "eanAvgBootReadMBPerSec";
                                          goto LABEL_77;
                                        case 627:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "minSkinnyPECycles";
                                          goto LABEL_77;
                                        case 628:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "maxSkinnyPECycles";
                                          goto LABEL_77;
                                        case 629:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "averageSkinnyPECycles";
                                          goto LABEL_77;
                                        case 630:
                                          uint64_t v15 = "raidSuccessfulRecoEAN";
                                          uint64_t v16 = a1;
                                          int v17 = 630;
                                          goto LABEL_591;
                                        case 631:
                                          uint64_t v15 = "raidFailedRecoEAN";
                                          uint64_t v16 = a1;
                                          int v17 = 631;
                                          goto LABEL_591;
                                        case 632:
                                          uint64_t v15 = "eanFirstReadMode";
                                          uint64_t v16 = a1;
                                          int v17 = 632;
LABEL_591:
                                          uint64_t v18 = v8;
                                          unsigned int v19 = 6;
                                          goto LABEL_51;
                                        case 635:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "oslcHwGC";
                                          goto LABEL_77;
                                        case 636:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "oslcHwTT";
                                          goto LABEL_77;
                                        case 637:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "oslcHwNRP";
                                          goto LABEL_77;
                                        case 638:
                                          uint64_t v15 = "oslcDemandBurstSize";
                                          uint64_t v16 = a1;
                                          int v17 = 638;
                                          goto LABEL_44;
                                        case 639:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "raidReconstructSuccessBandFlowOslc";
                                          goto LABEL_77;
                                        case 640:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "raidReconstructFailBandFlowOslc";
                                          goto LABEL_77;
                                        case 641:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "raidFailSectors";
                                          goto LABEL_77;
                                        case 642:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "eanFailSectors";
                                          goto LABEL_77;
                                        case 643:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "bdrTimeMode";
                                          goto LABEL_77;
                                        case 644:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "raidParityNotSavedP";
                                          goto LABEL_77;
                                        case 645:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "raidParityNotSavedQ";
                                          goto LABEL_77;
                                        case 646:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "raidParityInvalid";
                                          goto LABEL_77;
                                        case 647:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "raidParityUnknown";
                                          goto LABEL_77;
                                        case 648:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "raidParityUnmapped";
                                          goto LABEL_77;
                                        case 649:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "raidParityGCUnc";
                                          goto LABEL_77;
                                        case 657:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "AbortSkip_MPBXProbational";
                                          goto LABEL_77;
                                        case 659:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "raidVerificationReads";
                                          goto LABEL_77;
                                        case 666:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "nofDies";
                                          goto LABEL_77;
                                        case 671:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "skinnyBandsNum";
                                          goto LABEL_77;
                                        case 672:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "skinnyBandsNumDips";
                                          goto LABEL_77;
                                        case 674:
                                          uint64_t v15 = "oslcNoVotesHw";
                                          uint64_t v16 = a1;
                                          int v17 = 674;
                                          goto LABEL_149;
                                        case 675:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "totalLbas";
                                          goto LABEL_77;
                                        case 676:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "bdrHostPingExtra";
                                          goto LABEL_77;
                                        case 677:
                                          uint64_t v13 = *v8;
                                          BOOL v14 = "magazineInstanceMeta";
                                          goto LABEL_77;
                                        default:
                                          switch(v7)
                                          {
                                            case 680:
                                              uint64_t v15 = "magazineFWVersion";
                                              uint64_t v16 = a1;
                                              int v17 = 680;
                                              goto LABEL_130;
                                            case 681:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "raidReconstructFailPMXUnsup";
                                              goto LABEL_77;
                                            case 682:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "raidReconstructFailBMXUnsup";
                                              goto LABEL_77;
                                            case 683:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "iBootNANDResets";
                                              goto LABEL_77;
                                            case 684:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "pcieClkreqHighTimeout";
                                              goto LABEL_77;
                                            case 687:
                                              uint64_t v15 = "cbdrInitSent";
                                              uint64_t v16 = a1;
                                              int v17 = 687;
                                              goto LABEL_130;
                                            case 688:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrPauseSent";
                                              goto LABEL_77;
                                            case 689:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrResumeSent";
                                              goto LABEL_77;
                                            case 690:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrGetResultSent";
                                              goto LABEL_77;
                                            case 691:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrEarlyExits";
                                              goto LABEL_77;
                                            case 694:
                                              uint64_t v15 = "cbdrRefreshGrades";
                                              uint64_t v16 = a1;
                                              int v17 = 694;
                                              goto LABEL_44;
                                            case 695:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrNotEnoughReads";
                                              goto LABEL_77;
                                            case 696:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrAborts";
                                              goto LABEL_77;
                                            case 697:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "TurboRaidHostClassifications";
                                              goto LABEL_77;
                                            case 698:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "TurboRaidInternalClassifications";
                                              goto LABEL_77;
                                            case 699:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrFullyDone";
                                              goto LABEL_77;
                                            case 702:
                                              uint64_t v15 = "vcurve";
                                              uint64_t v16 = a1;
                                              int v17 = 702;
                                              goto LABEL_283;
                                            case 703:
                                              uint64_t v15 = "injDepth";
                                              uint64_t v16 = a1;
                                              int v17 = 703;
                                              goto LABEL_281;
                                            case 704:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "logical_disk_occupied_promiles";
                                              goto LABEL_77;
                                            case 711:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "raidPrevFailedReconstructSkip";
                                              goto LABEL_77;
                                            case 712:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "TurboRaidSuccessfulHostAuxReads";
                                              goto LABEL_77;
                                            case 713:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "TurboRaidSuccessfulInternalAuxReads";
                                              goto LABEL_77;
                                            case 714:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "turboRaidClassificationReliabilityHost";
                                              goto LABEL_77;
                                            case 715:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "turboRaidClassificationReliabilityInternal";
                                              goto LABEL_77;
                                            case 716:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "turboRaidClassificationQualityHost";
                                              goto LABEL_77;
                                            case 717:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "turboRaidClassificationQualityInternal";
                                              goto LABEL_77;
                                            case 719:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "skinnyBandErases";
                                              goto LABEL_77;
                                            case 721:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "gcPDusterDestinations";
                                              goto LABEL_77;
                                            case 722:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "gcPDusterWrites";
                                              goto LABEL_77;
                                            case 730:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "rvFails";
                                              goto LABEL_77;
                                            case 737:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "TurboRaidFailedHostAuxReads";
                                              goto LABEL_77;
                                            case 738:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "TurboRaidFailedInternalAuxReads";
                                              goto LABEL_77;
                                            case 741:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "autoSkipTriggers";
                                              goto LABEL_77;
                                            case 742:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "autoSkipPlanes";
                                              goto LABEL_77;
                                            case 744:
                                              uint64_t v15 = "raidReconstructDurationHisto";
                                              uint64_t v16 = a1;
                                              int v17 = 744;
                                              goto LABEL_149;
                                            case 745:
                                              uint64_t v15 = "failsOnReconstructHisto";
                                              uint64_t v16 = a1;
                                              int v17 = 745;
                                              goto LABEL_149;
                                            case 746:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "bandKill_userFlattenExcessive";
                                              goto LABEL_77;
                                            case 747:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "bandKill_IntFlattenExcessive";
                                              goto LABEL_77;
                                            case 748:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "bandKill_userFlattenBalance";
                                              goto LABEL_77;
                                            case 749:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "bandKill_intFlattenBalance";
                                              goto LABEL_77;
                                            case 750:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "bandKill_formatVertExcessive";
                                              goto LABEL_77;
                                            case 751:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "bandKill_formatVertBalance";
                                              goto LABEL_77;
                                            case 753:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrNumSlowRefreshes";
                                              goto LABEL_77;
                                            case 754:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrNumFastRefreshes";
                                              goto LABEL_77;
                                            case 755:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrTotalRefreshValidity";
                                              goto LABEL_77;
                                            case 756:
                                              uint64_t v15 = "cbdrRefreshedAges";
                                              uint64_t v16 = a1;
                                              int v17 = 756;
                                              goto LABEL_673;
                                            case 758:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "cbdrSkippedBlocks";
                                              goto LABEL_77;
                                            case 759:
                                              uint64_t v15 = "cbdrScanPct";
                                              uint64_t v16 = a1;
                                              int v17 = 759;
                                              goto LABEL_102;
                                            case 760:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "raidSuccessfulBMXReconstructionInternal";
                                              goto LABEL_77;
                                            case 761:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "raidSuccessfulBMXReconstructionHost";
                                              goto LABEL_77;
                                            case 762:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "raidFailedBMXReconstructionInternal";
                                              goto LABEL_77;
                                            case 763:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "raidFailedBMXReconstructionHost";
                                              goto LABEL_77;
                                            case 764:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "ricSPRVFail";
                                              goto LABEL_77;
                                            case 765:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "ricMPRVFail";
                                              goto LABEL_77;
                                            case 767:
                                              uint64_t v15 = "cbdrRefreshGradesSLC";
                                              uint64_t v16 = a1;
                                              int v17 = 767;
                                              goto LABEL_44;
                                            case 768:
                                              uint64_t v15 = "cbdrRefreshedAgesSLC";
                                              uint64_t v16 = a1;
                                              int v17 = 768;
LABEL_673:
                                              uint64_t v18 = v8;
                                              unsigned int v19 = 9;
                                              goto LABEL_51;
                                            case 769:
                                              uint64_t v15 = "cbdrScanPctSLC";
                                              uint64_t v16 = a1;
                                              int v17 = 769;
                                              goto LABEL_102;
                                            case 770:
                                              uint64_t v15 = "cpuBurstLength";
                                              uint64_t v16 = a1;
                                              int v17 = 770;
                                              goto LABEL_149;
                                            case 771:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "autoSkipRaidRecoFail";
                                              goto LABEL_77;
                                            case 772:
                                              uint64_t v15 = "dmReasonsSlc";
                                              uint64_t v16 = a1;
                                              int v17 = 772;
                                              goto LABEL_283;
                                            case 773:
                                              uint64_t v15 = "dmReasonsTlc";
                                              uint64_t v16 = a1;
                                              int v17 = 773;
                                              goto LABEL_283;
                                            case 774:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "raidReconstructFailBMXAbort";
                                              goto LABEL_77;
                                            case 775:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "bandKill_fatBindingNoBlocks";
                                              goto LABEL_77;
                                            case 776:
                                              uint64_t v13 = *v8;
                                              BOOL v14 = "bandKill_fatBindingFewBlocks";
                                              goto LABEL_77;
                                            default:
                                              switch(v7)
                                              {
                                                case 777:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "numBadBootBlocks";
                                                  goto LABEL_77;
                                                case 778:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "snapshotCPUHigh";
                                                  goto LABEL_77;
                                                case 779:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "snapshotCPULow";
                                                  goto LABEL_77;
                                                case 780:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "gcWithoutBMs";
                                                  goto LABEL_77;
                                                case 781:
                                                  uint64_t v15 = "gcSearchTimeHistory";
                                                  uint64_t v16 = a1;
                                                  int v17 = 781;
                                                  goto LABEL_44;
                                                case 785:
                                                  uint64_t v15 = "gcSearchPortion";
                                                  uint64_t v16 = a1;
                                                  int v17 = 785;
                                                  goto LABEL_213;
                                                case 786:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "raidReconstructFailBmxMp";
                                                  goto LABEL_77;
                                                case 787:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "raidReconstructFailBmx";
                                                  goto LABEL_77;
                                                case 788:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "raidReconstructFailBMXUECC";
                                                  goto LABEL_77;
                                                case 789:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "raidReconstructFailBMXBlank";
                                                  goto LABEL_77;
                                                case 790:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "raidPrevFailedReconstructBmxMpSkip";
                                                  goto LABEL_77;
                                                case 792:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "numTLCFatBands";
                                                  goto LABEL_77;
                                                case 793:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "fatValidity";
                                                  goto LABEL_77;
                                                case 794:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "fatTotal";
                                                  goto LABEL_77;
                                                case 798:
                                                  uint64_t v15 = "raidBMXFailP";
                                                  uint64_t v16 = a1;
                                                  int v17 = 798;
                                                  goto LABEL_144;
                                                case 799:
                                                  uint64_t v15 = "raidBMXFailUECC";
                                                  uint64_t v16 = a1;
                                                  int v17 = 799;
                                                  goto LABEL_144;
                                                case 804:
                                                  uint64_t v15 = "raidBMXFailNoSPBX";
                                                  uint64_t v16 = a1;
                                                  int v17 = 804;
                                                  goto LABEL_144;
                                                case 806:
                                                  uint64_t v15 = "raidBMXFailBlank";
                                                  uint64_t v16 = a1;
                                                  int v17 = 806;
                                                  goto LABEL_144;
                                                case 809:
                                                  uint64_t v15 = "raidBMXFailUnsup";
                                                  uint64_t v16 = a1;
                                                  int v17 = 809;
                                                  goto LABEL_144;
                                                case 811:
                                                  uint64_t v15 = "raidBMXFailMpSkip";
                                                  uint64_t v16 = a1;
                                                  int v17 = 811;
                                                  goto LABEL_144;
                                                case 812:
                                                  uint64_t v15 = "raidBMXFailAbort";
                                                  uint64_t v16 = a1;
                                                  int v17 = 812;
                                                  goto LABEL_144;
                                                case 813:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "TurboRaidIsEnabled";
                                                  goto LABEL_77;
                                                case 814:
                                                  uint64_t v15 = "raidBMXFailOther";
                                                  uint64_t v16 = a1;
                                                  int v17 = 814;
                                                  goto LABEL_144;
                                                case 815:
                                                  uint64_t v15 = "raidBMXSuccess";
                                                  uint64_t v16 = a1;
                                                  int v17 = 815;
                                                  goto LABEL_144;
                                                case 816:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "skinnyBandsExtraDip";
                                                  goto LABEL_77;
                                                case 821:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "writeAmp";
                                                  goto LABEL_77;
                                                case 822:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "ricMaxClogOnlyPages";
                                                  goto LABEL_77;
                                                case 823:
                                                  uint64_t v15 = "readClassifyStatusesHisto";
                                                  uint64_t v16 = a1;
                                                  int v17 = 823;
                                                  goto LABEL_130;
                                                case 824:
                                                  uint64_t v15 = "readWithAuxStatusesHisto";
                                                  uint64_t v16 = a1;
                                                  int v17 = 824;
                                                  goto LABEL_44;
                                                case 825:
                                                  uint64_t v15 = "readReconstructStatusesHisto";
                                                  uint64_t v16 = a1;
                                                  int v17 = 825;
                                                  goto LABEL_44;
                                                case 826:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "bdrBackupChecks";
                                                  goto LABEL_77;
                                                case 827:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "ricExceedClogOnlyPagesTH";
                                                  goto LABEL_77;
                                                case 828:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "numDipFailures";
                                                  goto LABEL_77;
                                                case 831:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "prefetchNextRange";
                                                  goto LABEL_77;
                                                case 862:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "raidSuccessfulSkip";
                                                  goto LABEL_77;
                                                case 863:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "raidFailedSkip";
                                                  goto LABEL_77;
                                                case 864:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "raidSkipAttempts";
                                                  goto LABEL_77;
                                                case 865:
                                                  uint64_t v15 = "timeOfThrottlingPerLevel";
                                                  uint64_t v16 = a1;
                                                  int v17 = 865;
                                                  goto LABEL_213;
                                                case 866:
                                                  uint64_t v15 = "timeOfThrottlingPerReadLevel";
                                                  uint64_t v16 = a1;
                                                  int v17 = 866;
                                                  goto LABEL_213;
                                                case 867:
                                                  uint64_t v15 = "timeOfThrottlingPerWriteLevel";
                                                  uint64_t v16 = a1;
                                                  int v17 = 867;
                                                  goto LABEL_213;
                                                case 868:
                                                  uint64_t v15 = "dmReasonsSlc_1bc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 868;
                                                  goto LABEL_283;
                                                case 869:
                                                  uint64_t v15 = "dmReasonsTlc_1bc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 869;
                                                  goto LABEL_283;
                                                case 870:
                                                  uint64_t v15 = "dmReasonsSlc_1bc_he";
                                                  uint64_t v16 = a1;
                                                  int v17 = 870;
                                                  goto LABEL_283;
                                                case 871:
                                                  uint64_t v15 = "dmReasonsTlc_1bc_he";
                                                  uint64_t v16 = a1;
                                                  int v17 = 871;
                                                  goto LABEL_283;
                                                case 876:
                                                  uint64_t v15 = "dmReasonsSlc_mbc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 876;
                                                  goto LABEL_283;
                                                case 877:
                                                  uint64_t v15 = "dmReasonsTlc_mbc";
                                                  uint64_t v16 = a1;
                                                  int v17 = 877;
                                                  goto LABEL_283;
                                                case 883:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "clogEmptyProgramms";
                                                  goto LABEL_77;
                                                case 884:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "oslcHwCloseBand";
                                                  goto LABEL_77;
                                                case 891:
                                                  uint64_t v15 = "turboRaidSuccessAuxPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 891;
                                                  goto LABEL_123;
                                                case 892:
                                                  uint64_t v15 = "turboRaidFailAuxPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 892;
                                                  goto LABEL_123;
                                                case 893:
                                                  uint64_t v15 = "turboRaidClassifyQualPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 893;
                                                  goto LABEL_123;
                                                case 894:
                                                  uint64_t v15 = "turboRaidClassifyRelPartition";
                                                  uint64_t v16 = a1;
                                                  int v17 = 894;
                                                  goto LABEL_123;
                                                case 895:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "IND_pool_freeMinSilo";
                                                  goto LABEL_77;
                                                case 896:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "autoSweepBlocks";
                                                  goto LABEL_77;
                                                case 897:
                                                  uint64_t v15 = "wcWrFragSizes";
                                                  uint64_t v16 = a1;
                                                  int v17 = 897;
                                                  goto LABEL_213;
                                                case 898:
                                                  uint64_t v15 = "indStateAcrossGcDidNoL";
                                                  uint64_t v16 = a1;
                                                  int v17 = 898;
                                                  goto LABEL_213;
                                                case 899:
                                                  uint64_t v15 = "indStateAcrossGcDidL";
                                                  uint64_t v16 = a1;
                                                  int v17 = 899;
                                                  goto LABEL_213;
                                                case 900:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "turboRaidNoClassifyDueToWasRetire";
                                                  goto LABEL_77;
                                                case 901:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "turboRaidNoClassifyDueToOpenBand";
                                                  goto LABEL_77;
                                                case 902:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "turboRaidNoClassifyDueToQualityBlock";
                                                  goto LABEL_77;
                                                case 903:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "turboRaidGbbOpenBand";
                                                  goto LABEL_77;
                                                case 904:
                                                  uint64_t v13 = *v8;
                                                  BOOL v14 = "turboRaidGbbShouldRetireOnRefresh";
                                                  goto LABEL_77;
                                                case 905:
                                                  uint64_t v15 = "turboRaidRelPerBlock";
                                                  uint64_t v16 = a1;
                                                  int v17 = 905;
                                                  goto LABEL_213;
                                                case 906:
                                                  uint64_t v15 = "turboRaidRelBetweenRefreshesPerBlock";
                                                  uint64_t v16 = a1;
                                                  int v17 = 906;
                                                  goto LABEL_213;
                                                default:
                                                  if (v7 <= 1039)
                                                  {
                                                    switch(v7)
                                                    {
                                                      case 907:
                                                        uint64_t v15 = "turboRaidMaxRelBetweenRefreshesPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 907;
                                                        goto LABEL_213;
                                                      case 908:
                                                        uint64_t v15 = "turboRaidMinRelBetweenRefreshesPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 908;
                                                        goto LABEL_213;
                                                      case 909:
                                                      case 910:
                                                      case 911:
                                                      case 912:
                                                      case 913:
                                                      case 914:
                                                      case 915:
                                                      case 916:
                                                      case 917:
                                                      case 924:
                                                      case 925:
                                                      case 926:
                                                      case 927:
                                                      case 928:
                                                      case 929:
                                                      case 936:
                                                      case 941:
                                                      case 945:
                                                      case 946:
                                                      case 947:
                                                      case 949:
                                                      case 950:
                                                      case 952:
                                                      case 954:
                                                      case 955:
                                                      case 956:
                                                      case 957:
                                                      case 958:
                                                      case 959:
                                                      case 960:
                                                      case 963:
                                                      case 964:
                                                      case 965:
                                                      case 966:
                                                      case 968:
                                                      case 969:
                                                      case 970:
                                                        goto LABEL_824;
                                                      case 918:
                                                        uint64_t v15 = "turboRaidMaxCyclesBetweenRel";
                                                        uint64_t v16 = a1;
                                                        int v17 = 918;
                                                        goto LABEL_213;
                                                      case 919:
                                                        uint64_t v15 = "turboRaidMinCyclesBetweenRel";
                                                        uint64_t v16 = a1;
                                                        int v17 = 919;
                                                        goto LABEL_213;
                                                      case 920:
                                                        uint64_t v15 = "turboRaidAuxPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 920;
                                                        goto LABEL_213;
                                                      case 921:
                                                        uint64_t v15 = "turboRaidAuxBetweenRefreshesPerBlock";
                                                        uint64_t v16 = a1;
                                                        int v17 = 921;
                                                        goto LABEL_213;
                                                      case 922:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "turboRaidRelLockMark";
                                                        goto LABEL_77;
                                                      case 923:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "turboRaidAuxLockMark";
                                                        goto LABEL_77;
                                                      case 930:
                                                        uint64_t v15 = "turboRaidMaxCyclesBetweenAux";
                                                        uint64_t v16 = a1;
                                                        int v17 = 930;
                                                        goto LABEL_213;
                                                      case 931:
                                                        uint64_t v15 = "turboRaidMinCyclesBetweenAux";
                                                        uint64_t v16 = a1;
                                                        int v17 = 931;
                                                        goto LABEL_213;
                                                      case 932:
                                                        uint64_t v15 = "turboRaidLastRelPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 932;
                                                        goto LABEL_213;
                                                      case 933:
                                                        uint64_t v15 = "turboRaidRelQualPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 933;
                                                        goto LABEL_213;
                                                      case 934:
                                                        uint64_t v15 = "turboRaidLastAuxPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 934;
                                                        goto LABEL_213;
                                                      case 935:
                                                        uint64_t v15 = "turboRaidAuxQualPECycles";
                                                        uint64_t v16 = a1;
                                                        int v17 = 935;
                                                        goto LABEL_213;
                                                      case 937:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "turboRaidPEFailAfterRel";
                                                        goto LABEL_77;
                                                      case 938:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "turboRaidPEFailAfterAux";
                                                        goto LABEL_77;
                                                      case 939:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "dvfmVotesCPU";
                                                        goto LABEL_77;
                                                      case 940:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "dvfmVotesBandwidth";
                                                        goto LABEL_77;
                                                      case 942:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "maxSLCEndurance";
                                                        goto LABEL_77;
                                                      case 943:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "maxMixedEndurance";
                                                        goto LABEL_77;
                                                      case 944:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "maxNativeEndurance";
                                                        goto LABEL_77;
                                                      case 948:
                                                        uint64_t v15 = "assertHistory";
                                                        uint64_t v16 = a1;
                                                        int v17 = 948;
                                                        uint64_t v18 = v8;
                                                        unsigned int v19 = 40;
                                                        goto LABEL_51;
                                                      case 951:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "asp3Support";
                                                        goto LABEL_77;
                                                      case 953:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "numCrossTempRaidUecc";
                                                        goto LABEL_77;
                                                      case 961:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "osBuildStr";
                                                        goto LABEL_77;
                                                      case 962:
                                                        uint64_t v13 = *v8;
                                                        BOOL v14 = "raidConfig";
                                                        goto LABEL_77;
                                                      case 967:
                                                        uint64_t v15 = "indTrimFrags";
                                                        uint64_t v16 = a1;
                                                        int v17 = 967;
                                                        goto LABEL_281;
                                                      case 971:
                                                        uint64_t v15 = "indUsedFrags";
                                                        uint64_t v16 = a1;
                                                        int v17 = 971;
                                                        goto LABEL_281;
                                                      default:
                                                        switch(v7)
                                                        {
                                                          case 996:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "clogFindFail";
                                                            goto LABEL_78;
                                                          case 997:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "clogFindBlank";
                                                            goto LABEL_78;
                                                          case 998:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "clogFindUnc";
                                                            goto LABEL_78;
                                                          case 999:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "clogFindUnexpected";
                                                            goto LABEL_78;
                                                          case 1001:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1001;
                                                            uint64_t v15 = "clogReplayFailReason";
                                                            goto LABEL_149;
                                                          case 1002:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "clogReplayTransientError";
                                                            goto LABEL_78;
                                                          case 1003:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "clogReplaySpfError";
                                                            goto LABEL_78;
                                                          case 1015:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1015;
                                                            uint64_t v15 = "eanEarlyBootUeccPage";
                                                            goto LABEL_144;
                                                          case 1016:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "eanEarlyBootNumUeccPages";
                                                            goto LABEL_78;
                                                          case 1017:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "eanEarlyBootUeccMultiplane";
                                                            goto LABEL_78;
                                                          default:
                                                            goto LABEL_824;
                                                        }
                                                    }
                                                  }
                                                  if (v7 <= 1137)
                                                  {
                                                    if (v7 > 1104)
                                                    {
                                                      if (v7 > 1115)
                                                      {
                                                        if (v7 == 1116)
                                                        {
                                                          uint64_t v16 = a1;
                                                          int v17 = 1116;
                                                          uint64_t v15 = "gcwamp";
LABEL_283:
                                                          uint64_t v18 = v8;
                                                          unsigned int v19 = 32;
                                                          goto LABEL_51;
                                                        }
                                                        if (v7 == 1137)
                                                        {
                                                          uint64_t v13 = *v8;
                                                          unsigned int v20 = (void *)a1;
                                                          BOOL v14 = "numOfToUnhappySwitches";
                                                          goto LABEL_78;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if (v7 == 1105)
                                                        {
                                                          uint64_t v16 = a1;
                                                          int v17 = 1105;
                                                          uint64_t v15 = "hostReadSequential";
                                                          goto LABEL_831;
                                                        }
                                                        if (v7 == 1106)
                                                        {
                                                          uint64_t v16 = a1;
                                                          int v17 = 1106;
                                                          uint64_t v15 = "GCReadSequential";
LABEL_831:
                                                          uint64_t v18 = v8;
                                                          unsigned int v19 = 14;
                                                          goto LABEL_51;
                                                        }
                                                      }
                                                    }
                                                    else
                                                    {
                                                      if (v7 <= 1041)
                                                      {
                                                        uint64_t v16 = a1;
                                                        if (v7 == 1040)
                                                        {
                                                          int v17 = 1040;
                                                          uint64_t v15 = "bandsAgeBinsV2";
                                                        }
                                                        else
                                                        {
                                                          int v17 = 1041;
                                                          uint64_t v15 = "bandsAgeBinsSnapshot";
                                                        }
                                                        uint64_t v18 = v8;
                                                        unsigned int v19 = 31;
                                                        goto LABEL_51;
                                                      }
                                                      if (v7 == 1042)
                                                      {
                                                        uint64_t v16 = a1;
                                                        int v17 = 1042;
                                                        uint64_t v15 = "bandsAgeBinsReadSectors";
                                                        uint64_t v18 = v8;
                                                        unsigned int v19 = 15;
LABEL_51:
                                                        AddFieldToContext(v16, v17, v15, v18, v19);
                                                        goto LABEL_79;
                                                      }
                                                      if (v7 == 1080)
                                                      {
                                                        uint64_t v13 = *v8;
                                                        unsigned int v20 = (void *)a1;
                                                        BOOL v14 = "raidForceClogLoad";
                                                        goto LABEL_78;
                                                      }
                                                    }
LABEL_824:
                                                    switch(v7)
                                                    {
                                                      case 1196:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1196;
                                                        uint64_t v15 = "poDetectGBBedTotalCost";
                                                        goto LABEL_102;
                                                      case 1197:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1197;
                                                        uint64_t v15 = "poDetectGBBedAge";
                                                        goto LABEL_44;
                                                      case 1198:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1198;
                                                        uint64_t v15 = "poDetectPERemovalMostSevereCost";
                                                        goto LABEL_130;
                                                      case 1199:
                                                        uint64_t v13 = *v8;
                                                        unsigned int v20 = (void *)a1;
                                                        BOOL v14 = "poDetectCurrentSize";
                                                        goto LABEL_78;
                                                      case 1200:
                                                      case 1203:
                                                      case 1204:
                                                      case 1205:
                                                      case 1206:
                                                      case 1207:
                                                      case 1208:
                                                      case 1209:
                                                      case 1210:
                                                      case 1212:
                                                      case 1213:
                                                      case 1214:
                                                      case 1219:
                                                      case 1220:
                                                      case 1221:
                                                      case 1222:
                                                      case 1223:
                                                        break;
                                                      case 1201:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1201;
                                                        uint64_t v15 = "gcVerticalSuccssfulAlignments";
                                                        goto LABEL_144;
                                                      case 1202:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1202;
                                                        uint64_t v15 = "gcVerticalNoAlignmentDueToMissingSegs";
                                                        goto LABEL_144;
                                                      case 1211:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1211;
                                                        uint64_t v15 = "forcedAllocationSmallEraseQ";
                                                        goto LABEL_844;
                                                      case 1215:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1215;
                                                        uint64_t v15 = "hostWritesPerThrottleZone";
                                                        goto LABEL_102;
                                                      case 1216:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1216;
                                                        uint64_t v15 = "tlcWLPerDipAvgPEC";
                                                        goto LABEL_844;
                                                      case 1217:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1217;
                                                        uint64_t v15 = "tlcWLPerDipMaxPEC";
                                                        goto LABEL_844;
                                                      case 1218:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1218;
                                                        uint64_t v15 = "tlcWLPerDipMinPEC";
                                                        goto LABEL_844;
                                                      case 1224:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1224;
                                                        uint64_t v15 = "apfsValidLbaOvershoot";
                                                        goto LABEL_93;
                                                      default:
                                                        switch(v7)
                                                        {
                                                          case 1232:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "eanFastSize";
                                                            goto LABEL_78;
                                                          case 1233:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "eanNumSlcEvictions";
                                                            goto LABEL_78;
                                                          case 1234:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "eanNumForcedCompress";
                                                            goto LABEL_78;
                                                          case 1235:
                                                          case 1236:
                                                          case 1237:
                                                          case 1238:
                                                          case 1239:
                                                          case 1240:
                                                          case 1242:
                                                          case 1243:
                                                          case 1245:
                                                            goto LABEL_79;
                                                          case 1241:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1241;
                                                            uint64_t v15 = "s2rTimeHisto";
                                                            goto LABEL_44;
                                                          case 1244:
                                                            uint64_t v13 = *v8;
                                                            unsigned int v20 = (void *)a1;
                                                            BOOL v14 = "calendarTimeWentBackward";
                                                            goto LABEL_78;
                                                          case 1246:
                                                            uint64_t v16 = a1;
                                                            int v17 = 1246;
                                                            uint64_t v15 = "bandsUeccCrossTempHisto";
                                                            goto LABEL_149;
                                                          default:
                                                            if (v7 != 1190) {
                                                              goto LABEL_79;
                                                            }
                                                            uint64_t v16 = a1;
                                                            int v17 = 1190;
                                                            uint64_t v15 = "powerDownTime";
                                                            break;
                                                        }
                                                        goto LABEL_281;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    switch(v7)
                                                    {
                                                      case 1147:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1147;
                                                        uint64_t v15 = "gc_concurrent_dw_gc12";
                                                        goto LABEL_844;
                                                      case 1148:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1148;
                                                        uint64_t v15 = "gc_concurrent_dw_gc1";
                                                        goto LABEL_844;
                                                      case 1149:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1149;
                                                        uint64_t v15 = "gc_concurrent_dw_gc2";
LABEL_844:
                                                        uint64_t v18 = v8;
                                                        unsigned int v19 = 24;
                                                        goto LABEL_51;
                                                      case 1150:
                                                      case 1151:
                                                      case 1152:
                                                      case 1153:
                                                      case 1154:
                                                      case 1155:
                                                      case 1156:
                                                      case 1159:
                                                      case 1160:
                                                      case 1161:
                                                      case 1162:
                                                      case 1163:
                                                      case 1164:
                                                      case 1165:
                                                      case 1166:
                                                      case 1167:
                                                      case 1170:
                                                      case 1173:
                                                      case 1174:
                                                      case 1175:
                                                      case 1176:
                                                      case 1177:
                                                      case 1178:
                                                        goto LABEL_824;
                                                      case 1157:
                                                        uint64_t v13 = *v8;
                                                        unsigned int v20 = (void *)a1;
                                                        BOOL v14 = "eanMaxForceROTimeMs";
                                                        break;
                                                      case 1158:
                                                        uint64_t v13 = *v8;
                                                        unsigned int v20 = (void *)a1;
                                                        BOOL v14 = "eanMaxForceRORecoTimeMs";
                                                        break;
                                                      case 1168:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1168;
                                                        uint64_t v15 = "poDetectPERemovalTotalCost";
                                                        goto LABEL_123;
                                                      case 1169:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1169;
                                                        uint64_t v15 = "poDetectEmptySpotRemovalTotalCost";
                                                        goto LABEL_123;
                                                      case 1171:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1171;
                                                        uint64_t v15 = "poDetectEmptySpotRemovalAge";
                                                        goto LABEL_44;
                                                      case 1172:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1172;
                                                        uint64_t v15 = "poDetectGBBedMostSevereCost";
                                                        goto LABEL_130;
                                                      case 1179:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1179;
                                                        uint64_t v15 = "gc_cur_dw_gc1";
                                                        goto LABEL_144;
                                                      case 1180:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1180;
                                                        uint64_t v15 = "gc_cur_dw_gc2";
                                                        goto LABEL_144;
                                                      case 1181:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1181;
                                                        uint64_t v15 = "gc_cur_dw_gc3";
                                                        goto LABEL_144;
                                                      case 1182:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1182;
                                                        uint64_t v15 = "gc_tot_dw_gc1";
                                                        goto LABEL_144;
                                                      case 1183:
                                                        uint64_t v16 = a1;
                                                        int v17 = 1183;
                                                        uint64_t v15 = "gc_tot_dw_gc2";
                                                        goto LABEL_144;
                                                      case 1184:
                                                        uint64_t v13 = *v8;
                                                        unsigned int v20 = (void *)a1;
                                                        BOOL v14 = "unhappy_state";
                                                        break;
                                                      case 1185:
                                                        uint64_t v13 = *v8;
                                                        unsigned int v20 = (void *)a1;
                                                        BOOL v14 = "unhappy_level";
                                                        break;
                                                      default:
                                                        if (v7 == 1138)
                                                        {
                                                          uint64_t v13 = *v8;
                                                          unsigned int v20 = (void *)a1;
                                                          BOOL v14 = "numOfToHappySwitches";
                                                        }
                                                        else
                                                        {
                                                          if (v7 != 1189) {
                                                            goto LABEL_824;
                                                          }
                                                          uint64_t v13 = *v8;
                                                          unsigned int v20 = (void *)a1;
                                                          BOOL v14 = "lastLbaFormatTime";
                                                        }
                                                        break;
                                                    }
LABEL_78:
                                                    AddSingleValue(v20, "", v14, v13);
                                                  }
LABEL_79:
                                                  a2 = &v8[v10];
                                                  unsigned int v6 = v11 - v10;
                                                  if (v11 != v10) {
                                                    continue;
                                                  }
                                                  uint64_t result = 1;
                                                  break;
                                              }
                                              break;
                                          }
                                          break;
                                      }
                                      break;
                                  }
                                  break;
                              }
                              break;
                          }
                          break;
                      }
                      break;
                  }
                  break;
              }
              break;
          }
          break;
      }
    }
    else
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 32) = 0;
    }
    return result;
  }
}

uint64_t AddFieldToContext(uint64_t result, int a2, const char *a3, uint64_t *a4, unsigned int a5)
{
  int v7 = (void *)result;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a4;
  if (a2 <= 44)
  {
    switch(a2)
    {
      case 4:
        *(void *)(result + 72) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 5:
      case 6:
      case 8:
      case 9:
      case 10:
      case 11:
      case 14:
      case 15:
      case 16:
        goto LABEL_41;
      case 7:
        *(void *)(result + 64) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 12:
        *(void *)(result + 144) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 13:
        *(void *)(result + 152) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 17:
        *(void *)(result + 88) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 18:
        *(void *)(result + 104) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 19:
        *(void *)(result + 96) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      case 20:
        *(void *)(result + 112) = v8;
        if (a5) {
          goto LABEL_42;
        }
        return result;
      default:
        if (a2 != 28) {
          goto LABEL_41;
        }
        *(void *)(result + 168) = v8;
        if (!a5) {
          return result;
        }
        goto LABEL_42;
    }
  }
  switch(a2)
  {
    case '-':
      *(void *)(result + 176) = v8;
      if (a5) {
        goto LABEL_42;
      }
      return result;
    case '.':
    case '/':
    case '6':
    case '7':
      goto LABEL_41;
    case '0':
      *(void *)(result + 80) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '1':
      *(_DWORD *)(result + 56) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '2':
      *(_DWORD *)(result + 52) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '3':
      *(_DWORD *)(result + 48) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '4':
      *(_DWORD *)(result + 44) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    case '5':
      *(_DWORD *)(result + 32) = v8;
      goto LABEL_41;
    case '8':
      *(void *)(result + 160) = v8;
      if (!a5) {
        return result;
      }
      goto LABEL_42;
    default:
      if (a2 != 265) {
        goto LABEL_41;
      }
      if (a5)
      {
        uint64_t v9 = a5;
        unint64_t v10 = (void *)(result + 184);
        unsigned int v11 = a4;
        do
        {
          uint64_t v12 = *v11++;
          *v10++ = v12;
          --v9;
        }
        while (v9);
LABEL_41:
        if (a5)
        {
LABEL_42:
          if (a5 == 1)
          {
            return AddSingleValue((void *)result, "", a3, v8);
          }
          else
          {
            uint64_t v13 = 0;
            uint64_t v14 = a5;
            do
            {
              snprintf(__str, 0x64uLL, "%d", v13);
              __str[100] = 0;
              uint64_t result = AddSingleValue(v7, a3, __str, a4[v13++]);
            }
            while (v14 != v13);
          }
        }
      }
      return result;
  }
}

double ASPReleaseContext(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)v2[14];
      free(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)v4[14];
      free(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t ASPFTLParseBufferToCxt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t *)a2;
  uint64_t v10 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = a3 >> 3;
  *(_OWORD *)__str = 0u;
  long long v23 = 0u;
  do
  {
LABEL_2:
    if (!v11) {
      return v10;
    }
    unint64_t v13 = *v8++;
    int v12 = v13;
    unint64_t v14 = HIDWORD(v13);
    --v11;
  }
  while (!HIDWORD(v13));
  if (v12 == 0xFFFF || v12 > 0x30000000 || v11 < v14) {
    return v10;
  }
  switch(v12)
  {
    case 1:
      if (AddSingleValueToGenericContext(a1, "", "version", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: version(1) cannot add 1 element to context";
      goto LABEL_161;
    case 2:
      if (AddSingleValueToGenericContext(a1, "", "hostWriteXacts", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWriteXacts(2) cannot add 1 element to context";
      goto LABEL_161;
    case 3:
      if (AddSingleValueToGenericContext(a1, "", "hostReadXacts", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostReadXacts(3) cannot add 1 element to context";
      goto LABEL_161;
    case 4:
      if (AddSingleValueToGenericContext(a1, "", "hostWrites", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWrites(4) cannot add 1 element to context";
      goto LABEL_161;
    case 5:
      if (AddSingleValueToGenericContext(a1, "", "hostWritesDyn", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWritesDyn(5) cannot add 1 element to context";
      goto LABEL_161;
    case 6:
      if (AddSingleValueToGenericContext(a1, "", "hostWritesStatic", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWritesStatic(6) cannot add 1 element to context";
      goto LABEL_161;
    case 7:
      if (AddSingleValueToGenericContext(a1, "", "hostReads", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostReads(7) cannot add 1 element to context";
      goto LABEL_161;
    case 8:
      if (AddSingleValueToGenericContext(a1, "", "validLbas", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: validLbas(8) cannot add 1 element to context";
      goto LABEL_161;
    case 9:
      if (AddSingleValueToGenericContext(a1, "", "shutdowns", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: shutdowns(9) cannot add 1 element to context";
      goto LABEL_161;
    case 10:
      if (AddSingleValueToGenericContext(a1, "", "boots", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: boots(10) cannot add 1 element to context";
      goto LABEL_161;
    case 11:
      if (AddSingleValueToGenericContext(a1, "", "uncleanBoots", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: uncleanBoots(11) cannot add 1 element to context";
      goto LABEL_161;
    case 12:
      if (AddSingleValueToGenericContext(a1, "", "IND_pool_free", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: IND_pool_free(12) cannot add 1 element to context";
      goto LABEL_161;
    case 13:
      if (AddSingleValueToGenericContext(a1, "", "IND_pool_count", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: IND_pool_count(13) cannot add 1 element to context";
      goto LABEL_161;
    case 14:
      if (v14 != 10) {
        SetAPIErrorMessage("ASPFTLParseBufferToCxt: hostWriteLogHisto(14): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0xA) {
        unsigned int v18 = 10;
      }
      else {
        unsigned int v18 = v14;
      }
      if (AddMultipleFieldsToGenericContext(a1, "hostWriteLogHisto_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: hostWriteLogHisto(14): Cannot add 10 elements to context";
      goto LABEL_2616;
    case 15:
      if (v14 != 10) {
        SetAPIErrorMessage("ASPFTLParseBufferToCxt: hostReadLogHisto(15): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0xA) {
        unsigned int v18 = 10;
      }
      else {
        unsigned int v18 = v14;
      }
      if (AddMultipleFieldsToGenericContext(a1, "hostReadLogHisto_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: hostReadLogHisto(15): Cannot add 10 elements to context";
      goto LABEL_2616;
    case 16:
      if (AddSingleValueToGenericContext(a1, "", "gcWrites", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: gcWrites(16) cannot add 1 element to context";
      goto LABEL_161;
    case 17:
      if (AddSingleValueToGenericContext(a1, "", "wearLevMoves", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: wearLevMoves(17) cannot add 1 element to context";
      goto LABEL_161;
    case 18:
      if (AddSingleValueToGenericContext(a1, "", "nandWrites", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: nandWrites(18) cannot add 1 element to context";
      goto LABEL_161;
    case 19:
      if (AddSingleValueToGenericContext(a1, "", "nandReads", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: nandReads(19) cannot add 1 element to context";
      goto LABEL_161;
    case 20:
      if (AddSingleValueToGenericContext(a1, "", "bandErases", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: bandErases(20) cannot add 1 element to context";
      goto LABEL_161;
    case 22:
      if (AddSingleValueToGenericContext(a1, "", "numPfail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numPfail(22) cannot add 1 element to context";
      goto LABEL_161;
    case 23:
      if (AddSingleValueToGenericContext(a1, "", "numEfail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numEfail(23) cannot add 1 element to context";
      goto LABEL_161;
    case 24:
      if (AddSingleValueToGenericContext(a1, "", "numPerformanceRefreshes", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numPerformanceRefreshes(24) cannot add 1 element to context";
      goto LABEL_161;
    case 27:
      if (AddSingleValueToGenericContext(a1, "", "hostWritesMeta", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: hostWritesMeta(27) cannot add 1 element to context";
      goto LABEL_161;
    case 28:
      if (AddSingleValueToGenericContext(a1, "", "numSleepOps", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numSleepOps(28) cannot add 1 element to context";
      goto LABEL_161;
    case 30:
      if (AddSingleValueToGenericContext(a1, "", "cntTimeWentBackWardOnBoot", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cntTimeWentBackWardOnBoot(30) cannot add 1 element to context";
      goto LABEL_161;
    case 31:
      if (AddSingleValueToGenericContext(a1, "", "cntTimeWentBackWard", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cntTimeWentBackWard(31) cannot add 1 element to context";
      goto LABEL_161;
    case 34:
      if (AddSingleValueToGenericContext(a1, "", "powerOnHours", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: powerOnHours(34) cannot add 1 element to context";
      goto LABEL_161;
    case 36:
      if (AddSingleValueToGenericContext(a1, "", "smartCritWarnings", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: smartCritWarnings(36) cannot add 1 element to context";
      goto LABEL_161;
    case 37:
      if (AddSingleValueToGenericContext(a1, "", "numFlushes", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numFlushes(37) cannot add 1 element to context";
      goto LABEL_161;
    case 38:
      if (AddSingleValueToGenericContext(a1, "", "numUnmap", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numUnmap(38) cannot add 1 element to context";
      goto LABEL_161;
    case 39:
      if (AddSingleValueToGenericContext(a1, "", "numUnmapSec", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numUnmapSec(39) cannot add 1 element to context";
      goto LABEL_161;
    case 41:
      if (AddSingleValueToGenericContext(a1, "", "clogProgram", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogProgram(41) cannot add 1 element to context";
      goto LABEL_161;
    case 42:
      if (AddSingleValueToGenericContext(a1, "", "clogPFail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogPFail(42) cannot add 1 element to context";
      goto LABEL_161;
    case 43:
      if (AddSingleValueToGenericContext(a1, "", "clogRead", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogRead(43) cannot add 1 element to context";
      goto LABEL_161;
    case 44:
      if (AddSingleValueToGenericContext(a1, "", "clogRFail", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: clogRFail(44) cannot add 1 element to context";
      goto LABEL_161;
    case 45:
      if (AddSingleValueToGenericContext(a1, "", "maxHighEnduranceBlockErases", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: maxHighEnduranceBlockErases(45) cannot add 1 element to context";
      goto LABEL_161;
    case 46:
      if (AddSingleValueToGenericContext(a1, "", "numFactoryBad", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numFactoryBad(46) cannot add 1 element to context";
      goto LABEL_161;
    case 47:
      if (AddSingleValueToGenericContext(a1, "", "numGrownBad", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numGrownBad(47) cannot add 1 element to context";
      goto LABEL_161;
    case 48:
      if (AddSingleValueToGenericContext(a1, "", "numFreeVirtualBlocks", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numFreeVirtualBlocks(48) cannot add 1 element to context";
      goto LABEL_161;
    case 49:
      if (AddSingleValueToGenericContext(a1, "", "bytesPerPage", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: bytesPerPage(49) cannot add 1 element to context";
      goto LABEL_161;
    case 50:
      if (AddSingleValueToGenericContext(a1, "", "pagesPerVirtualBlock", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: pagesPerVirtualBlock(50) cannot add 1 element to context";
      goto LABEL_161;
    case 51:
      if (AddSingleValueToGenericContext(a1, "", "blocksPerVirtualBlock", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: blocksPerVirtualBlock(51) cannot add 1 element to context";
      goto LABEL_161;
    case 52:
      if (AddSingleValueToGenericContext(a1, "", "numVirtualBlocks", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: numVirtualBlocks(52) cannot add 1 element to context";
      goto LABEL_161;
    case 53:
      if (AddSingleValueToGenericContext(a1, "", "exportVersion", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: exportVersion(53) cannot add 1 element to context";
      goto LABEL_161;
    case 54:
      if (v14 != 100) {
        SetAPIErrorMessage("ASPFTLParseBufferToCxt: ECBins(54): (#100) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0x64) {
        unsigned int v18 = 100;
      }
      else {
        unsigned int v18 = v14;
      }
      if (AddMultipleFieldsToGenericContext(a1, "ECBins_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: ECBins(54): Cannot add 100 elements to context";
      goto LABEL_2616;
    case 55:
      if (v14 != 100) {
        SetAPIErrorMessage("ASPFTLParseBufferToCxt: RCBins(55): (#100) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
      }
      if (v14 >= 0x64) {
        unsigned int v18 = 100;
      }
      else {
        unsigned int v18 = v14;
      }
      if (AddMultipleFieldsToGenericContext(a1, "RCBins_", (uint64_t)v8, 8u, v18)) {
        goto LABEL_110;
      }
      unsigned int v19 = "ASPFTLParseBufferToCxt: RCBins(55): Cannot add 100 elements to context";
      goto LABEL_2616;
    case 56:
      if (AddSingleValueToGenericContext(a1, "", "utilFormatTime", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: utilFormatTime(56) cannot add 1 element to context";
      goto LABEL_161;
    case 57:
      if (AddSingleValueToGenericContext(a1, "", "calendarTime", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: calendarTime(57) cannot add 1 element to context";
      goto LABEL_161;
    case 58:
      if (AddSingleValueToGenericContext(a1, "", "wallTime", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: wallTime(58) cannot add 1 element to context";
      goto LABEL_161;
    case 59:
      if (AddSingleValueToGenericContext(a1, "", "cmdq_flush_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_flush_us(59) cannot add 1 element to context";
      goto LABEL_161;
    case 60:
      if (AddSingleValueToGenericContext(a1, "", "cmdq_unmap_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_unmap_us(60) cannot add 1 element to context";
      goto LABEL_161;
    case 61:
      if (AddSingleValueToGenericContext(a1, "", "cmdq_pri0_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri0_r_us(61) cannot add 1 element to context";
      goto LABEL_161;
    case 62:
      if (AddSingleValueToGenericContext(a1, "", "cmdq_pri0_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri0_w_us(62) cannot add 1 element to context";
      goto LABEL_161;
    case 63:
      if (AddSingleValueToGenericContext(a1, "", "cmdq_pri1_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri1_r_us(63) cannot add 1 element to context";
      goto LABEL_161;
    case 64:
      if (AddSingleValueToGenericContext(a1, "", "cmdq_pri1_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri1_w_us(64) cannot add 1 element to context";
      goto LABEL_161;
    case 65:
      if (AddSingleValueToGenericContext(a1, "", "cmdq_pri2_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri2_r_us(65) cannot add 1 element to context";
      goto LABEL_161;
    case 66:
      if (AddSingleValueToGenericContext(a1, "", "cmdq_pri2_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri2_w_us(66) cannot add 1 element to context";
      goto LABEL_161;
    case 67:
      if (AddSingleValueToGenericContext(a1, "", "cmdq_pri3_r_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri3_r_us(67) cannot add 1 element to context";
      goto LABEL_161;
    case 68:
      if (AddSingleValueToGenericContext(a1, "", "cmdq_pri3_w_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmdq_pri3_w_us(68) cannot add 1 element to context";
      goto LABEL_161;
    case 69:
      if (AddSingleValueToGenericContext(a1, "", "host_idle_ms", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: host_idle_ms(69) cannot add 1 element to context";
      goto LABEL_161;
    case 70:
      if (AddSingleValueToGenericContext(a1, "", "cmd_hysteresis_window_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmd_hysteresis_window_us(70) cannot add 1 element to context";
      goto LABEL_161;
    case 71:
      if (AddSingleValueToGenericContext(a1, "", "cmd_lowPriHoldoffDelay_us", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmd_lowPriHoldoffDelay_us(71) cannot add 1 element to context";
      goto LABEL_161;
    case 72:
      if (AddSingleValueToGenericContext(a1, "", "cmd_lowPriHoldoffEnabled", *v8)) {
        goto LABEL_162;
      }
      int v17 = "ASPFTLParseBufferToCxt: cmd_lowPriHoldoffEnabled(72) cannot add 1 element to context";
      goto LABEL_161;
    default:
      switch(v12)
      {
        case 73:
          if (AddMultipleFieldsToGenericContext(a1, "cmd_expedite_num_success", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: cmd_expedite_num_success(73) cannot add 1 element to context";
          goto LABEL_161;
        case 75:
          if (AddMultipleFieldsToGenericContext(a1, "cmd_expedite_num_failures", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: cmd_expedite_num_failures(75) cannot add 1 element to context";
          goto LABEL_161;
        case 76:
          if (AddMultipleFieldsToGenericContext(a1, "num_trimerase", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: num_trimerase(76) cannot add 1 element to context";
          goto LABEL_161;
        case 77:
          if (AddMultipleFieldsToGenericContext(a1, "staticSizeInMB", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: staticSizeInMB(77) cannot add 1 element to context";
          goto LABEL_161;
        case 80:
          if (AddMultipleFieldsToGenericContext(a1, "slcInvalidations", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: slcInvalidations(80) cannot add 1 element to context";
          goto LABEL_161;
        case 81:
          if (AddMultipleFieldsToGenericContext(a1, "slcGCInvalidations", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: slcGCInvalidations(81) cannot add 1 element to context";
          goto LABEL_161;
        case 82:
          if (AddMultipleFieldsToGenericContext(a1, "hostSectorsDuringGCon", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: hostSectorsDuringGCon(82) cannot add 1 element to context";
          goto LABEL_161;
        case 83:
          if (AddMultipleFieldsToGenericContext(a1, "highWaterMarkSLCUsed", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: highWaterMarkSLCUsed(83) cannot add 1 element to context";
          goto LABEL_161;
        case 84:
          if (AddMultipleFieldsToGenericContext(a1, "intermediateBandErases", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: intermediateBandErases(84) cannot add 1 element to context";
          goto LABEL_161;
        case 85:
          if (AddMultipleFieldsToGenericContext(a1, "intermediatePartitionStart", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: intermediatePartitionStart(85) cannot add 1 element to context";
          goto LABEL_161;
        case 86:
          if (AddMultipleFieldsToGenericContext(a1, "userPartitionStart", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: userPartitionStart(86) cannot add 1 element to context";
          goto LABEL_161;
        case 87:
          if (AddMultipleFieldsToGenericContext(a1, "iolog_lbas", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: iolog_lbas(87) cannot add 1 element to context";
          goto LABEL_161;
        case 88:
          if (v14 != 10) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsAgeBins(88): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "bandsAgeBins_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBins(88): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 89:
          if (v14 != 10) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: intermediateBandsAgeBins(89): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "intermediateBandsAgeBins_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: intermediateBandsAgeBins(89): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 90:
          if (v14 != 160) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: qosPerCmdQ(90): (#160) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA0) {
            unsigned int v18 = 160;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "qosPerCmdQ_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: qosPerCmdQ(90): Cannot add 160 elements to context";
          goto LABEL_2616;
        case 91:
          if (v14 != 10) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: maxQosPerCmdQ(91): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "maxQosPerCmdQ_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: maxQosPerCmdQ(91): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 92:
          if (AddMultipleFieldsToGenericContext(a1, "shutdownDuringGC", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: shutdownDuringGC(92) cannot add 1 element to context";
          goto LABEL_161;
        case 93:
          if (v14 != 3) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: numBandsRefreshedForAgePerTier(93): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 3) {
            unsigned int v18 = 3;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "numBandsRefreshedForAgePerTier_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: numBandsRefreshedForAgePerTier(93): Cannot add 3 elements to context";
          goto LABEL_2616;
        case 94:
          if (v14 != 20) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: bdrDeltaHot(94): (#20) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0x14) {
            unsigned int v18 = 20;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "bdrDeltaHot_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bdrDeltaHot(94): Cannot add 20 elements to context";
          goto LABEL_2616;
        case 95:
          if (AddMultipleFieldsToGenericContext(a1, "numRefreshOnClockLoss", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numRefreshOnClockLoss(95) cannot add 1 element to context";
          goto LABEL_161;
        case 96:
          if (AddMultipleFieldsToGenericContext(a1, "numRefreshOnErrNandRefreshRel", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numRefreshOnErrNandRefreshRel(96) cannot add 1 element to context";
          goto LABEL_161;
        case 97:
          if (AddMultipleFieldsToGenericContext(a1, "numBGRefreshMoves", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numBGRefreshMoves(97) cannot add 1 element to context";
          goto LABEL_161;
        case 98:
          if (AddMultipleFieldsToGenericContext(a1, "numBGPaddingMoves", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numBGPaddingMoves(98) cannot add 1 element to context";
          goto LABEL_161;
        case 99:
          if (AddMultipleFieldsToGenericContext(a1, "hostWritesPhoto", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: hostWritesPhoto(99) cannot add 1 element to context";
          goto LABEL_161;
        case 100:
          if (AddMultipleFieldsToGenericContext(a1, "INDPooldFree", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDPooldFree(100) cannot add 1 element to context";
          goto LABEL_161;
        case 101:
          if (AddMultipleFieldsToGenericContext(a1, "INDContigCount", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDContigCount(101) cannot add 1 element to context";
          goto LABEL_161;
        case 102:
          if (AddMultipleFieldsToGenericContext(a1, "INDValidContigCount", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDValidContigCount(102) cannot add 1 element to context";
          goto LABEL_161;
        case 103:
          if (AddMultipleFieldsToGenericContext(a1, "INDMinContigSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDMinContigSize(103) cannot add 1 element to context";
          goto LABEL_161;
        case 104:
          if (AddMultipleFieldsToGenericContext(a1, "INDMaxContigSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDMaxContigSize(104) cannot add 1 element to context";
          goto LABEL_161;
        case 105:
          if (AddMultipleFieldsToGenericContext(a1, "INDAveContigSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDAveContigSize(105) cannot add 1 element to context";
          goto LABEL_161;
        case 106:
          if (AddMultipleFieldsToGenericContext(a1, "INDpoolSize", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: INDpoolSize(106) cannot add 1 element to context";
          goto LABEL_161;
        case 107:
          if (AddMultipleFieldsToGenericContext(a1, "pushSyncWrites", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: pushSyncWrites(107) cannot add 1 element to context";
          goto LABEL_161;
        case 109:
          if (AddMultipleFieldsToGenericContext(a1, "cmd_rw_hysteresis_us", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: cmd_rw_hysteresis_us(109) cannot add 1 element to context";
          goto LABEL_161;
        case 110:
          if (AddMultipleFieldsToGenericContext(a1, "photoFlowMode", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: photoFlowMode(110) cannot add 1 element to context";
          goto LABEL_161;
        case 112:
          if (AddMultipleFieldsToGenericContext(a1, "numBandsPaddedForAge", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numBandsPaddedForAge(112) cannot add 1 element to context";
          goto LABEL_161;
        case 113:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsPerHostFlow(113): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "bandsPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bandsPerHostFlow(113): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 114:
          if (v14 != 5) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsPerSpecialFlow(114): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "bandsPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: bandsPerSpecialFlow(114): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 115:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: secsPerHostFlow(115): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "secsPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: secsPerHostFlow(115): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 116:
          if (v14 != 5) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: secsPerSpecialFlow(116): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "secsPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: secsPerSpecialFlow(116): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 118:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: overWritesPerHostFlow(118): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "overWritesPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: overWritesPerHostFlow(118): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 119:
          if (v14 != 5) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: overWritesPerSpecialFlow(119): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "overWritesPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: overWritesPerSpecialFlow(119): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 120:
          if (v14 != 10) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: padSectorsPerFlow(120): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 0xA) {
            unsigned int v18 = 10;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "padSectorsPerFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: padSectorsPerFlow(120): Cannot add 10 elements to context";
          goto LABEL_2616;
        case 121:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: padSizes(121): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "padSizes_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: padSizes(121): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 122:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: unmapsPerHostFlow(122): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 4) {
            unsigned int v18 = 4;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "unmapsPerHostFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: unmapsPerHostFlow(122): Cannot add 4 elements to context";
          goto LABEL_2616;
        case 123:
          if (v14 != 5) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: unmapsPerSpecialFlow(123): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 5) {
            unsigned int v18 = 5;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "unmapsPerSpecialFlow_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: unmapsPerSpecialFlow(123): Cannot add 5 elements to context";
          goto LABEL_2616;
        case 124:
          if (v14 != 2) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: coldestCycle(124): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 2) {
            unsigned int v18 = 2;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "coldestCycle_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: coldestCycle(124): Cannot add 2 elements to context";
          goto LABEL_2616;
        case 125:
          if (v14 != 2) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: hottestCycle(125): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 2) {
            unsigned int v18 = 2;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "hottestCycle_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: hottestCycle(125): Cannot add 2 elements to context";
          goto LABEL_2616;
        case 126:
          if (AddMultipleFieldsToGenericContext(a1, "gcLonlyWrites", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcLonlyWrites(126) cannot add 1 element to context";
          goto LABEL_161;
        case 127:
          if (AddMultipleFieldsToGenericContext(a1, "gcPLWrites", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcPLWrites(127) cannot add 1 element to context";
          goto LABEL_161;
        case 129:
          if (AddMultipleFieldsToGenericContext(a1, "pagesPerVirtualBlockSlc", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: pagesPerVirtualBlockSlc(129) cannot add 1 element to context";
          goto LABEL_161;
        case 130:
          if (AddMultipleFieldsToGenericContext(a1, "bdrPadding", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: bdrPadding(130) cannot add 1 element to context";
          goto LABEL_161;
        case 131:
          if (v14 != 8) {
            SetAPIErrorMessage("ASPFTLParseBufferToCxt: errInjCounters(131): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
          }
          if (v14 >= 8) {
            unsigned int v18 = 8;
          }
          else {
            unsigned int v18 = v14;
          }
          if (AddMultipleFieldsToGenericContext(a1, "errInjCounters_", (uint64_t)v8, 8u, v18)) {
            goto LABEL_110;
          }
          unsigned int v19 = "ASPFTLParseBufferToCxt: errInjCounters(131): Cannot add 8 elements to context";
          goto LABEL_2616;
        case 132:
          if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulReconstructionInternal(132) cannot add 1 element to context";
          goto LABEL_161;
        case 133:
          if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulReconstructionHost", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulReconstructionHost(133) cannot add 1 element to context";
          goto LABEL_161;
        case 134:
          if (AddMultipleFieldsToGenericContext(a1, "raidFailedReconstructionInternal", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidFailedReconstructionInternal(134) cannot add 1 element to context";
          goto LABEL_161;
        case 135:
          if (AddMultipleFieldsToGenericContext(a1, "raidFailedReconstructionHost", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidFailedReconstructionHost(135) cannot add 1 element to context";
          goto LABEL_161;
        case 136:
          if (AddMultipleFieldsToGenericContext(a1, "raidBandsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidBandsPerHostFlow(136) cannot add 1 element to context";
          goto LABEL_161;
        case 137:
          if (AddMultipleFieldsToGenericContext(a1, "raidSecsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: raidSecsPerHostFlow(137) cannot add 1 element to context";
          goto LABEL_161;
        case 138:
          if (AddMultipleFieldsToGenericContext(a1, "gcFreeL", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcFreeL(138) cannot add 1 element to context";
          goto LABEL_161;
        case 139:
          if (AddMultipleFieldsToGenericContext(a1, "gcDestinations", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcDestinations(139) cannot add 1 element to context";
          goto LABEL_161;
        case 140:
          if (AddMultipleFieldsToGenericContext(a1, "gcFragments", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: gcFragments(140) cannot add 1 element to context";
          goto LABEL_161;
        case 141:
          if (AddMultipleFieldsToGenericContext(a1, "numMemChoke", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: numMemChoke(141) cannot add 1 element to context";
          goto LABEL_161;
        case 142:
          if (AddMultipleFieldsToGenericContext(a1, "maxMemChokeDuration", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: maxMemChokeDuration(142) cannot add 1 element to context";
          goto LABEL_161;
        case 143:
          if (AddMultipleFieldsToGenericContext(a1, "memChokeDuration", (uint64_t)v8, 8u, 1u)) {
            goto LABEL_162;
          }
          int v17 = "ASPFTLParseBufferToCxt: memChokeDuration(143) cannot add 1 element to context";
          goto LABEL_161;
        default:
          switch(v12)
          {
            case 144:
              if (AddMultipleFieldsToGenericContext(a1, "numMemExtreme", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numMemExtreme(144) cannot add 1 element to context";
              goto LABEL_161;
            case 145:
              if (AddMultipleFieldsToGenericContext(a1, "maxMemExtremeDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: maxMemExtremeDuration(145) cannot add 1 element to context";
              goto LABEL_161;
            case 146:
              if (AddMultipleFieldsToGenericContext(a1, "memExtremeDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: memExtremeDuration(146) cannot add 1 element to context";
              goto LABEL_161;
            case 147:
              if (AddMultipleFieldsToGenericContext(a1, "bandGetsExtreme", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bandGetsExtreme(147) cannot add 1 element to context";
              goto LABEL_161;
            case 148:
              if (AddMultipleFieldsToGenericContext(a1, "bandGetsLow", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bandGetsLow(148) cannot add 1 element to context";
              goto LABEL_161;
            case 149:
              if (AddMultipleFieldsToGenericContext(a1, "numHostChoke", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numHostChoke(149) cannot add 1 element to context";
              goto LABEL_161;
            case 152:
              if (AddMultipleFieldsToGenericContext(a1, "AbortSkip_ProgramError", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_ProgramError(152) cannot add 1 element to context";
              goto LABEL_161;
            case 153:
              if (AddMultipleFieldsToGenericContext(a1, "AbortSkip_ReadErrorOpenBand", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_ReadErrorOpenBand(153) cannot add 1 element to context";
              goto LABEL_161;
            case 154:
              if (AddMultipleFieldsToGenericContext(a1, "AbortSkip_FailedRebuildingParity", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_FailedRebuildingParity(154) cannot add 1 element to context";
              goto LABEL_161;
            case 155:
              if (AddMultipleFieldsToGenericContext(a1, "AbortPad_OpenRefreshBand", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_OpenRefreshBand(155) cannot add 1 element to context";
              goto LABEL_161;
            case 156:
              if (AddMultipleFieldsToGenericContext(a1, "AbortPad_CloseBands", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_CloseBands(156) cannot add 1 element to context";
              goto LABEL_161;
            case 157:
              if (AddMultipleFieldsToGenericContext(a1, "AbortPad_SetPhoto", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_SetPhoto(157) cannot add 1 element to context";
              goto LABEL_161;
            case 158:
              if (AddMultipleFieldsToGenericContext(a1, "AbortPad_GcNoSource", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_GcNoSource(158) cannot add 1 element to context";
              goto LABEL_161;
            case 159:
              if (AddMultipleFieldsToGenericContext(a1, "AbortPad_Format", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: AbortPad_Format(159) cannot add 1 element to context";
              goto LABEL_161;
            case 160:
              if (AddMultipleFieldsToGenericContext(a1, "nandDiscoveryDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: nandDiscoveryDuration(160) cannot add 1 element to context";
              goto LABEL_161;
            case 161:
              if (AddMultipleFieldsToGenericContext(a1, "coreCCEnableDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreCCEnableDuration(161) cannot add 1 element to context";
              goto LABEL_161;
            case 163:
              if (AddMultipleFieldsToGenericContext(a1, "coreOpenDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreOpenDuration(163) cannot add 1 element to context";
              goto LABEL_161;
            case 164:
              if (AddMultipleFieldsToGenericContext(a1, "coreWritableDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreWritableDuration(164) cannot add 1 element to context";
              goto LABEL_161;
            case 165:
              if (AddMultipleFieldsToGenericContext(a1, "coreClogLoadDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: coreClogLoadDuration(165) cannot add 1 element to context";
              goto LABEL_161;
            case 167:
              if (AddMultipleFieldsToGenericContext(a1, "bulkPFail", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bulkPFail(167) cannot add 1 element to context";
              goto LABEL_161;
            case 169:
              if (AddMultipleFieldsToGenericContext(a1, "bulkRFail", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: bulkRFail(169) cannot add 1 element to context";
              goto LABEL_161;
            case 172:
              if (AddMultipleFieldsToGenericContext(a1, "raidSmartErrors", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: raidSmartErrors(172) cannot add 1 element to context";
              goto LABEL_161;
            case 182:
              if (AddMultipleFieldsToGenericContext(a1, "internalUeccs", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: internalUeccs(182) cannot add 1 element to context";
              goto LABEL_161;
            case 183:
              if (AddMultipleFieldsToGenericContext(a1, "e2eFail", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: e2eFail(183) cannot add 1 element to context";
              goto LABEL_161;
            case 184:
              if (AddMultipleFieldsToGenericContext(a1, "TempSensorMax", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: TempSensorMax(184) cannot add 1 element to context";
              goto LABEL_161;
            case 185:
              if (AddMultipleFieldsToGenericContext(a1, "TempSensorMin", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: TempSensorMin(185) cannot add 1 element to context";
              goto LABEL_161;
            case 186:
              if (AddMultipleFieldsToGenericContext(a1, "powerUpFromDDR", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: powerUpFromDDR(186) cannot add 1 element to context";
              goto LABEL_161;
            case 187:
              if (AddMultipleFieldsToGenericContext(a1, "numMemLow", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numMemLow(187) cannot add 1 element to context";
              goto LABEL_161;
            case 188:
              if (AddMultipleFieldsToGenericContext(a1, "maxMemLowDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: maxMemLowDuration(188) cannot add 1 element to context";
              goto LABEL_161;
            case 189:
              if (AddMultipleFieldsToGenericContext(a1, "memLowDuration", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: memLowDuration(189) cannot add 1 element to context";
              goto LABEL_161;
            case 190:
              if (AddMultipleFieldsToGenericContext(a1, "numFences", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numFences(190) cannot add 1 element to context";
              goto LABEL_161;
            case 191:
              if (AddMultipleFieldsToGenericContext(a1, "hostPassiveIO", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: hostPassiveIO(191) cannot add 1 element to context";
              goto LABEL_161;
            case 192:
              if (AddMultipleFieldsToGenericContext(a1, "odtsMax", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: odtsMax(192) cannot add 1 element to context";
              goto LABEL_161;
            case 193:
              if (AddMultipleFieldsToGenericContext(a1, "defragMFromOrphans", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMFromOrphans(193) cannot add 1 element to context";
              goto LABEL_161;
            case 194:
              if (AddMultipleFieldsToGenericContext(a1, "defragMFromFragments", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMFromFragments(194) cannot add 1 element to context";
              goto LABEL_161;
            case 195:
              if (AddMultipleFieldsToGenericContext(a1, "defragMTime", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMTime(195) cannot add 1 element to context";
              goto LABEL_161;
            case 196:
              if (AddMultipleFieldsToGenericContext(a1, "defragMMaxTime", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: defragMMaxTime(196) cannot add 1 element to context";
              goto LABEL_161;
            case 197:
              if (AddMultipleFieldsToGenericContext(a1, "raidFailedLbaMismatch", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: raidFailedLbaMismatch(197) cannot add 1 element to context";
              goto LABEL_161;
            case 198:
              if (AddMultipleFieldsToGenericContext(a1, "numSyscfgWrites", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numSyscfgWrites(198) cannot add 1 element to context";
              goto LABEL_161;
            case 199:
              if (AddMultipleFieldsToGenericContext(a1, "indmbUnitsXfer", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: indmbUnitsXfer(199) cannot add 1 element to context";
              goto LABEL_161;
            case 200:
              if (AddMultipleFieldsToGenericContext(a1, "indmbUnitsCache", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: indmbUnitsCache(200) cannot add 1 element to context";
              goto LABEL_161;
            case 201:
              if (AddMultipleFieldsToGenericContext(a1, "indmbUnitsInd", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: indmbUnitsInd(201) cannot add 1 element to context";
              goto LABEL_161;
            case 202:
              if (AddMultipleFieldsToGenericContext(a1, "wcacheFS_Mbytes", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_Mbytes(202) cannot add 1 element to context";
              goto LABEL_161;
            case 203:
              if (AddMultipleFieldsToGenericContext(a1, "wcacheDS_Mbytes", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheDS_Mbytes(203) cannot add 1 element to context";
              goto LABEL_161;
            case 204:
              if (AddMultipleFieldsToGenericContext(a1, "powerOnSeconds", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: powerOnSeconds(204) cannot add 1 element to context";
              goto LABEL_161;
            case 205:
              if (AddMultipleFieldsToGenericContext(a1, "numUnknownTokenHostRead", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numUnknownTokenHostRead(205) cannot add 1 element to context";
              goto LABEL_161;
            case 206:
              if (AddMultipleFieldsToGenericContext(a1, "numUnmmapedTokenHostRead", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: numUnmmapedTokenHostRead(206) cannot add 1 element to context";
              goto LABEL_161;
            case 207:
              if (v14 != 16) {
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerLevel(207): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              }
              if (v14 >= 0x10) {
                unsigned int v18 = 16;
              }
              else {
                unsigned int v18 = v14;
              }
              if (AddMultipleFieldsToGenericContext(a1, "numOfThrottlingEntriesPerLevel_", (uint64_t)v8, 8u, v18)) {
                goto LABEL_110;
              }
              unsigned int v19 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerLevel(207): Cannot add 16 elements to context";
              goto LABEL_2616;
            case 208:
              if (AddMultipleFieldsToGenericContext(a1, "wcacheFS_MbytesMin", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesMin(208) cannot add 1 element to context";
              goto LABEL_161;
            case 209:
              if (AddMultipleFieldsToGenericContext(a1, "wcacheFS_MbytesMax", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesMax(209) cannot add 1 element to context";
              goto LABEL_161;
            case 210:
              if (AddMultipleFieldsToGenericContext(a1, "prepareForShutdownFailCounter", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: prepareForShutdownFailCounter(210) cannot add 1 element to context";
              goto LABEL_161;
            case 211:
              if (AddMultipleFieldsToGenericContext(a1, "lpsrEntry", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: lpsrEntry(211) cannot add 1 element to context";
              goto LABEL_161;
            case 212:
              if (AddMultipleFieldsToGenericContext(a1, "lpsrExit", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: lpsrExit(212) cannot add 1 element to context";
              goto LABEL_161;
            case 213:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: crcInternalReadFail(213): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              }
              if (v14 >= 8) {
                unsigned int v18 = 8;
              }
              else {
                unsigned int v18 = v14;
              }
              if (AddMultipleFieldsToGenericContext(a1, "crcInternalReadFail_", (uint64_t)v8, 8u, v18)) {
                goto LABEL_110;
              }
              unsigned int v19 = "ASPFTLParseBufferToCxt: crcInternalReadFail(213): Cannot add 8 elements to context";
              goto LABEL_2616;
            case 214:
              if (AddMultipleFieldsToGenericContext(a1, "wcacheFSEvictCnt", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFSEvictCnt(214) cannot add 1 element to context";
              goto LABEL_161;
            case 215:
              if (AddMultipleFieldsToGenericContext(a1, "wcacheFSEvictSize", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFSEvictSize(215) cannot add 1 element to context";
              goto LABEL_161;
            case 216:
              if (AddMultipleFieldsToGenericContext(a1, "wcacheFSWr", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheFSWr(216) cannot add 1 element to context";
              goto LABEL_161;
            case 217:
              if (AddMultipleFieldsToGenericContext(a1, "wcacheDSWr", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: wcacheDSWr(217) cannot add 1 element to context";
              goto LABEL_161;
            case 218:
              if (v14 != 10) {
                SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheFSEvictSizeLogDist(218): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
              }
              if (v14 >= 0xA) {
                unsigned int v18 = 10;
              }
              else {
                unsigned int v18 = v14;
              }
              if (AddMultipleFieldsToGenericContext(a1, "wcacheFSEvictSizeLogDist_", (uint64_t)v8, 8u, v18)) {
                goto LABEL_110;
              }
              unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheFSEvictSizeLogDist(218): Cannot add 10 elements to context";
              goto LABEL_2616;
            case 219:
              if (AddMultipleFieldsToGenericContext(a1, "prepareForShutdownTimeoutCounter", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: prepareForShutdownTimeoutCounter(219) cannot add 1 element to context";
              goto LABEL_161;
            case 220:
              if (AddMultipleFieldsToGenericContext(a1, "prepareForShutdownCancelCounter", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: prepareForShutdownCancelCounter(220) cannot add 1 element to context";
              goto LABEL_161;
            case 221:
              if (AddMultipleFieldsToGenericContext(a1, "RD_openBandCount", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: RD_openBandCount(221) cannot add 1 element to context";
              goto LABEL_161;
            case 222:
              if (AddMultipleFieldsToGenericContext(a1, "RD_openBandNops", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: RD_openBandNops(222) cannot add 1 element to context";
              goto LABEL_161;
            case 223:
              if (AddMultipleFieldsToGenericContext(a1, "RD_closedBandEvictCount", (uint64_t)v8, 8u, 1u)) {
                goto LABEL_162;
              }
              int v17 = "ASPFTLParseBufferToCxt: RD_closedBandEvictCount(223) cannot add 1 element to context";
              goto LABEL_161;
            default:
              switch(v12)
              {
                case 224:
                  if (AddMultipleFieldsToGenericContext(a1, "RD_closedBandEvictSectors", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RD_closedBandEvictSectors(224) cannot add 1 element to context";
                  goto LABEL_161;
                case 225:
                  if (AddMultipleFieldsToGenericContext(a1, "RD_closedBandFragmentCount", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RD_closedBandFragmentCount(225) cannot add 1 element to context";
                  goto LABEL_161;
                case 226:
                  if (AddMultipleFieldsToGenericContext(a1, "RD_closedBandFragmentSectors", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RD_closedBandFragmentSectors(226) cannot add 1 element to context";
                  goto LABEL_161;
                case 227:
                  if (v14 != 10) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheFSOverWrLogSizeCnts(227): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0xA) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "wcacheFSOverWrLogSizeCnts_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheFSOverWrLogSizeCnts(227): Cannot add 10 elements to context";
                  goto LABEL_2616;
                case 228:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheFSOverWrSizeByFlow(228): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "wcacheFSOverWrSizeByFlow_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheFSOverWrSizeByFlow(228): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 229:
                  if (v14 != 2) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: indmbXferCountTo(229): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 2) {
                    unsigned int v18 = 2;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "indmbXferCountTo_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: indmbXferCountTo(229): Cannot add 2 elements to context";
                  goto LABEL_2616;
                case 230:
                  if (v14 != 2) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: indmbAccumulatedTimeBetweenXfers(230): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 2) {
                    unsigned int v18 = 2;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "indmbAccumulatedTimeBetweenXfers_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: indmbAccumulatedTimeBetweenXfers(230): Cannot add 2 elements to context";
                  goto LABEL_2616;
                case 231:
                  if (AddMultipleFieldsToGenericContext(a1, "maxGracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: maxGracefulBootTimeMs(231) cannot add 1 element to context";
                  goto LABEL_161;
                case 232:
                  if (AddMultipleFieldsToGenericContext(a1, "maxUngracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: maxUngracefulBootTimeMs(232) cannot add 1 element to context";
                  goto LABEL_161;
                case 233:
                  if (AddMultipleFieldsToGenericContext(a1, "averageGracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: averageGracefulBootTimeMs(233) cannot add 1 element to context";
                  goto LABEL_161;
                case 234:
                  if (AddMultipleFieldsToGenericContext(a1, "averageUngracefulBootTimeMs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: averageUngracefulBootTimeMs(234) cannot add 1 element to context";
                  goto LABEL_161;
                case 235:
                  if (v14 != 8) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: gracefulBootTimeLogMs(235): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "gracefulBootTimeLogMs_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: gracefulBootTimeLogMs(235): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 236:
                  if (v14 != 8) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: ungracefulBootTimeLogMs(236): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "ungracefulBootTimeLogMs_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: ungracefulBootTimeLogMs(236): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 237:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: CalibrationCount(237): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "CalibrationCount_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: CalibrationCount(237): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 238:
                  if (AddMultipleFieldsToGenericContext(a1, "CalibrationLastTmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: CalibrationLastTmp(238) cannot add 1 element to context";
                  goto LABEL_161;
                case 239:
                  if (AddMultipleFieldsToGenericContext(a1, "CalibrationMaxTmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: CalibrationMaxTmp(239) cannot add 1 element to context";
                  goto LABEL_161;
                case 240:
                  if (AddMultipleFieldsToGenericContext(a1, "CalibrationMinTmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: CalibrationMinTmp(240) cannot add 1 element to context";
                  goto LABEL_161;
                case 241:
                  if (AddMultipleFieldsToGenericContext(a1, "ungracefulBootWorstIndicator", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: ungracefulBootWorstIndicator(241) cannot add 1 element to context";
                  goto LABEL_161;
                case 242:
                  if (AddMultipleFieldsToGenericContext(a1, "metaMismatchReread", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: metaMismatchReread(242) cannot add 1 element to context";
                  goto LABEL_161;
                case 243:
                  if (AddMultipleFieldsToGenericContext(a1, "numS3SleepOps", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: numS3SleepOps(243) cannot add 1 element to context";
                  goto LABEL_161;
                case 244:
                  if (AddMultipleFieldsToGenericContext(a1, "odtsCurrent", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: odtsCurrent(244) cannot add 1 element to context";
                  goto LABEL_161;
                case 245:
                  if (AddMultipleFieldsToGenericContext(a1, "prefetchReads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: prefetchReads(245) cannot add 1 element to context";
                  goto LABEL_161;
                case 246:
                  if (AddMultipleFieldsToGenericContext(a1, "prefetchHits", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: prefetchHits(246) cannot add 1 element to context";
                  goto LABEL_161;
                case 247:
                  if (AddMultipleFieldsToGenericContext(a1, "prefetchWritesInvalidation", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: prefetchWritesInvalidation(247) cannot add 1 element to context";
                  goto LABEL_161;
                case 248:
                  if (AddMultipleFieldsToGenericContext(a1, "indmbUnitsTotal", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: indmbUnitsTotal(248) cannot add 1 element to context";
                  goto LABEL_161;
                case 249:
                  if (AddMultipleFieldsToGenericContext(a1, "selfThrottlingEngage", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: selfThrottlingEngage(249) cannot add 1 element to context";
                  goto LABEL_161;
                case 250:
                  if (AddMultipleFieldsToGenericContext(a1, "selfThrottlingDisengage", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: selfThrottlingDisengage(250) cannot add 1 element to context";
                  goto LABEL_161;
                case 252:
                  if (AddMultipleFieldsToGenericContext(a1, "AbortSkip_WlpMode", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: AbortSkip_WlpMode(252) cannot add 1 element to context";
                  goto LABEL_161;
                case 253:
                  if (AddMultipleFieldsToGenericContext(a1, "hostWritesWlpMode", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: hostWritesWlpMode(253) cannot add 1 element to context";
                  goto LABEL_161;
                case 254:
                  if (AddMultipleFieldsToGenericContext(a1, "numClogDoubleUnc", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: numClogDoubleUnc(254) cannot add 1 element to context";
                  goto LABEL_161;
                case 256:
                  if (AddMultipleFieldsToGenericContext(a1, "AbortPad_WlpMode", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: AbortPad_WlpMode(256) cannot add 1 element to context";
                  goto LABEL_161;
                case 257:
                  if (AddMultipleFieldsToGenericContext(a1, "bonfireIntermediateBandErases", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireIntermediateBandErases(257) cannot add 1 element to context";
                  goto LABEL_161;
                case 258:
                  if (AddMultipleFieldsToGenericContext(a1, "bonfireUserBandErases", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireUserBandErases(258) cannot add 1 element to context";
                  goto LABEL_161;
                case 259:
                  if (AddMultipleFieldsToGenericContext(a1, "bonfireIntermediateBandProgs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireIntermediateBandProgs(259) cannot add 1 element to context";
                  goto LABEL_161;
                case 260:
                  if (AddMultipleFieldsToGenericContext(a1, "bonfireUserBandProgs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireUserBandProgs(260) cannot add 1 element to context";
                  goto LABEL_161;
                case 261:
                  if (AddMultipleFieldsToGenericContext(a1, "bonfireIntermediatePageReads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireIntermediatePageReads(261) cannot add 1 element to context";
                  goto LABEL_161;
                case 262:
                  if (AddMultipleFieldsToGenericContext(a1, "bonfireUserPageReads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bonfireUserPageReads(262) cannot add 1 element to context";
                  goto LABEL_161;
                case 263:
                  if (AddMultipleFieldsToGenericContext(a1, "refreshUtil00", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: refreshUtil00(263) cannot add 1 element to context";
                  goto LABEL_161;
                case 264:
                  if (AddMultipleFieldsToGenericContext(a1, "failToReadUtil00", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: failToReadUtil00(264) cannot add 1 element to context";
                  goto LABEL_161;
                case 265:
                  if (v14 != 5) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: readCountHisto(265): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 5) {
                    unsigned int v18 = 5;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "readCountHisto_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: readCountHisto(265): Cannot add 5 elements to context";
                  goto LABEL_2616;
                case 266:
                  if (v14 != 16) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: readAmpHisto(266): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x10) {
                    unsigned int v18 = 16;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "readAmpHisto_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: readAmpHisto(266): Cannot add 16 elements to context";
                  goto LABEL_2616;
                case 267:
                  if (AddMultipleFieldsToGenericContext(a1, "totalReadAmp", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: totalReadAmp(267) cannot add 1 element to context";
                  goto LABEL_161;
                case 268:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: nvmeModeSelect(268): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "nvmeModeSelect_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: nvmeModeSelect(268): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 269:
                  if (v14 != 8) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: numBootBlockRefreshSuccess(269): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "numBootBlockRefreshSuccess_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockRefreshSuccess(269): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 270:
                  if (v14 != 8) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: numBootBlockRefreshFail(270): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 8) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "numBootBlockRefreshFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockRefreshFail(270): Cannot add 8 elements to context";
                  goto LABEL_2616;
                case 271:
                  if (AddMultipleFieldsToGenericContext(a1, "numUnsupportedAsi", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: numUnsupportedAsi(271) cannot add 1 element to context";
                  goto LABEL_161;
                case 272:
                  if (AddMultipleFieldsToGenericContext(a1, "NumTerminatedProgramSegs", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: NumTerminatedProgramSegs(272) cannot add 1 element to context";
                  goto LABEL_161;
                case 273:
                  if (AddMultipleFieldsToGenericContext(a1, "indParityPagesDrops", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: indParityPagesDrops(273) cannot add 1 element to context";
                  goto LABEL_161;
                case 274:
                  if (AddMultipleFieldsToGenericContext(a1, "indFlowPrograms", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: indFlowPrograms(274) cannot add 1 element to context";
                  goto LABEL_161;
                case 277:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: powerBudgetSelect(277): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 4) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "powerBudgetSelect_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: powerBudgetSelect(277): Cannot add 4 elements to context";
                  goto LABEL_2616;
                case 279:
                  if (AddMultipleFieldsToGenericContext(a1, "RxBurnNandWrites", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: RxBurnNandWrites(279) cannot add 1 element to context";
                  goto LABEL_161;
                case 280:
                  if (v14 != 12) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: E2EDPErrorCounters(280): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0xC) {
                    unsigned int v18 = 12;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "E2EDPErrorCounters_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: E2EDPErrorCounters(280): Cannot add 12 elements to context";
                  goto LABEL_2616;
                case 281:
                  if (AddMultipleFieldsToGenericContext(a1, "wcacheSectorsMax", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsMax(281) cannot add 1 element to context";
                  goto LABEL_161;
                case 282:
                  if (AddMultipleFieldsToGenericContext(a1, "wcacheSectorsMin", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsMin(282) cannot add 1 element to context";
                  goto LABEL_161;
                case 283:
                  if (AddMultipleFieldsToGenericContext(a1, "wcacheSectorsCur", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsCur(283) cannot add 1 element to context";
                  goto LABEL_161;
                case 284:
                  if (AddMultipleFieldsToGenericContext(a1, "wcacheDS_SectorsMax", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsMax(284) cannot add 1 element to context";
                  goto LABEL_161;
                case 285:
                  if (AddMultipleFieldsToGenericContext(a1, "wcacheDS_SectorsMin", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsMin(285) cannot add 1 element to context";
                  goto LABEL_161;
                case 286:
                  if (AddMultipleFieldsToGenericContext(a1, "wcacheDS_SectorsCur", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsCur(286) cannot add 1 element to context";
                  goto LABEL_161;
                case 287:
                  if (AddMultipleFieldsToGenericContext(a1, "wcacheFS_Reads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheFS_Reads(287) cannot add 1 element to context";
                  goto LABEL_161;
                case 288:
                  if (AddMultipleFieldsToGenericContext(a1, "wcacheDS_Reads", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: wcacheDS_Reads(288) cannot add 1 element to context";
                  goto LABEL_161;
                case 289:
                  if (v14 != 32) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: mspBootBlockReadFail(289): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x20) {
                    unsigned int v18 = 32;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "mspBootBlockReadFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockReadFail(289): Cannot add 32 elements to context";
                  goto LABEL_2616;
                case 290:
                  if (v14 != 32) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: mspBootBlockProgFail(290): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x20) {
                    unsigned int v18 = 32;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "mspBootBlockProgFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockProgFail(290): Cannot add 32 elements to context";
                  goto LABEL_2616;
                case 291:
                  if (v14 != 32) {
                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: mspBootBlockEraseFail(291): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                  }
                  if (v14 >= 0x20) {
                    unsigned int v18 = 32;
                  }
                  else {
                    unsigned int v18 = v14;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "mspBootBlockEraseFail_", (uint64_t)v8, 8u, v18)) {
                    goto LABEL_110;
                  }
                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockEraseFail(291): Cannot add 32 elements to context";
                  goto LABEL_2616;
                case 292:
                  if (AddMultipleFieldsToGenericContext(a1, "bandsRefreshedOnError", (uint64_t)v8, 8u, 1u)) {
                    goto LABEL_162;
                  }
                  int v17 = "ASPFTLParseBufferToCxt: bandsRefreshedOnError(292) cannot add 1 element to context";
                  goto LABEL_161;
                default:
                  switch(v12)
                  {
                    case 298:
                      if (v14 != 2) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostReads(298): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "perHostReads_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostReads(298): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 299:
                      if (v14 != 2) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostReadXacts(299): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "perHostReadXacts_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostReadXacts(299): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 300:
                      if (v14 != 2) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostWrites(300): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "perHostWrites_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostWrites(300): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 301:
                      if (v14 != 2) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostWriteXacts(301): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "perHostWriteXacts_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostWriteXacts(301): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 302:
                      if (v14 != 2) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostNumFlushes(302): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "perHostNumFlushes_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostNumFlushes(302): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 303:
                      if (v14 != 2) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: perHostNumFences(303): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 2) {
                        unsigned int v18 = 2;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "perHostNumFences_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: perHostNumFences(303): Cannot add 2 elements to context";
                      goto LABEL_2616;
                    case 304:
                      if (v14 != 10) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: commitPadSectorsPerFlow(304): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "commitPadSectorsPerFlow_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: commitPadSectorsPerFlow(304): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 305:
                      if (v14 != 10) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheDSOverWrLogSizeCnts(305): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "wcacheDSOverWrLogSizeCnts_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDSOverWrLogSizeCnts(305): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 306:
                      if (v14 != 4) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheDSOverWrSizeByFlow(306): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 4) {
                        unsigned int v18 = 4;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "wcacheDSOverWrSizeByFlow_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDSOverWrSizeByFlow(306): Cannot add 4 elements to context";
                      goto LABEL_2616;
                    case 307:
                      if (v14 != 10) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: CmdRaisePrioiryEvents(307): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "CmdRaisePrioiryEvents_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: CmdRaisePrioiryEvents(307): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 308:
                      if (AddMultipleFieldsToGenericContext(a1, "utilNumVerification", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilNumVerification(308) cannot add 1 element to context";
                      goto LABEL_161;
                    case 309:
                      if (AddMultipleFieldsToGenericContext(a1, "utilRefreshes", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilRefreshes(309) cannot add 1 element to context";
                      goto LABEL_161;
                    case 310:
                      if (AddMultipleFieldsToGenericContext(a1, "utilBDRErrors", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilBDRErrors(310) cannot add 1 element to context";
                      goto LABEL_161;
                    case 311:
                      if (AddMultipleFieldsToGenericContext(a1, "indBandsPerFlow", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indBandsPerFlow(311) cannot add 1 element to context";
                      goto LABEL_161;
                    case 312:
                      if (AddMultipleFieldsToGenericContext(a1, "secsPerIndFlow", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: secsPerIndFlow(312) cannot add 1 element to context";
                      goto LABEL_161;
                    case 313:
                      if (AddMultipleFieldsToGenericContext(a1, "indDecodedECC", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indDecodedECC(313) cannot add 1 element to context";
                      goto LABEL_161;
                    case 314:
                      if (v14 != 8) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: numBootBlockValidateSuccess(314): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 8) {
                        unsigned int v18 = 8;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "numBootBlockValidateSuccess_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockValidateSuccess(314): Cannot add 8 elements to context";
                      goto LABEL_2616;
                    case 315:
                      if (v14 != 8) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: numBootBlockValidateFail(315): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 8) {
                        unsigned int v18 = 8;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "numBootBlockValidateFail_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: numBootBlockValidateFail(315): Cannot add 8 elements to context";
                      goto LABEL_2616;
                    case 316:
                      if (v14 != 4) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: clogPagesFillingPercentage(316): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 4) {
                        unsigned int v18 = 4;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "clogPagesFillingPercentage_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: clogPagesFillingPercentage(316): Cannot add 4 elements to context";
                      goto LABEL_2616;
                    case 317:
                      if (AddMultipleFieldsToGenericContext(a1, "bdrCalTimeAccFactor", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bdrCalTimeAccFactor(317) cannot add 1 element to context";
                      goto LABEL_161;
                    case 318:
                      if (AddMultipleFieldsToGenericContext(a1, "bootChainRdError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainRdError(318) cannot add 1 element to context";
                      goto LABEL_161;
                    case 319:
                      if (AddMultipleFieldsToGenericContext(a1, "bootChainBlankError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainBlankError(319) cannot add 1 element to context";
                      goto LABEL_161;
                    case 320:
                      if (AddMultipleFieldsToGenericContext(a1, "bootChainRefreshError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainRefreshError(320) cannot add 1 element to context";
                      goto LABEL_161;
                    case 321:
                      if (AddMultipleFieldsToGenericContext(a1, "bootChainVersionError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: bootChainVersionError(321) cannot add 1 element to context";
                      goto LABEL_161;
                    case 322:
                      if (AddMultipleFieldsToGenericContext(a1, "mspBootBlockMismatch", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: mspBootBlockMismatch(322) cannot add 1 element to context";
                      goto LABEL_161;
                    case 323:
                      if (AddMultipleFieldsToGenericContext(a1, "mspBootBlockMismatchErr", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: mspBootBlockMismatchErr(323) cannot add 1 element to context";
                      goto LABEL_161;
                    case 324:
                      if (v14 != 5) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: bitflipAddr(324): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 5) {
                        unsigned int v18 = 5;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "bitflipAddr_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bitflipAddr(324): Cannot add 5 elements to context";
                      goto LABEL_2616;
                    case 325:
                      if (v14 != 5) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: bitflipCount(325): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 5) {
                        unsigned int v18 = 5;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "bitflipCount_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bitflipCount(325): Cannot add 5 elements to context";
                      goto LABEL_2616;
                    case 326:
                      if (v14 != 5) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: bitflipDupes(326): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 5) {
                        unsigned int v18 = 5;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "bitflipDupes_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bitflipDupes(326): Cannot add 5 elements to context";
                      goto LABEL_2616;
                    case 327:
                      if (v14 != 30) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsMaxTempHisto(327): (#30) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x1E) {
                        unsigned int v18 = 30;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "bandsMaxTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsMaxTempHisto(327): Cannot add 30 elements to context";
                      goto LABEL_2616;
                    case 328:
                      if (v14 != 30) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsMinTempHisto(328): (#30) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x1E) {
                        unsigned int v18 = 30;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "bandsMinTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsMinTempHisto(328): Cannot add 30 elements to context";
                      goto LABEL_2616;
                    case 329:
                      if (v14 != 30) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsLifeTimeTempHisto(329): (#30) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x1E) {
                        unsigned int v18 = 30;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "bandsLifeTimeTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsLifeTimeTempHisto(329): Cannot add 30 elements to context";
                      goto LABEL_2616;
                    case 330:
                      if (v14 != 22) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsDeltaTempHisto(330): (#22) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x16) {
                        unsigned int v18 = 22;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "bandsDeltaTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsDeltaTempHisto(330): Cannot add 22 elements to context";
                      goto LABEL_2616;
                    case 331:
                      if (v14 != 45) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsCrossTempHisto(331): (#45) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x2D) {
                        unsigned int v18 = 45;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "bandsCrossTempHisto_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsCrossTempHisto(331): Cannot add 45 elements to context";
                      goto LABEL_2616;
                    case 332:
                      if (v14 != 10) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheWaitLogMs(332): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "wcacheWaitLogMs_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheWaitLogMs(332): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 333:
                      if (v14 != 10) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheDS_segsSortedLogSize(333): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0xA) {
                        unsigned int v18 = 10;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "wcacheDS_segsSortedLogSize_", (uint64_t)v8, 8u, v18)) {
                        goto LABEL_110;
                      }
                      unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDS_segsSortedLogSize(333): Cannot add 10 elements to context";
                      goto LABEL_2616;
                    case 334:
                      if (AddMultipleFieldsToGenericContext(a1, "numFirmwareWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numFirmwareWrites(334) cannot add 1 element to context";
                      goto LABEL_161;
                    case 335:
                      if (AddMultipleFieldsToGenericContext(a1, "numBisWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numBisWrites(335) cannot add 1 element to context";
                      goto LABEL_161;
                    case 336:
                      if (AddMultipleFieldsToGenericContext(a1, "numBootChainUpdates", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numBootChainUpdates(336) cannot add 1 element to context";
                      goto LABEL_161;
                    case 337:
                      if (AddMultipleFieldsToGenericContext(a1, "cntCalTimeWentBackWard", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: cntCalTimeWentBackWard(337) cannot add 1 element to context";
                      goto LABEL_161;
                    case 338:
                      if (AddMultipleFieldsToGenericContext(a1, "indBoRecoveries", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indBoRecoveries(338) cannot add 1 element to context";
                      goto LABEL_161;
                    case 340:
                      if (AddMultipleFieldsToGenericContext(a1, "numCrossTempUecc", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numCrossTempUecc(340) cannot add 1 element to context";
                      goto LABEL_161;
                    case 341:
                      if (AddMultipleFieldsToGenericContext(a1, "latencyMonitorError", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: latencyMonitorError(341) cannot add 1 element to context";
                      goto LABEL_161;
                    case 343:
                      if (AddMultipleFieldsToGenericContext(a1, "utilUeccReads", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: utilUeccReads(343) cannot add 1 element to context";
                      goto LABEL_161;
                    case 344:
                      if (AddMultipleFieldsToGenericContext(a1, "numOfAvoidedGCDueToTemp", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: numOfAvoidedGCDueToTemp(344) cannot add 1 element to context";
                      goto LABEL_161;
                    case 345:
                      if (AddMultipleFieldsToGenericContext(a1, "forceShutdowns", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: forceShutdowns(345) cannot add 1 element to context";
                      goto LABEL_161;
                    case 346:
                      if (AddMultipleFieldsToGenericContext(a1, "gcSlcDestinations", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: gcSlcDestinations(346) cannot add 1 element to context";
                      goto LABEL_161;
                    case 347:
                      if (AddMultipleFieldsToGenericContext(a1, "indReplayExtUsed", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: indReplayExtUsed(347) cannot add 1 element to context";
                      goto LABEL_161;
                    case 348:
                      if (AddMultipleFieldsToGenericContext(a1, "defectsPerPackageOverflow", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: defectsPerPackageOverflow(348) cannot add 1 element to context";
                      goto LABEL_161;
                    case 349:
                      if (AddMultipleFieldsToGenericContext(a1, "RxBurnIntBandsProgrammed", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnIntBandsProgrammed(349) cannot add 1 element to context";
                      goto LABEL_161;
                    case 350:
                      if (AddMultipleFieldsToGenericContext(a1, "RxBurnUsrBandsProgrammed", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnUsrBandsProgrammed(350) cannot add 1 element to context";
                      goto LABEL_161;
                    case 351:
                      if (AddMultipleFieldsToGenericContext(a1, "RxBurnIntNandWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnIntNandWrites(351) cannot add 1 element to context";
                      goto LABEL_161;
                    case 352:
                      if (AddMultipleFieldsToGenericContext(a1, "RxBurnUsrNandWrites", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: RxBurnUsrNandWrites(352) cannot add 1 element to context";
                      goto LABEL_161;
                    case 353:
                      if (AddMultipleFieldsToGenericContext(a1, "clogLastStripeUeccs", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: clogLastStripeUeccs(353) cannot add 1 element to context";
                      goto LABEL_161;
                    case 354:
                      if (AddMultipleFieldsToGenericContext(a1, "GC_MidDestSrcSwitchSLC2TLC", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: GC_MidDestSrcSwitchSLC2TLC(354) cannot add 1 element to context";
                      goto LABEL_161;
                    case 355:
                      if (AddMultipleFieldsToGenericContext(a1, "GC_MidDestSrcSwitchTLC2SLC", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: GC_MidDestSrcSwitchTLC2SLC(355) cannot add 1 element to context";
                      goto LABEL_161;
                    case 356:
                      if (AddMultipleFieldsToGenericContext(a1, "nvme_stats_shutdown_count_host0_normal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host0_normal(356) cannot add 1 element to context";
                      }
                      goto LABEL_161;
                    case 357:
                      if (AddMultipleFieldsToGenericContext(a1, "nvme_stats_shutdown_count_host1_normal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host1_normal(357) cannot add 1 element to context";
                      }
                      goto LABEL_161;
                    case 358:
                      if (AddMultipleFieldsToGenericContext(a1, "nvme_stats_shutdown_count_host0_s2r", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host0_s2r(358) cannot add 1 element to context";
                      }
                      goto LABEL_161;
                    case 359:
                      if (AddMultipleFieldsToGenericContext(a1, "nvme_stats_shutdown_count_host1_s2r", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                      int v17 = "ASPFTLParseBufferToCxt: nvme_stats_shutdown_count_host1_s2r(359) cannot add 1 element to context";
                      }
                      goto LABEL_161;
                    case 360:
                      if (v14 != 16) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcPDusterIntrSrcValidityHisto(360): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x10) {
                        unsigned int v18 = 16;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "gcPDusterIntrSrcValidityHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                      unsigned int v19 = "ASPFTLParseBufferToCxt: gcPDusterIntrSrcValidityHisto(360): Cannot add 16 elements to context";
                      }
                      goto LABEL_2616;
                    case 361:
                      if (v14 != 16) {
                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcPDusterUserSrcValidityHisto(361): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                      }
                      if (v14 >= 0x10) {
                        unsigned int v18 = 16;
                      }
                      else {
                        unsigned int v18 = v14;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "gcPDusterUserSrcValidityHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                      unsigned int v19 = "ASPFTLParseBufferToCxt: gcPDusterUserSrcValidityHisto(361): Cannot add 16 elements to context";
                      }
                      goto LABEL_2616;
                    case 362:
                      if (AddMultipleFieldsToGenericContext(a1, "raidFailedReadParity", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: raidFailedReadParity(362) cannot add 1 element to context";
                      goto LABEL_161;
                    case 364:
                      if (AddMultipleFieldsToGenericContext(a1, "lhotNumSkipes", (uint64_t)v8, 8u, 1u)) {
                        goto LABEL_162;
                      }
                      int v17 = "ASPFTLParseBufferToCxt: lhotNumSkipes(364) cannot add 1 element to context";
                      goto LABEL_161;
                    default:
                      switch(v12)
                      {
                        case 365:
                          if (AddMultipleFieldsToGenericContext(a1, "lhotNumIsHotCalls", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: lhotNumIsHotCalls(365) cannot add 1 element to context";
                          goto LABEL_161;
                        case 366:
                          if (AddMultipleFieldsToGenericContext(a1, "lhotFullLap", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: lhotFullLap(366) cannot add 1 element to context";
                          goto LABEL_161;
                        case 367:
                          if (AddMultipleFieldsToGenericContext(a1, "lhotSkipPrecent", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: lhotSkipPrecent(367) cannot add 1 element to context";
                          goto LABEL_161;
                        case 368:
                          if (AddMultipleFieldsToGenericContext(a1, "eraseSuspendEvents", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendEvents(368) cannot add 1 element to context";
                          goto LABEL_161;
                        case 369:
                          if (AddMultipleFieldsToGenericContext(a1, "eraseSuspendedStatuses", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendedStatuses(369) cannot add 1 element to context";
                          goto LABEL_161;
                        case 370:
                          if (AddMultipleFieldsToGenericContext(a1, "eraseSuspendedBands", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendedBands(370) cannot add 1 element to context";
                          goto LABEL_161;
                        case 371:
                          if (AddMultipleFieldsToGenericContext(a1, "eraseSuspendSituationsBelowThreshold", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendSituationsBelowThreshold(371) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 372:
                          if (AddMultipleFieldsToGenericContext(a1, "eraseSuspendSituationsAboveThreshold", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendSituationsAboveThreshold(372) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 373:
                          if (AddMultipleFieldsToGenericContext(a1, "eraseSuspendReadChainsProcessed", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: eraseSuspendReadChainsProcessed(373) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 374:
                          if (AddMultipleFieldsToGenericContext(a1, "bdrLastDoneHr", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: bdrLastDoneHr(374) cannot add 1 element to context";
                          goto LABEL_161;
                        case 375:
                          if (AddMultipleFieldsToGenericContext(a1, "bdrBackupThreshHrs", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: bdrBackupThreshHrs(375) cannot add 1 element to context";
                          goto LABEL_161;
                        case 376:
                          if (AddMultipleFieldsToGenericContext(a1, "clogPortableProgBufs", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: clogPortableProgBufs(376) cannot add 1 element to context";
                          goto LABEL_161;
                        case 377:
                          if (AddMultipleFieldsToGenericContext(a1, "clogPortableDropBufs", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: clogPortableDropBufs(377) cannot add 1 element to context";
                          goto LABEL_161;
                        case 378:
                          if (AddMultipleFieldsToGenericContext(a1, "clogPortablePadSectors", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: clogPortablePadSectors(378) cannot add 1 element to context";
                          goto LABEL_161;
                        case 379:
                          if (AddMultipleFieldsToGenericContext(a1, "numRetiredBlocks", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numRetiredBlocks(379) cannot add 1 element to context";
                          goto LABEL_161;
                        case 381:
                          if (AddMultipleFieldsToGenericContext(a1, "numRefreshOnErrNandRefreshPerf", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: numRefreshOnErrNandRefreshPerf(381) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 382:
                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructReads", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructReads(382) cannot add 1 element to context";
                          goto LABEL_161;
                        case 383:
                          if (AddMultipleFieldsToGenericContext(a1, "gcReadsNoBlog", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: gcReadsNoBlog(383) cannot add 1 element to context";
                          goto LABEL_161;
                        case 384:
                          if (AddMultipleFieldsToGenericContext(a1, "AbortSkip_MPBXReadVerifyClosedBand", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXReadVerifyClosedBand(384) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 385:
                          if (AddMultipleFieldsToGenericContext(a1, "openBandReadFail", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: openBandReadFail(385) cannot add 1 element to context";
                          goto LABEL_161;
                        case 386:
                          if (AddMultipleFieldsToGenericContext(a1, "AbortSkip_MPBXReadVerifyOpenBand", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXReadVerifyOpenBand(386) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 387:
                          if (AddMultipleFieldsToGenericContext(a1, "AbortSkip_MBPXFailedRebuildingParity", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MBPXFailedRebuildingParity(387) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 388:
                          if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulPMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulPMXReconstructionInternal(388) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 389:
                          if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulPMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulPMXReconstructionHost(389) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 390:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedPMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedPMXReconstructionInternal(390) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 391:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedPMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedPMXReconstructionHost(391) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 392:
                          if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulRMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulRMXReconstructionInternal(392) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 393:
                          if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulRMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulRMXReconstructionHost(393) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 394:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedRMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedRMXReconstructionInternal(394) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 395:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedRMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedRMXReconstructionHost(395) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 396:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedReadParityInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadParityInternal(396) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 397:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedReadQParityInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQParityInternal(397) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 398:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedReadQParity", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQParity(398) cannot add 1 element to context";
                          goto LABEL_161;
                        case 399:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedReadQCopy", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQCopy(399) cannot add 1 element to context";
                          goto LABEL_161;
                        case 400:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedReconstructionQParity", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReconstructionQParity(400) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 401:
                          if (AddMultipleFieldsToGenericContext(a1, "offlineBlocksCnt", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: offlineBlocksCnt(401) cannot add 1 element to context";
                          goto LABEL_161;
                        case 402:
                          if (AddMultipleFieldsToGenericContext(a1, "bork0Revectors", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: bork0Revectors(402) cannot add 1 element to context";
                          goto LABEL_161;
                        case 403:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedReadBlog", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadBlog(403) cannot add 1 element to context";
                          goto LABEL_161;
                        case 404:
                          if (AddMultipleFieldsToGenericContext(a1, "numReliabilityRefreshes", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numReliabilityRefreshes(404) cannot add 1 element to context";
                          goto LABEL_161;
                        case 405:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedReadQCopyInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedReadQCopyInternal(405) cannot add 1 element to context";
                          }
                          goto LABEL_161;
                        case 406:
                          if (v14 != 5) {
                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidReconstructSuccessFlow(406): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          }
                          if (v14 >= 5) {
                            unsigned int v18 = 5;
                          }
                          else {
                            unsigned int v18 = v14;
                          }
                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructSuccessFlow_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                          unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructSuccessFlow(406): Cannot add 5 elements to context";
                          }
                          goto LABEL_2616;
                        case 407:
                          if (v14 != 5) {
                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidReconstructFailFlow(407): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                          }
                          if (v14 >= 5) {
                            unsigned int v18 = 5;
                          }
                          else {
                            unsigned int v18 = v14;
                          }
                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailFlow_", (uint64_t)v8, 8u, v18)) {
                            goto LABEL_110;
                          }
                          unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructFailFlow(407): Cannot add 5 elements to context";
                          goto LABEL_2616;
                        case 408:
                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailP", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailP(408) cannot add 1 element to context";
                          goto LABEL_161;
                        case 409:
                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailQ", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailQ(409) cannot add 1 element to context";
                          goto LABEL_161;
                        case 410:
                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailUECC", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailUECC(410) cannot add 1 element to context";
                          goto LABEL_161;
                        case 411:
                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailUnsupp", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailUnsupp(411) cannot add 1 element to context";
                          goto LABEL_161;
                        case 412:
                          if (AddMultipleFieldsToGenericContext(a1, "raidUECCOpenBand", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidUECCOpenBand(412) cannot add 1 element to context";
                          goto LABEL_161;
                        case 414:
                          if (AddMultipleFieldsToGenericContext(a1, "ueccReads", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: ueccReads(414) cannot add 1 element to context";
                          goto LABEL_161;
                        case 416:
                          if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulVerify", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulVerify(416) cannot add 1 element to context";
                          goto LABEL_161;
                        case 417:
                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedVerify", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: raidFailedVerify(417) cannot add 1 element to context";
                          goto LABEL_161;
                        case 418:
                          if (AddMultipleFieldsToGenericContext(a1, "numBandsVerified", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: numBandsVerified(418) cannot add 1 element to context";
                          goto LABEL_161;
                        case 419:
                          if (AddMultipleFieldsToGenericContext(a1, "cache_heads", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: cache_heads(419) cannot add 1 element to context";
                          goto LABEL_161;
                        case 420:
                          if (AddMultipleFieldsToGenericContext(a1, "AbortSkip_RMXtoMPBX", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: AbortSkip_RMXtoMPBX(420) cannot add 1 element to context";
                          goto LABEL_161;
                        case 421:
                          if (AddMultipleFieldsToGenericContext(a1, "s3eFwVer", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: s3eFwVer(421) cannot add 1 element to context";
                          goto LABEL_161;
                        case 422:
                          if (AddMultipleFieldsToGenericContext(a1, "readVerifyNative", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: readVerifyNative(422) cannot add 1 element to context";
                          goto LABEL_161;
                        case 423:
                          if (AddMultipleFieldsToGenericContext(a1, "reducedReadVerifyNative", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: reducedReadVerifyNative(423) cannot add 1 element to context";
                          goto LABEL_161;
                        case 424:
                          if (AddMultipleFieldsToGenericContext(a1, "readVerifySlc", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: readVerifySlc(424) cannot add 1 element to context";
                          goto LABEL_161;
                        case 425:
                          if (AddMultipleFieldsToGenericContext(a1, "reducedReadVerifySlc", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: reducedReadVerifySlc(425) cannot add 1 element to context";
                          goto LABEL_161;
                        case 426:
                          if (AddMultipleFieldsToGenericContext(a1, "RxBurnEvictions", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: RxBurnEvictions(426) cannot add 1 element to context";
                          goto LABEL_161;
                        case 427:
                          if (AddMultipleFieldsToGenericContext(a1, "directToTLCBands", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: directToTLCBands(427) cannot add 1 element to context";
                          goto LABEL_161;
                        case 428:
                          if (AddMultipleFieldsToGenericContext(a1, "nandDesc", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: nandDesc(428) cannot add 1 element to context";
                          goto LABEL_161;
                        case 429:
                          if (AddMultipleFieldsToGenericContext(a1, "fwUpdatesPercentUsed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: fwUpdatesPercentUsed(429) cannot add 1 element to context";
                          goto LABEL_161;
                        case 430:
                          if (AddMultipleFieldsToGenericContext(a1, "slcPercentUsed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: slcPercentUsed(430) cannot add 1 element to context";
                          goto LABEL_161;
                        case 431:
                          if (AddMultipleFieldsToGenericContext(a1, "percentUsed", (uint64_t)v8, 8u, 1u)) {
                            goto LABEL_162;
                          }
                          int v17 = "ASPFTLParseBufferToCxt: percentUsed(431) cannot add 1 element to context";
                          goto LABEL_161;
                        default:
                          switch(v12)
                          {
                            case 432:
                              if (AddMultipleFieldsToGenericContext(a1, "hostAutoWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: hostAutoWrites(432) cannot add 1 element to context";
                              goto LABEL_161;
                            case 433:
                              if (AddMultipleFieldsToGenericContext(a1, "hostAutoWriteXacts", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: hostAutoWriteXacts(433) cannot add 1 element to context";
                              goto LABEL_161;
                            case 434:
                              if (AddMultipleFieldsToGenericContext(a1, "gcDestDynamic", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestDynamic(434) cannot add 1 element to context";
                              goto LABEL_161;
                            case 435:
                              if (AddMultipleFieldsToGenericContext(a1, "gcDestStatic", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestStatic(435) cannot add 1 element to context";
                              goto LABEL_161;
                            case 436:
                              if (AddMultipleFieldsToGenericContext(a1, "gcDestWearlevel", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestWearlevel(436) cannot add 1 element to context";
                              goto LABEL_161;
                            case 437:
                              if (AddMultipleFieldsToGenericContext(a1, "gcDestParity", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: gcDestParity(437) cannot add 1 element to context";
                              goto LABEL_161;
                            case 438:
                              if (AddMultipleFieldsToGenericContext(a1, "AbortSkip_Format", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: AbortSkip_Format(438) cannot add 1 element to context";
                              goto LABEL_161;
                            case 440:
                              if (AddMultipleFieldsToGenericContext(a1, "raidSLCPadding", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidSLCPadding(440) cannot add 1 element to context";
                              goto LABEL_161;
                            case 441:
                              if (AddMultipleFieldsToGenericContext(a1, "raidGCBands", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidGCBands(441) cannot add 1 element to context";
                              goto LABEL_161;
                            case 442:
                              if (AddMultipleFieldsToGenericContext(a1, "raidGCSectors", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidGCSectors(442) cannot add 1 element to context";
                              goto LABEL_161;
                            case 443:
                              if (AddMultipleFieldsToGenericContext(a1, "raidGCPadding", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidGCPadding(443) cannot add 1 element to context";
                              goto LABEL_161;
                            case 444:
                              if (AddMultipleFieldsToGenericContext(a1, "raidSLCBandsPerHostFlow", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: raidSLCBandsPerHostFlow(444) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            case 445:
                              if (AddMultipleFieldsToGenericContext(a1, "raidSLCSecsPerHostFlow", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: raidSLCSecsPerHostFlow(445) cannot add 1 element to context";
                              goto LABEL_161;
                            case 446:
                              if (AddMultipleFieldsToGenericContext(a1, "rxBurnMinCycleRuns", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: rxBurnMinCycleRuns(446) cannot add 1 element to context";
                              goto LABEL_161;
                            case 447:
                              if (AddMultipleFieldsToGenericContext(a1, "clogNumFastCxt", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogNumFastCxt(447) cannot add 1 element to context";
                              goto LABEL_161;
                            case 448:
                              if (AddMultipleFieldsToGenericContext(a1, "clogNumRapidReboots", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogNumRapidReboots(448) cannot add 1 element to context";
                              goto LABEL_161;
                            case 449:
                              if (AddMultipleFieldsToGenericContext(a1, "clogFastCxtAbvThr", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogFastCxtAbvThr(449) cannot add 1 element to context";
                              goto LABEL_161;
                            case 450:
                              if (AddMultipleFieldsToGenericContext(a1, "rxBurnDiffModeRuns", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: rxBurnDiffModeRuns(450) cannot add 1 element to context";
                              goto LABEL_161;
                            case 452:
                              if (AddMultipleFieldsToGenericContext(a1, "indReadVerifyFail", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: indReadVerifyFail(452) cannot add 1 element to context";
                              goto LABEL_161;
                            case 453:
                              if (v14 != 16) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerReadLevel(453): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x10) {
                                unsigned int v18 = 16;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "numOfThrottlingEntriesPerReadLevel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                              unsigned int v19 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerReadLevel(453): Cannot add 16 elements to context";
                              }
                              goto LABEL_2616;
                            case 454:
                              if (v14 != 16) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerWriteLevel(454): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x10) {
                                unsigned int v18 = 16;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "numOfThrottlingEntriesPerWriteLevel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                              unsigned int v19 = "ASPFTLParseBufferToCxt: numOfThrottlingEntriesPerWriteLevel(454): Cannot add 16 elements to context";
                              }
                              goto LABEL_2616;
                            case 456:
                              if (v14 != 10) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: slcFifoDepth(456): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0xA) {
                                unsigned int v18 = 10;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "slcFifoDepth_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: slcFifoDepth(456): Cannot add 10 elements to context";
                              goto LABEL_2616;
                            case 457:
                              if (AddMultipleFieldsToGenericContext(a1, "wcacheSectorsDirtyIdle", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: wcacheSectorsDirtyIdle(457) cannot add 1 element to context";
                              goto LABEL_161;
                            case 458:
                              if (AddMultipleFieldsToGenericContext(a1, "wcacheDS_SectorsDirtyIdle", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: wcacheDS_SectorsDirtyIdle(458) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            case 459:
                              if (AddMultipleFieldsToGenericContext(a1, "wcacheFS_MbytesDirtyIdle", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: wcacheFS_MbytesDirtyIdle(459) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            case 460:
                              if (v14 != 256) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: CacheDepthVsThroughput(460): (#256) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x100) {
                                unsigned int v18 = 256;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "CacheDepthVsThroughput_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                              unsigned int v19 = "ASPFTLParseBufferToCxt: CacheDepthVsThroughput(460): Cannot add 256 elements to context";
                              }
                              goto LABEL_2616;
                            case 461:
                              if (AddMultipleFieldsToGenericContext(a1, "directToTLCSectors", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: directToTLCSectors(461) cannot add 1 element to context";
                              goto LABEL_161;
                            case 462:
                              if (AddMultipleFieldsToGenericContext(a1, "fallbackToWaterfall", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: fallbackToWaterfall(462) cannot add 1 element to context";
                              goto LABEL_161;
                            case 463:
                              if (v14 != 11) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: balanceProportionBucketsHistogram(463): (#11) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0xB) {
                                unsigned int v18 = 11;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "balanceProportionBucketsHistogram_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                              unsigned int v19 = "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogram(463): Cannot add 11 elements to context";
                              }
                              goto LABEL_2616;
                            case 464:
                              if (AddMultipleFieldsToGenericContext(a1, "lockToTlc", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: lockToTlc(464) cannot add 1 element to context";
                              goto LABEL_161;
                            case 465:
                              if (v14 != 10) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: burstSizeHistogram(465): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0xA) {
                                unsigned int v18 = 10;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "burstSizeHistogram_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: burstSizeHistogram(465): Cannot add 10 elements to context";
                              goto LABEL_2616;
                            case 466:
                              if (v14 != 64) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: qosDirectToTLC(466): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x40) {
                                unsigned int v18 = 64;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "qosDirectToTLC_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: qosDirectToTLC(466): Cannot add 64 elements to context";
                              goto LABEL_2616;
                            case 467:
                              if (v14 != 4) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: maxQosDirectToTLC(467): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 4) {
                                unsigned int v18 = 4;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "maxQosDirectToTLC_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: maxQosDirectToTLC(467): Cannot add 4 elements to context";
                              goto LABEL_2616;
                            case 468:
                              if (v14 != 16) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcacheDirtyAtFlush(468): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x10) {
                                unsigned int v18 = 16;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "wcacheDirtyAtFlush_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: wcacheDirtyAtFlush(468): Cannot add 16 elements to context";
                              goto LABEL_2616;
                            case 469:
                              if (v14 != 2) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidReconstructSuccessPartition(469): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "raidReconstructSuccessPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructSuccessPartition(469): Cannot add 2 elements to context";
                              }
                              goto LABEL_2616;
                            case 470:
                              if (v14 != 2) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidReconstructFailPartition(470): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructFailPartition(470): Cannot add 2 elements to context";
                              }
                              goto LABEL_2616;
                            case 471:
                              if (AddMultipleFieldsToGenericContext(a1, "raidUncleanBootBandFail", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: raidUncleanBootBandFail(471) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            case 472:
                              if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBandFlowHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowHost(472) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            case 473:
                              if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBandFlowGC", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowGC(473) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            case 476:
                              if (v14 != 2) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidSuccessfulRecoLbaRange(476): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulRecoLbaRange_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidSuccessfulRecoLbaRange(476): Cannot add 2 elements to context";
                              }
                              goto LABEL_2616;
                            case 477:
                              if (v14 != 2) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidFailedRecoLbaRange(477): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "raidFailedRecoLbaRange_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidFailedRecoLbaRange(477): Cannot add 2 elements to context";
                              }
                              goto LABEL_2616;
                            case 481:
                              if (v14 != 32) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: skinnyBandErases_481(481): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x20) {
                                unsigned int v18 = 32;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "skinnyBandErases_481_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: skinnyBandErases_481(481): Cannot add 32 elements to context";
                              goto LABEL_2616;
                            case 483:
                              if (AddMultipleFieldsToGenericContext(a1, "tlcOverHeatWaterfall", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: tlcOverHeatWaterfall(483) cannot add 1 element to context";
                              goto LABEL_161;
                            case 484:
                              if (AddMultipleFieldsToGenericContext(a1, "skinnyCyclesConvert", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: skinnyCyclesConvert(484) cannot add 1 element to context";
                              goto LABEL_161;
                            case 485:
                              if (AddMultipleFieldsToGenericContext(a1, "non_proportional_directToTLCSectors", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: non_proportional_directToTLCSectors(485) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            case 486:
                              if (AddMultipleFieldsToGenericContext(a1, "maxFailedFastCxtSync", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: maxFailedFastCxtSync(486) cannot add 1 element to context";
                              goto LABEL_161;
                            case 487:
                              if (AddMultipleFieldsToGenericContext(a1, "numFormatUserArea", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: numFormatUserArea(487) cannot add 1 element to context";
                              goto LABEL_161;
                            case 488:
                              if (AddMultipleFieldsToGenericContext(a1, "clogFastCxtSyncAborted", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: clogFastCxtSyncAborted(488) cannot add 1 element to context";
                              goto LABEL_161;
                            case 489:
                              if (v14 != 5) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: clogOccupationSectors(489): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 5) {
                                unsigned int v18 = 5;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "clogOccupationSectors_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                              unsigned int v19 = "ASPFTLParseBufferToCxt: clogOccupationSectors(489): Cannot add 5 elements to context";
                              }
                              goto LABEL_2616;
                            case 490:
                              if (v14 != 64) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: bdrTmpHist(490): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 0x40) {
                                unsigned int v18 = 64;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "bdrTmpHist_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: bdrTmpHist(490): Cannot add 64 elements to context";
                              goto LABEL_2616;
                            case 491:
                              if (AddMultipleFieldsToGenericContext(a1, "numFWUpdates", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: numFWUpdates(491) cannot add 1 element to context";
                              goto LABEL_161;
                            case 492:
                              if (AddMultipleFieldsToGenericContext(a1, "numClogLoadFails", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: numClogLoadFails(492) cannot add 1 element to context";
                              goto LABEL_161;
                            case 493:
                              if (AddMultipleFieldsToGenericContext(a1, "rxBurnNumForcedDiffMode", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: rxBurnNumForcedDiffMode(493) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            case 494:
                              if (AddMultipleFieldsToGenericContext(a1, "RD_numSaves", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: RD_numSaves(494) cannot add 1 element to context";
                              goto LABEL_161;
                            case 495:
                              if (AddMultipleFieldsToGenericContext(a1, "eanCompressWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanCompressWrites(495) cannot add 1 element to context";
                              goto LABEL_161;
                            case 496:
                              if (AddMultipleFieldsToGenericContext(a1, "eanHostWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanHostWrites(496) cannot add 1 element to context";
                              goto LABEL_161;
                            case 497:
                              if (AddMultipleFieldsToGenericContext(a1, "bandPreErases", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: bandPreErases(497) cannot add 1 element to context";
                              goto LABEL_161;
                            case 498:
                              if (AddMultipleFieldsToGenericContext(a1, "eanHostUnmaps", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanHostUnmaps(498) cannot add 1 element to context";
                              goto LABEL_161;
                            case 499:
                              if (AddMultipleFieldsToGenericContext(a1, "eanHostFlushes", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanHostFlushes(499) cannot add 1 element to context";
                              goto LABEL_161;
                            case 500:
                              if (AddMultipleFieldsToGenericContext(a1, "eanFastWrites", (uint64_t)v8, 8u, 1u)) {
                                goto LABEL_162;
                              }
                              int v17 = "ASPFTLParseBufferToCxt: eanFastWrites(500) cannot add 1 element to context";
                              goto LABEL_161;
                            case 501:
                              if (AddMultipleFieldsToGenericContext(a1, "autowriteDS2FSCollisions", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: autowriteDS2FSCollisions(501) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            case 502:
                              if (AddMultipleFieldsToGenericContext(a1, "autowriteWaitTransferTaskBlocks", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: autowriteWaitTransferTaskBlocks(502) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            case 503:
                              if (v14 != 2) {
                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: avgCycle(503): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                              }
                              if (v14 >= 2) {
                                unsigned int v18 = 2;
                              }
                              else {
                                unsigned int v18 = v14;
                              }
                              if (AddMultipleFieldsToGenericContext(a1, "avgCycle_", (uint64_t)v8, 8u, v18)) {
                                goto LABEL_110;
                              }
                              unsigned int v19 = "ASPFTLParseBufferToCxt: avgCycle(503): Cannot add 2 elements to context";
                              goto LABEL_2616;
                            case 504:
                              if (AddMultipleFieldsToGenericContext(a1, "RD_DeferredClearsOverflowCnt", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                              int v17 = "ASPFTLParseBufferToCxt: RD_DeferredClearsOverflowCnt(504) cannot add 1 element to context";
                              }
                              goto LABEL_161;
                            default:
                              switch(v12)
                              {
                                case 505:
                                  if (AddMultipleFieldsToGenericContext(a1, "maxVerticsInBand", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: maxVerticsInBand(505) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 506:
                                  if (AddMultipleFieldsToGenericContext(a1, "numVertics", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: numVertics(506) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 507:
                                  if (AddMultipleFieldsToGenericContext(a1, "exceededCVertics", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: exceededCVertics(507) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 510:
                                  if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailMismatch", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailMismatch(510) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 511:
                                  if (v14 != 32) {
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: mspbootBlockRefreshCnt(511): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0x20) {
                                    unsigned int v18 = 32;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (AddMultipleFieldsToGenericContext(a1, "mspbootBlockRefreshCnt_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspbootBlockRefreshCnt(511): Cannot add 32 elements to context";
                                  }
                                  goto LABEL_2616;
                                case 516:
                                  if (v14 != 32) {
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: mspBootBlockRefreshTime(516): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0x20) {
                                    unsigned int v18 = 32;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (AddMultipleFieldsToGenericContext(a1, "mspBootBlockRefreshTime_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: mspBootBlockRefreshTime(516): Cannot add 32 elements to context";
                                  }
                                  goto LABEL_2616;
                                case 517:
                                  if (AddMultipleFieldsToGenericContext(a1, "mspBootBlockCountPerMsp", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: mspBootBlockCountPerMsp(517) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 518:
                                  if (AddMultipleFieldsToGenericContext(a1, "skinnyRevectorSLC", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: skinnyRevectorSLC(518) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 519:
                                  if (AddMultipleFieldsToGenericContext(a1, "skinnyRevectorTLC", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: skinnyRevectorTLC(519) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 520:
                                  if (AddMultipleFieldsToGenericContext(a1, "perfSetupAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfSetupAttempts(520) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 521:
                                  if (AddMultipleFieldsToGenericContext(a1, "perfSetupSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfSetupSuccesses(521) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 522:
                                  if (AddMultipleFieldsToGenericContext(a1, "perfWriteAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfWriteAttempts(522) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 523:
                                  if (AddMultipleFieldsToGenericContext(a1, "perfWriteSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfWriteSuccesses(523) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 524:
                                  if (AddMultipleFieldsToGenericContext(a1, "perfReadAttempts", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfReadAttempts(524) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 525:
                                  if (AddMultipleFieldsToGenericContext(a1, "perfReadSuccesses", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: perfReadSuccesses(525) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 526:
                                  if (AddMultipleFieldsToGenericContext(a1, "perfCleanupAttempts", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: perfCleanupAttempts(526) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 527:
                                  if (AddMultipleFieldsToGenericContext(a1, "perfCleanupSuccesses", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: perfCleanupSuccesses(527) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 530:
                                  if (AddMultipleFieldsToGenericContext(a1, "firstFailedDieId", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: firstFailedDieId(530) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 531:
                                  if (AddMultipleFieldsToGenericContext(a1, "numDieFailures", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: numDieFailures(531) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 532:
                                  if (AddMultipleFieldsToGenericContext(a1, "spareAvailablePercent", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: spareAvailablePercent(532) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 533:
                                  if (AddMultipleFieldsToGenericContext(a1, "dataFabricErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: dataFabricErr(533) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 534:
                                  if (AddMultipleFieldsToGenericContext(a1, "downlinkFabricErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: downlinkFabricErr(534) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 535:
                                  if (AddMultipleFieldsToGenericContext(a1, "prpAccTimeoutErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: prpAccTimeoutErr(535) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 537:
                                  if (AddMultipleFieldsToGenericContext(a1, "uplinkFabricErr", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: uplinkFabricErr(537) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 538:
                                  if (AddMultipleFieldsToGenericContext(a1, "skinnyBandsGBB", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: skinnyBandsGBB(538) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 539:
                                  if (AddMultipleFieldsToGenericContext(a1, "AbortPad_GcMustPadBand", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: AbortPad_GcMustPadBand(539) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 540:
                                  if (AddMultipleFieldsToGenericContext(a1, "AbortPad_GcMustPadSkinny", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: AbortPad_GcMustPadSkinny(540) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 541:
                                  if (AddMultipleFieldsToGenericContext(a1, "bdrHostPingInitial", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: bdrHostPingInitial(541) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 542:
                                  if (AddMultipleFieldsToGenericContext(a1, "bdrHostPingMoreNeeded", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: bdrHostPingMoreNeeded(542) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 543:
                                  if (AddMultipleFieldsToGenericContext(a1, "bandParityAllocationFailed", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: bandParityAllocationFailed(543) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 544:
                                  if (AddMultipleFieldsToGenericContext(a1, "fastHwBurstToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: fastHwBurstToSlc(544) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 545:
                                  if (AddMultipleFieldsToGenericContext(a1, "slowHwToTlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slowHwToTlc(545) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 546:
                                  if (v14 != 10) {
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: slcDemandBurstSizeDetected(546): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xA) {
                                    unsigned int v18 = 10;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (AddMultipleFieldsToGenericContext(a1, "slcDemandBurstSizeDetected_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: slcDemandBurstSizeDetected(546): Cannot add 10 elements to context";
                                  }
                                  goto LABEL_2616;
                                case 547:
                                  if (v14 != 10) {
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: slcDemandBurstDur(547): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xA) {
                                    unsigned int v18 = 10;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (AddMultipleFieldsToGenericContext(a1, "slcDemandBurstDur_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: slcDemandBurstDur(547): Cannot add 10 elements to context";
                                  }
                                  goto LABEL_2616;
                                case 548:
                                  if (AddMultipleFieldsToGenericContext(a1, "fastHwToTlcBurst", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: fastHwToTlcBurst(548) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 549:
                                  if (v14 != 10) {
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: slcDemandBurstSizeSlc(549): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xA) {
                                    unsigned int v18 = 10;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (AddMultipleFieldsToGenericContext(a1, "slcDemandBurstSizeSlc_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: slcDemandBurstSizeSlc(549): Cannot add 10 elements to context";
                                  }
                                  goto LABEL_2616;
                                case 551:
                                  if (v14 != 11) {
                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: balanceProportionBucketsHistogramTlc(551): (#11) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                  }
                                  if (v14 >= 0xB) {
                                    unsigned int v18 = 11;
                                  }
                                  else {
                                    unsigned int v18 = v14;
                                  }
                                  if (AddMultipleFieldsToGenericContext(a1, "balanceProportionBucketsHistogramTlc_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                  unsigned int v19 = "ASPFTLParseBufferToCxt: balanceProportionBucketsHistogramTlc(551): Cannot add 11"
                                  }
                                        " elements to context";
                                  goto LABEL_2616;
                                case 553:
                                  if (AddMultipleFieldsToGenericContext(a1, "slowHwFlushToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slowHwFlushToSlc(553) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 557:
                                  if (AddMultipleFieldsToGenericContext(a1, "slowHwToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: slowHwToSlc(557) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 558:
                                  if (AddMultipleFieldsToGenericContext(a1, "flushNwToSlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: flushNwToSlc(558) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 559:
                                  if (AddMultipleFieldsToGenericContext(a1, "flushNwToTlc", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: flushNwToTlc(559) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 560:
                                  if (AddMultipleFieldsToGenericContext(a1, "oslcHw", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcHw(560) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 561:
                                  if (AddMultipleFieldsToGenericContext(a1, "oslcTransitions", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcTransitions(561) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 563:
                                  if (AddMultipleFieldsToGenericContext(a1, "slcDemandFlushCount", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: slcDemandFlushCount(563) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 564:
                                  if (AddMultipleFieldsToGenericContext(a1, "slcDemandBurstCount", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstCount(564) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 565:
                                  if (AddMultipleFieldsToGenericContext(a1, "oslcBaseAvgPE", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcBaseAvgPE(565) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 566:
                                  if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailNoSPBX", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailNoSPBX(566) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 567:
                                  if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailDouble", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailDouble(567) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 568:
                                  if (AddMultipleFieldsToGenericContext(a1, "oslcFastWAmpUOnOff", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcFastWAmpUOnOff(568) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 569:
                                  if (AddMultipleFieldsToGenericContext(a1, "oslcSlowWAmpUOnOff", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcSlowWAmpUOnOff(569) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 570:
                                  if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailInvalid", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailInvalid(570) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 572:
                                  if (AddMultipleFieldsToGenericContext(a1, "oslcLastWAmpUx10", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcLastWAmpUx10(572) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 573:
                                  if (AddMultipleFieldsToGenericContext(a1, "raidFailedReadNoBlog", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: raidFailedReadNoBlog(573) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 574:
                                  if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBlank", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBlank(574) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 575:
                                  if (AddMultipleFieldsToGenericContext(a1, "oslcHotTLCOnOff", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: oslcHotTLCOnOff(575) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 576:
                                  if (AddMultipleFieldsToGenericContext(a1, "gcVPackDestinations", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: gcVPackDestinations(576) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 581:
                                  if (AddMultipleFieldsToGenericContext(a1, "averageTLCPECycles", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: averageTLCPECycles(581) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 582:
                                  if (AddMultipleFieldsToGenericContext(a1, "averageSLCPECycles", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: averageSLCPECycles(582) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 583:
                                  if (AddMultipleFieldsToGenericContext(a1, "numAtomicBoots", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: numAtomicBoots(583) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 584:
                                  if (AddMultipleFieldsToGenericContext(a1, "clogMinorMismatch", (uint64_t)v8, 8u, 1u)) {
                                    goto LABEL_162;
                                  }
                                  int v17 = "ASPFTLParseBufferToCxt: clogMinorMismatch(584) cannot add 1 element to context";
                                  goto LABEL_161;
                                case 586:
                                  if (AddMultipleFieldsToGenericContext(a1, "raidExpectedFailRMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: raidExpectedFailRMXReconstructionInternal(586) cannot ad"
                                  }
                                        "d 1 element to context";
                                  goto LABEL_161;
                                case 587:
                                  if (AddMultipleFieldsToGenericContext(a1, "raidExpectedFailRMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: raidExpectedFailRMXReconstructionHost(587) cannot add 1 "
                                  }
                                        "element to context";
                                  goto LABEL_161;
                                case 588:
                                  if (AddMultipleFieldsToGenericContext(a1, "oslcGCinvalidations", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: oslcGCinvalidations(588) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                case 589:
                                  if (AddMultipleFieldsToGenericContext(a1, "oslcGCActivateReason", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                  int v17 = "ASPFTLParseBufferToCxt: oslcGCActivateReason(589) cannot add 1 element to context";
                                  }
                                  goto LABEL_161;
                                default:
                                  switch(v12)
                                  {
                                    case 590:
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcLowCleanBandsUOnOff", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: oslcLowCleanBandsUOnOff(590) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 591:
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcTooManyGCMustOnOff", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: oslcTooManyGCMustOnOff(591) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 592:
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcBaseHostWrites", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBaseHostWrites(592) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 593:
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcBaseBandErases", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBaseBandErases(593) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 594:
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcBdrBands", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBdrBands(594) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 595:
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcBdrValid", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcBdrValid(595) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 596:
                                      if (AddMultipleFieldsToGenericContext(a1, "unexpectedBlanksInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: unexpectedBlanksInternal(596) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 597:
                                      if (AddMultipleFieldsToGenericContext(a1, "unexpectedBlanksOnRV", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: unexpectedBlanksOnRV(597) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 601:
                                      if (AddMultipleFieldsToGenericContext(a1, "waterfallLockSectors", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: waterfallLockSectors(601) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 602:
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcGCActiveWrites", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: oslcGCActiveWrites(602) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 603:
                                      if (AddMultipleFieldsToGenericContext(a1, "chipIdTemperatureSample", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: chipIdTemperatureSample(603) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 604:
                                      if (AddMultipleFieldsToGenericContext(a1, "gcVPackWrites", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: gcVPackWrites(604) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 605:
                                      if (v14 != 10) {
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcActiveReasons(605): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0xA) {
                                        unsigned int v18 = 10;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (AddMultipleFieldsToGenericContext(a1, "gcActiveReasons_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: gcActiveReasons(605): Cannot add 10 elements to context";
                                      }
                                      goto LABEL_2616;
                                    case 606:
                                      if (AddMultipleFieldsToGenericContext(a1, "eanMaxInitTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: eanMaxInitTimeMs(606) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 607:
                                      if (AddMultipleFieldsToGenericContext(a1, "eanMinToFirstReadTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: eanMinToFirstReadTimeMs(607) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 608:
                                      if (AddMultipleFieldsToGenericContext(a1, "skinnyAPGMRetire", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: skinnyAPGMRetire(608) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 609:
                                      if (AddMultipleFieldsToGenericContext(a1, "unexpectedBlanksHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: unexpectedBlanksHost(609) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 610:
                                      if (v14 != 64) {
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: pcieAerCounters(610): (#64) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0x40) {
                                        unsigned int v18 = 64;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (AddMultipleFieldsToGenericContext(a1, "pcieAerCounters_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: pcieAerCounters(610): Cannot add 64 elements to context";
                                      }
                                      goto LABEL_2616;
                                    case 611:
                                      if (AddMultipleFieldsToGenericContext(a1, "fastHwToTlcBalance", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: fastHwToTlcBalance(611) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 612:
                                      if (AddMultipleFieldsToGenericContext(a1, "perfOSLCRuns", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: perfOSLCRuns(612) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 613:
                                      if (AddMultipleFieldsToGenericContext(a1, "slcDemandBurstWritesInGC", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInGC(613) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 614:
                                      if (AddMultipleFieldsToGenericContext(a1, "slcDemandBurstWritesInTT", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInTT(614) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 615:
                                      if (AddMultipleFieldsToGenericContext(a1, "slcDemandBurstWritesInNRP", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: slcDemandBurstWritesInNRP(615) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 616:
                                      if (AddMultipleFieldsToGenericContext(a1, "perfTotalDmaMb", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: perfTotalDmaMb(616) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 617:
                                      if (AddMultipleFieldsToGenericContext(a1, "eanAvgInitTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgInitTimeMs(617) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 618:
                                      if (AddMultipleFieldsToGenericContext(a1, "eanAvgToFirstReadTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgToFirstReadTimeMs(618) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 619:
                                      if (AddMultipleFieldsToGenericContext(a1, "eanMaxBootReadTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: eanMaxBootReadTimeMs(619) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 620:
                                      if (AddMultipleFieldsToGenericContext(a1, "eanAvgBootReadTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgBootReadTimeMs(620) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 621:
                                      if (v14 != 10) {
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: eanBootReadsHist(621): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0xA) {
                                        unsigned int v18 = 10;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (AddMultipleFieldsToGenericContext(a1, "eanBootReadsHist_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: eanBootReadsHist(621): Cannot add 10 elements to context";
                                      }
                                      goto LABEL_2616;
                                    case 622:
                                      if (AddMultipleFieldsToGenericContext(a1, "maxBgInitTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: maxBgInitTimeMs(622) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 623:
                                      if (AddMultipleFieldsToGenericContext(a1, "avgBgInitTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: avgBgInitTimeMs(623) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 624:
                                      if (v14 != 16) {
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: clogFailReason(624): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0x10) {
                                        unsigned int v18 = 16;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (AddMultipleFieldsToGenericContext(a1, "clogFailReason_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: clogFailReason(624): Cannot add 16 elements to context";
                                      }
                                      goto LABEL_2616;
                                    case 625:
                                      if (AddMultipleFieldsToGenericContext(a1, "eanMinBootReadMBPerSec", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: eanMinBootReadMBPerSec(625) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 626:
                                      if (AddMultipleFieldsToGenericContext(a1, "eanAvgBootReadMBPerSec", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: eanAvgBootReadMBPerSec(626) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 627:
                                      if (AddMultipleFieldsToGenericContext(a1, "minSkinnyPECycles", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: minSkinnyPECycles(627) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 628:
                                      if (AddMultipleFieldsToGenericContext(a1, "maxSkinnyPECycles", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: maxSkinnyPECycles(628) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 629:
                                      if (AddMultipleFieldsToGenericContext(a1, "averageSkinnyPECycles", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: averageSkinnyPECycles(629) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 630:
                                      if (v14 != 6) {
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidSuccessfulRecoEAN(630): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 6) {
                                        unsigned int v18 = 6;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulRecoEAN_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: raidSuccessfulRecoEAN(630): Cannot add 6 elements to context";
                                      }
                                      goto LABEL_2616;
                                    case 631:
                                      if (v14 != 6) {
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidFailedRecoEAN(631): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 6) {
                                        unsigned int v18 = 6;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (AddMultipleFieldsToGenericContext(a1, "raidFailedRecoEAN_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: raidFailedRecoEAN(631): Cannot add 6 elements to context";
                                      }
                                      goto LABEL_2616;
                                    case 632:
                                      if (v14 != 6) {
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: eanFirstReadMode(632): (#6) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 6) {
                                        unsigned int v18 = 6;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (AddMultipleFieldsToGenericContext(a1, "eanFirstReadMode_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: eanFirstReadMode(632): Cannot add 6 elements to context";
                                      }
                                      goto LABEL_2616;
                                    case 635:
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcHwGC", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcHwGC(635) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 636:
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcHwTT", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcHwTT(636) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 637:
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcHwNRP", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: oslcHwNRP(637) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 638:
                                      if (v14 != 10) {
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: oslcDemandBurstSize(638): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 0xA) {
                                        unsigned int v18 = 10;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcDemandBurstSize_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: oslcDemandBurstSize(638): Cannot add 10 elements to context";
                                      }
                                      goto LABEL_2616;
                                    case 639:
                                      if (AddMultipleFieldsToGenericContext(a1, "raidReconstructSuccessBandFlowOslc", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: raidReconstructSuccessBandFlowOslc(639) cannot add 1"
                                      }
                                            " element to context";
                                      goto LABEL_161;
                                    case 640:
                                      if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBandFlowOslc", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBandFlowOslc(640) cannot add 1 el"
                                      }
                                            "ement to context";
                                      goto LABEL_161;
                                    case 641:
                                      if (AddMultipleFieldsToGenericContext(a1, "raidFailSectors", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: raidFailSectors(641) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 642:
                                      if (AddMultipleFieldsToGenericContext(a1, "eanFailSectors", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: eanFailSectors(642) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 643:
                                      if (AddMultipleFieldsToGenericContext(a1, "bdrTimeMode", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: bdrTimeMode(643) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 644:
                                      if (AddMultipleFieldsToGenericContext(a1, "raidParityNotSavedP", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityNotSavedP(644) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 645:
                                      if (AddMultipleFieldsToGenericContext(a1, "raidParityNotSavedQ", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityNotSavedQ(645) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 646:
                                      if (AddMultipleFieldsToGenericContext(a1, "raidParityInvalid", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityInvalid(646) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 647:
                                      if (AddMultipleFieldsToGenericContext(a1, "raidParityUnknown", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityUnknown(647) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 648:
                                      if (AddMultipleFieldsToGenericContext(a1, "raidParityUnmapped", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityUnmapped(648) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 649:
                                      if (AddMultipleFieldsToGenericContext(a1, "raidParityGCUnc", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: raidParityGCUnc(649) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 657:
                                      if (AddMultipleFieldsToGenericContext(a1, "AbortSkip_MPBXProbational", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: AbortSkip_MPBXProbational(657) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 659:
                                      if (AddMultipleFieldsToGenericContext(a1, "raidVerificationReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: raidVerificationReads(659) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 666:
                                      if (AddMultipleFieldsToGenericContext(a1, "nofDies", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: nofDies(666) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 671:
                                      if (AddMultipleFieldsToGenericContext(a1, "skinnyBandsNum", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: skinnyBandsNum(671) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 672:
                                      if (AddMultipleFieldsToGenericContext(a1, "skinnyBandsNumDips", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: skinnyBandsNumDips(672) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 674:
                                      if (v14 != 8) {
                                        SetAPIErrorMessage("ASPFTLParseBufferToCxt: oslcNoVotesHw(674): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                      }
                                      if (v14 >= 8) {
                                        unsigned int v18 = 8;
                                      }
                                      else {
                                        unsigned int v18 = v14;
                                      }
                                      if (AddMultipleFieldsToGenericContext(a1, "oslcNoVotesHw_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                      unsigned int v19 = "ASPFTLParseBufferToCxt: oslcNoVotesHw(674): Cannot add 8 elements to context";
                                      }
                                      goto LABEL_2616;
                                    case 675:
                                      if (AddMultipleFieldsToGenericContext(a1, "totalLbas", (uint64_t)v8, 8u, 1u)) {
                                        goto LABEL_162;
                                      }
                                      int v17 = "ASPFTLParseBufferToCxt: totalLbas(675) cannot add 1 element to context";
                                      goto LABEL_161;
                                    case 676:
                                      if (AddMultipleFieldsToGenericContext(a1, "bdrHostPingExtra", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: bdrHostPingExtra(676) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    case 677:
                                      if (AddMultipleFieldsToGenericContext(a1, "magazineInstanceMeta", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                      int v17 = "ASPFTLParseBufferToCxt: magazineInstanceMeta(677) cannot add 1 element to context";
                                      }
                                      goto LABEL_161;
                                    default:
                                      switch(v12)
                                      {
                                        case 680:
                                          if (v14 != 3) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: magazineFWVersion(680): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 3) {
                                            unsigned int v18 = 3;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "magazineFWVersion_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: magazineFWVersion(680): Cannot add 3 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 681:
                                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailPMXUnsup", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailPMXUnsup(681) cannot add 1 el"
                                          }
                                                "ement to context";
                                          goto LABEL_161;
                                        case 682:
                                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBMXUnsup", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXUnsup(682) cannot add 1 el"
                                          }
                                                "ement to context";
                                          goto LABEL_161;
                                        case 683:
                                          if (AddMultipleFieldsToGenericContext(a1, "iBootNANDResets", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: iBootNANDResets(683) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 684:
                                          if (AddMultipleFieldsToGenericContext(a1, "pcieClkreqHighTimeout", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: pcieClkreqHighTimeout(684) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 687:
                                          if (v14 != 3) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrInitSent(687): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 3) {
                                            unsigned int v18 = 3;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrInitSent_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrInitSent(687): Cannot add 3 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 688:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrPauseSent", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrPauseSent(688) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 689:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrResumeSent", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrResumeSent(689) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 690:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrGetResultSent", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrGetResultSent(690) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 691:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrEarlyExits", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrEarlyExits(691) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 694:
                                          if (v14 != 10) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrRefreshGrades(694): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0xA) {
                                            unsigned int v18 = 10;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrRefreshGrades_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshGrades(694): Cannot add 10 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 695:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrNotEnoughReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrNotEnoughReads(695) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 696:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrAborts", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrAborts(696) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 697:
                                          if (AddMultipleFieldsToGenericContext(a1, "TurboRaidHostClassifications", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidHostClassifications(697) cannot add 1 e"
                                          }
                                                "lement to context";
                                          goto LABEL_161;
                                        case 698:
                                          if (AddMultipleFieldsToGenericContext(a1, "TurboRaidInternalClassifications", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidInternalClassifications(698) cannot add"
                                          }
                                                " 1 element to context";
                                          goto LABEL_161;
                                        case 699:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrFullyDone", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrFullyDone(699) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 702:
                                          if (v14 != 32) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: vcurve(702): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0x20) {
                                            unsigned int v18 = 32;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "vcurve_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: vcurve(702): Cannot add 32 elements to context";
                                          goto LABEL_2616;
                                        case 703:
                                          if (v14 != 12) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: injDepth(703): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0xC) {
                                            unsigned int v18 = 12;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "injDepth_", (uint64_t)v8, 8u, v18)) {
                                            goto LABEL_110;
                                          }
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: injDepth(703): Cannot add 12 elements to context";
                                          goto LABEL_2616;
                                        case 704:
                                          if (AddMultipleFieldsToGenericContext(a1, "logical_disk_occupied_promiles", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: logical_disk_occupied_promiles(704) cannot add 1"
                                          }
                                                " element to context";
                                          goto LABEL_161;
                                        case 711:
                                          if (AddMultipleFieldsToGenericContext(a1, "raidPrevFailedReconstructSkip", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidPrevFailedReconstructSkip(711) cannot add 1 "
                                          }
                                                "element to context";
                                          goto LABEL_161;
                                        case 712:
                                          if (AddMultipleFieldsToGenericContext(a1, "TurboRaidSuccessfulHostAuxReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidSuccessfulHostAuxReads(712) cannot add "
                                          }
                                                "1 element to context";
                                          goto LABEL_161;
                                        case 713:
                                          if (AddMultipleFieldsToGenericContext(a1, "TurboRaidSuccessfulInternalAuxReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidSuccessfulInternalAuxReads(713) cannot "
                                          }
                                                "add 1 element to context";
                                          goto LABEL_161;
                                        case 714:
                                          if (AddMultipleFieldsToGenericContext(a1, "turboRaidClassificationReliabilityHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationReliabilityHost(714) cann"
                                          }
                                                "ot add 1 element to context";
                                          goto LABEL_161;
                                        case 715:
                                          if (AddMultipleFieldsToGenericContext(a1, "turboRaidClassificationReliabilityInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationReliabilityInternal(715) "
                                          }
                                                "cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 716:
                                          if (AddMultipleFieldsToGenericContext(a1, "turboRaidClassificationQualityHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationQualityHost(716) cannot a"
                                          }
                                                "dd 1 element to context";
                                          goto LABEL_161;
                                        case 717:
                                          if (AddMultipleFieldsToGenericContext(a1, "turboRaidClassificationQualityInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: turboRaidClassificationQualityInternal(717) cann"
                                          }
                                                "ot add 1 element to context";
                                          goto LABEL_161;
                                        case 719:
                                          if (AddMultipleFieldsToGenericContext(a1, "skinnyBandErases", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: skinnyBandErases(719) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 721:
                                          if (AddMultipleFieldsToGenericContext(a1, "gcPDusterDestinations", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: gcPDusterDestinations(721) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 722:
                                          if (AddMultipleFieldsToGenericContext(a1, "gcPDusterWrites", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: gcPDusterWrites(722) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 730:
                                          if (AddMultipleFieldsToGenericContext(a1, "rvFails", (uint64_t)v8, 8u, 1u)) {
                                            goto LABEL_162;
                                          }
                                          int v17 = "ASPFTLParseBufferToCxt: rvFails(730) cannot add 1 element to context";
                                          goto LABEL_161;
                                        case 737:
                                          if (AddMultipleFieldsToGenericContext(a1, "TurboRaidFailedHostAuxReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidFailedHostAuxReads(737) cannot add 1 el"
                                          }
                                                "ement to context";
                                          goto LABEL_161;
                                        case 738:
                                          if (AddMultipleFieldsToGenericContext(a1, "TurboRaidFailedInternalAuxReads", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: TurboRaidFailedInternalAuxReads(738) cannot add "
                                          }
                                                "1 element to context";
                                          goto LABEL_161;
                                        case 741:
                                          if (AddMultipleFieldsToGenericContext(a1, "autoSkipTriggers", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: autoSkipTriggers(741) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 742:
                                          if (AddMultipleFieldsToGenericContext(a1, "autoSkipPlanes", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: autoSkipPlanes(742) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 744:
                                          if (v14 != 8) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidReconstructDurationHisto(744): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 8) {
                                            unsigned int v18 = 8;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructDurationHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: raidReconstructDurationHisto(744): Cannot add 8 "
                                          }
                                                "elements to context";
                                          goto LABEL_2616;
                                        case 745:
                                          if (v14 != 8) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: failsOnReconstructHisto(745): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 8) {
                                            unsigned int v18 = 8;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "failsOnReconstructHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: failsOnReconstructHisto(745): Cannot add 8 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 746:
                                          if (AddMultipleFieldsToGenericContext(a1, "bandKill_userFlattenExcessive", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_userFlattenExcessive(746) cannot add 1 "
                                          }
                                                "element to context";
                                          goto LABEL_161;
                                        case 747:
                                          if (AddMultipleFieldsToGenericContext(a1, "bandKill_IntFlattenExcessive", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_IntFlattenExcessive(747) cannot add 1 e"
                                          }
                                                "lement to context";
                                          goto LABEL_161;
                                        case 748:
                                          if (AddMultipleFieldsToGenericContext(a1, "bandKill_userFlattenBalance", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_userFlattenBalance(748) cannot add 1 el"
                                          }
                                                "ement to context";
                                          goto LABEL_161;
                                        case 749:
                                          if (AddMultipleFieldsToGenericContext(a1, "bandKill_intFlattenBalance", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_intFlattenBalance(749) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 750:
                                          if (AddMultipleFieldsToGenericContext(a1, "bandKill_formatVertExcessive", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_formatVertExcessive(750) cannot add 1 e"
                                          }
                                                "lement to context";
                                          goto LABEL_161;
                                        case 751:
                                          if (AddMultipleFieldsToGenericContext(a1, "bandKill_formatVertBalance", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_formatVertBalance(751) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 753:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrNumSlowRefreshes", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrNumSlowRefreshes(753) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 754:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrNumFastRefreshes", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrNumFastRefreshes(754) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 755:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrTotalRefreshValidity", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrTotalRefreshValidity(755) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 756:
                                          if (v14 != 9) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrRefreshedAges(756): (#9) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 9) {
                                            unsigned int v18 = 9;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrRefreshedAges_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshedAges(756): Cannot add 9 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 758:
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrSkippedBlocks", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: cbdrSkippedBlocks(758) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 759:
                                          if (v14 != 5) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrScanPct(759): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 5) {
                                            unsigned int v18 = 5;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrScanPct_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrScanPct(759): Cannot add 5 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 760:
                                          if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulBMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulBMXReconstructionInternal(760) can"
                                          }
                                                "not add 1 element to context";
                                          goto LABEL_161;
                                        case 761:
                                          if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulBMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulBMXReconstructionHost(761) cannot "
                                          }
                                                "add 1 element to context";
                                          goto LABEL_161;
                                        case 762:
                                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedBMXReconstructionInternal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidFailedBMXReconstructionInternal(762) cannot "
                                          }
                                                "add 1 element to context";
                                          goto LABEL_161;
                                        case 763:
                                          if (AddMultipleFieldsToGenericContext(a1, "raidFailedBMXReconstructionHost", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidFailedBMXReconstructionHost(763) cannot add "
                                          }
                                                "1 element to context";
                                          goto LABEL_161;
                                        case 764:
                                          if (AddMultipleFieldsToGenericContext(a1, "ricSPRVFail", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: ricSPRVFail(764) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 765:
                                          if (AddMultipleFieldsToGenericContext(a1, "ricMPRVFail", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: ricMPRVFail(765) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 767:
                                          if (v14 != 10) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrRefreshGradesSLC(767): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0xA) {
                                            unsigned int v18 = 10;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrRefreshGradesSLC_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshGradesSLC(767): Cannot add 10 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 768:
                                          if (v14 != 9) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrRefreshedAgesSLC(768): (#9) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 9) {
                                            unsigned int v18 = 9;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrRefreshedAgesSLC_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrRefreshedAgesSLC(768): Cannot add 9 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 769:
                                          if (v14 != 5) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: cbdrScanPctSLC(769): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 5) {
                                            unsigned int v18 = 5;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "cbdrScanPctSLC_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cbdrScanPctSLC(769): Cannot add 5 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 770:
                                          if (v14 != 8) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: cpuBurstLength(770): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 8) {
                                            unsigned int v18 = 8;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "cpuBurstLength_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: cpuBurstLength(770): Cannot add 8 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 771:
                                          if (AddMultipleFieldsToGenericContext(a1, "autoSkipRaidRecoFail", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: autoSkipRaidRecoFail(771) cannot add 1 element to context";
                                          }
                                          goto LABEL_161;
                                        case 772:
                                          if (v14 != 32) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsSlc(772): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0x20) {
                                            unsigned int v18 = 32;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "dmReasonsSlc_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc(772): Cannot add 32 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 773:
                                          if (v14 != 32) {
                                            SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsTlc(773): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                          }
                                          if (v14 >= 0x20) {
                                            unsigned int v18 = 32;
                                          }
                                          else {
                                            unsigned int v18 = v14;
                                          }
                                          if (AddMultipleFieldsToGenericContext(a1, "dmReasonsTlc_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                          unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc(773): Cannot add 32 elements to context";
                                          }
                                          goto LABEL_2616;
                                        case 774:
                                          if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBMXAbort", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXAbort(774) cannot add 1 el"
                                          }
                                                "ement to context";
                                          goto LABEL_161;
                                        case 775:
                                          if (AddMultipleFieldsToGenericContext(a1, "bandKill_fatBindingNoBlocks", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_fatBindingNoBlocks(775) cannot add 1 el"
                                          }
                                                "ement to context";
                                          goto LABEL_161;
                                        case 776:
                                          if (AddMultipleFieldsToGenericContext(a1, "bandKill_fatBindingFewBlocks", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                          int v17 = "ASPFTLParseBufferToCxt: bandKill_fatBindingFewBlocks(776) cannot add 1 e"
                                          }
                                                "lement to context";
                                          goto LABEL_161;
                                        default:
                                          switch(v12)
                                          {
                                            case 777:
                                              if (AddMultipleFieldsToGenericContext(a1, "numBadBootBlocks", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: numBadBootBlocks(777) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 778:
                                              if (AddMultipleFieldsToGenericContext(a1, "snapshotCPUHigh", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: snapshotCPUHigh(778) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 779:
                                              if (AddMultipleFieldsToGenericContext(a1, "snapshotCPULow", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: snapshotCPULow(779) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 780:
                                              if (AddMultipleFieldsToGenericContext(a1, "gcWithoutBMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: gcWithoutBMs(780) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 781:
                                              if (v14 != 10) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcSearchTimeHistory(781): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xA) {
                                                unsigned int v18 = 10;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "gcSearchTimeHistory_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: gcSearchTimeHistory(781): Cannot add 10 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 785:
                                              if (v14 != 16) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcSearchPortion(785): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "gcSearchPortion_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: gcSearchPortion(785): Cannot add 16 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 786:
                                              if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBmxMp", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBmxMp(786) cannot add 1 e"
                                              }
                                                    "lement to context";
                                              goto LABEL_161;
                                            case 787:
                                              if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBmx", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBmx(787) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 788:
                                              if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBMXUECC", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXUECC(788) cannot add 1"
                                              }
                                                    " element to context";
                                              goto LABEL_161;
                                            case 789:
                                              if (AddMultipleFieldsToGenericContext(a1, "raidReconstructFailBMXBlank", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidReconstructFailBMXBlank(789) cannot add "
                                              }
                                                    "1 element to context";
                                              goto LABEL_161;
                                            case 790:
                                              if (AddMultipleFieldsToGenericContext(a1, "raidPrevFailedReconstructBmxMpSkip", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidPrevFailedReconstructBmxMpSkip(790) cann"
                                              }
                                                    "ot add 1 element to context";
                                              goto LABEL_161;
                                            case 792:
                                              if (AddMultipleFieldsToGenericContext(a1, "numTLCFatBands", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: numTLCFatBands(792) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 793:
                                              if (AddMultipleFieldsToGenericContext(a1, "fatValidity", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: fatValidity(793) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 794:
                                              if (AddMultipleFieldsToGenericContext(a1, "fatTotal", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: fatTotal(794) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 798:
                                              if (v14 != 4) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailP(798): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "raidBMXFailP_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailP(798): Cannot add 4 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 799:
                                              if (v14 != 4) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailUECC(799): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "raidBMXFailUECC_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailUECC(799): Cannot add 4 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 804:
                                              if (v14 != 4) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailNoSPBX(804): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "raidBMXFailNoSPBX_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailNoSPBX(804): Cannot add 4 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 806:
                                              if (v14 != 4) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailBlank(806): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "raidBMXFailBlank_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailBlank(806): Cannot add 4 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 809:
                                              if (v14 != 4) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailUnsup(809): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "raidBMXFailUnsup_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailUnsup(809): Cannot add 4 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 811:
                                              if (v14 != 4) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailMpSkip(811): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "raidBMXFailMpSkip_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailMpSkip(811): Cannot add 4 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 812:
                                              if (v14 != 4) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailAbort(812): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "raidBMXFailAbort_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailAbort(812): Cannot add 4 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 813:
                                              if (AddMultipleFieldsToGenericContext(a1, "TurboRaidIsEnabled", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: TurboRaidIsEnabled(813) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 814:
                                              if (v14 != 4) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXFailOther(814): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "raidBMXFailOther_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXFailOther(814): Cannot add 4 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 815:
                                              if (v14 != 4) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: raidBMXSuccess(815): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 4) {
                                                unsigned int v18 = 4;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "raidBMXSuccess_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: raidBMXSuccess(815): Cannot add 4 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 816:
                                              if (AddMultipleFieldsToGenericContext(a1, "skinnyBandsExtraDip", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: skinnyBandsExtraDip(816) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 821:
                                              if (AddMultipleFieldsToGenericContext(a1, "writeAmp", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: writeAmp(821) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 822:
                                              if (AddMultipleFieldsToGenericContext(a1, "ricMaxClogOnlyPages", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: ricMaxClogOnlyPages(822) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 823:
                                              if (v14 != 3) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: readClassifyStatusesHisto(823): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 3) {
                                                unsigned int v18 = 3;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "readClassifyStatusesHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: readClassifyStatusesHisto(823): Cannot add 3"
                                              }
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 824:
                                              if (v14 != 10) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: readWithAuxStatusesHisto(824): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xA) {
                                                unsigned int v18 = 10;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "readWithAuxStatusesHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: readWithAuxStatusesHisto(824): Cannot add 10"
                                              }
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 825:
                                              if (v14 != 10) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: readReconstructStatusesHisto(825): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xA) {
                                                unsigned int v18 = 10;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "readReconstructStatusesHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: readReconstructStatusesHisto(825): Cannot ad"
                                              }
                                                    "d 10 elements to context";
                                              goto LABEL_2616;
                                            case 826:
                                              if (AddMultipleFieldsToGenericContext(a1, "bdrBackupChecks", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: bdrBackupChecks(826) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 827:
                                              if (AddMultipleFieldsToGenericContext(a1, "ricExceedClogOnlyPagesTH", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: ricExceedClogOnlyPagesTH(827) cannot add 1 e"
                                              }
                                                    "lement to context";
                                              goto LABEL_161;
                                            case 828:
                                              if (AddMultipleFieldsToGenericContext(a1, "numDipFailures", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: numDipFailures(828) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 831:
                                              if (AddMultipleFieldsToGenericContext(a1, "prefetchNextRange", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: prefetchNextRange(831) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 862:
                                              if (AddMultipleFieldsToGenericContext(a1, "raidSuccessfulSkip", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidSuccessfulSkip(862) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 863:
                                              if (AddMultipleFieldsToGenericContext(a1, "raidFailedSkip", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidFailedSkip(863) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 864:
                                              if (AddMultipleFieldsToGenericContext(a1, "raidSkipAttempts", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: raidSkipAttempts(864) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 865:
                                              if (v14 != 16) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: timeOfThrottlingPerLevel(865): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "timeOfThrottlingPerLevel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerLevel(865): Cannot add 16"
                                              }
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 866:
                                              if (v14 != 16) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: timeOfThrottlingPerReadLevel(866): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "timeOfThrottlingPerReadLevel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerReadLevel(866): Cannot ad"
                                              }
                                                    "d 16 elements to context";
                                              goto LABEL_2616;
                                            case 867:
                                              if (v14 != 16) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: timeOfThrottlingPerWriteLevel(867): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "timeOfThrottlingPerWriteLevel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: timeOfThrottlingPerWriteLevel(867): Cannot a"
                                              }
                                                    "dd 16 elements to context";
                                              goto LABEL_2616;
                                            case 868:
                                              if (v14 != 32) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsSlc_1bc(868): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "dmReasonsSlc_1bc_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc(868): Cannot add 32 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 869:
                                              if (v14 != 32) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsTlc_1bc(869): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "dmReasonsTlc_1bc_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc(869): Cannot add 32 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 870:
                                              if (v14 != 32) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsSlc_1bc_he(870): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "dmReasonsSlc_1bc_he_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc_1bc_he(870): Cannot add 32 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 871:
                                              if (v14 != 32) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsTlc_1bc_he(871): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "dmReasonsTlc_1bc_he_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc_1bc_he(871): Cannot add 32 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 876:
                                              if (v14 != 32) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsSlc_mbc(876): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "dmReasonsSlc_mbc_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsSlc_mbc(876): Cannot add 32 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 877:
                                              if (v14 != 32) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: dmReasonsTlc_mbc(877): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x20) {
                                                unsigned int v18 = 32;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "dmReasonsTlc_mbc_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: dmReasonsTlc_mbc(877): Cannot add 32 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 883:
                                              if (AddMultipleFieldsToGenericContext(a1, "clogEmptyProgramms", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: clogEmptyProgramms(883) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 884:
                                              if (AddMultipleFieldsToGenericContext(a1, "oslcHwCloseBand", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: oslcHwCloseBand(884) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 891:
                                              if (v14 != 2) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidSuccessAuxPartition(891): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidSuccessAuxPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidSuccessAuxPartition(891): Cannot ad"
                                              }
                                                    "d 2 elements to context";
                                              goto LABEL_2616;
                                            case 892:
                                              if (v14 != 2) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidFailAuxPartition(892): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidFailAuxPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidFailAuxPartition(892): Cannot add 2"
                                              }
                                                    " elements to context";
                                              goto LABEL_2616;
                                            case 893:
                                              if (v14 != 2) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidClassifyQualPartition(893): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidClassifyQualPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidClassifyQualPartition(893): Cannot "
                                              }
                                                    "add 2 elements to context";
                                              goto LABEL_2616;
                                            case 894:
                                              if (v14 != 2) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidClassifyRelPartition(894): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 2) {
                                                unsigned int v18 = 2;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidClassifyRelPartition_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidClassifyRelPartition(894): Cannot a"
                                              }
                                                    "dd 2 elements to context";
                                              goto LABEL_2616;
                                            case 895:
                                              if (AddMultipleFieldsToGenericContext(a1, "IND_pool_freeMinSilo", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: IND_pool_freeMinSilo(895) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 896:
                                              if (AddMultipleFieldsToGenericContext(a1, "autoSweepBlocks", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: autoSweepBlocks(896) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 897:
                                              if (v14 != 16) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: wcWrFragSizes(897): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "wcWrFragSizes_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: wcWrFragSizes(897): Cannot add 16 elements to context";
                                              }
                                              goto LABEL_2616;
                                            case 898:
                                              if (v14 != 16) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: indStateAcrossGcDidNoL(898): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "indStateAcrossGcDidNoL_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: indStateAcrossGcDidNoL(898): Cannot add 16 e"
                                              }
                                                    "lements to context";
                                              goto LABEL_2616;
                                            case 899:
                                              if (v14 != 16) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: indStateAcrossGcDidL(899): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "indStateAcrossGcDidL_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: indStateAcrossGcDidL(899): Cannot add 16 ele"
                                              }
                                                    "ments to context";
                                              goto LABEL_2616;
                                            case 900:
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidNoClassifyDueToWasRetire", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToWasRetire(900) canno"
                                              }
                                                    "t add 1 element to context";
                                              goto LABEL_161;
                                            case 901:
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidNoClassifyDueToOpenBand", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToOpenBand(901) cannot"
                                              }
                                                    " add 1 element to context";
                                              goto LABEL_161;
                                            case 902:
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidNoClassifyDueToQualityBlock", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidNoClassifyDueToQualityBlock(902) ca"
                                              }
                                                    "nnot add 1 element to context";
                                              goto LABEL_161;
                                            case 903:
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidGbbOpenBand", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidGbbOpenBand(903) cannot add 1 element to context";
                                              }
                                              goto LABEL_161;
                                            case 904:
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidGbbShouldRetireOnRefresh", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                              int v17 = "ASPFTLParseBufferToCxt: turboRaidGbbShouldRetireOnRefresh(904) canno"
                                              }
                                                    "t add 1 element to context";
                                              goto LABEL_161;
                                            case 905:
                                              if (v14 != 16) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidRelPerBlock(905): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidRelPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidRelPerBlock(905): Cannot add 16 ele"
                                              }
                                                    "ments to context";
                                              goto LABEL_2616;
                                            case 906:
                                              if (v14 != 16) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidRelBetweenRefreshesPerBlock(906): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0x10) {
                                                unsigned int v18 = 16;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "turboRaidRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidRelBetweenRefreshesPerBlock(906): C"
                                              }
                                                    "annot add 16 elements to context";
                                              goto LABEL_2616;
                                            default:
                                              if (v12 <= 1039)
                                              {
                                                switch(v12)
                                                {
                                                  case 907:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMaxRelBetweenRefreshesPerBlock(907): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidMaxRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMaxRelBetweenRefreshesPerBloc"
                                                    }
                                                          "k(907): Cannot add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 908:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMinRelBetweenRefreshesPerBlock(908): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidMinRelBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMinRelBetweenRefreshesPerBloc"
                                                    }
                                                          "k(908): Cannot add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 909:
                                                  case 910:
                                                  case 911:
                                                  case 912:
                                                  case 913:
                                                  case 914:
                                                  case 915:
                                                  case 916:
                                                  case 917:
                                                  case 924:
                                                  case 925:
                                                  case 926:
                                                  case 927:
                                                  case 928:
                                                  case 929:
                                                  case 936:
                                                  case 941:
                                                  case 945:
                                                  case 946:
                                                  case 947:
                                                  case 949:
                                                  case 950:
                                                  case 952:
                                                  case 954:
                                                  case 955:
                                                  case 956:
                                                  case 957:
                                                  case 958:
                                                  case 959:
                                                  case 960:
                                                  case 963:
                                                  case 964:
                                                  case 965:
                                                  case 966:
                                                  case 968:
                                                  case 969:
                                                  case 970:
                                                    goto LABEL_2478;
                                                  case 918:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenRel(918): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidMaxCyclesBetweenRel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenRel(918): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 919:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenRel(919): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidMinCyclesBetweenRel_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenRel(919): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 920:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidAuxPerBlock(920): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidAuxPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidAuxPerBlock(920): Cannot add "
                                                    }
                                                          "16 elements to context";
                                                    goto LABEL_2616;
                                                  case 921:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidAuxBetweenRefreshesPerBlock(921): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidAuxBetweenRefreshesPerBlock_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidAuxBetweenRefreshesPerBlock(9"
                                                    }
                                                          "21): Cannot add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 922:
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidRelLockMark", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidRelLockMark(922) cannot add 1"
                                                    }
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 923:
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidAuxLockMark", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidAuxLockMark(923) cannot add 1"
                                                    }
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 930:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenAux(930): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidMaxCyclesBetweenAux_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMaxCyclesBetweenAux(930): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 931:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenAux(931): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidMinCyclesBetweenAux_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidMinCyclesBetweenAux(931): Can"
                                                    }
                                                          "not add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 932:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidLastRelPECycles(932): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidLastRelPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidLastRelPECycles(932): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 933:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidRelQualPECycles(933): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidRelQualPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidRelQualPECycles(933): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 934:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidLastAuxPECycles(934): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidLastAuxPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidLastAuxPECycles(934): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 935:
                                                    if (v14 != 16) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: turboRaidAuxQualPECycles(935): (#16) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x10) {
                                                      unsigned int v18 = 16;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidAuxQualPECycles_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: turboRaidAuxQualPECycles(935): Cannot "
                                                    }
                                                          "add 16 elements to context";
                                                    goto LABEL_2616;
                                                  case 937:
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidPEFailAfterRel", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidPEFailAfterRel(937) cannot ad"
                                                    }
                                                          "d 1 element to context";
                                                    goto LABEL_161;
                                                  case 938:
                                                    if (AddMultipleFieldsToGenericContext(a1, "turboRaidPEFailAfterAux", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: turboRaidPEFailAfterAux(938) cannot ad"
                                                    }
                                                          "d 1 element to context";
                                                    goto LABEL_161;
                                                  case 939:
                                                    if (AddMultipleFieldsToGenericContext(a1, "dvfmVotesCPU", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: dvfmVotesCPU(939) cannot add 1 element to context";
                                                    }
                                                    goto LABEL_161;
                                                  case 940:
                                                    if (AddMultipleFieldsToGenericContext(a1, "dvfmVotesBandwidth", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: dvfmVotesBandwidth(940) cannot add 1 e"
                                                    }
                                                          "lement to context";
                                                    goto LABEL_161;
                                                  case 942:
                                                    if (AddMultipleFieldsToGenericContext(a1, "maxSLCEndurance", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: maxSLCEndurance(942) cannot add 1 element to context";
                                                    }
                                                    goto LABEL_161;
                                                  case 943:
                                                    if (AddMultipleFieldsToGenericContext(a1, "maxMixedEndurance", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: maxMixedEndurance(943) cannot add 1 el"
                                                    }
                                                          "ement to context";
                                                    goto LABEL_161;
                                                  case 944:
                                                    if (AddMultipleFieldsToGenericContext(a1, "maxNativeEndurance", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: maxNativeEndurance(944) cannot add 1 e"
                                                    }
                                                          "lement to context";
                                                    goto LABEL_161;
                                                  case 948:
                                                    if (v14 != 40) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: assertHistory(948): (#40) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x28) {
                                                      unsigned int v18 = 40;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "assertHistory_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: assertHistory(948): Cannot add 40 elements to context";
                                                    }
                                                    goto LABEL_2616;
                                                  case 951:
                                                    if (AddMultipleFieldsToGenericContext(a1, "asp3Support", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: asp3Support(951) cannot add 1 element to context";
                                                    }
                                                    goto LABEL_161;
                                                  case 953:
                                                    if (AddMultipleFieldsToGenericContext(a1, "numCrossTempRaidUecc", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: numCrossTempRaidUecc(953) cannot add 1"
                                                    }
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 961:
                                                    if (AddMultipleFieldsToGenericContext(a1, "osBuildStr", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: osBuildStr(961) cannot add 1 element to context";
                                                    }
                                                    goto LABEL_161;
                                                  case 962:
                                                    if (AddMultipleFieldsToGenericContext(a1, "raidConfig", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: raidConfig(962) cannot add 1 element to context";
                                                    }
                                                    goto LABEL_161;
                                                  case 967:
                                                    if (v14 != 12) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: indTrimFrags(967): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xC) {
                                                      unsigned int v18 = 12;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "indTrimFrags_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: indTrimFrags(967): Cannot add 12 elements to context";
                                                    }
                                                    goto LABEL_2616;
                                                  case 971:
                                                    if (v14 != 12) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: indUsedFrags(971): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xC) {
                                                      unsigned int v18 = 12;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "indUsedFrags_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: indUsedFrags(971): Cannot add 12 elements to context";
                                                    }
                                                    goto LABEL_2616;
                                                  default:
                                                    switch(v12)
                                                    {
                                                      case 996:
                                                        if (AddMultipleFieldsToGenericContext(a1, "clogFindFail", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindFail(996) cannot add 1 element to context";
                                                        }
                                                        goto LABEL_161;
                                                      case 997:
                                                        if (AddMultipleFieldsToGenericContext(a1, "clogFindBlank", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindBlank(997) cannot add 1 el"
                                                        }
                                                              "ement to context";
                                                        goto LABEL_161;
                                                      case 998:
                                                        if (AddMultipleFieldsToGenericContext(a1, "clogFindUnc", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindUnc(998) cannot add 1 element to context";
                                                        }
                                                        goto LABEL_161;
                                                      case 999:
                                                        if (AddMultipleFieldsToGenericContext(a1, "clogFindUnexpected", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogFindUnexpected(999) cannot add"
                                                        }
                                                              " 1 element to context";
                                                        goto LABEL_161;
                                                      case 1001:
                                                        if (v14 != 8) {
                                                          SetAPIErrorMessage("ASPFTLParseBufferToCxt: clogReplayFailReason(1001): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 8) {
                                                          unsigned int v18 = 8;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (AddMultipleFieldsToGenericContext(a1, "clogReplayFailReason_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: clogReplayFailReason(1001): Cannot"
                                                        }
                                                              " add 8 elements to context";
                                                        goto LABEL_2616;
                                                      case 1002:
                                                        if (AddMultipleFieldsToGenericContext(a1, "clogReplayTransientError", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogReplayTransientError(1002) can"
                                                        }
                                                              "not add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1003:
                                                        if (AddMultipleFieldsToGenericContext(a1, "clogReplaySpfError", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: clogReplaySpfError(1003) cannot ad"
                                                        }
                                                              "d 1 element to context";
                                                        goto LABEL_161;
                                                      case 1015:
                                                        if (v14 != 4) {
                                                          SetAPIErrorMessage("ASPFTLParseBufferToCxt: eanEarlyBootUeccPage(1015): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 4) {
                                                          unsigned int v18 = 4;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (AddMultipleFieldsToGenericContext(a1, "eanEarlyBootUeccPage_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: eanEarlyBootUeccPage(1015): Cannot"
                                                        }
                                                              " add 4 elements to context";
                                                        goto LABEL_2616;
                                                      case 1016:
                                                        if (AddMultipleFieldsToGenericContext(a1, "eanEarlyBootNumUeccPages", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanEarlyBootNumUeccPages(1016) can"
                                                        }
                                                              "not add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1017:
                                                        if (AddMultipleFieldsToGenericContext(a1, "eanEarlyBootUeccMultiplane", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanEarlyBootUeccMultiplane(1017) c"
                                                        }
                                                              "annot add 1 element to context";
                                                        goto LABEL_161;
                                                      default:
                                                        goto LABEL_2478;
                                                    }
                                                }
                                              }
                                              if (v12 > 1137)
                                              {
                                                switch(v12)
                                                {
                                                  case 1147:
                                                    if (v14 != 24) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc12(1147): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "gc_concurrent_dw_gc12_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc12(1147): Cannot ad"
                                                    }
                                                          "d 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1148:
                                                    if (v14 != 24) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc1(1148): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "gc_concurrent_dw_gc1_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc1(1148): Cannot add"
                                                    }
                                                          " 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1149:
                                                    if (v14 != 24) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_concurrent_dw_gc2(1149): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "gc_concurrent_dw_gc2_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_concurrent_dw_gc2(1149): Cannot add"
                                                    }
                                                          " 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1150:
                                                  case 1151:
                                                  case 1152:
                                                  case 1153:
                                                  case 1154:
                                                  case 1155:
                                                  case 1156:
                                                  case 1159:
                                                  case 1160:
                                                  case 1161:
                                                  case 1162:
                                                  case 1163:
                                                  case 1164:
                                                  case 1165:
                                                  case 1166:
                                                  case 1167:
                                                  case 1170:
                                                  case 1173:
                                                  case 1174:
                                                  case 1175:
                                                  case 1176:
                                                  case 1177:
                                                  case 1178:
                                                    goto LABEL_2478;
                                                  case 1157:
                                                    if (AddMultipleFieldsToGenericContext(a1, "eanMaxForceROTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: eanMaxForceROTimeMs(1157) cannot add 1"
                                                    }
                                                          " element to context";
                                                    break;
                                                  case 1158:
                                                    if (AddMultipleFieldsToGenericContext(a1, "eanMaxForceRORecoTimeMs", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: eanMaxForceRORecoTimeMs(1158) cannot a"
                                                    }
                                                          "dd 1 element to context";
                                                    break;
                                                  case 1168:
                                                    if (v14 != 2) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectPERemovalTotalCost(1168): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 2) {
                                                      unsigned int v18 = 2;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "poDetectPERemovalTotalCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectPERemovalTotalCost(1168): Cann"
                                                    }
                                                          "ot add 2 elements to context";
                                                    goto LABEL_2616;
                                                  case 1169:
                                                    if (v14 != 2) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalTotalCost(1169): (#2) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 2) {
                                                      unsigned int v18 = 2;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "poDetectEmptySpotRemovalTotalCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalTotalCost(1169"
                                                    }
                                                          "): Cannot add 2 elements to context";
                                                    goto LABEL_2616;
                                                  case 1171:
                                                    if (v14 != 10) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalAge(1171): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xA) {
                                                      unsigned int v18 = 10;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "poDetectEmptySpotRemovalAge_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectEmptySpotRemovalAge(1171): Can"
                                                    }
                                                          "not add 10 elements to context";
                                                    goto LABEL_2616;
                                                  case 1172:
                                                    if (v14 != 3) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectGBBedMostSevereCost(1172): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 3) {
                                                      unsigned int v18 = 3;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "poDetectGBBedMostSevereCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectGBBedMostSevereCost(1172): Can"
                                                    }
                                                          "not add 3 elements to context";
                                                    goto LABEL_2616;
                                                  case 1179:
                                                    if (v14 != 4) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_cur_dw_gc1(1179): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "gc_cur_dw_gc1_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc1(1179): Cannot add 4 elements to context";
                                                    }
                                                    goto LABEL_2616;
                                                  case 1180:
                                                    if (v14 != 4) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_cur_dw_gc2(1180): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "gc_cur_dw_gc2_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc2(1180): Cannot add 4 elements to context";
                                                    }
                                                    goto LABEL_2616;
                                                  case 1181:
                                                    if (v14 != 4) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_cur_dw_gc3(1181): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "gc_cur_dw_gc3_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_cur_dw_gc3(1181): Cannot add 4 elements to context";
                                                    }
                                                    goto LABEL_2616;
                                                  case 1182:
                                                    if (v14 != 4) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_tot_dw_gc1(1182): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "gc_tot_dw_gc1_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_tot_dw_gc1(1182): Cannot add 4 elements to context";
                                                    }
                                                    goto LABEL_2616;
                                                  case 1183:
                                                    if (v14 != 4) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: gc_tot_dw_gc2(1183): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "gc_tot_dw_gc2_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gc_tot_dw_gc2(1183): Cannot add 4 elements to context";
                                                    }
                                                    goto LABEL_2616;
                                                  case 1184:
                                                    if (AddMultipleFieldsToGenericContext(a1, "unhappy_state", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: unhappy_state(1184) cannot add 1 element to context";
                                                    }
                                                    break;
                                                  case 1185:
                                                    if (AddMultipleFieldsToGenericContext(a1, "unhappy_level", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: unhappy_level(1185) cannot add 1 element to context";
                                                    }
                                                    break;
                                                  default:
                                                    if (v12 != 1138)
                                                    {
                                                      if (v12 != 1189) {
                                                        goto LABEL_2478;
                                                      }
                                                      if ((AddMultipleFieldsToGenericContext(a1, "lastLbaFormatTime", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                                      {
                                                        int v17 = "ASPFTLParseBufferToCxt: lastLbaFormatTime(1189) cannot add"
                                                              " 1 element to context";
                                                        break;
                                                      }
                                                      goto LABEL_162;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "numOfToHappySwitches", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: numOfToHappySwitches(1138) cannot add "
                                                    }
                                                          "1 element to context";
                                                    break;
                                                }
LABEL_161:
                                                SetAPIErrorMessage(v17, a2, a3, a4, a5, a6, a7, a8, v21);
                                                goto LABEL_162;
                                              }
                                              if (v12 <= 1104)
                                              {
                                                if (v12 <= 1041)
                                                {
                                                  if (v12 == 1040)
                                                  {
                                                    if (v14 != 31) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsAgeBinsV2(1040): (#31) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x1F) {
                                                      unsigned int v18 = 31;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if ((AddMultipleFieldsToGenericContext(a1, "bandsAgeBinsV2_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                    {
                                                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBinsV2(1040): Cannot add 31 "
                                                            "elements to context";
                                                      goto LABEL_2616;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (v14 != 31) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsAgeBinsSnapshot(1041): (#31) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x1F) {
                                                      unsigned int v18 = 31;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if ((AddMultipleFieldsToGenericContext(a1, "bandsAgeBinsSnapshot_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                    {
                                                      unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBinsSnapshot(1041): Cannot a"
                                                            "dd 31 elements to context";
                                                      goto LABEL_2616;
                                                    }
                                                  }
                                                  goto LABEL_110;
                                                }
                                                if (v12 == 1042)
                                                {
                                                  if (v14 != 15) {
                                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsAgeBinsReadSectors(1042): (#15) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  }
                                                  if (v14 >= 0xF) {
                                                    unsigned int v18 = 15;
                                                  }
                                                  else {
                                                    unsigned int v18 = v14;
                                                  }
                                                  if ((AddMultipleFieldsToGenericContext(a1, "bandsAgeBinsReadSectors_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                  {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: bandsAgeBinsReadSectors(1042): Cannot "
                                                          "add 15 elements to context";
                                                    goto LABEL_2616;
                                                  }
                                                  goto LABEL_110;
                                                }
                                                if (v12 == 1080)
                                                {
                                                  if ((AddMultipleFieldsToGenericContext(a1, "raidForceClogLoad", (uint64_t)v8, 8u, 1u) & 1) == 0)
                                                  {
                                                    int v17 = "ASPFTLParseBufferToCxt: raidForceClogLoad(1080) cannot add 1 e"
                                                          "lement to context";
                                                    goto LABEL_161;
                                                  }
LABEL_162:
                                                  uint64_t v10 = (v10 + 1);
                                                  goto LABEL_163;
                                                }
                                                goto LABEL_2478;
                                              }
                                              if (v12 > 1115)
                                              {
                                                if (v12 == 1116)
                                                {
                                                  if (v14 != 32) {
                                                    SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcwamp(1116): (#32) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                  }
                                                  if (v14 >= 0x20) {
                                                    unsigned int v18 = 32;
                                                  }
                                                  else {
                                                    unsigned int v18 = v14;
                                                  }
                                                  if ((AddMultipleFieldsToGenericContext(a1, "gcwamp_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                  {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gcwamp(1116): Cannot add 32 elements to context";
                                                    goto LABEL_2616;
                                                  }
                                                  goto LABEL_110;
                                                }
                                                if (v12 == 1137)
                                                {
                                                  if (AddMultipleFieldsToGenericContext(a1, "numOfToUnhappySwitches", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                  int v17 = "ASPFTLParseBufferToCxt: numOfToUnhappySwitches(1137) cannot add "
                                                  }
                                                        "1 element to context";
                                                  goto LABEL_161;
                                                }
LABEL_2478:
                                                switch(v12)
                                                {
                                                  case 1196:
                                                    if (v14 != 5) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectGBBedTotalCost(1196): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 5) {
                                                      unsigned int v18 = 5;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "poDetectGBBedTotalCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectGBBedTotalCost(1196): Cannot a"
                                                    }
                                                          "dd 5 elements to context";
                                                    goto LABEL_2616;
                                                  case 1197:
                                                    if (v14 != 10) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectGBBedAge(1197): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0xA) {
                                                      unsigned int v18 = 10;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "poDetectGBBedAge_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectGBBedAge(1197): Cannot add 10 "
                                                    }
                                                          "elements to context";
                                                    goto LABEL_2616;
                                                  case 1198:
                                                    if (v14 != 3) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: poDetectPERemovalMostSevereCost(1198): (#3) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 3) {
                                                      unsigned int v18 = 3;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "poDetectPERemovalMostSevereCost_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: poDetectPERemovalMostSevereCost(1198):"
                                                    }
                                                          " Cannot add 3 elements to context";
                                                    goto LABEL_2616;
                                                  case 1199:
                                                    if (AddMultipleFieldsToGenericContext(a1, "poDetectCurrentSize", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                    int v17 = "ASPFTLParseBufferToCxt: poDetectCurrentSize(1199) cannot add 1"
                                                    }
                                                          " element to context";
                                                    goto LABEL_161;
                                                  case 1200:
                                                  case 1203:
                                                  case 1204:
                                                  case 1205:
                                                  case 1206:
                                                  case 1207:
                                                  case 1208:
                                                  case 1209:
                                                  case 1210:
                                                  case 1212:
                                                  case 1213:
                                                  case 1214:
                                                  case 1219:
                                                  case 1220:
                                                  case 1221:
                                                  case 1222:
                                                  case 1223:
LABEL_2610:
                                                    if (v14 <= 1) {
                                                      snprintf(__str, 0x20uLL, "Stat_%d");
                                                    }
                                                    else {
                                                      snprintf(__str, 0x20uLL, "Stat_%d_");
                                                    }
                                                    if ((AddMultipleFieldsToGenericContext(a1, __str, (uint64_t)v8, 8u, v14) & 1) == 0)
                                                    {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt %d: Cannot add %d elements to context", a2, a3, a4, a5, a6, a7, a8, v12);
                                                      return v10;
                                                    }
                                                    uint64_t v10 = (v10 + v14);
                                                    break;
                                                  case 1201:
                                                    if (v14 != 4) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcVerticalSuccssfulAlignments(1201): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "gcVerticalSuccssfulAlignments_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gcVerticalSuccssfulAlignments(1201): C"
                                                    }
                                                          "annot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1202:
                                                    if (v14 != 4) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: gcVerticalNoAlignmentDueToMissingSegs(1202): (#4) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 4) {
                                                      unsigned int v18 = 4;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "gcVerticalNoAlignmentDueToMissingSegs_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: gcVerticalNoAlignmentDueToMissingSegs("
                                                    }
                                                          "1202): Cannot add 4 elements to context";
                                                    goto LABEL_2616;
                                                  case 1211:
                                                    if (v14 != 24) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: forcedAllocationSmallEraseQ(1211): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "forcedAllocationSmallEraseQ_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: forcedAllocationSmallEraseQ(1211): Can"
                                                    }
                                                          "not add 24 elements to context";
                                                    goto LABEL_2616;
                                                  case 1215:
                                                    if (v14 != 5) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: hostWritesPerThrottleZone(1215): (#5) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 5) {
                                                      unsigned int v18 = 5;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "hostWritesPerThrottleZone_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: hostWritesPerThrottleZone(1215): Canno"
                                                    }
                                                          "t add 5 elements to context";
                                                    goto LABEL_2616;
                                                  case 1216:
                                                    if (v14 != 24) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: tlcWLPerDipAvgPEC(1216): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "tlcWLPerDipAvgPEC_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: tlcWLPerDipAvgPEC(1216): Cannot add 24"
                                                    }
                                                          " elements to context";
                                                    goto LABEL_2616;
                                                  case 1217:
                                                    if (v14 != 24) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: tlcWLPerDipMaxPEC(1217): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "tlcWLPerDipMaxPEC_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: tlcWLPerDipMaxPEC(1217): Cannot add 24"
                                                    }
                                                          " elements to context";
                                                    goto LABEL_2616;
                                                  case 1218:
                                                    if (v14 != 24) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: tlcWLPerDipMinPEC(1218): (#24) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x18) {
                                                      unsigned int v18 = 24;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "tlcWLPerDipMinPEC_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: tlcWLPerDipMinPEC(1218): Cannot add 24"
                                                    }
                                                          " elements to context";
                                                    goto LABEL_2616;
                                                  case 1224:
                                                    if (v14 != 20) {
                                                      SetAPIErrorMessage("ASPFTLParseBufferToCxt: apfsValidLbaOvershoot(1224): (#20) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                    }
                                                    if (v14 >= 0x14) {
                                                      unsigned int v18 = 20;
                                                    }
                                                    else {
                                                      unsigned int v18 = v14;
                                                    }
                                                    if (AddMultipleFieldsToGenericContext(a1, "apfsValidLbaOvershoot_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                    unsigned int v19 = "ASPFTLParseBufferToCxt: apfsValidLbaOvershoot(1224): Cannot ad"
                                                    }
                                                          "d 20 elements to context";
                                                    goto LABEL_2616;
                                                  default:
                                                    switch(v12)
                                                    {
                                                      case 1232:
                                                        if (AddMultipleFieldsToGenericContext(a1, "eanFastSize", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanFastSize(1232) cannot add 1 element to context";
                                                        }
                                                        goto LABEL_161;
                                                      case 1233:
                                                        if (AddMultipleFieldsToGenericContext(a1, "eanNumSlcEvictions", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanNumSlcEvictions(1233) cannot ad"
                                                        }
                                                              "d 1 element to context";
                                                        goto LABEL_161;
                                                      case 1234:
                                                        if (AddMultipleFieldsToGenericContext(a1, "eanNumForcedCompress", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: eanNumForcedCompress(1234) cannot "
                                                        }
                                                              "add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1235:
                                                      case 1236:
                                                      case 1237:
                                                      case 1238:
                                                      case 1239:
                                                      case 1240:
                                                      case 1242:
                                                      case 1243:
                                                      case 1245:
                                                        goto LABEL_2610;
                                                      case 1241:
                                                        if (v14 != 10) {
                                                          SetAPIErrorMessage("ASPFTLParseBufferToCxt: s2rTimeHisto(1241): (#10) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 0xA) {
                                                          unsigned int v18 = 10;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (AddMultipleFieldsToGenericContext(a1, "s2rTimeHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: s2rTimeHisto(1241): Cannot add 10 "
                                                        }
                                                              "elements to context";
                                                        goto LABEL_2616;
                                                      case 1244:
                                                        if (AddMultipleFieldsToGenericContext(a1, "calendarTimeWentBackward", (uint64_t)v8, 8u, 1u))goto LABEL_162; {
                                                        int v17 = "ASPFTLParseBufferToCxt: calendarTimeWentBackward(1244) can"
                                                        }
                                                              "not add 1 element to context";
                                                        goto LABEL_161;
                                                      case 1246:
                                                        if (v14 != 8) {
                                                          SetAPIErrorMessage("ASPFTLParseBufferToCxt: bandsUeccCrossTempHisto(1246): (#8) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 8) {
                                                          unsigned int v18 = 8;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (AddMultipleFieldsToGenericContext(a1, "bandsUeccCrossTempHisto_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: bandsUeccCrossTempHisto(1246): Can"
                                                        }
                                                              "not add 8 elements to context";
                                                        goto LABEL_2616;
                                                      default:
                                                        if (v12 != 1190) {
                                                          goto LABEL_2610;
                                                        }
                                                        if (v14 != 12) {
                                                          SetAPIErrorMessage("ASPFTLParseBufferToCxt: powerDownTime(1190): (#12) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                        }
                                                        if (v14 >= 0xC) {
                                                          unsigned int v18 = 12;
                                                        }
                                                        else {
                                                          unsigned int v18 = v14;
                                                        }
                                                        if (AddMultipleFieldsToGenericContext(a1, "powerDownTime_", (uint64_t)v8, 8u, v18))goto LABEL_110; {
                                                        unsigned int v19 = "ASPFTLParseBufferToCxt: powerDownTime(1190): Cannot add 12"
                                                        }
                                                              " elements to context";
                                                        break;
                                                    }
                                                    goto LABEL_2616;
                                                }
LABEL_163:
                                                v8 += v14;
                                                v11 -= v14;
                                                goto LABEL_2;
                                              }
                                              if (v12 == 1105)
                                              {
                                                if (v14 != 14) {
                                                  SetAPIErrorMessage("ASPFTLParseBufferToCxt: hostReadSequential(1105): (#14) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                                }
                                                if (v14 >= 0xE) {
                                                  unsigned int v18 = 14;
                                                }
                                                else {
                                                  unsigned int v18 = v14;
                                                }
                                                if ((AddMultipleFieldsToGenericContext(a1, "hostReadSequential_", (uint64_t)v8, 8u, v18) & 1) == 0)
                                                {
                                                  unsigned int v19 = "ASPFTLParseBufferToCxt: hostReadSequential(1105): Cannot add 14 "
                                                        "elements to context";
                                                  goto LABEL_2616;
                                                }
                                                goto LABEL_110;
                                              }
                                              if (v12 != 1106) {
                                                goto LABEL_2478;
                                              }
                                              if (v14 != 14) {
                                                SetAPIErrorMessage("ASPFTLParseBufferToCxt: GCReadSequential(1106): (#14) cfg elements != (%d) buffer elements", a2, a3, a4, a5, a6, a7, a8, v14);
                                              }
                                              if (v14 >= 0xE) {
                                                unsigned int v18 = 14;
                                              }
                                              else {
                                                unsigned int v18 = v14;
                                              }
                                              if (AddMultipleFieldsToGenericContext(a1, "GCReadSequential_", (uint64_t)v8, 8u, v18))
                                              {
LABEL_110:
                                                uint64_t v10 = v18 + v10;
                                                goto LABEL_163;
                                              }
                                              unsigned int v19 = "ASPFTLParseBufferToCxt: GCReadSequential(1106): Cannot add 14 elements to context";
LABEL_2616:
                                              SetAPIErrorMessage(v19, a2, a3, a4, a5, a6, a7, a8, v21);
                                              return v10;
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      }
  }
}

uint64_t AddMultipleFieldsToGenericContext(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 1;
  if (a4 && a5)
  {
    if (a5 == 1)
    {
      if (a4 <= 8)
      {
        __memmove_chk();
        return AddSingleValueToGenericContext(a1, "", a2, 0);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      int v10 = 0;
      int v11 = 0;
      do
      {
        if (a4 <= 8)
        {
          __memmove_chk();
          snprintf(__str, 0x64uLL, "%d", v10);
          __str[100] = 0;
          uint64_t v5 = AddSingleValueToGenericContext(a1, a2, __str, 0) & v5;
        }
        else
        {
          uint64_t v5 = 0;
        }
        int v10 = (unsigned __int16)++v11;
      }
      while ((unsigned __int16)v11 < a5);
    }
  }
  return v5;
}

uint64_t ASPFTLParseStatKeyBufferToCxt(uint64_t a1, unint64_t *a2, unsigned int a3)
{
  uint64_t v5 = 0;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a3 >> 3;
  *(_OWORD *)__str = 0u;
  long long v22 = 0u;
LABEL_2:
  int v7 = -v6;
  while (v7)
  {
    unint64_t v9 = *a2++;
    unsigned int v8 = v9;
    unint64_t v10 = HIDWORD(v9);
    ++v7;
    if (HIDWORD(v9))
    {
      if (v8 != 0xFFFF && v8 <= 0x30000000 && -v7 >= v10)
      {
        if (v10 <= 1) {
          snprintf(__str, 0x20uLL, "Stat_%d");
        }
        else {
          snprintf(__str, 0x20uLL, "Stat_%d_");
        }
        if (AddMultipleFieldsToGenericContext(a1, __str, (uint64_t)a2, 8u, v10))
        {
          uint64_t v5 = (v5 + v10);
          a2 += v10;
          unsigned int v6 = -v7 - v10;
          goto LABEL_2;
        }
        SetAPIErrorMessage("ASPFTLParseBufferToCxt %d: Cannot add %d elements to context", v13, v14, v15, v16, v17, v18, v19, v8);
      }
      return v5;
    }
  }
  return v5;
}

uint64_t ASPMSPParseBufferToCxt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  unint64_t v9 = "ASPMSPParseBufferToCxt: Passed in invalid buffer or empty buffer";
  if (!a2) {
    goto LABEL_1980;
  }
  unsigned int v10 = a3;
  if (!a3) {
    goto LABEL_1980;
  }
  uint64_t v11 = a2;
  uint64_t v8 = 0;
  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_5(4256): Error adding 10 elements to context";
  while (1)
  {
    do
    {
      if (!v10) {
        return v8;
      }
      uint64_t v13 = (unsigned __int16 *)v11;
      uint64_t v14 = *(unsigned __int16 *)(v11 + 2);
      v11 += 4;
      v10 -= 4;
    }
    while (!v14);
    int v15 = *v13;
    if (v15 != 12286) {
      break;
    }
LABEL_461:
    v11 += v14;
    v10 -= v14;
  }
  if (v15 == 12287 || v10 < v14) {
    return v8;
  }
  switch(v15)
  {
    case 4096:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeHard(4096): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeHard", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeHard(4096): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4097:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeFS1_2b(4097): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeFS1_2b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b(4097): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4098:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeFS1_4b(4098): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeFS1_4b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b(4098): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4099:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeHard_fast(4099): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeHard_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeHard_fast(4099): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4100:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeFS1_2b_fast(4100): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeFS1_2b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_2b_fast(4100): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4101:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: passWithTmodeFS1_4b_fast(4101): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "passWithTmodeFS1_4b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: passWithTmodeFS1_4b_fast(4101): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4102:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_EOL(4102): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "numOfCwFailedInTmodeFS2_EOL", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_EOL(4102): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4103:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_DSP_EOL(4103): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "numOfCwFailedInTmodeFS2_DSP_EOL", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfCwFailedInTmodeFS2_DSP_EOL(4103): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4104:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterAcq(4104): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithHardAfterAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterAcq(4104): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4105:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDBFastRead(4105): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "firstReadWasHardWithDefaultBDBFastRead", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDBFastRead(4105): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4106:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDS1(4106): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDS1", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS1(4106): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4107:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDYCE1(4107): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDYCE1", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1(4107): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4108:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDS2(4108): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDS2", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS2(4108): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4109:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDYCE2(4109): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDYCE2", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE2(4109): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4110:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: firstReadWasHardWithAcq(4110): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "firstReadWasHardWithAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithAcq(4110): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4111:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_LSB(4111): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToEOL_LSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_LSB(4111): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4112:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_MSB(4112): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToEOL_MSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_MSB(4112): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4113:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_USB(4113): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToEOL_USB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_USB(4113): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4114:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_LSB(4114): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToSOL_LSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_LSB(4114): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4115:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_MSB(4115): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToSOL_MSB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_MSB(4115): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4116:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_USB(4116): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToSOL_USB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_USB(4116): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4117:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDB(4117): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "firstReadWasHardWithDefaultBDB", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasHardWithDefaultBDB(4117): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4118:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition(4118): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughSyndSumAcquisition", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition(4118): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4119:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip(4119): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip(4119): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4120:
      if (v14 != 44) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: FS2decodedBitFlips(4120): cfg 11 elements; (11*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x30) {
        unsigned int v17 = 11;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "FS2decodedBitFlips", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: FS2decodedBitFlips(4120): Error adding 11 elements to context";
      goto LABEL_1980;
    case 4121:
      if (v14 != 16) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: slipTrackingAfterFs1ForceFailChangedVthInTicksHist(4121): cfg 4 elements; (4*4) cfg by"
      }
          "tes != (%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x14) {
        unsigned int v17 = 4;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "slipTrackingAfterFs1ForceFailChangedVthInTicksHist", v11, 4u, v17))goto LABEL_460; {
      unint64_t v9 = "ASPMSPParseBufferToCxt: slipTrackingAfterFs1ForceFailChangedVthInTicksHist(4121): Error adding 4 elements to context";
      }
      goto LABEL_1980;
    case 4122:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b_fast(4122): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS2_4b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b_fast(4122): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4123:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip_fast(4123): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithHardAfterSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip_fast(4123): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4124:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip_fast(4124): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS12BitAfterSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip_fast(4124): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4125:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip_fast(4125): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS14BitAfterSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip_fast(4125): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4126:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS3_fast(4126): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS3_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS3_fast(4126): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4127:
      if (v14 != 40) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: deepSoft1Decoded(4127): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x2C) {
        unsigned int v17 = 10;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "deepSoft1Decoded", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: deepSoft1Decoded(4127): Error adding 10 elements to context";
      goto LABEL_1980;
    case 4128:
      if (v14 != 40) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: deepSoft2Decoded(4128): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x2C) {
        unsigned int v17 = 10;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "deepSoft2Decoded", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: deepSoft2Decoded(4128): Error adding 10 elements to context";
      goto LABEL_1980;
    case 4129:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b_fast(4129): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS2_2b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b_fast(4129): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4130:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b_fast(4130): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS2_4b_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b_fast(4130): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4131:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip_fast(4131): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughSlip_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSlip_fast(4131): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4132:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3_fast(4132): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS3_fast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3_fast(4132): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4133:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithEXH(4133): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithEXH", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithEXH(4133): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4134:
      if (v14 != 44) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: FS1decodedbitflips(4134): cfg 11 elements; (11*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x30) {
        unsigned int v17 = 11;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "FS1decodedbitflips", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: FS1decodedbitflips(4134): Error adding 11 elements to context";
      goto LABEL_1980;
    case 4135:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readZeroPage(4135): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readZeroPage", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readZeroPage(4135): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4136:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readErasedPage(4136): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readErasedPage", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readErasedPage(4136): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4137:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readFail(4137): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readFail", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readFail(4137): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4138:
      if (v14 != 20) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: numOfSensesWereSentDuringSyndSumAcq(4138): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x18) {
        unsigned int v17 = 5;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "numOfSensesWereSentDuringSyndSumAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringSyndSumAcq(4138): Error adding 5 elements to context";
      goto LABEL_1980;
    case 4139:
      if (v14 != 12) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: numOfSensesWereSentDuringMiniAcq(4139): cfg 3 elements; (3*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 0x10) {
        unsigned int v17 = 3;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "numOfSensesWereSentDuringMiniAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSensesWereSentDuringMiniAcq(4139): Error adding 3 elements to context";
      goto LABEL_1980;
    case 4140:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDefaultMoveFastToNormal(4140): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "bdbDefaultMoveFastToNormal", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDefaultMoveFastToNormal(4140): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4141:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDefaultMoveNormalToFast(4141): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "bdbDefaultMoveNormalToFast", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDefaultMoveNormalToFast(4141): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4142:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithEXH_DSP(4142): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithEXH_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithEXH_DSP(4142): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4143:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDS1_DSP(4143): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDS1_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDS1_DSP(4143): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4144:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readalgoPassWithDYCE1_DSP(4144): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readalgoPassWithDYCE1_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readalgoPassWithDYCE1_DSP(4144): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4145:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: firstReadWasFS2EOL_DSP(4145): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "firstReadWasFS2EOL_DSP", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasFS2EOL_DSP(4145): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4146:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: firstReadWasFS2EOL(4146): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "firstReadWasFS2EOL", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: firstReadWasFS2EOL(4146): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4147:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b(4147): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS2_4b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_4b(4147): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4148:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b(4148): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS2_4b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS2_4b(4148): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4149:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b(4149): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS2_2b", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS2_2b(4149): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4150:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3(4150): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughFS3", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughFS3(4150): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4151:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1(4151): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughDS1", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1(4151): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4152:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS2(4152): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughDS2", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS2(4152): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4153:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip(4153): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithHardAfterSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithHardAfterSlip(4153): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4154:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip(4154): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS12BitAfterSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterSlip(4154): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4155:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip(4155): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS14BitAfterSlip", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterSlip(4155): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4156:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS3(4156): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS3", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS3(4156): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4157:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition_DSP(4157): cfg 1 elements; (1*4) cfg bytes != "
      }
          "(%d) buffer bytes",
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughSyndSumAcquisition_DSP", v11, 4u, v17))goto LABEL_460; {
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughSyndSumAcquisition_DSP(4157): Error adding 1 elements to context";
      }
      goto LABEL_1980;
    case 4158:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterAcq(4158): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS12BitAfterAcq", v11, 4u, v17)) {
        goto LABEL_460;
      }
      unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS12BitAfterAcq(4158): Error adding 1 elements to context";
      goto LABEL_1980;
    case 4159:
      if (v14 != 4) {
        SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterAcq(4159): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
      }
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          v14);
      if (v14 >= 8) {
        unsigned int v17 = 1;
      }
      else {
        unsigned int v17 = v14 >> 2;
      }
      if (!AddMultipleFieldsToGenericContext(a1, "readAlgoPassWithFS14BitAfterAcq", v11, 4u, v17))
      {
        unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassWithFS14BitAfterAcq(4159): Error adding 1 elements to context";
        goto LABEL_1980;
      }
LABEL_460:
      uint64_t v8 = v8 + v17;
      goto LABEL_461;
    default:
      switch(v15)
      {
        case 4160:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1_DSP(4160): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readAlgoPassedThroughDS1_DSP", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readAlgoPassedThroughDS1_DSP(4160): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4161:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: numOfSlipTracking(4161): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "numOfSlipTracking", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: numOfSlipTracking(4161): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4162:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_QSB(4162): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToEOL_QSB", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToEOL_QSB(4162): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4163:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_QSB(4163): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "bdbDynamicMovedToSOL_QSB", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: bdbDynamicMovedToSOL_QSB(4163): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4196:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails100(4196): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails100(4196): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4197:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails101(4197): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails101(4197): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4198:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage100(4198): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage100(4198): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4199:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage101(4199): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage101(4199): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4200:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage100(4200): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "initialReadStage100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage100(4200): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4201:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage102(4201): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage102(4201): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4202:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage101(4202): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "initialReadStage101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage101(4202): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4203:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: nandStageOfLife100(4203): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "nandStageOfLife100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife100(4203): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4204:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: nandStageOfLife101(4204): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "nandStageOfLife101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife101(4204): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4205:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails102(4205): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails102(4205): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4206:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage102(4206): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "initialReadStage102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage102(4206): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4207:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage103(4207): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage103(4207): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4208:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage104(4208): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage104(4208): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4209:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage105(4209): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage105", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage105(4209): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4210:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage106(4210): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage106", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage106(4210): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4211:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter100(4211): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter100(4211): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4212:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter101(4212): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter101", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter101(4212): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4213:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage103(4213): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "initialReadStage103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage103(4213): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4214:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage104(4214): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "initialReadStage104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage104(4214): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4215:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage107(4215): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage107", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage107(4215): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4216:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage108(4216): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage108", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage108(4216): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4217:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: nandStageOfLife102(4217): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "nandStageOfLife102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife102(4217): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4218:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: nandStageOfLife103(4218): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "nandStageOfLife103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife103(4218): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4219:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: nandStageOfLife104(4219): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "nandStageOfLife104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: nandStageOfLife104(4219): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4220:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter102(4220): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter102", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter102(4220): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4221:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter103(4221): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter103(4221): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4222:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter104(4222): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter104(4222): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4223:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter105(4223): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter105", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter105(4223): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4224:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter106(4224): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter106", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter106(4224): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4225:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter107(4225): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter107", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter107(4225): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4226:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter108(4226): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter108", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter108(4226): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4227:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter109(4227): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter109", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter109(4227): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4228:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter110(4228): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter110", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter110(4228): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4229:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter111(4229): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter111", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter111(4229): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4230:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter112(4230): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter112", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter112(4230): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4231:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter113(4231): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter113", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter113(4231): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4232:
          if (v14 != 256) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails108(4232): cfg 64 elements; (64*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x104) {
            unsigned int v17 = 64;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails108", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails108(4232): Error adding 64 elements to context";
          goto LABEL_1980;
        case 4233:
          if (v14 != 256) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails103(4233): cfg 64 elements; (64*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x104) {
            unsigned int v17 = 64;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails103", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails103(4233): Error adding 64 elements to context";
          goto LABEL_1980;
        case 4234:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails104(4234): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails104", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails104(4234): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4235:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails105(4235): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails105", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails105(4235): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4236:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails106(4236): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails106", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails106(4236): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4237:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails107(4237): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails107", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails107(4237): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4238:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage109(4238): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage109", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage109(4238): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4239:
          if (v14 != 16) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage110(4239): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x14) {
            unsigned int v17 = 4;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStage110", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStage110(4239): Error adding 4 elements to context";
          goto LABEL_1980;
        case 4240:
          if (v14 != 80) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfErrorsBin100(4240): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x54) {
            unsigned int v17 = 20;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfErrorsBin100", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfErrorsBin100(4240): Error adding 20 elements to context";
          goto LABEL_1980;
        case 4241:
          if (v14 != 80) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter114(4241): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x54) {
            unsigned int v17 = 20;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter114", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter114(4241): Error adding 20 elements to context";
          goto LABEL_1980;
        case 4242:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter115(4242): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter115", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter115(4242): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4243:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter116(4243): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter116", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter116(4243): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4244:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter117(4244): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter117", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter117(4244): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4245:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter118(4245): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter118", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter118(4245): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4246:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter119(4246): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter119", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter119(4246): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4247:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter120(4247): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter120", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter120(4247): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4248:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter121(4248): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter121", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter121(4248): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4249:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_ref_1(4249): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_ref_1", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_ref_1(4249): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4250:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_ref_2(4250): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_ref_2", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_ref_2(4250): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4251:
          if (v14 != 4) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_outlier(4251): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 8) {
            unsigned int v17 = 1;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_outlier", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_outlier(4251): Error adding 1 elements to context";
          goto LABEL_1980;
        case 4252:
          if (v14 != 40) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_1(4252): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_1", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_1(4252): Error adding 10 elements to context";
          goto LABEL_1980;
        case 4253:
          if (v14 != 40) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_2(4253): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_2", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_2(4253): Error adding 10 elements to context";
          goto LABEL_1980;
        case 4254:
          if (v14 != 40) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_3(4254): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_3", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_3(4254): Error adding 10 elements to context";
          goto LABEL_1980;
        case 4255:
          if (v14 != 40) {
            SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_4(4255): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
          }
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              v14);
          if (v14 >= 0x2C) {
            unsigned int v17 = 10;
          }
          else {
            unsigned int v17 = v14 >> 2;
          }
          if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_4", v11, 4u, v17)) {
            goto LABEL_460;
          }
          unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_4(4255): Error adding 10 elements to context";
          goto LABEL_1980;
        default:
          switch(v15)
          {
            case 12288:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails200(12288): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails200", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails200(12288): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12289:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage200(12289): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage200", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage200(12289): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12290:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage201(12290): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage201", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage201(12290): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12291:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails201(12291): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails201", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails201(12291): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12292:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage202(12292): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage202", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage202(12292): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12293:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage203(12293): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage203", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage203(12293): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12294:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails202(12294): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails202", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails202(12294): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12295:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStageNumOfFails203(12295): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStageNumOfFails203", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStageNumOfFails203(12295): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12296:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage204(12296): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage204", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage204(12296): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12297:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage205(12297): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage205", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage205(12297): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12298:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage206(12298): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage206", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage206(12298): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12299:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage207(12299): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage207", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage207(12299): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12300:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage208(12300): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage208", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage208(12300): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12301:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage209(12301): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage209", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage209(12301): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12302:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage200(12302): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage200", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage200(12302): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12303:
              if (v14 != 32) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage201(12303): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage201", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage201(12303): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12304:
              if (v14 != 32) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage202(12304): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage202", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage202(12304): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12305:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage210(12305): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage210", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage210(12305): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12306:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage211(12306): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage211", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage211(12306): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12307:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage203(12307): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage203", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage203(12307): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12308:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage204(12308): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage204", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage204(12308): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12309:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage205(12309): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage205", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage205(12309): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12310:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage206(12310): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage206", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage206(12310): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12311:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage207(12311): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage207", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage207(12311): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12312:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage208(12312): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage208", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage208(12312): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12313:
              if (v14 != 32) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage209(12313): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage209", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage209(12313): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12314:
              if (v14 != 32) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage210(12314): cfg 4 elements; (4*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x28) {
                unsigned int v18 = 4;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage210", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage210(12314): Error adding 4 elements to context";
              goto LABEL_1980;
            case 12315:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage212(12315): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage212", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage212(12315): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12316:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStage213(12316): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "initialReadStage213", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStage213(12316): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12317:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage211(12317): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage211", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage211(12317): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12318:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage212(12318): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage212", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage212(12318): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12319:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage213(12319): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage213", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage213(12319): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12320:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage214(12320): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage214", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage214(12320): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12321:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: readStage215(12321): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "readStage215", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: readStage215(12321): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12322:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter142(12322): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter142", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter142(12322): Error adding 1 elements to context";
              goto LABEL_1980;
            case 12323:
              if (v14 != 8) {
                SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter143(12323): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
              }
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  v14);
              if (v14 >= 0x10) {
                unsigned int v18 = 1;
              }
              else {
                unsigned int v18 = v14 >> 3;
              }
              if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter143", v11, 8u, v18)) {
                goto LABEL_1372;
              }
              unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter143(12323): Error adding 1 elements to context";
              goto LABEL_1980;
            default:
              switch(v15)
              {
                case 4256:
                  if (v14 != 40) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_5(4256): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (!AddMultipleFieldsToGenericContext(a1, "cbdr_step_5", v11, 4u, v18)) {
                    goto LABEL_1980;
                  }
                  goto LABEL_1372;
                case 4257:
                  if (v14 != 40) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_6(4257): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_6", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_6(4257): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4258:
                  if (v14 != 40) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: cbdr_step_7(4258): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "cbdr_step_7", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: cbdr_step_7(4258): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4259:
                  if (v14 != 80) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter122(4259): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x54) {
                    unsigned int v18 = 20;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter122", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter122(4259): Error adding 20 elements to context";
                  goto LABEL_1980;
                case 4260:
                  if (v14 != 32) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter123(4260): cfg 8 elements; (8*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x24) {
                    unsigned int v18 = 8;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter123", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter123(4260): Error adding 8 elements to context";
                  goto LABEL_1980;
                case 4261:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter124(4261): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter124", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter124(4261): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4262:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter125(4262): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter125", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter125(4262): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4263:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter126(4263): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter126", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter126(4263): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4264:
                  if (v14 != 16) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter127(4264): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter127", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter127(4264): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4265:
                  if (v14 != 16) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter128(4265): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter128", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter128(4265): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4266:
                  if (v14 != 16) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter129(4266): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter129", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter129(4266): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4267:
                  if (v14 != 16) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter130(4267): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter130", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter130(4267): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4268:
                  if (v14 != 16) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter131(4268): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter131", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter131(4268): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4269:
                  if (v14 != 40) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter132(4269): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter132", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter132(4269): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4270:
                  if (v14 != 40) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter133(4270): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x2C) {
                    unsigned int v18 = 10;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter133", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter133(4270): Error adding 10 elements to context";
                  goto LABEL_1980;
                case 4271:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter134(4271): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter134", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter134(4271): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4272:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter135(4272): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter135", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter135(4272): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4273:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter136(4273): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter136", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter136(4273): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4274:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter137(4274): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter137", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter137(4274): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4275:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter138(4275): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter138", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter138(4275): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4276:
                  if (v14 != 16) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter139(4276): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 0x14) {
                    unsigned int v18 = 4;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter139", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter139(4276): Error adding 4 elements to context";
                  goto LABEL_1980;
                case 4277:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter140(4277): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter140", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter140(4277): Error adding 1 elements to context";
                  goto LABEL_1980;
                case 4278:
                  if (v14 != 4) {
                    SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter141(4278): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                  }
                      a2,
                      a3,
                      a4,
                      a5,
                      a6,
                      a7,
                      a8,
                      v14);
                  if (v14 >= 8) {
                    unsigned int v18 = 1;
                  }
                  else {
                    unsigned int v18 = v14 >> 2;
                  }
                  if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter141", v11, 4u, v18)) {
                    goto LABEL_1372;
                  }
                  unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter141(4278): Error adding 1 elements to context";
                  goto LABEL_1980;
                default:
                  switch(v15)
                  {
                    case 4164:
                      if (v14 != 4) {
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: syndSumAcqConvergedToStaticWalls(4164): cfg 1 elements; (1*4) cfg byte"
                      }
                          "s != (%d) buffer bytes",
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 8) {
                        unsigned int v18 = 1;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "syndSumAcqConvergedToStaticWalls", v11, 4u, v18))goto LABEL_1372; {
                      unint64_t v9 = "ASPMSPParseBufferToCxt: syndSumAcqConvergedToStaticWalls(4164): Error adding 1 elements to context";
                      }
                      goto LABEL_1980;
                    case 4165:
                      if (v14 != 60) {
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: DYCE1_Decoded_Bitflips(4165): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x40) {
                        unsigned int v18 = 15;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "DYCE1_Decoded_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE1_Decoded_Bitflips(4165): Error adding 15 elements to context";
                      goto LABEL_1980;
                    case 4166:
                      if (v14 != 80) {
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: DYCE1_Target_Bitflips(4166): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x54) {
                        unsigned int v18 = 20;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "DYCE1_Target_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE1_Target_Bitflips(4166): Error adding 20 elements to context";
                      goto LABEL_1980;
                    case 4167:
                      if (v14 != 60) {
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: DYCE2_Decoded_Bitflips(4167): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x40) {
                        unsigned int v18 = 15;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "DYCE2_Decoded_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE2_Decoded_Bitflips(4167): Error adding 15 elements to context";
                      goto LABEL_1980;
                    case 4168:
                      if (v14 != 80) {
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: DYCE2_Target_Bitflips(4168): cfg 20 elements; (20*4) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x54) {
                        unsigned int v18 = 20;
                      }
                      else {
                        unsigned int v18 = v14 >> 2;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "DYCE2_Target_Bitflips", v11, 4u, v18)) {
                        goto LABEL_1372;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: DYCE2_Target_Bitflips(4168): Error adding 20 elements to context";
                      goto LABEL_1980;
                    default:
                      if (v15 <= 12323)
                      {
                        switch(v15)
                        {
                          case 8193:
                            if (v14 != 20) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: avg_rd_window_size(8193): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "avg_rd_window_size", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: avg_rd_window_size(8193): Error adding 5 elements to context";
                            break;
                          case 8194:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: num_zq_failures(8194): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "num_zq_failures", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_zq_failures(8194): Error adding 1 elements to context";
                            break;
                          case 8195:
                            if (v14 != 64) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: lower_die_temperature(8195): cfg 16 elements; (16*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "lower_die_temperature", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8195): Error adding 16 elements to context";
                            }
                            break;
                          case 8196:
                            if (v14 != 64) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: higher_die_temperature(8196): cfg 16 elements; (16*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "higher_die_temperature", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8196): Error adding 16 elements to context";
                            }
                            break;
                          case 8197:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_sram_flips(8197): cfg 1 elements; (1*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_sram_flips", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_sram_flips(8197): Error adding 1 elements to context";
                            }
                            break;
                          case 8198:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_reset_failures(8198): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_reset_failures", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_reset_failures(8198): Error adding 1 elements to context";
                            }
                            break;
                          case 8199:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: device_config(8199): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "device_config", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: device_config(8199): Error adding 1 elements to context";
                            break;
                          case 8200:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_throttling_events(8200): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_throttling_events", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_throttling_events(8200): Error adding 1 elements to context";
                            }
                            break;
                          case 8201:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: link_speed_recoveries(8201): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "link_speed_recoveries", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: link_speed_recoveries(8201): Error adding 1 elements to context";
                            }
                            break;
                          case 8202:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: fw_updates(8202): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "fw_updates", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: fw_updates(8202): Error adding 1 elements to context";
                            break;
                          case 8203:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: maintenance_backup_to_main(8203): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "maintenance_backup_to_main", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: maintenance_backup_to_main(8203): Error adding 1 elements to context";
                            }
                            break;
                          case 8204:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: maintenance_main_to_backup(8204): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "maintenance_main_to_backup", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: maintenance_main_to_backup(8204): Error adding 1 elements to context";
                            }
                            break;
                          case 8205:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_erase_failures(8205): cfg 1 elements; (1*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_erase_failures", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_erase_failures(8205): Error adding 1 elements to context";
                            }
                            break;
                          case 8206:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_program_failures(8206): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_program_failures", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_program_failures(8206): Error adding 1 elements to context";
                            }
                            break;
                          case 8207:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_read_verify_failures(8207): cfg 1 elements; (1*4) cfg"
                            }
                                " bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_read_verify_failures", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_verify_failures(8207): Error adding 1 elements to context";
                            }
                            break;
                          case 8208:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_read_failures(8208): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_read_failures", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_failures(8208): Error adding 1 elements to context";
                            }
                            break;
                          case 8209:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_refresh(8209): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_refresh", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_refresh(8209): Error adding 1 elements to context";
                            break;
                          case 8210:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_convert_to_main(8210): cfg 1 elements; (1*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_convert_to_main", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_convert_to_main(8210): Error adding 1 elements to context";
                            }
                            break;
                          case 8211:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_block_read_source_changed(8211): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "boot_block_read_source_changed", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_block_read_source_changed(8211): Error adding 1 elements to context";
                            }
                            break;
                          case 8212:
                            if (v14 != 16) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: open_blocks_hist(8212): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x14) {
                              unsigned int v18 = 4;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "open_blocks_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: open_blocks_hist(8212): Error adding 4 elements to context";
                            break;
                          case 8213:
                            if (v14 != 24) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8213): cfg 6 elements; (6*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x1C) {
                              unsigned int v18 = 6;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "random_read_hit_ratio_hist", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8213): Error adding 6 elements to context";
                            }
                            break;
                          case 8214:
                            if (v14 != 20) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_hist(8214): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "active_time_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_hist(8214): Error adding 5 elements to context";
                            break;
                          case 8215:
                            if (v14 != 8) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: rd_retraining_failures(8215): cfg 2 elements; (2*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "rd_retraining_failures", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_retraining_failures(8215): Error adding 2 elements to context";
                            }
                            break;
                          case 8216:
                            if (v14 != 8) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: wr_retraining_failures(8216): cfg 2 elements; (2*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "wr_retraining_failures", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: wr_retraining_failures(8216): Error adding 2 elements to context";
                            }
                            break;
                          case 8217:
                            if (v14 != 20) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: auto_skip(8217): cfg 5 elements; (5*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "auto_skip", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: auto_skip(8217): Error adding 5 elements to context";
                            break;
                          case 8218:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_dcc_pass_after_retry(8218): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_dcc_pass_after_retry", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_dcc_pass_after_retry(8218): Error adding 1 elements to context";
                            }
                            break;
                          case 8219:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_dcc_failures(8219): cfg 1 elements; (1*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_dcc_failures", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_dcc_failures(8219): Error adding 1 elements to context";
                            }
                            break;
                          case 8220:
                            if (v14 != 28) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: open_blocks_hist(8220): cfg 7 elements; (7*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "open_blocks_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: open_blocks_hist(8220): Error adding 7 elements to context";
                            break;
                          case 8221:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: max_size_open_blocks_list(8221): cfg 1 elements; (1*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "max_size_open_blocks_list", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_size_open_blocks_list(8221): Error adding 1 elements to context";
                            }
                            break;
                          case 8222:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: gps_max_num_of_failures(8222): cfg 1 elements; (1*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "gps_max_num_of_failures", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: gps_max_num_of_failures(8222): Error adding 1 elements to context";
                            }
                            break;
                          case 8223:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: gps_num_of_failures_max_overflow(8223): cfg 1 elements; (1*4) cf"
                            }
                                "g bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "gps_num_of_failures_max_overflow", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: gps_num_of_failures_max_overflow(8223): Error adding 1 elements to context";
                            }
                            break;
                          case 8224:
                            if (v14 != 32) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_hist(8224): cfg 8 elements; (8*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x24) {
                              unsigned int v18 = 8;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "active_time_hist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_hist(8224): Error adding 8 elements to context";
                            break;
                          case 8225:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: num_auto_program_cache_terminations(8225): cfg 1 elements; (1*4)"
                            }
                                " cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "num_auto_program_cache_terminations", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_auto_program_cache_terminations(8225): Error adding 1 elements to context";
                            }
                            break;
                          case 8226:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_of_read_cache_auto_terminations(8226): cfg 1 elements; (1"
                            }
                                "*4) cfg bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "number_of_read_cache_auto_terminations", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: number_of_read_cache_auto_terminations(8226): Error adding 1 el"
                            }
                                 "ements to context";
                            break;
                          case 8227:
                            if (v14 != 28) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: external_etags_usage_hist(8227): cfg 7 elements; (7*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "external_etags_usage_hist", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: external_etags_usage_hist(8227): Error adding 7 elements to context";
                            }
                            break;
                          case 8228:
                            if (v14 != 16) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: internal_etags_usage_hist(8228): cfg 4 elements; (4*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x14) {
                              unsigned int v18 = 4;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "internal_etags_usage_hist", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: internal_etags_usage_hist(8228): Error adding 4 elements to context";
                            }
                            break;
                          case 8229:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: max_heap_usage(8229): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "max_heap_usage", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_heap_usage(8229): Error adding 1 elements to context";
                            break;
                          case 8230:
                            if (v14 != 24) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: rom_num_hard_resets(8230): cfg 6 elements; (6*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x1C) {
                              unsigned int v18 = 6;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "rom_num_hard_resets", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rom_num_hard_resets(8230): Error adding 6 elements to context";
                            }
                            break;
                          case 8231:
                            if (v14 != 64) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: lower_die_temperature(8231): cfg 16 elements; (16*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "lower_die_temperature", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8231): Error adding 16 elements to context";
                            }
                            break;
                          case 8232:
                            if (v14 != 64) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: higher_die_temperature(8232): cfg 16 elements; (16*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x44) {
                              unsigned int v18 = 16;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "higher_die_temperature", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8232): Error adding 16 elements to context";
                            }
                            break;
                          case 8233:
                            if (v14 != 24) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8233): cfg 6 elements; (6*4) cfg byte"
                            }
                                "s != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x1C) {
                              unsigned int v18 = 6;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "random_read_hit_ratio_hist", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_hit_ratio_hist(8233): Error adding 6 elements to context";
                            }
                            break;
                          case 8234:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: msp_number_sram_flips(8234): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "msp_number_sram_flips", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: msp_number_sram_flips(8234): Error adding 1 elements to context";
                            }
                            break;
                          case 8235:
                            if (v14 != 28) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_time_normal_power(8235): cfg 7 elements; (7*4) cfg bytes !="
                            }
                                " (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "boot_time_normal_power", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_time_normal_power(8235): Error adding 7 elements to context";
                            }
                            break;
                          case 8236:
                            if (v14 != 28) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: boot_time_low_power(8236): cfg 7 elements; (7*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x20) {
                              unsigned int v18 = 7;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "boot_time_low_power", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: boot_time_low_power(8236): Error adding 7 elements to context";
                            }
                            break;
                          case 8237:
                            if (v14 != 40) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_bw_pg_hist(8237): cfg 10 elements; (10*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x2C) {
                              unsigned int v18 = 10;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "active_time_bw_pg_hist", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_hist(8237): Error adding 10 elements to context";
                            }
                            break;
                          case 8238:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_bw_pg_min(8238): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "active_time_bw_pg_min", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_min(8238): Error adding 1 elements to context";
                            }
                            break;
                          case 8239:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_bw_pg_max(8239): cfg 1 elements; (1*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "active_time_bw_pg_max", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_max(8239): Error adding 1 elements to context";
                            }
                            break;
                          case 8240:
                            if (v14 != 20) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: mdll_relative_offset(8240): cfg 5 elements; (5*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "mdll_relative_offset", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: mdll_relative_offset(8240): Error adding 5 elements to context";
                            }
                            break;
                          case 8241:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: num_pg_regrets(8241): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "num_pg_regrets", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: num_pg_regrets(8241): Error adding 1 elements to context";
                            break;
                          case 8242:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: spi_image_overall_duration_acc(8242): cfg 1 elements; (1*4) cfg "
                            }
                                "bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "spi_image_overall_duration_acc", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_overall_duration_acc(8242): Error adding 1 elements to context";
                            }
                            break;
                          case 8243:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_acc(8243): cfg 1 elements; (1*4) cfg"
                            }
                                " bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "spi_image_cw_fetch_duration_acc", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_acc(8243): Error adding 1 elements to context";
                            }
                            break;
                          case 8244:
                            if (v14 != 20) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_hist(8244): cfg 5 elements; (5*4) cf"
                            }
                                "g bytes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "spi_image_cw_fetch_duration_hist", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_image_cw_fetch_duration_hist(8244): Error adding 5 elements to context";
                            }
                            break;
                          default:
                            switch(v15)
                            {
                              case 4279:
                                if (v14 != 16) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: fs1_4b_fail(4279): cfg 4 elements; (4*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x14) {
                                  unsigned int v18 = 4;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "fs1_4b_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: fs1_4b_fail(4279): Error adding 4 elements to context";
                                break;
                              case 4280:
                                if (v14 != 16) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: fs1_4b_fast_fail(4280): cfg 4 elements; (4*4) cfg bytes != ("
                                }
                                    "%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x14) {
                                  unsigned int v18 = 4;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "fs1_4b_fast_fail_", v11, 4u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: fs1_4b_fast_fail(4280): Error adding 4 elements to context";
                                }
                                break;
                              case 4281:
                                if (v14 != 40) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: dyce_decoded_bit_flips(4281): cfg 10 elements; (10*4) cfg by"
                                }
                                    "tes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "dyce_decoded_bit_flips_", v11, 4u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: dyce_decoded_bit_flips(4281): Error adding 10 elements to context";
                                }
                                break;
                              case 4282:
                                if (v14 != 60) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: slip_bch(4282): cfg 15 elements; (15*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x40) {
                                  unsigned int v18 = 15;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "slip_bch_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: slip_bch(4282): Error adding 15 elements to context";
                                break;
                              case 4283:
                                if (v14 != 40) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: read_fail(4283): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "read_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: read_fail(4283): Error adding 10 elements to context";
                                break;
                              case 4284:
                                if (v14 != 40) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: tr_read_fail(4284): cfg 10 elements; (10*4) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "tr_read_fail_", v11, 4u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_read_fail(4284): Error adding 10 elements to context";
                                break;
                              case 4285:
                                if (v14 != 40) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: tr_aux_bfs_percent(4285): cfg 10 elements; (10*4) cfg bytes "
                                }
                                    "!= (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x2C) {
                                  unsigned int v18 = 10;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "tr_aux_bfs_percent_", v11, 4u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_aux_bfs_percent(4285): Error adding 10 elements to context";
                                }
                                break;
                              case 4286:
                                if (v14 != 20) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: tr_reconstruct_pass_step(4286): cfg 5 elements; (5*4) cfg by"
                                }
                                    "tes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x18) {
                                  unsigned int v18 = 5;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "tr_reconstruct_pass_step_", v11, 4u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_reconstruct_pass_step(4286): Error adding 5 elements to context";
                                }
                                break;
                              case 4287:
                                if (v14 != 4) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: tr_reconstruct_num(4287): cfg 1 elements; (1*4) cfg bytes !="
                                }
                                    " (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 8) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 2;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "tr_reconstruct_num", v11, 4u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: tr_reconstruct_num(4287): Error adding 1 elements to context";
                                }
                                break;
                              default:
                                goto LABEL_1403;
                            }
                            goto LABEL_1980;
                        }
                        goto LABEL_1980;
                      }
                      if (v15 == 12326)
                      {
                        if (v14 != 8) {
                          SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStageParameter2(12326): cfg 1 elements; (1*8) cfg bytes !"
                        }
                            "= (%d) buffer bytes",
                            a2,
                            a3,
                            a4,
                            a5,
                            a6,
                            a7,
                            a8,
                            v14);
                        if (v14 >= 0x10) {
                          unsigned int v18 = 1;
                        }
                        else {
                          unsigned int v18 = v14 >> 3;
                        }
                        if (!AddMultipleFieldsToGenericContext(a1, "initialReadStageParameter2", v11, 8u, v18))
                        {
                          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStageParameter2(12326): Error adding 1 elements to context";
                          goto LABEL_1980;
                        }
                        goto LABEL_1372;
                      }
                      if (v15 == 12325)
                      {
                        if (v14 != 8) {
                          SetAPIErrorMessage("ASPMSPParseBufferToCxt: initialReadStageParameter1(12325): cfg 1 elements; (1*8) cfg bytes !"
                        }
                            "= (%d) buffer bytes",
                            a2,
                            a3,
                            a4,
                            a5,
                            a6,
                            a7,
                            a8,
                            v14);
                        if (v14 >= 0x10) {
                          unsigned int v18 = 1;
                        }
                        else {
                          unsigned int v18 = v14 >> 3;
                        }
                        if (!AddMultipleFieldsToGenericContext(a1, "initialReadStageParameter1", v11, 8u, v18))
                        {
                          unint64_t v9 = "ASPMSPParseBufferToCxt: initialReadStageParameter1(12325): Error adding 1 elements to context";
                          goto LABEL_1980;
                        }
                        goto LABEL_1372;
                      }
                      if (v15 != 12324)
                      {
LABEL_1403:
                        switch(v15)
                        {
                          case 8245:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: spi_num_uses(8245): cfg 1 elements; (1*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "spi_num_uses", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: spi_num_uses(8245): Error adding 1 elements to context";
                            break;
                          case 8246:
                            if (v14 != 20) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: e2e_error_count_tmode(8246): cfg 5 elements; (5*4) cfg bytes != "
                            }
                                "(%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x18) {
                              unsigned int v18 = 5;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "e2e_error_count_tmode", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: e2e_error_count_tmode(8246): Error adding 5 elements to context";
                            }
                            break;
                          case 8247:
                            if (v14 != 36) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: rd_window_dist(8247): cfg 9 elements; (9*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x28) {
                              unsigned int v18 = 9;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "rd_window_dist", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_window_dist(8247): Error adding 9 elements to context";
                            break;
                          case 8248:
                            if (v14 != 36) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: extended_rd_window_diff_dist(8248): cfg 9 elements; (9*4) cfg by"
                            }
                                "tes != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x28) {
                              unsigned int v18 = 9;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "extended_rd_window_diff_dist", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: extended_rd_window_diff_dist(8248): Error adding 9 elements to context";
                            }
                            break;
                          case 8249:
                            if (v14 != 8) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: rd_retraining_failures_v2(8249): cfg 2 elements; (2*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "rd_retraining_failures_v2", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_retraining_failures_v2(8249): Error adding 2 elements to context";
                            }
                            break;
                          case 8250:
                            if (v14 != 120) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: lower_die_temperature(8250): cfg 30 elements; (30*4) cfg bytes !"
                            }
                                "= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x7C) {
                              unsigned int v18 = 30;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "lower_die_temperature", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: lower_die_temperature(8250): Error adding 30 elements to context";
                            }
                            break;
                          case 8251:
                            if (v14 != 120) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: higher_die_temperature(8251): cfg 30 elements; (30*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x7C) {
                              unsigned int v18 = 30;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "higher_die_temperature", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: higher_die_temperature(8251): Error adding 30 elements to context";
                            }
                            break;
                          case 8252:
                            if (v14 != 36) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: rd_window_dist_single_die(8252): cfg 9 elements; (9*4) cfg bytes"
                            }
                                " != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x28) {
                              unsigned int v18 = 9;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "rd_window_dist_single_die", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: rd_window_dist_single_die(8252): Error adding 9 elements to context";
                            }
                            break;
                          case 8253:
                            if (v14 != 16) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: parallel_slip_drops_hist(8253): cfg 4 elements; (4*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0x14) {
                              unsigned int v18 = 4;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "parallel_slip_drops_hist", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: parallel_slip_drops_hist(8253): Error adding 4 elements to context";
                            }
                            break;
                          case 8254:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: sys_halt_max_latency(8254): cfg 1 elements; (1*4) cfg bytes != ("
                            }
                                "%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "sys_halt_max_latency", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_max_latency(8254): Error adding 1 elements to context";
                            }
                            break;
                          case 8255:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: sys_halt_max_latency_opcode(8255): cfg 1 elements; (1*4) cfg byt"
                            }
                                "es != (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "sys_halt_max_latency_opcode", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_max_latency_opcode(8255): Error adding 1 elements to context";
                            }
                            break;
                          case 8256:
                            if (v14 != 4) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: channel_halt_max_latency(8256): cfg 1 elements; (1*4) cfg bytes "
                            }
                                "!= (%d) buffer bytes",
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 8) {
                              unsigned int v18 = 1;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "channel_halt_max_latency", v11, 4u, v18))goto LABEL_1372; {
                            unint64_t v9 = "ASPMSPParseBufferToCxt: channel_halt_max_latency(8256): Error adding 1 elements to context";
                            }
                            break;
                          case 8257:
                            if (v14 != 8) {
                              SetAPIErrorMessage("ASPMSPParseBufferToCxt: max_heap_usage_v2(8257): cfg 2 elements; (2*4) cfg bytes != (%d) buffer bytes",
                            }
                                a2,
                                a3,
                                a4,
                                a5,
                                a6,
                                a7,
                                a8,
                                v14);
                            if (v14 >= 0xC) {
                              unsigned int v18 = 2;
                            }
                            else {
                              unsigned int v18 = v14 >> 2;
                            }
                            if (AddMultipleFieldsToGenericContext(a1, "max_heap_usage_v2", v11, 4u, v18)) {
                              goto LABEL_1372;
                            }
                            unint64_t v9 = "ASPMSPParseBufferToCxt: max_heap_usage_v2(8257): Error adding 2 elements to context";
                            break;
                          default:
                            switch(v15)
                            {
                              case 16384:
                                if (v14 != 8) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: fw_version_identifier(16384): cfg 1 elements; (1*8) cfg byte"
                                }
                                    "s != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "fw_version_identifier", v11, 8u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: fw_version_identifier(16384): Error adding 1 elements to context";
                                }
                                break;
                              case 16385:
                                if (v14 != 40) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: random_read_size_ratio(16385): cfg 5 elements; (5*8) cfg byt"
                                }
                                    "es != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x30) {
                                  unsigned int v18 = 5;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "random_read_size_ratio", v11, 8u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: random_read_size_ratio(16385): Error adding 5 elements to context";
                                }
                                break;
                              case 16386:
                                if (v14 != 8) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: number_gracefull_read_terminations(16386): cfg 1 elements; ("
                                }
                                    "1*8) cfg bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "number_gracefull_read_terminations", v11, 8u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: number_gracefull_read_terminations(16386): Error adding 1 e"
                                }
                                     "lements to context";
                                break;
                              case 16387:
                                if (v14 != 8) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: active_time_bw_pg_acc(16387): cfg 1 elements; (1*8) cfg byte"
                                }
                                    "s != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "active_time_bw_pg_acc", v11, 8u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: active_time_bw_pg_acc(16387): Error adding 1 elements to context";
                                }
                                break;
                              case 16388:
                                if (v14 != 8) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: num_pg_events(16388): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                                }
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "num_pg_events", v11, 8u, v18)) {
                                  goto LABEL_1372;
                                }
                                unint64_t v9 = "ASPMSPParseBufferToCxt: num_pg_events(16388): Error adding 1 elements to context";
                                break;
                              case 16389:
                                if (v14 != 128) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: algo_queue_depth(16389): cfg 16 elements; (16*8) cfg bytes !"
                                }
                                    "= (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x88) {
                                  unsigned int v18 = 16;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "algo_queue_depth", v11, 8u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: algo_queue_depth(16389): Error adding 16 elements to context";
                                }
                                break;
                              case 16390:
                                if (v14 != 128) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: parallel_slip_hist(16390): cfg 16 elements; (16*8) cfg bytes"
                                }
                                    " != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x88) {
                                  unsigned int v18 = 16;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "parallel_slip_hist", v11, 8u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: parallel_slip_hist(16390): Error adding 16 elements to context";
                                }
                                break;
                              case 16391:
                                if (v14 != 48) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: sys_halt_latency_hist(16391): cfg 6 elements; (6*8) cfg byte"
                                }
                                    "s != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x38) {
                                  unsigned int v18 = 6;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "sys_halt_latency_hist", v11, 8u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: sys_halt_latency_hist(16391): Error adding 6 elements to context";
                                }
                                break;
                              case 16392:
                                if (v14 != 48) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: channel_halt_latency_hist(16392): cfg 6 elements; (6*8) cfg "
                                }
                                    "bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x38) {
                                  unsigned int v18 = 6;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "channel_halt_latency_hist", v11, 8u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: channel_halt_latency_hist(16392): Error adding 6 elements to context";
                                }
                                break;
                              case 16393:
                                if (v14 != 8) {
                                  SetAPIErrorMessage("ASPMSPParseBufferToCxt: num_idle_die_read_cache_terminate(16393): cfg 1 elements; (1"
                                }
                                    "*8) cfg bytes != (%d) buffer bytes",
                                    a2,
                                    a3,
                                    a4,
                                    a5,
                                    a6,
                                    a7,
                                    a8,
                                    v14);
                                if (v14 >= 0x10) {
                                  unsigned int v18 = 1;
                                }
                                else {
                                  unsigned int v18 = v14 >> 3;
                                }
                                if (AddMultipleFieldsToGenericContext(a1, "num_idle_die_read_cache_terminate", v11, 8u, v18))goto LABEL_1372; {
                                unint64_t v9 = "ASPMSPParseBufferToCxt: num_idle_die_read_cache_terminate(16393): Error adding 1 el"
                                }
                                     "ements to context";
                                break;
                              default:
                                goto LABEL_461;
                            }
                            goto LABEL_1980;
                        }
                        goto LABEL_1980;
                      }
                      if (v14 != 8) {
                        SetAPIErrorMessage("ASPMSPParseBufferToCxt: dspExceptionParameter144(12324): cfg 1 elements; (1*8) cfg bytes != (%d) buffer bytes",
                      }
                          a2,
                          a3,
                          a4,
                          a5,
                          a6,
                          a7,
                          a8,
                          v14);
                      if (v14 >= 0x10) {
                        unsigned int v18 = 1;
                      }
                      else {
                        unsigned int v18 = v14 >> 3;
                      }
                      if (AddMultipleFieldsToGenericContext(a1, "dspExceptionParameter144", v11, 8u, v18))
                      {
LABEL_1372:
                        uint64_t v8 = v8 + v18;
                        goto LABEL_461;
                      }
                      unint64_t v9 = "ASPMSPParseBufferToCxt: dspExceptionParameter144(12324): Error adding 1 elements to context";
LABEL_1980:
                      SetAPIErrorMessage(v9, a2, a3, a4, a5, a6, a7, a8, v20);
                      return v8;
                  }
              }
          }
      }
  }
}

uint64_t AddSingleValueToGenericContext(uint64_t result, const char *a2, const char *a3, uint64_t a4)
{
  if (result)
  {
    int v7 = (void *)result;
    uint64_t v8 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x102004060B2607BuLL);
    unint64_t v9 = malloc_type_calloc(1uLL, 0x78uLL, 0x102004060B2607BuLL);
    unsigned int v10 = v9;
    if (v8 && v9)
    {
      uint64_t v11 = v7[1];
      if (v11 && (uint64_t v12 = v7[3]) != 0)
      {
        *(void *)(v11 + 112) = v9;
        uint64_t v13 = (char **)(v12 + 112);
      }
      else
      {
        void *v7 = v9;
        uint64_t v13 = (char **)(v7 + 2);
      }
      *uint64_t v13 = v8;
      v7[1] = v9;
      v7[3] = v8;
      *((void *)v8 + 14) = 0;
      *((void *)v9 + 14) = 0;
      snprintf(v9, 0x63uLL, "%s%s", a2, a3);
      v10[99] = 0;
      snprintf(v8, 0x63uLL, "%llu", a4);
      v8[99] = 0;
      *((void *)v8 + 13) = a4;
      return 1;
    }
    else
    {
      if (v8) {
        free(v8);
      }
      if (v10) {
        free(v10);
      }
      return 0;
    }
  }
  return result;
}

double ReleaseGenericParserCxt(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)a1;
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)v2[14];
        free(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)v4[14];
        free(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t AddSingleValue(void *a1, const char *a2, const char *a3, uint64_t a4)
{
  uint64_t v8 = (char *)malloc_type_malloc(0x78uLL, 0x102004060B2607BuLL);
  unint64_t v9 = malloc_type_malloc(0x78uLL, 0x102004060B2607BuLL);
  unsigned int v10 = v9;
  uint64_t v11 = a1[1];
  if (v11 && (uint64_t v12 = a1[3]) != 0)
  {
    *(void *)(v11 + 112) = v9;
    uint64_t v13 = (char **)(v12 + 112);
  }
  else
  {
    *a1 = v9;
    uint64_t v13 = (char **)(a1 + 2);
  }
  *uint64_t v13 = v8;
  a1[1] = v9;
  a1[3] = v8;
  *((void *)v8 + 14) = 0;
  v9[14] = 0;
  snprintf((char *)v9, 0x63uLL, "%s%s", a2, a3);
  *((unsigned char *)v10 + 99) = 0;
  uint64_t result = snprintf(v8, 0x63uLL, "%llu", a4);
  v8[99] = 0;
  *((void *)v8 + 13) = a4;
  return result;
}

BOOL ASPParseSnapshotBufferWithInplaceParser(uint64_t a1, uint64_t a2, char *a3, size_t *a4, _DWORD *a5, unsigned int *a6)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)int v74 = 0u;
  long long v75 = 0u;
  if (!a5) {
    return 0;
  }
  int v9 = a5[3];
  size_t v10 = *a4;
  uint64_t v11 = a5[6];
  v73.tv_sec = 0;
  *(void *)&v73.tv_usec = 0;
  *(void *)int v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  gettimeofday(&v73, 0);
  uint64_t v12 = localtime(&v73.tv_sec);
  strftime(v76, 0x18uLL, "%Y-%m-%d %H:%M:%S", v12);
  __sprintf_chk(v74, 0, 0x20uLL, "%s.%03d", v76, v73.tv_usec / 1000);
  unsigned int v13 = snprintf(a3, v10, "Captured at: %s\n", v74);
  size_t v14 = v10 - v13;
  BOOL v15 = v10 <= v13;
  uint64_t v16 = &a3[v13];
  int v69 = a3;
  if (v10 > v13) {
    unsigned int v17 = &a3[v13];
  }
  else {
    unsigned int v17 = a3;
  }
  if (v10 > v13) {
    size_t v18 = v10 - v13;
  }
  else {
    size_t v18 = v10;
  }
  unsigned int v68 = a5;
  if (*a6) {
    goto LABEL_9;
  }
  if (a5[1] >= 6u)
  {
    if (v10 > v13)
    {
      unsigned int v62 = snprintf(&a3[v13], v14, "- ASP Snapshot - \n%s\n");
      goto LABEL_92;
    }
LABEL_94:
    uint64_t v19 = 0;
    BOOL v15 = 1;
    goto LABEL_95;
  }
  if (v10 <= v13) {
    goto LABEL_94;
  }
  unsigned int v62 = snprintf(&a3[v13], v14, "Key: \nT   - Timestamp\nE   - Erased bands during this time interval\nHR  - Host Reads (in 4k sectors)\nHW  - Host Writes (in 4k sectors)\nNR  - Nand Reads (in 4k sectors)\nNW  - Nand Writes (in 4k sectors)\nTH  - Time in Hysteresis in this time interval (in ms)\nGC  - Number of sectors (4k bytes) completed GC in this time interval\nW   - Number of wear level bands completed in this time interval\nBI  - Bands Intermediate (SLC) PendingErase\nBU  - Bands User (MLC) PendingErase\nV   - Number of Free Nodes\nBF  - Buffer Fragments/BufferHighWater\nP   - Percent of time in DoPreempt rather than DoNormal\nH   - Qos Delays: Normal/Extreme\nX   - Successful expedite commands/Failed expedite commands\n"
          "L   - Age of the oldest command in ms (calculated every second)/Qos Interval (in 100us units)\n"
          "C   - Command tags in use by host (Min/Max)S   - Number of free segs\n"
          "U   - Sectors of host unmaps\n"
          "RO  - Num read ops for this time interval: priority0/priority1/...\n"
          "RL  - Total Read Latency (in us) for this time interval: priority0/priority1/...\n"
          "RM  - Max Read Latency (int us) for this time interval: priority0/priority1/...\n"
          "WO  - Num write ops for this time interval: priority0/priority1/...\n"
          "WL  - Total write latency (in us) for this time interval: priority0/priority1/...\n"
          "WM  - Max write latency (in us) for this time interval: priority0/priority1/...\n"
          "\n");
LABEL_92:
  if (v14 <= v62) {
    goto LABEL_94;
  }
  BOOL v15 = 0;
  unsigned int v17 = &v16[v62];
  size_t v18 = v14 - v62;
LABEL_9:
  uint64_t v19 = 0;
  unsigned int v20 = v9 - 1;
  unsigned int v21 = *a6;
  if (*a6 >= v9 - 1 || v15) {
    goto LABEL_95;
  }
  uint64_t v19 = 0;
  uint64_t v23 = a1;
  long long v22 = a5;
  uint64_t v24 = (_DWORD *)((char *)a5 + v11);
  unint64_t v25 = *v24;
  unsigned int v64 = v9 - 1;
  unint64_t v70 = v25;
  while (2)
  {
    uint64_t v72 = v23 + v22[2] * v21;
    if (!*(_DWORD *)(v72 + v24[3])) {
      goto LABEL_83;
    }
    mach_port_t v65 = v19;
    if (!v25) {
      goto LABEL_81;
    }
    unint64_t v26 = 0;
    do
    {
      unsigned int v27 = LOWORD(v24[7 * v26 + 2]);
      if (v27 < 2)
      {
        CFNumberRef v39 = &v24[7 * v26];
        int v42 = *((unsigned __int8 *)v39 + 20);
        uint64_t v40 = (const char *)(v39 + 5);
        int v41 = v42;
        if (!v42) {
          goto LABEL_78;
        }
        __int16 v43 = fmtcheck(v40, "%u");
        unsigned int v44 = snprintf(v17, v18, v43, *(unsigned int *)(v72 + v24[7 * v26 + 3]), v63);
      }
      else
      {
        if (v27 != 2)
        {
          if (v27 == 3)
          {
            uint64_t v28 = &v24[7 * v26];
            unsigned int v29 = v28[4];
            unsigned int v30 = v29 / 0xC;
            unsigned int v71 = (char *)(v28 + 5);
            uint64_t v31 = fmtcheck((const char *)v28 + 20, "%s");
            size_t v32 = snprintf(v17, v18, v31, "O");
            BOOL v33 = v18 <= v32;
            if (v18 <= v32) {
              size_t v32 = 0;
            }
            v17 += v32;
            v18 -= v32;
            if (v29 >= 0xC)
            {
              uint64_t v34 = 0;
              if (v30 <= 1) {
                unsigned int v35 = 1;
              }
              else {
                unsigned int v35 = v29 / 0xC;
              }
              uint64_t v36 = 12 * v35;
              do
              {
                if (v33)
                {
                  BOOL v33 = 1;
                }
                else
                {
                  if (v34) {
                    unsigned int v37 = snprintf(v17, v18, "/%4u");
                  }
                  else {
                    unsigned int v37 = snprintf(v17, v18, "%4u");
                  }
                  if (v18 <= v37)
                  {
                    BOOL v33 = 1;
                  }
                  else
                  {
                    v17 += v37;
                    v18 -= v37;
                    BOOL v33 = 0;
                  }
                }
                v34 += 12;
              }
              while (v36 != v34);
            }
            if (v33)
            {
              char v38 = 1;
            }
            else
            {
              int v48 = fmtcheck(v71, "%s");
              unsigned int v49 = snprintf(v17, v18, v48, "L");
              if (v18 <= v49)
              {
                char v38 = 1;
              }
              else
              {
                v17 += v49;
                v18 -= v49;
                char v38 = 0;
              }
            }
            if (v29 >= 0xC)
            {
              uint64_t v50 = 0;
              if (v30 <= 1) {
                unsigned int v51 = 1;
              }
              else {
                unsigned int v51 = v29 / 0xC;
              }
              uint64_t v52 = 12 * v51;
              do
              {
                if (v38)
                {
                  char v38 = 1;
                }
                else
                {
                  if (v50) {
                    unsigned int v53 = snprintf(v17, v18, "/%7u");
                  }
                  else {
                    unsigned int v53 = snprintf(v17, v18, "%7u");
                  }
                  if (v18 <= v53)
                  {
                    char v38 = 1;
                  }
                  else
                  {
                    v17 += v53;
                    v18 -= v53;
                    char v38 = 0;
                  }
                }
                v50 += 12;
              }
              while (v52 != v50);
            }
            if (v38)
            {
              int v41 = 1;
            }
            else
            {
              int v54 = fmtcheck(v71, "%s");
              unsigned int v55 = snprintf(v17, v18, v54, "M");
              if (v18 <= v55)
              {
                int v41 = 1;
              }
              else
              {
                v17 += v55;
                v18 -= v55;
                int v41 = 0;
              }
            }
            unint64_t v25 = v70;
            if (v29 >= 0xC)
            {
              uint64_t v56 = 0;
              if (v30 <= 1) {
                unsigned int v57 = 1;
              }
              else {
                unsigned int v57 = v30;
              }
              uint64_t v58 = 12 * v57;
              do
              {
                if (v41)
                {
                  int v41 = 1;
                }
                else
                {
                  if (v56) {
                    unsigned int v59 = snprintf(v17, v18, "/%5u");
                  }
                  else {
                    unsigned int v59 = snprintf(v17, v18, "%5u");
                  }
                  if (v18 <= v59)
                  {
                    int v41 = 1;
                  }
                  else
                  {
                    v17 += v59;
                    v18 -= v59;
                    int v41 = 0;
                  }
                }
                v56 += 12;
              }
              while (v58 != v56);
            }
          }
          else
          {
            int v41 = 0;
          }
          goto LABEL_78;
        }
        int v45 = &v24[7 * v26];
        unsigned int v46 = *(_DWORD *)(v72 + v45[3]);
        int v47 = fmtcheck((const char *)v45 + 20, "%u %u");
        unsigned int v44 = snprintf(v17, v18, v47, v46 / 0x3E8uLL, v46 % 0x3E8 / 0xAuLL);
      }
      if (v18 <= v44) {
        goto LABEL_89;
      }
      int v41 = 0;
      v17 += v44;
      v18 -= v44;
LABEL_78:
      ++v26;
    }
    while (v26 < v25 && !v41);
    if ((v41 & 1) == 0)
    {
LABEL_81:
      unsigned int v60 = snprintf(v17, v18, "\n");
      if (v18 > v60)
      {
        v17 += v60;
        v18 -= v60;
        uint64_t v19 = (char *)(v17 - v69);
        uint64_t v23 = a1;
        long long v22 = v68;
        unsigned int v20 = v64;
LABEL_83:
        unsigned int v21 = *a6 + 1;
        *a6 = v21;
        if (v21 >= v20)
        {
          BOOL v15 = 0;
          goto LABEL_95;
        }
        continue;
      }
    }
    break;
  }
LABEL_89:
  ++*a6;
  BOOL v15 = 1;
  uint64_t v19 = v65;
LABEL_95:
  BOOL result = !v15;
  v19[(void)v69] = 0;
  *a4 = (size_t)(v19 + 1);
  return result;
}

uint64_t ASPParseSnapshotBuffer(uint64_t a1, unint64_t a2, char *__str, size_t *a4)
{
  uint64_t v4 = a4;
  unint64_t v8 = *a4;
  unsigned int v9 = snprintf(__str, *a4, "Key: \nT   - Timestamp\nE   - Erased bands during this time interval\nHR  - Host Reads (in 4k sectors)\nHW  - Host Writes (in 4k sectors)\nNR  - Nand Reads (in 4k sectors)\nNW  - Nand Writes (in 4k sectors)\nTH  - Time in Hysteresis in this time interval (in ms)\nGC  - Number of sectors (4k bytes) completed GC in this time interval\nW   - Number of wear level bands completed in this time interval\nBI  - Bands Intermediate (SLC) PendingErase\nBU  - Bands User (MLC) PendingErase\nV   - Number of Free Nodes\nBF  - Buffer Fragments/BufferHighWater\nP   - Percent of time in DoPreempt rather than DoNormal\nH   - Qos Delays: Normal/Extreme\nX   - Successful expedite commands/Failed expedite commands\n"
         "L   - Age of the oldest command in ms (calculated every second)/Qos Interval (in 100us units)\n"
         "C   - Command tags in use by host (Min/Max)S   - Number of free segs\n"
         "U   - Sectors of host unmaps\n"
         "RO  - Num read ops for this time interval: priority0/priority1/...\n"
         "RL  - Total Read Latency (in us) for this time interval: priority0/priority1/...\n"
         "RM  - Max Read Latency (int us) for this time interval: priority0/priority1/...\n"
         "WO  - Num write ops for this time interval: priority0/priority1/...\n"
         "WL  - Total write latency (in us) for this time interval: priority0/priority1/...\n"
         "WM  - Max write latency (in us) for this time interval: priority0/priority1/...\n"
         "\n");
  if (v8 > v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = &__str[v9];
    size_t v12 = v8 - v10;
    if ((a2 / 0xF8))
    {
      uint64_t v80 = (a2 / 0xF8);
      int v81 = v4;
      uint64_t v13 = 0;
      uint64_t v14 = a1 + 68;
      uint64_t v84 = a1 + 76;
      uint64_t v85 = a1 + 72;
      uint64_t v88 = a1;
      uint64_t v82 = a1;
LABEL_4:
      uint64_t v83 = v13;
      BOOL v15 = (int *)(a1 + 248 * v13);
      int v87 = v15[26];
      int v16 = v15[28];
      int v86 = v15[27];
      unsigned int v17 = v15[38];
      int v18 = v15[39];
      int v19 = v15[29];
      int v20 = v15[30];
      int v21 = v15[31];
      int v22 = v15[32];
      int v24 = v15[35];
      int v23 = v15[36];
      int v26 = v15[43];
      int v25 = v15[44];
      int v27 = v15[46];
      int v28 = v15[47];
      int v29 = *v15;
      int v30 = v15[1];
      int v31 = v15[49];
      int v32 = v15[50];
      int v34 = v15[41];
      int v33 = v15[42];
      int v36 = v15[52];
      int v35 = v15[53];
      int v37 = v15[40];
      int v38 = v15[51];
      int v40 = v15[14];
      CFNumberRef v39 = v15 + 14;
      int v79 = v34;
      int v41 = v11;
      unsigned int v42 = snprintf(v11, v12, "T=%04u E=%02u HR=%4u HW=%4u NR=%4u NW=%4u TH=%8u.%02u GC=%4u W=%2u BI=%3u BU=%3u V=%5u BF=%2u/%2u P=%2u H=%2u/%2u X=%2u/%2u L=%3u/%3u C=%2u/%2u S=%4u U=%8u RO=%4u", v29, v87, v86, v16, v19, v20, v17 / 0x3E8, v17 % 0x3E8 / 0xA, v21, v22, v24, v23, v25, v27, v28,
              v30,
              v37,
              v18,
              v31,
              v32,
              v33,
              v26,
              v36,
              v35,
              v79,
              v38,
              v40);
      if (v12 > v42)
      {
        uint64_t v43 = 0;
        unsigned int v44 = &v41[v42];
        size_t v45 = v12 - v42;
        while (1)
        {
          unsigned int v46 = snprintf(v44, v45, "/%4u", *(_DWORD *)(v14 + v43));
          if (v45 <= v46) {
            break;
          }
          v43 += 12;
          v44 += v46;
          v45 -= v46;
          if (v43 == 36)
          {
            unsigned int v47 = snprintf(v44, v45, " RL=%7u", v39[1]);
            if (v45 > v47)
            {
              uint64_t v48 = 0;
              unsigned int v49 = &v44[v47];
              size_t v50 = v45 - v47;
              while (1)
              {
                unsigned int v51 = snprintf(v49, v50, "/%7u", *(_DWORD *)(v85 + v48));
                if (v50 <= v51) {
                  break;
                }
                v48 += 12;
                v49 += v51;
                v50 -= v51;
                if (v48 == 36)
                {
                  unsigned int v52 = snprintf(v49, v50, " RM=%5u", v39[2]);
                  if (v50 > v52)
                  {
                    uint64_t v53 = 0;
                    int v54 = &v49[v52];
                    size_t v55 = v50 - v52;
                    while (1)
                    {
                      unsigned int v56 = snprintf(v54, v55, "/%5u", *(_DWORD *)(v84 + v53));
                      if (v55 <= v56) {
                        break;
                      }
                      v53 += 12;
                      v54 += v56;
                      v55 -= v56;
                      if (v53 == 36)
                      {
                        uint64_t v57 = v82 + 248 * v83;
                        int v59 = *(_DWORD *)(v57 + 8);
                        uint64_t v58 = v57 + 8;
                        unsigned int v60 = snprintf(v54, v55, " WO=%4u", v59);
                        if (v55 > v60)
                        {
                          int v61 = &v54[v60];
                          size_t v62 = v55 - v60;
                          uint64_t v63 = 20;
                          while (1)
                          {
                            unsigned int v64 = snprintf(v61, v62, "/%4u", *(_DWORD *)(v88 + v63));
                            if (v62 <= v64) {
                              break;
                            }
                            v63 += 12;
                            v61 += v64;
                            v62 -= v64;
                            if (v63 == 56)
                            {
                              unsigned int v65 = snprintf(v61, v62, " WL=%7u", *(_DWORD *)(v58 + 4));
                              if (v62 > v65)
                              {
                                uint64_t v66 = &v61[v65];
                                size_t v67 = v62 - v65;
                                uint64_t v68 = 24;
                                while (1)
                                {
                                  unsigned int v69 = snprintf(v66, v67, "/%7u", *(_DWORD *)(v88 + v68));
                                  if (v67 <= v69) {
                                    break;
                                  }
                                  v68 += 12;
                                  v66 += v69;
                                  v67 -= v69;
                                  if (v68 == 60)
                                  {
                                    unsigned int v70 = snprintf(v66, v67, " WM=%5u", *(_DWORD *)(v58 + 8));
                                    if (v67 > v70)
                                    {
                                      unsigned int v71 = &v66[v70];
                                      size_t v72 = v67 - v70;
                                      uint64_t v73 = 28;
                                      while (1)
                                      {
                                        unsigned int v74 = snprintf(v71, v72, "/%5u", *(_DWORD *)(v88 + v73));
                                        if (v72 <= v74) {
                                          break;
                                        }
                                        v73 += 12;
                                        v71 += v74;
                                        v72 -= v74;
                                        if (v73 == 64)
                                        {
                                          unsigned int v75 = snprintf(v71, v72, "\n");
                                          if (v72 <= v75) {
                                            return 0;
                                          }
                                          uint64_t v76 = v75;
                                          uint64_t v11 = &v71[v75];
                                          size_t v12 = v72 - v76;
                                          a1 = v82;
                                          uint64_t v13 = v83 + 1;
                                          v14 += 248;
                                          v84 += 248;
                                          v85 += 248;
                                          v88 += 248;
                                          uint64_t v4 = v81;
                                          if (v83 + 1 != v80) {
                                            goto LABEL_4;
                                          }
                                          goto LABEL_30;
                                        }
                                      }
                                    }
                                    return 0;
                                  }
                                }
                              }
                              return 0;
                            }
                          }
                        }
                        return 0;
                      }
                    }
                  }
                  return 0;
                }
              }
            }
            return 0;
          }
        }
      }
    }
    else
    {
LABEL_30:
      unsigned int v77 = snprintf(v11, v12, "\n");
      if (v77 < v12)
      {
        *v4 += v77 - v12;
        return 1;
      }
    }
  }
  return 0;
}

CFArrayRef ASP_Get_Controller_UID()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = 0;
  TunnelBuffer_simple = (uint64_t *)fetchTunnelBuffer_simple(163, &v9);
  Mutable = 0;
  if (TunnelBuffer_simple)
  {
    unsigned int v2 = v9;
    CFArrayRef Copy = 0;
    if (v9 >= 8)
    {
      unsigned int v4 = v9 >> 3;
      Mutable = CFArrayCreateMutable(0, v9 >> 3, 0);
      if (v2 >= 8)
      {
        uint64_t v5 = TunnelBuffer_simple;
        do
        {
          uint64_t v6 = *v5++;
          snprintf(__str, 0x40uLL, "%016llx", v6);
          CFStringRef v7 = CFStringCreateWithCString(0, __str, 0x8000100u);
          CFArrayAppendValue(Mutable, v7);
          --v4;
        }
        while (v4);
      }
      CFArrayRef Copy = CFArrayCreateCopy(0, Mutable);
    }
    free(TunnelBuffer_simple);
  }
  else
  {
    CFArrayRef Copy = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

CFArrayRef ASP_Get_Nand_ID()
{
  unint64_t v8 = 0;
  TunnelBuffer_simple = (char *)fetchTunnelBuffer_simple(56, &v8);
  Mutable = 0;
  if (TunnelBuffer_simple)
  {
    unsigned int v2 = v8;
    CFArrayRef Copy = 0;
    if (v8 >= 8)
    {
      unsigned int v4 = v8 >> 3;
      Mutable = CFArrayCreateMutable(0, v8 >> 3, 0);
      if (v2 >= 8)
      {
        uint64_t v5 = TunnelBuffer_simple;
        do
        {
          CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt64Type, v5);
          CFArrayAppendValue(Mutable, v6);
          v5 += 8;
          --v4;
        }
        while (v4);
      }
      CFArrayRef Copy = CFArrayCreateCopy(0, Mutable);
    }
    free(TunnelBuffer_simple);
  }
  else
  {
    CFArrayRef Copy = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

uint64_t asp_data_extraction_helper(unsigned int a1, void *a2, void *a3)
{
  uint64_t v12 = 0;
  if (!a2 || !a3)
  {
    unsigned int v4 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v5 = "Error: Exporting data must output to buffer externally!\n";
    size_t v6 = 56;
    goto LABEL_6;
  }
  if (a1 <= 1)
  {
    unsigned int v4 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v5 = "Error: system counters only supported on OSX\n";
    size_t v6 = 45;
LABEL_6:
    fwrite(v5, v6, 1uLL, v4);
    return 0;
  }
  signed int v8 = a1 - 3;
  if (a1 - 3 >= 7)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error: Not supported option %d\n", a1);
    return 0;
  }
  int v10 = dword_1D2B02A70[v8];
  TunnelBuffer = fetchTunnelBuffer(0, v10, qword_1D2B02A38[v8], &v12, 0, 0);
  *a2 = TunnelBuffer;
  if (TunnelBuffer)
  {
    *a3 = v12;
    return 1;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error: Failed to get tunnel buffer for cmd option %d.\n", v10);
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t getStatsMagazineBufferFromPast(char **a1, int a2, int a3, void *a4, void *a5)
{
  if (a3) {
    int v6 = 10;
  }
  else {
    int v6 = 13;
  }
  uint64_t v10 = 0;
  if (a4 && a5)
  {
    TunnelBufferWithInVal = fetchTunnelBufferWithInVal(a1, v6, 0, a2, &v10, 0, 0);
    *a4 = TunnelBufferWithInVal;
    if (TunnelBufferWithInVal)
    {
      *a5 = v10;
      return 1;
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error: Failed to get tunnel buffer for cmd option %d.\n", v6);
      uint64_t result = 0;
      *a5 = 0;
    }
  }
  else
  {
    fwrite("Error: Exporting data must output to buffer externally!\n", 0x38uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    return 0;
  }
  return result;
}

CFDictionaryRef ASP_GetIndirectionTableStatistics()
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  int v18 = (void *)IND_POOL_KEY;
  uint64_t v14 = 0;
  CFDictionaryRef TunnelBuffer_simple = (const __CFDictionary *)fetchTunnelBuffer_simple(10, &v14);
  CFDictionaryRef v1 = TunnelBuffer_simple;
  if (TunnelBuffer_simple)
  {
    float v15 = 0.0;
    keys[0] = (void *)IND_POOL_SIZE_KEY;
    keys[1] = (void *)IND_POOL_FREE_KEY;
    keys[2] = (void *)IND_POOL_FULL_KEY;
    if ((v14 & 0xFFFFFFF8) != 0)
    {
      int v2 = 0;
      int v3 = 0;
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      CFDictionaryRef v6 = TunnelBuffer_simple;
      do
      {
        unint64_t v9 = *(void *)v6;
        CFStringRef v7 = (unint64_t *)((char *)v6 + 8);
        unint64_t v8 = v9;
        if (v9 == 12)
        {
          unint64_t v4 = *v7;
          int v2 = 1;
        }
        else if (v8 == 13)
        {
          unint64_t v5 = *v7;
          int v3 = 1;
        }
        if (v2 & v3) {
          break;
        }
        CFDictionaryRef v6 = (const __CFDictionary *)&v7[HIDWORD(v8)];
      }
      while (v6 < (const __CFDictionary *)((char *)TunnelBuffer_simple + (v14 & 0xFFFFFFF8)));
      unint64_t v16 = v4;
      unint64_t valuePtr = v5;
      if (v5) {
        float v15 = 1.0 - (float)((float)v4 / (float)v5);
      }
    }
    else
    {
      unint64_t v16 = 0;
      unint64_t valuePtr = 0;
    }
    values = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    CFTypeRef cf = CFNumberCreate(0, kCFNumberSInt64Type, &v16);
    CFTypeRef v21 = CFNumberCreate(0, kCFNumberFloat32Type, &v15);
    uint64_t v10 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFDictionaryRef v12 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFRelease(values);
    CFRelease(cf);
    CFRelease(v21);
    free(v1);
    keys[0] = v12;
    CFDictionaryRef v1 = CFDictionaryCreate(0, (const void **)&v18, (const void **)keys, 1, v10, v11);
    CFRelease(keys[0]);
  }
  return v1;
}

CFDictionaryRef ASP_GetNandPerfStats()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v0 = malloc_type_calloc(1uLL, 0x2000uLL, 0xE89B26ACuLL);
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    CFDictionaryRef v2 = 0;
    if (populateTunnelOutputBufferWithoutSizeQuery(0, 770, 0, v0, 0x2000uLL, 0, 0))
    {
      *(_OWORD *)keys = xmmword_1E6929CB0;
      unsigned int v17 = @"ind_size_bytes";
      memset(values, 0, sizeof(values));
      memset(&v18, 0, 512);
      int v3 = statfs("/private/var", &v18);
      uint64_t v4 = 0;
      if (!v3)
      {
        uint64_t v4 = v18.f_blocks * v18.f_bsize;
        if (v4) {
          uint64_t v4 = 100 * v18.f_bsize * (v18.f_blocks - v18.f_bavail) / v4;
        }
      }
      uint64_t v5 = 0;
      *(void *)&v18.f_bsize = v4;
      uint64_t v6 = -1;
      uint64_t v7 = -1;
      do
      {
        unint64_t v8 = v1[v5];
        if (!v8) {
          break;
        }
        uint64_t v9 = v5 + 1;
        if (v8 == 12)
        {
          uint64_t v7 = v1[v9];
        }
        else if (v8 == 13)
        {
          uint64_t v6 = v1[v9];
        }
        uint64_t v5 = HIDWORD(v8) + v9;
      }
      while (v5 < 1024);
      uint64_t v10 = 0;
      v18.f_blocks = v7;
      v18.f_bfree = v6;
      do
      {
        if (*((void *)&v18.f_bsize + v10) == -1)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Missing perf stat at idx %d", v10);
          CFDictionaryRef v2 = 0;
          goto LABEL_21;
        }
        ++v10;
      }
      while (v10 != 3);
      uint64_t v11 = 0;
      v18.f_blocks = 100 - 100 * v7 / v6;
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        values[v11] = CFNumberCreate(v12, kCFNumberLongLongType, (char *)&v18 + v11 * 8);
        ++v11;
      }
      while (v11 != 3);
      CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
LABEL_21:
      for (uint64_t i = 0; i != 3; ++i)
        CFRelease(keys[i]);
    }
    free(v1);
  }
  else
  {
    fwrite("Cannot allocate buffer.\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    return 0;
  }
  return v2;
}

uint64_t print_asp_magazine_stats(char *a1, int a2, int a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (getStatsMagazineBufferFromPast(0, a2, a3, &v9, &v8))
  {
    if (a3) {
      int v5 = 1;
    }
    else {
      int v5 = 3;
    }
    print_stats_buf(a1, (unint64_t *)v9, v8 >> 3, v5);
    free(v9);
    return 1;
  }
  else
  {
    uint64_t v7 = "all";
    if (a3) {
      uint64_t v7 = "perm";
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error: IO NVMe Smart cmd failed to extract ASP %s stats!\n", v7);
    return 0;
  }
}

uint64_t print_stats_buf(char *__filename, unint64_t *a2, int a3, int a4)
{
  uint64_t v7 = __filename;
  if (__filename)
  {
    uint64_t v8 = fopen(__filename, "a");
    if (!v8) {
      return fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open %s\n", v7);
    }
  }
  else
  {
    uint64_t v8 = (FILE *)*MEMORY[0x1E4F143D8];
  }
  fwrite("NAND stats:\n", 0xCuLL, 1uLL, v8);
  uint64_t result = fwrite("===========\n", 0xCuLL, 1uLL, v8);
  if (!a3) {
    goto LABEL_3139;
  }
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v436 = 0;
  unint64_t v437 = 0;
  *(void *)v435 = a4 & 3;
  while (1)
  {
    unint64_t v16 = *a2;
    float v15 = a2 + 1;
    int v14 = v16;
    unsigned int v17 = a3 - 1;
    unint64_t v438 = HIDWORD(v16);
    if (v17 < HIDWORD(v16)) {
      break;
    }
    if (v14 > 49)
    {
      if (v14 > 128)
      {
        if (v14 == 129)
        {
          unint64_t v11 = *v15;
          goto LABEL_31;
        }
        if (v14 == 677)
        {
          unint64_t v10 = *v15;
          goto LABEL_31;
        }
      }
      else
      {
        if (v14 == 50)
        {
          *(void *)&v435[4] = *v15;
          goto LABEL_31;
        }
        if (v14 == 84)
        {
          unint64_t v12 = *v15;
          goto LABEL_31;
        }
      }
    }
    else if (v14 > 19)
    {
      if (v14 == 20)
      {
        unint64_t v436 = *v15;
        goto LABEL_31;
      }
      if (v14 == 49)
      {
        unint64_t v13 = *v15;
        goto LABEL_31;
      }
    }
    else
    {
      if (v14 == 1)
      {
        uint64_t result = fprintf(v8, "%20s:\t0x%llx\n");
        goto LABEL_32;
      }
      if (v14 == 4)
      {
        unint64_t v437 = *v15;
LABEL_31:
        uint64_t result = fprintf(v8, "%20s:\t%llu\n");
        goto LABEL_32;
      }
    }
    if ((a4 & 1) != 0 && v14 == 678 || (a4 & 1) != 0 && v14 == 679) {
      goto LABEL_31;
    }
    if ((a4 & 1) != 0 && v14 == 680)
    {
      unsigned int v433 = v17;
      unint64_t v18 = v13;
      unint64_t v19 = v11;
      uint64_t result = fprintf(v8, "%20s:\n", "magazineFWVersion");
      if (v438 >= 3) {
        uint64_t v20 = 3;
      }
      else {
        uint64_t v20 = v438;
      }
      if (v20)
      {
        unint64_t v431 = v10;
        for (uint64_t i = 0; i != v20; ++i)
          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i, v15[i]);
        unint64_t v10 = v431;
      }
      unint64_t v11 = v19;
      unint64_t v13 = v18;
      unsigned int v17 = v433;
      goto LABEL_32;
    }
    if ((a4 & 1) != 0 && v14 == 2
      || (a4 & 1) != 0 && v14 == 3
      || (a4 & 1) != 0 && v14 == 5
      || (a4 & 1) != 0 && v14 == 6
      || (a4 & 1) != 0 && v14 == 27
      || (a4 & 1) != 0 && v14 == 99
      || (a4 & 1) != 0 && v14 == 107
      || (a4 & 1) != 0 && v14 == 1066
      || (a4 & 1) != 0 && v14 == 191
      || (a4 & 1) != 0 && v14 == 7)
    {
      goto LABEL_31;
    }
    unint64_t v434 = v11;
    int v432 = a4;
    if ((a4 & 1) == 0 || v14 != 8)
    {
      int v22 = v7;
      unint64_t v23 = v10;
      if ((v432 & 1) != 0 && v14 == 9
        || (v432 & 1) != 0 && v14 == 10
        || (v432 & 1) != 0 && v14 == 11
        || (v432 & 1) != 0 && v14 == 12
        || (v432 & 1) != 0 && v14 == 895
        || (v432 & 1) != 0 && v14 == 13
        || (v432 & 2) != 0 && v14 == 739)
      {
LABEL_81:
        uint64_t result = fprintf(v8, "%20s:\t%llu\n");
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 14)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hostWriteLogHisto");
        if (v438 >= 0xA) {
          uint64_t v24 = 10;
        }
        else {
          uint64_t v24 = v438;
        }
        if (v24)
        {
          for (uint64_t j = 0; j != v24; ++j)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", j, v15[j]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 15)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hostReadLogHisto");
        if (v438 >= 0xA) {
          uint64_t v26 = 10;
        }
        else {
          uint64_t v26 = v438;
        }
        if (v26)
        {
          for (uint64_t k = 0; k != v26; ++k)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", k, v15[k]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 17
        || (v432 & 1) != 0 && v14 == 18
        || (v432 & 1) != 0 && v14 == 19
        || (v432 & 1) != 0 && v14 == 916
        || (v432 & 1) != 0 && v14 == 917
        || (v432 & 1) != 0 && v14 == 1024
        || (v432 & 1) != 0 && v14 == 414
        || (v432 & 1) != 0 && v14 == 22
        || (v432 & 1) != 0 && v14 == 23
        || (v432 & 1) != 0 && v14 == 24
        || (v432 & 1) != 0 && v14 == 404
        || (v432 & 1) != 0 && v14 == 817
        || (v432 & 1) != 0 && v14 == 818
        || (v432 & 1) != 0 && v14 == 819
        || (v432 & 1) != 0 && v14 == 820
        || (v432 & 1) != 0 && v14 == 28
        || (v432 & 1) != 0 && v14 == 30
        || (v432 & 1) != 0 && v14 == 31
        || (v432 & 1) != 0 && v14 == 337
        || (v432 & 1) != 0 && v14 == 34
        || (v432 & 1) != 0 && v14 == 92
        || (v432 & 1) != 0 && v14 == 36
        || (v432 & 1) != 0 && v14 == 37
        || (v432 & 1) != 0 && v14 == 190
        || (v432 & 1) != 0 && v14 == 38
        || (v432 & 1) != 0 && v14 == 39
        || (v432 & 1) != 0 && v14 == 41
        || (v432 & 1) != 0 && v14 == 42
        || (v432 & 1) != 0 && v14 == 43
        || (v432 & 1) != 0 && v14 == 44
        || (v432 & 1) != 0 && v14 == 996
        || (v432 & 1) != 0 && v14 == 997
        || (v432 & 1) != 0 && v14 == 998
        || (v432 & 1) != 0 && v14 == 999
        || (v432 & 1) != 0 && v14 == 45
        || (v432 & 1) != 0 && v14 == 334
        || (v432 & 2) != 0 && v14 == 198
        || (v432 & 2) != 0 && v14 == 46
        || (v432 & 1) != 0 && v14 == 47
        || (v432 & 1) != 0 && v14 == 379
        || (v432 & 1) != 0 && v14 == 48
        || (v432 & 2) != 0 && v14 == 51
        || (v432 & 2) != 0 && v14 == 52
        || (v432 & 2) != 0 && v14 == 53)
      {
        goto LABEL_81;
      }
      if ((v432 & 2) != 0 && v14 == 54)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "ECBins");
        if (v438 >= 0x64) {
          uint64_t v28 = 100;
        }
        else {
          uint64_t v28 = v438;
        }
        if (v28)
        {
          for (uint64_t m = 0; m != v28; ++m)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", m, v15[m]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 55)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "RCBins");
        if (v438 >= 0x64) {
          uint64_t v30 = 100;
        }
        else {
          uint64_t v30 = v438;
        }
        if (v30)
        {
          for (uint64_t n = 0; n != v30; ++n)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", n, v15[n]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 56
        || (v432 & 2) != 0 && v14 == 57
        || (v432 & 2) != 0 && v14 == 58
        || (v432 & 2) != 0 && v14 == 791
        || (v432 & 1) != 0 && v14 == 1189)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 1190)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "powerDownTime");
        if (v438 >= 0xB) {
          uint64_t v32 = 11;
        }
        else {
          uint64_t v32 = v438;
        }
        if (v32)
        {
          for (iuint64_t i = 0; ii != v32; ++ii)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", ii, v15[ii]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 1244) {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 90)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "qosPerCmdQ");
        if (v438 >= 0xA0) {
          uint64_t v34 = 160;
        }
        else {
          uint64_t v34 = v438;
        }
        if (v34)
        {
          for (juint64_t j = 0; jj != v34; ++jj)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", jj, v15[jj]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 91)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "maxQosPerCmdQ");
        if (v438 >= 0xA) {
          uint64_t v36 = 10;
        }
        else {
          uint64_t v36 = v438;
        }
        if (v36)
        {
          for (kuint64_t k = 0; kk != v36; ++kk)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", kk, v15[kk]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 59
        || (v432 & 2) != 0 && v14 == 60
        || (v432 & 2) != 0 && v14 == 61
        || (v432 & 2) != 0 && v14 == 62
        || (v432 & 2) != 0 && v14 == 63
        || (v432 & 2) != 0 && v14 == 64
        || (v432 & 2) != 0 && v14 == 65
        || (v432 & 2) != 0 && v14 == 66
        || (v432 & 2) != 0 && v14 == 67
        || (v432 & 2) != 0 && v14 == 68
        || (v432 & 2) != 0 && v14 == 69
        || (v432 & 2) != 0 && v14 == 70
        || (v432 & 2) != 0 && v14 == 109
        || (v432 & 2) != 0 && v14 == 71
        || (v432 & 2) != 0 && v14 == 72
        || (v432 & 1) != 0 && v14 == 73
        || (v432 & 1) != 0 && v14 == 75
        || (v432 & 1) != 0 && v14 == 76
        || (v432 & 1) != 0 && v14 == 77)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 265)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "readCountHisto");
        if (v438 >= 5) {
          uint64_t v38 = 5;
        }
        else {
          uint64_t v38 = v438;
        }
        if (v38)
        {
          for (muint64_t m = 0; mm != v38; ++mm)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", mm, v15[mm]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 80
        || (v432 & 1) != 0 && v14 == 81
        || (v432 & 1) != 0 && v14 == 82
        || (v432 & 1) != 0 && v14 == 1019
        || (v432 & 2) != 0 && v14 == 85
        || (v432 & 2) != 0 && v14 == 86
        || (v432 & 1) != 0 && v14 == 87)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 1215)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hostWritesPerThrottleZone");
        if (v438 >= 5) {
          uint64_t v40 = 5;
        }
        else {
          uint64_t v40 = v438;
        }
        if (v40)
        {
          for (nuint64_t n = 0; nn != v40; ++nn)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", nn, v15[nn]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 93)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "numBandsRefreshedForAgePerTier");
        if (v438 >= 3) {
          uint64_t v42 = 3;
        }
        else {
          uint64_t v42 = v438;
        }
        if (v42)
        {
          for (uint64_t i1 = 0; i1 != v42; ++i1)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i1, v15[i1]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 94)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "bdrDeltaHot");
        if (v438 >= 0x14) {
          uint64_t v44 = 20;
        }
        else {
          uint64_t v44 = v438;
        }
        if (v44)
        {
          for (uint64_t i2 = 0; i2 != v44; ++i2)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i2, v15[i2]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 112
        || (v432 & 1) != 0 && v14 == 95
        || (v432 & 1) != 0 && v14 == 96
        || (v432 & 1) != 0 && v14 == 381
        || (v432 & 1) != 0 && v14 == 130
        || (v432 & 1) != 0 && v14 == 97
        || (v432 & 1) != 0 && v14 == 98
        || (v432 & 4) != 0 && v14 == 106
        || (v432 & 4) != 0 && v14 == 100
        || (v432 & 4) != 0 && v14 == 101
        || (v432 & 4) != 0 && v14 == 102
        || (v432 & 4) != 0 && v14 == 103
        || (v432 & 4) != 0 && v14 == 104
        || (v432 & 4) != 0 && v14 == 105
        || (v432 & 2) != 0 && v14 == 110)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 113)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "bandsPerHostFlow");
        if (v438 >= 4) {
          uint64_t v46 = 4;
        }
        else {
          uint64_t v46 = v438;
        }
        if (v46)
        {
          for (uint64_t i3 = 0; i3 != v46; ++i3)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i3, v15[i3]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 114)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "bandsPerSpecialFlow");
        if (v438 >= 5) {
          uint64_t v48 = 5;
        }
        else {
          uint64_t v48 = v438;
        }
        if (v48)
        {
          for (uint64_t i4 = 0; i4 != v48; ++i4)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i4, v15[i4]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 115)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "secsPerHostFlow");
        if (v438 >= 4) {
          uint64_t v50 = 4;
        }
        else {
          uint64_t v50 = v438;
        }
        if (v50)
        {
          for (uint64_t i5 = 0; i5 != v50; ++i5)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i5, v15[i5]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 116)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "secsPerSpecialFlow");
        if (v438 >= 5) {
          uint64_t v52 = 5;
        }
        else {
          uint64_t v52 = v438;
        }
        if (v52)
        {
          for (uint64_t i6 = 0; i6 != v52; ++i6)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i6, v15[i6]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 118)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "overWritesPerHostFlow");
        if (v438 >= 4) {
          uint64_t v54 = 4;
        }
        else {
          uint64_t v54 = v438;
        }
        if (v54)
        {
          for (uint64_t i7 = 0; i7 != v54; ++i7)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i7, v15[i7]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 119)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "overWritesPerSpecialFlow");
        if (v438 >= 5) {
          uint64_t v56 = 5;
        }
        else {
          uint64_t v56 = v438;
        }
        if (v56)
        {
          for (uint64_t i8 = 0; i8 != v56; ++i8)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i8, v15[i8]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 120)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "padSectorsPerFlow");
        if (v438 >= 0xA) {
          uint64_t v58 = 10;
        }
        else {
          uint64_t v58 = v438;
        }
        if (v58)
        {
          for (uint64_t i9 = 0; i9 != v58; ++i9)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i9, v15[i9]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 121)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "padSizes");
        if (v438 >= 4) {
          uint64_t v60 = 4;
        }
        else {
          uint64_t v60 = v438;
        }
        if (v60)
        {
          for (uint64_t i10 = 0; i10 != v60; ++i10)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i10, v15[i10]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 740) {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 122)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "unmapsPerHostFlow");
        if (v438 >= 4) {
          uint64_t v62 = 4;
        }
        else {
          uint64_t v62 = v438;
        }
        if (v62)
        {
          for (uint64_t i11 = 0; i11 != v62; ++i11)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i11, v15[i11]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 123)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "unmapsPerSpecialFlow");
        if (v438 >= 5) {
          uint64_t v64 = 5;
        }
        else {
          uint64_t v64 = v438;
        }
        if (v64)
        {
          for (uint64_t i12 = 0; i12 != v64; ++i12)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i12, v15[i12]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 124)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "coldestCycle");
        if (v438 >= 2) {
          uint64_t v66 = 2;
        }
        else {
          uint64_t v66 = v438;
        }
        if (v66)
        {
          for (uint64_t i13 = 0; i13 != v66; ++i13)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i13, v15[i13]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 503)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "avgCycle");
        if (v438 >= 2) {
          uint64_t v68 = 2;
        }
        else {
          uint64_t v68 = v438;
        }
        if (v68)
        {
          for (uint64_t i14 = 0; i14 != v68; ++i14)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i14, v15[i14]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 125)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "hottestCycle");
        if (v438 >= 2) {
          uint64_t v70 = 2;
        }
        else {
          uint64_t v70 = v438;
        }
        if (v70)
        {
          for (uint64_t i15 = 0; i15 != v70; ++i15)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i15, v15[i15]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 16
        || (v432 & 1) != 0 && v14 == 126
        || (v432 & 1) != 0 && v14 == 139
        || (v432 & 1) != 0 && v14 == 576
        || (v432 & 1) != 0 && v14 == 604
        || (v432 & 1) != 0 && v14 == 721
        || (v432 & 1) != 0 && v14 == 722
        || (v432 & 1) != 0 && v14 == 723
        || (v432 & 1) != 0 && v14 == 724
        || (v432 & 1) != 0 && v14 == 726
        || (v432 & 1) != 0 && v14 == 140
        || (v432 & 1) != 0 && v14 == 346)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 131)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "errInjCounters");
        if (v438 >= 8) {
          uint64_t v72 = 8;
        }
        else {
          uint64_t v72 = v438;
        }
        if (v72)
        {
          for (uint64_t i16 = 0; i16 != v72; ++i16)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i16, v15[i16]);
        }
        goto LABEL_82;
      }
      if ((v432 & 2) != 0 && v14 == 962
        || (v432 & 1) != 0 && v14 == 132
        || (v432 & 1) != 0 && v14 == 133
        || (v432 & 1) != 0 && v14 == 135
        || (v432 & 1) != 0 && v14 == 388
        || (v432 & 1) != 0 && v14 == 389
        || (v432 & 1) != 0 && v14 == 390
        || (v432 & 1) != 0 && v14 == 391
        || (v432 & 1) != 0 && v14 == 392
        || (v432 & 1) != 0 && v14 == 393
        || (v432 & 1) != 0 && v14 == 394
        || (v432 & 1) != 0 && v14 == 395
        || (v432 & 1) != 0 && v14 == 586
        || (v432 & 1) != 0 && v14 == 587
        || (v432 & 1) != 0 && v14 == 760
        || (v432 & 1) != 0 && v14 == 761
        || (v432 & 1) != 0 && v14 == 762
        || (v432 & 1) != 0 && v14 == 763
        || (v432 & 1) != 0 && v14 == 134
        || (v432 & 1) != 0 && v14 == 400)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 476)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidSuccessfulRecoLbaRange");
        if (v438 >= 2) {
          uint64_t v74 = 2;
        }
        else {
          uint64_t v74 = v438;
        }
        if (v74)
        {
          for (uint64_t i17 = 0; i17 != v74; ++i17)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i17, v15[i17]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 477)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidFailedRecoLbaRange");
        if (v438 >= 2) {
          uint64_t v76 = 2;
        }
        else {
          uint64_t v76 = v438;
        }
        if (v76)
        {
          for (uint64_t i18 = 0; i18 != v76; ++i18)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i18, v15[i18]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 630)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidSuccessfulRecoEAN");
        if (v438 >= 6) {
          uint64_t v78 = 6;
        }
        else {
          uint64_t v78 = v438;
        }
        if (v78)
        {
          for (uint64_t i19 = 0; i19 != v78; ++i19)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i19, v15[i19]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 631)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidFailedRecoEAN");
        if (v438 >= 6) {
          uint64_t v80 = 6;
        }
        else {
          uint64_t v80 = v438;
        }
        if (v80)
        {
          for (uint64_t i20 = 0; i20 != v80; ++i20)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i20, v15[i20]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 644
        || (v432 & 1) != 0 && v14 == 645
        || (v432 & 1) != 0 && v14 == 646
        || (v432 & 1) != 0 && v14 == 647
        || (v432 & 1) != 0 && v14 == 648
        || (v432 & 1) != 0 && v14 == 649
        || (v432 & 1) != 0 && v14 == 864
        || (v432 & 1) != 0 && v14 == 862
        || (v432 & 1) != 0 && v14 == 863
        || (v432 & 2) != 0 && v14 == 813
        || (v432 & 1) != 0 && v14 == 697
        || (v432 & 1) != 0 && v14 == 698
        || (v432 & 1) != 0 && v14 == 712
        || (v432 & 1) != 0 && v14 == 713
        || (v432 & 1) != 0 && v14 == 737
        || (v432 & 1) != 0 && v14 == 738
        || (v432 & 1) != 0 && v14 == 714
        || (v432 & 1) != 0 && v14 == 715
        || (v432 & 1) != 0 && v14 == 716
        || (v432 & 1) != 0 && v14 == 717
        || (v432 & 1) != 0 && v14 == 829)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 891)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidSuccessAuxPartition");
        if (v438 >= 2) {
          uint64_t v82 = 2;
        }
        else {
          uint64_t v82 = v438;
        }
        if (v82)
        {
          for (uint64_t i21 = 0; i21 != v82; ++i21)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i21, v15[i21]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 892)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidFailAuxPartition");
        if (v438 >= 2) {
          uint64_t v84 = 2;
        }
        else {
          uint64_t v84 = v438;
        }
        if (v84)
        {
          for (uint64_t i22 = 0; i22 != v84; ++i22)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i22, v15[i22]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 893)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidClassifyQualPartition");
        if (v438 >= 2) {
          uint64_t v86 = 2;
        }
        else {
          uint64_t v86 = v438;
        }
        if (v86)
        {
          for (uint64_t i23 = 0; i23 != v86; ++i23)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i23, v15[i23]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 894)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "turboRaidClassifyRelPartition");
        if (v438 >= 2) {
          uint64_t v88 = 2;
        }
        else {
          uint64_t v88 = v438;
        }
        if (v88)
        {
          for (uint64_t i24 = 0; i24 != v88; ++i24)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i24, v15[i24]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 900
        || (v432 & 1) != 0 && v14 == 901
        || (v432 & 1) != 0 && v14 == 902
        || (v432 & 1) != 0 && v14 == 903
        || (v432 & 1) != 0 && v14 == 904
        || (v432 & 1) != 0 && v14 == 947
        || (v432 & 1) != 0 && v14 == 1133
        || (v432 & 1) != 0 && v14 == 1134
        || (v432 & 1) != 0 && v14 == 1135
        || (v432 & 1) != 0 && v14 == 1136
        || (v432 & 1) != 0 && v14 == 362
        || (v432 & 1) != 0 && v14 == 396
        || (v432 & 1) != 0 && v14 == 398
        || (v432 & 1) != 0 && v14 == 397
        || (v432 & 1) != 0 && v14 == 399
        || (v432 & 1) != 0 && v14 == 405
        || (v432 & 1) != 0 && v14 == 403
        || (v432 & 1) != 0 && v14 == 573
        || (v432 & 1) != 0 && v14 == 197
        || (v432 & 1) != 0 && v14 == 136
        || (v432 & 1) != 0 && v14 == 137
        || (v432 & 1) != 0 && v14 == 444
        || (v432 & 1) != 0 && v14 == 445
        || (v432 & 1) != 0 && v14 == 964
        || (v432 & 1) != 0 && v14 == 965
        || (v432 & 1) != 0 && v14 == 440
        || (v432 & 1) != 0 && v14 == 960
        || (v432 & 1) != 0 && v14 == 441
        || (v432 & 1) != 0 && v14 == 442
        || (v432 & 1) != 0 && v14 == 443
        || (v432 & 1) != 0 && v14 == 382
        || (v432 & 1) != 0 && v14 == 659
        || (v432 & 1) != 0 && v14 == 172
        || (v432 & 1) != 0 && v14 == 416
        || (v432 & 1) != 0 && v14 == 417)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 406)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructSuccessFlow");
        if (v438 >= 5) {
          uint64_t v90 = 5;
        }
        else {
          uint64_t v90 = v438;
        }
        if (v90)
        {
          for (uint64_t i25 = 0; i25 != v90; ++i25)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i25, v15[i25]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 407)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructFailFlow");
        if (v438 >= 5) {
          uint64_t v92 = 5;
        }
        else {
          uint64_t v92 = v438;
        }
        if (v92)
        {
          for (uint64_t i26 = 0; i26 != v92; ++i26)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i26, v15[i26]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 472
        || (v432 & 1) != 0 && v14 == 473
        || (v432 & 1) != 0 && v14 == 639
        || (v432 & 1) != 0 && v14 == 640)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 469)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructSuccessPartition");
        if (v438 >= 2) {
          uint64_t v94 = 2;
        }
        else {
          uint64_t v94 = v438;
        }
        if (v94)
        {
          for (uint64_t i27 = 0; i27 != v94; ++i27)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i27, v15[i27]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 470)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructFailPartition");
        if (v438 >= 2) {
          uint64_t v96 = 2;
        }
        else {
          uint64_t v96 = v438;
        }
        if (v96)
        {
          for (uint64_t i28 = 0; i28 != v96; ++i28)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i28, v15[i28]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 408
        || (v432 & 1) != 0 && v14 == 409
        || (v432 & 1) != 0 && v14 == 786
        || (v432 & 1) != 0 && v14 == 787
        || (v432 & 1) != 0 && v14 == 410
        || (v432 & 1) != 0 && v14 == 788
        || (v432 & 1) != 0 && v14 == 411
        || (v432 & 1) != 0 && v14 == 510
        || (v432 & 1) != 0 && v14 == 566
        || (v432 & 1) != 0 && v14 == 567
        || (v432 & 1) != 0 && v14 == 570
        || (v432 & 1) != 0 && v14 == 574
        || (v432 & 1) != 0 && v14 == 789
        || (v432 & 1) != 0 && v14 == 681
        || (v432 & 1) != 0 && v14 == 682
        || (v432 & 1) != 0 && v14 == 711
        || (v432 & 1) != 0 && v14 == 790
        || (v432 & 1) != 0 && v14 == 774
        || (v432 & 1) != 0 && v14 == 412
        || (v432 & 1) != 0 && v14 == 471
        || (v432 & 1) != 0 && v14 == 641)
      {
        goto LABEL_81;
      }
      if ((v432 & 1) != 0 && v14 == 798)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailP");
        if (v438 >= 4) {
          uint64_t v98 = 4;
        }
        else {
          uint64_t v98 = v438;
        }
        if (v98)
        {
          for (uint64_t i29 = 0; i29 != v98; ++i29)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i29, v15[i29]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 799)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailUECC");
        if (v438 >= 4) {
          uint64_t v100 = 4;
        }
        else {
          uint64_t v100 = v438;
        }
        if (v100)
        {
          for (uint64_t i30 = 0; i30 != v100; ++i30)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i30, v15[i30]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 804)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailNoSPBX");
        if (v438 >= 4) {
          uint64_t v102 = 4;
        }
        else {
          uint64_t v102 = v438;
        }
        if (v102)
        {
          for (uint64_t i31 = 0; i31 != v102; ++i31)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i31, v15[i31]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 806)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailBlank");
        if (v438 >= 4) {
          uint64_t v104 = 4;
        }
        else {
          uint64_t v104 = v438;
        }
        if (v104)
        {
          for (uint64_t i32 = 0; i32 != v104; ++i32)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i32, v15[i32]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 809)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailUnsup");
        if (v438 >= 4) {
          uint64_t v106 = 4;
        }
        else {
          uint64_t v106 = v438;
        }
        if (v106)
        {
          for (uint64_t i33 = 0; i33 != v106; ++i33)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i33, v15[i33]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 811)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailMpSkip");
        if (v438 >= 4) {
          uint64_t v108 = 4;
        }
        else {
          uint64_t v108 = v438;
        }
        if (v108)
        {
          for (uint64_t i34 = 0; i34 != v108; ++i34)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i34, v15[i34]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 812)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailAbort");
        if (v438 >= 4) {
          uint64_t v110 = 4;
        }
        else {
          uint64_t v110 = v438;
        }
        if (v110)
        {
          for (uint64_t i35 = 0; i35 != v110; ++i35)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i35, v15[i35]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 814)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXFailOther");
        if (v438 >= 4) {
          uint64_t v112 = 4;
        }
        else {
          uint64_t v112 = v438;
        }
        if (v112)
        {
          for (uint64_t i36 = 0; i36 != v112; ++i36)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i36, v15[i36]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 815)
      {
        uint64_t result = fprintf(v8, "%20s:\n", "raidBMXSuccess");
        if (v438 >= 4) {
          uint64_t v114 = 4;
        }
        else {
          uint64_t v114 = v438;
        }
        if (v114)
        {
          for (uint64_t i37 = 0; i37 != v114; ++i37)
            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i37, v15[i37]);
        }
        goto LABEL_82;
      }
      if ((v432 & 1) != 0 && v14 == 184)
      {
        long long v116 = "TempSensorMax";
      }
      else
      {
        if ((v432 & 1) == 0 || v14 != 185)
        {
          if ((v432 & 1) != 0 && v14 == 182
            || (v432 & 1) != 0 && v14 == 353
            || (v432 & 1) != 0 && v14 == 609
            || (v432 & 1) != 0 && v14 == 596
            || (v432 & 1) != 0 && v14 == 597
            || (v432 & 1) != 0 && v14 == 152
            || (v432 & 1) != 0 && v14 == 153
            || (v432 & 1) != 0 && v14 == 154
            || (v432 & 1) != 0 && v14 == 384
            || (v432 & 1) != 0 && v14 == 386
            || (v432 & 1) != 0 && v14 == 657
            || (v432 & 1) != 0 && v14 == 387
            || (v432 & 1) != 0 && v14 == 420
            || (v432 & 1) != 0 && v14 == 438
            || (v432 & 1) != 0 && v14 == 155
            || (v432 & 1) != 0 && v14 == 156
            || (v432 & 1) != 0 && v14 == 158
            || (v432 & 1) != 0 && v14 == 159
            || (v432 & 1) != 0 && v14 == 539
            || (v432 & 1) != 0 && v14 == 540
            || (v432 & 2) != 0 && v14 == 160
            || (v432 & 2) != 0 && v14 == 161
            || (v432 & 2) != 0 && v14 == 163
            || (v432 & 2) != 0 && v14 == 164
            || (v432 & 2) != 0 && v14 == 165
            || (v432 & 1) != 0 && v14 == 141
            || (v432 & 1) != 0 && v14 == 142
            || (v432 & 1) != 0 && v14 == 143
            || (v432 & 1) != 0 && v14 == 144
            || (v432 & 1) != 0 && v14 == 145
            || (v432 & 1) != 0 && v14 == 146
            || (v432 & 1) != 0 && v14 == 187
            || (v432 & 1) != 0 && v14 == 188
            || (v432 & 1) != 0 && v14 == 189
            || (v432 & 1) != 0 && v14 == 147
            || (v432 & 1) != 0 && v14 == 148
            || (v432 & 1) != 0 && v14 == 149
            || (v432 & 1) != 0 && v14 == 183
            || (v432 & 1) != 0 && v14 == 204
            || (v432 & 1) != 0 && v14 == 205
            || (v432 & 1) != 0 && v14 == 206
            || (v432 & 2) != 0 && v14 == 248
            || (v432 & 2) != 0 && v14 == 199
            || (v432 & 1) != 0 && v14 == 200
            || (v432 & 1) != 0 && v14 == 201
            || (v432 & 2) != 0 && v14 == 203)
          {
            goto LABEL_81;
          }
          if ((v432 & 1) != 0 && v14 == 207)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerLevel");
            if (v438 >= 0x10) {
              uint64_t v117 = 16;
            }
            else {
              uint64_t v117 = v438;
            }
            if (v117)
            {
              for (uint64_t i38 = 0; i38 != v117; ++i38)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i38, v15[i38]);
            }
          }
          else if ((v432 & 1) != 0 && v14 == 865)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerLevel");
            if (v438 >= 0x10) {
              uint64_t v119 = 16;
            }
            else {
              uint64_t v119 = v438;
            }
            if (v119)
            {
              for (uint64_t i39 = 0; i39 != v119; ++i39)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i39, v15[i39]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 453)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerReadLevel");
            if (v438 >= 0x10) {
              uint64_t v121 = 16;
            }
            else {
              uint64_t v121 = v438;
            }
            if (v121)
            {
              for (uint64_t i40 = 0; i40 != v121; ++i40)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i40, v15[i40]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 866)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerReadLevel");
            if (v438 >= 0x10) {
              uint64_t v123 = 16;
            }
            else {
              uint64_t v123 = v438;
            }
            if (v123)
            {
              for (uint64_t i41 = 0; i41 != v123; ++i41)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i41, v15[i41]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 454)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "numOfThrottlingEntriesPerWriteLevel");
            if (v438 >= 0x10) {
              uint64_t v125 = 16;
            }
            else {
              uint64_t v125 = v438;
            }
            if (v125)
            {
              for (uint64_t i42 = 0; i42 != v125; ++i42)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i42, v15[i42]);
            }
          }
          else if ((v432 & 2) != 0 && v14 == 867)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "timeOfThrottlingPerWriteLevel");
            if (v438 >= 0x10) {
              uint64_t v127 = 16;
            }
            else {
              uint64_t v127 = v438;
            }
            if (v127)
            {
              for (uint64_t i43 = 0; i43 != v127; ++i43)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i43, v15[i43]);
            }
          }
          else if ((v432 & 1) != 0 && v14 == 213)
          {
            uint64_t result = fprintf(v8, "%20s:\n", "crcInternalReadFail");
            if (v438 >= 8) {
              uint64_t v129 = 8;
            }
            else {
              uint64_t v129 = v438;
            }
            if (v129)
            {
              for (uint64_t i44 = 0; i44 != v129; ++i44)
                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i44, v15[i44]);
            }
          }
          else
          {
            if ((v432 & 1) != 0 && v14 == 217
              || (v432 & 1) != 0 && v14 == 1067
              || (v432 & 1) != 0 && v14 == 221
              || (v432 & 1) != 0 && v14 == 222
              || (v432 & 1) != 0 && v14 == 1221
              || (v432 & 1) != 0 && v14 == 223
              || (v432 & 1) != 0 && v14 == 224
              || (v432 & 1) != 0 && v14 == 1222
              || (v432 & 1) != 0 && v14 == 494)
            {
              goto LABEL_81;
            }
            if ((v432 & 1) != 0 && v14 == 1223)
            {
              uint64_t result = fprintf(v8, "%20s:\n", "RD_closedBlocksTHHist");
              if (v438 >= 0xA) {
                uint64_t v131 = 10;
              }
              else {
                uint64_t v131 = v438;
              }
              if (v131)
              {
                for (uint64_t i45 = 0; i45 != v131; ++i45)
                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i45, v15[i45]);
              }
            }
            else if ((v432 & 1) != 0 && v14 == 229)
            {
              uint64_t result = fprintf(v8, "%20s:\n", "indmbXferCountTo");
              if (v438 >= 2) {
                uint64_t v133 = 2;
              }
              else {
                uint64_t v133 = v438;
              }
              if (v133)
              {
                for (uint64_t i46 = 0; i46 != v133; ++i46)
                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i46, v15[i46]);
              }
            }
            else if ((v432 & 1) != 0 && v14 == 230)
            {
              uint64_t result = fprintf(v8, "%20s:\n", "indmbAccumulatedTimeBetweenXfers");
              if (v438 >= 2) {
                uint64_t v135 = 2;
              }
              else {
                uint64_t v135 = v438;
              }
              if (v135)
              {
                for (uint64_t i47 = 0; i47 != v135; ++i47)
                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i47, v15[i47]);
              }
            }
            else
            {
              if ((v432 & 1) != 0 && v14 == 231
                || (v432 & 1) != 0 && v14 == 232
                || (v432 & 1) != 0 && v14 == 233
                || (v432 & 1) != 0 && v14 == 234)
              {
                goto LABEL_81;
              }
              if ((v432 & 1) != 0 && v14 == 235)
              {
                uint64_t result = fprintf(v8, "%20s:\n", "gracefulBootTimeLogMs");
                if (v438 >= 8) {
                  uint64_t v137 = 8;
                }
                else {
                  uint64_t v137 = v438;
                }
                if (v137)
                {
                  for (uint64_t i48 = 0; i48 != v137; ++i48)
                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i48, v15[i48]);
                }
              }
              else if ((v432 & 1) != 0 && v14 == 236)
              {
                uint64_t result = fprintf(v8, "%20s:\n", "ungracefulBootTimeLogMs");
                if (v438 >= 8) {
                  uint64_t v139 = 8;
                }
                else {
                  uint64_t v139 = v438;
                }
                if (v139)
                {
                  for (uint64_t i49 = 0; i49 != v139; ++i49)
                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i49, v15[i49]);
                }
              }
              else
              {
                if ((v432 & 1) != 0 && v14 == 245
                  || (v432 & 1) != 0 && v14 == 246
                  || (v432 & 1) != 0 && v14 == 247
                  || (v432 & 1) != 0 && v14 == 254)
                {
                  goto LABEL_81;
                }
                if ((v432 & 1) != 0 && v14 == 266)
                {
                  uint64_t result = fprintf(v8, "%20s:\n", "readAmpHisto");
                  if (v438 >= 0x10) {
                    uint64_t v141 = 16;
                  }
                  else {
                    uint64_t v141 = v438;
                  }
                  if (v141)
                  {
                    for (uint64_t i50 = 0; i50 != v141; ++i50)
                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i50, v15[i50]);
                  }
                }
                else
                {
                  if ((v432 & 1) != 0 && v14 == 267) {
                    goto LABEL_81;
                  }
                  if ((v432 & 1) != 0 && v14 == 269)
                  {
                    uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockRefreshSuccess");
                    if (v438 >= 8) {
                      uint64_t v143 = 8;
                    }
                    else {
                      uint64_t v143 = v438;
                    }
                    if (v143)
                    {
                      for (uint64_t i51 = 0; i51 != v143; ++i51)
                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i51, v15[i51]);
                    }
                  }
                  else if ((v432 & 1) != 0 && v14 == 270)
                  {
                    uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockRefreshFail");
                    if (v438 >= 8) {
                      uint64_t v145 = 8;
                    }
                    else {
                      uint64_t v145 = v438;
                    }
                    if (v145)
                    {
                      for (uint64_t i52 = 0; i52 != v145; ++i52)
                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i52, v15[i52]);
                    }
                  }
                  else
                  {
                    if ((v432 & 1) != 0 && v14 == 322
                      || (v432 & 1) != 0 && v14 == 323
                      || (v432 & 1) != 0 && v14 == 271
                      || (v432 & 1) != 0 && v14 == 272
                      || (v432 & 1) != 0 && v14 == 274)
                    {
                      goto LABEL_81;
                    }
                    if ((v432 & 1) != 0 && v14 == 277)
                    {
                      uint64_t result = fprintf(v8, "%20s:\n", "powerBudgetSelect");
                      if (v438 >= 4) {
                        uint64_t v147 = 4;
                      }
                      else {
                        uint64_t v147 = v438;
                      }
                      if (v147)
                      {
                        for (uint64_t i53 = 0; i53 != v147; ++i53)
                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i53, v15[i53]);
                      }
                    }
                    else
                    {
                      if ((v432 & 1) != 0 && v14 == 279) {
                        goto LABEL_81;
                      }
                      if ((v432 & 1) != 0 && v14 == 280)
                      {
                        uint64_t result = fprintf(v8, "%20s:\n", "E2EDPErrorCounters");
                        if (v438 >= 0xC) {
                          uint64_t v149 = 12;
                        }
                        else {
                          uint64_t v149 = v438;
                        }
                        if (v149)
                        {
                          for (uint64_t i54 = 0; i54 != v149; ++i54)
                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i54, v15[i54]);
                        }
                      }
                      else
                      {
                        if ((v432 & 2) != 0 && v14 == 281
                          || (v432 & 2) != 0 && v14 == 282
                          || (v432 & 2) != 0 && v14 == 283
                          || (v432 & 2) != 0 && v14 == 284
                          || (v432 & 2) != 0 && v14 == 285
                          || (v432 & 2) != 0 && v14 == 286
                          || (v432 & 1) != 0 && v14 == 288)
                        {
                          goto LABEL_81;
                        }
                        if ((v432 & 1) != 0 && v14 == 289)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockReadFail");
                          if (v438 >= 0x20) {
                            uint64_t v151 = 32;
                          }
                          else {
                            uint64_t v151 = v438;
                          }
                          if (v151)
                          {
                            for (uint64_t i55 = 0; i55 != v151; ++i55)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i55, v15[i55]);
                          }
                        }
                        else if ((v432 & 1) != 0 && v14 == 290)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockProgFail");
                          if (v438 >= 0x20) {
                            uint64_t v153 = 32;
                          }
                          else {
                            uint64_t v153 = v438;
                          }
                          if (v153)
                          {
                            for (uint64_t i56 = 0; i56 != v153; ++i56)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i56, v15[i56]);
                          }
                        }
                        else if ((v432 & 1) != 0 && v14 == 291)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockEraseFail");
                          if (v438 >= 0x20) {
                            uint64_t v155 = 32;
                          }
                          else {
                            uint64_t v155 = v438;
                          }
                          if (v155)
                          {
                            for (uint64_t i57 = 0; i57 != v155; ++i57)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i57, v15[i57]);
                          }
                        }
                        else if ((v432 & 2) != 0 && v14 == 511)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspbootBlockRefreshCnt");
                          if (v438 >= 0x20) {
                            uint64_t v157 = 32;
                          }
                          else {
                            uint64_t v157 = v438;
                          }
                          if (v157)
                          {
                            for (uint64_t i58 = 0; i58 != v157; ++i58)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i58, v15[i58]);
                          }
                        }
                        else if ((v432 & 2) != 0 && v14 == 516)
                        {
                          uint64_t result = fprintf(v8, "%20s:\n", "mspBootBlockRefreshTime");
                          if (v438 >= 0x20) {
                            uint64_t v159 = 32;
                          }
                          else {
                            uint64_t v159 = v438;
                          }
                          if (v159)
                          {
                            for (uint64_t i59 = 0; i59 != v159; ++i59)
                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i59, v15[i59]);
                          }
                        }
                        else
                        {
                          if ((v432 & 2) != 0 && v14 == 517
                            || (v432 & 2) != 0 && v14 == 777
                            || (v432 & 1) != 0 && v14 == 292)
                          {
                            goto LABEL_81;
                          }
                          if ((v432 & 1) != 0 && v14 == 298)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostReads");
                            if (v438 >= 2) {
                              uint64_t v161 = 2;
                            }
                            else {
                              uint64_t v161 = v438;
                            }
                            if (v161)
                            {
                              for (uint64_t i60 = 0; i60 != v161; ++i60)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i60, v15[i60]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 299)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostReadXacts");
                            if (v438 >= 2) {
                              uint64_t v163 = 2;
                            }
                            else {
                              uint64_t v163 = v438;
                            }
                            if (v163)
                            {
                              for (uint64_t i61 = 0; i61 != v163; ++i61)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i61, v15[i61]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 300)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostWrites");
                            if (v438 >= 2) {
                              uint64_t v165 = 2;
                            }
                            else {
                              uint64_t v165 = v438;
                            }
                            if (v165)
                            {
                              for (uint64_t i62 = 0; i62 != v165; ++i62)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i62, v15[i62]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 301)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostWriteXacts");
                            if (v438 >= 2) {
                              uint64_t v167 = 2;
                            }
                            else {
                              uint64_t v167 = v438;
                            }
                            if (v167)
                            {
                              for (uint64_t i63 = 0; i63 != v167; ++i63)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i63, v15[i63]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 302)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostNumFlushes");
                            if (v438 >= 2) {
                              uint64_t v169 = 2;
                            }
                            else {
                              uint64_t v169 = v438;
                            }
                            if (v169)
                            {
                              for (uint64_t i64 = 0; i64 != v169; ++i64)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i64, v15[i64]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 303)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "perHostNumFences");
                            if (v438 >= 2) {
                              uint64_t v171 = 2;
                            }
                            else {
                              uint64_t v171 = v438;
                            }
                            if (v171)
                            {
                              for (uint64_t i65 = 0; i65 != v171; ++i65)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i65, v15[i65]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 304)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "commitPadSectorsPerFlow");
                            if (v438 >= 0xA) {
                              uint64_t v173 = 10;
                            }
                            else {
                              uint64_t v173 = v438;
                            }
                            if (v173)
                            {
                              for (uint64_t i66 = 0; i66 != v173; ++i66)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i66, v15[i66]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 305)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "wcacheDSOverWrLogSizeCnts");
                            if (v438 >= 0xA) {
                              uint64_t v175 = 10;
                            }
                            else {
                              uint64_t v175 = v438;
                            }
                            if (v175)
                            {
                              for (uint64_t i67 = 0; i67 != v175; ++i67)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i67, v15[i67]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 306)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "wcacheDSOverWrSizeByFlow");
                            if (v438 >= 4) {
                              uint64_t v177 = 4;
                            }
                            else {
                              uint64_t v177 = v438;
                            }
                            if (v177)
                            {
                              for (uint64_t i68 = 0; i68 != v177; ++i68)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i68, v15[i68]);
                            }
                          }
                          else if ((v432 & 1) != 0 && v14 == 307)
                          {
                            uint64_t result = fprintf(v8, "%20s:\n", "CmdRaisePrioiryEvents");
                            if (v438 >= 0xA) {
                              uint64_t v179 = 10;
                            }
                            else {
                              uint64_t v179 = v438;
                            }
                            if (v179)
                            {
                              for (uint64_t i69 = 0; i69 != v179; ++i69)
                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i69, v15[i69]);
                            }
                          }
                          else
                          {
                            if ((v432 & 1) != 0 && v14 == 308
                              || (v432 & 1) != 0 && v14 == 309
                              || (v432 & 1) != 0 && v14 == 310
                              || (v432 & 1) != 0 && v14 == 347)
                            {
                              goto LABEL_81;
                            }
                            if ((v432 & 1) != 0 && v14 == 314)
                            {
                              uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockValidateSuccess");
                              if (v438 >= 8) {
                                uint64_t v181 = 8;
                              }
                              else {
                                uint64_t v181 = v438;
                              }
                              if (v181)
                              {
                                for (uint64_t i70 = 0; i70 != v181; ++i70)
                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i70, v15[i70]);
                              }
                            }
                            else if ((v432 & 1) != 0 && v14 == 315)
                            {
                              uint64_t result = fprintf(v8, "%20s:\n", "numBootBlockValidateFail");
                              if (v438 >= 8) {
                                uint64_t v183 = 8;
                              }
                              else {
                                uint64_t v183 = v438;
                              }
                              if (v183)
                              {
                                for (uint64_t i71 = 0; i71 != v183; ++i71)
                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i71, v15[i71]);
                              }
                            }
                            else if ((v432 & 1) != 0 && v14 == 316)
                            {
                              uint64_t result = fprintf(v8, "%20s:\n", "clogPagesFillingPercentage");
                              if (v438 >= 4) {
                                uint64_t v185 = 4;
                              }
                              else {
                                uint64_t v185 = v438;
                              }
                              if (v185)
                              {
                                for (uint64_t i72 = 0; i72 != v185; ++i72)
                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i72, v15[i72]);
                              }
                            }
                            else
                            {
                              if ((v432 & 2) != 0 && v14 == 317
                                || (v432 & 2) != 0 && v14 == 643
                                || (v432 & 1) != 0 && v14 == 336
                                || (v432 & 1) != 0 && v14 == 318
                                || (v432 & 1) != 0 && v14 == 319
                                || (v432 & 1) != 0 && v14 == 320
                                || (v432 & 1) != 0 && v14 == 321)
                              {
                                goto LABEL_81;
                              }
                              if ((v432 & 1) != 0 && v14 == 324)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bitflipAddr");
                                if (v438 >= 5) {
                                  uint64_t v187 = 5;
                                }
                                else {
                                  uint64_t v187 = v438;
                                }
                                if (v187)
                                {
                                  for (uint64_t i73 = 0; i73 != v187; ++i73)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i73, v15[i73]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 325)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bitflipCount");
                                if (v438 >= 5) {
                                  uint64_t v189 = 5;
                                }
                                else {
                                  uint64_t v189 = v438;
                                }
                                if (v189)
                                {
                                  for (uint64_t i74 = 0; i74 != v189; ++i74)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i74, v15[i74]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 326)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bitflipDupes");
                                if (v438 >= 5) {
                                  uint64_t v191 = 5;
                                }
                                else {
                                  uint64_t v191 = v438;
                                }
                                if (v191)
                                {
                                  for (uint64_t i75 = 0; i75 != v191; ++i75)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i75, v15[i75]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 327)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsMaxTempHisto");
                                if (v438 >= 0x1E) {
                                  uint64_t v193 = 30;
                                }
                                else {
                                  uint64_t v193 = v438;
                                }
                                if (v193)
                                {
                                  for (uint64_t i76 = 0; i76 != v193; ++i76)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i76, v15[i76]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 328)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsMinTempHisto");
                                if (v438 >= 0x1E) {
                                  uint64_t v195 = 30;
                                }
                                else {
                                  uint64_t v195 = v438;
                                }
                                if (v195)
                                {
                                  for (uint64_t i77 = 0; i77 != v195; ++i77)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i77, v15[i77]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 329)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsLifeTimeTempHisto");
                                if (v438 >= 0x1E) {
                                  uint64_t v197 = 30;
                                }
                                else {
                                  uint64_t v197 = v438;
                                }
                                if (v197)
                                {
                                  for (uint64_t i78 = 0; i78 != v197; ++i78)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i78, v15[i78]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 330)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsDeltaTempHisto");
                                if (v438 >= 0x16) {
                                  uint64_t v199 = 22;
                                }
                                else {
                                  uint64_t v199 = v438;
                                }
                                if (v199)
                                {
                                  for (uint64_t i79 = 0; i79 != v199; ++i79)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i79, v15[i79]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 331)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsCrossTempHisto");
                                if (v438 >= 0x2D) {
                                  uint64_t v201 = 45;
                                }
                                else {
                                  uint64_t v201 = v438;
                                }
                                if (v201)
                                {
                                  for (uint64_t i80 = 0; i80 != v201; ++i80)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i80, v15[i80]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 1031)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsUeccTempHisto");
                                if (v438 >= 0x16) {
                                  uint64_t v203 = 22;
                                }
                                else {
                                  uint64_t v203 = v438;
                                }
                                if (v203)
                                {
                                  for (uint64_t i81 = 0; i81 != v203; ++i81)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i81, v15[i81]);
                                }
                              }
                              else if ((v432 & 1) != 0 && v14 == 1246)
                              {
                                uint64_t result = fprintf(v8, "%20s:\n", "bandsUeccCrossTempHisto");
                                if (v438 >= 8) {
                                  uint64_t v205 = 8;
                                }
                                else {
                                  uint64_t v205 = v438;
                                }
                                if (v205)
                                {
                                  for (uint64_t i82 = 0; i82 != v205; ++i82)
                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i82, v15[i82]);
                                }
                              }
                              else
                              {
                                if ((v432 & 2) != 0 && v14 == 603) {
                                  goto LABEL_81;
                                }
                                if ((v432 & 1) != 0 && v14 == 332)
                                {
                                  uint64_t result = fprintf(v8, "%20s:\n", "wcacheWaitLogMs");
                                  if (v438 >= 0xA) {
                                    uint64_t v207 = 10;
                                  }
                                  else {
                                    uint64_t v207 = v438;
                                  }
                                  if (v207)
                                  {
                                    for (uint64_t i83 = 0; i83 != v207; ++i83)
                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i83, v15[i83]);
                                  }
                                }
                                else if ((v432 & 1) != 0 && v14 == 333)
                                {
                                  uint64_t result = fprintf(v8, "%20s:\n", "wcacheDS_segsSortedLogSize");
                                  if (v438 >= 0xA) {
                                    uint64_t v209 = 10;
                                  }
                                  else {
                                    uint64_t v209 = v438;
                                  }
                                  if (v209)
                                  {
                                    for (uint64_t i84 = 0; i84 != v209; ++i84)
                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i84, v15[i84]);
                                  }
                                }
                                else if ((v432 & 1) != 0 && v14 == 468)
                                {
                                  uint64_t result = fprintf(v8, "%20s:\n", "wcacheDirtyAtFlush");
                                  if (v438 >= 0x10) {
                                    uint64_t v211 = 16;
                                  }
                                  else {
                                    uint64_t v211 = v438;
                                  }
                                  if (v211)
                                  {
                                    for (uint64_t i85 = 0; i85 != v211; ++i85)
                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i85, v15[i85]);
                                  }
                                }
                                else
                                {
                                  if ((v432 & 2) != 0 && v14 == 457
                                    || (v432 & 2) != 0 && v14 == 458
                                    || (v432 & 1) != 0 && v14 == 340
                                    || (v432 & 1) != 0 && v14 == 953
                                    || (v432 & 1) != 0 && v14 == 343
                                    || (v432 & 1) != 0 && v14 == 344
                                    || (v432 & 1) != 0 && v14 == 349
                                    || (v432 & 1) != 0 && v14 == 350
                                    || (v432 & 1) != 0 && v14 == 351
                                    || (v432 & 1) != 0 && v14 == 352
                                    || (v432 & 1) != 0 && v14 == 356
                                    || (v432 & 1) != 0 && v14 == 358
                                    || (v432 & 1) != 0 && v14 == 368
                                    || (v432 & 1) != 0 && v14 == 369
                                    || (v432 & 1) != 0 && v14 == 370
                                    || (v432 & 1) != 0 && v14 == 371
                                    || (v432 & 1) != 0 && v14 == 372
                                    || (v432 & 1) != 0 && v14 == 374
                                    || (v432 & 1) != 0 && v14 == 375
                                    || (v432 & 1) != 0 && v14 == 385
                                    || (v432 & 1) != 0 && v14 == 401
                                    || (v432 & 1) != 0 && v14 == 837
                                    || (v432 & 2) != 0 && v14 == 419
                                    || (v432 & 1) != 0 && v14 == 422
                                    || (v432 & 1) != 0 && v14 == 423
                                    || (v432 & 1) != 0 && v14 == 424
                                    || (v432 & 1) != 0 && v14 == 425
                                    || (v432 & 1) != 0 && v14 == 427
                                    || (v432 & 1) != 0 && v14 == 461
                                    || (v432 & 1) != 0 && v14 == 485
                                    || (v432 & 1) != 0 && v14 == 462
                                    || (v432 & 1) != 0 && v14 == 784)
                                  {
                                    goto LABEL_81;
                                  }
                                  if ((v432 & 1) != 0 && v14 == 463)
                                  {
                                    uint64_t result = fprintf(v8, "%20s:\n", "balanceProportionBucketsHistogram");
                                    if (v438 >= 0xB) {
                                      uint64_t v213 = 11;
                                    }
                                    else {
                                      uint64_t v213 = v438;
                                    }
                                    if (v213)
                                    {
                                      for (uint64_t i86 = 0; i86 != v213; ++i86)
                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i86, v15[i86]);
                                    }
                                  }
                                  else if ((v432 & 1) != 0 && v14 == 551)
                                  {
                                    uint64_t result = fprintf(v8, "%20s:\n", "balanceProportionBucketsHistogramTlc");
                                    if (v438 >= 0xB) {
                                      uint64_t v215 = 11;
                                    }
                                    else {
                                      uint64_t v215 = v438;
                                    }
                                    if (v215)
                                    {
                                      for (uint64_t i87 = 0; i87 != v215; ++i87)
                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i87, v15[i87]);
                                    }
                                  }
                                  else
                                  {
                                    if ((v432 & 1) != 0 && v14 == 464) {
                                      goto LABEL_81;
                                    }
                                    if ((v432 & 1) != 0 && v14 == 465)
                                    {
                                      uint64_t result = fprintf(v8, "%20s:\n", "burstSizeHistogram");
                                      if (v438 >= 0xA) {
                                        uint64_t v217 = 10;
                                      }
                                      else {
                                        uint64_t v217 = v438;
                                      }
                                      if (v217)
                                      {
                                        for (uint64_t i88 = 0; i88 != v217; ++i88)
                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i88, v15[i88]);
                                      }
                                    }
                                    else if ((v432 & 1) != 0 && v14 == 913)
                                    {
                                      uint64_t result = fprintf(v8, "%20s:\n", "fwaHistogram");
                                      if (v438 >= 0xA) {
                                        uint64_t v219 = 10;
                                      }
                                      else {
                                        uint64_t v219 = v438;
                                      }
                                      if (v219)
                                      {
                                        for (uint64_t i89 = 0; i89 != v219; ++i89)
                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i89, v15[i89]);
                                      }
                                    }
                                    else
                                    {
                                      if ((v432 & 1) != 0 && v14 == 483
                                        || (v432 & 2) != 0 && v14 == 428
                                        || (v432 & 1) != 0 && v14 == 429
                                        || (v432 & 1) != 0 && v14 == 430
                                        || (v432 & 1) != 0 && v14 == 431
                                        || (v432 & 1) != 0 && v14 == 432
                                        || (v432 & 1) != 0 && v14 == 433
                                        || (v432 & 1) != 0 && v14 == 434
                                        || (v432 & 1) != 0 && v14 == 435
                                        || (v432 & 1) != 0 && v14 == 436
                                        || (v432 & 1) != 0 && v14 == 437
                                        || (v432 & 1) != 0 && v14 == 447
                                        || (v432 & 1) != 0 && v14 == 448
                                        || (v432 & 1) != 0 && v14 == 449
                                        || (v432 & 1) != 0 && v14 == 488
                                        || (v432 & 1) != 0 && v14 == 486
                                        || (v432 & 1) != 0 && v14 == 450)
                                      {
                                        goto LABEL_81;
                                      }
                                      if ((v432 & 1) != 0 && v14 == 460)
                                      {
                                        uint64_t result = fprintf(v8, "%20s:\n", "CacheDepthVsThroughput");
                                        if (v438 >= 0x100) {
                                          uint64_t v221 = 256;
                                        }
                                        else {
                                          uint64_t v221 = v438;
                                        }
                                        if (v221)
                                        {
                                          for (uint64_t i90 = 0; i90 != v221; ++i90)
                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i90, v15[i90]);
                                        }
                                      }
                                      else if ((v432 & 1) != 0 && v14 == 466)
                                      {
                                        uint64_t result = fprintf(v8, "%20s:\n", "qosDirectToTLC");
                                        if (v438 >= 0x40) {
                                          uint64_t v223 = 64;
                                        }
                                        else {
                                          uint64_t v223 = v438;
                                        }
                                        if (v223)
                                        {
                                          for (uint64_t i91 = 0; i91 != v223; ++i91)
                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i91, v15[i91]);
                                        }
                                      }
                                      else if ((v432 & 1) != 0 && v14 == 467)
                                      {
                                        uint64_t result = fprintf(v8, "%20s:\n", "maxQosDirectToTLC");
                                        if (v438 >= 4) {
                                          uint64_t v225 = 4;
                                        }
                                        else {
                                          uint64_t v225 = v438;
                                        }
                                        if (v225)
                                        {
                                          for (uint64_t i92 = 0; i92 != v225; ++i92)
                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i92, v15[i92]);
                                        }
                                      }
                                      else
                                      {
                                        if ((v432 & 1) != 0 && v14 == 518
                                          || (v432 & 1) != 0 && v14 == 519
                                          || (v432 & 2) != 0 && v14 == 627
                                          || (v432 & 2) != 0 && v14 == 628
                                          || (v432 & 2) != 0 && v14 == 629
                                          || (v432 & 2) != 0 && v14 == 671
                                          || (v432 & 2) != 0 && v14 == 672
                                          || (v432 & 2) != 0 && v14 == 816
                                          || (v432 & 1) != 0 && v14 == 538
                                          || (v432 & 1) != 0 && v14 == 487)
                                        {
                                          goto LABEL_81;
                                        }
                                        if ((v432 & 1) != 0 && v14 == 490)
                                        {
                                          uint64_t result = fprintf(v8, "%20s:\n", "bdrTmpHist");
                                          if (v438 >= 0x40) {
                                            uint64_t v227 = 64;
                                          }
                                          else {
                                            uint64_t v227 = v438;
                                          }
                                          if (v227)
                                          {
                                            for (uint64_t i93 = 0; i93 != v227; ++i93)
                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i93, v15[i93]);
                                          }
                                        }
                                        else
                                        {
                                          if ((v432 & 1) != 0 && v14 == 491 || (v432 & 1) != 0 && v14 == 492) {
                                            goto LABEL_81;
                                          }
                                          if ((v432 & 1) != 0 && v14 == 624)
                                          {
                                            uint64_t result = fprintf(v8, "%20s:\n", "clogFailReason");
                                            if (v438 >= 0x10) {
                                              uint64_t v229 = 16;
                                            }
                                            else {
                                              uint64_t v229 = v438;
                                            }
                                            if (v229)
                                            {
                                              for (uint64_t i94 = 0; i94 != v229; ++i94)
                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i94, v15[i94]);
                                            }
                                          }
                                          else if ((v432 & 1) != 0 && v14 == 1001)
                                          {
                                            uint64_t result = fprintf(v8, "%20s:\n", "clogReplayFailReason");
                                            if (v438 >= 8) {
                                              uint64_t v231 = 8;
                                            }
                                            else {
                                              uint64_t v231 = v438;
                                            }
                                            if (v231)
                                            {
                                              for (uint64_t i95 = 0; i95 != v231; ++i95)
                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i95, v15[i95]);
                                            }
                                          }
                                          else
                                          {
                                            if ((v432 & 1) != 0 && v14 == 1002
                                              || (v432 & 1) != 0 && v14 == 1003
                                              || (v432 & 1) != 0 && v14 == 493
                                              || (v432 & 1) != 0 && v14 == 497
                                              || (v432 & 1) != 0 && v14 == 495
                                              || (v432 & 1) != 0 && v14 == 496
                                              || (v432 & 1) != 0 && v14 == 498
                                              || (v432 & 1) != 0 && v14 == 499
                                              || (v432 & 1) != 0 && v14 == 500
                                              || (v432 & 1) != 0 && v14 == 606
                                              || (v432 & 1) != 0 && v14 == 617
                                              || (v432 & 1) != 0 && v14 == 607
                                              || (v432 & 1) != 0 && v14 == 618
                                              || (v432 & 1) != 0 && v14 == 619
                                              || (v432 & 1) != 0 && v14 == 620
                                              || (v432 & 1) != 0 && v14 == 625
                                              || (v432 & 1) != 0 && v14 == 626
                                              || (v432 & 1) != 0 && v14 == 1009
                                              || (v432 & 1) != 0 && v14 == 1010)
                                            {
                                              goto LABEL_81;
                                            }
                                            if ((v432 & 1) != 0 && v14 == 621)
                                            {
                                              uint64_t result = fprintf(v8, "%20s:\n", "eanBootReadsHist");
                                              if (v438 >= 0xA) {
                                                uint64_t v233 = 10;
                                              }
                                              else {
                                                uint64_t v233 = v438;
                                              }
                                              if (v233)
                                              {
                                                for (uint64_t i96 = 0; i96 != v233; ++i96)
                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i96, v15[i96]);
                                              }
                                            }
                                            else if ((v432 & 1) != 0 && v14 == 632)
                                            {
                                              uint64_t result = fprintf(v8, "%20s:\n", "eanFirstReadMode");
                                              if (v438 >= 6) {
                                                uint64_t v235 = 6;
                                              }
                                              else {
                                                uint64_t v235 = v438;
                                              }
                                              if (v235)
                                              {
                                                for (uint64_t i97 = 0; i97 != v235; ++i97)
                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i97, v15[i97]);
                                              }
                                            }
                                            else
                                            {
                                              if ((v432 & 1) != 0 && v14 == 642
                                                || (v432 & 1) != 0 && v14 == 502
                                                || (v432 & 1) != 0 && v14 == 505
                                                || (v432 & 1) != 0 && v14 == 506
                                                || (v432 & 1) != 0 && v14 == 507
                                                || (v432 & 1) != 0 && v14 == 520
                                                || (v432 & 1) != 0 && v14 == 521
                                                || (v432 & 1) != 0 && v14 == 522
                                                || (v432 & 1) != 0 && v14 == 523
                                                || (v432 & 1) != 0 && v14 == 524
                                                || (v432 & 1) != 0 && v14 == 525
                                                || (v432 & 1) != 0 && v14 == 526
                                                || (v432 & 1) != 0 && v14 == 527
                                                || (v432 & 1) != 0 && v14 == 612
                                                || (v432 & 1) != 0 && v14 == 616
                                                || (v432 & 1) != 0 && v14 == 664
                                                || (v432 & 1) != 0 && v14 == 665
                                                || (v432 & 1) != 0 && v14 == 707
                                                || (v432 & 1) != 0 && v14 == 708
                                                || (v432 & 2) != 0 && v14 == 530
                                                || (v432 & 1) != 0 && v14 == 531
                                                || (v432 & 1) != 0 && v14 == 828
                                                || (v432 & 1) != 0 && v14 == 532
                                                || (v432 & 1) != 0 && v14 == 533
                                                || (v432 & 1) != 0 && v14 == 534
                                                || (v432 & 1) != 0 && v14 == 535
                                                || (v432 & 1) != 0 && v14 == 537
                                                || (v432 & 1) != 0 && v14 == 543
                                                || (v432 & 2) != 0 && v14 == 581
                                                || (v432 & 2) != 0 && v14 == 582
                                                || (v432 & 1) != 0 && v14 == 583
                                                || (v432 & 1) != 0 && v14 == 584
                                                || (v432 & 1) != 0 && v14 == 544
                                                || (v432 & 1) != 0 && v14 == 553
                                                || (v432 & 1) != 0 && v14 == 557
                                                || (v432 & 1) != 0 && v14 == 1117
                                                || (v432 & 1) != 0 && v14 == 548
                                                || (v432 & 1) != 0 && v14 == 611
                                                || (v432 & 1) != 0 && v14 == 545
                                                || (v432 & 1) != 0 && v14 == 558
                                                || (v432 & 1) != 0 && v14 == 559
                                                || (v432 & 1) != 0 && v14 == 1112
                                                || (v432 & 1) != 0 && v14 == 563
                                                || (v432 & 1) != 0 && v14 == 564
                                                || (v432 & 1) != 0 && v14 == 613
                                                || (v432 & 1) != 0 && v14 == 614
                                                || (v432 & 1) != 0 && v14 == 615)
                                              {
                                                goto LABEL_81;
                                              }
                                              if ((v432 & 1) != 0 && v14 == 546)
                                              {
                                                uint64_t result = fprintf(v8, "%20s:\n", "slcDemandBurstSizeDetected");
                                                if (v438 >= 0xA) {
                                                  uint64_t v237 = 10;
                                                }
                                                else {
                                                  uint64_t v237 = v438;
                                                }
                                                if (v237)
                                                {
                                                  for (uint64_t i98 = 0; i98 != v237; ++i98)
                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i98, v15[i98]);
                                                }
                                              }
                                              else if ((v432 & 1) != 0 && v14 == 549)
                                              {
                                                uint64_t result = fprintf(v8, "%20s:\n", "slcDemandBurstSizeSlc");
                                                if (v438 >= 0xA) {
                                                  uint64_t v239 = 10;
                                                }
                                                else {
                                                  uint64_t v239 = v438;
                                                }
                                                if (v239)
                                                {
                                                  for (uint64_t i99 = 0; i99 != v239; ++i99)
                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i99, v15[i99]);
                                                }
                                              }
                                              else if ((v432 & 1) != 0 && v14 == 547)
                                              {
                                                uint64_t result = fprintf(v8, "%20s:\n", "slcDemandBurstDur");
                                                if (v438 >= 0xA) {
                                                  uint64_t v241 = 10;
                                                }
                                                else {
                                                  uint64_t v241 = v438;
                                                }
                                                if (v241)
                                                {
                                                  for (uint64_t i100 = 0; i100 != v241; ++i100)
                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i100, v15[i100]);
                                                }
                                              }
                                              else
                                              {
                                                if ((v432 & 1) != 0 && v14 == 560
                                                  || (v432 & 1) != 0 && v14 == 635
                                                  || (v432 & 1) != 0 && v14 == 636
                                                  || (v432 & 1) != 0 && v14 == 637
                                                  || (v432 & 1) != 0 && v14 == 561
                                                  || (v432 & 1) != 0 && v14 == 565
                                                  || (v432 & 1) != 0 && v14 == 568
                                                  || (v432 & 1) != 0 && v14 == 575
                                                  || (v432 & 1) != 0 && v14 == 588
                                                  || (v432 & 1) != 0 && v14 == 589
                                                  || (v432 & 1) != 0 && v14 == 590
                                                  || (v432 & 1) != 0 && v14 == 591
                                                  || (v432 & 1) != 0 && v14 == 594
                                                  || (v432 & 1) != 0 && v14 == 595
                                                  || (v432 & 1) != 0 && v14 == 602)
                                                {
                                                  goto LABEL_81;
                                                }
                                                if ((v432 & 1) != 0 && v14 == 638)
                                                {
                                                  uint64_t result = fprintf(v8, "%20s:\n", "oslcDemandBurstSize");
                                                  if (v438 >= 0xA) {
                                                    uint64_t v243 = 10;
                                                  }
                                                  else {
                                                    uint64_t v243 = v438;
                                                  }
                                                  if (v243)
                                                  {
                                                    for (uint64_t i101 = 0; i101 != v243; ++i101)
                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i101, v15[i101]);
                                                  }
                                                }
                                                else if ((v432 & 1) != 0 && v14 == 674)
                                                {
                                                  uint64_t result = fprintf(v8, "%20s:\n", "oslcNoVotesHw");
                                                  if (v438 >= 8) {
                                                    uint64_t v245 = 8;
                                                  }
                                                  else {
                                                    uint64_t v245 = v438;
                                                  }
                                                  if (v245)
                                                  {
                                                    for (uint64_t i102 = 0; i102 != v245; ++i102)
                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i102, v15[i102]);
                                                  }
                                                }
                                                else
                                                {
                                                  if ((v432 & 1) != 0 && v14 == 884 || (v432 & 1) != 0 && v14 == 601) {
                                                    goto LABEL_81;
                                                  }
                                                  if ((v432 & 2) != 0 && v14 == 1174)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "nandWritesByMode");
                                                    if (v438 >= 6) {
                                                      uint64_t v247 = 6;
                                                    }
                                                    else {
                                                      uint64_t v247 = v438;
                                                    }
                                                    if (v247)
                                                    {
                                                      for (uint64_t i103 = 0; i103 != v247; ++i103)
                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i103, v15[i103]);
                                                    }
                                                  }
                                                  else if ((v432 & 2) != 0 && v14 == 1175)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "nandReadsByMode");
                                                    if (v438 >= 6) {
                                                      uint64_t v249 = 6;
                                                    }
                                                    else {
                                                      uint64_t v249 = v438;
                                                    }
                                                    if (v249)
                                                    {
                                                      for (uint64_t i104 = 0; i104 != v249; ++i104)
                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i104, v15[i104]);
                                                    }
                                                  }
                                                  else if ((v432 & 1) != 0 && v14 == 605)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "gcActiveReasons");
                                                    if (v438 >= 0xA) {
                                                      uint64_t v251 = 10;
                                                    }
                                                    else {
                                                      uint64_t v251 = v438;
                                                    }
                                                    if (v251)
                                                    {
                                                      for (uint64_t i105 = 0; i105 != v251; ++i105)
                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i105, v15[i105]);
                                                    }
                                                  }
                                                  else if ((v432 & 1) != 0 && v14 == 610)
                                                  {
                                                    uint64_t result = fprintf(v8, "%20s:\n", "pcieAerCounters");
                                                    if (v438 >= 0x40) {
                                                      uint64_t v253 = 64;
                                                    }
                                                    else {
                                                      uint64_t v253 = v438;
                                                    }
                                                    if (v253)
                                                    {
                                                      for (uint64_t i106 = 0; i106 != v253; ++i106)
                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i106, v15[i106]);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if ((v432 & 1) != 0 && v14 == 622
                                                      || (v432 & 1) != 0 && v14 == 623
                                                      || (v432 & 1) != 0 && v14 == 633
                                                      || (v432 & 1) != 0 && v14 == 634
                                                      || (v432 & 1) != 0 && v14 == 541
                                                      || (v432 & 1) != 0 && v14 == 542
                                                      || (v432 & 1) != 0 && v14 == 667
                                                      || (v432 & 1) != 0 && v14 == 676
                                                      || (v432 & 1) != 0 && v14 == 826)
                                                    {
                                                      goto LABEL_81;
                                                    }
                                                    if ((v432 & 1) != 0 && v14 == 660)
                                                    {
                                                      uint64_t result = fprintf(v8, "%20s:\n", "gcMustReasons");
                                                      if (v438 >= 0x14) {
                                                        uint64_t v255 = 20;
                                                      }
                                                      else {
                                                        uint64_t v255 = v438;
                                                      }
                                                      if (v255)
                                                      {
                                                        for (uint64_t i107 = 0; i107 != v255; ++i107)
                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i107, v15[i107]);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      if ((v432 & 2) != 0 && v14 == 666
                                                        || (v432 & 2) != 0 && v14 == 675
                                                        || (v432 & 1) != 0 && v14 == 684)
                                                      {
                                                        goto LABEL_81;
                                                      }
                                                      if ((v432 & 1) != 0 && v14 == 687)
                                                      {
                                                        uint64_t result = fprintf(v8, "%20s:\n", "cbdrInitSent");
                                                        if (v438 >= 3) {
                                                          uint64_t v257 = 3;
                                                        }
                                                        else {
                                                          uint64_t v257 = v438;
                                                        }
                                                        if (v257)
                                                        {
                                                          for (uint64_t i108 = 0; i108 != v257; ++i108)
                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i108, v15[i108]);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        if ((v432 & 1) != 0 && v14 == 688
                                                          || (v432 & 1) != 0 && v14 == 689
                                                          || (v432 & 1) != 0 && v14 == 690
                                                          || (v432 & 1) != 0 && v14 == 691)
                                                        {
                                                          goto LABEL_81;
                                                        }
                                                        if ((v432 & 1) != 0 && v14 == 694)
                                                        {
                                                          uint64_t result = fprintf(v8, "%20s:\n", "cbdrRefreshGrades");
                                                          if (v438 >= 0xA) {
                                                            uint64_t v259 = 10;
                                                          }
                                                          else {
                                                            uint64_t v259 = v438;
                                                          }
                                                          if (v259)
                                                          {
                                                            for (uint64_t i109 = 0; i109 != v259; ++i109)
                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i109, v15[i109]);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          if ((v432 & 1) != 0 && v14 == 695
                                                            || (v432 & 1) != 0 && v14 == 696
                                                            || (v432 & 1) != 0 && v14 == 699)
                                                          {
                                                            goto LABEL_81;
                                                          }
                                                          if ((v432 & 1) != 0 && v14 == 731)
                                                          {
                                                            uint64_t result = fprintf(v8, "%20s:\n", "cbdrLastScannedHr");
                                                            if (v438 >= 3) {
                                                              uint64_t v261 = 3;
                                                            }
                                                            else {
                                                              uint64_t v261 = v438;
                                                            }
                                                            if (v261)
                                                            {
                                                              for (uint64_t i110 = 0; i110 != v261; ++i110)
                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i110, v15[i110]);
                                                            }
                                                          }
                                                          else
                                                          {
                                                            if ((v432 & 1) != 0 && v14 == 753
                                                              || (v432 & 1) != 0 && v14 == 754
                                                              || (v432 & 1) != 0 && v14 == 755)
                                                            {
                                                              goto LABEL_81;
                                                            }
                                                            if ((v432 & 1) != 0 && v14 == 756)
                                                            {
                                                              uint64_t result = fprintf(v8, "%20s:\n", "cbdrRefreshedAges");
                                                              if (v438 >= 9) {
                                                                uint64_t v263 = 9;
                                                              }
                                                              else {
                                                                uint64_t v263 = v438;
                                                              }
                                                              if (v263)
                                                              {
                                                                for (uint64_t i111 = 0; i111 != v263; ++i111)
                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i111, v15[i111]);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              if ((v432 & 1) != 0 && v14 == 757
                                                                || (v432 & 1) != 0 && v14 == 758)
                                                              {
                                                                goto LABEL_81;
                                                              }
                                                              if ((v432 & 1) != 0 && v14 == 759)
                                                              {
                                                                uint64_t result = fprintf(v8, "%20s:\n", "cbdrScanPct");
                                                                if (v438 >= 5) {
                                                                  uint64_t v265 = 5;
                                                                }
                                                                else {
                                                                  uint64_t v265 = v438;
                                                                }
                                                                if (v265)
                                                                {
                                                                  for (uint64_t i112 = 0; i112 != v265; ++i112)
                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i112, v15[i112]);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                if ((v432 & 1) != 0 && v14 == 766) {
                                                                  goto LABEL_81;
                                                                }
                                                                if ((v432 & 1) != 0 && v14 == 767)
                                                                {
                                                                  uint64_t result = fprintf(v8, "%20s:\n", "cbdrRefreshGradesSLC");
                                                                  if (v438 >= 0xA) {
                                                                    uint64_t v267 = 10;
                                                                  }
                                                                  else {
                                                                    uint64_t v267 = v438;
                                                                  }
                                                                  if (v267)
                                                                  {
                                                                    for (uint64_t i113 = 0; i113 != v267; ++i113)
                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i113, v15[i113]);
                                                                  }
                                                                }
                                                                else if ((v432 & 1) != 0 && v14 == 768)
                                                                {
                                                                  uint64_t result = fprintf(v8, "%20s:\n", "cbdrRefreshedAgesSLC");
                                                                  if (v438 >= 9) {
                                                                    uint64_t v269 = 9;
                                                                  }
                                                                  else {
                                                                    uint64_t v269 = v438;
                                                                  }
                                                                  if (v269)
                                                                  {
                                                                    for (uint64_t i114 = 0; i114 != v269; ++i114)
                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i114, v15[i114]);
                                                                  }
                                                                }
                                                                else if ((v432 & 1) != 0 && v14 == 769)
                                                                {
                                                                  uint64_t result = fprintf(v8, "%20s:\n", "cbdrScanPctSLC");
                                                                  if (v438 >= 5) {
                                                                    uint64_t v271 = 5;
                                                                  }
                                                                  else {
                                                                    uint64_t v271 = v438;
                                                                  }
                                                                  if (v271)
                                                                  {
                                                                    for (uint64_t i115 = 0; i115 != v271; ++i115)
                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i115, v15[i115]);
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  if ((v432 & 2) != 0 && v14 == 970
                                                                    || (v432 & 1) != 0 && v14 == 683
                                                                    || (v432 & 1) != 0 && v14 == 693
                                                                    || (v432 & 1) != 0 && v14 == 718
                                                                    || (v432 & 1) != 0 && v14 == 709
                                                                    || (v432 & 1) != 0 && v14 == 710
                                                                    || (v432 & 1) != 0 && v14 == 719
                                                                    || (v432 & 1) != 0 && v14 == 720)
                                                                  {
                                                                    goto LABEL_81;
                                                                  }
                                                                  if ((v432 & 1) != 0 && v14 == 702)
                                                                  {
                                                                    uint64_t result = fprintf(v8, "%20s:\n", "vcurve");
                                                                    if (v438 >= 0x20) {
                                                                      uint64_t v273 = 32;
                                                                    }
                                                                    else {
                                                                      uint64_t v273 = v438;
                                                                    }
                                                                    if (v273)
                                                                    {
                                                                      for (uint64_t i116 = 0; i116 != v273; ++i116)
                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i116, v15[i116]);
                                                                    }
                                                                  }
                                                                  else if ((v432 & 1) != 0 && v14 == 703)
                                                                  {
                                                                    uint64_t result = fprintf(v8, "%20s:\n", "injDepth");
                                                                    if (v438 >= 0xC) {
                                                                      uint64_t v275 = 12;
                                                                    }
                                                                    else {
                                                                      uint64_t v275 = v438;
                                                                    }
                                                                    if (v275)
                                                                    {
                                                                      for (uint64_t i117 = 0; i117 != v275; ++i117)
                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i117, v15[i117]);
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    if ((v432 & 1) != 0 && v14 == 704
                                                                      || (v432 & 1) != 0 && v14 == 728
                                                                      || (v432 & 1) != 0 && v14 == 729
                                                                      || (v432 & 1) != 0 && v14 == 730
                                                                      || (v432 & 1) != 0 && v14 == 732
                                                                      || (v432 & 1) != 0 && v14 == 741
                                                                      || (v432 & 1) != 0 && v14 == 742
                                                                      || (v432 & 1) != 0 && v14 == 743
                                                                      || (v432 & 1) != 0 && v14 == 746
                                                                      || (v432 & 1) != 0 && v14 == 747
                                                                      || (v432 & 1) != 0 && v14 == 748
                                                                      || (v432 & 1) != 0 && v14 == 749
                                                                      || (v432 & 1) != 0 && v14 == 750
                                                                      || (v432 & 1) != 0 && v14 == 751
                                                                      || (v432 & 1) != 0 && v14 == 752)
                                                                    {
                                                                      goto LABEL_81;
                                                                    }
                                                                    if ((v432 & 1) != 0 && v14 == 744)
                                                                    {
                                                                      uint64_t result = fprintf(v8, "%20s:\n", "raidReconstructDurationHisto");
                                                                      if (v438 >= 8) {
                                                                        uint64_t v277 = 8;
                                                                      }
                                                                      else {
                                                                        uint64_t v277 = v438;
                                                                      }
                                                                      if (v277)
                                                                      {
                                                                        for (uint64_t i118 = 0; i118 != v277; ++i118)
                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i118, v15[i118]);
                                                                      }
                                                                    }
                                                                    else if ((v432 & 1) != 0 && v14 == 745)
                                                                    {
                                                                      uint64_t result = fprintf(v8, "%20s:\n", "failsOnReconstructHisto");
                                                                      if (v438 >= 8) {
                                                                        uint64_t v279 = 8;
                                                                      }
                                                                      else {
                                                                        uint64_t v279 = v438;
                                                                      }
                                                                      if (v279)
                                                                      {
                                                                        for (uint64_t i119 = 0; i119 != v279; ++i119)
                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i119, v15[i119]);
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      if ((v432 & 1) != 0 && v14 == 776
                                                                        || (v432 & 1) != 0 && v14 == 764
                                                                        || (v432 & 1) != 0 && v14 == 765)
                                                                      {
                                                                        goto LABEL_81;
                                                                      }
                                                                      if ((v432 & 1) != 0 && v14 == 770)
                                                                      {
                                                                        uint64_t result = fprintf(v8, "%20s:\n", "cpuBurstLength");
                                                                        if (v438 >= 8) {
                                                                          uint64_t v281 = 8;
                                                                        }
                                                                        else {
                                                                          uint64_t v281 = v438;
                                                                        }
                                                                        if (v281)
                                                                        {
                                                                          for (uint64_t i120 = 0; i120 != v281; ++i120)
                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i120, v15[i120]);
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        if ((v432 & 1) != 0 && v14 == 778
                                                                          || (v432 & 1) != 0 && v14 == 779
                                                                          || (v432 & 1) != 0 && v14 == 780)
                                                                        {
                                                                          goto LABEL_81;
                                                                        }
                                                                        if ((v432 & 1) != 0 && v14 == 781)
                                                                        {
                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gcSearchTimeHistory");
                                                                          if (v438 >= 0xA) {
                                                                            uint64_t v283 = 10;
                                                                          }
                                                                          else {
                                                                            uint64_t v283 = v438;
                                                                          }
                                                                          if (v283)
                                                                          {
                                                                            for (uint64_t i121 = 0; i121 != v283; ++i121)
                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i121, v15[i121]);
                                                                          }
                                                                        }
                                                                        else if ((v432 & 1) != 0 && v14 == 785)
                                                                        {
                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gcSearchPortion");
                                                                          if (v438 >= 0x10) {
                                                                            uint64_t v285 = 16;
                                                                          }
                                                                          else {
                                                                            uint64_t v285 = v438;
                                                                          }
                                                                          if (v285)
                                                                          {
                                                                            for (uint64_t i122 = 0; i122 != v285; ++i122)
                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i122, v15[i122]);
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          if ((v432 & 1) != 0 && v14 == 792
                                                                            || (v432 & 1) != 0 && v14 == 793
                                                                            || (v432 & 1) != 0 && v14 == 794
                                                                            || (v432 & 2) != 0 && v14 == 821
                                                                            || (v432 & 1) != 0 && v14 == 822
                                                                            || (v432 & 1) != 0 && v14 == 827)
                                                                          {
                                                                            goto LABEL_81;
                                                                          }
                                                                          if ((v432 & 1) != 0 && v14 == 823)
                                                                          {
                                                                            uint64_t result = fprintf(v8, "%20s:\n", "readClassifyStatusesHisto");
                                                                            if (v438 >= 3) {
                                                                              uint64_t v287 = 3;
                                                                            }
                                                                            else {
                                                                              uint64_t v287 = v438;
                                                                            }
                                                                            if (v287)
                                                                            {
                                                                              for (uint64_t i123 = 0; i123 != v287; ++i123)
                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i123, v15[i123]);
                                                                            }
                                                                          }
                                                                          else if ((v432 & 1) != 0 && v14 == 824)
                                                                          {
                                                                            uint64_t result = fprintf(v8, "%20s:\n", "readWithAuxStatusesHisto");
                                                                            if (v438 >= 0xA) {
                                                                              uint64_t v289 = 10;
                                                                            }
                                                                            else {
                                                                              uint64_t v289 = v438;
                                                                            }
                                                                            if (v289)
                                                                            {
                                                                              for (uint64_t i124 = 0; i124 != v289; ++i124)
                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i124, v15[i124]);
                                                                            }
                                                                          }
                                                                          else if ((v432 & 1) != 0 && v14 == 825)
                                                                          {
                                                                            uint64_t result = fprintf(v8, "%20s:\n", "readReconstructStatusesHisto");
                                                                            if (v438 >= 0xA) {
                                                                              uint64_t v291 = 10;
                                                                            }
                                                                            else {
                                                                              uint64_t v291 = v438;
                                                                            }
                                                                            if (v291)
                                                                            {
                                                                              for (uint64_t i125 = 0; i125 != v291; ++i125)
                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i125, v15[i125]);
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            if ((v432 & 1) != 0 && v14 == 830
                                                                              || (v432 & 1) != 0 && v14 == 831
                                                                              || (v432 & 2) != 0 && v14 == 832)
                                                                            {
                                                                              goto LABEL_81;
                                                                            }
                                                                            if ((v432 & 2) != 0 && v14 == 855)
                                                                            {
                                                                              uint64_t result = fprintf(v8, "%20s:\n", "fwFormatVersion");
                                                                              if (v438 >= 3) {
                                                                                uint64_t v293 = 3;
                                                                              }
                                                                              else {
                                                                                uint64_t v293 = v438;
                                                                              }
                                                                              if (v293)
                                                                              {
                                                                                for (uint64_t i126 = 0; i126 != v293; ++i126)
                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i126, v15[i126]);
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              if ((v432 & 1) != 0 && v14 == 883) {
                                                                                goto LABEL_81;
                                                                              }
                                                                              if ((v432 & 2) != 0 && v14 == 868)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsSlc_1bc");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v295 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v295 = v438;
                                                                                }
                                                                                if (v295)
                                                                                {
                                                                                  for (uint64_t i127 = 0; i127 != v295; ++i127)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i127, v15[i127]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 869)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsTlc_1bc");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v297 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v297 = v438;
                                                                                }
                                                                                if (v297)
                                                                                {
                                                                                  for (uint64_t i128 = 0; i128 != v297; ++i128)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i128, v15[i128]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 870)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsSlc_1bc_he");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v299 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v299 = v438;
                                                                                }
                                                                                if (v299)
                                                                                {
                                                                                  for (uint64_t i129 = 0; i129 != v299; ++i129)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i129, v15[i129]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 871)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsTlc_1bc_he");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v301 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v301 = v438;
                                                                                }
                                                                                if (v301)
                                                                                {
                                                                                  for (uint64_t i130 = 0; i130 != v301; ++i130)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i130, v15[i130]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 876)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsSlc_mbc");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v303 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v303 = v438;
                                                                                }
                                                                                if (v303)
                                                                                {
                                                                                  for (uint64_t i131 = 0; i131 != v303; ++i131)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i131, v15[i131]);
                                                                                }
                                                                              }
                                                                              else if ((v432 & 2) != 0 && v14 == 877)
                                                                              {
                                                                                uint64_t result = fprintf(v8, "%20s:\n", "dmReasonsTlc_mbc");
                                                                                if (v438 >= 0x20) {
                                                                                  uint64_t v305 = 32;
                                                                                }
                                                                                else {
                                                                                  uint64_t v305 = v438;
                                                                                }
                                                                                if (v305)
                                                                                {
                                                                                  for (uint64_t i132 = 0; i132 != v305; ++i132)
                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i132, v15[i132]);
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                if ((v432 & 1) != 0 && v14 == 896) {
                                                                                  goto LABEL_81;
                                                                                }
                                                                                if ((v432 & 1) != 0 && v14 == 897)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "wcWrFragSizes");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v307 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v307 = v438;
                                                                                  }
                                                                                  if (v307)
                                                                                  {
                                                                                    for (uint64_t i133 = 0; i133 != v307; ++i133)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i133, v15[i133]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 905)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidRelPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v309 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v309 = v438;
                                                                                  }
                                                                                  if (v309)
                                                                                  {
                                                                                    for (uint64_t i134 = 0; i134 != v309; ++i134)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i134, v15[i134]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 906)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidRelBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v311 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v311 = v438;
                                                                                  }
                                                                                  if (v311)
                                                                                  {
                                                                                    for (uint64_t i135 = 0; i135 != v311; ++i135)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i135, v15[i135]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 907)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMaxRelBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v313 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v313 = v438;
                                                                                  }
                                                                                  if (v313)
                                                                                  {
                                                                                    for (uint64_t i136 = 0; i136 != v313; ++i136)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i136, v15[i136]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 908)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMinRelBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v315 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v315 = v438;
                                                                                  }
                                                                                  if (v315)
                                                                                  {
                                                                                    for (uint64_t i137 = 0; i137 != v315; ++i137)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i137, v15[i137]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 918)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMaxCyclesBetweenRel");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v317 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v317 = v438;
                                                                                  }
                                                                                  if (v317)
                                                                                  {
                                                                                    for (uint64_t i138 = 0; i138 != v317; ++i138)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i138, v15[i138]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 919)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMinCyclesBetweenRel");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v319 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v319 = v438;
                                                                                  }
                                                                                  if (v319)
                                                                                  {
                                                                                    for (uint64_t i139 = 0; i139 != v319; ++i139)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i139, v15[i139]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 932)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidLastRelPECycles");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v321 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v321 = v438;
                                                                                  }
                                                                                  if (v321)
                                                                                  {
                                                                                    for (uint64_t i140 = 0; i140 != v321; ++i140)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i140, v15[i140]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 933)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidRelQualPECycles");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v323 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v323 = v438;
                                                                                  }
                                                                                  if (v323)
                                                                                  {
                                                                                    for (uint64_t i141 = 0; i141 != v323; ++i141)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i141, v15[i141]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 920)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidAuxPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v325 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v325 = v438;
                                                                                  }
                                                                                  if (v325)
                                                                                  {
                                                                                    for (uint64_t i142 = 0; i142 != v325; ++i142)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i142, v15[i142]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 921)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidAuxBetweenRefreshesPerBlock");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v327 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v327 = v438;
                                                                                  }
                                                                                  if (v327)
                                                                                  {
                                                                                    for (uint64_t i143 = 0; i143 != v327; ++i143)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i143, v15[i143]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 930)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMaxCyclesBetweenAux");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v329 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v329 = v438;
                                                                                  }
                                                                                  if (v329)
                                                                                  {
                                                                                    for (uint64_t i144 = 0; i144 != v329; ++i144)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i144, v15[i144]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 931)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidMinCyclesBetweenAux");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v331 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v331 = v438;
                                                                                  }
                                                                                  if (v331)
                                                                                  {
                                                                                    for (uint64_t i145 = 0; i145 != v331; ++i145)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i145, v15[i145]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 934)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidLastAuxPECycles");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v333 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v333 = v438;
                                                                                  }
                                                                                  if (v333)
                                                                                  {
                                                                                    for (uint64_t i146 = 0; i146 != v333; ++i146)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i146, v15[i146]);
                                                                                  }
                                                                                }
                                                                                else if ((v432 & 1) != 0 && v14 == 935)
                                                                                {
                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "turboRaidAuxQualPECycles");
                                                                                  if (v438 >= 0x10) {
                                                                                    uint64_t v335 = 16;
                                                                                  }
                                                                                  else {
                                                                                    uint64_t v335 = v438;
                                                                                  }
                                                                                  if (v335)
                                                                                  {
                                                                                    for (uint64_t i147 = 0; i147 != v335; ++i147)
                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i147, v15[i147]);
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  if ((v432 & 1) != 0 && v14 == 922
                                                                                    || (v432 & 1) != 0 && v14 == 923)
                                                                                  {
                                                                                    goto LABEL_81;
                                                                                  }
                                                                                  if ((v432 & 1) != 0 && v14 == 910)
                                                                                  {
                                                                                    uint64_t result = fprintf(v8, "%20s:\n", "pgBelowMinBands");
                                                                                    if (v438 >= 2) {
                                                                                      uint64_t v337 = 2;
                                                                                    }
                                                                                    else {
                                                                                      uint64_t v337 = v438;
                                                                                    }
                                                                                    if (v337)
                                                                                    {
                                                                                      for (uint64_t i148 = 0; i148 != v337; ++i148)
                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i148, v15[i148]);
                                                                                    }
                                                                                  }
                                                                                  else if ((v432 & 1) != 0 {
                                                                                         && v14 == 911)
                                                                                  }
                                                                                  {
                                                                                    uint64_t result = fprintf(v8, "%20s:\n", "pgNoBands");
                                                                                    if (v438 >= 2) {
                                                                                      uint64_t v339 = 2;
                                                                                    }
                                                                                    else {
                                                                                      uint64_t v339 = v438;
                                                                                    }
                                                                                    if (v339)
                                                                                    {
                                                                                      for (uint64_t i149 = 0; i149 != v339; ++i149)
                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i149, v15[i149]);
                                                                                    }
                                                                                  }
                                                                                  else if ((v432 & 1) != 0 {
                                                                                         && v14 == 912)
                                                                                  }
                                                                                  {
                                                                                    uint64_t result = fprintf(v8, "%20s:\n", "pgBelowMinBlocks");
                                                                                    if (v438 >= 2) {
                                                                                      uint64_t v341 = 2;
                                                                                    }
                                                                                    else {
                                                                                      uint64_t v341 = v438;
                                                                                    }
                                                                                    if (v341)
                                                                                    {
                                                                                      for (uint64_t i150 = 0; i150 != v341; ++i150)
                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i150, v15[i150]);
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    if ((v432 & 1) != 0 && v14 == 915
                                                                                      || (v432 & 1) != 0 && v14 == 925
                                                                                      || (v432 & 1) != 0 && v14 == 946
                                                                                      || (v432 & 1) != 0 && v14 == 936
                                                                                      || (v432 & 1) != 0 && v14 == 937
                                                                                      || (v432 & 1) != 0 && v14 == 938
                                                                                      || (v432 & 1) != 0 && v14 == 939
                                                                                      || (v432 & 1) != 0 && v14 == 940
                                                                                      || (v432 & 2) != 0 && v14 == 954
                                                                                      || (v432 & 2) != 0 && v14 == 942
                                                                                      || (v432 & 2) != 0 && v14 == 943
                                                                                      || (v432 & 2) != 0 && v14 == 944
                                                                                      || (v432 & 1) != 0 && v14 == 957
                                                                                      || (v432 & 1) != 0 && v14 == 958)
                                                                                    {
                                                                                      goto LABEL_81;
                                                                                    }
                                                                                    if ((v432 & 2) != 0 && v14 == 948)
                                                                                    {
                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "assertHistory");
                                                                                      if (v438 >= 0x28) {
                                                                                        uint64_t v343 = 40;
                                                                                      }
                                                                                      else {
                                                                                        uint64_t v343 = v438;
                                                                                      }
                                                                                      if (v343)
                                                                                      {
                                                                                        for (uint64_t i151 = 0;
                                                                                              i151 != v343;
                                                                                              ++i151)
                                                                                        {
                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i151, v15[i151]);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      if ((v432 & 2) != 0 && v14 == 951
                                                                                        || (v432 & 2) != 0 && v14 == 952
                                                                                        || (v432 & 1) != 0 && v14 == 955
                                                                                        || (v432 & 1) != 0 && v14 == 966
                                                                                        || (v432 & 1) != 0 && v14 == 968
                                                                                        || (v432 & 1) != 0 && v14 == 969)
                                                                                      {
                                                                                        goto LABEL_81;
                                                                                      }
                                                                                      if ((v432 & 1) != 0 && v14 == 961)
                                                                                      {
                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "osBuildStr");
                                                                                        if (v438 >= 2) {
                                                                                          uint64_t v345 = 2;
                                                                                        }
                                                                                        else {
                                                                                          uint64_t v345 = v438;
                                                                                        }
                                                                                        if (v345)
                                                                                        {
                                                                                          for (uint64_t i152 = 0;
                                                                                                i152 != v345;
                                                                                                ++i152)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i152, v15[i152]);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      else if ((v432 & 1) != 0 {
                                                                                             && v14 == 967)
                                                                                      }
                                                                                      {
                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "indTrimFrags");
                                                                                        if (v438 >= 0xC) {
                                                                                          uint64_t v347 = 12;
                                                                                        }
                                                                                        else {
                                                                                          uint64_t v347 = v438;
                                                                                        }
                                                                                        if (v347)
                                                                                        {
                                                                                          for (uint64_t i153 = 0;
                                                                                                i153 != v347;
                                                                                                ++i153)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i153, v15[i153]);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      else if ((v432 & 1) != 0 {
                                                                                             && v14 == 971)
                                                                                      }
                                                                                      {
                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "indUsedFrags");
                                                                                        if (v438 >= 0xC) {
                                                                                          uint64_t v349 = 12;
                                                                                        }
                                                                                        else {
                                                                                          uint64_t v349 = v438;
                                                                                        }
                                                                                        if (v349)
                                                                                        {
                                                                                          for (uint64_t i154 = 0;
                                                                                                i154 != v349;
                                                                                                ++i154)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i154, v15[i154]);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        if ((v432 & 1) != 0
                                                                                          && v14 == 985
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 973
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 976
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 980
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 981
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 982
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 984
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 990
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 992
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 993
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 994
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 986
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 987
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 1000
                                                                                          || (v432 & 1) != 0
                                                                                          && v14 == 1013)
                                                                                        {
                                                                                          goto LABEL_81;
                                                                                        }
                                                                                        if ((v432 & 1) != 0
                                                                                          && v14 == 1015)
                                                                                        {
                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "eanEarlyBootUeccPage");
                                                                                          if (v438 >= 4) {
                                                                                            uint64_t v351 = 4;
                                                                                          }
                                                                                          else {
                                                                                            uint64_t v351 = v438;
                                                                                          }
                                                                                          if (v351)
                                                                                          {
                                                                                            for (uint64_t i155 = 0;
                                                                                                  i155 != v351;
                                                                                                  ++i155)
                                                                                            {
                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i155, v15[i155]);
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if ((v432 & 1) != 0
                                                                                            && v14 == 1016
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1017
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1020
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1021
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1027
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1028
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1029
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1022
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1023
                                                                                            || (v432 & 2) != 0
                                                                                            && v14 == 1025
                                                                                            || (v432 & 2) != 0
                                                                                            && v14 == 1026
                                                                                            || (v432 & 1) != 0
                                                                                            && v14 == 1030)
                                                                                          {
                                                                                            goto LABEL_81;
                                                                                          }
                                                                                          if ((v432 & 1) != 0
                                                                                            && v14 == 1040)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "bandsAgeBinsV2");
                                                                                            if (v438 >= 0x1F) {
                                                                                              uint64_t v353 = 31;
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v353 = v438;
                                                                                            }
                                                                                            if (v353)
                                                                                            {
                                                                                              for (uint64_t i156 = 0;
                                                                                                    i156 != v353;
                                                                                                    ++i156)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i156, v15[i156]);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          else if ((v432 & 1) != 0 && v14 == 1041)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "bandsAgeBinsSnapshot");
                                                                                            if (v438 >= 0x1F) {
                                                                                              uint64_t v355 = 31;
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v355 = v438;
                                                                                            }
                                                                                            if (v355)
                                                                                            {
                                                                                              for (uint64_t i157 = 0;
                                                                                                    i157 != v355;
                                                                                                    ++i157)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i157, v15[i157]);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          else if ((v432 & 1) != 0 && v14 == 1042)
                                                                                          {
                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "bandsAgeBinsReadSectors");
                                                                                            if (v438 >= 0xF) {
                                                                                              uint64_t v357 = 15;
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v357 = v438;
                                                                                            }
                                                                                            if (v357)
                                                                                            {
                                                                                              for (uint64_t i158 = 0;
                                                                                                    i158 != v357;
                                                                                                    ++i158)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i158, v15[i158]);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            if ((v432 & 2) != 0
                                                                                              && v14 == 1050
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1051
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1052
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1053
                                                                                              || (v432 & 2) != 0
                                                                                              && v14 == 1061)
                                                                                            {
                                                                                              goto LABEL_81;
                                                                                            }
                                                                                            if ((v432 & 1) != 0
                                                                                              && v14 == 1057)
                                                                                            {
                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "hostReadsVerticalByFlow");
                                                                                              if (v438 >= 3) {
                                                                                                uint64_t v359 = 3;
                                                                                              }
                                                                                              else {
                                                                                                uint64_t v359 = v438;
                                                                                              }
                                                                                              if (v359)
                                                                                              {
                                                                                                for (uint64_t i159 = 0;
                                                                                                      i159 != v359;
                                                                                                      ++i159)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i159, v15[i159]);
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            else if ((v432 & 1) != 0 && v14 == 1058)
                                                                                            {
                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "hostReadsByFlow");
                                                                                              if (v438 >= 7) {
                                                                                                uint64_t v361 = 7;
                                                                                              }
                                                                                              else {
                                                                                                uint64_t v361 = v438;
                                                                                              }
                                                                                              if (v361)
                                                                                              {
                                                                                                for (uint64_t i160 = 0;
                                                                                                      i160 != v361;
                                                                                                      ++i160)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i160, v15[i160]);
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              if ((v432 & 1) != 0
                                                                                                && v14 == 1036
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1037
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1076
                                                                                                || (v432 & 1) != 0
                                                                                                && v14 == 1098)
                                                                                              {
                                                                                                goto LABEL_81;
                                                                                              }
                                                                                              if ((v432 & 1) != 0
                                                                                                && v14 == 1099)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "pgCompressionBlocksInDip");
                                                                                                if (v438 >= 4) {
                                                                                                  uint64_t v363 = 4;
                                                                                                }
                                                                                                else {
                                                                                                  uint64_t v363 = v438;
                                                                                                }
                                                                                                if (v363)
                                                                                                {
                                                                                                  for (uint64_t i161 = 0;
                                                                                                        i161 != v363;
                                                                                                        ++i161)
                                                                                                  {
                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i161, v15[i161]);
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                              else if ((v432 & 1) != 0 && v14 == 1139)
                                                                                              {
                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "pgCompressionBlocksInPG");
                                                                                                if (v438 >= 4) {
                                                                                                  uint64_t v365 = 4;
                                                                                                }
                                                                                                else {
                                                                                                  uint64_t v365 = v438;
                                                                                                }
                                                                                                if (v365)
                                                                                                {
                                                                                                  for (uint64_t i162 = 0;
                                                                                                        i162 != v365;
                                                                                                        ++i162)
                                                                                                  {
                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i162, v15[i162]);
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                if ((v432 & 1) != 0 && v14 == 1140 || (v432 & 1) != 0 && v14 == 1141 || (v432 & 1) != 0 && v14 == 1200 || (v432 & 1) != 0 && v14 == 1080) {
                                                                                                  goto LABEL_81;
                                                                                                }
                                                                                                if ((v432 & 1) != 0 && v14 == 1105)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "hostReadSequential");
                                                                                                  if (v438 >= 0xE) {
                                                                                                    uint64_t v367 = 14;
                                                                                                  }
                                                                                                  else {
                                                                                                    uint64_t v367 = v438;
                                                                                                  }
                                                                                                  if (v367)
                                                                                                  {
                                                                                                    for (uint64_t i163 = 0;
                                                                                                          i163 != v367;
                                                                                                          ++i163)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i163, v15[i163]);
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                                else if ((v432 & 1) != 0 && v14 == 1106)
                                                                                                {
                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "GCReadSequential");
                                                                                                  if (v438 >= 0xE) {
                                                                                                    uint64_t v369 = 14;
                                                                                                  }
                                                                                                  else {
                                                                                                    uint64_t v369 = v438;
                                                                                                  }
                                                                                                  if (v369)
                                                                                                  {
                                                                                                    for (uint64_t i164 = 0;
                                                                                                          i164 != v369;
                                                                                                          ++i164)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i164, v15[i164]);
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  if ((v432 & 2) != 0 && v14 == 1118 || (v432 & 2) != 0 && v14 == 1121 || (v432 & 1) != 0 && v14 == 1123 || (v432 & 1) != 0 && v14 == 1124 || (v432 & 1) != 0 && v14 == 1125 || (v432 & 1) != 0 && v14 == 1126 || (v432 & 1) != 0 && v14 == 1137 || (v432 & 1) != 0 && v14 == 1138 || (v432 & 1) != 0 && v14 == 1156) {
                                                                                                    goto LABEL_81;
                                                                                                  }
                                                                                                  if ((v432 & 1) != 0 && v14 == 1116)
                                                                                                  {
                                                                                                    uint64_t result = fprintf(v8, "%20s:\n", "gcwamp");
                                                                                                    if (v438 >= 0x20) {
                                                                                                      uint64_t v371 = 32;
                                                                                                    }
                                                                                                    else {
                                                                                                      uint64_t v371 = v438;
                                                                                                    }
                                                                                                    if (v371)
                                                                                                    {
                                                                                                      for (uint64_t i165 = 0;
                                                                                                            i165 != v371;
                                                                                                            ++i165)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i165, v15[i165]);
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    if ((v432 & 1) != 0 && v14 == 1157 || (v432 & 1) != 0 && v14 == 1158 || (v432 & 1) != 0 && v14 == 1164) {
                                                                                                      goto LABEL_81;
                                                                                                    }
                                                                                                    if ((v432 & 2) != 0 && v14 == 1159)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "slcWLPerDipDelta");
                                                                                                      if (v438 >= 0x18) {
                                                                                                        uint64_t v373 = 24;
                                                                                                      }
                                                                                                      else {
                                                                                                        uint64_t v373 = v438;
                                                                                                      }
                                                                                                      if (v373)
                                                                                                      {
                                                                                                        for (uint64_t i166 = 0;
                                                                                                              i166 != v373;
                                                                                                              ++i166)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i166, v15[i166]);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else if ((v432 & 2) != 0 && v14 == 1160)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "slcWLPerDipAvgPEC");
                                                                                                      if (v438 >= 0x18) {
                                                                                                        uint64_t v375 = 24;
                                                                                                      }
                                                                                                      else {
                                                                                                        uint64_t v375 = v438;
                                                                                                      }
                                                                                                      if (v375)
                                                                                                      {
                                                                                                        for (uint64_t i167 = 0;
                                                                                                              i167 != v375;
                                                                                                              ++i167)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i167, v15[i167]);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else if ((v432 & 2) != 0 && v14 == 1161)
                                                                                                    {
                                                                                                      uint64_t result = fprintf(v8, "%20s:\n", "slcWLPerDipSlack");
                                                                                                      if (v438 >= 0x18) {
                                                                                                        uint64_t v377 = 24;
                                                                                                      }
                                                                                                      else {
                                                                                                        uint64_t v377 = v438;
                                                                                                      }
                                                                                                      if (v377)
                                                                                                      {
                                                                                                        for (uint64_t i168 = 0;
                                                                                                              i168 != v377;
                                                                                                              ++i168)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i168, v15[i168]);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      if ((v432 & 2) != 0 && v14 == 1162 || (v432 & 2) != 0 && v14 == 1163) {
                                                                                                        goto LABEL_81;
                                                                                                      }
                                                                                                      if ((v432 & 2) != 0 && v14 == 1216)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "tlcWLPerDipAvgPEC");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v379 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v379 = v438;
                                                                                                        }
                                                                                                        if (v379)
                                                                                                        {
                                                                                                          for (uint64_t i169 = 0;
                                                                                                                i169 != v379;
                                                                                                                ++i169)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i169, v15[i169]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 2) != 0 && v14 == 1217)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "tlcWLPerDipMaxPEC");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v381 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v381 = v438;
                                                                                                        }
                                                                                                        if (v381)
                                                                                                        {
                                                                                                          for (uint64_t i170 = 0;
                                                                                                                i170 != v381;
                                                                                                                ++i170)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i170, v15[i170]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 2) != 0 && v14 == 1218)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "tlcWLPerDipMinPEC");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v383 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v383 = v438;
                                                                                                        }
                                                                                                        if (v383)
                                                                                                        {
                                                                                                          for (uint64_t i171 = 0;
                                                                                                                i171 != v383;
                                                                                                                ++i171)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i171, v15[i171]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 1) != 0 && v14 == 1147)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc12");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v385 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v385 = v438;
                                                                                                        }
                                                                                                        if (v385)
                                                                                                        {
                                                                                                          for (uint64_t i172 = 0;
                                                                                                                i172 != v385;
                                                                                                                ++i172)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i172, v15[i172]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 1) != 0 && v14 == 1148)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc1");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v387 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v387 = v438;
                                                                                                        }
                                                                                                        if (v387)
                                                                                                        {
                                                                                                          for (uint64_t i173 = 0;
                                                                                                                i173 != v387;
                                                                                                                ++i173)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i173, v15[i173]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else if ((v432 & 1) != 0 && v14 == 1149)
                                                                                                      {
                                                                                                        uint64_t result = fprintf(v8, "%20s:\n", "gc_concurrent_dw_gc2");
                                                                                                        if (v438 >= 0x18) {
                                                                                                          uint64_t v389 = 24;
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v389 = v438;
                                                                                                        }
                                                                                                        if (v389)
                                                                                                        {
                                                                                                          for (uint64_t i174 = 0;
                                                                                                                i174 != v389;
                                                                                                                ++i174)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i174, v15[i174]);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        if ((v432 & 1) != 0 && v14 == 1178) {
                                                                                                          goto LABEL_81;
                                                                                                        }
                                                                                                        if ((v432 & 2) != 0 && v14 == 1179)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc1");
                                                                                                          if (v438 >= 4) {
                                                                                                            uint64_t v391 = 4;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v391 = v438;
                                                                                                          }
                                                                                                          if (v391)
                                                                                                          {
                                                                                                            for (uint64_t i175 = 0;
                                                                                                                  i175 != v391;
                                                                                                                  ++i175)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i175, v15[i175]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 2) != 0 && v14 == 1180)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc2");
                                                                                                          if (v438 >= 4) {
                                                                                                            uint64_t v393 = 4;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v393 = v438;
                                                                                                          }
                                                                                                          if (v393)
                                                                                                          {
                                                                                                            for (uint64_t i176 = 0;
                                                                                                                  i176 != v393;
                                                                                                                  ++i176)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i176, v15[i176]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 2) != 0 && v14 == 1181)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_cur_dw_gc3");
                                                                                                          if (v438 >= 4) {
                                                                                                            uint64_t v395 = 4;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v395 = v438;
                                                                                                          }
                                                                                                          if (v395)
                                                                                                          {
                                                                                                            for (uint64_t i177 = 0;
                                                                                                                  i177 != v395;
                                                                                                                  ++i177)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i177, v15[i177]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 1) != 0 && v14 == 1182)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_tot_dw_gc1");
                                                                                                          if (v438 >= 4) {
                                                                                                            uint64_t v397 = 4;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v397 = v438;
                                                                                                          }
                                                                                                          if (v397)
                                                                                                          {
                                                                                                            for (uint64_t i178 = 0;
                                                                                                                  i178 != v397;
                                                                                                                  ++i178)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i178, v15[i178]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else if ((v432 & 1) != 0 && v14 == 1183)
                                                                                                        {
                                                                                                          uint64_t result = fprintf(v8, "%20s:\n", "gc_tot_dw_gc2");
                                                                                                          if (v438 >= 4) {
                                                                                                            uint64_t v399 = 4;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v399 = v438;
                                                                                                          }
                                                                                                          if (v399)
                                                                                                          {
                                                                                                            for (uint64_t i179 = 0;
                                                                                                                  i179 != v399;
                                                                                                                  ++i179)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i179, v15[i179]);
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          if ((v432 & 2) != 0 && v14 == 1184 || (v432 & 2) != 0 && v14 == 1185 || (v432 & 2) != 0 && v14 == 1186 || (v432 & 1) != 0 && v14 == 1187) {
                                                                                                            goto LABEL_81;
                                                                                                          }
                                                                                                          if ((v432 & 1) != 0 && v14 == 1168)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectPERemovalTotalCost");
                                                                                                            if (v438 >= 2) {
                                                                                                              uint64_t v401 = 2;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v401 = v438;
                                                                                                            }
                                                                                                            if (v401)
                                                                                                            {
                                                                                                              for (uint64_t i180 = 0;
                                                                                                                    i180 != v401;
                                                                                                                    ++i180)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i180, v15[i180]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1198)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectPERemovalMostSevereCost");
                                                                                                            if (v438 >= 3) {
                                                                                                              uint64_t v403 = 3;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v403 = v438;
                                                                                                            }
                                                                                                            if (v403)
                                                                                                            {
                                                                                                              for (uint64_t i181 = 0;
                                                                                                                    i181 != v403;
                                                                                                                    ++i181)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i181, v15[i181]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1169)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectEmptySpotRemovalTotalCost");
                                                                                                            if (v438 >= 2) {
                                                                                                              uint64_t v405 = 2;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v405 = v438;
                                                                                                            }
                                                                                                            if (v405)
                                                                                                            {
                                                                                                              for (uint64_t i182 = 0;
                                                                                                                    i182 != v405;
                                                                                                                    ++i182)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i182, v15[i182]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1171)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectEmptySpotRemovalAge");
                                                                                                            if (v438 >= 0xA) {
                                                                                                              uint64_t v407 = 10;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v407 = v438;
                                                                                                            }
                                                                                                            if (v407)
                                                                                                            {
                                                                                                              for (uint64_t i183 = 0;
                                                                                                                    i183 != v407;
                                                                                                                    ++i183)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i183, v15[i183]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1172)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectGBBedMostSevereCost");
                                                                                                            if (v438 >= 3) {
                                                                                                              uint64_t v409 = 3;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v409 = v438;
                                                                                                            }
                                                                                                            if (v409)
                                                                                                            {
                                                                                                              for (uint64_t i184 = 0;
                                                                                                                    i184 != v409;
                                                                                                                    ++i184)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i184, v15[i184]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1196)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectGBBedTotalCost");
                                                                                                            if (v438 >= 5) {
                                                                                                              uint64_t v411 = 5;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v411 = v438;
                                                                                                            }
                                                                                                            if (v411)
                                                                                                            {
                                                                                                              for (uint64_t i185 = 0;
                                                                                                                    i185 != v411;
                                                                                                                    ++i185)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i185, v15[i185]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else if ((v432 & 1) != 0 && v14 == 1197)
                                                                                                          {
                                                                                                            uint64_t result = fprintf(v8, "%20s:\n", "poDetectGBBedAge");
                                                                                                            if (v438 >= 0xA) {
                                                                                                              uint64_t v413 = 10;
                                                                                                            }
                                                                                                            else {
                                                                                                              uint64_t v413 = v438;
                                                                                                            }
                                                                                                            if (v413)
                                                                                                            {
                                                                                                              for (uint64_t i186 = 0;
                                                                                                                    i186 != v413;
                                                                                                                    ++i186)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i186, v15[i186]);
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            if ((v432 & 1) != 0 && v14 == 1199 || (v432 & 1) != 0 && v14 == 1191 || (v432 & 1) != 0 && v14 == 1192 || (v432 & 1) != 0 && v14 == 1205) {
                                                                                                              goto LABEL_81;
                                                                                                            }
                                                                                                            if ((v432 & 1) != 0 && v14 == 1211)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "forcedAllocationSmallEraseQ");
                                                                                                              if (v438 >= 0x18) {
                                                                                                                uint64_t v415 = 24;
                                                                                                              }
                                                                                                              else {
                                                                                                                uint64_t v415 = v438;
                                                                                                              }
                                                                                                              if (v415)
                                                                                                              {
                                                                                                                for (uint64_t i187 = 0;
                                                                                                                      i187 != v415;
                                                                                                                      ++i187)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i187, v15[i187]);
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else if ((v432 & 1) != 0 && v14 == 1201)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "gcVerticalSuccssfulAlignments");
                                                                                                              if (v438 >= 4) {
                                                                                                                uint64_t v417 = 4;
                                                                                                              }
                                                                                                              else {
                                                                                                                uint64_t v417 = v438;
                                                                                                              }
                                                                                                              if (v417)
                                                                                                              {
                                                                                                                for (uint64_t i188 = 0;
                                                                                                                      i188 != v417;
                                                                                                                      ++i188)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i188, v15[i188]);
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else if ((v432 & 1) != 0 && v14 == 1202)
                                                                                                            {
                                                                                                              uint64_t result = fprintf(v8, "%20s:\n", "gcVerticalNoAlignmentDueToMissingSegs");
                                                                                                              if (v438 >= 4) {
                                                                                                                uint64_t v419 = 4;
                                                                                                              }
                                                                                                              else {
                                                                                                                uint64_t v419 = v438;
                                                                                                              }
                                                                                                              if (v419)
                                                                                                              {
                                                                                                                for (uint64_t i189 = 0;
                                                                                                                      i189 != v419;
                                                                                                                      ++i189)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i189, v15[i189]);
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              if ((v432 & 2) != 0 && v14 == 1225 || (v432 & 2) != 0 && v14 == 1226 || (v432 & 2) != 0 && v14 == 1227) {
                                                                                                                goto LABEL_81;
                                                                                                              }
                                                                                                              if ((v432 & 1) != 0 && v14 == 1228)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "HUPolicyWidthDown");
                                                                                                                if (v438 >= 6) {
                                                                                                                  uint64_t v421 = 6;
                                                                                                                }
                                                                                                                else {
                                                                                                                  uint64_t v421 = v438;
                                                                                                                }
                                                                                                                if (v421)
                                                                                                                {
                                                                                                                  for (uint64_t i190 = 0;
                                                                                                                        i190 != v421;
                                                                                                                        ++i190)
                                                                                                                  {
                                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i190, v15[i190]);
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                              else if ((v432 & 1) != 0 && v14 == 1229)
                                                                                                              {
                                                                                                                uint64_t result = fprintf(v8, "%20s:\n", "HUPolicyWidthUp");
                                                                                                                if (v438 >= 6) {
                                                                                                                  uint64_t v423 = 6;
                                                                                                                }
                                                                                                                else {
                                                                                                                  uint64_t v423 = v438;
                                                                                                                }
                                                                                                                if (v423)
                                                                                                                {
                                                                                                                  for (uint64_t i191 = 0;
                                                                                                                        i191 != v423;
                                                                                                                        ++i191)
                                                                                                                  {
                                                                                                                    uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i191, v15[i191]);
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                if ((v432 & 2) != 0 && v14 == 1230 || (v432 & 2) != 0 && v14 == 1231 || (v432 & 1) != 0 && v14 == 1235 || (v432 & 1) != 0 && v14 == 1236 || (v432 & 1) != 0 && v14 == 1232 || (v432 & 1) != 0 && v14 == 1233 || (v432 & 1) != 0 && v14 == 1234) {
                                                                                                                  goto LABEL_81;
                                                                                                                }
                                                                                                                if ((v432 & 1) != 0 && v14 == 1224)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "apfsValidLbaOvershoot");
                                                                                                                  if (v438 >= 0x14) {
                                                                                                                    uint64_t v425 = 20;
                                                                                                                  }
                                                                                                                  else {
                                                                                                                    uint64_t v425 = v438;
                                                                                                                  }
                                                                                                                  if (v425)
                                                                                                                  {
                                                                                                                    for (uint64_t i192 = 0;
                                                                                                                          i192 != v425;
                                                                                                                          ++i192)
                                                                                                                    {
                                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i192, v15[i192]);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                else if ((v432 & 1) != 0 && v14 == 1241)
                                                                                                                {
                                                                                                                  uint64_t result = fprintf(v8, "%20s:\n", "s2rTimeHisto");
                                                                                                                  if (v438 >= 0xA) {
                                                                                                                    uint64_t v427 = 10;
                                                                                                                  }
                                                                                                                  else {
                                                                                                                    uint64_t v427 = v438;
                                                                                                                  }
                                                                                                                  if (v427)
                                                                                                                  {
                                                                                                                    for (uint64_t i193 = 0;
                                                                                                                          i193 != v427;
                                                                                                                          ++i193)
                                                                                                                    {
                                                                                                                      uint64_t result = fprintf(v8, "                      [%d] = %llu\n", i193, v15[i193]);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  if ((v432 & 2) != 0 && v14 == 1247 || (v432 & 2) != 0 && v14 == 1248 || (v432 & 1) != 0 && v14 == 1254 || (v432 & 1) != 0 && v14 == 1255 || (v432 & 1) != 0 && v14 == 1256) {
                                                                                                                    goto LABEL_81;
                                                                                                                  }
                                                                                                                  if (*(_DWORD *)v435 && v438)
                                                                                                                  {
                                                                                                                    if (v438 == 1)
                                                                                                                    {
                                                                                                                      uint64_t result = fprintf(v8, "                KEY_%u:\t%llu\n");
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      printf("KEY_%u:\n", v14);
                                                                                                                      uint64_t v429 = 0;
                                                                                                                      if (v438 >= 0x100) {
                                                                                                                        uint64_t v430 = 256;
                                                                                                                      }
                                                                                                                      else {
                                                                                                                        uint64_t v430 = v438;
                                                                                                                      }
                                                                                                                      do
                                                                                                                      {
                                                                                                                        uint64_t result = fprintf(v8, "                      [%d] = %llu\n", v429, v15[v429]);
                                                                                                                        ++v429;
                                                                                                                      }
                                                                                                                      while (v430 != v429);
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_82:
          unint64_t v10 = v23;
          a4 = v432;
          uint64_t v7 = v22;
          unint64_t v11 = v434;
          goto LABEL_32;
        }
        long long v116 = "TempSensorMin";
      }
      uint64_t result = fprintf(v8, "%20s:\n", v116);
      if (v438) {
        uint64_t result = fprintf(v8, "                      [%d] = %llu\n");
      }
      goto LABEL_82;
    }
    uint64_t result = fprintf(v8, "%20s:\t%llu\n", "validLbas", *v15);
LABEL_32:
    a2 = &v15[v438];
    a3 = v17 - v438;
    if (!a3) {
      goto LABEL_3133;
    }
  }
  uint64_t result = fwrite("ASPUserClient: maxEl < elements", 0x1FuLL, 1uLL, v8);
LABEL_3133:
  if (v437)
  {
    uint64_t result = fprintf(v8, "%20s:\t%f\n", "WriteAmp", (double)v436 * (double)((v13 * *(_DWORD *)&v435[4]) >> 12) / (double)v437);
    if (v12)
    {
      if (v11) {
        uint64_t result = fprintf(v8, "%20s:\t%f\n", "IntermediateWriteAmp", (double)v12 * (double)((v11 * v13) >> 12) / (double)v437);
      }
    }
  }
  if (v10) {
    uint64_t result = fprintf(v8, "%20s:\t%llu\n", "statsMagCalTime", (v10 >> 24));
  }
LABEL_3139:
  if (v7)
  {
    return fclose(v8);
  }
  return result;
}

uint64_t extract_all_magazine_stats(const char *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v18 = 0xDEADBEEFDEADBEEFLL;
  __ptr = 0;
  unint64_t v16 = 0;
  size_t __size = 0;
  if (!a1)
  {
    CFDictionaryRef v1 = "NULL";
    goto LABEL_19;
  }
  CFDictionaryRef v1 = a1;
  CFDictionaryRef v2 = fopen(a1, "a");
  if (!v2)
  {
LABEL_19:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error: cannot open dest file %s", v1);
    uint64_t v11 = 0;
    int v3 = 0;
    goto LABEL_23;
  }
  int v3 = v2;
  v20[0] = xmmword_1D2B029E0;
  v20[1] = xmmword_1D2B029F0;
  v20[2] = xmmword_1D2B02A00;
  int v21 = 168;
  uint64_t v4 = v22;
  uint64_t v5 = -1176;
  do
  {
    *v4++ = v5 + 1512;
    v5 += 168;
  }
  while (v5);
  uint64_t v6 = 0;
  *(_OWORD *)&v22[28] = xmmword_1D2B02A10;
  int v23 = 8064;
  int v7 = 8736;
  do
  {
    *(_DWORD *)&v24[v6] = v7;
    v6 += 4;
    v7 += 4368;
  }
  while (v6 != 36);
  if (findNandExporter_tunnel(&v16) && v16 && *((_DWORD *)v16 + 4))
  {
    uint64_t v8 = 0;
    while (1)
    {
      int v9 = *(_DWORD *)((char *)v20 + v8);
      if (!getStatsMagazineBufferFromPast(v16, v9, 1, &__ptr, &__size))
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error: failed to extract stats magazine for %u hours back", v9);
        goto LABEL_22;
      }
      if (!__ptr || __size == 0) {
        break;
      }
      v8 += 4;
      fwrite(__ptr, __size, 1uLL, v3);
      fwrite(&v18, 8uLL, 1uLL, v3);
      free(__ptr);
      __ptr = 0;
      size_t __size = 0;
      if (v8 == 136)
      {
        syslog(5, "All stats magazine extracted.");
        uint64_t v11 = 1;
        goto LABEL_23;
      }
    }
    unint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v13 = "Error: extracted stats magazine but did not generate proper buffer";
    size_t v14 = 66;
  }
  else
  {
    unint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    unint64_t v13 = "Unable to get nand connection\n";
    size_t v14 = 30;
  }
  fwrite(v13, v14, 1uLL, v12);
LABEL_22:
  uint64_t v11 = 0;
LABEL_23:
  if (v16)
  {
    ReleaseIOInterfaces((uint64_t)v16);
    unint64_t v16 = 0;
  }
  if (v3) {
    fclose(v3);
  }
  if (__ptr) {
    free(__ptr);
  }
  return v11;
}

uint64_t print_all_stats(char *a1)
{
  return print_asp_magazine_stats(a1, 0, 0);
}

uint64_t print_asp_stats(char *a1)
{
  return print_asp_magazine_stats(a1, 0, 1);
}

uint64_t print_band_stats(char *a1)
{
  return print_band_stats_v2(a1, 0);
}

uint64_t print_band_stats_v2(char *a1, int a2)
{
  LODWORD(outputStruct) = 0;
  int TunnelOutputThroughSizeOnlyHandling = getTunnelOutputThroughSizeOnlyHandling(0, 299, 0, &outputStruct);
  int v5 = outputStruct & 0xF;
  if (!TunnelOutputThroughSizeOnlyHandling) {
    int v5 = 1;
  }
  uint64_t v13 = 0;
  long long outputStruct = 0;
  if (v5 != 2)
  {
    if (v5 == 3)
    {
      TunnelBuffer_zeroflag = (unsigned int *)fetchTunnelBuffer_zeroflag(0, 297, &v13, 0, 1);
      long long outputStruct = TunnelBuffer_zeroflag;
      if (TunnelBuffer_zeroflag)
      {
        int v7 = TunnelBuffer_zeroflag;
        print_band_stats_buf_asp3(a1, (uint64_t)TunnelBuffer_zeroflag, v13);
LABEL_12:
        free(v7);
        return 1;
      }
      unint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v11 = "Error: Cannot Extract Band Stats for ASP3\n";
      size_t v12 = 42;
      goto LABEL_16;
    }
LABEL_10:
    if (asp_data_extraction_helper(7u, &outputStruct, &v13))
    {
      print_band_stats_buf(a1, outputStruct, v13, a2);
      int v7 = outputStruct;
      goto LABEL_12;
    }
    unint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v11 = "Error: IO NVMe Smart cmd failed to extract ASP excport stats!\n";
    size_t v12 = 62;
    goto LABEL_16;
  }
  if (!a2) {
    goto LABEL_10;
  }
  uint64_t v8 = (unsigned int *)fetchTunnelBuffer_zeroflag(0, 262, &v13, 0, 1);
  long long outputStruct = v8;
  if (v8)
  {
    int v7 = v8;
    print_band_stats_buf(a1, v8, v13, 1);
    goto LABEL_12;
  }
  unint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
  uint64_t v11 = "Error: Cannot Extract Band Stats and Validity\n";
  size_t v12 = 46;
LABEL_16:
  fwrite(v11, v12, 1uLL, v10);
  return 0;
}

void print_band_stats_buf_asp3(char *__filename, uint64_t a2, unsigned int a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v33 = 0;
  uint64_t v32 = 0;
  int v31 = -1;
  uint64_t v30 = -1;
  int v29 = 0;
  uint64_t v28 = 0;
  int v27 = 0;
  uint64_t v26 = 0;
  int v25 = 0;
  uint64_t v24 = 0;
  unint64_t v21 = 0;
  if (__filename)
  {
    uint64_t v6 = fopen(__filename, "a");
    if (!v6)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open %s\n", __filename);
      return;
    }
  }
  else
  {
    uint64_t v6 = (FILE *)*MEMORY[0x1E4F143D8];
  }
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Version mismatch, expected 1 got %d\n");
LABEL_9:
    if (__filename)
    {
      fclose(v6);
    }
    return;
  }
  if (*(_DWORD *)a2 > a3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Insufficient size, expected %d got %d\n");
    goto LABEL_9;
  }
  unsigned int v7 = *(_DWORD *)(a2 + 4);
  TunnelBuffer_zeroflag = (unsigned __int16 *)fetchTunnelBuffer_zeroflag(0, 264, &v21, 0, 1);
  if (TunnelBuffer_zeroflag)
  {
    int v9 = TunnelBuffer_zeroflag;
    if (v21 >= 2 && 21 * (unint64_t)*TunnelBuffer_zeroflag + 2 <= v21)
    {
      uint64_t v11 = (const char *)&partition_names;
      strcpy((char *)&partition_names, "USER PARTITION");
      strcpy((char *)qword_1EA69682E, "INTERMEDIATE PARTITION");
      strcpy(byte_1EA69684C, "SKINNY PARTITION");
      fwrite("Band stats:\n", 0xCuLL, 1uLL, v6);
      fwrite("Flags: Bits/Cell (1 or 3), r: retrace, C: GCcan, M: GCmust, S: Special, R: GCrd, E: erased, I: toInvalidate\n", 0x6CuLL, 1uLL, v6);
      int32x2_t v12 = *(int32x2_t *)(a2 + 12);
      __int32 v23 = v12.i32[0];
      int32x2_t v22 = vrev64_s32(v12);
      uint64_t v20 = v9;
      uint64_t v13 = (uint64_t)(v9 + 1);
      size_t v14 = print_band_stats_buf_asp3_part(v6, (unsigned int *)(a2 + 20), v7, 1u, (uint64_t)&v22, (uint64_t)&v24, (uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, v13);
      float v15 = print_band_stats_buf_asp3_part(v6, v14, v7, 0, (uint64_t)&v22, (uint64_t)&v24, (uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, v13);
      print_band_stats_buf_asp3_part(v6, v15, v7, 2u, (uint64_t)&v22, (uint64_t)&v24, (uint64_t)&v32, (uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, v13);
      for (unint64_t i = 0; i != 12; i += 4)
      {
        unsigned int v17 = *(_DWORD *)((char *)&v26 + i);
        if (v17)
        {
          int v18 = *(_DWORD *)((char *)&v28 + i) / v17;
          *(_DWORD *)((char *)&v28 + i) = v18;
          unsigned __int32 v19 = v22.u32[i / 4];
          fprintf(v6, "%-23s: Erase Cycles: Max(%d, %d%% of EoL) Min(%d, %d%% of EoL) Avg(%d, %d%% of EoL)\n", v11, *(_DWORD *)((char *)&v32 + i), 100 * *(_DWORD *)((char *)&v32 + i) / v19, *(_DWORD *)((char *)&v30 + i), 100 * *(_DWORD *)((char *)&v30 + i) / v19, v18, 100 * v18 / v19);
          fprintf(v6, "%24s Max band age:    (%d)\n", " ", *(_DWORD *)((char *)&v24 + i));
          fprintf(v6, "%24s EoL erase cycles:(%d)\n", " ", v19);
        }
        v11 += 30;
      }
      if (__filename) {
        fclose(v6);
      }
      unint64_t v10 = v20;
    }
    else
    {
      fwrite("Flow list too small", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      if (__filename) {
        fclose(v6);
      }
      unint64_t v10 = v9;
    }
    free(v10);
  }
  else
  {
    fwrite("Can't get flow list", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    if (__filename) {
      fclose(v6);
    }
  }
}

void print_band_stats_buf(char *__filename, unsigned int *a2, unsigned int a3, int a4)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  int v101 = 0;
  uint64_t v100 = 0;
  int v99 = -1;
  uint64_t v98 = -1;
  int v97 = 0;
  uint64_t v96 = 0;
  int v95 = 0;
  uint64_t v94 = 0;
  memset(v89, 0, sizeof(v89));
  v90[0] = 0;
  if (__filename)
  {
    unsigned int v7 = fopen(__filename, "a");
    if (!v7)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open %s\n", __filename);
      return;
    }
  }
  else
  {
    unsigned int v7 = (FILE *)*MEMORY[0x1E4F143D8];
  }
  fwrite("Band stats:\n", 0xCuLL, 1uLL, v7);
  fwrite("===========\n", 0xCuLL, 1uLL, v7);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  fprintf(v7, "numBands: %d\n", *a2);
  if (a4) {
    int v10 = 8;
  }
  else {
    int v10 = 5;
  }
  if (v9)
  {
    unsigned int v11 = v9 * v10 + 2 * v8 + 2;
    if (v11 <= a3)
    {
      int v12 = v11 + v8;
      unsigned int v13 = a3 >> 2;
      uint64_t v14 = (uint64_t)&a2[v11 + 2];
      float v15 = (int *)&a2[v11];
      if (a3 >> 2 == v12) {
        unint64_t v16 = v15;
      }
      else {
        unint64_t v16 = 0;
      }
      if (v8 == 2)
      {
        unsigned int v18 = a2[2];
        unsigned int v20 = a2[3];
        v93[0] = v18;
        v92[0] = v20;
        if (v13 == v12) {
          int v21 = *v15;
        }
        else {
          int v21 = 30000;
        }
        LODWORD(v91[0]) = v21;
        strcpy((char *)&partition_names, "INTERMEDIATE PARTITION");
        unsigned int v22 = a2[5];
        v93[1] = a2[4];
        unsigned __int32 v19 = a2 + 6;
        v92[1] = v22;
        if (v13 == v12) {
          int v23 = *(_DWORD *)(v14 - 4);
        }
        else {
          int v23 = 750;
        }
        HIDWORD(v91[0]) = v23;
        strcpy((char *)qword_1EA69682E, "USER PARTITION");
        if (!v21 || !v23)
        {
          unint64_t v16 = 0;
          v91[0] = 0x2EE00007530;
        }
      }
      else
      {
        if (v8 != 1)
        {
          fprintf(v7, "ASP returned %d partitions, the tool does not know how to handle this many partitions\n");
          goto LABEL_69;
        }
        unsigned int v18 = a2[2];
        unsigned int v17 = a2[3];
        v93[0] = v18;
        unsigned __int32 v19 = a2 + 4;
        v92[0] = v17;
        if (v13 == v12)
        {
          LODWORD(v91[0]) = *v15;
          strcpy((char *)&partition_names, "USER PARTITION");
          if (LODWORD(v91[0]))
          {
            unint64_t v16 = v15;
          }
          else
          {
            unint64_t v16 = 0;
            LODWORD(v91[0]) = 3000;
          }
        }
        else
        {
          unint64_t v16 = 0;
          LODWORD(v91[0]) = 3000;
          strcpy((char *)&partition_names, "USER PARTITION");
        }
      }
      uint64_t v83 = malloc_type_malloc(4 * v9, 0x100004052888210uLL);
      if (v83)
      {
        uint64_t v72 = v16;
        uint64_t v73 = __filename;
        __streauint64_t m = v7;
        unint64_t v24 = 0;
        int v78 = 0;
        int v79 = 0;
        int v80 = 0;
        uint64_t v81 = v9;
        while (1)
        {
          if (a4)
          {
            int v80 = v19[5];
            int v79 = v19[6];
            int v87 = v19 + 8;
            int v78 = v19[7];
          }
          else
          {
            int v87 = v19 + 5;
          }
          uint64_t v25 = 0;
          unsigned int v26 = *v19;
          int v27 = v19[1];
          unsigned int v28 = v19[2];
          unsigned int v29 = v19[3];
          int v30 = (*v19 >> 1) & 1;
          int v31 = (*v19 >> 2) & 1;
          int v32 = (*v19 >> 3) & 1;
          unsigned int v33 = v19[4];
          int v34 = v26 & 1;
          int v35 = (v26 >> 4) & 3;
          v83[v24] = v29;
          uint64_t v36 = (const char *)&partition_names;
          do
          {
            unint64_t v37 = v93[v25];
            if (v24 >= v37 && v24 <= v92[v25])
            {
              if (v24 == v37)
              {
                int v75 = v27;
                int v76 = v31;
                int v77 = v30;
                int v74 = v35;
                fprintf(__stream, "\n%s:\n", v36);
                int v35 = v74;
                int v27 = v75;
                int v31 = v76;
                int v30 = v77;
              }
              if (v24 >= v18)
              {
                unsigned int v39 = *((_DWORD *)&v94 + v25);
                if (v39 <= v33) {
                  unsigned int v39 = v33;
                }
                *((_DWORD *)&v94 + v25) = v39;
                unsigned int v40 = *((_DWORD *)&v100 + v25);
                if (v40 <= v29) {
                  unsigned int v40 = v29;
                }
                *((_DWORD *)&v100 + v25) = v40;
                unsigned int v41 = *((_DWORD *)&v98 + v25);
                if (v41 >= v29) {
                  unsigned int v41 = v29;
                }
                *((_DWORD *)&v98 + v25) = v41;
                uint64_t v38 = v25;
                *((_DWORD *)&v96 + v25) += v29;
                goto LABEL_52;
              }
LABEL_44:
              fprintf(__stream, "band: %4d\tUtility Band\n", v24);
              goto LABEL_58;
            }
            ++v25;
            v36 += 30;
          }
          while (v8 != v25);
          if (v24 < v18) {
            goto LABEL_44;
          }
          uint64_t v38 = 0;
LABEL_52:
          unsigned int v42 = 100 * v29;
          if (v28 == -1)
          {
            uint64_t v43 = __stream;
            fprintf(__stream, "band:%4d\tflow:%2d\tvalid:    NA\terases:%5d [%3d%%] \tage:%5d\tGCcan:%d GCmust:%d GCrd: %d Special: %d mode:%d ", v24, v27, v29, v42 / *((_DWORD *)v91 + v38), v33, v34, v30, v31, v32, v35);
            if (a4) {
              fwrite("Valid Sectors: NA Parity Sectors: NA Total Sectors: NA", 0x36uLL, 1uLL, __stream);
            }
          }
          else
          {
            double v71 = (float)v28 / 10.0;
            uint64_t v43 = __stream;
            fprintf(__stream, "band:%4d\tflow:%2d\tvalid:%6.1f\terases:%5d [%3d%%] \tage:%5d\tGCcan:%d GCmust:%d GCrd: %d Special: %d mode:%d ", v24, v27, v71, v29, v42 / *((_DWORD *)v91 + v38), v33, v34, v30, v31, v32, v35);
            if (a4) {
              fprintf(__stream, "Valid Sectors: %d Parity Sectors: %d Total Sectors: %d", v79, v78, v80);
            }
          }
          fputc(10, v43);
LABEL_58:
          unsigned __int32 v19 = v87;
          if (++v24 == v81)
          {
            uint64_t v44 = "";
            if (!v72) {
              uint64_t v44 = "*using kASPNand constants!";
            }
            uint64_t v82 = v44;
            size_t v45 = v92;
            uint64_t v46 = v93;
            unsigned int v47 = (unsigned int *)&v96;
            uint64_t v48 = (const char *)&partition_names;
            unsigned int v49 = &v100;
            uint64_t v50 = (unsigned int *)v91;
            unsigned int v51 = &v98;
            uint64_t v52 = &v94;
            uint64_t v53 = v8;
            do
            {
              unsigned int v55 = *v45++;
              unsigned int v54 = v55;
              unsigned int v56 = *v46++;
              BOOL v57 = v54 >= v56;
              unsigned int v58 = v54 - v56;
              if (v57)
              {
                unsigned int v59 = *v47 / (v58 + 1);
                *unsigned int v47 = v59;
                uint64_t v86 = v46;
                uint64_t v88 = v45;
                unsigned int v60 = *v50;
                fprintf(__stream, "%-23s: Erase Cycles: Max(%d, %d%% of EoL) Min(%d, %d%% of EoL) Avg(%d, %d%% of EoL)\n", v48, *(_DWORD *)v49, 100 * *(_DWORD *)v49 / v60, *(_DWORD *)v51, 100 * *(_DWORD *)v51 / v60, v59, 100 * v59 / v60);
                fprintf(__stream, "%24s Max band age:    (%d)\n", " ", *(_DWORD *)v52);
                fprintf(__stream, "%24s EoL erase cycles:(%d) %s\n", " ", v60, v82);
                uint64_t v46 = v86;
                size_t v45 = v88;
              }
              ++v47;
              v48 += 30;
              unsigned int v49 = (uint64_t *)((char *)v49 + 4);
              ++v50;
              unsigned int v51 = (uint64_t *)((char *)v51 + 4);
              uint64_t v52 = (uint64_t *)((char *)v52 + 4);
              --v53;
            }
            while (v53);
            BOOL v61 = v8 != 1;
            unsigned int v62 = v93[v61];
            unsigned int v63 = v92[v61];
            if (v62 <= v63)
            {
              float v67 = (float)*(unsigned int *)((unint64_t)&v100 | (4 * v61));
              unsigned int v65 = v73;
              uint64_t v66 = __stream;
              do
              {
                uint64_t v68 = 0x18u;
                while ((float)(*(float *)((char *)&quantilePoints + v68) * v67) > (float)v83[v62])
                {
                  v68 -= 4;
                  if (v68 == -4) {
                    goto LABEL_80;
                  }
                }
                ++*(_DWORD *)((char *)v89 + v68);
LABEL_80:
                ++v62;
              }
              while (v62 <= v63);
              int v64 = v90[0];
            }
            else
            {
              int v64 = 0;
              unsigned int v65 = v73;
              uint64_t v66 = __stream;
            }
            fwrite("USER PARTITION:\n", 0x10uLL, 1uLL, v66);
            unint64_t v69 = 0;
            uint64_t v70 = (unsigned int *)((unint64_t)&v100 | (4 * v61));
            do
            {
              if (v69) {
                fprintf(v66, "Erase Quantile [  %3.2f (%.2f - %.2f erases) ] = %d bands\n", *(float *)((char *)&quantilePoints + v69 + 24) * 100.0, (float)(*(float *)((char *)&quantilePoints + v69 + 24) * (float)*v70), (float)(*(float *)((char *)&quantilePoints + v69 + 28) * (float)*v70), v90[v69 / 4]);
              }
              else {
                fprintf(v66, "Erase Quantile [  %3.2f (%.2f - %.2f erases) ] = %d bands\n", *(float *)&dword_1EA694B48 * 100.0, (float)(*(float *)&dword_1EA694B48 * (float)*v70), (float)(*(float *)&dword_1EA694B48 * (float)*v70), v64);
              }
              v69 -= 4;
            }
            while (v69 != -28);
            if (v65) {
              fclose(v66);
            }
            free(v83);
            return;
          }
        }
      }
      fprintf(v7, "could not allocate %d bytes\n");
LABEL_69:
      if (__filename)
      {
        fclose(v7);
      }
    }
  }
}

uint64_t print_grown_defects(char *a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v9 = 0;
  int v10 = 0;
  if (asp_data_extraction_helper(8u, &v10, &v9))
  {
    if (a2) {
      *a3 = print_grown_defects_buf(a1, (uint64_t)v10, 1, a4);
    }
    else {
      print_grown_defects_buf(a1, (uint64_t)v10, 0, a4);
    }
    free(v10);
    return 1;
  }
  else
  {
    fwrite("Error: IO NVMe Smart cmd failed to extract ASP NAND defects!\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    return 0;
  }
}

uint64_t print_grown_defects_buf(char *__filename, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  strcpy(v29, "InvalidPage");
  strcpy(v28, "InvalidTemp");
  strcpy(v26, "Unknown");
  int v27 = 0;
  if (__filename)
  {
    __streauint64_t m = fopen(__filename, "a");
    if (!__stream)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open %s\n", __filename);
      return 0;
    }
  }
  else
  {
    __streauint64_t m = (FILE *)*MEMORY[0x1E4F143D8];
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (a3) {
    goto LABEL_10;
  }
  uint64_t v9 = (unsigned __int16 *)(a2 + 12);
  if (a4)
  {
    if (v8)
    {
      int v10 = (_DWORD *)(a4 + 16);
      uint64_t v11 = *(unsigned int *)(a2 + 8);
      do
      {
        *(v10 - 4) = *(_DWORD *)v9;
        *(v10 - 3) = *((_DWORD *)v9 + 1);
        *(v10 - 2) = *((_DWORD *)v9 + 2);
        *(v10 - 1) = *((_DWORD *)v9 + 3);
        *int v10 = *((_DWORD *)v9 + 4);
        v10[1] = *((_DWORD *)v9 + 5);
        v10[2] = *((_DWORD *)v9 + 6);
        v10[3] = *((_DWORD *)v9 + 7);
        v10 += 8;
        v9 += 16;
        --v11;
      }
      while (v11);
    }
LABEL_10:
    if (!__filename) {
      return v8;
    }
LABEL_11:
    fclose(__stream);
    return v8;
  }
  int v22 = *(_DWORD *)(a2 + 4);
  int v23 = __filename;
  fwrite("===Grown Bad Blocks===\n", 0x17uLL, 1uLL, __stream);
  uint64_t v24 = v8;
  if (v8)
  {
    int v13 = v8;
    do
    {
      int v14 = *v9;
      int v15 = v9[1];
      int v17 = *((_DWORD *)v9 + 1);
      int v16 = *((_DWORD *)v9 + 2);
      int v18 = *((_DWORD *)v9 + 6);
      uint64_t v19 = *((int *)v9 + 7);
      int v21 = *((_DWORD *)v9 + 3);
      int v20 = *((_DWORD *)v9 + 4);
      if (*((_DWORD *)v9 + 5) == 4095) {
        __sprintf_chk(v29, 0, 0xCuLL, "%s");
      }
      else {
        __sprintf_chk(v29, 0, 0xCuLL, "%u");
      }
      if (v18 << 24 == -2130706432) {
        __sprintf_chk(v28, 0, 0xCuLL, "%s");
      }
      else {
        __sprintf_chk(v28, 0, 0xCuLL, "%d");
      }
      if (v19 <= 3) {
        __sprintf_chk(v26, 0, 0xCuLL, "%s", off_1E6929CC8[v19]);
      }
      fprintf(__stream, "Bus: %u CE: %u CAU: %u Block: %u Cycles: %u Reason: %u Page: %s Temp: %s mode: %s\n", v14, v15, v17, v16, v21, v20, v29, v28, v26);
      v9 += 16;
      --v13;
    }
    while (v13);
  }
  uint64_t v8 = v24;
  fprintf(__stream, "Grown Bad Blocks Count: %u\n", v24);
  fprintf(__stream, "Factory Bad Blocks Count: %u\n", v22);
  if (v23) {
    goto LABEL_11;
  }
  return v8;
}

uint64_t print_grown_defects_ext(char *a1)
{
  return print_grown_defects(a1, 0, 0, 0);
}

uint64_t print_snapshots(char *__filename)
{
  size_t v14 = 0;
  *(void *)int v15 = 0;
  unsigned int v13 = 0;
  if (__filename)
  {
    CFDictionaryRef v2 = fopen(__filename, "a");
    if (!v2)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open %s\n", __filename);
      return 0;
    }
    int v3 = v2;
    syslog(5, "printing ASP snapshots to %s", __filename);
    CFDictionaryRef TunnelBuffer_simple = fetchTunnelBuffer_simple(22, v15);
    if (!TunnelBuffer_simple) {
      goto LABEL_18;
    }
  }
  else
  {
    int v3 = (FILE *)*MEMORY[0x1E4F143D8];
    CFDictionaryRef TunnelBuffer_simple = fetchTunnelBuffer_simple(22, v15);
    if (!TunnelBuffer_simple) {
      return 0;
    }
  }
  int v5 = TunnelBuffer_simple;
  syslog(5, "ASP get snapshot data done.");
  uint64_t v6 = (void *)MEMORY[0x1E4F14B00];
  size_t v16 = 40 * *MEMORY[0x1E4F14B00];
  unsigned int v7 = (char *)malloc_type_valloc(v16, 0xE6002091uLL);
  if (!v7)
  {
    size_t v16 = 4 * *v6;
    unsigned int v7 = (char *)malloc_type_valloc(v16, 0x3543481uLL);
    if (!v7)
    {
      fwrite("can't allocate buffer!\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      free(v5);
      if (__filename) {
LABEL_18:
      }
        fclose(v3);
      return 0;
    }
  }
  uint64_t v8 = fetchTunnelBuffer_simple(145, &v14);
  syslog(5, "ASP get snapshot header done.");
  if (v8 && v8[1] > 5u)
  {
    uint64_t v9 = v8[5];
    if (v14 != v9)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Read snapshot header %zu bytes, expect %u bytes\n", v14, v9);
      goto LABEL_21;
    }
    unsigned int v13 = 0;
    while (!ASPParseSnapshotBufferWithInplaceParser((uint64_t)v5, *(uint64_t *)v15, v7, &v16, v8, &v13))
      fputs(v7, v3);
  }
  else if ((ASPParseSnapshotBuffer((uint64_t)v5, *(unint64_t *)v15, v7, &v16) & 1) == 0)
  {
    fwrite("Snapshot parser requires a larger string buffer\n", 0x30uLL, 1uLL, v3);
LABEL_21:
    uint64_t v10 = 0;
    goto LABEL_22;
  }
  fputs(v7, v3);
  uint64_t v10 = 1;
LABEL_22:
  free(v5);
  free(v7);
  free(v8);
  uint64_t v11 = "stdout";
  if (__filename) {
    uint64_t v11 = __filename;
  }
  syslog(5, "ASP snapshot written to %s done", v11);
  if (__filename) {
    fclose(v3);
  }
  return v10;
}

unsigned int *print_band_stats_buf_asp3_part(FILE *__stream, unsigned int *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = a2;
  int v12 = __stream;
  unsigned int v13 = *a2;
  if (a4 == HIBYTE(*a2))
  {
    uint64_t v11 = a2 + 1;
    int v14 = v13 & 0xFFFFFF;
    if ((v13 & 0xFFFFFF) != 0)
    {
      uint64_t v16 = a11;
      uint64_t v17 = a4;
      fprintf(__stream, "==== %s ====\n", (const char *)&partition_names + 30 * a4);
      fprintf(v12, "\t%d bands\n", v14);
      int v18 = 0;
      unsigned int v54 = v12;
      int v47 = v14;
      do
      {
        unsigned int v51 = v11[3];
        unsigned int v20 = v11[4];
        int v19 = v11[5];
        int v21 = v12;
        unsigned int v22 = v11[1];
        uint64_t v23 = 73;
        uint64_t v24 = 45;
        if ((v22 & 0x40) == 0) {
          uint64_t v23 = 45;
        }
        uint64_t v46 = v23;
        uint64_t v25 = 114;
        if ((v22 & 0x100) == 0) {
          uint64_t v25 = 45;
        }
        uint64_t v26 = 67;
        if ((v22 & 1) == 0) {
          uint64_t v26 = 45;
        }
        uint64_t v27 = 77;
        if ((v22 & 2) == 0) {
          uint64_t v27 = 45;
        }
        uint64_t v28 = 82;
        if ((v22 & 4) == 0) {
          uint64_t v28 = 45;
        }
        uint64_t v29 = 83;
        if ((v22 & 8) == 0) {
          uint64_t v29 = 45;
        }
        if ((v22 & 0x10) != 0) {
          uint64_t v24 = 69;
        }
        uint64_t v45 = v25;
        uint64_t v30 = 49;
        if ((v22 & 0x10) == 0) {
          uint64_t v30 = 51;
        }
        fprintf(v21, "Band:%4d  Flow:%s [%d]  Flags:%c%c%c%c%c%c%c%c  ", *v11, (const char *)(v16 + 21 * v11[2]), v11[2], v30, v45, v26, v27, v28, v29, v24, v46);
        if (v51 == -1 || !v20) {
          fwrite("Valid Sectors: NA   Total Sectors: NA  ", 0x27uLL, 1uLL, v54);
        }
        else {
          fprintf(v54, "Valid Sectors: %5d  Total Sectors: %5d [%d%%]  ", v19, v20, 100 * v19 / v20);
        }
        int v52 = v18;
        unsigned int v31 = v11[6];
        if ((v22 & 0x80) != 0)
        {
          v11 += 7;
          if (v31)
          {
            do
            {
              unsigned int v37 = *v11;
              unsigned int v38 = v11[1];
              unsigned int v39 = v11[2];
              unsigned int v40 = *(_DWORD *)(a6 + 4 * v17);
              if (v40 <= v39) {
                unsigned int v40 = v11[2];
              }
              *(_DWORD *)(a6 + 4 * v17) = v40;
              unsigned int v41 = *(_DWORD *)(a7 + 4 * v17);
              if (v41 <= v38) {
                unsigned int v41 = v38;
              }
              *(_DWORD *)(a7 + 4 * v17) = v41;
              unsigned int v42 = *(_DWORD *)(a8 + 4 * v17);
              if (v42 >= v38) {
                unsigned int v42 = v38;
              }
              *(_DWORD *)(a8 + 4 * v17) = v42;
              *(_DWORD *)(a9 + 4 * v17) += v38;
              uint64_t v43 = v11 + 3;
              ++*(_DWORD *)(a10 + 4 * v17);
              fprintf(v54, "\n\tBlock:%4d [Bork:%4d Dip: %4d Age:%5d Cycles:%5d EOL%%:%3d]", v37, v37 / a3, v37 % a3, v39, v38, 100 * v38 / *(_DWORD *)(a5 + 4 * v17));
              v11 += 3;
              --v31;
            }
            while (v31);
            uint64_t v11 = v43;
            int v12 = v54;
            uint64_t v16 = a11;
            int v14 = v47;
          }
          else
          {
            int v12 = v54;
          }
        }
        else
        {
          int v32 = v11 + 8;
          unsigned int v33 = v11[7];
          fprintf(v54, "Age:%5d Cycles:%5d EOL%%:%3d\n", v33, v31, 100 * v31 / *(_DWORD *)(a5 + 4 * v17));
          unsigned int v34 = *(_DWORD *)(a6 + 4 * v17);
          if (v34 <= v33) {
            unsigned int v34 = v33;
          }
          *(_DWORD *)(a6 + 4 * v17) = v34;
          unsigned int v35 = *(_DWORD *)(a7 + 4 * v17);
          if (v35 <= v31) {
            unsigned int v35 = v31;
          }
          *(_DWORD *)(a7 + 4 * v17) = v35;
          unsigned int v36 = *(_DWORD *)(a8 + 4 * v17);
          if (v36 >= v31) {
            unsigned int v36 = v31;
          }
          *(_DWORD *)(a8 + 4 * v17) = v36;
          *(_DWORD *)(a9 + 4 * v17) += v31;
          ++*(_DWORD *)(a10 + 4 * v17);
          uint64_t v11 = v32;
          int v12 = v54;
        }
        fputc(10, v12);
        ++v18;
      }
      while (v52 + 1 != v14);
      fputc(10, v12);
    }
  }
  else
  {
    fwrite("Error parsing! missing header", 0x1DuLL, 1uLL, __stream);
  }
  return v11;
}

uint64_t print_trace_dump_buf(char *__filename, const char *a2)
{
  if (__filename)
  {
    uint64_t v4 = fopen(__filename, "a");
    if (!v4) {
      return fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open %s\n", __filename);
    }
  }
  else
  {
    uint64_t v4 = (FILE *)*MEMORY[0x1E4F143D8];
  }
  fwrite("Trace dump:\n", 0xCuLL, 1uLL, v4);
  uint64_t result = fputs(a2, v4);
  if (__filename)
  {
    return fclose(v4);
  }
  return result;
}

uint64_t print_trace_dump(char *a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (asp_data_extraction_helper(9u, &v4, &v3))
  {
    print_trace_dump_buf(a1, (const char *)v4);
    free(v4);
    return 1;
  }
  else
  {
    fwrite("Error: IO NVMe Smart cmd failed to extract debug dump trace!\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    return 0;
  }
}

BOOL read_tunnel(char **a1, int a2, void *a3, size_t a4, char a5)
{
  size_t v11 = 0;
  TunnelBufferWithInVal = fetchTunnelBufferWithInVal(a1, a2, 0, 0, &v11, 0, a5);
  if (!TunnelBufferWithInVal) {
    return 0;
  }
  uint64_t v8 = TunnelBufferWithInVal;
  BOOL v9 = v11 >= a4;
  if (v11 >= a4) {
    memcpy(a3, TunnelBufferWithInVal, a4);
  }
  free(v8);
  return v9;
}

BOOL read_geometry(char **a1, uint64_t a2)
{
  BOOL tunnel = 1;
  if (!read_tunnel(a1, 186, (void *)a2, 0x180uLL, 1))
  {
    *(_OWORD *)__c = 0u;
    memset(v23, 0, 56);
    BOOL tunnel = read_tunnel(a1, 55, __c, 0x48uLL, 0);
    if (tunnel)
    {
      *(_OWORD *)(a2 + 352) = 0u;
      *(_OWORD *)(a2 + 368) = 0u;
      *(_OWORD *)(a2 + 320) = 0u;
      *(_OWORD *)(a2 + 336) = 0u;
      *(_OWORD *)(a2 + 288) = 0u;
      *(_OWORD *)(a2 + 304) = 0u;
      *(_OWORD *)(a2 + 256) = 0u;
      *(_OWORD *)(a2 + 272) = 0u;
      *(_OWORD *)(a2 + 224) = 0u;
      *(_OWORD *)(a2 + 240) = 0u;
      *(_OWORD *)(a2 + 192) = 0u;
      *(_OWORD *)(a2 + 208) = 0u;
      *(_OWORD *)(a2 + 160) = 0u;
      *(_OWORD *)(a2 + 176) = 0u;
      *(_OWORD *)(a2 + 128) = 0u;
      *(_OWORD *)(a2 + 144) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)a2 = 1;
      uint64_t v5 = *(void *)&__c[1];
      unsigned int v6 = v23[0];
      *(void *)&long long v7 = *(void *)&__c[1];
      *((void *)&v7 + 1) = *(void *)&v23[0];
      *(_OWORD *)(a2 + 4) = v7;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)((char *)v23 + 8);
      *(_OWORD *)(a2 + 36) = *(_OWORD *)((char *)&v23[1] + 8);
      *(_OWORD *)(a2 + 52) = *(_OWORD *)((char *)&v23[2] + 8);
      *(void *)(a2 + 72) = 0;
      *(_DWORD *)(a2 + 68) = 0;
      uint64_t v8 = HIDWORD(v5);
      if (HIDWORD(v5) >= 2)
      {
        uint64_t v9 = 0;
        do
        {
          *(unsigned char *)(a2 + 80 + v9) = 2 * v9;
          ++v9;
        }
        while (HIDWORD(v5) >> 1 != v9);
        unint64_t v10 = 0;
        do
        {
          *(unsigned char *)(a2 + 112 + v10) = v10 >> 1;
          ++v10;
        }
        while (HIDWORD(v5) != v10);
      }
      if (HIDWORD(v5))
      {
        int v20 = v5;
        unsigned int v21 = v6;
        memset((void *)(a2 + 96), __c[3], HIDWORD(v5));
        LODWORD(v5) = v20;
        unsigned int v6 = v21;
      }
      if (v5 <= v6)
      {
        unint64_t v11 = 0;
        int v12 = 0;
        LODWORD(v13) = v6 / v5;
        if (v6 / v5 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v13;
        }
        int v14 = (unsigned char *)(a2 + 128);
        do
        {
          uint64_t v15 = v8;
          uint64_t v16 = v14;
          uint64_t v17 = (unsigned __int8 *)(a2 + 96);
          if (v8)
          {
            do
            {
              unsigned int v18 = *v17++;
              if (v11 < v18) {
                unsigned char *v16 = v12++;
              }
              v16 += 16;
              --v15;
            }
            while (v15);
          }
          ++v11;
          ++v14;
        }
        while (v11 != v13);
      }
    }
  }
  return tunnel;
}

BOOL read_extend_geometry(char **a1, char *a2, uint64_t a3)
{
  BOOL v6 = 1;
  if (!read_tunnel(a1, 187, a2, 0x28uLL, 1))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    BOOL v6 = read_tunnel(a1, 158, &v9, 0x20uLL, 0);
    if (v6)
    {
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      *((void *)a2 + 4) = 0;
      *(_DWORD *)a2 = 1;
      *(_OWORD *)(a2 + 4) = v9;
      *(void *)(a2 + 20) = v10;
      *((_DWORD *)a2 + 7) = HIDWORD(v10);
      int v7 = *(unsigned __int8 *)(a3 + 96);
      *((_DWORD *)a2 + 8) = v7;
      *((_DWORD *)a2 + 9) = v7 << (*(_DWORD *)(a3 + 8) > 1u);
    }
  }
  return v6;
}

uint64_t print_asp_flow_list(const char *a1)
{
  uint64_t v5 = 0;
  TunnelBuffer_zeroflag = (unsigned __int16 *)fetchTunnelBuffer_zeroflag(0, 264, &v5, 0, 1);
  if (TunnelBuffer_zeroflag)
  {
    uint64_t v3 = TunnelBuffer_zeroflag;
    print_asp_flow_list_buf(a1, TunnelBuffer_zeroflag, v5);
    free(v3);
    return 1;
  }
  else
  {
    fwrite("Error: Cannot Extract Band Flow\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    return 0;
  }
}

size_t print_asp_flow_list_buf(const char *a1, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)long long outputStruct = 0;
  int TunnelOutputThroughSizeOnlyHandling = getTunnelOutputThroughSizeOnlyHandling(0, 299, 0, outputStruct);
  int v7 = outputStruct[0] & 0xF;
  if (!TunnelOutputThroughSizeOnlyHandling) {
    int v7 = 1;
  }
  if (v7 == 3)
  {
    unsigned int v8 = 21;
    if (a1)
    {
LABEL_6:
      long long v9 = fopen(a1, "a");
      if (!v9) {
        return fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open %s\n");
      }
      goto LABEL_10;
    }
  }
  else
  {
    if (v7 != 2) {
      return fwrite("Unsupported version for this command.", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    }
    unsigned int v8 = 8;
    if (a1) {
      goto LABEL_6;
    }
  }
  long long v9 = (FILE *)*MEMORY[0x1E4F143D8];
LABEL_10:
  if (a3 <= 1) {
    return fprintf((FILE *)*MEMORY[0x1E4F143C8], "Smaller buf size than expected, got %d");
  }
  int v11 = *a2;
  if (v11 * v8 > a3) {
    return fprintf((FILE *)*MEMORY[0x1E4F143C8], "Smaller buf size than expected, got %d, number of flows: %d\n");
  }
  fwrite("============================\n", 0x1DuLL, 1uLL, v9);
  fprintf(v9, "    Number Of Flows: %d\n", v11);
  fwrite("============================\n", 0x1DuLL, 1uLL, v9);
  if (v11)
  {
    int v12 = 0;
    uint64_t v13 = a2 + 1;
    do
    {
      __memcpy_chk();
      fprintf(v9, "Flow %d : Name %s\n", v12, outputStruct);
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v8);
      ++v12;
    }
    while (v11 != v12);
  }
  return fprintf(v9, "Flow %d : Name %s\n");
}

BOOL print_geometry(char *__filename)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (__filename)
  {
    CFDictionaryRef v2 = fopen(__filename, "a");
    if (!v2)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open %s\n", __filename);
      return 0;
    }
  }
  else
  {
    CFDictionaryRef v2 = (FILE *)*MEMORY[0x1E4F143D8];
  }
  memset(v19, 0, sizeof(v19));
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  BOOL result = read_geometry(0, (uint64_t)&v13);
  if (result)
  {
    BOOL result = read_extend_geometry(0, (char *)&v10, (uint64_t)&v13);
    if (result)
    {
      fwrite("===NAND Geometry===\n", 0x14uLL, 1uLL, v2);
      fprintf(v2, "cau_per_die: %d\n", DWORD1(v13));
      fprintf(v2, "num_bus: %d\n", DWORD2(v13));
      uint64_t v4 = 0;
      int v5 = 0;
      int v6 = -1;
      do
      {
        int v7 = (char *)&v13 + v4;
        int v8 = *((unsigned __int8 *)v19 + v4);
        if (!*((unsigned char *)v19 + v4)) {
          break;
        }
        int v9 = v7[112];
        if (v6 != v9)
        {
          fprintf(v2, "MSP %d:\n", v7[112]);
          int v5 = 0;
          int v8 = v7[96];
          int v6 = v9;
        }
        fprintf(v2, "   Dies in Ch %d: %d\n", v5++, v8);
        ++v4;
      }
      while (v4 != 16);
      fprintf(v2, "num_dip: %d\n", HIDWORD(v13));
      fprintf(v2, "num_bands: %d\n", v14);
      fprintf(v2, "sec_per_page: %d\n", DWORD1(v14));
      fprintf(v2, "sec_per_full_band: %d\n", DWORD2(v14));
      fprintf(v2, "sec_per_full_band_slc: %d\n", HIDWORD(v14));
      fprintf(v2, "bytes_per_sec_meta: %d\n", v15);
      fprintf(v2, "pages_per_block: %d\n", DWORD1(v15));
      fprintf(v2, "pages_per_block_slc: %d\n", DWORD2(v15));
      fprintf(v2, "pages_per_block0: %d\n", HIDWORD(v15));
      fprintf(v2, "cell_type: %d\n", v16);
      fprintf(v2, "pages_in_read_verify: %d\n", DWORD1(v16));
      fprintf(v2, "eol_blocks: %d\n", DWORD2(v16));
      fprintf(v2, "block_pairing_scheme: %d\n", HIDWORD(v16));
      fprintf(v2, "sec_per_die_multiplane : %d\n", DWORD2(v10));
      fprintf(v2, "num_die : %d\n", v11);
      fprintf(v2, "sol_eol_per_die : %d\n", DWORD1(v11));
      fprintf(v2, "technology : %d\n", HIDWORD(v11));
      fprintf(v2, "max_tlc_gbb : %d\n", DWORD2(v11));
      if (__filename) {
        fclose(v2);
      }
      return 1;
    }
  }
  return result;
}

void *fetchTunnelBufferWithInVal(char **a1, int a2, int a3, int a4, void *a5, char a6, char a7)
{
  long long v13 = a1;
  unsigned int v21 = 0;
  *a5 = 0;
  if (!a1 && (!findNandExporter_tunnel(&v21) || (long long v13 = v21) == 0 || !*((_DWORD *)v21 + 4)))
  {
    fwrite("Err: Finding internal NAND exporter failed for fetch tunnel buffer.\n", 0x44uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
LABEL_11:
    int v19 = 0;
    goto LABEL_14;
  }
  int v14 = a3;
  unsigned int TunnelCmdDataSize = _getTunnelCmdDataSize((uint64_t)v13, a2, a3, a4, a7);
  if (!TunnelCmdDataSize)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "failed to get data size for cmd option %d\n", a2);
    goto LABEL_11;
  }
  uint64_t v16 = TunnelCmdDataSize;
  size_t v17 = (*MEMORY[0x1E4F14B00] + (unint64_t)TunnelCmdDataSize - 1) / *MEMORY[0x1E4F14B00] * *MEMORY[0x1E4F14B00];
  long long v18 = malloc_type_valloc(v17, 0x7C7CDE6BuLL);
  int v19 = v18;
  if (v18)
  {
    bzero(v18, v17);
    if (_getTunnelCmdDataToBuf((uint64_t)v13, a2, v14, a4, v19, v17, a6, a7))
    {
      *a5 = v16;
    }
    else
    {
      free(v19);
      int v19 = 0;
      *a5 = 0;
    }
  }
  else
  {
    fwrite("can't allocate buffer!\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
LABEL_14:
  if (v21) {
    ReleaseIOInterfaces((uint64_t)v21);
  }
  return v19;
}

uint64_t _getTunnelCmdDataSize(uint64_t a1, int a2, int a3, int a4, char a5)
{
  kern_return_t v7;
  uint64_t result;
  size_t outputStructCnt;
  unsigned int outputStruct;
  _DWORD inputStruct[3];
  uint64_t v12;
  int v13;

  long long v13 = 0;
  uint64_t v12 = 0;
  long long outputStruct = 0;
  inputStruct[0] = a2;
  size_t outputStructCnt = 4;
  inputStruct[2] = a4;
  inputStruct[1] = a3 | 1;
  int v7 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 28), inputStruct, 0x18uLL, &outputStruct, &outputStructCnt);
  if (v7)
  {
    if ((a5 & 1) == 0) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error calling CoreDebugTunnel method! - 0x%X\n", v7);
    }
    return 0;
  }
  else
  {
    BOOL result = outputStruct;
    if (!outputStruct && (a5 & 1) == 0)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "SizeOnly for tunnel command 0x%x returned 0\n", a2);
      return outputStruct;
    }
  }
  return result;
}

uint64_t _getTunnelCmdDataToBuf(uint64_t a1, int a2, int a3, int a4, void *outputStruct, size_t a6, char a7, char a8)
{
  kern_return_t v16;
  size_t v17;
  _DWORD inputStruct[3];
  uint64_t v20;
  int v21;
  size_t outputStructCnt;

  LOBYTE(v9) = a7;
  size_t outputStructCnt = a6;
  unsigned int v21 = 0;
  uint64_t v20 = 0;
  long long v15 = (size_t *)MEMORY[0x1E4F14B00];
  while (1)
  {
    inputStruct[0] = a2;
    inputStruct[1] = a3;
    inputStruct[2] = a4;
    uint64_t v16 = IOConnectCallStructMethod(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 28), inputStruct, 0x18uLL, outputStruct, &outputStructCnt);
    if (v16 != -536870211) {
      break;
    }
    if ((v9 & 1) == 0) {
      goto LABEL_10;
    }
    if ((a8 & 1) == 0) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "CoreDebugTunnel 0x%x returned kIOReturnNoMemory\n", a2);
    }
    size_t v17 = outputStructCnt;
    size_t outputStructCnt = *v15;
    uint64_t v9 = 1;
    if (outputStructCnt == v17) {
      return v9;
    }
  }
  if (!v16) {
    return 1;
  }
LABEL_10:
  if ((a8 & 1) == 0) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error calling CoreDebugTunnel method! - 0x%X\n", v16);
  }
  return 0;
}

void *fetchTunnelBuffer(char **a1, int a2, int a3, void *a4, char a5, char a6)
{
  return fetchTunnelBufferWithInVal(a1, a2, a3, 0, a4, a5, a6);
}

void *fetchTunnelBuffer_zeroflag(char **a1, int a2, void *a3, char a4, char a5)
{
  return fetchTunnelBufferWithInVal(a1, a2, 0, 0, a3, a4, a5);
}

void *fetchTunnelBuffer_simple(int a1, void *a2)
{
  return fetchTunnelBufferWithInVal(0, a1, 0, 0, a2, 0, 0);
}

uint64_t populateTunnelOutputBufferWithoutSizeQuery_withFlags(char **a1, int a2, int a3, int a4, void *outputStruct, size_t a6, char a7, char a8)
{
  size_t v17 = 0;
  if (a1 || findNandExporter_tunnel(&v17) && (a1 = v17) != 0 && *((_DWORD *)v17 + 4))
  {
    if (_getTunnelCmdDataToBuf((uint64_t)a1, a2, a3, a4, outputStruct, a6, a7, a8))
    {
      uint64_t v15 = 1;
      goto LABEL_10;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error fetching the tunnel output buffer for opcode [%d]\n", a2);
  }
  else
  {
    fwrite("Err: Finding internal NAND exporter failed.\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  }
  uint64_t v15 = 0;
LABEL_10:
  if (v17) {
    ReleaseIOInterfaces((uint64_t)v17);
  }
  return v15;
}

uint64_t populateTunnelOutputBufferWithoutSizeQuery(char **a1, int a2, int a3, void *outputStruct, size_t a5, char a6, char a7)
{
  return populateTunnelOutputBufferWithoutSizeQuery_withFlags(a1, a2, 0, a3, outputStruct, a5, a6, a7);
}

uint64_t getTunnelOutputThroughSizeOnlyHandling(char **a1, int a2, int a3, void *outputStruct)
{
  kern_return_t v7;
  uint64_t v8;
  size_t outputStructCnt;
  char **v11;
  _DWORD inputStruct[3];
  uint64_t v13;
  int v14;

  long long v13 = 0;
  int v14 = 0;
  size_t outputStructCnt = 4;
  long long v11 = 0;
  inputStruct[0] = a2;
  inputStruct[1] = 1;
  inputStruct[2] = a3;
  if (!outputStruct)
  {
    syslog(3, "Error: must provide valid pointer for output value");
    goto LABEL_11;
  }
  if (a1)
  {
    mach_port_t v6 = *((_DWORD *)a1 + 4);
  }
  else if (!findNandExporter_tunnel(&v11) || (a1 = v11) == 0 || (mach_port_t v6 = *((_DWORD *)v11 + 4)) == 0)
  {
    fwrite("Err: Finding internal NAND exporter failed.\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    goto LABEL_11;
  }
  int v7 = IOConnectCallStructMethod(v6, *((_DWORD *)a1 + 8), inputStruct, 0x18uLL, outputStruct, &outputStructCnt);
  if (v7)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error fetching the tunnel output buffer for opcode [%d], Result [0x%X]\n", a2, v7);
LABEL_11:
    int v8 = 0;
    goto LABEL_12;
  }
  int v8 = 1;
LABEL_12:
  if (v11) {
    ReleaseIOInterfaces((uint64_t)v11);
  }
  return v8;
}

void *ASPGetStatsSelectors()
{
  return &statsSelector;
}

void *ASPGetReadStatsSelectors()
{
  return &readStatsSelector;
}

void *ASPMSPGetStatsSelectors()
{
  return &mspStatsSelector;
}

void *ASPGetDefectsListSelectors()
{
  return &defectsListSelector;
}

void *ASPGetTelemetryListSelectors()
{
  return &telemetryListSelectors;
}

void *ASPGetTaskSchedulerSelectors()
{
  return &taskSchedulerSelectors;
}

void *ASPGetSnapshotSelectors()
{
  return &snapshotSelectors;
}

void *ASPGetSnapshotHeaderSelectors()
{
  return &snapshotHeaderSelectors;
}

void *ASPGetBandStatsSelectors()
{
  return &bandStatsSelector;
}

void *ASPGetGeomErrPayloadSelectors()
{
  return &geomErrPayloadSelectors;
}

char *findNandExporter_tunnel(char ***a1)
{
  io_connect_t connect = 0;
  *a1 = 0;
  int v2 = pthread_mutex_trylock(&serializeAccess);
  if (v2)
  {
    if (v2 != 16
      || (syslog(4, "Warning: NANDInfo: NANDExporter: serializeAccess already locked. waiting for lock !\n"),
          pthread_mutex_lock(&serializeAccess)))
    {
      uint64_t v3 = __error();
      syslog(3, "Error: NANDInfo: NANDExporter: pthread_mutex_trylock() (%d) failed \n", *v3);
      return 0;
    }
  }
  syslog(5, "NANDInfo: NANDExporter object locked ! \n");
  int v5 = &nand_exporters_tunnel;
  BOOL result = nand_exporters_tunnel;
  if (!nand_exporters_tunnel)
  {
LABEL_12:
    io_object_t v10 = 0;
    goto LABEL_13;
  }
  mach_port_t v6 = *MEMORY[0x1E4F2EEF0];
  int v7 = (task_port_t *)MEMORY[0x1E4F14960];
  while (1)
  {
    CFDictionaryRef v8 = IOServiceMatching(result);
    if (!v8) {
      goto LABEL_11;
    }
    io_service_t MatchingService = IOServiceGetMatchingService(v6, v8);
    if (!MatchingService) {
      goto LABEL_11;
    }
    io_object_t v10 = MatchingService;
    if (!IOServiceOpen(MatchingService, *v7, 0, &connect)) {
      break;
    }
    IOServiceClose(connect);
    io_connect_t connect = 0;
    IOObjectRelease(v10);
LABEL_11:
    long long v11 = v5[21];
    v5 += 21;
    BOOL result = (char *)v11;
    if (!v11) {
      goto LABEL_12;
    }
  }
  syslog(5, "NANDInfo: findNandExporter_tunnel: Controller found: %s\n", *v5);
  BOOL result = (char *)1;
LABEL_13:
  *((_DWORD *)v5 + 4) = connect;
  *((_DWORD *)v5 + 5) = v10;
  *a1 = v5;
  return result;
}

uint64_t ReleaseIOInterfaces(uint64_t a1)
{
  io_connect_t v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    IOServiceClose(v2);
    *(_DWORD *)(a1 + 16) = 0;
  }
  io_object_t v3 = *(_DWORD *)(a1 + 20);
  if (v3)
  {
    IOObjectRelease(v3);
    *(_DWORD *)(a1 + 20) = 0;
  }
  syslog(5, "NANDInfo: NANDExporter object unlocked ! \n");
  return pthread_mutex_unlock(&serializeAccess);
}

BOOL AWDMETRICSBwpStatsReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 9)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            uint64_t v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
            goto LABEL_48;
          }
          v26 += 7;
          BOOL v24 = v27++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            uint64_t v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
            goto LABEL_50;
          }
        }
        uint64_t v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
LABEL_47:
        *(unsigned char *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if (v17 == 4) {
        break;
      }
      if (v17 == 3)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 4u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            uint64_t v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
            goto LABEL_47;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            break;
          }
          v18 += 7;
          BOOL v24 = v19++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            uint64_t v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
            goto LABEL_50;
          }
        }
        uint64_t v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_51:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v31 = 0;
    unsigned int v32 = 0;
    uint64_t v20 = 0;
    *(unsigned char *)(a1 + 20) |= 2u;
    while (1)
    {
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
      {
        uint64_t v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
        goto LABEL_47;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
      *(void *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v31 += 7;
      BOOL v24 = v32++ > 8;
      if (v24)
      {
        LODWORD(v20) = 0;
        uint64_t v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
        goto LABEL_50;
      }
    }
    uint64_t v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
LABEL_48:
    if (*(unsigned char *)(a2 + *v5)) {
      LODWORD(v20) = 0;
    }
LABEL_50:
    *(_DWORD *)(a1 + *v25) = v20;
    goto LABEL_51;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRFRCoverageReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 16;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogSFTStateEventReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrSDMActivationReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = 0x1EA693000uLL;
    unint64_t v8 = 0x1EA693000uLL;
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = 0x1EA693000uLL;
    unint64_t v11 = 0x1EA693000uLL;
    unint64_t v12 = 0x1EA693000uLL;
    unint64_t v13 = 0x1EA693000uLL;
    unint64_t v14 = 0x1EA693000uLL;
    unint64_t v15 = 0x1EA693000uLL;
    unint64_t v16 = 0x1EA693000uLL;
    unint64_t v17 = 0x1EA693000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 1u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_127;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              uint64_t v29 = 0;
              goto LABEL_129;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_127:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v29 = 0;
          }
LABEL_129:
          *(void *)(a1 + *(int *)(v8 + 824)) = v29;
          continue;
        case 2u:
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x2000u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v9) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                BOOL v24 = v34++ >= 9;
                if (v24)
                {
                  uint64_t v35 = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v35 = 0;
          }
LABEL_133:
          BOOL v114 = v35 != 0;
          uint64_t v115 = *(int *)(v10 + 832);
          goto LABEL_150;
        case 3u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x4000u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v9) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  uint64_t v41 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v41 = 0;
          }
LABEL_137:
          BOOL v114 = v41 != 0;
          uint64_t v115 = *(int *)(v11 + 836);
          goto LABEL_150;
        case 6u:
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x400u;
          while (2)
          {
            uint64_t v54 = *v3;
            unint64_t v55 = *(void *)(a2 + v54);
            if (v55 == -1 || v55 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v56 = *(unsigned char *)(*(void *)(a2 + *v9) + v55);
              *(void *)(a2 + v54) = v55 + 1;
              v53 |= (unint64_t)(v56 & 0x7F) << v51;
              if (v56 < 0)
              {
                v51 += 7;
                BOOL v24 = v52++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_141;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_141:
          uint64_t v116 = *(int *)(v12 + 840);
          goto LABEL_187;
        case 7u:
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v59 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x800u;
          while (2)
          {
            uint64_t v60 = *v3;
            unint64_t v61 = *(void *)(a2 + v60);
            if (v61 == -1 || v61 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v62 = *(unsigned char *)(*(void *)(a2 + *v9) + v61);
              *(void *)(a2 + v60) = v61 + 1;
              v59 |= (unint64_t)(v62 & 0x7F) << v57;
              if (v62 < 0)
              {
                v57 += 7;
                BOOL v24 = v58++ >= 9;
                if (v24)
                {
                  uint64_t v59 = 0;
                  goto LABEL_145;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v59 = 0;
          }
LABEL_145:
          BOOL v114 = v59 != 0;
          uint64_t v115 = *(int *)(v13 + 848);
          goto LABEL_150;
        case 8u:
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v65 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x1000u;
          while (2)
          {
            uint64_t v66 = *v3;
            unint64_t v67 = *(void *)(a2 + v66);
            if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v68 = *(unsigned char *)(*(void *)(a2 + *v9) + v67);
              *(void *)(a2 + v66) = v67 + 1;
              v65 |= (unint64_t)(v68 & 0x7F) << v63;
              if (v68 < 0)
              {
                v63 += 7;
                BOOL v24 = v64++ >= 9;
                if (v24)
                {
                  uint64_t v65 = 0;
                  goto LABEL_149;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v65 = 0;
          }
LABEL_149:
          BOOL v114 = v65 != 0;
          uint64_t v115 = *(int *)(v14 + 852);
LABEL_150:
          *(unsigned char *)(a1 + v115) = v114;
          continue;
        case 0xAu:
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 8u;
          while (2)
          {
            uint64_t v71 = *v3;
            unint64_t v72 = *(void *)(a2 + v71);
            if (v72 == -1 || v72 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v73 = *(unsigned char *)(*(void *)(a2 + *v9) + v72);
              *(void *)(a2 + v71) = v72 + 1;
              v53 |= (unint64_t)(v73 & 0x7F) << v69;
              if (v73 < 0)
              {
                v69 += 7;
                BOOL v24 = v70++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_154;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_154:
          uint64_t v116 = *(int *)(v15 + 856);
          goto LABEL_187;
        case 0xBu:
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x200u;
          while (2)
          {
            uint64_t v76 = *v3;
            unint64_t v77 = *(void *)(a2 + v76);
            if (v77 == -1 || v77 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v78 = *(unsigned char *)(*(void *)(a2 + *v9) + v77);
              *(void *)(a2 + v76) = v77 + 1;
              v53 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                BOOL v24 = v75++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_158;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_158:
          uint64_t v116 = *(int *)(v16 + 860);
          goto LABEL_187;
        case 0xEu:
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x10u;
          while (2)
          {
            uint64_t v81 = *v3;
            unint64_t v82 = *(void *)(a2 + v81);
            if (v82 == -1 || v82 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v83 = *(unsigned char *)(*(void *)(a2 + *v9) + v82);
              *(void *)(a2 + v81) = v82 + 1;
              v53 |= (unint64_t)(v83 & 0x7F) << v79;
              if (v83 < 0)
              {
                v79 += 7;
                BOOL v24 = v80++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_162;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_162:
          uint64_t v116 = *(int *)(v17 + 864);
          goto LABEL_187;
        case 0x11u:
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 4u;
          while (2)
          {
            uint64_t v86 = *v3;
            unint64_t v87 = *(void *)(a2 + v86);
            if (v87 == -1 || v87 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v88 = *(unsigned char *)(*(void *)(a2 + *v9) + v87);
              *(void *)(a2 + v86) = v87 + 1;
              v53 |= (unint64_t)(v88 & 0x7F) << v84;
              if (v88 < 0)
              {
                v84 += 7;
                BOOL v24 = v85++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_166;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_166:
          uint64_t v116 = 20;
          goto LABEL_187;
        case 0x12u:
          char v89 = 0;
          unsigned int v90 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x40u;
          while (2)
          {
            uint64_t v91 = *v3;
            unint64_t v92 = *(void *)(a2 + v91);
            if (v92 == -1 || v92 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v93 = *(unsigned char *)(*(void *)(a2 + *v9) + v92);
              *(void *)(a2 + v91) = v92 + 1;
              v53 |= (unint64_t)(v93 & 0x7F) << v89;
              if (v93 < 0)
              {
                v89 += 7;
                BOOL v24 = v90++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_170;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_170:
          uint64_t v116 = 36;
          goto LABEL_187;
        case 0x13u:
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 2u;
          while (2)
          {
            uint64_t v96 = *v3;
            unint64_t v97 = *(void *)(a2 + v96);
            if (v97 == -1 || v97 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v98 = *(unsigned char *)(*(void *)(a2 + *v9) + v97);
              *(void *)(a2 + v96) = v97 + 1;
              v53 |= (unint64_t)(v98 & 0x7F) << v94;
              if (v98 < 0)
              {
                v94 += 7;
                BOOL v24 = v95++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_174;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_174:
          uint64_t v116 = 16;
          goto LABEL_187;
        case 0x14u:
          char v99 = 0;
          unsigned int v100 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x80u;
          while (2)
          {
            uint64_t v101 = *v3;
            unint64_t v102 = *(void *)(a2 + v101);
            if (v102 == -1 || v102 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v103 = *(unsigned char *)(*(void *)(a2 + *v9) + v102);
              *(void *)(a2 + v101) = v102 + 1;
              v53 |= (unint64_t)(v103 & 0x7F) << v99;
              if (v103 < 0)
              {
                v99 += 7;
                BOOL v24 = v100++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_178;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_178:
          uint64_t v116 = 40;
          goto LABEL_187;
        case 0x15u:
          char v104 = 0;
          unsigned int v105 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x20u;
          while (2)
          {
            uint64_t v106 = *v3;
            unint64_t v107 = *(void *)(a2 + v106);
            if (v107 == -1 || v107 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v108 = *(unsigned char *)(*(void *)(a2 + *v9) + v107);
              *(void *)(a2 + v106) = v107 + 1;
              v53 |= (unint64_t)(v108 & 0x7F) << v104;
              if (v108 < 0)
              {
                v104 += 7;
                BOOL v24 = v105++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_182;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_182:
          uint64_t v116 = 32;
          goto LABEL_187;
        case 0x16u:
          char v109 = 0;
          unsigned int v110 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 820)) |= 0x100u;
          break;
        default:
          unint64_t v45 = v8;
          unint64_t v46 = v10;
          unint64_t v47 = v11;
          unint64_t v48 = v7;
          unint64_t v49 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          int v5 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v12 = v49;
          unint64_t v13 = 0x1EA693000;
          unint64_t v7 = v48;
          unint64_t v14 = 0x1EA693000;
          unint64_t v11 = v47;
          unint64_t v15 = 0x1EA693000;
          unint64_t v10 = v46;
          unint64_t v16 = 0x1EA693000;
          unint64_t v8 = v45;
          unint64_t v17 = 0x1EA693000;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v111 = *v3;
        unint64_t v112 = *(void *)(a2 + v111);
        if (v112 == -1 || v112 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v113 = *(unsigned char *)(*(void *)(a2 + *v9) + v112);
        *(void *)(a2 + v111) = v112 + 1;
        v53 |= (unint64_t)(v113 & 0x7F) << v109;
        if ((v113 & 0x80) == 0) {
          goto LABEL_184;
        }
        v109 += 7;
        BOOL v24 = v110++ >= 9;
        if (v24)
        {
          LODWORD(v53) = 0;
          goto LABEL_186;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_184:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v53) = 0;
      }
LABEL_186:
      uint64_t v116 = 44;
LABEL_187:
      *(_DWORD *)(a1 + v116) = v53;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrSdmEndcReleaseReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 20;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 16;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __PLLogThermal_block_invoke()
{
  _MergedGlobals_1 = (uint64_t)os_log_create("com.apple.powerlog", "thermal");
  return MEMORY[0x1F41817F8]();
}

uint64_t AWDMETRICSCellularPowerLogLTECarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = objc_alloc_init(AWDMETRICSMCarrierComponentInfo);
        [(id)a1 addCarrierInfo:v24];
        if (!PBReaderPlaceMark() || !AWDMETRICSMCarrierComponentInfoReadFrom((uint64_t)v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_47:
        *(_DWORD *)(a1 + 24) = v27;
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTECDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = 0x1EA693000uLL;
    unint64_t v8 = 0x1EA693000uLL;
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = 0x1EA693000uLL;
    unint64_t v11 = 0x1EA693000uLL;
    unint64_t v12 = 0x1EA693000uLL;
    unint64_t v13 = 0x1EA693000uLL;
    unint64_t v14 = 0x1EA693000uLL;
    unint64_t v15 = 0x1EA693000uLL;
    unint64_t v16 = 0x1EA693000uLL;
    unint64_t v17 = 0x1EA693000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 1u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_99;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              uint64_t v29 = 0;
              goto LABEL_101;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_99:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v29 = 0;
          }
LABEL_101:
          *(void *)(a1 + *(int *)(v8 + 1336)) = v29;
          continue;
        case 2u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 0x40u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v9) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_105:
          uint64_t v92 = *(int *)(v10 + 1340);
          goto LABEL_143;
        case 3u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 4u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v9) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v41 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v24 = v46++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_109;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_109:
          uint64_t v92 = *(int *)(v11 + 1344);
          goto LABEL_143;
        case 4u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 8u;
          while (2)
          {
            uint64_t v52 = *v3;
            unint64_t v53 = *(void *)(a2 + v52);
            if (v53 == -1 || v53 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v54 = *(unsigned char *)(*(void *)(a2 + *v9) + v53);
              *(void *)(a2 + v52) = v53 + 1;
              v41 |= (unint64_t)(v54 & 0x7F) << v50;
              if (v54 < 0)
              {
                v50 += 7;
                BOOL v24 = v51++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_113;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_113:
          uint64_t v92 = *(int *)(v12 + 1348);
          goto LABEL_143;
        case 5u:
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 0x20u;
          while (2)
          {
            uint64_t v57 = *v3;
            unint64_t v58 = *(void *)(a2 + v57);
            if (v58 == -1 || v58 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v59 = *(unsigned char *)(*(void *)(a2 + *v9) + v58);
              *(void *)(a2 + v57) = v58 + 1;
              v41 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                BOOL v24 = v56++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_117;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_117:
          uint64_t v92 = *(int *)(v13 + 1352);
          goto LABEL_143;
        case 6u:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 2u;
          while (2)
          {
            uint64_t v62 = *v3;
            unint64_t v63 = *(void *)(a2 + v62);
            if (v63 == -1 || v63 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v64 = *(unsigned char *)(*(void *)(a2 + *v9) + v63);
              *(void *)(a2 + v62) = v63 + 1;
              v41 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                BOOL v24 = v61++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_121;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_121:
          uint64_t v92 = *(int *)(v14 + 1356);
          goto LABEL_143;
        case 7u:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v67 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 0x400u;
          while (2)
          {
            uint64_t v68 = *v3;
            unint64_t v69 = *(void *)(a2 + v68);
            if (v69 == -1 || v69 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v70 = *(unsigned char *)(*(void *)(a2 + *v9) + v69);
              *(void *)(a2 + v68) = v69 + 1;
              v67 |= (unint64_t)(v70 & 0x7F) << v65;
              if (v70 < 0)
              {
                v65 += 7;
                BOOL v24 = v66++ >= 9;
                if (v24)
                {
                  uint64_t v67 = 0;
                  goto LABEL_125;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v67 = 0;
          }
LABEL_125:
          BOOL v93 = v67 != 0;
          uint64_t v94 = *(int *)(v15 + 1360);
          goto LABEL_138;
        case 8u:
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 0x80u;
          while (2)
          {
            uint64_t v73 = *v3;
            unint64_t v74 = *(void *)(a2 + v73);
            if (v74 == -1 || v74 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v75 = *(unsigned char *)(*(void *)(a2 + *v9) + v74);
              *(void *)(a2 + v73) = v74 + 1;
              v41 |= (unint64_t)(v75 & 0x7F) << v71;
              if (v75 < 0)
              {
                v71 += 7;
                BOOL v24 = v72++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_129;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_129:
          uint64_t v92 = *(int *)(v16 + 1364);
          goto LABEL_143;
        case 9u:
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 0x10u;
          while (2)
          {
            uint64_t v78 = *v3;
            unint64_t v79 = *(void *)(a2 + v78);
            if (v79 == -1 || v79 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v80 = *(unsigned char *)(*(void *)(a2 + *v9) + v79);
              *(void *)(a2 + v78) = v79 + 1;
              v41 |= (unint64_t)(v80 & 0x7F) << v76;
              if (v80 < 0)
              {
                v76 += 7;
                BOOL v24 = v77++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_133:
          uint64_t v92 = *(int *)(v17 + 1368);
          goto LABEL_143;
        case 0xAu:
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v83 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 0x200u;
          while (2)
          {
            uint64_t v84 = *v3;
            unint64_t v85 = *(void *)(a2 + v84);
            if (v85 == -1 || v85 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v86 = *(unsigned char *)(*(void *)(a2 + *v9) + v85);
              *(void *)(a2 + v84) = v85 + 1;
              v83 |= (unint64_t)(v86 & 0x7F) << v81;
              if (v86 < 0)
              {
                v81 += 7;
                BOOL v24 = v82++ >= 9;
                if (v24)
                {
                  uint64_t v83 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v83 = 0;
          }
LABEL_137:
          BOOL v93 = v83 != 0;
          uint64_t v94 = 48;
LABEL_138:
          *(unsigned char *)(a1 + v94) = v93;
          continue;
        case 0xBu:
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 1332)) |= 0x100u;
          break;
        default:
          unint64_t v33 = v8;
          unint64_t v34 = v10;
          unint64_t v35 = v11;
          unint64_t v36 = v7;
          unint64_t v37 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          int v5 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v12 = v37;
          unint64_t v13 = 0x1EA693000;
          unint64_t v7 = v36;
          unint64_t v14 = 0x1EA693000;
          unint64_t v11 = v35;
          unint64_t v15 = 0x1EA693000;
          unint64_t v10 = v34;
          unint64_t v16 = 0x1EA693000;
          unint64_t v8 = v33;
          unint64_t v17 = 0x1EA693000;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v89 = *v3;
        unint64_t v90 = *(void *)(a2 + v89);
        if (v90 == -1 || v90 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v91 = *(unsigned char *)(*(void *)(a2 + *v9) + v90);
        *(void *)(a2 + v89) = v90 + 1;
        v41 |= (unint64_t)(v91 & 0x7F) << v87;
        if ((v91 & 0x80) == 0) {
          goto LABEL_140;
        }
        v87 += 7;
        BOOL v24 = v88++ >= 9;
        if (v24)
        {
          LODWORD(v41) = 0;
          goto LABEL_142;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_140:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v41) = 0;
      }
LABEL_142:
      uint64_t v92 = 44;
LABEL_143:
      *(_DWORD *)(a1 + v92) = v41;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRCarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        BOOL v24 = objc_alloc_init(AWDMETRICSMCarrierComponentInfo);
        [(id)a1 addCarrierInfo:v24];
        if (!PBReaderPlaceMark() || !AWDMETRICSMCarrierComponentInfoReadFrom((uint64_t)v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_47:
        *(_DWORD *)(a1 + 24) = v27;
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRCDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = 0x1EA693000uLL;
    unint64_t v8 = 0x1EA693000uLL;
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = 0x1EA693000uLL;
    unint64_t v11 = 0x1EA693000uLL;
    unint64_t v12 = 0x1EA693000uLL;
    unint64_t v13 = 0x1EA693000uLL;
    unint64_t v14 = 0x1EA693000uLL;
    unint64_t v15 = 0x1EA693000uLL;
    unint64_t v16 = 0x1EA693000uLL;
    unint64_t v17 = 0x1EA693000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 1u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_141;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              uint64_t v29 = 0;
              goto LABEL_143;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_141:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v29 = 0;
          }
LABEL_143:
          *(void *)(a1 + *(int *)(v8 + 1428)) = v29;
          continue;
        case 2u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x8000u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v9) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  uint64_t v41 = 0;
                  goto LABEL_147;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v41 = 0;
          }
LABEL_147:
          BOOL v122 = v41 != 0;
          uint64_t v123 = *(int *)(v10 + 1432);
          goto LABEL_164;
        case 3u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 8u;
          while (2)
          {
            uint64_t v48 = *v3;
            unint64_t v49 = *(void *)(a2 + v48);
            if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v50 = *(unsigned char *)(*(void *)(a2 + *v9) + v49);
              *(void *)(a2 + v48) = v49 + 1;
              v47 |= (unint64_t)(v50 & 0x7F) << v45;
              if (v50 < 0)
              {
                v45 += 7;
                BOOL v24 = v46++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_151;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_151:
          uint64_t v124 = *(int *)(v11 + 1436);
          goto LABEL_209;
        case 4u:
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x10u;
          while (2)
          {
            uint64_t v53 = *v3;
            unint64_t v54 = *(void *)(a2 + v53);
            if (v54 == -1 || v54 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v55 = *(unsigned char *)(*(void *)(a2 + *v9) + v54);
              *(void *)(a2 + v53) = v54 + 1;
              v47 |= (unint64_t)(v55 & 0x7F) << v51;
              if (v55 < 0)
              {
                v51 += 7;
                BOOL v24 = v52++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_155;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_155:
          uint64_t v124 = *(int *)(v12 + 1440);
          goto LABEL_209;
        case 5u:
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 2u;
          while (2)
          {
            uint64_t v58 = *v3;
            unint64_t v59 = *(void *)(a2 + v58);
            if (v59 == -1 || v59 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v60 = *(unsigned char *)(*(void *)(a2 + *v9) + v59);
              *(void *)(a2 + v58) = v59 + 1;
              v47 |= (unint64_t)(v60 & 0x7F) << v56;
              if (v60 < 0)
              {
                v56 += 7;
                BOOL v24 = v57++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_159;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_159:
          uint64_t v124 = *(int *)(v13 + 1444);
          goto LABEL_209;
        case 6u:
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v63 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x10000u;
          while (2)
          {
            uint64_t v64 = *v3;
            unint64_t v65 = *(void *)(a2 + v64);
            if (v65 == -1 || v65 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v66 = *(unsigned char *)(*(void *)(a2 + *v9) + v65);
              *(void *)(a2 + v64) = v65 + 1;
              v63 |= (unint64_t)(v66 & 0x7F) << v61;
              if (v66 < 0)
              {
                v61 += 7;
                BOOL v24 = v62++ >= 9;
                if (v24)
                {
                  uint64_t v63 = 0;
                  goto LABEL_163;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v63 = 0;
          }
LABEL_163:
          BOOL v122 = v63 != 0;
          uint64_t v123 = *(int *)(v14 + 1448);
LABEL_164:
          *(unsigned char *)(a1 + v123) = v122;
          continue;
        case 7u:
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x400u;
          while (2)
          {
            uint64_t v69 = *v3;
            unint64_t v70 = *(void *)(a2 + v69);
            if (v70 == -1 || v70 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v71 = *(unsigned char *)(*(void *)(a2 + *v9) + v70);
              *(void *)(a2 + v69) = v70 + 1;
              v47 |= (unint64_t)(v71 & 0x7F) << v67;
              if (v71 < 0)
              {
                v67 += 7;
                BOOL v24 = v68++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_168:
          uint64_t v124 = *(int *)(v15 + 1452);
          goto LABEL_209;
        case 8u:
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x800u;
          while (2)
          {
            uint64_t v74 = *v3;
            unint64_t v75 = *(void *)(a2 + v74);
            if (v75 == -1 || v75 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v76 = *(unsigned char *)(*(void *)(a2 + *v9) + v75);
              *(void *)(a2 + v74) = v75 + 1;
              v47 |= (unint64_t)(v76 & 0x7F) << v72;
              if (v76 < 0)
              {
                v72 += 7;
                BOOL v24 = v73++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_172;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_172:
          uint64_t v124 = *(int *)(v16 + 1456);
          goto LABEL_209;
        case 9u:
          char v77 = 0;
          unsigned int v78 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x100u;
          while (2)
          {
            uint64_t v79 = *v3;
            unint64_t v80 = *(void *)(a2 + v79);
            if (v80 == -1 || v80 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v81 = *(unsigned char *)(*(void *)(a2 + *v9) + v80);
              *(void *)(a2 + v79) = v80 + 1;
              v47 |= (unint64_t)(v81 & 0x7F) << v77;
              if (v81 < 0)
              {
                v77 += 7;
                BOOL v24 = v78++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_176;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_176:
          uint64_t v124 = *(int *)(v17 + 1460);
          goto LABEL_209;
        case 0xAu:
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x200u;
          while (2)
          {
            uint64_t v84 = *v3;
            unint64_t v85 = *(void *)(a2 + v84);
            if (v85 == -1 || v85 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v86 = *(unsigned char *)(*(void *)(a2 + *v9) + v85);
              *(void *)(a2 + v84) = v85 + 1;
              v47 |= (unint64_t)(v86 & 0x7F) << v82;
              if (v86 < 0)
              {
                v82 += 7;
                BOOL v24 = v83++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_180;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_180:
          uint64_t v124 = 48;
          goto LABEL_209;
        case 0xBu:
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x20u;
          while (2)
          {
            uint64_t v89 = *v3;
            unint64_t v90 = *(void *)(a2 + v89);
            if (v90 == -1 || v90 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v91 = *(unsigned char *)(*(void *)(a2 + *v9) + v90);
              *(void *)(a2 + v89) = v90 + 1;
              v47 |= (unint64_t)(v91 & 0x7F) << v87;
              if (v91 < 0)
              {
                v87 += 7;
                BOOL v24 = v88++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_184;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_184:
          uint64_t v124 = 32;
          goto LABEL_209;
        case 0xCu:
          char v92 = 0;
          unsigned int v93 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x40u;
          while (2)
          {
            uint64_t v94 = *v3;
            unint64_t v95 = *(void *)(a2 + v94);
            if (v95 == -1 || v95 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v96 = *(unsigned char *)(*(void *)(a2 + *v9) + v95);
              *(void *)(a2 + v94) = v95 + 1;
              v47 |= (unint64_t)(v96 & 0x7F) << v92;
              if (v96 < 0)
              {
                v92 += 7;
                BOOL v24 = v93++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_188;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_188:
          uint64_t v124 = 36;
          goto LABEL_209;
        case 0xDu:
          char v97 = 0;
          unsigned int v98 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x80u;
          while (2)
          {
            uint64_t v99 = *v3;
            unint64_t v100 = *(void *)(a2 + v99);
            if (v100 == -1 || v100 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v101 = *(unsigned char *)(*(void *)(a2 + *v9) + v100);
              *(void *)(a2 + v99) = v100 + 1;
              v47 |= (unint64_t)(v101 & 0x7F) << v97;
              if (v101 < 0)
              {
                v97 += 7;
                BOOL v24 = v98++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_192;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_192:
          uint64_t v124 = 40;
          goto LABEL_209;
        case 0xEu:
          char v102 = 0;
          unsigned int v103 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x1000u;
          while (2)
          {
            uint64_t v104 = *v3;
            unint64_t v105 = *(void *)(a2 + v104);
            if (v105 == -1 || v105 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v106 = *(unsigned char *)(*(void *)(a2 + *v9) + v105);
              *(void *)(a2 + v104) = v105 + 1;
              v47 |= (unint64_t)(v106 & 0x7F) << v102;
              if (v106 < 0)
              {
                v102 += 7;
                BOOL v24 = v103++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_196;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_196:
          uint64_t v124 = 60;
          goto LABEL_209;
        case 0xFu:
          char v107 = 0;
          unsigned int v108 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x2000u;
          while (2)
          {
            uint64_t v109 = *v3;
            unint64_t v110 = *(void *)(a2 + v109);
            if (v110 == -1 || v110 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v111 = *(unsigned char *)(*(void *)(a2 + *v9) + v110);
              *(void *)(a2 + v109) = v110 + 1;
              v47 |= (unint64_t)(v111 & 0x7F) << v107;
              if (v111 < 0)
              {
                v107 += 7;
                BOOL v24 = v108++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_200;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_200:
          uint64_t v124 = 64;
          goto LABEL_209;
        case 0x10u:
          char v112 = 0;
          unsigned int v113 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 0x4000u;
          while (2)
          {
            uint64_t v114 = *v3;
            unint64_t v115 = *(void *)(a2 + v114);
            if (v115 == -1 || v115 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v116 = *(unsigned char *)(*(void *)(a2 + *v9) + v115);
              *(void *)(a2 + v114) = v115 + 1;
              v47 |= (unint64_t)(v116 & 0x7F) << v112;
              if (v116 < 0)
              {
                v112 += 7;
                BOOL v24 = v113++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_204;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_204:
          uint64_t v124 = 68;
          goto LABEL_209;
        case 0x11u:
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 1424)) |= 4u;
          break;
        default:
          unint64_t v33 = v8;
          unint64_t v34 = v10;
          unint64_t v35 = v11;
          unint64_t v36 = v7;
          unint64_t v37 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          int v5 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v12 = v37;
          unint64_t v13 = 0x1EA693000;
          unint64_t v7 = v36;
          unint64_t v14 = 0x1EA693000;
          unint64_t v11 = v35;
          unint64_t v15 = 0x1EA693000;
          unint64_t v10 = v34;
          unint64_t v17 = 0x1EA693000;
          unint64_t v8 = v33;
          unint64_t v16 = 0x1EA693000;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v119 = *v3;
        unint64_t v120 = *(void *)(a2 + v119);
        if (v120 == -1 || v120 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v121 = *(unsigned char *)(*(void *)(a2 + *v9) + v120);
        *(void *)(a2 + v119) = v120 + 1;
        v47 |= (unint64_t)(v121 & 0x7F) << v117;
        if ((v121 & 0x80) == 0) {
          goto LABEL_206;
        }
        v117 += 7;
        BOOL v24 = v118++ >= 9;
        if (v24)
        {
          LODWORD(v47) = 0;
          goto LABEL_208;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_206:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v47) = 0;
      }
LABEL_208:
      uint64_t v124 = 20;
LABEL_209:
      *(_DWORD *)(a1 + v124) = v47;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRNSAENDCEventReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 16;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWUSReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 16;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRSARRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_71;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_73;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_71:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_73:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x20u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_77:
          uint64_t v55 = 32;
          goto LABEL_98;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_81:
          uint64_t v55 = 24;
          goto LABEL_98;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x10u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_85:
          uint64_t v55 = 28;
          goto LABEL_98;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x40u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_89:
          uint64_t v55 = 36;
          goto LABEL_98;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_93:
          uint64_t v55 = 16;
          goto LABEL_98;
        case 7u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v52 = *v3;
        unint64_t v53 = *(void *)(a2 + v52);
        if (v53 == -1 || v53 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
        *(void *)(a2 + v52) = v53 + 1;
        v26 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0) {
          goto LABEL_95;
        }
        v50 += 7;
        BOOL v14 = v51++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_97;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_95:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_97:
      uint64_t v55 = 20;
LABEL_98:
      *(_DWORD *)(a1 + v55) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PLLogSMCMetrics()
{
  if (qword_1EBD577A0 != -1) {
    dispatch_once(&qword_1EBD577A0, &__block_literal_global_0);
  }
  unsigned int v0 = (void *)qword_1EBD57798;
  return v0;
}

uint64_t __PLLogSMCMetrics_block_invoke()
{
  qword_1EBD57798 = (uint64_t)os_log_create("com.apple.PerfPowerServicesAgent", "smcmetrics");
  return MEMORY[0x1F41817F8]();
}

id PLLogUserActiveState()
{
  if (qword_1EBD577E8 != -1) {
    dispatch_once(&qword_1EBD577E8, &__block_literal_global_1);
  }
  unsigned int v0 = (void *)_MergedGlobals_1_1;
  return v0;
}

uint64_t __PLLogUserActiveState_block_invoke()
{
  _MergedGlobals_1_1 = (uint64_t)os_log_create("com.apple.powerlog", "userActiveState");
  return MEMORY[0x1F41817F8]();
}

id PLLogGameMode()
{
  if (qword_1EBD5B580 != -1) {
    dispatch_once(&qword_1EBD5B580, &__block_literal_global_2);
  }
  unsigned int v0 = (void *)_MergedGlobals_75;
  return v0;
}

uint64_t __PLLogGameMode_block_invoke()
{
  _MergedGlobals_75 = (uint64_t)os_log_create("com.apple.powerlog", "gamemode");
  return MEMORY[0x1F41817F8]();
}

uint64_t AWDMETRICSCellularPowerLogRATChangeEventReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogShutdownReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          uint64_t v40 = 16;
          goto LABEL_61;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v41 = 24;
          goto LABEL_66;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v19 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_60:
          uint64_t v40 = 8;
LABEL_61:
          *(void *)(a1 + v40) = v19;
          continue;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_63;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_65;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_63:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_65:
      uint64_t v41 = 28;
LABEL_66:
      *(_DWORD *)(a1 + v41) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWCDMACDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWCDMARRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_74:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_86:
      uint64_t v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL AWDMETRICSMCarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
              goto LABEL_61;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
              goto LABEL_64;
            }
          }
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
          goto LABEL_62;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
              goto LABEL_61;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
          goto LABEL_62;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
              goto LABEL_61;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
          goto LABEL_62;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 0x10u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
              goto LABEL_61;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
          goto LABEL_62;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
          goto LABEL_62;
        }
        v40 += 7;
        BOOL v23 = v41++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
          goto LABEL_64;
        }
      }
      char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
LABEL_61:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_64:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PLLogCoreDuet()
{
  if (qword_1EBD57808 != -1) {
    dispatch_once(&qword_1EBD57808, &__block_literal_global_3);
  }
  unsigned int v0 = (void *)_MergedGlobals_1_2;
  return v0;
}

uint64_t __PLLogCoreDuet_block_invoke()
{
  _MergedGlobals_1_2 = (uint64_t)os_log_create("com.apple.powerlog", "coreduet");
  return MEMORY[0x1F41817F8]();
}

id PLLogHomeKit()
{
  if (qword_1EBD578E8 != -1) {
    dispatch_once(&qword_1EBD578E8, &__block_literal_global_5);
  }
  unsigned int v0 = (void *)qword_1EBD578E0;
  return v0;
}

uint64_t __PLLogHomeKit_block_invoke()
{
  qword_1EBD578E0 = (uint64_t)os_log_create("com.apple.powerlog", "homekit");
  return MEMORY[0x1F41817F8]();
}

uint64_t KCellularServingCellRfBandHistReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 2) {
        break;
      }
      if (v17 != 3)
      {
        if (v17 != 15)
        {
LABEL_47:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_62;
        }
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 36) |= 4u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v20 |= (unint64_t)(v28 & 0x7F) << v24;
          if ((v28 & 0x80) == 0) {
            goto LABEL_54;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_56;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_56:
        uint64_t v37 = 32;
LABEL_57:
        *(_DWORD *)(a1 + v37) = v20;
        goto LABEL_62;
      }
      char v35 = objc_alloc_init(RfBandDuration);
      [(id)a1 addPcellBandDuration:v35];
      if (!PBReaderPlaceMark() || !RfBandDurationReadFrom((uint64_t)v35, a2))
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_62:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    if (v17 == 1)
    {
      char v29 = 0;
      unsigned int v30 = 0;
      uint64_t v31 = 0;
      *(unsigned char *)(a1 + 36) |= 1u;
      while (1)
      {
        uint64_t v32 = *v3;
        unint64_t v33 = *(void *)(a2 + v32);
        if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
        *(void *)(a2 + v32) = v33 + 1;
        v31 |= (unint64_t)(v34 & 0x7F) << v29;
        if ((v34 & 0x80) == 0) {
          goto LABEL_59;
        }
        v29 += 7;
        BOOL v14 = v30++ >= 9;
        if (v14)
        {
          uint64_t v31 = 0;
          goto LABEL_61;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_59:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v31 = 0;
      }
LABEL_61:
      *(void *)(a1 + 8) = v31;
      goto LABEL_62;
    }
    if (v17 != 2) {
      goto LABEL_47;
    }
    char v18 = 0;
    unsigned int v19 = 0;
    uint64_t v20 = 0;
    *(unsigned char *)(a1 + 36) |= 2u;
    while (1)
    {
      uint64_t v21 = *v3;
      unint64_t v22 = *(void *)(a2 + v21);
      if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
      *(void *)(a2 + v21) = v22 + 1;
      v20 |= (unint64_t)(v23 & 0x7F) << v18;
      if ((v23 & 0x80) == 0) {
        goto LABEL_50;
      }
      v18 += 7;
      BOOL v14 = v19++ >= 9;
      if (v14)
      {
        LODWORD(v20) = 0;
        goto LABEL_52;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
    if (*(unsigned char *)(a2 + *v5)) {
      LODWORD(v20) = 0;
    }
LABEL_52:
    uint64_t v37 = 16;
    goto LABEL_57;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularTdsL1StateReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRSCGRelReadFrom(uint64_t a1, uint64_t a2)
{
  io_object_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 16;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void PLProcessCPU::PLProcessCPU(PLProcessCPU *this)
{
  *(void *)this = &unk_1F2946D18;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((void *)this + 19) = 0;
  os_log_t v2 = os_log_create("com.apple.powerlog", "PLProcessCPU");
  io_object_t v3 = (void *)*((void *)this + 19);
  *((void *)this + 19) = v2;

  LODWORD(count) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 17) = 0x100000000;
  *((unsigned char *)this + 144) = 1;
  uint64_t v4 = mach_absolute_time();
  *((void *)this + 15) = v4;
  *((void *)this + 16) = v4;
  size_t v8 = 4;
  sysctlbyname("kern.maxproc", &count, &v8, 0, 0);
  *((void *)this + 11) = malloc_type_calloc((int)count, 4uLL, 0x100004052888210uLL);
  int v5 = malloc_type_calloc((int)count, 4uLL, 0x100004052888210uLL);
  *((void *)this + 12) = v5;
  *((_DWORD *)this + 26) = 4 * count;
  mach_port_t v6 = *((void *)this + 19);
  if (!*((void *)this + 11) || !v5)
  {
    if (os_log_type_enabled(*((os_log_t *)this + 19), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v7 = 0;
      _os_log_error_impl(&dword_1D2690000, v6, OS_LOG_TYPE_ERROR, "Unable to allocate memory.", v7, 2u);
    }
    __cxa_rethrow();
  }
  if (os_log_type_enabled(*((os_log_t *)this + 19), OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unint64_t v7 = 0;
    _os_log_debug_impl(&dword_1D2690000, v6, OS_LOG_TYPE_DEBUG, "PLProcessCPU initialized.", v7, 2u);
  }
}

void sub_1D2790C40(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void PLProcessCPU::~PLProcessCPU(void **this)
{
  *this = &unk_1F2946D18;
  free(this[11]);
  free(this[12]);

  std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::~__hash_table((uint64_t)(this + 6));
  std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::~__hash_table((uint64_t)(this + 1));
}

void PLProcessCPU::findMissing(PLProcessCPU *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((unsigned int *)this + *((int *)this + 35) + 27);
  if (v3)
  {
    unint64_t v21 = *((unsigned int *)this + *((int *)this + 34) + 27);
    if ((int)v3 >= 1 && *((_DWORD *)this + *((int *)this + 34) + 27) >= 1)
    {
      mach_port_t v6 = 0;
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      LODWORD(v9) = 0;
      do
      {
        uint64_t v10 = v21 - v8;
        uint64_t v9 = (int)v9;
        uint64_t v11 = a2[2];
        unint64_t v12 = *a2;
        while (1)
        {
          uint64_t v13 = *((void *)this + *((int *)this + 35) + 11);
          int v14 = *(_DWORD *)(v13 + 4 * v9);
          if (*(_DWORD *)(*((void *)this + *((int *)this + 34) + 11) + 4 * v8) == v14) {
            break;
          }
          if (v10 >= v3 - v9) {
            goto LABEL_33;
          }
          if (v7 >= v11)
          {
            uint64_t v15 = (v7 - v12) >> 2;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if ((v11 - v12) >> 1 > v16) {
              unint64_t v16 = (v11 - v12) >> 1;
            }
            if ((unint64_t)(v11 - v12) >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v16;
            }
            if (v17)
            {
              if (v17 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unsigned int v18 = (char *)operator new(4 * v17);
              int v14 = *(_DWORD *)(v13 + 4 * v9);
              unint64_t v7 = v6;
            }
            else
            {
              unsigned int v18 = 0;
            }
            uint64_t v19 = &v18[4 * v15];
            *(_DWORD *)uint64_t v19 = v14;
            mach_port_t v6 = v19 + 4;
            while (v7 != v12)
            {
              int v20 = *((_DWORD *)v7 - 1);
              v7 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            uint64_t v11 = &v18[4 * v17];
            *a2 = v19;
            a2[1] = v6;
            a2[2] = v11;
            if (v12) {
              operator delete(v12);
            }
            unint64_t v12 = v19;
            uint64_t v10 = v21 - v8;
          }
          else
          {
            *(_DWORD *)unint64_t v7 = v14;
            mach_port_t v6 = v7 + 4;
          }
          a2[1] = v6;
          ++v9;
          unint64_t v7 = v6;
          if (v9 >= v3) {
            return;
          }
        }
        if (v3 - v9 == v10) {
          return;
        }
        LODWORD(v9) = v9 + 1;
LABEL_33:
        ++v8;
      }
      while (v8 < v21 && (int)v9 < (int)v3);
    }
  }
}

void sub_1D2790EB0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void PLProcessCPU::cleanupDeadPids(PLProcessCPU *this)
{
  PLProcessCPU::findMissing(this, &v10);
  uint64_t v2 = v10;
  uint64_t v3 = (int *)v11;
  if (v10 != v11)
  {
    uint64_t v4 = (void *)((char *)this + 8);
    int v5 = (char *)this + 48;
    mach_port_t v6 = (int *)v10;
    do
    {
      int v7 = *v6;
      unint64_t v8 = std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::find<int>(v4, *v6);
      if (v8)
      {
        uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v5, v8[3], v8 + 3);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(v9 + 3, v7);
        std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__erase_unique<int>(v4, v7);
      }
      ++v6;
    }
    while (v6 != v3);
  }
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_1D2790FA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__darwin_ino64_t PLProcessCPU::getInode(PLProcessCPU *this, const char *a2)
{
  if (stat(a2, &v3) == -1) {
    return -1;
  }
  else {
    return v3.st_ino;
  }
}

char *PLProcessCPU::getName(PLProcessCPU *this, char *a2)
{
  return basename(a2);
}

unint64_t PLProcessCPU::updateInodeMap(PLProcessCPU *this, int *a2)
{
  buffer[128] = *MEMORY[0x1E4F143B8];
  if (*a2)
  {
    if (!proc_pidpath(*a2, buffer, 0x400u))
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      *exceptiouint64_t n = "Unable to get path for pid, or process terminated";
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
    unint64_t v5 = (**(uint64_t (***)(PLProcessCPU *, void *))this)(this, buffer);
    unint64_t v52 = v5;
    if (v5 == -1)
    {
      unint64_t v48 = __cxa_allocate_exception(8uLL);
      *unint64_t v48 = "Cannot find the inode for the process";
      __cxa_throw(v48, MEMORY[0x1E4FBA308], 0);
    }
    int v6 = *a2;
  }
  else
  {
    int v6 = 0;
    unint64_t v5 = 0;
    unint64_t v52 = 0;
    strcpy((char *)buffer, "kernel_task");
  }
  std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)this + 2, v6, a2)[3] = v5;
  int v7 = std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 48, v5, &v52);
  unint64_t v8 = v7;
  int v9 = *a2;
  unint64_t v10 = v7[4];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v2 = v9;
      if (v10 <= v9) {
        unint64_t v2 = v9 % v10;
      }
    }
    else
    {
      unint64_t v2 = (v10 - 1) & v9;
    }
    unint64_t v12 = *(uint64_t ***)(v7[3] + 8 * v2);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (*((_DWORD *)i + 4) == v9) {
            goto LABEL_78;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = 0;
  v15[1] = v9;
  *((_DWORD *)v15 + 4) = v9;
  float v16 = (float)(unint64_t)(v8[6] + 1);
  float v17 = *((float *)v8 + 14);
  if ((((float)(v17 * (float)v10) >= v16) & ~(v10 == 0)) == 0)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v10 = v8[4];
    }
    if (*(void *)&prime > v10) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)v8[6] / *((float *)v8 + 14));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = v8[4];
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v22 = operator new(8 * *(void *)&prime);
          char v23 = (void *)v8[3];
          v8[3] = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          v8[4] = prime;
          do
            *(void *)(v8[3] + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          unsigned int v25 = (void *)v8[5];
          if (v25)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(v8[3] + 8 * v26) = v8 + 5;
            unsigned int v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  uint64_t v33 = v8[3];
                  if (!*(void *)(v33 + 8 * v32))
                  {
                    *(void *)(v33 + 8 * v32) = v25;
                    goto LABEL_59;
                  }
                  void *v25 = *v31;
                  *unsigned int v31 = **(void **)(v8[3] + 8 * v32);
                  **(void **)(v8[3] + 8 * v32) = v31;
                  unsigned int v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_59:
                unsigned int v25 = v31;
                unsigned int v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        unsigned int v46 = (void *)v8[3];
        v8[3] = 0;
        if (v46) {
          operator delete(v46);
        }
        unint64_t v10 = 0;
        v8[4] = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        unint64_t v2 = v9 % v10;
      }
      else {
        unint64_t v2 = v9;
      }
    }
    else
    {
      unint64_t v2 = (v10 - 1) & v9;
    }
  }
  uint64_t v34 = v8[3];
  char v35 = *(void **)(v34 + 8 * v2);
  if (v35)
  {
    *uint64_t v15 = *v35;
LABEL_76:
    *char v35 = v15;
    goto LABEL_77;
  }
  *uint64_t v15 = v8[5];
  v8[5] = v15;
  *(void *)(v34 + 8 * v2) = v8 + 5;
  if (*v15)
  {
    unint64_t v36 = *(void *)(*v15 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v36 >= v10) {
        v36 %= v10;
      }
    }
    else
    {
      v36 &= v10 - 1;
    }
    char v35 = (void *)(v8[3] + 8 * v36);
    goto LABEL_76;
  }
LABEL_77:
  ++v8[6];
LABEL_78:
  if (*((char *)v8 + 87) < 0)
  {
    if (v8[9]) {
      return v5;
    }
  }
  else if (*((unsigned char *)v8 + 87))
  {
    return v5;
  }
  uint64_t v37 = (const char *)(*(uint64_t (**)(PLProcessCPU *, void *))(*(void *)this + 8))(this, buffer);
  unint64_t v38 = v37;
  if (!v37)
  {
    char v49 = __cxa_allocate_exception(8uLL);
    *char v49 = "Unable to get basename for the process";
    __cxa_throw(v49, MEMORY[0x1E4FBA308], 0);
  }
  size_t v39 = strlen(v37);
  if (v39 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v40 = v39;
  if (v39 >= 0x17)
  {
    uint64_t v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17) {
      uint64_t v42 = v39 | 7;
    }
    uint64_t v43 = v42 + 1;
    p_dst = (long long *)operator new(v42 + 1);
    *((void *)&__dst + 1) = v40;
    unint64_t v51 = v43 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v51) = v39;
    p_dst = &__dst;
    if (!v39) {
      goto LABEL_91;
    }
  }
  memmove(p_dst, v38, v40);
LABEL_91:
  char v44 = (void **)(v8 + 8);
  *((unsigned char *)p_dst + v40) = 0;
  if (*((char *)v8 + 87) < 0) {
    operator delete(*v44);
  }
  *(_OWORD *)char v44 = __dst;
  v8[10] = v51;
  return v52;
}

void sub_1D2791630(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t PLProcessCPU::getCpu(PLProcessCPU *this, int pid, proc_taskinfo *buffer)
{
  return proc_pidinfo(pid, 4, 0, buffer, 96);
}

uint64_t PLProcessCPU::getRawCpu(PLProcessCPU *this, int *a2, unint64_t *a3)
{
  if ((*(unsigned int (**)(PLProcessCPU *, void, void *))(*(void *)this + 16))(this, *a2, v9) != 96)
  {
    std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__erase_unique<int>((void *)this + 1, *a2);
    int v7 = std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::find<unsigned long long>((void *)this + 6, *a3);
    if (!v7[6]) {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(v7 + 3, *a2);
    }
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    *exceptiouint64_t n = "Process terminated while acquiring pidinfo";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  return v9[3] + v9[2];
}

uint64_t PLProcessCPU::aggregateCpu(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *a4;
  if (v6)
  {
    unint64_t v8 = *(void **)a2;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = *a4;
      if (v7 >= v6) {
        unint64_t v10 = v7 % v6;
      }
    }
    else
    {
      unint64_t v10 = (v6 - 1) & v7;
    }
    unint64_t v12 = (void *)v8[v10];
    if (v12)
    {
      for (unint64_t i = (void *)*v12; i; unint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v7)
        {
          if (i[2] == v7)
          {
            uint64_t result = i[3];
            uint64_t v39 = *a3 + result;
            *a3 = v39;
            i[3] = v39;
            return result;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v14 >= v6) {
              v14 %= v6;
            }
          }
          else
          {
            v14 &= v6 - 1;
          }
          if (v14 != v10) {
            break;
          }
        }
      }
    }
    uint64_t v11 = *a3;
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a4;
      if (v6 <= v7) {
        unint64_t v4 = v7 % v6;
      }
    }
    else
    {
      unint64_t v4 = (v6 - 1) & v7;
    }
    uint64_t v15 = (void **)v8[v4];
    if (v15)
    {
      for (uint64_t j = *v15; j; uint64_t j = (void *)*j)
      {
        unint64_t v17 = j[1];
        if (v17 == v7)
        {
          if (j[2] == v7) {
            goto LABEL_89;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v17 >= v6) {
              v17 %= v6;
            }
          }
          else
          {
            v17 &= v6 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v11 = *a3;
  }
  uint64_t j = operator new(0x20uLL);
  *uint64_t j = 0;
  j[1] = v7;
  j[2] = v7;
  j[3] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a2 + 24) + 1);
  float v19 = *(float *)(a2 + 32);
  if (!v6 || (float)(v19 * (float)v6) < v18)
  {
    BOOL v20 = 1;
    if (v6 >= 3) {
      BOOL v20 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v6);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a2 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_45;
    }
    if (*(void *)&prime < v6)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
      if (v6 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *(void *)(a2 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_45:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v24 = operator new(8 * *(void *)&prime);
          unsigned int v25 = *(void **)a2;
          *(void *)a2 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *(int8x8_t *)(a2 + 8) = prime;
          do
            *(void *)(*(void *)a2 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          uint8x8_t v27 = *(void **)(a2 + 16);
          if (v27)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a2 + 8 * v28) = a2 + 16;
            uint64_t v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*(void *)a2 + 8 * v34))
                  {
                    *(void *)(*(void *)a2 + 8 * v34) = v27;
                    goto LABEL_70;
                  }
                  void *v27 = *v33;
                  *uint64_t v33 = **(void **)(*(void *)a2 + 8 * v34);
                  **(void **)(*(void *)a2 + 8 * v34) = v33;
                  uint64_t v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_70:
                uint8x8_t v27 = v33;
                uint64_t v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_74;
        }
        size_t v40 = *(void **)a2;
        *(void *)a2 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v6 = 0;
        *(void *)(a2 + 8) = 0;
      }
    }
LABEL_74:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v7) {
        unint64_t v4 = v7 % v6;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v6 - 1) & v7;
    }
  }
  char v35 = *(void **)a2;
  unint64_t v36 = *(void **)(*(void *)a2 + 8 * v4);
  if (v36)
  {
    *uint64_t j = *v36;
  }
  else
  {
    *uint64_t j = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = j;
    v35[v4] = a2 + 16;
    if (!*j) {
      goto LABEL_88;
    }
    unint64_t v37 = *(void *)(*j + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v37 >= v6) {
        v37 %= v6;
      }
    }
    else
    {
      v37 &= v6 - 1;
    }
    unint64_t v36 = (void *)(*(void *)a2 + 8 * v37);
  }
  *unint64_t v36 = j;
LABEL_88:
  ++*(void *)(a2 + 24);
LABEL_89:
  uint64_t result = 0;
  j[3] = v11;
  return result;
}

void sub_1D2791BA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void PLProcessCPU::addToReport(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4, uint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = PLProcessCPU::aggregateCpu(a1, a3, a5, a2);
  unint64_t v12 = (uint64_t *)(a4 + 1);
  uint64_t v11 = a4[1];
  if (v11)
  {
    unint64_t v13 = *a2;
    unint64_t v14 = (uint64_t *)(a4 + 1);
    do
    {
      unint64_t v15 = v11[5];
      BOOL v16 = v15 >= v10;
      BOOL v17 = v15 > v10;
      int v18 = v16;
      if (v11[4] == v13) {
        int v19 = v17;
      }
      else {
        int v19 = v18;
      }
      BOOL v20 = v19 == 0;
      if (v19) {
        unint64_t v21 = v11 + 1;
      }
      else {
        unint64_t v21 = v11;
      }
      if (v20) {
        unint64_t v14 = v11;
      }
      uint64_t v11 = (void *)*v21;
    }
    while (*v21);
    if (v14 != v12)
    {
      unint64_t v22 = v14[5];
      BOOL v28 = v22 > v10;
      BOOL v23 = v22 < v10;
      BOOL v24 = !v28;
      if (!(v14[4] == v13 ? v23 : v24))
      {
        std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::__remove_node_pointer(a4, v14);
        operator delete(v14);
      }
    }
  }
  unint64_t v26 = (unint64_t)a4[2];
  unint64_t v27 = *a5;
  BOOL v28 = v26 != 10 || v27 > *a6;
  if (v28)
  {
    unint64_t v29 = *a2;
    unint64_t v30 = (void *)*v12;
    uint8x8_t v31 = a4 + 1;
    uint64_t v32 = a4 + 1;
    if (*v12)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v32 = v30;
          uint64_t v33 = v30[4];
          unint64_t v34 = v32[5];
          BOOL v35 = v34 < v27;
          if (v33 != v29) {
            BOOL v35 = v34 <= v27;
          }
          if (!v35) {
            break;
          }
          unint64_t v30 = (void *)*v32;
          uint8x8_t v31 = v32;
          if (!*v32) {
            goto LABEL_45;
          }
        }
        BOOL v16 = v34 >= v27;
        BOOL v36 = v34 > v27;
        BOOL v37 = v16;
        if (!(v33 == v29 ? v36 : v37)) {
          break;
        }
        unint64_t v30 = (void *)v32[1];
        if (!v30)
        {
          uint8x8_t v31 = v32 + 1;
          goto LABEL_45;
        }
      }
    }
    else
    {
LABEL_45:
      uint64_t v39 = operator new(0x30uLL);
      v39[4] = v29;
      v39[5] = v27;
      *uint64_t v39 = 0;
      v39[1] = 0;
      v39[2] = v32;
      *uint8x8_t v31 = v39;
      size_t v40 = (void *)**a4;
      if (v40)
      {
        *a4 = v40;
        uint64_t v39 = (void *)*v31;
      }
      unsigned int v41 = (unsigned char *)*v12;
      BOOL v20 = v39 == (void *)*v12;
      *((unsigned char *)v39 + 24) = v20;
      if (!v20)
      {
        do
        {
          uint64_t v42 = v39[2];
          if (*(unsigned char *)(v42 + 24)) {
            break;
          }
          uint64_t v43 = *(unsigned char **)(v42 + 16);
          uint64_t v44 = *(void *)v43;
          if (*(void *)v43 == v42)
          {
            uint64_t v47 = *((void *)v43 + 1);
            if (!v47 || (v48 = *(unsigned __int8 *)(v47 + 24), char v45 = (unsigned char *)(v47 + 24), v48))
            {
              if (*(void **)v42 == v39)
              {
                char v49 = (uint64_t *)v39[2];
              }
              else
              {
                char v49 = *(uint64_t **)(v42 + 8);
                uint64_t v50 = *v49;
                *(void *)(v42 + 8) = *v49;
                if (v50)
                {
                  *(void *)(v50 + 16) = v42;
                  uint64_t v43 = *(unsigned char **)(v42 + 16);
                }
                v49[2] = (uint64_t)v43;
                *(void *)(*(void *)(v42 + 16) + 8 * (**(void **)(v42 + 16) != v42)) = v49;
                *char v49 = v42;
                *(void *)(v42 + 16) = v49;
                uint64_t v43 = (unsigned char *)v49[2];
                uint64_t v42 = *(void *)v43;
              }
              *((unsigned char *)v49 + 24) = 1;
              v43[24] = 0;
              uint64_t v53 = *(void *)(v42 + 8);
              *(void *)uint64_t v43 = v53;
              if (v53) {
                *(void *)(v53 + 16) = v43;
              }
              *(void *)(v42 + 16) = *((void *)v43 + 2);
              *(void *)(*((void *)v43 + 2) + 8 * (**((void **)v43 + 2) != (void)v43)) = v42;
              *(void *)(v42 + 8) = v43;
              goto LABEL_73;
            }
          }
          else if (!v44 || (v46 = *(unsigned __int8 *)(v44 + 24), char v45 = (unsigned char *)(v44 + 24), v46))
          {
            if (*(void **)v42 == v39)
            {
              uint64_t v51 = v39[1];
              *(void *)uint64_t v42 = v51;
              if (v51)
              {
                *(void *)(v51 + 16) = v42;
                uint64_t v43 = *(unsigned char **)(v42 + 16);
              }
              v39[2] = v43;
              *(void *)(*(void *)(v42 + 16) + 8 * (**(void **)(v42 + 16) != v42)) = v39;
              v39[1] = v42;
              *(void *)(v42 + 16) = v39;
              uint64_t v43 = (unsigned char *)v39[2];
            }
            else
            {
              uint64_t v39 = (void *)v39[2];
            }
            *((unsigned char *)v39 + 24) = 1;
            v43[24] = 0;
            uint64_t v42 = *((void *)v43 + 1);
            unint64_t v52 = *(void **)v42;
            *((void *)v43 + 1) = *(void *)v42;
            if (v52) {
              v52[2] = v43;
            }
            *(void *)(v42 + 16) = *((void *)v43 + 2);
            *(void *)(*((void *)v43 + 2) + 8 * (**((void **)v43 + 2) != (void)v43)) = v42;
            *(void *)uint64_t v42 = v43;
LABEL_73:
            *((void *)v43 + 2) = v42;
            break;
          }
          *(unsigned char *)(v42 + 24) = 1;
          uint64_t v39 = v43;
          v43[24] = v43 == v41;
          *char v45 = 1;
        }
        while (v43 != v41);
      }
      a4[2] = (void *)++v26;
    }
    if (v26 >= 0xB)
    {
      do
      {
        char v54 = (uint64_t *)*v12;
        uint64_t v55 = (uint64_t *)(a4 + 1);
        if (*v12)
        {
          do
          {
            uint64_t v55 = v54;
            char v54 = (uint64_t *)v54[1];
          }
          while (v54);
          char v56 = (uint64_t *)*v55;
        }
        else
        {
          do
          {
            unsigned int v57 = v55;
            uint64_t v55 = (uint64_t *)v55[2];
            char v56 = (uint64_t *)*v55;
          }
          while ((uint64_t *)*v55 == v57);
        }
        if (v56)
        {
          do
          {
            uint64_t v55 = v56;
            char v56 = (uint64_t *)v56[1];
          }
          while (v56);
          *a6 = v55[5];
        }
        else
        {
          do
          {
            unint64_t v59 = v55;
            uint64_t v55 = (uint64_t *)v55[2];
          }
          while ((uint64_t *)*v55 == v59);
          char v60 = (uint64_t *)v55[1];
          *a6 = v55[5];
          if (v60)
          {
            do
            {
              uint64_t v58 = v60;
              char v60 = (uint64_t *)*v60;
            }
            while (v60);
            goto LABEL_89;
          }
        }
        do
        {
          uint64_t v58 = (uint64_t *)v55[2];
          BOOL v20 = *v58 == (void)v55;
          uint64_t v55 = v58;
        }
        while (!v20);
LABEL_89:
        std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::__remove_node_pointer(a4, v58);
        operator delete(v58);
      }
      while ((unint64_t)a4[2] > 0xA);
    }
  }
}

void PLProcessCPU::reportCpus(uint64_t a1, void *a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  [MEMORY[0x1E4F92A88] secondsFromMachTime:*a3];
  float v6 = v5 * 1000.0;
  [MEMORY[0x1E4F92A88] secondsFromMachTime:*(void *)(a1 + 120 + 8 * *(int *)(a1 + 136)) - *(void *)(a1 + 120 + 8 * *(int *)(a1 + 140))];
  if (a2[2])
  {
    double v8 = *(double *)&v7;
    uint8x8_t v9 = *(NSObject **)(a1 + 152);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      float v10 = v8;
      *(_DWORD *)buf = 134218240;
      *(double *)unint64_t v30 = v6;
      *(_WORD *)&v30[8] = 2048;
      *(double *)&v30[10] = v10;
      _os_log_impl(&dword_1D2690000, v9, OS_LOG_TYPE_DEFAULT, "plcpu-00, %8.2f ms, %6.2f s", buf, 0x16u);
    }
  }
  unint64_t v13 = (void *)*a2;
  uint64_t v11 = a2 + 1;
  unint64_t v12 = v13;
  if (v13 != v11)
  {
    int v14 = 0;
    double v15 = v6;
    *(void *)&long long v7 = 67110146;
    long long v27 = v7;
    do
    {
      long long v28 = *((_OWORD *)v12 + 2);
      objc_msgSend(MEMORY[0x1E4F92A88], "secondsFromMachTime:", *((void *)&v28 + 1), v27);
      double v17 = v16;
      int v18 = *(id *)(a1 + 152);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v19 = v28;
        int v20 = *(_DWORD *)(std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 48, v28, &v28)[5]+ 16);
        unint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 48, v19, &v28);
        unint64_t v22 = v21 + 8;
        if (*((char *)v21 + 87) < 0) {
          unint64_t v22 = (void *)*v22;
        }
        float v23 = v17 * 1000.0;
        ++v14;
        *(_DWORD *)buf = v27;
        *(_DWORD *)unint64_t v30 = v14;
        *(_WORD *)&v30[4] = 2048;
        *(double *)&v30[6] = v23;
        *(_WORD *)&v30[14] = 2048;
        *(double *)&v30[16] = v23 * 100.0 / v15;
        __int16 v31 = 1024;
        int v32 = v20;
        __int16 v33 = 2080;
        unint64_t v34 = v22;
        _os_log_impl(&dword_1D2690000, v18, OS_LOG_TYPE_DEFAULT, "plcpu-%02d, %8.2f ms, %6.2f %%, %5d, %s", buf, 0x2Cu);
      }

      BOOL v24 = (void *)v12[1];
      if (v24)
      {
        do
        {
          unsigned int v25 = v24;
          BOOL v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          unsigned int v25 = (void *)v12[2];
          BOOL v26 = *v25 == (void)v12;
          unint64_t v12 = v25;
        }
        while (!v26);
      }
      unint64_t v12 = v25;
    }
    while (v25 != v11);
  }
}

void sub_1D2792214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PLProcessCPU::processPids(PLProcessCPU *this)
{
  *((_DWORD *)this + *((int *)this + 34) + 27) = proc_listallpids(*((void **)this + *((int *)this + 34) + 11), *((_DWORD *)this + 26));
  PLProcessCPU::cleanupDeadPids(this);
  memset(v18, 0, sizeof(v18));
  int v19 = 1065353216;
  v17[0] = 0;
  v17[1] = 0;
  unint64_t v15 = 0;
  double v16 = v17;
  uint64_t v14 = 0;
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = *((int *)this + 34);
  *((void *)this + v3 + 15) = v2;
  if (*((int *)this + v3 + 27) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      int v13 = *(_DWORD *)(*((void *)this + v3 + 11) + 4 * v4);
      int v5 = v13;
      unint64_t v12 = 0;
      float v6 = std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::find<int>((void *)this + 1, v13);
      long long v7 = v6;
      if (v6) {
        unint64_t updated = v6[3];
      }
      else {
        unint64_t updated = PLProcessCPU::updateInodeMap(this, &v13);
      }
      unint64_t v12 = updated;
      uint64_t RawCpu = PLProcessCPU::getRawCpu(this, &v13, &v12);
      if (v7)
      {
        v7[*((int *)this + 34) + 4] = RawCpu;
        if (!*((unsigned char *)this + 144))
        {
          uint64_t v11 = RawCpu - v7[*((int *)this + 35) + 4];
          v14 += v11;
          if (v11) {
            PLProcessCPU::addToReport(RawCpu, &v12, (uint64_t)v18, &v16, &v11, &v15);
          }
        }
      }
      else
      {
        std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)this + 2, v5, &v13)[*((int *)this + 34) + 4] = RawCpu;
      }
      ++v4;
      uint64_t v3 = *((int *)this + 34);
    }
    while (v4 < *((int *)this + v3 + 27));
  }
  PLProcessCPU::reportCpus((uint64_t)this, &v16, &v14);
  *((int32x2_t *)this + 17) = vrev64_s32(*(int32x2_t *)((char *)this + 136));
  *((unsigned char *)this + 144) = 0;
  std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::destroy(v17[0]);
  return std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::~__hash_table((uint64_t)v18);
}

void sub_1D279240C()
{
}

uint64_t std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,PLProcessCPU::inode_data_t>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,PLProcessCPU::inode_data_t>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E69293A0, MEMORY[0x1E4FBA1C8]);
}

void sub_1D27925AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exceptiouint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::find<int>(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  int v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = (void *)(a1 + 16);
  int v13 = (char *)operator new(0x58uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(void *)int v13 = 0;
  *((void *)v13 + 1) = v5;
  *((void *)v13 + 2) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((void *)v13 + 7) = 0;
  *((void *)v13 + 8) = 0;
  *((_DWORD *)v13 + 14) = 1065353216;
  *((void *)v13 + 9) = 0;
  *((void *)v13 + 10) = 0;
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      unint64_t v34 = *(void **)a1;
      *(void *)a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v20 = operator new(8 * *(void *)&prime);
  unint64_t v21 = *(void **)a1;
  *(void *)a1 = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  float v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v12;
    unint64_t v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*(void *)a1 + 8 * v30))
          {
            *(void *)(*(void *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          void *v23 = *v29;
          *unint64_t v29 = **(void **)(*(void *)a1 + 8 * v30);
          **(void **)(*(void *)a1 + 8 * v30) = v29;
          unint64_t v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        float v23 = v29;
        unint64_t v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  __int16 v31 = *(void **)(*(void *)a1 + 8 * v5);
  unint64_t i = (void *)v35[0];
  if (v31)
  {
    *(void *)v35[0] = *v31;
LABEL_72:
    *__int16 v31 = i;
    goto LABEL_73;
  }
  *(void *)v35[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    __int16 v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1D2792AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,PLProcessCPU::inode_data_t>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  unint64_t v5 = *(void ***)(*a1 + 8 * v4);
  if (!v5) {
    return;
  }
  float v6 = *v5;
  if (!v6) {
    return;
  }
  unint64_t v7 = v2 - 1;
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v3.u32[0] > 1uLL)
    {
      if (v8 >= v2) {
        v8 %= v2;
      }
    }
    else
    {
      v8 &= v7;
    }
    if (v8 != v4) {
      return;
    }
LABEL_17:
    float v6 = (void *)*v6;
    if (!v6) {
      return;
    }
  }
  if (*((_DWORD *)v6 + 4) != a2) {
    goto LABEL_17;
  }
  uint64_t v9 = *v6;
  if (v3.u32[0] > 1uLL)
  {
    if (v8 >= v2) {
      v8 %= v2;
    }
  }
  else
  {
    v8 &= v7;
  }
  float v10 = *(void **)(*a1 + 8 * v8);
  do
  {
    unint64_t v11 = v10;
    float v10 = (void *)*v10;
  }
  while (v10 != v6);
  if (v11 == a1 + 2) {
    goto LABEL_36;
  }
  unint64_t v12 = v11[1];
  if (v3.u32[0] > 1uLL)
  {
    if (v12 >= v2) {
      v12 %= v2;
    }
  }
  else
  {
    v12 &= v7;
  }
  if (v12 == v8)
  {
LABEL_38:
    if (v9)
    {
      unint64_t v13 = *(void *)(v9 + 8);
      goto LABEL_40;
    }
  }
  else
  {
LABEL_36:
    if (!v9) {
      goto LABEL_37;
    }
    unint64_t v13 = *(void *)(v9 + 8);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v14 = *(void *)(v9 + 8);
      if (v13 >= v2) {
        unint64_t v14 = v13 % v2;
      }
    }
    else
    {
      unint64_t v14 = v13 & v7;
    }
    if (v14 != v8)
    {
LABEL_37:
      *(void *)(*a1 + 8 * v8) = 0;
      uint64_t v9 = *v6;
      goto LABEL_38;
    }
LABEL_40:
    if (v3.u32[0] > 1uLL)
    {
      if (v13 >= v2) {
        v13 %= v2;
      }
    }
    else
    {
      v13 &= v7;
    }
    if (v13 != v8)
    {
      *(void *)(*a1 + 8 * v13) = v11;
      uint64_t v9 = *v6;
    }
  }
  *unint64_t v11 = v9;
  void *v6 = 0;
  --a1[3];
  operator delete(v6);
}

void std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__erase_unique<int>(void *a1, int a2)
{
  uint8x8_t v3 = std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::find<int>(a1, a2);
  if (!v3) {
    return;
  }
  int8x8_t v4 = (int8x8_t)a1[1];
  uint64_t v5 = *v3;
  unint64_t v6 = v3[1];
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    if (v6 >= *(void *)&v4) {
      v6 %= *(void *)&v4;
    }
  }
  else
  {
    v6 &= *(void *)&v4 - 1;
  }
  unint64_t v8 = *(uint64_t **)(*a1 + 8 * v6);
  do
  {
    uint64_t v9 = v8;
    unint64_t v8 = (uint64_t *)*v8;
  }
  while (v8 != v3);
  if (v9 == a1 + 2) {
    goto LABEL_20;
  }
  unint64_t v10 = v9[1];
  if (v7.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
  }
  else
  {
    v10 &= *(void *)&v4 - 1;
  }
  if (v10 != v6)
  {
LABEL_20:
    if (v5)
    {
      unint64_t v11 = *(void *)(v5 + 8);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v12 = *(void *)(v5 + 8);
        if (v11 >= *(void *)&v4) {
          unint64_t v12 = v11 % *(void *)&v4;
        }
      }
      else
      {
        unint64_t v12 = v11 & (*(void *)&v4 - 1);
      }
      if (v12 == v6) {
        goto LABEL_24;
      }
    }
    *(void *)(*a1 + 8 * v6) = 0;
    uint64_t v5 = *v3;
  }
  if (v5)
  {
    unint64_t v11 = *(void *)(v5 + 8);
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v4) {
        v11 %= *(void *)&v4;
      }
    }
    else
    {
      v11 &= *(void *)&v4 - 1;
    }
    if (v11 != v6)
    {
      *(void *)(*a1 + 8 * v11) = v9;
      uint64_t v5 = *v3;
    }
  }
  *uint64_t v9 = v5;
  uint64_t *v3 = 0;
  --a1[3];
  operator delete(v3);
}

void *std::__hash_table<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PLProcessCPU::inode_cpu_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(float *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x30uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v18 = operator new(8 * *(void *)&prime);
          int v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          unint64_t v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            uint8x8_t v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *unint64_t v21 = *v27;
                  void *v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  uint8x8_t v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                unint64_t v21 = v27;
                uint8x8_t v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        __int16 v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unint64_t v29 = *(void **)a1;
  unint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    *unint64_t v10 = *v30;
LABEL_72:
    *unint64_t v30 = v10;
    goto LABEL_73;
  }
  *unint64_t v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    unint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_1D2793260(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PLProcessCPU::inode_data_t>>>::find<unsigned long long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint64_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t **std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::__remove_node_pointer(uint64_t **result, uint64_t *a2)
{
  int8x8_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint8x8_t v3 = v2;
      int8x8_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    unint64_t v4 = a2;
    do
    {
      uint8x8_t v3 = (uint64_t *)v4[2];
      BOOL v25 = *v3 == (void)v4;
      unint64_t v4 = v3;
    }
    while (!v25);
  }
  if (*result == a2) {
    *uint64_t result = v3;
  }
  uint64_t v5 = result[1];
  result[2] = (uint64_t *)((char *)result[2] - 1);
  uint64_t v6 = *a2;
  unint64_t v7 = a2;
  if (*a2)
  {
    uint8x8_t v8 = (uint64_t *)a2[1];
    if (!v8)
    {
      unint64_t v7 = a2;
      goto LABEL_15;
    }
    do
    {
      unint64_t v7 = v8;
      uint8x8_t v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  uint64_t v6 = v7[1];
  if (v6)
  {
LABEL_15:
    int v9 = 0;
    *(void *)(v6 + 16) = v7[2];
    goto LABEL_16;
  }
  int v9 = 1;
LABEL_16:
  unint64_t v10 = (uint64_t **)v7[2];
  unint64_t v11 = *v10;
  if (*v10 == v7)
  {
    *unint64_t v10 = (uint64_t *)v6;
    if (v7 == v5)
    {
      unint64_t v11 = 0;
      uint64_t v5 = (uint64_t *)v6;
    }
    else
    {
      unint64_t v11 = v10[1];
    }
  }
  else
  {
    v10[1] = (uint64_t *)v6;
  }
  int v12 = *((unsigned __int8 *)v7 + 24);
  if (v7 != a2)
  {
    uint64_t v13 = a2[2];
    v7[2] = v13;
    *(void *)(v13 + 8 * (*(void *)a2[2] != (void)a2)) = v7;
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    *(void *)(v15 + 16) = v7;
    uint64_t *v7 = v15;
    v7[1] = v14;
    if (v14) {
      *(void *)(v14 + 16) = v7;
    }
    *((unsigned char *)v7 + 24) = *((unsigned char *)a2 + 24);
    if (v5 == a2) {
      uint64_t v5 = v7;
    }
  }
  if (!v12 || !v5) {
    return result;
  }
  if (!v9)
  {
    *(unsigned char *)(v6 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v16 = v11[2];
    if (*(uint64_t **)v16 != v11) {
      break;
    }
    if (!*((unsigned char *)v11 + 24))
    {
      *((unsigned char *)v11 + 24) = 1;
      *(unsigned char *)(v16 + 24) = 0;
      uint64_t v22 = v11[1];
      *(void *)uint64_t v16 = v22;
      if (v22) {
        *(void *)(v22 + 16) = v16;
      }
      v11[2] = *(void *)(v16 + 16);
      *(void *)(*(void *)(v16 + 16) + 8 * (**(void **)(v16 + 16) != v16)) = v11;
      v11[1] = v16;
      *(void *)(v16 + 16) = v11;
      if (v5 == (uint64_t *)v16) {
        uint64_t v5 = v11;
      }
      unint64_t v11 = *(uint64_t **)v16;
    }
    uint8x8_t v23 = (void *)*v11;
    if (*v11 && !*((unsigned char *)v23 + 24)) {
      goto LABEL_76;
    }
    unint64_t v24 = (uint64_t *)v11[1];
    if (v24 && !*((unsigned char *)v24 + 24))
    {
      if (v23 && !*((unsigned char *)v23 + 24))
      {
LABEL_76:
        unint64_t v24 = v11;
      }
      else
      {
        *((unsigned char *)v24 + 24) = 1;
        *((unsigned char *)v11 + 24) = 0;
        uint64_t v30 = *v24;
        v11[1] = *v24;
        if (v30) {
          *(void *)(v30 + 16) = v11;
        }
        v24[2] = v11[2];
        *(void *)(v11[2] + 8 * (*(void *)v11[2] != (void)v11)) = v24;
        uint64_t *v24 = (uint64_t)v11;
        v11[2] = (uint64_t)v24;
        uint8x8_t v23 = v11;
      }
      uint64_t v27 = v24[2];
      *((unsigned char *)v24 + 24) = *(unsigned char *)(v27 + 24);
      *(unsigned char *)(v27 + 24) = 1;
      *((unsigned char *)v23 + 24) = 1;
      unint64_t v28 = *(uint64_t **)v27;
      uint64_t v31 = *(void *)(*(void *)v27 + 8);
      *(void *)uint64_t v27 = v31;
      if (v31) {
        *(void *)(v31 + 16) = v27;
      }
      v28[2] = *(void *)(v27 + 16);
      *(void *)(*(void *)(v27 + 16) + 8 * (**(void **)(v27 + 16) != v27)) = v28;
      v28[1] = v27;
      goto LABEL_80;
    }
    *((unsigned char *)v11 + 24) = 0;
    unint64_t v21 = (uint64_t *)v11[2];
    if (*((unsigned char *)v21 + 24)) {
      BOOL v25 = v21 == v5;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25) {
      goto LABEL_61;
    }
LABEL_57:
    unint64_t v11 = *(uint64_t **)(v21[2] + 8 * (*(void *)v21[2] == (void)v21));
  }
  if (!*((unsigned char *)v11 + 24))
  {
    *((unsigned char *)v11 + 24) = 1;
    *(unsigned char *)(v16 + 24) = 0;
    unint64_t v17 = *(uint64_t **)(v16 + 8);
    uint64_t v18 = *v17;
    *(void *)(v16 + 8) = *v17;
    if (v18) {
      *(void *)(v18 + 16) = v16;
    }
    v17[2] = *(void *)(v16 + 16);
    *(void *)(*(void *)(v16 + 16) + 8 * (**(void **)(v16 + 16) != v16)) = v17;
    *unint64_t v17 = v16;
    *(void *)(v16 + 16) = v17;
    if (v5 == (uint64_t *)*v11) {
      uint64_t v5 = v11;
    }
    unint64_t v11 = *(uint64_t **)(*v11 + 8);
  }
  int v19 = (void *)*v11;
  if (!*v11 || *((unsigned char *)v19 + 24))
  {
    uint64_t v20 = (uint64_t *)v11[1];
    if (v20 && !*((unsigned char *)v20 + 24)) {
      goto LABEL_67;
    }
    *((unsigned char *)v11 + 24) = 0;
    unint64_t v21 = (uint64_t *)v11[2];
    if (v21 == v5)
    {
      unint64_t v21 = v5;
LABEL_61:
      *((unsigned char *)v21 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v21 + 24)) {
      goto LABEL_61;
    }
    goto LABEL_57;
  }
  uint64_t v20 = (uint64_t *)v11[1];
  if (v20 && !*((unsigned char *)v20 + 24))
  {
LABEL_67:
    int v19 = v11;
  }
  else
  {
    *((unsigned char *)v19 + 24) = 1;
    *((unsigned char *)v11 + 24) = 0;
    uint64_t v26 = v19[1];
    *unint64_t v11 = v26;
    if (v26) {
      *(void *)(v26 + 16) = v11;
    }
    v19[2] = v11[2];
    *(void *)(v11[2] + 8 * (*(void *)v11[2] != (void)v11)) = v19;
    v19[1] = v11;
    v11[2] = (uint64_t)v19;
    uint64_t v20 = v11;
  }
  uint64_t v27 = v19[2];
  *((unsigned char *)v19 + 24) = *(unsigned char *)(v27 + 24);
  *(unsigned char *)(v27 + 24) = 1;
  *((unsigned char *)v20 + 24) = 1;
  unint64_t v28 = *(uint64_t **)(v27 + 8);
  uint64_t v29 = *v28;
  *(void *)(v27 + 8) = *v28;
  if (v29) {
    *(void *)(v29 + 16) = v27;
  }
  v28[2] = *(void *)(v27 + 16);
  *(void *)(*(void *)(v27 + 16) + 8 * (**(void **)(v27 + 16) != v27)) = v28;
  *unint64_t v28 = v27;
LABEL_80:
  *(void *)(v27 + 16) = v28;
  return result;
}

void std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::destroy(*a1);
    std::__tree<std::pair<unsigned long long,unsigned long long>,PLProcessCPU::compare_t,std::allocator<std::pair<unsigned long long,unsigned long long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void sub_1D27938E0(void *a1)
{
  MEMORY[0x1D9429B50](v1, 0x10B1C40CB89C51DLL);
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x1D27938CCLL);
}

id PLLogPLIOReportAgentIOReportStats()
{
  if (qword_1EBD57910 != -1) {
    dispatch_once(&qword_1EBD57910, &__block_literal_global_7);
  }
  unsigned int v0 = (void *)qword_1EBD57908;
  return v0;
}

uint64_t __PLLogPLIOReportAgentIOReportStats_block_invoke()
{
  qword_1EBD57908 = (uint64_t)os_log_create("com.apple.powerlog", "PLIOReportAgentIOReportStats");
  return MEMORY[0x1F41817F8]();
}

BOOL PowerlogMetricLogReadFrom(void *a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 3985947)
      {
        if ((int)v17 > 3986692)
        {
          switch((int)v17)
          {
            case 3987200:
              uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
              [a1 addKCellularCdma1XRxDiversityHist:v18];
              goto LABEL_169;
            case 3987201:
              uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
              [a1 addKCellularCdma1XServingCellRx0RssiHist:v18];
              goto LABEL_169;
            case 3987202:
              uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
              [a1 addKCellularCdma1XServingCellRx1RssiHist:v18];
              goto LABEL_169;
            case 3987203:
              uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
              [a1 addKCellularCdma1XServingCellRx0EcIoHist:v18];
              goto LABEL_169;
            case 3987204:
              uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
              [a1 addKCellularCdma1XServingCellRx1EcIoHist:v18];
              goto LABEL_169;
            case 3987205:
              uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
              [a1 addKCellularCdma1XTxPowerHist:v18];
              goto LABEL_186;
            case 3987206:
              uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist2);
              [a1 addKCellularCdma1XProtocolStackStateHist:v18];
              goto LABEL_174;
            case 3987207:
              uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
              [a1 addKCellularCdma1XConnectionHist:v18];
              goto LABEL_186;
            case 3987208:
              uint64_t v18 = objc_alloc_init(KCellularCdma1XRrState);
              [a1 addKCellularCdma1XRrState:v18];
              if (!PBReaderPlaceMark() || (KCellularCdma1XRrStateReadFrom((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_200;
              }
              goto LABEL_188;
            default:
              switch((int)v17)
              {
                case 3987328:
                  uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
                  [a1 addKCellularCdmaEvdoRxDiversityHist:v18];
                  goto LABEL_169;
                case 3987329:
                  uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
                  [a1 addKCellularCdmaEvdoServingCellRx0RssiHist:v18];
                  goto LABEL_169;
                case 3987330:
                  uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
                  [a1 addKCellularCdmaEvdoServingCellRx1RssiHist:v18];
                  goto LABEL_169;
                case 3987331:
                  uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
                  [a1 addKCellularCdmaEvdoServingCellRx0EcIoHist:v18];
                  goto LABEL_169;
                case 3987332:
                  uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
                  [a1 addKCellularCdmaEvdoServingCellRx1EcIoHist:v18];
                  goto LABEL_169;
                case 3987333:
                  uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
                  [a1 addKCellularCdmaEvdoTxPowerHist:v18];
                  goto LABEL_186;
                case 3987334:
                  uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist2);
                  [a1 addKCellularCdmaEvdoProtocolStackStateHist:v18];
                  goto LABEL_174;
                case 3987336:
                  uint64_t v18 = objc_alloc_init(KCellularCdmaEvdoRrState);
                  [a1 addKCellularCdmaEvdoRrState:v18];
                  if (!PBReaderPlaceMark()
                    || (KCellularCdmaEvdoRrStateReadFrom((uint64_t)v18, a2) & 1) == 0)
                  {
                    goto LABEL_200;
                  }
                  goto LABEL_188;
                default:
                  goto LABEL_197;
              }
          }
        }
        switch((int)v17)
        {
          case 3986179:
            uint64_t v18 = objc_alloc_init(KCellularLteFwDuplexMode);
            [a1 addKCellularLteFwDuplexMode:v18];
            if (!PBReaderPlaceMark() || (KCellularLteFwDuplexModeReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3986180:
            uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
            [a1 addKCellularLteServingCellRsrpHist:v18];
            goto LABEL_169;
          case 3986181:
            uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
            [a1 addKCellularLteServingCellSinrHist:v18];
            goto LABEL_169;
          case 3986182:
            uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
            [a1 addKCellularLteSleepStateHist:v18];
LABEL_169:
            if (!PBReaderPlaceMark() || (KCellularRrcModeHistReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3986183:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularLteTxPowerHist:v18];
            goto LABEL_186;
          case 3986184:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularLteDlSccStateHist:v18];
            goto LABEL_186;
          case 3986185:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularLteUlSccStateHist:v18];
            goto LABEL_186;
          case 3986186:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularLteAdvancedRxStateHist:v18];
            goto LABEL_186;
          case 3986187:
            uint64_t v18 = objc_alloc_init(KCellularLteComponentCarrierInfo);
            [a1 addKCellularLteComponentCarrierInfo:v18];
            if (!PBReaderPlaceMark()
              || (KCellularLteComponentCarrierInfoReadFrom((char *)v18, a2) & 1) == 0)
            {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3986188:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularLteRxTxStateHist:v18];
            goto LABEL_186;
          case 3986189:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularLteTotalDlTbsHist:v18];
LABEL_186:
            if PBReaderPlaceMark() && (KCellularProtocolStackHistReadFrom((uint64_t)v18, a2)) {
              goto LABEL_188;
            }
            goto LABEL_200;
          case 3986190:
          case 3986191:
          case 3986192:
          case 3986193:
          case 3986194:
          case 3986195:
          case 3986198:
          case 3986199:
            goto LABEL_197;
          case 3986196:
            uint64_t v18 = objc_alloc_init(KCellularLteDataInactivityBeforeIdle);
            [a1 addKCellularLteDataInactivityBeforeIdle:v18];
            if (!PBReaderPlaceMark()
              || (KCellularLteDataInactivityBeforeIdleReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3986197:
            uint64_t v18 = objc_alloc_init(KCellularLteIdleToConnectedUserData);
            [a1 addKCellularLteIdleToConnectedUserData:v18];
            if (!PBReaderPlaceMark()
              || (KCellularLteIdleToConnectedUserDataReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3986200:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHistArray);
            [a1 addKCellularLteDlSccStateHistV3:v18];
            goto LABEL_154;
          case 3986201:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHistArray);
            [a1 addKCellularLteRxDiversityHist:v18];
LABEL_154:
            if (!PBReaderPlaceMark()
              || (KCellularProtocolStackHistArrayReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3986202:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist2);
            [a1 addKCellularLtePdcchStateHist:v18];
LABEL_174:
            if (!PBReaderPlaceMark() || (KCellularProtocolStackHist2ReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_200;
            }
            goto LABEL_188;
          default:
            if (v17 != 3985948) {
              goto LABEL_197;
            }
            uint64_t v18 = objc_alloc_init(KCellularTdsL1State);
            [a1 addKCellularTdsL1State:v18];
            if (!PBReaderPlaceMark() || (KCellularTdsL1StateReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_200;
            }
            goto LABEL_188;
        }
      }
      if ((int)v17 > 3985669)
      {
        switch((int)v17)
        {
          case 3985670:
            uint64_t v18 = objc_alloc_init(KCellularWcdmaCpcStat);
            [a1 addKCellularWcdmaCpcStat:v18];
            if (!PBReaderPlaceMark() || (KCellularWcdmaCpcStatReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3985671:
            uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
            [a1 addKCellularWcdmaRxDiversityHist:v18];
            goto LABEL_169;
          case 3985672:
            uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
            [a1 addKCellularWcdmaServingCellRx0RssiHist:v18];
            goto LABEL_169;
          case 3985673:
            uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
            [a1 addKCellularWcdmaServingCellRx1RssiHist:v18];
            goto LABEL_169;
          case 3985674:
            uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
            [a1 addKCellularWcdmaServingCellRx0EcNoHist:v18];
            goto LABEL_169;
          case 3985675:
            uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
            [a1 addKCellularWcdmaServingCellRx1EcNoHist:v18];
            goto LABEL_169;
          case 3985676:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularWcdmaTxPowerHist:v18];
            goto LABEL_186;
          case 3985677:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularWcdmaReceiverStatusOnC0Hist:v18];
            goto LABEL_186;
          case 3985678:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularWcdmaReceiverStatusOnC1Hist:v18];
            goto LABEL_186;
          case 3985679:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularWcdmaCarrierStatusHist:v18];
            goto LABEL_186;
          case 3985680:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularWcdmaRabModeHist:v18];
            goto LABEL_186;
          case 3985681:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularWcdmaRabTypeHist:v18];
            goto LABEL_186;
          case 3985682:
            uint64_t v18 = objc_alloc_init(KCellularWcdmaRrcConnectionState);
            [a1 addKCellularWcdmaRrcConnectionState:v18];
            if (!PBReaderPlaceMark()
              || (KCellularWcdmaRrcConnectionStateReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3985683:
            uint64_t v18 = objc_alloc_init(KCellularWcdmaRrcConfiguration);
            [a1 addKCellularWcdmaRrcConfiguration:v18];
            if (!PBReaderPlaceMark()
              || (KCellularWcdmaRrcConfigurationReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3985684:
            uint64_t v18 = objc_alloc_init(KCellularWcdmaRabStatus);
            [a1 addKCellularWcdmaRabStatus:v18];
            if (!PBReaderPlaceMark() || (KCellularWcdmaRabStatusReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3985685:
            uint64_t v18 = objc_alloc_init(KCellularWcdmaL1State);
            [a1 addKCellularWcdmaL1State:v18];
            if (!PBReaderPlaceMark() || (KCellularWcdmaL1StateReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3985686:
            uint64_t v18 = objc_alloc_init(KCellularWcdmaDataInactivityBeforeIdle);
            [a1 addKCellularWcdmaDataInactivityBeforeIdle:v18];
            if (!PBReaderPlaceMark()
              || (KCellularWcdmaDataInactivityBeforeIdleReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3985687:
            uint64_t v18 = objc_alloc_init(KCellularWcdmaIdleToConnectedUserData);
            [a1 addKCellularWcdmaIdleToConnectedUserData:v18];
            if (!PBReaderPlaceMark()
              || (KCellularWcdmaIdleToConnectedUserDataReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_200;
            }
            goto LABEL_188;
          case 3985688:
          case 3985689:
            goto LABEL_197;
          case 3985690:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularWcdmaVadHist:v18];
            goto LABEL_186;
          default:
            switch((int)v17)
            {
              case 3985926:
                uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
                [a1 addKCellularTdsRxDiversityHist:v18];
                goto LABEL_169;
              case 3985927:
                uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
                [a1 addKCellularTdsServingCellRx0RssiHist:v18];
                goto LABEL_169;
              case 3985928:
                uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
                [a1 addKCellularTdsServingCellRx1RssiHist:v18];
                goto LABEL_169;
              case 3985929:
                uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
                [a1 addKCellularTdsServingCellRx0RscpHist:v18];
                goto LABEL_169;
              case 3985930:
                uint64_t v18 = objc_alloc_init(KCellularRrcModeHist);
                [a1 addKCellularTdsServingCellRx1RscpHist:v18];
                goto LABEL_169;
              case 3985931:
                uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
                [a1 addKCellularTdsTxPowerHist:v18];
                goto LABEL_186;
              case 3985941:
                uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
                [a1 addKCellularTdsRabModeHist:v18];
                goto LABEL_186;
              case 3985942:
                uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
                [a1 addKCellularTdsRabTypeHist:v18];
                goto LABEL_186;
              default:
                goto LABEL_197;
            }
        }
      }
      if ((int)v17 <= 3952137) {
        break;
      }
      if ((int)v17 > 3973383)
      {
        switch((int)v17)
        {
          case 3985412:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularGsmServingCellRssiHist:v18];
            goto LABEL_186;
          case 3985413:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularGsmServingCellSnrHist:v18];
            goto LABEL_186;
          case 3985414:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularGsmTxPowerHist:v18];
            goto LABEL_186;
          case 3985415:
            uint64_t v18 = objc_alloc_init(KCellularProtocolStackHist);
            [a1 addKCellularGsmConnectedModeHist:v18];
            goto LABEL_186;
          case 3985416:
            uint64_t v18 = objc_alloc_init(KCellularGsmL1State);
            [a1 addKCellularGsmL1State:v18];
            if (!PBReaderPlaceMark() || (KCellularGsmL1StateReadFrom((uint64_t)v18, a2) & 1) == 0) {
              goto LABEL_200;
            }
            goto LABEL_188;
          default:
            if (v17 == 3973384)
            {
              uint64_t v18 = objc_alloc_init(KCellularLqmStateChange);
              [a1 addKCellularLqmStateChange:v18];
              if (!PBReaderPlaceMark() || (KCellularLqmStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_200;
              }
            }
            else
            {
              if (v17 != 3973391) {
                goto LABEL_197;
              }
              uint64_t v18 = objc_alloc_init(KCellularServingCellLost);
              [a1 addKCellularServiceLost:v18];
              if (!PBReaderPlaceMark() || (KCellularServingCellLostReadFrom((uint64_t)v18, a2) & 1) == 0) {
                goto LABEL_200;
              }
            }
            break;
        }
        goto LABEL_188;
      }
      if ((int)v17 > 3952164)
      {
        if (v17 == 3952165)
        {
          uint64_t v18 = objc_alloc_init(KCellularLteRadioLinkFailure);
          [a1 addKCellularLteRadioLinkFailure:v18];
          if (!PBReaderPlaceMark() || (KCellularLteRadioLinkFailureReadFrom((uint64_t)v18, a2) & 1) == 0)
          {
LABEL_200:

            return 0;
          }
          goto LABEL_188;
        }
        if (v17 == 3952496)
        {
          uint64_t v18 = objc_alloc_init(KCellularLtePdcchStateStats);
          [a1 addKCellularLtePdcchStateStats:v18];
          if (!PBReaderPlaceMark() || (KCellularLtePdcchStateStatsReadFrom((uint64_t)v18, a2) & 1) == 0) {
            goto LABEL_200;
          }
          goto LABEL_188;
        }
      }
      else
      {
        if (v17 == 3952138)
        {
          uint64_t v18 = objc_alloc_init(KCellularLtePagingCycle);
          [a1 addKCellularLtePagingCycle:v18];
          if (!PBReaderPlaceMark() || (KCellularLtePagingCycleReadFrom((uint64_t)v18, a2) & 1) == 0) {
            goto LABEL_200;
          }
          goto LABEL_188;
        }
        if (v17 == 3952152)
        {
          uint64_t v18 = objc_alloc_init(KCellularLteCdrxConfig);
          [a1 addKCellularLteCdrxConfig:v18];
          if (!PBReaderPlaceMark() || (KCellularLteCdrxConfigReadFrom((uint64_t)v18, a2) & 1) == 0) {
            goto LABEL_200;
          }
          goto LABEL_188;
        }
      }
LABEL_197:
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_189:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    switch((int)v17)
    {
      case 3932163:
        uint64_t v18 = objc_alloc_init(KCellularPerClientProfileTriggerCount);
        [a1 addKCellularPerClientProfileTriggerCount:v18];
        if (!PBReaderPlaceMark()
          || (KCellularPerClientProfileTriggerCountReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
          goto LABEL_200;
        }
        break;
      case 3932164:
      case 3932165:
      case 3932166:
      case 3932167:
      case 3932168:
      case 3932169:
      case 3932170:
      case 3932171:
      case 3932172:
      case 3932173:
      case 3932174:
      case 3932175:
      case 3932179:
        goto LABEL_197;
      case 3932176:
        uint64_t v18 = objc_alloc_init(KCellularProtocolStackCpuStats);
        [a1 addKCellularProtocolStackCpuStats:v18];
        if (!PBReaderPlaceMark() || (KCellularProtocolStackCpuStatsReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_200;
        }
        break;
      case 3932177:
        uint64_t v18 = objc_alloc_init(KCellularPeripheralStats);
        [a1 addKCellularPeripheralStats:v18];
        if (!PBReaderPlaceMark() || (KCellularPeripheralStatsReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_200;
        }
        break;
      case 3932178:
        uint64_t v18 = objc_alloc_init(KCellularPmicHwStats);
        [a1 addKCellularDvfsStats:v18];
        goto LABEL_131;
      case 3932180:
        uint64_t v18 = objc_alloc_init(KCellularPmicHwStats);
        [a1 addKCellularLteWcdmaGsmHwStats:v18];
        goto LABEL_131;
      case 3932181:
        uint64_t v18 = objc_alloc_init(KCellularPmicHwStats);
        [a1 addKCellularLteTdsGsmHwStats:v18];
        goto LABEL_131;
      case 3932182:
        uint64_t v18 = objc_alloc_init(KCellularPmuAverageCurrent);
        [a1 addKCellularPmuAverageCurrent:v18];
        if (!PBReaderPlaceMark() || (KCellularPmuAverageCurrentReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_200;
        }
        break;
      case 3932183:
        uint64_t v18 = objc_alloc_init(KCellularFwCoreStats);
        [a1 addKCellularFwCoreStats:v18];
        if (!PBReaderPlaceMark() || (KCellularFwCoreStatsReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_200;
        }
        break;
      case 3932184:
        uint64_t v18 = objc_alloc_init(KCellularPmicHwStats);
        [a1 addKCellularLteWcdmaTdsHwStats:v18];
        goto LABEL_131;
      case 3932185:
        uint64_t v18 = objc_alloc_init(KCellularPmicHwStats);
        [a1 addKCellularPmicHwStats:v18];
LABEL_131:
        if (!PBReaderPlaceMark() || (KCellularPmicHwStatsReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_200;
        }
        break;
      default:
        if (v17 == 3945603)
        {
          uint64_t v18 = objc_alloc_init(KCellularTdsRrcState);
          [a1 addKCellularTdsRrcState:v18];
          if (!PBReaderPlaceMark() || (KCellularTdsRrcStateReadFrom((uint64_t)v18, a2) & 1) == 0) {
            goto LABEL_200;
          }
        }
        else
        {
          if (v17 != 3952132) {
            goto LABEL_197;
          }
          uint64_t v18 = objc_alloc_init(KCellularLteRrcState);
          [a1 addKCellularLteRrcState:v18];
          if (!PBReaderPlaceMark() || (KCellularLteRrcStateReadFrom((uint64_t)v18, a2) & 1) == 0) {
            goto LABEL_200;
          }
        }
        break;
    }
LABEL_188:
    PBReaderRecallMark();

    goto LABEL_189;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL PStatReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___PStat__ident;
              goto LABEL_61;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              unint64_t v24 = &OBJC_IVAR___PStat__ident;
              goto LABEL_64;
            }
          }
          unint64_t v24 = &OBJC_IVAR___PStat__ident;
          goto LABEL_62;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___PStat__activeDurMs;
              goto LABEL_61;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___PStat__activeDurMs;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___PStat__activeDurMs;
          goto LABEL_62;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___PStat__inactiveDurMs;
              goto LABEL_61;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___PStat__inactiveDurMs;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___PStat__inactiveDurMs;
          goto LABEL_62;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 0x10u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___PStat__toActiveCount;
              goto LABEL_61;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___PStat__toActiveCount;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___PStat__toActiveCount;
          goto LABEL_62;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          unint64_t v24 = &OBJC_IVAR___PStat__sleepBlockCount;
          goto LABEL_62;
        }
        v40 += 7;
        BOOL v23 = v41++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          unint64_t v24 = &OBJC_IVAR___PStat__sleepBlockCount;
          goto LABEL_64;
        }
      }
      unint64_t v24 = &OBJC_IVAR___PStat__sleepBlockCount;
LABEL_61:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_64:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularTdsRrcStateReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 32) |= 1u;
              while (1)
              {
                uint64_t v20 = *v3;
                unint64_t v21 = *(void *)(a2 + v20);
                if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0) {
                  goto LABEL_58;
                }
                v17 += 7;
                BOOL v14 = v18++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_60;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_58:
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v19 = 0;
              }
LABEL_60:
              *(void *)(a1 + 8) = v19;
              goto LABEL_78;
            case 2u:
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 8u;
              while (2)
              {
                uint64_t v31 = *v3;
                unint64_t v32 = *(void *)(a2 + v31);
                if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
                  *(void *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    BOOL v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_68;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_68:
              uint64_t v45 = 24;
              goto LABEL_77;
            case 3u:
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 2u;
              while (2)
              {
                uint64_t v36 = *v3;
                unint64_t v37 = *(void *)(a2 + v36);
                if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
                  *(void *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    BOOL v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_72;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_72:
              uint64_t v45 = 16;
              goto LABEL_77;
            case 4u:
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 4u;
              while (2)
              {
                uint64_t v41 = *v3;
                unint64_t v42 = *(void *)(a2 + v41);
                if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
                  *(void *)(a2 + v41) = v42 + 1;
                  v25 |= (unint64_t)(v43 & 0x7F) << v39;
                  if (v43 < 0)
                  {
                    v39 += 7;
                    BOOL v14 = v40++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_76;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_76:
              uint64_t v45 = 20;
              goto LABEL_77;
            default:
              if ((v10 >> 3) == 15)
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                *(unsigned char *)(a1 + 32) |= 0x10u;
                while (1)
                {
                  uint64_t v26 = *v3;
                  unint64_t v27 = *(void *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
                  *(void *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0) {
                    goto LABEL_62;
                  }
                  v23 += 7;
                  BOOL v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_64;
                  }
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
                if (*(unsigned char *)(a2 + *v5)) {
                  LODWORD(v25) = 0;
                }
LABEL_64:
                uint64_t v45 = 28;
LABEL_77:
                *(_DWORD *)(a1 + v45) = v25;
              }
              else
              {
                uint64_t result = PBReaderSkipValueWithTag();
                if (!result) {
                  return result;
                }
              }
LABEL_78:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D27BF244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void NotificationCallback(uint64_t a1, void *a2)
{
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x3032000000;
  v4[3] = __Block_byref_object_copy_;
  v4[4] = __Block_byref_object_dispose_;
  id v5 = a2;
  int8x8_t v2 = dispatch_get_global_queue(-2, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __NotificationCallback_block_invoke;
  block[3] = &unk_1E692ACB0;
  void block[4] = v4;
  dispatch_async(v2, block);

  _Block_object_dispose(v4, 8);
}

id __NotificationCallback_block_invoke(uint64_t a1)
{
  return (id)[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) batteryBreakdownWithPayload:&unk_1F29E8C80];
}

uint64_t AWDMETRICSCellularDynamicRatSelectionReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = 0x1EA693000uLL;
    unint64_t v8 = 0x1EA693000uLL;
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = 0x1EA693000uLL;
    unint64_t v11 = 0x1EA693000uLL;
    unint64_t v12 = 0x1EA693000uLL;
    unint64_t v13 = 0x1EA693000uLL;
    unint64_t v14 = 0x1EA693000uLL;
    unint64_t v15 = 0x1EA693000uLL;
    unint64_t v16 = 0x1EA693000uLL;
    unint64_t v17 = 0x1EA693000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v27 = v20 >> 3;
      if ((int)(v20 >> 3) <= 16)
      {
        switch(v27)
        {
          case 1:
            char v69 = 0;
            unsigned int v70 = 0;
            uint64_t v71 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2408)) |= 1u;
            while (1)
            {
              uint64_t v72 = *v3;
              unint64_t v73 = *(void *)(a2 + v72);
              if (v73 == -1 || v73 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v74 = *(unsigned char *)(*(void *)(a2 + *v9) + v73);
              *(void *)(a2 + v72) = v73 + 1;
              v71 |= (unint64_t)(v74 & 0x7F) << v69;
              if ((v74 & 0x80) == 0) {
                goto LABEL_128;
              }
              v69 += 7;
              BOOL v24 = v70++ >= 9;
              if (v24)
              {
                uint64_t v71 = 0;
                goto LABEL_130;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_128:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v71 = 0;
            }
LABEL_130:
            *(void *)(a1 + *(int *)(v8 + 2412)) = v71;
            continue;
          case 4:
            char v75 = 0;
            unsigned int v76 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2408)) |= 0x40u;
            while (1)
            {
              uint64_t v77 = *v3;
              unint64_t v78 = *(void *)(a2 + v77);
              if (v78 == -1 || v78 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v79 = *(unsigned char *)(*(void *)(a2 + *v9) + v78);
              *(void *)(a2 + v77) = v78 + 1;
              v30 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0) {
                goto LABEL_132;
              }
              v75 += 7;
              BOOL v24 = v76++ >= 9;
              if (v24)
              {
                LODWORD(v30) = 0;
                goto LABEL_134;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_132:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_134:
            uint64_t v86 = *(int *)(v10 + 2416);
            break;
          case 5:
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2408)) |= 8u;
            while (1)
            {
              uint64_t v36 = *v3;
              unint64_t v37 = *(void *)(a2 + v36);
              if (v37 == -1 || v37 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v38 = *(unsigned char *)(*(void *)(a2 + *v9) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v30 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0) {
                goto LABEL_100;
              }
              v34 += 7;
              BOOL v24 = v35++ >= 9;
              if (v24)
              {
                LODWORD(v30) = 0;
                goto LABEL_102;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_100:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_102:
            uint64_t v86 = *(int *)(v11 + 2420);
            break;
          default:
LABEL_93:
            unint64_t v80 = v8;
            unint64_t v81 = v10;
            unint64_t v82 = v11;
            unint64_t v83 = v7;
            unint64_t v84 = v12;
            uint64_t result = PBReaderSkipValueWithTag();
            id v5 = (int *)MEMORY[0x1E4F940C8];
            unint64_t v12 = v84;
            unint64_t v13 = 0x1EA693000;
            unint64_t v7 = v83;
            unint64_t v14 = 0x1EA693000;
            unint64_t v11 = v82;
            unint64_t v15 = 0x1EA693000;
            unint64_t v10 = v81;
            unint64_t v17 = 0x1EA693000;
            unint64_t v8 = v80;
            unint64_t v16 = 0x1EA693000;
            if (!result) {
              return result;
            }
            continue;
        }
      }
      else
      {
        switch((int)v27)
        {
          case 17:
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2408)) |= 0x20u;
            while (2)
            {
              uint64_t v31 = *v3;
              unint64_t v32 = *(void *)(a2 + v31);
              if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v33 = *(unsigned char *)(*(void *)(a2 + *v9) + v32);
                *(void *)(a2 + v31) = v32 + 1;
                v30 |= (unint64_t)(v33 & 0x7F) << v28;
                if (v33 < 0)
                {
                  v28 += 7;
                  BOOL v24 = v29++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_98;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_98:
            uint64_t v86 = *(int *)(v12 + 2424);
            goto LABEL_135;
          case 18:
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2408)) |= 0x10u;
            while (2)
            {
              uint64_t v41 = *v3;
              unint64_t v42 = *(void *)(a2 + v41);
              if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v43 = *(unsigned char *)(*(void *)(a2 + *v9) + v42);
                *(void *)(a2 + v41) = v42 + 1;
                v30 |= (unint64_t)(v43 & 0x7F) << v39;
                if (v43 < 0)
                {
                  v39 += 7;
                  BOOL v24 = v40++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_106;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_106:
            uint64_t v86 = *(int *)(v13 + 2428);
            goto LABEL_135;
          case 19:
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2408)) |= 4u;
            while (2)
            {
              uint64_t v46 = *v3;
              unint64_t v47 = *(void *)(a2 + v46);
              if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v48 = *(unsigned char *)(*(void *)(a2 + *v9) + v47);
                *(void *)(a2 + v46) = v47 + 1;
                v30 |= (unint64_t)(v48 & 0x7F) << v44;
                if (v48 < 0)
                {
                  v44 += 7;
                  BOOL v24 = v45++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_110;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_110:
            uint64_t v86 = *(int *)(v14 + 2432);
            goto LABEL_135;
          case 20:
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2408)) |= 2u;
            while (2)
            {
              uint64_t v51 = *v3;
              unint64_t v52 = *(void *)(a2 + v51);
              if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v53 = *(unsigned char *)(*(void *)(a2 + *v9) + v52);
                *(void *)(a2 + v51) = v52 + 1;
                v30 |= (unint64_t)(v53 & 0x7F) << v49;
                if (v53 < 0)
                {
                  v49 += 7;
                  BOOL v24 = v50++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_114;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_114:
            uint64_t v86 = *(int *)(v15 + 2436);
            goto LABEL_135;
          case 23:
            char v54 = 0;
            unsigned int v55 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2408)) |= 0x200u;
            while (2)
            {
              uint64_t v56 = *v3;
              unint64_t v57 = *(void *)(a2 + v56);
              if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v58 = *(unsigned char *)(*(void *)(a2 + *v9) + v57);
                *(void *)(a2 + v56) = v57 + 1;
                v30 |= (unint64_t)(v58 & 0x7F) << v54;
                if (v58 < 0)
                {
                  v54 += 7;
                  BOOL v24 = v55++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_118;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_118:
            uint64_t v86 = *(int *)(v16 + 2440);
            goto LABEL_135;
          case 24:
            char v59 = 0;
            unsigned int v60 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2408)) |= 0x100u;
            while (2)
            {
              uint64_t v61 = *v3;
              unint64_t v62 = *(void *)(a2 + v61);
              if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v63 = *(unsigned char *)(*(void *)(a2 + *v9) + v62);
                *(void *)(a2 + v61) = v62 + 1;
                v30 |= (unint64_t)(v63 & 0x7F) << v59;
                if (v63 < 0)
                {
                  v59 += 7;
                  BOOL v24 = v60++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_122;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_122:
            uint64_t v86 = *(int *)(v17 + 2444);
            goto LABEL_135;
          case 31:
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2408)) |= 0x80u;
            break;
          default:
            goto LABEL_93;
        }
        while (1)
        {
          uint64_t v66 = *v3;
          unint64_t v67 = *(void *)(a2 + v66);
          if (v67 == -1 || v67 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v68 = *(unsigned char *)(*(void *)(a2 + *v9) + v67);
          *(void *)(a2 + v66) = v67 + 1;
          v30 |= (unint64_t)(v68 & 0x7F) << v64;
          if ((v68 & 0x80) == 0) {
            goto LABEL_124;
          }
          v64 += 7;
          BOOL v24 = v65++ >= 9;
          if (v24)
          {
            LODWORD(v30) = 0;
            goto LABEL_126;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_124:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v30) = 0;
        }
LABEL_126:
        uint64_t v86 = 40;
      }
LABEL_135:
      *(_DWORD *)(a1 + v86) = v30;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __PLLogCamera_block_invoke()
{
  _MergedGlobals_1_8 = (uint64_t)os_log_create("com.apple.powerlog", "camera");
  return MEMORY[0x1F41817F8]();
}

uint64_t AWDMETRICSCellularNrRadioStatsReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 13)
      {
        if (v17 == 14)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (1)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v21 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0) {
              goto LABEL_58;
            }
            v31 += 7;
            BOOL v14 = v32++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_60;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_58:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_60:
          uint64_t v37 = 28;
        }
        else
        {
          if (v17 != 47)
          {
LABEL_47:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_50;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_52:
          uint64_t v37 = 24;
        }
        *(_DWORD *)(a1 + v37) = v21;
      }
      else if (v17 == 1)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_54;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            uint64_t v27 = 0;
            goto LABEL_56;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_56:
        *(void *)(a1 + 8) = v27;
      }
      else
      {
        if (v17 != 3) {
          goto LABEL_47;
        }
        char v18 = objc_alloc_init(AWDMETRICSBwpStats);
        [(id)a1 addBwpInfo:v18];
        if (!PBReaderPlaceMark() || !AWDMETRICSBwpStatsReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL CStatReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___CStat__ident;
              goto LABEL_61;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              char v24 = &OBJC_IVAR___CStat__ident;
              goto LABEL_64;
            }
          }
          char v24 = &OBJC_IVAR___CStat__ident;
          goto LABEL_62;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___CStat__sleepDurMs;
              goto LABEL_61;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___CStat__sleepDurMs;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___CStat__sleepDurMs;
          goto LABEL_62;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___CStat__idleDurMs;
              goto LABEL_61;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___CStat__idleDurMs;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___CStat__idleDurMs;
          goto LABEL_62;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___CStat__activeDurMs;
              goto LABEL_61;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___CStat__activeDurMs;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___CStat__activeDurMs;
          goto LABEL_62;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 0x10u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          char v24 = &OBJC_IVAR___CStat__sleepEntryCount;
          goto LABEL_62;
        }
        v40 += 7;
        BOOL v23 = v41++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          char v24 = &OBJC_IVAR___CStat__sleepEntryCount;
          goto LABEL_64;
        }
      }
      char v24 = &OBJC_IVAR___CStat__sleepEntryCount;
LABEL_61:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_64:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularWcdmaRrcConnectionStateReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 32) |= 1u;
              while (1)
              {
                uint64_t v20 = *v3;
                unint64_t v21 = *(void *)(a2 + v20);
                if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0) {
                  goto LABEL_58;
                }
                v17 += 7;
                BOOL v14 = v18++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_60;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_58:
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v19 = 0;
              }
LABEL_60:
              *(void *)(a1 + 8) = v19;
              goto LABEL_78;
            case 2u:
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 8u;
              while (2)
              {
                uint64_t v31 = *v3;
                unint64_t v32 = *(void *)(a2 + v31);
                if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
                  *(void *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    BOOL v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_68;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_68:
              uint64_t v45 = 24;
              goto LABEL_77;
            case 3u:
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 2u;
              while (2)
              {
                uint64_t v36 = *v3;
                unint64_t v37 = *(void *)(a2 + v36);
                if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
                  *(void *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    BOOL v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_72;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_72:
              uint64_t v45 = 16;
              goto LABEL_77;
            case 4u:
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 4u;
              while (2)
              {
                uint64_t v41 = *v3;
                unint64_t v42 = *(void *)(a2 + v41);
                if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
                  *(void *)(a2 + v41) = v42 + 1;
                  v25 |= (unint64_t)(v43 & 0x7F) << v39;
                  if (v43 < 0)
                  {
                    v39 += 7;
                    BOOL v14 = v40++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_76;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_76:
              uint64_t v45 = 20;
              goto LABEL_77;
            default:
              if ((v10 >> 3) == 15)
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                *(unsigned char *)(a1 + 32) |= 0x10u;
                while (1)
                {
                  uint64_t v26 = *v3;
                  unint64_t v27 = *(void *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
                  *(void *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0) {
                    goto LABEL_62;
                  }
                  v23 += 7;
                  BOOL v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_64;
                  }
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
                if (*(unsigned char *)(a2 + *v5)) {
                  LODWORD(v25) = 0;
                }
LABEL_64:
                uint64_t v45 = 28;
LABEL_77:
                *(_DWORD *)(a1 + v45) = v25;
              }
              else
              {
                uint64_t result = PBReaderSkipValueWithTag();
                if (!result) {
                  return result;
                }
              }
LABEL_78:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackHist2ReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_53;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_55:
        *(void *)(a1 + 8) = v19;
        goto LABEL_69;
      case 2u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 36) |= 4u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_59:
        uint64_t v41 = 28;
        goto LABEL_68;
      case 3u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 36) |= 8u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v25 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_63:
        uint64_t v41 = 32;
        goto LABEL_68;
      case 6u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (2)
        {
          uint64_t v37 = *v3;
          unint64_t v38 = *(void *)(a2 + v37);
          if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v25 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v14 = v36++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_67:
        uint64_t v41 = 24;
LABEL_68:
        *(_DWORD *)(a1 + v41) = v25;
        goto LABEL_69;
      case 7u:
        unsigned int v40 = objc_alloc_init(HistogramBin);
        [(id)a1 addBin:v40];
        if (PBReaderPlaceMark() && HistogramBinReadFrom((uint64_t)v40, a2))
        {
          PBReaderRecallMark();

LABEL_69:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_69;
    }
  }
}

id PLLogScreenState()
{
  if (qword_1EBD57A70 != -1) {
    dispatch_once(&qword_1EBD57A70, &__block_literal_global_10);
  }
  unsigned int v0 = (void *)qword_1EBD57A68;
  return v0;
}

uint64_t __PLLogScreenState_block_invoke()
{
  qword_1EBD57A68 = (uint64_t)os_log_create("com.apple.powerlog", "screenState");
  return MEMORY[0x1F41817F8]();
}

void sub_1D27E2D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D27E3F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularPeripheralStatsReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        unsigned int v24 = objc_alloc_init(PStat);
        [(id)a1 addPeripherals:v24];
        if (!PBReaderPlaceMark() || !PStatReadFrom((uint64_t)v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v27;
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __PLLogNetwork_block_invoke()
{
  qword_1EBD57AB8 = (uint64_t)os_log_create("com.apple.powerlog", "network");
  return MEMORY[0x1F41817F8]();
}

void sub_1D27EDB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t KCellularWcdmaRrcConfigurationReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 28) |= 1u;
              while (1)
              {
                uint64_t v20 = *v3;
                unint64_t v21 = *(void *)(a2 + v20);
                if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0) {
                  goto LABEL_58;
                }
                v17 += 7;
                BOOL v14 = v18++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_60;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_58:
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v19 = 0;
              }
LABEL_60:
              *(void *)(a1 + 8) = v19;
              goto LABEL_79;
            case 2u:
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 28) |= 2u;
              while (2)
              {
                uint64_t v31 = *v3;
                unint64_t v32 = *(void *)(a2 + v31);
                if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
                  *(void *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    BOOL v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_68;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_68:
              uint64_t v47 = 16;
              goto LABEL_69;
            case 3u:
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v36 = 0;
              *(unsigned char *)(a1 + 28) |= 0x10u;
              while (2)
              {
                uint64_t v37 = *v3;
                unint64_t v38 = *(void *)(a2 + v37);
                if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
                  *(void *)(a2 + v37) = v38 + 1;
                  v36 |= (unint64_t)(v39 & 0x7F) << v34;
                  if (v39 < 0)
                  {
                    v34 += 7;
                    BOOL v14 = v35++ >= 9;
                    if (v14)
                    {
                      uint64_t v36 = 0;
                      goto LABEL_73;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v36 = 0;
              }
LABEL_73:
              BOOL v48 = v36 != 0;
              uint64_t v49 = 25;
              goto LABEL_78;
            case 4u:
              char v40 = 0;
              unsigned int v41 = 0;
              uint64_t v42 = 0;
              *(unsigned char *)(a1 + 28) |= 8u;
              while (2)
              {
                uint64_t v43 = *v3;
                unint64_t v44 = *(void *)(a2 + v43);
                if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
                  *(void *)(a2 + v43) = v44 + 1;
                  v42 |= (unint64_t)(v45 & 0x7F) << v40;
                  if (v45 < 0)
                  {
                    v40 += 7;
                    BOOL v14 = v41++ >= 9;
                    if (v14)
                    {
                      uint64_t v42 = 0;
                      goto LABEL_77;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v42 = 0;
              }
LABEL_77:
              BOOL v48 = v42 != 0;
              uint64_t v49 = 24;
LABEL_78:
              *(unsigned char *)(a1 + v49) = v48;
              goto LABEL_79;
            default:
              if ((v10 >> 3) == 15)
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                *(unsigned char *)(a1 + 28) |= 4u;
                while (1)
                {
                  uint64_t v26 = *v3;
                  unint64_t v27 = *(void *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
                  *(void *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0) {
                    goto LABEL_62;
                  }
                  v23 += 7;
                  BOOL v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_64;
                  }
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
                if (*(unsigned char *)(a2 + *v5)) {
                  LODWORD(v25) = 0;
                }
LABEL_64:
                uint64_t v47 = 20;
LABEL_69:
                *(_DWORD *)(a1 + v47) = v25;
              }
              else
              {
                uint64_t result = PBReaderSkipValueWithTag();
                if (!result) {
                  return result;
                }
              }
LABEL_79:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __PLLogSMC_block_invoke()
{
  qword_1EBD57B28 = (uint64_t)os_log_create("com.apple.powerlog", "smc");
  return MEMORY[0x1F41817F8]();
}

void sub_1D27F8B38(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1D27F9628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularWcdmaDataInactivityBeforeIdleReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularGsmL1StateReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularFwCoreStatsReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_48;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_50;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_48:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_50:
        *(void *)(a1 + 8) = v19;
        goto LABEL_55;
      case 2u:
        char v23 = objc_alloc_init(GeraStats);
        objc_storeStrong((id *)(a1 + 24), v23);
        if (!PBReaderPlaceMark() || (GeraStatsReadFrom((uint64_t)v23, a2) & 1) == 0) {
          goto LABEL_57;
        }
        goto LABEL_37;
      case 3u:
        char v23 = objc_alloc_init(UtraFddStats);
        objc_storeStrong((id *)(a1 + 40), v23);
        if (!PBReaderPlaceMark() || (UtraFddStatsReadFrom((uint64_t)v23, a2) & 1) == 0) {
          goto LABEL_57;
        }
        goto LABEL_37;
      case 4u:
        char v23 = objc_alloc_init(UtraTddStats);
        objc_storeStrong((id *)(a1 + 48), v23);
        if (!PBReaderPlaceMark() || (UtraTddStatsReadFrom((uint64_t)v23, a2) & 1) == 0) {
          goto LABEL_57;
        }
        goto LABEL_37;
      case 5u:
        char v23 = objc_alloc_init(EutraStats);
        objc_storeStrong((id *)(a1 + 16), v23);
        if PBReaderPlaceMark() && (EutraStatsReadFrom((uint64_t)v23, a2))
        {
LABEL_37:
          PBReaderRecallMark();

LABEL_55:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_57:

        return 0;
      case 0xFu:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 56) |= 2u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_54:
        *(_DWORD *)(a1 + 32) = v27;
        goto LABEL_55;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_55;
    }
  }
}

uint64_t AWDMETRICSCellularPowerLogNRDCEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 16;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PLLogSiri()
{
  if (qword_1EBD57C38 != -1) {
    dispatch_once(&qword_1EBD57C38, &__block_literal_global_13);
  }
  unsigned int v0 = (void *)_MergedGlobals_1_13;
  return v0;
}

uint64_t __PLLogSiri_block_invoke()
{
  _MergedGlobals_1_13 = (uint64_t)os_log_create("com.apple.powerlog", "siri");
  return MEMORY[0x1F41817F8]();
}

uint64_t KCellularServingCellLostReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PLLogMDNS()
{
  if (qword_1EBD57C50 != -1) {
    dispatch_once(&qword_1EBD57C50, &__block_literal_global_14);
  }
  unsigned int v0 = (void *)qword_1EBD57C48;
  return v0;
}

uint64_t __PLLogMDNS_block_invoke()
{
  qword_1EBD57C48 = (uint64_t)os_log_create("com.apple.powerlog", "MDNS");
  return MEMORY[0x1F41817F8]();
}

void sub_1D2809598(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D28098F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D280A044(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id PLLogAssertion()
{
  if (qword_1EBD57D48 != -1) {
    dispatch_once(&qword_1EBD57D48, &__block_literal_global_16);
  }
  unsigned int v0 = (void *)qword_1EBD57D40;
  return v0;
}

uint64_t __PLLogAssertion_block_invoke()
{
  qword_1EBD57D40 = (uint64_t)os_log_create("com.apple.powerlog", "assertion");
  return MEMORY[0x1F41817F8]();
}

void sub_1D280FD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D28102F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D2815698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 240), 8);
  _Block_object_dispose((const void *)(v37 - 208), 8);
  _Block_object_dispose((const void *)(v37 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1D2816520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t UtraTddStatsReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = 0x1EA693000uLL;
    unint64_t v8 = 0x1EA693000uLL;
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = 0x1EA693000uLL;
    unint64_t v11 = 0x1EA693000uLL;
    unint64_t v12 = 0x1EA693000uLL;
    unint64_t v13 = 0x1EA693000uLL;
    unint64_t v14 = 0x1EA693000uLL;
    unint64_t v15 = 0x1EA693000uLL;
    unint64_t v16 = 0x1EA693000uLL;
    unint64_t v17 = 0x1EA693000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x10u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_141;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              LODWORD(v29) = 0;
              goto LABEL_143;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_141:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_143:
          uint64_t v120 = *(int *)(v8 + 2788);
          goto LABEL_204;
        case 2u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 2u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v9) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v29 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_147;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_147:
          uint64_t v120 = *(int *)(v10 + 2792);
          goto LABEL_204;
        case 3u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x20u;
          while (2)
          {
            uint64_t v46 = *v3;
            unint64_t v47 = *(void *)(a2 + v46);
            if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v9) + v47);
              *(void *)(a2 + v46) = v47 + 1;
              v29 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v24 = v45++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_151;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_151:
          uint64_t v120 = *(int *)(v11 + 2796);
          goto LABEL_204;
        case 4u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 8u;
          while (2)
          {
            uint64_t v51 = *v3;
            unint64_t v52 = *(void *)(a2 + v51);
            if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v9) + v52);
              *(void *)(a2 + v51) = v52 + 1;
              v29 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                BOOL v24 = v50++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_155;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_155:
          uint64_t v120 = *(int *)(v12 + 2800);
          goto LABEL_204;
        case 5u:
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 4u;
          while (2)
          {
            uint64_t v56 = *v3;
            unint64_t v57 = *(void *)(a2 + v56);
            if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v58 = *(unsigned char *)(*(void *)(a2 + *v9) + v57);
              *(void *)(a2 + v56) = v57 + 1;
              v29 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                BOOL v24 = v55++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_159;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_159:
          uint64_t v120 = *(int *)(v13 + 2804);
          goto LABEL_204;
        case 6u:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x200u;
          while (2)
          {
            uint64_t v61 = *v3;
            unint64_t v62 = *(void *)(a2 + v61);
            if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v63 = *(unsigned char *)(*(void *)(a2 + *v9) + v62);
              *(void *)(a2 + v61) = v62 + 1;
              v29 |= (unint64_t)(v63 & 0x7F) << v59;
              if (v63 < 0)
              {
                v59 += 7;
                BOOL v24 = v60++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_163;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_163:
          uint64_t v120 = *(int *)(v14 + 2808);
          goto LABEL_204;
        case 7u:
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x400u;
          while (2)
          {
            uint64_t v66 = *v3;
            unint64_t v67 = *(void *)(a2 + v66);
            if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v68 = *(unsigned char *)(*(void *)(a2 + *v9) + v67);
              *(void *)(a2 + v66) = v67 + 1;
              v29 |= (unint64_t)(v68 & 0x7F) << v64;
              if (v68 < 0)
              {
                v64 += 7;
                BOOL v24 = v65++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_167;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_167:
          uint64_t v120 = *(int *)(v15 + 2812);
          goto LABEL_204;
        case 8u:
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x100u;
          while (2)
          {
            uint64_t v71 = *v3;
            unint64_t v72 = *(void *)(a2 + v71);
            if (v72 == -1 || v72 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v73 = *(unsigned char *)(*(void *)(a2 + *v9) + v72);
              *(void *)(a2 + v71) = v72 + 1;
              v29 |= (unint64_t)(v73 & 0x7F) << v69;
              if (v73 < 0)
              {
                v69 += 7;
                BOOL v24 = v70++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_171;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_171:
          uint64_t v120 = *(int *)(v16 + 2816);
          goto LABEL_204;
        case 9u:
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x800u;
          while (2)
          {
            uint64_t v76 = *v3;
            unint64_t v77 = *(void *)(a2 + v76);
            if (v77 == -1 || v77 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v78 = *(unsigned char *)(*(void *)(a2 + *v9) + v77);
              *(void *)(a2 + v76) = v77 + 1;
              v29 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                BOOL v24 = v75++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_175;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_175:
          uint64_t v120 = *(int *)(v17 + 2820);
          goto LABEL_204;
        case 0xAu:
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x1000u;
          while (2)
          {
            uint64_t v81 = *v3;
            unint64_t v82 = *(void *)(a2 + v81);
            if (v82 == -1 || v82 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v83 = *(unsigned char *)(*(void *)(a2 + *v9) + v82);
              *(void *)(a2 + v81) = v82 + 1;
              v29 |= (unint64_t)(v83 & 0x7F) << v79;
              if (v83 < 0)
              {
                v79 += 7;
                BOOL v24 = v80++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_179;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_179:
          uint64_t v120 = 60;
          goto LABEL_204;
        case 0xBu:
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x2000u;
          while (2)
          {
            uint64_t v86 = *v3;
            unint64_t v87 = *(void *)(a2 + v86);
            if (v87 == -1 || v87 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v88 = *(unsigned char *)(*(void *)(a2 + *v9) + v87);
              *(void *)(a2 + v86) = v87 + 1;
              v29 |= (unint64_t)(v88 & 0x7F) << v84;
              if (v88 < 0)
              {
                v84 += 7;
                BOOL v24 = v85++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_183;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_183:
          uint64_t v120 = 64;
          goto LABEL_204;
        case 0xCu:
          char v89 = 0;
          unsigned int v90 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x4000u;
          while (2)
          {
            uint64_t v91 = *v3;
            unint64_t v92 = *(void *)(a2 + v91);
            if (v92 == -1 || v92 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v93 = *(unsigned char *)(*(void *)(a2 + *v9) + v92);
              *(void *)(a2 + v91) = v92 + 1;
              v29 |= (unint64_t)(v93 & 0x7F) << v89;
              if (v93 < 0)
              {
                v89 += 7;
                BOOL v24 = v90++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_187;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_187:
          uint64_t v120 = 68;
          goto LABEL_204;
        case 0xDu:
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x8000u;
          while (2)
          {
            uint64_t v96 = *v3;
            unint64_t v97 = *(void *)(a2 + v96);
            if (v97 == -1 || v97 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v98 = *(unsigned char *)(*(void *)(a2 + *v9) + v97);
              *(void *)(a2 + v96) = v97 + 1;
              v29 |= (unint64_t)(v98 & 0x7F) << v94;
              if (v98 < 0)
              {
                v94 += 7;
                BOOL v24 = v95++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_191;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_191:
          uint64_t v120 = 72;
          goto LABEL_204;
        case 0xEu:
          char v99 = 0;
          unsigned int v100 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x10000u;
          while (2)
          {
            uint64_t v101 = *v3;
            unint64_t v102 = *(void *)(a2 + v101);
            if (v102 == -1 || v102 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v103 = *(unsigned char *)(*(void *)(a2 + *v9) + v102);
              *(void *)(a2 + v101) = v102 + 1;
              v29 |= (unint64_t)(v103 & 0x7F) << v99;
              if (v103 < 0)
              {
                v99 += 7;
                BOOL v24 = v100++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_195;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_195:
          uint64_t v120 = 76;
          goto LABEL_204;
        case 0xFu:
          char v104 = 0;
          unsigned int v105 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x40u;
          while (2)
          {
            uint64_t v106 = *v3;
            unint64_t v107 = *(void *)(a2 + v106);
            if (v107 == -1 || v107 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v108 = *(unsigned char *)(*(void *)(a2 + *v9) + v107);
              *(void *)(a2 + v106) = v107 + 1;
              v29 |= (unint64_t)(v108 & 0x7F) << v104;
              if (v108 < 0)
              {
                v104 += 7;
                BOOL v24 = v105++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_199;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_199:
          uint64_t v120 = 36;
          goto LABEL_204;
        case 0x10u:
          char v109 = 0;
          unsigned int v110 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 0x80u;
          while (2)
          {
            uint64_t v111 = *v3;
            unint64_t v112 = *(void *)(a2 + v111);
            if (v112 == -1 || v112 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v113 = *(unsigned char *)(*(void *)(a2 + *v9) + v112);
              *(void *)(a2 + v111) = v112 + 1;
              v29 |= (unint64_t)(v113 & 0x7F) << v109;
              if (v113 < 0)
              {
                v109 += 7;
                BOOL v24 = v110++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_203;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_203:
          uint64_t v120 = 40;
LABEL_204:
          *(_DWORD *)(a1 + v120) = v29;
          continue;
        case 0x11u:
          char v114 = 0;
          unsigned int v115 = 0;
          uint64_t v116 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2784)) |= 1u;
          break;
        default:
          unint64_t v33 = v8;
          unint64_t v34 = v10;
          unint64_t v35 = v11;
          unint64_t v36 = v7;
          unint64_t v37 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          id v5 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v12 = v37;
          unint64_t v13 = 0x1EA693000;
          unint64_t v7 = v36;
          unint64_t v14 = 0x1EA693000;
          unint64_t v11 = v35;
          unint64_t v15 = 0x1EA693000;
          unint64_t v10 = v34;
          unint64_t v17 = 0x1EA693000;
          unint64_t v8 = v33;
          unint64_t v16 = 0x1EA693000;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v117 = *v3;
        unint64_t v118 = *(void *)(a2 + v117);
        if (v118 == -1 || v118 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v119 = *(unsigned char *)(*(void *)(a2 + *v9) + v118);
        *(void *)(a2 + v117) = v118 + 1;
        v116 |= (unint64_t)(v119 & 0x7F) << v114;
        if ((v119 & 0x80) == 0) {
          goto LABEL_208;
        }
        v114 += 7;
        BOOL v24 = v115++ >= 9;
        if (v24)
        {
          uint64_t v116 = 0;
          goto LABEL_210;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_208:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v116 = 0;
      }
LABEL_210:
      *(void *)(a1 + 8) = v116;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D281EC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id location)
{
  objc_destroyWeak(v36);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id PLLogSoC()
{
  if (qword_1EBD5BDB8 != -1) {
    dispatch_once(&qword_1EBD5BDB8, &__block_literal_global_18);
  }
  unsigned int v0 = (void *)_MergedGlobals_86;
  return v0;
}

uint64_t __PLLogSoC_block_invoke()
{
  _MergedGlobals_86 = (uint64_t)os_log_create("com.apple.powerlog", "soc");
  return MEMORY[0x1F41817F8]();
}

id logPPSFeatureFlagReaderHelper()
{
  if (qword_1EBD5BDC8 != -1) {
    dispatch_once(&qword_1EBD5BDC8, &__block_literal_global_19);
  }
  unsigned int v0 = (void *)_MergedGlobals_87;
  return v0;
}

uint64_t __logPPSFeatureFlagReaderHelper_block_invoke()
{
  _MergedGlobals_87 = (uint64_t)os_log_create("com.apple.powerlog", "PPSFeatureFlagReaderHelper");
  return MEMORY[0x1F41817F8]();
}

void sub_1D2825528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BluetoothSessionEvent(uint64_t a1, int a2, int a3, void *a4)
{
  id v7 = a4;
  unint64_t v8 = [v7 workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __BluetoothSessionEvent_block_invoke;
  block[3] = &unk_1E692BDA8;
  id v11 = v7;
  uint64_t v12 = a1;
  int v13 = a2;
  int v14 = a3;
  id v9 = v7;
  dispatch_async(v8, block);
}

void BluetoothDeviceEvent(uint64_t a1, int a2, int a3, void *a4)
{
  id v7 = a4;
  unint64_t v8 = [v7 workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __BluetoothDeviceEvent_block_invoke;
  block[3] = &unk_1E692BDA8;
  id v11 = v7;
  uint64_t v12 = a1;
  int v13 = a2;
  int v14 = a3;
  id v9 = v7;
  dispatch_async(v8, block);
}

void sub_1D282D408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D2831174(_Unwind_Exception *a1)
{
}

void __BluetoothSessionEvent_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1D942A350]();
  [*(id *)(a1 + 32) bluetoothSessionEvent:*(unsigned int *)(a1 + 48) onSession:*(void *)(a1 + 40) withResult:*(unsigned int *)(a1 + 52)];
}

void __BluetoothDeviceEvent_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1D942A350]();
  [*(id *)(a1 + 32) bluetoothDeviceEvent:*(unsigned int *)(a1 + 48) onDevice:*(void *)(a1 + 40) withResult:*(unsigned int *)(a1 + 52)];
}

uint64_t KCellularLteIdleToConnectedUserDataReadFrom(uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
      {
        if (v17 == 3)
        {
          uint64_t v36 = PBReaderReadData();
          unint64_t v37 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v36;
        }
        else
        {
          if (v17 != 15)
          {
LABEL_45:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (1)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if ((v29 & 0x80) == 0) {
              goto LABEL_52;
            }
            v24 += 7;
            BOOL v14 = v25++ >= 9;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_54;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_54:
          *(_DWORD *)(a1 + 16) = v26;
        }
      }
      else if (v17 == 1)
      {
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (1)
        {
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
          *(void *)(a2 + v33) = v34 + 1;
          v32 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0) {
            goto LABEL_56;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            uint64_t v32 = 0;
            goto LABEL_58;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_56:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
LABEL_58:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v32;
      }
      else
      {
        if (v17 != 2) {
          goto LABEL_45;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 36) |= 4u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_48;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_50;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_48:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_50:
        *(unsigned char *)(a1 + 32) = v20 != 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void PowerChangedCallback(void *a1, uint64_t a2, uint64_t a3, intptr_t a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v66 = 0;
  unint64_t v67 = &v66;
  uint64_t v68 = 0x3032000000;
  char v69 = __Block_byref_object_copy__6;
  unsigned int v70 = __Block_byref_object_dispose__6;
  id v6 = a1;
  id v71 = v6;
  HIDWORD(v7) = a3;
  LODWORD(v7) = a3 + 536870288;
  switch((v7 >> 4))
  {
    case 0u:
      if ([MEMORY[0x1E4F929C0] debugEnabled])
      {
        uint64_t v8 = objc_opt_class();
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __PowerChangedCallback_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        void block[4] = v8;
        if (qword_1EBD583A0 != -1) {
          dispatch_once(&qword_1EBD583A0, block);
        }
        if (byte_1EBD582CA)
        {
          unsigned int v9 = [NSString stringWithFormat:@"Sleep: start listening"];
          unint64_t v10 = (void *)MEMORY[0x1E4F929B8];
          uint64_t v11 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
          unint64_t v12 = [v11 lastPathComponent];
          char v13 = [NSString stringWithUTF8String:"PowerChangedCallback"];
          [v10 logMessage:v9 fromFile:v12 fromFunction:v13 fromLineNumber:1126];

          BOOL v14 = PLLogCommon();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v9;
            _os_log_debug_impl(&dword_1D2690000, v14, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
          }
        }
      }
      int v15 = [(id)v67[5] canSleepSemaphore];
      [v15 signalStartListening];

      if ([MEMORY[0x1E4F929C0] debugEnabled])
      {
        uint64_t v16 = objc_opt_class();
        v64[0] = MEMORY[0x1E4F143A8];
        v64[1] = 3221225472;
        v64[2] = __PowerChangedCallback_block_invoke_497;
        v64[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        v64[4] = v16;
        if (qword_1EBD583A8 != -1) {
          dispatch_once(&qword_1EBD583A8, v64);
        }
        if (byte_1EBD582CB)
        {
          unint64_t v17 = [NSString stringWithFormat:@"Sleep: log entry"];
          char v18 = (void *)MEMORY[0x1E4F929B8];
          unsigned int v19 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
          uint64_t v20 = [v19 lastPathComponent];
          uint64_t v21 = [NSString stringWithUTF8String:"PowerChangedCallback"];
          [v18 logMessage:v17 fromFile:v20 fromFunction:v21 fromLineNumber:1128];

          unint64_t v22 = PLLogCommon();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v17;
            _os_log_debug_impl(&dword_1D2690000, v22, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
          }
        }
      }
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v78 = 0x3032000000;
      char v79 = __Block_byref_object_copy__6;
      unsigned int v80 = __Block_byref_object_dispose__6;
      id v81 = [[PLEventForwardPowerStateEntry alloc] initEntryWithIOMessage:a3];
      [(id)v67[5] logEntry:*(void *)(*((void *)&buf + 1) + 40)];
      if ([MEMORY[0x1E4F929C0] debugEnabled])
      {
        uint64_t v23 = objc_opt_class();
        v63[0] = MEMORY[0x1E4F143A8];
        v63[1] = 3221225472;
        v63[2] = __PowerChangedCallback_block_invoke_503;
        v63[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        v63[4] = v23;
        if (qword_1EBD583B0 != -1) {
          dispatch_once(&qword_1EBD583B0, v63);
        }
        if (byte_1EBD582CC)
        {
          char v24 = objc_msgSend(NSString, "stringWithFormat:", @"Sleep: begin block entry.id=%lld", objc_msgSend(*(id *)(*((void *)&buf + 1) + 40), "entryID"));
          unsigned int v25 = (void *)MEMORY[0x1E4F929B8];
          uint64_t v26 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
          uint64_t v27 = [v26 lastPathComponent];
          unint64_t v28 = [NSString stringWithUTF8String:"PowerChangedCallback"];
          [v25 logMessage:v24 fromFile:v27 fromFunction:v28 fromLineNumber:1131];

          char v29 = PLLogCommon();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)unsigned int v75 = 138412290;
            uint64_t v76 = v24;
            _os_log_debug_impl(&dword_1D2690000, v29, OS_LOG_TYPE_DEBUG, "%@", v75, 0xCu);
          }
        }
      }
      char v30 = [(id)v67[5] canSleepSemaphore];
      v62[0] = MEMORY[0x1E4F143A8];
      v62[1] = 3221225472;
      v62[2] = __PowerChangedCallback_block_invoke_507;
      v62[3] = &unk_1E692C668;
      v62[4] = &v66;
      v62[5] = &buf;
      v62[6] = a4;
      [v30 waitWithBlock:v62];

      if ([MEMORY[0x1E4F929C0] debugEnabled])
      {
        uint64_t v31 = objc_opt_class();
        v61[0] = MEMORY[0x1E4F143A8];
        v61[1] = 3221225472;
        v61[2] = __PowerChangedCallback_block_invoke_513;
        v61[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        v61[4] = v31;
        if (qword_1EBD583C0 != -1) {
          dispatch_once(&qword_1EBD583C0, v61);
        }
        if (byte_1EBD582CE)
        {
          uint64_t v32 = objc_msgSend(NSString, "stringWithFormat:", @"Sleep: after block entry.id=%lld", objc_msgSend(*(id *)(*((void *)&buf + 1) + 40), "entryID"));
          uint64_t v33 = (void *)MEMORY[0x1E4F929B8];
          unint64_t v34 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
          char v35 = [v34 lastPathComponent];
          uint64_t v36 = [NSString stringWithUTF8String:"PowerChangedCallback"];
          [v33 logMessage:v32 fromFile:v35 fromFunction:v36 fromLineNumber:1136];

          unint64_t v37 = PLLogCommon();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)unsigned int v75 = 138412290;
            uint64_t v76 = v32;
            _os_log_debug_impl(&dword_1D2690000, v37, OS_LOG_TYPE_DEBUG, "%@", v75, 0xCu);
          }
        }
      }
      _Block_object_dispose(&buf, 8);

      break;
    case 1u:
      id v38 = [[PLEventForwardPowerStateEntry alloc] initEntryWithIOMessage:a3];
      [(id)v67[5] logEntry:v38];
      IOAllowPowerChange([(id)v67[5] rootDomainConnect], a4);

      break;
    case 2u:
      id v55 = [[PLEventForwardPowerStateEntry alloc] initEntryWithIOMessage:a3];
      [(id)v67[5] getSleepStatisticsApps];
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v39 = [obj countByEnumeratingWithState:&v57 objects:v74 count:16];
      if (v39)
      {
        uint64_t v40 = *(void *)v58;
        do
        {
          for (uint64_t i = 0; i != v39; ++i)
          {
            if (*(void *)v58 != v40) {
              objc_enumerationMutation(obj);
            }
            unint64_t v42 = *(void **)(*((void *)&v57 + 1) + 8 * i);
            v72[0] = @"PID";
            char v43 = [v42 objectForKeyedSubscript:@"PID"];
            v72[1] = @"AppName";
            v73[0] = v43;
            char v44 = [v42 objectForKeyedSubscript:@"AppName"];
            v73[1] = v44;
            unsigned int v45 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v73 forKeys:v72 count:2];

            uint64_t v46 = [v42 objectForKeyedSubscript:@"ResponseType"];
            [v55 setObject:v46 forKeyedSubscript:v45];
          }
          uint64_t v39 = [obj countByEnumeratingWithState:&v57 objects:v74 count:16];
        }
        while (v39);
      }

      if ([MEMORY[0x1E4F929C0] debugEnabled])
      {
        uint64_t v47 = objc_opt_class();
        v56[0] = MEMORY[0x1E4F143A8];
        v56[1] = 3221225472;
        v56[2] = __PowerChangedCallback_block_invoke_519;
        v56[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        v56[4] = v47;
        if (qword_1EBD583C8 != -1) {
          dispatch_once(&qword_1EBD583C8, v56);
        }
        if (byte_1EBD582CF)
        {
          char v48 = objc_msgSend(NSString, "stringWithFormat:", @"Sleep: SystemWillNotSleep dict[kPLSWE_ResponseType] =%lld ", objc_msgSend(v55, "entryID"));
          char v49 = (void *)MEMORY[0x1E4F929B8];
          unsigned int v50 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
          uint64_t v51 = [v50 lastPathComponent];
          unint64_t v52 = [NSString stringWithUTF8String:"PowerChangedCallback"];
          [v49 logMessage:v48 fromFile:v51 fromFunction:v52 fromLineNumber:1149];

          char v53 = PLLogCommon();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v48;
            _os_log_debug_impl(&dword_1D2690000, v53, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
          }
        }
      }
      [(id)v67[5] logEntry:v55];

      break;
    case 9u:
      [v6 systemPoweredOn];
      break;
    default:
      break;
  }
  _Block_object_dispose(&v66, 8);
}

void sub_1D283C504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void fakeSleep(uint64_t a1, void *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if ([MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v3 = objc_opt_class();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fakeSleep_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    void block[4] = v3;
    if (qword_1EBD58378 != -1) {
      dispatch_once(&qword_1EBD58378, block);
    }
    if (byte_1EBD582C5)
    {
      unint64_t v4 = [NSString stringWithFormat:@"Sleep Fake: start listening"];
      id v5 = (void *)MEMORY[0x1E4F929B8];
      id v6 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
      unint64_t v7 = [v6 lastPathComponent];
      uint64_t v8 = [NSString stringWithUTF8String:"fakeSleep"];
      [v5 logMessage:v4 fromFile:v7 fromFunction:v8 fromLineNumber:1084];

      unsigned int v9 = PLLogCommon();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        char v53 = v4;
        _os_log_debug_impl(&dword_1D2690000, v9, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
  unint64_t v10 = [v2 canSleepSemaphore];
  [v10 signalStartListening];

  if ([MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v11 = objc_opt_class();
    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 3221225472;
    v50[2] = __fakeSleep_block_invoke_454;
    v50[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    v50[4] = v11;
    if (qword_1EBD58380 != -1) {
      dispatch_once(&qword_1EBD58380, v50);
    }
    if (byte_1EBD582C6)
    {
      unint64_t v12 = [NSString stringWithFormat:@"Sleep Fake: log entry"];
      char v13 = (void *)MEMORY[0x1E4F929B8];
      BOOL v14 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
      int v15 = [v14 lastPathComponent];
      uint64_t v16 = [NSString stringWithUTF8String:"fakeSleep"];
      [v13 logMessage:v12 fromFile:v15 fromFunction:v16 fromLineNumber:1087];

      unint64_t v17 = PLLogCommon();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        char v53 = v12;
        _os_log_debug_impl(&dword_1D2690000, v17, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
  char v18 = [PLEventForwardPowerStateEntry alloc];
  unsigned int v19 = [MEMORY[0x1E4F1C9C8] monotonicDate];
  id v20 = [(PLEventForwardPowerStateEntry *)v18 initEntryWithState:1 withEvent:3 withReason:&unk_1F29ED880 withDate:v19];

  [v2 logEntry:v20];
  if ([MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v21 = objc_opt_class();
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3221225472;
    v49[2] = __fakeSleep_block_invoke_466;
    v49[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    v49[4] = v21;
    if (qword_1EBD58388 != -1) {
      dispatch_once(&qword_1EBD58388, v49);
    }
    if (byte_1EBD582C7)
    {
      unint64_t v22 = objc_msgSend(NSString, "stringWithFormat:", @"Sleep Fake: begin block entry.id=%lld", objc_msgSend(v20, "entryID"));
      uint64_t v23 = (void *)MEMORY[0x1E4F929B8];
      char v24 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
      unsigned int v25 = [v24 lastPathComponent];
      uint64_t v26 = [NSString stringWithUTF8String:"fakeSleep"];
      [v23 logMessage:v22 fromFile:v25 fromFunction:v26 fromLineNumber:1090];

      uint64_t v27 = PLLogCommon();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        char v53 = v22;
        _os_log_debug_impl(&dword_1D2690000, v27, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
  unint64_t v28 = [v2 canSleepSemaphore];
  uint64_t v44 = MEMORY[0x1E4F143A8];
  uint64_t v45 = 3221225472;
  uint64_t v46 = __fakeSleep_block_invoke_470;
  uint64_t v47 = &unk_1E692A250;
  id v29 = v20;
  id v48 = v29;
  [v28 waitWithBlock:&v44];

  if ([MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v30 = objc_opt_class();
    uint64_t v39 = MEMORY[0x1E4F143A8];
    uint64_t v40 = 3221225472;
    uint64_t v41 = __fakeSleep_block_invoke_476;
    unint64_t v42 = &__block_descriptor_40_e5_v8__0lu32l8;
    uint64_t v43 = v30;
    if (qword_1EBD58398 != -1) {
      dispatch_once(&qword_1EBD58398, &v39);
    }
    if (byte_1EBD582C9)
    {
      uint64_t v31 = NSString;
      uint64_t v32 = [v29 entryID];
      uint64_t v33 = objc_msgSend(v31, "stringWithFormat:", @"Sleep Fake: after block entry.id=%lld", v32, v39, v40, v41, v42, v43, v44, v45, v46, v47);
      unint64_t v34 = (void *)MEMORY[0x1E4F929B8];
      char v35 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
      uint64_t v36 = [v35 lastPathComponent];
      unint64_t v37 = [NSString stringWithUTF8String:"fakeSleep"];
      [v34 logMessage:v33 fromFile:v36 fromFunction:v37 fromLineNumber:1095];

      id v38 = PLLogCommon();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        char v53 = v33;
        _os_log_debug_impl(&dword_1D2690000, v38, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
}

void fakeWakeBB(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [PLEventForwardPowerStateEntry alloc];
  id v5 = [MEMORY[0x1E4F1C9C8] monotonicDate];
  id v4 = [(PLEventForwardPowerStateEntry *)v3 initEntryWithState:0 withEvent:0 withReason:&unk_1F29ED898 withDate:v5];
  [v2 logEntry:v4];
}

void fakeWakeWiFi(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [PLEventForwardPowerStateEntry alloc];
  id v5 = [MEMORY[0x1E4F1C9C8] monotonicDate];
  id v4 = [(PLEventForwardPowerStateEntry *)v3 initEntryWithState:0 withEvent:0 withReason:&unk_1F29ED8B0 withDate:v5];
  [v2 logEntry:v4];
}

uint64_t __fakeSleep_block_invoke(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582C5 = result;
  return result;
}

uint64_t __fakeSleep_block_invoke_454(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582C6 = result;
  return result;
}

uint64_t __fakeSleep_block_invoke_466(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582C7 = result;
  return result;
}

void __fakeSleep_block_invoke_470(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ([MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v2 = objc_opt_class();
    blocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v12 = 3221225472;
    char v13 = __fakeSleep_block_invoke_2;
    BOOL v14 = &__block_descriptor_40_e5_v8__0lu32l8;
    uint64_t v15 = v2;
    if (qword_1EBD58390 != -1) {
      dispatch_once(&qword_1EBD58390, &block);
    }
    if (byte_1EBD582C8)
    {
      uint64_t v3 = NSString;
      uint64_t v4 = [*(id *)(a1 + 32) entryID];
      id v5 = objc_msgSend(v3, "stringWithFormat:", @"Sleep Fake: block Done entry.id=%lld", v4, block, v12, v13, v14, v15);
      id v6 = (void *)MEMORY[0x1E4F929B8];
      unint64_t v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
      uint64_t v8 = [v7 lastPathComponent];
      unsigned int v9 = [NSString stringWithUTF8String:"fakeSleep_block_invoke"];
      [v6 logMessage:v5 fromFile:v8 fromFunction:v9 fromLineNumber:1093];

      unint64_t v10 = PLLogCommon();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        unint64_t v17 = v5;
        _os_log_debug_impl(&dword_1D2690000, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
}

uint64_t __fakeSleep_block_invoke_2(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582C8 = result;
  return result;
}

uint64_t __fakeSleep_block_invoke_476(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582C9 = result;
  return result;
}

uint64_t __PowerChangedCallback_block_invoke(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582CA = result;
  return result;
}

uint64_t __PowerChangedCallback_block_invoke_497(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582CB = result;
  return result;
}

uint64_t __PowerChangedCallback_block_invoke_503(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582CC = result;
  return result;
}

void __PowerChangedCallback_block_invoke_507(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  IOAllowPowerChange([*(id *)(*(void *)(a1[4] + 8) + 40) rootDomainConnect], a1[6]);
  if ([MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v2 = objc_opt_class();
    blocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v12 = 3221225472;
    char v13 = __PowerChangedCallback_block_invoke_2;
    BOOL v14 = &__block_descriptor_40_e5_v8__0lu32l8;
    uint64_t v15 = v2;
    if (qword_1EBD583B8 != -1) {
      dispatch_once(&qword_1EBD583B8, &block);
    }
    if (byte_1EBD582CD)
    {
      uint64_t v3 = NSString;
      uint64_t v4 = [*(id *)(*(void *)(a1[5] + 8) + 40) entryID];
      id v5 = objc_msgSend(v3, "stringWithFormat:", @"Sleep: block Done entry.id=%lld", v4, block, v12, v13, v14, v15);
      id v6 = (void *)MEMORY[0x1E4F929B8];
      unint64_t v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Software/PLSleepWakeAgent.m"];
      uint64_t v8 = [v7 lastPathComponent];
      unsigned int v9 = [NSString stringWithUTF8String:"PowerChangedCallback_block_invoke"];
      [v6 logMessage:v5 fromFile:v8 fromFunction:v9 fromLineNumber:1134];

      unint64_t v10 = PLLogCommon();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        unint64_t v17 = v5;
        _os_log_debug_impl(&dword_1D2690000, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
}

uint64_t __PowerChangedCallback_block_invoke_2(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582CD = result;
  return result;
}

uint64_t __PowerChangedCallback_block_invoke_513(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582CE = result;
  return result;
}

uint64_t __PowerChangedCallback_block_invoke_519(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD582CF = result;
  return result;
}

uint64_t __PLLogIOReport_block_invoke()
{
  qword_1EBD583F0 = (uint64_t)os_log_create("com.apple.powerlog", "ioreport");
  return MEMORY[0x1F41817F8]();
}

BOOL InitializeAllChecks@<W0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)a1 = [MEMORY[0x1E4F92A38] isiOS];
  *(unsigned char *)(a1 + 1) = [MEMORY[0x1E4F92A38] isiPad];
  *(unsigned char *)(a1 + 2) = [MEMORY[0x1E4F92A38] isWatch];
  *(unsigned char *)(a1 + 3) = [MEMORY[0x1E4F92A38] isMac];
  *(unsigned char *)(a1 + 4) = [MEMORY[0x1E4F92A38] isTVOS];
  *(unsigned char *)(a1 + 5) = [MEMORY[0x1E4F929C0] taskMode];
  *(unsigned char *)(a1 + 6) = [MEMORY[0x1E4F929C0] fullMode];
  *(unsigned char *)(a1 + 7) = [MEMORY[0x1E4F929C0] eplEnabled];
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = +[PLIOReportAgent shouldLogSoCStats];
  *(unsigned char *)(a1 + 9) = +[PLIOReportAgent shouldLogAtAppSwitchTrigger];
  *(unsigned char *)(a1 + 10) = [MEMORY[0x1E4F56678] isCPMSSupported];
  *(unsigned char *)(a1 + 11) = +[PLIOReportAgent shouldLogAudioEvent];
  *(unsigned char *)(a1 + 12) = +[PLIOReportAgent shouldLogThermalUPOLimiting];
  *(unsigned char *)(a1 + 13) = [MEMORY[0x1E4F92A38] hasCapability:1];
  *(unsigned char *)(a1 + 14) = +[PLIOReportAgent shouldLogSleepMedia];
  *(unsigned char *)(a1 + 15) = [MEMORY[0x1E4F929C0] BOOLForKey:@"enable_SoCStatsDeviceStates" ifNotSet:0];
  *(_DWORD *)(a1 + 24) = [MEMORY[0x1E4F92A38] kPLDeviceClass];
  *(unsigned char *)(a1 + 16) = [MEMORY[0x1E4F92A38] hasAOD];
  *(unsigned char *)(a1 + 17) = +[PLIOReportAgent shouldLogAmcStatsPerfCounters];
  BOOL result = +[PLIOReportAgent shouldLogSocStatsEvents];
  *(unsigned char *)(a1 + 1_Block_object_dispose(&STACK[0x480], 8) = result;
  return result;
}

id PLLogIDS()
{
  if (qword_1EBD58540 != -1) {
    dispatch_once(&qword_1EBD58540, &__block_literal_global_21);
  }
  unsigned int v0 = (void *)qword_1EBD58538;
  return v0;
}

uint64_t __PLLogIDS_block_invoke()
{
  qword_1EBD58538 = (uint64_t)os_log_create("com.apple.powerlog", "IDS");
  return MEMORY[0x1F41817F8]();
}

uint64_t KCellularCellPlmnSearchCountReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 48) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_85;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_87;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_85:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_87:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + 48) |= 8u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                BOOL v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_91;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_91:
          uint64_t v65 = 24;
          goto LABEL_120;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + 48) |= 0x10u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v25 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_95:
          uint64_t v65 = 28;
          goto LABEL_120;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + 48) |= 0x100u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v25 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_99;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_99:
          uint64_t v65 = 44;
          goto LABEL_120;
        case 5u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + 48) |= 0x80u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v25 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v14 = v40++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_103:
          uint64_t v65 = 40;
          goto LABEL_120;
        case 6u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + 48) |= 0x20u;
          while (2)
          {
            uint64_t v46 = *v3;
            unint64_t v47 = *(void *)(a2 + v46);
            if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
              *(void *)(a2 + v46) = v47 + 1;
              v25 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v14 = v45++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_107;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_107:
          uint64_t v65 = 32;
          goto LABEL_120;
        case 7u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + 48) |= 2u;
          while (2)
          {
            uint64_t v51 = *v3;
            unint64_t v52 = *(void *)(a2 + v51);
            if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
              *(void *)(a2 + v51) = v52 + 1;
              v25 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                BOOL v14 = v50++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_111;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_111:
          uint64_t v65 = 16;
          goto LABEL_120;
        case 8u:
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + 48) |= 4u;
          while (2)
          {
            uint64_t v56 = *v3;
            unint64_t v57 = *(void *)(a2 + v56);
            if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v58 = *(unsigned char *)(*(void *)(a2 + *v7) + v57);
              *(void *)(a2 + v56) = v57 + 1;
              v25 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                BOOL v14 = v55++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_115;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_115:
          uint64_t v65 = 20;
          goto LABEL_120;
        case 0xFu:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + 48) |= 0x40u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v62 = *v3;
        unint64_t v63 = *(void *)(a2 + v62);
        if (v63 == -1 || v63 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v64 = *(unsigned char *)(*(void *)(a2 + *v7) + v63);
        *(void *)(a2 + v62) = v63 + 1;
        v25 |= (unint64_t)(v64 & 0x7F) << v60;
        if ((v64 & 0x80) == 0) {
          goto LABEL_117;
        }
        v60 += 7;
        BOOL v14 = v61++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_119;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_117:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v25) = 0;
      }
LABEL_119:
      uint64_t v65 = 36;
LABEL_120:
      *(_DWORD *)(a1 + v65) = v25;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PLLogDuetServiceDAS()
{
  if (qword_1EBD5BDF0 != -1) {
    dispatch_once(&qword_1EBD5BDF0, &__block_literal_global_22);
  }
  unsigned int v0 = (void *)qword_1EBD5BDE8;
  return v0;
}

uint64_t __PLLogDuetServiceDAS_block_invoke()
{
  qword_1EBD5BDE8 = (uint64_t)os_log_create("com.apple.powerlog", "DuetServiceDAS");
  return MEMORY[0x1F41817F8]();
}

id PLLogDuetServiceLpmSource()
{
  if (qword_1EBD5BE28 != -1) {
    dispatch_once(&qword_1EBD5BE28, &__block_literal_global_23);
  }
  unsigned int v0 = (void *)_MergedGlobals_90;
  return v0;
}

uint64_t __PLLogDuetServiceLpmSource_block_invoke()
{
  _MergedGlobals_90 = (uint64_t)os_log_create("com.apple.powerlog", "lpmsource");
  return MEMORY[0x1F41817F8]();
}

id PLLogContinuity()
{
  if (qword_1EBD5BE38 != -1) {
    dispatch_once(&qword_1EBD5BE38, &__block_literal_global_24);
  }
  unsigned int v0 = (void *)_MergedGlobals_91;
  return v0;
}

uint64_t __PLLogContinuity_block_invoke()
{
  _MergedGlobals_91 = (uint64_t)os_log_create("com.apple.powerlog", "continuity");
  return MEMORY[0x1F41817F8]();
}

uint64_t __PLLogDisplay_block_invoke()
{
  qword_1EBD58638 = (uint64_t)os_log_create("com.apple.powerlog", "display");
  return MEMORY[0x1F41817F8]();
}

void serviceInterestCallback(void *a1, uint64_t a2, int a3)
{
  if (a3 == -536870896)
  {
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    id v5 = a1;
    [v5 cancel];
    [v5 setValid:0];

    id v6 = PLLogDisplay();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl(&dword_1D2690000, v6, OS_LOG_TYPE_DEFAULT, "Cancelled AFKInterface", v7, 2u);
    }
  }
}

uint64_t handleIOMFBPowerCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!_os_feature_enabled_impl()
    || (uint64_t result = [MEMORY[0x1E4F92A38] hasAOD], (result & 1) == 0))
  {
    return [a4 logEventPointDisplayBacklightWithState:a3];
  }
  return result;
}

void sub_1D28AAC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D28AFE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __HIDTouchEventCallback(void *a1)
{
  if (IOHIDEventGetType() != 11) {
    return;
  }
  Childreuint64_t n = IOHIDEventGetChildren();
  if (!Children) {
    return;
  }
  CFArrayRef v3 = (const __CFArray *)Children;
  id v9 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      uint64_t v5 = Count;
      CFIndex v6 = 0;
      int v7 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(v3, v6);
        if (IOHIDEventGetType() == 11)
        {
          if (IOHIDEventGetIntegerValue()) {
            break;
          }
        }
        CFIndex v6 = ++v7;
        if (v5 <= v7) {
          goto LABEL_9;
        }
      }
      if ([v9 userTouch]) {
        goto LABEL_15;
      }
      uint64_t v8 = 1;
      goto LABEL_14;
    }
LABEL_9:
    if ([v9 userTouch])
    {
      uint64_t v8 = 0;
LABEL_14:
      [v9 logEventBackwardUserTouch:v8];
    }
  }
LABEL_15:
}

uint64_t updateDisplayIOReportAZLStats(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    Samples = PLLogDisplay();
    if (!os_log_type_enabled(Samples, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_11;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v12 = "LogDisplayAZL !ioReportStats";
LABEL_21:
    _os_log_debug_impl(&dword_1D2690000, Samples, OS_LOG_TYPE_DEBUG, v12, buf, 2u);
    goto LABEL_11;
  }
  if ([v1 subscription])
  {
    [v2 subscription];
    CFArrayRef v3 = [v2 subscribedChannels];
    Samples = IOReportCreateSamples();

    if (Samples)
    {
      uint64_t v5 = [MEMORY[0x1E4F1C9C8] monotonicDate];
      CFIndex v6 = [v2 ioReportSample];

      if (!v6)
      {
LABEL_7:
        [v2 setIoReportSample:Samples];
        unint64_t v10 = [v2 sampleTime];
        [v2 setSampleTimePrevious:v10];

        [v2 setSampleTime:v5];
        uint64_t v11 = 1;
LABEL_18:

        goto LABEL_19;
      }
      int v7 = [v2 ioReportSample];
      SamplesDelta = (void *)IOReportCreateSamplesDelta();

      if (SamplesDelta)
      {
        int v15 = objc_alloc_init(PLDisplayAZLStats);
        id v9 = v15;
        IOReportIterate();
        [v2 setDisplayAZLStats:v9];

        goto LABEL_7;
      }
      char v13 = PLLogDisplay();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_debug_impl(&dword_1D2690000, v13, OS_LOG_TYPE_DEBUG, "LogDisplayAZL,no delta", buf, 2u);
      }
    }
    else
    {
      uint64_t v5 = PLLogDisplay();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_debug_impl(&dword_1D2690000, v5, OS_LOG_TYPE_DEBUG, "LogDisplayAZL,no newSample", buf, 2u);
      }
    }
    uint64_t v11 = 0;
    goto LABEL_18;
  }
  Samples = PLLogDisplay();
  if (os_log_type_enabled(Samples, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    unint64_t v12 = "LogDisplayAZL !ioReportStats.subscription";
    goto LABEL_21;
  }
LABEL_11:
  uint64_t v11 = 0;
LABEL_19:

  return v11;
}

void __updateDisplayIOReportAZLStats_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1D942A350]();
  CFArrayRef v3 = IOReportChannelGetChannelName();
  uint64_t v4 = [NSNumber numberWithLongLong:IOReportSimpleGetIntegerValue()];
  uint64_t v5 = (void *)v4;
  CFIndex v6 = &unk_1F29E6088;
  if (v4) {
    CFIndex v6 = (void *)v4;
  }
  id v7 = v6;

  if ([v3 isEqualToString:@"power"])
  {
    [*(id *)(a1 + 32) setAvgPower:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AZL power is equal to %@";
LABEL_18:
      _os_log_debug_impl(&dword_1D2690000, v8, OS_LOG_TYPE_DEBUG, v10, (uint8_t *)&v11, 0xCu);

      goto LABEL_19;
    }
    goto LABEL_19;
  }
  if ([v3 isEqualToString:@"azl_accum"])
  {
    [*(id *)(a1 + 32) setAzlAccum:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AZL azl_accum is equal to %@";
      goto LABEL_18;
    }
LABEL_19:

    goto LABEL_20;
  }
  if ([v3 isEqualToString:@"nits_accum"])
  {
    [*(id *)(a1 + 32) setNitsAccum:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AZL nits_accum is equal to %@";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if ([v3 isEqualToString:@"bl_update_count"])
  {
    [*(id *)(a1 + 32) setBlUpdateCount:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AZL bl_update_count is equal to %@";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if ([v3 isEqualToString:@"bl_frame_count"])
  {
    [*(id *)(a1 + 32) setBlFrameCount:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AZL bl_frame_count is equal to %@";
      goto LABEL_18;
    }
    goto LABEL_19;
  }
LABEL_20:
}

uint64_t updateDisplayIOReportAODStats(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    Samples = PLLogDisplay();
    if (!os_log_type_enabled(Samples, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_15;
    }
    *(_WORD *)long long buf = 0;
    int v15 = "LogDisplayAOD !ioReportStats";
LABEL_25:
    _os_log_debug_impl(&dword_1D2690000, Samples, OS_LOG_TYPE_DEBUG, v15, buf, 2u);
    goto LABEL_15;
  }
  uint64_t v3 = [v1 subscription];
  Samples = PLLogDisplay();
  BOOL v5 = os_log_type_enabled(Samples, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)long long buf = 138412290;
      unint64_t v21 = v2;
      _os_log_debug_impl(&dword_1D2690000, Samples, OS_LOG_TYPE_DEBUG, "Got callback for updateDisplayIOReportAODStat with ioReportAODStats %@", buf, 0xCu);
    }

    [v2 subscription];
    CFIndex v6 = [v2 subscribedChannels];
    Samples = IOReportCreateSamples();

    if (Samples)
    {
      id v7 = [MEMORY[0x1E4F1C9C8] monotonicDate];
      uint64_t v8 = PLLogDisplay();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v18 = [v2 ioReportSample];
        *(_DWORD *)long long buf = 138412290;
        unint64_t v21 = v18;
        _os_log_debug_impl(&dword_1D2690000, v8, OS_LOG_TYPE_DEBUG, "Got callback for updateDisplayIOReportAODStat with ioReportAODStats.ioReportSample %@", buf, 0xCu);
      }
      id v9 = [v2 ioReportSample];

      if (!v9) {
        goto LABEL_11;
      }
      unint64_t v10 = [v2 ioReportSample];
      SamplesDelta = (void *)IOReportCreateSamplesDelta();

      if (SamplesDelta)
      {
        uint64_t v19 = objc_alloc_init(PLDisplayAODStats);
        unint64_t v12 = v19;
        IOReportIterate();
        [v2 setDisplayAODStats:v12];

LABEL_11:
        [v2 setIoReportSample:Samples];
        uint64_t v13 = [v2 sampleTime];
        [v2 setSampleTimePrevious:v13];

        [v2 setSampleTime:v7];
        uint64_t v14 = 1;
LABEL_22:

        goto LABEL_23;
      }
      uint64_t v16 = PLLogDisplay();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_debug_impl(&dword_1D2690000, v16, OS_LOG_TYPE_DEBUG, "LogDisplayAOD,no delta", buf, 2u);
      }
    }
    else
    {
      id v7 = PLLogDisplay();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_debug_impl(&dword_1D2690000, v7, OS_LOG_TYPE_DEBUG, "LogDisplayAOD,no newSample", buf, 2u);
      }
    }
    uint64_t v14 = 0;
    goto LABEL_22;
  }
  if (v5)
  {
    *(_WORD *)long long buf = 0;
    int v15 = "LogDisplayAOD !ioReportStats.subscription";
    goto LABEL_25;
  }
LABEL_15:
  uint64_t v14 = 0;
LABEL_23:

  return v14;
}

void __updateDisplayIOReportAODStats_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1D942A350]();
  uint64_t v3 = IOReportChannelGetChannelName();
  uint64_t v4 = [NSNumber numberWithLongLong:IOReportSimpleGetIntegerValue()];
  BOOL v5 = (void *)v4;
  CFIndex v6 = &unk_1F29E6088;
  if (v4) {
    CFIndex v6 = (void *)v4;
  }
  id v7 = v6;

  if ([v3 isEqualToString:@"awake_count"])
  {
    [*(id *)(a1 + 32) setAwakeCount:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD awake_count is equal to %@";
LABEL_36:
      _os_log_debug_impl(&dword_1D2690000, v8, OS_LOG_TYPE_DEBUG, v10, (uint8_t *)&v11, 0xCu);

      goto LABEL_37;
    }
    goto LABEL_37;
  }
  if ([v3 isEqualToString:@"media_count"])
  {
    [*(id *)(a1 + 32) setMediaCount:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD media_count is equal to %@";
      goto LABEL_36;
    }
LABEL_37:

    goto LABEL_38;
  }
  if ([v3 isEqualToString:@"flipbook_count"])
  {
    [*(id *)(a1 + 32) setFlipbookCount:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD flipbook_count is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ([v3 isEqualToString:@"flipbook_delay"])
  {
    [*(id *)(a1 + 32) setFlipbookDelay:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD flipbook_delay is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ([v3 isEqualToString:@"media_scanout"])
  {
    [*(id *)(a1 + 32) setMediaScanout:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD media_scanout is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ([v3 isEqualToString:@"ambient_count"])
  {
    [*(id *)(a1 + 32) setAmbientCount:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD ambient_count is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ([v3 isEqualToString:@"prc_repeat_coun"])
  {
    [*(id *)(a1 + 32) setPrcRepeatCoun:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD prc_repeat_coun is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ([v3 isEqualToString:@"pdc_repeat_coun"])
  {
    [*(id *)(a1 + 32) setPdcRepeatCoun:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD pdc_repeat_coun is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ([v3 isEqualToString:@"llm_count"])
  {
    [*(id *)(a1 + 32) setLlmCount:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD llm_count is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ([v3 isEqualToString:@"apl_sum"])
  {
    [*(id *)(a1 + 32) setAplSum:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD apl_sum is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if ([v3 isEqualToString:@"apl_count"])
  {
    [*(id *)(a1 + 32) setAplCount:v7];
    uint64_t v8 = PLLogDisplay();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v7, "unsignedLongLongValue"));
      int v11 = 138412290;
      unint64_t v12 = v9;
      unint64_t v10 = "AOD apl_count is equal to %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
LABEL_38:
}

void sub_1D28B2B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D28B546C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t KCellularCdma1XRrStateReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                BOOL v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_70:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 6u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v25 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_74:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 7u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v25 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_78:
          uint64_t v50 = 16;
          goto LABEL_87;
        case 8u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v25 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_82:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 9u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v25 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v25) = 0;
      }
LABEL_86:
      uint64_t v50 = 20;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v25;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D28CA704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t KCellularWcdmaCpcStatReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                BOOL v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_70:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v25 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_74:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v25 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_78:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 5u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v25 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v14 = v40++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_82:
          uint64_t v50 = 16;
          goto LABEL_87;
        case 0xFu:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v25 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v25) = 0;
      }
LABEL_86:
      uint64_t v50 = 28;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v25;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL ComponentCarrierInfoReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 4u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v2_Block_object_dispose(&STACK[0x480], 8) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            uint64_t v25 = &OBJC_IVAR___ComponentCarrierInfo__dlRfBand;
            goto LABEL_48;
          }
          v26 += 7;
          BOOL v24 = v27++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            uint64_t v25 = &OBJC_IVAR___ComponentCarrierInfo__dlRfBand;
            goto LABEL_50;
          }
        }
        uint64_t v25 = &OBJC_IVAR___ComponentCarrierInfo__dlRfBand;
LABEL_47:
        *(unsigned char *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            uint64_t v25 = &OBJC_IVAR___ComponentCarrierInfo__dlEarfcn;
            goto LABEL_47;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            break;
          }
          v18 += 7;
          BOOL v24 = v19++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            uint64_t v25 = &OBJC_IVAR___ComponentCarrierInfo__dlEarfcn;
            goto LABEL_50;
          }
        }
        uint64_t v25 = &OBJC_IVAR___ComponentCarrierInfo__dlEarfcn;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_51:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v31 = 0;
    unsigned int v32 = 0;
    uint64_t v20 = 0;
    *(unsigned char *)(a1 + 20) |= 1u;
    while (1)
    {
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
      {
        uint64_t v25 = &OBJC_IVAR___ComponentCarrierInfo__dlBandwidth;
        goto LABEL_47;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
      *(void *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v31 += 7;
      BOOL v24 = v32++ > 8;
      if (v24)
      {
        LODWORD(v20) = 0;
        uint64_t v25 = &OBJC_IVAR___ComponentCarrierInfo__dlBandwidth;
        goto LABEL_50;
      }
    }
    uint64_t v25 = &OBJC_IVAR___ComponentCarrierInfo__dlBandwidth;
LABEL_48:
    if (*(unsigned char *)(a2 + *v5)) {
      LODWORD(v20) = 0;
    }
LABEL_50:
    *(_DWORD *)(a1 + *v25) = v20;
    goto LABEL_51;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void NotificationCallback_0(uint64_t a1, void *a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3032000000;
  v6[3] = __Block_byref_object_copy__8;
  v6[4] = __Block_byref_object_dispose__8;
  id v7 = a2;
  uint64_t v4 = dispatch_get_global_queue(-2, 0);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = __NotificationCallback_block_invoke_0;
  v5[3] = &unk_1E692D930;
  v5[4] = v6;
  v5[5] = a3;
  dispatch_async(v4, v5);

  _Block_object_dispose(v6, 8);
}

void sub_1D28D5634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1D28DA548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __NotificationCallback_block_invoke_0(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v34 = *(id *)(a1 + 40);
  uint64_t v2 = [v34 substringFromIndex:objc_msgSend(@"com.apple.powerlogd.accounting.", "length")];
  if ([v2 isEqualToString:@"testAll"])
  {
    uint64_t v3 = objc_msgSend(MEMORY[0x1E4F1CA48], "array", v2);
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    uint64_t v4 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) testNames];
    uint64_t v5 = [v4 countByEnumeratingWithState:&v51 objects:v60 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v52;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v52 != v7) {
            objc_enumerationMutation(v4);
          }
          unsigned int v9 = *(void **)(*((void *)&v51 + 1) + 8 * i);
          if ([v9 rangeOfString:@"Reload"] == 0x7FFFFFFFFFFFFFFFLL
            && [v9 rangeOfString:@"All"] == 0x7FFFFFFFFFFFFFFFLL)
          {
            [v3 addObject:v9];
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v51 objects:v60 count:16];
      }
      while (v6);
    }
  }
  else if (objc_msgSend(v2, "isEqualToString:", @"testDistributionAll", v2))
  {
    uint64_t v3 = [MEMORY[0x1E4F1CA48] array];
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    uint64_t v4 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) testNames];
    uint64_t v10 = [v4 countByEnumeratingWithState:&v47 objects:v59 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v48;
      do
      {
        for (uint64_t j = 0; j != v11; ++j)
        {
          if (*(void *)v48 != v12) {
            objc_enumerationMutation(v4);
          }
          BOOL v14 = *(void **)(*((void *)&v47 + 1) + 8 * j);
          if ([v14 rangeOfString:@"testDistribution"] != 0x7FFFFFFFFFFFFFFFLL
            && ([v14 isEqualToString:@"testDistributionAll"] & 1) == 0)
          {
            [v3 addObject:v14];
          }
        }
        uint64_t v11 = [v4 countByEnumeratingWithState:&v47 objects:v59 count:16];
      }
      while (v11);
    }
  }
  else if ([v2 isEqualToString:@"testCorrectionAll"])
  {
    uint64_t v3 = [MEMORY[0x1E4F1CA48] array];
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    uint64_t v4 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) testNames];
    uint64_t v15 = [v4 countByEnumeratingWithState:&v43 objects:v58 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v44;
      do
      {
        for (uint64_t k = 0; k != v16; ++k)
        {
          if (*(void *)v44 != v17) {
            objc_enumerationMutation(v4);
          }
          unsigned int v19 = *(void **)(*((void *)&v43 + 1) + 8 * k);
          if ([v19 rangeOfString:@"testCorrection"] != 0x7FFFFFFFFFFFFFFFLL
            && ([v19 isEqualToString:@"testCorrectionAll"] & 1) == 0)
          {
            [v3 addObject:v19];
          }
        }
        uint64_t v16 = [v4 countByEnumeratingWithState:&v43 objects:v58 count:16];
      }
      while (v16);
    }
  }
  else if ([v2 isEqualToString:@"testQualificationAll"])
  {
    uint64_t v3 = [MEMORY[0x1E4F1CA48] array];
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v4 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) testNames];
    uint64_t v20 = [v4 countByEnumeratingWithState:&v39 objects:v57 count:16];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = *(void *)v40;
      do
      {
        for (uint64_t m = 0; m != v21; ++m)
        {
          if (*(void *)v40 != v22) {
            objc_enumerationMutation(v4);
          }
          BOOL v24 = *(void **)(*((void *)&v39 + 1) + 8 * m);
          if ([v24 rangeOfString:@"testQualification"] != 0x7FFFFFFFFFFFFFFFLL
            && ([v24 isEqualToString:@"testQualificationAll"] & 1) == 0)
          {
            [v3 addObject:v24];
          }
        }
        uint64_t v21 = [v4 countByEnumeratingWithState:&v39 objects:v57 count:16];
      }
      while (v21);
    }
  }
  else
  {
    uint64_t v56 = v2;
    uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v56 count:1];
    uint64_t v3 = (void *)[v4 mutableCopy];
  }

  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v25 = v3;
  uint64_t v26 = [v25 countByEnumeratingWithState:&v35 objects:v55 count:16];
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)v36;
    do
    {
      for (uint64_t n = 0; n != v27; ++n)
      {
        if (*(void *)v36 != v28) {
          objc_enumerationMutation(v25);
        }
        char v30 = *(void **)(*((void *)&v35 + 1) + 8 * n);
        if (([v30 isEqualToString:@"testInit"] & 1) == 0
          && [v30 rangeOfString:@"ReloadAfter"] == 0x7FFFFFFFFFFFFFFFLL)
        {
          char v31 = [MEMORY[0x1E4F92900] debugInstance];
          [v31 reset];
        }
        SEL v32 = NSSelectorFromString((NSString *)v30);
        ((void (*)(void, SEL))[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) methodForSelector:v32])(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v32);
      }
      uint64_t v27 = [v25 countByEnumeratingWithState:&v35 objects:v55 count:16];
    }
    while (v27);
  }
}

BOOL HistogramBinReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            BOOL v24 = &OBJC_IVAR___HistogramBin__ids;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            BOOL v24 = &OBJC_IVAR___HistogramBin__ids;
            goto LABEL_41;
          }
        }
        BOOL v24 = &OBJC_IVAR___HistogramBin__ids;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 2u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        BOOL v24 = &OBJC_IVAR___HistogramBin__value;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        BOOL v24 = &OBJC_IVAR___HistogramBin__value;
        goto LABEL_41;
      }
    }
    BOOL v24 = &OBJC_IVAR___HistogramBin__value;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void myRelease(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

id PLLogUrsa()
{
  if (qword_1EBD58970 != -1) {
    dispatch_once(&qword_1EBD58970, &__block_literal_global_188);
  }
  unsigned int v0 = (void *)qword_1EBD58968;
  return v0;
}

uint64_t __PLLogUrsa_block_invoke()
{
  qword_1EBD58968 = (uint64_t)os_log_create("com.apple.powerlog", "Ursa");
  return MEMORY[0x1F41817F8]();
}

void sub_1D28DE078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D28DEBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id PLLogComputeSafeguards()
{
  if (qword_1EBD58980 != -1) {
    dispatch_once(&qword_1EBD58980, &__block_literal_global_315);
  }
  unsigned int v0 = (void *)qword_1EBD58978;
  return v0;
}

uint64_t __PLLogComputeSafeguards_block_invoke()
{
  qword_1EBD58978 = (uint64_t)os_log_create("com.apple.powerlog", "ComputeSafeguards");
  return MEMORY[0x1F41817F8]();
}

uint64_t KCellularDownlinkIpPacketDiscardedReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 36) |= 1u;
              while (1)
              {
                uint64_t v20 = *v3;
                unint64_t v21 = *(void *)(a2 + v20);
                if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0) {
                  goto LABEL_52;
                }
                v17 += 7;
                BOOL v14 = v18++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_54;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v19 = 0;
              }
LABEL_54:
              *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
              goto LABEL_68;
            case 2u:
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 36) |= 4u;
              while (2)
              {
                uint64_t v31 = *v3;
                unint64_t v32 = *(void *)(a2 + v31);
                if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
                  *(void *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    BOOL v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_62;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_62:
              uint64_t v42 = 28;
              goto LABEL_67;
            case 3u:
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 36) |= 2u;
              while (2)
              {
                uint64_t v36 = *v3;
                unint64_t v37 = *(void *)(a2 + v36);
                if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
                  *(void *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    BOOL v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_66;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_66:
              uint64_t v42 = 24;
              goto LABEL_67;
            case 4u:
              uint64_t v39 = PBReaderReadData();
              long long v40 = *(void **)(a1 + 16);
              *(void *)(a1 + 16) = v39;

              goto LABEL_68;
            default:
              if ((v10 >> 3) == 15)
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                *(unsigned char *)(a1 + 36) |= 8u;
                while (1)
                {
                  uint64_t v26 = *v3;
                  unint64_t v27 = *(void *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
                  *(void *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0) {
                    goto LABEL_56;
                  }
                  v23 += 7;
                  BOOL v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_58;
                  }
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_56:
                if (*(unsigned char *)(a2 + *v5)) {
                  LODWORD(v25) = 0;
                }
LABEL_58:
                uint64_t v42 = 32;
LABEL_67:
                *(_DWORD *)(a1 + v42) = v25;
              }
              else
              {
                uint64_t result = PBReaderSkipValueWithTag();
                if (!result) {
                  return result;
                }
              }
LABEL_68:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PLLogIOReportMetrics()
{
  if (qword_1EBD58990 != -1) {
    dispatch_once(&qword_1EBD58990, &__block_literal_global_29);
  }
  unsigned int v0 = (void *)_MergedGlobals_1_32;
  return v0;
}

uint64_t __PLLogIOReportMetrics_block_invoke()
{
  _MergedGlobals_1_32 = (uint64_t)os_log_create("com.apple.PerfPowerServicesAgent", "ioreportmetrics");
  return MEMORY[0x1F41817F8]();
}

uint64_t StateHistReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = objc_alloc_init(HistogramBin);
        [(id)a1 addBin:v23];
        if (!PBReaderPlaceMark() || !HistogramBinReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void fsEventsHandler(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v14 = a4;
  if (a3)
  {
    uint64_t v7 = 0;
    do
    {
      if ((~*(_DWORD *)(a5 + 4 * v7) & 0x10100) == 0)
      {
        char v8 = [v14 objectAtIndexedSubscript:v7];
        unsigned int v9 = [v8 lastPathComponent];

        if ((~*(_DWORD *)(a5 + 4 * v7) & 0x900) == 0)
        {
          unint64_t v10 = [v9 componentsSeparatedByString:@"."];
          if ([v10 count] == 4)
          {
            uint64_t v11 = [v10 objectAtIndexedSubscript:1];
            int v12 = [v11 isEqualToString:@"microstackshots"];

            if (v12) {
              [a2 logLogFileName:@"microstackshots" withName:v9];
            }
          }
        }
      }
      ++v7;
    }
    while (a3 != v7);
  }
}

uint64_t KCellularLqmStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = 0x1EA693000uLL;
    unint64_t v8 = 0x1EA693000uLL;
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = 0x1EA693000uLL;
    unint64_t v11 = 0x1EA693000uLL;
    unint64_t v12 = 0x1EA693000uLL;
    unint64_t v13 = 0x1EA693000uLL;
    unint64_t v14 = 0x1EA693000uLL;
    unint64_t v15 = 0x1EA693000uLL;
    unint64_t v16 = 0x1EA693000uLL;
    unint64_t v17 = 0x1EA693000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 1u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_134;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              uint64_t v29 = 0;
              goto LABEL_136;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_134:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v29 = 0;
          }
LABEL_136:
          *(void *)(a1 + *(int *)(v8 + 3560)) = v29;
          continue;
        case 3u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x200u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v9) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_140;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_140:
          uint64_t v123 = *(int *)(v10 + 3564);
          goto LABEL_174;
        case 4u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 8u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v9) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v41 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v24 = v46++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_144;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_144:
          uint64_t v123 = *(int *)(v11 + 3568);
          goto LABEL_174;
        case 5u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x800u;
          while (2)
          {
            uint64_t v52 = *v3;
            unint64_t v53 = *(void *)(a2 + v52);
            if (v53 == -1 || v53 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v54 = *(unsigned char *)(*(void *)(a2 + *v9) + v53);
              *(void *)(a2 + v52) = v53 + 1;
              v41 |= (unint64_t)(v54 & 0x7F) << v50;
              if (v54 < 0)
              {
                v50 += 7;
                BOOL v24 = v51++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_148:
          uint64_t v123 = *(int *)(v12 + 3572);
          goto LABEL_174;
        case 6u:
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x4000u;
          while (2)
          {
            uint64_t v58 = *v3;
            unint64_t v59 = *(void *)(a2 + v58);
            if (v59 == -1 || v59 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v60 = *(unsigned char *)(*(void *)(a2 + *v9) + v59);
              *(void *)(a2 + v5_Block_object_dispose(&STACK[0x480], 8) = v59 + 1;
              v57 |= (unint64_t)(v60 & 0x7F) << v55;
              if (v60 < 0)
              {
                v55 += 7;
                BOOL v24 = v56++ >= 9;
                if (v24)
                {
                  uint64_t v57 = 0;
                  goto LABEL_152;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v57 = 0;
          }
LABEL_152:
          BOOL v124 = v57 != 0;
          uint64_t v125 = *(int *)(v13 + 3576);
          goto LABEL_165;
        case 7u:
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x100u;
          while (2)
          {
            uint64_t v63 = *v3;
            unint64_t v64 = *(void *)(a2 + v63);
            if (v64 == -1 || v64 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v65 = *(unsigned char *)(*(void *)(a2 + *v9) + v64);
              *(void *)(a2 + v63) = v64 + 1;
              v41 |= (unint64_t)(v65 & 0x7F) << v61;
              if (v65 < 0)
              {
                v61 += 7;
                BOOL v24 = v62++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_156;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_156:
          uint64_t v123 = *(int *)(v14 + 3580);
          goto LABEL_174;
        case 8u:
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x400u;
          while (2)
          {
            uint64_t v68 = *v3;
            unint64_t v69 = *(void *)(a2 + v68);
            if (v69 == -1 || v69 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v70 = *(unsigned char *)(*(void *)(a2 + *v9) + v69);
              *(void *)(a2 + v6_Block_object_dispose(&STACK[0x480], 8) = v69 + 1;
              v41 |= (unint64_t)(v70 & 0x7F) << v66;
              if (v70 < 0)
              {
                v66 += 7;
                BOOL v24 = v67++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_160;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_160:
          uint64_t v123 = *(int *)(v15 + 3584);
          goto LABEL_174;
        case 9u:
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v73 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x8000u;
          while (2)
          {
            uint64_t v74 = *v3;
            unint64_t v75 = *(void *)(a2 + v74);
            if (v75 == -1 || v75 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v76 = *(unsigned char *)(*(void *)(a2 + *v9) + v75);
              *(void *)(a2 + v74) = v75 + 1;
              v73 |= (unint64_t)(v76 & 0x7F) << v71;
              if (v76 < 0)
              {
                v71 += 7;
                BOOL v24 = v72++ >= 9;
                if (v24)
                {
                  uint64_t v73 = 0;
                  goto LABEL_164;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v73 = 0;
          }
LABEL_164:
          BOOL v124 = v73 != 0;
          uint64_t v125 = *(int *)(v16 + 3588);
LABEL_165:
          *(unsigned char *)(a1 + v125) = v124;
          continue;
        case 0xCu:
          char v77 = 0;
          unsigned int v78 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 2u;
          while (2)
          {
            uint64_t v79 = *v3;
            unint64_t v80 = *(void *)(a2 + v79);
            if (v80 == -1 || v80 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v81 = *(unsigned char *)(*(void *)(a2 + *v9) + v80);
              *(void *)(a2 + v79) = v80 + 1;
              v41 |= (unint64_t)(v81 & 0x7F) << v77;
              if (v81 < 0)
              {
                v77 += 7;
                BOOL v24 = v78++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_169;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_169:
          uint64_t v123 = *(int *)(v17 + 3592);
          goto LABEL_174;
        case 0xEu:
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 4u;
          while (2)
          {
            uint64_t v84 = *v3;
            unint64_t v85 = *(void *)(a2 + v84);
            if (v85 == -1 || v85 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v86 = *(unsigned char *)(*(void *)(a2 + *v9) + v85);
              *(void *)(a2 + v84) = v85 + 1;
              v41 |= (unint64_t)(v86 & 0x7F) << v82;
              if (v86 < 0)
              {
                v82 += 7;
                BOOL v24 = v83++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_173;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_173:
          uint64_t v123 = 20;
LABEL_174:
          *(_DWORD *)(a1 + v123) = v41;
          continue;
        case 0x15u:
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v89 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x1000u;
          while (2)
          {
            uint64_t v90 = *v3;
            unint64_t v91 = *(void *)(a2 + v90);
            if (v91 == -1 || v91 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v92 = *(unsigned char *)(*(void *)(a2 + *v9) + v91);
              *(void *)(a2 + v90) = v91 + 1;
              v89 |= (unint64_t)(v92 & 0x7F) << v87;
              if (v92 < 0)
              {
                v87 += 7;
                BOOL v24 = v88++ >= 9;
                if (v24)
                {
                  LODWORD(v89) = 0;
                  goto LABEL_178;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v89) = 0;
          }
LABEL_178:
          int v126 = -(v89 & 1) ^ ((int)v89 >> 1);
          uint64_t v127 = 60;
          goto LABEL_199;
        case 0x16u:
          char v93 = 0;
          unsigned int v94 = 0;
          uint64_t v95 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x2000u;
          while (2)
          {
            uint64_t v96 = *v3;
            unint64_t v97 = *(void *)(a2 + v96);
            if (v97 == -1 || v97 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v98 = *(unsigned char *)(*(void *)(a2 + *v9) + v97);
              *(void *)(a2 + v96) = v97 + 1;
              v95 |= (unint64_t)(v98 & 0x7F) << v93;
              if (v98 < 0)
              {
                v93 += 7;
                BOOL v24 = v94++ >= 9;
                if (v24)
                {
                  LODWORD(v95) = 0;
                  goto LABEL_182;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v95) = 0;
          }
LABEL_182:
          int v126 = -(v95 & 1) ^ ((int)v95 >> 1);
          uint64_t v127 = 64;
          goto LABEL_199;
        case 0x17u:
          char v99 = 0;
          unsigned int v100 = 0;
          uint64_t v101 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x40u;
          while (2)
          {
            uint64_t v102 = *v3;
            unint64_t v103 = *(void *)(a2 + v102);
            if (v103 == -1 || v103 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v104 = *(unsigned char *)(*(void *)(a2 + *v9) + v103);
              *(void *)(a2 + v102) = v103 + 1;
              v101 |= (unint64_t)(v104 & 0x7F) << v99;
              if (v104 < 0)
              {
                v99 += 7;
                BOOL v24 = v100++ >= 9;
                if (v24)
                {
                  LODWORD(v101) = 0;
                  goto LABEL_186;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v101) = 0;
          }
LABEL_186:
          int v126 = -(v101 & 1) ^ ((int)v101 >> 1);
          uint64_t v127 = 36;
          goto LABEL_199;
        case 0x18u:
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v107 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x10u;
          while (2)
          {
            uint64_t v108 = *v3;
            unint64_t v109 = *(void *)(a2 + v108);
            if (v109 == -1 || v109 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v110 = *(unsigned char *)(*(void *)(a2 + *v9) + v109);
              *(void *)(a2 + v10_Block_object_dispose(&STACK[0x480], 8) = v109 + 1;
              v107 |= (unint64_t)(v110 & 0x7F) << v105;
              if (v110 < 0)
              {
                v105 += 7;
                BOOL v24 = v106++ >= 9;
                if (v24)
                {
                  LODWORD(v107) = 0;
                  goto LABEL_190;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v107) = 0;
          }
LABEL_190:
          int v126 = -(v107 & 1) ^ ((int)v107 >> 1);
          uint64_t v127 = 28;
          goto LABEL_199;
        case 0x19u:
          char v111 = 0;
          unsigned int v112 = 0;
          uint64_t v113 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x20u;
          while (2)
          {
            uint64_t v114 = *v3;
            unint64_t v115 = *(void *)(a2 + v114);
            if (v115 == -1 || v115 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v116 = *(unsigned char *)(*(void *)(a2 + *v9) + v115);
              *(void *)(a2 + v114) = v115 + 1;
              v113 |= (unint64_t)(v116 & 0x7F) << v111;
              if (v116 < 0)
              {
                v111 += 7;
                BOOL v24 = v112++ >= 9;
                if (v24)
                {
                  LODWORD(v113) = 0;
                  goto LABEL_194;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v113) = 0;
          }
LABEL_194:
          int v126 = -(v113 & 1) ^ ((int)v113 >> 1);
          uint64_t v127 = 32;
          goto LABEL_199;
        case 0x1Au:
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v119 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3556)) |= 0x80u;
          break;
        default:
          unint64_t v33 = v8;
          unint64_t v34 = v10;
          unint64_t v35 = v11;
          unint64_t v36 = v7;
          unint64_t v37 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v12 = v37;
          unint64_t v13 = 0x1EA693000;
          unint64_t v7 = v36;
          unint64_t v14 = 0x1EA693000;
          unint64_t v11 = v35;
          unint64_t v15 = 0x1EA693000;
          unint64_t v10 = v34;
          unint64_t v17 = 0x1EA693000;
          unint64_t v8 = v33;
          unint64_t v16 = 0x1EA693000;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v120 = *v3;
        unint64_t v121 = *(void *)(a2 + v120);
        if (v121 == -1 || v121 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v122 = *(unsigned char *)(*(void *)(a2 + *v9) + v121);
        *(void *)(a2 + v120) = v121 + 1;
        v119 |= (unint64_t)(v122 & 0x7F) << v117;
        if ((v122 & 0x80) == 0) {
          goto LABEL_196;
        }
        v117 += 7;
        BOOL v24 = v118++ >= 9;
        if (v24)
        {
          LODWORD(v119) = 0;
          goto LABEL_198;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_196:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v119) = 0;
      }
LABEL_198:
      int v126 = -(v119 & 1) ^ ((int)v119 >> 1);
      uint64_t v127 = 40;
LABEL_199:
      *(_DWORD *)(a1 + v127) = v126;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackPowerStateReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 32) |= 1u;
              while (1)
              {
                uint64_t v20 = *v3;
                unint64_t v21 = *(void *)(a2 + v20);
                if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0) {
                  goto LABEL_58;
                }
                v17 += 7;
                BOOL v14 = v18++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_60;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_58:
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v19 = 0;
              }
LABEL_60:
              *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
              goto LABEL_78;
            case 2u:
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 8u;
              while (2)
              {
                uint64_t v31 = *v3;
                unint64_t v32 = *(void *)(a2 + v31);
                if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
                  *(void *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    BOOL v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_68;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_68:
              uint64_t v45 = 24;
              goto LABEL_77;
            case 3u:
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 2u;
              while (2)
              {
                uint64_t v36 = *v3;
                unint64_t v37 = *(void *)(a2 + v36);
                if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
                  *(void *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    BOOL v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_72;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_72:
              uint64_t v45 = 16;
              goto LABEL_77;
            case 4u:
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 4u;
              while (2)
              {
                uint64_t v41 = *v3;
                unint64_t v42 = *(void *)(a2 + v41);
                if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
                  *(void *)(a2 + v41) = v42 + 1;
                  v25 |= (unint64_t)(v43 & 0x7F) << v39;
                  if (v43 < 0)
                  {
                    v39 += 7;
                    BOOL v14 = v40++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_76;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_76:
              uint64_t v45 = 20;
              goto LABEL_77;
            default:
              if ((v10 >> 3) == 15)
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                *(unsigned char *)(a1 + 32) |= 0x10u;
                while (1)
                {
                  uint64_t v26 = *v3;
                  unint64_t v27 = *(void *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
                  *(void *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0) {
                    goto LABEL_62;
                  }
                  v23 += 7;
                  BOOL v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_64;
                  }
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
                if (*(unsigned char *)(a2 + *v5)) {
                  LODWORD(v25) = 0;
                }
LABEL_64:
                uint64_t v45 = 28;
LABEL_77:
                *(_DWORD *)(a1 + v45) = v25;
              }
              else
              {
                uint64_t result = PBReaderSkipValueWithTag();
                if (!result) {
                  return result;
                }
              }
LABEL_78:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __PLLogAudio_block_invoke()
{
  qword_1EBD58A98 = (uint64_t)os_log_create("com.apple.powerlog", "audio");
  return MEMORY[0x1F41817F8]();
}

uint64_t KCellularProtocolStackStateReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_57;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_59;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_57:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_59:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 32) |= 0x10u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                BOOL v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_63:
          uint64_t v45 = 28;
          goto LABEL_76;
        case 6u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v25 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_67:
          uint64_t v45 = 20;
          goto LABEL_76;
        case 7u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v25 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_71:
          uint64_t v45 = 16;
          goto LABEL_76;
        case 8u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 32) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v25 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0) {
          goto LABEL_73;
        }
        v40 += 7;
        BOOL v14 = v41++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_75;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_73:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v25) = 0;
      }
LABEL_75:
      uint64_t v45 = 24;
LABEL_76:
      *(_DWORD *)(a1 + v45) = v25;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PLLogProcessMonitor()
{
  if (qword_1EBD58AE0 != -1) {
    dispatch_once(&qword_1EBD58AE0, &__block_literal_global_34);
  }
  unsigned int v0 = (void *)qword_1EBD58AD8;
  return v0;
}

uint64_t __PLLogProcessMonitor_block_invoke()
{
  qword_1EBD58AD8 = (uint64_t)os_log_create("com.apple.powerlog", "processMonitor");
  return MEMORY[0x1F41817F8]();
}

void sub_1D290D810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void *timestampGetTimeval(void *result, uint64_t a2)
{
  unint64_t v2 = 5 * (*result >> 16) + (unsigned __int16)*result / 0x2667u + 2;
  *(void *)a2 = ((v2 * (unsigned __int128)0x10624DD2F1A9FCuLL) >> 64) + 315964800;
  *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x480], 8) = 1000 * ((v2 >> 2) - 1000 * (((v2 >> 2) * (unsigned __int128)0x4189374BC6A7F0uLL) >> 64));
  return result;
}

uint64_t KCellularLteComponentCarrierInfoReadFrom(char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = 0x1EA693000uLL;
  char v8 = (int *)MEMORY[0x1E4F940B8];
  unint64_t v9 = 0x1EA693000uLL;
  unint64_t v10 = 0x1EA693000uLL;
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      unint64_t v15 = *(void *)(a2 + v14);
      if (v15 == -1 || v15 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v16 = *(unsigned char *)(*(void *)(a2 + *v8) + v15);
      *(void *)(a2 + v14) = v15 + 1;
      v13 |= (unint64_t)(v16 & 0x7F) << v11;
      if ((v16 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v17 = v12++ >= 9;
      if (v17)
      {
        unint64_t v13 = 0;
        int v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v18 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 1u;
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v8) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_102;
          }
          v20 += 7;
          BOOL v17 = v21++ >= 9;
          if (v17)
          {
            uint64_t v22 = 0;
            goto LABEL_104;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_102:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_104:
        *(void *)&a1[*(int *)(v9 + 3900)] = v22;
        goto LABEL_146;
      case 2u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 4u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v8) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v17 = v27++ >= 9;
              if (v17)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
        }
LABEL_108:
        uint64_t v82 = *(int *)(v10 + 3904);
        goto LABEL_145;
      case 3u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v28 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 0x20u;
        while (2)
        {
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v8) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v28 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              BOOL v17 = v33++ >= 9;
              if (v17)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
        }
LABEL_112:
        uint64_t v82 = 40;
        goto LABEL_145;
      case 4u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v28 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 0x100u;
        while (2)
        {
          uint64_t v39 = *v3;
          unint64_t v40 = *(void *)(a2 + v39);
          if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + *v8) + v40);
            *(void *)(a2 + v39) = v40 + 1;
            v28 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              BOOL v17 = v38++ >= 9;
              if (v17)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
        }
LABEL_116:
        uint64_t v82 = 52;
        goto LABEL_145;
      case 5u:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v28 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 2u;
        while (2)
        {
          uint64_t v44 = *v3;
          unint64_t v45 = *(void *)(a2 + v44);
          if (v45 == -1 || v45 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v46 = *(unsigned char *)(*(void *)(a2 + *v8) + v45);
            *(void *)(a2 + v44) = v45 + 1;
            v28 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              v42 += 7;
              BOOL v17 = v43++ >= 9;
              if (v17)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
        }
LABEL_120:
        uint64_t v82 = 24;
        goto LABEL_145;
      case 6u:
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v28 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 0x10u;
        while (2)
        {
          uint64_t v49 = *v3;
          unint64_t v50 = *(void *)(a2 + v49);
          if (v50 == -1 || v50 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(a2 + *v8) + v50);
            *(void *)(a2 + v49) = v50 + 1;
            v28 |= (unint64_t)(v51 & 0x7F) << v47;
            if (v51 < 0)
            {
              v47 += 7;
              BOOL v17 = v48++ >= 9;
              if (v17)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
        }
LABEL_124:
        uint64_t v82 = 36;
        goto LABEL_145;
      case 7u:
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v28 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 0x80u;
        while (2)
        {
          uint64_t v54 = *v3;
          unint64_t v55 = *(void *)(a2 + v54);
          if (v55 == -1 || v55 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(a2 + *v8) + v55);
            *(void *)(a2 + v54) = v55 + 1;
            v28 |= (unint64_t)(v56 & 0x7F) << v52;
            if (v56 < 0)
            {
              v52 += 7;
              BOOL v17 = v53++ >= 9;
              if (v17)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
        }
LABEL_128:
        uint64_t v82 = 48;
        goto LABEL_145;
      case 8u:
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v28 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 8u;
        while (2)
        {
          uint64_t v59 = *v3;
          unint64_t v60 = *(void *)(a2 + v59);
          if (v60 == -1 || v60 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v61 = *(unsigned char *)(*(void *)(a2 + *v8) + v60);
            *(void *)(a2 + v59) = v60 + 1;
            v28 |= (unint64_t)(v61 & 0x7F) << v57;
            if (v61 < 0)
            {
              v57 += 7;
              BOOL v17 = v58++ >= 9;
              if (v17)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
        }
LABEL_132:
        uint64_t v82 = 32;
        goto LABEL_145;
      case 9u:
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v28 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 0x40u;
        while (2)
        {
          uint64_t v64 = *v3;
          unint64_t v65 = *(void *)(a2 + v64);
          if (v65 == -1 || v65 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(a2 + *v8) + v65);
            *(void *)(a2 + v64) = v65 + 1;
            v28 |= (unint64_t)(v66 & 0x7F) << v62;
            if (v66 < 0)
            {
              v62 += 7;
              BOOL v17 = v63++ >= 9;
              if (v17)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
        }
LABEL_136:
        uint64_t v82 = 44;
        goto LABEL_145;
      case 0xAu:
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v28 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 0x200u;
        while (2)
        {
          uint64_t v69 = *v3;
          unint64_t v70 = *(void *)(a2 + v69);
          if (v70 == -1 || v70 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v71 = *(unsigned char *)(*(void *)(a2 + *v8) + v70);
            *(void *)(a2 + v69) = v70 + 1;
            v28 |= (unint64_t)(v71 & 0x7F) << v67;
            if (v71 < 0)
            {
              v67 += 7;
              BOOL v17 = v68++ >= 9;
              if (v17)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
        }
LABEL_140:
        uint64_t v82 = 56;
        goto LABEL_145;
      case 0xBu:
        unint64_t v72 = v7;
        unint64_t v73 = v10;
        unint64_t v74 = v9;
        unint64_t v75 = objc_alloc_init(ComponentCarrierInfo);
        [a1 addCarrierInfo:v75];
        if (PBReaderPlaceMark() && ComponentCarrierInfoReadFrom((uint64_t)v75, a2))
        {
          PBReaderRecallMark();

          unint64_t v9 = v74;
          unint64_t v10 = v73;
          unint64_t v7 = v72;
LABEL_146:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 0xFu:
        char v77 = 0;
        unsigned int v78 = 0;
        uint64_t v28 = 0;
        *(_WORD *)&a1[*(int *)(v7 + 3896)] |= 0x400u;
        while (2)
        {
          uint64_t v79 = *v3;
          unint64_t v80 = *(void *)(a2 + v79);
          if (v80 == -1 || v80 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v81 = *(unsigned char *)(*(void *)(a2 + *v8) + v80);
            *(void *)(a2 + v79) = v80 + 1;
            v28 |= (unint64_t)(v81 & 0x7F) << v77;
            if (v81 < 0)
            {
              v77 += 7;
              BOOL v17 = v78++ >= 9;
              if (v17)
              {
                LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v2_Block_object_dispose(&STACK[0x480], 8) = 0;
        }
LABEL_144:
        uint64_t v82 = 60;
LABEL_145:
        *(_DWORD *)&a1[v82] = v28;
        goto LABEL_146;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_146;
    }
  }
}

uint64_t KCellularWcdmaRabStatusReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 32) |= 1u;
              while (1)
              {
                uint64_t v20 = *v3;
                unint64_t v21 = *(void *)(a2 + v20);
                if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0) {
                  goto LABEL_58;
                }
                v17 += 7;
                BOOL v14 = v18++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_60;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_58:
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v19 = 0;
              }
LABEL_60:
              *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
              goto LABEL_78;
            case 2u:
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 0x10u;
              while (2)
              {
                uint64_t v31 = *v3;
                unint64_t v32 = *(void *)(a2 + v31);
                if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
                  *(void *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    BOOL v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_68;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_68:
              uint64_t v45 = 28;
              goto LABEL_77;
            case 3u:
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 4u;
              while (2)
              {
                uint64_t v36 = *v3;
                unint64_t v37 = *(void *)(a2 + v36);
                if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
                  *(void *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    BOOL v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_72;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_72:
              uint64_t v45 = 20;
              goto LABEL_77;
            case 4u:
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v25 = 0;
              *(unsigned char *)(a1 + 32) |= 2u;
              while (2)
              {
                uint64_t v41 = *v3;
                unint64_t v42 = *(void *)(a2 + v41);
                if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
                  *(void *)(a2 + v41) = v42 + 1;
                  v25 |= (unint64_t)(v43 & 0x7F) << v39;
                  if (v43 < 0)
                  {
                    v39 += 7;
                    BOOL v14 = v40++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_76;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_76:
              uint64_t v45 = 16;
              goto LABEL_77;
            default:
              if ((v10 >> 3) == 15)
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                *(unsigned char *)(a1 + 32) |= 8u;
                while (1)
                {
                  uint64_t v26 = *v3;
                  unint64_t v27 = *(void *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
                  *(void *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0) {
                    goto LABEL_62;
                  }
                  v23 += 7;
                  BOOL v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_64;
                  }
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
                if (*(unsigned char *)(a2 + *v5)) {
                  LODWORD(v25) = 0;
                }
LABEL_64:
                uint64_t v45 = 24;
LABEL_77:
                *(_DWORD *)(a1 + v45) = v25;
              }
              else
              {
                uint64_t result = PBReaderSkipValueWithTag();
                if (!result) {
                  return result;
                }
              }
LABEL_78:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackCpuStatsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_46;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_48;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_48:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
        goto LABEL_58;
      case 2u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                LODWORD(v26) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_52:
        uint64_t v36 = 24;
        goto LABEL_57;
      case 3u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (2)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v26 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v14 = v31++ >= 9;
              if (v14)
              {
                LODWORD(v26) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_56:
        uint64_t v36 = 28;
LABEL_57:
        *(_DWORD *)(a1 + v36) = v26;
        goto LABEL_58;
      case 4u:
        unsigned int v35 = objc_alloc_init(CStat);
        [(id)a1 addCores:v35];
        if (PBReaderPlaceMark() && CStatReadFrom((uint64_t)v35, a2))
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_58;
    }
  }
}

uint64_t KCellularLteCdrxConfigReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = 0x1EA693000uLL;
    char v8 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v9 = 0x1EA693000uLL;
    unint64_t v10 = 0x1EA693000uLL;
    unint64_t v11 = 0x1EA693000uLL;
    unint64_t v12 = 0x1EA693000uLL;
    unint64_t v13 = 0x1EA693000uLL;
    unint64_t v14 = 0x1EA693000uLL;
    unint64_t v15 = 0x1EA693000uLL;
    unint64_t v16 = 0x1EA693000uLL;
    unint64_t v17 = 0x1EA693000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v8) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 1u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v8) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_106;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              uint64_t v29 = 0;
              goto LABEL_108;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_106:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v29 = 0;
          }
LABEL_108:
          *(void *)(a1 + *(int *)(v9 + 3996)) = v29;
          continue;
        case 2u:
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 4u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v8) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                BOOL v24 = v34++ >= 9;
                if (v24)
                {
                  LODWORD(v35) = 0;
                  goto LABEL_112;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v35) = 0;
          }
LABEL_112:
          uint64_t v95 = *(int *)(v10 + 4000);
          goto LABEL_153;
        case 3u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 0x80u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v8) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v35 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  LODWORD(v35) = 0;
                  goto LABEL_116;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v35) = 0;
          }
LABEL_116:
          uint64_t v95 = *(int *)(v11 + 4004);
          goto LABEL_153;
        case 4u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 8u;
          while (2)
          {
            uint64_t v46 = *v3;
            unint64_t v47 = *(void *)(a2 + v46);
            if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v8) + v47);
              *(void *)(a2 + v46) = v47 + 1;
              v35 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v24 = v45++ >= 9;
                if (v24)
                {
                  LODWORD(v35) = 0;
                  goto LABEL_120;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v35) = 0;
          }
LABEL_120:
          uint64_t v95 = *(int *)(v12 + 4008);
          goto LABEL_153;
        case 5u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 0x10u;
          while (2)
          {
            uint64_t v51 = *v3;
            unint64_t v52 = *(void *)(a2 + v51);
            if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v8) + v52);
              *(void *)(a2 + v51) = v52 + 1;
              v35 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                BOOL v24 = v50++ >= 9;
                if (v24)
                {
                  LODWORD(v35) = 0;
                  goto LABEL_124;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v35) = 0;
          }
LABEL_124:
          uint64_t v95 = *(int *)(v13 + 4012);
          goto LABEL_153;
        case 7u:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 0x40u;
          while (2)
          {
            uint64_t v62 = *v3;
            unint64_t v63 = *(void *)(a2 + v62);
            if (v63 == -1 || v63 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v64 = *(unsigned char *)(*(void *)(a2 + *v8) + v63);
              *(void *)(a2 + v62) = v63 + 1;
              v35 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                BOOL v24 = v61++ >= 9;
                if (v24)
                {
                  LODWORD(v35) = 0;
                  goto LABEL_128;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v35) = 0;
          }
LABEL_128:
          uint64_t v95 = *(int *)(v14 + 4016);
          goto LABEL_153;
        case 0xAu:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 0x200u;
          while (2)
          {
            uint64_t v67 = *v3;
            unint64_t v68 = *(void *)(a2 + v67);
            if (v68 == -1 || v68 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v69 = *(unsigned char *)(*(void *)(a2 + *v8) + v68);
              *(void *)(a2 + v67) = v68 + 1;
              v35 |= (unint64_t)(v69 & 0x7F) << v65;
              if (v69 < 0)
              {
                v65 += 7;
                BOOL v24 = v66++ >= 9;
                if (v24)
                {
                  LODWORD(v35) = 0;
                  goto LABEL_132;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v35) = 0;
          }
LABEL_132:
          uint64_t v95 = *(int *)(v15 + 4020);
          goto LABEL_153;
        case 0xBu:
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 0x20u;
          while (2)
          {
            uint64_t v72 = *v3;
            unint64_t v73 = *(void *)(a2 + v72);
            if (v73 == -1 || v73 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v74 = *(unsigned char *)(*(void *)(a2 + *v8) + v73);
              *(void *)(a2 + v72) = v73 + 1;
              v35 |= (unint64_t)(v74 & 0x7F) << v70;
              if (v74 < 0)
              {
                v70 += 7;
                BOOL v24 = v71++ >= 9;
                if (v24)
                {
                  LODWORD(v35) = 0;
                  goto LABEL_136;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v35) = 0;
          }
LABEL_136:
          uint64_t v95 = *(int *)(v16 + 4024);
          goto LABEL_153;
        case 0xCu:
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 0x100u;
          while (2)
          {
            uint64_t v77 = *v3;
            unint64_t v78 = *(void *)(a2 + v77);
            if (v78 == -1 || v78 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v79 = *(unsigned char *)(*(void *)(a2 + *v8) + v78);
              *(void *)(a2 + v77) = v78 + 1;
              v35 |= (unint64_t)(v79 & 0x7F) << v75;
              if (v79 < 0)
              {
                v75 += 7;
                BOOL v24 = v76++ >= 9;
                if (v24)
                {
                  LODWORD(v35) = 0;
                  goto LABEL_140;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v35) = 0;
          }
LABEL_140:
          uint64_t v95 = *(int *)(v17 + 4028);
          goto LABEL_153;
        case 0xDu:
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 2u;
          while (2)
          {
            uint64_t v82 = *v3;
            unint64_t v83 = *(void *)(a2 + v82);
            if (v83 == -1 || v83 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v84 = *(unsigned char *)(*(void *)(a2 + *v8) + v83);
              *(void *)(a2 + v82) = v83 + 1;
              v35 |= (unint64_t)(v84 & 0x7F) << v80;
              if (v84 < 0)
              {
                v80 += 7;
                BOOL v24 = v81++ >= 9;
                if (v24)
                {
                  LODWORD(v35) = 0;
                  goto LABEL_144;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v35) = 0;
          }
LABEL_144:
          uint64_t v95 = 16;
          goto LABEL_153;
        case 0xEu:
          char v85 = 0;
          unsigned int v86 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 0x800u;
          while (2)
          {
            uint64_t v87 = *v3;
            unint64_t v88 = *(void *)(a2 + v87);
            if (v88 == -1 || v88 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v89 = *(unsigned char *)(*(void *)(a2 + *v8) + v88);
              *(void *)(a2 + v87) = v88 + 1;
              v35 |= (unint64_t)(v89 & 0x7F) << v85;
              if (v89 < 0)
              {
                v85 += 7;
                BOOL v24 = v86++ >= 9;
                if (v24)
                {
                  LODWORD(v35) = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v35) = 0;
          }
LABEL_148:
          uint64_t v95 = 56;
          goto LABEL_153;
        case 0xFu:
          char v90 = 0;
          unsigned int v91 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3992)) |= 0x400u;
          break;
        default:
          unint64_t v54 = v9;
          unint64_t v55 = v10;
          unint64_t v56 = v11;
          unint64_t v57 = v7;
          unint64_t v58 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v12 = v58;
          unint64_t v13 = 0x1EA693000;
          unint64_t v7 = v57;
          unint64_t v14 = 0x1EA693000;
          unint64_t v11 = v56;
          unint64_t v15 = 0x1EA693000;
          unint64_t v10 = v55;
          unint64_t v17 = 0x1EA693000;
          unint64_t v9 = v54;
          unint64_t v16 = 0x1EA693000;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v92 = *v3;
        unint64_t v93 = *(void *)(a2 + v92);
        if (v93 == -1 || v93 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v94 = *(unsigned char *)(*(void *)(a2 + *v8) + v93);
        *(void *)(a2 + v92) = v93 + 1;
        v35 |= (unint64_t)(v94 & 0x7F) << v90;
        if ((v94 & 0x80) == 0) {
          goto LABEL_150;
        }
        v90 += 7;
        BOOL v24 = v91++ >= 9;
        if (v24)
        {
          LODWORD(v35) = 0;
          goto LABEL_152;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_150:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v35) = 0;
      }
LABEL_152:
      uint64_t v95 = 52;
LABEL_153:
      *(_DWORD *)(a1 + v95) = v35;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularLteFwDuplexModeReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        *(_DWORD *)(a1 + 16) = v26;
      }
      else if (v17 == 2)
      {
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
          *(void *)(a2 + v33) = v34 + 1;
          v32 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            uint64_t v32 = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
LABEL_55:
        *(unsigned char *)(a1 + 20) = v32 != 0;
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_45;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_47:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __PLLogCoalition_block_invoke()
{
  qword_1EBD58CB0 = (uint64_t)os_log_create("com.apple.powerlog", "coalition");
  return MEMORY[0x1F41817F8]();
}

void sub_1D2924D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D2928B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose((const void *)(v11 - 160), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularWcdmaL1StateReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D292D540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D292D744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *dataIndicatorToString(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1 < 0x11) {
    return off_1E692F030[(int)a1];
  }
  unint64_t v2 = objc_msgSend(NSString, "stringWithFormat:", @"Unknown CTDataIndicatorStatus: %d", a1);
  uint64_t v3 = (void *)MEMORY[0x1E4F929B8];
  uint64_t v4 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m"];
  uint64_t v5 = [v4 lastPathComponent];
  uint64_t v6 = [NSString stringWithUTF8String:"dataIndicatorToString"];
  [v3 logMessage:v2 fromFile:v5 fromFunction:v6 fromLineNumber:2057];

  unint64_t v7 = PLLogCommon();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    unsigned int v9 = v2;
    _os_log_debug_impl(&dword_1D2690000, v7, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
  }

  return @"Unknown";
}

void sub_1D29324F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Unwind_Resume(a1);
}

void TimeUpdateNotificationCB(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2 && a5)
  {
    unint64_t v7 = +[PLBBAgent getBBAgent];
    if (v7)
    {
      if (a3)
      {
        a3 = [NSString stringWithString:a3];
      }
      char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithDictionary:a5];
      if ([a3 isEqualToString:*MEMORY[0x1E4F24298]])
      {
        [v7 processTimeUpdateInfoDict:v8];
      }
      else if ([MEMORY[0x1E4F929C0] debugEnabled])
      {
        uint64_t v9 = objc_opt_class();
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __TimeUpdateNotificationCB_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0lu32l8;
        void block[4] = v9;
        if (qword_1EBD5B570 != -1) {
          dispatch_once(&qword_1EBD5B570, block);
        }
        if (byte_1EBD58F26)
        {
          uint64_t v10 = [NSString stringWithFormat:@"BB time update expected but absent"];
          uint64_t v11 = (void *)MEMORY[0x1E4F929B8];
          unint64_t v12 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m"];
          char v13 = [v12 lastPathComponent];
          BOOL v14 = [NSString stringWithUTF8String:"TimeUpdateNotificationCB"];
          [v11 logMessage:v10 fromFile:v13 fromFunction:v14 fromLineNumber:10082];

          int v15 = PLLogCommon();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 138412290;
            char v18 = v10;
            _os_log_debug_impl(&dword_1D2690000, v15, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
          }
        }
      }
    }
  }
}

void TelephonyActivityNotificationCB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if ([MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v7 = objc_opt_class();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __TelephonyActivityNotificationCB_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    void block[4] = v7;
    if (qword_1EBD5B560 != -1) {
      dispatch_once(&qword_1EBD5B560, block);
    }
    if (byte_1EBD58F24)
    {
      char v8 = objc_msgSend(NSString, "stringWithFormat:", @"%s", "TelephonyActivityNotificationCB");
      uint64_t v9 = (void *)MEMORY[0x1E4F929B8];
      uint64_t v10 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m"];
      uint64_t v11 = [v10 lastPathComponent];
      unint64_t v12 = [NSString stringWithUTF8String:"TelephonyActivityNotificationCB"];
      [v9 logMessage:v8 fromFile:v11 fromFunction:v12 fromLineNumber:9742];

      char v13 = PLLogCommon();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        char v24 = v8;
        _os_log_debug_impl(&dword_1D2690000, v13, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
  if (a5)
  {
    BOOL v14 = +[PLBBAgent getBBAgent];
    if (!v14)
    {
LABEL_18:

      return;
    }
    int v15 = [a5 mutableCopy];
    objc_msgSend(v14, "telephonyActivityNotificationCB_Agent:withName:", v15, a3);
LABEL_17:

    goto LABEL_18;
  }
  if ([MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v16 = objc_opt_class();
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __TelephonyActivityNotificationCB_block_invoke_5584;
    v21[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    v21[4] = v16;
    if (qword_1EBD5B568 != -1) {
      dispatch_once(&qword_1EBD5B568, v21);
    }
    if (byte_1EBD58F25)
    {
      BOOL v14 = [NSString stringWithFormat:@"Bad userInfo in Tel CB"];
      unint64_t v17 = (void *)MEMORY[0x1E4F929B8];
      char v18 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m"];
      uint64_t v19 = [v18 lastPathComponent];
      uint64_t v20 = [NSString stringWithUTF8String:"TelephonyActivityNotificationCB"];
      [v17 logMessage:v14 fromFile:v19 fromFunction:v20 fromLineNumber:9744];

      int v15 = PLLogCommon();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        char v24 = v14;
        _os_log_debug_impl(&dword_1D2690000, v15, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
      goto LABEL_17;
    }
  }
}

void BasebandResetCallback(void *a1, uint64_t a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (([MEMORY[0x1E4F92A38] isBasebandProto] & 1) != 0
    || ([MEMORY[0x1E4F92A38] isBasebandMav] & 1) != 0
    || [MEMORY[0x1E4F92A38] isBasebandIce])
  {
    if ([MEMORY[0x1E4F929C0] debugEnabled])
    {
      uint64_t v5 = [NSString stringWithFormat:@"BasebandResetCallback not valid for Protobuf platforms"];
      uint64_t v6 = (void *)MEMORY[0x1E4F929B8];
      uint64_t v7 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m"];
      char v8 = [v7 lastPathComponent];
      uint64_t v9 = [NSString stringWithUTF8String:"BasebandResetCallback"];
      [v6 logMessage:v5 fromFile:v8 fromFunction:v9 fromLineNumber:9662];

      uint64_t v10 = PLLogCommon();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        unint64_t v37 = v5;
        _os_log_debug_impl(&dword_1D2690000, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
    if ([MEMORY[0x1E4F929C0] debugEnabled]) {
      __assert_rtn("BasebandResetCallback", "PLBBAgent.m", 9663, "0");
    }
  }
  else if (a3 == -469794815)
  {
    if ([MEMORY[0x1E4F929C0] debugEnabled])
    {
      uint64_t v19 = objc_opt_class();
      uint64_t v27 = MEMORY[0x1E4F143A8];
      uint64_t v28 = 3221225472;
      char v29 = __BasebandResetCallback_block_invoke_5557;
      char v30 = &unk_1E692A830;
      unsigned int v31 = @"Critical";
      uint64_t v32 = v19;
      if (qword_1EBD5B558 != -1) {
        dispatch_once(&qword_1EBD5B558, &v27);
      }
      int v20 = byte_1EBD58F23;

      if (v20)
      {
        uint64_t v21 = objc_msgSend(NSString, "stringWithFormat:", @"Baseband reset callback: state=recovered", v27, v28, v29, v30);
        unint64_t v22 = (void *)MEMORY[0x1E4F929B8];
        char v23 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m"];
        char v24 = [v23 lastPathComponent];
        uint64_t v25 = [NSString stringWithUTF8String:"BasebandResetCallback"];
        [v22 logMessage:v21 fromFile:v24 fromFunction:v25 fromLineNumber:9673];

        uint64_t v26 = PLLogCommon();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138412290;
          unint64_t v37 = v21;
          _os_log_debug_impl(&dword_1D2690000, v26, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
        }
      }
    }
    objc_msgSend(a1, "setupBBChannelsWithAction:", 1, v27, v28, v29, v30);
  }
  else if (a3 == -469794816 && [MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v11 = objc_opt_class();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __BasebandResetCallback_block_invoke;
    block[3] = &unk_1E692A830;
    char v34 = @"Critical";
    uint64_t v35 = v11;
    if (qword_1EBD5B550 != -1) {
      dispatch_once(&qword_1EBD5B550, block);
    }
    int v12 = byte_1EBD58F22;

    if (v12)
    {
      char v13 = [NSString stringWithFormat:@"Baseband reset callback: state=reset"];
      BOOL v14 = (void *)MEMORY[0x1E4F929B8];
      int v15 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m"];
      uint64_t v16 = [v15 lastPathComponent];
      unint64_t v17 = [NSString stringWithUTF8String:"BasebandResetCallback"];
      [v14 logMessage:v13 fromFile:v16 fromFunction:v17 fromLineNumber:9669];

      char v18 = PLLogCommon();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        unint64_t v37 = v13;
        _os_log_debug_impl(&dword_1D2690000, v18, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
}

#error "1D294461C: too big function (funcsize=0)"

void preferencesChanged(uint64_t a1, char a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if ((a2 & 2) == 0)
  {
    unint64_t v2 = [NSString stringWithFormat:@"***error**** unexpected notification type cannot handle"];
    uint64_t v3 = (void *)MEMORY[0x1E4F929B8];
    uint64_t v4 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m"];
    uint64_t v5 = [v4 lastPathComponent];
    uint64_t v6 = [NSString stringWithUTF8String:"preferencesChanged"];
    [v3 logMessage:v2 fromFile:v5 fromFunction:v6 fromLineNumber:9784];

    uint64_t v7 = PLLogCommon();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      unsigned int v31 = v2;
      _os_log_debug_impl(&dword_1D2690000, v7, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
    }
LABEL_21:

    goto LABEL_22;
  }
  unint64_t v2 = +[PLBBAgent getBBAgent];
  if (v2)
  {
    SCPreferencesSynchronize((SCPreferencesRef)qword_1EBD5B4F0);
    CFPropertyListRef Value = SCPreferencesGetValue((SCPreferencesRef)qword_1EBD5B4F0, @"AirplaneMode");
    uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
    uint64_t v10 = objc_opt_class();
    blocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v26 = 3221225472;
    uint64_t v27 = __preferencesChanged_block_invoke;
    uint64_t v28 = &__block_descriptor_40_e5_v8__0lu32l8;
    uint64_t v29 = v10;
    if (qword_1EBD5B500 != -1) {
      dispatch_once(&qword_1EBD5B500, &block);
    }
    CFPropertyListRef v11 = *v9;
    if (byte_1EBD58F18)
    {
      int v12 = "off";
      if (Value == v11) {
        int v12 = "on";
      }
      char v13 = objc_msgSend(NSString, "stringWithFormat:", @"AirplaneMode is %s", v12, block, v26, v27, v28, v29);
      BOOL v14 = (void *)MEMORY[0x1E4F929B8];
      int v15 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m"];
      uint64_t v16 = [v15 lastPathComponent];
      unint64_t v17 = [NSString stringWithUTF8String:"preferencesChanged"];
      [v14 logMessage:v13 fromFile:v16 fromFunction:v17 fromLineNumber:9799];

      char v18 = PLLogCommon();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        unsigned int v31 = v13;
        _os_log_debug_impl(&dword_1D2690000, v18, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
    if (Value == v11) {
      uint64_t v19 = @"on";
    }
    else {
      uint64_t v19 = @"off";
    }
    if ([airplaneModeCurrent isEqualToString:v19])
    {
      uint64_t v7 = [NSString stringWithFormat:@"***error**** airplane mode chg cb didn't report any chg"];
      int v20 = (void *)MEMORY[0x1E4F929B8];
      uint64_t v21 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Radios/PLBBAgent.m"];
      unint64_t v22 = [v21 lastPathComponent];
      char v23 = [NSString stringWithUTF8String:"preferencesChanged"];
      [v20 logMessage:v7 fromFile:v22 fromFunction:v23 fromLineNumber:9804];

      char v24 = PLLogCommon();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        unsigned int v31 = v7;
        _os_log_debug_impl(&dword_1D2690000, v24, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
    else
    {
      objc_storeStrong((id *)&airplaneModeCurrent, v19);
      uint64_t v7 = [v2 telActMsgHelper];
      [v7 setAirplaneMode:airplaneModeCurrent];
      [v7 logPointIntervalTelephonyActivityAirplaneModeChange];
    }
    goto LABEL_21;
  }
LABEL_22:
}

uint64_t __preferencesChanged_block_invoke(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD58F18 = result;
  return result;
}

uint64_t __BasebandResetCallback_block_invoke(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 40) forKey:*(void *)(a1 + 32)];
  byte_1EBD58F22 = result;
  return result;
}

uint64_t __BasebandResetCallback_block_invoke_5557(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 40) forKey:*(void *)(a1 + 32)];
  byte_1EBD58F23 = result;
  return result;
}

uint64_t __TelephonyActivityNotificationCB_block_invoke(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD58F24 = result;
  return result;
}

uint64_t __TelephonyActivityNotificationCB_block_invoke_5584(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD58F25 = result;
  return result;
}

uint64_t __TimeUpdateNotificationCB_block_invoke(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD58F26 = result;
  return result;
}

void logRunStateNotificationReceived(uint64_t a1, void *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v2 = *MEMORY[0x1E4F92D30];
    id v3 = a2;
    uint64_t v4 = +[PLOperator entryKeyForType:v2 andName:@"State"];
    uint64_t v7 = @"State";
    v8[0] = &unk_1F29E6748;
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:&v7 count:1];
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F929D0]) initWithEntryKey:v4 withRawData:v5];
    [v3 logEntry:v6];
  }
}

void logPauseStateNotificationReceived(uint64_t a1, void *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v2 = *MEMORY[0x1E4F92D30];
    id v3 = a2;
    uint64_t v4 = +[PLOperator entryKeyForType:v2 andName:@"State"];
    uint64_t v7 = @"State";
    v8[0] = &unk_1F29E6760;
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:&v7 count:1];
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F929D0]) initWithEntryKey:v4 withRawData:v5];
    [v3 logEntry:v6];
  }
}

uint64_t AWDMETRICSCellularPowerLogGSMRRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_74:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_86:
      uint64_t v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL FilterReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            char v24 = &OBJC_IVAR___Filter__protocol;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            char v24 = &OBJC_IVAR___Filter__protocol;
            goto LABEL_41;
          }
        }
        char v24 = &OBJC_IVAR___Filter__protocol;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 1u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        char v24 = &OBJC_IVAR___Filter__port;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        char v24 = &OBJC_IVAR___Filter__port;
        goto LABEL_41;
      }
    }
    char v24 = &OBJC_IVAR___Filter__port;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t pushConfigToAggd(uint64_t a1, void *a2)
{
  if (a2) {
    return [a2 aggdTimerFired];
  }
  return result;
}

void sub_1D29929B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D2992D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1D299B840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1D299BB0C(void *a1, int a2)
{
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x1D299BAE0);
  }
  objc_exception_rethrow();
}

void sub_1D299BB44(_Unwind_Exception *a1)
{
}

void sub_1D299C390(void *a1, int a2)
{
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x1D299C354);
  }
  objc_exception_rethrow();
}

void sub_1D299C3C0(_Unwind_Exception *a1)
{
}

void sub_1D299C494(_Unwind_Exception *a1)
{
}

void sub_1D299C74C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v13 = objc_begin_catch(a1);
      BOOL v14 = PLLogCommon();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v13;
        _os_log_error_impl(&dword_1D2690000, v14, OS_LOG_TYPE_ERROR, "Error parsing TAHighSoc: %@", (uint8_t *)&buf, 0xCu);
      }

      objc_end_catch();
      JUMPOUT(0x1D299C634);
    }
    objc_begin_catch(a1);
    JUMPOUT(0x1D299C6C8);
  }
  _Unwind_Resume(a1);
}

void sub_1D299C9D8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v13 = objc_begin_catch(a1);
      BOOL v14 = PLLogCommon();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v13;
        _os_log_error_impl(&dword_1D2690000, v14, OS_LOG_TYPE_ERROR, "Error parsing lowVoltageResidencyCounters: %@", (uint8_t *)&buf, 0xCu);
      }

      objc_end_catch();
      JUMPOUT(0x1D299C8A0);
    }
    objc_begin_catch(a1);
    JUMPOUT(0x1D299C94CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D299CD30(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1D299CD3CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D299CD4C(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_1D299CD5C(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1D299CD68);
}

void sub_1D299D038(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1D299D044);
  }
  _Unwind_Resume(a1);
}

void sub_1D299D058(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_1D299D068(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1D299D074);
}

void sub_1D29A0638(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t block, uint64_t a19, uint64_t (*a20)(uint64_t a1),void *a21,uint64_t a22,long long buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v23 = objc_begin_catch(a1);
      if ([MEMORY[0x1E4F929C0] debugEnabled])
      {
        uint64_t v24 = objc_opt_class();
        blocuint64_t k = MEMORY[0x1E4F143A8];
        a19 = 3221225472;
        a20 = __46__PLBatteryAgent_logEventPointBatteryShutdown__block_invoke;
        a21 = &__block_descriptor_40_e5_v8__0lu32l8;
        a22 = v24;
        if (qword_1EBD5CC68 != -1) {
          dispatch_once(&qword_1EBD5CC68, &block);
        }
        if (byte_1EBD5CA97)
        {
          char v25 = [NSString stringWithFormat:@"BatteryShutdown data could not be parsed"];
          unsigned int v26 = (void *)MEMORY[0x1E4F929B8];
          uint64_t v27 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Hardware/PLBatteryAgent.m"];
          unint64_t v28 = [v27 lastPathComponent];
          char v29 = [NSString stringWithUTF8String:"-[PLBatteryAgent logEventPointBatteryShutdown]"];
          [v26 logMessage:v25 fromFile:v28 fromFunction:v29 fromLineNumber:7394];

          char v30 = PLLogCommon();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v25;
            _os_log_debug_impl(&dword_1D2690000, v30, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
          }
        }
      }

      objc_end_catch();
      JUMPOUT(0x1D29A05ECLL);
    }
    objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1D29A3344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t (*a23)(uint64_t a1),void *a24,uint64_t a25)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v26 = objc_begin_catch(exception_object);
      if ([MEMORY[0x1E4F929C0] debugEnabled])
      {
        uint64_t v27 = objc_opt_class();
        a21 = MEMORY[0x1E4F143A8];
        a22 = 3221225472;
        a23 = __55__PLBatteryAgent_logEventNoneBatteryConfigWithRawData___block_invoke_5064;
        a24 = &__block_descriptor_40_e5_v8__0lu32l8;
        a25 = v27;
        unint64_t v28 = &a21;
        if (qword_1EBD5CC90 != -1) {
          dispatch_once(&qword_1EBD5CC90, v28);
        }

        if (byte_1EBD5CA9C)
        {
          char v29 = [NSString stringWithFormat:@"BatteryConfig data could not be parsed"];
          char v30 = (void *)MEMORY[0x1E4F929B8];
          unsigned int v31 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Agents/Hardware/PLBatteryAgent.m"];
          uint64_t v32 = [v31 lastPathComponent];
          unint64_t v33 = [NSString stringWithUTF8String:"-[PLBatteryAgent logEventNoneBatteryConfigWithRawData:]"];
          [v30 logMessage:v29 fromFile:v32 fromFunction:v33 fromLineNumber:7886];

          char v34 = PLLogCommon();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)(v25 - 176) = 138412290;
            *(void *)(v25 - 172) = v29;
            _os_log_debug_impl(&dword_1D2690000, v34, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)(v25 - 176), 0xCu);
          }
        }
      }

      objc_end_catch();
      JUMPOUT(0x1D29A303CLL);
    }
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

id PLLogBH()
{
  if (qword_1EBD5CDC0 != -1) {
    dispatch_once(&qword_1EBD5CDC0, &__block_literal_global_5393);
  }
  unsigned int v0 = (void *)qword_1EBD5CDB8;
  return v0;
}

uint64_t __PLLogBH_block_invoke()
{
  qword_1EBD5CDB8 = (uint64_t)os_log_create("com.apple.powerlog", "batteryhealth");
  return MEMORY[0x1F41817F8]();
}

void sub_1D29ADF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 208), 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  _Unwind_Resume(a1);
}

void networkLinkQualityChangeCallback(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithArray:a2 copyItems:1];
  uint64_t v6 = (void *)MEMORY[0x1D942A350]();
  [v7 networkLinkQualityChanged:a1 withChangedKeys:v5];
}

BOOL RegulatorAverageCurrentReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 4u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__regulatorId;
              goto LABEL_53;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__regulatorId;
              goto LABEL_56;
            }
          }
          uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__regulatorId;
          goto LABEL_54;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__sampleCount;
              goto LABEL_53;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__sampleCount;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__sampleCount;
          goto LABEL_54;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__duration64ms;
              goto LABEL_53;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__duration64ms;
                goto LABEL_56;
              }
              continue;
            }
            break;
          }
          uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__duration64ms;
          goto LABEL_54;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v19 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
        {
          uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__averageCurrentMa;
          goto LABEL_54;
        }
        v35 += 7;
        BOOL v23 = v36++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__averageCurrentMa;
          goto LABEL_56;
        }
      }
      uint64_t v24 = &OBJC_IVAR___RegulatorAverageCurrent__averageCurrentMa;
LABEL_53:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_56:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackHistArrayReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_53;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_55:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
        goto LABEL_69;
      case 2u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_59:
        uint64_t v41 = 32;
        goto LABEL_68;
      case 3u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 40) |= 8u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v25 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_63:
        uint64_t v41 = 36;
        goto LABEL_68;
      case 6u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (2)
        {
          uint64_t v37 = *v3;
          unint64_t v38 = *(void *)(a2 + v37);
          if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v25 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v14 = v36++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_67:
        uint64_t v41 = 16;
LABEL_68:
        *(_DWORD *)(a1 + v41) = v25;
        goto LABEL_69;
      case 7u:
        char v40 = objc_alloc_init(Histogram);
        [(id)a1 addHist:v40];
        if PBReaderPlaceMark() && (HistogramReadFrom((uint64_t)v40, a2))
        {
          PBReaderRecallMark();

LABEL_69:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_69;
    }
  }
}

uint64_t KCellularCdmaEvdoRrStateReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                BOOL v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_70:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 6u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v25 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_74:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 7u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v25 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_78:
          uint64_t v50 = 16;
          goto LABEL_87;
        case 8u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v25 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_82:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 9u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v25 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v25) = 0;
      }
LABEL_86:
      uint64_t v50 = 20;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v25;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackPerStateHistReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_53;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_55:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
        goto LABEL_69;
      case 2u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_59:
        uint64_t v41 = 32;
        goto LABEL_68;
      case 3u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 40) |= 8u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v25 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_63:
        uint64_t v41 = 36;
        goto LABEL_68;
      case 6u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (2)
        {
          uint64_t v37 = *v3;
          unint64_t v38 = *(void *)(a2 + v37);
          if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v25 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v14 = v36++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_67:
        uint64_t v41 = 16;
LABEL_68:
        *(_DWORD *)(a1 + v41) = v25;
        goto LABEL_69;
      case 7u:
        char v40 = objc_alloc_init(StateHist);
        [(id)a1 addHist:v40];
        if PBReaderPlaceMark() && (StateHistReadFrom((uint64_t)v40, a2))
        {
          PBReaderRecallMark();

LABEL_69:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_69;
    }
  }
}

void logFieldChangedNotificationReceived(uint64_t a1, void *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = v2;
  if (v2 && [v2 isDebugEnabled])
  {
    uint64_t v4 = +[PLOperator entryKeyForType:*MEMORY[0x1E4F92D30] andName:@"Field"];
    char v8 = @"State";
    uint64_t v5 = [NSNumber numberWithBool:logFieldChangedNotificationReceived_fieldState];
    v9[0] = v5;
    uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];

    id v7 = (void *)[objc_alloc(MEMORY[0x1E4F929D0]) initWithEntryKey:v4 withRawData:v6];
    [v3 fieldChangedWithEntry:v7];
    logFieldChangedNotificationReceived_fieldState ^= 1u;
  }
}

uint64_t AWDMETRICSCellularPowerLog1xEVDORRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_74:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_86:
      uint64_t v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void TelephonyNotificationCallback()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ([MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v0 = objc_opt_class();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __TelephonyNotificationCallback_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0lu32l8;
    void block[4] = v0;
    if (qword_1EBD5C518 != -1) {
      dispatch_once(&qword_1EBD5C518, block);
    }
    if (byte_1EBD5C4B9)
    {
      char v1 = [NSString stringWithFormat:@"LConnection with CT reseted"];
      id v2 = (void *)MEMORY[0x1E4F929B8];
      id v3 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Compositions/Baseband/PLTelephonyConnection.m"];
      uint64_t v4 = [v3 lastPathComponent];
      uint64_t v5 = [NSString stringWithUTF8String:"TelephonyNotificationCallback"];
      [v2 logMessage:v1 fromFile:v4 fromFunction:v5 fromLineNumber:341];

      uint64_t v6 = PLLogCommon();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        unsigned int v9 = v1;
        _os_log_debug_impl(&dword_1D2690000, v6, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
}

void sub_1D29C9574(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ServerConnectionCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ([MEMORY[0x1E4F929C0] debugEnabled])
  {
    uint64_t v3 = objc_opt_class();
    blocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v11 = 3221225472;
    unint64_t v12 = __ServerConnectionCallback_block_invoke;
    char v13 = &__block_descriptor_40_e5_v8__0lu32l8;
    uint64_t v14 = v3;
    if (qword_1EBD5C510 != -1) {
      dispatch_once(&qword_1EBD5C510, &block);
    }
    if (byte_1EBD5C4B8)
    {
      uint64_t v4 = [NSString stringWithFormat:@"received unexpected notification: %@", a2, block, v11, v12, v13, v14];
      uint64_t v5 = (void *)MEMORY[0x1E4F929B8];
      uint64_t v6 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Compositions/Baseband/PLTelephonyConnection.m"];
      id v7 = [v6 lastPathComponent];
      char v8 = [NSString stringWithUTF8String:"ServerConnectionCallback"];
      [v5 logMessage:v4 fromFile:v7 fromFunction:v8 fromLineNumber:336];

      unsigned int v9 = PLLogCommon();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v16 = v4;
        _os_log_debug_impl(&dword_1D2690000, v9, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }
    }
  }
}

uint64_t __ServerConnectionCallback_block_invoke(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD5C4B8 = result;
  return result;
}

uint64_t __TelephonyNotificationCallback_block_invoke(uint64_t a1)
{
  uint64_t result = [MEMORY[0x1E4F929C0] isClassDebugEnabled:*(void *)(a1 + 32)];
  byte_1EBD5C4B9 = result;
  return result;
}

id PLLogPush()
{
  if (qword_1EBD5A188 != -1) {
    dispatch_once(&qword_1EBD5A188, &__block_literal_global_40);
  }
  uint64_t v0 = (void *)qword_1EBD5A180;
  return v0;
}

uint64_t __PLLogPush_block_invoke()
{
  qword_1EBD5A180 = (uint64_t)os_log_create("com.apple.powerlog", "push");
  return MEMORY[0x1F41817F8]();
}

void sub_1D29D6F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AWDMETRICSCellularPowerLogPagingDRXCycleReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 20;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 16;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __PLLogCLPC_block_invoke()
{
  qword_1EBD5A1D0 = (uint64_t)os_log_create("com.apple.powerlog", "clpc");
  return MEMORY[0x1F41817F8]();
}

CFTypeRef createIORegObject(io_registry_entry_t a1, const __CFString *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  CStringPtr = CFStringGetCStringPtr(a2, SystemEncoding);
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(a1, a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!CFProperty)
  {
    id v7 = PLLogCLPC();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      unint64_t v10 = CStringPtr;
      _os_log_error_impl(&dword_1D2690000, v7, OS_LOG_TYPE_ERROR, "Could not read property \"%s\".", (uint8_t *)&v9, 0xCu);
    }
  }
  return CFProperty;
}

uint64_t shouldUseNewCLPCPath()
{
  if (qword_1EBD5A1E0 != -1) {
    dispatch_once(&qword_1EBD5A1E0, &__block_literal_global_50);
  }
  uint64_t v0 = (void *)MEMORY[0x1E4F929C0];
  char v1 = [NSNumber numberWithBool:_MergedGlobals_1_52];
  [v0 setObject:v1 forKey:@"newCLPCPath" saveToDisk:1];

  return _MergedGlobals_1_52;
}

void __shouldUseNewCLPCPath_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)[objc_alloc(MEMORY[0x1E4F92A08]) initWithGroup:@"CLPC Stats" andSubGroup:@"Lost Performance"];
  if (v0) {
    goto LABEL_5;
  }
  if (qword_1EBD5A200 != -1) {
    dispatch_once(&qword_1EBD5A200, &__block_literal_global_175_0);
  }
  if (byte_1EBD5A1C9 == 1) {
LABEL_5:
  }
    _MergedGlobals_1_52 = v0 == 0;
  char v1 = PLLogCommon();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = _MergedGlobals_1_52;
    _os_log_impl(&dword_1D2690000, v1, OS_LOG_TYPE_DEFAULT, "newCLPCPath value is %d", (uint8_t *)v2, 8u);
  }
}

void sub_1D29DC3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void __clpcIsLegacy_block_invoke()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = PLLogCLPC();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    unint64_t v21 = "AppleCLPC";
    _os_log_debug_impl(&dword_1D2690000, v0, OS_LOG_TYPE_DEBUG, "Getting service matching \"%s\".", buf, 0xCu);
  }

  CFDictionaryRef v1 = IOServiceMatching("AppleCLPC");
  id v2 = PLLogCLPC();
  uint64_t v3 = v2;
  if (!v1)
  {
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)long long buf = 136315138;
    unint64_t v21 = "AppleCLPC";
    uint64_t v16 = "Could not find service matching \"%s\".";
    goto LABEL_32;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1D2690000, v3, OS_LOG_TYPE_DEBUG, "Getting master port default", buf, 2u);
  }

  io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], v1);
  if (!MatchingService)
  {
    uint64_t v3 = PLLogCLPC();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)long long buf = 136315138;
    unint64_t v21 = "AppleCLPC";
    uint64_t v16 = "Could not get default service for \"%s\".";
LABEL_32:
    _os_log_error_impl(&dword_1D2690000, v3, OS_LOG_TYPE_ERROR, v16, buf, 0xCu);
LABEL_18:

    BOOL v14 = PLLogCLPC();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      int v15 = "No CLPC service found";
      goto LABEL_30;
    }
    goto LABEL_19;
  }
  io_registry_entry_t v5 = MatchingService;
  unsigned int valuePtr = 0;
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  CStringPtr = CFStringGetCStringPtr(@"#clpc-version", SystemEncoding);
  CFNumberRef IORegObject = (const __CFNumber *)createIORegObject(v5, @"#clpc-version");
  if (IORegObject)
  {
    CFNumberRef v9 = IORegObject;
    CFTypeID v10 = CFGetTypeID(IORegObject);
    if (v10 == CFNumberGetTypeID())
    {
      int Value = CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
      unint64_t v12 = PLLogCLPC();
      char v13 = v12;
      if (Value)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 67109120;
          LODWORD(v21) = valuePtr;
          _os_log_impl(&dword_1D2690000, v13, OS_LOG_TYPE_INFO, "Read value: %u", buf, 8u);
        }

        CFRelease(v9);
        if (valuePtr < 2)
        {
          IOObjectRelease(v5);
          BOOL v14 = PLLogCLPC();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            int v15 = "System is running legacy CLPC.";
            goto LABEL_30;
          }
        }
        else
        {
          byte_1EBD5A1C9 = 1;
          IOObjectRelease(v5);
          BOOL v14 = PLLogCLPC();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            int v15 = "System is running AMP CLPC.";
LABEL_30:
            _os_log_debug_impl(&dword_1D2690000, v14, OS_LOG_TYPE_DEBUG, v15, buf, 2u);
          }
        }
LABEL_19:

        return;
      }
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        goto LABEL_23;
      }
      *(_DWORD *)long long buf = 136315138;
      unint64_t v21 = CStringPtr;
      char v17 = "Conversion error getting value of key \"%s\".";
    }
    else
    {
      char v13 = PLLogCLPC();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
LABEL_23:

        CFRelease(v9);
        goto LABEL_24;
      }
      *(_DWORD *)long long buf = 136315138;
      unint64_t v21 = CStringPtr;
      char v17 = "Key \"%s\" unexpectedly not a number.";
    }
    _os_log_error_impl(&dword_1D2690000, v13, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);
    goto LABEL_23;
  }
LABEL_24:
  unsigned int v18 = PLLogCLPC();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1D2690000, v18, OS_LOG_TYPE_DEBUG, "No clpc-version property => legacy CLPC.", buf, 2u);
  }

  IOObjectRelease(v5);
}

uint64_t KCellularLtePdcchStateStatsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  io_registry_entry_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        int v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v18 = 0;
              unsigned int v19 = 0;
              uint64_t v20 = 0;
              *(unsigned char *)(a1 + 144) |= 1u;
              while (1)
              {
                uint64_t v21 = *v3;
                unint64_t v22 = *(void *)(a2 + v21);
                if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
                *(void *)(a2 + v21) = v22 + 1;
                v20 |= (unint64_t)(v23 & 0x7F) << v18;
                if ((v23 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v18 += 7;
                BOOL v14 = v19++ >= 9;
                if (v14)
                {
                  uint64_t v20 = 0;
                  goto LABEL_111;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_109:
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v20 = 0;
              }
LABEL_111:
              *(void *)(a1 + 12_Block_object_dispose(&STACK[0x480], 8) = v20;
              goto LABEL_158;
            case 2u:
              if (v16 != 2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v69 = 0;
                while (1)
                {
                  uint64_t v70 = *v3;
                  unint64_t v71 = *(void *)(a2 + v70);
                  if (v71 == -1 || v71 >= *(void *)(a2 + *v4)) {
                    goto LABEL_156;
                  }
                  char v72 = *(unsigned char *)(*(void *)(a2 + *v7) + v71);
                  *(void *)(a2 + v70) = v71 + 1;
                  v69 |= (unint64_t)(v72 & 0x7F) << v67;
                  if (v72 < 0)
                  {
                    v67 += 7;
                    BOOL v14 = v68++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_157;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v25 = 0;
                unsigned int v26 = 0;
                uint64_t v27 = 0;
                while (1)
                {
                  uint64_t v28 = *v3;
                  unint64_t v29 = *(void *)(a2 + v28);
                  if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
                  *(void *)(a2 + v2_Block_object_dispose(&STACK[0x480], 8) = v29 + 1;
                  v27 |= (unint64_t)(v30 & 0x7F) << v25;
                  if (v30 < 0)
                  {
                    v25 += 7;
                    BOOL v14 = v26++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_38;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
                PBRepeatedUInt32Add();
              }
              goto LABEL_98;
            case 3u:
              if (v16 != 2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v75 = 0;
                while (1)
                {
                  uint64_t v76 = *v3;
                  unint64_t v77 = *(void *)(a2 + v76);
                  if (v77 == -1 || v77 >= *(void *)(a2 + *v4)) {
                    goto LABEL_156;
                  }
                  char v78 = *(unsigned char *)(*(void *)(a2 + *v7) + v77);
                  *(void *)(a2 + v76) = v77 + 1;
                  v75 |= (unint64_t)(v78 & 0x7F) << v73;
                  if (v78 < 0)
                  {
                    v73 += 7;
                    BOOL v14 = v74++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_157;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v33 = 0;
                while (1)
                {
                  uint64_t v34 = *v3;
                  unint64_t v35 = *(void *)(a2 + v34);
                  if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
                  *(void *)(a2 + v34) = v35 + 1;
                  v33 |= (unint64_t)(v36 & 0x7F) << v31;
                  if (v36 < 0)
                  {
                    v31 += 7;
                    BOOL v14 = v32++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_51;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_51:
                PBRepeatedUInt32Add();
              }
              goto LABEL_98;
            case 4u:
              if (v16 != 2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v81 = 0;
                while (1)
                {
                  uint64_t v82 = *v3;
                  unint64_t v83 = *(void *)(a2 + v82);
                  if (v83 == -1 || v83 >= *(void *)(a2 + *v4)) {
                    goto LABEL_156;
                  }
                  char v84 = *(unsigned char *)(*(void *)(a2 + *v7) + v83);
                  *(void *)(a2 + v82) = v83 + 1;
                  v81 |= (unint64_t)(v84 & 0x7F) << v79;
                  if (v84 < 0)
                  {
                    v79 += 7;
                    BOOL v14 = v80++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_157;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v39 = 0;
                while (1)
                {
                  uint64_t v40 = *v3;
                  unint64_t v41 = *(void *)(a2 + v40);
                  if (v41 == -1 || v41 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
                  *(void *)(a2 + v40) = v41 + 1;
                  v39 |= (unint64_t)(v42 & 0x7F) << v37;
                  if (v42 < 0)
                  {
                    v37 += 7;
                    BOOL v14 = v38++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_64;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
                PBRepeatedUInt32Add();
              }
              goto LABEL_98;
            case 5u:
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              *(unsigned char *)(a1 + 144) |= 2u;
              while (2)
              {
                uint64_t v46 = *v3;
                unint64_t v47 = *(void *)(a2 + v46);
                if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
                  *(void *)(a2 + v46) = v47 + 1;
                  v45 |= (unint64_t)(v48 & 0x7F) << v43;
                  if (v48 < 0)
                  {
                    v43 += 7;
                    BOOL v14 = v44++ >= 9;
                    if (v14)
                    {
                      LODWORD(v45) = 0;
                      goto LABEL_115;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v45) = 0;
              }
LABEL_115:
              uint64_t v66 = 136;
              goto LABEL_120;
            case 6u:
              if (v16 != 2)
              {
                char v85 = 0;
                unsigned int v86 = 0;
                uint64_t v87 = 0;
                while (1)
                {
                  uint64_t v88 = *v3;
                  unint64_t v89 = *(void *)(a2 + v88);
                  if (v89 == -1 || v89 >= *(void *)(a2 + *v4)) {
                    goto LABEL_156;
                  }
                  char v90 = *(unsigned char *)(*(void *)(a2 + *v7) + v89);
                  *(void *)(a2 + v8_Block_object_dispose(&STACK[0x480], 8) = v89 + 1;
                  v87 |= (unint64_t)(v90 & 0x7F) << v85;
                  if (v90 < 0)
                  {
                    v85 += 7;
                    BOOL v14 = v86++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_157;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v51 = 0;
                while (1)
                {
                  uint64_t v52 = *v3;
                  unint64_t v53 = *(void *)(a2 + v52);
                  if (v53 == -1 || v53 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
                  *(void *)(a2 + v52) = v53 + 1;
                  v51 |= (unint64_t)(v54 & 0x7F) << v49;
                  if (v54 < 0)
                  {
                    v49 += 7;
                    BOOL v14 = v50++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_84;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
                PBRepeatedUInt32Add();
              }
              goto LABEL_98;
            case 7u:
              if (v16 == 2)
              {
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v55 = 0;
                  unsigned int v56 = 0;
                  uint64_t v57 = 0;
                  while (1)
                  {
                    uint64_t v58 = *v3;
                    unint64_t v59 = *(void *)(a2 + v58);
                    if (v59 == -1 || v59 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v60 = *(unsigned char *)(*(void *)(a2 + *v7) + v59);
                    *(void *)(a2 + v5_Block_object_dispose(&STACK[0x480], 8) = v59 + 1;
                    v57 |= (unint64_t)(v60 & 0x7F) << v55;
                    if (v60 < 0)
                    {
                      v55 += 7;
                      BOOL v14 = v56++ >= 9;
                      if (!v14) {
                        continue;
                      }
                    }
                    goto LABEL_97;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_97:
                  PBRepeatedUInt32Add();
                }
LABEL_98:
                PBReaderRecallMark();
              }
              else
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v93 = 0;
                while (1)
                {
                  uint64_t v94 = *v3;
                  unint64_t v95 = *(void *)(a2 + v94);
                  if (v95 == -1 || v95 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v96 = *(unsigned char *)(*(void *)(a2 + *v7) + v95);
                  *(void *)(a2 + v94) = v95 + 1;
                  v93 |= (unint64_t)(v96 & 0x7F) << v91;
                  if (v96 < 0)
                  {
                    v91 += 7;
                    BOOL v14 = v92++ >= 9;
                    if (!v14) {
                      continue;
                    }
                  }
                  goto LABEL_157;
                }
LABEL_156:
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_157:
                PBRepeatedUInt32Add();
              }
LABEL_158:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
            case 0xFu:
              char v61 = 0;
              unsigned int v62 = 0;
              uint64_t v45 = 0;
              *(unsigned char *)(a1 + 144) |= 4u;
              while (2)
              {
                uint64_t v63 = *v3;
                unint64_t v64 = *(void *)(a2 + v63);
                if (v64 == -1 || v64 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v65 = *(unsigned char *)(*(void *)(a2 + *v7) + v64);
                  *(void *)(a2 + v63) = v64 + 1;
                  v45 |= (unint64_t)(v65 & 0x7F) << v61;
                  if (v65 < 0)
                  {
                    v61 += 7;
                    BOOL v14 = v62++ >= 9;
                    if (v14)
                    {
                      LODWORD(v45) = 0;
                      goto LABEL_119;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v45) = 0;
              }
LABEL_119:
              uint64_t v66 = 140;
LABEL_120:
              *(_DWORD *)(a1 + v66) = v45;
              goto LABEL_158;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_158;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularRrcModeHistReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  io_registry_entry_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (!v15 && (v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(_DWORD *)(a1 + 128) |= 1u;
              while (1)
              {
                uint64_t v20 = *v3;
                unint64_t v21 = *(void *)(a2 + v20);
                if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
                  break;
                }
                char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v20) = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if ((v22 & 0x80) == 0) {
                  goto LABEL_226;
                }
                v17 += 7;
                BOOL v14 = v18++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_228;
                }
              }
              *(unsigned char *)(a2 + *v5) = 1;
LABEL_226:
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v19 = 0;
              }
LABEL_228:
              *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
              goto LABEL_342;
            case 2u:
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              while (2)
              {
                uint64_t v31 = *v3;
                unint64_t v32 = *(void *)(a2 + v31);
                if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
                  *(void *)(a2 + v31) = v32 + 1;
                  v25 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    BOOL v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_236;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_236:
              uint64_t v165 = 68;
              goto LABEL_341;
            case 3u:
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              while (2)
              {
                uint64_t v36 = *v3;
                unint64_t v37 = *(void *)(a2 + v36);
                if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
                  *(void *)(a2 + v36) = v37 + 1;
                  v25 |= (unint64_t)(v38 & 0x7F) << v34;
                  if (v38 < 0)
                  {
                    v34 += 7;
                    BOOL v14 = v35++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_240;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_240:
              uint64_t v165 = 72;
              goto LABEL_341;
            case 4u:
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              while (2)
              {
                uint64_t v41 = *v3;
                unint64_t v42 = *(void *)(a2 + v41);
                if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
                  *(void *)(a2 + v41) = v42 + 1;
                  v25 |= (unint64_t)(v43 & 0x7F) << v39;
                  if (v43 < 0)
                  {
                    v39 += 7;
                    BOOL v14 = v40++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_244;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_244:
              uint64_t v165 = 76;
              goto LABEL_341;
            case 5u:
              char v44 = 0;
              unsigned int v45 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              while (2)
              {
                uint64_t v46 = *v3;
                unint64_t v47 = *(void *)(a2 + v46);
                if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
                  *(void *)(a2 + v46) = v47 + 1;
                  v25 |= (unint64_t)(v48 & 0x7F) << v44;
                  if (v48 < 0)
                  {
                    v44 += 7;
                    BOOL v14 = v45++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_248;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_248:
              uint64_t v165 = 92;
              goto LABEL_341;
            case 6u:
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              while (2)
              {
                uint64_t v51 = *v3;
                unint64_t v52 = *(void *)(a2 + v51);
                if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
                  *(void *)(a2 + v51) = v52 + 1;
                  v25 |= (unint64_t)(v53 & 0x7F) << v49;
                  if (v53 < 0)
                  {
                    v49 += 7;
                    BOOL v14 = v50++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_252;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_252:
              uint64_t v165 = 96;
              goto LABEL_341;
            case 7u:
              char v54 = 0;
              unsigned int v55 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x400000u;
              while (2)
              {
                uint64_t v56 = *v3;
                unint64_t v57 = *(void *)(a2 + v56);
                if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v58 = *(unsigned char *)(*(void *)(a2 + *v7) + v57);
                  *(void *)(a2 + v56) = v57 + 1;
                  v25 |= (unint64_t)(v58 & 0x7F) << v54;
                  if (v58 < 0)
                  {
                    v54 += 7;
                    BOOL v14 = v55++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_256;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_256:
              uint64_t v165 = 100;
              goto LABEL_341;
            case 8u:
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x800000u;
              while (2)
              {
                uint64_t v61 = *v3;
                unint64_t v62 = *(void *)(a2 + v61);
                if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v63 = *(unsigned char *)(*(void *)(a2 + *v7) + v62);
                  *(void *)(a2 + v61) = v62 + 1;
                  v25 |= (unint64_t)(v63 & 0x7F) << v59;
                  if (v63 < 0)
                  {
                    v59 += 7;
                    BOOL v14 = v60++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_260;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_260:
              uint64_t v165 = 104;
              goto LABEL_341;
            case 9u:
              char v64 = 0;
              unsigned int v65 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x1000000u;
              while (2)
              {
                uint64_t v66 = *v3;
                unint64_t v67 = *(void *)(a2 + v66);
                if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v68 = *(unsigned char *)(*(void *)(a2 + *v7) + v67);
                  *(void *)(a2 + v66) = v67 + 1;
                  v25 |= (unint64_t)(v68 & 0x7F) << v64;
                  if (v68 < 0)
                  {
                    v64 += 7;
                    BOOL v14 = v65++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_264;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_264:
              uint64_t v165 = 108;
              goto LABEL_341;
            case 0xAu:
              char v69 = 0;
              unsigned int v70 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x2000000u;
              while (2)
              {
                uint64_t v71 = *v3;
                unint64_t v72 = *(void *)(a2 + v71);
                if (v72 == -1 || v72 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v73 = *(unsigned char *)(*(void *)(a2 + *v7) + v72);
                  *(void *)(a2 + v71) = v72 + 1;
                  v25 |= (unint64_t)(v73 & 0x7F) << v69;
                  if (v73 < 0)
                  {
                    v69 += 7;
                    BOOL v14 = v70++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_268;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_268:
              uint64_t v165 = 112;
              goto LABEL_341;
            case 0xBu:
              char v74 = 0;
              unsigned int v75 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x4000000u;
              while (2)
              {
                uint64_t v76 = *v3;
                unint64_t v77 = *(void *)(a2 + v76);
                if (v77 == -1 || v77 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v78 = *(unsigned char *)(*(void *)(a2 + *v7) + v77);
                  *(void *)(a2 + v76) = v77 + 1;
                  v25 |= (unint64_t)(v78 & 0x7F) << v74;
                  if (v78 < 0)
                  {
                    v74 += 7;
                    BOOL v14 = v75++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_272;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_272:
              uint64_t v165 = 116;
              goto LABEL_341;
            case 0xCu:
              char v79 = 0;
              unsigned int v80 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x8000000u;
              while (2)
              {
                uint64_t v81 = *v3;
                unint64_t v82 = *(void *)(a2 + v81);
                if (v82 == -1 || v82 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v83 = *(unsigned char *)(*(void *)(a2 + *v7) + v82);
                  *(void *)(a2 + v81) = v82 + 1;
                  v25 |= (unint64_t)(v83 & 0x7F) << v79;
                  if (v83 < 0)
                  {
                    v79 += 7;
                    BOOL v14 = v80++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_276;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_276:
              uint64_t v165 = 120;
              goto LABEL_341;
            case 0xDu:
              char v84 = 0;
              unsigned int v85 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              while (2)
              {
                uint64_t v86 = *v3;
                unint64_t v87 = *(void *)(a2 + v86);
                if (v87 == -1 || v87 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v88 = *(unsigned char *)(*(void *)(a2 + *v7) + v87);
                  *(void *)(a2 + v86) = v87 + 1;
                  v25 |= (unint64_t)(v88 & 0x7F) << v84;
                  if (v88 < 0)
                  {
                    v84 += 7;
                    BOOL v14 = v85++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_280;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_280:
              uint64_t v165 = 80;
              goto LABEL_341;
            case 0xEu:
              char v89 = 0;
              unsigned int v90 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              while (2)
              {
                uint64_t v91 = *v3;
                unint64_t v92 = *(void *)(a2 + v91);
                if (v92 == -1 || v92 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v93 = *(unsigned char *)(*(void *)(a2 + *v7) + v92);
                  *(void *)(a2 + v91) = v92 + 1;
                  v25 |= (unint64_t)(v93 & 0x7F) << v89;
                  if (v93 < 0)
                  {
                    v89 += 7;
                    BOOL v14 = v90++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_284;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_284:
              uint64_t v165 = 84;
              goto LABEL_341;
            case 0xFu:
              char v94 = 0;
              unsigned int v95 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              while (2)
              {
                uint64_t v96 = *v3;
                unint64_t v97 = *(void *)(a2 + v96);
                if (v97 == -1 || v97 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v98 = *(unsigned char *)(*(void *)(a2 + *v7) + v97);
                  *(void *)(a2 + v96) = v97 + 1;
                  v25 |= (unint64_t)(v98 & 0x7F) << v94;
                  if (v98 < 0)
                  {
                    v94 += 7;
                    BOOL v14 = v95++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_288;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_288:
              uint64_t v165 = 88;
              goto LABEL_341;
            case 0x10u:
              char v99 = 0;
              unsigned int v100 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 2u;
              while (2)
              {
                uint64_t v101 = *v3;
                unint64_t v102 = *(void *)(a2 + v101);
                if (v102 == -1 || v102 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v103 = *(unsigned char *)(*(void *)(a2 + *v7) + v102);
                  *(void *)(a2 + v101) = v102 + 1;
                  v25 |= (unint64_t)(v103 & 0x7F) << v99;
                  if (v103 < 0)
                  {
                    v99 += 7;
                    BOOL v14 = v100++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_292;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_292:
              uint64_t v165 = 16;
              goto LABEL_341;
            case 0x11u:
              char v104 = 0;
              unsigned int v105 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 4u;
              while (2)
              {
                uint64_t v106 = *v3;
                unint64_t v107 = *(void *)(a2 + v106);
                if (v107 == -1 || v107 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v108 = *(unsigned char *)(*(void *)(a2 + *v7) + v107);
                  *(void *)(a2 + v106) = v107 + 1;
                  v25 |= (unint64_t)(v108 & 0x7F) << v104;
                  if (v108 < 0)
                  {
                    v104 += 7;
                    BOOL v14 = v105++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_296;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_296:
              uint64_t v165 = 20;
              goto LABEL_341;
            case 0x12u:
              char v109 = 0;
              unsigned int v110 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x40u;
              while (2)
              {
                uint64_t v111 = *v3;
                unint64_t v112 = *(void *)(a2 + v111);
                if (v112 == -1 || v112 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v113 = *(unsigned char *)(*(void *)(a2 + *v7) + v112);
                  *(void *)(a2 + v111) = v112 + 1;
                  v25 |= (unint64_t)(v113 & 0x7F) << v109;
                  if (v113 < 0)
                  {
                    v109 += 7;
                    BOOL v14 = v110++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_300;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_300:
              uint64_t v165 = 36;
              goto LABEL_341;
            case 0x13u:
              char v114 = 0;
              unsigned int v115 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x80u;
              while (2)
              {
                uint64_t v116 = *v3;
                unint64_t v117 = *(void *)(a2 + v116);
                if (v117 == -1 || v117 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v118 = *(unsigned char *)(*(void *)(a2 + *v7) + v117);
                  *(void *)(a2 + v116) = v117 + 1;
                  v25 |= (unint64_t)(v118 & 0x7F) << v114;
                  if (v118 < 0)
                  {
                    v114 += 7;
                    BOOL v14 = v115++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_304;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_304:
              uint64_t v165 = 40;
              goto LABEL_341;
            case 0x14u:
              char v119 = 0;
              unsigned int v120 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x100u;
              while (2)
              {
                uint64_t v121 = *v3;
                unint64_t v122 = *(void *)(a2 + v121);
                if (v122 == -1 || v122 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v123 = *(unsigned char *)(*(void *)(a2 + *v7) + v122);
                  *(void *)(a2 + v121) = v122 + 1;
                  v25 |= (unint64_t)(v123 & 0x7F) << v119;
                  if (v123 < 0)
                  {
                    v119 += 7;
                    BOOL v14 = v120++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_308;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_308:
              uint64_t v165 = 44;
              goto LABEL_341;
            case 0x15u:
              char v124 = 0;
              unsigned int v125 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x200u;
              while (2)
              {
                uint64_t v126 = *v3;
                unint64_t v127 = *(void *)(a2 + v126);
                if (v127 == -1 || v127 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v128 = *(unsigned char *)(*(void *)(a2 + *v7) + v127);
                  *(void *)(a2 + v126) = v127 + 1;
                  v25 |= (unint64_t)(v128 & 0x7F) << v124;
                  if (v128 < 0)
                  {
                    v124 += 7;
                    BOOL v14 = v125++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_312;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_312:
              uint64_t v165 = 48;
              goto LABEL_341;
            case 0x16u:
              char v129 = 0;
              unsigned int v130 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x400u;
              while (2)
              {
                uint64_t v131 = *v3;
                unint64_t v132 = *(void *)(a2 + v131);
                if (v132 == -1 || v132 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v133 = *(unsigned char *)(*(void *)(a2 + *v7) + v132);
                  *(void *)(a2 + v131) = v132 + 1;
                  v25 |= (unint64_t)(v133 & 0x7F) << v129;
                  if (v133 < 0)
                  {
                    v129 += 7;
                    BOOL v14 = v130++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_316;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_316:
              uint64_t v165 = 52;
              goto LABEL_341;
            case 0x17u:
              char v134 = 0;
              unsigned int v135 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x800u;
              while (2)
              {
                uint64_t v136 = *v3;
                unint64_t v137 = *(void *)(a2 + v136);
                if (v137 == -1 || v137 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v138 = *(unsigned char *)(*(void *)(a2 + *v7) + v137);
                  *(void *)(a2 + v136) = v137 + 1;
                  v25 |= (unint64_t)(v138 & 0x7F) << v134;
                  if (v138 < 0)
                  {
                    v134 += 7;
                    BOOL v14 = v135++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_320;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_320:
              uint64_t v165 = 56;
              goto LABEL_341;
            case 0x18u:
              char v139 = 0;
              unsigned int v140 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              while (2)
              {
                uint64_t v141 = *v3;
                unint64_t v142 = *(void *)(a2 + v141);
                if (v142 == -1 || v142 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v143 = *(unsigned char *)(*(void *)(a2 + *v7) + v142);
                  *(void *)(a2 + v141) = v142 + 1;
                  v25 |= (unint64_t)(v143 & 0x7F) << v139;
                  if (v143 < 0)
                  {
                    v139 += 7;
                    BOOL v14 = v140++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_324;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_324:
              uint64_t v165 = 60;
              goto LABEL_341;
            case 0x19u:
              char v144 = 0;
              unsigned int v145 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              while (2)
              {
                uint64_t v146 = *v3;
                unint64_t v147 = *(void *)(a2 + v146);
                if (v147 == -1 || v147 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v148 = *(unsigned char *)(*(void *)(a2 + *v7) + v147);
                  *(void *)(a2 + v146) = v147 + 1;
                  v25 |= (unint64_t)(v148 & 0x7F) << v144;
                  if (v148 < 0)
                  {
                    v144 += 7;
                    BOOL v14 = v145++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_328;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_328:
              uint64_t v165 = 64;
              goto LABEL_341;
            case 0x1Au:
              char v149 = 0;
              unsigned int v150 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 8u;
              while (2)
              {
                uint64_t v151 = *v3;
                unint64_t v152 = *(void *)(a2 + v151);
                if (v152 == -1 || v152 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v153 = *(unsigned char *)(*(void *)(a2 + *v7) + v152);
                  *(void *)(a2 + v151) = v152 + 1;
                  v25 |= (unint64_t)(v153 & 0x7F) << v149;
                  if (v153 < 0)
                  {
                    v149 += 7;
                    BOOL v14 = v150++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_332;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_332:
              uint64_t v165 = 24;
              goto LABEL_341;
            case 0x1Bu:
              char v154 = 0;
              unsigned int v155 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x10u;
              while (2)
              {
                uint64_t v156 = *v3;
                unint64_t v157 = *(void *)(a2 + v156);
                if (v157 == -1 || v157 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v158 = *(unsigned char *)(*(void *)(a2 + *v7) + v157);
                  *(void *)(a2 + v156) = v157 + 1;
                  v25 |= (unint64_t)(v158 & 0x7F) << v154;
                  if (v158 < 0)
                  {
                    v154 += 7;
                    BOOL v14 = v155++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_336;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_336:
              uint64_t v165 = 28;
              goto LABEL_341;
            case 0x1Cu:
              char v159 = 0;
              unsigned int v160 = 0;
              uint64_t v25 = 0;
              *(_DWORD *)(a1 + 128) |= 0x20u;
              while (2)
              {
                uint64_t v161 = *v3;
                unint64_t v162 = *(void *)(a2 + v161);
                if (v162 == -1 || v162 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v163 = *(unsigned char *)(*(void *)(a2 + *v7) + v162);
                  *(void *)(a2 + v161) = v162 + 1;
                  v25 |= (unint64_t)(v163 & 0x7F) << v159;
                  if (v163 < 0)
                  {
                    v159 += 7;
                    BOOL v14 = v160++ >= 9;
                    if (v14)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_340;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_340:
              uint64_t v165 = 32;
              goto LABEL_341;
            default:
              if ((v10 >> 3) == 127)
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                *(_DWORD *)(a1 + 128) |= 0x10000000u;
                while (1)
                {
                  uint64_t v26 = *v3;
                  unint64_t v27 = *(void *)(a2 + v26);
                  if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
                  *(void *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if ((v28 & 0x80) == 0) {
                    goto LABEL_230;
                  }
                  v23 += 7;
                  BOOL v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_232;
                  }
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_230:
                if (*(unsigned char *)(a2 + *v5)) {
                  LODWORD(v25) = 0;
                }
LABEL_232:
                uint64_t v165 = 124;
LABEL_341:
                *(_DWORD *)(a1 + v165) = v25;
              }
              else
              {
                uint64_t result = PBReaderSkipValueWithTag();
                if (!result) {
                  return result;
                }
              }
LABEL_342:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularLtePagingCycleReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  io_registry_entry_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                BOOL v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_70:
          uint64_t v50 = 16;
          goto LABEL_87;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v25 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_74:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v25 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_78:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 6u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v25 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_82:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 0xFu:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v25 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v25) = 0;
      }
LABEL_86:
      uint64_t v50 = 32;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v25;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t UtraFddStatsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  io_registry_entry_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    char v8 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    uint64_t v11 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    unint64_t v12 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    char v13 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    BOOL v14 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    int v15 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    int v16 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    char v17 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 0x80u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_113;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              LODWORD(v29) = 0;
              goto LABEL_115;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_113:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_115:
          uint64_t v100 = v8[201];
          goto LABEL_160;
        case 2u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 2u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v9) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v29 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_119;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_119:
          uint64_t v100 = v10[202];
          goto LABEL_160;
        case 3u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 0x200u;
          while (2)
          {
            uint64_t v46 = *v3;
            unint64_t v47 = *(void *)(a2 + v46);
            if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v9) + v47);
              *(void *)(a2 + v46) = v47 + 1;
              v29 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v24 = v45++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_123;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_123:
          uint64_t v100 = v11[203];
          goto LABEL_160;
        case 4u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 0x40u;
          while (2)
          {
            uint64_t v51 = *v3;
            unint64_t v52 = *(void *)(a2 + v51);
            if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v9) + v52);
              *(void *)(a2 + v51) = v52 + 1;
              v29 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                BOOL v24 = v50++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_127;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_127:
          uint64_t v100 = v12[204];
          goto LABEL_160;
        case 5u:
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 0x100u;
          while (2)
          {
            uint64_t v56 = *v3;
            unint64_t v57 = *(void *)(a2 + v56);
            if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v58 = *(unsigned char *)(*(void *)(a2 + *v9) + v57);
              *(void *)(a2 + v56) = v57 + 1;
              v29 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                BOOL v24 = v55++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_131;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_131:
          uint64_t v100 = v13[205];
          goto LABEL_160;
        case 6u:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 0x20u;
          while (2)
          {
            uint64_t v61 = *v3;
            unint64_t v62 = *(void *)(a2 + v61);
            if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v63 = *(unsigned char *)(*(void *)(a2 + *v9) + v62);
              *(void *)(a2 + v61) = v62 + 1;
              v29 |= (unint64_t)(v63 & 0x7F) << v59;
              if (v63 < 0)
              {
                v59 += 7;
                BOOL v24 = v60++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_135;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_135:
          uint64_t v100 = v14[206];
          goto LABEL_160;
        case 7u:
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 0x800u;
          while (2)
          {
            uint64_t v66 = *v3;
            unint64_t v67 = *(void *)(a2 + v66);
            if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v68 = *(unsigned char *)(*(void *)(a2 + *v9) + v67);
              *(void *)(a2 + v66) = v67 + 1;
              v29 |= (unint64_t)(v68 & 0x7F) << v64;
              if (v68 < 0)
              {
                v64 += 7;
                BOOL v24 = v65++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_139;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_139:
          uint64_t v100 = v15[207];
          goto LABEL_160;
        case 8u:
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 0x1000u;
          while (2)
          {
            uint64_t v71 = *v3;
            unint64_t v72 = *(void *)(a2 + v71);
            if (v72 == -1 || v72 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v73 = *(unsigned char *)(*(void *)(a2 + *v9) + v72);
              *(void *)(a2 + v71) = v72 + 1;
              v29 |= (unint64_t)(v73 & 0x7F) << v69;
              if (v73 < 0)
              {
                v69 += 7;
                BOOL v24 = v70++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_143;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_143:
          uint64_t v100 = v16[208];
          goto LABEL_160;
        case 9u:
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 0x400u;
          while (2)
          {
            uint64_t v76 = *v3;
            unint64_t v77 = *(void *)(a2 + v76);
            if (v77 == -1 || v77 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v78 = *(unsigned char *)(*(void *)(a2 + *v9) + v77);
              *(void *)(a2 + v76) = v77 + 1;
              v29 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                BOOL v24 = v75++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_147;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_147:
          uint64_t v100 = v17[209];
          goto LABEL_160;
        case 0xAu:
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 8u;
          while (2)
          {
            uint64_t v81 = *v3;
            unint64_t v82 = *(void *)(a2 + v81);
            if (v82 == -1 || v82 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v83 = *(unsigned char *)(*(void *)(a2 + *v9) + v82);
              *(void *)(a2 + v81) = v82 + 1;
              v29 |= (unint64_t)(v83 & 0x7F) << v79;
              if (v83 < 0)
              {
                v79 += 7;
                BOOL v24 = v80++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_151;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_151:
          uint64_t v100 = 24;
          goto LABEL_160;
        case 0xBu:
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 0x10u;
          while (2)
          {
            uint64_t v86 = *v3;
            unint64_t v87 = *(void *)(a2 + v86);
            if (v87 == -1 || v87 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v88 = *(unsigned char *)(*(void *)(a2 + *v9) + v87);
              *(void *)(a2 + v86) = v87 + 1;
              v29 |= (unint64_t)(v88 & 0x7F) << v84;
              if (v88 < 0)
              {
                v84 += 7;
                BOOL v24 = v85++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_155;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_155:
          uint64_t v100 = 28;
          goto LABEL_160;
        case 0xCu:
          char v89 = 0;
          unsigned int v90 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[200]) |= 4u;
          while (2)
          {
            uint64_t v91 = *v3;
            unint64_t v92 = *(void *)(a2 + v91);
            if (v92 == -1 || v92 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v93 = *(unsigned char *)(*(void *)(a2 + *v9) + v92);
              *(void *)(a2 + v91) = v92 + 1;
              v29 |= (unint64_t)(v93 & 0x7F) << v89;
              if (v93 < 0)
              {
                v89 += 7;
                BOOL v24 = v90++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_159;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_159:
          uint64_t v100 = 20;
LABEL_160:
          *(_DWORD *)(a1 + v100) = v29;
          continue;
        case 0xDu:
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v96 = 0;
          *(_WORD *)(a1 + v7[200]) |= 1u;
          break;
        default:
          char v33 = v8;
          char v34 = v10;
          unsigned int v35 = v11;
          uint64_t v36 = v7;
          unint64_t v37 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          io_registry_entry_t v5 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v12 = v37;
          char v13 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          id v7 = v36;
          BOOL v14 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          uint64_t v11 = v35;
          int v15 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          unint64_t v10 = v34;
          int v16 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          char v8 = v33;
          char v17 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v97 = *v3;
        unint64_t v98 = *(void *)(a2 + v97);
        if (v98 == -1 || v98 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v99 = *(unsigned char *)(*(void *)(a2 + *v9) + v98);
        *(void *)(a2 + v97) = v98 + 1;
        v96 |= (unint64_t)(v99 & 0x7F) << v94;
        if ((v99 & 0x80) == 0) {
          goto LABEL_164;
        }
        v94 += 7;
        BOOL v24 = v95++ >= 9;
        if (v24)
        {
          uint64_t v96 = 0;
          goto LABEL_166;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_164:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v96 = 0;
      }
LABEL_166:
      *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v96;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PLLogWifi()
{
  if (qword_1EBD5A560 != -1) {
    dispatch_once(&qword_1EBD5A560, &__block_literal_global_43);
  }
  uint64_t v0 = (void *)qword_1EBD5A558;
  return v0;
}

uint64_t __PLLogWifi_block_invoke()
{
  qword_1EBD5A558 = (uint64_t)os_log_create("com.apple.powerlog", "wifi");
  return MEMORY[0x1F41817F8]();
}

void WiFiDeviceAttached(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  uint64_t v4 = [v3 workQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __WiFiDeviceAttached_block_invoke;
  block[3] = &unk_1E692A250;
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, block);
}

void WiFiVirtualInterfaceCallback(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v18 = 0;
  unsigned int v19 = &v18;
  uint64_t v20 = 0x3032000000;
  uint64_t v21 = __Block_byref_object_copy__15;
  unint64_t v22 = __Block_byref_object_dispose__15;
  id v5 = a2;
  id v23 = v5;
  if (v5)
  {
    uint64_t v6 = [v5 objectForKeyedSubscript:@"LINK_CHANGED_IS_LINKDOWN"];

    if (v6)
    {
      id v7 = [v4 workQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __WiFiVirtualInterfaceCallback_block_invoke;
      block[3] = &unk_1E6931000;
      id v16 = v4;
      char v17 = &v18;
      dispatch_async(v7, block);
    }
  }
  char v8 = (void *)v19[5];
  if (v8)
  {
    unsigned int v9 = [v8 objectForKeyedSubscript:*MEMORY[0x1E4F78C18]];
    if (v9)
    {
      unint64_t v10 = [(id)v19[5] objectForKeyedSubscript:*MEMORY[0x1E4F78C10]];

      if (v10)
      {
        uint64_t v11 = [v4 workQueue];
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3221225472;
        v12[2] = __WiFiVirtualInterfaceCallback_block_invoke_2;
        _OWORD v12[3] = &unk_1E6931000;
        id v13 = v4;
        BOOL v14 = &v18;
        dispatch_async(v11, v12);
      }
    }
  }
  _Block_object_dispose(&v18, 8);
}

void sub_1D2A0A444(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t WiFiStateChangeCallback(uint64_t a1, void *a2)
{
  return [a2 logFromCFCallback:@"WiFiStateChangeCallback"];
}

uint64_t WiFiLinkChangeCallback(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 logFromLinkChangeCallback:@"WiFiLinkChangeCallback" withStats:a2];
}

void WiFiDeviceAvailableCallback(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  id v6 = a3;
  if (a2)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE");
    if (CFBooleanGetValue(Value))
    {
      if (CFDictionaryContainsKey(a2, @"IO80211InterfaceWoWWakeUpParams")) {
        id v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithDictionary:copyItems:", CFDictionaryGetValue(a2, @"IO80211InterfaceWoWWakeUpParams"), 1);
      }
      else {
        id v5 = 0;
      }
      [v6 logFromWiFiNoAvailableCallback:@"WiFiDeviceAvailableCallback" withAvailability:1 withWakeParams:v5];
    }
  }
}

void WiFiClientScanCacheCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v14 = 0;
  int v15 = &v14;
  uint64_t v16 = 0x3032000000;
  char v17 = __Block_byref_object_copy__15;
  uint64_t v18 = __Block_byref_object_dispose__15;
  id v19 = a5;
  if (a2)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      CFRetain(a2);
      id v7 = a2;
      uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithDictionary:v7];
      unsigned int v9 = (void *)v8;
      if (v15[5] && v8)
      {
        CFRelease(v7);
        unint64_t v10 = [(id)v15[5] workQueue];
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 3221225472;
        v11[2] = __WiFiClientScanCacheCallback_block_invoke;
        v11[3] = &unk_1E692EEF0;
        id v13 = &v14;
        id v12 = v9;
        dispatch_async(v10, v11);
      }
    }
  }
  _Block_object_dispose(&v14, 8);
}

void sub_1D2A0AED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t WiFiManagerClientUserAutoJoinStateChangedCallback1(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 logFromAJCallback:@"WiFiManagerClientUserAutoJoinStateChangedCallback" withFlag:a2 withStats:a3];
}

void WiFiDeviceLinkQualityChanged(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [v4 remainingAllowedRSSIEntryCount];
  if (a2 && v5)
  {
    id v6 = a2;
    id v7 = [v4 workQueue];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = __WiFiDeviceLinkQualityChanged_block_invoke;
    v9[3] = &unk_1E692B128;
    id v10 = v4;
    id v11 = v6;
    id v8 = v6;
    dispatch_async(v7, v9);
  }
}

void __WiFiDeviceAttached_block_invoke(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1D942A350]();
  [*(id *)(a1 + 32) findWifiDevice];
}

void __WiFiVirtualInterfaceCallback_block_invoke(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1D942A350]();
  [*(id *)(a1 + 32) logEventForwardAWDLState:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

void __WiFiVirtualInterfaceCallback_block_invoke_2(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1D942A350]();
  [*(id *)(a1 + 32) logEventForwardHotspotState:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

void __WiFiDeviceLinkQualityChanged_block_invoke(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1D942A350]();
  [*(id *)(a1 + 32) logEventForwardRSSI:*(void *)(a1 + 40)];
}

uint64_t __WiFiClientScanCacheCallback_block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) updateEventBackwardUserScanDuration:*(void *)(a1 + 32)];
}

id PLLogSensor()
{
  if (qword_1EBD5A760 != -1) {
    dispatch_once(&qword_1EBD5A760, &__block_literal_global_44);
  }
  uint64_t v0 = (void *)_MergedGlobals_1_56;
  return v0;
}

uint64_t __PLLogSensor_block_invoke()
{
  _MergedGlobals_1_56 = (uint64_t)os_log_create("com.apple.powerlog", "sensor");
  return MEMORY[0x1F41817F8]();
}

void hidEventCallback(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (IOHIDEventGetType() == 14)
  {
    IntegerCFBooleanRef Value = IOHIDEventGetIntegerValue();
    unsigned int v3 = IntegerValue & 0x400;
    id v4 = PLLogSensor();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109376;
      int v16 = IntegerValue;
      __int16 v17 = 1024;
      unsigned int v18 = v3 >> 10;
      _os_log_debug_impl(&dword_1D2690000, v4, OS_LOG_TYPE_DEBUG, "Proximity event: Mask 0x%x, PocketState: %d", buf, 0xEu);
    }

    uint64_t v5 = [v1 stateTracker];
    id v6 = [v5 getCurrState:4];

    if ([v6 BOOLValue])
    {
      id v13 = @"State";
      id v7 = [NSNumber numberWithBool:v3 != 0];
      uint64_t v14 = v7;
      id v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v14 forKeys:&v13 count:1];
      [v1 logEventPointProximity:v8];
    }
    else if ([v1 firstProximityEvent])
    {
      unsigned int v9 = objc_msgSend(NSNumber, "numberWithBool:", v3 != 0, @"State");
      id v12 = v9;
      id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v12 forKeys:&v11 count:1];
      [v1 logEventPointProximity:v10];

      [v1 setFirstProximityEvent:0];
    }
  }
}

uint64_t KCellularDownlinkIpPacketFilterStatusReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_60;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_62;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_60:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_62:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
        goto LABEL_81;
      case 2u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_66:
        uint64_t v48 = 16;
        goto LABEL_80;
      case 3u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        *(unsigned char *)(a1 + 40) |= 8u;
        while (2)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                uint64_t v31 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v31 = 0;
        }
LABEL_70:
        BOOL v49 = v31 != 0;
        uint64_t v50 = 36;
        goto LABEL_75;
      case 4u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        *(unsigned char *)(a1 + 40) |= 0x10u;
        while (2)
        {
          uint64_t v38 = *v3;
          unint64_t v39 = *(void *)(a2 + v38);
          if (v39 == -1 || v39 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
            *(void *)(a2 + v3_Block_object_dispose(&STACK[0x480], 8) = v39 + 1;
            v37 |= (unint64_t)(v40 & 0x7F) << v35;
            if (v40 < 0)
            {
              v35 += 7;
              BOOL v14 = v36++ >= 9;
              if (v14)
              {
                uint64_t v37 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v37 = 0;
        }
LABEL_74:
        BOOL v49 = v37 != 0;
        uint64_t v50 = 37;
LABEL_75:
        *(unsigned char *)(a1 + v50) = v49;
        goto LABEL_81;
      case 5u:
        uint64_t v41 = objc_alloc_init(Filter);
        [(id)a1 addFilters:v41];
        if (PBReaderPlaceMark() && FilterReadFrom((uint64_t)v41, a2))
        {
          PBReaderRecallMark();

LABEL_81:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 0xFu:
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        while (2)
        {
          uint64_t v45 = *v3;
          unint64_t v46 = *(void *)(a2 + v45);
          if (v46 == -1 || v46 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v47 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
            *(void *)(a2 + v45) = v46 + 1;
            v25 |= (unint64_t)(v47 & 0x7F) << v43;
            if (v47 < 0)
            {
              v43 += 7;
              BOOL v14 = v44++ >= 9;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_79:
        uint64_t v48 = 32;
LABEL_80:
        *(_DWORD *)(a1 + v4_Block_object_dispose(&STACK[0x480], 8) = v25;
        goto LABEL_81;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_81;
    }
  }
}

void TestEntryQueriesRequested(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.testMonotonicAggregateEntries"])
  {
    [v5 testMonotonicAggregateEntries];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.testMonotonicAggregateEntriesExtendedTime"])
  {
    [v5 testMonotonicAggregateEntriesExtendedTime];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.testProportionateAggregateEntries"])
  {
    [v5 testProportionateAggregateEntries];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.testEntryQueries"])
  {
    [v5 testEntryQueries];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.testEntryDelete"])
  {
    [v5 testEntryDelete];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.testEntryApplicationAgent"])
  {
    [v5 testEntryApplicationAgent];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.testEntrySleep"])
  {
    [v5 testEntrySleep];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.testEntryWake"])
  {
    [v5 testEntryWake];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.testAllEntryKeyRequests"])
  {
    [v5 testAllEntryKeyRequests];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.testFastInserts"])
  {
    [v5 testFastInserts];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.QMI"])
  {
    [v5 testABM];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.TestArrays"])
  {
    [v5 testArray];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.generateOTASubmission"])
  {
    [v5 testGenerateOTASubmission];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.generateSafeguardSubmission"])
  {
    [v5 testGenerateSafeguardSubmission];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.scheduleSafeguardSubmission"])
  {
    [v5 testScheduleSafeguardSubmission];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressTaskingSubmission"])
  {
    [v5 stressTaskingSubmission];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.dailyTasks"])
  {
    [v5 testDailyTasks];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.archive"])
  {
    [v5 testArchive];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.trimEPSQL"])
  {
    [v5 testTrimEPSQL];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.trimCESQL"])
  {
    [v5 testTrimCESQL];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.trimXCSQL"])
  {
    [v5 testTrimXCSQL];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.trimBGSQL"])
  {
    [v5 testTrimBGSQL];
    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.logSizeOfStagingEntryCache"])
  {
    id v4 = [MEMORY[0x1E4F92A58] sharedStorageCache];
    [v4 logSizeOfStagingEntryCache];
LABEL_76:

    goto LABEL_77;
  }
  if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.dumpStagingEntryCache"])
  {
    id v4 = [MEMORY[0x1E4F92A58] sharedStorageCache];
    [v4 dumpStagingEntryCache];
    goto LABEL_76;
  }
  if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stresstimer"])
  {
    if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressplentry"])
    {
      if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stresscache"])
      {
        if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stresscachesmall"])
        {
          if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressObjectForKey"])
          {
            if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressSetObjectForKey"])
            {
              if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressActivityScheduler"])
              {
                if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressMidnightCalculation"])
                {
                  if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressMonotonicTimer"])
                  {
                    if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressMonotonicTimer2"])
                    {
                      if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressMonotonicTimer3"])
                      {
                        if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.testMonotonicTimerThroughSleep"])
                        {
                          if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.currentBasebandTime"])
                          {
                            if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.testExit"])
                            {
                              if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.testQuarantineExit"])
                              {
                                if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.testBlockingFlushCaches"])
                                {
                                  if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressAggregateSmall"])
                                  {
                                    if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.stressAggregateVerySmall"])
                                    {
                                      if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.testUTF8"])
                                      {
                                        if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.testCompression"])
                                        {
                                          if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.fireSBC"])
                                          {
                                            if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.aggregateDataFromSignpost"])
                                            {
                                              if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.appIdentifierTables"])
                                              {
                                                if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.DMATables"])
                                                {
                                                  if ([a3 caseInsensitiveCompare:@"com.apple.powerlogd.appIdentifierColumns"])
                                                  {
                                                    if (![a3 caseInsensitiveCompare:@"com.apple.powerlogd.trimQueries"])objc_msgSend(v5, "constructTrimQueries"); {
                                                  }
                                                    }
                                                  else
                                                  {
                                                    [v5 constructAppIdentifierColumns];
                                                  }
                                                }
                                                else
                                                {
                                                  [v5 constructDMATables];
                                                }
                                              }
                                              else
                                              {
                                                [v5 constructAppIdentifierTables];
                                              }
                                            }
                                            else
                                            {
                                              [v5 aggregateDataFromSignpost];
                                            }
                                          }
                                          else
                                          {
                                            [v5 fireSignificantBatteryChangeNotification];
                                          }
                                        }
                                        else
                                        {
                                          [v5 testCompression];
                                        }
                                      }
                                      else
                                      {
                                        [v5 testUTF8];
                                      }
                                    }
                                    else
                                    {
                                      [v5 stressAggregateVerySmall];
                                    }
                                  }
                                  else
                                  {
                                    [v5 stressAggregateSmall];
                                  }
                                }
                                else
                                {
                                  [v5 testBlockingFlushCaches];
                                }
                              }
                              else
                              {
                                [v5 testQuarantineExit];
                              }
                            }
                            else
                            {
                              [v5 testExit];
                            }
                          }
                          else
                          {
                            [v5 currentBasebandTime];
                          }
                        }
                        else
                        {
                          [v5 testMonotonicTimerThroughSleep];
                        }
                      }
                      else
                      {
                        [v5 stressMonotonicTimer3];
                      }
                    }
                    else
                    {
                      [v5 stressMonotonicTimer2];
                    }
                  }
                  else
                  {
                    [v5 stressMonotonicTimer];
                  }
                }
                else
                {
                  [v5 stressMidnightCalculation];
                }
              }
              else
              {
                [v5 stressActivityScheduler];
              }
            }
            else
            {
              [v5 stressSetObjectForKey];
            }
          }
          else
          {
            [v5 stressObjectForKey];
          }
        }
        else
        {
          [v5 stressCacheSmall];
        }
      }
      else
      {
        [v5 stressCache];
      }
    }
    else
    {
      [v5 stressPLEntry];
    }
  }
  else
  {
    [v5 stressTimer];
  }
LABEL_77:
}

void TestEntryLogRequested(uint64_t a1, void *a2, void *a3)
{
  id v4 = [a3 stringByReplacingOccurrencesOfString:@"com.apple.powerlogd.testEntryLog." withString:&stru_1F294E108];
  [a2 testEntryLogRequestedForEntryKey:v4];
}

void sub_1D2A34F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D2A39CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void testLogEvents(uint64_t a1, void *a2)
{
  v88[4] = *MEMORY[0x1E4F143B8];
  v87[0] = @"bundleID";
  v87[1] = @"updateType";
  v88[0] = @"cloudphotod";
  v88[1] = &unk_1F29E7A50;
  v87[2] = @"eventIntervals";
  v84[0] = @"startDate";
  id v2 = (void *)MEMORY[0x1E4F1C9C8];
  id v50 = a2;
  unsigned int v3 = [v2 dateWithTimeIntervalSince1970:0.0];
  v84[1] = @"endDate";
  v85[0] = v3;
  id v4 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:3.0];
  v85[1] = v4;
  id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v85 forKeys:v84 count:2];
  v86[0] = v5;
  v82[0] = @"startDate";
  id v6 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:8.0];
  v82[1] = @"endDate";
  v83[0] = v6;
  id v7 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:25.0];
  v83[1] = v7;
  char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v83 forKeys:v82 count:2];
  v86[1] = v8;
  unsigned int v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v86 count:2];
  v87[3] = @"childBundleIDToWeight";
  v88[2] = v9;
  v88[3] = &unk_1F29EB8B8;
  BOOL v49 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v88 forKeys:v87 count:4];

  v80[0] = @"bundleID";
  v80[1] = @"updateType";
  v81[0] = @"com.apple.bird";
  v81[1] = &unk_1F29E7A50;
  v80[2] = @"eventIntervals";
  v77[0] = @"startDate";
  unint64_t v10 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:0.0];
  v78[0] = v10;
  v77[1] = @"endDate";
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:5.0];
  v78[1] = v11;
  unint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v78 forKeys:v77 count:2];
  v79[0] = v12;
  v75[0] = @"startDate";
  char v13 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:7.0];
  v76[0] = v13;
  v75[1] = @"endDate";
  BOOL v14 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:12.0];
  v76[1] = v14;
  int v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v76 forKeys:v75 count:2];
  v79[1] = v15;
  int v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v79 count:2];
  v81[2] = v16;
  uint64_t v48 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v81 forKeys:v80 count:3];

  v73[0] = @"bundleID";
  v73[1] = @"updateType";
  v74[0] = @"nsurlsessiond";
  v74[1] = &unk_1F29E7A50;
  void v73[2] = @"eventIntervals";
  v70[0] = @"startDate";
  char v47 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:0.0];
  v70[1] = @"endDate";
  v71[0] = v47;
  unint64_t v46 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:1.0];
  v71[1] = v46;
  uint64_t v45 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v71 forKeys:v70 count:2];
  v72[0] = v45;
  v68[0] = @"startDate";
  unsigned int v44 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:1.0];
  v68[1] = @"endDate";
  v69[0] = v44;
  char v43 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:1.0];
  v69[1] = v43;
  unint64_t v42 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v69 forKeys:v68 count:2];
  v72[1] = v42;
  v66[0] = @"startDate";
  uint64_t v41 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:1.0];
  v66[1] = @"endDate";
  v67[0] = v41;
  char v40 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:1.0];
  v67[1] = v40;
  unint64_t v39 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v67 forKeys:v66 count:2];
  void v72[2] = v39;
  v64[0] = @"startDate";
  uint64_t v38 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:1.0];
  v64[1] = @"endDate";
  v65[0] = v38;
  uint64_t v37 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:2.0];
  v65[1] = v37;
  unsigned int v36 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v65 forKeys:v64 count:2];
  v72[3] = v36;
  v62[0] = @"startDate";
  char v35 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:2.0];
  v62[1] = @"endDate";
  v63[0] = v35;
  char v34 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:7.0];
  v63[1] = v34;
  unint64_t v33 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v63 forKeys:v62 count:2];
  v72[4] = v33;
  v60[0] = @"startDate";
  uint64_t v32 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:7.0];
  v60[1] = @"endDate";
  v61[0] = v32;
  uint64_t v31 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:14.0];
  v61[1] = v31;
  unsigned int v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v61 forKeys:v60 count:2];
  v72[5] = v30;
  v58[0] = @"startDate";
  char v29 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:20.0];
  v58[1] = @"endDate";
  v59[0] = v29;
  char v17 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:24.0];
  v59[1] = v17;
  unsigned int v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v59 forKeys:v58 count:2];
  v72[6] = v18;
  v56[0] = @"startDate";
  uint64_t v19 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:27.0];
  v56[1] = @"endDate";
  v57[0] = v19;
  uint64_t v20 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:34.0];
  v57[1] = v20;
  unint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v57 forKeys:v56 count:2];
  v72[7] = v21;
  v54[0] = @"startDate";
  char v22 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:34.0];
  v54[1] = @"endDate";
  v55[0] = v22;
  char v23 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:40.0];
  v55[1] = v23;
  unsigned int v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v55 forKeys:v54 count:2];
  v72[8] = v24;
  uint64_t v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:v72 count:9];
  v74[2] = v25;
  char v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v74 forKeys:v73 count:3];

  v51[0] = v49;
  v51[1] = v48;
  v51[2] = v28;
  unint64_t v52 = @"events";
  uint64_t v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:v51 count:3];
  char v53 = v26;
  unint64_t v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v53 forKeys:&v52 count:1];

  [v50 didReceiveEventWithPayload:v27];
}

void testReportEnergy(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = [a2 energyResponse];
  unsigned int v3 = [NSString stringWithFormat:@"energyResponse=%@", v2];
  id v4 = (void *)MEMORY[0x1E4F929B8];
  id v5 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Services/PLDuetService.m"];
  id v6 = [v5 lastPathComponent];
  id v7 = [NSString stringWithUTF8String:"testReportEnergy"];
  [v4 logMessage:v3 fromFile:v6 fromFunction:v7 fromLineNumber:684];

  char v8 = PLLogCommon();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    unint64_t v10 = v3;
    _os_log_debug_impl(&dword_1D2690000, v8, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
  }
}

uint64_t testStartEvent(uint64_t a1, void *a2)
{
  return [a2 didReceiveStartEventWithPayload:&unk_1F29EB908];
}

uint64_t testStartEvent2(uint64_t a1, void *a2)
{
  return [a2 didReceiveStartEventWithPayload:&unk_1F29EB958];
}

id testStopEvent(uint64_t a1, void *a2)
{
  return (id)[a2 didReceiveStopEventWithPayload:&unk_1F29EB9A8];
}

void testStopEvent2(uint64_t a1, void *a2)
{
  void v9[2] = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  v8[1] = @"info";
  v9[0] = @"diagnosticd";
  v6[0] = &unk_1F29E7A50;
  v6[1] = &unk_1F29E7A98;
  v7[0] = &unk_1F29F12B0;
  v7[1] = &unk_1F29F12C0;
  v8[0] = @"bundleID";
  unsigned int v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:v6 count:2];
  v9[1] = v3;
  id v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:2];
  id v5 = (id)[v2 didReceiveStopEventWithPayload:v4];
}

uint64_t testReset(uint64_t a1, void *a2)
{
  return [a2 didReceiveReset];
}

void testCapping(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  unsigned int v3 = 0;
  double v4 = 0.0;
  do
  {
    unsigned int v16 = v3;
    unsigned int v5 = -20;
    double v6 = 0.0;
    do
    {
      [v2 capUtilizationInSeconds:v4 withUpperBoundInError:90.0 withCapInError:1.0 withCappedUpperBound:30.0];
      uint64_t v8 = v7;
      [v2 capUtilizationInSeconds:v6 withUpperBoundInError:90.0 withCapInError:10.0 withCappedUpperBound:30.0];
      unint64_t v10 = [NSString stringWithFormat:@"%f, %f => %f, %f", *(void *)&v4, *(void *)&v6, v8, v9];
      uint64_t v11 = (void *)MEMORY[0x1E4F929B8];
      unint64_t v12 = [NSString stringWithUTF8String:"/Library/Caches/com.apple.xbs/Sources/PerfPowerServices_Operators/Operators/Services/PLDuetService.m"];
      char v13 = [v12 lastPathComponent];
      BOOL v14 = [NSString stringWithUTF8String:"testCappingWithInput"];
      [v11 logMessage:v10 fromFile:v13 fromFunction:v14 fromLineNumber:1034];

      int v15 = PLLogCommon();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        unsigned int v18 = v10;
        _os_log_debug_impl(&dword_1D2690000, v15, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
      }

      double v6 = v6 + 20.0;
      v5 += 20;
    }
    while (v5 < 0xB4);
    double v4 = v4 + 20.0;
    unsigned int v3 = v16 + 20;
  }
  while (v16 < 0xB4);
}

uint64_t EutraStatsReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    uint64_t v8 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    uint64_t v11 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    unint64_t v12 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    char v13 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    BOOL v14 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    int v15 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    unsigned int v16 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    char v17 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[248]) |= 0x10u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_92;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              LODWORD(v29) = 0;
              goto LABEL_94;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_92:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_94:
          uint64_t v85 = v8[249];
          goto LABEL_127;
        case 2u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[248]) |= 2u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v9) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v29 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_98:
          uint64_t v85 = v10[250];
          goto LABEL_127;
        case 3u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[248]) |= 0x40u;
          while (2)
          {
            uint64_t v46 = *v3;
            unint64_t v47 = *(void *)(a2 + v46);
            if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v9) + v47);
              *(void *)(a2 + v46) = v47 + 1;
              v29 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v24 = v45++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_102:
          uint64_t v85 = v11[251];
          goto LABEL_127;
        case 4u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[248]) |= 8u;
          while (2)
          {
            uint64_t v51 = *v3;
            unint64_t v52 = *(void *)(a2 + v51);
            if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v9) + v52);
              *(void *)(a2 + v51) = v52 + 1;
              v29 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                BOOL v24 = v50++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_106;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_106:
          uint64_t v85 = v12[252];
          goto LABEL_127;
        case 5u:
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[248]) |= 0x20u;
          while (2)
          {
            uint64_t v56 = *v3;
            unint64_t v57 = *(void *)(a2 + v56);
            if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v58 = *(unsigned char *)(*(void *)(a2 + *v9) + v57);
              *(void *)(a2 + v56) = v57 + 1;
              v29 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                BOOL v24 = v55++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_110;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_110:
          uint64_t v85 = v13[253];
          goto LABEL_127;
        case 6u:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[248]) |= 4u;
          while (2)
          {
            uint64_t v61 = *v3;
            unint64_t v62 = *(void *)(a2 + v61);
            if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v63 = *(unsigned char *)(*(void *)(a2 + *v9) + v62);
              *(void *)(a2 + v61) = v62 + 1;
              v29 |= (unint64_t)(v63 & 0x7F) << v59;
              if (v63 < 0)
              {
                v59 += 7;
                BOOL v24 = v60++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_114;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_114:
          uint64_t v85 = v14[254];
          goto LABEL_127;
        case 7u:
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[248]) |= 0x100u;
          while (2)
          {
            uint64_t v66 = *v3;
            unint64_t v67 = *(void *)(a2 + v66);
            if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v68 = *(unsigned char *)(*(void *)(a2 + *v9) + v67);
              *(void *)(a2 + v66) = v67 + 1;
              v29 |= (unint64_t)(v68 & 0x7F) << v64;
              if (v68 < 0)
              {
                v64 += 7;
                BOOL v24 = v65++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_118;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_118:
          uint64_t v85 = v15[255];
          goto LABEL_127;
        case 8u:
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[248]) |= 0x200u;
          while (2)
          {
            uint64_t v71 = *v3;
            unint64_t v72 = *(void *)(a2 + v71);
            if (v72 == -1 || v72 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v73 = *(unsigned char *)(*(void *)(a2 + *v9) + v72);
              *(void *)(a2 + v71) = v72 + 1;
              v29 |= (unint64_t)(v73 & 0x7F) << v69;
              if (v73 < 0)
              {
                v69 += 7;
                BOOL v24 = v70++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_122;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_122:
          uint64_t v85 = v16[256];
          goto LABEL_127;
        case 9u:
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + v7[248]) |= 0x80u;
          while (2)
          {
            uint64_t v76 = *v3;
            unint64_t v77 = *(void *)(a2 + v76);
            if (v77 == -1 || v77 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v78 = *(unsigned char *)(*(void *)(a2 + *v9) + v77);
              *(void *)(a2 + v76) = v77 + 1;
              v29 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                BOOL v24 = v75++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_126;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_126:
          uint64_t v85 = v17[257];
LABEL_127:
          *(_DWORD *)(a1 + v85) = v29;
          continue;
        case 0xAu:
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v81 = 0;
          *(_WORD *)(a1 + v7[248]) |= 1u;
          break;
        default:
          unint64_t v33 = v8;
          char v34 = v10;
          char v35 = v11;
          unsigned int v36 = v7;
          uint64_t v37 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
          unint64_t v12 = v37;
          char v13 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          uint64_t v7 = v36;
          BOOL v14 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          uint64_t v11 = v35;
          int v15 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          unint64_t v10 = v34;
          char v17 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          uint64_t v8 = v33;
          unsigned int v16 = &OBJC_IVAR___KCellularLteFwDuplexMode__timestamp;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v82 = *v3;
        unint64_t v83 = *(void *)(a2 + v82);
        if (v83 == -1 || v83 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v84 = *(unsigned char *)(*(void *)(a2 + *v9) + v83);
        *(void *)(a2 + v82) = v83 + 1;
        v81 |= (unint64_t)(v84 & 0x7F) << v79;
        if ((v84 & 0x80) == 0) {
          goto LABEL_131;
        }
        v79 += 7;
        BOOL v24 = v80++ >= 9;
        if (v24)
        {
          uint64_t v81 = 0;
          goto LABEL_133;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_131:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v81 = 0;
      }
LABEL_133:
      *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v81;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL RfBandDurationReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 8u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              BOOL v24 = &OBJC_IVAR___RfBandDuration__rat;
              goto LABEL_69;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              BOOL v24 = &OBJC_IVAR___RfBandDuration__rat;
              goto LABEL_72;
            }
          }
          BOOL v24 = &OBJC_IVAR___RfBandDuration__rat;
          goto LABEL_70;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              BOOL v24 = &OBJC_IVAR___RfBandDuration__geraRfBand;
              goto LABEL_69;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                BOOL v24 = &OBJC_IVAR___RfBandDuration__geraRfBand;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          BOOL v24 = &OBJC_IVAR___RfBandDuration__geraRfBand;
          goto LABEL_70;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 0x10u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              BOOL v24 = &OBJC_IVAR___RfBandDuration__utraFddRfBand;
              goto LABEL_69;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                BOOL v24 = &OBJC_IVAR___RfBandDuration__utraFddRfBand;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          BOOL v24 = &OBJC_IVAR___RfBandDuration__utraFddRfBand;
          goto LABEL_70;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 0x20u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              BOOL v24 = &OBJC_IVAR___RfBandDuration__utraTddRfBand;
              goto LABEL_69;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                BOOL v24 = &OBJC_IVAR___RfBandDuration__utraTddRfBand;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          BOOL v24 = &OBJC_IVAR___RfBandDuration__utraTddRfBand;
          goto LABEL_70;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              BOOL v24 = &OBJC_IVAR___RfBandDuration__eutraRfBand;
              goto LABEL_69;
            }
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v43 + 1;
            v19 |= (unint64_t)(v44 & 0x7F) << v40;
            if (v44 < 0)
            {
              v40 += 7;
              BOOL v23 = v41++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                BOOL v24 = &OBJC_IVAR___RfBandDuration__eutraRfBand;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          BOOL v24 = &OBJC_IVAR___RfBandDuration__eutraRfBand;
          goto LABEL_70;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v19 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
        {
          BOOL v24 = &OBJC_IVAR___RfBandDuration__durationMs;
          goto LABEL_70;
        }
        v45 += 7;
        BOOL v23 = v46++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          BOOL v24 = &OBJC_IVAR___RfBandDuration__durationMs;
          goto LABEL_72;
        }
      }
      BOOL v24 = &OBJC_IVAR___RfBandDuration__durationMs;
LABEL_69:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_70:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_72:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularPmuAverageCurrentReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_45;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_47:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else if (v17 == 2)
      {
        char v30 = objc_alloc_init(RegulatorAverageCurrent);
        [(id)a1 addRegulatorCurrent:v30];
        if (!PBReaderPlaceMark() || !RegulatorAverageCurrentReadFrom((uint64_t)v30, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PLLogApplication()
{
  if (qword_1EBD5A990 != -1) {
    dispatch_once(&qword_1EBD5A990, &__block_literal_global_48);
  }
  uint64_t v0 = (void *)qword_1EBD5A988;
  return v0;
}

uint64_t __PLLogApplication_block_invoke()
{
  qword_1EBD5A988 = (uint64_t)os_log_create("com.apple.powerlog", "application");
  return MEMORY[0x1F41817F8]();
}

void sub_1D2A4C1D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D2A4C2E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D2A4C380(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D2A51040(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 224));
  _Unwind_Resume(a1);
}

uint64_t TestRefreshAllAppsAndPlugins(uint64_t a1, void *a2)
{
  return [a2 refreshAllAppsAndPlugins];
}

void sub_1D2A54544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D2A57AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1D2A57FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void sub_1D2A58398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1D2A58750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t GeraStatsReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_52:
          uint64_t v40 = 16;
          goto LABEL_61;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_56:
          uint64_t v40 = 24;
          goto LABEL_61;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_60:
          uint64_t v40 = 20;
LABEL_61:
          *(_DWORD *)(a1 + v40) = v19;
          continue;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v36 |= (unint64_t)(v39 & 0x7F) << v34;
        if ((v39 & 0x80) == 0) {
          goto LABEL_63;
        }
        v34 += 7;
        BOOL v14 = v35++ >= 9;
        if (v14)
        {
          uint64_t v36 = 0;
          goto LABEL_65;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_63:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v36 = 0;
      }
LABEL_65:
      *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v36;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularLteDataInactivityBeforeIdleReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 15)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularProtocolStackHistReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      switch((v10 >> 3))
      {
        case 1u:
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(void *)(a1 + 156) |= 1uLL;
          while (1)
          {
            uint64_t v21 = *v3;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_276;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              uint64_t v20 = 0;
              goto LABEL_278;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_276:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_278:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v20;
          goto LABEL_420;
        case 2u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x200000000uLL;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_286;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_286:
          uint64_t v201 = 144;
          goto LABEL_419;
        case 3u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 2uLL;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_290;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_290:
          uint64_t v201 = 16;
          goto LABEL_419;
        case 4u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 4uLL;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_294;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_294:
          uint64_t v201 = 20;
          goto LABEL_419;
        case 5u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x2000uLL;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_298;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_298:
          uint64_t v201 = 64;
          goto LABEL_419;
        case 6u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x1000000uLL;
          while (2)
          {
            uint64_t v52 = *v3;
            unint64_t v53 = *(void *)(a2 + v52);
            if (v53 == -1 || v53 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
              *(void *)(a2 + v52) = v53 + 1;
              v26 |= (unint64_t)(v54 & 0x7F) << v50;
              if (v54 < 0)
              {
                v50 += 7;
                BOOL v14 = v51++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_302;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_302:
          uint64_t v201 = 108;
          goto LABEL_419;
        case 7u:
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x8000000uLL;
          while (2)
          {
            uint64_t v57 = *v3;
            unint64_t v58 = *(void *)(a2 + v57);
            if (v58 == -1 || v58 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v59 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
              *(void *)(a2 + v57) = v58 + 1;
              v26 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                BOOL v14 = v56++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_306;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_306:
          uint64_t v201 = 120;
          goto LABEL_419;
        case 8u:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x10000000uLL;
          while (2)
          {
            uint64_t v62 = *v3;
            unint64_t v63 = *(void *)(a2 + v62);
            if (v63 == -1 || v63 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v64 = *(unsigned char *)(*(void *)(a2 + *v7) + v63);
              *(void *)(a2 + v62) = v63 + 1;
              v26 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                BOOL v14 = v61++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_310;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_310:
          uint64_t v201 = 124;
          goto LABEL_419;
        case 9u:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x20000000uLL;
          while (2)
          {
            uint64_t v67 = *v3;
            unint64_t v68 = *(void *)(a2 + v67);
            if (v68 == -1 || v68 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v69 = *(unsigned char *)(*(void *)(a2 + *v7) + v68);
              *(void *)(a2 + v67) = v68 + 1;
              v26 |= (unint64_t)(v69 & 0x7F) << v65;
              if (v69 < 0)
              {
                v65 += 7;
                BOOL v14 = v66++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_314;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_314:
          uint64_t v201 = 128;
          goto LABEL_419;
        case 0xAu:
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x40000000uLL;
          while (2)
          {
            uint64_t v72 = *v3;
            unint64_t v73 = *(void *)(a2 + v72);
            if (v73 == -1 || v73 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v74 = *(unsigned char *)(*(void *)(a2 + *v7) + v73);
              *(void *)(a2 + v72) = v73 + 1;
              v26 |= (unint64_t)(v74 & 0x7F) << v70;
              if (v74 < 0)
              {
                v70 += 7;
                BOOL v14 = v71++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_318;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_318:
          uint64_t v201 = 132;
          goto LABEL_419;
        case 0xBu:
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x80000000uLL;
          while (2)
          {
            uint64_t v77 = *v3;
            unint64_t v78 = *(void *)(a2 + v77);
            if (v78 == -1 || v78 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v79 = *(unsigned char *)(*(void *)(a2 + *v7) + v78);
              *(void *)(a2 + v77) = v78 + 1;
              v26 |= (unint64_t)(v79 & 0x7F) << v75;
              if (v79 < 0)
              {
                v75 += 7;
                BOOL v14 = v76++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_322;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_322:
          uint64_t v201 = 136;
          goto LABEL_419;
        case 0xCu:
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x100000000uLL;
          while (2)
          {
            uint64_t v82 = *v3;
            unint64_t v83 = *(void *)(a2 + v82);
            if (v83 == -1 || v83 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v84 = *(unsigned char *)(*(void *)(a2 + *v7) + v83);
              *(void *)(a2 + v82) = v83 + 1;
              v26 |= (unint64_t)(v84 & 0x7F) << v80;
              if (v84 < 0)
              {
                v80 += 7;
                BOOL v14 = v81++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_326;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_326:
          uint64_t v201 = 140;
          goto LABEL_419;
        case 0xDu:
          char v85 = 0;
          unsigned int v86 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 8uLL;
          while (2)
          {
            uint64_t v87 = *v3;
            unint64_t v88 = *(void *)(a2 + v87);
            if (v88 == -1 || v88 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v89 = *(unsigned char *)(*(void *)(a2 + *v7) + v88);
              *(void *)(a2 + v87) = v88 + 1;
              v26 |= (unint64_t)(v89 & 0x7F) << v85;
              if (v89 < 0)
              {
                v85 += 7;
                BOOL v14 = v86++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_330;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_330:
          uint64_t v201 = 24;
          goto LABEL_419;
        case 0xEu:
          char v90 = 0;
          unsigned int v91 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x10uLL;
          while (2)
          {
            uint64_t v92 = *v3;
            unint64_t v93 = *(void *)(a2 + v92);
            if (v93 == -1 || v93 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v94 = *(unsigned char *)(*(void *)(a2 + *v7) + v93);
              *(void *)(a2 + v92) = v93 + 1;
              v26 |= (unint64_t)(v94 & 0x7F) << v90;
              if (v94 < 0)
              {
                v90 += 7;
                BOOL v14 = v91++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_334;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_334:
          uint64_t v201 = 28;
          goto LABEL_419;
        case 0xFu:
          char v95 = 0;
          unsigned int v96 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x20uLL;
          while (2)
          {
            uint64_t v97 = *v3;
            unint64_t v98 = *(void *)(a2 + v97);
            if (v98 == -1 || v98 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v99 = *(unsigned char *)(*(void *)(a2 + *v7) + v98);
              *(void *)(a2 + v97) = v98 + 1;
              v26 |= (unint64_t)(v99 & 0x7F) << v95;
              if (v99 < 0)
              {
                v95 += 7;
                BOOL v14 = v96++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_338;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_338:
          uint64_t v201 = 32;
          goto LABEL_419;
        case 0x10u:
          char v100 = 0;
          unsigned int v101 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x40uLL;
          while (2)
          {
            uint64_t v102 = *v3;
            unint64_t v103 = *(void *)(a2 + v102);
            if (v103 == -1 || v103 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v104 = *(unsigned char *)(*(void *)(a2 + *v7) + v103);
              *(void *)(a2 + v102) = v103 + 1;
              v26 |= (unint64_t)(v104 & 0x7F) << v100;
              if (v104 < 0)
              {
                v100 += 7;
                BOOL v14 = v101++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_342;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_342:
          uint64_t v201 = 36;
          goto LABEL_419;
        case 0x11u:
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x80uLL;
          while (2)
          {
            uint64_t v107 = *v3;
            unint64_t v108 = *(void *)(a2 + v107);
            if (v108 == -1 || v108 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v109 = *(unsigned char *)(*(void *)(a2 + *v7) + v108);
              *(void *)(a2 + v107) = v108 + 1;
              v26 |= (unint64_t)(v109 & 0x7F) << v105;
              if (v109 < 0)
              {
                v105 += 7;
                BOOL v14 = v106++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_346;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_346:
          uint64_t v201 = 40;
          goto LABEL_419;
        case 0x12u:
          char v110 = 0;
          unsigned int v111 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x100uLL;
          while (2)
          {
            uint64_t v112 = *v3;
            unint64_t v113 = *(void *)(a2 + v112);
            if (v113 == -1 || v113 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v114 = *(unsigned char *)(*(void *)(a2 + *v7) + v113);
              *(void *)(a2 + v112) = v113 + 1;
              v26 |= (unint64_t)(v114 & 0x7F) << v110;
              if (v114 < 0)
              {
                v110 += 7;
                BOOL v14 = v111++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_350;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_350:
          uint64_t v201 = 44;
          goto LABEL_419;
        case 0x13u:
          char v115 = 0;
          unsigned int v116 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x200uLL;
          while (2)
          {
            uint64_t v117 = *v3;
            unint64_t v118 = *(void *)(a2 + v117);
            if (v118 == -1 || v118 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v119 = *(unsigned char *)(*(void *)(a2 + *v7) + v118);
              *(void *)(a2 + v117) = v118 + 1;
              v26 |= (unint64_t)(v119 & 0x7F) << v115;
              if (v119 < 0)
              {
                v115 += 7;
                BOOL v14 = v116++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_354;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_354:
          uint64_t v201 = 48;
          goto LABEL_419;
        case 0x14u:
          char v120 = 0;
          unsigned int v121 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x400uLL;
          while (2)
          {
            uint64_t v122 = *v3;
            unint64_t v123 = *(void *)(a2 + v122);
            if (v123 == -1 || v123 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v124 = *(unsigned char *)(*(void *)(a2 + *v7) + v123);
              *(void *)(a2 + v122) = v123 + 1;
              v26 |= (unint64_t)(v124 & 0x7F) << v120;
              if (v124 < 0)
              {
                v120 += 7;
                BOOL v14 = v121++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_358;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_358:
          uint64_t v201 = 52;
          goto LABEL_419;
        case 0x15u:
          char v125 = 0;
          unsigned int v126 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x800uLL;
          while (2)
          {
            uint64_t v127 = *v3;
            unint64_t v128 = *(void *)(a2 + v127);
            if (v128 == -1 || v128 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v129 = *(unsigned char *)(*(void *)(a2 + *v7) + v128);
              *(void *)(a2 + v127) = v128 + 1;
              v26 |= (unint64_t)(v129 & 0x7F) << v125;
              if (v129 < 0)
              {
                v125 += 7;
                BOOL v14 = v126++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_362;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_362:
          uint64_t v201 = 56;
          goto LABEL_419;
        case 0x16u:
          char v130 = 0;
          unsigned int v131 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x1000uLL;
          while (2)
          {
            uint64_t v132 = *v3;
            unint64_t v133 = *(void *)(a2 + v132);
            if (v133 == -1 || v133 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v134 = *(unsigned char *)(*(void *)(a2 + *v7) + v133);
              *(void *)(a2 + v132) = v133 + 1;
              v26 |= (unint64_t)(v134 & 0x7F) << v130;
              if (v134 < 0)
              {
                v130 += 7;
                BOOL v14 = v131++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_366;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_366:
          uint64_t v201 = 60;
          goto LABEL_419;
        case 0x17u:
          char v135 = 0;
          unsigned int v136 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x4000uLL;
          while (2)
          {
            uint64_t v137 = *v3;
            unint64_t v138 = *(void *)(a2 + v137);
            if (v138 == -1 || v138 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v139 = *(unsigned char *)(*(void *)(a2 + *v7) + v138);
              *(void *)(a2 + v137) = v138 + 1;
              v26 |= (unint64_t)(v139 & 0x7F) << v135;
              if (v139 < 0)
              {
                v135 += 7;
                BOOL v14 = v136++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_370;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_370:
          uint64_t v201 = 68;
          goto LABEL_419;
        case 0x18u:
          char v140 = 0;
          unsigned int v141 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x8000uLL;
          while (2)
          {
            uint64_t v142 = *v3;
            unint64_t v143 = *(void *)(a2 + v142);
            if (v143 == -1 || v143 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v144 = *(unsigned char *)(*(void *)(a2 + *v7) + v143);
              *(void *)(a2 + v142) = v143 + 1;
              v26 |= (unint64_t)(v144 & 0x7F) << v140;
              if (v144 < 0)
              {
                v140 += 7;
                BOOL v14 = v141++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_374;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_374:
          uint64_t v201 = 72;
          goto LABEL_419;
        case 0x19u:
          char v145 = 0;
          unsigned int v146 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x10000uLL;
          while (2)
          {
            uint64_t v147 = *v3;
            unint64_t v148 = *(void *)(a2 + v147);
            if (v148 == -1 || v148 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v149 = *(unsigned char *)(*(void *)(a2 + *v7) + v148);
              *(void *)(a2 + v147) = v148 + 1;
              v26 |= (unint64_t)(v149 & 0x7F) << v145;
              if (v149 < 0)
              {
                v145 += 7;
                BOOL v14 = v146++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_378;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_378:
          uint64_t v201 = 76;
          goto LABEL_419;
        case 0x1Au:
          char v150 = 0;
          unsigned int v151 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x20000uLL;
          while (2)
          {
            uint64_t v152 = *v3;
            unint64_t v153 = *(void *)(a2 + v152);
            if (v153 == -1 || v153 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v154 = *(unsigned char *)(*(void *)(a2 + *v7) + v153);
              *(void *)(a2 + v152) = v153 + 1;
              v26 |= (unint64_t)(v154 & 0x7F) << v150;
              if (v154 < 0)
              {
                v150 += 7;
                BOOL v14 = v151++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_382;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_382:
          uint64_t v201 = 80;
          goto LABEL_419;
        case 0x1Bu:
          char v155 = 0;
          unsigned int v156 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x40000uLL;
          while (2)
          {
            uint64_t v157 = *v3;
            unint64_t v158 = *(void *)(a2 + v157);
            if (v158 == -1 || v158 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v159 = *(unsigned char *)(*(void *)(a2 + *v7) + v158);
              *(void *)(a2 + v157) = v158 + 1;
              v26 |= (unint64_t)(v159 & 0x7F) << v155;
              if (v159 < 0)
              {
                v155 += 7;
                BOOL v14 = v156++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_386;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_386:
          uint64_t v201 = 84;
          goto LABEL_419;
        case 0x1Cu:
          char v160 = 0;
          unsigned int v161 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x80000uLL;
          while (2)
          {
            uint64_t v162 = *v3;
            unint64_t v163 = *(void *)(a2 + v162);
            if (v163 == -1 || v163 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v164 = *(unsigned char *)(*(void *)(a2 + *v7) + v163);
              *(void *)(a2 + v162) = v163 + 1;
              v26 |= (unint64_t)(v164 & 0x7F) << v160;
              if (v164 < 0)
              {
                v160 += 7;
                BOOL v14 = v161++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_390;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_390:
          uint64_t v201 = 88;
          goto LABEL_419;
        case 0x1Du:
          char v165 = 0;
          unsigned int v166 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x100000uLL;
          while (2)
          {
            uint64_t v167 = *v3;
            unint64_t v168 = *(void *)(a2 + v167);
            if (v168 == -1 || v168 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v169 = *(unsigned char *)(*(void *)(a2 + *v7) + v168);
              *(void *)(a2 + v167) = v168 + 1;
              v26 |= (unint64_t)(v169 & 0x7F) << v165;
              if (v169 < 0)
              {
                v165 += 7;
                BOOL v14 = v166++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_394;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_394:
          uint64_t v201 = 92;
          goto LABEL_419;
        case 0x1Eu:
          char v170 = 0;
          unsigned int v171 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x200000uLL;
          while (2)
          {
            uint64_t v172 = *v3;
            unint64_t v173 = *(void *)(a2 + v172);
            if (v173 == -1 || v173 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v174 = *(unsigned char *)(*(void *)(a2 + *v7) + v173);
              *(void *)(a2 + v172) = v173 + 1;
              v26 |= (unint64_t)(v174 & 0x7F) << v170;
              if (v174 < 0)
              {
                v170 += 7;
                BOOL v14 = v171++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_398;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_398:
          uint64_t v201 = 96;
          goto LABEL_419;
        case 0x1Fu:
          char v175 = 0;
          unsigned int v176 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x400000uLL;
          while (2)
          {
            uint64_t v177 = *v3;
            unint64_t v178 = *(void *)(a2 + v177);
            if (v178 == -1 || v178 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v179 = *(unsigned char *)(*(void *)(a2 + *v7) + v178);
              *(void *)(a2 + v177) = v178 + 1;
              v26 |= (unint64_t)(v179 & 0x7F) << v175;
              if (v179 < 0)
              {
                v175 += 7;
                BOOL v14 = v176++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_402;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_402:
          uint64_t v201 = 100;
          goto LABEL_419;
        case 0x20u:
          char v180 = 0;
          unsigned int v181 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x800000uLL;
          while (2)
          {
            uint64_t v182 = *v3;
            unint64_t v183 = *(void *)(a2 + v182);
            if (v183 == -1 || v183 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v184 = *(unsigned char *)(*(void *)(a2 + *v7) + v183);
              *(void *)(a2 + v182) = v183 + 1;
              v26 |= (unint64_t)(v184 & 0x7F) << v180;
              if (v184 < 0)
              {
                v180 += 7;
                BOOL v14 = v181++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_406;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_406:
          uint64_t v201 = 104;
          goto LABEL_419;
        case 0x21u:
          char v185 = 0;
          unsigned int v186 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x2000000uLL;
          while (2)
          {
            uint64_t v187 = *v3;
            unint64_t v188 = *(void *)(a2 + v187);
            if (v188 == -1 || v188 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v189 = *(unsigned char *)(*(void *)(a2 + *v7) + v188);
              *(void *)(a2 + v187) = v188 + 1;
              v26 |= (unint64_t)(v189 & 0x7F) << v185;
              if (v189 < 0)
              {
                v185 += 7;
                BOOL v14 = v186++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_410;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_410:
          uint64_t v201 = 112;
          goto LABEL_419;
        case 0x22u:
          char v190 = 0;
          unsigned int v191 = 0;
          uint64_t v26 = 0;
          *(void *)(a1 + 156) |= 0x4000000uLL;
          while (2)
          {
            uint64_t v192 = *v3;
            unint64_t v193 = *(void *)(a2 + v192);
            if (v193 == -1 || v193 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v194 = *(unsigned char *)(*(void *)(a2 + *v7) + v193);
              *(void *)(a2 + v192) = v193 + 1;
              v26 |= (unint64_t)(v194 & 0x7F) << v190;
              if (v194 < 0)
              {
                v190 += 7;
                BOOL v14 = v191++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_414;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_414:
          uint64_t v201 = 116;
          goto LABEL_419;
        default:
          if (v17 == 126)
          {
            char v195 = 0;
            unsigned int v196 = 0;
            uint64_t v26 = 0;
            *(void *)(a1 + 156) |= 0x400000000uLL;
            while (1)
            {
              uint64_t v197 = *v3;
              unint64_t v198 = *(void *)(a2 + v197);
              if (v198 == -1 || v198 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v199 = *(unsigned char *)(*(void *)(a2 + *v7) + v198);
              *(void *)(a2 + v197) = v198 + 1;
              v26 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0) {
                goto LABEL_416;
              }
              v195 += 7;
              BOOL v14 = v196++ >= 9;
              if (v14)
              {
                LODWORD(v26) = 0;
                goto LABEL_418;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_416:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v26) = 0;
            }
LABEL_418:
            uint64_t v201 = 148;
            goto LABEL_419;
          }
          if (v17 == 127)
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            *(void *)(a1 + 156) |= 0x800000000uLL;
            while (1)
            {
              uint64_t v27 = *v3;
              unint64_t v28 = *(void *)(a2 + v27);
              if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if ((v29 & 0x80) == 0) {
                goto LABEL_280;
              }
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                LODWORD(v26) = 0;
                goto LABEL_282;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_280:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v26) = 0;
            }
LABEL_282:
            uint64_t v201 = 152;
LABEL_419:
            *(_DWORD *)(a1 + v201) = v26;
            goto LABEL_420;
          }
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
LABEL_420:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HistogramReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = objc_alloc_init(HistogramBin);
        [(id)a1 addBin:v23];
        if (!PBReaderPlaceMark() || !HistogramBinReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularPmicHwStatsReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(_DWORD *)(a1 + 120) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_211;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_213;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_211:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_213:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x40u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_217;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_217:
          uint64_t v155 = 36;
          goto LABEL_318;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x400000u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_221;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_221:
          uint64_t v155 = 100;
          goto LABEL_318;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 2u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_225;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_225:
          uint64_t v155 = 16;
          goto LABEL_318;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x800000u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_229;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_229:
          uint64_t v155 = 104;
          goto LABEL_318;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x4000u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_233;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_233:
          uint64_t v155 = 68;
          goto LABEL_318;
        case 7u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x10000u;
          while (2)
          {
            uint64_t v52 = *v3;
            unint64_t v53 = *(void *)(a2 + v52);
            if (v53 == -1 || v53 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
              *(void *)(a2 + v52) = v53 + 1;
              v26 |= (unint64_t)(v54 & 0x7F) << v50;
              if (v54 < 0)
              {
                v50 += 7;
                BOOL v14 = v51++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_237;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_237:
          uint64_t v155 = 76;
          goto LABEL_318;
        case 8u:
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x200u;
          while (2)
          {
            uint64_t v57 = *v3;
            unint64_t v58 = *(void *)(a2 + v57);
            if (v58 == -1 || v58 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v59 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
              *(void *)(a2 + v57) = v58 + 1;
              v26 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                BOOL v14 = v56++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_241;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_241:
          uint64_t v155 = 48;
          goto LABEL_318;
        case 9u:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x100u;
          while (2)
          {
            uint64_t v62 = *v3;
            unint64_t v63 = *(void *)(a2 + v62);
            if (v63 == -1 || v63 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v64 = *(unsigned char *)(*(void *)(a2 + *v7) + v63);
              *(void *)(a2 + v62) = v63 + 1;
              v26 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                BOOL v14 = v61++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_245;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_245:
          uint64_t v155 = 44;
          goto LABEL_318;
        case 0xAu:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x8000u;
          while (2)
          {
            uint64_t v67 = *v3;
            unint64_t v68 = *(void *)(a2 + v67);
            if (v68 == -1 || v68 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v69 = *(unsigned char *)(*(void *)(a2 + *v7) + v68);
              *(void *)(a2 + v67) = v68 + 1;
              v26 |= (unint64_t)(v69 & 0x7F) << v65;
              if (v69 < 0)
              {
                v65 += 7;
                BOOL v14 = v66++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_249;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_249:
          uint64_t v155 = 72;
          goto LABEL_318;
        case 0xBu:
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x4000000u;
          while (2)
          {
            uint64_t v72 = *v3;
            unint64_t v73 = *(void *)(a2 + v72);
            if (v73 == -1 || v73 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v74 = *(unsigned char *)(*(void *)(a2 + *v7) + v73);
              *(void *)(a2 + v72) = v73 + 1;
              v26 |= (unint64_t)(v74 & 0x7F) << v70;
              if (v74 < 0)
              {
                v70 += 7;
                BOOL v14 = v71++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_253;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_253:
          uint64_t v155 = 116;
          goto LABEL_318;
        case 0xCu:
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x1000000u;
          while (2)
          {
            uint64_t v77 = *v3;
            unint64_t v78 = *(void *)(a2 + v77);
            if (v78 == -1 || v78 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v79 = *(unsigned char *)(*(void *)(a2 + *v7) + v78);
              *(void *)(a2 + v77) = v78 + 1;
              v26 |= (unint64_t)(v79 & 0x7F) << v75;
              if (v79 < 0)
              {
                v75 += 7;
                BOOL v14 = v76++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_257;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_257:
          uint64_t v155 = 108;
          goto LABEL_318;
        case 0xDu:
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x400u;
          while (2)
          {
            uint64_t v82 = *v3;
            unint64_t v83 = *(void *)(a2 + v82);
            if (v83 == -1 || v83 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v84 = *(unsigned char *)(*(void *)(a2 + *v7) + v83);
              *(void *)(a2 + v82) = v83 + 1;
              v26 |= (unint64_t)(v84 & 0x7F) << v80;
              if (v84 < 0)
              {
                v80 += 7;
                BOOL v14 = v81++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_261;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_261:
          uint64_t v155 = 52;
          goto LABEL_318;
        case 0xEu:
          char v85 = 0;
          unsigned int v86 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x1000u;
          while (2)
          {
            uint64_t v87 = *v3;
            unint64_t v88 = *(void *)(a2 + v87);
            if (v88 == -1 || v88 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v89 = *(unsigned char *)(*(void *)(a2 + *v7) + v88);
              *(void *)(a2 + v87) = v88 + 1;
              v26 |= (unint64_t)(v89 & 0x7F) << v85;
              if (v89 < 0)
              {
                v85 += 7;
                BOOL v14 = v86++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_265;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_265:
          uint64_t v155 = 60;
          goto LABEL_318;
        case 0xFu:
          char v90 = 0;
          unsigned int v91 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x800u;
          while (2)
          {
            uint64_t v92 = *v3;
            unint64_t v93 = *(void *)(a2 + v92);
            if (v93 == -1 || v93 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v94 = *(unsigned char *)(*(void *)(a2 + *v7) + v93);
              *(void *)(a2 + v92) = v93 + 1;
              v26 |= (unint64_t)(v94 & 0x7F) << v90;
              if (v94 < 0)
              {
                v90 += 7;
                BOOL v14 = v91++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_269;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_269:
          uint64_t v155 = 56;
          goto LABEL_318;
        case 0x10u:
          char v95 = 0;
          unsigned int v96 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x200000u;
          while (2)
          {
            uint64_t v97 = *v3;
            unint64_t v98 = *(void *)(a2 + v97);
            if (v98 == -1 || v98 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v99 = *(unsigned char *)(*(void *)(a2 + *v7) + v98);
              *(void *)(a2 + v97) = v98 + 1;
              v26 |= (unint64_t)(v99 & 0x7F) << v95;
              if (v99 < 0)
              {
                v95 += 7;
                BOOL v14 = v96++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_273;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_273:
          uint64_t v155 = 96;
          goto LABEL_318;
        case 0x11u:
          char v100 = 0;
          unsigned int v101 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x40000u;
          while (2)
          {
            uint64_t v102 = *v3;
            unint64_t v103 = *(void *)(a2 + v102);
            if (v103 == -1 || v103 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v104 = *(unsigned char *)(*(void *)(a2 + *v7) + v103);
              *(void *)(a2 + v102) = v103 + 1;
              v26 |= (unint64_t)(v104 & 0x7F) << v100;
              if (v104 < 0)
              {
                v100 += 7;
                BOOL v14 = v101++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_277;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_277:
          uint64_t v155 = 84;
          goto LABEL_318;
        case 0x12u:
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x80000u;
          while (2)
          {
            uint64_t v107 = *v3;
            unint64_t v108 = *(void *)(a2 + v107);
            if (v108 == -1 || v108 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v109 = *(unsigned char *)(*(void *)(a2 + *v7) + v108);
              *(void *)(a2 + v107) = v108 + 1;
              v26 |= (unint64_t)(v109 & 0x7F) << v105;
              if (v109 < 0)
              {
                v105 += 7;
                BOOL v14 = v106++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_281;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_281:
          uint64_t v155 = 88;
          goto LABEL_318;
        case 0x13u:
          char v110 = 0;
          unsigned int v111 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 4u;
          while (2)
          {
            uint64_t v112 = *v3;
            unint64_t v113 = *(void *)(a2 + v112);
            if (v113 == -1 || v113 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v114 = *(unsigned char *)(*(void *)(a2 + *v7) + v113);
              *(void *)(a2 + v112) = v113 + 1;
              v26 |= (unint64_t)(v114 & 0x7F) << v110;
              if (v114 < 0)
              {
                v110 += 7;
                BOOL v14 = v111++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_285;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_285:
          uint64_t v155 = 20;
          goto LABEL_318;
        case 0x14u:
          char v115 = 0;
          unsigned int v116 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 8u;
          while (2)
          {
            uint64_t v117 = *v3;
            unint64_t v118 = *(void *)(a2 + v117);
            if (v118 == -1 || v118 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v119 = *(unsigned char *)(*(void *)(a2 + *v7) + v118);
              *(void *)(a2 + v117) = v118 + 1;
              v26 |= (unint64_t)(v119 & 0x7F) << v115;
              if (v119 < 0)
              {
                v115 += 7;
                BOOL v14 = v116++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_289;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_289:
          uint64_t v155 = 24;
          goto LABEL_318;
        case 0x15u:
          char v120 = 0;
          unsigned int v121 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x80u;
          while (2)
          {
            uint64_t v122 = *v3;
            unint64_t v123 = *(void *)(a2 + v122);
            if (v123 == -1 || v123 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v124 = *(unsigned char *)(*(void *)(a2 + *v7) + v123);
              *(void *)(a2 + v122) = v123 + 1;
              v26 |= (unint64_t)(v124 & 0x7F) << v120;
              if (v124 < 0)
              {
                v120 += 7;
                BOOL v14 = v121++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_293;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_293:
          uint64_t v155 = 40;
          goto LABEL_318;
        case 0x16u:
          char v125 = 0;
          unsigned int v126 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x2000000u;
          while (2)
          {
            uint64_t v127 = *v3;
            unint64_t v128 = *(void *)(a2 + v127);
            if (v128 == -1 || v128 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v129 = *(unsigned char *)(*(void *)(a2 + *v7) + v128);
              *(void *)(a2 + v127) = v128 + 1;
              v26 |= (unint64_t)(v129 & 0x7F) << v125;
              if (v129 < 0)
              {
                v125 += 7;
                BOOL v14 = v126++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_297;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_297:
          uint64_t v155 = 112;
          goto LABEL_318;
        case 0x17u:
          char v130 = 0;
          unsigned int v131 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x2000u;
          while (2)
          {
            uint64_t v132 = *v3;
            unint64_t v133 = *(void *)(a2 + v132);
            if (v133 == -1 || v133 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v134 = *(unsigned char *)(*(void *)(a2 + *v7) + v133);
              *(void *)(a2 + v132) = v133 + 1;
              v26 |= (unint64_t)(v134 & 0x7F) << v130;
              if (v134 < 0)
              {
                v130 += 7;
                BOOL v14 = v131++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_301;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_301:
          uint64_t v155 = 64;
          goto LABEL_318;
        case 0x18u:
          char v135 = 0;
          unsigned int v136 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x20000u;
          while (2)
          {
            uint64_t v137 = *v3;
            unint64_t v138 = *(void *)(a2 + v137);
            if (v138 == -1 || v138 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v139 = *(unsigned char *)(*(void *)(a2 + *v7) + v138);
              *(void *)(a2 + v137) = v138 + 1;
              v26 |= (unint64_t)(v139 & 0x7F) << v135;
              if (v139 < 0)
              {
                v135 += 7;
                BOOL v14 = v136++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_305;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_305:
          uint64_t v155 = 80;
          goto LABEL_318;
        case 0x19u:
          char v140 = 0;
          unsigned int v141 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x10u;
          while (2)
          {
            uint64_t v142 = *v3;
            unint64_t v143 = *(void *)(a2 + v142);
            if (v143 == -1 || v143 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v144 = *(unsigned char *)(*(void *)(a2 + *v7) + v143);
              *(void *)(a2 + v142) = v143 + 1;
              v26 |= (unint64_t)(v144 & 0x7F) << v140;
              if (v144 < 0)
              {
                v140 += 7;
                BOOL v14 = v141++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_309;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_309:
          uint64_t v155 = 28;
          goto LABEL_318;
        case 0x1Au:
          char v145 = 0;
          unsigned int v146 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x20u;
          while (2)
          {
            uint64_t v147 = *v3;
            unint64_t v148 = *(void *)(a2 + v147);
            if (v148 == -1 || v148 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v149 = *(unsigned char *)(*(void *)(a2 + *v7) + v148);
              *(void *)(a2 + v147) = v148 + 1;
              v26 |= (unint64_t)(v149 & 0x7F) << v145;
              if (v149 < 0)
              {
                v145 += 7;
                BOOL v14 = v146++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_313;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_313:
          uint64_t v155 = 32;
          goto LABEL_318;
        case 0x1Bu:
          char v150 = 0;
          unsigned int v151 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 120) |= 0x100000u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v152 = *v3;
        unint64_t v153 = *(void *)(a2 + v152);
        if (v153 == -1 || v153 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v154 = *(unsigned char *)(*(void *)(a2 + *v7) + v153);
        *(void *)(a2 + v152) = v153 + 1;
        v26 |= (unint64_t)(v154 & 0x7F) << v150;
        if ((v154 & 0x80) == 0) {
          goto LABEL_315;
        }
        v150 += 7;
        BOOL v14 = v151++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_317;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_315:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_317:
      uint64_t v155 = 92;
LABEL_318:
      *(_DWORD *)(a1 + v155) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __PLLogXPC_block_invoke()
{
  qword_1EBD5AEE0 = (uint64_t)os_log_create("com.apple.powerlog", "xpc");
  return MEMORY[0x1F41817F8]();
}

void sub_1D2AB8254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularPerClientProfileTriggerCountReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_39:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularLteRadioLinkFailureReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_71;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_73;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_71:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_73:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 4u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_77:
          uint64_t v55 = 24;
          goto LABEL_98;
        case 5u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_81:
          uint64_t v55 = 16;
          goto LABEL_98;
        case 7u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 4u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_85:
          uint64_t v55 = 20;
          goto LABEL_98;
        case 0xBu:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_89:
          uint64_t v55 = 32;
          goto LABEL_98;
        case 0xCu:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x10u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_93:
          uint64_t v55 = 28;
          goto LABEL_98;
        case 0xFu:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x40u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v52 = *v3;
        unint64_t v53 = *(void *)(a2 + v52);
        if (v53 == -1 || v53 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
        *(void *)(a2 + v52) = v53 + 1;
        v26 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0) {
          goto LABEL_95;
        }
        v50 += 7;
        BOOL v14 = v51++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_97;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_95:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_97:
      uint64_t v55 = 36;
LABEL_98:
      *(_DWORD *)(a1 + v55) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D2ABE4E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D2AC0928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose((const void *)(v68 - 176), 8);
  _Block_object_dispose((const void *)(v68 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t KCellularWcdmaIdleToConnectedUserDataReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
      {
        if (v17 == 3)
        {
          uint64_t v36 = PBReaderReadData();
          uint64_t v37 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v36;
        }
        else
        {
          if (v17 != 15)
          {
LABEL_45:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (1)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if ((v29 & 0x80) == 0) {
              goto LABEL_52;
            }
            v24 += 7;
            BOOL v14 = v25++ >= 9;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_54;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_54:
          *(_DWORD *)(a1 + 16) = v26;
        }
      }
      else if (v17 == 1)
      {
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (1)
        {
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
          *(void *)(a2 + v33) = v34 + 1;
          v32 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0) {
            goto LABEL_56;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            uint64_t v32 = 0;
            goto LABEL_58;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_56:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
LABEL_58:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v32;
      }
      else
      {
        if (v17 != 2) {
          goto LABEL_45;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 36) |= 4u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_48;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_50;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_48:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_50:
        *(unsigned char *)(a1 + 32) = v20 != 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t KCellularLteRrcStateReadFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x480], 8) = v19;
          continue;
        case 2u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                BOOL v14 = v24++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_70:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v25 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_74:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v25 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_78:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 5u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v25 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v14 = v40++ >= 9;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v25) = 0;
          }
LABEL_82:
          uint64_t v50 = 16;
          goto LABEL_87;
        case 0xFu:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v25 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v25) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v25) = 0;
      }
LABEL_86:
      uint64_t v50 = 32;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v25;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sub_1D2ADB5C8()
{
  return MEMORY[0x1F40E44F8]();
}

uint64_t sub_1D2ADB5D8()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1D2ADB5E8()
{
  return MEMORY[0x1F4111EE0]();
}

uint64_t sub_1D2ADB5F8()
{
  return MEMORY[0x1F4111EF8]();
}

uint64_t sub_1D2ADB608()
{
  return MEMORY[0x1F4127060]();
}

uint64_t sub_1D2ADB618()
{
  return MEMORY[0x1F4127078]();
}

uint64_t sub_1D2ADB628()
{
  return MEMORY[0x1F4127088]();
}

uint64_t sub_1D2ADB638()
{
  return MEMORY[0x1F4127138]();
}

uint64_t sub_1D2ADB658()
{
  return MEMORY[0x1F4127180]();
}

uint64_t sub_1D2ADB668()
{
  return MEMORY[0x1F41271A0]();
}

uint64_t sub_1D2ADB678()
{
  return MEMORY[0x1F4127218]();
}

uint64_t sub_1D2ADB688()
{
  return MEMORY[0x1F4127268]();
}

uint64_t sub_1D2ADB698()
{
  return MEMORY[0x1F4127280]();
}

uint64_t sub_1D2ADB6A8()
{
  return MEMORY[0x1F41272C8]();
}

uint64_t sub_1D2ADB6B8()
{
  return MEMORY[0x1F4127330]();
}

uint64_t sub_1D2ADB6C8()
{
  return MEMORY[0x1F4127378]();
}

uint64_t sub_1D2ADB6D8()
{
  return MEMORY[0x1F4127398]();
}

uint64_t sub_1D2ADB6E8()
{
  return MEMORY[0x1F41273A0]();
}

uint64_t sub_1D2ADB6F8()
{
  return MEMORY[0x1F4127410]();
}

uint64_t sub_1D2ADB708()
{
  return MEMORY[0x1F4127468]();
}

uint64_t sub_1D2ADB718()
{
  return MEMORY[0x1F4127498]();
}

uint64_t sub_1D2ADB728()
{
  return MEMORY[0x1F41274A8]();
}

uint64_t sub_1D2ADB738()
{
  return MEMORY[0x1F41274D0]();
}

uint64_t sub_1D2ADB748()
{
  return MEMORY[0x1F4127660]();
}

uint64_t sub_1D2ADB758()
{
  return MEMORY[0x1F4127678]();
}

uint64_t sub_1D2ADB768()
{
  return MEMORY[0x1F4127690]();
}

uint64_t sub_1D2ADB778()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_1D2ADB788()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_1D2ADB798()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_1D2ADB7A8()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1D2ADB7B8()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_1D2ADB7C8()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1D2ADB7D8()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1D2ADB7E8()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1D2ADB7F8()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1D2ADB808()
{
  return MEMORY[0x1F4183A30]();
}

uint64_t sub_1D2ADB818()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1D2ADB828()
{
  return MEMORY[0x1F4183A78]();
}

uint64_t sub_1D2ADB838()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1D2ADB848()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1D2ADB858()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_1D2ADB868()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t sub_1D2ADB878()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1D2ADB888()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1D2ADB898()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1D2ADB8A8()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t sub_1D2ADB8B8()
{
  return MEMORY[0x1F4187C00]();
}

uint64_t sub_1D2ADB8C8()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t sub_1D2ADB8D8()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t sub_1D2ADB8E8()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t sub_1D2ADB8F8()
{
  return MEMORY[0x1F4187D98]();
}

uint64_t sub_1D2ADB908()
{
  return MEMORY[0x1F4187DD8]();
}

uint64_t sub_1D2ADB928()
{
  return MEMORY[0x1F4111F10]();
}

uint64_t sub_1D2ADB938()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t sub_1D2ADB948()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1D2ADB958()
{
  return MEMORY[0x1F41874E0]();
}

uint64_t sub_1D2ADB968()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_1D2ADB978()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_1D2ADB988()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_1D2ADB998()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1D2ADB9A8()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1D2ADB9B8()
{
  return MEMORY[0x1F4184FF8]();
}

uint64_t sub_1D2ADB9C8()
{
  return MEMORY[0x1F4185050]();
}

uint64_t sub_1D2ADB9D8()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1D2ADB9E8()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_1D2ADB9F8()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1D2ADBA08()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1D2ADBA18()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1D2ADBA28()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_1D2ADBA38()
{
  return MEMORY[0x1F41853A8]();
}

uint64_t sub_1D2ADBA48()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1D2ADBA78()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1D2ADBAA8()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_1D2ADBAB8()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_1D2ADBAC8()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_1D2ADBAD8()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_1D2ADBAE8()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1D2ADBAF8()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1D2ADBB08()
{
  return MEMORY[0x1F4185F10]();
}

uint64_t sub_1D2ADBB18()
{
  return MEMORY[0x1F4185F40]();
}

uint64_t sub_1D2ADBB28()
{
  return MEMORY[0x1F4185F48]();
}

uint64_t ADClientSetValueForScalarKey()
{
  return MEMORY[0x1F4107218]();
}

uint64_t APFSGetFragmentationHistogram()
{
  return MEMORY[0x1F4105378]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

uint64_t ApplePhotonDetectorServicesGetLux()
{
  return MEMORY[0x1F410AAA0]();
}

uint64_t BKSHIDServicesLastUserEventTime()
{
  return MEMORY[0x1F410BFB8]();
}

uint64_t BKSHIDServicesRequestProximityStatusEvent()
{
  return MEMORY[0x1F410BFE8]();
}

uint64_t BTDeviceGetAddressString()
{
  return MEMORY[0x1F412F6D0]();
}

uint64_t BTDeviceGetDefaultName()
{
  return MEMORY[0x1F412F6E8]();
}

uint64_t BTDeviceGetDeviceType()
{
  return MEMORY[0x1F412F700]();
}

uint64_t BTDeviceGetName()
{
  return MEMORY[0x1F412F708]();
}

uint64_t BTLocalDeviceAddCallbacks()
{
  return MEMORY[0x1F412F770]();
}

uint64_t BTLocalDeviceGetConnectable()
{
  return MEMORY[0x1F412F778]();
}

uint64_t BTLocalDeviceGetConnectedDevices()
{
  return MEMORY[0x1F412F780]();
}

uint64_t BTLocalDeviceGetConnectionStatus()
{
  return MEMORY[0x1F412F798]();
}

uint64_t BTLocalDeviceGetDefault()
{
  return MEMORY[0x1F412F7A8]();
}

uint64_t BTLocalDeviceGetDiscoverable()
{
  return MEMORY[0x1F412F7B0]();
}

uint64_t BTLocalDeviceGetModulePower()
{
  return MEMORY[0x1F412F7B8]();
}

uint64_t BTLocalDeviceGetPairedDevices()
{
  return MEMORY[0x1F412F7C0]();
}

uint64_t BTLocalDeviceReadDetailedPowerProfileStatistics()
{
  return MEMORY[0x1F412F7E0]();
}

uint64_t BTLocalDeviceReadEnhancedPowerProfileStatistics()
{
  return MEMORY[0x1F412F7E8]();
}

uint64_t BTLocalDeviceReadPowerProfileStatistics()
{
  return MEMORY[0x1F412F7F0]();
}

uint64_t BTLocalDeviceRegisterForPowerProfileStatistics()
{
  return MEMORY[0x1F412F7F8]();
}

uint64_t BTSessionAttachWithQueue()
{
  return MEMORY[0x1F412F898]();
}

uint64_t BTSessionDetachWithQueue()
{
  return MEMORY[0x1F412F8A0]();
}

uint64_t CARenderServerGetFrameCounter()
{
  return MEMORY[0x1F40F4C68]();
}

uint64_t CARenderServerSetScreenTelemetryParameters()
{
  return MEMORY[0x1F40F4CB0]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

uint64_t CFCopySystemVersionString()
{
  return MEMORY[0x1F40D77C8]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

void CFMessagePortInvalidate(CFMessagePortRef ms)
{
}

Boolean CFMessagePortIsValid(CFMessagePortRef ms)
{
  return MEMORY[0x1F40D7CD8](ms);
}

SInt32 CFMessagePortSendRequest(CFMessagePortRef remote, SInt32 msgid, CFDataRef data, CFTimeInterval sendTimeout, CFTimeInterval rcvTimeout, CFStringRef replyMode, CFDataRef *returnData)
{
  return MEMORY[0x1F40D7CE0](remote, *(void *)&msgid, data, replyMode, returnData, sendTimeout, rcvTimeout);
}

void CFMessagePortSetInvalidationCallBack(CFMessagePortRef ms, CFMessagePortInvalidationCallBack callout)
{
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFIndex CFNumberGetByteSize(CFNumberRef number)
{
  return MEMORY[0x1F40D7DF8](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1F40D8128](mode, returnAfterSourceHandled, seconds);
}

void CFShow(CFTypeRef obj)
{
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1F40D85E0]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

uint64_t CLCopyAppsUsingLocation()
{
  return MEMORY[0x1F40DB578]();
}

uint64_t CLCopyTechnologiesInUse()
{
  return MEMORY[0x1F40DB580]();
}

uint64_t CTCallGetStatus()
{
  return MEMORY[0x1F40DEF40]();
}

uint64_t CTCopyCurrentCalls()
{
  return MEMORY[0x1F40DEF68]();
}

uint64_t CTIndicatorsGetSignalStrength()
{
  return MEMORY[0x1F40DEF78]();
}

uint64_t CTRegistrationCopyOperatorName()
{
  return MEMORY[0x1F40DEF80]();
}

uint64_t CTRegistrationGetDataAttached()
{
  return MEMORY[0x1F40DEF88]();
}

uint64_t CTRegistrationGetDataContextActive()
{
  return MEMORY[0x1F40DEF90]();
}

uint64_t CTRegistrationGetDataIndicator()
{
  return MEMORY[0x1F40DEF98]();
}

uint64_t CTRegistrationGetStatus()
{
  return MEMORY[0x1F40DEFA0]();
}

uint64_t CTSIMSupportGetSIMStatus()
{
  return MEMORY[0x1F40DEFA8]();
}

uint64_t CTTelephonyCenterAddObserver()
{
  return MEMORY[0x1F40DEFC0]();
}

uint64_t CTTelephonyCenterGetDefault()
{
  return MEMORY[0x1F40DEFC8]();
}

uint64_t CTTelephonyCenterSetDefaultRunloop()
{
  return MEMORY[0x1F40DEFE0]();
}

FSEventStreamRef FSEventStreamCreate(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, CFArrayRef pathsToWatch, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  return (FSEventStreamRef)MEMORY[0x1F40DEDC0](allocator, callback, context, pathsToWatch, sinceWhen, *(void *)&flags, latency);
}

void FSEventStreamScheduleWithRunLoop(FSEventStreamRef streamRef, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

Boolean FSEventStreamStart(FSEventStreamRef streamRef)
{
  return MEMORY[0x1F40DEDF8](streamRef);
}

void FSEventStreamStop(FSEventStreamRef streamRef)
{
}

void FSEventStreamUnscheduleFromRunLoop(FSEventStreamRef streamRef, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1F40E8678](*(void *)&kernelPort, notificationID);
}

CFTypeRef IOCFUnserializeWithSize(const char *buffer, size_t bufferSize, CFAllocatorRef allocator, CFOptionFlags options, CFStringRef *errorString)
{
  return (CFTypeRef)MEMORY[0x1F40E8698](buffer, bufferSize, allocator, options, errorString);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1F40E86C8](*(void *)&connection, *(void *)&selector, input, *(void *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return MEMORY[0x1F40E86D0](*(void *)&connection, *(void *)&selector, input, *(void *)&inputCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1F40E86D8](*(void *)&connection, *(void *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectMapMemory(io_connect_t connect, uint32_t memoryType, task_port_t intoTask, mach_vm_address_t *atAddress, mach_vm_size_t *ofSize, IOOptionBits options)
{
  return MEMORY[0x1F40E86E0](*(void *)&connect, *(void *)&memoryType, *(void *)&intoTask, atAddress, ofSize, *(void *)&options);
}

kern_return_t IOConnectUnmapMemory(io_connect_t connect, uint32_t memoryType, task_port_t fromTask, mach_vm_address_t atAddress)
{
  return MEMORY[0x1F40E8730](*(void *)&connect, *(void *)&memoryType, *(void *)&fromTask, atAddress);
}

IOReturn IODataQueueDequeue(IODataQueueMemory *dataQueue, void *data, uint32_t *dataSize)
{
  return MEMORY[0x1F40E8768](dataQueue, data, dataSize);
}

IODataQueueEntry *__cdecl IODataQueuePeek(IODataQueueMemory *dataQueue)
{
  return (IODataQueueEntry *)MEMORY[0x1F40E8770](dataQueue);
}

IOReturn IOHIDDeviceClose(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1F40E8798](device, *(void *)&options);
}

IOReturn IOHIDDeviceGetReport(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, uint8_t *report, CFIndex *pReportLength)
{
  return MEMORY[0x1F40E87C8](device, *(void *)&reportType, reportID, report, pReportLength);
}

io_service_t IOHIDDeviceGetService(IOHIDDeviceRef device)
{
  return MEMORY[0x1F40E87D8](device);
}

IOReturn IOHIDDeviceOpen(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1F40E87E8](device, *(void *)&options);
}

IOReturn IOHIDDeviceSetReport(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, const uint8_t *report, CFIndex reportLength)
{
  return MEMORY[0x1F40E8848](device, *(void *)&reportType, reportID, report, reportLength);
}

uint64_t IOHIDEventGetChildren()
{
  return MEMORY[0x1F40E89C8]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1F40E8A00]();
}

uint64_t IOHIDEventGetTimeStamp()
{
  return MEMORY[0x1F40E8A28]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1F40E8A38]();
}

uint64_t IOHIDEventSystemClientCreate()
{
  return MEMORY[0x1F40E8AC0]();
}

uint64_t IOHIDEventSystemClientRegisterEventCallback()
{
  return MEMORY[0x1F40E8AF0]();
}

uint64_t IOHIDEventSystemClientScheduleWithDispatchQueue()
{
  return MEMORY[0x1F40E8B18]();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return MEMORY[0x1F40E8B38]();
}

uint64_t IOHIDEventSystemClientUnregisterDeviceMatchingCallback()
{
  return MEMORY[0x1F40E8B58]();
}

uint64_t IOHIDEventSystemClientUnregisterEventCallback()
{
  return MEMORY[0x1F40E8B68]();
}

void IOHIDManagerActivate(IOHIDManagerRef manager)
{
}

CFSetRef IOHIDManagerCopyDevices(IOHIDManagerRef manager)
{
  return (CFSetRef)MEMORY[0x1F40E8C58](manager);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return (IOHIDManagerRef)MEMORY[0x1F40E8C68](allocator, *(void *)&options);
}

void IOHIDManagerSetDeviceMatching(IOHIDManagerRef manager, CFDictionaryRef matching)
{
}

void IOHIDManagerSetDispatchQueue(IOHIDManagerRef manager, dispatch_queue_t queue)
{
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1F40E8ED8](*(void *)&iterator);
}

uint64_t IOMobileFramebufferDisablePowerNotifications()
{
  return MEMORY[0x1F41249E0]();
}

uint64_t IOMobileFramebufferEnablePowerNotifications()
{
  return MEMORY[0x1F4124A00]();
}

uint64_t IOMobileFramebufferGetBufBlock()
{
  return MEMORY[0x1F4124A30]();
}

uint64_t IOMobileFramebufferGetMainDisplay()
{
  return MEMORY[0x1F4124A88]();
}

uint64_t IOMobileFramebufferGetRunLoopSource()
{
  return MEMORY[0x1F4124AA0]();
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1F40E8F08](*(void *)&mainPort);
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40E8F20](notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

CFStringRef IOObjectCopyClass(io_object_t object)
{
  return (CFStringRef)MEMORY[0x1F40E8F40](*(void *)&object);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

uint64_t IOPMAssertionNotify()
{
  return MEMORY[0x1F40E8F98]();
}

uint64_t IOPMCopyAssertionActivityAggregate()
{
  return MEMORY[0x1F40E8FD8]();
}

uint64_t IOPMCopyAssertionActivityUpdateWithCallback()
{
  return MEMORY[0x1F40E8FE0]();
}

IOReturn IOPMCopyAssertionsByProcess(CFDictionaryRef *AssertionsByPID)
{
  return MEMORY[0x1F40E8FE8](AssertionsByPID);
}

uint64_t IOPMCopyBatteryHeatMap()
{
  return MEMORY[0x1F40E8FF8]();
}

uint64_t IOPMCopyCurrentScheduledWake()
{
  return MEMORY[0x1F40E9000]();
}

uint64_t IOPMCopyCycleCountData()
{
  return MEMORY[0x1F40E9008]();
}

uint64_t IOPMCopyKioskModeData()
{
  return MEMORY[0x1F40E9010]();
}

uint64_t IOPMIsADarkWake()
{
  return MEMORY[0x1F40E9038]();
}

uint64_t IOPMIsASleep()
{
  return MEMORY[0x1F40E9040]();
}

uint64_t IOPMIsAUserWake()
{
  return MEMORY[0x1F40E9048]();
}

uint64_t IOPMScheduleAssertionExceptionNotification()
{
  return MEMORY[0x1F40E9058]();
}

uint64_t IOPMScheduleUserActiveChangedNotification()
{
  return MEMORY[0x1F40E9068]();
}

uint64_t IOPMSetAssertionActivityAggregate()
{
  return MEMORY[0x1F40E9080]();
}

uint64_t IOPMSetAssertionActivityLog()
{
  return MEMORY[0x1F40E9088]();
}

uint64_t IOPMSetAssertionExceptionLimits()
{
  return MEMORY[0x1F40E9090]();
}

uint64_t IOPMSleepWakeCopyUUID()
{
  return MEMORY[0x1F40E90A0]();
}

uint64_t IOPMUserIsActive()
{
  return MEMORY[0x1F40E90C8]();
}

uint64_t IOPSCopyPowerSourcesByType()
{
  return MEMORY[0x1F40E90D8]();
}

uint64_t IOPSCopyPowerSourcesByTypePrecise()
{
  return MEMORY[0x1F40E90E0]();
}

CFArrayRef IOPSCopyPowerSourcesList(CFTypeRef blob)
{
  return (CFArrayRef)MEMORY[0x1F40E90F0](blob);
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return MEMORY[0x1F40E9100]();
}

uint64_t IOPSGaugingMitigationGetState()
{
  return MEMORY[0x1F40E9108]();
}

CFDictionaryRef IOPSGetPowerSourceDescription(CFTypeRef blob, CFTypeRef ps)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9118](blob, ps);
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return MEMORY[0x1F40E9148](refcon, thePortRef, callback, notifier);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x1F40E9158](*(void *)&entry, properties, allocator, *(void *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9168](*(void *)&entry, key, allocator, *(void *)&options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x1F40E9188](*(void *)&mainPort, path);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return MEMORY[0x1F40E91C8](*(void *)&entry, plane, parent);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return MEMORY[0x1F40E91F8](*(void *)&entry, entryID);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9208](*(void *)&entry, plane, key, allocator, *(void *)&options);
}

kern_return_t IORegistryEntrySetCFProperties(io_registry_entry_t entry, CFTypeRef properties)
{
  return MEMORY[0x1F40E9218](*(void *)&entry, properties);
}

kern_return_t IORegistryEntrySetCFProperty(io_registry_entry_t entry, CFStringRef propertyName, CFTypeRef property)
{
  return MEMORY[0x1F40E9220](*(void *)&entry, propertyName, property);
}

uint64_t IOReportArrayGetValueAtIndex()
{
  return MEMORY[0x1F417A728]();
}

uint64_t IOReportChannelGetChannelID()
{
  return MEMORY[0x1F417A730]();
}

uint64_t IOReportChannelGetChannelName()
{
  return MEMORY[0x1F417A738]();
}

uint64_t IOReportChannelGetFormat()
{
  return MEMORY[0x1F417A740]();
}

uint64_t IOReportChannelGetGroup()
{
  return MEMORY[0x1F417A748]();
}

uint64_t IOReportChannelGetSubGroup()
{
  return MEMORY[0x1F417A750]();
}

uint64_t IOReportChannelGetUnit()
{
  return MEMORY[0x1F417A758]();
}

uint64_t IOReportChannelGetUnitLabel()
{
  return MEMORY[0x1F417A760]();
}

uint64_t IOReportCopyFilteredChannels()
{
  return MEMORY[0x1F417A790]();
}

uint64_t IOReportCreateSamples()
{
  return MEMORY[0x1F417A798]();
}

uint64_t IOReportCreateSamplesDelta()
{
  return MEMORY[0x1F417A7A0]();
}

uint64_t IOReportCreateSubscription()
{
  return MEMORY[0x1F417A7A8]();
}

uint64_t IOReportGetChannelCount()
{
  return MEMORY[0x1F417A7B0]();
}

uint64_t IOReportHistogramGetBucketBounds()
{
  return MEMORY[0x1F417A7B8]();
}

uint64_t IOReportHistogramGetBucketCount()
{
  return MEMORY[0x1F417A7C0]();
}

uint64_t IOReportHistogramGetBucketHits()
{
  return MEMORY[0x1F417A7C8]();
}

uint64_t IOReportIterate()
{
  return MEMORY[0x1F417A7D0]();
}

uint64_t IOReportScaleValue()
{
  return MEMORY[0x1F417A7E8]();
}

uint64_t IOReportSimpleGetIntegerValue()
{
  return MEMORY[0x1F417A7F8]();
}

uint64_t IOReportStateGetCount()
{
  return MEMORY[0x1F417A800]();
}

uint64_t IOReportStateGetDutyCycle()
{
  return MEMORY[0x1F417A808]();
}

uint64_t IOReportStateGetInTransitions()
{
  return MEMORY[0x1F417A810]();
}

uint64_t IOReportStateGetNameForIndex()
{
  return MEMORY[0x1F417A818]();
}

uint64_t IOReportStateGetResidency()
{
  return MEMORY[0x1F417A820]();
}

uint64_t IOReportUpdateSamples()
{
  return MEMORY[0x1F417A828]();
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x1F40E9230](notifyPort, *(void *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1F40E9240](*(void *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1F40E9250](*(void *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1F40E9258](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9268](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1F40E9280](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1F417CE28]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1F417CE48]();
}

void NSLog(NSString *format, ...)
{
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

uint64_t NSStringFromBOOL()
{
  return MEMORY[0x1F40E7278]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

uint64_t NStatManagerAddAllTCP()
{
  return MEMORY[0x1F4130868]();
}

uint64_t NStatManagerAddAllUDP()
{
  return MEMORY[0x1F4130870]();
}

uint64_t NStatManagerCreate()
{
  return MEMORY[0x1F4130878]();
}

uint64_t NStatSourceSetCountsBlock()
{
  return MEMORY[0x1F41308C8]();
}

uint64_t NStatSourceSetDescriptionBlock()
{
  return MEMORY[0x1F41308D0]();
}

uint64_t NStatSourceSetRemovedBlock()
{
  return MEMORY[0x1F41308E0]();
}

uint64_t OSThermalNotificationCurrentLevel()
{
  return MEMORY[0x1F40C9A18]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1F4147190]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1F41471B0]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1F41471E0]();
}

uint64_t PBDataWriterWriteSint32Field()
{
  return MEMORY[0x1F4147210]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1F4147230]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1F4147240]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1F4147248]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1F4147268]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1F4147278]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1F41472A0]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1F41472A8]();
}

uint64_t PBRepeatedUInt32Add()
{
  return MEMORY[0x1F41473D0]();
}

uint64_t PBRepeatedUInt32Clear()
{
  return MEMORY[0x1F41473D8]();
}

uint64_t PBRepeatedUInt32Copy()
{
  return MEMORY[0x1F41473E0]();
}

uint64_t PBRepeatedUInt32Hash()
{
  return MEMORY[0x1F41473E8]();
}

uint64_t PBRepeatedUInt32IsEqual()
{
  return MEMORY[0x1F41473F0]();
}

uint64_t PBRepeatedUInt32NSArray()
{
  return MEMORY[0x1F41473F8]();
}

uint64_t PLADClientAddValueForScalarKey()
{
  return MEMORY[0x1F4145DF8]();
}

uint64_t PLADClientBatchKeys()
{
  return MEMORY[0x1F4145E00]();
}

uint64_t PLADClientPushValueForDistributionKey()
{
  return MEMORY[0x1F4145E08]();
}

uint64_t PLADClientSetValueForScalarKey()
{
  return MEMORY[0x1F4145E10]();
}

uint64_t PLGenerateBatteryUIPlist()
{
  return MEMORY[0x1F4145D80]();
}

uint64_t PLLogAppDeletion()
{
  return MEMORY[0x1F4145E18]();
}

uint64_t PLLogCommon()
{
  return MEMORY[0x1F4145E20]();
}

uint64_t PLQueryRegistered()
{
  return MEMORY[0x1F4145DA0]();
}

uint64_t PLTalkToPowerlogHelper()
{
  return MEMORY[0x1F4145DB0]();
}

uint64_t SBSBacklightChangeSourceForDisplayLayoutTransitionReason()
{
  return MEMORY[0x1F415C2D8]();
}

uint64_t SBSCopyApplicationDisplayIdentifiers()
{
  return MEMORY[0x1F415C2F8]();
}

uint64_t SBSCopyDisplayIdentifiers()
{
  return MEMORY[0x1F415C308]();
}

uint64_t SBSCopyLocalizedApplicationNameForDisplayIdentifier()
{
  return MEMORY[0x1F415C320]();
}

uint64_t SBSGetApplicationState()
{
  return MEMORY[0x1F415C370]();
}

uint64_t SBSProcessAssertionGetNameForReason()
{
  return MEMORY[0x1F415C3C8]();
}

uint64_t SBSProcessIDForDisplayIdentifier()
{
  return MEMORY[0x1F415C3E0]();
}

uint64_t SBSRegisterDisplayIdentifiersChangedBlock()
{
  return MEMORY[0x1F415C3E8]();
}

CFDictionaryRef SCDynamicStoreCopyMultiple(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return (CFDictionaryRef)MEMORY[0x1F4101D98](store, keys, patterns);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return (SCDynamicStoreRef)MEMORY[0x1F4101DB0](allocator, name, callout, context);
}

CFStringRef SCDynamicStoreKeyCreateNetworkGlobalEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef entity)
{
  return (CFStringRef)MEMORY[0x1F4101DD8](allocator, domain, entity);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  return (CFStringRef)MEMORY[0x1F4101DE8](allocator, domain, ifname, entity);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return MEMORY[0x1F4101E08](store, queue);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return MEMORY[0x1F4101E18](store, keys, patterns);
}

int SCError(void)
{
  return MEMORY[0x1F4101E20]();
}

const char *__cdecl SCErrorString(int status)
{
  return (const char *)MEMORY[0x1F4101E28](*(void *)&status);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return (SCPreferencesRef)MEMORY[0x1F4101FF8](allocator, name, prefsID);
}

SCPreferencesRef SCPreferencesCreateWithAuthorization(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID, AuthorizationRef authorization)
{
  return (SCPreferencesRef)MEMORY[0x1F4102000](allocator, name, prefsID, authorization);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x1F4102010](prefs, key);
}

Boolean SCPreferencesSetCallback(SCPreferencesRef prefs, SCPreferencesCallBack callout, SCPreferencesContext *context)
{
  return MEMORY[0x1F4102030](prefs, callout, context);
}

Boolean SCPreferencesSetDispatchQueue(SCPreferencesRef prefs, dispatch_queue_t queue)
{
  return MEMORY[0x1F4102040](prefs, queue);
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
}

uint64_t SMCAccumGetChannelInfoForKey()
{
  return MEMORY[0x1F417D0F8]();
}

uint64_t SMCCloseConnection()
{
  return MEMORY[0x1F417D100]();
}

uint64_t SMCGetKeyFromIndex()
{
  return MEMORY[0x1F417D108]();
}

uint64_t SMCGetKeyInfo()
{
  return MEMORY[0x1F417D110]();
}

uint64_t SMCMakeUInt32Key()
{
  return MEMORY[0x1F417D118]();
}

uint64_t SMCOSAccumIsSupported()
{
  return MEMORY[0x1F417D120]();
}

uint64_t SMCOSAccumSampleChannel()
{
  return MEMORY[0x1F417D128]();
}

uint64_t SMCOpenConnectionWithDefaultService()
{
  return MEMORY[0x1F417D138]();
}

uint64_t SMCReadKey()
{
  return MEMORY[0x1F417D140]();
}

uint64_t SMCReadKeyAsNumericWithKnownKeyInfo()
{
  return MEMORY[0x1F417D150]();
}

uint64_t SMCUInt32ToString()
{
  return MEMORY[0x1F417D158]();
}

uint64_t SMCWriteKeyAsNumeric()
{
  return MEMORY[0x1F417D160]();
}

uint64_t WiFiDeviceClientCopyCurrentNetwork()
{
  return MEMORY[0x1F412FD90]();
}

uint64_t WiFiDeviceClientCopyInterfaceStateInfo()
{
  return MEMORY[0x1F412FDA8]();
}

uint64_t WiFiDeviceClientCopyProperty()
{
  return MEMORY[0x1F412FDB0]();
}

uint64_t WiFiDeviceClientGetInterfaceName()
{
  return MEMORY[0x1F412FDB8]();
}

uint64_t WiFiDeviceClientGetPower()
{
  return MEMORY[0x1F412FDC8]();
}

uint64_t WiFiDeviceClientIsInterfaceAWDL()
{
  return MEMORY[0x1F412FDD8]();
}

uint64_t WiFiDeviceClientIsInterfaceHostAp()
{
  return MEMORY[0x1F412FDE0]();
}

uint64_t WiFiDeviceClientRegisterDeviceAvailableCallback()
{
  return MEMORY[0x1F412FDF8]();
}

uint64_t WiFiDeviceClientRegisterExtendedLinkCallback()
{
  return MEMORY[0x1F412FE00]();
}

uint64_t WiFiDeviceClientRegisterLQMCallback()
{
  return MEMORY[0x1F412FE10]();
}

uint64_t WiFiDeviceClientRegisterPowerCallback()
{
  return MEMORY[0x1F412FE18]();
}

uint64_t WiFiDeviceClientRegisterScanUpdateCallback()
{
  return MEMORY[0x1F412FE28]();
}

uint64_t WiFiDeviceClientRegisterVirtualInterfaceStateChangeCallback()
{
  return MEMORY[0x1F412FE30]();
}

uint64_t WiFiGetNetworkChannel()
{
  return MEMORY[0x1F412FE68]();
}

uint64_t WiFiManagerClientCopyDevices()
{
  return MEMORY[0x1F412FE78]();
}

uint64_t WiFiManagerClientCopyInterfaces()
{
  return MEMORY[0x1F412FE88]();
}

uint64_t WiFiManagerClientCreate()
{
  return MEMORY[0x1F412FEA0]();
}

uint64_t WiFiManagerClientGetWoWCapability()
{
  return MEMORY[0x1F412FEE0]();
}

uint64_t WiFiManagerClientGetWoWState()
{
  return MEMORY[0x1F412FEE8]();
}

uint64_t WiFiManagerClientRegisterDeviceAttachmentCallback()
{
  return MEMORY[0x1F412FEF0]();
}

uint64_t WiFiManagerClientRegisterUserAutoJoinStateChangedCallback()
{
  return MEMORY[0x1F412FF08]();
}

uint64_t WiFiManagerClientScheduleWithRunLoop()
{
  return MEMORY[0x1F412FF20]();
}

uint64_t WiFiManagerClientUnscheduleFromRunLoop()
{
  return MEMORY[0x1F412FF58]();
}

uint64_t WiFiNetworkGetOperatingBand()
{
  return MEMORY[0x1F412FFB0]();
}

uint64_t WiFiNetworkGetProperty()
{
  return MEMORY[0x1F412FFB8]();
}

uint64_t WiFiNetworkGetSSID()
{
  return MEMORY[0x1F412FFC8]();
}

uint64_t WiFiNetworkIsCarPlay()
{
  return MEMORY[0x1F4130000]();
}

uint64_t _AXSBackTapEnabled()
{
  return MEMORY[0x1F41789B8]();
}

uint64_t _AXSCommandAndControlEnabled()
{
  return MEMORY[0x1F4178A18]();
}

uint64_t _AXSEnhanceBackgroundContrastEnabled()
{
  return MEMORY[0x1F4178A70]();
}

uint64_t _AXSFaceTimeCaptionsEnabled()
{
  return MEMORY[0x1F4178AB8]();
}

uint64_t _AXSLiveTranscriptionEnabled()
{
  return MEMORY[0x1F4178D60]();
}

uint64_t _AXSOnDeviceEyeTrackingEnabled()
{
  return MEMORY[0x1F4178DC0]();
}

uint64_t _AXSQuickSpeakEnabled()
{
  return MEMORY[0x1F4178E30]();
}

uint64_t _AXSReduceMotionEnabled()
{
  return MEMORY[0x1F4178E60]();
}

uint64_t _AXSSoundDetectionRunning()
{
  return MEMORY[0x1F4179038]();
}

uint64_t _AXSSpeakThisEnabled()
{
  return MEMORY[0x1F4179048]();
}

uint64_t _AXSZoomTouchEnabled()
{
  return MEMORY[0x1F4179210]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFPreferencesCopyValueWithContainer()
{
  return MEMORY[0x1F40D8F58]();
}

uint64_t _CFPreferencesSetValueWithContainer()
{
  return MEMORY[0x1F40D8FD0]();
}

uint64_t _CFXPCCreateCFObjectFromXPCMessage()
{
  return MEMORY[0x1F40D9428]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1F40D9438]();
}

uint64_t _CFXPCCreateXPCMessageWithCFObject()
{
  return MEMORY[0x1F40D9440]();
}

uint64_t _CTServerConnectionAddToRunLoop()
{
  return MEMORY[0x1F40DEFF0]();
}

uint64_t _CTServerConnectionCopyTraceProperty()
{
  return MEMORY[0x1F40DF0A8]();
}

uint64_t _CTServerConnectionCreate()
{
  return MEMORY[0x1F40DF0B0]();
}

uint64_t _CTServerConnectionDumpBasebandState()
{
  return MEMORY[0x1F40DF100]();
}

uint64_t _CTServerConnectionGetRATSelection()
{
  return MEMORY[0x1F40DF158]();
}

uint64_t _CTServerConnectionGetRadioAccessTechnology()
{
  return MEMORY[0x1F40DF160]();
}

uint64_t _CTServerConnectionResetModemWithCrashLogs()
{
  return MEMORY[0x1F40DF1F0]();
}

uint64_t _CTServerConnectionSetTraceProperty()
{
  return MEMORY[0x1F40DF220]();
}

uint64_t _SBFScreenTimeRegisterForExternalChangeNotification()
{
  return MEMORY[0x1F415C4B0]();
}

uint64_t _SBSAutolockTimerRegisterForExternalChangeNotification()
{
  return MEMORY[0x1F415C4C0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __memmove_chk()
{
  return MEMORY[0x1F40C9C30]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1F40C9CA0](a1, *(void *)&a2, a3, a4);
}

uint64_t _launch_service_stats_copy_4ppse_impl()
{
  return MEMORY[0x1F40C9F58]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

char *__cdecl basename(char *a1)
{
  return (char *)MEMORY[0x1F40CA518](a1);
}

void bzero(void *a1, size_t a2)
{
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

uint64_t coalition_info_resource_usage()
{
  return MEMORY[0x1F40CB408]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1F40CBD40](when, delta);
}

uint64_t dyld_process_create_for_task()
{
  return MEMORY[0x1F40CBE88]();
}

uint64_t dyld_process_dispose()
{
  return MEMORY[0x1F40CBE90]();
}

uint64_t dyld_process_snapshot_create_for_process()
{
  return MEMORY[0x1F40CBEA0]();
}

uint64_t dyld_process_snapshot_dispose()
{
  return MEMORY[0x1F40CBEA8]();
}

uint64_t dyld_process_snapshot_get_shared_cache()
{
  return MEMORY[0x1F40CBEB8]();
}

uint64_t dyld_shared_cache_get_base_address()
{
  return MEMORY[0x1F40CBEF0]();
}

uint64_t dyld_shared_cache_get_mapped_size()
{
  return MEMORY[0x1F40CBEF8]();
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

float fmodf(float a1, float a2)
{
  MEMORY[0x1F40CC1A8](a1, a2);
  return result;
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  return (const char *)MEMORY[0x1F40CC1B0](a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

uint64_t getClientPermissions()
{
  return MEMORY[0x1F4145E38]();
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1F40CC410](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

kern_return_t host_statistics64(host_t host_priv, host_flavor_t flavor, host_info64_t host_info64_out, mach_msg_type_number_t *host_info64_outCnt)
{
  return MEMORY[0x1F40CC628](*(void *)&host_priv, *(void *)&flavor, host_info64_out, host_info64_outCnt);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1F40CC678](*(void *)&a1, a2, a3, *(void *)&a4);
}

uint64_t initComputeSafeguards()
{
  return MEMORY[0x1F4112C40]();
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1F40CC690](*(void *)&a1, a2);
}

uint64_t launch_service_stats_disable_4ppse()
{
  return MEMORY[0x1F40CC7D0]();
}

uint64_t launch_service_stats_enable_4ppse()
{
  return MEMORY[0x1F40CC7D8]();
}

uint64_t launch_service_stats_is_enabled_4ppse()
{
  return MEMORY[0x1F40CC7E0]();
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x1F40CC800](*(void *)&__e, __x);
  return result;
}

uint64_t ledger()
{
  return MEMORY[0x1F40CC818]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1F40CC868](a1);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1F40CC950]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

kern_return_t mach_vm_region_recurse(vm_map_read_t target_task, mach_vm_address_t *address, mach_vm_size_t *size, natural_t *nesting_depth, vm_region_recurse_info_t info, mach_msg_type_number_t *infoCnt)
{
  return MEMORY[0x1F40CCAB0](*(void *)&target_task, address, size, nesting_depth, info, infoCnt);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

uint64_t malloc_get_all_zones()
{
  return MEMORY[0x1F40CCB48]();
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return (const char *)MEMORY[0x1F40CCB50](zone);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_aligned_alloc(size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB88](alignment, size, type_id);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB0](size, type_id);
}

void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats)
{
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

uint64_t memorystatus_control()
{
  return MEMORY[0x1F40CCD18]();
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

mstats *mstats(mstats *__return_ptr retstr)
{
  return (mstats *)MEMORY[0x1F40CCE70](retstr);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

nw_interface_type_t nw_interface_get_type(nw_interface_t interface)
{
  return MEMORY[0x1F40F3268](interface);
}

void nw_path_enumerate_interfaces(nw_path_t path, nw_path_enumerate_interfaces_block_t enumerate_block)
{
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return MEMORY[0x1F40F3938](path);
}

BOOL nw_path_is_expensive(nw_path_t path)
{
  return MEMORY[0x1F40F3970](path);
}

nw_path_monitor_t nw_path_monitor_create_with_type(nw_interface_type_t required_interface_type)
{
  return (nw_path_monitor_t)MEMORY[0x1F40F39B8](*(void *)&required_interface_type);
}

void nw_path_monitor_set_queue(nw_path_monitor_t monitor, dispatch_queue_t queue)
{
}

void nw_path_monitor_set_update_handler(nw_path_monitor_t monitor, nw_path_monitor_update_handler_t update_handler)
{
}

void nw_path_monitor_start(nw_path_monitor_t monitor)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1F40CD658]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int proc_listallpids(void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD870](buffer, *(void *)&buffersize);
}

uint64_t proc_listcoalitions()
{
  return MEMORY[0x1F40CD878]();
}

int proc_listpids(uint32_t type, uint32_t typeinfo, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD880](*(void *)&type, *(void *)&typeinfo, buffer, *(void *)&buffersize);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

int proc_pid_rusage(int pid, int flavor, rusage_info_t *buffer)
{
  return MEMORY[0x1F40CD890](*(void *)&pid, *(void *)&flavor, buffer);
}

int proc_pidfdinfo(int pid, int fd, int flavor, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A0](*(void *)&pid, *(void *)&fd, *(void *)&flavor, buffer, *(void *)&buffersize);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD8B8](*(void *)&pid, buffer, *(void *)&buffersize);
}

uint64_t proc_reset_footprint_interval()
{
  return MEMORY[0x1F40CD8D0]();
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD918](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD930](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1F40CD940](a1, *(void *)&a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA90](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1F40CDBA8](*(void *)&a1);
}

int rand(void)
{
  return MEMORY[0x1F40CDC08]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CE090](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1F40CE118](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t task_name_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *tn)
{
  return MEMORY[0x1F40CE480](*(void *)&target_tport, *(void *)&pid, tn);
}

uint64_t tcp_connection_fallback_watcher_create()
{
  return MEMORY[0x1F40F40D8]();
}

uint64_t tcp_fallback_watcher_fallback_inuse()
{
  return MEMORY[0x1F40F4278]();
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1F40CEA90](xarray, index);
}

uint64_t xpc_coalition_copy_info()
{
  return MEMORY[0x1F40CEB60]();
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

void *__cdecl xpc_connection_get_context(xpc_connection_t connection)
{
  return (void *)MEMORY[0x1F40CEBF8](connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC20](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1F40CEC68](connection, message);
}

void xpc_connection_set_context(xpc_connection_t connection, void *context)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1F40CEEE0](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

uint64_t xpc_get_service_name_from_pid()
{
  return MEMORY[0x1F40CF138]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}