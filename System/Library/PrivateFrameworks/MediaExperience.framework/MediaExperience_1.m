void FigRoutingManagerAggregateRemoveEndpointCompletionCallback(const void *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  CFTypeRef v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;
  double v18;
  float v19;
  void *SharedManager;
  id v21;
  NSObject *v22;
  void v23[13];
  int v24;
  float v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFRetain(cf);
    if (a1) {
      CFRetain(a1);
    }
    if (*(void *)a6) {
      v12 = CFRetain(*(CFTypeRef *)a6);
    }
    else {
      v12 = 0;
    }
    v14 = *(const void **)(a6 + 8);
    if (v14) {
      v15 = CFRetain(v14);
    }
    else {
      v15 = 0;
    }
    v16 = *(const void **)(a6 + 16);
    if (v16) {
      v17 = CFRetain(v16);
    }
    else {
      v17 = 0;
    }
    [*(id *)(a6 + 24) timeIntervalSinceNow];
    v19 = fabs(v18) * 1000.0;
    SharedManager = FigRoutingManagerGetSharedManager();
    v21 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
    v22 = *((void *)SharedManager + 1);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __FigRoutingManagerAggregateRemoveEndpointCompletionCallback_block_invoke;
    v23[3] = &unk_1E57C8920;
    v23[4] = v21;
    v23[5] = cf;
    v24 = a5;
    v23[6] = a4;
    v23[7] = a3;
    v25 = v19;
    v23[8] = v12;
    v23[9] = v17;
    v23[10] = v15;
    v23[11] = a1;
    v23[12] = a6;
    MXDispatchAsync((uint64_t)"FigRoutingManagerAggregateRemoveEndpointCompletionCallback", (uint64_t)"FigRoutingManager_EndpointHelpers.m", 2403, 0, 0, v22, (uint64_t)v23);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)a6);
  }
}

uint64_t FigRoutingManagerAddEndpointToAggregate(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, uint64_t a6)
{
  uint64_t FigEndpoint = FigEndpointAggregateGetFigEndpoint();
  if (!FigRoutingManagerIsEndpointActivated(FigEndpoint))
  {
    uint64_t v13 = FigEndpointAggregateGetFigEndpoint();
    FigRoutingManager_iOSActivateEndpoint(v13, a3, 0, 0);
  }
  uint64_t Value = FigCFDictionaryGetValue();
  FigRoutingManager_SetAuthorizationOnEndpoint(a2, Value);
  v23 = 0;
  FigRoutingManagerCreateAggregateAddEndpointCompletionContext(a3, a4, a5, &v23);
  CFMutableDictionaryRef EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions(a2, (uint64_t)a3, (const __CFDictionary *)a4);
  FigRoutingManagerCrossfadePlayback();
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  v17 = v23;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  v20 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t, void *))(v19 + 8);
  if (!v20 || (uint64_t v21 = v20(a1, a2, MutableCopy, a6, v17), v21 == -12782))
  {
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)v23);
    uint64_t v21 = 4294954514;
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (EndpointActivateOptions) {
    CFRelease(EndpointActivateOptions);
  }
  return v21;
}

uint64_t FigRoutingManager_SetAuthorizationOnEndpoint(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  v6 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
  if (!v6)
  {
LABEL_21:
    uint64_t v8 = 4294954514;
    goto LABEL_22;
  }
  uint64_t v7 = v6(CMBaseObject, *MEMORY[0x1E4F20D08], *MEMORY[0x1E4F1CF80], &cf);
  uint64_t v8 = v7;
  if (a2 && !v7)
  {
    if (FigCFEqual())
    {
      uint64_t v9 = FigEndpointGetCMBaseObject();
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      v14 = *(uint64_t (**)(uint64_t, void, uint64_t))(v11 + 56);
      if (v14)
      {
        v15 = (void *)MEMORY[0x1E4F20F58];
LABEL_20:
        uint64_t v8 = v14(v9, *v15, a2);
        goto LABEL_22;
      }
    }
    else
    {
      if (!FigCFEqual())
      {
        uint64_t v8 = 0;
        goto LABEL_22;
      }
      uint64_t v9 = FigEndpointGetCMBaseObject();
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      v14 = *(uint64_t (**)(uint64_t, void, uint64_t))(v13 + 56);
      if (v14)
      {
        v15 = (void *)MEMORY[0x1E4F20F50];
        goto LABEL_20;
      }
    }
    goto LABEL_21;
  }
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t FigRoutingManagerRetryAddingEndpointToAggregate(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t a6)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  v15 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v14 + 48);
  if (v15) {
    v15(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], cf);
  }
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  if (cf[0]) {
    CFRetain(cf[0]);
  }
  if (a3) {
    CFRetain(a3);
  }
  if (a4) {
    CFRetain(a4);
  }
  if (a5) {
    CFRetain(a5);
  }
  SharedManager = FigRoutingManagerGetSharedManager();
  uint64_t v25 = 0;
  v26 = &v25;
  uint64_t v27 = 0x2020000000;
  int v28 = 0;
  if (dword_1E9359DC0)
  {
    int v24 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dispatch_time_t v18 = dispatch_time(0, 1000000000);
  uint64_t v19 = *((void *)SharedManager + 1);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigRoutingManagerRetryAddingEndpointToAggregate_block_invoke;
  block[3] = &unk_1E57C8FC0;
  block[4] = &v25;
  block[5] = cf[0];
  block[6] = a1;
  block[7] = a2;
  block[8] = a3;
  block[9] = a4;
  block[10] = a5;
  block[11] = a6;
  dispatch_after(v18, v19, block);
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  uint64_t v20 = *((unsigned int *)v26 + 6);
  _Block_object_dispose(&v25, 8);
  return v20;
}

void sub_194DCB344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __FigRoutingManagerRetryAddingEndpointToAggregate_block_invoke(uint64_t a1)
{
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigRoutingManagerAddEndpointToAggregate(*(void *)(a1 + 48), *(void *)(a1 + 56), *(const void **)(a1 + 64), *(const void **)(a1 + 72), *(const void **)(a1 + 80), *(void *)(a1 + 88));
  v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 56);
  if (v5) {
    CFRelease(v5);
  }
  v6 = *(const void **)(a1 + 64);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 72);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 80);
  if (v8) {
    CFRelease(v8);
  }
}

BOOL FigRoutingManagerIsEndpointDissociated(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (v4) {
    v4(CMBaseObject, @"IsDissociated", *MEMORY[0x1E4F1CF80], &cf);
  }
  BOOL v5 = FigCFEqual() != 0;
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

void __FigRoutingManagerAggregateAddEndpointCompletionCallback_block_invoke(uint64_t a1)
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) timeIntervalSinceNow];
  CFTypeRef v34 = 0;
  CFTypeRef v35 = 0;
  CFTypeRef v32 = 0;
  CFTypeRef v33 = 0;
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  v6 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v5 + 48);
  if (v6) {
    v6(CMBaseObject, *MEMORY[0x1E4F20F28], v2, &v35);
  }
  uint64_t v7 = FigEndpointGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
  if (v10) {
    v10(v7, *MEMORY[0x1E4F20E38], v2, &v34);
  }
  uint64_t v11 = FigEndpointGetCMBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v13 + 48);
  if (v14) {
    v14(v11, *MEMORY[0x1E4F20D08], v2, &v33);
  }
  uint64_t v15 = FigEndpointGetCMBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  dispatch_time_t v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
  if (v18) {
    v18(v15, *MEMORY[0x1E4F20EF0], v2, &v32);
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v20 = *(_DWORD *)(a1 + 96);
  switch(v20)
  {
    case -15580:
      if (!FigRoutingManagerIsEndpointDissociated(*(void *)(a1 + 40))) {
        goto LABEL_39;
      }
      int v20 = *(_DWORD *)(a1 + 96);
      break;
    case 0:
      if (CMSMVAUtility_IsPortAvailableForEndpoint(*(void *)(a1 + 72), 0))
      {
        FigRoutingManagerCrossfadePlayback();
      }
      else
      {
        char IsCrossfadePlaybackSupported = FigRoutingManagerIsCrossfadePlaybackSupported();
        FigRoutingManagerUpdateFadeInUponMusicVADCreation(IsCrossfadePlaybackSupported);
      }
      if ((*(unsigned char *)(a1 + 56) & 0x10) == 0)
      {
        FigVolumeControllerAddAirPlayVolumeNotificationListeners(*(const void **)(a1 + 40));
        theArray[0] = 0;
        FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)theArray);
        CFTypeRef cf = 0;
        FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)theArray[0], (uint64_t)&cf);
        if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled()) {
          FigRoutingManagerUtilities_RegisterAirPlayStreamCapabilitiesDidChangeListener((uint64_t)cf, *(void *)(a1 + 40));
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (theArray[0]) {
          CFRelease(theArray[0]);
        }
      }
      if (FigRoutingManagerContextUtilities_GetContextType(*(void *)(a1 + 64)) == 3)
      {
        if (!*(void *)(a1 + 80)) {
          CMSMVAUtility_DisableBluetoothSharingSession();
        }
        if (FigRoutingManagerUtilities_IsCurrentRouteHandoff()) {
          CMSMAP_MakeAirPlayHandOffPortRoutable(0, *(void *)(a1 + 64));
        }
      }
      goto LABEL_56;
    case -16727:
LABEL_56:
      if (FigRoutingManagerContextUtilities_GetContextType(*(void *)(a1 + 64)) == 3
        || FigRoutingManagerContextUtilities_GetContextType(*(void *)(a1 + 64)) == 4
        || FigRoutingManagerContextUtilities_GetContextType(*(void *)(a1 + 64)) == 9)
      {
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(*(const void **)(a1 + 64), *(const void **)(a1 + 72), @"configUpdateReasonGroupDevicesChanged", *(void *)(a1 + 80));
      }
      LODWORD(cf) = 0;
      FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 40), @"configUpdateReasonEndedSuccess", *(void *)(a1 + 80));
      FigRoutingManagerContextUtilities_GetPickingState(*(void *)(a1 + 64), (uint64_t)&cf);
      if (cf != 8)
      {
        theArray[0] = 0;
        FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(*(void *)(a1 + 64), *(void *)(a1 + 72), (uint64_t)theArray);
        if (!theArray[0] || !CFArrayGetCount(theArray[0])) {
          FigRoutingManagerContextUtilities_SetPickingState(*(void *)(a1 + 64), 0);
        }
        if (theArray[0]) {
          CFRelease(theArray[0]);
        }
      }
      if (FigEndpointAuthRequestHandler_HasEndpoint(*(void *)(a1 + 40)))
      {
        CFTypeRef v24 = v34;
        CFTypeRef v23 = v35;
        CFTypeRef v25 = v32;
        int v26 = FigCFEqual();
        FigEndpointUIAgentHelper_CleanupPrompt(v23, (uint64_t)v24, (uint64_t)v25, v26);
      }
      goto LABEL_68;
  }
  if (!FigRoutingManagerIsEndpointNonRemoteControlLocalAirPlay(*(void *)(a1 + 40))
    || FigRoutingManagerIsEndpointDissociated(*(void *)(a1 + 40)))
  {
    FigRoutingManagerCrossfadePlayback();
    FigRoutingManagerHandleAddEndpointCompletionCallbackError(*(void *)(a1 + 72), *(void *)(a1 + 40), *(void *)(a1 + 48), *(_DWORD *)(a1 + 96), *(void *)(a1 + 64), *(void *)(a1 + 80));
    if (FigEndpointAuthRequestHandler_HasEndpoint(*(void *)(a1 + 40))) {
      FigEndpointUIAgentHelper_CleanupPrompt(v35, (uint64_t)v34, (uint64_t)v32, 0);
    }
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(*(void *)(a1 + 64), *(void *)(a1 + 72), (uint64_t)theArray);
    if (!theArray[0] || !CFArrayGetCount(theArray[0])) {
      FigRoutingManagerContextUtilities_SetPickingState(*(void *)(a1 + 64), 0);
    }
    FigRoutingManagerCleanupSystemMusicIfAggregateIsEmpty(*(void *)(a1 + 72), *(void *)(a1 + 48), 0);
    if (theArray[0]) {
      CFRelease(theArray[0]);
    }
    goto LABEL_68;
  }
LABEL_39:
  uint64_t v21 = *(const void **)(a1 + 72);
  if (!v21 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    uint64_t v21 = 0;
  }
  FigRoutingManagerRetryAddingEndpointToAggregate(v21, *(const void **)(a1 + 40), *(const void **)(a1 + 64), *(const void **)(a1 + 80), *(const void **)(a1 + 88), (uint64_t)FigRoutingManagerAggregateAddEndpointCompletionCallback);
LABEL_68:
  uint64_t v27 = *(const void **)(a1 + 88);
  if (v27) {
    CFRelease(v27);
  }
  int v28 = *(const void **)(a1 + 80);
  if (v28) {
    CFRelease(v28);
  }
  v29 = *(const void **)(a1 + 64);
  if (v29) {
    CFRelease(v29);
  }
  v30 = *(const void **)(a1 + 40);
  if (v30) {
    CFRelease(v30);
  }
  v31 = *(const void **)(a1 + 72);
  if (v31) {
    CFRelease(v31);
  }
  if (v33)
  {
    CFRelease(v33);
    CFTypeRef v33 = 0;
  }
  if (v32)
  {
    CFRelease(v32);
    CFTypeRef v32 = 0;
  }
  if (v34)
  {
    CFRelease(v34);
    CFTypeRef v34 = 0;
  }
  if (v35)
  {
    CFRelease(v35);
    CFTypeRef v35 = 0;
  }
}

void FigRoutingManagerHandleAddEndpointCompletionCallbackError(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a4 <= -17601)
  {
    if (a4 != -17604)
    {
      if (a4 == -17601)
      {
        uint64_t v10 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed;
LABEL_9:
        uint64_t v11 = (uint64_t)*v10;
        FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo(a5, a1, a2, v11, a6);
        return;
      }
      goto LABEL_12;
    }
LABEL_8:
    uint64_t v10 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUserCancelled;
    goto LABEL_9;
  }
  if (a4 == -16728) {
    goto LABEL_8;
  }
  if (a4 == -17600)
  {
    uint64_t v10 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUnauthorizedNoPrompt;
    goto LABEL_9;
  }
LABEL_12:
  FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo(a5, a1, a2, @"configUpdateReasonEndedFailed", a6);
  if (FigRoutingManagerContextUtilities_GetContextType(a5) != 9)
  {
    FigRoutingManager_HandleEndpointFailed(a2, a4, a3, 0);
  }
}

void FigRoutingManager_HandleEndpointFailed(uint64_t a1, int a2, uint64_t a3, int a4)
{
  v22[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    uint64_t v8 = *MEMORY[0x1E4F1CF80];
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v22[0] = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(CMBaseObject, *MEMORY[0x1E4F20E38], v8, v22);
    }
    CFTypeRef cf = 0;
    uint64_t v14 = FigEndpointGetCMBaseObject();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v16 + 48);
    if (v17) {
      v17(v14, *MEMORY[0x1E4F20F28], v8, &cf);
    }
    dispatch_time_t v18 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint(a1, 0);
    FigCFDictionarySetValue();
    if (v18) {
      CFRelease(v18);
    }
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (a2 <= -17603)
    {
      if (a2 == -71891 || a2 == -17609 || a2 == -17608) {
        goto LABEL_32;
      }
    }
    else if (a2 > -15583)
    {
      if (a2 == -15582 || a2 == -15581) {
        goto LABEL_32;
      }
    }
    else if (a2 == -17602 || a2 == -16607)
    {
LABEL_32:
      FigCFDictionarySetValue();
LABEL_33:
      FigCFDictionaryGetValue();
      FigCFDictionarySetValue();
      FigEndpointUIAgentHelper_ShowError(Mutable);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v22[0])
      {
        CFRelease(v22[0]);
        v22[0] = 0;
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      goto LABEL_39;
    }
    FigCFDictionarySetValue();
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    FigCFDictionarySetValue();
    if (SInt32) {
      CFRelease(SInt32);
    }
    goto LABEL_33;
  }
LABEL_39:
  if (a4) {
    FigRoutingManager_iOSDeactivateEndpoint(a1, a3, 0);
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void FigRoutingMangerDeactivateAggregateEndpointIfNecessary(uint64_t a1, uint64_t a2)
{
  v12[16] = *MEMORY[0x1E4F143B8];
  int IsAirPlayDaemonEnabled = MX_FeatureFlags_IsAirPlayDaemonEnabled();
  if (a1 && a2 && IsAirPlayDaemonEnabled)
  {
    CFArrayRef v11 = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(a1, a2, (uint64_t)&v11);
    CFArrayRef theArray = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v7 + 48);
    if (!v8
      || (v8(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray), !theArray)
      || !CFArrayGetCount(theArray))
    {
      if (!v11 || !CFArrayGetCount(v11))
      {
        if (dword_1E9359DC0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v12[0] = 0;
        FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint(a1, a2, (uint64_t)v12);
        FigRoutingManagerContextUtilities_RemoveActivatedEndpoint(a1, a2, v12[0]);
        FigEndpointDeactivate();
      }
    }
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
    if (v11) {
      CFRelease(v11);
    }
  }
}

uint64_t *FigRoutingManagerAggregateShouldEndpointRemovalInterruptSystemMusicSessions(uint64_t a1, const void *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  if (a3)
  {
    FigRoutingManagerContextUtilities_GetContextType(*a3);
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t v3 = 0;
    if (a1 && a2)
    {
      theArray[0] = 0;
      FigEndpointAggregateGetFigEndpoint();
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v8 + 48);
      if (!v9
        || (v9(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], theArray), !theArray[0])
        || CFArrayGetCount(theArray[0]) != 1
        || !FigRoutingManagerIsEndpointPresentInAggregate(a2, a1))
      {
        uint64_t v3 = 0;
      }
      if (theArray[0]) {
        CFRelease(theArray[0]);
      }
    }
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v3;
}

void __FigRoutingManagerAggregateRemoveEndpointCompletionCallback_block_invoke(uint64_t a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) timeIntervalSinceNow];
  CFTypeRef v14 = 0;
  if (*(void *)(a1 + 40))
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
    if (v5) {
      v5(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &v14);
    }
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(*(void *)(a1 + 64), (CFMutableArrayRef *)cf);
  uint64_t v7 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf[0], 0);
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext(*(void *)(a1 + 64), (uint64_t)v7);
  FigVolumeControllerSaveRoutingContextState(*(const void **)(a1 + 64));
  if (v7) {
    CFRelease(v7);
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigRoutingManagerCrossfadePlayback();
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(*(void *)(a1 + 64), *(const __CFDictionary **)(a1 + 80), @"configUpdateReasonGroupDevicesChanged");
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(*(void *)(a1 + 64), *(void *)(a1 + 88), (uint64_t)&theArray);
  if (!theArray || !CFArrayGetCount(theArray)) {
    FigRoutingManagerContextUtilities_SetPickingState(*(void *)(a1 + 64), 0);
  }
  char v8 = FigRoutingManagerAggregateShouldEndpointRemovalInterruptSystemMusicSessions(0, 0, *(uint64_t **)(a1 + 96));
  FigRoutingManagerCleanupSystemMusicIfAggregateIsEmpty(*(CFTypeRef *)(a1 + 88), *(void *)(a1 + 48), v8);
  FigRoutingMangerDeactivateAggregateEndpointIfNecessary(*(void *)(a1 + 64), *(void *)(a1 + 88));
  FigVolumeControllerRecomputeMainVolume(*(const void **)(a1 + 64), 0.0);
  FigRoutingManagerDestroyAggregateAddEndpointCompletionContext(*(const void ***)(a1 + 96));
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (v14)
  {
    CFRelease(v14);
    CFTypeRef v14 = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(a1 + 88);
  if (v10) {
    CFRelease(v10);
  }
  CFArrayRef v11 = *(const void **)(a1 + 64);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)(a1 + 80);
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = *(const void **)(a1 + 72);
  if (v13) {
    CFRelease(v13);
  }
}

CFMutableDictionaryRef FigRoutingManagerCopyAuthInfoForEndpoint(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFEqual();
  FigCFDictionarySetValue();
  CFTypeRef v21 = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v6 + 48);
  if (v7) {
    v7(CMBaseObject, *MEMORY[0x1E4F20E38], v2, &v21);
  }
  CFTypeRef cf = 0;
  uint64_t v8 = FigEndpointGetCMBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFArrayRef v11 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v10 + 48);
  if (v11) {
    v11(v8, *MEMORY[0x1E4F20F28], v2, &cf);
  }
  uint64_t v12 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint(a1, 0);
  CFTypeRef v19 = 0;
  uint64_t v13 = *MEMORY[0x1E4F20EF0];
  uint64_t v14 = FigEndpointGetCMBaseObject();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v16 + 48);
  if (v17) {
    v17(v14, v13, v2, &v19);
  }
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v21)
  {
    CFRelease(v21);
    CFTypeRef v21 = 0;
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v19) {
    CFRelease(v19);
  }
  return Mutable;
}

void FigRoutingManager_HandleAuthorizationRequiredDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  if (dword_1E9359DC0)
  {
    int v34 = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  CFTypeRef cf = 0;
  *(void *)os_log_type_t type = 0;
  uint64_t v12 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!FigRoutingManagerIsEndpointOfType(a1) && !FigRoutingManagerIsClusterEndpoint(a1))
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    int v26 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v25 + 48);
    if (v26) {
      v26(CMBaseObject, *MEMORY[0x1E4F20F28], v12, &cf);
    }
    uint64_t v27 = FigEndpointGetCMBaseObject();
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    v30 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v29 + 48);
    if (v30) {
      v30(v27, *MEMORY[0x1E4F20E38], v12, type);
    }
    CFMutableDictionaryRef v17 = FigRoutingManagerCopyAuthInfoForEndpoint(a1);
    FigCFDictionarySetValue();
    *((void *)&v36 + 1) = a1;
    if (!dword_1E9359DC0) {
      goto LABEL_34;
    }
LABEL_33:
    v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_34;
  }
  if (!a2)
  {
    if (Mutable)
    {
      CFRelease(Mutable);
      CFMutableDictionaryRef Mutable = 0;
    }
    CFMutableDictionaryRef v17 = 0;
    goto LABEL_34;
  }
  uint64_t v14 = FigEndpointGetCMBaseObject();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  dispatch_time_t v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v16 + 48);
  if (v18) {
    v18(v14, *MEMORY[0x1E4F20F28], v12, &cf);
  }
  uint64_t v19 = FigEndpointGetCMBaseObject();
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  v22 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v21 + 48);
  if (v22) {
    v22(v19, *MEMORY[0x1E4F20E38], v12, type);
  }
  CFMutableDictionaryRef v17 = FigRoutingManagerCopyAuthInfoForEndpoint(a2);
  FigCFDictionarySetValue();
  *((void *)&v36 + 1) = a2;
  if (dword_1E9359DC0) {
    goto LABEL_33;
  }
LABEL_34:
  *(void *)&long long v35 = v17;
  *((void *)&v35 + 1) = Mutable;
  *(void *)&long long v37 = a6;
  *((void *)&v37 + 1) = a7;
  *(void *)&long long v36 = *(void *)type;
  FigEndpointAuthRequestHandler_ProcessRequest(&v35);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v17) {
    CFRelease(v17);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (*(void *)type) {
    CFRelease(*(CFTypeRef *)type);
  }
}

void FigRoutingManagerRemoveAllSubEndpointsFromAggregate(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5)
{
  CFArrayRef theArray = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v12 + 48);
  if (v13)
  {
    v13(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
    if (!theArray) {
      return;
    }
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v15 = Count;
      for (CFIndex i = 0; i != v15; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        if (!a1
          || (FigEndpointAggregateGetClassID(),
              int IsMemberOfClass = CMBaseObjectIsMemberOfClass(),
              uint64_t v19 = a1,
              !IsMemberOfClass))
        {
          uint64_t v19 = 0;
        }
        if (!FigRoutingManagerRemoveEndpointFromAggregate(v19, ValueAtIndex, a2, a3, a4, a5)) {
          FigRoutingManagerLogEndpointID(@"removeSubEndpoints: Removed endpoint with ID from aggregate: ", (uint64_t)ValueAtIndex, 0, 1);
        }
      }
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

void FigRoutingManager_HandleDidReceiveDataFromCommChannelDelegate(const void *a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5)
{
  if (a1 && a3)
  {
    if (a4)
    {
      CFRetain(a1);
      CFRetain(a3);
      CFRetain(a4);
      DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __FigRoutingManager_HandleDidReceiveDataFromCommChannelDelegate_block_invoke;
      v10[3] = &__block_descriptor_64_e5_v8__0l;
      v10[4] = a5;
      v10[5] = a1;
      v10[6] = a3;
      v10[7] = a4;
      MXDispatchAsync((uint64_t)"FigRoutingManager_HandleDidReceiveDataFromCommChannelDelegate", (uint64_t)"FigRoutingManager_EndpointHelpers.m", 2725, 0, 0, DataTransmissionQueue, (uint64_t)v10);
    }
  }
}

void FigRoutingManager_HandleDidCloseCommChannelDelegate(CFTypeRef cf, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (cf && a3)
  {
    if (dword_1E9359DC0)
    {
      int v11 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRetain(cf);
    CFRetain(a3);
    DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManager_HandleDidCloseCommChannelDelegate_block_invoke;
    v9[3] = &__block_descriptor_56_e5_v8__0l;
    v9[4] = a4;
    v9[5] = cf;
    v9[6] = a3;
    MXDispatchAsync((uint64_t)"FigRoutingManager_HandleDidCloseCommChannelDelegate", (uint64_t)"FigRoutingManager_EndpointHelpers.m", 2787, 0, 0, DataTransmissionQueue, (uint64_t)v9);
  }
}

NSObject *FigRoutingManagerStartDeactivateAirPlayEndpointTimer(void *cf, uint64_t a2, float a3)
{
  if (cf) {
    CFRetain(cf);
  }
  SharedManager = FigRoutingManagerGetSharedManager();
  uint64_t v7 = *((void *)SharedManager + 6);
  if (v7)
  {
    dispatch_source_cancel(v7);
    uint64_t v8 = *((void *)SharedManager + 6);
    if (v8)
    {
      dispatch_release(v8);
      *((void *)SharedManager + 6) = 0;
    }
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __FigRoutingManagerStartDeactivateAirPlayEndpointTimer_block_invoke;
  v11[3] = &__block_descriptor_48_e5_v8__0l;
  v11[4] = cf;
  v11[5] = a2;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingManagerStartDeactivateAirPlayEndpointTimer_block_invoke_2;
  v10[3] = &__block_descriptor_40_e5_v8__0l;
  v10[4] = cf;
  result = FigRoutingManagerCreateOneShotTimer(*((NSObject **)SharedManager + 1), a3, (uint64_t)v11, cf, (uint64_t)v10);
  *((void *)SharedManager + 6) = result;
  return result;
}

void __FigRoutingManagerStartDeactivateAirPlayEndpointTimer_block_invoke(uint64_t a1)
{
  CFTypeRef v11 = 0;
  CFTypeRef cf = 0;
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v5 + 48);
    if (v6) {
      v6(CMBaseObject, *MEMORY[0x1E4F20E38], v2, &cf);
    }
    uint64_t v7 = FigEndpointGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
    if (v10) {
      v10(v7, *MEMORY[0x1E4F20F28], v2, &v11);
    }
    FigRoutingManager_iOSDeactivateEndpoint(*(const void **)(a1 + 32), *(void *)(a1 + 40));
    if (cf) {
      CFRelease(cf);
    }
    if (v11) {
      CFRelease(v11);
    }
  }
}

void __FigRoutingManagerStartDeactivateAirPlayEndpointTimer_block_invoke_2(uint64_t a1)
{
  v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

void FigRoutingManagerStopDeactivateAirPlayEndpointTimer()
{
  SharedManager = FigRoutingManagerGetSharedManager();
  v1 = *((void *)SharedManager + 6);
  if (v1)
  {
    dispatch_source_cancel(v1);
    uint64_t v2 = *((void *)SharedManager + 6);
    if (v2)
    {
      dispatch_release(v2);
      *((void *)SharedManager + 6) = 0;
    }
  }
}

uint64_t FigRoutingManagerCopyEndpointWithDeviceID(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = +[MXEndpointDescriptorCache sharedInstance];
  return (uint64_t)[(MXEndpointDescriptorCache *)v8 copyEndpointWithDeviceID:a1 isStreamID:a2 != 0 managerType:a3 routingContextUUID:a4];
}

CFTypeRef FigRoutingManagerCopyEndpointWithDeviceIDFromBluetoothManager()
{
  v0 = [+[MXEndpointDescriptorCache sharedInstance] copyAvailableEndpointsForManager:FigRoutingManagerGetEndpointManager(*MEMORY[0x1E4F20640])];
  if (!v0) {
    return 0;
  }
  CFArrayRef v1 = v0;
  if (CFArrayGetCount(v0) < 1 || (CFIndex Count = CFArrayGetCount(v1), Count < 1))
  {
LABEL_14:
    CFTypeRef v12 = 0;
  }
  else
  {
    CFIndex v3 = Count;
    CFIndex v4 = 0;
    uint64_t v5 = *MEMORY[0x1E4F20E38];
    uint64_t v6 = *MEMORY[0x1E4F1CF80];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
      CFTypeRef cf = 0;
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      CFTypeRef v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v10 + 48);
      if (v11) {
        v11(CMBaseObject, v5, v6, &cf);
      }
      if (FigCFStringFind()) {
        break;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v3 == ++v4) {
        goto LABEL_14;
      }
    }
    if (ValueAtIndex) {
      CFTypeRef v12 = CFRetain(ValueAtIndex);
    }
    else {
      CFTypeRef v12 = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  CFRelease(v1);
  return v12;
}

CFMutableDictionaryRef FigRoutingManagerCreateDuckAudioPayload()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  return Mutable;
}

CFIndex FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable(CFIndex result)
{
  if (result)
  {
    CFArrayRef v1 = (const __CFArray *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    if (result)
    {
      CFIndex v2 = result;
      if (result < 1)
      {
        return 1;
      }
      else
      {
        CFIndex v3 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v1, v3);
          if (!FigRoutingManagerIsEndpointWHAGroupable((uint64_t)ValueAtIndex)) {
            break;
          }
          if (v2 == ++v3) {
            return 1;
          }
        }
        FigRoutingManagerLogEndpointID(@"Found non-groupable route", (uint64_t)ValueAtIndex, @"in inEndpoints", 0);
        return 0;
      }
    }
  }
  return result;
}

CFIndex FigRoutingManagerUtilities_AreAllEndpointsOfTypeAirPlay(CFIndex result)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    CFArrayRef v1 = (void *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    if (result)
    {
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      if (v2)
      {
        uint64_t v3 = v2;
        uint64_t v4 = *(void *)v7;
LABEL_5:
        uint64_t v5 = 0;
        while (1)
        {
          if (*(void *)v7 != v4) {
            objc_enumerationMutation(v1);
          }
          result = FigRoutingManagerIsEndpointOfType(*(void *)(*((void *)&v6 + 1) + 8 * v5));
          if (!result) {
            break;
          }
          if (v3 == ++v5)
          {
            uint64_t v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
            result = 1;
            if (v3) {
              goto LABEL_5;
            }
            return result;
          }
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t FigRoutingManagerUtilities_IsEndpointPicked(CFTypeRef a1, uint64_t a2)
{
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a2, &theArray);
  if (a1) {
    goto LABEL_2;
  }
  if (!theArray) {
    return 1;
  }
  if (CFArrayGetCount(theArray))
  {
LABEL_2:
    for (CFIndex i = 0; ; ++i)
    {
      CFIndex Count = (CFIndex)theArray;
      if (theArray) {
        CFIndex Count = CFArrayGetCount(theArray);
      }
      if (i >= Count)
      {
        uint64_t v8 = 0;
        goto LABEL_21;
      }
      CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (ValueAtIndex == a1) {
        break;
      }
      uint64_t v6 = (uint64_t)ValueAtIndex;
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)
        && FigRoutingManagerIsEndpointWHAGroupable(v6))
      {
        CFTypeRef v7 = FigRoutingManagerCopyLocalAirPlayEndpoint();
        if (v7 == a1)
        {
          if (a1) {
            CFRelease(a1);
          }
          break;
        }
        if (v7) {
          CFRelease(v7);
        }
      }
    }
  }
  uint64_t v8 = 1;
LABEL_21:
  if (theArray) {
    CFRelease(theArray);
  }
  return v8;
}

__CFArray *FigRoutingManagerUtilities_CopyEndpointsToAdd(uint64_t a1, CFArrayRef theArray)
{
  if (!theArray || !CFArrayGetCount(theArray)) {
    return 0;
  }
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(a1, (uint64_t)&cf);
  CFArrayRef theArraya = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (cf
    && ((uint64_t CMBaseObject = FigEndpointGetCMBaseObject(), (v6 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v7 = 0)
      : (uint64_t v7 = v6),
        (long long v9 = *(void (**)(uint64_t, void, const __CFAllocator *, CFArrayRef *))(v7 + 48)) != 0
     && (v9(CMBaseObject, *MEMORY[0x1E4F20FB0], v4, &theArraya), theArraya)))
  {
    CFIndex Count = CFArrayGetCount(theArraya);
  }
  else
  {
    CFIndex Count = 0;
  }
  CFIndex v11 = CFArrayGetCount(theArray);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
  if (v11 >= 1)
  {
    CFIndex v12 = 0;
    while (1)
    {
      CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v12);
      if (Count < 1) {
        goto LABEL_20;
      }
      if (ValueAtIndex != CFArrayGetValueAtIndex(theArraya, 0)) {
        break;
      }
LABEL_21:
      if (++v12 == v11) {
        goto LABEL_22;
      }
    }
    CFIndex v14 = 1;
    while (Count != v14)
    {
      CFIndex v15 = CFArrayGetValueAtIndex(theArraya, v14++);
      if (ValueAtIndex == v15)
      {
        if (v14 - 1 < Count) {
          goto LABEL_21;
        }
        break;
      }
    }
LABEL_20:
    CFArrayAppendValue(Mutable, ValueAtIndex);
    goto LABEL_21;
  }
LABEL_22:
  if (theArraya)
  {
    CFRelease(theArraya);
    CFArrayRef theArraya = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return Mutable;
}

__CFArray *FigRoutingManagerUtilities_CopyEndpointsToRemove(uint64_t a1, const __CFArray *a2)
{
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(a1, (uint64_t)&cf);
  CFArrayRef theArray = 0;
  uint64_t v3 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (cf
    && ((uint64_t CMBaseObject = FigEndpointGetCMBaseObject(), (v5 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v6 = 0)
      : (uint64_t v6 = v5),
        (uint64_t v7 = *(void (**)(uint64_t, void, CFAllocatorRef, CFArrayRef *))(v6 + 48)) != 0
     && (v7(CMBaseObject, *MEMORY[0x1E4F20FB0], *v3, &theArray), theArray)))
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (!a2)
    {
LABEL_8:
      CFIndex v9 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (!a2) {
      goto LABEL_8;
    }
  }
  CFIndex v9 = CFArrayGetCount(a2);
LABEL_11:
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(*v3, 0, MEMORY[0x1E4F1D510]);
  if (Count >= 1)
  {
    CFIndex v11 = 0;
    while (1)
    {
      CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v11);
      if (v9 < 1) {
        goto LABEL_19;
      }
      if (ValueAtIndex != CFArrayGetValueAtIndex(a2, 0)) {
        break;
      }
LABEL_20:
      if (++v11 == Count) {
        goto LABEL_21;
      }
    }
    CFIndex v13 = 1;
    while (v9 != v13)
    {
      CFIndex v14 = CFArrayGetValueAtIndex(a2, v13++);
      if (ValueAtIndex == v14)
      {
        if (v13 - 1 < v9) {
          goto LABEL_20;
        }
        break;
      }
    }
LABEL_19:
    CFArrayAppendValue(Mutable, ValueAtIndex);
    goto LABEL_20;
  }
LABEL_21:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return Mutable;
}

uint64_t FigVAEndpointManagerGetClassID()
{
  if (FigVAEndpointManagerGetClassID_sRegisterFigVAEndpointManagerBaseTypeOnce != -1) {
    dispatch_once(&FigVAEndpointManagerGetClassID_sRegisterFigVAEndpointManagerBaseTypeOnce, &__block_literal_global_18);
  }
  return FigVAEndpointManagerGetClassID_sFigVAEndpointManagerClassID;
}

CFStringRef FigVAEndpointManagerBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVAEndpointManager %p]", a1);
}

uint64_t __FigVAEndpointManagerGetClassID_block_invoke()
{
  uint64_t ClassID = FigEndpointManagerGetClassID();
  return MEMORY[0x1F40DC658](&FigVAEndpointManagerGetClassID_sFigVAEndpointManagerClassDesc, ClassID, 0, &FigVAEndpointManagerGetClassID_sFigVAEndpointManagerClassID);
}

CFNumberRef FigVAEndpointManagerGetPropertyUInt32(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v5 + 48);
  if (!v6) {
    return 0;
  }
  v6(CMBaseObject, a2, *MEMORY[0x1E4F1CF80], &cf);
  if (!cf) {
    return 0;
  }
  CFNumberRef ValueUInt32 = MXCFNumberGetValueUInt32((const __CFNumber *)cf);
  if (cf) {
    CFRelease(cf);
  }
  return ValueUInt32;
}

uint64_t FigVAEndpointManagerSetPropertyFloat32(float a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v4 = MXCFNumberCreateFromFloat32(a1);
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, CFNumberRef))(v7 + 56);
  if (v8) {
    uint64_t v9 = v8(CMBaseObject, a3, v4);
  }
  else {
    uint64_t v9 = 4294954514;
  }
  CFRelease(v4);
  return v9;
}

uint64_t FigSTSGetClassID()
{
  if (FigSTSGetClassID_sRegisterFigSTSBaseTypeOnce != -1) {
    dispatch_once_f(&FigSTSGetClassID_sRegisterFigSTSBaseTypeOnce, &FigSTSGetClassID_sFigSTSClassID, (dispatch_function_t)STSObtainClassID);
  }
  return FigSTSGetClassID_sFigSTSClassID;
}

uint64_t STSObtainClassID(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&STSObtainClassID_sFigSTSClassDesc, ClassID, 1, a1);
}

uint64_t FigSTSGetTypeID()
{
  if (FigSTSGetClassID_sRegisterFigSTSBaseTypeOnce != -1) {
    dispatch_once_f(&FigSTSGetClassID_sRegisterFigSTSBaseTypeOnce, &FigSTSGetClassID_sFigSTSClassID, (dispatch_function_t)STSObtainClassID);
  }
  uint64_t v0 = FigSTSGetClassID_sFigSTSClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t FigSTSCreate(uint64_t a1, CFTypeRef cf, uint64_t a3, void *a4)
{
  uint64_t v13 = 0;
  if (STSInitializeFlavorCreationState_sInitFlavorCreationStateOnce == -1)
  {
    if (!cf) {
      goto LABEL_17;
    }
  }
  else
  {
    dispatch_once(&STSInitializeFlavorCreationState_sInitFlavorCreationStateOnce, &__block_literal_global_19);
    if (!cf) {
      goto LABEL_17;
    }
  }
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 == CFStringGetTypeID() && a4)
  {
    value = 0;
    MEMORY[0x199716EE0](sFigSTSFlavorCreationState_0);
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)sFigSTSFlavorCreationState_1, cf, (const void **)&value)) {
      goto LABEL_12;
    }
    if (CFEqual(cf, @"B"))
    {
      uint64_t v9 = "/System/Library/Frameworks/MediaToolbox.framework/Support/libSTS-B.dylib";
      uint64_t v10 = "STSCreateFlavorB";
    }
    else
    {
      if (!CFEqual(cf, @"N"))
      {
        Function = value;
        if (!value)
        {
LABEL_12:
          MEMORY[0x199716EF0](sFigSTSFlavorCreationState_0);
          if (!value) {
            return FigSignalErrorAt();
          }
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t *))value)(a1, a3, &v13);
          *a4 = v13;
          return result;
        }
LABEL_11:
        CFDictionarySetValue((CFMutableDictionaryRef)sFigSTSFlavorCreationState_1, cf, Function);
        goto LABEL_12;
      }
      uint64_t v9 = "/System/Library/Frameworks/MediaToolbox.framework/Support/libSTS-N.dylib";
      uint64_t v10 = "STSCreateFlavorN";
    }
    Function = STSLoadCreateFunction(v9, v10);
    value = Function;
    if (!Function) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_17:
  return FigSignalErrorAt();
}

CFStringRef STSCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSTS %p]", a1);
}

CFMutableDictionaryRef __STSInitializeFlavorCreationState_block_invoke()
{
  sFigSTSFlavorCreationState_0 = FigSimpleMutexCreate();
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  sFigSTSFlavorCreationState_1 = (uint64_t)result;
  return result;
}

void *STSLoadCreateFunction(const char *a1, const char *a2)
{
  CFMutableDictionaryRef result = dlopen(a1, 4);
  if (result)
  {
    return dlsym(result, a2);
  }
  return result;
}

void FigRouteDiscovererSetDiscoveryModeDetailedOnDiscoverer()
{
  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    CFTypeRef v1 = CFRetain(*DerivedStorage);
  }
  else {
    CFTypeRef v1 = 0;
  }
  if (FigCFEqual())
  {
    CFTypeRef v2 = *DerivedStorage;
    CFTypeRef *DerivedStorage = @"DiscoveryMode_Detailed";
    if (@"DiscoveryMode_Detailed") {
      CFRetain(@"DiscoveryMode_Detailed");
    }
    if (v2) {
      CFRelease(v2);
    }
  }
  if (v1)
  {
    CFRelease(v1);
  }
}

void FigRouteDiscovererSetDiscoveryModeNoneOnDiscoverer()
{
  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    CFTypeRef v1 = CFRetain(*DerivedStorage);
  }
  else {
    CFTypeRef v1 = 0;
  }
  if (FigCFEqual())
  {
    CFTypeRef v2 = *DerivedStorage;
    CFTypeRef *DerivedStorage = @"DiscoveryMode_None";
    if (@"DiscoveryMode_None") {
      CFRetain(@"DiscoveryMode_None");
    }
    if (v2) {
      CFRelease(v2);
    }
  }
  if (v1)
  {
    CFRelease(v1);
  }
}

void __discoverer_postRoutePresentChangedIfNecessary_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFTypeRef v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigEndpointUIAgentCreate(uint64_t a1, void *a2)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  if (dword_1E9359E90 >= 0x100) {
    dword_1E9359E90 = 0;
  }
  if (a2)
  {
    FigEndpointUIAgentGetClassID();
    if (!CMDerivedObjectCreate())
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v4 = FigReentrantMutexCreate();
      *(void *)(DerivedStorage + 8) = v4;
      if (v4)
      {
        if (dword_1E9359E90)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *a2 = 0;
      }
    }
  }
  return 0;
}

uint64_t figEndpointUIAgent_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716E90](*(void *)(DerivedStorage + 8));
  *(unsigned char *)uint64_t DerivedStorage = 1;
  MEMORY[0x199716EA0](*(void *)(DerivedStorage + 8));
  return 0;
}

uint64_t figEndpointUIAgent_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  figEndpointUIAgent_Invalidate();
  DerivedStorage[3] = 0;
  CFTypeRef v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  uint64_t result = FigSimpleMutexDestroy();
  DerivedStorage[1] = 0;
  return result;
}

uint64_t figEndpointUIAgent_setAuthValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716E90](*(void *)(DerivedStorage + 8));
  if (a2 || a3)
  {
    if (*(unsigned char *)DerivedStorage)
    {
      uint64_t v8 = 4294950514;
    }
    else
    {
      uint64_t v6 = *(void (**)(uint64_t, uint64_t, void))(DerivedStorage + 24);
      if (v6) {
        v6(a2, a3, *(void *)(DerivedStorage + 16));
      }
      *(void *)(DerivedStorage + 24) = 0;
      uint64_t v7 = *(const void **)(DerivedStorage + 16);
      if (v7)
      {
        CFRelease(v7);
        uint64_t v8 = 0;
        *(void *)(DerivedStorage + 16) = 0;
      }
      else
      {
        uint64_t v8 = 0;
      }
    }
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  MEMORY[0x199716EA0](*(void *)(DerivedStorage + 8));
  return v8;
}

uint64_t figEndpointUIAgent_showAuthPrompt(int a1, CFDictionaryRef theDict, const void *a3, uint64_t a4)
{
  if (theDict)
  {
    CFDictionaryGetValue(theDict, @"ATVName");
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x199716E90](*(void *)(DerivedStorage + 8));
    if (*(unsigned char *)DerivedStorage)
    {
      MEMORY[0x199716EA0](*(void *)(DerivedStorage + 8));
      uint64_t v8 = 4294950514;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, @"promptInfo", theDict);
      *(void *)(DerivedStorage + 24) = a4;
      if (a3) {
        CFTypeRef v11 = CFRetain(a3);
      }
      else {
        CFTypeRef v11 = 0;
      }
      *(void *)(DerivedStorage + 16) = v11;
      MEMORY[0x199716EA0](*(void *)(DerivedStorage + 8));
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v8 = CMNotificationCenterPostNotification();
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    if (dword_1E9359E90)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294950516;
  }
  return v8;
}

uint64_t figEndpointUIAgent_finishedWithPrompt(uint64_t a1, const void *a2)
{
  if (!a2) {
    return 4294950516;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950513;
  }
  uint64_t v4 = Mutable;
  CFDictionarySetValue(Mutable, @"finishedWithPromptInfo", a2);
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v5 = CMNotificationCenterPostNotification();
  CFRelease(v4);
  return v5;
}

uint64_t figEndpointUIAgent_showError(uint64_t a1, const void *a2)
{
  if (dword_1E9359E90)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2) {
    return 4294950516;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950513;
  }
  uint64_t v5 = Mutable;
  CFDictionarySetValue(Mutable, @"showErrorPromptInfo", a2);
  FigCFDictionaryGetValue();
  FigCFDictionarySetValue();
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v6 = CMNotificationCenterPostNotification();
  CFRelease(v5);
  return v6;
}

uint64_t figEndpointUIAgent_screenStarted()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t figEndpointUIAgent_screenStopped()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t figEndpointUIAgent_copyPasswordFromKeychain(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950516;
  }
  uint64_t v8 = DerivedStorage;
  CFDictionaryGetValue(a2, @"ATVName");
  MEMORY[0x199716E90](*(void *)(v8 + 8));
  if (*(unsigned char *)v8)
  {
    uint64_t v11 = 4294950514;
LABEL_9:
    MEMORY[0x199716EA0](*(void *)(v8 + 8));
    return v11;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v10 = Mutable;
  CFDictionarySetValue(Mutable, @"copyPasswordInfo", a2);
  CFDictionarySetValue(v10, @"copyPasswordFromKeychainContext", a3);
  *(void *)(v8 + 32) = a4;
  MEMORY[0x199716EA0](*(void *)(v8 + 8));
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v11 = CMNotificationCenterPostNotification();
  CFRelease(v10);
  return v11;
}

uint64_t figEndpointUIAgent_setPasswordFromKeychain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716E90](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v8 = 4294950514;
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(DerivedStorage + 32);
    if (v6) {
      v6(a2, a3);
    }
    *(void *)(DerivedStorage + 32) = 0;
    uint64_t v7 = *(const void **)(DerivedStorage + 16);
    if (v7)
    {
      CFRelease(v7);
      uint64_t v8 = 0;
      *(void *)(DerivedStorage + 16) = 0;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  MEMORY[0x199716EA0](*(void *)(DerivedStorage + 8));
  return v8;
}

__CFString *CMSMSleep_CreateDefaultIdlePreventorName()
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  FormattedDateAndTime = CMSMUtility_CreateFormattedDateAndTime();
  CFStringAppend(Mutable, @"MediaExperience-idleSleepPreventor");
  CFStringAppend(Mutable, FormattedDateAndTime);
  if (FormattedDateAndTime) {
    CFRelease(FormattedDateAndTime);
  }
  return Mutable;
}

BOOL CMSMSleep_ReleaseIdleSleepPreventor(IOPMAssertionID a1, const void *a2, const void *a3)
{
  IOReturn v5 = IOPMAssertionRelease(a1);
  IOReturn v6 = v5;
  if (a2 && !v5) {
    CMSMPowerLogPostPowerLogData(a2, a3);
  }
  return v6 == 0;
}

void CMSMSleep_ReleaseIdleSleepPreventorForSession(void *a1)
{
  if (a1 && [a1 idleSleepPreventorAllocated])
  {
    PowerLogDataForSession = CMSMPowerLogCreatePowerLogDataForSession(a1);
    if (CMSMSleep_ReleaseIdleSleepPreventor([a1 idleSleepPreventor], @"CoreMedia_AudioPlayback", PowerLogDataForSession))
    {
      [a1 setIdleSleepPreventor:0];
      [a1 setIdleSleepPreventorAllocated:0];
      [a1 setIdleSleepPreventorName:0];
      [a1 setIdleSleepPreventorCreationTime:0];
    }
    if (PowerLogDataForSession)
    {
      CFRelease(PowerLogDataForSession);
    }
  }
}

void CMSMSleep_CreateIdleSleepPreventorForSession(void *a1, const __CFString *a2)
{
  if (a1 && ([a1 idleSleepPreventorAllocated] & 1) == 0)
  {
    uint64_t v4 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
    if (a2)
    {
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
    }
    else
    {
      CFAllocatorRef v6 = CFGetAllocator(a1);
      MutableCopy = CFStringCreateMutable(v6, 0);
      uint64_t v7 = [a1 displayID];
      uint64_t v8 = [a1 clientName];
      if (v7) {
        CFStringAppendFormat(MutableCopy, 0, @"MediaExperience.%@(%@).isplaying", v8, [a1 displayID]);
      }
      else {
        CFStringAppendFormat(MutableCopy, 0, @"MediaExperience.%@.isplaying", v8);
      }
    }
    CFAllocatorRef v9 = *v4;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v11 = CFDateCreate(v9, Current);
    [a1 setIdleSleepPreventorName:MutableCopy];
    [a1 setIdleSleepPreventorCreationTime:v11];
    PowerLogDataForSession = CMSMPowerLogCreatePowerLogDataForSession(a1);
    IOPMAssertionID v13 = 0;
    objc_msgSend(a1, "setIdleSleepPreventorAllocated:", CMSMSleep_CreateIdleSleepPreventor(MutableCopy, @"CoreMedia_AudioPlayback", PowerLogDataForSession, &v13));
    [a1 setIdleSleepPreventor:v13];
    if (v11) {
      CFRelease(v11);
    }
    if (PowerLogDataForSession) {
      CFRelease(PowerLogDataForSession);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
}

void CMSMSleep_UpdateIdleSleepPreventor(void *a1, int a2)
{
  if ([a1 idleSleepPreventorUpdaterTimer])
  {
    dispatch_source_cancel((dispatch_source_t)[a1 idleSleepPreventorUpdaterTimer]);
    [a1 setIdleSleepPreventorUpdaterTimer:0];
  }
  if (a2)
  {
    CMSMSleep_CreateIdleSleepPreventorForSession(a1, 0);
  }
  else
  {
    CMSMSleep_ReleaseIdleSleepPreventorForSession(a1);
  }
}

void CMSMSleep_ReleasePrewarmIdleSleepPreventor(int a1, int a2)
{
  if (!FigAtomicCompareAndSwap32()) {
    return;
  }
  if ((a1 - 1200) >= 0xC) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = @"touchtone";
  }
  if ((a1 - 1103) >= 3) {
    IOReturn v5 = v4;
  }
  else {
    IOReturn v5 = @"keypress";
  }
  PowerLogDataForSystemSound = CMSMPowerLogCreatePowerLogDataForSystemSound(v5, a2, @"SystemSoundPlayback_Stop", sCMSessionMgrPrewarmIdleSleepPreventor, (const void *)sCMSessionMgrPrewarmIdleSleepPreventorName, (const void *)sCMSessionMgrPrewarmIdleSleepPreventorCreationTime);
  if (!CMSMSleep_ReleaseIdleSleepPreventor(sCMSessionMgrPrewarmIdleSleepPreventor, @"CoreMedia_SystemSoundPlayback", PowerLogDataForSystemSound))
  {
    sCMSessionMgrPrewarmIdleSleepPreventorAllocated = 1;
    if (!PowerLogDataForSystemSound) {
      return;
    }
    goto LABEL_14;
  }
  sCMSessionMgrPrewarmIdleSleepPreventor = 0;
  if (sCMSessionMgrPrewarmIdleSleepPreventorName)
  {
    CFRelease((CFTypeRef)sCMSessionMgrPrewarmIdleSleepPreventorName);
    sCMSessionMgrPrewarmIdleSleepPreventorName = 0;
  }
  if (sCMSessionMgrPrewarmIdleSleepPreventorCreationTime)
  {
    CFRelease((CFTypeRef)sCMSessionMgrPrewarmIdleSleepPreventorCreationTime);
    sCMSessionMgrPrewarmIdleSleepPreventorCreationTime = 0;
  }
  if (PowerLogDataForSystemSound)
  {
LABEL_14:
    CFRelease(PowerLogDataForSystemSound);
  }
}

void *CMSMSleep_ExtendPlaybackProcessAssertion(void *result)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    CFTypeRef v1 = result;
    if ([result extendBackgroundAppAssertionTimer])
    {
      dispatch_source_cancel((dispatch_source_t)[v1 extendBackgroundAppAssertionTimer]);
      [v1 setExtendBackgroundAppAssertionTimer:0];
    }
    if ([v1 playbackAssertionRef])
    {
      CFTypeRef v2 = +[MXAudioStatistics sharedInstance];
      uint64_t v3 = objc_msgSend((id)objc_msgSend(v1, "playbackAssertionRef"), "explanation");
      [(MXAudioStatistics *)v2 sendSinglePerformanceMessageForAssertion:"CMSMSleep_ExtendPlaybackProcessAssertion" explanation:v3 activity:kMXAudioStatistics_AssertionActivity_AssertionExtended];
      uint64_t v4 = MXGetAssertionLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136447234;
        CFAllocatorRef v9 = "-CMSSleep-";
        __int16 v10 = 2082;
        CFDateRef v11 = "CMSMSleep_ExtendPlaybackProcessAssertion";
        __int16 v12 = 1024;
        int v13 = 439;
        __int16 v14 = 2048;
        uint64_t v15 = [v1 playbackAssertionRef];
        __int16 v16 = 2114;
        uint64_t v17 = objc_msgSend((id)objc_msgSend(v1, "playbackAssertionRef"), "explanation");
        _os_log_impl(&dword_194CDF000, v4, OS_LOG_TYPE_INFO, "%{public}s %{public}s:%i Creating extendBackgroundAppAssertionTimer for assertion %p explanation %{public}@", buf, 0x30u);
      }
    }
    uint64_t v5 = objc_msgSend((id)objc_msgSend(v1, "ID"), "longLongValue");
    CFAllocatorRef v6 = MXGetSerialQueue();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __CMSMSleep_ExtendPlaybackProcessAssertion_block_invoke;
    v7[3] = &__block_descriptor_40_e5_v8__0l;
    v7[4] = v5;
    return objc_msgSend(v1, "setExtendBackgroundAppAssertionTimer:", FigRoutingManagerCreateOneShotTimer(v6, 5.0, (uint64_t)v7, 0, 0));
  }
  return result;
}

uint64_t CMSMSleep_FetchTemporaryPlaybackProcessAssertion(void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
  uint64_t v4 = [a1 displayID];
  ClientName = CMSUtility_GetClientName(a1, v5);
  uint64_t v7 = (__CFString *)CFStringCreateWithFormat(v2, 0, @"MediaExperience.%d.\"%@\".\"%@\".\"%@\".temporaryIsPlayingProcessAssertion", v3, v4, ClientName, [a1 audioCategory]);
  if (![a1 resumeAssertionRef]
    || (MX_RunningBoardServices_IsAssertionValid((const void *)[a1 resumeAssertionRef]) & 1) == 0)
  {
    PlaybackProcessAssertionForPID = MX_RunningBoardServices_CreatePlaybackProcessAssertionForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), v7);
    [a1 setResumeAssertionRef:PlaybackProcessAssertionForPID];
    if (PlaybackProcessAssertionForPID) {
      CFRelease(PlaybackProcessAssertionForPID);
    }
  }
  if (v7) {
    CFRelease(v7);
  }
  if ([a1 resumeBackgroundAppUpdaterTimer])
  {
    dispatch_source_cancel((dispatch_source_t)[a1 resumeBackgroundAppUpdaterTimer]);
    [a1 setResumeBackgroundAppUpdaterTimer:0];
  }
  uint64_t v9 = objc_msgSend((id)objc_msgSend(a1, "ID"), "longLongValue");
  __int16 v10 = MXGetSerialQueue();
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __CMSMSleep_FetchTemporaryPlaybackProcessAssertion_block_invoke;
  v12[3] = &__block_descriptor_40_e5_v8__0l;
  v12[4] = v9;
  return objc_msgSend(a1, "setResumeBackgroundAppUpdaterTimer:", FigRoutingManagerCreateOneShotTimer(v10, 5.0, (uint64_t)v12, 0, 0));
}

void CMSMSleep_ReleasePlaybackProcessAssertion(void *a1)
{
  if (a1)
  {
    MX_RunningBoardServices_InvalidateAssertion((void *)[a1 playbackAssertionRef]);
    [a1 setPlaybackAssertionRef:0];
    CFAllocatorRef v2 = (void *)[a1 parentProcessAuditTokens];
    CMSMSleep_ReleasePlaybackProcessAssertionsForHostProcesses(a1, v2);
  }
}

void CMSMSleep_ReleasePlaybackProcessAssertionsForHostProcesses(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "hostProcessPlaybackAssertions"), "mutableCopy");
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v15 = [a2 countByEnumeratingWithState:&v17 objects:v22 count:16];
    if (v15)
    {
      uint64_t v4 = *(void *)v18;
      __int16 v14 = v3;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v18 != v4) {
            objc_enumerationMutation(a2);
          }
          CFDataRef v6 = *(const __CFData **)(*((void *)&v17 + 1) + 8 * i);
          memset(&buffer, 0, sizeof(buffer));
          v24.location = 0;
          v24.length = 32;
          CFDataGetBytes(v6, v24, (UInt8 *)&buffer);
          audit_token_t atoken = buffer;
          audit_token_to_pid(&atoken);
          uint64_t v7 = [v3 objectForKey:v6];
          if (v7)
          {
            uint64_t v8 = (void *)v7;
            if (dword_1E9359ED0)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t v3 = v14;
            }
            MX_RunningBoardServices_InvalidateAssertion(v8);
            [v3 removeObjectForKey:v6];
          }
          else if (dword_1E9359ED0)
          {
            __int16 v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        uint64_t v15 = [a2 countByEnumeratingWithState:&v17 objects:v22 count:16];
      }
      while (v15);
    }
    objc_msgSend(a1, "setHostProcessPlaybackAssertions:", v3, v11, v12);
  }
}

void CMSMSleep_UpdatePlaybackProcessAssertionsForHostProcesses(void *a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = objc_msgSend((id)objc_msgSend(a3, "differenceFromArray:", a2), "removals");
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if ([v4 count])
    {
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      uint64_t v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)v11;
        do
        {
          uint64_t v9 = 0;
          do
          {
            if (*(void *)v11 != v8) {
              objc_enumerationMutation(v4);
            }
            objc_msgSend(v5, "addObject:", objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * v9++), "object"));
          }
          while (v7 != v9);
          uint64_t v7 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
        }
        while (v7);
      }
      CMSMSleep_ReleasePlaybackProcessAssertionsForHostProcesses(a1, v5);
    }

    CMSMSleep_FetchPlaybackProcessAssertionsForHostProcesses(a1);
  }
}

void sub_194DD334C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_194DD341C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_194DD3520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

CFNumberRef MXCFNumberGetValueSInt32(const __CFNumber *result)
{
  unsigned int valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

double MXCFNumberGetValueFloat32(const __CFNumber *a1)
{
  int valuePtr = 0;
  if (!a1) {
    return 0.0;
  }
  CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
  LODWORD(result) = valuePtr;
  return result;
}

CFNumberRef MXCFNumberCreateFromFloat64(double a1)
{
  double valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat64Type, &valuePtr);
}

double MXCFDictionaryGetValueDouble(const __CFDictionary *a1, const void *a2)
{
  if (!a1) {
    return 0.0;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  double valuePtr = 0.0;
  if (!Value) {
    return 0.0;
  }
  CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
  return valuePtr;
}

__CFArray *MXCFArrayCreateFromCArrayOfSInt32(int *a1, unsigned int a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a1 && a2)
  {
    uint64_t v6 = a2;
    do
    {
      int v7 = *a1++;
      int valuePtr = v7;
      CFNumberRef v8 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
      if (v8)
      {
        CFNumberRef v9 = v8;
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v9);
      }
      --v6;
    }
    while (v6);
  }
  return Mutable;
}

BOOL MXCFArrayAreArrayContentsEqual(CFArrayRef theArray, const __CFArray *a2)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (a2)
    {
LABEL_3:
      CFIndex v5 = CFArrayGetCount(a2);
      goto LABEL_6;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  CFIndex v5 = 0;
LABEL_6:
  if (Count != v5) {
    return 0;
  }
  CFIndex v6 = 0;
  do
  {
    CFIndex v7 = v6;
    if (theArray) {
      CFIndex v8 = CFArrayGetCount(theArray);
    }
    else {
      CFIndex v8 = 0;
    }
    if (v7 >= v8) {
      break;
    }
    CFArrayGetValueAtIndex(theArray, v7);
    int v9 = FigCFArrayContainsValue();
    CFIndex v6 = v7 + 1;
  }
  while (v9);
  return v7 >= v8;
}

BOOL MXCFStringHasCaseInsensitivePrefix(const __CFString *a1, CFStringRef theString)
{
  BOOL result = 0;
  if (a1 && theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if (Length <= CFStringGetLength(a1))
    {
      v6.length = CFStringGetLength(theString);
      v6.location = 0;
      return CFStringCompareWithOptions(a1, theString, v6, 1uLL) == kCFCompareEqualTo;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void MXCFPreferencesSetAndSynchronizeUserPreference(const __CFString *a1, const void *a2)
{
}

CFPropertyListRef MXCFPreferencesCopyPreference(const __CFString *a1)
{
  return CFPreferencesCopyValue(a1, @"com.apple.mediaexperience", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
}

void MXCFPreferencesMigrateUserPreferencesToMXDomain()
{
  if (CFPreferencesGetAppBooleanValue(@"celestialToMediaExperienceDomainMigrationFullyCompleted", @"com.apple.mediaexperience", 0))
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    CFArrayRef v1 = (const __CFArray *)objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", @"AirTunesEntriesDeleted", @"AirPlayLowLatencyEntriesDeleted", @"BluetoothA2DPAndHFPVolumesCombined", @"endpointTypeInfo", @"inputVolumes", @"measuredHDMILatency", @"measuredHDMILatencyForCurrentRefreshRate", @"nowPlayingAppDisplayID", @"nowPlayingAppDisplayIDUponCarPlayDisconnect", @"nowPlayingAppWasPlayingUponCarPlayDisconnect", @"vibeIntensity", @"volumeLimits", @"volumeMultiplier", @"volumes", 0);
    if (CFPreferencesGetAppBooleanValue(@"celestialToMediaExperienceDomainMigrationCompleted", @"com.apple.mediaexperience", 0))
    {
      if (dword_1E9359ED0)
      {
        CFAllocatorRef v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
      CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
      CFPreferencesSetValue(@"celestialToMediaExperienceDomainMigrationCompleted", 0, @"com.apple.mediaexperience", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    }
    else
    {
      if (dword_1E9359ED0)
      {
        uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
      CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
      CFDictionaryRef v6 = CFPreferencesCopyMultiple(v1, @"com.apple.celestial", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
      CFPreferencesSetMultiple(v6, 0, @"com.apple.mediaexperience", v4, v5);
      if (v6) {
        CFRelease(v6);
      }
    }
    CFPreferencesSetMultiple(0, v1, @"com.apple.celestial", v4, v5);
    CFPreferencesSetValue(@"celestialToMediaExperienceDomainMigrationFullyCompleted", (CFPropertyListRef)*MEMORY[0x1E4F1CFD0], @"com.apple.mediaexperience", v4, v5);
    CFPreferencesSynchronize(@"com.apple.mediaexperience", v4, v5);
    CFPreferencesSynchronize(@"com.apple.celestial", v4, v5);
  }
}

void MXCFPreferencesMigrateSilentModeUserPreferenceToMXDomain()
{
  if (MX_FeatureFlags_IsMXSilentModeEnabled())
  {
    if (CFPreferencesGetAppBooleanValue(@"ringerMutePreferenceToMediaExperienceDomainMigrationComplete", @"com.apple.mediaexperience", 0))
    {
      if (!dword_1E9359ED0) {
        return;
      }
      goto LABEL_4;
    }
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int CFPreferenceBooleanWithDefault = FigGetCFPreferenceBooleanWithDefault();
    uint64_t v3 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (CFPreferenceBooleanWithDefault) {
      CFStringRef v4 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      CFStringRef v4 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
    CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
    CFPreferencesSetValue(@"silentModeEnabled", v4, @"com.apple.mediaexperience", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    CFPreferencesSetValue(@"ringerMutePreferenceToMediaExperienceDomainMigrationComplete", v3, @"com.apple.mediaexperience", v5, v6);
  }
  else if (dword_1E9359ED0)
  {
LABEL_4:
    uint64_t v0 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void CelesteGetRegionSpecificVolumeLimit(const __CFDictionary *a1)
{
  int valuePtr = 1065353216;
  if (a1)
  {
    CFBooleanRef v2 = (const __CFBoolean *)MGCopyAnswer();
    if (v2)
    {
      CFBooleanRef v3 = v2;
      int Value = CFBooleanGetValue(v2);
      CFRelease(v3);
      if (Value)
      {
        gRegionSpecificLimitEnabled = 1;
        CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(a1, @"HighVolumeLimit");
        if (v5)
        {
          CFNumberRef v6 = v5;
          CFTypeID TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(v6)) {
            CFNumberGetValue(v6, kCFNumberFloatType, &valuePtr);
          }
        }
      }
    }
  }
}

uint64_t CelesteIsRegionSpecificVolumeLimitEnabled()
{
  return gRegionSpecificLimitEnabled;
}

BOOL FVCUtilitiesIsFloatEquivalentToZero(float a1)
{
  return fabsf(a1) <= 0.00000011921;
}

uint64_t FVCUtilitiesIsVolumeDifferenceAboveThreshold(float a1, float a2)
{
  if (a1 < 0.0) {
    a1 = 0.0;
  }
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  if (a1 > 1.0) {
    a1 = 1.0;
  }
  if (a2 > 1.0) {
    a2 = 1.0;
  }
  float v2 = fabsf(a2);
  BOOL v3 = fabsf(a1) < 0.00000011921 || v2 < 0.00000011921;
  float v4 = fabsf(a1 + -1.0);
  BOOL v5 = v3 || v4 < 0.00000011921;
  float v6 = fabsf(a2 + -1.0);
  if (!v5 && v6 >= 0.00000011921)
  {
    if (vabds_f32(a1, a2) < 0.009)
    {
      if (!dword_1E9359E20) {
        return 0;
      }
      goto LABEL_22;
    }
    return 1;
  }
  if (vabds_f32(a1, a2) >= 0.00000011921) {
    return 1;
  }
  if (dword_1E9359E20)
  {
LABEL_22:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t FigVAEndpointGetClassID()
{
  if (FigVAEndpointGetClassID_sRegisterFigVAEndpointBaseTypeOnce != -1) {
    dispatch_once(&FigVAEndpointGetClassID_sRegisterFigVAEndpointBaseTypeOnce, &__block_literal_global_22);
  }
  return FigVAEndpointGetClassID_sFigVAEndpointClassID;
}

CFStringRef FigVAEndpointBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVAEndpoint %p]", a1);
}

uint64_t __FigVAEndpointGetClassID_block_invoke()
{
  uint64_t ClassID = FigEndpointGetClassID();
  return MEMORY[0x1F40DC658](&FigVAEndpointGetClassID_sFigVAEndpointClassDesc, ClassID, 0, &FigVAEndpointGetClassID_sFigVAEndpointClassID);
}

__CFArray *CMSMUtility_CopyPlayingSessionsInfo()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    float v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v19 != v5) {
            objc_enumerationMutation(v2);
          }
          CFIndex v7 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          if ([v7 isActive])
          {
            if ([v7 isPlaying])
            {
              if (([v7 doesntActuallyPlayAudio] & 1) == 0)
              {
                CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (v8)
                {
                  int v9 = v8;
                  objc_msgSend((id)objc_msgSend(v7, "ID"), "longLongValue");
                  SInt64 = (const void *)FigCFNumberCreateSInt64();
                  CFDictionarySetValue(v9, @"CMSessionID", SInt64);
                  if (SInt64) {
                    CFRelease(SInt64);
                  }
                  CMSUtility_GetClientName(v7, v11);
                  FigCFDictionarySetValue();
                  CMSUtility_GetDisplayID(v7, v12);
                  FigCFDictionarySetValue();
                  CMSUtility_GetAudioCategory(v7, v13);
                  FigCFDictionarySetValue();
                  CMSUtility_GetAudioMode(v7, v14);
                  FigCFDictionarySetValue();
                  [v7 interruptionStyle];
                  SInt32 = (const void *)FigCFNumberCreateSInt32();
                  CFDictionarySetValue(v9, @"InterruptionStyle", SInt32);
                  if (SInt32) {
                    CFRelease(SInt32);
                  }
                  [v7 clientPriority];
                  __int16 v16 = (const void *)FigCFNumberCreateSInt32();
                  FigCFDictionarySetValue();
                  if (v16) {
                    CFRelease(v16);
                  }
                  CFArrayAppendValue(Mutable, v9);
                  CFRelease(v9);
                }
              }
            }
          }
        }
        uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v4);
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

__CFString *CMSMUtility_MapCMSRouteChangeReasonToString(unsigned int a1)
{
  if (a1 > 0xB) {
    return 0;
  }
  else {
    return off_1E57C9440[a1];
  }
}

uint64_t CMSMUtility_PostInterruptionEndedNotificationForAudioSessionID(uint64_t a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v3 = a1;
    id v4 = [+[MXSessionManager sharedInstance] copySessionWithAudioSessionID:a1];
    uint64_t v5 = v4;
    if (v4)
    {
      if (a2) {
        float v6 = @"resumable.MXSessionManager";
      }
      else {
        float v6 = @"non-resumable.MXSessionManager";
      }
      if ([v4 waitingToResume])
      {
        if (dword_1E9359ED0)
        {
          int v17 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtility_PostInterruptionCommandNotification(v5, 1u, @"MXSessionManager", v6, 0, 0, 0, 0);
      }
      else
      {
        int v17 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        long long v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      int v9 = +[MXSessionManagerSidekick sharedInstance];
      long long v10 = [(MXSessionManagerSidekick *)v9 serialQueue];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = __CMSMUtility_PostInterruptionEndedNotificationForAudioSessionID_block_invoke;
      v13[3] = &unk_1E57C9420;
      v13[4] = v9;
      int v14 = v3;
      char v15 = a2;
      MXDispatchAsync((uint64_t)"CMSMUtility_PostInterruptionEndedNotificationForAudioSessionID", (uint64_t)"CMSessionManager_Utilities.m", 289, 0, 0, v10, (uint64_t)v13);
    }

    return 0;
  }
  else
  {
    CFMutableDictionaryRef v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294951615;
  }
}

uint64_t CMSMUtility_GetCurrentDeviceIdentifierAtIndex(uint64_t a1)
{
  MEMORY[0x199716E90](gCMSM);
  if (dword_1E9359BC0 <= a1)
  {
    uint64_t v3 = 0;
  }
  else
  {
    __n128 CMSRouteInfoAt = MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, a1, (uint64_t)v5);
    uint64_t v3 = v5[2];
  }
  MEMORY[0x199716EA0](gCMSM, CMSRouteInfoAt);
  return v3;
}

uint64_t CMSMUtility_GetCurrentInputPortAtIndex(uint64_t a1)
{
  uint64_t v2 = dword_1E9359BC4;
  MEMORY[0x199716E90](gCMSM);
  if (v2 <= a1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    __n128 CMSRouteInfoAt = MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, a1, (uint64_t)v6);
    uint64_t v4 = v6[11];
  }
  MEMORY[0x199716EA0](gCMSM, CMSRouteInfoAt);
  return v4;
}

CFMutableStringRef CMSMUtility_CopyCurrentRouteTypesAsCFString()
{
  CFAllocatorRef v0 = CMSMUtility_CopyCurrentRouteTypes();
  if (v0)
  {
    CFArrayRef v1 = v0;
    CFIndex Count = CFArrayGetCount(v0);
    CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, i);
        CFStringAppend(Mutable, ValueAtIndex);
        if (i < Count - 1) {
          CFStringAppend(Mutable, @"~");
        }
      }
    }
    CFRelease(v1);
    return Mutable;
  }
  else
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    return CFStringCreateMutable(v7, 0);
  }
}

__CFArray *CMSMUtility_CopyCurrentInputRouteIdentifiers()
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  MEMORY[0x199716E90](gCMSM);
  if (dword_1E9359BC4)
  {
    unint64_t v1 = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, v1, (uint64_t)&v4);
      if (v5)
      {
        CFTypeRef v2 = vaeCopyDeviceIdentifierFromVADPort(v5);
        CFArrayAppendValue(Mutable, v2);
        if (v2) {
          CFRelease(v2);
        }
      }
      else
      {
        CFArrayAppendValue(Mutable, &stru_1EE5E8D28);
      }
      ++v1;
    }
    while (v1 < dword_1E9359BC4);
  }
  MEMORY[0x199716EA0](gCMSM);
  return Mutable;
}

__CFArray *CMSMUtility_CopyCurrentRouteSubtypes()
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  MEMORY[0x199716E90](gCMSM);
  if (dword_1E9359BC0)
  {
    unint64_t v1 = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, v1, (uint64_t)&v4);
      if (v5) {
        CFTypeRef v2 = v5;
      }
      else {
        CFTypeRef v2 = &stru_1EE5E8D28;
      }
      CFArrayAppendValue(Mutable, v2);
      ++v1;
    }
    while (v1 < dword_1E9359BC0);
  }
  MEMORY[0x199716EA0](gCMSM);
  return Mutable;
}

__CFArray *CMSMUtility_CopyCurrentOutputPorts()
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  MEMORY[0x199716E90](gCMSM);
  if (dword_1E9359BC0)
  {
    unint64_t v1 = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, v1, (uint64_t)&v4);
      SInt64 = (const void *)FigCFNumberCreateSInt64();
      CFArrayAppendValue(Mutable, SInt64);
      if (SInt64) {
        CFRelease(SInt64);
      }
      ++v1;
    }
    while (v1 < dword_1E9359BC0);
  }
  MEMORY[0x199716EA0](gCMSM);
  return Mutable;
}

uint64_t CMSMUtility_SomeSessionHasDoNotResetAudioCategoryOnNextInactive()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  CFAllocatorRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
    while (2)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v0);
        }
        if ([*(id *)(*((void *)&v7 + 1) + 8 * v4) doNotResetAudioCategoryOnNextInactive])
        {
          uint64_t v5 = 1;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v2 != v4);
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v5 = 0;
LABEL_11:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v5;
}

uint64_t CMSMUtility_CopyCurrentPhoneCallIsRoutedViaCarBT()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const void *)FigRoutingManagerCopyCarBluetoothIDs(qword_1E9359C88);
  uint64_t v1 = CMSMUtility_CopyCurrentRouteTypes();
  if (!CMSMUtility_PhoneCallOrRingtoneExists()) {
    goto LABEL_7;
  }
  if (FigCFArrayContainsValue())
  {
    CFStringRef CurrentDeviceIdentifierAtIndex = (const __CFString *)CMSMUtility_GetCurrentDeviceIdentifierAtIndex(0);
    if (cmsmIsDeviceIDIncludedInCarBluetoothIDs(CurrentDeviceIdentifierAtIndex, (uint64_t)v0))
    {
      id v3 = objc_alloc(MEMORY[0x1E4F28ED0]);
      uint64_t v4 = 1;
      goto LABEL_21;
    }
  }
  if (FigCFArrayContainsValue() || !dword_1E9359BC0)
  {
    CFArrayRef v5 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, 0x1EE5EBF48);
    if (v5)
    {
      CFArrayRef v6 = v5;
      CFIndex Count = CFArrayGetCount(v5);
      if (Count < 1)
      {
        BOOL v10 = 0;
      }
      else
      {
        CFIndex v8 = Count;
        CFIndex v9 = 0;
        BOOL v10 = 1;
        do
        {
          valuePtr[0] = 0;
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v9);
          CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, valuePtr);
          if (vaeGetPortTypeFromPortID(valuePtr[0]) == 1885892706)
          {
            CFStringRef v12 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(valuePtr[0]);
            int IsDeviceIDIncludedInCarBluetoothIDs = cmsmIsDeviceIDIncludedInCarBluetoothIDs(v12, (uint64_t)v0);
            if (v12) {
              CFRelease(v12);
            }
            if (IsDeviceIDIncludedInCarBluetoothIDs) {
              break;
            }
          }
          BOOL v10 = ++v9 < v8;
        }
        while (v8 != v9);
      }
      CFRelease(v6);
    }
    else
    {
      BOOL v10 = 0;
    }
    id v3 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v4 = v10;
  }
  else
  {
LABEL_7:
    id v3 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v4 = 0;
  }
LABEL_21:
  uint64_t v14 = [v3 initWithBool:v4];
  char v15 = CMSMUtility_CopyCurrentRouteIdentifiers();
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v0) {
    CFRelease(v0);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v1) {
    CFRelease(v1);
  }
  return v14;
}

uint64_t CMSMUtility_CopyCurrentPlayingSessionIsRoutedViaCarBT()
{
  CFAllocatorRef v0 = CMSMUtility_CopyCurrentRouteTypes();
  if (FigCFArrayContainsValue()) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = FigCFArrayContainsValue() != 0;
  }
  uint64_t v2 = (const void *)FigRoutingManagerCopyCarBluetoothIDs(qword_1E9359C88);
  id v3 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsPlayingAndPlaysToCarMainAudio, 0);
  BOOL v5 = 0;
  if (v3)
  {
    if (v1)
    {
      CFStringRef CurrentDeviceIdentifierAtIndex = (const __CFString *)CMSMUtility_GetCurrentDeviceIdentifierAtIndex(0);
      if (cmsmIsDeviceIDIncludedInCarBluetoothIDs(CurrentDeviceIdentifierAtIndex, (uint64_t)v2)) {
        BOOL v5 = 1;
      }
    }
  }
  uint64_t v6 = [objc_alloc(MEMORY[0x1E4F28ED0]) initWithBool:v5];
  long long v7 = CMSMUtility_CopyCurrentRouteIdentifiers();
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v0) {
    CFRelease(v0);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v6;
}

const void *CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(CFIndex a1)
{
  MEMORY[0x199716E90](gCMSM);
  CFIndex Count = qword_1E9359BA8;
  if (qword_1E9359BA8) {
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_1E9359BA8);
  }
  if (Count <= a1) {
    CFNumberRef ValueAtIndex = 0;
  }
  else {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_1E9359BA8, a1);
  }
  MEMORY[0x199716EA0](gCMSM);
  return ValueAtIndex;
}

CFArrayRef CMSMUtility_CopyDisplayIDsOfActiveSessions()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        long long v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if ([v7 isActive]
          && [v7 displayID]
          && !-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [v7 audioCategory]))
        {
          CFArrayAppendValue(Mutable, (const void *)[v7 displayID]);
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  CFArrayRef Copy = CFArrayCreateCopy(v0, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

uint64_t CMSM_GetFakeSharedAudioRouteAsPicked()
{
  return word_1E9359BD8;
}

__CFArray *CMSMUtility_CreateOverridePortsList(int a1, int a2)
{
  int valuePtr = a2;
  int v13 = a1;
  if ((a1 + 1) <= 1 && a2 == 0) {
    return 0;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a2)
  {
    CFNumberRef v7 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
    if (v7)
    {
      CFNumberRef v8 = v7;
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v8);
    }
  }
  if ((a1 - 1) <= 0xFFFFFFFD)
  {
    CFNumberRef v9 = CFNumberCreate(v5, kCFNumberSInt32Type, &v13);
    if (v9)
    {
      CFNumberRef v10 = v9;
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v10);
    }
  }
  return Mutable;
}

__CFArray *CMSMUtility_CopyMostImportantPlayingSession()
{
  CFAllocatorRef v0 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsPlayingAndPlaysToCarMainAudio, 0);
  if (v0)
  {
    CFArrayRef v1 = v0;
    if (CFArrayGetCount(v0) < 1)
    {
      CFAllocatorRef v5 = 0;
      uint64_t v4 = 0;
      uint64_t v3 = 0;
    }
    else
    {
      CFIndex v2 = 0;
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      CFAllocatorRef v5 = 0;
      do
      {
        CFNumberRef ValueAtIndex = (__CFArray *)CFArrayGetValueAtIndex(v1, v2);
        if (([(__CFArray *)ValueAtIndex hasPhoneCallBehavior] & 1) != 0
          || CMSUtility_IsAudioCategoryRingtone(ValueAtIndex))
        {
          CFAllocatorRef v5 = ValueAtIndex;
        }
        else if ([(__CFArray *)ValueAtIndex isTheAssistant])
        {
          uint64_t v4 = ValueAtIndex;
        }
        else
        {
          uint64_t v3 = ValueAtIndex;
        }
        ++v2;
      }
      while (v2 < CFArrayGetCount(v1));
    }
    if (v4) {
      CFNumberRef v7 = v4;
    }
    else {
      CFNumberRef v7 = v3;
    }
    if (v5) {
      CFNumberRef v8 = v5;
    }
    else {
      CFNumberRef v8 = v7;
    }
    CFNumberRef v10 = v8;
    CFRelease(v1);
    CFAllocatorRef v0 = v10;
  }
  return v0;
}

__CFArray *CMSMUtility_CopyPlayingSessionsUsingRoutingContext()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFArrayRef v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v6 isActive])
        {
          if ([v6 isPlaying])
          {
            [v6 routingContextUUID];
            if (FigCFEqual()) {
              CFArrayAppendValue(Mutable, v6);
            }
          }
        }
      }
      uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return Mutable;
}

void *CMSMUtility_CopyMXCoreSessionWithID(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        CFNumberRef v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "ID"), "unsignedLongLongValue") == a1)
        {
          id v8 = v7;
          goto LABEL_11;
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  CFNumberRef v7 = 0;
LABEL_11:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v7;
}

id CMSMUtility_CopyActiveMXCoreSessionEligibleForNowPlayingAppConsideration(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    CFArrayRef v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(void *)v9;
LABEL_4:
      uint64_t v5 = 0;
      while (1)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v8 + 1) + 8 * v5);
        if ([v6 isActive])
        {
          [v6 displayID];
          if (FigCFEqual())
          {
            if (CMSUtility_GetIsEligibleForNowPlayingAppConsideration(v6)) {
              break;
            }
          }
        }
        if (v3 == ++v5)
        {
          uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
          if (v3) {
            goto LABEL_4;
          }
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      uint64_t v6 = 0;
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6;
}

void *CMSMUtility_GetPlayingPhoneCallOrRingtoneSession()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  CFAllocatorRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
LABEL_3:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v8 != v3) {
        objc_enumerationMutation(v0);
      }
      uint64_t v5 = *(void **)(*((void *)&v7 + 1) + 8 * v4);
      if ((([v5 hasPhoneCallBehavior] & 1) != 0 || CMSUtility_IsAudioCategoryRingtone(v5))
        && [v5 isActive]
        && ([v5 isPlaying] & 1) != 0)
      {
        break;
      }
      if (v2 == ++v4)
      {
        uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          goto LABEL_3;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    uint64_t v5 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v5;
}

void *CMSMUtility_CopyActiveSessionWithPhoneCallBehaviorOrRingtone()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFAllocatorRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isActive]
          && (([v5 hasPhoneCallBehavior] & 1) != 0 || CMSUtility_IsAudioCategoryRingtone(v5)))
        {
          id v6 = v5;
          goto LABEL_13;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v5 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v5;
}

void *CMSMUtility_CopyActiveSiriSession()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFAllocatorRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isTheAssistant] && objc_msgSend(v5, "isActive"))
        {
          id v6 = v5;
          goto LABEL_12;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v5 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v5;
}

uint64_t CMSMUtility_ActiveVideoConferenceExists()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFAllocatorRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isActive])
        {
          [v5 audioMode];
          if (FigCFEqual() || ([v5 audioMode], FigCFEqual()))
          {
            if (CMSMUtility_IsPlayAndRecordCategory([v5 audioCategory]))
            {
              uint64_t v6 = 1;
              goto LABEL_14;
            }
          }
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_14:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMUtility_ClearOverridesForPhoneCallSessions(int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        long long v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if ([v7 hasPhoneCallBehavior])
        {
          int v8 = [v7 isActive];
          if (a1 == 1)
          {
            if (v8) {
              MXCoreSessionSetProperty((int)v7, @"OverrideRoute");
            }
          }
        }
        if ([v7 isActive]) {
          MXCoreSessionSetProperty((int)v7, @"UserMuted");
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
  return [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
}

uint64_t CMSMUtility_IsSiriActive()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFAllocatorRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if [v5 isTheAssistant] && (objc_msgSend(v5, "isActive"))
        {
          uint64_t v6 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMUtility_DoesSiriAllowMixableAudioWhileRecording()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFAllocatorRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isTheAssistant]
          && [v5 isRecording]
          && ([v5 allowMixableAudioWhileRecording] & 1) != 0)
        {
          uint64_t v6 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

void CMSMUtility_UpdateSecureMicrophonePolicy(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (CMSMDeviceState_IsSmartCoverClosed()
    && CMSMUtility_DoesCurrentInputPortSupportSecureMicrophone())
  {
    if (a1)
    {
      if (CMSUtility_GetIsRecording(a1)
        && !CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(a1))
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtility_InterruptSessionForSecureMicrophonePolicy(a1);
      }
    }
    else
    {
      [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v3 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
      uint64_t v4 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v15 objects:v21 count:16];
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = *(void *)v16;
        do
        {
          for (uint64_t i = 0; i != v5; ++i)
          {
            if (*(void *)v16 != v6) {
              objc_enumerationMutation(v3);
            }
            long long v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
            if (CMSUtility_GetIsRecording(v8)
              && !CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(v8))
            {
              if (dword_1E9359ED0)
              {
                unsigned int v20 = 0;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                long long v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v10 = v20;
                if (os_log_type_enabled(v9, type)) {
                  unsigned int v11 = v10;
                }
                else {
                  unsigned int v11 = v10 & 0xFFFFFFFE;
                }
                if (v11)
                {
                  uint64_t v12 = [v8 clientName];
                  int v22 = 136315394;
                  uint64_t v23 = "CMSMUtility_UpdateSecureMicrophonePolicy";
                  __int16 v24 = 2114;
                  uint64_t v25 = v12;
                  LODWORD(v14) = 22;
                  uint64_t v13 = &v22;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              CMSUtility_InterruptSessionForSecureMicrophonePolicy(v8);
            }
          }
          uint64_t v5 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v15 objects:v21 count:16];
        }
        while (v5);
      }
      [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    }
  }
}

uint64_t CMSMUtility_DoesCurrentInputPortSupportSecureMicrophone()
{
  uint64_t result = CMSMUtility_GetCurrentInputPortAtIndex(0);
  if (result)
  {
    return vaeDoesPortSupportSecureMicrophone(result);
  }
  return result;
}

uint64_t CMSMUtility_ShouldIgnorePlayCommandsFromAccessory()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFAllocatorRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isActive])
        {
          if (([v5 hasPhoneCallBehavior] & 1) != 0
            || CMSUtility_IsAudioCategoryRingtone(v5)
            || ([v5 isTheAssistant] & 1) != 0
            || ([v5 audioCategory], FigCFEqual()))
          {
            uint64_t v6 = 1;
            goto LABEL_16;
          }
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t v6 = 0;
      if (v2) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
LABEL_16:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMUtility_SomeClientIsPlayingLongFormAudio()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFAllocatorRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isPlaying]
          && ([v5 doesntActuallyPlayAudio] & 1) == 0
          && CMSUtility_IsSessionPlayingLongFormAudio(v5))
        {
          uint64_t v6 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMUtility_SomeNonMixableClientIsPlaying()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFAllocatorRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isPlaying]
          && ([v5 doesntActuallyPlayAudio] & 1) == 0
          && ![v5 mixesWithEveryone])
        {
          uint64_t v6 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMUtility_SomeClientIsPlayingToAirPlay()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!FigVAEndpointManagerGetPropertyBoolean(qword_1E9359B78, 0x1EE5F2FC8)) {
    return 0;
  }
  CMScreenGetScreenState();
  if (FigCFEqual()) {
    return 0;
  }
  CMScreenGetScreenType();
  if (!FigCFEqual()) {
    return 0;
  }
  CFTypeRef v16 = 0;
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)[+[MXSessionManager sharedInstance] systemMirroringRoutingContextUUID], 0, (uint64_t)&cf);
  if (cf)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
    if (v5) {
      v5(CMBaseObject, *MEMORY[0x1E4F20CC0], *MEMORY[0x1E4F1CF80], &v16);
    }
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v6 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v7 = [(NSPointerArray *)v6 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v6);
        }
        long long v11 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v11 isPlaying]
          && (![v11 doesntActuallyPlayAudio] || FigCFEqual())
          && CMSUtility_IsPlayingToDefaultVAD(v11))
        {
          uint64_t v0 = 1;
          goto LABEL_25;
        }
      }
      uint64_t v8 = [(NSPointerArray *)v6 countByEnumeratingWithState:&v12 objects:v18 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
  uint64_t v0 = 0;
LABEL_25:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v16) {
    CFRelease(v16);
  }
  return v0;
}

uint64_t CMSMUtility_DoesActiveAirPlayVideoSessionExistForPID(int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1)
        {
          if ([v7 isActive])
          {
            if ([v7 isActiveOverAirPlayVideo])
            {
              [v7 audioCategory];
              if (FigCFEqual()
                || ([v7 audioCategory], FigCFEqual())
                || ([v7 audioCategory], FigCFEqual()))
              {
                uint64_t v8 = 1;
                goto LABEL_16;
              }
            }
          }
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 0;
LABEL_16:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v8;
}

uint64_t CMSMUtility_IsAnyVoicePromptSessionThatDoesNotControlHardwareActive()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        [v5 audioMode];
        if (FigCFEqual()
          && [v5 dontTakeOverHardware]
          && ([v5 isActive] & 1) != 0)
        {
          uint64_t v6 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMUtility_IsAirPlayVideoActive()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
    while (2)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v0);
        }
        if ([*(id *)(*((void *)&v7 + 1) + 8 * v4) isActiveOverAirPlayVideo])
        {
          uint64_t v5 = 1;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v2 != v4);
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v5 = 0;
LABEL_11:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v5;
}

uint64_t CMSMUtility_UpdateSomeLongFormVideoClientIsPlaying()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  MEMORY[0x199716E90](gCMSM);
  int v0 = byte_1E9359B9E;
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if ([v6 isPlaying] && CMSUtility_IsLongFormVideoSession(v6))
        {
          int v7 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
  }
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  byte_1E9359B9E = v7;
  uint64_t result = MEMORY[0x199716EA0](gCMSM);
  if (v7 != v0)
  {
    uint64_t result = CMSMNotificationUtility_PostSomeLongFormVideoClientIsPlayingDidChange(v7);
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t CMSMUtility_IsAnyLongFormVideoSessionActiveOverAirPlayVideo()
{
  MEMORY[0x199716E90](gCMSM);
  uint64_t v0 = byte_1E9359B9C;
  MEMORY[0x199716EA0](gCMSM);
  return v0;
}

uint64_t CMSMUtility_IsAnyLongFormVideoSessionPlayingOverAirPlayVideo()
{
  MEMORY[0x199716E90](gCMSM);
  uint64_t v0 = byte_1E9359B9D;
  MEMORY[0x199716EA0](gCMSM);
  return v0;
}

uint64_t CMSMUtility_IsAnyLongFormVideoSessionPlaying()
{
  MEMORY[0x199716E90](gCMSM);
  uint64_t v0 = byte_1E9359B9E;
  MEMORY[0x199716EA0](gCMSM);
  return v0;
}

BOOL CMSMUtility_AllowedToUseGPSInBackground(const __CFArray *a1)
{
  v3.length = CFArrayGetCount(a1);
  v3.location = 0;
  return CFArrayContainsValue(a1, v3, @"location") != 0;
}

BOOL CMSMUtility_iOSWillRequestCarMainAudio(int a1)
{
  uint64_t v2 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsPlayingAndPlaysToCarMainAudio, 0);
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2) < 1)
    {
      unint64_t v6 = 0;
      unint64_t v5 = 0;
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      unint64_t v6 = 0;
      CFIndex v7 = 0;
      do
      {
        CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v7);
        if (([ValueAtIndex hasPhoneCallBehavior] & 1) != 0
          || CMSUtility_IsAudioCategoryRingtone(ValueAtIndex))
        {
          unint64_t v6 = (unint64_t)ValueAtIndex;
        }
        else if ([ValueAtIndex isTheAssistant])
        {
          unint64_t v5 = (unint64_t)ValueAtIndex;
        }
        else
        {
          uint64_t v4 = ValueAtIndex;
        }
        ++v7;
      }
      while (v7 < CFArrayGetCount(v3));
    }
    long long v11 = (uint64_t *)kFigEndpointCentralTransferType_Borrow;
    if (!(v6 | v5) && !CMSUtility_ShouldBorrowCarMainAudio(v4)) {
      long long v11 = &kFigEndpointCentralTransferType_Take;
    }
    long long v9 = (__CFString *)*v11;
    CFRelease(v3);
    if (a1) {
      goto LABEL_19;
    }
  }
  else
  {
    long long v9 = 0;
    if (a1)
    {
LABEL_19:
      long long v10 = @"Borrow";
      return v9 == v10;
    }
  }
  long long v10 = @"Take";
  return v9 == v10;
}

uint64_t CMSMUtility_DoesiOSHaveCarPlayScreen()
{
  return FigEndpointCentralEntityHoldsResource(qword_1E9359C70, 0x1EE5E67A8, 0x1EE5F1988);
}

uint64_t CMSMUtility_DoesiOSHaveCarPlayMainAudio()
{
  return FigEndpointCentralEntityHoldsResource(qword_1E9359C70, 0x1EE5E67A8, 0x1EE5F1968);
}

uint64_t CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(uint64_t result)
{
  byte_1E9359C78 = result;
  return result;
}

uint64_t CMSMUtility_IsCarPlayNowPlayingStateSaved()
{
  return byte_1E9359CD1;
}

uint64_t CMSMUtility_CarPlayIsPlayingLongerDurationSession()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v0 = CMSMUtility_CopyCarPlaySession();
  if (v0)
  {

    MEMORY[0x199716E90](gCMSM);
    int v1 = FigEndpointCentralEntityHoldsResource(qword_1E9359C70, 0x1EE5E6788, 0x1EE5F1968);
    int ResourceTypeBorrowConstraint = FigEndpointCentralGetResourceTypeBorrowConstraint(qword_1E9359C70, 0x1EE5F1968);
    MEMORY[0x199716EA0](gCMSM);
    if (v1 && ResourceTypeBorrowConstraint == 1000)
    {
      uint64_t v3 = 1;
    }
    else
    {
      [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v4 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
      uint64_t v5 = [(NSPointerArray *)v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v13;
        while (2)
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v13 != v7) {
              objc_enumerationMutation(v4);
            }
            long long v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
            if ([v9 isActive]
              && (CMSUtility_IsAudioCategoryVoicemail(v9)
               || ([v9 hasPhoneCallBehavior] & 1) != 0))
            {
              uint64_t v3 = 1;
              goto LABEL_18;
            }
          }
          uint64_t v6 = [(NSPointerArray *)v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }
      uint64_t v3 = 0;
LABEL_18:
      [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (v3 != CMSMUtility_CarPlayIsPlayingLongerDurationSession_cachedIsPlayingLongerDurationSession)
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSMUtility_CarPlayIsPlayingLongerDurationSession_cachedIsPlayingLongerDurationSession = v3;
  }
  return v3;
}

CFTypeRef CMSMUtility_CopyStarkEndpointCentral()
{
  CFTypeRef result = (CFTypeRef)qword_1E9359C70;
  if (qword_1E9359C70) {
    return CFRetain((CFTypeRef)qword_1E9359C70);
  }
  return result;
}

uint64_t CMSMUtility_CopyFigStarkModeController(CFTypeRef *a1)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (a1 && (cf[0] = 0, qword_1E9359C70) && (CFTypeRef v2 = CFRetain((CFTypeRef)qword_1E9359C70)) != 0)
  {
    uint64_t v3 = v2;
    uint64_t v4 = FigEndpointCentralCopyStarkModeController((uint64_t)v2, cf);
    if (v4)
    {
      FigSignalErrorAt();
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    else
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *a1 = cf[0];
      cf[0] = 0;
    }
    CFRelease(v3);
  }
  else
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  return v4;
}

uint64_t CMSMUtility_DoesCarPlaySupportMixableSiri()
{
  v8[20] = *MEMORY[0x1E4F143B8];
  CFTypeRef v0 = CMSMUtility_CopySystemAudioRoutingContextUUID();
  CFTypeRef v1 = FigRoutingManagerCopyActivatedCarPlayEndpoint((uint64_t)v0);
  v8[0] = *MEMORY[0x1E4F1CFC8];
  if (v1)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t, void, void, void *))(v4 + 48);
    if (v5) {
      v5(CMBaseObject, *MEMORY[0x1E4F21000], *MEMORY[0x1E4F1CF80], v8);
    }
  }
  if (FigCFEqual())
  {
    if (!dword_1E9359ED0) {
      goto LABEL_12;
    }
  }
  else if (!dword_1E9359ED0)
  {
    goto LABEL_12;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_12:
  if (v1) {
    CFRelease(v1);
  }
  if (v0) {
    CFRelease(v0);
  }
  return FigCFEqual();
}

uint64_t CMSMUtility_ShouldEnableLongPullModeWhenScreenIsBlanked()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  CFTypeRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v12 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ([v5 isActive])
        {
          double PreferredIOBufferDuration = CMSUtility_GetPreferredIOBufferDuration(v5, v6);
          if (*(float *)&PreferredIOBufferDuration != 0.0
            || CMSUtility_GetPreferredIOBufferFrames(v5, v7)
            || [v5 vpBlockConfiguration] && (objc_msgSend(v5, "isRecording") & 1) != 0)
          {
            uint64_t v9 = 0;
            goto LABEL_15;
          }
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v9 = 1;
LABEL_15:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v9;
}

uint64_t CMSMUtility_ReassignHWControlFlagsAfterMusicVADDestruction()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  CFTypeRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v22;
LABEL_3:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v22 != v3) {
        objc_enumerationMutation(v0);
      }
      uint64_t v5 = *(void **)(*((void *)&v21 + 1) + 8 * v4);
      if ([v5 isActive])
      {
        CMSUtility_GetCurrentAudioDestination(v5);
        if (FigCFEqual())
        {
          if (([v5 prefersToTakeHWControlFlagsFromAnotherSession] & 1) == 0
            && ([v5 currentlyControllingFlags] & 2) != 0)
          {
            break;
          }
        }
      }
      if (v2 == ++v4)
      {
        uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v21 objects:v26 count:16];
        if (v2) {
          goto LABEL_3;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    uint64_t v5 = 0;
  }
  uint64_t result = [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (v5)
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v7 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v8 = [(NSPointerArray *)v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v18;
      uint64_t v16 = v7;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v18 != v10) {
            objc_enumerationMutation(v7);
          }
          long long v12 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          if (objc_msgSend(v12, "isActive", v14, v15))
          {
            CMSUtility_GetCurrentAudioDestination(v12);
            if (FigCFEqual())
            {
              if ([v12 prefersToTakeHWControlFlagsFromAnotherSession]
                && (([v12 hwControlFlags] & 2) != 0
                 || ([v12 hwControlFlags] & 0x20000) != 0))
              {
                if (dword_1E9359ED0)
                {
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  uint64_t v7 = v16;
                }
                cmsTryToTakeControl(v12);
              }
            }
          }
        }
        uint64_t v9 = [(NSPointerArray *)v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
      }
      while (v9);
    }
    return [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  }
  return result;
}

void CMSMUtility_NotifyEachSubscribedSession(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

float CMSMUtility_GetVoiceOverDuckFadeDuration()
{
  if ((CMSMUtility_GetVoiceOverDuckFadeDuration_gCheckedVoiceOverDuckFadeDuration & 1) == 0)
  {
    Boolean keyExistsAndHasValidFormat = 0;
    AppIntegerint Value = CFPreferencesGetAppIntegerValue(@"voiceover_duckfadeduration_ms", @"com.apple.coremedia", &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat) {
      *(float *)&CMSMUtility_GetVoiceOverDuckFadeDuration_gVoiceOverDuckFadeDuration = (float)AppIntegerValue / 1000.0;
    }
    CMSMUtility_GetVoiceOverDuckFadeDuration_gCheckedVoiceOverDuckFadeDuration = 1;
  }
  return *(float *)&CMSMUtility_GetVoiceOverDuckFadeDuration_gVoiceOverDuckFadeDuration;
}

void CMSMUtility_CreateTokensFromDeviceUID(CFStringRef theString, CFStringRef *a2, CFStringRef *a3)
{
  if ((unint64_t)a2 | (unint64_t)a3)
  {
    if (a2) {
      *a2 = 0;
    }
    if (a3) {
      *a3 = 0;
    }
    if (theString)
    {
      CFRange v6 = CFStringFind(theString, @"-", 4uLL);
      CFIndex Length = CFStringGetLength(theString);
      if (v6.length <= 0)
      {
        v10.length = Length;
        CFStringRef v9 = 0;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      }
      else
      {
        v13.length = CFStringGetLength(theString) + ~v6.location;
        v13.location = v6.location + 1;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v9 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, v13);
        v10.length = v6.location;
      }
      v10.location = 0;
      CFStringRef v11 = CFStringCreateWithSubstring(v8, theString, v10);
      if (a2)
      {
        *a2 = v11;
        CFStringRef v11 = 0;
      }
      if (a3)
      {
        *a3 = v9;
        CFStringRef v9 = 0;
      }
      if (v11) {
        CFRelease(v11);
      }
      if (v9)
      {
        CFRelease(v9);
      }
    }
  }
}

CFStringRef CMSMUtility_CFStringEqualCaseInsensitive(const __CFString *result, const __CFString *a2)
{
  if (result == a2) {
    return (const __CFString *)1;
  }
  if (result) {
    return (const __CFString *)(CFStringCompare(result, a2, 1uLL) == kCFCompareEqualTo);
  }
  return result;
}

__CFString *CMSMUtility_CreateFormattedDateAndTime()
{
  CFTypeRef v0 = CFCalendarCopyCurrent();
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v2 = Mutable;
  if (v0)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFCalendarDecomposeAbsoluteTime(v0, Current, "yMdHms", (char *)&v7 + 4, &v7, (char *)&v6 + 4, &v6, (char *)&v5 + 4, &v5);
    CFStringAppendFormat(v2, 0, @"%d/%d/%d-%.2d:%.2d:%.2d", v7, HIDWORD(v6), HIDWORD(v7), v6, HIDWORD(v5), v5);
    CFRelease(v0);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, @"%d/%d/%d-%.2d:%.2d:%.2d", 0, 0, 0, 0, 0, 0);
  }
  return v2;
}

CFIndex CMSMUtility_PrintRouteDescriptions(int a1, CFArrayRef theArray)
{
  if (theArray) {
    return CFArrayGetCount(theArray);
  }
  return result;
}

uint64_t CMSMUtility_IsVoiceCallCategory()
{
  return FigCFEqual();
}

BOOL CMSMUtility_IsChatMode()
{
  return FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual() != 0;
}

__CFString *CMSMUtility_GetVADNameforSiriEndpointID()
{
  return @"VirtualAudioDevice_SiriEndpoint";
}

CFTypeRef CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary()
{
  v3[1] = *(const void **)MEMORY[0x1E4F143B8];
  CFTypeRef result = (CFTypeRef)CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour;
  if (CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour) {
    return CFRetain(result);
  }
  v3[0] = @"VirtualAudioDevice_Default";
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v2 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, 1, MEMORY[0x1E4F1D510]);
  CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour = (uint64_t)CFDictionaryCreateMutable(v1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue((CFMutableDictionaryRef)CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour, @"AudioBehaviour_Destination", v2);
  CFDictionarySetValue((CFMutableDictionaryRef)CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour, @"AudioBehaviour_Stream", @"Stream_Primary");
  if (v2) {
    CFRelease(v2);
  }
  CFTypeRef result = (CFTypeRef)CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour;
  if (CMSMUtility_CopyVoiceOverOverBTLEAudioDictionary_audioBehaviour) {
    return CFRetain(result);
  }
  return result;
}

float CMSMUtility_GetFadeInDurationForPlaybackHandoff()
{
  if (!MX_FeatureFlags_IsHandoffEnabled()) {
    return 0.0;
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  gFadeInDurationAppliedForPlaybackHandoff = 1;
  return 0.5;
}

const char *CMSMUtility_GetVolumeOperationName(int a1)
{
  if ((a1 - 1) > 0xD) {
    return "UNKNOWN";
  }
  else {
    return off_1E57C95E8[a1 - 1];
  }
}

__CFString *CMSMUtility_GetStringForRouteControlFeatures(unsigned int a1)
{
  if (a1 > 2) {
    return @"UNKNOWN";
  }
  else {
    return off_1E57C9658[a1];
  }
}

CFTypeRef CMSMUtility_CopyMostRelevantAirPlayAudioModeForRoutingContext()
{
  CFTypeRef v0 = CMSMUtility_CopyPlayingSessionsUsingRoutingContext();
  if (!v0) {
    return 0;
  }
  CFArrayRef v1 = v0;
  CFIndex Count = CFArrayGetCount(v0);
  if (Count < 1) {
    goto LABEL_17;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = (const void *)*MEMORY[0x1E4F212A8];
  uint64_t v7 = (const void *)*MEMORY[0x1E4F212A0];
  CFAllocatorRef v8 = (const void *)*MEMORY[0x1E4F212B0];
  do
  {
    CFStringRef v9 = v5;
    CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v1, v4);
    [ValueAtIndex audioCategory];
    if (FigCFEqual())
    {
      [ValueAtIndex audioMode];
      int v11 = FigCFEqual();
      uint64_t v5 = v6;
      if (!v11)
      {
        [ValueAtIndex audioMode];
        int v12 = FigCFEqual();
        uint64_t v5 = v7;
        if (v12)
        {
          uint64_t v5 = v8;
          if (v9)
          {
            int v13 = FigCFEqual();
            uint64_t v5 = v8;
            if (!v13) {
              uint64_t v5 = v7;
            }
          }
        }
      }
    }
    else if (v9)
    {
      uint64_t v5 = v9;
    }
    else
    {
      uint64_t v5 = v7;
    }
    ++v4;
  }
  while (v3 != v4);
  if (v5) {
    CFTypeRef v14 = CFRetain(v5);
  }
  else {
LABEL_17:
  }
    CFTypeRef v14 = 0;
  CFRelease(v1);
  return v14;
}

uint64_t CMSMUtility_ChangeMainVolumeForSession(void *a1, float a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  FigVolumeControllerCopySharedController(cf);
  CFTypeRef v33 = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID([a1 routingContextUUID], (uint64_t)&v33);
  uint64_t v10 = 0;
  if (a5 > 10)
  {
    if (a5 == 12) {
      goto LABEL_9;
    }
    if (a5 != 11) {
      goto LABEL_33;
    }
LABEL_7:
    CFTypeRef v12 = v33;
    CFTypeRef v11 = cf[0];
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    long long v19 = *(uint64_t (**)(CFTypeRef, CFTypeRef, float))(v14 + 16);
    if (v19) {
      uint64_t v10 = v19(v11, v12, a2);
    }
    else {
      uint64_t v10 = 4294954514;
    }
    CFTypeRef v21 = v33;
    CFTypeRef v20 = cf[0];
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v29 = *(void (**)(CFTypeRef, CFTypeRef, uint64_t))(v23 + 32);
    if (v29) {
      v29(v20, v21, a6);
    }
    if (dword_1E9359ED0) {
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (a5 == 1) {
    goto LABEL_7;
  }
  if (a5 != 2) {
    goto LABEL_33;
  }
LABEL_9:
  CFTypeRef v16 = v33;
  CFTypeRef v15 = cf[0];
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  long long v24 = *(uint64_t (**)(CFTypeRef, CFTypeRef, float))(v18 + 24);
  if (v24) {
    uint64_t v10 = v24(v15, v16, a2);
  }
  else {
    uint64_t v10 = 4294954514;
  }
  CFTypeRef v26 = v33;
  CFTypeRef v25 = cf[0];
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  v30 = *(void (**)(CFTypeRef, CFTypeRef, uint64_t))(v28 + 32);
  if (v30) {
    v30(v25, v26, a6);
  }
  if (dword_1E9359ED0)
  {
LABEL_32:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_33:
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v33) {
    CFRelease(v33);
  }
  return v10;
}

CFTypeRef CMSMUtility_CopySystemMusicRoutingContextUUID()
{
  CFTypeRef result = (CFTypeRef)qword_1E9359CA0;
  if (qword_1E9359CA0) {
    return CFRetain((CFTypeRef)qword_1E9359CA0);
  }
  return result;
}

uint64_t CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  CFTypeRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v7 + 1) + 8 * i);
        [v5 routingContextUUID];
        if (FigCFEqual()) {
          cmsUpdateAudioBehavior(v5);
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v2);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return 0;
}

void CMSMUtility_UpdateAudioBehaviourForVoiceOverSessions()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFTypeRef v0 = CMSMUtility_CopyCurrentRouteTypes();
  if (FigCFArrayContainsValue() || FigCFArrayContainsValue())
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    uint64_t v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(void *)v8;
      do
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v8 != v4) {
            objc_enumerationMutation(v1);
          }
          uint64_t v6 = *(void **)(*((void *)&v7 + 1) + 8 * i);
          [v6 audioCategory];
          if (FigCFEqual()) {
            cmsUpdateAudioBehavior(v6);
          }
        }
        uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      }
      while (v3);
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  }
  if (v0) {
    CFRelease(v0);
  }
}

uint64_t CMSMUtility_SetNonLongFormMediaApps(const void *a1)
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716E90](gCMSM);
  uint64_t v3 = (const void *)qword_1E9359CC0;
  qword_1E9359CC0 = (uint64_t)a1;
  if (a1) {
    CFRetain(a1);
  }
  if (v3) {
    CFRelease(v3);
  }
  return MEMORY[0x199716EA0](gCMSM);
}

uint64_t CMSMUtility_InterruptSessionsWithRoutingContextUUID()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFTypeRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v11 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        objc_msgSend(v5, "routingContextUUID", v8, v9);
        if (FigCFEqual()
          && [v5 isActive]
          && [v5 isPlaying])
        {
          if (dword_1E9359ED0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSUtilityApplier_PostNotification_StopCommand(v5, 0);
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v2);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return 0;
}

uint64_t CMSMUtility_InterruptActiveSiriSession()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFTypeRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v11 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if ([v5 isTheAssistant] && objc_msgSend(v5, "isActive"))
        {
          if (dword_1E9359ED0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSUtilityApplier_PostNotification_StopCommand(v5, 0);
          goto LABEL_14;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_14:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return 0;
}

uint64_t CMSMUtility_IsAnySessionPlayingToIndependentSystemMusicContext()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFTypeRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isActive]
          && [v5 isPlaying]
          && FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent([v5 routingContextUUID]))
        {
          uint64_t v6 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMUtility_SomeSessionIsActiveThatPrefersNoInterruptionsByRingtonesAndAlerts()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFTypeRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isActive]
          && ([v5 prefersNoInterruptionsByRingtonesAndAlerts] & 1) != 0)
        {
          uint64_t v6 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMUtility_IsAnyActiveSessionRoutedToDestination()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFTypeRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isActive])
        {
          CMSUtility_GetCurrentAudioDestination(v5);
          if (FigCFEqual())
          {
            uint64_t v6 = 1;
            goto LABEL_12;
          }
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

CFMutableArrayRef CMSMUtility_CopyActiveClientPIDsThatHideTheSpeechDetectionDevice()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v13 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v6 isActive])
        {
          int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)[v6 audioCategory]);
          int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName([v6 audioMode]);
          CFArrayRef v9 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)[v6 activationContext], (const void *)objc_msgSend(v6, "allowedPortTypes"), 1, 0x1EE5EFAA8);
          if (v9)
          {
            CFArrayRef v10 = v9;
            if (!CFArrayGetCount(v9))
            {
              objc_msgSend((id)objc_msgSend(v6, "clientPID"), "intValue");
              FigCFArrayAppendInt32();
            }
            CFRelease(v10);
          }
          else
          {
            objc_msgSend((id)objc_msgSend(v6, "clientPID"), "intValue");
            FigCFArrayAppendInt32();
          }
        }
      }
      uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v3);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return Mutable;
}

uint64_t CMSMUtility_IsIDSSessionActive()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFTypeRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if [v5 isActive] && (objc_msgSend(v5, "isIDSMXCoreSession"))
        {
          uint64_t v6 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMUtility_HandOverInterruptionsToSession(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v5 = [(NSPointerArray *)v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ((void *)[v9 interruptingSession] == a1 && objc_msgSend(v9, "waitingToResume")) {
          [v9 setInterruptingSession:a2];
        }
      }
      uint64_t v6 = [(NSPointerArray *)v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if ([a2 triggeredRemoteInterruption]) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = [a1 triggeredRemoteInterruption];
  }
  [a2 setTriggeredRemoteInterruption:v10];
  return [a1 setTriggeredRemoteInterruption:0];
}

void CMSMUtility_UpdateSupportedOutputChannelLayouts(void *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v1 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithArray:", objc_msgSend(a1, "valueForKey:", @"SupportedAudioCapabilities_SupportedChannelLayoutTags"));
    id v2 = [+[MXSessionManager sharedInstance] copyMXCoreSessionList];
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v29 objects:v39 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      char v5 = 0;
      uint64_t v6 = *(void *)v30;
      id v22 = v2;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v30 != v6) {
            objc_enumerationMutation(v2);
          }
          long long v8 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          if ([v8 isActive]
            && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v8))
          {
            if (dword_1E9359ED0)
            {
              unsigned int v28 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              id v2 = v22;
            }
            objc_msgSend(v8, "setSupportedOutputChannelLayouts:", v1, v20, v21);
            CMSMNotificationUtility_PostSupportedBufferedAudioCapabilitiesDidChange(v8);
            char v5 = 1;
          }
        }
        uint64_t v4 = [v2 countByEnumeratingWithState:&v29 objects:v39 count:16];
      }
      while (v4);

      if (v5) {
        goto LABEL_38;
      }
    }
    else
    {
    }
    if (dword_1E9359ED0)
    {
      unsigned int v28 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      long long v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)cf);
    FigRoutingManagerContextUtilities_CacheSupportedOutputChannelLayouts((uint64_t)cf[0], (uint64_t)v1);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    goto LABEL_38;
  }
  id v1 = [+[MXSessionManager sharedInstance] copyMXCoreSessionList];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v10 = [v1 countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v24;
    do
    {
      for (uint64_t j = 0; j != v11; ++j)
      {
        if (*(void *)v24 != v12) {
          objc_enumerationMutation(v1);
        }
        long long v14 = *(void **)(*((void *)&v23 + 1) + 8 * j);
        if (objc_msgSend((id)objc_msgSend(v14, "supportedOutputChannelLayouts"), "count"))
        {
          if (dword_1E9359ED0)
          {
            unsigned int v28 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            long long v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v16 = v28;
            if (os_log_type_enabled(v15, type)) {
              unsigned int v17 = v16;
            }
            else {
              unsigned int v17 = v16 & 0xFFFFFFFE;
            }
            if (v17)
            {
              uint64_t v18 = [v14 clientName];
              int v34 = 136315394;
              long long v35 = "CMSMUtility_UpdateSupportedOutputChannelLayouts";
              __int16 v36 = 2114;
              uint64_t v37 = v18;
              LODWORD(v21) = 22;
              CFTypeRef v20 = &v34;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(v14, "setSupportedOutputChannelLayouts:", objc_msgSend(MEMORY[0x1E4F1C978], "array", v20, v21));
          CMSMNotificationUtility_PostSupportedBufferedAudioCapabilitiesDidChange(v14);
        }
      }
      uint64_t v11 = [v1 countByEnumeratingWithState:&v23 objects:v33 count:16];
    }
    while (v11);
  }
LABEL_38:
}

void CMSMUtility_UpdateBadgeType()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v0 = [+[MXSessionManager sharedInstance] copyMXCoreSessionList];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v1 = [v0 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    char v3 = 0;
    uint64_t v4 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v18 != v4) {
          objc_enumerationMutation(v0);
        }
        uint64_t v6 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        if ([v6 isActive]
          && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v6))
        {
          uint64_t v7 = (void *)[v6 copyMXSessionList];
          long long v13 = 0u;
          long long v14 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v21 count:16];
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v10 = *(void *)v14;
            do
            {
              for (uint64_t j = 0; j != v9; ++j)
              {
                if (*(void *)v14 != v10) {
                  objc_enumerationMutation(v7);
                }
                [*(id *)(*((void *)&v13 + 1) + 8 * j) updateBadgeType];
              }
              uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v21 count:16];
            }
            while (v9);
          }

          char v3 = 1;
        }
      }
      uint64_t v2 = [v0 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }
    while (v2);
  }
  else
  {
    char v3 = 0;
  }

  if ((v3 & 1) == 0)
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t CMSMUtility_IsAnyMXSessionPlayingWithEachMutePriority()
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v22 = 0;
    int v3 = 0;
    int v4 = 0;
    uint64_t v5 = *(void *)v28;
    uint64_t v19 = *(void *)v28;
    long long v20 = v0;
    do
    {
      uint64_t v6 = 0;
      uint64_t v21 = v2;
      do
      {
        if (*(void *)v28 != v5) {
          objc_enumerationMutation(v0);
        }
        uint64_t v7 = *(void **)(*((void *)&v27 + 1) + 8 * v6);
        if ([v7 isActive]
          && [v7 isPlaying]
          && ![v7 shadowingAudioSessionID]
          && !CMSUtility_GetOptOutOfMutePriority(v7))
        {
          uint64_t v8 = (void *)[v7 copyMXSessionList];
          long long v23 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          uint64_t v9 = [v8 countByEnumeratingWithState:&v23 objects:v31 count:16];
          if (v9)
          {
            uint64_t v10 = v9;
            uint64_t v11 = *(void *)v24;
            do
            {
              uint64_t v12 = 0;
              do
              {
                if (*(void *)v24 != v11) {
                  objc_enumerationMutation(v8);
                }
                long long v13 = *(void **)(*((void *)&v23 + 1) + 8 * v12);
                long long v14 = (void *)[v13 getMutePriority];
                long long v15 = v14;
                if (v4 || ([v14 isEqualToString:@"MutePriority_One"] & 1) == 0)
                {
                  if ([v13 getIsPlaying]
                    && [v13 getActuallyPlaysAudio]
                    && ([v15 isEqualToString:@"MutePriority_One"] & 1) == 0)
                  {
                    if (v3 || ([v15 isEqualToString:@"MutePriority_Two"] & 1) == 0)
                    {
                      if (HIDWORD(v22) || ([v15 isEqualToString:@"MutePriority_Three"] & 1) == 0)
                      {
                        if (!(_BYTE)v22) {
                          LODWORD(v22) = [v15 isEqualToString:@"MutePriority_Four"];
                        }
                      }
                      else
                      {
                        HIDWORD(v22) = 1;
                      }
                    }
                    else
                    {
                      int v3 = 1;
                    }
                  }
                }
                else
                {
                  int v4 = 1;
                }
                ++v12;
              }
              while (v10 != v12);
              uint64_t v16 = [v8 countByEnumeratingWithState:&v23 objects:v31 count:16];
              uint64_t v10 = v16;
            }
            while (v16);
          }

          uint64_t v5 = v19;
          id v0 = v20;
          uint64_t v2 = v21;
        }
        ++v6;
      }
      while (v6 != v2);
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v2);
  }
  else
  {
    uint64_t v22 = 0;
    int v3 = 0;
    int v4 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return (HIDWORD(v22) << 16) | (v22 << 24) | (v3 << 8) | v4;
}

uint64_t CMSMUtility_AudioToolboxHandleInterruptionCommandWithMXSessionID(void *a1, uint64_t a2, uint64_t a3)
{
  if (off_1E9359B50)
  {
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))off_1E9359B50;
    uint64_t ClientPID = CMSUtility_GetClientPID(a1);
    uint64_t v7 = [a1 audioSessionID];
    return v10(ClientPID, v7, a2, a3, 0);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t CMSMUtility_AudioToolboxServerRefreshMuteState()
{
  id v0 = (uint64_t (*)(void))off_1E9359B70;
  if (off_1E9359B70)
  {
    return v0();
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294951609;
  }
}

__CFArray *CMSMUtility_CopyActiveCoreSessionsShadowingAudioSessionID(int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    int v3 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v4 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
          if ([v8 isActive]
            && [v8 shadowingAudioSessionID]
            && [v8 shadowingAudioSessionID] == a1)
          {
            CFArrayAppendValue(Mutable, v8);
          }
        }
        uint64_t v5 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v5);
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

void CMSMUtility_PostStopCommandToShadowingSessionsForSession(void *a1, unsigned __int8 a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v13 = a2;
  uint64_t v2 = CMSMUtility_CopyActiveCoreSessionsShadowingAudioSessionID([a1 audioSessionID]);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [(__CFArray *)v2 countByEnumeratingWithState:&v9 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtilityApplier_PostNotification_StopCommand(v7, &v13);
      }
      uint64_t v4 = [(__CFArray *)v2 countByEnumeratingWithState:&v9 objects:v14 count:16];
    }
    while (v4);
  }
  if (v2) {
    CFRelease(v2);
  }
}

void CMSMUtility_PostNotifyStyleFadeOutAppliedForPlaybackHandoff()
{
  if (MX_FeatureFlags_IsHandoffEnabled())
  {
    cmsmUtility_InitializeNotifyStyleTokensForPlaybackHandoff();
    if (gValidFadeOutAppliedForPlaybackHandoffToken)
    {
      if (gFadeOutDurationAppliedForPlaybackHandoff) {
        uint64_t v0 = 1000;
      }
      else {
        uint64_t v0 = 0;
      }
      notify_set_state(gFadeOutAppliedForPlaybackHandoffToken, v0);
      notify_post("com.apple.mediaexperience.fadeoutappliedforplaybackhandoff");
    }
  }
}

void cmsmUtility_InitializeNotifyStyleTokensForPlaybackHandoff()
{
  if (MX_FeatureFlags_IsHandoffEnabled()
    && cmsmUtility_InitializeNotifyStyleTokensForPlaybackHandoff_onceToken != -1)
  {
    dispatch_once(&cmsmUtility_InitializeNotifyStyleTokensForPlaybackHandoff_onceToken, &__block_literal_global_429);
  }
}

void CMSMUtility_PostNotifyStyleFadeInAppliedForPlaybackHandoff()
{
  if (MX_FeatureFlags_IsHandoffEnabled())
  {
    cmsmUtility_InitializeNotifyStyleTokensForPlaybackHandoff();
    if (gValidFadeInAppliedForPlaybackHandoffToken)
    {
      if (gFadeInDurationAppliedForPlaybackHandoff) {
        uint64_t v0 = 500;
      }
      else {
        uint64_t v0 = 0;
      }
      notify_set_state(gFadeInAppliedForPlaybackHandoffToken, v0);
      notify_post("com.apple.mediaexperience.fadeinappliedforplaybackhandoff");
    }
  }
}

float CMSMUtility_GetFadeOutDurationForPlaybackHandoff()
{
  if (!MX_FeatureFlags_IsHandoffEnabled()) {
    return 0.0;
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  gFadeOutDurationAppliedForPlaybackHandoff = 1;
  return 1.0;
}

void CMSMUtility_ApplyPIDToInheritAppStateFrom(int a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v28 = a1;
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v4 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v5 = [(NSPointerArray *)v4 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v25;
    unsigned int v20 = a2;
    uint64_t v19 = v4;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v25 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v9, "clientPID", v17, v18), "intValue") == a1
          && [v9 pidToInheritAppStateFrom] != a2)
        {
          int v10 = [v9 pidToInheritAppStateFrom];
          [v9 setPidToInheritAppStateFrom:a2];
          MX_RunningBoardServices_StartMonitoringForPID(a2);
          if (v10 >= 1)
          {
            int v23 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a2 = v20;
            uint64_t v4 = v19;
          }
        }
      }
      uint64_t v6 = [(NSPointerArray *)v4 countByEnumeratingWithState:&v24 objects:v30 count:16];
    }
    while (v6);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  valuePtr[0] = MX_RunningBoardServices_GetApplicationStateForPID(a2, 0);
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
  CFNumberRef v14 = CFNumberCreate(v12, kCFNumberSInt32Type, &v28);
  CFNumberRef v15 = v14;
  if (v14) {
    CFRetain(v14);
  }
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v16 = MXGetSerialQueue();
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = __CMSMUtility_ApplyPIDToInheritAppStateFrom_block_invoke;
  v21[3] = &__block_descriptor_48_e5_v8__0l;
  v21[4] = v15;
  v21[5] = v13;
  MXDispatchAsync((uint64_t)"CMSMUtility_ApplyPIDToInheritAppStateFrom", (uint64_t)"CMSessionManager_Utilities.m", 5790, 0, 0, v16, (uint64_t)v21);
  if (v13) {
    CFRelease(v13);
  }
  if (v15) {
    CFRelease(v15);
  }
}

uint64_t CMSMUtility_IAPShouldPauseOnHeadphoneDisconnect(uint64_t a1)
{
  if (IAPLibrary_sOnce != -1) {
    dispatch_once(&IAPLibrary_sOnce, &__block_literal_global_431);
  }
  if (!IAPLibrary_sLib || !dlsym((void *)IAPLibrary_sLib, "IAPAudioShouldPauseAudioOnHeadsetDisconnect")) {
    return 0;
  }
  uint64_t v2 = (uint64_t (*)(uint64_t))softLinkIAPAudioShouldPauseAudioOnHeadsetDisconnect;
  return v2(a1);
}

uint64_t CMSMUtility_IAPAppProcessIDIsUsingAccessory(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (IAPLibrary_sOnce != -1) {
    dispatch_once(&IAPLibrary_sOnce, &__block_literal_global_431);
  }
  if (!IAPLibrary_sLib || !dlsym((void *)IAPLibrary_sLib, "IAPAppProcessIDIsUsingAccessory")) {
    return 0;
  }
  uint64_t v2 = (uint64_t (*)(uint64_t))softLinkIAPAppProcessIDIsUsingAccessory;
  return v2(a1);
}

CFIndex CMSMUtility_VibrationPatternIsActuallyGoingToVibe(CFIndex result)
{
  if (result)
  {
    CFDictionaryRef v1 = (const __CFDictionary *)result;
    if (CFDictionaryContainsKey((CFDictionaryRef)result, @"VibePattern"))
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v1, @"VibePattern");
      CFTypeRef result = CFArrayGetCount(Value);
      if (!result) {
        return result;
      }
      v5.length = CFArrayGetCount(Value);
      v5.location = 0;
      BOOL v3 = CFArrayContainsValue(Value, v5, (const void *)*MEMORY[0x1E4F1CFD0]) == 0;
      return !v3;
    }
    if (CFDictionaryContainsKey(v1, @"OnDuration")) {
      return 1;
    }
    CFTypeRef result = CFDictionaryContainsKey(v1, @"Atoms");
    if (result)
    {
      CFArrayRef v4 = (const __CFArray *)CFDictionaryGetValue(v1, @"Atoms");
      BOOL v3 = CFArrayGetCount(v4) == 0;
      return !v3;
    }
  }
  return result;
}

void *CMSMUtility_GetSharePlayMediaSession()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!MX_FeatureFlags_IsSharePlayEnabled()) {
    return 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
LABEL_4:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v8 != v3) {
        objc_enumerationMutation(v0);
      }
      CFRange v5 = *(void **)(*((void *)&v7 + 1) + 8 * v4);
      if ([v5 isSharePlayMediaSession]) {
        break;
      }
      if (v2 == ++v4)
      {
        uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          goto LABEL_4;
        }
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    CFRange v5 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v5;
}

uint64_t CMSMUtility_TransferVolumeControlFlagToSharePlayCapableMediaSession()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = MX_FeatureFlags_IsSharePlayEnabled();
  if (result)
  {
    uint64_t result = (uint64_t)CMSMUtility_GetSharePlayCapableActiveMediaSession();
    if (result)
    {
      uint64_t v1 = (void *)result;
      uint64_t result = CMSMUtility_IsSharePlayCapableCallSessionActive();
      if (result)
      {
        [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
        long long v10 = 0u;
        long long v11 = 0u;
        long long v8 = 0u;
        long long v9 = 0u;
        uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
        uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v3)
        {
          uint64_t v4 = v3;
          uint64_t v5 = *(void *)v9;
          while (2)
          {
            for (uint64_t i = 0; i != v4; ++i)
            {
              if (*(void *)v9 != v5) {
                objc_enumerationMutation(v2);
              }
              long long v7 = *(void **)(*((void *)&v8 + 1) + 8 * i);
              if (CMSUtility_GetIsActive(v7)
                && (([v7 isSharePlayCallSession] & 1) != 0
                 || [v7 isSharePlayCapableCallSession]))
              {
                objc_msgSend(v7, "setCurrentlyControllingFlags:", objc_msgSend(v7, "currentlyControllingFlags") & 0xFFFFFFEFLL);
                [v7 setHwControlFlags:2];
                goto LABEL_16;
              }
            }
            uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
            if (v4) {
              continue;
            }
            break;
          }
        }
LABEL_16:
        [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
        cmsTryToTakeControl(v1);
        vaemConfigurePVMSettings((__CFString *)[v1 audioMode], 0);
        return [v1 setNeedToEndInterruption:1];
      }
    }
  }
  return result;
}

uint64_t CMSMUtility_TransferVolumeControlFlagToSharePlayCapableCallSession()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMSMUtility_IsSharePlayCapableCallSessionActive();
  if (result)
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    uint64_t v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(void *)v8;
      while (2)
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v8 != v4) {
            objc_enumerationMutation(v1);
          }
          uint64_t v6 = *(void **)(*((void *)&v7 + 1) + 8 * i);
          if (CMSUtility_GetIsActive(v6)
            && [v6 isSharePlayCapableCallSession])
          {
            [v6 setHwControlFlags:18];
            return [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
          }
        }
        uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v3) {
          continue;
        }
        break;
      }
    }
    return [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  }
  return result;
}

void CMSMUtility_SetMediaPlaybackVolumeToCurrentPhoneCallVolume()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  float v10 = 0.0;
  if (MX_FeatureFlags_IsSharePlayEnabled())
  {
    uint64_t CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    AudioObjectID v1 = CurrentOutputPortAtIndex;
    id v2 = vaeCopyFigOutputDeviceNameFromVADPort(CurrentOutputPortAtIndex);
    CFStringRef v3 = vaeCopyRouteSubtypeFromVADPort(v1);
    CFTypeRef v4 = vaeCopyDeviceIdentifierFromVADPort(v1);
    unsigned __int8 v5 = getpid();
    int v6 = MXSMPerformVolumeOperation(0xDu, @"PhoneCall", v2, v4, v3, v5, 0, &v10, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0);
    if (v4) {
      CFRelease(v4);
    }
    if (v3) {
      CFRelease(v3);
    }
    if (v2) {
      CFRelease(v2);
    }
    if (!v6)
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      float v8 = v10;
      uint64_t v9 = getpid();
      MXSMPerformVolumeOperation(0xCu, @"Audio/Video", 0, 0, 0, 0, v9, 0, v8, 0.0, 0.0, 0, 0, 0, 1u, 0);
    }
  }
}

void CMSMUtility_SetPhoneCallVolumeToCurrentMediaPlaybackVolume()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  float v9 = 0.0;
  if (MX_FeatureFlags_IsSharePlayEnabled())
  {
    uint64_t v0 = getpid();
    if (!MXSMPerformVolumeOperation(0xDu, @"Audio/Video", 0, 0, 0, 0, v0, &v9, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0))
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
      AudioObjectID v3 = CurrentOutputPortAtIndex;
      id v4 = vaeCopyFigOutputDeviceNameFromVADPort(CurrentOutputPortAtIndex);
      CFStringRef v5 = vaeCopyRouteSubtypeFromVADPort(v3);
      CFTypeRef v6 = vaeCopyDeviceIdentifierFromVADPort(v3);
      float v7 = v9;
      uint64_t v8 = getpid();
      MXSMPerformVolumeOperation(0xCu, @"PhoneCall", v4, v6, v5, 0, v8, 0, v7, 0.0, 0.0, 0, 0, 0, 1u, 0);
      if (v6) {
        CFRelease(v6);
      }
      if (v5) {
        CFRelease(v5);
      }
      if (v4) {
        CFRelease(v4);
      }
    }
  }
}

uint64_t CMSMUtility_SetSharePlayInfoOnVA(void *a1)
{
  uint64_t result = MX_FeatureFlags_IsSharePlayEnabled();
  if (a1 && result)
  {
    if ([a1 isSharePlayMediaSession]
      && [a1 isActive]
      && CMSMUtility_IsSharePlayCallSessionActive())
    {
      int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName([a1 audioMode]);
      uint64_t v4 = [a1 aggregateDeviceClockUID];
      return CMSMVAUtility_SetSharePlayMediaSessionInfoOnVA(VADModeFromFigModeName, v4);
    }
    else
    {
      uint64_t result = [a1 isSharePlayCallSession];
      if (result)
      {
        uint64_t result = [a1 isActive];
        if (result)
        {
          int IsSharePlayMediaSessionActive = CMSMUtility_IsSharePlayMediaSessionActive();
          return cmsSetCategoryOnPVMAndAudioDevice(a1, 0, IsSharePlayMediaSessionActive);
        }
      }
    }
  }
  return result;
}

BOOL CMSMUtility_AreCategoryAndModeValidForSharePlayCallSession(uint64_t a1)
{
  BOOL result = CMSMUtility_IsPlayAndRecordCategory(a1);
  if (result) {
    return FigCFEqual()
  }
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual() != 0;
  return result;
}

uint64_t CMSMUtility_InterruptAudioSessionIDForHandoff(uint64_t a1)
{
  if (a1)
  {
    id v1 = [+[MXSessionManager sharedInstance] copySessionWithAudioSessionID:a1];
    if (v1)
    {
      id v2 = v1;
      CMSMUtility_PostStopCommandToShadowingSessionsForSession(v1, 1u);
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSUtilityApplier_PostNotification_StopCommand(v2, 0);

      return 0;
    }
    else
    {
      CFStringRef v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294951615;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void *__IAPLibrary_block_invoke()
{
  BOOL result = dlopen("/System/Library/PrivateFrameworks/IAP.framework/IAP", 2);
  IAPLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initIAPAudioShouldPauseAudioOnHeadsetDisconnect(uint64_t a1)
{
  if (IAPLibrary_sOnce != -1) {
    dispatch_once(&IAPLibrary_sOnce, &__block_literal_global_431);
  }
  id v2 = (uint64_t (*)())dlsym((void *)IAPLibrary_sLib, "IAPAudioShouldPauseAudioOnHeadsetDisconnect");
  softLinkIAPAudioShouldPauseAudioOnHeadsetDisconnect = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initIAPAppProcessIDIsUsingAccessory(uint64_t a1)
{
  if (IAPLibrary_sOnce != -1) {
    dispatch_once(&IAPLibrary_sOnce, &__block_literal_global_431);
  }
  id v2 = (uint64_t (*)())dlsym((void *)IAPLibrary_sLib, "IAPAppProcessIDIsUsingAccessory");
  softLinkIAPAppProcessIDIsUsingAccessory = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void sub_194DE4360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DE448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DE45CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DE4788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DE48C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __mxsystemstatus_initialize_block_invoke()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!SystemStatusLibraryCore())
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    id result = (id)fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_16:
    char v7 = 0;
    goto LABEL_18;
  }
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  gSerializationQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.MXSystemStatus", v0);
  uint64_t v8 = 0;
  float v9 = &v8;
  uint64_t v10 = 0x3052000000;
  uint64_t v11 = __Block_byref_object_copy__5;
  uint64_t v12 = __Block_byref_object_dispose__5;
  id v1 = (objc_class *)getSTMediaStatusDomainPublisherClass_softClass;
  uint64_t v13 = getSTMediaStatusDomainPublisherClass_softClass;
  if (!getSTMediaStatusDomainPublisherClass_softClass)
  {
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    uint64_t v16 = __getSTMediaStatusDomainPublisherClass_block_invoke;
    uint64_t v17 = &unk_1E57C5B30;
    uint64_t v18 = &v8;
    __getSTMediaStatusDomainPublisherClass_block_invoke((uint64_t)&v14);
    id v1 = (objc_class *)v9[5];
  }
  _Block_object_dispose(&v8, 8);
  stMediaStatusDomainPublisher = (uint64_t)objc_alloc_init(v1);
  uint64_t v8 = 0;
  float v9 = &v8;
  uint64_t v10 = 0x3052000000;
  uint64_t v11 = __Block_byref_object_copy__5;
  uint64_t v12 = __Block_byref_object_dispose__5;
  id v2 = (objc_class *)getSTMutableMediaStatusDomainDataClass_softClass;
  uint64_t v13 = getSTMutableMediaStatusDomainDataClass_softClass;
  if (!getSTMutableMediaStatusDomainDataClass_softClass)
  {
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    uint64_t v16 = __getSTMutableMediaStatusDomainDataClass_block_invoke;
    uint64_t v17 = &unk_1E57C5B30;
    uint64_t v18 = &v8;
    __getSTMutableMediaStatusDomainDataClass_block_invoke((uint64_t)&v14);
    id v2 = (objc_class *)v9[5];
  }
  _Block_object_dispose(&v8, 8);
  stMutableMediaStatusDomainData = (uint64_t)objc_alloc_init(v2);
  sSystemStatusMutex = FigReentrantMutexCreate();
  sRecordingClientsInfo = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA80]);
  id result = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  sMutedRecordingClientsInfo = (uint64_t)result;
  if (!gSerializationQueue
    || !stMediaStatusDomainPublisher
    || !stMutableMediaStatusDomainData
    || !sSystemStatusMutex
    || !sRecordingClientsInfo
    || !result)
  {
    CFTypeRef v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    id result = (id)fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_16;
  }
  if (dword_1E9359ED0)
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    id result = (id)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  char v7 = 1;
LABEL_18:
  sIsSystemStatusInitialized = v7;
  return result;
}

void sub_194DE6694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SystemStatusLibraryCore()
{
  if (!SystemStatusLibraryCore_frameworkLibrary) {
    SystemStatusLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return SystemStatusLibraryCore_frameworkLibrary;
}

uint64_t __SystemStatusLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SystemStatusLibraryCore_frameworkLibrary = result;
  return result;
}

void __getSTMediaStatusDomainPublisherClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = objc_getClass("STMediaStatusDomainPublisher");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getSTMediaStatusDomainPublisherClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    __getSTMediaStatusDomainPublisherClass_block_invoke_cold_1();
    SystemStatusLibrary();
  }
}

void SystemStatusLibrary()
{
  if (!SystemStatusLibraryCore())
  {
    uint64_t v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getSTMutableMediaStatusDomainDataClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  Class result = objc_getClass("STMutableMediaStatusDomainData");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getSTMutableMediaStatusDomainDataClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    uint64_t v3 = __getSTMutableMediaStatusDomainDataClass_block_invoke_cold_1();
    return (Class)__getBSExecutablePathForAuditTokenSymbolLoc_block_invoke(v3);
  }
  return result;
}

void *__getBSExecutablePathForAuditTokenSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!BaseBoardLibraryCore_frameworkLibrary)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = __BaseBoardLibraryCore_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E57C9790;
    uint64_t v7 = 0;
    BaseBoardLibraryCore_frameworkLibrary = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    id v2 = (void *)BaseBoardLibraryCore_frameworkLibrary;
    if (BaseBoardLibraryCore_frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  id v2 = (void *)BaseBoardLibraryCore_frameworkLibrary;
LABEL_5:
  Class result = dlsym(v2, "BSExecutablePathForAuditToken");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBSExecutablePathForAuditTokenSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BaseBoardLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BaseBoardLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getSTAttributedEntityClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  Class result = objc_getClass("STAttributedEntity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getSTAttributedEntityClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    uint64_t v3 = __getSTAttributedEntityClass_block_invoke_cold_1();
    return (Class)__getSTExecutableIdentityClass_block_invoke(v3);
  }
  return result;
}

Class __getSTExecutableIdentityClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  Class result = objc_getClass("STExecutableIdentity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getSTExecutableIdentityClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    uint64_t v3 = __getSTExecutableIdentityClass_block_invoke_cold_1();
    return __getSTActivityAttributionClass_block_invoke(v3);
  }
  return result;
}

Class __getSTActivityAttributionClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  Class result = objc_getClass("STActivityAttribution");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getSTActivityAttributionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    uint64_t v3 = __getSTActivityAttributionClass_block_invoke_cold_1();
    return (Class)__getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke(v3);
  }
  return result;
}

Class __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke(uint64_t a1)
{
  SystemStatusLibrary();
  Class result = objc_getClass("STMediaStatusDomainMicrophoneRecordingAttribution");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getSTMediaStatusDomainMicrophoneRecordingAttributionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                + 8)
                                                                                    + 40);
  }
  else
  {
    uint64_t v3 = __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke_cold_1();
    return (Class)MXCoreAnimation_IsWirelessDisplayBeingUsedInSecondDisplayMode(v3);
  }
  return result;
}

uint64_t MXCoreAnimation_IsWirelessDisplayBeingUsedInSecondDisplayMode()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  obuint64_t j = (id)[MEMORY[0x1E4F39B60] displays];
  uint64_t result = [obj countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)v14;
    while (2)
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v14 != v2) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void **)(*((void *)&v13 + 1) + 8 * v3);
        uint64_t v5 = objc_msgSend(v4, "displayType", v9, v10);
        if (objc_msgSend((id)objc_msgSend(v4, "currentMode"), "width")) {
          BOOL v6 = objc_msgSend((id)objc_msgSend(v4, "currentMode"), "height") != 0;
        }
        else {
          BOOL v6 = 0;
        }
        if (dword_1E9359DC0)
        {
          BOOL v12 = v6;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          BOOL v6 = v12;
        }
        BOOL v8 = v5 == 2 && v6;
        if (v8 && ![v4 isCloning]) {
          return 1;
        }
        ++v3;
      }
      while (v1 != v3);
      uint64_t result = [obj countByEnumeratingWithState:&v13 objects:v17 count:16];
      uint64_t v1 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t CMSMAP_FindAirPlayPortForEndpoint(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  CFTypeRef v10 = 0;
  FigEndpointCopyFirstStreamOfType();
  uint64_t v2 = CMSMVAUtility_CopyConnectedWirelessPorts();
  uint64_t v3 = v2;
  if (v2 && (CFIndex Count = CFArrayGetCount(v2), Count >= 1))
  {
    CFIndex v5 = Count;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v11 = 0;
      FigCFArrayGetInt64AtIndex();
      uint64_t v1 = v11;
      CFTypeRef v7 = vaeCopyDeviceIdentifierFromVADPort(v11);
      if (FigCFEqual()) {
        break;
      }
      if (v7) {
        CFRelease(v7);
      }
      if (v5 == ++v6) {
        goto LABEL_11;
      }
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  else
  {
LABEL_11:
    uint64_t v1 = 0;
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v1;
}

uint64_t CMSMAP_MakeAirPlayHandOffPortRoutable(int a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFNumberRef v6 = CFNumberCreate(v4, kCFNumberSInt32Type, &dword_1E9359BB0);
  CFArrayAppendValue(Mutable, v6);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    memset(&v16[8], 0, 128);
    long long v15 = 0;
    *(void *)long long v16 = Mutable;
    uint64_t v8 = cmsmSetVADRouteConfiguration(&v12, 0, a2);
    CFTypeRef v10 = MXGetSerialQueue();
    MXDispatchAsync((uint64_t)"CMSMAP_StopRouteAwayFromAirPlayHandoffTimer", (uint64_t)"CMSessionManager_AirPlay.m", 258, 0, 0, v10, (uint64_t)&__block_literal_global_9);
LABEL_7:
    if (!Mutable) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  CMSMAP_StartRouteAwayFromAirPlayHandoffTimer(a2, 60.0);
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v16, 0, sizeof(v16));
  *(void *)&long long v14 = 0;
  *((void *)&v14 + 1) = Mutable;
  long long v15 = Mutable;
  uint64_t v8 = cmsmSetVADRouteConfiguration(&v12, 0, a2);
  if (!v8) {
    goto LABEL_7;
  }
  uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (Mutable) {
LABEL_8:
  }
    CFRelease(Mutable);
LABEL_9:
  if (v6) {
    CFRelease(v6);
  }
  return v8;
}

void CMSMAP_StartRouteAwayFromAirPlayHandoffTimer(uint64_t a1, float a2)
{
  if (qword_1E9359C58)
  {
    CFAllocatorRef v4 = MXGetSerialQueue();
    MXDispatchAsync((uint64_t)"CMSMAP_StopRouteAwayFromAirPlayHandoffTimer", (uint64_t)"CMSessionManager_AirPlay.m", 258, 0, 0, v4, (uint64_t)&__block_literal_global_9);
  }
  CFIndex v5 = MXGetSerialQueue();
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __CMSMAP_StartRouteAwayFromAirPlayHandoffTimer_block_invoke;
  v6[3] = &__block_descriptor_44_e5_v8__0l;
  v6[4] = a1;
  float v7 = a2;
  MXDispatchAsync((uint64_t)"CMSMAP_StartRouteAwayFromAirPlayHandoffTimer", (uint64_t)"CMSessionManager_AirPlay.m", 242, 0, 0, v5, (uint64_t)v6);
}

void CMSMAP_DisconnectAllAirPlaySessions(uint64_t a1)
{
  CFArrayRef v2 = cmsmCopyWirelessPortsArrayForRouteConfiguration((NSDictionary *)@"Audio/Video", @"Default", 0);
  cmsmUnpickWirelessRoutes(v2, 1, a1, qword_1E9359C88);
  if (v2)
  {
    CFRelease(v2);
  }
}

void CMSMAP_StartDisconnectAirPlayScreenTimer(float a1)
{
  if (qword_1E9359C50)
  {
    CFArrayRef v2 = MXGetSerialQueue();
    MXDispatchAsync((uint64_t)"CMSMAP_StopDisconnectAirPlayScreenTimer", (uint64_t)"CMSessionManager_AirPlay.m", 225, 0, 0, v2, (uint64_t)&__block_literal_global_5);
  }
  uint64_t v3 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __CMSMAP_StartDisconnectAirPlayScreenTimer_block_invoke;
  v4[3] = &__block_descriptor_36_e5_v8__0l;
  float v5 = a1;
  MXDispatchAsync((uint64_t)"CMSMAP_StartDisconnectAirPlayScreenTimer", (uint64_t)"CMSessionManager_AirPlay.m", 211, 0, 0, v3, (uint64_t)v4);
}

void CMSMAP_StopDisconnectAirPlayScreenTimer()
{
  uint64_t v0 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"CMSMAP_StopDisconnectAirPlayScreenTimer", (uint64_t)"CMSessionManager_AirPlay.m", 225, 0, 0, v0, (uint64_t)&__block_literal_global_5);
}

uint64_t cmsmap_DisconnectAirPlayScreenIfIdle()
{
  int IsPlayingToAirPlay = CMSMUtility_SomeClientIsPlayingToAirPlay();
  if (qword_1E9359C50)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1E9359C50);
    if (qword_1E9359C50)
    {
      dispatch_release((dispatch_object_t)qword_1E9359C50);
      qword_1E9359C50 = 0;
    }
  }
  CMScreenGetScreenState();
  uint64_t result = FigCFEqual();
  if (!result)
  {
    CMScreenGetScreenType();
    uint64_t result = FigCFEqual();
    if (result && IsPlayingToAirPlay == 0)
    {
      uint64_t result = CMSMDeviceState_ScreenIsBlanked();
      if (result)
      {
        if (MXCoreAnimation_IsWirelessDisplayBeingUsedInSecondDisplayMode())
        {
          if (dword_1E9359ED0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          float v5 = MXGetSerialQueue();
          uint64_t result = (uint64_t)FigRoutingManagerCreateOneShotTimer(v5, 60.0, (uint64_t)&__block_literal_global_11, 0, 0);
          qword_1E9359C50 = result;
        }
        else
        {
          if (dword_1E9359ED0)
          {
            CFAllocatorRef v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          int IsTestCodeEnabled = MXSystemMirroring_IsTestCodeEnabled();
          float v7 = [+[MXSessionManager sharedInstance] systemMirroringRoutingContextUUID];
          if (IsTestCodeEnabled) {
            return MXSystemMirroring_PickRouteDescriptor(v7, 0, 0, 0);
          }
          else {
            return FigRoutingManagerPickRouteDescriptorForContext(v7, 0, 0, 0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMSMAP_GetAirPlayDeviceVolume(uint64_t a1, uint64_t a2, float *a3)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID(a1, 1, *MEMORY[0x1E4F20638], a2);
  if (v4)
  {
    cf[0] = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    CFTypeRef v10 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (v10)
    {
      v10(CMBaseObject, *MEMORY[0x1E4F21080], *MEMORY[0x1E4F1CF80], cf);
      CFNumberRef v11 = (const __CFNumber *)cf[0];
    }
    else
    {
      CFNumberRef v11 = 0;
    }
    double ValueFloat32 = MXCFNumberGetValueFloat32(v11);
    float v9 = *(float *)&ValueFloat32;
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    if (v9 >= 0.0 && v9 <= 1.0)
    {
      if (!dword_1E9359ED0) {
        goto LABEL_18;
      }
    }
    else
    {
      float v9 = 0.3;
      if (!dword_1E9359ED0) {
        goto LABEL_18;
      }
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_18:
    uint64_t v8 = 1;
    if (!a3) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v8 = 0;
  float v9 = 1.0;
  if (a3) {
LABEL_19:
  }
    *a3 = v9;
LABEL_20:
  if (v4) {
    CFRelease(v4);
  }
  return v8;
}

uint64_t FigStarkModeControllerStartServer()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  uint64_t v0 = fig_note_initialize_category_with_default_work();
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(v0, v1))
  {
    uint64_t v2 = FigXPCServerStart();
    if (v2)
    {
      FigSignalErrorAt();
    }
    else if (dword_1E9359AF8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    CFAllocatorRef v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return v2;
}

uint64_t HandleStarkModeControllerMessage(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1997179E0]();
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v7 = OpCode;
  }
  else
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    cf[0] = 0;
    uint64_t v5 = FigXPCServerLookupAndRetainAssociatedObject();
    if (!v5) {
      uint64_t v5 = FigSignalErrorAt();
    }
    uint64_t v7 = v5;
    if (!v5) {
      uint64_t v7 = 4294951138;
    }
  }
  return v7;
}

uint64_t FigSTSServerStart()
{
  return FigXPCServerStart();
}

uint64_t stsServer_HandleMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

void FigRoutingManagerSetUpSystemRemoteDisplayContextWithEndpoint(uint64_t a1)
{
  uint64_t v2 = MXGetSerialQueue();
  dispatch_assert_queue_V2(v2);
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID((uint64_t)&cf);
  if (a1)
  {
    if (weakCentralEndpoint)
    {
      CFRelease((CFTypeRef)weakCentralEndpoint);
      weakCentralEndpoint = 0;
    }
    weakCentralEndpoint = FigCFWeakReferenceHolderCreateWithReferencedObject();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListeners();
  }
  else
  {
    uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v3)
    {
      CFAllocatorRef v4 = (const void *)v3;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      CFRelease(v4);
    }
    FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(cf, 0, @"configUpdateReasonEndedBottomUpRouteChange", 0);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void FigRoutingManagerNotifyClientsOfCarPlayActivation()
{
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID((uint64_t)&cf);
  uint64_t v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(cf, v0, @"configUpdateReasonEndedBottomUpRouteChange", 0);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v0) {
    CFRelease(v0);
  }
}

void FigRoutingManagerSetupEndpointCentralForCarPlay(const void *a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)MEMORY[0x1E4F1CF80];
  if (a1)
  {
    cf[0] = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v5 + 48);
    if (v7) {
      v7(CMBaseObject, *MEMORY[0x1E4F21040], *v2, cf);
    }
    BOOL v6 = FigCFEqual() != 0;
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  CFTypeRef v16 = 0;
  if (CMSessionCreate((uint64_t *)&v16) || !v16)
  {
    int v15 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (v16) {
      CFRelease(v16);
    }
    CFTypeRef v10 = 0;
  }
  else
  {
    _CMSessionSetProperty(v16, @"ClientName", @"CarSession");
    uint64_t v8 = v16;
    uint64_t v9 = [MEMORY[0x1E4F28ED0] numberWithInt:getpid()];
    _CMSessionSetProperty(v8, @"ClientPID", v9);
    _CMSessionSetProperty(v16, @"AudioCategory", @"MediaPlayback");
    _CMSessionSetProperty(v16, @"IAmCar", [MEMORY[0x1E4F28ED0] numberWithBool:1]);
    _CMSessionSetProperty(v16, @"IAmWiredCar", [MEMORY[0x1E4F28ED0] numberWithBool:v6]);
    _CMSessionSetProperty(v16, @"AudioHardwareControlFlags", [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:0]);
    CFTypeRef v10 = v16;
  }
  cf[0] = 0;
  FigEndpointCreateCentral(*v2, a1, v10, cf);
  _CMSessionSetProperty(v10, @"CarFigEndpointCentralObject", (uint64_t)cf[0]);
  FigEndpointServerSetActiveEndpoint();
  if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled()) {
    FigRoutingManagerSetUpSystemRemoteDisplayContextWithEndpoint((uint64_t)cf[0]);
  }
  long long v12 = MXGetNotificationSenderQueue();
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __FigRoutingManagerSetupEndpointCentralForCarPlay_block_invoke;
  v13[3] = &__block_descriptor_40_e5_v8__0l;
  v13[4] = v10;
  MXDispatchAsync((uint64_t)"FigRoutingManagerSetupEndpointCentralForCarPlay", (uint64_t)"FigRoutingManager_iOSCarPlay.m", 171, 0, 0, v12, (uint64_t)v13);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

void __FigRoutingManagerSetupEndpointCentralForCarPlay_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t FigRoutingManagerSendCarPlayDuckCommand(const void *a1, uint64_t a2)
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294954296;
  }
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  if (!cf) {
    return 4294954296;
  }
  uint64_t v18 = 0;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)cf, &v18);
  if (v18 != a1)
  {
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyActivatedEndpoints((uint64_t)cf, (uint64_t)theArray);
    if (!theArray[0]) {
      goto LABEL_22;
    }
    CFIndex Count = CFArrayGetCount(theArray[0]);
    if (Count < 1)
    {
      BOOL v9 = 0;
    }
    else
    {
      CFIndex v5 = Count;
      if (CFArrayGetValueAtIndex(theArray[0], 0) == a1)
      {
        BOOL v9 = 1;
      }
      else
      {
        CFIndex v6 = 1;
        do
        {
          CFIndex v7 = v6;
          if (v5 == v6) {
            break;
          }
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], v6);
          CFIndex v6 = v7 + 1;
        }
        while (ValueAtIndex != a1);
        BOOL v9 = v7 < v5;
      }
    }
    if (theArray[0])
    {
      CFRelease(theArray[0]);
      if (!v9) {
        goto LABEL_22;
      }
    }
    else if (!v9)
    {
      goto LABEL_22;
    }
  }
  FigEndpointExtendedGetClassID();
  if (CMBaseObjectIsMemberOfClass())
  {
    CFTypeRef v11 = CFRetain(a1);
    if (v11)
    {
      long long v12 = v11;
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 24);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      int v15 = *(uint64_t (**)(const void *, uint64_t))(v14 + 48);
      if (v15) {
        uint64_t v10 = v15(v12, a2);
      }
      else {
        uint64_t v10 = 4294954514;
      }
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRelease(v12);
      goto LABEL_30;
    }
  }
LABEL_22:
  uint64_t v10 = 4294954296;
LABEL_30:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t FigRoutingManagerCopyCarBluetoothIDs(uint64_t a1)
{
  CFArrayRef theArray = 0;
  uint64_t v17 = 0;
  FigRoutingManagerContextUtilities_CopyActivatedEndpoints(a1, (uint64_t)&theArray);
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      CFIndex v4 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)) {
          break;
        }
        if (v3 == ++v4) {
          goto LABEL_12;
        }
      }
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      BOOL v9 = *(void (**)(uint64_t, void, void, uint64_t *))(v8 + 48);
      if (v9) {
        v9(CMBaseObject, *MEMORY[0x1E4F20D20], *MEMORY[0x1E4F1CF80], &v17);
      }
    }
LABEL_12:
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
  }
  uint64_t result = v17;
  if (!v17)
  {
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint(a1, &cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
    {
      uint64_t v11 = FigEndpointGetCMBaseObject();
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v13 = v12 ? v12 : 0;
      uint64_t v14 = *(void (**)(uint64_t, void, void, uint64_t *))(v13 + 48);
      if (v14) {
        v14(v11, *MEMORY[0x1E4F20D20], *MEMORY[0x1E4F1CF80], &v17);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    return v17;
  }
  return result;
}

void FigRoutingManagerSendCarPlayDisableBluetoothCommand()
{
  uint64_t v0 = (const void *)MGCopyAnswer();
  uint64_t v1 = v0;
  if (v0) {
    CFRetain(v0);
  }
  uint64_t v2 = *((void *)FigRoutingManagerGetSharedManager() + 1);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __FigRoutingManagerSendCarPlayDisableBluetoothCommand_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = v1;
  MXDispatchAsync((uint64_t)"FigRoutingManagerSendCarPlayDisableBluetoothCommand", (uint64_t)"FigRoutingManager_iOSCarPlay.m", 299, 0, 0, v2, (uint64_t)v3);
  if (v1) {
    CFRelease(v1);
  }
}

void __FigRoutingManagerSendCarPlayDisableBluetoothCommand_block_invoke(uint64_t a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v16 = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v16);
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyActivatedEndpoints((uint64_t)v16, (uint64_t)&theArray);
  if (!theArray) {
    goto LABEL_13;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    goto LABEL_9;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)) {
      break;
    }
    if (v3 == ++v4) {
      goto LABEL_9;
    }
  }
  if (ValueAtIndex) {
    CFTypeRef v6 = CFRetain(ValueAtIndex);
  }
  else {
LABEL_9:
  }
    CFTypeRef v6 = 0;
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (!v6)
  {
LABEL_13:
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)v16, cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf[0]))
    {
      if (!cf[0]) {
        goto LABEL_25;
      }
      CFTypeRef v6 = CFRetain(cf[0]);
    }
    else
    {
      CFTypeRef v6 = 0;
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!v6) {
      goto LABEL_25;
    }
  }
  FigEndpointExtendedGetClassID();
  if (CMBaseObjectIsMemberOfClass())
  {
    CFTypeRef v7 = CFRetain(v6);
    CFRelease(v6);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 24);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v12 = *(void (**)(CFTypeRef, uint64_t, void))(v10 + 40);
      if (v12) {
        v12(v7, v8, 0);
      }
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRelease(v7);
      goto LABEL_33;
    }
  }
  else
  {
    CFRelease(v6);
  }
LABEL_25:
  if (dword_1E9359DC0)
  {
    uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_33:
  uint64_t v14 = *(const void **)(a1 + 32);
  if (v14) {
    CFRelease(v14);
  }
  if (v16) {
    CFRelease(v16);
  }
}

NSObject *FigRoutingManagerStartCarPlayAudioMainPortPublishingCheckTimer(void *cf, uint64_t a2, float a3)
{
  if (cf) {
    CFRetain(cf);
  }
  SharedManager = FigRoutingManagerGetSharedManager();
  CFTypeRef v7 = *((void *)SharedManager + 4);
  if (v7)
  {
    dispatch_source_cancel(v7);
    uint64_t v8 = *((void *)SharedManager + 4);
    if (v8)
    {
      dispatch_release(v8);
      *((void *)SharedManager + 4) = 0;
    }
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __FigRoutingManagerStartCarPlayAudioMainPortPublishingCheckTimer_block_invoke;
  v11[3] = &__block_descriptor_48_e5_v8__0l;
  v11[4] = cf;
  v11[5] = a2;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingManagerStartCarPlayAudioMainPortPublishingCheckTimer_block_invoke_2;
  v10[3] = &__block_descriptor_40_e5_v8__0l;
  v10[4] = cf;
  uint64_t result = FigRoutingManagerCreateOneShotTimer(*((NSObject **)SharedManager + 1), a3, (uint64_t)v11, cf, (uint64_t)v10);
  *((void *)SharedManager + 4) = result;
  return result;
}

void __FigRoutingManagerStartCarPlayAudioMainPortPublishingCheckTimer_block_invoke(uint64_t a1)
{
  CFTypeRef v11 = 0;
  CFTypeRef cf = 0;
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFTypeRef v6 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v5 + 48);
    if (v6) {
      v6(CMBaseObject, *MEMORY[0x1E4F20E38], v2, &cf);
    }
    uint64_t v7 = FigEndpointGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
    if (v10) {
      v10(v7, *MEMORY[0x1E4F20F28], v2, &v11);
    }
    FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo(*(void *)(a1 + 40), *(void *)(a1 + 32), @"configUpdateReasonEndedSuccess");
    FigRoutingManagerPostProcessPickEndpoint(*(const void **)(a1 + 32), *(void *)(a1 + 40));
    FigRoutingManagerContextUtilities_SetPickingState(*(void *)(a1 + 40), 0);
    if (cf) {
      CFRelease(cf);
    }
    if (v11) {
      CFRelease(v11);
    }
  }
}

void __FigRoutingManagerStartCarPlayAudioMainPortPublishingCheckTimer_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

void FigRoutingManagerStopCarPlayAudioMainPortPublishedCheckTimer()
{
  SharedManager = FigRoutingManagerGetSharedManager();
  uint64_t v1 = *((void *)SharedManager + 4);
  if (v1)
  {
    dispatch_source_cancel(v1);
    uint64_t v2 = *((void *)SharedManager + 4);
    if (v2)
    {
      dispatch_release(v2);
      *((void *)SharedManager + 4) = 0;
    }
  }
}

uint64_t FigRoutingManagerFindCarPlayMainAudioPortForEndpoint(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef theArray = 0;
  CFTypeRef v14 = 0;
  FigEndpointCopyStreamsForTypeAndSubType();
  CFArrayRef v2 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(0, 0, 0, 0);
  CFArrayRef v3 = v2;
  if (v2 && (CFIndex Count = CFArrayGetCount(v2), Count >= 1))
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    while (1)
    {
      LODWORD(cf) = 0;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v3, v6);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &cf);
      CFTypeRef v8 = vaeCopyDeviceIdentifierFromVADPort((AudioObjectID)cf);
      int PortTypeFromPortID = vaeGetPortTypeFromPortID(cf);
      if (FigCFEqual() && PortTypeFromPortID == 1886614639) {
        break;
      }
      if (v8) {
        CFRelease(v8);
      }
      if (v5 == ++v6) {
        goto LABEL_14;
      }
    }
    uint64_t v1 = cf;
    if (v8) {
      CFRelease(v8);
    }
  }
  else
  {
LABEL_14:
    uint64_t v1 = 0;
  }
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v1;
}

void FigRoutingManagerProcessCarPlayEndpointDeactivation(int a1)
{
  id v2 = CMSMUtility_CopyCarPlaySession();
  CFArrayRef v3 = v2;
  if (v2)
  {
    MXCoreSessionSetProperty((int)v2, @"CarFigEndpointCentralObject");
    MXCoreSessionSetProperty((int)v3, @"IAmCar");
    CMSMNotificationUtility_PostCarPlayAuxStreamSupportDidChange(0);
    CMSMNotificationUtility_PostCarPlayIsConnectedDidChange(0);
  }

  if (a1)
  {
    if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled()) {
      FigRoutingManagerSetUpSystemRemoteDisplayContextWithEndpoint(0);
    }
    FigEndpointServerSetActiveEndpoint();
  }
}

uint64_t FigRoutingManagerFigEndpointCentralCallback()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void MX_FrontBoardServices_Initialize()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  gFrontboardServicesLib = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 4);
  if (gFrontboardServicesLib)
  {
    gFBSDisplayLayoutMonitorClass = (uint64_t)objc_getClass("FBSDisplayLayoutMonitor");
    if (gFBSDisplayLayoutMonitorClass)
    {
      gFBSDisplayLayoutMonitorConfigurationClass = (uint64_t)objc_getClass("FBSDisplayLayoutMonitorConfiguration");
      if (gFBSDisplayLayoutMonitorConfigurationClass)
      {
        if (MX_FrontBoardServices_Initialize_once_token != -1) {
          dispatch_once(&MX_FrontBoardServices_Initialize_once_token, &__block_literal_global_27);
        }
      }
    }
  }
}

__CFDictionary *CMSMPowerLogCreatePowerLogDataForAppleTV(const void *a1, int a2, const void *a3, const void *a4)
{
  int valuePtr = a2;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!a2)
  {
    CFNumberRef v10 = 0;
LABEL_6:
    char v11 = 1;
    if (!a3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  CFNumberRef v10 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
  if (!v10) {
    goto LABEL_6;
  }
  CFDictionarySetValue(Mutable, @"AssertionID", v10);
  char v11 = 0;
  if (a3) {
LABEL_7:
  }
    CFDictionarySetValue(Mutable, @"AssertionName", a3);
LABEL_8:
  if (a4) {
    CFDictionarySetValue(Mutable, @"CreationTime", a4);
  }
  if (a1) {
    CFDictionarySetValue(Mutable, @"Operation", a1);
  }
  if ((v11 & 1) == 0) {
    CFRelease(v10);
  }
  return Mutable;
}

__CFDictionary *CMSMPowerLogCreatePowerLogDataForStarkWiFi(const void *a1, int a2, const void *a3, const void *a4)
{
  int valuePtr = a2;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!a2)
  {
    CFNumberRef v10 = 0;
LABEL_6:
    char v11 = 1;
    if (!a3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  CFNumberRef v10 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
  if (!v10) {
    goto LABEL_6;
  }
  CFDictionarySetValue(Mutable, @"AssertionID", v10);
  char v11 = 0;
  if (a3) {
LABEL_7:
  }
    CFDictionarySetValue(Mutable, @"AssertionName", a3);
LABEL_8:
  if (a4) {
    CFDictionarySetValue(Mutable, @"CreationTime", a4);
  }
  if (a1) {
    CFDictionarySetValue(Mutable, @"Operation", a1);
  }
  id v12 = CMSMUtility_CopyCarPlaySession();
  uint64_t v13 = v12;
  if (v12)
  {
    if ([v12 clientPID])
    {
      int v16 = objc_msgSend((id)objc_msgSend(v13, "clientPID"), "intValue");
      CFNumberRef v14 = CFNumberCreate(v8, kCFNumberSInt32Type, &v16);
      FigCFDictionarySetValue();
      if (v14) {
        CFRelease(v14);
      }
    }
    CFDictionarySetValue(Mutable, @"ApplicationName", @"CarCMSession");
  }

  if ((v11 & 1) == 0) {
    CFRelease(v10);
  }
  return Mutable;
}

__CFDictionary *CMSMPowerLogCreatePowerLogDataForSession(void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if ([a1 idleSleepPreventor])
  {
    int valuePtr = [a1 idleSleepPreventor];
    CFNumberRef v4 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
    if (v4)
    {
      CFDictionarySetValue(Mutable, @"AssertionID", v4);
      char v5 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    CFNumberRef v4 = 0;
  }
  char v5 = 1;
LABEL_6:
  if ([a1 idleSleepPreventorName]) {
    CFDictionarySetValue(Mutable, @"AssertionName", (const void *)[a1 idleSleepPreventorName]);
  }
  if ([a1 idleSleepPreventorCreationTime]) {
    CFDictionarySetValue(Mutable, @"CreationTime", (const void *)[a1 idleSleepPreventorCreationTime]);
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if (![a1 isPlayingStartTime]) {
      goto LABEL_15;
    }
    CFIndex v6 = @"PlaybackStartTime";
    uint64_t v7 = (const void *)[a1 isPlayingStartTime];
  }
  else
  {
    if (!FigCFEqual() || ![a1 isPlayingStopTime]) {
      goto LABEL_15;
    }
    CFIndex v6 = @"PlaybackStopTime";
    uint64_t v7 = (const void *)[a1 isPlayingStopTime];
  }
  CFDictionarySetValue(Mutable, v6, v7);
LABEL_15:
  if (FigCFEqual() || FigCFEqual())
  {
    CFAllocatorRef v8 = MX_RunningBoardServices_CopyAssertionReasonsStringForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
    StringForApplicationState = (const void *)CMSMUtility_GetStringForApplicationState([a1 applicationState]);
    CFDictionarySetValue(Mutable, @"ApplicationState", StringForApplicationState);
    CFDictionarySetValue(Mutable, @"AssertionReasonString", v8);
    if (v8) {
      CFRelease(v8);
    }
  }
  if (objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"))
  {
    int v13 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
    CFNumberRef v10 = CFNumberCreate(v2, kCFNumberSInt32Type, &v13);
  }
  else
  {
    CFNumberRef v10 = 0;
  }
  id v11 = CMSUtility_CopyCurrentRouteTypeAtIndex(a1, 0);
  if (([a1 isCarSession] & 1) == 0) {
    [a1 displayID];
  }
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  cmsmpowerlogConvertToExternalRouteNameForPowerLog((uint64_t)v11);
  FigCFDictionarySetValue();
  if (v10) {
    CFRelease(v10);
  }
  if ((v5 & 1) == 0) {
    CFRelease(v4);
  }
  if (v11) {
    CFRelease(v11);
  }
  return Mutable;
}

__CFString *cmsmpowerlogConvertToExternalRouteNameForPowerLog(uint64_t a1)
{
  if (!a1) {
    return @"None";
  }
  uint64_t v1 = a1;
  if (FigCFEqual() || FigCFEqual()) {
    return @"AirPlay";
  }
  return (__CFString *)v1;
}

void CMSMPowerLogPostPowerLogDataForRouteChange()
{
  id v0 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"CMSMPowerLogPostPowerLogDataForRouteChange", (uint64_t)"CMSessionManager_PowerLog.m", 269, 0, 0, v0, (uint64_t)&__block_literal_global_28);
}

void __CMSMPowerLogPostPowerLogDataForRouteChange_block_invoke()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    int v3 = 0;
    uint64_t v4 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v14 != v4) {
          objc_enumerationMutation(v0);
        }
        CFIndex v6 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if ([v6 isPlaying])
        {
          PowerLogDataForSession = CMSMPowerLogCreatePowerLogDataForSession(v6);
          if (PowerLogDataForSession)
          {
            CFAllocatorRef v8 = PowerLogDataForSession;
            CMSMPowerLogPostPowerLogData(@"CoreMedia_AudioPlayback", PowerLogDataForSession);
            CFRelease(v8);
          }
          int v3 = 1;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v2);
  }
  else
  {
    int v3 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (!v3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFNumberRef v10 = Mutable;
      uint64_t CurrentRouteTypeAtIndex = CMSMUtility_GetCurrentRouteTypeAtIndex(0);
      id v12 = cmsmpowerlogConvertToExternalRouteNameForPowerLog(CurrentRouteTypeAtIndex);
      CFDictionarySetValue(v10, @"AudioRoute", v12);
      CFDictionarySetValue(v10, @"Operation", @"AudioPlayback_RouteChange");
      CMSMPowerLogPostPowerLogData(@"CoreMedia_AudioPlayback", v10);
      CFRelease(v10);
    }
  }
}

void CMSMPowerLogPostScreenMirroringPowerLogs(const void *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int v3 = Mutable;
    CFDictionarySetValue(Mutable, @"MirroringState", a1);
    CMSMPowerLogPostPowerLogData(@"CoreMedia_ScreenMirroring", v3);
    CFRelease(v3);
  }
}

uint64_t MX_MediaServicesUtilitiesResetMediaServices(int a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1997179E0]();
  int v3 = (void *)[MEMORY[0x1E4F1CA80] set];
  uint64_t v4 = v3;
  if (a1)
  {
    [v3 addObject:@"audiomxd"];
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  [v4 addObject:@"mediaplaybackd"];
  [v4 addObject:@"mediaparserd"];
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_13:
  [v4 addObject:@"cameracaptured"];
  if ((a1 & 8) != 0)
  {
LABEL_5:
    [v4 addObject:@"videocodecd"];
    [v4 addObject:@"AudioConverterService"];
  }
LABEL_6:
  if (a1 == 0xFFFF)
  {
    [v4 addObject:@"airplayd"];
    [v4 addObject:@"cvhwad"];
  }
  if ([v4 count])
  {
    long long v15 = v2;
    if (dword_1E9359ED0)
    {
      int v21 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v22, 16, v13, v14);
    if (v7)
    {
      uint64_t v8 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v17 != v8) {
            objc_enumerationMutation(v4);
          }
          uint64_t v10 = *(void *)(*((void *)&v16 + 1) + 8 * i);
          uint64_t v24 = 0;
          long long v25 = &v24;
          uint64_t v26 = 0x2020000000;
          id v11 = (void (*)(uint64_t, void, __CFString *))getSFTerminateProcessNamedSymbolLoc_ptr;
          long long v27 = getSFTerminateProcessNamedSymbolLoc_ptr;
          if (!getSFTerminateProcessNamedSymbolLoc_ptr)
          {
            v23[0] = MEMORY[0x1E4F143A8];
            v23[1] = 3221225472;
            v23[2] = __getSFTerminateProcessNamedSymbolLoc_block_invoke;
            v23[3] = &unk_1E57C5B30;
            v23[4] = &v24;
            __getSFTerminateProcessNamedSymbolLoc_block_invoke((uint64_t)v23);
            id v11 = (void (*)(uint64_t, void, __CFString *))v25[3];
          }
          _Block_object_dispose(&v24, 8);
          if (!v11)
          {
            __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
            __break(1u);
          }
          v11(v10, 0, @"Resetting media services");
        }
        uint64_t v7 = [v4 countByEnumeratingWithState:&v16 objects:v22 count:16];
      }
      while (v7);
    }
    uint64_t v6 = 0;
    uint64_t v2 = v15;
  }
  else
  {
    uint64_t v6 = 4294954315;
  }
  return v6;
}

void sub_194DECFCC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void *__getSFTerminateProcessNamedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!SettingsFoundationLibraryCore_frameworkLibrary)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = __SettingsFoundationLibraryCore_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E57C9A48;
    uint64_t v7 = 0;
    SettingsFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
    int v3 = (void *)v5[0];
    uint64_t v2 = (void *)SettingsFoundationLibraryCore_frameworkLibrary;
    if (SettingsFoundationLibraryCore_frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      int v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)SettingsFoundationLibraryCore_frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "SFTerminateProcessNamed");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSFTerminateProcessNamedSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SettingsFoundationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SettingsFoundationLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t FigSTSCreateRemote(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (a2 && a4)
  {
    if (remoteSTS_EnsureClientEstablished_onceToken != -1) {
      dispatch_once(&remoteSTS_EnsureClientEstablished_onceToken, &__block_literal_global_29);
    }
    uint64_t v6 = remoteSTS_EnsureClientEstablished_err;
    if (!remoteSTS_EnsureClientEstablished_err)
    {
      FigSTSGetClassID();
      uint64_t v7 = CMDerivedObjectCreate();
      if (v7
        || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
            *(void *)(DerivedStorage + 8) = CFRetain(a2),
            uint64_t v7 = FigXPCCreateBasicMessage(),
            v7)
        || (uint64_t v7 = FigXPCMessageSetCFObject(), v7)
        || (uint64_t v7 = FigXPCMessageSetCFDictionary(), v7)
        || (uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v7))
      {
        uint64_t v6 = v7;
      }
      else
      {
        uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
        *(void *)CMBaseObjectGetDerivedStorage() = uint64;
        uint64_t v6 = FigXPCRemoteClientAssociateObject();
        if (!v6) {
          *a4 = 0;
        }
      }
    }
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRelease();
  if (gSTSRemoteClient) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v6;
}

uint64_t remoteSTS_DeadConnectionCallback()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 16) = 1;
  return result;
}

uint64_t remoteSTS_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    FigXPCRemoteClientDisassociateObject();
    if (!*(unsigned char *)(DerivedStorage + 16) && !FigXPCCreateBasicMessage()) {
      FigXPCRemoteClientSendSyncMessage();
    }
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  return FigXPCRelease();
}

__CFString *remoteSTS_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  uint64_t v5 = *(void *)(DerivedStorage + 8);
  CFIndex v6 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 16)) {
    uint64_t v7 = " SERVER DIED";
  }
  else {
    uint64_t v7 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigSTSRemote %p (%@) RC: %ld ObjectID: %016llx%s>", a1, v5, v6, *(void *)DerivedStorage, v7);
  return Mutable;
}

uint64_t remoteSTS_CopyProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (a2)
  {
    uint64_t ObjectID = remoteSTS_GetObjectID(a1, &v5);
    if (!ObjectID) {
      uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
    }
  }
  else
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v3 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSTS_SetProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (a2)
  {
    uint64_t ObjectID = remoteSTS_GetObjectID(a1, &v5);
    if (!ObjectID) {
      uint64_t ObjectID = FigXPCSendStdSetPropertyMessage();
    }
  }
  else
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v3 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSTS_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t remoteSTS_SetActive(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t ObjectID = remoteSTS_GetObjectID(a1, &v7);
  if (ObjectID)
  {
LABEL_8:
    uint64_t v5 = ObjectID;
    goto LABEL_6;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (!v5)
  {
    uint64_t v5 = FigXPCMessageSetCFString();
    if (!v5)
    {
      xpc_dictionary_set_BOOL(0, kFigSTSXPCMsgParam_ActiveState[0], a3 != 0);
      uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
    }
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteSTS_GetActive(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v7 = 0;
  if (!a2 || !a3)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_10:
    uint64_t v5 = ObjectID;
    goto LABEL_8;
  }
  uint64_t ObjectID = remoteSTS_GetObjectID(a1, &v7);
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v5) {
    *a3 = xpc_dictionary_get_BOOL(0, kFigSTSXPCMsgParam_ActiveState[0]);
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteSTS_SetPropertyByLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a2 || !a3)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_12;
  }
  uint64_t ObjectID = remoteSTS_GetObjectID(a1, &v7);
  if (ObjectID)
  {
LABEL_12:
    uint64_t v5 = ObjectID;
    goto LABEL_9;
  }
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4
    || (uint64_t v4 = FigXPCMessageSetCFString(), v4)
    || (uint64_t v4 = FigXPCMessageSetCFString(), v4)
    || (uint64_t v4 = FigXPCMessageSetCFObject(), v4))
  {
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteSTS_CopyPropertyByLabel(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = 0;
  if (!a2 || !a3 || !a4)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_13:
    uint64_t v6 = ObjectID;
    goto LABEL_11;
  }
  uint64_t ObjectID = remoteSTS_GetObjectID(a1, &v8);
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t v6 = FigXPCMessageCopyCFObject();
  if (!v6) {
    *a4 = 0;
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteSTS_CopyShmem(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = 0;
  if (!a2 || !a3) {
    goto LABEL_10;
  }
  uint64_t ObjectID = remoteSTS_GetObjectID(a1, &v7);
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_11;
  }
  if (!xpc_dictionary_get_value(0, kFigSTSXPCMsgParam_ShmemObject[0]))
  {
LABEL_10:
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_11:
    uint64_t v5 = ObjectID;
    goto LABEL_9;
  }
  uint64_t v5 = 0;
  *a3 = FigXPCRetain();
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

CFTypeRef FigPredictedRouting_CopySelectedRouteDescriptor(uint64_t a1)
{
  int IsContextSystemMusicAndIndependent = FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(a1);
  int IsSupported = FigPredictedRouting_IsSupported(a1, 0);
  CFTypeRef v4 = 0;
  if (IsSupported && !IsContextSystemMusicAndIndependent)
  {
    MEMORY[0x199716E90](gPRS_0);
    if (gPRS_1) {
      CFTypeRef v4 = CFRetain((CFTypeRef)gPRS_1);
    }
    else {
      CFTypeRef v4 = 0;
    }
    MEMORY[0x199716EA0](gPRS_0);
  }
  return v4;
}

void FigPredictedRouting_ResetSelectedRouteDescriptor(uint64_t a1, int a2)
{
  if (FigPredictedRouting_IsSupported(a1, 0))
  {
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a2 == 6) {
      int v4 = 10;
    }
    else {
      int v4 = 8;
    }
    if (a2 == 1) {
      int v5 = 9;
    }
    else {
      int v5 = v4;
    }
    predictedRouting_UpdatePredictedRoute(v5, 0);
  }
}

void FigPredictedRouting_UpdatePredictedRouteForCurrentRouteChanged(int a1)
{
}

uint64_t FigPredictedRouting_StartTimer(float a1)
{
  if (predictedRouting_initialize_onceToken != -1) {
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_4_0);
  }
  MEMORY[0x199716E90](gPRS_0);
  if (gPRS_2) {
    FigPredictedRouting_StopTimer();
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  SharedQueue = FigRoutingManagerGetSharedQueue();
  gPRS_2 = (uint64_t)FigRoutingManagerCreateOneShotTimer(SharedQueue, a1, (uint64_t)&__block_literal_global_30, 0, 0);
  return MEMORY[0x199716EA0](gPRS_0);
}

uint64_t FigPredictedRouting_StopTimer()
{
  if (predictedRouting_initialize_onceToken != -1) {
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_4_0);
  }
  MEMORY[0x199716E90](gPRS_0);
  id v0 = gPRS_2;
  if (gPRS_2)
  {
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      id v0 = gPRS_2;
    }
    dispatch_source_cancel(v0);
    if (gPRS_2)
    {
      dispatch_release((dispatch_object_t)gPRS_2);
      gPRS_2 = 0;
    }
  }
  return MEMORY[0x199716EA0](gPRS_0);
}

uint64_t FigPredictedRouting_IsPreemptivePortChangedTimerActive()
{
  if (!FigPredictedRouting_IsPreemptivePortLogicEnabled()) {
    return 0;
  }
  MEMORY[0x199716E90](gPRS_0);
  if (gPRS_4)
  {
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t v1 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      uint64_t v1 = 1;
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  MEMORY[0x199716EA0](gPRS_0);
  return v1;
}

uint64_t FigPredictedRouting_StartPreemptivePortChangedTimer()
{
  uint64_t result = FigPredictedRouting_IsPreemptivePortLogicEnabled();
  if (result)
  {
    MEMORY[0x199716E90](gPRS_0);
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v2 = MXGetSerialQueue();
    gPRS_4 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v2, 4.0, (uint64_t)&__block_literal_global_2_1, 0, 0);
    return MEMORY[0x199716EA0](gPRS_0);
  }
  return result;
}

uint64_t FigPredictedRouting_StopPreemptivePortChangedTimer(int a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t result = FigPredictedRouting_IsPreemptivePortLogicEnabled();
  if (result)
  {
    MEMORY[0x199716E90](gPRS_0);
    FigPredictedRouting_SetPreemptivePortChanged(0);
    uint64_t v3 = gPRS_4;
    if (gPRS_4)
    {
      int v4 = (const void *)gPRS_1;
      if (gPRS_1)
      {
        if (!dword_1E9359DC0
          || (os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type(),
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT),
              fig_log_call_emit_and_clean_up_after_send_and_compose(),
              (int v4 = (const void *)gPRS_1) != 0))
        {
          CFRelease(v4);
          gPRS_1 = 0;
        }
        cf[0] = 0;
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
        FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], @"predictedSelectedRouteDescriptorChanged", 0);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        uint64_t v3 = gPRS_4;
      }
      dispatch_source_cancel(v3);
      if (gPRS_4)
      {
        dispatch_release((dispatch_object_t)gPRS_4);
        gPRS_4 = 0;
      }
    }
    uint64_t result = MEMORY[0x199716EA0](gPRS_0);
    if (dword_1E9359DC0)
    {
      uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1)
    {
      uint64_t v7 = +[MXSessionManager sharedInstance];
      return [(MXSessionManager *)v7 unduckSessionsForDuckingSource:gPRS_3];
    }
  }
  return result;
}

uint64_t FigPredictedRouting_SetPreemptivePortChanged(int a1)
{
  uint64_t result = FigPredictedRouting_IsPreemptivePortLogicEnabled();
  if (result)
  {
    MEMORY[0x199716E90](gPRS_0);
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    gPRS_5 = a1 != 0;
    return MEMORY[0x199716EA0](gPRS_0);
  }
  return result;
}

uint64_t FigPredictedRouting_MuteSessionIfPreemptivePortChanged(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t result = FigPredictedRouting_IsPreemptivePortLogicEnabled();
  if (result)
  {
    uint64_t result = FigPredictedRouting_IsPreemptivePortChanged();
    if (result)
    {
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      [+[MXSessionManager sharedInstance] startAsyncDuckingOperation];
      int v4 = +[MXSessionManager sharedInstance];
      [(MXSessionManager *)v4 duckVolume:a1 duckerSession:0 duckingSource:gPRS_3];
      [+[MXSessionManager sharedInstance] endAsyncDuckingOperation];
      uint64_t result = FigPredictedRouting_IsPreemptivePortChangedTimerActive();
      if (!result) {
        return FigPredictedRouting_StartPreemptivePortChangedTimer();
      }
    }
  }
  return result;
}

uint64_t FigPredictedRouting_UnmuteSessionIfMutedByPreemptivePortChange()
{
  uint64_t result = FigPredictedRouting_IsPreemptivePortLogicEnabled();
  if (result)
  {
    uint64_t v1 = +[MXSessionManager sharedInstance];
    uint64_t v2 = gPRS_3;
    return [(MXSessionManager *)v1 unduckSessionsForDuckingSource:v2];
  }
  return result;
}

uint64_t __predictedRouting_initialize_block_invoke()
{
  gPRS_0 = FigReentrantMutexCreate();
  id v0 = [MXDuckingSource alloc];
  LODWORD(v1) = 1036831949;
  uint64_t result = [(MXDuckingSource *)v0 initWithType:4 ID:0 duckVolume:0.0 duckFadeDuration:v1];
  gPRS_3 = result;
  return result;
}

uint64_t FigEndpointAuthRequestHandler_AddRequest(uint64_t a1)
{
  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1) {
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_31);
  }
  uint64_t v2 = qword_1E93582F0;
  if (qword_1E93582F0) {
    uint64_t v3 = (uint64_t)&qword_1E93582F0;
  }
  else {
    uint64_t v3 = 8;
  }
  MEMORY[0x199716EE0](*(void *)v3);
  int v4 = (char *)malloc_type_malloc(0x38uLL, 0xE004067E18789uLL);
  CFTypeRef v5 = *(CFTypeRef *)a1;
  if (*(void *)a1) {
    CFTypeRef v5 = CFRetain(v5);
  }
  *((void *)v4 + 1) = v5;
  CFTypeRef v6 = *(CFTypeRef *)(a1 + 8);
  if (v6) {
    CFTypeRef v6 = CFRetain(v6);
  }
  *((void *)v4 + 2) = v6;
  CFTypeRef v7 = *(CFTypeRef *)(a1 + 24);
  if (v7) {
    CFTypeRef v7 = CFRetain(v7);
  }
  *((void *)v4 + 4) = v7;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 32);
  CFTypeRef v8 = *(CFTypeRef *)(a1 + 16);
  if (v8) {
    CFTypeRef v8 = CFRetain(v8);
  }
  *((void *)v4 + 3) = v8;
  *(void *)int v4 = 0;
  uint64_t v9 = (uint64_t)&qword_1E93582F8;
  if (!v2) {
    uint64_t v9 = 16;
  }
  if (*(void *)v9)
  {
    uint64_t v10 = (uint64_t)&unk_1E9358300;
    if (!v2) {
      uint64_t v10 = 24;
    }
    **(void **)uint64_t v10 = v4;
  }
  else
  {
    *(void *)uint64_t v9 = v4;
    uint64_t v10 = (uint64_t)&unk_1E9358300;
    if (!v2) {
      uint64_t v10 = 24;
    }
  }
  *(void *)uint64_t v10 = v4;
  uint64_t result = MEMORY[0x199716EF0](*(void *)v3);
  if (dword_1E9359AD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t FigEndpointAuthRequestHandler_HasEndpoint(uint64_t a1)
{
  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1) {
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_31);
  }
  if (qword_1E93582F0) {
    uint64_t v2 = (uint64_t)&qword_1E93582F0;
  }
  else {
    uint64_t v2 = 8;
  }
  if (qword_1E93582F0) {
    uint64_t v3 = (uint64_t)&xmmword_1E93582F8;
  }
  else {
    uint64_t v3 = 16;
  }
  MEMORY[0x199716EE0](*(void *)v2);
  while (1)
  {
    uint64_t v3 = *(void *)v3;
    if (!v3) {
      break;
    }
    if (*(void *)(v3 + 32) == a1)
    {
      uint64_t v4 = 1;
      goto LABEL_14;
    }
  }
  uint64_t v4 = 0;
LABEL_14:
  MEMORY[0x199716EF0](*(void *)v2);
  return v4;
}

uint64_t FigEndpointAuthRequestHandler_RemoveRequest()
{
  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1) {
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_31);
  }
  uint64_t v0 = qword_1E93582F0;
  if (qword_1E93582F0) {
    uint64_t v1 = (uint64_t)&qword_1E93582F0;
  }
  else {
    uint64_t v1 = 8;
  }
  if (qword_1E93582F0) {
    uint64_t v2 = (uint64_t)&qword_1E93582F8;
  }
  else {
    uint64_t v2 = 16;
  }
  MEMORY[0x199716EE0](*(void *)v1);
  uint64_t v3 = *(uint64_t **)v2;
  if (*(void *)v2)
  {
    uint64_t v4 = *v3;
    uint64_t *v3 = 0;
    CFTypeRef v5 = (const void *)v3[2];
    if (v5) {
      CFRelease(v5);
    }
    CFTypeRef v6 = (const void *)v3[3];
    if (v6) {
      CFRelease(v6);
    }
    CFTypeRef v7 = (const void *)v3[1];
    if (v7) {
      CFRelease(v7);
    }
    CFTypeRef v8 = (const void *)v3[4];
    if (v8) {
      CFRelease(v8);
    }
    free(v3);
    if (v4)
    {
      *(void *)uint64_t v2 = v4;
    }
    else
    {
      *(void *)uint64_t v2 = 0;
      uint64_t v9 = (uint64_t)&unk_1E9358300;
      if (!v0) {
        uint64_t v9 = 24;
      }
      *(void *)uint64_t v9 = 0;
    }
  }
  uint64_t result = MEMORY[0x199716EF0](*(void *)v1);
  if (dword_1E9359AD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t FigEndpointAuthRequestHandler_ProcessRequest(long long *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFTypeRef v32 = 0;
  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1) {
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_31);
  }
  uint64_t v2 = qword_1E93582F0;
  if (qword_1E93582F0) {
    uint64_t v3 = (uint64_t)&qword_1E93582F0;
  }
  else {
    uint64_t v3 = 8;
  }
  MEMORY[0x199716EE0](*(void *)v3);
  int v4 = FigEndpointAuthRequestHandler_GetAuthRequestList_authListObj;
  MEMORY[0x199716EF0](*(void *)v3);
  if (*((void *)a1 + 3))
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    CFTypeRef v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (v8) {
      v8(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &v32);
    }
  }
  uint64_t v9 = (uint64_t)&xmmword_1E93582F8;
  if (!v2) {
    uint64_t v9 = 16;
  }
  if (!*(void *)v9)
  {
    uint64_t v10 = (uint64_t)&xmmword_1E93582F8 + 8;
    if (!v2) {
      uint64_t v10 = 24;
    }
    if (!*(void *)v10)
    {
      if (!v4)
      {
        long long v16 = a1[1];
        long long v33 = *a1;
        long long v34 = v16;
        long long v35 = a1[2];
        FigEndpointAuthRequestHandler_AddRequest((uint64_t)&v33);
        if (dword_1E9359AD8)
        {
          LODWORD(cf) = 0;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        long long v29 = a1[1];
        long long v33 = *a1;
        long long v34 = v29;
        long long v35 = a1[2];
        goto LABEL_45;
      }
LABEL_41:
      uint64_t v27 = 0;
      goto LABEL_46;
    }
  }
  FigEndpointAuthRequestHandler_GetCurrentAuthToProcess();
  if (!FigCFEqual())
  {
    if (!v4)
    {
      long long v14 = a1[1];
      long long v33 = *a1;
      long long v34 = v14;
      long long v35 = a1[2];
      FigEndpointAuthRequestHandler_AddRequest((uint64_t)&v33);
    }
    goto LABEL_41;
  }
  if (v4)
  {
    FigEndpointAuthRequestHandler_RemoveRequest();
    uint64_t CurrentAuthToProcess = FigEndpointAuthRequestHandler_GetCurrentAuthToProcess();
    if (CurrentAuthToProcess)
    {
      id v12 = (long long *)CurrentAuthToProcess;
      if (dword_1E9359AD8)
      {
        LODWORD(cf) = 0;
        uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      long long v19 = *v12;
      long long v20 = v12[2];
      long long v34 = v12[1];
      long long v35 = v20;
      long long v33 = v19;
LABEL_45:
      uint64_t v27 = FigEndpointUIAgentHelper_DisplayAuthPrompt((uint64_t)&v33, (uint64_t)FigEndpointAuthRequestHandler_CallbackFromUIAgent);
      goto LABEL_46;
    }
    if (dword_1E9359AD8)
    {
      LODWORD(cf) = 0;
      long long v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_41;
  }
  if (dword_1E9359AD8)
  {
    LODWORD(cf) = 0;
    long long v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v21 = a1[1];
  long long v33 = *a1;
  long long v34 = v21;
  long long v35 = a1[2];
  FigEndpointAuthRequestHandler_ReplaceRequest((uint64_t)&v33);
  FigEndpointAuthRequestHandler_GetCurrentAuthToProcess();
  if (!FigCFEqual()) {
    goto LABEL_41;
  }
  CFTypeRef cf = 0;
  uint64_t v22 = FigEndpointGetCMBaseObject();
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  long long v25 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v24 + 48);
  if (v25) {
    v25(v22, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &cf);
  }
  if (dword_1E9359AD8)
  {
    uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v28 = a1[1];
  long long v33 = *a1;
  long long v34 = v28;
  long long v35 = a1[2];
  uint64_t v27 = FigEndpointUIAgentHelper_DisplayAuthPrompt((uint64_t)&v33, (uint64_t)FigEndpointAuthRequestHandler_CallbackFromUIAgent);
  if (cf) {
    CFRelease(cf);
  }
LABEL_46:
  if (v32) {
    CFRelease(v32);
  }
  return v27;
}

void FigEndpointAuthRequestHandler_CallbackFromUIAgent(uint64_t a1, int a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  if (dword_1E9359AD8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!FigEndpointAuthRequestHandler_IsAuthListEmpty())
  {
    if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce == -1)
    {
      if (!a4) {
        return;
      }
    }
    else
    {
      dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_31);
      if (!a4) {
        return;
      }
    }
    uint64_t v10 = (uint64_t)&xmmword_1E93582F8;
    if (!qword_1E93582F0) {
      uint64_t v10 = 16;
    }
    if (a2) {
      uint64_t v11 = 4294950568;
    }
    else {
      uint64_t v11 = 0;
    }
    a4(*(void *)(*(void *)v10 + 32), a1, v11, a5);
  }
}

uint64_t FigEndpointAuthRequestHandler_GetCurrentAuthToProcess()
{
  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1) {
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_31);
  }
  if (qword_1E93582F0) {
    uint64_t v0 = (uint64_t)&qword_1E93582F0;
  }
  else {
    uint64_t v0 = 8;
  }
  if (qword_1E93582F0) {
    uint64_t v1 = (uint64_t)&xmmword_1E93582F8;
  }
  else {
    uint64_t v1 = 16;
  }
  MEMORY[0x199716EE0](*(void *)v0);
  uint64_t v2 = *(void *)v1;
  MEMORY[0x199716EF0](*(void *)v0);
  if (v2) {
    return v2 + 8;
  }
  else {
    return 0;
  }
}

void FigEndpointAuthRequestHandler_ReplaceRequest(uint64_t a1)
{
  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1) {
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_31);
  }
  uint64_t v2 = (uint64_t)&xmmword_1E93582F8;
  uint64_t v12 = qword_1E93582F0;
  if (!qword_1E93582F0) {
    uint64_t v2 = 16;
  }
  uint64_t v3 = *(uint64_t **)v2;
  if (*(void *)v2)
  {
    while (!FigCFEqual())
    {
      if (dword_1E9359AD8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v3 = (uint64_t *)*v3;
      if (!v3) {
        return;
      }
    }
    if (v12) {
      uint64_t v5 = (uint64_t)&qword_1E93582F0;
    }
    else {
      uint64_t v5 = 8;
    }
    MEMORY[0x199716EE0](*(void *)v5);
    uint64_t v6 = (const void *)v3[1];
    uint64_t v7 = *(const void **)a1;
    v3[1] = *(void *)a1;
    if (v7) {
      CFRetain(v7);
    }
    if (v6) {
      CFRelease(v6);
    }
    CFTypeRef v8 = (const void *)v3[2];
    uint64_t v9 = *(const void **)(a1 + 8);
    v3[2] = (uint64_t)v9;
    if (v9) {
      CFRetain(v9);
    }
    if (v8) {
      CFRelease(v8);
    }
    *(_OWORD *)(v3 + 5) = *(_OWORD *)(a1 + 32);
    uint64_t v10 = (const void *)v3[3];
    long long v11 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v3 + 3) = v11;
    if ((void)v11) {
      CFRetain((CFTypeRef)v11);
    }
    if (v10) {
      CFRelease(v10);
    }
    MEMORY[0x199716EF0](*(void *)v5);
  }
}

BOOL FigEndpointAuthRequestHandler_IsAuthListEmpty()
{
  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1) {
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_31);
  }
  return !qword_1E93582F0 || xmmword_1E93582F8 == 0;
}

uint64_t FigEndpointAuthRequestHandler_SetProcessNextRequest(char a1)
{
  if (FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce != -1) {
    dispatch_once(&FigEndpointAuthRequestHandler_GetAuthRequestList_sFigEndpointUIAgentAuthSerializerSetupOnce, &__block_literal_global_31);
  }
  uint64_t result = qword_1E93582F0;
  if (qword_1E93582F0)
  {
    MEMORY[0x199716EE0]();
    FigEndpointAuthRequestHandler_GetAuthRequestList_authListObuint64_t j = a1;
    JUMPOUT(0x199716EF0);
  }
  return result;
}

void remoteXPCRouteDiscovererClient_DeadConnectionCallback()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  unsigned char *DerivedStorage = 1;
  remoteXPCRouteDiscoverer_DisposeCaches((uint64_t)DerivedStorage);
}

uint64_t remoteXPCRouteDiscoverer_CopyAvailableEndpoints(uint64_t a1, void *a2)
{
  uint64_t v24 = 0;
  long long v25 = &v24;
  uint64_t v26 = 0x2020000000;
  int v27 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  xpc_object_t v21 = 0;
  uint64_t v17 = 0;
  long long v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  int v4 = FigEndpointXPCRemotePing();
  *((_DWORD *)v25 + 6) = v4;
  if (!v4)
  {
    int ObjectID = remoteXPCRouteDiscoverer_GetObjectID(a1, &v23);
    *((_DWORD *)v25 + 6) = ObjectID;
    if (!ObjectID)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      int v7 = FigXPCCreateBasicMessage();
      *((_DWORD *)v25 + 6) = v7;
      if (!v7)
      {
        int v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        *((_DWORD *)v25 + 6) = v8;
        if (!v8)
        {
          xpc_object_t value = xpc_dictionary_get_value(v21, (const char *)kFigRouteDiscovererXPCMsgParam_AddedRoutes);
          xpc_object_t v10 = xpc_dictionary_get_value(v21, (const char *)kFigRouteDiscovererXPCMsgParam_SubtractedRoutes);
          long long v11 = *(NSObject **)(DerivedStorage + 16);
          v16[0] = MEMORY[0x1E4F143A8];
          v16[1] = 3221225472;
          v16[2] = __remoteXPCRouteDiscoverer_CopyAvailableEndpoints_block_invoke;
          v16[3] = &unk_1E57C9B38;
          v16[4] = value;
          v16[5] = v10;
          v16[6] = &v24;
          v16[7] = &v17;
          v16[8] = DerivedStorage;
          MXDispatchSync((uint64_t)"remoteXPCRouteDiscoverer_CopyAvailableEndpoints", (uint64_t)"FigRouteDiscovererRemoteXPC.m", 160, 0, 0, v11, (uint64_t)v16);
          uint64_t v12 = v18;
          *a2 = v18[3];
          v12[3] = 0;
        }
      }
    }
  }
  uint64_t v13 = (const void *)v18[3];
  if (v13) {
    CFRelease(v13);
  }
  FigXPCRelease();
  FigXPCRelease();
  uint64_t v14 = *((unsigned int *)v25 + 6);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v24, 8);
  return v14;
}

void sub_194DF01E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t figRouteDiscovererRemoteXPCCopyEndpointForRouteDescriptor(uint64_t a1, CFDictionaryRef theDict, void *a3)
{
  uint64_t result = 4294949956;
  if (!theDict || !a3) {
    return result;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"RouteUID");
  if (!Value) {
    return 4294949956;
  }
  CFStringRef v8 = Value;
  CFDictionaryGetValue(theDict, @"AudioRouteName");
  int v9 = FigCFEqual();
  CFArrayRef theArray = 0;
  remoteXPCRouteDiscoverer_CopyAvailableEndpoints(a1, &theArray);
  CFArrayRef v10 = theArray;
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    goto LABEL_36;
  }
  CFIndex v12 = Count;
  CFIndex v13 = 0;
  uint64_t v28 = *MEMORY[0x1E4F21048];
  uint64_t v14 = *MEMORY[0x1E4F1CF80];
  uint64_t v27 = *MEMORY[0x1E4F20E38];
  while (1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v13);
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v18 + 48);
    if (v19) {
      v19(CMBaseObject, v28, v14, &cf);
    }
    if (v9 && !FigCFEqual())
    {
      long long v25 = cf;
      if (!cf) {
        goto LABEL_26;
      }
LABEL_25:
      CFRelease(v25);
      goto LABEL_26;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFStringRef stringToFind = 0;
    uint64_t v20 = FigEndpointGetCMBaseObject();
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef *))(v22 + 48);
    if (v23) {
      v23(v20, v27, v14, &stringToFind);
    }
    if (!stringToFind) {
      goto LABEL_26;
    }
    CFRange v24 = CFStringFind(v8, stringToFind, 1uLL);
    if (v24.length >= 1 && !v24.location) {
      break;
    }
    long long v25 = stringToFind;
    if (stringToFind) {
      goto LABEL_25;
    }
LABEL_26:
    if (v12 == ++v13) {
      goto LABEL_36;
    }
  }
  if (ValueAtIndex) {
    CFTypeRef v26 = CFRetain(ValueAtIndex);
  }
  else {
    CFTypeRef v26 = 0;
  }
  *a3 = v26;
  if (stringToFind) {
    CFRelease(stringToFind);
  }
LABEL_36:
  CFRelease(v10);
  return 0;
}

__CFString *singletonVolumeController_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigVolumeController Singleton %p, remoteVolumeController: %@>", a1, *(void *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t singletonVolumeController_ChangeMasterVolumeOfRoutingContext(uint64_t a1, const void *a2, float a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if (!v6)
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFArrayRef v10 = *(uint64_t (**)(CFTypeRef, const void *, float))(v9 + 16);
    if (!v10)
    {
      uint64_t v11 = 4294954514;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v6 = v10(v7, v5, a3);
  }
  uint64_t v11 = v6;
  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t singletonVolumeController_SetMasterVolumeOfRoutingContext(uint64_t a1, const void *a2, float a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if (!v6)
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFArrayRef v10 = *(uint64_t (**)(CFTypeRef, const void *, float))(v9 + 24);
    if (!v10)
    {
      uint64_t v11 = 4294954514;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v6 = v10(v7, v5, a3);
  }
  uint64_t v11 = v6;
  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t singletonVolumeController_GetMasterVolumeOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if (!v6)
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFArrayRef v10 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(v9 + 32);
    if (!v10)
    {
      uint64_t v11 = 4294954514;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v6 = v10(v7, v5, a3);
  }
  uint64_t v11 = v6;
  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t singletonVolumeController_CanSetMasterVolumeOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if (!v6)
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFArrayRef v10 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(v9 + 40);
    if (!v10)
    {
      uint64_t v11 = 4294954514;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v6 = v10(v7, v5, a3);
  }
  uint64_t v11 = v6;
  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t singletonVolumeController_GetMasterVolumeControlTypeOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if (!v6)
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFArrayRef v10 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(v9 + 48);
    if (!v10)
    {
      uint64_t v11 = 4294954514;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v6 = v10(v7, v5, a3);
  }
  uint64_t v11 = v6;
  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t singletonVolumeController_ChangeVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
LABEL_7:
    uint64_t v10 = v5;
    if (!v6) {
      return v10;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(CFTypeRef, uint64_t, float))(v8 + 56);
  if (v9)
  {
    uint64_t v5 = v9(v6, a2, a3);
    goto LABEL_7;
  }
  uint64_t v10 = 4294954514;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
  return v10;
}

uint64_t singletonVolumeController_SetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
LABEL_7:
    uint64_t v10 = v5;
    if (!v6) {
      return v10;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(CFTypeRef, uint64_t, float))(v8 + 64);
  if (v9)
  {
    uint64_t v5 = v9(v6, a2, a3);
    goto LABEL_7;
  }
  uint64_t v10 = 4294954514;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
  return v10;
}

uint64_t singletonVolumeController_GetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
LABEL_7:
    uint64_t v10 = v5;
    if (!v6) {
      return v10;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v8 + 72);
  if (v9)
  {
    uint64_t v5 = v9(v6, a2, a3);
    goto LABEL_7;
  }
  uint64_t v10 = 4294954514;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
  return v10;
}

uint64_t singletonVolumeController_CanSetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
LABEL_7:
    uint64_t v10 = v5;
    if (!v6) {
      return v10;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v8 + 80);
  if (v9)
  {
    uint64_t v5 = v9(v6, a2, a3);
    goto LABEL_7;
  }
  uint64_t v10 = 4294954514;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
  return v10;
}

uint64_t singletonVolumeController_GetVolumeControlTypeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v8 = cf;
  if (v7)
  {
LABEL_7:
    uint64_t v12 = v7;
    if (!v8) {
      return v12;
    }
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v10 + 96);
  if (v11)
  {
    uint64_t v7 = v11(v8, a2, a3, a4);
    goto LABEL_7;
  }
  uint64_t v12 = 4294954514;
  if (v8) {
LABEL_10:
  }
    CFRelease(v8);
  return v12;
}

uint64_t singletonVolumeController_SetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v8 = cf;
  if (v7)
  {
LABEL_7:
    uint64_t v12 = v7;
    if (!v8) {
      return v12;
    }
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, float))(v10 + 104);
  if (v11)
  {
    uint64_t v7 = v11(v8, a2, a3, a4);
    goto LABEL_7;
  }
  uint64_t v12 = 4294954514;
  if (v8) {
LABEL_10:
  }
    CFRelease(v8);
  return v12;
}

uint64_t singletonVolumeController_GetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v8 = cf;
  if (v7)
  {
LABEL_7:
    uint64_t v12 = v7;
    if (!v8) {
      return v12;
    }
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v10 + 112);
  if (v11)
  {
    uint64_t v7 = v11(v8, a2, a3, a4);
    goto LABEL_7;
  }
  uint64_t v12 = 4294954514;
  if (v8) {
LABEL_10:
  }
    CFRelease(v8);
  return v12;
}

uint64_t singletonVolumeController_SetVolumeOfRoomID(uint64_t a1, const void *a2, uint64_t a3, float a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v8 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v9 = cf;
  if (!v8)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t, float))(v11 + 120);
    if (!v12)
    {
      uint64_t v13 = 4294954514;
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v8 = v12(v9, v7, a3, a4);
  }
  uint64_t v13 = v8;
  if (v9) {
LABEL_10:
  }
    CFRelease(v9);
LABEL_11:
  if (v7) {
    CFRelease(v7);
  }
  return v13;
}

uint64_t singletonVolumeController_GetVolumeOfRoomID(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v8 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v9 = cf;
  if (!v8)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t, uint64_t))(v11 + 128);
    if (!v12)
    {
      uint64_t v13 = 4294954514;
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v8 = v12(v9, v7, a3, a4);
  }
  uint64_t v13 = v8;
  if (v9) {
LABEL_10:
  }
    CFRelease(v9);
LABEL_11:
  if (v7) {
    CFRelease(v7);
  }
  return v13;
}

uint64_t singletonVolumeController_SetMuteOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v7 = cf;
  if (!v6)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(v9 + 136);
    if (!v10)
    {
      uint64_t v11 = 4294954514;
      if (!v7) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v6 = v10(v7, v5, a3);
  }
  uint64_t v11 = v6;
  if (v7) {
LABEL_10:
  }
    CFRelease(v7);
LABEL_11:
  if (v5) {
    CFRelease(v5);
  }
  return v11;
}

uint64_t singletonVolumeController_GetMuteOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v7 = cf;
  if (!v6)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(v9 + 144);
    if (!v10)
    {
      uint64_t v11 = 4294954514;
      if (!v7) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v6 = v10(v7, v5, a3);
  }
  uint64_t v11 = v6;
  if (v7) {
LABEL_10:
  }
    CFRelease(v7);
LABEL_11:
  if (v5) {
    CFRelease(v5);
  }
  return v11;
}

uint64_t singletonVolumeController_SetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
LABEL_7:
    uint64_t v10 = v5;
    if (!v6) {
      return v10;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v8 + 152);
  if (v9)
  {
    uint64_t v5 = v9(v6, a2, a3);
    goto LABEL_7;
  }
  uint64_t v10 = 4294954514;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
  return v10;
}

uint64_t singletonVolumeController_SetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v8 = cf;
  if (v7)
  {
LABEL_7:
    uint64_t v12 = v7;
    if (!v8) {
      return v12;
    }
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v10 + 168);
  if (v11)
  {
    uint64_t v7 = v11(v8, a2, a3, a4);
    goto LABEL_7;
  }
  uint64_t v12 = 4294954514;
  if (v8) {
LABEL_10:
  }
    CFRelease(v8);
  return v12;
}

uint64_t singletonVolumeController_GetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v8 = cf;
  if (v7)
  {
LABEL_7:
    uint64_t v12 = v7;
    if (!v8) {
      return v12;
    }
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v10 + 176);
  if (v11)
  {
    uint64_t v7 = v11(v8, a2, a3, a4);
    goto LABEL_7;
  }
  uint64_t v12 = 4294954514;
  if (v8) {
LABEL_10:
  }
    CFRelease(v8);
  return v12;
}

uint64_t singletonVolumeController_CanSetMuteOfRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v7 = cf;
  if (!v6)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(v9 + 184);
    if (!v10)
    {
      uint64_t v11 = 4294954514;
      if (!v7) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v6 = v10(v7, v5, a3);
  }
  uint64_t v11 = v6;
  if (v7) {
LABEL_10:
  }
    CFRelease(v7);
LABEL_11:
  if (v5) {
    CFRelease(v5);
  }
  return v11;
}

uint64_t singletonVolumeController_CanSetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
LABEL_7:
    uint64_t v10 = v5;
    if (!v6) {
      return v10;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v8 + 192);
  if (v9)
  {
    uint64_t v5 = v9(v6, a2, a3);
    goto LABEL_7;
  }
  uint64_t v10 = 4294954514;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
  return v10;
}

uint64_t singletonVolumeController_CanSetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v8 = cf;
  if (v7)
  {
LABEL_7:
    uint64_t v12 = v7;
    if (!v8) {
      return v12;
    }
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v10 + 200);
  if (v11)
  {
    uint64_t v7 = v11(v8, a2, a3, a4);
    goto LABEL_7;
  }
  uint64_t v12 = 4294954514;
  if (v8) {
LABEL_10:
  }
    CFRelease(v8);
  return v12;
}

uint64_t singletonVolumeController_SetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v8 = cf;
  if (v7)
  {
LABEL_7:
    uint64_t v12 = v7;
    if (!v8) {
      return v12;
    }
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, float))(v10 + 208);
  if (v11)
  {
    uint64_t v7 = v11(v8, a2, a3, a4);
    goto LABEL_7;
  }
  uint64_t v12 = 4294954514;
  if (v8) {
LABEL_10:
  }
    CFRelease(v8);
  return v12;
}

uint64_t singletonVolumeController_GetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v8 = cf;
  if (v7)
  {
LABEL_7:
    uint64_t v12 = v7;
    if (!v8) {
      return v12;
    }
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v10 + 216);
  if (v11)
  {
    uint64_t v7 = v11(v8, a2, a3, a4);
    goto LABEL_7;
  }
  uint64_t v12 = 4294954514;
  if (v8) {
LABEL_10:
  }
    CFRelease(v8);
  return v12;
}

uint64_t volumeControllerRemote_deadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 8) = 1;
  return result;
}

void singletonVolumeController_forgetRemoteVolumeController()
{
}

uint64_t singletonVolumeController_handleRemoteVolumeControllerNotifications()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t volumeControllerRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendSyncMessage();
  }
  return FigXPCRelease();
}

__CFString *volumeControllerRemote_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v4 = 0;
  if (!volumeControllerRemote_getObjectID(a1, &v4)) {
    CFStringAppendFormat(Mutable, 0, @"<FigVolumeControllerRemote %p, objectID = %llu>", a1, v4);
  }
  return Mutable;
}

uint64_t volumeControllerRemote_ChangeMasterVolumeOfRoutingContext(uint64_t a1, uint64_t a2, float a3)
{
  xpc_object_t xdict = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  if (a2)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v10);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &v8);
        if (!ObjectID)
        {
          xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, v8);
          xpc_dictionary_set_double(xdict, kFigVolumeControllerXPCMsgParam_VolumeDelta, a3);
          uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t volumeControllerRemote_SetMasterVolumeOfRoutingContext(uint64_t a1, uint64_t a2, float a3)
{
  xpc_object_t xdict = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  if (a2)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v10);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &v8);
        if (!ObjectID)
        {
          xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, v8);
          xpc_dictionary_set_double(xdict, kFigVolumeControllerXPCMsgParam_Volume, a3);
          uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t volumeControllerRemote_GetMasterVolumeOfRoutingContext(uint64_t a1, uint64_t a2, float *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v12 = 0;
  uint64_t value = 0;
  xpc_object_t v10 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v12);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3)
      {
        float v7 = xpc_dictionary_get_double(v10, kFigVolumeControllerXPCMsgParam_Volume);
        *a3 = v7;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_CanSetMasterVolumeOfRoutingContext(uint64_t a1, uint64_t a2, BOOL *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  uint64_t value = 0;
  xpc_object_t v9 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3) {
        *a3 = xpc_dictionary_get_BOOL(v9, kFigVolumeControllerXPCMsgParam_CanSetMasterVolume);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_GetMasterVolumeControlTypeOfRoutingContext(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  uint64_t value = 0;
  xpc_object_t v9 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3) {
        *a3 = xpc_dictionary_get_uint64(v9, kFigVolumeControllerXPCMsgParam_GetMasterVolumeControlType);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_ChangeVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v7 = 0;
  if (a2)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if (ObjectID)
    {
      uint64_t v5 = ObjectID;
    }
    else
    {
      uint64_t v5 = FigXPCCreateBasicMessage();
      if (!v5)
      {
        uint64_t v5 = FigXPCMessageSetCFString();
        if (!v5)
        {
          xpc_dictionary_set_double(0, kFigVolumeControllerXPCMsgParam_VolumeDelta, a3);
          uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t volumeControllerRemote_SetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v7 = 0;
  if (a2)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if (ObjectID)
    {
      uint64_t v5 = ObjectID;
    }
    else
    {
      uint64_t v5 = FigXPCCreateBasicMessage();
      if (!v5)
      {
        uint64_t v5 = FigXPCMessageSetCFString();
        if (!v5)
        {
          xpc_dictionary_set_double(0, kFigVolumeControllerXPCMsgParam_Volume, a3);
          uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t volumeControllerRemote_GetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v8 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3)
      {
        float v6 = xpc_dictionary_get_double(0, kFigVolumeControllerXPCMsgParam_Volume);
        *a3 = v6;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_CanSetVolumeOfEndpointWithID(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v7 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3) {
        *a3 = xpc_dictionary_get_BOOL(0, kFigVolumeControllerXPCMsgParam_CanSetEndpointVolume);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_GetVolumeControlTypeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = 0;
  uint64_t v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
    {
      uint64_t v4 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v4) {
        *a4 = xpc_dictionary_get_uint64(0, kFigVolumeControllerXPCMsgParam_GetEndpointVolumeControlType);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_SetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8 = 0;
  uint64_t v4 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if (ObjectID)
    {
      uint64_t v4 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCCreateBasicMessage();
      if (!v4)
      {
        uint64_t v4 = FigXPCMessageSetCFString();
        if (!v4)
        {
          uint64_t v4 = FigXPCMessageSetCFString();
          if (!v4)
          {
            xpc_dictionary_set_double(0, kFigVolumeControllerXPCMsgParam_Volume, a4);
            uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_GetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v9 = 0;
  uint64_t v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v9);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
    {
      uint64_t v4 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v4)
      {
        float v7 = xpc_dictionary_get_double(0, kFigVolumeControllerXPCMsgParam_Volume);
        *a4 = v7;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_SetVolumeOfRoomWithID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  uint64_t v4 = 4294949706;
  uint64_t v9 = 0;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &v9);
        if (!ObjectID)
        {
          xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, v9);
          uint64_t ObjectID = FigXPCMessageSetCFString();
          if (!ObjectID)
          {
            xpc_dictionary_set_double(xdict, kFigVolumeControllerXPCMsgParam_Volume, a4);
            uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
    uint64_t v4 = ObjectID;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_GetVolumeOfRoomWithID(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  xpc_object_t xdict = 0;
  uint64_t v13 = 0;
  uint64_t value = 0;
  xpc_object_t v11 = 0;
  uint64_t v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v13);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), ObjectID)
      || (xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value),
          uint64_t ObjectID = FigXPCMessageSetCFString(),
          ObjectID))
    {
      uint64_t v4 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v4)
      {
        float v8 = xpc_dictionary_get_double(v11, kFigVolumeControllerXPCMsgParam_Volume);
        *a4 = v8;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_SetMuteOfRoutingContext(uint64_t a1, uint64_t a2, int a3)
{
  xpc_object_t xdict = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  if (a2)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v10);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &v8);
        if (!ObjectID)
        {
          xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, v8);
          xpc_dictionary_set_BOOL(xdict, kFigVolumeControllerXPCMsgParam_Mute, a3 != 0);
          uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t volumeControllerRemote_GetMuteOfRoutingContext(uint64_t a1, uint64_t a2, BOOL *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  uint64_t value = 0;
  xpc_object_t v9 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3) {
        *a3 = xpc_dictionary_get_BOOL(v9, kFigVolumeControllerXPCMsgParam_Mute);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_SetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = 0;
  if (a2)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if (ObjectID)
    {
      uint64_t v5 = ObjectID;
    }
    else
    {
      uint64_t v5 = FigXPCCreateBasicMessage();
      if (!v5)
      {
        uint64_t v5 = FigXPCMessageSetCFString();
        if (!v5)
        {
          xpc_dictionary_set_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute, a3 != 0);
          uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 4294949706;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t volumeControllerRemote_SetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = 0;
  uint64_t v4 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if (ObjectID)
    {
      uint64_t v4 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCCreateBasicMessage();
      if (!v4)
      {
        uint64_t v4 = FigXPCMessageSetCFString();
        if (!v4)
        {
          uint64_t v4 = FigXPCMessageSetCFString();
          if (!v4)
          {
            xpc_dictionary_set_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute, a4 != 0);
            uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_GetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v8 = 0;
  uint64_t v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
    {
      uint64_t v4 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v4) {
        *a4 = xpc_dictionary_get_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_CanSetMuteOfRoutingContext(uint64_t a1, uint64_t a2, BOOL *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  uint64_t value = 0;
  xpc_object_t v9 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3) {
        *a3 = xpc_dictionary_get_BOOL(v9, kFigVolumeControllerXPCMsgParam_Mute);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_CanSetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v7 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3) {
        *a3 = xpc_dictionary_get_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_CanSetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v8 = 0;
  uint64_t v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
    {
      uint64_t v4 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v4) {
        *a4 = xpc_dictionary_get_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_SetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8 = 0;
  uint64_t v4 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v8);
    if (ObjectID)
    {
      uint64_t v4 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCCreateBasicMessage();
      if (!v4)
      {
        uint64_t v4 = FigXPCMessageSetCFString();
        if (!v4)
        {
          uint64_t v4 = FigXPCMessageSetCFString();
          if (!v4)
          {
            xpc_dictionary_set_double(0, kFigVolumeControllerXPCMsgParam_Volume, a4);
            uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t volumeControllerRemote_GetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v9 = 0;
  uint64_t v4 = 4294949706;
  if (a2 && a3 && a4)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v9);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
    {
      uint64_t v4 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v4)
      {
        float v7 = xpc_dictionary_get_double(0, kFigVolumeControllerXPCMsgParam_Volume);
        *a4 = v7;
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t FigSystemControllerStartServer()
{
  uint64_t v0 = FigXPCServerStart();
  if (dword_1E9359E70)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v0;
}

CFStringRef FigRoutingSessionDestinationCopyDescription(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"routingSessionDestination_RouteDescriptors");
  uint64_t v4 = FigRouteDescriptorArrayCopySuccinctDescription(a1, Value);
  FigCFDictionaryGetFloatIfPresent();
  CFStringRef v5 = CFStringCreateWithFormat(a1, 0, @"<FigRoutingDestination: probability = %f, routeNames = %@>", 0.0, v4);
  if (v4) {
    CFRelease(v4);
  }
  return v5;
}

__CFString *FigRouteDescriptorArrayCopySuccinctDescription(const __CFAllocator *a1, const __CFArray *a2)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(a1, 0);
  CFIndex v4 = 0;
  if (!a2) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(a2); v4 < i; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v4);
    CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"RouteName");
    CFStringAppendFormat(Mutable, 0, @"%@", Value);
    if (a2) {
      CFIndex Count = CFArrayGetCount(a2);
    }
    else {
      CFIndex Count = 0;
    }
    if (v4 < Count - 1) {
      CFStringAppend(Mutable, @", ");
    }
    ++v4;
    if (a2) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return Mutable;
}

uint64_t FigRoutingSessionCreate(uint64_t a1, char a2, const void *a3, void *a4)
{
  return routingSession_createInternal(a1, a2, 0, 0, a3, a4);
}

uint64_t routingSession_createInternal(uint64_t a1, char a2, char a3, char a4, const void *a5, void *a6)
{
  if (a6)
  {
    FigRoutingSessionGetClassID();
    uint64_t v11 = CMDerivedObjectCreate();
    if (!v11)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a5) {
        CFTypeRef v13 = CFRetain(a5);
      }
      else {
        CFTypeRef v13 = 0;
      }
      *(void *)uint64_t DerivedStorage = v13;
      *(unsigned char *)(DerivedStorage + 8) = a2;
      *(unsigned char *)(DerivedStorage + 9) = a3;
      *(unsigned char *)(DerivedStorage + 1singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = a4;
      *a6 = 0;
    }
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRoutingSessionCreateForInEarHeadphones(uint64_t a1, const void *a2, void *a3)
{
  return routingSession_createInternal(a1, 0, 1, 0, a2, a3);
}

uint64_t FigRoutingSessionCreateForActiveSharePlayCapableCallSession(uint64_t a1, const void *a2, void *a3)
{
  return routingSession_createInternal(a1, 0, 0, 1, a2, a3);
}

void routingSession_Finalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *routingSession_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFTypeRef cf = 0;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  float v7 = *(void (**)(uint64_t, CFTypeRef *))(v6 + 8);
  if (v7 && (v7(a1, &cf), cf)) {
    CFStringRef v8 = FigRoutingSessionDestinationCopyDescription(v3, (CFDictionaryRef)cf);
  }
  else {
    CFStringRef v8 = 0;
  }
  uint64_t v9 = "Y";
  if (DerivedStorage[8]) {
    uint64_t v10 = "Y";
  }
  else {
    uint64_t v10 = "N";
  }
  if (DerivedStorage[9]) {
    uint64_t v11 = "Y";
  }
  else {
    uint64_t v11 = "N";
  }
  if (!DerivedStorage[10]) {
    uint64_t v9 = "N";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigRoutingSession = %p: establishedAutomaticallyFromLikelyDestination %s, establishedBasedOnInEarStatusOfConnectedHeadphones %s, establishedBasedOnActiveSharePlayCapableCallSession %s, chosenDestination = %@>", a1, v10, v11, v9, v8);
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return Mutable;
}

uint64_t routingSession_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    uint64_t v6 = (unsigned char *)(DerivedStorage + 8);
  }
  else if (FigCFEqual())
  {
    uint64_t v6 = (unsigned char *)(DerivedStorage + 9);
  }
  else
  {
    if (!FigCFEqual()) {
      return 4294954512;
    }
    uint64_t v6 = (unsigned char *)(DerivedStorage + 10);
  }
  if (*v6) {
    float v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  else {
    float v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef v8 = CFRetain(*v7);
  uint64_t result = 0;
  *a4 = v8;
  return result;
}

uint64_t routingSession_CopyDestination(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeRef v4 = *DerivedStorage;
    if (v4) {
      CFTypeRef v4 = CFRetain(v4);
    }
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

MXSessionSidekick *__MXSessionCreate_block_invoke(uint64_t a1)
{
  uint64_t result = [[MXSessionSidekick alloc] initWithSession:*(void *)(a1 + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = result;
  return result;
}

uint64_t _MXSessionCreate(void *a1, MXSession **a2)
{
  if (a1 && a2)
  {
    CFTypeRef v4 = (void *)MEMORY[0x1997179E0]();
    if ([a1 isMemberOfClass:objc_opt_class()])
    {
      uint64_t v10 = 0;
      uint64_t v11 = &v10;
      uint64_t v12 = 0x3052000000;
      CFTypeRef v13 = __Block_byref_object_copy__6;
      uint64_t v14 = __Block_byref_object_dispose__6;
      uint64_t v15 = 0;
      uint64_t v5 = [+[MXSessionManagerSidekick sharedInstance] serialQueue];
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = ___MXSessionCreate_block_invoke;
      v9[3] = &unk_1E57C58A0;
      v9[4] = &v10;
      v9[5] = a1;
      MXDispatchAsyncAndWait((uint64_t)"_MXSessionCreate", (uint64_t)"MXSession_CInterfaceCommon.m", 101, 0, 0, v5, (uint64_t)v9);
      *a2 = (MXSession *)v11[5];
      _Block_object_dispose(&v10, 8);
      uint64_t v6 = *a2;
    }
    else
    {
      uint64_t v6 = [[MXSession alloc] initWithSession:a1];
      *a2 = v6;
    }
    if (v6) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = 4294951616;
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void sub_194DF4BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MXSessionCreateWithOptions(void *a1, MXSessionSecure **a2)
{
  if (a2 && a1)
  {
    if (objc_msgSend((id)objc_msgSend(a1, "objectForKey:", @"SessionType"), "unsignedCharValue") == 1)
    {
      CFTypeRef v4 = [[MXSessionSecure alloc] initWithOptions:a1];
      if (v4)
      {
        uint64_t result = 0;
      }
      else
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t result = 4294951609;
      }
      *a2 = v4;
    }
    else
    {
      uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      *a2 = 0;
      return 4294954315;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t __MXSessionCopyProperty_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 40) copyPropertyForKey:*(void *)(a1 + 48) valueOut:*(void *)(a1 + 56)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t MXSessionCopyProperties(void *a1, void *a2, CFTypeRef *a3)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  uint64_t v6 = (void *)MEMORY[0x1997179E0](+[MXInitialization waitUntilMXIsFullyInitialized]);
  if ([a1 isMemberOfClass:objc_opt_class()])
  {
    uint64_t v7 = [+[MXSessionManagerSidekick sharedInstance] serialQueue];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __MXSessionCopyProperties_block_invoke;
    v12[3] = &unk_1E57C6180;
    v12[4] = &v13;
    void v12[5] = a1;
    v12[6] = a2;
    v12[7] = a3;
    MXDispatchAsyncAndWait((uint64_t)"MXSessionCopyProperties", (uint64_t)"MXSession_CInterfaceCommon.m", 291, 0, 0, v7, (uint64_t)v12);
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v9 = [a1 copyProperties:a2 outPropertyErrors:a3];
    v14[3] = v9;
    if (a3 && *a3) {
      CFRetain(*a3);
    }
    -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionCopyProperties", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, [a2 description]);
  }
  uint64_t v10 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_194DF5100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef __MXSessionCopyProperties_block_invoke(uint64_t a1)
{
  CFTypeRef result = (CFTypeRef)[*(id *)(a1 + 40) copyProperties:*(void *)(a1 + 48) outPropertyErrors:*(void *)(a1 + 56)];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  CFAllocatorRef v3 = *(CFTypeRef **)(a1 + 56);
  if (v3)
  {
    CFTypeRef result = *v3;
    if (*v3)
    {
      return CFRetain(result);
    }
  }
  return result;
}

uint64_t __MXSessionSetProperty_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 40) setPropertyForKey:*(void *)(a1 + 48) value:*(void *)(a1 + 56)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t MXSessionSetProperties(void *a1, void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v8 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  int v20 = 0;
  if (a1)
  {
    uint64_t v9 = (void *)MEMORY[0x1997179E0](v8);
    if ([a1 isMemberOfClass:objc_opt_class()])
    {
      uint64_t v10 = [+[MXSessionManagerSidekick sharedInstance] serialQueue];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = __MXSessionSetProperties_block_invoke;
      v15[3] = &unk_1E57C9B68;
      v15[4] = &v17;
      v15[5] = a1;
      char v16 = a3;
      v15[6] = a2;
      v15[7] = a4;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionSetProperties", (uint64_t)"MXSession_CInterfaceCommon.m", 415, 0, 0, v10, (uint64_t)v15);
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      int v12 = [a1 setProperties:a2 usingErrorHandlingStrategy:a3 outPropertiesErrors:a4];
      *((_DWORD *)v18 + 6) = v12;
      if (a4 && *a4) {
        CFRetain(*a4);
      }
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionSetProperties", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, objc_msgSend((id)objc_msgSend(a2, "allKeys"), "description"));
    }
    uint64_t v13 = *((unsigned int *)v18 + 6);
  }
  else
  {
    uint64_t v13 = FigSignalErrorAt();
    *((_DWORD *)v18 + 6) = v13;
  }
  _Block_object_dispose(&v17, 8);
  return v13;
}

void sub_194DF53D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef __MXSessionSetProperties_block_invoke(uint64_t a1)
{
  CFTypeRef result = (CFTypeRef)[*(id *)(a1 + 40) setProperties:*(void *)(a1 + 48) usingErrorHandlingStrategy:*(unsigned __int8 *)(a1 + 64) outPropertiesErrors:*(void *)(a1 + 56)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  CFAllocatorRef v3 = *(CFTypeRef **)(a1 + 56);
  if (v3)
  {
    CFTypeRef result = *v3;
    if (*v3)
    {
      return CFRetain(result);
    }
  }
  return result;
}

uint64_t MXSessionSetOrderedProperties(void *a1, void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v8 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  int v20 = 0;
  if (a1)
  {
    uint64_t v9 = (void *)MEMORY[0x1997179E0](v8);
    if ([a1 isMemberOfClass:objc_opt_class()])
    {
      uint64_t v10 = [+[MXSessionManagerSidekick sharedInstance] serialQueue];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = __MXSessionSetOrderedProperties_block_invoke;
      v15[3] = &unk_1E57C9B68;
      v15[4] = &v17;
      v15[5] = a1;
      char v16 = a3;
      v15[6] = a2;
      v15[7] = a4;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionSetOrderedProperties", (uint64_t)"MXSession_CInterfaceCommon.m", 458, 0, 0, v10, (uint64_t)v15);
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      int v12 = [a1 setOrderedProperties:a2 usingErrorHandlingStrategy:a3 outPropertiesErrors:a4];
      *((_DWORD *)v18 + 6) = v12;
      if (a4 && *a4) {
        CFRetain(*a4);
      }
      -[MXAudioStatistics sendSinglePerformanceMessageForRoutine:operationTime:details:](+[MXAudioStatistics sharedInstance](MXAudioStatistics, "sharedInstance"), "sendSinglePerformanceMessageForRoutine:operationTime:details:", "MXSessionSetOrderedProperties", FigGetUpTimeNanoseconds() - UpTimeNanoseconds, [a2 description]);
    }
    uint64_t v13 = *((unsigned int *)v18 + 6);
  }
  else
  {
    uint64_t v13 = FigSignalErrorAt();
    *((_DWORD *)v18 + 6) = v13;
  }
  _Block_object_dispose(&v17, 8);
  return v13;
}

void sub_194DF5638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef __MXSessionSetOrderedProperties_block_invoke(uint64_t a1)
{
  CFTypeRef result = (CFTypeRef)[*(id *)(a1 + 40) setOrderedProperties:*(void *)(a1 + 48) usingErrorHandlingStrategy:*(unsigned __int8 *)(a1 + 64) outPropertiesErrors:*(void *)(a1 + 56)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  CFAllocatorRef v3 = *(CFTypeRef **)(a1 + 56);
  if (v3)
  {
    CFTypeRef result = *v3;
    if (*v3)
    {
      return CFRetain(result);
    }
  }
  return result;
}

uint64_t MXSessionBeginInterruption(void *a1)
{
  uint64_t v2 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v24 = 0;
  long long v25 = &v24;
  uint64_t v26 = 0x2020000000;
  int v27 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x3052000000;
  uint64_t v21 = __Block_byref_object_copy__6;
  uint64_t v22 = __Block_byref_object_dispose__6;
  uint64_t v23 = a1;
  uint64_t v14 = 0;
  uint64_t v15 = (float *)&v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  if (!a1)
  {
    uint64_t v7 = FigSignalErrorAt();
    *((_DWORD *)v25 + 6) = v7;
    goto LABEL_12;
  }
  CFAllocatorRef v3 = (void *)MEMORY[0x1997179E0](v2);
  if (isSessionSidekick((uint64_t)a1))
  {
    int v4 = [a1 activate];
  }
  else
  {
    if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        [(id)v19[5] setInterruptionCalledOffAudioControlQueue:1];
      }
    }
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v6 = MXGetSerialQueue();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __MXSessionBeginInterruption_block_invoke;
    v9[3] = &unk_1E57C9B90;
    v9[4] = &v24;
    v9[5] = &v18;
    void v9[6] = &v10;
    void v9[7] = &v14;
    MXDispatchAsyncAndWait((uint64_t)"MXSessionBeginInterruption", (uint64_t)"MXSession_CInterfaceCommon.m", 544, 0, 0, v6, (uint64_t)v9);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"MXSessionBeginInterruption" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
    if (!MX_FeatureFlags_IsOffloadActivationOffACQEnabled()) {
      goto LABEL_11;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_11;
    }
    [(id)v19[5] setInterruptionCalledOffAudioControlQueue:0];
    if (*((_DWORD *)v25 + 6)) {
      goto LABEL_11;
    }
    int v4 = mxsession_handleAsyncDuckingSleep((void *)v19[5], *((unsigned __int8 *)v11 + 24), v15[6]);
  }
  *((_DWORD *)v25 + 6) = v4;
LABEL_11:
  uint64_t v7 = *((unsigned int *)v25 + 6);
LABEL_12:
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v24, 8);
  return v7;
}

void sub_194DF5974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __MXSessionBeginInterruption_block_invoke(void *a1)
{
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = [*(id *)(*(void *)(a1[5] + 8) + 40) _beginInterruptionWithSecTask:0 andFlags:0];
  uint64_t v2 = +[MXSessionManager sharedInstance];
  uint64_t v3 = *(void *)(a1[6] + 8) + 24;
  uint64_t v4 = *(void *)(a1[7] + 8) + 24;
  return [(MXSessionManager *)v2 getAndResetAsyncDuckingParameters:v3 mostRecentDuckFadeDuration:v4];
}

uint64_t _MXSessionBeginInterruption_WithFlags(void *a1, uint64_t a2)
{
  uint64_t v4 = +[MXInitialization waitUntilMXIsFullyInitialized];
  if (a1)
  {
    uint64_t v5 = (void *)MEMORY[0x1997179E0](v4);
    if (isSessionSidekick((uint64_t)a1))
    {
      uint64_t v6 = [a1 activate];
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t v6 = [a1 _beginInterruptionWithSecTask:0 andFlags:a2];
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"_MXSessionBeginInterruption_WithFlags" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
    }
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MXSessionBeginInterruption_WithFlags(void *a1, uint64_t a2)
{
  uint64_t v4 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v26 = 0;
  int v27 = &v26;
  uint64_t v28 = 0x2020000000;
  int v29 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x3052000000;
  uint64_t v23 = __Block_byref_object_copy__6;
  uint64_t v24 = __Block_byref_object_dispose__6;
  long long v25 = a1;
  uint64_t v16 = 0;
  int v17 = (float *)&v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  if (!a1)
  {
    uint64_t v9 = FigSignalErrorAt();
    *((_DWORD *)v27 + 6) = v9;
    goto LABEL_12;
  }
  uint64_t v5 = (void *)MEMORY[0x1997179E0](v4);
  if (isSessionSidekick((uint64_t)a1))
  {
    int v6 = [a1 activate];
  }
  else
  {
    if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        [(id)v21[5] setInterruptionCalledOffAudioControlQueue:1];
      }
    }
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v8 = MXGetSerialQueue();
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __MXSessionBeginInterruption_WithFlags_block_invoke;
    v11[3] = &unk_1E57C9BB8;
    v11[4] = &v26;
    v11[5] = &v20;
    void v11[6] = &v12;
    v11[7] = &v16;
    v11[8] = a2;
    MXDispatchAsyncAndWait((uint64_t)"MXSessionBeginInterruption_WithFlags", (uint64_t)"MXSession_CInterfaceCommon.m", 641, 0, 0, v8, (uint64_t)v11);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"MXSessionBeginInterruption_WithFlags" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
    if (!MX_FeatureFlags_IsOffloadActivationOffACQEnabled()) {
      goto LABEL_11;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_11;
    }
    [(id)v21[5] setInterruptionCalledOffAudioControlQueue:0];
    if (*((_DWORD *)v27 + 6)) {
      goto LABEL_11;
    }
    int v6 = mxsession_handleAsyncDuckingSleep((void *)v21[5], *((unsigned __int8 *)v13 + 24), v17[6]);
  }
  *((_DWORD *)v27 + 6) = v6;
LABEL_11:
  uint64_t v9 = *((unsigned int *)v27 + 6);
LABEL_12:
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v26, 8);
  return v9;
}

void sub_194DF5DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _MXSessionBeginInterruption_WithSecTaskAndFlags(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = +[MXInitialization waitUntilMXIsFullyInitialized];
  if (a1)
  {
    uint64_t v7 = (void *)MEMORY[0x1997179E0](v6);
    if (isSessionSidekick((uint64_t)a1))
    {
      uint64_t v8 = [a1 activate];
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t v8 = [a1 _beginInterruptionWithSecTask:a2 andFlags:a3];
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"_MXSessionBeginInterruption_WithSecTaskAndFlags" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MXSessionEndInterruption(void *a1, const __CFString *a2)
{
  uint64_t v4 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v29 = 0;
  long long v30 = &v29;
  uint64_t v31 = 0x2020000000;
  int v32 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x3052000000;
  uint64_t v26 = __Block_byref_object_copy__6;
  int v27 = __Block_byref_object_dispose__6;
  uint64_t v28 = a1;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  if (a1)
  {
    uint64_t v5 = (void *)MEMORY[0x1997179E0](v4);
    if (isSessionSidekick((uint64_t)a1))
    {
      if (a2) {
        BOOL v6 = CFStringHasPrefix(a2, @"resumable") != 0;
      }
      else {
        BOOL v6 = 0;
      }
      int v11 = [a1 deactivate:v6 postInterruptionNotification:0];
      *((_DWORD *)v30 + 6) = v11;
    }
    else
    {
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [(id)v24[5] setInterruptionCalledOffAudioControlQueue:1];
        }
      }
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t v8 = MXGetSerialQueue();
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      v14[2] = __MXSessionEndInterruption_block_invoke;
      v14[3] = &unk_1E57C9BB8;
      v14[4] = &v29;
      v14[5] = &v23;
      v14[6] = &v15;
      v14[7] = &v19;
      v14[8] = a2;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionEndInterruption", (uint64_t)"MXSession_CInterfaceCommon.m", 778, 0, 0, v8, (uint64_t)v14);
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"MXSessionEndInterruption" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [(id)v24[5] setInterruptionCalledOffAudioControlQueue:0];
          uint64_t v9 = +[MXSessionManager sharedInstance];
          LODWORD(v1singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = *((_DWORD *)v20 + 6);
          [(MXSessionManager *)v9 sleepForAsyncDucking:*((unsigned __int8 *)v16 + 24) duration:v10];
        }
      }
    }
    uint64_t v12 = *((unsigned int *)v30 + 6);
  }
  else
  {
    uint64_t v12 = FigSignalErrorAt();
    *((_DWORD *)v30 + 6) = v12;
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v29, 8);
  return v12;
}

void sub_194DF6270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __MXSessionEndInterruption_block_invoke(void *a1)
{
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = [*(id *)(*(void *)(a1[5] + 8) + 40) _endInterruptionWithSecTask:0 andStatus:a1[8]];
  uint64_t v2 = +[MXSessionManager sharedInstance];
  uint64_t v3 = *(void *)(a1[6] + 8) + 24;
  uint64_t v4 = *(void *)(a1[7] + 8) + 24;
  return [(MXSessionManager *)v2 getAndResetAsyncDuckingParameters:v3 mostRecentDuckFadeDuration:v4];
}

uint64_t MXSessionEndInterruption_WithInterruptionNotification(void *a1, const __CFString *a2, int a3)
{
  uint64_t v6 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v31 = 0;
  int v32 = &v31;
  uint64_t v33 = 0x2020000000;
  int v34 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x3052000000;
  uint64_t v28 = __Block_byref_object_copy__6;
  uint64_t v29 = __Block_byref_object_dispose__6;
  long long v30 = a1;
  uint64_t v21 = 0;
  int v22 = &v21;
  uint64_t v23 = 0x2020000000;
  int v24 = 0;
  uint64_t v17 = 0;
  char v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  if (a1)
  {
    uint64_t v7 = (void *)MEMORY[0x1997179E0](v6);
    if (isSessionSidekick((uint64_t)a1))
    {
      if (a2) {
        BOOL v8 = CFStringHasPrefix(a2, @"resumable") != 0;
      }
      else {
        BOOL v8 = 0;
      }
      int v13 = [a1 deactivate:v8 postInterruptionNotification:a3 != 0];
      *((_DWORD *)v32 + 6) = v13;
    }
    else
    {
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [(id)v26[5] setInterruptionCalledOffAudioControlQueue:1];
        }
      }
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      double v10 = MXGetSerialQueue();
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = __MXSessionEndInterruption_WithInterruptionNotification_block_invoke;
      v16[3] = &unk_1E57C9BB8;
      v16[4] = &v31;
      v16[5] = &v25;
      v16[6] = &v17;
      v16[7] = &v21;
      v16[8] = a2;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionEndInterruption_WithInterruptionNotification", (uint64_t)"MXSession_CInterfaceCommon.m", 843, 0, 0, v10, (uint64_t)v16);
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"MXSessionEndInterruption_WithInterruptionNotification" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [(id)v26[5] setInterruptionCalledOffAudioControlQueue:0];
          uint64_t v11 = +[MXSessionManager sharedInstance];
          LODWORD(v12) = *((_DWORD *)v22 + 6);
          [(MXSessionManager *)v11 sleepForAsyncDucking:*((unsigned __int8 *)v18 + 24) duration:v12];
        }
      }
    }
    uint64_t v14 = *((unsigned int *)v32 + 6);
  }
  else
  {
    uint64_t v14 = FigSignalErrorAt();
    *((_DWORD *)v32 + 6) = v14;
  }
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v31, 8);
  return v14;
}

void sub_194DF660C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _MXSessionEndInterruption(void *a1, const __CFString *a2)
{
  uint64_t v4 = +[MXInitialization waitUntilMXIsFullyInitialized];
  if (a1)
  {
    uint64_t v5 = (void *)MEMORY[0x1997179E0](v4);
    if (isSessionSidekick((uint64_t)a1))
    {
      if (a2) {
        BOOL v6 = CFStringHasPrefix(a2, @"resumable") != 0;
      }
      else {
        BOOL v6 = 0;
      }
      uint64_t v8 = [a1 deactivate:v6 postInterruptionNotification:0];
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t v8 = [a1 _endInterruptionWithSecTask:0 andStatus:a2];
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"_MXSessionEndInterruption" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MXSessionEndInterruption_WithSecTaskAndStatus(void *a1, uint64_t a2, const __CFString *a3)
{
  uint64_t v6 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v31 = 0;
  int v32 = &v31;
  uint64_t v33 = 0x2020000000;
  int v34 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x3052000000;
  uint64_t v28 = __Block_byref_object_copy__6;
  uint64_t v29 = __Block_byref_object_dispose__6;
  long long v30 = a1;
  uint64_t v21 = 0;
  int v22 = &v21;
  uint64_t v23 = 0x2020000000;
  int v24 = 0;
  uint64_t v17 = 0;
  char v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  if (a1)
  {
    uint64_t v7 = (void *)MEMORY[0x1997179E0](v6);
    if (isSessionSidekick((uint64_t)a1))
    {
      if (a3) {
        BOOL v8 = CFStringHasPrefix(a3, @"resumable") != 0;
      }
      else {
        BOOL v8 = 0;
      }
      int v13 = [a1 deactivate:v8 postInterruptionNotification:0];
      *((_DWORD *)v32 + 6) = v13;
    }
    else
    {
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [(id)v26[5] setInterruptionCalledOffAudioControlQueue:1];
        }
      }
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      double v10 = MXGetSerialQueue();
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = __MXSessionEndInterruption_WithSecTaskAndStatus_block_invoke;
      v16[3] = &unk_1E57C6268;
      v16[4] = &v31;
      v16[5] = &v25;
      v16[8] = a2;
      void v16[9] = a3;
      v16[6] = &v17;
      v16[7] = &v21;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionEndInterruption_WithSecTaskAndStatus", (uint64_t)"MXSession_CInterfaceCommon.m", 923, 0, 0, v10, (uint64_t)v16);
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"MXSessionEndInterruption_WithSecTaskAndStatus" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
      if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [(id)v26[5] setInterruptionCalledOffAudioControlQueue:0];
          uint64_t v11 = +[MXSessionManager sharedInstance];
          LODWORD(v12) = *((_DWORD *)v22 + 6);
          [(MXSessionManager *)v11 sleepForAsyncDucking:*((unsigned __int8 *)v18 + 24) duration:v12];
        }
      }
    }
    uint64_t v14 = *((unsigned int *)v32 + 6);
  }
  else
  {
    uint64_t v14 = FigSignalErrorAt();
    *((_DWORD *)v32 + 6) = v14;
  }
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v31, 8);
  return v14;
}

void sub_194DF6AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _MXSessionEndInterruption_WithSecTaskAndStatus(void *a1, uint64_t a2, const __CFString *a3)
{
  uint64_t v6 = +[MXInitialization waitUntilMXIsFullyInitialized];
  if (a1)
  {
    uint64_t v7 = (void *)MEMORY[0x1997179E0](v6);
    if (isSessionSidekick((uint64_t)a1))
    {
      if (a3) {
        BOOL v8 = CFStringHasPrefix(a3, @"resumable") != 0;
      }
      else {
        BOOL v8 = 0;
      }
      uint64_t v10 = [a1 deactivate:v8 postInterruptionNotification:0];
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t v10 = [a1 _endInterruptionWithSecTask:a2 andStatus:a3];
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"_MXSessionEndInterruption_WithSecTaskAndStatus" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
    }
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

unint64_t MXIsTypeOfSession(unint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    CFTypeID v2 = CFGetTypeID((CFTypeRef)result);
    return v2 == CMSessionGetTypeID() || isCoreSessionSidekick(v1) != 0;
  }
  return result;
}

uint64_t MXIsTypeOfMXSession(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    if ([(id)result isMemberOfClass:objc_opt_class()]) {
      return 1;
    }
    else {
      return [v1 isMemberOfClass:objc_opt_class()];
    }
  }
  return result;
}

uint64_t MXSessionAddResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MX_FeatureFlags_IsBypassCodecArbitrationEnabled()) {
    return 0;
  }
  uint64_t v9 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3052000000;
  v15[3] = __Block_byref_object_copy__6;
  v15[4] = __Block_byref_object_dispose__6;
  v15[5] = a1;
  if (a1)
  {
    uint64_t v10 = (void *)MEMORY[0x1997179E0](v9);
    char v11 = isSessionSidekick(a1);
    if ((v11 & 1) == 0)
    {
      double v12 = MXGetSerialQueue();
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      v14[2] = __MXSessionAddResource_block_invoke;
      v14[3] = &unk_1E57C6130;
      v14[4] = &v16;
      v14[5] = v15;
      v14[6] = a2;
      v14[7] = a3;
      v14[8] = a4;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionAddResource", (uint64_t)"MXSession_CInterfaceCommon.m", 1048, 0, 0, v12, (uint64_t)v14);
    }
    if (v11) {
      uint64_t v8 = 4294954309;
    }
    else {
      uint64_t v8 = *((unsigned int *)v17 + 6);
    }
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
    *((_DWORD *)v17 + 6) = v8;
  }
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v16, 8);
  return v8;
}

void sub_194DF6F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __MXSessionAddResource_block_invoke(void *a1)
{
  uint64_t result = [*(id *)(*(void *)(a1[5] + 8) + 40) _addResource:a1[6] resourceInfo:a1[7] token:a1[8]];
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t MXSessionRemoveResource(uint64_t a1, uint64_t a2)
{
  if (MX_FeatureFlags_IsBypassCodecArbitrationEnabled()) {
    return 0;
  }
  uint64_t v5 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3052000000;
  v11[3] = __Block_byref_object_copy__6;
  v11[4] = __Block_byref_object_dispose__6;
  v11[5] = a1;
  if (a1)
  {
    uint64_t v6 = (void *)MEMORY[0x1997179E0](v5);
    char v7 = isSessionSidekick(a1);
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = MXGetSerialQueue();
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __MXSessionRemoveResource_block_invoke;
      v10[3] = &unk_1E57C9240;
      v10[4] = &v12;
      void v10[5] = v11;
      v10[6] = a2;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionRemoveResource", (uint64_t)"MXSession_CInterfaceCommon.m", 1078, 0, 0, v8, (uint64_t)v10);
    }
    if (v7) {
      uint64_t v4 = 4294954309;
    }
    else {
      uint64_t v4 = *((unsigned int *)v13 + 6);
    }
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
    *((_DWORD *)v13 + 6) = v4;
  }
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v12, 8);
  return v4;
}

void sub_194DF7128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __MXSessionRemoveResource_block_invoke(void *a1)
{
  uint64_t result = [*(id *)(*(void *)(a1[5] + 8) + 40) _removeResourceWithToken:a1[6]];
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t FigStarkModeChangeGetActions(_OWORD *a1, _OWORD *a2, int *a3, int a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = &qword_1E9359000;
  if (a4)
  {
    if (sFigStarkModeActionMap_V1) {
      goto LABEL_7;
    }
    uint64_t v9 = 1;
  }
  else
  {
    if (sFigStarkModeActionMap_V2) {
      goto LABEL_7;
    }
    uint64_t v9 = 2;
  }
  fsm_setupStarkModeActionMap(v9);
LABEL_7:
  long long v10 = a1[1];
  *(_OWORD *)v54 = *a1;
  *(_OWORD *)&v54[16] = v10;
  int FigStarkModeStateEncoding = fsm_getFigStarkModeStateEncoding((int *)v54);
  long long v12 = a2[1];
  *(_OWORD *)v54 = *a2;
  *(_OWORD *)&v54[16] = v12;
  int v13 = fsm_getFigStarkModeStateEncoding((int *)v54);
  uint64_t v14 = a3[1];
  long long v15 = *(_OWORD *)(a3 + 6);
  *(_OWORD *)v54 = *(_OWORD *)(a3 + 2);
  *(_OWORD *)&v54[16] = v15;
  *(_OWORD *)&v54[32] = *(_OWORD *)(a3 + 10);
  int v16 = a3[14];
  if (v14 > 2) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = qword_194EDEA70[v14];
  }
  int v19 = a3[15];
  int v18 = a3[16];
  long long v52 = *(_OWORD *)&v54[24];
  uint64_t v53 = *(void *)&v54[40];
  unsigned int v20 = fsm_getFigStarkModeResourceChangeRequestEncoding((int *)&v52);
  uint64_t v21 = 0;
  if (v16 > 9)
  {
    if (v16 == 10)
    {
      uint64_t v21 = 0x200000000000;
    }
    else if (v16 == 11)
    {
      uint64_t v21 = 0x400000000000;
    }
  }
  else if (v16 == -1)
  {
    uint64_t v21 = 0x100000000000;
  }
  else if (!v16)
  {
    uint64_t v21 = 0x80000000000;
  }
  if ((v19 + 1) > 2) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = qword_194EDEA88[v19 + 1];
  }
  if ((v18 + 1) > 2) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = qword_194EDEAA0[v18 + 1];
  }
  unint64_t v24 = v23 | v22 | v21 | v17 | ((unint64_t)v20 << 23);
  uint64_t v25 = *a3;
  *(_OWORD *)v54 = *(_OWORD *)(a3 + 1);
  *(_OWORD *)&v54[12] = *((_OWORD *)a3 + 1);
  if (v25 > 2) {
    int v26 = 0;
  }
  else {
    int v26 = dword_194EDEAB8[v25];
  }
  long long v52 = *(_OWORD *)&v54[4];
  uint64_t v53 = *(void *)&v54[20];
  uint64_t v27 = v26 | (8 * fsm_getFigStarkModeResourceChangeRequestEncoding((int *)&v52));
  int v28 = a3[8] != 0;
  if (v16) {
    v28 |= 4u;
  }
  if (v19) {
    v28 |= 8u;
  }
  if (v18) {
    int v29 = v28 | 0x10;
  }
  else {
    int v29 = v28;
  }
  int v30 = 2 * (a3[2] != 0);
  if (a4)
  {
    if (sFigStarkModeActionMap_V1)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)sFigStarkModeActionMap_V1);
      if (Count >= 1)
      {
        CFIndex v32 = Count;
        uint64_t v50 = v24;
        CFIndex v33 = 0;
        LODWORD(v34) = 0;
        int v48 = v30;
        uint64_t v35 = v27;
        int v36 = v29;
        do
        {
          uint64_t v37 = v8;
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v8[225], v33);
          int v39 = fsm_getFigStarkModeChangeActionFromDict(ValueAtIndex, FigStarkModeStateEncoding, v13, v50, v36);
          CFDictionaryRef v40 = ValueAtIndex;
          uint64_t v8 = v37;
          uint64_t v34 = v39 | v34 | fsm_getFigStarkModeChangeActionFromDict(v40, FigStarkModeStateEncoding, v13, v35, v48);
          ++v33;
        }
        while (v32 != v33);
        return v34;
      }
    }
    return 0;
  }
  if (!sFigStarkModeActionMap_V2) {
    return 0;
  }
  CFIndex v41 = CFArrayGetCount((CFArrayRef)sFigStarkModeActionMap_V2);
  if (v41 < 1) {
    return 0;
  }
  uint64_t v49 = v27;
  uint64_t v51 = v24;
  CFIndex v42 = 0;
  LODWORD(v34) = 0;
  int v43 = v29;
  do
  {
    CFIndex v44 = v41;
    CFDictionaryRef v45 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)sFigStarkModeActionMap_V2, v42);
    int v46 = fsm_getFigStarkModeChangeActionFromDict(v45, FigStarkModeStateEncoding, v13, v51, v43);
    uint64_t v34 = v46 | v34 | fsm_getFigStarkModeChangeActionFromDict(v45, FigStarkModeStateEncoding, v13, v49, v30);
    CFIndex v41 = v44;
    ++v42;
  }
  while (v44 != v42);
  return v34;
}

void fsm_setupStarkModeActionMap(uint64_t a1)
{
  CelestialGetModelSpecificName();
  uint64_t v2 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (!v2) {
    return;
  }
  uint64_t v3 = (const void *)v2;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v3)
    || (CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Version%u", a1)) == 0))
  {
    CFTypeRef v9 = v3;
LABEL_7:
    CFRelease(v9);
    return;
  }
  CFStringRef v7 = v6;
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)v3, v6);
  if (Value) {
    CFTypeRef v9 = CFRetain(Value);
  }
  else {
    CFTypeRef v9 = 0;
  }
  CFRelease(v7);
  CFRelease(v3);
  if (v9)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
    ActionMapFromDict = fsm_createActionMapFromDict((const __CFDictionary *)v9, @"MainAudioRequest");
    if (ActionMapFromDict)
    {
      CFArrayRef v12 = ActionMapFromDict;
      v24.length = CFArrayGetCount(ActionMapFromDict);
      v24.location = 0;
      CFArrayAppendArray(Mutable, v12, v24);
      CFRelease(v12);
    }
    int v13 = fsm_createActionMapFromDict((const __CFDictionary *)v9, @"SpeechRequest");
    if (v13)
    {
      CFArrayRef v14 = v13;
      v25.length = CFArrayGetCount(v13);
      v25.location = 0;
      CFArrayAppendArray(Mutable, v14, v25);
      CFRelease(v14);
    }
    long long v15 = fsm_createActionMapFromDict((const __CFDictionary *)v9, @"PhoneCallRequest");
    if (v15)
    {
      CFArrayRef v16 = v15;
      v26.length = CFArrayGetCount(v15);
      v26.location = 0;
      CFArrayAppendArray(Mutable, v16, v26);
      CFRelease(v16);
    }
    uint64_t v17 = fsm_createActionMapFromDict((const __CFDictionary *)v9, @"ScreenRequest");
    if (v17)
    {
      CFArrayRef v18 = v17;
      v27.length = CFArrayGetCount(v17);
      v27.location = 0;
      CFArrayAppendArray(Mutable, v18, v27);
      CFRelease(v18);
    }
    int v19 = fsm_createActionMapFromDict((const __CFDictionary *)v9, @"TurnByTurnRequest");
    if (v19)
    {
      CFArrayRef v20 = v19;
      v28.length = CFArrayGetCount(v19);
      v28.location = 0;
      CFArrayAppendArray(Mutable, v20, v28);
      CFRelease(v20);
    }
    CFArrayRef Copy = CFArrayCreateCopy(v5, Mutable);
    uint64_t v22 = &sFigStarkModeActionMap_V2;
    if (a1 == 1) {
      uint64_t v22 = &sFigStarkModeActionMap_V1;
    }
    *uint64_t v22 = (uint64_t)Copy;
    if (Mutable) {
      CFRelease(Mutable);
    }
    goto LABEL_7;
  }
}

uint64_t fsm_getFigStarkModeStateEncoding(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 > 2) {
    int v2 = 0;
  }
  else {
    int v2 = dword_194EDEAB8[v1];
  }
  uint64_t v3 = a1[2];
  if (v3 > 2) {
    int v4 = 0;
  }
  else {
    int v4 = dword_194EDEAC4[v3];
  }
  uint64_t v5 = a1[4];
  if (v5 > 2) {
    int v6 = 0;
  }
  else {
    int v6 = dword_194EDEAD0[v5];
  }
  int v7 = a1[5];
  uint64_t v8 = a1[6];
  if (v7) {
    int v9 = 0;
  }
  else {
    int v9 = 512;
  }
  if (v7 == 10) {
    int v10 = 1024;
  }
  else {
    int v10 = v9;
  }
  if (v7 == 11) {
    int v11 = 2048;
  }
  else {
    int v11 = v10;
  }
  if (v8 > 2) {
    int v12 = 0;
  }
  else {
    int v12 = dword_194EDEADC[v8];
  }
  uint64_t v13 = a1[7];
  if (v13 > 2) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = dword_194EDEAE8[v13];
  }
  return v4 | v2 | v12 | v6 | v11 | v14;
}

uint64_t fsm_getFigStarkModeChangeActionFromDict(const __CFDictionary *a1, int a2, int a3, uint64_t a4, int a5)
{
  int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"PreviousModeEncoding");
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  int v11 = valuePtr & a2;
  BOOL v12 = (valuePtr & a2 & 7) == 0;
  if ((valuePtr & a2 & 0x38) == 0) {
    BOOL v12 = 1;
  }
  if ((v11 & 0x1C0) == 0) {
    BOOL v12 = 1;
  }
  if ((v11 & 0xE00) == 0) {
    BOOL v12 = 1;
  }
  if ((v11 & 0x7000) == 0) {
    BOOL v12 = 1;
  }
  int v13 = (v11 & 0x38000) == 0 || v12;
  int v29 = 0;
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CurrentModeEncoding");
  CFNumberGetValue(v14, kCFNumberSInt32Type, &v29);
  int v15 = v29 & a3;
  BOOL v16 = (v29 & a3 & 7) == 0;
  if ((v29 & a3 & 0x38) == 0) {
    BOOL v16 = 1;
  }
  if ((v15 & 0x1C0) == 0) {
    BOOL v16 = 1;
  }
  if ((v15 & 0xE00) == 0) {
    BOOL v16 = 1;
  }
  if ((v15 & 0x7000) == 0) {
    BOOL v16 = 1;
  }
  int v17 = (v15 & 0x38000) == 0 || v16;
  uint64_t v28 = 0;
  CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(a1, @"ModeRequestEncoding");
  CFNumberGetValue(v18, kCFNumberSInt64Type, &v28);
  unint64_t v19 = v28 & a4;
  uint64_t v20 = v28 & a4 & 7;
  if ((a5 & 2) != 0)
  {
    if (!v20
      || (v19 & 0x780000) == 0
      || (v19 & 0x78000) == 0
      || (v19 & 0x7800) == 0
      || (v19 & 0xF8) == 0
      || (v19 & 0x700) == 0)
    {
      goto LABEL_34;
    }
  }
  else
  {
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(v19);
    if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v21, (int8x16_t)xmmword_194EDEA30)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v21, (int8x16_t)xmmword_194EDEA40))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v21, (int8x16_t)xmmword_194EDEA50)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v21, (int8x16_t)xmmword_194EDEA60)))))) & 1) != 0|| !v20)
    {
LABEL_34:
      int v22 = 0;
      goto LABEL_35;
    }
  }
  int v22 = 1;
LABEL_35:
  int v27 = 0;
  CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(a1, @"RequestType");
  CFNumberGetValue(v23, kCFNumberSInt32Type, &v27);
  uint64_t result = 0;
  if (v22 && !(v13 | v17))
  {
    if ((v27 & a5) != 0)
    {
      uint64_t v26 = 0;
      CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(a1, @"ModeChangeAction");
      CFNumberGetValue(v25, kCFNumberSInt64Type, &v26);
      return v26;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFArray *fsm_createActionMapFromDict(const __CFDictionary *a1, const void *a2)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (!FigCFEqual()
    && !FigCFEqual()
    && !FigCFEqual()
    && !FigCFEqual())
  {
    FigCFEqual();
  }
  if (!Value) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(Value);
  if (Count < 1) {
    return 0;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v4 = 0;
  CFArrayRef v42 = Value;
  CFAllocatorRef v45 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  do
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v4);
    CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"PreviousMode");
    fsm_translatePreviousOrCurrentModeDict(v7);
    UInt32 = (const void *)FigCFNumberCreateUInt32();
    CFDictionarySetValue(Mutable, @"PreviousModeEncoding", UInt32);
    if (UInt32) {
      CFRelease(UInt32);
    }
    CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"CurrentMode");
    fsm_translatePreviousOrCurrentModeDict(v9);
    int v10 = (const void *)FigCFNumberCreateUInt32();
    CFDictionarySetValue(Mutable, @"CurrentModeEncoding", v10);
    if (v10) {
      CFRelease(v10);
    }
    CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"ModeChangeRequest");
    if (v11)
    {
      CFDictionaryRef v12 = v11;
      CFDictionaryGetValue(v11, @"Requestor");
      fsm_getFigStarkModeEntityEncodingFromCFString();
      if (FigCFEqual())
      {
        int v13 = CFDictionaryGetValue(v12, @"TransferType");
        fsm_getFigStarkModeTransferTypeEncodingFromCFString((uint64_t)v13);
        CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue(v12, @"TransferPriority");
        fsm_getFigStarkModeTransferPriorityEncodingFromCFArray(v14);
        CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(v12, @"TakeConstraint");
        fsm_getFigStarkModeConstraintEncodingFromCFArray(v15);
        CFArrayRef v16 = (const __CFArray *)CFDictionaryGetValue(v12, @"BorrowConstraint");
        fsm_getFigStarkModeConstraintEncodingFromCFArray(v16);
        CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(v12, @"UnborrowConstraint");
        fsm_getFigStarkModeConstraintEncodingFromCFArray(v17);
      }
      else
      {
        if (FigCFEqual())
        {
          CFNumberRef v18 = CFDictionaryGetValue(v12, @"TransferType");
          fsm_getFigStarkModeTransferTypeEncodingFromCFString((uint64_t)v18);
          CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(v12, @"TransferPriority");
          fsm_getFigStarkModeTransferPriorityEncodingFromCFArray(v19);
          CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(v12, @"TakeConstraint");
          fsm_getFigStarkModeConstraintEncodingFromCFArray(v20);
          CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(v12, @"BorrowConstraint");
          fsm_getFigStarkModeConstraintEncodingFromCFArray(v21);
          CFArrayRef v22 = (const __CFArray *)CFDictionaryGetValue(v12, @"UnborrowConstraint");
          fsm_getFigStarkModeConstraintEncodingFromCFArray(v22);
        }
        CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue(v12, @"SpeechState");
        if (v23)
        {
          CFArrayRef v24 = v23;
          CFIndex v25 = CFArrayGetCount(v23);
          if (v25 >= 1)
          {
            CFIndex v26 = v25;
            CFIndex v27 = 0;
            int v28 = 0;
            do
            {
              CFArrayGetValueAtIndex(v24, v27);
              if (FigCFEqual())
              {
                v28 |= 1u;
              }
              else if (FigCFEqual())
              {
                v28 |= 2u;
              }
              else if (FigCFEqual())
              {
                v28 |= 4u;
              }
              else if (FigCFEqual())
              {
                v28 |= 8u;
              }
              ++v27;
            }
            while (v26 != v27);
          }
        }
        CFArrayRef v29 = (const __CFArray *)CFDictionaryGetValue(v12, @"PhoneCallState");
        if (v29) {
          fsm_getFigStarkModeTriStateEncodingFromCFArray(v29);
        }
        CFArrayRef v30 = (const __CFArray *)CFDictionaryGetValue(v12, @"TurnByTurnState");
        if (v30) {
          fsm_getFigStarkModeTriStateEncodingFromCFArray(v30);
        }
        CFArrayRef Value = v42;
      }
    }
    UInt64 = (const void *)FigCFNumberCreateUInt64();
    CFDictionarySetValue(Mutable, @"ModeRequestEncoding", UInt64);
    if (UInt64) {
      CFRelease(UInt64);
    }
    CFArrayRef v32 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"ModeChangeAction");
    if (v32)
    {
      CFArrayRef v33 = v32;
      CFIndex v34 = CFArrayGetCount(v32);
      if (v34 >= 1)
      {
        CFIndex v35 = v34;
        CFIndex v36 = 0;
        int v37 = 0;
        do
        {
          CFArrayGetValueAtIndex(v33, v36);
          if (FigCFEqual())
          {
            v37 |= 1u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x20000u;
          }
          else if (FigCFEqual())
          {
            v37 |= 2u;
          }
          else if (FigCFEqual())
          {
            v37 |= 4u;
          }
          else if (FigCFEqual())
          {
            v37 |= 8u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x10u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x20u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x40u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x80u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x100u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x200u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x400u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x800u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x1000u;
          }
          else if (FigCFEqual())
          {
            v37 |= 0x2000u;
          }
          else
          {
            if (FigCFEqual())
            {
              v37 |= 0x4000u;
            }
            else if (FigCFEqual())
            {
              v37 |= 0x8000u;
            }
            else if (FigCFEqual())
            {
              v37 |= 0x10000u;
            }
            CFArrayRef Value = v42;
          }
          ++v36;
        }
        while (v35 != v36);
      }
    }
    CFAllocatorRef v3 = v45;
    uint64_t v38 = (const void *)FigCFNumberCreateUInt64();
    CFDictionarySetValue(Mutable, @"ModeChangeAction", v38);
    if (v38) {
      CFRelease(v38);
    }
    int v39 = (const void *)FigCFNumberCreateUInt32();
    CFDictionarySetValue(Mutable, @"RequestType", v39);
    if (v39) {
      CFRelease(v39);
    }
    CFDictionaryRef v40 = theArray;
    CFArrayAppendValue(theArray, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    ++v4;
  }
  while (v4 != Count);
  return v40;
}

CFDictionaryRef fsm_translatePreviousOrCurrentModeDict(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    CFDictionaryGetValue(result, @"ScreenEntity");
    int FigStarkModeEntityEncodingFromCFString = fsm_getFigStarkModeEntityEncodingFromCFString();
    CFDictionaryGetValue(v1, @"MainAudioEntity");
    int v3 = FigStarkModeEntityEncodingFromCFString | (8 * fsm_getFigStarkModeEntityEncodingFromCFString());
    CFDictionaryGetValue(v1, @"SpeechEntity");
    unsigned int v4 = v3 | (fsm_getFigStarkModeEntityEncodingFromCFString() << 6);
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v1, @"SpeechMode");
    if (Value && (CFArrayRef v6 = Value, Count = CFArrayGetCount(Value), Count >= 1))
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      int v10 = 0;
      do
      {
        CFArrayGetValueAtIndex(v6, v9);
        if (FigCFEqual())
        {
          v10 |= 1u;
        }
        else if (FigCFEqual())
        {
          v10 |= 2u;
        }
        else if (FigCFEqual())
        {
          v10 |= 4u;
        }
        ++v9;
      }
      while (v8 != v9);
    }
    else
    {
      int v10 = 7;
    }
    CFDictionaryGetValue(v1, @"PhoneCallEntity");
    unsigned int v11 = v4 | (v10 << 9) | (fsm_getFigStarkModeEntityEncodingFromCFString() << 12);
    CFDictionaryGetValue(v1, @"TurnByTurnEntity");
    return (const __CFDictionary *)(v11 | (fsm_getFigStarkModeEntityEncodingFromCFString() << 15));
  }
  return result;
}

uint64_t fsm_getFigStarkModeEntityEncodingFromCFString()
{
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 2;
  }
  if (FigCFEqual()) {
    return 4;
  }
  return 7;
}

uint64_t fsm_getFigStarkModeTransferTypeEncodingFromCFString(uint64_t result)
{
  if (result)
  {
    if (FigCFEqual())
    {
      return 1;
    }
    else if (FigCFEqual())
    {
      return 2;
    }
    else if (FigCFEqual())
    {
      return 4;
    }
    else if (FigCFEqual())
    {
      return 8;
    }
    else
    {
      return 16 * (FigCFEqual() != 0);
    }
  }
  return result;
}

uint64_t fsm_getFigStarkModeTransferPriorityEncodingFromCFArray(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 7;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  LODWORD(v5) = 0;
  do
  {
    CFArrayGetValueAtIndex(a1, v4);
    if (FigCFEqual())
    {
      uint64_t v5 = v5 | 1;
    }
    else if (FigCFEqual())
    {
      uint64_t v5 = v5 | 2;
    }
    else if (FigCFEqual())
    {
      uint64_t v5 = v5 | 4;
    }
    else
    {
      uint64_t v5 = v5;
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t fsm_getFigStarkModeConstraintEncodingFromCFArray(const __CFArray *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 15;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  LODWORD(v5) = 0;
  do
  {
    CFArrayGetValueAtIndex(a1, v4);
    if (FigCFEqual())
    {
      uint64_t v5 = v5 | 1;
    }
    else if (FigCFEqual())
    {
      uint64_t v5 = v5 | 2;
    }
    else if (FigCFEqual())
    {
      uint64_t v5 = v5 | 4;
    }
    else if (FigCFEqual())
    {
      uint64_t v5 = v5 | 8;
    }
    else
    {
      uint64_t v5 = v5;
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t fsm_getFigStarkModeTriStateEncodingFromCFArray(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 7;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  LODWORD(v5) = 0;
  do
  {
    CFArrayGetValueAtIndex(a1, v4);
    if (FigCFEqual())
    {
      uint64_t v5 = v5 | 1;
    }
    else if (FigCFEqual())
    {
      uint64_t v5 = v5 | 2;
    }
    else if (FigCFEqual())
    {
      uint64_t v5 = v5 | 4;
    }
    else
    {
      uint64_t v5 = v5;
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t fsm_getFigStarkModeResourceChangeRequestEncoding(int *a1)
{
  int v2 = a1[4];
  int v1 = a1[5];
  int v3 = *a1;
  int v4 = a1[1];
  switch(*a1)
  {
    case 20:
      int v3 = 0;
      int v5 = 2;
      goto LABEL_9;
    case 21:
      int v3 = 0;
      int v1 = 0;
      int v2 = 0;
      int v5 = 4;
      goto LABEL_9;
    case 22:
      int v1 = 0;
      int v5 = 8;
      int v3 = a1[4];
      int v2 = 0;
      goto LABEL_9;
    case 23:
      int v3 = 0;
      int v1 = 0;
      int v2 = 0;
      int v5 = 16;
      goto LABEL_9;
    default:
      if (!v3)
      {
        int v5 = 1;
        int v1 = 0;
        int v2 = 0;
LABEL_12:
        int v6 = 32;
        goto LABEL_16;
      }
      int v5 = 0;
      int v3 = a1[4];
LABEL_9:
      switch(v4)
      {
        case 500:
          int v6 = 128;
          break;
        case 100:
          int v6 = 64;
          break;
        case 0:
          goto LABEL_12;
        default:
          int v6 = 0;
          break;
      }
LABEL_16:
      int v7 = 0;
      if (v2 == 1000) {
        int v8 = 2048;
      }
      else {
        int v8 = 0;
      }
      if (v2 == 500) {
        int v9 = 1024;
      }
      else {
        int v9 = v8;
      }
      if (v2 == 100) {
        int v10 = 512;
      }
      else {
        int v10 = 0;
      }
      if (v2) {
        int v11 = v10;
      }
      else {
        int v11 = 256;
      }
      if (v2 <= 499) {
        int v12 = v11;
      }
      else {
        int v12 = v9;
      }
      if (v1 == 1000) {
        int v13 = 0x8000;
      }
      else {
        int v13 = 0;
      }
      if (v1 == 500) {
        int v14 = 0x4000;
      }
      else {
        int v14 = v13;
      }
      if (v1 == 100) {
        int v15 = 0x2000;
      }
      else {
        int v15 = 0;
      }
      if (v1) {
        int v16 = v15;
      }
      else {
        int v16 = 4096;
      }
      if (v1 <= 499) {
        int v17 = v16;
      }
      else {
        int v17 = v14;
      }
      if (v3 > 499)
      {
        if (v3 == 500)
        {
          int v7 = 0x40000;
        }
        else if (v3 == 1000)
        {
          int v7 = 0x80000;
        }
      }
      else if (v3)
      {
        if (v3 == 100) {
          int v7 = 0x20000;
        }
      }
      else
      {
        int v7 = 0x10000;
      }
      return v6 | v5 | v12 | v17 | v7;
  }
}

CFStringRef systemController_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSystemController %p]", a1);
}

void systemController_Finalize()
{
  uint64_t DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  CMSessionGetNotificationCenter(DerivedStorage);
  FigNotificationCenterRemoveWeakListeners();
  int v1 = *DerivedStorage;
}

__CFString *systemController_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSystemController %p MXSystemController %p figOwnedAudioSessionID %d", a1, *(void *)DerivedStorage, *(unsigned int *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t systemController_CopyDeviceRouteForAudioCategory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CMSessionMgrCopyDeviceRouteForRouteConfiguration(a2, @"Default", a3, a4, 0);
}

uint64_t systemController_CopyVolumeCategoryAndMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return 0;
}

uint64_t systemController_HasRouteSharingPolicyLongFormVideo(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return CMSessionMgrHasRouteSharingPolicyLongFormVideo(a2, a3);
}

uint64_t systemController_ShouldHijackAudioRoute(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMSessionMgrShouldHijackAudioRoute(a2, a3, a4, a5);
}

uint64_t systemController_ToggleInputMute()
{
  uint64_t v0 = *(void **)CMBaseObjectGetDerivedStorage();
  return [v0 toggleInputMute];
}

uint64_t systemController_SetInputMute(uint64_t a1, _OWORD *a2, int a3)
{
  int v5 = *(void **)CMBaseObjectGetDerivedStorage();
  long long v6 = a2[1];
  v8[0] = *a2;
  v8[1] = v6;
  return [v5 setInputMute:v8 muteValue:a3 != 0];
}

uint64_t systemController_GetInputMute(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  int v5 = *(void **)CMBaseObjectGetDerivedStorage();
  long long v6 = a2[1];
  v8[0] = *a2;
  v8[1] = v6;
  return [v5 getInputMute:v8 outMuteValue:a3];
}

uint64_t systemController_ClearUplinkMutedCache()
{
  uint64_t v0 = *(void **)CMBaseObjectGetDerivedStorage();
  return [v0 clearUplinkMutedCache];
}

uint64_t systemController_AllowAppToInitiateRecordingTemporarily(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = *(void **)CMBaseObjectGetDerivedStorage();
  return [v3 setAttributeForKey:@"AllowAppToInitiateRecordingTemporarily" andValue:a2];
}

uint64_t systemController_GrantMediaEndowment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(void **)CMBaseObjectGetDerivedStorage();
  return [v5 grantMediaEndowmentWithEnvironmentID:a2 endowmentPayload:a3];
}

uint64_t systemController_RevokeMediaEndowment(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = *(void **)CMBaseObjectGetDerivedStorage();
  return [v3 revokeMediaEndowmentWithEnvironmentID:a2];
}

uint64_t systemController_SetSilentMode(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = *(void **)CMBaseObjectGetDerivedStorage();
  return [v9 setSilentMode:a2 != 0 untilTime:a3 reason:a4 clientType:a5];
}

uint64_t systemController_RemoteDeviceControlIsAllowed(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v3 = *(void **)CMBaseObjectGetDerivedStorage();
  return [v3 remoteDeviceControlIsAllowed:a2];
}

uint64_t systemController_GetVolumeButtonDelta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(void **)CMBaseObjectGetDerivedStorage();
  return [v5 getVolumeButtonDelta:a2 outVolumeDelta:a3];
}

uint64_t systemController_AllowAppsToInitiatePlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *(void **)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = [MEMORY[0x1E4F1CAD0] setWithArray:a2];
  return [v7 allowAppsToInitiatePlayback:v8 clientType:a3 isTemporary:a4];
}

void __fsc_createPropertyMappingDicts_block_invoke(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAllocatorRef v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  gFigSystemControllerSetPropertyMapping = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, v3, v4);
  gFigSystemControllerCopyPropertyMapping = (uint64_t)Mutable;
  if (gFigSystemControllerSetPropertyMapping) {
    BOOL v6 = Mutable == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -17650;
  }
  else
  {
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"PIDToInheritApplicationStateFrom", @"PIDToInheritApplicationStateFrom");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"CanBeNowPlayingApp", @"CanBeNowPlayingApp");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"AppWantsVolumeChanges", @"AppWantsVolumeChanges");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"SubscribeToNotifications", @"SubscribeToNotifications");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"PickedRoute", @"PickedRoute");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"RouteAwayFromAirPlay", @"RouteAwayFromAirPlay");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"PickedRouteWithPassword", @"PickedRouteWithPassword");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"AvailableForVoicePrompts", @"AvailableForVoicePrompts");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"AirPlayScreenSuspended", @"AirPlayScreenSuspended");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"AllowAppToInitiatePlaybackTemporarily", @"AllowAppToInitiatePlaybackTemporarily");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"HeadphoneVolumeLimit", @"HeadphoneVolumeLimit");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"VibeIntensity", @"VibeIntensity");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"FullMute", @"FullMute");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"UplinkMute", @"UplinkMute");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"DownlinkMute", @"DownlinkMute");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"ThermalControlInfo", @"ThermalControlInfo");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"AppToInterruptCurrentNowPlayingSession", @"AppToInterruptCurrentNowPlayingSession");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"AllowAppToFadeInTemporarily", @"AllowAppToFadeInTemporarily");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"OverrideToPartnerRoute", @"OverrideToPartnerRoute");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"InterruptAudioSessionIDForHandoff", @"InterruptAudioSessionIDForHandoff");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"PostInterruptionEndedNotification", @"PostInterruptionEndedNotification");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"WombatEnabled", @"WombatEnabled");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"CallScreeningStatus", @"CallScreeningStatus");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"MaximumSpeakerVolumeLimit", @"MaximumSpeakerVolumeLimit");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"DuckScalarForVoiceOver", @"DuckScalarForVoiceOver");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"RemoteDeviceIDs", @"RemoteDeviceIDs");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerSetPropertyMapping, @"PopNowPlayingAppStack", @"PopNowPlayingAppStack");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"ActiveAudioRoute", @"ActiveAudioRoute");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CanBeNowPlayingApp", @"CanBeNowPlayingApp");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"AppWantsVolumeChanges", @"AppWantsVolumeChanges");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"PIDToInheritApplicationStateFrom", @"PIDToInheritApplicationStateFrom");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"PickableRoutes", @"PickableRoutes");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"PickedRoute", @"PickedRoute");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CurrentExternalScreen", @"ExternalScreenType");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"HeadphoneVolumeLimit", @"HeadphoneVolumeLimit");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"VibeIntensity", @"VibeIntensity");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CurrentlyActiveCategory", @"CurrentlyActiveCategory");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CurrentlyActiveMode", @"CurrentlyActiveMode");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"ActiveInputRouteForPlayAndRecordNoBluetooth", @"ActiveInputRouteForPlayAndRecordNoBluetooth");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CurrentRouteHasVolumeControl", @"CurrentRouteHasVolumeControl");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"AudioIsPlayingSomewhere", @"SomeClientIsPlaying");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"SomeClientIsPlayingLongFormAudio", @"SomeClientIsPlayingLongFormAudio");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"ActiveClientPIDsThatHideTheSpeechDetectionDevice", @"ActiveClientPIDsThatHideTheSpeechDetectionDevice");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"HeadphoneJackIsConnected", @"HeadphoneJackIsConnected");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"HeadphoneJackHasInput", @"HeadphoneJackHasInput");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"SystemHasAudioInputDevice", @"SystemHasAudioInputDevice");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"SystemHasAudioInputDeviceExcludingBluetooth", @"SystemHasAudioInputDeviceExcludingBluetooth");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"FullMute", @"FullMute");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"IsSomeoneRecording", @"IsSomeoneRecording");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"RecordingClientPIDs", @"RecordingClientPIDs");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"UplinkMute", @"UplinkMute");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"DownlinkMute", @"DownlinkMute");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"ThermalControlInfo", @"ThermalControlInfo");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"VoicePromptStyle", @"VoicePromptStyle");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"NowPlayingAppShouldPlayOnCarPlayConnect", @"NowPlayingAppShouldResumeForCarPlay");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CarPlayIsConnected", @"CarPlayIsConnected");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CarPlayAuxStreamSupport", @"CarPlayAuxStreamSupport");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CarPlaySupportsMixableSiri", @"CarPlaySupportsMixableSiri");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CarPlayIsPlayingLongerDurationSession", @"CarPlayIsPlayingLongerDurationSession");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"NowPlayingAppPID", @"NowPlayingAppPID");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"NowPlayingAppDisplayID", @"NowPlayingAppDisplayID");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CallIsActive", @"PhoneCallExists");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"ActiveCallInfo", @"ActivePhoneCallInfo");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"ShouldIgnorePlayCommandsFromAccessory", @"ShouldIgnorePlayCommandsFromAccessory");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"NowPlayingAppIsPlaying", @"NowPlayingAppIsPlaying");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"NowPlayingAppIsInterrupted", @"NowPlayingAppIsInterrupted");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CurrentVideoStreams", @"CurrentVideoStreams");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"LongFormVideoApps", @"LongFormVideoApps");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"SpeechDetectionDevicePresent", @"SpeechDetectionDevicePresent");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"AvailableVirtualAudioDevices", @"AvailableVirtualAudioDevices");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"SomeSessionIsActiveThatPrefersNoInterruptionsByRingtonesAndAlerts", @"SomeSessionIsActiveThatPrefersNoInterruptionsByRingtonesAndAlerts");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"PlayingSessionsDescription", @"PlayingSessionsDescription");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"RecordingSessionsDescription", @"RecordingSessionsDescription");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"WombatEnabled", @"WombatEnabled");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"ActiveNeroVisualStreamInfo", @"ActiveNeroVisualStreamInfo");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"HighestArbitrationPriorityForTipi", @"HighestArbitrationPriorityForTipi");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"SilentModeEnabled", @"SilentModeEnabled");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"CallScreeningStatus", @"CallScreeningStatus");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"MaximumSpeakerVolumeLimit", @"MaximumSpeakerVolumeLimit");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"MinimumAllowedMaximumSpeakerVolumeLimit", @"MinimumAllowedMaximumSpeakerVolumeLimit");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"RecommendedMaximumSpeakerVolumeLimit", @"RecommendedMaximumSpeakerVolumeLimit");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"DuckScalarForVoiceOver", @"DuckScalarForVoiceOver");
    CFDictionarySetValue((CFMutableDictionaryRef)gFigSystemControllerCopyPropertyMapping, @"RemoteDeviceIDs", @"RemoteDeviceIDs");
    int v7 = (__CFDictionary *)gFigSystemControllerCopyPropertyMapping;
    CFDictionarySetValue(v7, @"TopOfNowPlayingAppStackDisplayID", @"TopOfNowPlayingAppStackDisplayID");
  }
}

void figConnection_ServerConnectionDied_Callback(uint64_t a1, void *a2)
{
  CFAllocatorRef v3 = (void *)MEMORY[0x1997179E0]();
  int v4 = (void *)*MEMORY[0x1E4F1CFC8];
  int v5 = (void *)[objc_alloc(MEMORY[0x1E4F28ED0]) initWithInt:0];
  id v6 = objc_alloc_init(MEMORY[0x1E4F1C978]);
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || v6 == 0)
  {
    int v11 = 0;
  }
  else
  {
    int v9 = v6;
    id v10 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    int v11 = objc_msgSend(v10, "initWithObjectsAndKeys:", v4, AVSystemController_RecordingStateNotificationParameter, v5, AVSystemController_RecordingClientPIDNotificationParameter, v9, AVSystemController_RecordingClientPIDsNotificationParameter, 0);
  }
  +[AVSystemController postNotificationOnMainQueue:v11 notification:AVSystemController_RecordingStateDidChangeNotification object:a2];

  if (v5)
  {
    id v12 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    int v13 = objc_msgSend(v12, "initWithObjectsAndKeys:", v5, AVSystemController_NowPlayingAppPIDNotificationParameter, 0);
  }
  else
  {
    int v13 = 0;
  }
  +[AVSystemController postNotificationOnMainQueue:v13 notification:AVSystemController_NowPlayingAppPIDDidChangeNotification object:a2];

  +[AVSystemController postNotificationOnMainQueue:0 notification:AVSystemController_NowPlayingAppDidChangeNotification object:a2];
  if (v4)
  {
    id v14 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    int v4 = objc_msgSend(v14, "initWithObjectsAndKeys:", v4, AVSystemController_NowPlayingAppIsPlayingNotificationParameter, 0);
  }
  +[AVSystemController postNotificationOnMainQueue:v4 notification:AVSystemController_NowPlayingAppIsPlayingDidChangeNotification object:a2];

  [a2 handleServerDied];
}

void sub_194E002F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getGEOCountryConfigurationCountryCodeDidChangeNotification()
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getGEOCountryConfigurationCountryCodeDidChangeNotificationSymbolLoc_ptr;
  uint64_t v7 = getGEOCountryConfigurationCountryCodeDidChangeNotificationSymbolLoc_ptr;
  if (!getGEOCountryConfigurationCountryCodeDidChangeNotificationSymbolLoc_ptr)
  {
    int v1 = (void *)GeoServicesLibrary();
    v5[3] = (uint64_t)dlsym(v1, "GEOCountryConfigurationCountryCodeDidChangeNotification");
    getGEOCountryConfigurationCountryCodeDidChangeNotificationSymbolLoc_ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    CFAllocatorRef v3 = (_Unwind_Exception *)__68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(void *)v0;
}

void sub_194E0056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *MX_GEOCountryConfigurationObserver_GetCurrentCountryCode()
{
  if (mx_geoCountryConfigurationObserver_Initialize_onceToken != -1) {
    dispatch_once(&mx_geoCountryConfigurationObserver_Initialize_onceToken, &__block_literal_global_38);
  }
  uint64_t result = (void *)gGeoCountryConfigurationObserver;
  if (gGeoCountryConfigurationObserver)
  {
    return (void *)[result getCurrentCountryCode];
  }
  return result;
}

Class __getGEOCountryConfigurationClass_block_invoke(uint64_t a1)
{
  GeoServicesLibrary();
  Class result = objc_getClass("GEOCountryConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getGEOCountryConfigurationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    __getGEOCountryConfigurationClass_block_invoke_cold_1();
    return (Class)GeoServicesLibrary();
  }
  return result;
}

uint64_t GeoServicesLibrary()
{
  uint64_t v0 = GeoServicesLibraryCore();
  if (!v0)
  {
    CFAllocatorRef v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t GeoServicesLibraryCore()
{
  if (!GeoServicesLibraryCore_frameworkLibrary) {
    GeoServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return GeoServicesLibraryCore_frameworkLibrary;
}

uint64_t __GeoServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  GeoServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getGEOCountryConfigurationCountryCodeDidChangeNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)GeoServicesLibrary();
  uint64_t result = dlsym(v2, "GEOCountryConfigurationCountryCodeDidChangeNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getGEOCountryConfigurationCountryCodeDidChangeNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                  + 8)
                                                                                      + 24);
  return result;
}

void *__getGEODeviceCountryCodeKeySymbolLoc_block_invoke(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)GeoServicesLibrary();
  uint64_t result = dlsym(v2, "GEODeviceCountryCodeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getGEODeviceCountryCodeKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t FigRoutingManagerCreateAndActivateAggregateEndpointForLocalPlayback()
{
  CFTypeRef v4 = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v4);
  CFTypeRef cf = 0;
  SharedManager = FigRoutingManagerGetSharedManager();
  FigRoutingManagerInternal_CreateAirPlayAggregate((uint64_t)SharedManager, v4, 0, &cf);
  if (cf)
  {
    uint64_t v1 = FigRoutingManager_iOSActivateEndpoint(cf, v4, 0, 0);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  if (v4) {
    CFRelease(v4);
  }
  return v1;
}

uint64_t FigRoutingManager_RouteAwayFromAirPlayEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFArrayRef v5 = cmsmCopyWirelessPortsArrayForRouteConfiguration((NSDictionary *)@"Audio/Video", @"Default", 0);
  CFArrayRef v6 = v5;
  if (v5)
  {
    CFIndex Count = CFArrayGetCount(v5);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, i);
        AudioObjectID valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        CFTypeRef v11 = vaeCopyDeviceIdentifierFromVADPort(valuePtr);
        if (FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID()
          && vaeDoesPortSupportRoutability(valuePtr)
          && vaeIsPortRoutable(valuePtr))
        {
          CFArrayAppendValue(Mutable, ValueAtIndex);
        }
        if (v11) {
          CFRelease(v11);
        }
      }
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t ArrayOfPortsRoutable = vaemMakeArrayOfPortsRoutable(Mutable, 0, a3, a2, 0);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v6) {
    CFRelease(v6);
  }
  return ArrayOfPortsRoutable;
}

uint64_t FigRoutingManagerGetMirroringModeFromEndpoint(uint64_t a1)
{
  uint64_t v1 = 0x1EE5EFE48;
  if (a1)
  {
    uint64_t v14 = 0;
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFArrayRef v6 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v5 + 48);
    if (v6) {
      v6(CMBaseObject, @"IsPerAppDisplay", v2, &v14);
    }
    CFTypeRef cf = 0;
    uint64_t v7 = FigEndpointGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    id v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
    if (v10) {
      v10(v7, *MEMORY[0x1E4F20F68], v2, &cf);
    }
    if (FigCFEqual())
    {
      CFTypeRef v11 = &kCMSessionMirroringMode_Default;
      if (v14 == *MEMORY[0x1E4F1CFD0]) {
        CFTypeRef v11 = &kCMSessionMirroringMode_SecondScreen;
      }
      uint64_t v1 = *v11;
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return v1;
}

void FigRemoteRoutingContextFactorySetForQueue(const void *a1, NSObject *a2)
{
  if (a1) {
    CFAllocatorRef v3 = (void *)CFRetain(a1);
  }
  else {
    CFAllocatorRef v3 = 0;
  }
  dispatch_queue_set_specific(a2, @"kFigRoutingSessionResilientRemoteCurrentRemoteRoutingContextFactoryKey", v3, (dispatch_function_t)FigRemoteRoutingContextFactoryReleaseObject);
}

void FigRemoteRoutingContextFactoryReleaseObject(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void __FigRoutingContextIsSystemContextAllowed_block_invoke()
{
  uint64_t v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v0)
  {
    uint64_t v1 = v0;
    CFBooleanRef v2 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v0, @"com.apple.avfoundation.allow-system-wide-context", 0);
    if (v2)
    {
      CFBooleanRef v3 = v2;
      CFTypeID v4 = CFGetTypeID(v2);
      if (v4 == CFBooleanGetTypeID()) {
        FigRoutingContextIsSystemContextAllowed_isAllowed = CFBooleanGetValue(v3) != 0;
      }
      CFRelease(v3);
    }
    CFRelease(v1);
  }
}

const void *FigRoutingManagerCopyEndpointToAutoConnect()
{
  uint64_t v0 = (const void *)FigEndpointManagerCopyMatchingEndpoints();
  CFArrayRef v1 = (const __CFArray *)FigEndpointManagerCopyMatchingEndpoints();
  CFArrayRef v2 = v1;
  if (v1 && CFArrayGetCount(v1) >= 1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
    CFTypeID v4 = ValueAtIndex;
    if (ValueAtIndex) {
      CFRetain(ValueAtIndex);
    }
  }
  else
  {
    CFTypeID v4 = 0;
  }
  if (v0) {
    CFRelease(v0);
  }
  if (v2) {
    CFRelease(v2);
  }
  return v4;
}

void FigRoutingManagerProcessEndpointToAutoconnect(const void *a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (FigCFEqual())
  {
    if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(0, 1))
    {
      CFArrayRef theArray = 0;
      FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsForContextType(1, (uint64_t)&theArray);
      if (theArray)
      {
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v3 = Count;
          CFIndex v4 = 0;
          while (1)
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
            if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)) {
              break;
            }
            if (v3 == ++v4) {
              goto LABEL_8;
            }
          }
          if (!dword_1E9359DC0) {
            goto LABEL_18;
          }
          goto LABEL_56;
        }
      }
LABEL_8:
      CFArrayRef v6 = @"to autoconnect for CarPlay, going to autoconnect to it, reset the flag doNotMakeStarkAudioPortRoutable to false";
      goto LABEL_17;
    }
  }
  else if (FigCFEqual())
  {
    if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(0, 1))
    {
      CFArrayRef theArray = 0;
      FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsForContextType(1, (uint64_t)&theArray);
      if (theArray)
      {
        CFIndex v7 = CFArrayGetCount(theArray);
        if (v7 >= 1)
        {
          CFIndex v8 = v7;
          CFIndex v9 = 0;
          while (1)
          {
            id v10 = CFArrayGetValueAtIndex(theArray, v9);
            if (FigRoutingManagerIsEndpointOfType((uint64_t)v10)) {
              break;
            }
            if (v8 == ++v9) {
              goto LABEL_16;
            }
          }
          if (!dword_1E9359DC0) {
            goto LABEL_18;
          }
LABEL_56:
          LODWORD(v38) = 0;
          LOBYTE(v37) = 0;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_18;
        }
      }
LABEL_16:
      CFArrayRef v6 = @"to autoconnect for Nero, going to autoconnect to it";
LABEL_17:
      FigRoutingManagerLogEndpointID(@"Found an endpoint with name=", (uint64_t)a1, (uint64_t)v6, 1);
      routingManager_autoconnectEndpoint(a1);
      goto LABEL_18;
    }
  }
  else if (FigCFEqual())
  {
    CFArrayRef theArray = 0;
    FigRoutingManagerContextUtilities_CopyActivatedEndpointsForContextType(2, (uint64_t)&theArray);
    if (theArray)
    {
      CFIndex v11 = CFArrayGetCount(theArray);
      if (v11 >= 1)
      {
        CFIndex v12 = v11;
        CFIndex v13 = 0;
        uint64_t v14 = *MEMORY[0x1E4F20D10];
        uint64_t v15 = *MEMORY[0x1E4F1CF80];
        CFArrayRef v16 = (const __CFArray *)*MEMORY[0x1E4F1CFD0];
        do
        {
          int v17 = CFArrayGetValueAtIndex(theArray, v13);
          if (FigRoutingManagerIsEndpointOfType((uint64_t)v17))
          {
            cf[0] = 0;
            uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
            uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v19) {
              uint64_t v20 = v19;
            }
            else {
              uint64_t v20 = 0;
            }
            CFArrayRef v21 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v20 + 48);
            if (v21) {
              v21(CMBaseObject, v14, v15, cf);
            }
            if (cf[0] == v16)
            {
              if (v16)
              {
                CFArrayRef v34 = v16;
                goto LABEL_52;
              }
              goto LABEL_18;
            }
            if (cf[0]) {
              CFRelease(cf[0]);
            }
          }
          ++v13;
        }
        while (v12 != v13);
      }
    }
    CFArrayRef v38 = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsForContextType(2, (uint64_t)&v38);
    if (v38 && (CFIndex v22 = CFArrayGetCount(v38), v22 >= 1))
    {
      CFIndex v23 = v22;
      CFIndex v24 = 0;
      uint64_t v25 = *MEMORY[0x1E4F20D10];
      uint64_t v26 = *MEMORY[0x1E4F1CF80];
      CFTypeRef v27 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
      while (1)
      {
        int v28 = CFArrayGetValueAtIndex(v38, v24);
        CFTypeRef v37 = 0;
        uint64_t v29 = FigEndpointGetCMBaseObject();
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        CFArrayRef v32 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v31 + 48);
        if (v32) {
          v32(v29, v25, v26, &v37);
        }
        if (FigRoutingManagerIsEndpointOfType((uint64_t)v28) && v37 == v27) {
          break;
        }
        if (v37) {
          CFRelease(v37);
        }
        if (v23 == ++v24) {
          goto LABEL_50;
        }
      }
      if (dword_1E9359DC0)
      {
        CFIndex v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFTypeRef v27 = v37;
      }
      if (v27) {
        CFRelease(v27);
      }
    }
    else
    {
LABEL_50:
      FigRoutingManagerLogEndpointID(@"Found an endpoint with name=", (uint64_t)a1, @"to autoconnect for AirPlay, going to autoconnect to it", 1);
      routingManager_autoconnectEndpoint(a1);
    }
    CFArrayRef v34 = v38;
    if (v38) {
LABEL_52:
    }
      CFRelease(v34);
LABEL_18:
    if (theArray) {
      CFRelease(theArray);
    }
  }
}

void routingManager_autoconnectEndpoint(const void *a1)
{
  CFTypeRef cf = 0;
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1)) {
    goto LABEL_2;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1)) {
    goto LABEL_4;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    if ((FigEndpointGetSupportedFeatures() & 1) == 0)
    {
LABEL_2:
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
      goto LABEL_5;
    }
LABEL_4:
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&cf);
  }
LABEL_5:
  FigRoutingManagerPickEndpointForContext(cf, a1, 0, 0);
  if (cf) {
    CFRelease(cf);
  }
}

void FigRoutingManagerProcessVADRouteChange(int a1, uint64_t a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, char a10, uint64_t a11)
{
  int v14 = a1;
  uint64_t v15 = (const void *)a11;
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (dword_1E9359DC0)
  {
    LODWORD(v92) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v14 = a1;
  }
  char v18 = FigCFArrayContainsValue();
  FigRoutingManagerUtilities_UpdateIsRoutedToHandoff(v18);
  if (a8)
  {
    int IsBluetoothSharingSessionEnabled = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
    BOOL v21 = v14 != 1919842148 && IsBluetoothSharingSessionEnabled != 0;
    if (!a3 || v21)
    {
LABEL_16:
      if (!a5) {
        goto LABEL_51;
      }
      goto LABEL_17;
    }
  }
  else if (v14 != 1919842148 || !a3)
  {
    goto LABEL_16;
  }
  if (FigCFEqual()) {
    goto LABEL_16;
  }
  int v30 = v14;
  cf[0] = 0;
  CFIndex Count = CFArrayGetCount(a3);
  if (Count >= 1)
  {
    CFIndex v32 = Count;
    CFIndex v33 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, v33);
      CMSMUtility_CreateTokensFromDeviceUID(ValueAtIndex, 0, (CFStringRef *)cf);
      if (FigCFEqual() || FigCFEqual()) {
        break;
      }
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
      if (v32 == ++v33) {
        goto LABEL_50;
      }
    }
    CFIndex v35 = CMSMUtility_CopyCurrentOutputPorts();
    CFArrayRef v36 = v35;
    if (v35)
    {
      CFIndex v37 = CFArrayGetCount(v35);
      if (v37 >= 1)
      {
        CFIndex v38 = v37;
        for (CFIndex i = 0; i != v38; ++i)
        {
          uint64_t PortAtIndex = CMSMVAUtility_GetPortAtIndex(v36, i);
          if (vaeDoesPortSupportMultipleConnections(PortAtIndex)
            && !MXBluetoothServices_IsPortBTManaged(PortAtIndex, 1))
          {
            CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs(PortAtIndex, 1, 1);
          }
        }
      }
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    if (v36) {
      CFRelease(v36);
    }
  }
LABEL_50:
  int v14 = v30;
  if (!a5)
  {
LABEL_51:
    if (!a8) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_17:
  if (CFArrayGetCount(a5) < 1) {
    goto LABEL_51;
  }
  CFArrayGetValueAtIndex(a5, 0);
  if (!a8)
  {
LABEL_19:
    int ContextType = FigRoutingManagerContextUtilities_GetContextType(a11);
    if (ContextType == 3 && FigCFEqual() && FigCFEqual())
    {
      if (dword_1E9359DC0)
      {
        CFIndex v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return;
    }
    CFTypeRef v88 = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID((uint64_t)&v88);
    CFIndex v24 = 0;
    uint64_t v25 = 0;
    if ([+[MXSessionManager sharedInstance] doesActiveSessionHaveInput])
    {
      uint64_t v25 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(a4, (uint64_t)v88);
      CFIndex v24 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v25, 0);
      CFTypeRef v92 = 0;
      FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)v88, &v92);
      if (dword_1E9359DC0)
      {
        int v26 = v14;
        *(_DWORD *)os_log_type_t type = 0;
        CFTypeRef v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v28 = *(_DWORD *)type;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v29 = v28;
        }
        else {
          unsigned int v29 = v28 & 0xFFFFFFFE;
        }
        if (v29)
        {
          *(_DWORD *)v93 = 136316419;
          *(void *)&v93[4] = "FigRoutingManagerProcessVADRouteChange";
          __int16 v94 = 2114;
          CFTypeRef v95 = v88;
          __int16 v96 = 2114;
          v97 = v25;
          __int16 v98 = 2114;
          v99 = v24;
          __int16 v100 = 2113;
          CFTypeRef v101 = v92;
          __int16 v102 = 2114;
          CFArrayRef v103 = a4;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v14 = v26;
        uint64_t v15 = (const void *)a11;
      }
      if (v92) {
        CFRelease(v92);
      }
    }
    FigRoutingManagerContextUtilities_SetPickedEndpoints(v88, v25, @"configUpdateReasonEndedBottomUpRouteChange", 0, (uint64_t)v24);
    if (v25) {
      CFRelease(v25);
    }
    if (v88) {
      CFRelease(v88);
    }
    if (v24) {
      CFRelease(v24);
    }
    *(void *)v87 = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)v87);
    if (ContextType == 3)
    {
      if (dword_1E9359DC0)
      {
        LODWORD(v92) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        int v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v47 = v92;
        if (os_log_type_enabled(v46, type[0])) {
          unsigned int v48 = v47;
        }
        else {
          unsigned int v48 = v47 & 0xFFFFFFFE;
        }
        if (v48)
        {
          *(_DWORD *)v93 = 136315138;
          *(void *)&v93[4] = "FigRoutingManagerProcessVADRouteChange";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v15 = *(const void **)v87;
    }
    uint64_t v49 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(a3, (uint64_t)v15);
    CFTypeRef v86 = 0;
    FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)v15, &v86);
    if (v14 == 1919904885 && FigCFEqual() && !CMSMUtility_IsCarPlayNowPlayingStateSaved()) {
      CMSMNP_SaveCarPlayNowPlayingState();
    }
    CFTypeRef v85 = 0;
    if (v15) {
      CFTypeRef v50 = CFRetain(v15);
    }
    else {
      CFTypeRef v50 = 0;
    }
    CFTypeRef v85 = v50;
    if (FigCFEqual() && FigCFEqual()) {
      goto LABEL_171;
    }
    if (a3 && CFArrayGetCount(a3) >= 1)
    {
      uint64_t v51 = CFArrayGetValueAtIndex(a3, 0);
      if (!v49) {
        goto LABEL_109;
      }
    }
    else
    {
      uint64_t v51 = 0;
      if (!v49) {
        goto LABEL_109;
      }
    }
    if (CFArrayGetCount(v49) >= 1)
    {
      long long v52 = CFArrayGetValueAtIndex(v49, 0);
      if (v52)
      {
        uint64_t v53 = CFRetain(v52);
LABEL_110:
        if (MX_FeatureFlags_IsMuteEnabled()
          && FigRoutingManagerIsEndpointOfType((uint64_t)v53))
        {
          cf[0] = 0;
          uint64_t v54 = *MEMORY[0x1E4F1CF80];
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v56) {
            uint64_t v57 = v56;
          }
          else {
            uint64_t v57 = 0;
          }
          v58 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v57 + 48);
          if (v58) {
            v58(CMBaseObject, 0x1EE5F43E8, v54, cf);
          }
          if (FigCFEqual() || FigCFEqual() || FigCFEqual())
          {
            *(void *)v93 = 0;
            uint64_t v59 = *MEMORY[0x1E4F20EA0];
            uint64_t v60 = FigEndpointGetCMBaseObject();
            uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v61) {
              uint64_t v62 = v61;
            }
            else {
              uint64_t v62 = 0;
            }
            v63 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(v62 + 48);
            if (v63)
            {
              v63(v60, v59, v54, v93);
              v64 = *(const void **)v93;
            }
            else
            {
              v64 = 0;
            }
            if (v64 == (const void *)*MEMORY[0x1E4F1CFD0])
            {
              uint64_t v65 = FigEndpointGetCMBaseObject();
              uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v66) {
                uint64_t v67 = v66;
              }
              else {
                uint64_t v67 = 0;
              }
              v68 = *(void (**)(uint64_t, uint64_t, void))(v67 + 56);
              if (v68) {
                v68(v65, v59, *MEMORY[0x1E4F1CFC8]);
              }
              v64 = *(const void **)v93;
            }
            if (v64) {
              CFRelease(v64);
            }
          }
          if (cf[0]) {
            CFRelease(cf[0]);
          }
        }
        if (v14 == 1919970403
          && (routingManager_doesEndpointRepresentBluetoothRoute((uint64_t)v86)
           || routingManager_doesEndpointRepresentBluetoothRoute((uint64_t)v53)))
        {
          routingManager_updateSmartRoutingBackoffTimer((uint64_t)v86, (uint64_t)v53, 0);
        }
        if (FigRoutingManagerIsEndpointOfType((uint64_t)v86)
          && !(FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID() | a9))
        {
          cf[0] = 0;
          FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v15, (uint64_t)v86, (uint64_t)cf);
          if (v85)
          {
            CFRelease(v85);
            CFTypeRef v85 = 0;
          }
          FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint((uint64_t)v86, (uint64_t)cf[0], (uint64_t)&v85);
          FigRoutingManagerLogEndpointID(@"ProcessVADRouteChange: Going to deactivate endpoint with name=", (uint64_t)v86, @"because new device route does not correspond to the currently picked endpoint", 1);
          FigRoutingManager_iOSDeactivateEndpoint(v86, (uint64_t)cf[0]);
        }
        int v69 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)v85);
        v70 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v49, 0);
        if (v69 != 1)
        {
          FigRoutingManagerContextUtilities_SetPickedEndpoints(v85, 0, @"configUpdateReasonEndedBottomUpRouteChange", 0, 0);
          FigRoutingManagerContextUtilities_SetPickedEndpoints(*(const void **)v87, v49, @"configUpdateReasonEndedBottomUpRouteChange", 0, (uint64_t)v70);
LABEL_159:
          BOOL v71 = FigRoutingManagerUtilities_DidRouteChangeToBuiltIn((uint64_t)v53);
          FigPredictedRouting_UpdatePredictedRouteForCurrentRouteChanged(v71);
          if (FigCFEqual()
            || FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)v86)
            || (routingManager_doesVAEndpointRepresentAirPlayDevice((uint64_t)v53)
             || routingManager_doesVAEndpointRepresentAirPlayDevice((uint64_t)v86))
            && MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled())
          {
            CMSMUtility_UpdateBadgeType();
          }
          if (v71) {
            CMSM_IDSServer_StartAutomaticOwnershipTransferToPhoneTimer();
          }
          if (v53) {
            CFRelease(v53);
          }
          if (v70) {
            CFRelease(v70);
          }
LABEL_171:
          if (v85)
          {
            CFRelease(v85);
            CFTypeRef v85 = 0;
          }
          if (v86)
          {
            CFRelease(v86);
            CFTypeRef v86 = 0;
          }
          if (v49) {
            CFRelease(v49);
          }
          if (*(void *)v87) {
            CFRelease(*(CFTypeRef *)v87);
          }
          return;
        }
        if (routingManager_doesVAEndpointRepresentAirPlayDevice((uint64_t)v53))
        {
          if (v53) {
            CFRelease(v53);
          }
          uint64_t v53 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v51, 1, *MEMORY[0x1E4F20638], (uint64_t)v85);
          FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(v85, v53, @"configUpdateReasonEndedBottomUpRouteChange", 0);
        }
        else
        {
          FigRoutingManagerContextUtilities_SetPickedEndpoints(v85, v49, @"configUpdateReasonEndedBottomUpRouteChange", 0, (uint64_t)v70);
        }
        CFTypeRef v92 = 0;
        FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v92);
        *(void *)os_log_type_t type = 0;
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)type);
        if (v14 == 1919842148 && !FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)v92))
        {
          if (routingManager_isSystemMusicOnlyRoutedToLocalHomeTheaterEndpoint())
          {
            if (FigRoutingManagerIsEndpointOfType((uint64_t)v53)
              && FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v53))
            {
              if (dword_1E9359DC0)
              {
                unsigned int v90 = 0;
                os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
                v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v73 = v90;
                if (os_log_type_enabled(v72, v89)) {
                  unsigned int v74 = v73;
                }
                else {
                  unsigned int v74 = v73 & 0xFFFFFFFE;
                }
                if (v74)
                {
                  *(_DWORD *)v93 = 136315138;
                  *(void *)&v93[4] = "routingManager_handleBottomUpRouteChange";
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            else
            {
              if (dword_1E9359DC0)
              {
                unsigned int v90 = 0;
                os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
                v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v76 = v90;
                if (os_log_type_enabled(v75, v89)) {
                  unsigned int v77 = v76;
                }
                else {
                  unsigned int v77 = v76 & 0xFFFFFFFE;
                }
                if (v77)
                {
                  *(_DWORD *)v93 = 136315138;
                  *(void *)&v93[4] = "routingManager_handleBottomUpRouteChange";
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigRoutingContextUtilities_SetLeaderToSystemAudioContext(v92, @"configUpdateReasonEndedBottomUpRouteChange");
            }
            goto LABEL_155;
          }
          if (a10)
          {
            if (!FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)v53))
            {
              if (FigRoutingManagerIsEndpointOfType((uint64_t)v53)
                && !FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v53))
              {
                if (dword_1E9359DC0)
                {
                  unsigned int v90 = 0;
                  os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
                  v78 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v79 = v90;
                  if (os_log_type_enabled(v78, v89)) {
                    unsigned int v80 = v79;
                  }
                  else {
                    unsigned int v80 = v79 & 0xFFFFFFFE;
                  }
                  if (v80)
                  {
                    *(_DWORD *)v93 = 136315138;
                    *(void *)&v93[4] = "routingManager_handleBottomUpRouteChange";
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                FigRoutingManagerAggregateRemoveLocalAirPlayEndpoint();
              }
              goto LABEL_155;
            }
          }
          else if ((!FigRoutingManagerIsEndpointOfType((uint64_t)v53) {
                  || FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v53))
          }
                 && !FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)v53))
          {
            goto LABEL_155;
          }
          SharedManager = FigRoutingManagerGetSharedManager();
          if (v92)
          {
            CFRetain(v92);
            CFTypeRef v82 = v92;
          }
          else
          {
            CFTypeRef v82 = 0;
          }
          v83 = *((void *)SharedManager + 1);
          cf[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
          cf[1] = (CFTypeRef)3221225472;
          CFTypeRef cf[2] = __routingManager_handleBottomUpRouteChange_block_invoke;
          cf[3] = &__block_descriptor_40_e5_v8__0l;
          cf[4] = v82;
          MXDispatchAsync((uint64_t)"routingManager_handleBottomUpRouteChange", (uint64_t)"FigRoutingManager_iOS.m", 494, 0, 0, v83, (uint64_t)cf);
        }
LABEL_155:
        if (*(void *)type)
        {
          CFRelease(*(CFTypeRef *)type);
          *(void *)os_log_type_t type = 0;
        }
        if (v92) {
          CFRelease(v92);
        }
        goto LABEL_159;
      }
    }
LABEL_109:
    uint64_t v53 = 0;
    goto LABEL_110;
  }
LABEL_52:
  CFIndex v41 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(a3, a11);
  CFArrayRef v42 = v41;
  if (v41 && CFArrayGetCount(v41) >= 1 && (int v43 = CFArrayGetValueAtIndex(v42, 0)) != 0) {
    CFTypeRef v44 = CFRetain(v43);
  }
  else {
    CFTypeRef v44 = 0;
  }
  cf[0] = 0;
  FigRoutingManagerCopyPickedEndpointForRoutingContext(a11, cf);
  if (routingManager_doesEndpointRepresentBluetoothRoute((uint64_t)cf[0])
    || routingManager_doesEndpointRepresentBluetoothRoute((uint64_t)v44))
  {
    routingManager_updateSmartRoutingBackoffTimer((uint64_t)cf[0], (uint64_t)v44, a8);
  }
  BOOL v45 = FigRoutingManagerUtilities_DidRouteChangeToBuiltIn((uint64_t)v44);
  FigPredictedRouting_UpdatePredictedRouteForCurrentRouteChanged(v45);
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v44) {
    CFRelease(v44);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v45) {
    CMSM_IDSServer_StartAutomaticOwnershipTransferToPhoneTimer();
  }
  if (FigCFEqual()
    || FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)cf[0])
    || routingManager_doesVAEndpointRepresentAirPlayDevice((uint64_t)cf[0])
    && MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled())
  {
    CMSMUtility_UpdateBadgeType();
  }
}

uint64_t routingManager_doesEndpointRepresentBluetoothRoute(uint64_t a1)
{
  if (FigRoutingManagerIsEndpointOfType(a1)) {
    return 1;
  }
  if (!FigRoutingManagerIsEndpointOfType(a1)) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFIndex v7 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v6 + 48);
  if (v7) {
    v7(CMBaseObject, 0x1EE5F43E8, *MEMORY[0x1E4F1CF80], &cf);
  }
  BOOL v2 = FigCFEqual() || FigCFEqual() || FigCFEqual();
  if (cf) {
    CFRelease(cf);
  }
  return v2;
}

void routingManager_updateSmartRoutingBackoffTimer(uint64_t a1, uint64_t a2, int a3)
{
  v29[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    v29[0] = cf;
    CFTypeRef v27 = 0;
    uint64_t v4 = *MEMORY[0x1E4F20F28];
    uint64_t v5 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CFIndex v9 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v8 + 48);
    if (v9) {
      v9(CMBaseObject, v4, v5, &v27);
    }
    CFTypeRef v26 = 0;
    uint64_t v10 = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFIndex v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(v10, v4, v5, &v26);
    }
    CFTypeRef v14 = FigRoutingManagerCopyBluetoothEndpointAssociatedWithVAEndpoint();
    if (v14)
    {
      uint64_t v15 = FigEndpointGetCMBaseObject();
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v17 = v16 ? v16 : 0;
      char v18 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v17 + 48);
      if (v18) {
        v18(v15, @"SupportsSmartRouting", v5, v29);
      }
    }
    CFTypeRef v19 = FigRoutingManagerCopyBluetoothEndpointAssociatedWithVAEndpoint();
    if (v19)
    {
      uint64_t v20 = FigEndpointGetCMBaseObject();
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v22 = v21 ? v21 : 0;
      CFIndex v23 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v22 + 48);
      if (v23) {
        v23(v20, @"SupportsSmartRouting", v5, &cf);
      }
    }
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (FigCFEqual() && (int v25 = FigCFEqual(), a3) && v25)
    {
      FigPredictedRouting_StartTimer(480.0);
    }
    else if (FigCFEqual())
    {
      FigPredictedRouting_StopTimer();
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v29[0])
    {
      CFRelease(v29[0]);
      v29[0] = 0;
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v26)
    {
      CFRelease(v26);
      CFTypeRef v26 = 0;
    }
    if (v27) {
      CFRelease(v27);
    }
  }
}

BOOL routingManager_doesVAEndpointRepresentAirPlayDevice(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v3 + 48);
  if (v5)
  {
    v5(CMBaseObject, 0x1EE5F4288, *MEMORY[0x1E4F1CF80], &cf);
    CFNumberRef v6 = (const __CFNumber *)cf;
  }
  else
  {
    CFNumberRef v6 = 0;
  }
  unsigned int PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(v6);
  BOOL v4 = PortFromCFNumber == 1885433971 || PortFromCFNumber == 1885433953;
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

void FigRoutingManagerNewWiredPortsAdded(void *a1)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  CFTypeRef v63 = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v63);
  CFTypeRef v62 = 0;
  if (!v63) {
    return;
  }
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)v63, &v62);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)v62))
  {
    LODWORD(cf) = 0;
    FigRoutingManagerContextUtilities_GetPickingState((uint64_t)v63, (uint64_t)&cf);
    int CarPlayMainAudioPortForEndpoint = FigRoutingManagerFindCarPlayMainAudioPortForEndpoint((uint64_t)v62);
    if (cf == 4)
    {
      if (!CarPlayMainAudioPortForEndpoint) {
        goto LABEL_26;
      }
      FigRoutingManagerStopCarPlayAudioMainPortPublishedCheckTimer();
      CFTypeRef v2 = v63;
      int v3 = 6;
    }
    else
    {
      if (cf != 8 || !CarPlayMainAudioPortForEndpoint)
      {
LABEL_26:
        FigRoutingManagerContextUtilities_GetPickingState((uint64_t)v63, (uint64_t)&cf);
        if (cf == 9)
        {
          v68[0] = 0;
          FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v63, (uint64_t)v62, (uint64_t)v68);
          *(void *)v64 = 0;
          FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures((uint64_t)v63, (uint64_t)v62, (uint64_t)v64);
          FigRoutingManager_iOSHandleFigEndpointFeaturesActivation((void *)v62, v64[0], v68[0], v63, 0);
        }
        goto LABEL_82;
      }
      FigRoutingManagerStopCarPlayAudioMainPortPublishedCheckTimer();
      CFTypeRef v2 = v63;
      int v3 = 9;
    }
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v2, v3);
    goto LABEL_26;
  }
  if (MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled())
  {
    id v60 = 0;
    CFTypeRef cf = 0;
    id v59 = 0;
    BOOL v4 = (NSDictionary *)CMSMUtility_CopyNonNullCurrentlyActiveCategory();
    uint64_t v5 = CMSMUtility_CopyNonNullCurrentlyActiveMode();
    CFTypeRef v6 = CMSMUtility_CopyCurrentAllowedPortTypes();
    id v7 = cmsmCopyQuiesceableWiredPortsForRouteConfiguration(v4, (uint64_t)v5, v6);
    BOOL v45 = v4;
    int v46 = v5;
    CFTypeRef v47 = v6;
    uint64_t v8 = cmsmCopyPickableQuiesceableWiredPortsForRouteConfiguration();
    id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    uint64_t v10 = [v7 countByEnumeratingWithState:&v55 objects:v69 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v56;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v56 != v12) {
            objc_enumerationMutation(v7);
          }
          uint64_t v14 = *(void *)(*((void *)&v55 + 1) + 8 * i);
          if (([v8 containsObject:v14] & 1) == 0) {
            [v9 addObject:v14];
          }
        }
        uint64_t v11 = [v7 countByEnumeratingWithState:&v55 objects:v69 count:16];
      }
      while (v11);
    }
    if ([v9 count] && !vaemIsPersistentRouteActive()) {
      cmsmUnpickQuiesceableWiredPortsRoutes(v9, 0, (uint64_t)v63, 0);
    }
    FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)v63, &cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
    {
      uint64_t v15 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, id *))(v18 + 48);
      if (v20) {
        v20(CMBaseObject, 0x1EE5F4488, v15, &v60);
      }
      uint64_t v21 = FigEndpointGetCMBaseObject();
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      CFIndex v24 = *(void (**)(uint64_t, uint64_t, uint64_t, id *))(v23 + 48);
      if (v24) {
        v24(v21, 0x1EE5F4468, v15, &v59);
      }
    }
    else if (dword_1E9359DC0)
    {
      unsigned int v54 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if objc_msgSend(v60, "BOOLValue", v41, v43) && (objc_msgSend(v59, "BOOLValue"))
    {
      if (dword_1E9359DC0)
      {
        unsigned int v54 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        int v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_73:
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }

      if (v45) {
        CFRelease(v45);
      }
      if (v46) {
        CFRelease(v46);
      }
      if (v47) {
        CFRelease(v47);
      }

      goto LABEL_82;
    }
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    uint64_t v26 = [a1 countByEnumeratingWithState:&v49 objects:v67 count:16];
    if (!v26) {
      goto LABEL_73;
    }
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)v50;
LABEL_44:
    uint64_t v29 = 0;
    while (1)
    {
      if (*(void *)v50 != v28) {
        objc_enumerationMutation(a1);
      }
      int v30 = *(void **)(*((void *)&v49 + 1) + 8 * v29);
      uint64_t v31 = objc_msgSend(v30, "unsignedIntValue", v42, v44);
      if (!vaeIsQuiesceableWiredPort(v31)) {
        goto LABEL_71;
      }
      if ([v8 containsObject:v30])
      {
        if ([+[MXSessionManager sharedInstance] getQuiesceableWiredPortAutoRouteOnConnectPreference:v31])
        {
          if (dword_1E9359DC0)
          {
            unsigned int v54 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            CFIndex v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v33 = v54;
            if (os_log_type_enabled(v32, type)) {
              unsigned int v34 = v33;
            }
            else {
              unsigned int v34 = v33 & 0xFFFFFFFE;
            }
            if (v34)
            {
              *(_DWORD *)v64 = 136315394;
              *(void *)&v64[4] = "FigRoutingManagerNewWiredPortsAdded";
              __int16 v65 = 1024;
              int v66 = v31;
              LODWORD(v44) = 18;
              CFArrayRef v42 = v64;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          vaeMakePortRoutable(v31, 1, 0, (uint64_t)v63);
          goto LABEL_71;
        }
        if (dword_1E9359DC0)
        {
          unsigned int v54 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          CFIndex v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v39 = v54;
          if (os_log_type_enabled(v38, type)) {
            unsigned int v40 = v39;
          }
          else {
            unsigned int v40 = v39 & 0xFFFFFFFE;
          }
          if (v40) {
            goto LABEL_67;
          }
          goto LABEL_68;
        }
      }
      else if (dword_1E9359DC0)
      {
        unsigned int v54 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        CFIndex v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v36 = v54;
        if (os_log_type_enabled(v35, type)) {
          unsigned int v37 = v36;
        }
        else {
          unsigned int v37 = v36 & 0xFFFFFFFE;
        }
        if (v37)
        {
LABEL_67:
          *(_DWORD *)v64 = 136315394;
          *(void *)&v64[4] = "FigRoutingManagerNewWiredPortsAdded";
          __int16 v65 = 1024;
          int v66 = v31;
          LODWORD(v44) = 18;
          CFArrayRef v42 = v64;
          _os_log_send_and_compose_impl();
        }
LABEL_68:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_71:
      if (v27 == ++v29)
      {
        uint64_t v27 = [a1 countByEnumeratingWithState:&v49 objects:v67 count:16];
        if (!v27) {
          goto LABEL_73;
        }
        goto LABEL_44;
      }
    }
  }
LABEL_82:
  if (v62)
  {
    CFRelease(v62);
    CFTypeRef v62 = 0;
  }
  if (v63) {
    CFRelease(v63);
  }
}

void FigRoutingManagerRouteToBluetoothDevice(const void *a1, uint64_t a2)
{
  theDict[19] = *(CFDictionaryRef *)MEMORY[0x1E4F143B8];
  BOOL IsSystemAudioRouteAirPlayLowLatency = FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency();
  theDict[0] = 0;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpointInfo((uint64_t)a1, theDict);
  if (theDict[0])
  {
    CFArrayRef Value = CFDictionaryGetValue(theDict[0], @"CurrentlyActivatingEndpointsInfo_ClientRoutingContextUUID");
    if (Value) {
      CFTypeRef v5 = CFRetain(Value);
    }
    else {
      CFTypeRef v5 = 0;
    }
    id v7 = CFDictionaryGetValue(theDict[0], @"CurrentlyActivatingEndpointsInfo_ClientRouteChangeOptions");
    if (v7) {
      CFDictionaryRef v30 = (const __CFDictionary *)CFRetain(v7);
    }
    else {
      CFDictionaryRef v30 = 0;
    }
    uint64_t v8 = CFDictionaryGetValue(theDict[0], @"CurrentlyActivatingEndpointsInfo_InternalRouteChangeOptions");
    if (v8) {
      CFTypeRef v6 = CFRetain(v8);
    }
    else {
      CFTypeRef v6 = 0;
    }
  }
  else
  {
    CFTypeRef v6 = 0;
    CFDictionaryRef v30 = 0;
    CFTypeRef v5 = 0;
  }
  CFTypeRef cf = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFIndex v13 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v12 + 48);
  if (v13) {
    v13(CMBaseObject, *MEMORY[0x1E4F20E38], v9, &cf);
  }
  CFAllocatorRef allocator = v9;
  int IsContextSystemMusicAndIndependent = FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent((uint64_t)v5);
  if (IsContextSystemMusicAndIndependent)
  {
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingContextUtilities_SetLeaderToSystemAudioContext(v5, @"configUpdateReasonEndedSuccess");
  }
  uint64_t v16 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)cf, 0, *MEMORY[0x1E4F20660], 0);
  uint64_t v17 = (const void *)v16;
  if (v16)
  {
    CFTypeRef v27 = v6;
    CFMutableDictionaryRef EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions(v16, (uint64_t)a1, v30);
    FigRoutingManagerGetFigEndpointFeatures((uint64_t)v17, (uint64_t)a1);
    CFMutableDictionaryRef v26 = EndpointActivateOptions;
    FigEndpointActivate();
    CFTypeRef v19 = CMSMUtility_CopyCurrentRouteIdentifiers();
    uint64_t v20 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v19, (uint64_t)a1);
    uint64_t v21 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v20, 0);
    if (theDict[0])
    {
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a1, v20, @"configUpdateReasonEndedSuccess", (uint64_t)v30, (uint64_t)v21);
      if (!FigRoutingContextUtilities_DoesArrayOfEndpointsContainEndpoint(v20, a2)) {
        FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a1, a2, @"routeChangeEndedSuccess");
      }
    }
    else
    {
      if (dword_1E9359DC0)
      {
        uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a1, v20, @"configUpdateReasonEndedSuccess", (uint64_t)v30, (uint64_t)v21);
    }
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a1, 0);
    if (v21) {
      CFRelease(v21);
    }
    if (v20) {
      CFRelease(v20);
    }
    if (v19) {
      CFRelease(v19);
    }
    CFTypeRef v6 = v27;
    if (v26) {
      CFRelease(v26);
    }
  }
  if (IsContextSystemMusicAndIndependent)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"initiator", @"SelectRouteInitiator_RouteToBluetoothDevice");
    if (IsSystemAudioRouteAirPlayLowLatency)
    {
      CFTypeRef v24 = FigRoutingManagerCopyLocalAirPlayEndpoint();
      ArrayFromEndpoint = FigRoutingManagerCreateArrayFromEndpoint(v24);
      routingManager_processPickEndpoints(ArrayFromEndpoint, v5, 0, Mutable, 0);
      if (ArrayFromEndpoint) {
        CFRelease(ArrayFromEndpoint);
      }
      if (v24) {
        CFRelease(v24);
      }
    }
    else if (!FigRoutingManagerContextUtilities_IsContextSystemAudio((uint64_t)v5))
    {
      routingManager_processPickEndpoints(0, v5, 0, Mutable, 0);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  if (v17) {
    CFRelease(v17);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (theDict[0]) {
    CFRelease(theDict[0]);
  }
}

uint64_t routingManager_processPickEndpoints(const __CFArray *a1, const void *a2, const __CFDictionary *a3, const void *a4, int a5)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!a5)
  {
    FigRoutingManagerCreateAggregateForContextIfNecessary(a2, (CFIndex)a1);
    CFTypeRef v80 = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)&v80);
    uint64_t v17 = FigRoutingManagerUtilities_CopyEndpointsToAdd((uint64_t)a2, a1);
    CFArrayRef theArray = FigRoutingManagerUtilities_CopyEndpointsToRemove((uint64_t)a2, a1);
    if (v17)
    {
      if (CFArrayGetCount(v17) >= 1) {
        FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints((uint64_t)a2, (uint64_t)v80, v17, (uint64_t)a3, (uint64_t)a4);
      }
      CFTypeRef v18 = v80;
      if (!v80)
      {
        uint64_t v15 = 4294954296;
        CFMutableDictionaryRef v26 = theArray;
LABEL_130:
        CFRelease(v17);
LABEL_131:
        if (v26) {
          CFRelease(v26);
        }
        CFTypeRef v25 = v80;
        if (v80) {
          goto LABEL_134;
        }
        return v15;
      }
      uint64_t v15 = FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
      if (CFArrayGetCount(v17))
      {
        int v71 = 0;
        int v19 = 0;
        int v20 = 1;
        if (!a1) {
          goto LABEL_43;
        }
        goto LABEL_42;
      }
    }
    else
    {
      CFTypeRef v18 = v80;
      if (!v80)
      {
        uint64_t v15 = 4294954296;
        CFMutableDictionaryRef v26 = theArray;
        goto LABEL_131;
      }
      uint64_t v15 = FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
    }
    if (theArray && CFArrayGetCount(theArray) >= 1)
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, @"configUpdateReasonStarted");
      int v20 = 0;
      int v71 = 1;
    }
    else
    {
      int v71 = 0;
      int v20 = 1;
    }
    int v19 = 1;
    if (!a1)
    {
LABEL_43:
      if (dword_1E9359DC0)
      {
        LODWORD(v84) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v29 = v84;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
          unsigned int v30 = v29;
        }
        else {
          unsigned int v30 = v29 & 0xFFFFFFFE;
        }
        if (v30)
        {
          int v85 = 136315138;
          CFTypeRef v86 = "routingManager_processPickAirPlayEndpoints";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)v18, a2, a3, a4, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
      CMSMVAUtility_DestroyMusicVADIfNeeded((uint64_t)a2);
      FigRoutingManagerPostProcessPickEndpoint(0, (uint64_t)a2);
      LOBYTE(cf[0]) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      uint64_t v67 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedSuccess;
      if (!LOBYTE(cf[0])) {
        uint64_t v67 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedBottomUpRouteChange;
      }
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, (uint64_t)*v67, (uint64_t)a3, 0);
      CFMutableDictionaryRef v26 = theArray;
      if (!v20) {
        goto LABEL_127;
      }
      goto LABEL_125;
    }
    if (!v17)
    {
      int v69 = 1;
      CFIndex v27 = 0;
LABEL_51:
      CFMutableDictionaryRef v26 = theArray;
      if (theArray) {
        CFIndex Count = CFArrayGetCount(theArray);
      }
      else {
        CFIndex Count = 0;
      }
      uint64_t v31 = (uint64_t *)MEMORY[0x1E4F20E38];
      CFIndex v32 = (uint64_t *)MEMORY[0x1E4F20F28];
      int v70 = v20;
      if (v27 >= 1)
      {
        CFIndex v33 = 0;
        uint64_t v73 = *MEMORY[0x1E4F20E38];
        uint64_t v75 = *MEMORY[0x1E4F1CF80];
        uint64_t v72 = *MEMORY[0x1E4F20F28];
        do
        {
          unsigned int v34 = v17;
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v17, v33);
          if (FigRoutingManagerIsEndpointActivated((uint64_t)ValueAtIndex))
          {
            uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v36) {
              uint64_t v37 = v36;
            }
            else {
              uint64_t v37 = 0;
            }
            CFIndex v38 = *(void (**)(const void *, void))(v37 + 48);
            if (v38) {
              v38(ValueAtIndex, 0);
            }
            FigEndpointDeactivate();
          }
          FigEndpointAggregateGetClassID();
          if (CMBaseObjectIsMemberOfClass()) {
            uint64_t v39 = (uint64_t)v18;
          }
          else {
            uint64_t v39 = 0;
          }
          uint64_t v15 = FigRoutingManagerAddEndpointToAggregate(v39, (uint64_t)ValueAtIndex, a2, a3, a4, (uint64_t)FigRoutingManagerAggregateAddEndpointCompletionCallback);
          if (!v15)
          {
            CFTypeRef v84 = 0;
            uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
            uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v41) {
              uint64_t v42 = v41;
            }
            else {
              uint64_t v42 = 0;
            }
            uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v42 + 48);
            if (v43) {
              v43(CMBaseObject, v73, v75, &v84);
            }
            *(void *)os_log_type_t type = 0;
            uint64_t v44 = FigEndpointGetCMBaseObject();
            uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v45) {
              uint64_t v46 = v45;
            }
            else {
              uint64_t v46 = 0;
            }
            CFTypeRef v47 = *(void (**)(uint64_t, uint64_t, uint64_t, os_log_type_t *))(v46 + 48);
            if (v47) {
              v47(v44, v72, v75, type);
            }
            if (dword_1E9359DC0)
            {
              unsigned int v82 = 0;
              os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
              unsigned int v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v49 = v82;
              if (os_log_type_enabled(v48, v81)) {
                unsigned int v50 = v49;
              }
              else {
                unsigned int v50 = v49 & 0xFFFFFFFE;
              }
              if (v50)
              {
                int v85 = 136315650;
                CFTypeRef v86 = "routingManager_processPickAirPlayEndpoints";
                __int16 v87 = 2114;
                CFTypeRef v88 = v84;
                __int16 v89 = 2114;
                CFTypeRef v90 = *(CFTypeRef *)type;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFMutableDictionaryRef v26 = theArray;
            }
            if (*(void *)type)
            {
              CFRelease(*(CFTypeRef *)type);
              *(void *)os_log_type_t type = 0;
            }
            if (v84) {
              CFRelease(v84);
            }
          }
          ++v33;
          uint64_t v17 = v34;
        }
        while (v27 != v33);
        int v20 = v70;
        CFIndex v32 = (uint64_t *)MEMORY[0x1E4F20F28];
        uint64_t v31 = (uint64_t *)MEMORY[0x1E4F20E38];
      }
      if (Count >= 1)
      {
        long long v51 = v17;
        CFIndex v52 = 0;
        uint64_t v53 = *MEMORY[0x1E4F1CF80];
        uint64_t v74 = *v32;
        uint64_t v76 = *v31;
        do
        {
          unsigned int v54 = CFArrayGetValueAtIndex(v26, v52);
          FigEndpointAggregateGetClassID();
          if (CMBaseObjectIsMemberOfClass()) {
            uint64_t v55 = (uint64_t)v18;
          }
          else {
            uint64_t v55 = 0;
          }
          uint64_t v15 = FigRoutingManagerRemoveEndpointFromAggregate(v55, v54, a2, a3, a4, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
          if (!v15)
          {
            CFTypeRef v84 = 0;
            uint64_t v56 = FigEndpointGetCMBaseObject();
            uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v57) {
              uint64_t v58 = v57;
            }
            else {
              uint64_t v58 = 0;
            }
            id v59 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v58 + 48);
            if (v59) {
              v59(v56, v76, v53, &v84);
            }
            *(void *)os_log_type_t type = 0;
            uint64_t v60 = FigEndpointGetCMBaseObject();
            uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v61) {
              uint64_t v62 = v61;
            }
            else {
              uint64_t v62 = 0;
            }
            CFTypeRef v63 = *(void (**)(uint64_t, uint64_t, uint64_t, os_log_type_t *))(v62 + 48);
            if (v63) {
              v63(v60, v74, v53, type);
            }
            if (dword_1E9359DC0)
            {
              unsigned int v82 = 0;
              os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
              v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v65 = v82;
              if (os_log_type_enabled(v64, v81)) {
                unsigned int v66 = v65;
              }
              else {
                unsigned int v66 = v65 & 0xFFFFFFFE;
              }
              if (v66)
              {
                int v85 = 136315650;
                CFTypeRef v86 = "routingManager_processPickAirPlayEndpoints";
                __int16 v87 = 2114;
                CFTypeRef v88 = v84;
                __int16 v89 = 2114;
                CFTypeRef v90 = *(CFTypeRef *)type;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFMutableDictionaryRef v26 = theArray;
            }
            if (*(void *)type)
            {
              CFRelease(*(CFTypeRef *)type);
              *(void *)os_log_type_t type = 0;
            }
            if (v84) {
              CFRelease(v84);
            }
          }
          ++v52;
        }
        while (Count != v52);
        uint64_t v17 = v51;
        int v20 = v70;
      }
      int v19 = v69;
      if (!v20) {
        goto LABEL_127;
      }
LABEL_125:
      if (v19)
      {
        FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, (CFDictionaryRef)a4);
        goto LABEL_129;
      }
LABEL_127:
      if ((v71 & v19) == 1) {
        FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, @"configUpdateReasonEndedSuccess");
      }
LABEL_129:
      if (!v17) {
        goto LABEL_131;
      }
      goto LABEL_130;
    }
LABEL_42:
    int v69 = v19;
    CFIndex v27 = CFArrayGetCount(v17);
    goto LABEL_51;
  }
  MutableCFArrayRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionarySetValue(MutableCopy, @"RouteChangeOptionKey_IsAddOperation", (const void *)*MEMORY[0x1E4F1CFD0]);
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  if (a1)
  {
    CFIndex v9 = CFArrayGetCount(a1);
    CFIndex v10 = v9 - 1;
    if (v9 >= 1)
    {
      CFIndex v11 = v9;
      CFIndex v12 = 0;
      char v13 = 1;
      do
      {
        while (1)
        {
          uint64_t v14 = CFArrayGetValueAtIndex(a1, v12);
          if (!FigRoutingManagerIsEndpointOfType((uint64_t)v14)) {
            break;
          }
          FigRoutingManager_iOSActivateEndpoint(v14, a2, a3, MutableCopy);
          char v13 = 0;
          uint64_t v15 = 0;
          if (v10 == v12++) {
            goto LABEL_31;
          }
        }
        ++v12;
      }
      while (v11 != v12);
      if ((v13 & 1) == 0) {
        goto LABEL_30;
      }
    }
  }
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 6);
  uint64_t v21 = CMSMVAUtility_AggregateEndpoints(a1, 1, (uint64_t)a2);
  if (!v21)
  {
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf[0])) {
      FigRoutingManagerDeactivateEndpointFromPickedContexts(cf[0], v23, 1u, @"configUpdateReasonEndedSuccess");
    }
    CFTypeRef v24 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(a1, 0);
    FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, a1, @"configUpdateReasonEndedSuccess", (uint64_t)a3, (uint64_t)v24);
    if (v24) {
      CFRelease(v24);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
LABEL_30:
    uint64_t v15 = 0;
    goto LABEL_31;
  }
  uint64_t v15 = v21;
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a2, (uint64_t)cf);
  uint64_t v22 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf[0], 0);
  FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, (const __CFArray *)cf[0], @"configUpdateReasonEndedFailed", (uint64_t)a3, (uint64_t)v22);
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
  if (v22) {
    CFRelease(v22);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
LABEL_31:
  if (MutableCopy)
  {
    CFTypeRef v25 = MutableCopy;
LABEL_134:
    CFRelease(v25);
  }
  return v15;
}

void FigRoutingManagerEnableBluetoothSharingSession(const void *a1, CFArrayRef theArray)
{
  if (!theArray)
  {
    uint64_t v5 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return;
    }
    goto LABEL_11;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t v5 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      LODWORD(cf) = 0;
      if (CMSMVAUtility_IsA2DPPortAvailableForEndpoint((BOOL)ValueAtIndex, &cf))
      {
        SInt64 = (const void *)FigCFNumberCreateSInt64();
        CFArrayAppendValue(Mutable, SInt64);
        if (SInt64) {
          CFRelease(SInt64);
        }
      }
    }
  }
  if (Mutable)
  {
LABEL_11:
    CFIndex v10 = CFArrayGetCount(Mutable);
    if (v10 > 0)
    {
      if (v10 == 1)
      {
        CFTypeRef cf = 0;
        FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a1, 0, (uint64_t)&cf);
        if (FigRoutingManagerIsEndpointBluetoothShareable((uint64_t)cf))
        {
          uint64_t value = 0;
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v13 = v12 ? v12 : 0;
          uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v13 + 48);
          if (v14)
          {
            v14(CMBaseObject, 0x1EE5F4148, v5, &value);
            if (value)
            {
              CFArrayAppendValue(Mutable, value);
              if (value) {
                CFRelease(value);
              }
            }
          }
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      CMSMVAUtility_AggregatePorts((uint64_t)Mutable, 1, (uint64_t)a1);
      uint64_t v15 = routingManager_copyPickedEndpointsFromCurrentRoutesInfo((uint64_t)a1);
      uint64_t v16 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v15, 0);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a1, v15, @"configUpdateReasonEndedSuccess", 0, (uint64_t)v16);
      if (v16) {
        CFRelease(v16);
      }
      if (v15) {
        CFRelease(v15);
      }
    }
    CFRelease(Mutable);
  }
}

__CFArray *routingManager_copyPickedEndpointsFromCurrentRoutesInfo(uint64_t a1)
{
  CFTypeRef v2 = CMSMUtility_CopyCurrentRouteIdentifiers();
  unsigned int NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  if (!NumberOfCurrentOutputPorts)
  {
    CFMutableDictionaryRef Mutable = 0;
    if (!v2) {
      return Mutable;
    }
    goto LABEL_24;
  }
  uint64_t v4 = NumberOfCurrentOutputPorts;
  uint64_t v20 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex v6 = 0;
  uint64_t v7 = *MEMORY[0x1E4F20660];
  uint64_t v8 = *MEMORY[0x1E4F20638];
  do
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v2, v6);
    CFIndex v10 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v7, 0);
    CFTypeRef cf = 0;
    if (v10)
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v13 = v12 ? v12 : 0;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v13 + 48);
      if (v14) {
        v14(CMBaseObject, 0x1EE5F4288, v20, &cf);
      }
    }
    unsigned int PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)cf);
    if (PortFromCFNumber == 1885433971 || PortFromCFNumber == 1885433953)
    {
      uint64_t v17 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 1, v8, a1);
      if (v17)
      {
        CFTypeRef v18 = v17;
        CFArrayAppendValue(Mutable, v17);
        CFRelease(v18);
      }
    }
    else if (v10)
    {
      CFArrayAppendValue(Mutable, v10);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v10) {
      CFRelease(v10);
    }
    ++v6;
  }
  while (v4 != v6);
  if (v2) {
LABEL_24:
  }
    CFRelease(v2);
  return Mutable;
}

void FigRoutingManagerNewWirelessPortsAdded(const void *a1)
{
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyAllRoutingContextUUIDs((uint64_t)&theArray);
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      CFIndex v4 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)ValueAtIndex) != 2
          || !MXSystemMirroring_IsTestCodeEnabled())
        {
          break;
        }
        MXSystemMirroring_HandleNewWirelessPorts(a1, ValueAtIndex);
LABEL_33:
        if (++v4 == v3) {
          goto LABEL_56;
        }
      }
      CFTypeRef cf = 0;
      FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)ValueAtIndex, &cf);
      CFArrayRef v22 = 0;
      FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)ValueAtIndex, (uint64_t)&v22);
      int v21 = 0;
      FigRoutingManagerContextUtilities_GetPickingState((uint64_t)ValueAtIndex, (uint64_t)&v21);
      if (FigRoutingManagerAreAllEndpointsBluetoothShareable(v22) && v22 && CFArrayGetCount(v22) >= 2)
      {
        for (CFIndex i = 0; ; ++i)
        {
          CFIndex v7 = (CFIndex)v22;
          if (v22) {
            CFIndex v7 = CFArrayGetCount(v22);
          }
          if (i >= v7)
          {
            int v9 = 1;
            goto LABEL_28;
          }
          uint64_t v8 = CFArrayGetValueAtIndex(v22, i);
          if (!CMSMVAUtility_IsA2DPPortAvailableForEndpoint((BOOL)v8, 0)) {
            break;
          }
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)ValueAtIndex, 6);
        }
        int v9 = 1;
        int v10 = 5;
        goto LABEL_27;
      }
      if (v21 == 8)
      {
        if (CMSMVAUtility_IsPortAvailableForEndpoint((uint64_t)cf, a1))
        {
          if (FigRoutingManagerIsEndpointOfType((uint64_t)cf)) {
            FigRoutingManagerStopCarPlayAudioMainPortPublishedCheckTimer();
          }
          int v9 = 0;
          int v10 = 9;
LABEL_27:
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)ValueAtIndex, v10);
LABEL_28:
          FigRoutingManagerContextUtilities_GetPickingState((uint64_t)ValueAtIndex, (uint64_t)&v21);
          if ((v21 - 5) < 2)
          {
LABEL_29:
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            if (v22) {
              CFRelease(v22);
            }
            goto LABEL_33;
          }
          if (v21 == 9)
          {
            if (v9)
            {
              FigRoutingManagerEnableBluetoothSharingSession(ValueAtIndex, v22);
              goto LABEL_29;
            }
            if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
            {
              FigRoutingManagerRouteToBluetoothDevice(ValueAtIndex, (uint64_t)cf);
              goto LABEL_29;
            }
            uint64_t v20 = 0;
            FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)ValueAtIndex, (uint64_t)cf, (uint64_t)&v20);
            uint64_t v19 = 0;
            FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures((uint64_t)ValueAtIndex, (uint64_t)cf, (uint64_t)&v19);
            CFDictionaryRef theDict = 0;
            FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpointInfo((uint64_t)ValueAtIndex, &theDict);
            if (theDict)
            {
              CFArrayRef Value = CFDictionaryGetValue(theDict, @"CurrentlyActivatingEndpointsInfo_ClientRouteChangeOptions");
              CFDictionaryGetValue(theDict, @"CurrentlyActivatingEndpointsInfo_InternalRouteChangeOptions");
            }
            else
            {
              CFArrayRef Value = 0;
            }
            FigRoutingManager_iOSHandleFigEndpointFeaturesActivation((void *)cf, v19, v20, ValueAtIndex, (uint64_t)Value);
            CFDictionaryRef v16 = theDict;
            if (!theDict) {
              goto LABEL_29;
            }
          }
          else
          {
            if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)ValueAtIndex) != 1) {
              goto LABEL_29;
            }
            CFArrayRef v11 = CMSMVAUtility_CopyWirelessPortsToEnableBluetoothSharing((const __CFArray *)a1);
            if (v11)
            {
              CFArrayRef v12 = v11;
              if (CFArrayGetCount(v11) < 1) {
                CMSMVAUtility_MakeNewlyConnectedWirelessPortsRoutableForEndpoint((const __CFArray *)a1, (uint64_t)cf, (uint64_t)ValueAtIndex);
              }
              else {
                CMSMVAUtility_AggregatePorts((uint64_t)v12, 0, (uint64_t)ValueAtIndex);
              }
              CFRelease(v12);
            }
            else
            {
              CMSMVAUtility_MakeNewlyConnectedWirelessPortsRoutableForEndpoint((const __CFArray *)a1, (uint64_t)cf, (uint64_t)ValueAtIndex);
            }
            uint64_t v14 = routingManager_copyPickedEndpointsFromCurrentRoutesInfo((uint64_t)ValueAtIndex);
            uint64_t v15 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v14, 0);
            FigRoutingManagerContextUtilities_SetPickedEndpoints(ValueAtIndex, v14, @"configUpdateReasonEndedSuccess", 0, (uint64_t)v15);
            if (v15) {
              CFRelease(v15);
            }
            if (!v14) {
              goto LABEL_29;
            }
            CFDictionaryRef v16 = v14;
          }
          CFRelease(v16);
          goto LABEL_29;
        }
      }
      else if (v21 == 5)
      {
        int v9 = 0;
        if (!CMSMVAUtility_IsPortAvailableForEndpoint((uint64_t)cf, a1)) {
          goto LABEL_28;
        }
        int v10 = 6;
        goto LABEL_27;
      }
      int v9 = 0;
      goto LABEL_28;
    }
  }
LABEL_56:
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
  CMSMVAUtility_CreateMusicVADIfNeeded((const __CFArray *)a1, (uint64_t)cf);
  if (*((unsigned char *)FigRoutingManagerGetSharedManager() + 40))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"crossfadePlayback", (const void *)*MEMORY[0x1E4F1CFD0]);
    FigRoutingManagerCrossfadePlayback();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

void FigRoutingManagerCrossfadePlayback()
{
}

void FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(uint64_t a1, CFMutableArrayRef *a2, CFMutableArrayRef *a3, CFMutableArrayRef *a4, CFMutableArrayRef *a5)
{
  uint64_t v5 = a5;
  CFIndex v7 = a3;
  if (a2 || a3 || a4 || a5)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFMutableArrayRef v12 = CFArrayCreateMutable(v9, 0, v10);
    CFMutableArrayRef v13 = CFArrayCreateMutable(v9, 0, v10);
    CFMutableArrayRef v14 = CFArrayCreateMutable(v9, 0, v10);
    CFDictionaryRef theDict = 0;
    FigRoutingManagerContextUtilities_CopyNonControlPickedContexts((uint64_t)&theDict);
    if (theDict)
    {
      uint64_t v36 = v7;
      uint64_t v37 = v5;
      unsigned int v40 = v14;
      uint64_t v41 = v12;
      CFArrayRef theArray = Mutable;
      int64_t Count = CFDictionaryGetCount(theDict);
      CFDictionaryRef v16 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(theDict, v16, 0);
      if (Count >= 1)
      {
        uint64_t v17 = 0;
        CFIndex v38 = v16;
        uint64_t v39 = v13;
        do
        {
          CFTypeRef v18 = v16[v17];
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v18);
          CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(Value, @"CurrentlyActivatingEndpointsInfo");
          if (v20)
          {
            CFArrayRef v21 = v20;
            CFIndex v22 = CFArrayGetCount(v20);
            if (v22 >= 1)
            {
              CFIndex v23 = v22;
              for (CFIndex i = 0; i != v23; ++i)
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, i);
                CFMutableDictionaryRef v26 = CFDictionaryGetValue(ValueAtIndex, @"CurrentlyActivatingEndpointsInfo_Endpoint");
                if (v26)
                {
                  CFIndex v27 = v26;
                  if (FigRoutingManagerIsEndpointOfType((uint64_t)v26))
                  {
                    CFArrayAppendValue(theArray, v27);
                    CFArrayAppendValue(v41, v18);
                  }
                }
              }
            }
          }
          CFArrayRef v28 = (const __CFArray *)CFDictionaryGetValue(Value, @"ActivatedEndpointsInfo");
          CFMutableArrayRef v13 = v39;
          if (v28)
          {
            CFArrayRef v29 = v28;
            CFIndex v30 = CFArrayGetCount(v28);
            if (v30 >= 1)
            {
              CFIndex v31 = v30;
              for (CFIndex j = 0; j != v31; ++j)
              {
                CFDictionaryRef v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, j);
                unsigned int v34 = CFDictionaryGetValue(v33, @"ActivatedEndpointsInfo_Endpoint");
                if (v34)
                {
                  CFIndex v35 = v34;
                  if (FigRoutingManagerIsEndpointOfType((uint64_t)v34))
                  {
                    CFArrayAppendValue(v39, v35);
                    CFArrayAppendValue(v40, v18);
                  }
                }
              }
            }
          }
          ++v17;
          CFDictionaryRef v16 = v38;
        }
        while (v17 != Count);
      }
      uint64_t v5 = v37;
      CFMutableArrayRef v12 = v41;
      CFMutableArrayRef Mutable = theArray;
      CFMutableArrayRef v14 = v40;
      CFIndex v7 = v36;
      if (v16) {
        free(v16);
      }
    }
    if (a2)
    {
      *a2 = Mutable;
      CFMutableArrayRef Mutable = 0;
    }
    if (v7)
    {
      *CFIndex v7 = v12;
      CFMutableArrayRef v12 = 0;
    }
    if (a4)
    {
      *a4 = v13;
      CFMutableArrayRef v13 = 0;
    }
    if (v5)
    {
      *uint64_t v5 = v14;
      CFMutableArrayRef v14 = 0;
    }
    if (theDict)
    {
      CFRelease(theDict);
      CFDictionaryRef theDict = 0;
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v13) {
      CFRelease(v13);
    }
    if (v14) {
      CFRelease(v14);
    }
  }
}

uint64_t FigRoutingManagerPostProcessPickEndpoint(const void *a1, uint64_t a2)
{
  v30[21] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  unsigned int v25 = FigRoutingManagerContextUtilities_SetPickingState(a2, 10);
  v30[0] = 0;
  CFIndex v4 = (void *)MEMORY[0x1E4F1CF80];
  if (a1)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (v8) {
      v8(CMBaseObject, *MEMORY[0x1E4F20E38], *v4, v30);
    }
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      SharedManager = FigRoutingManagerGetSharedManager();
      CFRetain(a1);
      int v10 = *((void *)SharedManager + 1);
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 3221225472;
      v29[2] = __FigRoutingManagerPostProcessPickEndpoint_block_invoke;
      v29[3] = &__block_descriptor_40_e5_v8__0l;
      v29[4] = a1;
      MXDispatchAsync((uint64_t)"FigRoutingManagerPostProcessPickEndpoint", (uint64_t)"FigRoutingManager_iOS.m", 2434, 0, 0, v10, (uint64_t)v29);
    }
  }
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo(a2, (uint64_t)&theArray);
  uint64_t Count = (uint64_t)theArray;
  if (theArray)
  {
    uint64_t Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      uint64_t v13 = Count;
      CFIndex v14 = 0;
      uint64_t v23 = *v4;
      uint64_t v24 = *MEMORY[0x1E4F20F28];
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v14);
        uint64_t Count = (uint64_t)CFDictionaryGetValue(ValueAtIndex, @"ActivatedEndpointsInfo_Endpoint");
        if ((const void *)Count != a1)
        {
          uint64_t v16 = Count;
          uint64_t Count = FigEndpointUtility_EndpointPredicate_ContainsID();
          if (!Count)
          {
            if (FigRoutingManagerIsEndpointOfType(v16)
              || FigRoutingManagerIsEndpointOfType(v16)
              || (uint64_t Count = FigRoutingManagerIsEndpointOfType(v16), Count))
            {
              if (FigRoutingManagerIsEndpointOfType(v16)
                || (FigRoutingManagerIsEndpointOfType(v16)
                 || (uint64_t Count = FigRoutingManagerIsEndpointOfType(v16), Count))
                && (uint64_t Count = FigRoutingManagerIsEndpointOfType((uint64_t)a1), Count))
              {
                uint64_t v27 = 0;
                FigCFDictionaryGetInt64IfPresent();
                CFTypeRef cf = 0;
                uint64_t v17 = FigEndpointGetCMBaseObject();
                uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v18) {
                  uint64_t v19 = v18;
                }
                else {
                  uint64_t v19 = 0;
                }
                CFArrayRef v20 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v19 + 48);
                if (v20) {
                  v20(v17, v24, v23, &cf);
                }
                if (dword_1E9359DC0)
                {
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                FigRoutingManager_iOSDeactivateEndpoint(v16, v27, 0);
                uint64_t Count = (uint64_t)cf;
                if (cf) {
                  CFRelease(cf);
                }
              }
            }
          }
        }
        ++v14;
      }
      while (v13 != v14);
    }
  }
  FigRoutingContextUtilities_LogCurrentState(Count, v11);
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (v30[0]) {
    CFRelease(v30[0]);
  }
  return v25;
}

void __FigRoutingManagerPostProcessPickEndpoint_block_invoke(uint64_t a1)
{
  FigRoutingManagerStopDeactivateAirPlayEndpointTimer();
  CFTypeRef v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void FigRoutingManagerDeactivateEndpointFromPickedContexts(const void *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  CFDictionaryRef theDict[21] = *(CFDictionaryRef *)MEMORY[0x1E4F143B8];
  if (a1)
  {
    theDict[0] = 0;
    FigRoutingManagerContextUtilities_CopyNonControlPickedContexts((uint64_t)theDict);
    if (FigCFDictionaryGetCount() >= 1)
    {
      int64_t Count = CFDictionaryGetCount(theDict[0]);
      uint64_t v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(theDict[0], v6, 0);
      int64_t v31 = Count;
      if (Count >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *MEMORY[0x1E4F21048];
        uint64_t v9 = *MEMORY[0x1E4F1CF80];
        uint64_t v29 = *MEMORY[0x1E4F20F28];
        CFIndex v30 = v6;
        do
        {
          uint64_t v33 = v7;
          int v10 = v6[v7];
          int ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)v10);
          unsigned int v34 = v10;
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict[0], v10);
          CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(Value, @"ActivatedEndpointsInfo");
          if (v13)
          {
            CFArrayRef v14 = v13;
            CFIndex v15 = CFArrayGetCount(v13);
            if (v15 >= 1)
            {
              CFIndex v16 = v15;
              CFIndex v17 = 0;
              unsigned int v36 = ContextType & 0xFFFFFFFB;
              do
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v17);
                uint64_t v19 = CFDictionaryGetValue(ValueAtIndex, @"ActivatedEndpointsInfo_Endpoint");
                uint64_t v39 = 0;
                FigCFDictionaryGetInt64IfPresent();
                CFTypeRef v38 = 0;
                uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
                uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v21) {
                  uint64_t v22 = v21;
                }
                else {
                  uint64_t v22 = 0;
                }
                uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v22 + 48);
                if (v23) {
                  v23(CMBaseObject, v8, v9, &v38);
                }
                if (FigCFEqual()
                  && v19 == a1
                  && !MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed())
                {
                  CFTypeRef cf = 0;
                  uint64_t v24 = FigEndpointGetCMBaseObject();
                  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v25) {
                    uint64_t v26 = v25;
                  }
                  else {
                    uint64_t v26 = 0;
                  }
                  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v26 + 48);
                  if (v27) {
                    v27(v24, v29, v9, &cf);
                  }
                  if (dword_1E9359DC0)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  FigRoutingManager_iOSDeactivateEndpoint(a1, v39, a3);
                  if (cf)
                  {
                    CFRelease(cf);
                    CFTypeRef cf = 0;
                  }
                  if (v36 == 2) {
                    FigRoutingManagerContextUtilities_SetPickedEndpoints(v34, 0, a4, 0, 0);
                  }
                }
                if (v38) {
                  CFRelease(v38);
                }
                ++v17;
              }
              while (v16 != v17);
            }
          }
          uint64_t v7 = v33 + 1;
          uint64_t v6 = v30;
        }
        while (v33 + 1 != v31);
      }
      if (v6) {
        free(v6);
      }
    }
    if (theDict[0]) {
      CFRelease(theDict[0]);
    }
  }
}

uint64_t FigRoutingManagerPickEndpointForContext(const void *a1, const void *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a2))
  {
    if (dword_1E9359DC0)
    {
      LODWORD(cf[0]) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(0);
  }
  else if (FigRoutingManagerIsEndpointOfType((uint64_t)a2))
  {
    cf[0] = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    CFArrayRef v13 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v11 + 48);
    if (v13)
    {
      v13(CMBaseObject, 0x1EE5F4288, *MEMORY[0x1E4F1CF80], cf);
      CFNumberRef v14 = (const __CFNumber *)cf[0];
    }
    else
    {
      CFNumberRef v14 = 0;
    }
    if (CMSMVAUtility_GetPortFromCFNumber(v14) == 1886614639)
    {
      if (dword_1E9359DC0)
      {
        CFIndex v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(0);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  return routingManager_preprocessPickEndpoint(a2, (uint64_t)a1, a1, a3, a4);
}

uint64_t routingManager_preprocessPickEndpoint(const void *a1, uint64_t a2, const void *a3, const __CFDictionary *a4, const __CFDictionary *a5)
{
  uint64_t v8 = a2;
  value[16] = *(void **)MEMORY[0x1E4F143B8];
  FigRoutingContextUtilities_LogCurrentState(a1, a2);
  CFTypeRef v96 = 0;
  uint64_t v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a1)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v13 = v12 ? v12 : 0;
    CFNumberRef v14 = *(void (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v13 + 48);
    if (v14) {
      v14(CMBaseObject, *MEMORY[0x1E4F20F28], *v10, &v96);
    }
  }
  CFIndex v15 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a4);
  FigRoutingManagerLogRoutingRequestDetails(@"preprocessPickEndpoint - ", (uint64_t)a1, 0, 0, (uint64_t)a3, v15);
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)a3, (uint64_t)&theArray);
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v17 = Count;
      if (CFArrayGetValueAtIndex(theArray, 0) == a1)
      {
        uint64_t v21 = 0;
LABEL_36:
        if (dword_1E9359DC0)
        {
          LODWORD(v94) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        value[0] = 0;
        FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a3, v21, (uint64_t)value);
        FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a3, v21);
        FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo((uint64_t)a3, (uint64_t)value[0]);
        FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a3, v15, a5);
        CFArrayRef v52 = (CFArrayRef)value[0];
        if (value[0]) {
          CFRelease(value[0]);
        }
        uint64_t v53 = 0;
        goto LABEL_140;
      }
      CFIndex v18 = 1;
      while (1)
      {
        CFIndex v19 = v18;
        if (v17 == v18) {
          break;
        }
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v18);
        CFIndex v18 = v19 + 1;
        if (ValueAtIndex == a1)
        {
          uint64_t v21 = v19;
          goto LABEL_35;
        }
      }
      uint64_t v21 = 0;
LABEL_35:
      if (v19 < v17) {
        goto LABEL_36;
      }
    }
  }
  CFArrayRef v94 = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a3, (uint64_t)&v94);
  CFAllocatorRef allocator = *v10;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*v10, 0, MEMORY[0x1E4F1D510]);
  uint64_t v23 = Mutable;
  if (a1) {
    CFArrayAppendValue(Mutable, a1);
  }
  int v24 = FigCFEqual();
  if (v23) {
    CFRelease(v23);
  }
  if (!v24) {
    goto LABEL_73;
  }
  if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a3) != 1)
  {
LABEL_72:
    FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a3, v15, a5);
    uint64_t v53 = 0;
    goto LABEL_138;
  }
  uint64_t v86 = v8;
  uint64_t v25 = CMSMUtility_CopyCurrentRouteIdentifiers();
  unsigned int NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  if (v94)
  {
    CFIndex v27 = CFArrayGetCount(v94);
    CFArrayRef v28 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    if (v27 >= 1)
    {
      CFDictionaryRef v83 = a5;
      uint64_t v29 = v15;
      CFIndex v30 = 0;
      uint64_t v31 = *MEMORY[0x1E4F20E38];
      do
      {
        CFArrayGetValueAtIndex(v94, v30);
        value[0] = 0;
        uint64_t v32 = FigEndpointGetCMBaseObject();
        uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v33) {
          uint64_t v34 = v33;
        }
        else {
          uint64_t v34 = 0;
        }
        CFIndex v35 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, void **))(v34 + 48);
        if (v35) {
          v35(v32, v31, allocator, value);
        }
        if (value[0])
        {
          CFArrayAppendValue(v28, value[0]);
          if (value[0]) {
            CFRelease(value[0]);
          }
        }
        ++v30;
      }
      while (v27 != v30);
      CFIndex v15 = v29;
      a5 = v83;
    }
  }
  else
  {
    CFArrayRef v28 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  }
  if (FigCFEqual())
  {
    uint64_t v37 = 0;
    LODWORD(v38) = 0;
    char v39 = 1;
    goto LABEL_65;
  }
  os_log_type_t v81 = v15;
  CFDictionaryRef v84 = a5;
  uint64_t v40 = NumberOfCurrentOutputPorts;
  CFTypeRef v88 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  if (NumberOfCurrentOutputPorts)
  {
    CFIndex v41 = 0;
    uint64_t v42 = *MEMORY[0x1E4F20660];
    uint64_t v87 = *MEMORY[0x1E4F20638];
    do
    {
      uint64_t v43 = CFArrayGetValueAtIndex(v25, v41);
      uint64_t v44 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v43, 0, v42, (uint64_t)a3);
      if (v44)
      {
        uint64_t v45 = (const void *)v44;
        value[0] = 0;
        uint64_t v46 = FigEndpointGetCMBaseObject();
        uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v47) {
          uint64_t v48 = v47;
        }
        else {
          uint64_t v48 = 0;
        }
        unsigned int v49 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, void **))(v48 + 48);
        if (v49) {
          v49(v46, 0x1EE5F4288, allocator, value);
        }
        unsigned int PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)value[0]);
        if (PortFromCFNumber == 1885433971 || PortFromCFNumber == 1885433953)
        {
          CFRelease(v45);
          uint64_t v45 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v43, 1, v87, (uint64_t)a3);
        }
        if (value[0]) {
          CFRelease(value[0]);
        }
        if (v45)
        {
          CFArrayAppendValue(v88, v45);
          CFRelease(v45);
        }
      }
      ++v41;
    }
    while (v40 != v41);
  }
  uint64_t v37 = v88;
  if (!v88)
  {
    LODWORD(v38) = 0;
    char v39 = 1;
    goto LABEL_64;
  }
  if (FigCFEqual())
  {
    char v39 = 0;
    LODWORD(v38) = 1;
LABEL_64:
    CFIndex v15 = v81;
    a5 = v84;
    goto LABEL_65;
  }
  CFTypeRef v38 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v88, 0);
  FigRoutingManagerContextUtilities_SetPickedEndpoints(a3, v88, 0, 0, (uint64_t)v38);
  if (dword_1E9359DC0)
  {
    *(_DWORD *)os_log_type_t type = 0;
    LOBYTE(v92) = 0;
    v78 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v37 = v88;
  }
  CFIndex v15 = v81;
  a5 = v84;
  if (v38)
  {
    CFRelease(v38);
    char v39 = 0;
    LODWORD(v38) = 0;
  }
  else
  {
    char v39 = 0;
  }
LABEL_65:
  if (v28) {
    CFRelease(v28);
  }
  if (v25) {
    CFRelease(v25);
  }
  if ((v39 & 1) == 0) {
    CFRelease(v37);
  }
  uint64_t v8 = v86;
  if (v38) {
    goto LABEL_72;
  }
LABEL_73:
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 1);
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint(v8, (uint64_t)a3, (uint64_t)a1, (uint64_t)v15, (uint64_t)a5);
  if (a1)
  {
    *(void *)os_log_type_t type = 0;
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      uint64_t v54 = FigEndpointGetCMBaseObject();
      uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v56 = v55 ? v55 : 0;
      uint64_t v58 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, os_log_type_t *))(v56 + 48);
      if (v58) {
        v58(v54, 0x1EE5F43E8, allocator, type);
      }
    }
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)a1)
      && (!FigRoutingManagerIsEndpointOfType((uint64_t)a1) || !FigCFEqual()))
    {
      if (!FigRoutingManagerIsEndpointOfType((uint64_t)a1)
        && !FigRoutingManagerIsEndpointOfType((uint64_t)a1))
      {
        if (FigRoutingManagerIsEndpointOfType((uint64_t)a1)
          || FigRoutingManagerIsEndpointOfType((uint64_t)a1))
        {
          uint64_t v53 = routingManager_processPickEndpoint(a1, a3, v15, a5);
        }
        else
        {
          uint64_t v53 = 0;
        }
LABEL_136:
        if (*(void *)type) {
          CFRelease(*(CFTypeRef *)type);
        }
        goto LABEL_138;
      }
      value[0] = 0;
      CFTypeRef cf = 0;
      FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
      FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)cf, (CFTypeRef *)value);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)value[0]))
      {
        FigRoutingManagerLogEndpointID(@"PreprocessPickEndpoint - Calling to remove all sub-endpoints from the aggregate", (uint64_t)value[0], @"before calling to activate CarPlay/Nero", 1);
        FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)value[0], cf, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
        CMSMVAUtility_DestroyMusicVADIfNeeded((uint64_t)cf);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, 0, @"configUpdateReasonEndedSuccess", (uint64_t)v15, 0);
      }
      uint64_t v53 = routingManager_processPickEndpoint(a1, a3, v15, a5);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      CFTypeRef v64 = value[0];
      if (!value[0]) {
        goto LABEL_136;
      }
LABEL_135:
      CFRelease(v64);
      goto LABEL_136;
    }
    uint64_t v91 = 0;
    CFTypeRef v92 = 0;
    FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(&v91, &v92, 0);
    if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a3) == 5 && v91)
    {
      CFTypeRef v90 = 0;
      uint64_t v59 = FigEndpointGetCMBaseObject();
      uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v60) {
        uint64_t v61 = v60;
      }
      else {
        uint64_t v61 = 0;
      }
      uint64_t v74 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v61 + 48);
      if (v74) {
        v74(v59, *MEMORY[0x1E4F20F28], allocator, &v90);
      }
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 2);
      if (CMSMVAUtility_CreatePerAppAirPlayVADWithHandOffPort((uint64_t)a3))
      {
        uint64_t v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (dword_1E9359DC0)
      {
        uint64_t v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      value[0] = 0;
      FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v92, v91, (uint64_t)value);
      FigRoutingManager_iOSDeactivateEndpoint(v91, value[0], 1);
LABEL_131:
      FigRoutingManagerContextUtilities_SetPickedEndpoints(v92, 0, @"configUpdateReasonEndedBottomUpRouteChange", 0, 0);
      goto LABEL_132;
    }
    uint64_t ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a3);
    if (ContextType == 7)
    {
      value[0] = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a3, 0, (uint64_t)value);
      if (value[0])
      {
        FigRoutingManagerLogEndpointID(@"Preprocess - Calling to deactivate endpoint with name=", (uint64_t)value[0], @"because current picked endpoint is AirPlay", 1);
        CFTypeRef cf = 0;
        FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a3, (uint64_t)value[0], (uint64_t)&cf);
        FigRoutingManager_iOSDeactivateEndpoint(value[0], cf, 1);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(a3, 0, @"configUpdateReasonEndedBottomUpRouteChange", 0, 0);
      }
      if (FigRoutingManagerIsEndpointActivated((uint64_t)a1))
      {
        FigRoutingManagerLogEndpointID(@"Preprocess - Calling to deactivate/remove endpoint with name=", (uint64_t)value[0], @"because is activated for another routing context", 1);
        if (MXSystemRemotePool_RemoveEndpoint(a1) == -13002)
        {
          CFTypeRef cf = 0;
          FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a3, (uint64_t)a1, (uint64_t)&cf);
          FigRoutingManager_iOSDeactivateEndpoint(a1, cf, 1);
        }
      }
      uint64_t v53 = routingManager_processPickEndpoint(a1, a3, v15, a5);
      CFTypeRef v63 = value[0];
      if (!value[0]) {
        goto LABEL_134;
      }
    }
    else
    {
      if (v91)
      {
        uint64_t ContextType = FigRoutingManagerUtilities_IsCurrentRouteHandoff();
        if (!ContextType)
        {
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 2);
          CMSMAP_MakeAirPlayHandOffPortRoutable(1, (uint64_t)a3);
          CFTypeRef v90 = 0;
          FigEndpointCopyProperty(v91, *MEMORY[0x1E4F20F28], (uint64_t)allocator, (uint64_t)&v90);
          if (FigRoutingManagerIsEndpointOfType(v91))
          {
            if (dword_1E9359DC0)
            {
              unsigned int v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            value[0] = 0;
            FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v92, v91, (uint64_t)value);
            FigRoutingManager_iOSDeactivateEndpoint(v91, value[0], 1);
            if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)v92) != 1) {
              goto LABEL_131;
            }
          }
          else if (FigRoutingManagerIsEndpointOfType(v91))
          {
            if (dword_1E9359DC0)
            {
              CFTypeRef v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            FigRoutingManagerRemoveAllSubEndpointsFromAggregate(v91, v92, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
            CMSMVAUtility_DestroyMusicVADIfNeeded((uint64_t)v92);
            goto LABEL_131;
          }
LABEL_132:
          uint64_t v53 = routingManager_processPickEndpoint(a1, a3, v15, a5);
          CFTypeRef v63 = v90;
          if (!v90) {
            goto LABEL_134;
          }
          goto LABEL_133;
        }
      }
      CFDictionaryRef v82 = v15;
      CFDictionaryRef v85 = a5;
      value[0] = 0;
      CFTypeRef cf = 0;
      FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(ContextType, (CFMutableArrayRef *)value, (CFMutableArrayRef *)&cf, 0, 0);
      if (value[0])
      {
        CFIndex v65 = CFArrayGetCount((CFArrayRef)value[0]);
        if (v65 >= 1)
        {
          CFIndex v66 = v65;
          for (CFIndex i = 0; i != v66; ++i)
          {
            v68 = CFArrayGetValueAtIndex((CFArrayRef)value[0], i);
            int v69 = CFArrayGetValueAtIndex((CFArrayRef)cf, i);
            if (v68 != a1 || v69 != a3)
            {
              int v71 = v69;
              uint64_t FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures((uint64_t)v68, (uint64_t)v69);
              CFMutableDictionaryRef v73 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              FigCFDictionarySetValue();
              CFTypeRef v90 = 0;
              FigRoutingManagerCreateEndpointDeactivateCompletionContext(v71, &v90);
              FigRoutingManagerLogEndpointID(@"Preprocess - Calling to deactivate endpoint with name=", (uint64_t)v68, 0, 1);
              FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)v71, (uint64_t)v68, @"configUpdateReasonEndedUserCancelled");
              FigRoutingManagerEndpointDeactivateWithCompletionCallback((uint64_t)v68, FigEndpointFeatures, (uint64_t)v73, (void (*)(void, uint64_t, void, void, uint64_t))FigRoutingManager_iOSEndpointDeactivateCompletionCallback, (uint64_t)v90);
              if (v73) {
                CFRelease(v73);
              }
            }
          }
        }
      }
      CFIndex v15 = v82;
      uint64_t v53 = routingManager_processPickEndpoint(a1, a3, v82, v85);
      if (value[0])
      {
        CFRelease(value[0]);
        value[0] = 0;
      }
      CFTypeRef v63 = cf;
      if (!cf)
      {
LABEL_134:
        CFTypeRef v64 = v92;
        if (!v92) {
          goto LABEL_136;
        }
        goto LABEL_135;
      }
    }
LABEL_133:
    CFRelease(v63);
    goto LABEL_134;
  }
  unsigned int v57 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a3);
  if (v57 <= 0xD && ((1 << v57) & 0x2012) != 0) {
    uint64_t v53 = 4294954296;
  }
  else {
    uint64_t v53 = routingManager_processPickEndpoint(0, a3, v15, a5);
  }
LABEL_138:
  CFArrayRef v52 = v94;
  if (v94) {
    CFRelease(v94);
  }
LABEL_140:
  FigRoutingContextUtilities_LogCurrentState(v52, v51);
  if (v15) {
    CFRelease(v15);
  }
  if (v96)
  {
    CFRelease(v96);
    CFTypeRef v96 = 0;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v53;
}

uint64_t FigRoutingManagerPickRouteDescriptorForContext(const void *a1, CFDictionaryRef theDict, const __CFDictionary *a3, const __CFDictionary *a4)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (theDict) {
    CFDictionaryGetValue(theDict, @"RouteName");
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1) == 3
    || FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1) == 9)
  {
    goto LABEL_7;
  }
  if (theDict && FigCFDictionaryGetCount())
  {
    uint64_t v13 = FigEndpointDescriptorUtility_CopyEndpointFromDescriptor((uint64_t)theDict, (uint64_t)a1);
    if (!v13)
    {
LABEL_7:
      uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v10 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v10, @"configUpdateReasonEndedFailed");
      if (v10) {
        CFRelease(v10);
      }
      return 4294954296;
    }
    CFNumberRef v14 = (const void *)v13;
    cf[0] = 0;
    routingManager_validateAndCopyLeaderContextForPickingRouteDescriptor(a1, theDict, cf);
    if (cf[0])
    {
      uint64_t v11 = routingManager_preprocessPickEndpoint(v14, (uint64_t)a1, cf[0], a3, a4);
      if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1) == 5
        && !FigCFEqual())
      {
        uint64_t v11 = routingManager_preprocessPickEndpoint(0, (uint64_t)a1, a1, a3, a4);
      }
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    CFTypeRef v15 = v14;
LABEL_27:
    CFRelease(v15);
    goto LABEL_28;
  }
  cf[0] = 0;
  routingManager_validateAndCopyLeaderContextForPickingRouteDescriptor(a1, theDict, cf);
  if (cf[0])
  {
    uint64_t v11 = routingManager_preprocessPickEndpoint(0, (uint64_t)a1, cf[0], a3, a4);
    CFTypeRef v15 = cf[0];
    if (!cf[0]) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v11 = 0;
LABEL_28:
  if (v11 != -13000) {
    return v11;
  }
  CFIndex v16 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v16, @"configUpdateReasonEndedFailed");
  return 4294954296;
}

CFTypeRef routingManager_validateAndCopyLeaderContextForPickingRouteDescriptor(CFTypeRef result, const __CFDictionary *a2, CFTypeRef *a3)
{
  if (!a3) {
    return result;
  }
  uint64_t v5 = result;
  if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)result) != 5) {
    goto LABEL_15;
  }
  if (a2)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a2, @"RouteSupportsAirPlayVideo");
    uint64_t v7 = (const void *)*MEMORY[0x1E4F1CFD0];
    int IsFollowingAnotherContext = FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)v5);
    if (Value != v7)
    {
      if (IsFollowingAnotherContext)
      {
        FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)v5, (uint64_t)a3);
      }
      else
      {
        FigRoutingContextUtilities_SetLeaderToSystemAudioContext(v5, 0);
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)a3);
      }
LABEL_15:
      uint64_t result = *a3;
      if (*a3) {
        return result;
      }
      goto LABEL_16;
    }
    if (!IsFollowingAnotherContext) {
      goto LABEL_15;
    }
    FigRoutingContextUtilities_UnfollowUUIDFromLeader(v5, 0);
  }
  if (v5) {
    uint64_t result = CFRetain(v5);
  }
  else {
    uint64_t result = 0;
  }
  *a3 = result;
  if (!result)
  {
LABEL_16:
    if (v5) {
      uint64_t result = CFRetain(v5);
    }
    else {
      uint64_t result = 0;
    }
    *a3 = result;
  }
  return result;
}

uint64_t FigRoutingManagerPickEndpointsForContext(const void *a1, const __CFArray *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  FigRoutingManagerLogEndpointIDs(@"Picking routes with IDs: ", a2, 0, 1);
  if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1) == 4)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFIndex v9 = 0;
    if (a2) {
      goto LABEL_10;
    }
LABEL_11:
    for (CFIndex i = 0; v9 < i; CFIndex i = CFArrayGetCount(a2))
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v9);
      if ((!CMSMDeviceState_IsHomePodHub()
         || !FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex)
         || !FigRoutingManagerIsEndpointOfSubtype((uint64_t)ValueAtIndex))
        && FigRoutingManagerIsEndpointWHAGroupable((uint64_t)ValueAtIndex))
      {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
      ++v9;
      if (!a2) {
        goto LABEL_11;
      }
LABEL_10:
      ;
    }
  }
  else
  {
    if (!a2)
    {
      CFMutableArrayRef Mutable = 0;
      BOOL v12 = 1;
      BOOL v14 = 1;
      goto LABEL_30;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
  }
  BOOL v12 = Mutable == 0;
  if (Mutable) {
    CFIndex Count = CFArrayGetCount(Mutable);
  }
  else {
    CFIndex Count = 0;
  }
  BOOL v14 = a2 == 0;
  if (a2) {
    CFIndex v15 = CFArrayGetCount(a2);
  }
  else {
    CFIndex v15 = 0;
  }
  if (Count != v15)
  {
    if (Mutable && CFArrayGetCount(Mutable))
    {
      FigRoutingManagerLogEndpointIDs(@"Picking filtered routes with ID: ", a2, 0, 1);
      BOOL v12 = 0;
    }
    else
    {
      if (dword_1E9359DC0)
      {
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, a3, @"configUpdateReasonStarted");
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, a3, @"configUpdateReasonEndedFailed");
    }
  }
LABEL_30:
  CFTypeRef v55 = 0;
  int ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType != 3)
  {
    if (ContextType == 1
      && !v14
      && (unint64_t)CFArrayGetCount(a2) >= 2
      && !FigRoutingManagerAreAllEndpointsBluetoothShareable(a2))
    {
LABEL_61:
      *(_DWORD *)os_log_type_t type = 0;
      v53[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v33 = 4294954296;
      goto LABEL_67;
    }
LABEL_66:
    uint64_t v33 = 0;
LABEL_67:
    CFTypeRef v34 = v55;
    if (v55) {
      goto LABEL_68;
    }
    goto LABEL_81;
  }
  if (v14 || (CFIndex v18 = CFArrayGetCount(a2), v18 < 1))
  {
    FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
    if (dword_1E9359DC0)
    {
      *(_DWORD *)os_log_type_t type = 0;
      v53[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_66;
  }
  unint64_t v19 = v18;
  if (!FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable((CFIndex)a2))
  {
    if (v19 >= 2 && !FigRoutingManagerAreAllEndpointsBluetoothShareable(a2)) {
      goto LABEL_61;
    }
    if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1)) {
      goto LABEL_62;
    }
    uint64_t v23 = CFArrayGetValueAtIndex(a2, 0);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v23))
    {
      CFDictionaryRef v24 = a4;
      CFTypeRef v25 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
      cf[0] = *(CFTypeRef *)MEMORY[0x1E4F1CFC8];
      FigEndpointCopyProperty((uint64_t)v23, *MEMORY[0x1E4F20E60], *MEMORY[0x1E4F1CF80], (uint64_t)cf);
      CFTypeRef v26 = cf[0];
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      BOOL v27 = v26 == v25;
      a4 = v24;
      if (v27)
      {
        if (dword_1E9359DC0)
        {
          *(_DWORD *)os_log_type_t type = 0;
          v53[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a4 = v24;
        }
        goto LABEL_65;
      }
    }
    if (!dword_1E9359DC0)
    {
LABEL_64:
      FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
LABEL_65:
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v55);
      goto LABEL_66;
    }
    *(_DWORD *)os_log_type_t type = 0;
    v53[0] = OS_LOG_TYPE_DEFAULT;
    CFArrayRef v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
LABEL_63:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_64;
  }
  BOOL shouldSystemMusicFollowSystemAudio = routingManager_shouldSystemMusicFollowSystemAudio(a2, 0);
  if (!FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
  {
    if (!shouldSystemMusicFollowSystemAudio)
    {
      if (dword_1E9359DC0)
      {
        *(_DWORD *)os_log_type_t type = 0;
        v53[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_77;
    }
    if (!dword_1E9359DC0) {
      goto LABEL_64;
    }
    *(_DWORD *)os_log_type_t type = 0;
    v53[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    goto LABEL_63;
  }
  if (shouldSystemMusicFollowSystemAudio)
  {
    if (dword_1E9359DC0)
    {
      *(_DWORD *)os_log_type_t type = 0;
      v53[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_62:
    FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)&v55);
    goto LABEL_66;
  }
  if (dword_1E9359DC0)
  {
    *(_DWORD *)os_log_type_t type = 0;
    v53[0] = OS_LOG_TYPE_DEFAULT;
    CFIndex v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRoutingContextUtilities_UnfollowUUIDFromLeader(a1, 0);
LABEL_77:
  if (a1) {
    CFTypeRef v34 = CFRetain(a1);
  }
  else {
    CFTypeRef v34 = 0;
  }
  uint64_t v33 = 0;
  CFTypeRef v55 = v34;
  if (v34)
  {
LABEL_68:
    if (v33) {
      goto LABEL_69;
    }
    goto LABEL_85;
  }
LABEL_81:
  if (a1) {
    CFTypeRef v34 = CFRetain(a1);
  }
  else {
    CFTypeRef v34 = 0;
  }
  CFTypeRef v55 = v34;
  if (v33)
  {
LABEL_69:
    if (!v34) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
LABEL_85:
  if (v12) {
    CFIndex v37 = 0;
  }
  else {
    CFIndex v37 = CFArrayGetCount(Mutable);
  }
  int v38 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (v38 == 1) {
    goto LABEL_91;
  }
  if (v38 == 4)
  {
    if (CMSMDeviceState_IsHomePodHub())
    {
      uint64_t v42 = MXAudioContext_HandlePickEndpoints(Mutable, a1, a3, a4);
      goto LABEL_130;
    }
    if (dword_1E9359DC0)
    {
      *(_DWORD *)os_log_type_t type = 0;
      v53[0] = OS_LOG_TYPE_DEFAULT;
      unsigned int v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_114:
    uint64_t v33 = 0;
    goto LABEL_131;
  }
  if (v38 != 3) {
    goto LABEL_114;
  }
LABEL_91:
  if (v37 < 1)
  {
    CFArrayRef v43 = 0;
LABEL_128:
    CFTypeRef v45 = a1;
    CFDictionaryRef v46 = a3;
    CFDictionaryRef v47 = a4;
    int v48 = 0;
    goto LABEL_129;
  }
  if (FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable((CFIndex)Mutable))
  {
    if (FigRoutingManagerDoEndpointsContainLocalAirPlayEndpoint(Mutable))
    {
      *(void *)os_log_type_t type = 0;
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)type);
      *(void *)uint64_t v53 = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(*(uint64_t *)type, 0, (uint64_t)v53);
      if (!FigRoutingManagerIsEndpointWHAGroupable(*(uint64_t *)v53)
        && !FigRoutingManagerUtilities_IsSystemAudioRouteNull()
        && !FigRoutingManagerIsEndpointLowLatencyAirPlay(*(uint64_t *)v53))
      {
        BOOL IsSystemAudioRouteAirPlayLowLatency = FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency();
        unsigned int v40 = FigRoutingManagerDoEndpointsContainOdeonEndpoint(Mutable);
        if (!IsSystemAudioRouteAirPlayLowLatency && v40 && CMSMDeviceState_ItsAnAppleTV())
        {
          if (dword_1E9359DC0)
          {
            CFIndex v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          routingManager_routeToLowLatencyAirPlay((uint64_t)a3);
        }
        else
        {
          if (dword_1E9359DC0)
          {
            uint64_t v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!v12 && CFArrayGetCount(Mutable) == 1) {
            FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, @"configUpdateReasonEndedSuccess");
          }
          CFTypeRef v52 = FigRoutingManagerCopyWHAGroupableVAEndpoint();
          FigRoutingManagerPickEndpointForContext(*(const void **)type, v52, 0, 0);
          if (v52) {
            CFRelease(v52);
          }
        }
      }
      if (*(void *)type)
      {
        CFRelease(*(CFTypeRef *)type);
        *(void *)os_log_type_t type = 0;
      }
      if (*(void *)v53) {
        CFRelease(*(CFTypeRef *)v53);
      }
    }
    CFArrayRef v43 = Mutable;
    goto LABEL_128;
  }
  char v44 = !FigRoutingManagerAreAllEndpointsBluetoothShareable(Mutable) || v12;
  if ((v44 & 1) == 0 && CFArrayGetCount(Mutable) >= 2)
  {
    CFTypeRef v45 = v55;
    CFArrayRef v43 = Mutable;
    CFDictionaryRef v46 = a3;
    CFDictionaryRef v47 = a4;
    int v48 = 1;
LABEL_129:
    uint64_t v42 = routingManager_preprocessPickEndpoints(v43, v45, v46, v47, v48);
    goto LABEL_130;
  }
  unsigned int v50 = CFArrayGetValueAtIndex(Mutable, 0);
  routingManager_emptyAggregateEndpointIfNecessary((uint64_t)v50, a1);
  uint64_t v42 = routingManager_preprocessPickEndpoint(v50, (uint64_t)a1, v55, a3, a4);
LABEL_130:
  uint64_t v33 = v42;
LABEL_131:
  CFTypeRef v34 = v55;
  if (v55)
  {
LABEL_70:
    CFRelease(v34);
    CFTypeRef v55 = 0;
  }
LABEL_71:
  if (!v12) {
    CFRelease(Mutable);
  }
  return v33;
}

void routingManager_routeToLowLatencyAirPlay(uint64_t a1)
{
  v9[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (dword_1E9359DC0)
  {
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)v9);
  if (CMSMVAUtility_MakeLowLatencyAirPlayPortRoutable((uint64_t)v9[0]))
  {
    CFIndex v3 = CMSMUtility_CopyCurrentRouteIdentifiers();
    CFIndex v4 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v3, (uint64_t)v9[0]);
    uint64_t v5 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v4, 0);
    FigRoutingManagerContextUtilities_SetPickedEndpoints(v9[0], v4, @"configUpdateReasonEndedSuccess", a1, (uint64_t)v5);
    *(void *)os_log_type_t type = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)type);
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(*(uint64_t *)type, (uint64_t)&cf);
    FigRoutingManagerAggregateAddLocalAirPlayEndpoint(*(const void **)type, (void *)cf);
    FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(*(const void **)type, cf, @"configUpdateReasonEndedBottomUpRouteChange", 0);
    if (dword_1E9359DC0)
    {
      uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingContextUtilities_UnfollowUUIDFromLeader(*(const void **)type, @"configUpdateReasonEndedBottomUpRouteChange");
    if (v5) {
      CFRelease(v5);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v3) {
      CFRelease(v3);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (*(void *)type) {
      CFRelease(*(CFTypeRef *)type);
    }
  }
  if (v9[0]) {
    CFRelease(v9[0]);
  }
}

uint64_t routingManager_preprocessPickEndpoints(const __CFArray *a1, const void *a2, const __CFDictionary *a3, const void *a4, int a5)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  FigRoutingContextUtilities_LogCurrentState(a1, a2);
  uint64_t v10 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  FigRoutingManagerLogRoutingRequestDetails(@"preprocessPickEndpoints - ", 0, a1, 0, (uint64_t)a2, v10);
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 1);
  if (a5)
  {
    uint64_t v11 = routingManager_processPickEndpoints(a1, a2, v10, a4, 1);
    uint64_t v13 = 0;
  }
  else
  {
    CFTypeRef v22 = 0;
    cf[0] = 0;
    FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(cf, &v22, 0);
    if (cf[0] && v22 && !FigCFEqual())
    {
      CFTypeRef v21 = 0;
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      CFIndex v18 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v17 + 48);
      if (v18) {
        v18(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &v21);
      }
      if (FigRoutingManagerUtilities_IsCurrentRouteHandoff())
      {
        uint64_t v13 = 0;
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 2);
        CMSMAP_MakeAirPlayHandOffPortRoutable(1, (uint64_t)a2);
        if (dword_1E9359DC0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingManagerDeactivateEndpointFromPickedContexts(cf[0], v19, 1u, @"configUpdateReasonEndedSuccess");
        uint64_t v13 = routingManager_processPickEndpoints(a1, a2, v10, a4, 0);
      }
      if (v21) {
        CFRelease(v21);
      }
    }
    else
    {
      uint64_t v13 = routingManager_processPickEndpoints(a1, a2, v10, a4, 0);
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    uint64_t v11 = (uint64_t)v22;
    if (v22) {
      CFRelease(v22);
    }
  }
  FigRoutingContextUtilities_LogCurrentState(v11, v12);
  if (v10) {
    CFRelease(v10);
  }
  return v13;
}

void routingManager_emptyAggregateEndpointIfNecessary(uint64_t a1, const void *a2)
{
  v21[16] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFTypeRef cf = 0;
    CFArrayRef theArray = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)&cf);
    CFIndex v4 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (cf
      && ((uint64_t CMBaseObject = FigEndpointGetCMBaseObject(), (v6 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v7 = 0)
        : (uint64_t v7 = v6),
          (uint64_t v8 = *(void (**)(uint64_t, void, CFAllocatorRef, CFArrayRef *))(v7 + 48)) != 0
       && (v8(CMBaseObject, *MEMORY[0x1E4F20FB0], *v4, &theArray), theArray)))
    {
      BOOL v10 = CFArrayGetCount(theArray) == 1
         && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0),
             FigRoutingManagerIsEndpointOfSubtype((uint64_t)ValueAtIndex))
         && CMSMDeviceState_ItsAnAppleTV() != 0;
      if (theArray)
      {
        CFRelease(theArray);
        CFArrayRef theArray = 0;
      }
    }
    else
    {
      BOOL v10 = 0;
    }
    if (!FigRoutingManagerIsEndpointOfType(a1)) {
      goto LABEL_20;
    }
    uint64_t v11 = (const void *)*MEMORY[0x1E4F1CFC8];
    v21[0] = *MEMORY[0x1E4F1CFC8];
    uint64_t v12 = FigEndpointGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFIndex v15 = *(void (**)(uint64_t, void, CFAllocatorRef, void *))(v14 + 48);
    if (v15)
    {
      v15(v12, *MEMORY[0x1E4F20E60], *v4, v21);
      uint64_t v16 = (const void *)v21[0];
      if (!v21[0]) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v16 = v11;
      if (!v11)
      {
LABEL_19:
        if (v16 == v11)
        {
          if (dword_1E9359DC0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          goto LABEL_30;
        }
LABEL_20:
        if (!v10)
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(*v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionarySetValue(Mutable, @"initiator", @"SelectRouteInitiator_EmptyAggregateEndpoint");
          routingManager_processPickEndpoints(0, a2, 0, Mutable, 0);
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
LABEL_30:
        if (cf) {
          CFRelease(cf);
        }
        return;
      }
    }
    CFRelease(v16);
    goto LABEL_19;
  }
}

uint64_t FigRoutingManagerPickRouteDescriptorsForContext(const void *a1, const __CFArray *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      for (CFIndex i = 0; i != v11; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
        CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, @"RouteName");
        if (Value) {
          CFArrayAppendValue(Mutable, Value);
        }
      }
    }
  }
  if (dword_1E9359DC0)
  {
    LODWORD(cf) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2)
  {
    FigRoutingManagerPickEndpointsForContext(a1, 0, a3, a4);
    goto LABEL_73;
  }
  CFAllocatorRef v47 = v8;
  uint64_t v16 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
  CFIndex v17 = CFArrayGetCount(a2);
  if (v17 < 1) {
    goto LABEL_63;
  }
  CFIndex v18 = v17;
  CFDictionaryRef v45 = a4;
  CFDictionaryRef v46 = Mutable;
  CFIndex v19 = 0;
  int v48 = v16;
  do
  {
    CFArrayRef v20 = CFArrayGetValueAtIndex(a2, v19);
    uint64_t v21 = FigEndpointDescriptorUtility_CopyEndpointFromDescriptor((uint64_t)v20, (uint64_t)a1);
    if (v21)
    {
      CFTypeRef v22 = (const void *)v21;
      if (FigRoutingManagerIsEndpointOfType(v21))
      {
        if (dword_1E9359DC0)
        {
          LODWORD(cf) = 0;
          uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v24 = cf;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v25 = v24;
          }
          else {
            unsigned int v25 = v24 & 0xFFFFFFFE;
          }
          if (v25)
          {
            int v50 = 136315138;
            uint64_t v51 = "FigRoutingManagerPickRouteDescriptorsForContext";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(0);
      }
      else if (FigRoutingManagerIsEndpointOfType((uint64_t)v22))
      {
        CFTypeRef cf = 0;
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        char v39 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v31 + 48);
        if (v39) {
          v39(CMBaseObject, 0x1EE5F4288, v47, &cf);
        }
        if (CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)cf) == 1886614639)
        {
          if (dword_1E9359DC0)
          {
            unsigned int v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(0);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      if (FigRoutingManagerIsEndpointOfType((uint64_t)v22)
        && FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v22))
      {
        CFTypeRef v32 = FigRoutingManagerCopyLocalAirPlayEndpoint();
        if (dword_1E9359DC0)
        {
          LODWORD(cf) = 0;
          uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v34 = cf;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v35 = v34;
          }
          else {
            unsigned int v35 = v34 & 0xFFFFFFFE;
          }
          if (v35)
          {
            int v50 = 136315138;
            uint64_t v51 = "FigRoutingManagerPickRouteDescriptorsForContext";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v16 = v48;
        }
        if (v32)
        {
          CFArrayAppendValue(v16, v32);
          CFRelease(v32);
        }
        else
        {
          LODWORD(cf) = 0;
          unsigned int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v37 = cf;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v38 = v37;
          }
          else {
            unsigned int v38 = v37 & 0xFFFFFFFE;
          }
          if (v38)
          {
            int v50 = 136315138;
            uint64_t v51 = "FigRoutingManagerPickRouteDescriptorsForContext";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        CFArrayAppendValue(v16, v22);
      }
      CFRelease(v22);
    }
    else
    {
      LODWORD(cf) = 0;
      CFTypeRef v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v27 = cf;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v28 = v27;
      }
      else {
        unsigned int v28 = v27 & 0xFFFFFFFE;
      }
      if (v28)
      {
        int v50 = 136315138;
        uint64_t v51 = "FigRoutingManagerPickRouteDescriptorsForContext";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    ++v19;
  }
  while (v18 != v19);
  CFMutableArrayRef Mutable = v46;
  a4 = v45;
  if (v16)
  {
    if (CFArrayGetCount(v16))
    {
LABEL_63:
      FigRoutingManagerPickEndpointsForContext(a1, v16, a3, a4);
      if (!v16) {
        goto LABEL_73;
      }
LABEL_72:
      CFRelease(v16);
      goto LABEL_73;
    }
  }
  LODWORD(cf) = 0;
  CFIndex v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v42 = cf;
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v43 = v42;
  }
  else {
    unsigned int v43 = v42 & 0xFFFFFFFE;
  }
  if (v43)
  {
    int v50 = 136315394;
    uint64_t v51 = "FigRoutingManagerPickRouteDescriptorsForContext";
    __int16 v52 = 2114;
    uint64_t v53 = v46;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, a3, @"configUpdateReasonStarted");
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, a3, @"configUpdateReasonEndedFailed");
  uint64_t v16 = v48;
  if (v48) {
    goto LABEL_72;
  }
LABEL_73:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return 0;
}

uint64_t FigRoutingManager_iOSAddEndpointToContext(const void *a1, const void *a2, CFDictionaryRef theDict)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v3 = 4294954296;
  if (!a1 || !a2) {
    return v3;
  }
  uint64_t v6 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(theDict);
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef v9 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_IsAddOperation", (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_UserPickedRoute", v9);
  if (MX_FeatureFlags_IsMandrakeEverywhereEnabled()
    || MX_FeatureFlags_IsMandrakeEverywhereEnabled())
  {
    uint64_t Value = FigCFDictionaryGetValue();
    CFTypeRef v11 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    if (Value) {
      uint64_t v12 = (const void *)Value;
    }
    else {
      uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_IsPredictedRouteOperation", v12);
  }
  else
  {
    CFTypeRef v11 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  }
  FigRoutingManagerLogEndpointID(@"Adding endpoint=", (uint64_t)a2, 0, 1);
  CFTypeRef v86 = v11;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v15 + 48);
  if (v16) {
    v16(CMBaseObject, *MEMORY[0x1E4F20EC8], v7, &v86);
  }
  CFTypeRef v85 = v11;
  uint64_t v17 = FigEndpointGetCMBaseObject();
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  CFArrayRef v20 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v19 + 48);
  if (v20) {
    v20(v17, *MEMORY[0x1E4F20E50], v7, &v85);
  }
  CFTypeRef v84 = 0;
  int ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType == 1)
  {
    if (routingManager_doesEndpointRepresentBluetoothRoute((uint64_t)a2)
      && routingManager_isSystemMusicOnlyRoutedToLocalHomeTheaterEndpoint())
    {
      if (dword_1E9359DC0)
      {
        LODWORD(v93) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v26 = v93;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
          unsigned int v27 = v26;
        }
        else {
          unsigned int v27 = v26 & 0xFFFFFFFE;
        }
        if (v27)
        {
          int v94 = 136315395;
          CFTypeRef v95 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
          __int16 v96 = 2113;
          CFTypeRef v97 = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      cf[0] = 0;
      FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)cf);
      FigRoutingContextUtilities_SetLeaderToSystemAudioContext(cf[0], 0);
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v84);
      CFArrayRef v46 = (const __CFArray *)cf[0];
      if (cf[0]) {
        goto LABEL_108;
      }
    }
    goto LABEL_109;
  }
  if (ContextType != 4)
  {
    if (ContextType != 3) {
      goto LABEL_109;
    }
    if (!FigRoutingManagerIsEndpointWHAGroupable((uint64_t)a2))
    {
      if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
      {
        if (dword_1E9359DC0)
        {
          LODWORD(v93) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v29 = v93;
          if (os_log_type_enabled(v28, type[0])) {
            unsigned int v30 = v29;
          }
          else {
            unsigned int v30 = v29 & 0xFFFFFFFE;
          }
          if (v30)
          {
            int v94 = 136315395;
            CFTypeRef v95 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
            __int16 v96 = 2113;
            CFTypeRef v97 = a1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)&v84);
      }
      else
      {
        if (!FigRoutingManagerIsEndpointOfType((uint64_t)a2)) {
          goto LABEL_71;
        }
        cf[0] = v11;
        FigEndpointCopyProperty((uint64_t)a2, *MEMORY[0x1E4F20E60], v7, (uint64_t)cf);
        CFTypeRef v42 = cf[0];
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v42 == v11)
        {
          if (dword_1E9359DC0)
          {
            LODWORD(v93) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            int v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v51 = v93;
            if (os_log_type_enabled(v50, type[0])) {
              unsigned int v52 = v51;
            }
            else {
              unsigned int v52 = v51 & 0xFFFFFFFE;
            }
            if (v52)
            {
              int v94 = 136315138;
              CFTypeRef v95 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
LABEL_71:
          if (dword_1E9359DC0)
          {
            LODWORD(v93) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            unsigned int v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v44 = v93;
            if (os_log_type_enabled(v43, type[0])) {
              unsigned int v45 = v44;
            }
            else {
              unsigned int v45 = v44 & 0xFFFFFFFE;
            }
            if (v45)
            {
              int v94 = 136315395;
              CFTypeRef v95 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
              __int16 v96 = 2113;
              CFTypeRef v97 = a1;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
        }
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v84);
      }
      goto LABEL_109;
    }
    CFTypeRef v93 = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a1, (uint64_t)&v93);
    *(void *)os_log_type_t type = 0;
    uint64_t v22 = FigEndpointGetCMBaseObject();
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v31 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v24 + 48);
    if (v31) {
      v31(v22, *MEMORY[0x1E4F20FB0], v7, type);
    }
    BOOL shouldSystemMusicFollowSystemAudio = routingManager_shouldSystemMusicFollowSystemAudio(*(const __CFArray **)type, (uint64_t)a2);
    if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
    {
      if (shouldSystemMusicFollowSystemAudio)
      {
        if (dword_1E9359DC0)
        {
          LODWORD(v91) = 0;
          v90[0] = OS_LOG_TYPE_DEFAULT;
          uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v34 = v91;
          if (os_log_type_enabled(v33, v90[0])) {
            unsigned int v35 = v34;
          }
          else {
            unsigned int v35 = v34 & 0xFFFFFFFE;
          }
          if (v35)
          {
            int v94 = 136315395;
            CFTypeRef v95 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
            __int16 v96 = 2113;
            CFTypeRef v97 = a1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)&v84);
        goto LABEL_105;
      }
      if (dword_1E9359DC0)
      {
        LODWORD(v91) = 0;
        v90[0] = OS_LOG_TYPE_DEFAULT;
        char v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v40 = v91;
        if (os_log_type_enabled(v39, v90[0])) {
          unsigned int v41 = v40;
        }
        else {
          unsigned int v41 = v40 & 0xFFFFFFFE;
        }
        if (v41)
        {
          int v94 = 136315395;
          CFTypeRef v95 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
          __int16 v96 = 2113;
          CFTypeRef v97 = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingContextUtilities_UnfollowUUIDFromLeader(a1, 0);
    }
    else
    {
      if (shouldSystemMusicFollowSystemAudio)
      {
        if (dword_1E9359DC0)
        {
          LODWORD(v91) = 0;
          v90[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v37 = v91;
          if (os_log_type_enabled(v36, v90[0])) {
            unsigned int v38 = v37;
          }
          else {
            unsigned int v38 = v37 & 0xFFFFFFFE;
          }
          if (v38)
          {
            int v94 = 136315395;
            CFTypeRef v95 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
            __int16 v96 = 2113;
            CFTypeRef v97 = a1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v84);
LABEL_105:
        if (v93)
        {
          CFRelease(v93);
          CFTypeRef v93 = 0;
        }
        CFArrayRef v46 = *(const __CFArray **)type;
        if (*(void *)type) {
LABEL_108:
        }
          CFRelease(v46);
LABEL_109:
        if (v84) {
          goto LABEL_111;
        }
        goto LABEL_110;
      }
      if (dword_1E9359DC0)
      {
        LODWORD(v91) = 0;
        v90[0] = OS_LOG_TYPE_DEFAULT;
        CFAllocatorRef v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v48 = v91;
        if (os_log_type_enabled(v47, v90[0])) {
          unsigned int v49 = v48;
        }
        else {
          unsigned int v49 = v48 & 0xFFFFFFFE;
        }
        if (v49)
        {
          int v94 = 136315138;
          CFTypeRef v95 = "routingManager_validateAndCopyLeaderContextForAddingEndpoint";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    CFTypeRef v84 = CFRetain(a1);
    goto LABEL_105;
  }
  CFTypeRef v84 = CFRetain(a1);
  if (v84) {
    goto LABEL_111;
  }
LABEL_110:
  CFTypeRef v84 = CFRetain(a1);
LABEL_111:
  int v53 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (v53 == 1)
  {
    CFTypeRef v55 = v84;
    if (v85 == v9) {
      goto LABEL_116;
    }
LABEL_121:
    uint64_t v56 = routingManager_preprocessPickEndpoint(a2, (uint64_t)a1, v55, v6, Mutable);
    goto LABEL_122;
  }
  if (v53 != 4)
  {
    if (v53 != 3)
    {
LABEL_156:
      uint64_t v3 = 0;
      goto LABEL_157;
    }
    if (v86 == v9)
    {
      CFTypeRef v60 = v84;
      CFTypeRef v93 = 0;
      uint64_t v61 = *MEMORY[0x1E4F20F28];
      uint64_t v62 = FigEndpointGetCMBaseObject();
      uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v63) {
        uint64_t v64 = v63;
      }
      else {
        uint64_t v64 = 0;
      }
      CFIndex v65 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v64 + 48);
      if (v65) {
        v65(v62, v61, v7, &v93);
      }
      CFIndex v66 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(v6);
      FigRoutingManagerLogRoutingRequestDetails(@"preprocessAddAirPlayEndpoint - ", (uint64_t)a2, 0, 0, (uint64_t)v60, v66);
      *(void *)os_log_type_t type = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a1, (uint64_t)type);
      CFArrayRef v67 = *(const __CFArray **)type;
      if (!*(void *)type || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
        CFArrayRef v67 = 0;
      }
      if (FigRoutingManagerIsEndpointPresentInAggregate(a2, (uint64_t)v67))
      {
        BOOL IsSystemAudioRouteAirPlayLowLatency = FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency();
        if (!FigRoutingManagerUtilities_IsSystemAudioRouteWHAGroupableLocal())
        {
          if (FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)a2))
          {
            if (dword_1E9359DC0)
            {
              LODWORD(v91) = 0;
              v90[0] = OS_LOG_TYPE_DEFAULT;
              int v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v70 = v91;
              if (os_log_type_enabled(v69, v90[0])) {
                unsigned int v71 = v70;
              }
              else {
                unsigned int v71 = v70 & 0xFFFFFFFE;
              }
              if (v71)
              {
                int v94 = 136315138;
                CFTypeRef v95 = "routingManager_preprocessAddAirPlayEndpoint";
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            routingManager_routeToWHAGroupableVAEndpoint(v6);
          }
          else if (FigRoutingManagerIsClusterLocalEndpoint((uint64_t)a2) && !IsSystemAudioRouteAirPlayLowLatency)
          {
            if (dword_1E9359DC0)
            {
              LODWORD(v91) = 0;
              v90[0] = OS_LOG_TYPE_DEFAULT;
              CFMutableDictionaryRef v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v74 = v91;
              if (os_log_type_enabled(v73, v90[0])) {
                unsigned int v75 = v74;
              }
              else {
                unsigned int v75 = v74 & 0xFFFFFFFE;
              }
              if (v75)
              {
                int v94 = 136315138;
                CFTypeRef v95 = "routingManager_preprocessAddAirPlayEndpoint";
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            routingManager_routeToLowLatencyAirPlay((uint64_t)v6);
          }
        }
        FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v60, v66, @"configUpdateReasonEndedSuccess");
        uint64_t v3 = 0;
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v60, 1);
        *(void *)CFTypeRef v90 = 0;
        CFTypeRef v91 = 0;
        FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(&v91, v90, 0);
        if (v91 && *(void *)v90 && !FigCFEqual())
        {
          CFTypeRef v89 = 0;
          uint64_t v76 = FigEndpointGetCMBaseObject();
          uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v77) {
            uint64_t v78 = v77;
          }
          else {
            uint64_t v78 = 0;
          }
          unsigned int v79 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v78 + 48);
          if (v79) {
            v79(v76, v61, v7, &v89);
          }
          if (FigRoutingManagerUtilities_IsCurrentRouteHandoff())
          {
            uint64_t v3 = 0;
          }
          else
          {
            FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v60, 2);
            CMSMAP_MakeAirPlayHandOffPortRoutable(1, (uint64_t)v60);
            if (dword_1E9359DC0)
            {
              unsigned int v88 = 0;
              os_log_type_t v87 = OS_LOG_TYPE_DEFAULT;
              os_log_type_t v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v82 = v88;
              if (os_log_type_enabled(v81, v87)) {
                unsigned int v83 = v82;
              }
              else {
                unsigned int v83 = v82 & 0xFFFFFFFE;
              }
              if (v83)
              {
                int v94 = 136315650;
                CFTypeRef v95 = "routingManager_preprocessAddAirPlayEndpoint";
                __int16 v96 = 2114;
                CFTypeRef v97 = v89;
                __int16 v98 = 2114;
                CFTypeRef v99 = v93;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            FigRoutingManagerDeactivateEndpointFromPickedContexts(v91, v80, 1u, @"configUpdateReasonEndedSuccess");
            uint64_t v3 = routingManager_processAddAirPlayEndpoint(a2, a1, v60, v66, Mutable);
          }
          if (v89) {
            CFRelease(v89);
          }
        }
        else
        {
          uint64_t v3 = routingManager_processAddAirPlayEndpoint(a2, a1, v60, v66, Mutable);
        }
        if (v91)
        {
          CFRelease(v91);
          CFTypeRef v91 = 0;
        }
        if (*(void *)v90) {
          CFRelease(*(CFTypeRef *)v90);
        }
      }
      if (*(void *)type)
      {
        CFRelease(*(CFTypeRef *)type);
        *(void *)os_log_type_t type = 0;
      }
      if (v66) {
        CFRelease(v66);
      }
      if (v93) {
        CFRelease(v93);
      }
      goto LABEL_157;
    }
    CFTypeRef v54 = v85;
    routingManager_emptyAggregateEndpointIfNecessary((uint64_t)a2, a1);
    CFTypeRef v55 = v84;
    if (v54 == v9)
    {
LABEL_116:
      routingManager_preprocessAddBluetoothEndpoint(a2, (uint64_t)a1, v55, v6, Mutable);
      goto LABEL_156;
    }
    goto LABEL_121;
  }
  if (!CMSMDeviceState_IsHomePodHub())
  {
    if (dword_1E9359DC0)
    {
      LODWORD(v93) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      unsigned int v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v58 = v93;
      if (os_log_type_enabled(v57, type[0])) {
        unsigned int v59 = v58;
      }
      else {
        unsigned int v59 = v58 & 0xFFFFFFFE;
      }
      if (v59)
      {
        int v94 = 136315138;
        CFTypeRef v95 = "FigRoutingManager_iOSAddEndpointToContext";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_156;
  }
  if (v86 != v9)
  {
    FigRoutingManagerLogEndpointID(@"Notifying clients of failure because the following endpoint is not WHA groupable ", (uint64_t)a2, 0, 1);
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v6, @"configUpdateReasonStarted");
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v6, @"configUpdateReasonEndedFailed");
    goto LABEL_156;
  }
  uint64_t v56 = MXAudioContext_HandleAddEndpoint(a2, a1, v6, Mutable);
LABEL_122:
  uint64_t v3 = v56;
LABEL_157:
  if (v84)
  {
    CFRelease(v84);
    CFTypeRef v84 = 0;
  }
  if (v85)
  {
    CFRelease(v85);
    CFTypeRef v85 = 0;
  }
  if (v86)
  {
    CFRelease(v86);
    CFTypeRef v86 = 0;
  }
  if (v6) {
    CFRelease(v6);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v3;
}

void routingManager_preprocessAddBluetoothEndpoint(const void *a1, uint64_t a2, const void *a3, CFDictionaryRef theDict, const __CFDictionary *a5)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v9 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(theDict);
  FigRoutingManagerLogRoutingRequestDetails(@"preprocessAddBluetoothEndpoint - ", (uint64_t)a1, 0, 0, (uint64_t)a3, v9);
  CFTypeRef v36 = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a3, (uint64_t)&v36);
  if (FigCFArrayContainsValue())
  {
    FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a3, v9, a5);
    goto LABEL_61;
  }
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 1);
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint(a2, (uint64_t)a3, (uint64_t)a1, (uint64_t)v9, (uint64_t)a5);
  FigEndpointDescriptorUtilitySetUserManualRoute((uint64_t)a1, v9 != 0);
  CFMutableDictionaryRef EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions((uint64_t)a1, (uint64_t)a3, v9);
  FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)a3);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 4);
    FigRoutingManager_iOSActivateEndpoint(a1, a3, v9, a5);
    CFTypeRef v11 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    CFTypeRef v40 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    uint64_t v12 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v15 + 48);
    if (v17)
    {
      v17(CMBaseObject, *MEMORY[0x1E4F20E60], v12, &v40);
      CFTypeRef v11 = v40;
    }
    if (v11 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
    {
      CFTypeRef v39 = 0;
      uint64_t v18 = FigEndpointGetCMBaseObject();
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      unsigned int v26 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v20 + 48);
      if (v26) {
        v26(v18, *MEMORY[0x1E4F20E38], v12, &v39);
      }
      uint64_t v27 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v39, 0, *MEMORY[0x1E4F20660], 0);
      if (v27)
      {
        unsigned int v28 = (const void *)v27;
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 6);
        if (FigEndpointActivate())
        {
          FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a3, (uint64_t)a1, @"routeChangeEndedFailed");
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 0);
        }
        else
        {
          CFTypeRef v32 = CMSMUtility_CopyCurrentRouteIdentifiers();
          uint64_t v33 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v32, (uint64_t)a3);
          unsigned int v34 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v33, 0);
          FigRoutingManagerContextUtilities_SetPickedEndpoints(a3, v33, @"configUpdateReasonEndedSuccess", (uint64_t)v9, (uint64_t)v34);
          if (!FigRoutingContextUtilities_DoesArrayOfEndpointsContainEndpoint(v33, (uint64_t)a1)) {
            FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a3, (uint64_t)a1, @"routeChangeEndedSuccess");
          }
          cf[0] = 0;
          FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)a3, cf);
          if (FigRoutingManagerIsEndpointBluetoothShareable((uint64_t)cf[0])) {
            int v35 = 5;
          }
          else {
            int v35 = 0;
          }
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, v35);
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0;
          }
          if (v34) {
            CFRelease(v34);
          }
          if (v33) {
            CFRelease(v33);
          }
          if (v32) {
            CFRelease(v32);
          }
        }
        CFRelease(v28);
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 5);
        if (dword_1E9359DC0)
        {
          unsigned int v38 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v30 = v38;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
            unsigned int v31 = v30;
          }
          else {
            unsigned int v31 = v30 & 0xFFFFFFFE;
          }
          if (v31)
          {
            int v41 = 136315395;
            CFTypeRef v42 = "routingManager_processAddBluetoothEndpoint";
            __int16 v43 = 2113;
            CFTypeRef v44 = v39;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      if (v39) {
        CFRelease(v39);
      }
    }
    else
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 5);
    }
    CFTypeRef v25 = v40;
    if (!v40) {
      goto LABEL_59;
    }
  }
  else
  {
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)a1)) {
      goto LABEL_59;
    }
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 6);
    int v16 = FigEndpointActivate();
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a3, 0, (uint64_t)cf);
    if (v16)
    {
      FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a3, (uint64_t)a1, @"routeChangeEndedFailed");
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 0);
    }
    else
    {
      if (FigRoutingManagerIsEndpointOfType((uint64_t)cf[0])) {
        FigRoutingManagerDeactivateEndpointFromPickedContexts(cf[0], v21, 1u, @"configUpdateReasonEndedSuccess");
      }
      uint64_t v22 = CMSMUtility_CopyCurrentRouteIdentifiers();
      uint64_t v23 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v22, (uint64_t)a3);
      uint64_t v24 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v23, 0);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a3, v23, @"configUpdateReasonEndedSuccess", (uint64_t)v9, (uint64_t)v24);
      if (!FigRoutingContextUtilities_DoesArrayOfEndpointsContainEndpoint(v23, (uint64_t)a1)) {
        FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a3, (uint64_t)a1, @"routeChangeEndedSuccess");
      }
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 0);
      if (v24) {
        CFRelease(v24);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (v22) {
        CFRelease(v22);
      }
    }
    CFTypeRef v25 = cf[0];
    if (!cf[0]) {
      goto LABEL_59;
    }
  }
  CFRelease(v25);
LABEL_59:
  if (EndpointActivateOptions) {
    CFRelease(EndpointActivateOptions);
  }
LABEL_61:
  if (v36)
  {
    CFRelease(v36);
    CFTypeRef v36 = 0;
  }
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t FigRoutingManager_iOSRemoveEndpointFromContext(const void *a1, const void *a2, CFDictionaryRef theDict)
{
  v80[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 4294954296;
  if (!a1 || !a2) {
    return v3;
  }
  uint64_t v6 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(theDict);
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef v9 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_IsRemoveOperation", (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_UserPickedRoute", v9);
  FigRoutingManagerLogEndpointID(@"Removing endpoint=", (uint64_t)a2, 0, 1);
  CFTypeRef v10 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  CFTypeRef v68 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v13 + 48);
  if (v14) {
    v14(CMBaseObject, *MEMORY[0x1E4F20EC8], v7, &v68);
  }
  CFTypeRef v67 = v10;
  uint64_t v15 = FigEndpointGetCMBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
  if (v18) {
    v18(v15, *MEMORY[0x1E4F20E50], v7, &v67);
  }
  CFTypeRef v66 = 0;
  int ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType == 4)
  {
LABEL_16:
    CFTypeRef v66 = CFRetain(a1);
    if (v66) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (ContextType == 3)
  {
    if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)a2)) {
      goto LABEL_16;
    }
    if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
    {
      FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)&v66);
    }
    else
    {
      if (dword_1E9359DC0)
      {
        LODWORD(v74) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v38 = v74;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
          unsigned int v39 = v38;
        }
        else {
          unsigned int v39 = v38 & 0xFFFFFFFE;
        }
        if (v39)
        {
          *(_DWORD *)CFTypeRef cf = 136315395;
          *(void *)&cf[4] = "routingManager_validateAndCopyLeaderContextForRemovingEndpoint";
          __int16 v76 = 2113;
          CFTypeRef v77 = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v66);
    }
  }
  if (!v66) {
LABEL_17:
  }
    CFTypeRef v66 = CFRetain(a1);
LABEL_18:
  int v20 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  uint64_t v3 = 0;
  if (v20 > 3)
  {
    if (v20 == 4)
    {
      if (!CMSMDeviceState_IsHomePodHub())
      {
        if (dword_1E9359DC0)
        {
          LODWORD(v74) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v35 = v74;
          if (os_log_type_enabled(v34, type[0])) {
            unsigned int v36 = v35;
          }
          else {
            unsigned int v36 = v35 & 0xFFFFFFFE;
          }
          if (v36)
          {
            *(_DWORD *)CFTypeRef cf = 136315138;
            *(void *)&cf[4] = "FigRoutingManager_iOSRemoveEndpointFromContext";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_118;
      }
      uint64_t v24 = MXAudioContext_HandleRemoveEndpoint(a2, a1, v6, Mutable);
    }
    else
    {
      if (v20 != 13) {
        goto LABEL_144;
      }
      uint64_t v24 = routingManager_processRemoveVirtualAudioEndpoint((uint64_t)a2, (uint64_t)a1, v66, v6);
    }
    uint64_t v3 = v24;
    goto LABEL_144;
  }
  if (v20 == 1)
  {
    if (v67 != v9)
    {
      if (!FigRoutingManagerIsEndpointOfType((uint64_t)a2))
      {
        LODWORD(v74) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        CFTypeRef v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v41 = v74;
        if (os_log_type_enabled(v40, type[0])) {
          unsigned int v42 = v41;
        }
        else {
          unsigned int v42 = v41 & 0xFFFFFFFE;
        }
        if (!v42) {
          goto LABEL_72;
        }
        *(_DWORD *)CFTypeRef cf = 136315138;
        *(void *)&cf[4] = "FigRoutingManager_iOSRemoveEndpointFromContext";
        goto LABEL_71;
      }
      CFTypeRef v25 = (const void *)FigRoutingManagerCopyRoutingContextUUIDForEndpoint((uint64_t)a2);
      if (FigCFEqual())
      {
        uint64_t v74 = 0;
        FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v25, (uint64_t)a2, (uint64_t)&v74);
        FigRoutingManagerLogEndpointID(@"FigRoutingManager_iOSRemoveEndpointFromContext deactivate endpoint with name=", (uint64_t)a2, 0, 1);
        uint64_t v3 = FigRoutingManager_iOSDeactivateEndpoint(a2, v74);
        if (v3)
        {
          *(_DWORD *)os_log_type_t type = 0;
          v72[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v27 = *(_DWORD *)type;
          if (os_log_type_enabled(v26, v72[0])) {
            unsigned int v28 = v27;
          }
          else {
            unsigned int v28 = v27 & 0xFFFFFFFE;
          }
          if (v28)
          {
            *(_DWORD *)CFTypeRef cf = 136315394;
            *(void *)&cf[4] = "FigRoutingManager_iOSRemoveEndpointFromContext";
            __int16 v76 = 1024;
            LODWORD(v77) = v3;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v25, v6, @"configUpdateReasonEndedSuccess");
        }
        goto LABEL_102;
      }
      LODWORD(v74) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      __int16 v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v44 = v74;
      if (os_log_type_enabled(v43, type[0])) {
        unsigned int v45 = v44;
      }
      else {
        unsigned int v45 = v44 & 0xFFFFFFFE;
      }
      if (v45)
      {
        *(_DWORD *)CFTypeRef cf = 136315138;
        *(void *)&cf[4] = "FigRoutingManager_iOSRemoveEndpointFromContext";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_101;
    }
    goto LABEL_46;
  }
  if (v20 == 3)
  {
    if (v68 != v9)
    {
      if (v67 != v9)
      {
        if (v68 != v10)
        {
          LODWORD(v74) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v22 = v74;
          if (os_log_type_enabled(v21, type[0])) {
            unsigned int v23 = v22;
          }
          else {
            unsigned int v23 = v22 & 0xFFFFFFFE;
          }
          if (!v23) {
            goto LABEL_72;
          }
          *(_DWORD *)CFTypeRef cf = 136315138;
          *(void *)&cf[4] = "FigRoutingManager_iOSRemoveEndpointFromContext";
LABEL_71:
          _os_log_send_and_compose_impl();
LABEL_72:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v3 = 4294954296;
          goto LABEL_144;
        }
        CFTypeRef v25 = (const void *)FigRoutingManagerCopyRoutingContextUUIDForEndpoint((uint64_t)a2);
        if (!FigCFEqual())
        {
          v80[0] = 0;
          FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v25, (uint64_t)a2, (uint64_t)v80);
          FigRoutingManagerLogEndpointID(@"FigRoutingManager_iOSRemoveEndpointFromContext deactivate endpoint with name=", (uint64_t)a2, 0, 1);
          uint64_t v3 = FigRoutingManager_iOSDeactivateEndpoint(a2, v80[0]);
          *(void *)CFTypeRef cf = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v25, 0, (uint64_t)cf);
          if (!v3 && FigCFEqual())
          {
            if (FigRoutingManagerIsEndpointOfType(*(uint64_t *)cf)) {
              FigRoutingManagerContextUtilities_SetPickedEndpoints(v25, 0, @"configUpdateReasonEndedSuccess", (uint64_t)v6, 0);
            }
            else {
              FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v25, v6, @"configUpdateReasonEndedSuccess");
            }
          }
          if (*(void *)cf) {
            CFRelease(*(CFTypeRef *)cf);
          }
          goto LABEL_102;
        }
LABEL_101:
        uint64_t v3 = 0;
LABEL_102:
        if (!v25) {
          goto LABEL_144;
        }
        CFArrayRef v51 = (CFArrayRef)v25;
LABEL_143:
        CFRelease(v51);
        goto LABEL_144;
      }
LABEL_46:
      routingManager_processRemoveBluetoothAndVAEndpoint((uint64_t)a2, (uint64_t)a1, v66, v6);
LABEL_118:
      uint64_t v3 = 0;
      goto LABEL_144;
    }
    CFTypeRef v29 = v66;
    FigRoutingManagerLogRoutingRequestDetails(@"processRemoveAirPlayEndpoint - ", (uint64_t)a2, 0, 0, (uint64_t)v66, v6);
    uint64_t v74 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v29, 0, (uint64_t)&v74);
    if (FigRoutingManagerIsEndpointOfType(v74))
    {
      uint64_t v30 = v74;
      if (!v74 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
        uint64_t v30 = 0;
      }
      if (FigRoutingManagerIsEndpointPresentInAggregate(a2, v30))
      {
        *(void *)os_log_type_t type = 0;
        uint64_t v31 = FigEndpointGetCMBaseObject();
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v32) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = 0;
        }
        unsigned int v49 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v33 + 48);
        if (v49) {
          v49(v31, *MEMORY[0x1E4F20FB0], v7, type);
        }
        if (*(void *)type) {
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)type);
        }
        else {
          CFIndex Count = 0;
        }
        if (FigRoutingManagerIsEndpointLocal((uint64_t)a2)
          && FigRoutingManagerDoesDeviceAlwaysHaveAggregateForLocalPlayback()
          && Count == 1
          && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)type, 0),
              FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex)))
        {
          FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v29, v6, @"configUpdateReasonEndedFailed");
        }
        else
        {
          FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint((uint64_t)a1, (uint64_t)v29, (uint64_t)a2, (uint64_t)v6);
          uint64_t v53 = v74;
          if (!v74 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
            uint64_t v53 = 0;
          }
          uint64_t v3 = FigRoutingManagerRemoveEndpointFromAggregate(v53, a2, v29, v6, Mutable, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
          if (v3)
          {
LABEL_142:
            CFArrayRef v51 = *(CFArrayRef *)type;
            if (!*(void *)type) {
              goto LABEL_144;
            }
            goto LABEL_143;
          }
          *(void *)uint64_t v72 = 0;
          uint64_t v54 = FigEndpointGetCMBaseObject();
          uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v55) {
            uint64_t v56 = v55;
          }
          else {
            uint64_t v56 = 0;
          }
          unsigned int v57 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v56 + 48);
          if (v57) {
            v57(v54, *MEMORY[0x1E4F20E38], v7, v72);
          }
          CFTypeRef v71 = 0;
          uint64_t v58 = FigEndpointGetCMBaseObject();
          uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v59) {
            uint64_t v60 = v59;
          }
          else {
            uint64_t v60 = 0;
          }
          uint64_t v61 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v60 + 48);
          if (v61) {
            v61(v58, *MEMORY[0x1E4F20F28], v7, &v71);
          }
          if (dword_1E9359DC0)
          {
            unsigned int v70 = 0;
            os_log_type_t v69 = OS_LOG_TYPE_DEFAULT;
            uint64_t v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v63 = v70;
            if (os_log_type_enabled(v62, v69)) {
              unsigned int v64 = v63;
            }
            else {
              unsigned int v64 = v63 & 0xFFFFFFFE;
            }
            if (v64)
            {
              *(_DWORD *)CFTypeRef cf = 136315650;
              *(void *)&cf[4] = "routingManager_processRemoveAirPlayEndpoint";
              __int16 v76 = 2114;
              CFTypeRef v77 = *(CFTypeRef *)v72;
              __int16 v78 = 2114;
              CFTypeRef v79 = v71;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (v71)
          {
            CFRelease(v71);
            CFTypeRef v71 = 0;
          }
          if (*(void *)v72) {
            CFRelease(*(CFTypeRef *)v72);
          }
        }
        uint64_t v3 = 0;
        goto LABEL_142;
      }
      FigRoutingManagerLogEndpointID(@"endpoint=", (uint64_t)a2, @" is already removed", 1);
    }
    else
    {
      *(_DWORD *)os_log_type_t type = 0;
      v72[0] = OS_LOG_TYPE_DEFAULT;
      CFArrayRef v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v47 = *(_DWORD *)type;
      if (os_log_type_enabled(v46, v72[0])) {
        unsigned int v48 = v47;
      }
      else {
        unsigned int v48 = v47 & 0xFFFFFFFE;
      }
      if (v48)
      {
        *(_DWORD *)CFTypeRef cf = 136315138;
        *(void *)&cf[4] = "routingManager_processRemoveAirPlayEndpoint";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v29, v6, @"configUpdateReasonEndedNoop");
    goto LABEL_118;
  }
LABEL_144:
  if (v66)
  {
    CFRelease(v66);
    CFTypeRef v66 = 0;
  }
  if (v67)
  {
    CFRelease(v67);
    CFTypeRef v67 = 0;
  }
  if (v68)
  {
    CFRelease(v68);
    CFTypeRef v68 = 0;
  }
  if (v6) {
    CFRelease(v6);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v3;
}

void routingManager_processRemoveBluetoothAndVAEndpoint(uint64_t a1, uint64_t a2, const void *a3, const __CFDictionary *a4)
{
  FigRoutingManagerLogRoutingRequestDetails(@"processRemoveBluetoothEndpoint - ", a1, 0, 0, (uint64_t)a3, a4);
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint(a2, (uint64_t)a3, a1, (uint64_t)a4);
    CFTypeRef v8 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    CFTypeRef v25 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    uint64_t v9 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
    if (v13)
    {
      v13(CMBaseObject, *MEMORY[0x1E4F20E60], v9, &v25);
      CFTypeRef v8 = v25;
    }
    if (v8 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
    {
      CFTypeRef cf = 0;
      uint64_t v16 = FigEndpointGetCMBaseObject();
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v18 + 48);
      if (v19)
      {
        v19(v16, *MEMORY[0x1E4F20E38], v9, &cf);
        CFTypeRef v20 = cf;
      }
      else
      {
        CFTypeRef v20 = 0;
      }
      uint64_t v21 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v20, 0, *MEMORY[0x1E4F20660], 0);
      if (v21)
      {
        unsigned int v22 = (__CFArray *)v21;
        EndpointDeactivateOptions = FigRoutingManagerCreateEndpointDeactivateOptions(a1, (uint64_t)a3);
        FigEndpointDeactivate();
        routingManager_updatePickedEndpoints(a3, (uint64_t)a4);
        if (EndpointDeactivateOptions) {
          CFRelease(EndpointDeactivateOptions);
        }
        uint64_t v15 = v22;
        goto LABEL_24;
      }
    }
    else
    {
      CFTypeRef cf = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a3, (uint64_t)&cf);
      uint64_t v14 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf, 0);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a3, (const __CFArray *)cf, @"configUpdateReasonEndedSuccess", (uint64_t)a4, (uint64_t)v14);
      if (v14)
      {
        uint64_t v15 = v14;
LABEL_24:
        CFRelease(v15);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v25) {
      CFRelease(v25);
    }
    return;
  }
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    routingManager_processRemoveVirtualAudioEndpoint(a1, a2, a3, a4);
  }
}

uint64_t routingManager_processRemoveVirtualAudioEndpoint(uint64_t a1, uint64_t a2, const void *a3, const __CFDictionary *a4)
{
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    FigRoutingManagerLogRoutingRequestDetails(@"processRemoveVirtualAudioEndpoint - ", a1, 0, 0, (uint64_t)a3, a4);
    FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint(a2, (uint64_t)a3, a1, (uint64_t)a4);
    EndpointDeactivateOptions = FigRoutingManagerCreateEndpointDeactivateOptions(a1, (uint64_t)a3);
    FigEndpointDeactivate();
    routingManager_updatePickedEndpoints(a3, (uint64_t)a4);
    if (EndpointDeactivateOptions) {
      CFRelease(EndpointDeactivateOptions);
    }
    return 0;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954296;
  }
}

unsigned char *FigRoutingManagerUpdateFadeInUponMusicVADCreation(char a1)
{
  uint64_t result = FigRoutingManagerGetSharedManager();
  result[40] = a1;
  return result;
}

uint64_t FigRoutingManagerCleanupSystemMusicIfAggregateIsEmpty(CFTypeRef a1, uint64_t a2, char a3)
{
  CFIndex v4 = a1;
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CF80];
  if (a1)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v8 + 48);
    if (v9)
    {
      v9(CMBaseObject, *MEMORY[0x1E4F20F78], *v5, cf);
      a1 = cf[0];
    }
    else
    {
      a1 = 0;
    }
  }
  if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1) == 3)
  {
    SharedManager = FigRoutingManagerGetSharedManager();
    CFArrayRef theArray = 0;
    uint64_t v11 = *v5;
    uint64_t v12 = FigEndpointGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v16 = *(void (**)(uint64_t, void, uint64_t, CFArrayRef *))(v14 + 48);
    if (v16) {
      v16(v12, *MEMORY[0x1E4F20FB0], v11, &theArray);
    }
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count == 1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)ValueAtIndex))
        {
          *(void *)os_log_type_t type = 0;
          FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)type);
          if (dword_1E9359DC0)
          {
            *(_DWORD *)unsigned int v34 = 0;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRoutingContextUtilities_SetLeaderToSystemAudioContext(*(const void **)type, @"configUpdateReasonEndedSuccess");
          unsigned int v27 = *(const void **)type;
          if (!*(void *)type) {
            goto LABEL_25;
          }
        }
        else
        {
          *(void *)os_log_type_t type = 0;
          uint64_t v24 = FigEndpointGetCMBaseObject();
          uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v25) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = 0;
          }
          unsigned int v28 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v26 + 48);
          if (v28) {
            v28(v24, *MEMORY[0x1E4F20F28], v11, type);
          }
          *(void *)unsigned int v34 = 0;
          uint64_t v29 = FigEndpointGetCMBaseObject();
          uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v30) {
            uint64_t v31 = v30;
          }
          else {
            uint64_t v31 = 0;
          }
          uint64_t v32 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v31 + 48);
          if (v32) {
            v32(v29, *MEMORY[0x1E4F21048], v11, v34);
          }
          if (dword_1E9359DC0)
          {
            uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (*(void *)type)
          {
            CFRelease(*(CFTypeRef *)type);
            *(void *)os_log_type_t type = 0;
          }
          unsigned int v27 = *(const void **)v34;
          if (!*(void *)v34) {
            goto LABEL_25;
          }
        }
        CFRelease(v27);
LABEL_25:
        if (theArray)
        {
          CFRelease(theArray);
          CFArrayRef theArray = 0;
        }
        goto LABEL_27;
      }
      if (Count)
      {
        if (dword_1E9359DC0)
        {
          *(_DWORD *)os_log_type_t type = 0;
          v34[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_25;
      }
    }
    if (v4) {
      CFRetain(v4);
    }
    if (cf[0])
    {
      CFRetain(cf[0]);
      CFTypeRef v18 = cf[0];
    }
    else
    {
      CFTypeRef v18 = 0;
    }
    uint64_t v19 = *((void *)SharedManager + 1);
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = __FigRoutingManagerCleanupSystemMusicIfAggregateIsEmpty_block_invoke;
    v36[3] = &__block_descriptor_49_e5_v8__0l;
    char v37 = a3;
    v36[4] = v18;
    v36[5] = v4;
    MXDispatchAsync((uint64_t)"FigRoutingManagerCleanupSystemMusicIfAggregateIsEmpty", (uint64_t)"FigRoutingManager_iOS.m", 4406, 0, 0, v19, (uint64_t)v36);
    goto LABEL_25;
  }
  if (dword_1E9359DC0)
  {
    LODWORD(theArray) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_27:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return 0;
}

void __FigRoutingManagerCleanupSystemMusicIfAggregateIsEmpty_block_invoke(uint64_t a1)
{
  theArray[23] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48))
  {
    if (dword_1E9359DC0)
    {
      LODWORD(theArray[0]) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSMUtility_InterruptSessionsWithRoutingContextUUID();
  }
  CFTypeRef v3 = FigRoutingManagerCopyLocalAirPlayEndpoint();
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_UserPickedRoute", (const void *)*MEMORY[0x1E4F1CFC8]);
  CFDictionarySetValue(Mutable, @"initiator", @"SelectRouteInitiator_CleanupSystemMusic");
  if (v3)
  {
    theArray[0] = 0;
    FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(v5, theArray, 0, 0, 0);
    if (theArray[0])
    {
      CFIndex Count = CFArrayGetCount(theArray[0]);
      BOOL IsSystemAudioRouteWHAGroupableLocal = FigRoutingManagerUtilities_IsSystemAudioRouteWHAGroupableLocal();
      if (Count)
      {
        FigRoutingManagerLogEndpointIDs(@"The following AirPlay endpoints are activating: ", theArray[0], 0, 1);
LABEL_20:
        if (theArray[0]) {
          CFRelease(theArray[0]);
        }
        goto LABEL_22;
      }
    }
    else
    {
      BOOL IsSystemAudioRouteWHAGroupableLocal = FigRoutingManagerUtilities_IsSystemAudioRouteWHAGroupableLocal();
    }
    if (IsSystemAudioRouteWHAGroupableLocal
      || FigRoutingManagerUtilities_IsSystemAudioRouteNull()
      || FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency())
    {
      if (dword_1E9359DC0)
      {
        uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ArrayFromEndpoint = FigRoutingManagerCreateArrayFromEndpoint(v3);
      FigRoutingManagerPickEndpointsForContext(*(const void **)(a1 + 32), ArrayFromEndpoint, 0, Mutable);
      if (ArrayFromEndpoint) {
        CFRelease(ArrayFromEndpoint);
      }
    }
    else if (dword_1E9359DC0)
    {
      uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_20;
  }
  if (dword_1E9359DC0)
  {
    LODWORD(theArray[0]) = 0;
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRoutingManagerPickRouteDescriptorsForContext(*(const void **)(a1 + 32), 0, 0, Mutable);
LABEL_22:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v11 = *(const void **)(a1 + 40);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)(a1 + 32);
  if (v12) {
    CFRelease(v12);
  }
}

uint64_t FigRoutingManagerIsCrossfadePlaybackSupported()
{
  return 0;
}

void FigRoutingManagerPrintPickedRoutesForAllRoutingContexts()
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v20 = 0;
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v20);
  FigRoutingManagerCopyPickedEndpointsForRoutingContext((uint64_t)v20, &cf);
  FigRoutingManagerLogEndpointIDs(@"System audio routes:", (const __CFArray *)cf, 0, 1);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (CMSMDeviceState_IsHomePodHub())
  {
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyAudioContextUUIDs((uint64_t)theArray);
    CFIndex v0 = 0;
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      CFIndex v2 = theArray[0] ? CFArrayGetCount(theArray[0]) : 0;
      CFArrayRef v3 = theArray[0];
      if (v0 >= v2) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], v0);
      FigRoutingManagerCopyPickedEndpointsForRoutingContext((uint64_t)ValueAtIndex, &cf);
      CFStringRef v5 = CFStringCreateWithFormat(v1, 0, @"Audio context routes for UUID=%@", ValueAtIndex);
      FigRoutingManagerLogEndpointIDs((uint64_t)v5, (const __CFArray *)cf, 0, 1);
      if (v5) {
        CFRelease(v5);
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      ++v0;
    }
  }
  else
  {
    CFTypeRef v19 = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v19);
    FigRoutingManagerCopyPickedEndpointsForRoutingContext((uint64_t)v19, &cf);
    FigRoutingManagerLogEndpointIDs(@"System music routes:", (const __CFArray *)cf, 0, 1);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFTypeRef v6 = FigRoutingManagerCopyLocalAirPlayEndpoint();
    if (v6)
    {
      CFTypeRef v18 = 0;
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v11 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v9 + 48);
      if (v11) {
        v11(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &v18);
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v18) {
        CFRelease(v18);
      }
    }
    else
    {
      LODWORD(v18) = 0;
      CFTypeRef v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v19, (uint64_t)theArray);
    CFTypeRef v22 = 0;
    if (theArray[0]
      && ((uint64_t v13 = FigEndpointGetCMBaseObject(), (v14 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v15 = 0)
        : (uint64_t v15 = v14),
          (uint64_t v16 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v15 + 48)) != 0))
    {
      v16(v13, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &v22);
      CFArrayRef v17 = (const __CFArray *)v22;
    }
    else
    {
      CFArrayRef v17 = 0;
    }
    FigRoutingManagerLogEndpointIDs(@"SubEndpoints in the system music aggregate:", v17, 0, 1);
    if (v22)
    {
      CFRelease(v22);
      CFTypeRef v22 = 0;
    }
    if (theArray[0])
    {
      CFRelease(theArray[0]);
      theArray[0] = 0;
    }
    if (v6) {
      CFRelease(v6);
    }
    CFArrayRef v3 = (CFArrayRef)v19;
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v20) {
    CFRelease(v20);
  }
}

BOOL routingManager_isSystemMusicOnlyRoutedToLocalHomeTheaterEndpoint()
{
  CFTypeRef v9 = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v9);
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v9, (uint64_t)&cf);
  CFArrayRef theArray = 0;
  if (cf)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v1) {
      uint64_t v2 = v1;
    }
    else {
      uint64_t v2 = 0;
    }
    CFIndex v4 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v2 + 48);
    if (v4 && (v4(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray), theArray))
    {
      if (CFArrayGetCount(theArray) == 1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        BOOL IsLocalHomeTheaterEndpoint = FigRoutingManagerIsLocalHomeTheaterEndpoint((uint64_t)ValueAtIndex);
      }
      else
      {
        BOOL IsLocalHomeTheaterEndpoint = 0;
      }
      if (theArray)
      {
        CFRelease(theArray);
        CFArrayRef theArray = 0;
      }
    }
    else
    {
      BOOL IsLocalHomeTheaterEndpoint = 0;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  else
  {
    BOOL IsLocalHomeTheaterEndpoint = 0;
  }
  if (v9) {
    CFRelease(v9);
  }
  return IsLocalHomeTheaterEndpoint;
}

void __routingManager_handleBottomUpRouteChange_block_invoke(uint64_t a1)
{
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_UserPickedRoute", (const void *)*MEMORY[0x1E4F1CFC8]);
  FigRoutingManagerPickRouteDescriptorsForContext(*(const void **)(a1 + 32), 0, 0, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFIndex v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t routingManager_processPickEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  v36[16] = *MEMORY[0x1E4F143B8];
  int ContextType = (const void *)FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 3);
  uint64_t v10 = (uint64_t)ContextType;
  if (a1)
  {
    if (!ContextType)
    {
      int ContextType = (const void *)FigRoutingManager_iOSActivateEndpoint(a1, a2, a3, a4);
      uint64_t v10 = (uint64_t)ContextType;
    }
    goto LABEL_35;
  }
  int ContextType = (const void *)FigRoutingManagerContextUtilities_GetContextType((uint64_t)a2);
  int v11 = (int)ContextType;
  if ((ContextType - 5) < 2) {
    goto LABEL_7;
  }
  if (!ContextType) {
    goto LABEL_35;
  }
  if (ContextType == 2)
  {
LABEL_7:
    CFTypeRef v34 = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v34);
    CFTypeRef v33 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)&v33);
    CFTypeRef v32 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v34, 0, (uint64_t)&v32);
    CFTypeRef cf = 0;
    if (v33)
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v14 = v13 ? v13 : 0;
      uint64_t v15 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v14 + 48);
      if (v15) {
        v15(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &cf);
      }
    }
    if (v32 == v33 && FigRoutingManagerIsEndpointOfType((uint64_t)v32))
    {
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v10 = FigRoutingManager_RouteAwayFromAirPlayEndpoint((uint64_t)v33, (uint64_t)a2, 1);
      uint64_t v30 = 0;
      FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)v33, (uint64_t)&v30);
      FigRoutingManagerLogEndpointID(@"Going to deactivate endpoint with name=", (uint64_t)v33, @"because most recent currently activating endpoint is NULL", 1);
      FigRoutingManager_iOSDeactivateEndpoint(v33, v30, 1);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, @"configUpdateReasonEndedSuccess", (uint64_t)a3, 0);
      CFTypeRef v19 = CMSMUtility_CopyCurrentRouteIdentifiers();
      unsigned int NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
      if (NumberOfCurrentOutputPorts)
      {
        uint64_t v21 = NumberOfCurrentOutputPorts;
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        CFIndex v23 = 0;
        uint64_t v24 = *MEMORY[0x1E4F20660];
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v19, v23);
          uint64_t v26 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v24, (uint64_t)v34);
          if (v26)
          {
            unsigned int v27 = v26;
            CFArrayAppendValue(Mutable, v26);
            CFRelease(v27);
          }
          ++v23;
        }
        while (v21 != v23);
      }
      else
      {
        CFMutableArrayRef Mutable = 0;
      }
      unsigned int v28 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(Mutable, 0);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(v34, Mutable, @"configUpdateReasonEndedSuccess", (uint64_t)a3, (uint64_t)v28);
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
      if (v28) {
        CFRelease(v28);
      }
      if (v19) {
        CFRelease(v19);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v34)
      {
        CFRelease(v34);
        CFTypeRef v34 = 0;
      }
      if (v10)
      {
        uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (dword_1E9359DC0)
      {
        LODWORD(v3singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
        uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v11 == 5) {
        CMSMVAUtility_DestroyPerAppAirPlayVAD((uint64_t)a2);
      }
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, @"configUpdateReasonEndedSuccess", (uint64_t)a3, 0);
      v36[0] = 0;
      FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)v33, (uint64_t)v36);
      FigRoutingManager_iOSDeactivateEndpoint(v33, v36[0], 1);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v32)
    {
      CFRelease(v32);
      CFTypeRef v32 = 0;
    }
    if (v33)
    {
      CFRelease(v33);
      CFTypeRef v33 = 0;
    }
    int ContextType = v34;
    if (v34) {
LABEL_34:
    }
      CFRelease(ContextType);
  }
  else
  {
    v36[0] = 0;
    int ContextType = (const void *)FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)v36);
    if (v36[0])
    {
      FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, @"configUpdateReasonEndedSuccess", (uint64_t)a3, 0);
      uint64_t v35 = 0;
      FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, v36[0], (uint64_t)&v35);
      if (FigRoutingManagerIsEndpointOfType(v36[0]))
      {
        FigRoutingManagerLogEndpointID(@"Going to deactivate endpoint with name=", v36[0], @"because user selected NULL", 1);
        FigRoutingManager_iOSDeactivateEndpoint(v36[0], v35, 1);
      }
      int ContextType = (const void *)v36[0];
      if (v36[0]) {
        goto LABEL_34;
      }
    }
  }
LABEL_35:
  FigRoutingContextUtilities_LogCurrentState(ContextType, v9);
  return v10;
}

BOOL routingManager_shouldSystemMusicFollowSystemAudio(const __CFArray *a1, uint64_t a2)
{
  if (a1 && CFArrayGetCount(a1))
  {
    if (CFArrayGetCount(a1) != 1) {
      return 0;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
    BOOL result = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)ValueAtIndex);
    if (!result) {
      return result;
    }
  }
  if (!a2) {
    return 1;
  }
  BOOL result = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay(a2);
  if (result) {
    return 1;
  }
  return result;
}

void routingManager_routeToWHAGroupableVAEndpoint(const __CFDictionary *a1)
{
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  CFTypeRef v2 = FigRoutingManagerCopyWHAGroupableVAEndpoint();
  CFMutableDictionaryRef EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions((uint64_t)v2, (uint64_t)cf, a1);
  FigRoutingManagerGetFigEndpointFeatures((uint64_t)v2, (uint64_t)cf);
  FigEndpointActivate();
  CFIndex v4 = CMSMUtility_CopyCurrentRouteIdentifiers();
  CFStringRef v5 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v4, (uint64_t)cf);
  CFTypeRef v6 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v5, 0);
  FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, v5, @"configUpdateReasonEndedSuccess", (uint64_t)a1, (uint64_t)v6);
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (EndpointActivateOptions) {
    CFRelease(EndpointActivateOptions);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t routingManager_processAddAirPlayEndpoint(const void *a1, const void *a2, const void *a3, const __CFDictionary *a4, const void *a5)
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a3, 4);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)cf);
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoint((uint64_t)a3, (uint64_t)cf[0], a1, (uint64_t)a4, (uint64_t)a5);
  if (FigRoutingManagerIsEndpointActivated((uint64_t)a1))
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void (**)(const void *, void))(v11 + 48);
    if (v12) {
      v12(a1, 0);
    }
    FigEndpointDeactivate();
  }
  BOOL IsSystemAudioRouteAirPlayLowLatency = FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency();
  if (FigRoutingManagerUtilities_IsSystemAudioRouteWHAGroupableLocal())
  {
    CFArrayRef theArray = 0;
    if (!cf[0]) {
      goto LABEL_57;
    }
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    CFTypeRef v18 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v16 + 48);
    if (v18) {
      v18(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
    }
    if (!theArray || !CFArrayGetCount(theArray))
    {
LABEL_57:
      if (!FigRoutingManagerIsEndpointLocal((uint64_t)a1) && !CMSMDeviceState_IsHomePodHub())
      {
        if (dword_1E9359DC0)
        {
          *(_DWORD *)os_log_type_t type = 0;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingManagerAggregateAddLocalAirPlayEndpoint(a2, (void *)cf[0]);
      }
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
  else if (FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)a1))
  {
    if (dword_1E9359DC0)
    {
      LODWORD(theArray) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      CFArrayRef v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    routingManager_routeToWHAGroupableVAEndpoint(a4);
  }
  else if (!FigRoutingManagerIsClusterLocalEndpoint((uint64_t)a1) && !IsSystemAudioRouteAirPlayLowLatency)
  {
    if (dword_1E9359DC0)
    {
      LODWORD(theArray) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      CFTypeRef v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingManagerAggregateRemoveLocalAirPlayEndpoint();
  }
  CFTypeRef v21 = cf[0];
  if (!cf[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    CFTypeRef v21 = 0;
  }
  uint64_t v22 = FigRoutingManagerAddEndpointToAggregate((uint64_t)v21, (uint64_t)a1, a3, a4, a5, (uint64_t)FigRoutingManagerAggregateAddEndpointCompletionCallback);
  if (!v22)
  {
    CFArrayRef theArray = 0;
    uint64_t v23 = *MEMORY[0x1E4F1CF80];
    uint64_t v24 = FigEndpointGetCMBaseObject();
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    unsigned int v27 = *(void (**)(uint64_t, void, uint64_t, CFArrayRef *))(v26 + 48);
    if (v27) {
      v27(v24, *MEMORY[0x1E4F20E38], v23, &theArray);
    }
    *(void *)os_log_type_t type = 0;
    uint64_t v28 = FigEndpointGetCMBaseObject();
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v30 + 48);
    if (v31) {
      v31(v28, *MEMORY[0x1E4F20F28], v23, type);
    }
    if (dword_1E9359DC0)
    {
      CFTypeRef v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(void *)type)
    {
      CFRelease(*(CFTypeRef *)type);
      *(void *)os_log_type_t type = 0;
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v22;
}

void routingManager_updatePickedEndpoints(const void *a1, uint64_t a2)
{
  v14[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v14[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID((uint64_t)v14);
  if (FigCFEqual()) {
    CFIndex v4 = CMSMUtility_CopyCurrentInputRouteIdentifiers();
  }
  else {
    CFIndex v4 = CMSMUtility_CopyCurrentRouteIdentifiers();
  }
  CFStringRef v5 = v4;
  CFTypeRef v6 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v4, (uint64_t)a1);
  CFArrayRef v7 = v6;
  if (v6)
  {
    CFIndex Count = CFArrayGetCount(v6);
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
    if (Count >= 1)
    {
      CFIndex v9 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v9);
        if (FigRoutingManagerIsEndpointLowLatencyAirPlay((uint64_t)ValueAtIndex))
        {
          if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)cf)) {
            break;
          }
        }
        if (Count == ++v9) {
          goto LABEL_15;
        }
      }
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingContextUtilities_UnfollowUUIDFromLeader(cf, @"configUpdateReasonEndedSuccess");
    }
  }
  else
  {
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
  }
LABEL_15:
  uint64_t v12 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v7, 0);
  FigRoutingManagerContextUtilities_SetPickedEndpoints(a1, v7, @"configUpdateReasonEndedSuccess", a2, (uint64_t)v12);
  if (v12) {
    CFRelease(v12);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v14[0]) {
    CFRelease(v14[0]);
  }
}

uint64_t FigVolumeControllerStartServer()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  if (dword_1E9359E00 >= 0x100) {
    dword_1E9359E00 = 0;
  }
  uint64_t v0 = FigXPCServerStart();
  if (v0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v0;
}

uint64_t volumeControllerServer_handleChangeMasterVolumeMessage(_xpc_connection_s *a1, uint64_t a2, xpc_object_t xdict)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v7 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v7) {
    goto LABEL_9;
  }
  int v16 = 0;
  float v8 = xpc_dictionary_get_double(xdict, kFigVolumeControllerXPCMsgParam_VolumeDelta);
  memset(v18, 0, 128);
  volumeControllerServer_getClientInfo(a1, &v16, v18);
  if (dword_1E9359E00)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeRef v10 = cf;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(v12 + 16);
  if (v13)
  {
    uint64_t v7 = v13(a2, v10, v8);
LABEL_9:
    uint64_t v14 = v7;
    goto LABEL_11;
  }
  uint64_t v14 = 4294954514;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t volumeControllerServer_handleSetMasterVolumeMessage(_xpc_connection_s *a1, uint64_t a2, xpc_object_t xdict)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v7 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v7) {
    goto LABEL_9;
  }
  int v16 = 0;
  float v8 = xpc_dictionary_get_double(xdict, kFigVolumeControllerXPCMsgParam_Volume);
  memset(v18, 0, 128);
  volumeControllerServer_getClientInfo(a1, &v16, v18);
  if (dword_1E9359E00)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeRef v10 = cf;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(v12 + 24);
  if (v13)
  {
    uint64_t v7 = v13(a2, v10, v8);
LABEL_9:
    uint64_t v14 = v7;
    goto LABEL_11;
  }
  uint64_t v14 = 4294954514;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t volumeControllerServer_handleGetMasterVolumeMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  float v14 = 0.0;
  CFTypeRef cf = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v6 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v6)
  {
    uint64_t v11 = v6;
  }
  else
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFTypeRef v10 = *(uint64_t (**)(uint64_t, CFTypeRef, float *))(v9 + 32);
    if (v10)
    {
      uint64_t v11 = v10(a1, v7, &v14);
      if (!v11) {
        xpc_dictionary_set_double(a3, kFigVolumeControllerXPCMsgParam_Volume, v14);
      }
    }
    else
    {
      uint64_t v11 = 4294954514;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t volumeControllerServer_handleCanSetMasterVolumeMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  char v14 = 0;
  CFTypeRef cf = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v6 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v6)
  {
    uint64_t v11 = v6;
  }
  else
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFTypeRef v10 = *(uint64_t (**)(uint64_t, CFTypeRef, char *))(v9 + 40);
    if (v10)
    {
      uint64_t v11 = v10(a1, v7, &v14);
      if (!v11) {
        xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_CanSetMasterVolume, v14 != 0);
      }
    }
    else
    {
      uint64_t v11 = 4294954514;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t volumeControllerServer_handleGetMasterVolumeControlTypeMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  CFTypeRef cf = 0;
  uint64_t value = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v6 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v6)
  {
    uint64_t v11 = v6;
  }
  else
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFTypeRef v10 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t *))(v9 + 48);
    if (v10)
    {
      uint64_t v11 = v10(a1, v7, &value);
      if (!v11) {
        xpc_dictionary_set_uint64(a3, kFigVolumeControllerXPCMsgParam_GetMasterVolumeControlType, value);
      }
    }
    else
    {
      uint64_t v11 = 4294954514;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t volumeControllerServer_handleChangeEndpointVolumeMessage(_xpc_connection_s *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v6 = FigXPCMessageCopyCFString();
  if (v6) {
    goto LABEL_9;
  }
  int v15 = 0;
  float v7 = xpc_dictionary_get_double(a3, kFigVolumeControllerXPCMsgParam_VolumeDelta);
  memset(v17, 0, 128);
  volumeControllerServer_getClientInfo(a1, &v15, v17);
  if (dword_1E9359E00)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeRef v9 = cf;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(v11 + 56);
  if (v12)
  {
    uint64_t v6 = v12(a2, v9, v7);
LABEL_9:
    uint64_t v13 = v6;
    goto LABEL_11;
  }
  uint64_t v13 = 4294954514;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t volumeControllerServer_handleSetEndpointVolumeMessage(_xpc_connection_s *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v6 = FigXPCMessageCopyCFString();
  if (v6) {
    goto LABEL_9;
  }
  int v15 = 0;
  float v7 = xpc_dictionary_get_double(a3, kFigVolumeControllerXPCMsgParam_Volume);
  memset(v17, 0, 128);
  volumeControllerServer_getClientInfo(a1, &v15, v17);
  if (dword_1E9359E00)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeRef v9 = cf;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(v11 + 64);
  if (v12)
  {
    uint64_t v6 = v12(a2, v9, v7);
LABEL_9:
    uint64_t v13 = v6;
    goto LABEL_11;
  }
  uint64_t v13 = 4294954514;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t volumeControllerServer_handleGetEndpointVolumeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  float v11 = 0.0;
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, float *))(v7 + 72);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v9 = v8(a1, 0, &v11);
  if (!v9) {
    xpc_dictionary_set_double(a3, kFigVolumeControllerXPCMsgParam_Volume, v11);
  }
  return v9;
}

uint64_t volumeControllerServer_handleCanSetEndpointVolumeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  char v11 = 0;
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, char *))(v7 + 80);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v9 = v8(a1, 0, &v11);
  if (!v9) {
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_CanSetEndpointVolume, v11 != 0);
  }
  return v9;
}

uint64_t volumeControllerServer_handleGetSubEndpointVolumeControlTypeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t value = 0;
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, uint64_t *))(v7 + 96);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v9 = v8(a1, 0, 0, &value);
  if (!v9) {
    xpc_dictionary_set_uint64(a3, kFigVolumeControllerXPCMsgParam_GetEndpointVolumeControlType, value);
  }
  return v9;
}

uint64_t volumeControllerServer_handleSetSubEndpointVolumeMessage(uint64_t a1, void *a2)
{
  uint64_t v4 = FigXPCMessageCopyCFString();
  if (!v4)
  {
    uint64_t v4 = FigXPCMessageCopyCFString();
    if (!v4)
    {
      float v5 = xpc_dictionary_get_double(a2, kFigVolumeControllerXPCMsgParam_Volume);
      if (dword_1E9359E00)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(uint64_t (**)(uint64_t, void, void, float))(v8 + 104);
      if (!v9) {
        return 4294954514;
      }
      return v9(a1, 0, 0, v5);
    }
  }
  return v4;
}

uint64_t volumeControllerServer_handleGetSubEndpointVolumeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  float v11 = 0.0;
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, float *))(v7 + 112);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v9 = v8(a1, 0, 0, &v11);
  if (!v9) {
    xpc_dictionary_set_double(a3, kFigVolumeControllerXPCMsgParam_Volume, v11);
  }
  return v9;
}

uint64_t volumeControllerServer_handleSetRoomVolumeMessage(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v16 = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v5 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v5) {
    goto LABEL_10;
  }
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    goto LABEL_10;
  }
  float v6 = xpc_dictionary_get_double(xdict, kFigVolumeControllerXPCMsgParam_Volume);
  if (dword_1E9359E00)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeRef v8 = cf;
  CFTypeRef v9 = v16;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef, float))(v11 + 120);
  if (v12)
  {
    uint64_t v5 = v12(a1, v8, v9, v6);
LABEL_10:
    uint64_t v13 = v5;
    goto LABEL_12;
  }
  uint64_t v13 = 4294954514;
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v13;
}

uint64_t volumeControllerServer_handleGetRoomVolumeMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  float v16 = 0.0;
  CFTypeRef cf = 0;
  CFTypeRef v15 = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v6 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v6 || (uint64_t v6 = FigXPCMessageCopyCFString(), v6))
  {
    uint64_t v12 = v6;
  }
  else
  {
    CFTypeRef v7 = cf;
    CFTypeRef v8 = v15;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef, float *))(v10 + 128);
    if (v11)
    {
      uint64_t v12 = v11(a1, v7, v8, &v16);
      if (!v12) {
        xpc_dictionary_set_double(a3, kFigVolumeControllerXPCMsgParam_Volume, v16);
      }
    }
    else
    {
      uint64_t v12 = 4294954514;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v12;
}

uint64_t volumeControllerServer_handleSetEndpointWithRoomIDVolumeMessage(uint64_t a1, void *a2)
{
  uint64_t v4 = FigXPCMessageCopyCFString();
  if (!v4)
  {
    uint64_t v4 = FigXPCMessageCopyCFString();
    if (!v4)
    {
      double v5 = xpc_dictionary_get_double(a2, kFigVolumeControllerXPCMsgParam_Volume);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      CFTypeRef v8 = *(uint64_t (**)(uint64_t, void, void, float))(v7 + 208);
      if (!v8) {
        return 4294954514;
      }
      float v9 = v5;
      return v8(a1, 0, 0, v9);
    }
  }
  return v4;
}

uint64_t volumeControllerServer_handleGetEndpointWithRoomIDVolumeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  float v11 = 0.0;
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(uint64_t (**)(uint64_t, void, void, float *))(v7 + 216);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v9 = v8(a1, 0, 0, &v11);
  if (!v9) {
    xpc_dictionary_set_double(a3, kFigVolumeControllerXPCMsgParam_Volume, v11);
  }
  return v9;
}

uint64_t volumeControllerServer_handleSetMuteOfRoutingContextMessage(uint64_t a1, xpc_object_t xdict)
{
  CFTypeRef cf = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v5 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v5) {
    goto LABEL_7;
  }
  BOOL v6 = xpc_dictionary_get_BOOL(xdict, kFigVolumeControllerXPCMsgParam_Mute);
  CFTypeRef v7 = cf;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, CFTypeRef, BOOL))(v9 + 136);
  if (v10)
  {
    uint64_t v5 = v10(a1, v7, v6);
LABEL_7:
    uint64_t v11 = v5;
    goto LABEL_9;
  }
  uint64_t v11 = 4294954514;
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t volumeControllerServer_handleGetMuteOfRoutingContextMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  char v14 = 0;
  CFTypeRef cf = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v6 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v6)
  {
    uint64_t v11 = v6;
  }
  else
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, CFTypeRef, char *))(v9 + 144);
    if (v10)
    {
      uint64_t v11 = v10(a1, v7, &v14);
      if (!v11) {
        xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v14 != 0);
      }
    }
    else
    {
      uint64_t v11 = 4294954514;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t volumeControllerServer_handleSetMuteOfEndpointWithIDMessage(uint64_t a1, void *a2)
{
  uint64_t v4 = FigXPCMessageCopyCFString();
  if (!v4)
  {
    BOOL v5 = xpc_dictionary_get_BOOL(a2, kFigVolumeControllerXPCMsgParam_Mute);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, void, BOOL))(v7 + 152);
    if (!v8) {
      return 4294954514;
    }
    return v8(a1, 0, v5);
  }
  return v4;
}

uint64_t volumeControllerServer_handleSetMuteOfSubEndpointWithIDMessage(uint64_t a1, void *a2)
{
  uint64_t v4 = FigXPCMessageCopyCFString();
  if (!v4)
  {
    uint64_t v4 = FigXPCMessageCopyCFString();
    if (!v4)
    {
      BOOL v5 = xpc_dictionary_get_BOOL(a2, kFigVolumeControllerXPCMsgParam_Mute);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, BOOL))(v7 + 168);
      if (!v8) {
        return 4294954514;
      }
      return v8(a1, 0, 0, v5);
    }
  }
  return v4;
}

uint64_t volumeControllerServer_handleGetMuteOfSubEndpointWithIDMessage(uint64_t a1, uint64_t a2, void *a3)
{
  char v11 = 0;
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, char *))(v7 + 176);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v9 = v8(a1, 0, 0, &v11);
  if (!v9) {
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v11 != 0);
  }
  return v9;
}

uint64_t volumeControllerServer_handleCanSetMuteOfRoutingContextMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  char v14 = 0;
  CFTypeRef cf = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v6 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v6)
  {
    uint64_t v11 = v6;
  }
  else
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, CFTypeRef, char *))(v9 + 184);
    if (v10)
    {
      uint64_t v11 = v10(a1, v7, &v14);
      if (!v11) {
        xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v14 != 0);
      }
    }
    else
    {
      uint64_t v11 = 4294954514;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t volumeControllerServer_handleCanSetMuteOfEndpointWithIDMessage(uint64_t a1, uint64_t a2, void *a3)
{
  char v11 = 0;
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, char *))(v7 + 192);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v9 = v8(a1, 0, &v11);
  if (!v9) {
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v11 != 0);
  }
  return v9;
}

uint64_t volumeControllerServer_handleCanSetMuteOfSubEndpointWithIDMessage(uint64_t a1, uint64_t a2, void *a3)
{
  char v11 = 0;
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, char *))(v7 + 200);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v9 = v8(a1, 0, 0, &v11);
  if (!v9) {
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v11 != 0);
  }
  return v9;
}

_xpc_connection_s *volumeControllerServer_getClientInfo(_xpc_connection_s *result, _DWORD *a2, void *a3)
{
  if (a2 && a3)
  {
    BOOL result = (_xpc_connection_s *)xpc_connection_get_pid(result);
    int v5 = (int)result;
    if ((int)result >= 1)
    {
      BOOL result = (_xpc_connection_s *)proc_name((int)result, a3, 0x80u);
      if ((result & 0x80000000) == 0) {
        *((unsigned char *)a3 + result) = 0;
      }
    }
    *a2 = v5;
  }
  return result;
}

uint64_t FigVibratorIsVibratorAvailable()
{
  if (fvGetVibeSynthIsAvailableOnce != -1) {
    dispatch_once_f(&fvGetVibeSynthIsAvailableOnce, 0, (dispatch_function_t)fvGetVibeSynthIsAvailable);
  }
  uint64_t result = gvVibeSynthIsAvailable;
  if (!gvVibeSynthIsAvailable)
  {
    mach_port_t v1 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v2 = IOServiceNameMatching("vibrator");
    uint64_t result = IOServiceGetMatchingService(v1, v2);
    if (result)
    {
      IOObjectRelease(result);
      return 1;
    }
  }
  return result;
}

uint64_t FigVibratorIsVibeSynthEngineAvailable()
{
  return gvVibeSynthIsAvailable;
}

uint64_t FigVibratorInitialize()
{
  if (gFVInfo) {
    return 0;
  }
  uint64_t v0 = (char *)malloc_type_calloc(1uLL, 0xE8uLL, 0x10E2040012A5A8EuLL);
  if (v0)
  {
    mach_port_t v1 = v0;
    v0[112] = 0;
    *((void *)v0 + 15) = 0;
    v0[192] = 0;
    *((void *)v0 + 25) = 0;
    *((_DWORD *)v0 + 52) = 0;
    *((void *)v0 + 27) = 0;
    v0[224] = 0;
    *((_DWORD *)v0 + 17) = 0;
    *(void *)uint64_t v0 = 0;
    *((void *)v0 + 1) = 0;
    *(void *)(v0 + 13) = 0;
    if (fvGetVibeSynthIsAvailableOnce != -1) {
      dispatch_once_f(&fvGetVibeSynthIsAvailableOnce, 0, (dispatch_function_t)fvGetVibeSynthIsAvailable);
    }
    CFDictionaryRef v2 = (int *)(v1 + 16);
    if (gvVibeSynthIsAvailable)
    {
      *((void *)v1 + 3) = dlsym((void *)gVibeSynthDylibHandle, "VibeSynthEngineInitialize");
      *((void *)v1 + 4) = dlsym((void *)gVibeSynthDylibHandle, "VibeSynthEngineStartPrewarm");
      *((void *)v1 + 5) = dlsym((void *)gVibeSynthDylibHandle, "VibeSynthEngineStopPrewarm");
      *((void *)v1 + 6) = dlsym((void *)gVibeSynthDylibHandle, "VibeSynthEnginePlay");
      CFArrayRef v3 = dlsym((void *)gVibeSynthDylibHandle, "VibeSynthEngineCancelWithOptions");
      *((void *)v1 + 7) = v3;
      uint64_t v4 = (uint64_t (*)(void))*((void *)v1 + 3);
      if (!v4 || !*((void *)v1 + 4) || !*((void *)v1 + 5) || !*((void *)v1 + 6) || !v3)
      {
LABEL_44:
        uint64_t v5 = FigSignalErrorAt();
        goto LABEL_45;
      }
      uint64_t v5 = v4();
      if (v5)
      {
LABEL_45:
        uint64_t v22 = v5;
        goto LABEL_28;
      }
      *((_WORD *)v1 + 32) = 0;
    }
    else
    {
      *((_DWORD *)v1 + 6) = 0;
      *((void *)v1 + 4) = 0;
      *((void *)v1 + 5) = 0;
      CMTimeMake(&valuePtr, 0, 1);
      *((CMTime *)v1 + 2) = valuePtr;
      CMTimeMake(&valuePtr, 0, 1);
      *((CMTime *)v1 + 3) = valuePtr;
      *((void *)v1 + 12) = 0;
      v1[104] = 0;
      *((_DWORD *)v1 + 27) = 0;
      *((void *)v1 + 17) = 0;
      CMTimeMake(&valuePtr, 0, 1);
      *((CMTime *)v1 + 6) = valuePtr;
      CMTimeMake(&valuePtr, 0, 1);
      *((CMTime *)v1 + 7) = valuePtr;
      *((void *)v1 + 16) = 0;
      mach_port_t v6 = *MEMORY[0x1E4F2EEF0];
      CFDictionaryRef v7 = IOServiceNameMatching("vibrator");
      io_service_t MatchingService = IOServiceGetMatchingService(v6, v7);
      *((_DWORD *)v1 + 6) = MatchingService;
      if (!MatchingService)
      {
        uint64_t v22 = 4294950803;
        goto LABEL_28;
      }
    }
    uint64_t v9 = FigSimpleMutexCreate();
    *(void *)mach_port_t v1 = v9;
    if (v9)
    {
      uint64_t v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v11 = dispatch_queue_create("com.apple.coremedia.vibrator", v10);
      *((void *)v1 + 1) = v11;
      if (v11)
      {
        uint32_t v12 = notify_register_check("com.apple.coremedia.vibration", (int *)v1 + 4);
        v1[20] = v12 == 0;
        if (!v12)
        {
          notify_set_state(*v2, 0);
          notify_post("com.apple.coremedia.vibration");
        }
        if (gvVibeSynthIsAvailable) {
          goto LABEL_24;
        }
        uint64_t v13 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *((dispatch_queue_t *)v1 + 1));
        *((void *)v1 + 12) = v13;
        if (!v13)
        {
          uint64_t v22 = 4294950804;
          goto LABEL_28;
        }
        dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        DispatchSourceBlock = (void *)FigDispatchCreateDispatchSourceBlock();
        dispatch_source_set_event_handler(*((dispatch_source_t *)v1 + 12), DispatchSourceBlock);
        _Block_release(DispatchSourceBlock);
        dispatch_resume(*((dispatch_object_t *)v1 + 12));
        CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *((void *)v1 + 4) = Mutable;
        if (Mutable)
        {
          Default = FVIOKit_VibePatternArrayCreateDefault(1.0);
          if (Default)
          {
            uint64_t v18 = Default;
            CFDictionarySetValue(*((CFMutableDictionaryRef *)v1 + 4), @"hertz_millisecs", Default);
            CFRelease(v18);
            CFDictionarySetValue(*((CFMutableDictionaryRef *)v1 + 4), @"repeat", (const void *)*MEMORY[0x1E4F1CFC8]);
            LODWORD(valuePtr.value) = 0;
            CFNumberRef v19 = CFNumberCreate(v15, kCFNumberIntType, &valuePtr);
            *((void *)v1 + 5) = v19;
            if (v19)
            {
              CMTimeMake(&valuePtr, 20, 1000);
              *((CMTime *)v1 + 2) = valuePtr;
              CMTimeMake(&valuePtr, 5000, 1000);
              *((CMTime *)v1 + 3) = valuePtr;
              DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
              CFNotificationCenterPostNotification(DarwinNotifyCenter, @"VibeWillStop", 0, 0, 1u);
LABEL_24:
              uint64_t v21 = 0;
              atomic_compare_exchange_strong_explicit(&gFVInfo, (unint64_t *)&v21, (unint64_t)v1, memory_order_relaxed, memory_order_relaxed);
              if (!v21)
              {
                FigVibratorStopWithOptions(0);
                return 0;
              }
              uint64_t v22 = 0;
LABEL_28:
              if (*(void *)v1)
              {
                FigSimpleMutexDestroy();
                *(void *)mach_port_t v1 = 0;
              }
              if (!gvVibeSynthIsAvailable)
              {
                uint64_t v25 = (const void *)*((void *)v1 + 4);
                if (v25)
                {
                  CFRelease(v25);
                  *((void *)v1 + 4) = 0;
                }
                uint64_t v26 = (const void *)*((void *)v1 + 5);
                if (v26)
                {
                  CFRelease(v26);
                  *((void *)v1 + 5) = 0;
                }
                unsigned int v27 = *((void *)v1 + 12);
                if (v27)
                {
                  dispatch_source_cancel(v27);
                  uint64_t v28 = *((void *)v1 + 12);
                  if (v28)
                  {
                    dispatch_release(v28);
                    *((void *)v1 + 12) = 0;
                  }
                }
              }
              uint64_t v23 = *((void *)v1 + 1);
              if (v23)
              {
                dispatch_release(v23);
                *((void *)v1 + 1) = 0;
              }
              if (v1[20]) {
                notify_cancel(*v2);
              }
              free(v1);
              return v22;
            }
          }
        }
      }
    }
    goto LABEL_44;
  }
  return FigSignalErrorAt();
}

uint64_t fvGetVibeSynthIsAvailable()
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/AudioToolbox.framework/libVibeSynthEngine.dylib", 4);
  gVibeSynthDylibHandle = result;
  if (result)
  {
    uint64_t result = (uint64_t)dlsym((void *)result, "VibeSynthEngineHasHardwareSupport");
    if (result)
    {
      uint64_t result = ((uint64_t (*)(void))result)();
      gvVibeSynthIsAvailable = result;
      if ((_BYTE)result) {
        return result;
      }
      goto LABEL_4;
    }
    if (!gvVibeSynthIsAvailable)
    {
LABEL_4:
      uint64_t result = dlclose((void *)gVibeSynthDylibHandle);
      gVibeSynthDylibHandle = 0;
    }
  }
  return result;
}

void FigVibratorPostNotification(const __CFString *a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, a1, 0, 0, 1u);
}

uint64_t FigVibratorStopWithOptions(uint64_t a1)
{
  if (!gFVInfo) {
    return 4294950806;
  }
  uint64_t v2 = MEMORY[0x199716EE0](*(void *)gFVInfo);
  if (v2) {
    return v2;
  }
  uint64_t v3 = gFVInfo;
  if (!gvVibeSynthIsAvailable)
  {
    uint64_t v4 = FVIOKit_StopVibrator(gFVInfo);
    uint64_t v3 = gFVInfo;
    if (v4) {
      goto LABEL_15;
    }
    if (*(unsigned char *)(gFVInfo + 112))
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(gFVInfo + 96), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      uint64_t v3 = gFVInfo;
      *(unsigned char *)(gFVInfo + 112) = 0;
      *(unsigned char *)(v3 + 192) = 0;
      if (*(void *)(v3 + 128))
      {
        CFRelease(*(CFTypeRef *)(v3 + 128));
        uint64_t v3 = gFVInfo;
        *(void *)(gFVInfo + 128) = 0;
      }
      *(void *)(v3 + 216) = 0;
      *(unsigned char *)(v3 + 224) = 0;
      if (*(void *)(v3 + 200))
      {
        CFRelease(*(CFTypeRef *)(v3 + 200));
        uint64_t v3 = gFVInfo;
        *(void *)(gFVInfo + 20singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
      }
    }
    if (*(unsigned char *)(v3 + 104))
    {
      IOPMAssertionRelease(*(_DWORD *)(v3 + 108));
      uint64_t v4 = 0;
      uint64_t v3 = gFVInfo;
      *(unsigned char *)(gFVInfo + 104) = 0;
      *(_DWORD *)(v3 + 108) = 0;
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v4 = 0;
    goto LABEL_15;
  }
  if (!*(_DWORD *)(gFVInfo + 68)) {
    goto LABEL_14;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(gFVInfo + 56))(a1);
  uint64_t v3 = gFVInfo;
LABEL_15:
  MEMORY[0x199716EF0](*(void *)v3);
  return v4;
}

uint64_t FigVibratorStartPrewarm(int a1)
{
  if (!gvVibeSynthIsAvailable) {
    return 0;
  }
  mach_port_t v1 = (void *)gFVInfo;
  if (!gFVInfo) {
    return 4294950806;
  }
  BOOL v2 = !*(unsigned char *)(gFVInfo + 64) && !*(unsigned char *)(gFVInfo + 65);
  if (a1 != 1)
  {
    if (!a1) {
      *(unsigned char *)(gFVInfo + 64) = 1;
    }
    if (v2) {
      goto LABEL_10;
    }
    return 0;
  }
  *(unsigned char *)(gFVInfo + 65) = 1;
  if (!v2) {
    return 0;
  }
LABEL_10:
  uint64_t result = MEMORY[0x199716EE0](*v1);
  if (!result)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(gFVInfo + 32))();
    MEMORY[0x199716EF0](*(void *)gFVInfo);
    return v4;
  }
  return result;
}

uint64_t FigVibratorStopPrewarm(uint64_t result)
{
  if (!gvVibeSynthIsAvailable) {
    return 0;
  }
  uint64_t v1 = gFVInfo;
  if (!gFVInfo) {
    return 4294950806;
  }
  int v2 = *(unsigned __int8 *)(gFVInfo + 64);
  if (!*(unsigned char *)(gFVInfo + 64) && !*(unsigned char *)(gFVInfo + 65)) {
    return 0;
  }
  if (result)
  {
    if (result == 1) {
      *(unsigned char *)(gFVInfo + 65) = 0;
    }
    if (*(unsigned __int8 *)(v1 + 65) | v2) {
      return 0;
    }
  }
  else
  {
    *(unsigned char *)(gFVInfo + 64) = 0;
    if (*(unsigned char *)(v1 + 65)) {
      return result;
    }
  }
  uint64_t result = MEMORY[0x199716EE0](*(void *)v1);
  if (!result)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(gFVInfo + 40))();
    MEMORY[0x199716EF0](*(void *)gFVInfo);
    return v3;
  }
  return result;
}

uint64_t FigVibratorPlayVibrationWithDictionary(CFDictionaryRef theDict, int a2, uint64_t a3, int a4, const void *a5, int a6, int a7, float a8)
{
  float valuePtr = 1.0;
  if (!gFVInfo) {
    return 4294950806;
  }
  if (gvVibeSynthIsAvailable)
  {
    if (theDict)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"Intensity");
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
        float v17 = valuePtr;
        if (valuePtr <= 1.0)
        {
          if (valuePtr < 0.0)
          {
            float valuePtr = 0.0;
            float v17 = 0.0;
          }
          goto LABEL_8;
        }
        float valuePtr = 1.0;
      }
      float v17 = 1.0;
LABEL_8:
      if (a2)
      {
        float v17 = v17 * a8;
        float valuePtr = v17;
      }
      return FVSynthEngine_PlayVibrationWithPatternDictionary((uint64_t)theDict, a3, a4, a5, a6, a7, v17);
    }
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v26 = 0;
    float v25 = 0.0;
    __int16 v24 = 0;
    CFDictionaryRef v23 = 0;
    FVIOKit_GetVibrationPatternFromDictionary(theDict, (int *)&v26 + 1, (float *)&v26, &v25, &valuePtr, &v23, (char *)&v24 + 1, (char *)&v24);
    if (!(_BYTE)v24) {
      float v25 = 2678400.0;
    }
    if (a2) {
      float valuePtr = valuePtr * a8;
    }
    float v19 = valuePtr;
    if (v23)
    {
      uint64_t result = FVIOKit_PlayVibrationWithPattern(v23, a5, valuePtr);
      if (result) {
        return result;
      }
    }
    else
    {
      CMTimeMakeWithSeconds(&v22, v25, 1000);
      CMTimeMakeWithSeconds(&v21, *(float *)&v26, 1000);
      CMTimeMakeWithSeconds(&v20, *((float *)&v26 + 1), 1000);
      uint64_t result = FVIOKit_PlayVibration(&v22, &v21, &v20, a5, v19);
      if (result) {
        return result;
      }
    }
    return 0;
  }
}

CFArrayRef vaeCreatePortListArrayFromPortID(int a1)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = a1;
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFArrayRef v2 = CFArrayCreate(v1, (const void **)values, 1, MEMORY[0x1E4F1D510]);
  if (values[0]) {
    CFRelease(values[0]);
  }
  return v2;
}

uint64_t vaeIsPortBluetoothShareable(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    AudioObjectID v1 = result;
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"usswbolg";
    uint64_t result = AudioObjectHasProperty(result, &inAddress);
    if (result)
    {
      UInt32 ioDataSize = 4;
      int outData = 0;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData != 0;
      }
    }
  }
  return result;
}

CFTypeRef vaeCopyBluetoothShareablePortsForPort(AudioObjectID a1)
{
  outData[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  outData[0] = 0;
  if (!a1) {
    return 0;
  }
  inAddress.mElement = 0;
  *(void *)&inAddress.mSelector = *(void *)"gaswbolg";
  if (!AudioObjectHasProperty(a1, &inAddress)) {
    return 0;
  }
  UInt32 ioDataSize = 8;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (outData[0])
    {
      CFRelease(outData[0]);
      outData[0] = 0;
    }
  }
  if (dword_1E9359ED0)
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return outData[0];
}

CFTypeRef vaeCopyPersistentUID(AudioObjectID a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  CFTypeRef outData = 0;
  *(void *)&inAddress.mSelector = *(void *)"dippbolg";
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData)) {
    return outData;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFTypeRef result = outData;
  if (outData)
  {
    CFRelease(outData);
    return 0;
  }
  return result;
}

CFTypeRef vaeCopyModelUIDForPort(AudioObjectID a1)
{
  outData[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  outData[0] = 0;
  *(void *)&inAddress.mSelector = *(void *)"dimpbolg";
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData)) {
    return outData[0];
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFTypeRef result = outData[0];
  if (outData[0])
  {
    CFRelease(outData[0]);
    return 0;
  }
  return result;
}

CFTypeRef vaeCopyExclavesSensorStatusInfo()
{
  outData[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  AudioObjectID v0 = [+[MXSessionManager sharedInstance] defaultVADID];
  outData[0] = 0;
  *(void *)&inAddress.mSelector = *(void *)"SSxEbolg";
  inAddress.mElement = 0;
  if (!AudioObjectHasProperty(v0, &inAddress)) {
    return 0;
  }
  UInt32 ioDataSize = 8;
  if (!AudioObjectGetPropertyData(v0, &inAddress, 0, 0, &ioDataSize, outData)) {
    return outData[0];
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFTypeRef result = outData[0];
  if (outData[0])
  {
    CFRelease(outData[0]);
    return 0;
  }
  return result;
}

BOOL vaeIsAvailableForVoicePrompts(BOOL result)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int outData = 0;
  if (result)
  {
    *(void *)&inAddress.mSelector = 0x676C6F6274627461;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    if (AudioObjectGetPropertyData(result, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData != 0;
    }
  }
  return result;
}

uint64_t vaeDoesPortSupportRoutability(AudioObjectID a1)
{
  v2.mElement = 0;
  *(void *)&v2.mSelector = *(void *)"rsipbolg";
  return AudioObjectHasProperty(a1, &v2);
}

uint64_t vaeIsPortRoutable(AudioObjectID a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int outData = 0;
  if (!a1) {
    return 0;
  }
  *(void *)&inAddress.mSelector = *(void *)"rsipbolg";
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return outData;
}

uint64_t vaeGetPartnersForPort(AudioObjectID inObjectID, void *outData)
{
  uint64_t result = 0;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (inObjectID && outData)
  {
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"trppbolg";
    UInt32 ioDataSize = 32;
    if (AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return ioDataSize >> 2;
    }
  }
  return result;
}

uint64_t vaePartnerRouteRoutable(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  memset(v3, 0, sizeof(v3));
  uint64_t result = vaeGetPartnersForPort(a1, v3);
  if (result) {
    return vaeDoesBluetoothSupportFeature(a1) == 0;
  }
  return result;
}

uint64_t vaeDoesPortSupportHighQualityBiDirectionalAudio(uint64_t result)
{
  return vaeDoesBluetoothSupportFeature(result);
}

uint64_t vaeGetSiblingsForPort(AudioObjectID inObjectID, void *outData)
{
  uint64_t result = 0;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (inObjectID && outData)
  {
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"bispbolg";
    UInt32 ioDataSize = 32;
    if (AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return ioDataSize >> 2;
    }
  }
  return result;
}

uint64_t vaeSignalOwnershipIsTaken()
{
  if (getOwnershipCondition_onceToken != -1) {
    dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_41);
  }
  [(id)getOwnershipCondition_sOwnershipCondition lock];
  if (getOwnershipCondition_onceToken != -1) {
    dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_41);
  }
  [(id)getOwnershipCondition_sOwnershipCondition broadcast];
  if (getOwnershipCondition_onceToken != -1) {
    dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_41);
  }
  AudioObjectID v0 = (void *)getOwnershipCondition_sOwnershipCondition;
  return [v0 unlock];
}

uint64_t vaeRequestOwnershipOnBTPort(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  SInt64 = (const void *)FigCFNumberCreateSInt64();
  int IsPortPresentInConnectedOutputPorts = vaemIsPortPresentInConnectedOutputPorts((uint64_t)SInt64);
  if (SInt64) {
    CFRelease(SInt64);
  }
  if (!a1)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    MXSimulateCrash((uint64_t)"Calling for ownership on unknown port is unexpected. Please file a bug to MediaExperience ("
                             "New Bugs) | All.");
    return 4294954310;
  }
  *(void *)&inAddress.mSelector = 0x676C6F626F736163;
  inAddress.mElement = 0;
  if (!AudioObjectHasProperty(a1, &inAddress)) {
    goto LABEL_7;
  }
  if (vaeGetBTPortOwnsSharedAudioConnection(a1))
  {
    if (!dword_1E9359ED0) {
      return 0;
    }
LABEL_7:
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  if (!IsPortPresentInConnectedOutputPorts)
  {
    if (dword_1E9359ED0)
    {
      uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 4294954310;
  }
  if (vaeGetPortTypeFromPortID(a1) != 1885892674)
  {
    memset(&valuePtr, 0, 32);
    unsigned int PartnersForPort = vaeGetPartnersForPort(a1, &valuePtr);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
    if (PartnersForPort)
    {
      uint64_t v12 = PartnersForPort;
      p_AudioObjectPropertyAddress valuePtr = &valuePtr;
      do
      {
        if (p_valuePtr->mSelector)
        {
          CFNumberRef v14 = CFNumberCreate(v2, kCFNumberSInt32Type, p_valuePtr);
          CFArrayAppendValue(Mutable, v14);
          if (v14) {
            CFRelease(v14);
          }
        }
        p_AudioObjectPropertyAddress valuePtr = (AudioObjectPropertyAddress *)((char *)p_valuePtr + 4);
        --v12;
      }
      while (v12);
    }
    AudioObjectID A2DPPort = cmsmGetA2DPPort(Mutable);
    if (dword_1E9359ED0)
    {
      CFAllocatorRef v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (A2DPPort) {
      goto LABEL_29;
    }
    return 4294954310;
  }
  AudioObjectID A2DPPort = a1;
LABEL_29:
  *(_DWORD *)os_log_type_t type = 1;
  *(void *)&valuePtr.mSelector = 0x676C6F626F736163;
  valuePtr.mElement = 0;
  uint64_t result = AudioObjectHasProperty(A2DPPort, &valuePtr);
  if (result)
  {
    [MEMORY[0x1E4F1C9C8] now];
    if (getOwnershipCondition_onceToken != -1) {
      dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_41);
    }
    objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "lock", v20, v23);
    *(_DWORD *)uint64_t v26 = CMSMVAUtility_AudioObjectSetPropertyData();
    if (*(_DWORD *)v26)
    {
      float v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (getOwnershipCondition_onceToken != -1) {
        dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_41);
      }
      objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "unlock", v21, v24);
      return *(unsigned int *)v26;
    }
    else
    {
      if (dword_1E9359ED0)
      {
        float v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (getOwnershipCondition_onceToken != -1) {
        dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_41);
      }
      int v18 = objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "waitUntilDate:", objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceNow:", 6.0, v21, v24));
      if (dword_1E9359ED0)
      {
        float v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (getOwnershipCondition_onceToken != -1) {
        dispatch_once(&getOwnershipCondition_onceToken, &__block_literal_global_41);
      }
      objc_msgSend((id)getOwnershipCondition_sOwnershipCondition, "unlock", v22, v25);
      if (v18) {
        return 0;
      }
      else {
        return 4294954310;
      }
    }
  }
  return result;
}

uint64_t vaeDoesPortSupportMultipleConnections(uint64_t result)
{
  if (result)
  {
    *(void *)&v1.mSelector = 0x676C6F626F736163;
    v1.mElement = 0;
    return AudioObjectHasProperty(result, &v1);
  }
  return result;
}

__CFString *vaeGetOwnershipRequestReasonString(int a1)
{
  if ((a1 - 1) > 0x11) {
    return @"Not defined yet";
  }
  else {
    return off_1E57C9D18[a1 - 1];
  }
}

uint64_t vaeDoesBTPortSupportInEarDetection(AudioObjectID a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int outData = 0;
  if (!a1) {
    return 0;
  }
  *(void *)&inAddress.mSelector = 0x676C6F6270696564;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return outData;
}

uint64_t vaeHasUserEnabledInEarDetectionForBTPort(AudioObjectID a1)
{
  uint64_t result = vaeDoesBTPortSupportInEarDetection(a1);
  if (result)
  {
    *(void *)&v3.mSelector = 0x676C6F6262746965;
    v3.mElement = 0;
    return AudioObjectHasProperty(a1, &v3) != 0;
  }
  return result;
}

BOOL vaeIsInEarStatusTrueForBTPort(AudioObjectID a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int outData = 0;
  if (!vaeDoesBTPortSupportInEarDetection(a1) || !a1) {
    goto LABEL_6;
  }
  *(void *)&inAddress.mSelector = 0x676C6F6262746965;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_6:
    int v3 = 0;
    return v3 != 0;
  }
  int v3 = outData;
  return v3 != 0;
}

uint64_t vaeGetBTPortPrimaryBudInEarStatus(AudioObjectID a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned int outData = 0;
  uint64_t result = vaeDoesBTPortSupportInEarDetection(a1);
  if (result)
  {
    if (a1)
    {
      *(void *)&inAddress.mSelector = 0x676C6F6262746970;
      inAddress.mElement = 0;
      UInt32 ioDataSize = 4;
      if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData)) {
        return outData;
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return result;
}

uint64_t vaeGetBTPortSecondaryBudInEarStatus(AudioObjectID a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned int outData = 0;
  uint64_t result = vaeDoesBTPortSupportInEarDetection(a1);
  if (result)
  {
    if (a1)
    {
      *(void *)&inAddress.mSelector = 0x676C6F6262746973;
      inAddress.mElement = 0;
      UInt32 ioDataSize = 4;
      if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData)) {
        return outData;
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return result;
}

__CFString *vaeGetBluetoothListeningModeString(unsigned int a1)
{
  if (a1 > 4) {
    return 0;
  }
  else {
    return off_1E57C9DA8[a1];
  }
}

__CFString *vaeGetBluetoothSpatialAudioModeString(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return off_1E57C9DD0[a1];
  }
}

uint64_t vaeGetBluetoothListeningMode(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int outData = 0;
  if (result)
  {
    AudioObjectID v1 = result;
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"mtslbolg";
    uint64_t result = AudioObjectHasProperty(result, &inAddress);
    if (result)
    {
      UInt32 ioDataSize = 4;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData;
      }
    }
  }
  return result;
}

uint64_t vaeGetBluetoothSpatialAudioMode(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int outData = 0;
  if (result)
  {
    AudioObjectID v1 = result;
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"dmpsbolg";
    uint64_t result = AudioObjectHasProperty(result, &inAddress);
    if (result)
    {
      UInt32 ioDataSize = 4;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData;
      }
    }
  }
  return result;
}

BOOL vaeDoesPortSupportStereoHFP(AudioObjectID a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int outData = 0;
  if (!a1) {
    goto LABEL_6;
  }
  inAddress.mElement = 0;
  *(void *)&inAddress.mSelector = *(void *)"pshsbolg";
  if (!AudioObjectHasProperty(a1, &inAddress)) {
    goto LABEL_6;
  }
  UInt32 ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_6:
    int v3 = 0;
    return v3 != 0;
  }
  int v3 = outData;
  return v3 != 0;
}

uint64_t vaeGetSupportedBluetoothListeningModes(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int outData = 0;
  if (result)
  {
    AudioObjectID v1 = result;
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"smslbolg";
    uint64_t result = AudioObjectHasProperty(result, &inAddress);
    if (result)
    {
      UInt32 ioDataSize = 4;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData;
      }
    }
  }
  return result;
}

CFStringRef vaeCopyLocalizedString(CFStringRef key)
{
  if (vaeCopyLocalizedString_kCMSession_LoadVirtualAudioBundleOnce != -1) {
    dispatch_once(&vaeCopyLocalizedString_kCMSession_LoadVirtualAudioBundleOnce, &__block_literal_global_110);
  }
  CFAllocatorRef v2 = (__CFBundle *)vaeCopyLocalizedString_bundleRef;
  return CFBundleCopyLocalizedString(v2, key, key, @"Localizable");
}

BOOL vaeDoesPortSupportHeadTrackedSpatialAudio(AudioObjectID a1)
{
  v2.mElement = 0;
  *(void *)&v2.mSelector = *(void *)"nepsbolg";
  return AudioObjectHasProperty(a1, &v2) != 0;
}

uint64_t vaeIsHeadTrackedSpatialAudioActive(AudioObjectID a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"nepsbolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectHasProperty(a1, &inAddress);
  if (result)
  {
    UInt32 ioDataSize = 4;
    int outData = 0;
    if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData != 0;
    }
  }
  return result;
}

uint64_t vaeDoesPortAllowHeadTrackedSpatialAudio(AudioObjectID a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"shpsbolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectHasProperty(a1, &inAddress);
  if (result)
  {
    UInt32 ioDataSize = 4;
    int outData = 0;
    if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData != 0;
    }
  }
  return result;
}

uint64_t vaeDoesPortSupportSecureMicrophone(AudioObjectID a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"smcsbolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectHasProperty(a1, &inAddress);
  if (result)
  {
    UInt32 ioDataSize = 4;
    int outData = 0;
    if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData != 0;
    }
  }
  return result;
}

uint64_t vaeIsPortAnInputPort(uint64_t a1)
{
  int PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  uint64_t result = 1;
  if (PortTypeFromPortID > 1886614632)
  {
    if (PortTypeFromPortID > 1886680168)
    {
      if (PortTypeFromPortID == 1886680169) {
        return result;
      }
      int v4 = 1886745449;
    }
    else
    {
      if (PortTypeFromPortID == 1886614633) {
        return result;
      }
      int v4 = 1886675561;
    }
  }
  else
  {
    if (PortTypeFromPortID > 1886216819)
    {
      if (PortTypeFromPortID == 1886216820) {
        return result;
      }
      unsigned __int16 v3 = 30569;
    }
    else
    {
      if (PortTypeFromPortID == 1885564781) {
        return result;
      }
      unsigned __int16 v3 = 25193;
    }
    int v4 = v3 | 0x706D0000;
  }
  if (PortTypeFromPortID != v4) {
    return 0;
  }
  return result;
}

uint64_t vaeSetPortAvailableForVoicePrompts(uint64_t result, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v6 = a2;
  Boolean outIsSettable = 1;
  if (result)
  {
    *(void *)&inAddress.mSelector = 0x676C6F6274627461;
    inAddress.mElement = 0;
    AudioObjectIsPropertySettable(result, &inAddress, &outIsSettable);
    if (outIsSettable)
    {
      uint64_t result = CMSMVAUtility_AudioObjectSetPropertyData();
      unsigned int v4 = result;
      if (result)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return v4;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t vaeSetBTLowLatencyMode(AudioObjectID a1, int a2)
{
  v3.mElement = 0;
  int v4 = a2;
  *(void *)&v3.mSelector = *(void *)"lltbbolg";
  uint64_t result = AudioObjectHasProperty(a1, &v3);
  if (result) {
    return CMSMVAUtility_AudioObjectSetPropertyData();
  }
  return result;
}

float vaeGetDestinationVolumeScalarFactor(double a1, float a2)
{
  inQualifierData[22] = *MEMORY[0x1E4F143B8];
  *(double *)inQualifierData = a1;
  double v2 = a2;
  double outData = a2;
  *(void *)&inAddress.mSelector = *(void *)"fsvdbolg";
  inAddress.mElement = 0;
  if (AudioObjectHasProperty([+[MXSessionManager sharedInstance] defaultVADID], &inAddress))
  {
    UInt32 ioDataSize = 8;
    if (AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 8u, inQualifierData, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      return outData;
    }
  }
  return v2;
}

uint64_t vaeMakePortRoutable(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFArrayRef PortListArrayFromPortID = vaeCreatePortListArrayFromPortID(a1);
  uint64_t ArrayOfPortsRoutable = vaemMakeArrayOfPortsRoutable(PortListArrayFromPortID, a2, a3, a4, 0);
  if (PortListArrayFromPortID) {
    CFRelease(PortListArrayFromPortID);
  }
  return ArrayOfPortsRoutable;
}

BOOL vaeCopyIfBluetoothEndpointSupportsConversationDetect(AudioObjectID a1)
{
  CFTypeRef cf = 0;
  if (!MX_FeatureFlags_IsConversationDetectSupported()) {
    return 0;
  }
  vaeCopyDeviceIdentifierFromVADPort(a1);
  CFTypeRef v2 = FigRoutingManagerCopyEndpointWithDeviceIDFromBluetoothManager();
  if (v2)
  {
    AudioObjectPropertyAddress v3 = v2;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
    if (v9) {
      v9(CMBaseObject, @"SupportsConversationDetect", *MEMORY[0x1E4F1CF80], &cf);
    }
    int v8 = FigCFEqual();
    CFRelease(v3);
  }
  else
  {
    int v8 = FigCFEqual();
  }
  BOOL v7 = v8 != 0;
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

BOOL vaeCopyIfBluetoothEndpointHasConversationDetectEnabled(AudioObjectID a1)
{
  CFTypeRef cf = 0;
  if (!MX_FeatureFlags_IsConversationDetectSupported()) {
    return 0;
  }
  vaeCopyDeviceIdentifierFromVADPort(a1);
  CFTypeRef v2 = FigRoutingManagerCopyEndpointWithDeviceIDFromBluetoothManager();
  if (v2)
  {
    AudioObjectPropertyAddress v3 = v2;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
    if (v9) {
      v9(CMBaseObject, @"ConversationDetectEnable", *MEMORY[0x1E4F1CF80], &cf);
    }
    int v8 = FigCFEqual();
    CFRelease(v3);
  }
  else
  {
    int v8 = FigCFEqual();
  }
  BOOL v7 = v8 != 0;
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t vaeGetBluetoothCallScreeningStatus(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int outData = 0;
  if (result)
  {
    AudioObjectID v1 = result;
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"sslcbolg";
    uint64_t result = AudioObjectHasProperty(result, &inAddress);
    if (result)
    {
      UInt32 ioDataSize = 4;
      if (AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      else
      {
        return outData;
      }
    }
  }
  return result;
}

uint64_t vaeUpdateBluetoothCallScreeningStatus(uint64_t result, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v6 = a2;
  if (result)
  {
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"sslcbolg";
    uint64_t result = AudioObjectHasProperty(result, &inAddress);
    if (result)
    {
      unsigned int v5 = CMSMVAUtility_AudioObjectSetPropertyData();
      if (v5)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return v5;
      }
      else
      {
        if (dword_1E9359ED0)
        {
          AudioObjectPropertyAddress v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t vaeAddInEarBluetoothStatusListenerForPort(AudioObjectID a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = 0x676C6F6262746965;
  inAddress.mElement = 0;
  OSStatus v7 = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmInEarBluetoothStatusListener, 0);
  if (v7)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)&inAddress.mSelector = 0x676C6F6262746970;
  inAddress.mElement = 0;
  OSStatus v7 = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmPrimaryBudInEarBluetoothStatusListener, 0);
  if (v7)
  {
    AudioObjectPropertyAddress v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)&inAddress.mSelector = 0x676C6F6262746973;
  inAddress.mElement = 0;
  uint64_t result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmSecondaryBudInEarBluetoothStatusListener, 0);
  OSStatus v7 = result;
  if (result)
  {
    unsigned int v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddOwnsSharedAudioConnectionListenerForPort(AudioObjectID a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"casobolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmOwnsSharedAudioConnectionListener, 0);
  int v3 = result;
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddSharedAudioConnectionFailedListenerForPort(AudioObjectID a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"fcasbolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmSharedAudioConnectionFailedListener, 0);
  int v3 = result;
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddBluetoothListeningModeListenerForPort(AudioObjectID a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"mtslbolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmBluetoothListeningModeListener, 0);
  int v3 = result;
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddBluetoothSharingAggregationListenerForPort(AudioObjectID a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"gaswbolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmBluetoothSharingAggregationListener, 0);
  int v3 = result;
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddBluetoothSpatialAudioEnabledListenerForPort(AudioObjectID a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"nepsbolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmBluetoothSpatialAudioEnabledListener, 0);
  int v3 = result;
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddBluetoothSpatialAudioUserEnableFeatureListenerForPort(AudioObjectID a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"shpsbolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmBluetoothSpatialAudioUserEnableFeatureListener, 0);
  int v3 = result;
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddBluetoothSpatialAudioModeListenerForPort(AudioObjectID a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"dmpsbolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)cmsmBluetoothSpatialAudioModeListener, 0);
  int v3 = result;
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t vaeAddExclavesStatusChangedNotificationListener()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"SSxEbolg";
  inAddress.mElement = 0;
  uint64_t result = AudioObjectAddPropertyListener([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, (AudioObjectPropertyListenerProc)cmsmExclavesSensorStatusListener, 0);
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t FigVAEndpointCreate(uint64_t a1, int a2, void *a3)
{
  if (a3)
  {
    FigVAEndpointGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      *(_DWORD *)CMBaseObjectGetDerivedStorage() = a2;
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

_DWORD *FigVAEndpointDisassociatePort()
{
  uint64_t result = (_DWORD *)CMBaseObjectGetDerivedStorage();
  _DWORD *result = 0;
  return result;
}

id __getOwnershipCondition_block_invoke()
{
  id result = objc_alloc_init(MEMORY[0x1E4F28BB0]);
  getOwnershipCondition_sOwnershipCondition = (uint64_t)result;
  return result;
}

void __vaeCopyLocalizedString_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  vaeCopyLocalizedString_bundleUrl = (uint64_t)CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"/Library/Audio/Plug-Ins/HAL/VirtualAudio.plugin", kCFURLPOSIXPathStyle, 1u);
  CFBundleRef v1 = CFBundleCreate(v0, (CFURLRef)vaeCopyLocalizedString_bundleUrl);
  vaeCopyLocalizedString_bundleRef = (uint64_t)v1;
  if (v1) {
    CFRetain(v1);
  }
  CFTypeRef v2 = (const void *)vaeCopyLocalizedString_bundleUrl;
  if (vaeCopyLocalizedString_bundleUrl)
  {
    CFRelease(v2);
  }
}

void _VAEndpoint_Finalize()
{
  CFAllocatorRef v0 = *(const void **)(CMBaseObjectGetDerivedStorage() + 8);
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *_VAEndpoint_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @"<FigVAEndpoint %p %d>", a1, *DerivedStorage);
  return Mutable;
}

uint64_t _VAEndpoint_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  v54[16] = *MEMORY[0x1E4F143B8];
  uint64_t result = 4294950586;
  if (a2 && a3)
  {
    uint64_t v6 = *(unsigned int *)CMBaseObjectGetDerivedStorage();
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F00]))
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 != CFNumberGetTypeID()) {
        return 4294950586;
      }
      valuePtr.mSelector = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
      CFMutableStringRef v8 = CMSMUtility_CopyCurrentRouteTypesAsCFString();
      if (dword_1E9359ED0)
      {
        LODWORD(v42) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v17 = [+[MXSessionManager sharedInstance] defaultVADID];
      vaemSetDeviceVolumeIfNotSet(v17, 0, v8, 0, *(float *)&valuePtr.mSelector, 0.0, 0.0);
      if (!v8) {
        return 0;
      }
      CFMutableStringRef v18 = v8;
LABEL_25:
      CFRelease(v18);
      return 0;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21080]))
    {
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 != CFNumberGetTypeID()) {
        return 0;
      }
      LODWORD(v42) = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &v42);
      if (vaeIsPortBluetoothShareable(v6)
        && CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
      {
        CMSMVAUtility_SetVolumePreferenceForPort();
      }
      if (!vaeIsPortWHAGroupable(v6)) {
        return 0;
      }
      int IsPortActiveForCurrentRouteConfiguration = vaeIsPortActiveForCurrentRouteConfiguration(v6);
      *(void *)&valuePtr.mSelector = 0;
      MEMORY[0x199716E90](gCMSM);
      PVMCopyVolumeCategoryAndMode((const __CFString *)[+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") getUncustomizedCategory:[+[MXSessionManager sharedInstance] currentAudioCategory]], 0, &valuePtr, 0);
      MEMORY[0x199716EA0](gCMSM);
      if (!IsPortActiveForCurrentRouteConfiguration || !FigCFEqual()) {
        CMSMVAUtility_SetVolumePreferenceForPort();
      }
      CMSMVAUtility_SetCurrentPreferredVolume(*(float *)&v42);
      unsigned int PortTypeFromPortID = vaeGetPortTypeFromPortID(v6);
      id v21 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
      if (dword_1E9359ED0)
      {
        *(_DWORD *)os_log_type_t type = 0;
        v46[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v23 = *(_DWORD *)type;
        if (os_log_type_enabled(v22, v46[0])) {
          unsigned int v24 = v23;
        }
        else {
          unsigned int v24 = v23 & 0xFFFFFFFE;
        }
        if (v24)
        {
          uint64_t VADNameForVADID = CMSMUtility_GetVADNameForVADID([+[MXSessionManager sharedInstance] defaultVADID]);
          int v48 = 136315906;
          unsigned int v49 = "_VAEndpoint_SetProperty";
          __int16 v50 = 2114;
          *(void *)CFArrayRef v51 = VADNameForVADID;
          *(_WORD *)&v51[8] = 2114;
          *(void *)unsigned int v52 = v21;
          *(_WORD *)&v52[8] = 2114;
          uint64_t v53 = *(void *)&valuePtr.mSelector;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v21) {
        CFRelease(v21);
      }
      CFMutableStringRef v18 = *(CFMutableStringRef *)&valuePtr.mSelector;
      if (!*(void *)&valuePtr.mSelector) {
        return 0;
      }
      goto LABEL_25;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EE8]))
    {
      CFTypeID v11 = CFGetTypeID(a3);
      if (v11 != CFNumberGetTypeID()) {
        return 0;
      }
      uint64_t v42 = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &v42);
      *(_DWORD *)os_log_type_t type = v42;
      if (!v6) {
        return 0;
      }
      valuePtr.mElement = 0;
      *(void *)&valuePtr.mSelector = *(void *)"mtslbolg";
      uint64_t result = AudioObjectHasProperty(v6, &valuePtr);
      if (!result) {
        return result;
      }
      int v12 = CMSMVAUtility_AudioObjectSetPropertyData();
      *(_DWORD *)CFArrayRef v46 = v12;
      if (!v12)
      {
        if (dword_1E9359ED0)
        {
          unsigned int v44 = 0;
          os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
          uint64_t v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v31 = v44;
          if (os_log_type_enabled(v30, v43)) {
            unsigned int v32 = v31;
          }
          else {
            unsigned int v32 = v31 & 0xFFFFFFFE;
          }
          if (v32)
          {
            if (*(_DWORD *)type > 4u) {
              CFTypeRef v33 = 0;
            }
            else {
              CFTypeRef v33 = off_1E57C9DA8[*(int *)type];
            }
            int v48 = 136315394;
            unsigned int v49 = "vaeSetBluetoothListeningMode";
            __int16 v50 = 2114;
            *(void *)CFArrayRef v51 = v33;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
      int v13 = v12;
      unsigned int v44 = 0;
      os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
      CFNumberRef v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v15 = v44;
      if (os_log_type_enabled(v14, v43)) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = v15 & 0xFFFFFFFE;
      }
      if (v16)
      {
        int v48 = 136315906;
        unsigned int v49 = "vaeSetBluetoothListeningMode";
        __int16 v50 = 1024;
        *(_DWORD *)CFArrayRef v51 = v13;
        *(_WORD *)&v51[4] = 1042;
        *(_DWORD *)&v51[6] = 4;
        *(_WORD *)unsigned int v52 = 2082;
        *(void *)&v52[2] = v46;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return *(unsigned int *)v46;
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EA0]))
      {
        CFTypeID v26 = CFGetTypeID(a3);
        if (v26 == CFBooleanGetTypeID())
        {
          CFBooleanGetValue((CFBooleanRef)a3);
          vaemSetFullMute();
        }
        return 0;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CE0]))
      {
        CFTypeID v27 = CFGetTypeID(a3);
        if (v27 == CFBooleanGetTypeID())
        {
          BOOL v28 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
          vaeSetBluetoothSpatialAudioUserEnableFeature(v6, v28);
        }
        return 0;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E28]))
      {
        CFTypeID v29 = CFGetTypeID(a3);
        if (v29 == CFNumberGetTypeID())
        {
          v54[0] = 0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, v54);
          return vaeSetBluetoothSpatialAudioMode(v6, v54[0]);
        }
        return 0;
      }
      uint64_t result = CFEqual(a2, @"ConversationDetectEnable");
      if (result)
      {
        CFTypeID v34 = CFGetTypeID(a3);
        if (v34 != CFBooleanGetTypeID()) {
          return 0;
        }
        if (MX_FeatureFlags_IsConversationDetectSupported()
          && (int Value = CFBooleanGetValue((CFBooleanRef)a3),
              vaeCopyDeviceIdentifierFromVADPort(v6),
              (CFTypeRef v36 = FigRoutingManagerCopyEndpointWithDeviceIDFromBluetoothManager()) != 0))
        {
          char v37 = v36;
          unsigned int v38 = (uint64_t *)MEMORY[0x1E4F1CFD0];
          if (!Value) {
            unsigned int v38 = (uint64_t *)MEMORY[0x1E4F1CFC8];
          }
          uint64_t v39 = FigEndpointSetProperty((uint64_t)v36, @"ConversationDetectEnable", *v38);
          CFRelease(v37);
          return v39;
        }
        else
        {
          return 4294954311;
        }
      }
    }
  }
  return result;
}

uint64_t vaeIsPortActiveForCurrentRouteConfiguration(int a1)
{
  CFArrayRef v2 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, 0x1EE5EBF48);
  if (!v2) {
    return 0;
  }
  CFArrayRef v3 = v2;
  CFIndex Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
LABEL_6:
    uint64_t v7 = 0;
  }
  else
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    while (CMSMVAUtility_GetPortAtIndex(v3, v6) != a1)
    {
      if (v5 == ++v6) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = 1;
  }
  CFRelease(v3);
  return v7;
}

uint64_t vaeSetBluetoothSpatialAudioUserEnableFeature(uint64_t result, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v5 = a2;
  if (result)
  {
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"shpsbolg";
    uint64_t result = AudioObjectHasProperty(result, &inAddress);
    if (result)
    {
      uint64_t result = CMSMVAUtility_AudioObjectSetPropertyData();
      int v4 = result;
      if (result || dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        return fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return result;
}

uint64_t vaeSetBluetoothSpatialAudioMode(uint64_t result, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v6 = a2;
  if (result)
  {
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"dmpsbolg";
    uint64_t result = AudioObjectHasProperty(result, &inAddress);
    if (result)
    {
      unsigned int v5 = CMSMVAUtility_AudioObjectSetPropertyData();
      if (v5)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return v5;
      }
      else
      {
        if (dword_1E9359ED0)
        {
          CFArrayRef v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t FigEndpointSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFMutableStringRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }
  return v8(CMBaseObject, a2, a3);
}

uint64_t _VAEndpoint_ActivateWithCompletionCallback(uint64_t a1, uint64_t a2, const void *a3, void (*a4)(uint64_t, uint64_t, void, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  uint64_t v11 = *DerivedStorage;
  if (!v11) {
    return 4294950573;
  }
  int v12 = DerivedStorage;
  int v13 = (const void *)*((void *)DerivedStorage + 1);
  *((void *)DerivedStorage + 1) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *((void *)v12 + 3) + 1;
  *((void *)v12 + 2) = a2;
  *((void *)v12 + 3) = v14;
  if (a3)
  {
    unsigned int v15 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F20350]);
    CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F20330]);
  }
  else
  {
    unsigned int v15 = 0;
  }
  if (!FigCFEqual() || !vaeIsPortBluetoothShareable(v11)) {
    goto LABEL_19;
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  uint64_t v16 = NumberOfCurrentOutputPorts;
  if (!NumberOfCurrentOutputPorts) {
    goto LABEL_20;
  }
  if (NumberOfCurrentOutputPorts == 1)
  {
    uint64_t CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    if (vaeIsPortBluetoothShareable(CurrentOutputPortAtIndex))
    {
      if (dword_1E9359ED0)
      {
        valuea = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(valuea, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      SInt64 = (const void *)FigCFNumberCreateSInt64();
      CFArrayAppendValue(Mutable, SInt64);
      if (SInt64) {
        CFRelease(SInt64);
      }
      unsigned int v31 = (const void *)FigCFNumberCreateSInt64();
      CFArrayAppendValue(Mutable, v31);
      if (v31) {
        CFRelease(v31);
      }
      uint64_t v16 = vaeRequestOwnershipOnBTPort(v11);
      if (v16)
      {
        if (dword_1E9359ED0)
        {
          unsigned int v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        vaemAggregatePorts((uint64_t)Mutable, 1, 0, (uint64_t)v15);
      }
      if (!Mutable) {
        goto LABEL_20;
      }
      CFTypeID v26 = Mutable;
      goto LABEL_53;
    }
LABEL_19:
    ControllingRoutingSession = CMSMUtility_GetControllingRoutingSession();
    uint64_t v16 = vaeRouteToSelectedPort(v11, ControllingRoutingSession, (uint64_t)v15);
    goto LABEL_20;
  }
  if (!CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
  {
    if (dword_1E9359ED0)
    {
      CFTypeID v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v16 = 0;
    goto LABEL_20;
  }
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMSMUtility_GetCurrentOutputPortAtIndex(1);
  unsigned int v23 = (const void *)FigCFNumberCreateSInt64();
  uint64_t value = (void *)FigCFNumberCreateSInt64();
  unsigned int v24 = CFArrayCreateMutable(v22, 0, MEMORY[0x1E4F1D510]);
  uint64_t v25 = v24;
  if (v23) {
    CFArrayAppendValue(v24, v23);
  }
  if (value) {
    CFArrayAppendValue(v25, value);
  }
  if (vaeGetBTPortOwnsSharedAudioConnection(v11))
  {
    vaemAggregatePorts((uint64_t)v25, 1, 1, (uint64_t)v15);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = vaeRequestOwnershipOnBTPort(v11);
    if (v16)
    {
      if (dword_1E9359ED0)
      {
        BOOL v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      vaemAggregatePorts((uint64_t)v25, 1, 0, (uint64_t)v15);
    }
  }
  if (value) {
    CFRelease(value);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v25)
  {
    CFTypeID v26 = v25;
LABEL_53:
    CFRelease(v26);
  }
LABEL_20:
  if (a4) {
    a4(a1, a2, *((void *)v12 + 3), v16, a5);
  }
  return v16;
}

uint64_t _VAEndpoint_DeactivateWithCompletionCallback(uint64_t a1, const __CFDictionary *a2, void (*a3)(uint64_t, void, void, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = *DerivedStorage;
  if (a2)
  {
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20538]);
    int Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20540]);
    uint64_t v11 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20530]);
  }
  else
  {
    int Value = 0;
    uint64_t v11 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  uint64_t v12 = FigCFEqual();
  if (v11 != (const void *)*MEMORY[0x1E4F1CFD0] || !vaeIsPortBluetoothShareable(v9)) {
    goto LABEL_5;
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  uint64_t PortRoutable = NumberOfCurrentOutputPorts;
  if (NumberOfCurrentOutputPorts)
  {
    if (NumberOfCurrentOutputPorts == 1)
    {
      if (CMSMUtility_GetCurrentOutputPortAtIndex(0) != v9) {
        goto LABEL_35;
      }
LABEL_5:
      uint64_t PortRoutable = vaeMakePortRoutable(v9, 0, v12, (uint64_t)Value);
      goto LABEL_6;
    }
    if (!CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
    {
      if (dword_1E9359ED0)
      {
        id v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_35;
    }
    if (PortRoutable != 2
      || CMSMUtility_GetCurrentOutputPortAtIndex(0) != v9
      && CMSMUtility_GetCurrentOutputPortAtIndex(1) != v9)
    {
      uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t PortRoutable = 4294954315;
      goto LABEL_6;
    }
    CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t PortRoutable = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFTypeRef cf = (CFTypeRef)FigCFNumberCreateSInt64();
    CFArrayAppendValue((CFMutableArrayRef)PortRoutable, cf);
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(v17, 0, (CFArrayRef)PortRoutable);
    if (CMSMUtility_GetCurrentOutputPortAtIndex(0) == v9)
    {
      if (CMSMUtility_GetCurrentOutputPortAtIndex(1) == v9) {
        goto LABEL_29;
      }
      uint64_t v19 = 1;
    }
    else
    {
      uint64_t v19 = 0;
    }
    CMSMUtility_GetCurrentOutputPortAtIndex(v19);
    SInt64 = (const void *)FigCFNumberCreateSInt64();
    CFArrayAppendValue(MutableCopy, SInt64);
    if (SInt64) {
      CFRelease(SInt64);
    }
LABEL_29:
    vaemDeaggregatePorts((uint64_t)MutableCopy, PortRoutable, v12, (uint64_t)Value);
    if (cf) {
      CFRelease(cf);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (PortRoutable)
    {
      CFRelease((CFTypeRef)PortRoutable);
LABEL_35:
      uint64_t PortRoutable = 0;
    }
  }
LABEL_6:
  if (a3) {
    a3(a1, *((void *)DerivedStorage + 2), *((void *)DerivedStorage + 3), PortRoutable, a4);
  }
  return PortRoutable;
}

uint64_t vaeRouteToSelectedPort(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (NSDictionary *)CMSMUtility_CopyNonNullCurrentlyActiveCategory();
  uint64_t v7 = CMSMUtility_CopyNonNullCurrentlyActiveMode();
  CFTypeRef v8 = CMSMUtility_CopyCurrentAllowedPortTypes();
  int ConnectionTypeForPort = vaeGetConnectionTypeForPort(a1);
  int PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  if (v8)
  {
    int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v6);
    int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName((uint64_t)v7);
    if (MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled() && !vaemIsPersistentRouteActive())
    {
      if (a2) {
        unsigned int v15 = (const void *)[a2 activationContext];
      }
      else {
        unsigned int v15 = 0;
      }
      uint64_t v14 = (void *)cmsmCopyActiveNonQuiesceablePortsForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v15, v8, 0, 0x1EE5EBF48);
    }
    else
    {
      if (a2) {
        uint64_t v12 = (const void *)[a2 activationContext];
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v14 = (void *)cmsmCopyActiveNonWirelessPortsListForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v12, v8, 0, 0x1EE5EBF48);
    }
    unsigned int v23 = v14;
    if ([v14 count]) {
      LODWORD(v17) = objc_msgSend((id)objc_msgSend(v23, "firstObject"), "unsignedIntValue");
    }
    else {
      LODWORD(v17) = 0;
    }

    uint64_t v16 = 0;
  }
  else
  {
    if (a2) {
      int v13 = (void *)[a2 activationContext];
    }
    else {
      int v13 = 0;
    }
    uint64_t v16 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)v6, (uint64_t)v7, v13, 0);
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    uint64_t v17 = [(__CFArray *)v16 countByEnumeratingWithState:&v61 objects:v66 count:16];
    if (v17)
    {
      uint64_t v55 = a2;
      CFMutableStringRef v18 = v6;
      uint64_t v19 = v7;
      uint64_t v20 = *(void *)v62;
      while (2)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v62 != v20) {
            objc_enumerationMutation(v16);
          }
          CFAllocatorRef v22 = *(void **)(*((void *)&v61 + 1) + 8 * i);
          if (objc_msgSend((id)objc_msgSend(v22, "objectForKey:", @"PortNumber"), "unsignedIntValue") == a1)
          {
            if (objc_msgSend((id)objc_msgSend(v22, "objectForKey:", @"RouteType"), "isEqualToString:", @"Default"))LODWORD(v17) = a1; {
            else
            }
              LODWORD(v17) = 0;
            goto LABEL_25;
          }
        }
        uint64_t v17 = [(__CFArray *)v16 countByEnumeratingWithState:&v61 objects:v66 count:16];
        if (v17) {
          continue;
        }
        break;
      }
LABEL_25:
      uint64_t v7 = v19;
      uint64_t v6 = v18;
      CFTypeRef v8 = 0;
      a2 = v55;
    }
  }
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID((uint64_t)&cf);
  if (!FigCFEqual())
  {
    if (v17 != a1 && ConnectionTypeForPort == 1885561449)
    {
      if (!a2
        || (unsigned int v33 = vaeGetPortTypeFromPortID(a1),
            (CFTypeID v34 = (NSDictionary *)CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(v33)) == 0))
      {
LABEL_61:
        uint64_t PortRoutable = 0;
        goto LABEL_114;
      }
      uint64_t v35 = v34;
      uint64_t PortRoutable = MXCoreSessionSetProperty(a2, @"OverrideRoute", v34, 0);
      CFArrayRef v37 = (const __CFArray *)v35;
      goto LABEL_113;
    }
    CFArrayRef Count = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsActive, 0);
    CFArrayRef v28 = Count;
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (!Count && v8)
    {
      CFRelease(v8);
      CFTypeRef v8 = 0;
    }
    if (v28) {
      CFRelease(v28);
    }
    id v29 = cmsmCopyQuiesceableWiredPortsForRouteConfiguration(v6, (uint64_t)v7, v8);
    CFArrayRef v30 = cmsmCopyWirelessPortsArrayForRouteConfiguration(v6, (uint64_t)v7, v8);
    int IsOnenessEnabled = MX_FeatureFlags_IsOnenessEnabled();
    if (ConnectionTypeForPort != 1885544823 || IsOnenessEnabled && PortTypeFromPortID == 1885565807)
    {
      if (vaeIsQuiesceableWiredPort(a1))
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        [+[MXSessionManager sharedInstance] setQuiesceableWiredPortPreference:a1 autoRouteOnConnect:1];
        uint64_t PortRoutable = vaeMakePortRoutable(a1, 1, 1, a3);
        if (PortRoutable)
        {
          uint64_t v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (v30 && CFArrayGetCount(v30)) {
          uint64_t PortRoutable = cmsmUnpickWirelessRoutes(v30, 0, 1, a3);
        }
        else {
          uint64_t PortRoutable = 0;
        }
        if ([v29 count]) {
          cmsmUnpickQuiesceableWiredPortsRoutes(v29, 1, a3, 1);
        }
      }
      goto LABEL_109;
    }
    if (dword_1E9359ED0)
    {
      uint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1
      && (*(void *)&inAddress.mSelector = 0x676C6F626F736163,
          inAddress.mElement = 0,
          AudioObjectHasProperty(a1, &inAddress)))
    {
      uint64_t PortRoutable = vaeRequestOwnershipOnBTPort(a1);
      if (PortRoutable)
      {
LABEL_109:
        if (objc_msgSend((id)objc_msgSend(a2, "overridePortsList", v52, v53), "count")) {
          uint64_t PortRoutable = MXCoreSessionSetProperty(a2, @"OverrideRoute", 0, 0);
        }

        if (!v30) {
          goto LABEL_114;
        }
        CFArrayRef v37 = v30;
LABEL_113:
        CFRelease(v37);
        goto LABEL_114;
      }
      CFArrayRef v54 = v30;
      uint64_t v58 = v6;
      ArrayFromPortID = CMSMVAUtility_CreateArrayFromPortID(a1);
      Routable = cmsmCopyPartnerPortsToMakeRoutable(ArrayFromPortID);
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Routable && CFArrayGetCount(Routable) >= 1)
      {
        v68.length = CFArrayGetCount(Routable);
        v68.location = 0;
        CFArrayAppendArray(Mutable, Routable, v68);
      }
      if (ArrayFromPortID && CFArrayGetCount(ArrayFromPortID) >= 1)
      {
        v69.length = CFArrayGetCount(ArrayFromPortID);
        v69.location = 0;
        CFArrayAppendArray(Mutable, ArrayFromPortID, v69);
      }
      uint64_t PortRoutable = (uint64_t)vaemMakeArrayOfPortsRoutable(Mutable, 1, 1u, a3, 0);
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (Routable) {
        CFRelease(Routable);
      }
      uint64_t v6 = v58;
      if (ArrayFromPortID) {
        CFRelease(ArrayFromPortID);
      }
      CFArrayRef v30 = v54;
    }
    else
    {
      uint64_t PortRoutable = vaeMakePortRoutable(a1, 1, 1, a3);
    }
    if (!PortRoutable)
    {
      if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1))
      {
        id v59 = v29;
        CFTypeRef v46 = FigRoutingManagerCopyActivatedCarPlayEndpoint(qword_1E9359C88);
        *(void *)&inAddress.mSelector = 0;
        if (v46)
        {
          unsigned int v47 = v46;
          uint64_t v56 = a2;
          int v48 = v7;
          FigEndpointCopyProperty((uint64_t)v46, *MEMORY[0x1E4F21040], *MEMORY[0x1E4F1CF80], (uint64_t)&inAddress);
          if (FigCFEqual()) {
            BOOL v49 = dword_1E9359C60 == 0;
          }
          else {
            BOOL v49 = 1;
          }
          char v50 = v49;
          if (*(void *)&inAddress.mSelector)
          {
            CFRelease(*(CFTypeRef *)&inAddress.mSelector);
            *(void *)&inAddress.mSelector = 0;
          }
          CFRelease(v47);
          if (v50) {
            uint64_t PortRoutable = 0;
          }
          else {
            uint64_t PortRoutable = vaeMakePortRoutable(dword_1E9359C60, 0, 1, a3);
          }
          uint64_t v7 = v48;
          a2 = v56;
        }
        else
        {
          uint64_t PortRoutable = 0;
        }
        id v29 = v59;
      }
      else
      {
        uint64_t PortRoutable = 0;
      }
    }
    goto LABEL_109;
  }
  CurrentInputuint64_t PortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
  if (dword_1E9359ED0)
  {
    uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(a2, "hasInput", v52, v53))
  {
    int v38 = vaeGetConnectionTypeForPort(CurrentInputPortAtIndex);
    int v39 = vaeGetConnectionTypeForPort(a1);
    if (CurrentInputPortAtIndex != a1 && (v38 == 1885544823 || v39 == 1885561449)) {
      vaeMakeSiblingPortsRoutable(CurrentInputPortAtIndex, 0, a3);
    }
    vaeMakeSiblingPortsRoutable(a1, 1, a3);
    vaemUpdateSystemHasAudioInputDeviceState();
    goto LABEL_61;
  }
  uint64_t v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t PortRoutable = 4294954296;
LABEL_114:
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (cf) {
    CFRelease(cf);
  }
  return PortRoutable;
}

void vaeMakeSiblingPortsRoutable(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(outData, 0, 32);
  int SiblingsForPort = vaeGetSiblingsForPort(a1, outData);
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", a1));
  if (SiblingsForPort)
  {
    for (uint64_t i = 0; i != SiblingsForPort; ++i)
      objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", outData[i]));
    if (a1)
    {
      *(void *)&inAddress.mSelector = 0x676C6F626F736163;
      inAddress.mElement = 0;
      int HasProperty = AudioObjectHasProperty(a1, &inAddress);
      if (a2)
      {
        if (HasProperty)
        {
          if (dword_1E9359ED0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          vaeRequestOwnershipOnBTPort(outData[0]);
        }
      }
    }
  }
  if (dword_1E9359ED0)
  {
    uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemMakeArrayOfPortsRoutable((const __CFArray *)v7, a2, 1u, a3, 0);
}

uint64_t CMSM_IDSServer_StartAutomaticOwnershipTransferToPhoneTimer()
{
  uint64_t result = CMSMDeviceState_ItsAniPhone();
  if (result)
  {
    uint64_t result = CMSM_IDSConnection_IsNearbyPairedDevicePresentAndConnected();
    if (result)
    {
      uint64_t result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
      if (!result)
      {
        CMSM_IDSServer_CancelAutomaticOwnershipTransferToPhoneTimer();
        CFBundleRef v1 = MXGetSerialQueue();
        uint64_t result = (uint64_t)FigRoutingManagerCreateOneShotTimer(v1, 15.0, (uint64_t)&__block_literal_global_42, 0, 0);
        sAutomaticOwnershipTransferToPhoneTimer = result;
      }
    }
  }
  return result;
}

void CMSM_IDSServer_CancelAutomaticOwnershipTransferToPhoneTimer()
{
  if (sAutomaticOwnershipTransferToPhoneTimer)
  {
    dispatch_source_cancel((dispatch_source_t)sAutomaticOwnershipTransferToPhoneTimer);
    if (sAutomaticOwnershipTransferToPhoneTimer)
    {
      dispatch_release((dispatch_object_t)sAutomaticOwnershipTransferToPhoneTimer);
      sAutomaticOwnershipTransferToPhoneTimer = 0;
    }
  }
}

BOOL CMSM_IDSServer_IsAutomaticOwnershipTransferToPhoneTimerCreated()
{
  return sAutomaticOwnershipTransferToPhoneTimer != 0;
}

void CMSM_IDSServer_Initialize()
{
  if (!gIDSServer) {
    gIDSServer = objc_alloc_init(CMSM_IDSServer);
  }
  sAutomaticOwnershipTransferToPhoneTimer = 0;
}

uint64_t cmsm_IDSServer_ProcessBTDeviceConnectionStatusChangedMessage(const __CFDictionary *a1)
{
  BOOL v1 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_BTDeviceIsConnectedKey) == (const void *)*MEMORY[0x1E4F1CFD0];
  return CMSM_IDSConnection_UpdateSharedAudioRouteIsConnectedToRemote(v1);
}

void cmsm_IDSServer_ProcessRemotePlayingInfoQueryMessage()
{
  CFAllocatorRef v0 = CMSMUtility_CopyPlayingSessionsInfo();
  CMSM_IDSClient_ReplyToRemote_PlayingInfo(v0);
  if (v0)
  {
    CFRelease(v0);
  }
}

void cmsm_IDSServer_ProcessRemotePlayingInfoReplyMessage(const __CFDictionary *a1)
{
  CMSM_IDSConnection_StopWaitForRemoteToReplyWithInitialPlayingInfoTimer();
  int Value = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_AllPlayingSessionsKey);
  CFArrayRef v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  int v4 = MXGetSerialQueue();
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __cmsm_IDSServer_ProcessRemotePlayingInfoReplyMessage_block_invoke;
  v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = v3;
  MXDispatchAsync((uint64_t)"cmsm_IDSServer_ProcessRemotePlayingInfoReplyMessage", (uint64_t)"CMSessionManager_IDSServer.m", 140, 0, 0, v4, (uint64_t)v7);
  unsigned int v5 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_CurrentRouteIsSharedKey);
  CMSM_IDSConnection_UpdateRemoteIsUsingSharedAudioRoute(v5 == (const void *)*MEMORY[0x1E4F1CFD0]);
  CMSM_IDSConnection_UpdateRemoteRepliedWithInitialPlayingInfo(1);
  CMSM_IDSConnection_ResetWaitingForGizmoPlayingInfo();
  uint64_t v6 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_CurrentRouteUIDKey);
  CMSM_IDSConnection_UpdateRemoteCurrentRouteUID(v6);
  if (v5 == (const void *)*MEMORY[0x1E4F1CFC8] || !v3 && CMSMDeviceState_ItsAniPhone()) {
    CMSM_IDSConnection_RouteToSharedAudioRouteUponReceivingOwnership();
  }
}

void cmsm_IDSServer_ProcessLocalIsPlayingStartMessage(const __CFDictionary *a1)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_PlayingSessionKey);
  if (Value)
  {
    CFDictionaryRef v3 = Value;
    CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(Value, @"CMSessionID");
    CFArrayRef RemotePlayingInfo = (const __CFArray *)CMSM_IDSConnection_GetRemotePlayingInfo();
    if (RemotePlayingInfo && (CFArrayRef v6 = RemotePlayingInfo, CFArrayGetCount(RemotePlayingInfo) >= 1))
    {
      CFIndex v7 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v7);
        if (ValueAtIndex)
        {
          CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CMSessionID");
          if (CFNumberCompare(v4, v9, 0) == kCFCompareEqualTo) {
            break;
          }
        }
        if (++v7 >= CFArrayGetCount(v6)) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      CMSM_IDSConnection_AddRemotePlayingInfo(v3);
    }
    BOOL v10 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_CurrentRouteIsSharedKey) == (const void *)*MEMORY[0x1E4F1CFD0];
    CMSM_IDSConnection_UpdateRemoteIsUsingSharedAudioRoute(v10);
    uint64_t v11 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_CurrentRouteUIDKey);
    CMSM_IDSConnection_UpdateRemoteCurrentRouteUID(v11);
  }
  if (CMSMDeviceState_ItsAniPhone())
  {
    CMSM_IDSServer_CancelAutomaticOwnershipTransferToPhoneTimer();
  }
}

uint64_t cmsm_IDSServer_ProcessLocalIsPlayingDoneMessage(const __CFDictionary *a1)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_PlayingSessionKey);
  if (Value)
  {
    CFNumberRef v2 = (const __CFNumber *)CFDictionaryGetValue(Value, @"CMSessionID");
    CFArrayRef RemotePlayingInfo = (const __CFArray *)CMSM_IDSConnection_GetRemotePlayingInfo();
    if (RemotePlayingInfo)
    {
      CFArrayRef v4 = RemotePlayingInfo;
      if (CFArrayGetCount(RemotePlayingInfo) >= 1)
      {
        CFIndex v5 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v5);
          if (ValueAtIndex)
          {
            CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CMSessionID");
            if (CFNumberCompare(v2, v7, 0) == kCFCompareEqualTo) {
              break;
            }
          }
          if (++v5 >= CFArrayGetCount(v4)) {
            goto LABEL_10;
          }
        }
        CMSM_IDSConnection_RemoveRemotePlayingInfo(v5);
      }
    }
  }
LABEL_10:
  return CMSM_IDSServer_StartAutomaticOwnershipTransferToPhoneTimer();
}

uint64_t cmsm_IDSServer_ProcessLocalIsDoingEndInterruption(const __CFDictionary *a1)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_LocalEndInterruptionStatusKey);
  return CMSM_IDSConnection_DeactivateIDSMXCoreSession(Value);
}

void cmsm_IDSServer_ProcessUpdateSharedAudioRouteMacAddress(const __CFDictionary *a1)
{
  CFStringRef Value = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_SharedAudioRouteMacAddress);
  CFDictionaryRef v3 = CFDictionaryGetValue(a1, (const void *)kMXSession_IDSMessage_ClearSharedAudioRoute);
  if (Value) {
    CFRetain(Value);
  }
  CFArrayRef v4 = MXGetSerialQueue();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __cmsm_IDSServer_ProcessUpdateSharedAudioRouteMacAddress_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = Value;
  v5[5] = v3;
  MXDispatchAsync((uint64_t)"cmsm_IDSServer_ProcessUpdateSharedAudioRouteMacAddress", (uint64_t)"CMSessionManager_IDSServer.m", 530, 0, 0, v4, (uint64_t)v5);
}

uint64_t PowerManager_SetCPMSSupportedForHaptics(uint64_t result)
{
  sCMSMPowerManagerForHaptics_0 = result;
  return result;
}

uint64_t PowerManager_InitializeCPMSForHaptics()
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (sCMSMPowerManagerForHaptics_1) {
    return 0;
  }
  sCMSMPowerManagerForHaptics_2 = [MEMORY[0x1E4F56678] sharedCPMSAgent];
  if (!sCMSMPowerManagerForHaptics_2) {
    return 4294954510;
  }
  sCMSMPowerManagerForHaptics_5 = vaemCopyCPMSPowerBudgetRangeInMilliWatts(6);
  if (sCMSMPowerManagerForHaptics_5)
  {
    *(void *)CFArrayRef v28 = 0;
    BOOL v1 = (void *)sCMSMPowerManagerForHaptics_2;
    CFNumberRef v2 = objc_opt_new();
    [v2 setClientId:6];
    [v2 setPowerLevels:sCMSMPowerManagerForHaptics_5];
    [v2 setIsContinuous:1];
    [v2 setNotificationCallback:&__block_literal_global_5_0];
    [v2 setGetCurrentPower:&__block_literal_global_43];
    [v2 setPowerBudgetUpdateMinimumPeriod:10];
    [v2 setPowerBudgetUpdateMinimumPeriod:1000];
    int v3 = sCMSMPowerManagerForHaptics_1;
    if ((sCMSMPowerManagerForHaptics_1 & 1) == 0)
    {
      if (![v1 registerClientWithDescription:v2 error:v28])
      {
        uint64_t v0 = 4294954513;
        goto LABEL_33;
      }
      sCMSMPowerManagerForHaptics_1 = 1;
    }
    id v31 = 0;
    CFArrayRef v4 = (void *)sCMSMPowerManagerForHaptics_2;
    CFMutableDictionaryRef PowerBudgetRequestDict = PowerManager_CreatePowerBudgetRequestDict((const __CFDictionary *)sCMSMPowerManagerForHaptics_5, 1);
    if (PowerBudgetRequestDict)
    {
      CFMutableDictionaryRef v6 = PowerBudgetRequestDict;
      uint64_t v7 = [v4 copyPowerBudgetForRequest:PowerBudgetRequestDict forClient:6 error:&v31];
      if (v7)
      {
        uint64_t v8 = v7;
        if (sCMSMPowerManagerForHaptics_6) {
          CFRelease((CFTypeRef)sCMSMPowerManagerForHaptics_6);
        }
        sCMSMPowerManagerForHaptics_6 = v8;
        if (dword_1E9359ED0)
        {
          *(_DWORD *)CFArrayRef v30 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v10 = *(_DWORD *)v30;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
            unsigned int v11 = v10;
          }
          else {
            unsigned int v11 = v10 & 0xFFFFFFFE;
          }
          if (v11)
          {
            int v32 = 136315394;
            unsigned int v33 = "powerManager_RequestPowerBudgetFromCPMSForHapticsResource";
            __int16 v34 = 2114;
            uint64_t v35 = sCMSMPowerManagerForHaptics_6;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFRelease(v6);
        uint64_t v0 = PowerManager_SetPowerBudgetOnVAAndSendAcknowledgementToCPMSForResource(6, (void *)sCMSMPowerManagerForHaptics_2, sCMSMPowerManagerForHaptics_6);
        if ((v3 & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_33;
      }
      *(_DWORD *)CFArrayRef v30 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v13 = *(_DWORD *)v30;
      if (os_log_type_enabled(v12, type)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        uint64_t v15 = [v31 description];
        int v32 = 136315394;
        unsigned int v33 = "powerManager_RequestPowerBudgetFromCPMSForHapticsResource";
        __int16 v34 = 2114;
        uint64_t v35 = v15;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFRelease(v6);
    }
    LODWORD(v31) = 0;
    v30[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v17 = v31;
    if (os_log_type_enabled(v16, v30[0])) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      int v32 = 136315138;
      unsigned int v33 = "powerManager_RequestInitialBudgetFromCPMSForHapticsResource";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v0 = 4294954510;
    if (!v3)
    {
LABEL_39:

      if (sCMSMPowerManagerForHaptics_6)
      {
        if (v0 != -12783) {
          return v0;
        }
        goto LABEL_41;
      }
      return 4294954510;
    }
LABEL_33:
    LODWORD(v31) = 0;
    v30[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v20 = v31;
    if (os_log_type_enabled(v19, v30[0])) {
      unsigned int v21 = v20;
    }
    else {
      unsigned int v21 = v20 & 0xFFFFFFFE;
    }
    if (v21)
    {
      uint64_t v22 = [*(id *)v28 description];
      int v32 = 136315394;
      unsigned int v33 = "powerManager_RequestInitialBudgetFromCPMSForHapticsResource";
      __int16 v34 = 2114;
      uint64_t v35 = v22;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_39;
  }
LABEL_41:
  LODWORD(v31) = 0;
  v28[0] = OS_LOG_TYPE_DEFAULT;
  unsigned int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v24 = v31;
  if (os_log_type_enabled(v23, v28[0])) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = v24 & 0xFFFFFFFE;
  }
  if (v25)
  {
    uint64_t v26 = [0 description];
    int v32 = 136315394;
    unsigned int v33 = "PowerManager_InitializeCPMSForHaptics";
    __int16 v34 = 2114;
    uint64_t v35 = v26;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954513;
}

void sub_194E1CA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FVSynthEngine_PlayVibrationWithPatternDictionary(uint64_t a1, uint64_t a2, int a3, const void *a4, int a5, int a6, float a7)
{
  void v23[16] = *MEMORY[0x1E4F143B8];
  if (!gFVInfo) {
    return 4294950806;
  }
  BOOL v8 = a7 < 0.0 || a7 > 1.0;
  if (!v8 && a1)
  {
    uint64_t v15 = MEMORY[0x199716EE0](*(void *)gFVInfo);
    if (v15) {
      return v15;
    }
    uint64_t v16 = gFVInfo;
    unsigned int v17 = (a3 != 0) | (2 * (a5 != 0));
    if (a6) {
      uint64_t v18 = v17 | 4;
    }
    else {
      uint64_t v18 = v17;
    }
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a4) {
      CFRetain(a4);
    }
    unsigned int v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, float))(v16 + 48);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 0x40000000;
    v23[2] = __FVSynthEngine_StartVibrationWithPattern_block_invoke;
    v23[3] = &__block_descriptor_tmp_3;
    v23[4] = a4;
    uint64_t v21 = v20(a1, a2, v18, v23, a7);
    if (v21)
    {
      if (a4) {
        CFRelease(a4);
      }
    }
    else
    {
      ++*(_DWORD *)(gFVInfo + 68);
      if (*(unsigned char *)(v16 + 20))
      {
        notify_set_state(*(_DWORD *)(v16 + 16), 1uLL);
        notify_post("com.apple.coremedia.vibration");
      }
      FigVibratorPostNotification(@"VibeWillStart");
    }
    MEMORY[0x199716EF0](*(void *)gFVInfo);
    return v21;
  }
  return FigSignalErrorAt();
}

void FVSynthEngine_SendVibeStoppedNotification(uint64_t a1, void *a2)
{
  values = a2;
  CFDictionaryRef v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigVibratorNotificationKey_VibeStopped_Context, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFArrayRef v4 = *(NSObject **)(a1 + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __FVSynthEngine_SendVibeStoppedNotification_block_invoke;
  v5[3] = &__block_descriptor_tmp_9;
  v5[4] = a1;
  v5[5] = v3;
  MXDispatchAsync((uint64_t)"FVSynthEngine_SendVibeStoppedNotification", (uint64_t)"FigVibrator_VibeSynthEngine.c", 135, 0, 0, v4, (uint64_t)v5);
}

void sub_194E1EED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

CFDictionaryRef copyMeasuredHDMILatencyFromDisk()
{
  CFDictionaryRef v0 = (const __CFDictionary *)CFPreferencesCopyValue(@"measuredHDMILatency", @"com.apple.mediaexperience", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  CFDictionaryRef v1 = v0;
  if (v0
    && (!CFDictionaryContainsKey(v0, @"MeasuredHDMILatency_MeasuredAudioHDMILatency24Hz")
     || !CFDictionaryContainsKey(v1, @"MeasuredHDMILatency_MeasuredAudioHDMILatency60Hz")
     || !CFDictionaryContainsKey(v1, @"MeasuredHDMILatency_MeasuredVideoHDMILatency24Hz")
     || !CFDictionaryContainsKey(v1, @"MeasuredHDMILatency_MeasuredVideoHDMILatency60Hz")))
  {
    CFRelease(v1);
    return 0;
  }
  return v1;
}

uint64_t HDMILatencyMgr_UpdateMeasuredHDMILatency(CFDictionaryRef theDict)
{
  if (!MXHDMILatencyManagerState) {
    return 4294954510;
  }
  if (!theDict
    || !CFDictionaryContainsKey(theDict, @"MeasuredHDMILatency_MeasuredAudioHDMILatency24Hz")
    || !CFDictionaryContainsKey(theDict, @"MeasuredHDMILatency_MeasuredAudioHDMILatency60Hz")
    || !CFDictionaryContainsKey(theDict, @"MeasuredHDMILatency_MeasuredVideoHDMILatency24Hz")
    || !CFDictionaryContainsKey(theDict, @"MeasuredHDMILatency_MeasuredVideoHDMILatency60Hz"))
  {
    return 4294954516;
  }
  CFRetain(theDict);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __HDMILatencyMgr_UpdateMeasuredHDMILatency_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  v3[4] = theDict;
  MXDispatchAsync((uint64_t)"HDMILatencyMgr_UpdateMeasuredHDMILatency", (uint64_t)"HDMILatencyManager.m", 248, 0, 0, MXHDMILatencyManagerState, (uint64_t)v3);
  return 0;
}

uint64_t updateMeasuredHDMILatencyOnCoreAnimationAndHAL()
{
  double HDMILatencyForCurrentRefreshRate = getHDMILatencyForCurrentRefreshRate(0, *(double *)&qword_1E9359F80);
  FigCFDictionarySetDouble();
  if (!DisplayModeRefreshRateObserver_UpdateHDMILatencyOnCoreAnimation()) {
    qword_1E9359F90 = *(void *)&HDMILatencyForCurrentRefreshRate;
  }
  double v1 = getHDMILatencyForCurrentRefreshRate(1, *(double *)&qword_1E9359F80);
  FigCFDictionarySetDouble();
  uint64_t result = vaemSetHDMILatencyOverride((v1 * 1000000.0));
  if (!result) {
    qword_1E9359F88 = *(void *)&v1;
  }
  return result;
}

uint64_t writeMeasuredHDMILatencyToDisk(const void *a1)
{
  if (dword_1E9359F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MXCFPreferencesSetAndSynchronizeUserPreference(@"measuredHDMILatency", a1);
  MXCFPreferencesSetAndSynchronizeUserPreference(@"measuredHDMILatencyForCurrentRefreshRate", (const void *)qword_1E9359F78);
  return notify_post("com.apple.mediaexperience.measuredhdmilatencychanged");
}

uint64_t HDMILatencyMgr_UpdateCurrentRefreshRate(double a1)
{
  if (!MXHDMILatencyManagerState) {
    return 4294954510;
  }
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __HDMILatencyMgr_UpdateCurrentRefreshRate_block_invoke;
  v2[3] = &__block_descriptor_40_e5_v8__0l;
  *(double *)&v2[4] = a1;
  MXDispatchAsync((uint64_t)"HDMILatencyMgr_UpdateCurrentRefreshRate", (uint64_t)"HDMILatencyManager.m", 268, 0, 0, MXHDMILatencyManagerState, (uint64_t)v2);
  return 0;
}

uint64_t HDMILatencyMgr_CopyMeasuredHDMILatency()
{
  uint64_t v3 = 0;
  CFArrayRef v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 0;
  if (MXHDMILatencyManagerState)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __HDMILatencyMgr_CopyMeasuredHDMILatency_block_invoke;
    v2[3] = &unk_1E57C5B30;
    v2[4] = &v3;
    MXDispatchSync((uint64_t)"HDMILatencyMgr_CopyMeasuredHDMILatency", (uint64_t)"HDMILatencyManager.m", 297, 0, 0, MXHDMILatencyManagerState, (uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  else
  {
    uint64_t v0 = 0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_194E20040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double getHDMILatencyForCurrentRefreshRate(int a1, double a2)
{
  unsigned int v3 = llround(a2);
  if (v3 - 24 > 6 || qword_1E9359F70 == 0)
  {
    double ValueDouble = 0.0;
    if (v3 - 50 > 0xA || qword_1E9359F70 == 0) {
      goto LABEL_17;
    }
    FigCFDictionarySetDouble();
    CFDictionaryRef v7 = (const __CFDictionary *)qword_1E9359F70;
    if (a1) {
      BOOL v8 = @"MeasuredHDMILatency_MeasuredAudioHDMILatency60Hz";
    }
    else {
      BOOL v8 = @"MeasuredHDMILatency_MeasuredVideoHDMILatency60Hz";
    }
  }
  else
  {
    FigCFDictionarySetDouble();
    CFDictionaryRef v7 = (const __CFDictionary *)qword_1E9359F70;
    if (a1) {
      BOOL v8 = @"MeasuredHDMILatency_MeasuredAudioHDMILatency24Hz";
    }
    else {
      BOOL v8 = @"MeasuredHDMILatency_MeasuredVideoHDMILatency24Hz";
    }
  }
  double ValueDouble = MXCFDictionaryGetValueDouble(v7, v8);
LABEL_17:
  if (dword_1E9359F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return ValueDouble;
}

uint64_t FigRoutingContextRemoteCreateAudioContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(4uLL, a2, 0, a3);
}

uint64_t FigRoutingContextRemoteCreateVideoContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  uint64_t v4 = routingContext_create(5uLL, a2, 0, a3);
  if (!v4)
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingContextRemoteCreateVideoContext_block_invoke;
    v6[3] = &__block_descriptor_40_e5_v8__0l;
    v6[4] = a3;
    MXDispatchSync((uint64_t)"FigRoutingContextRemoteCreateVideoContext", (uint64_t)"FigRoutingContextRemoteXPC.m", 2030, 0, 0, gFigRoutingContextRemoteObject_1, (uint64_t)v6);
  }
  return v4;
}

void __FigRoutingContextRemoteCreateVideoContext_block_invoke(uint64_t a1)
{
  key = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = **(void **)(a1 + 32);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, __CFString *, void, void **))(v5 + 48);
  if (v6)
  {
    v6(v3, @"contextUUID", *MEMORY[0x1E4F1CF80], &key);
    if (key)
    {
      CFDictionaryRef v7 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (v7)
      {
        BOOL v8 = v7;
        CFDictionarySetValue((CFMutableDictionaryRef)gFigRoutingContextRemoteObject_0, key, v7);
        CFRelease(v8);
      }
      CFNumberRef v9 = *(const void **)(DerivedStorage + 72);
      unsigned int v10 = key;
      *(void *)(DerivedStorage + 72) = key;
      if (v10) {
        CFRetain(v10);
      }
      if (v9) {
        CFRelease(v9);
      }
      if (key) {
        CFRelease(key);
      }
    }
  }
}

uint64_t FigRoutingContextRemoteCreatePerAppSecondDisplayContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(6uLL, a2, 0, a3);
}

uint64_t FigRoutingContextRemoteCopySystemRemoteDisplayContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(0xDuLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCopySystemMirroringContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(2uLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCopySidePlayContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(0xBuLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCreateRemoteMusicControllerContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(8uLL, a2, 0, a3);
}

uint64_t FigRoutingContextRemoteCopySystemRemotePoolContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(9uLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCopySystemAudioInputContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(0xCuLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCreateControlChannelOnlyContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(7uLL, a2, 0, a3);
}

uint64_t FigRoutingRemoteCopyDisplayMenuVideoContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(0xAuLL, a2, 1, a3);
}

uint64_t FigRoutingContextRemoteCopyAllAudioContexts(CFArrayRef *a1)
{
  if (!a1) {
    return 4294955276;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v9 = 0;
  CFArrayRef theArray = 0;
  uint64_t v8 = 0;
  uint64_t v4 = routingContextRemoteXPC_EnsureClientEstablished();
  if (v4
    || (uint64_t v4 = FigXPCCreateBasicMessage(), v4)
    || (uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v4))
  {
    uint64_t v5 = v4;
    if (!Mutable) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = FigXPCMessageCopyCFArray();
    CFArrayRef v6 = theArray;
    if (!v5)
    {
      uint64_t v5 = 0;
      *a1 = CFArrayCreateCopy(v2, Mutable);
      CFArrayRef v6 = theArray;
    }
    if (v6)
    {
      CFRelease(v6);
      CFArrayRef theArray = 0;
    }
    if (!Mutable) {
      goto LABEL_11;
    }
  }
  CFRelease(Mutable);
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

void remoteXPCRoutingContext_DeadConnectionCallback(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(const void **)(DerivedStorage + 72);
  *(unsigned char *)uint64_t DerivedStorage = 1;
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = 0;
  unsigned int v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  LODWORD(context) = -16722;
  uint64_t v5 = *(NSObject **)(v4 + 16);
  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = 3221225472;
  unsigned int v13 = __remoteXPCRoutingContext_runAllCallbacks_block_invoke;
  unsigned int v14 = &unk_1E57C58A0;
  uint64_t v15 = &v22;
  uint64_t v16 = (uint64_t *)v4;
  MXDispatchSync((uint64_t)"remoteXPCRoutingContext_runAllCallbacks", (uint64_t)"FigRoutingContextRemoteXPC.m", 243, 0, 0, v5, (uint64_t)&v11);
  CFDictionaryApplyFunction((CFDictionaryRef)v23[3], (CFDictionaryApplierFunction)remoteXPCRoutingContext_runOneCallback, &context);
  CFArrayRef v6 = (const void *)v23[3];
  if (v6) {
    CFRelease(v6);
  }
  _Block_object_dispose(&v22, 8);
  uint64_t v22 = 0;
  unsigned int v23 = &v22;
  uint64_t v24 = 0x2020000000;
  uint64_t v25 = 0;
  uint64_t context = 0;
  p_uint64_t context = &context;
  uint64_t v20 = 0x2020000000;
  uint64_t v21 = 0;
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(NSObject **)(v7 + 40);
  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = 3221225472;
  unsigned int v13 = __remoteXPCRoutingContext_notifyAboutAllCommChannelsClosures_block_invoke;
  unsigned int v14 = &unk_1E57C9240;
  uint64_t v16 = &context;
  uint64_t v17 = v7;
  uint64_t v15 = &v22;
  MXDispatchSync((uint64_t)"remoteXPCRoutingContext_notifyAboutAllCommChannelsClosures", (uint64_t)"FigRoutingContextRemoteXPC.m", 155, 0, 0, v8, (uint64_t)&v11);
  CFArrayRef v9 = (const __CFArray *)v23[3];
  v26.length = CFArrayGetCount(v9);
  v26.location = 0;
  CFArrayApplyFunction(v9, v26, (CFArrayApplierFunction)remoteXPCRoutingContext_notifyAboutCommChannelClosure, a1);
  CFDictionaryApplyFunction((CFDictionaryRef)p_context[3], (CFDictionaryApplierFunction)remoteXPCRoutingContext_notifyAboutCommChannelClosureWithDeviceID, a1);
  CFRelease((CFTypeRef)v23[3]);
  CFRelease((CFTypeRef)p_context[3]);
  _Block_object_dispose(&context, 8);
  _Block_object_dispose(&v22, 8);
  if (v3)
  {
    CFRetain(v3);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __remoteXPCRoutingContext_DeadConnectionCallback_block_invoke;
    v10[3] = &__block_descriptor_40_e5_v8__0l;
    v10[4] = v3;
    MXDispatchAsync((uint64_t)"remoteXPCRoutingContext_DeadConnectionCallback", (uint64_t)"FigRoutingContextRemoteXPC.m", 530, 0, 0, gFigRoutingContextRemoteObject_1, (uint64_t)v10);
  }
}

void sub_194E20A20(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t remoteXPCFigRoutingContext_NotificationFilter(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"didReceiveData"))
  {
    if (a4)
    {
      CFStringRef Value = CFDictionaryGetValue(a4, @"commChannelUUID");
      uint64_t v8 = CFDictionaryGetValue(a4, @"deviceID");
      if (Value) {
        BOOL v9 = v8 == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
        unsigned int v13 = *(NSObject **)(DerivedStorage + 40);
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        v20[2] = __remoteXPCFigRoutingContext_NotificationFilter_block_invoke;
        v20[3] = &__block_descriptor_56_e5_v8__0l;
        v20[4] = DerivedStorage;
        v20[5] = Value;
        v20[6] = v8;
        unsigned int v14 = v20;
        uint64_t v15 = 439;
LABEL_19:
        MXDispatchSync((uint64_t)"remoteXPCFigRoutingContext_NotificationFilter", (uint64_t)"FigRoutingContextRemoteXPC.m", v15, 0, 0, v13, (uint64_t)v14);
        return 0;
      }
      if (Value)
      {
        unsigned int v13 = *(NSObject **)(DerivedStorage + 40);
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 3221225472;
        v19[2] = __remoteXPCFigRoutingContext_NotificationFilter_block_invoke_2;
        v19[3] = &__block_descriptor_48_e5_v8__0l;
        v19[4] = DerivedStorage;
        v19[5] = Value;
        unsigned int v14 = v19;
        uint64_t v15 = 450;
        goto LABEL_19;
      }
    }
  }
  else
  {
    int v10 = CFEqual(a2, @"commChannelDidClose");
    if (a4 && v10)
    {
      uint64_t v11 = CFDictionaryGetValue(a4, @"commChannelUUID");
      if (CFDictionaryGetValue(a4, @"deviceID")) {
        BOOL v12 = v11 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12)
      {
        unsigned int v13 = *(NSObject **)(DerivedStorage + 40);
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 3221225472;
        v18[2] = __remoteXPCFigRoutingContext_NotificationFilter_block_invoke_3;
        v18[3] = &__block_descriptor_48_e5_v8__0l;
        v18[4] = DerivedStorage;
        v18[5] = v11;
        unsigned int v14 = v18;
        uint64_t v15 = 466;
        goto LABEL_19;
      }
      if (v11)
      {
        unsigned int v13 = *(NSObject **)(DerivedStorage + 40);
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        v17[2] = __remoteXPCFigRoutingContext_NotificationFilter_block_invoke_4;
        v17[3] = &__block_descriptor_48_e5_v8__0l;
        v17[4] = DerivedStorage;
        v17[5] = v11;
        unsigned int v14 = v17;
        uint64_t v15 = 473;
        goto LABEL_19;
      }
    }
  }
  return 0;
}

uint64_t remoteXPCFigRoutingContext_HandleClientMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

void sub_194E21000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __remoteXPCRoutingContext_runAllCallbacks_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDictionaryRef *)(*(void *)(a1 + 40) + 24));
  CFAllocatorRef v2 = *(__CFDictionary **)(*(void *)(a1 + 40) + 24);
  CFDictionaryRemoveAllValues(v2);
}

uint64_t remoteXPCRoutingContext_runOneCallback(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  if (!a2) {
    return result;
  }
  uint64_t v3 = *a2;
  if (*a2 <= 1919316835)
  {
    if (v3 != 1635021668)
    {
      if (v3 == 1668246893)
      {
LABEL_10:
        uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))a2[2];
        if (v5) {
          return v5(a2[1], a2[3], *a3, a2[4]);
        }
        return result;
      }
      uint64_t v4 = 1684108385;
LABEL_9:
      if (v3 != v4) {
        return result;
      }
      goto LABEL_10;
    }
  }
  else if (v3 > 1936024690)
  {
    if (v3 != 1936024691 && v3 != 1936026724) {
      return result;
    }
  }
  else if (v3 != 1919316836)
  {
    uint64_t v4 = 1935959652;
    goto LABEL_9;
  }
  uint64_t v8 = (uint64_t (*)(uint64_t, __CFString *))a2[2];
  if (v8)
  {
    if (*a3) {
      BOOL v9 = @"configUpdateReasonEndedFailed";
    }
    else {
      BOOL v9 = 0;
    }
    return v8(a2[3], v9);
  }
  return result;
}

void __remoteXPCRoutingContext_notifyAboutAllCommChannelsClosures_block_invoke(void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  *(void *)(*(void *)(a1[4] + 8) + 24) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFArrayRef *)(a1[6] + 56));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1[6] + 56));
  *(void *)(*(void *)(a1[5] + 8) + 24) = CFDictionaryCreateCopy(v2, *(CFDictionaryRef *)(a1[6] + 64));
  uint64_t v3 = *(__CFDictionary **)(a1[6] + 64);
  CFDictionaryRemoveAllValues(v3);
}

void remoteXPCRoutingContext_notifyAboutCommChannelClosure(void *a1, uint64_t a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"commChannelUUID";
  values = a1;
  CFDictionaryRef v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 48);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __remoteXPCRoutingContext_notifyAboutCommChannelClosure_block_invoke;
  v6[3] = &__block_descriptor_48_e5_v8__0l;
  v6[4] = a2;
  void v6[5] = v3;
  MXDispatchAsync((uint64_t)"remoteXPCRoutingContext_notifyAboutCommChannelClosure", (uint64_t)"FigRoutingContextRemoteXPC.m", 123, 0, 0, v5, (uint64_t)v6);
  CFRelease(v3);
}

void remoteXPCRoutingContext_notifyAboutCommChannelClosureWithDeviceID(void *a1, void *a2, uint64_t a3)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"deviceID";
  keys[1] = @"commChannelUUID";
  values[0] = a2;
  values[1] = a1;
  CFDictionaryRef v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v4) {
    CFRetain(v4);
  }
  CFArrayRef v6 = *(NSObject **)(DerivedStorage + 48);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __remoteXPCRoutingContext_notifyAboutCommChannelClosureWithDeviceID_block_invoke;
  v7[3] = &__block_descriptor_48_e5_v8__0l;
  v7[4] = a3;
  void v7[5] = v4;
  MXDispatchAsync((uint64_t)"remoteXPCRoutingContext_notifyAboutCommChannelClosureWithDeviceID", (uint64_t)"FigRoutingContextRemoteXPC.m", 142, 0, 0, v6, (uint64_t)v7);
  if (v4) {
    CFRelease(v4);
  }
}

void __remoteXPCRoutingContext_notifyAboutCommChannelClosure_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFAllocatorRef v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __remoteXPCRoutingContext_notifyAboutCommChannelClosureWithDeviceID_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFAllocatorRef v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __remoteXPCRoutingContext_handleCompletionCallback_block_invoke(uint64_t a1)
{
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 24), *(const void **)(a1 + 48));
  if (Value)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v4 = *Value;
    long long v5 = Value[1];
    *(void *)(v3 + 64) = *((void *)Value + 4);
    *(_OWORD *)(v3 + 32) = v4;
    *(_OWORD *)(v3 + 48) = v5;
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v7 = *(const void **)(v6 + 40);
    if (v7)
    {
      CFRetain(v7);
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    }
    uint64_t v8 = *(const void **)(v6 + 56);
    if (v8) {
      CFRetain(v8);
    }
  }
  BOOL v9 = *(const void **)(a1 + 48);
  int v10 = *(__CFDictionary **)(*(void *)(a1 + 40) + 24);
  CFDictionaryRemoveValue(v10, v9);
}

_OWORD *remoteXPCRoutingContext_cloneCompletionCallback(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v3 = CFAllocatorAllocate(a1, 40, 0);
  uint64_t v4 = *(void *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 16);
  _OWORD *v3 = *(_OWORD *)a2;
  v3[1] = v5;
  *((void *)v3 + 4) = v4;
  uint64_t v6 = (const void *)*((void *)v3 + 1);
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v7 = (const void *)*((void *)v3 + 3);
  if (v7) {
    CFRetain(v7);
  }
  return v3;
}

void remoteXPCRoutingContext_freeCompletionCallback(CFAllocatorRef allocator, void *ptr)
{
  uint64_t v4 = (const void *)ptr[1];
  if (v4) {
    CFRelease(v4);
  }
  long long v5 = (const void *)ptr[3];
  if (v5) {
    CFRelease(v5);
  }
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t routingContextRemoteXPC_SetProperty(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = remoteXPCRoutingContext_GetObjectID(a1, &v2);
  if (!result)
  {
    return FigXPCSendStdSetPropertyMessage();
  }
  return result;
}

uint64_t routingContextRemoteXPC_SelectRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v6);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      if (!a2)
      {
LABEL_6:
        FigXPCMessageSetCFDictionary();
        uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
        goto LABEL_7;
      }
      uint64_t ObjectID = FigEndpointXPCRemoteGetObjectID();
      if (!ObjectID)
      {
        xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_EndpointID, 0);
        goto LABEL_6;
      }
    }
  }
LABEL_7:
  uint64_t v4 = ObjectID;
  FigXPCRelease();
  return v4;
}

uint64_t routingContextRemoteXPC_SelectRouteDescriptor(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v4);
  if (ObjectID)
  {
    uint64_t v2 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (!v2)
    {
      FigXPCMessageSetCFDictionary();
      FigXPCMessageSetCFDictionary();
      uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v2;
}

uint64_t routingContextRemoteXPC_CopyRoute(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v4);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!ObjectID) {
        uint64_t ObjectID = FigEndpointXPCRemoteRetainCopiedEndpointFromReply();
      }
    }
  }
  uint64_t v2 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t routingContextRemoteXPC_CopySelectedRouteDescriptor(uint64_t a1, void *a2)
{
  uint64_t v6 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v6);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCMessageCopyCFDictionary();
    *a2 = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingContextRemoteXPC_SelectRoutes(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  uint64_t v17 = 0;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
        if (!ValueAtIndex) {
          break;
        }
        CFTypeID v10 = CFGetTypeID(ValueAtIndex);
        if (v10 != FigEndpointGetTypeID()) {
          break;
        }
        if (v7 == ++v8) {
          goto LABEL_7;
        }
      }
      uint64_t ObjectID = FigSignalErrorAt();
      goto LABEL_20;
    }
  }
LABEL_7:
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v17);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
LABEL_20:
    uint64_t v15 = ObjectID;
    goto LABEL_24;
  }
  routes_logEndpoints(theArray);
  if (theArray && CFArrayGetCount(theArray))
  {
    uint64_t value = 0;
    CFIndex v12 = CFArrayGetCount(theArray);
    xpc_object_t v13 = xpc_array_create(0, 0);
    if (v13 && v12 >= 1)
    {
      for (CFIndex i = 0; i != v12; ++i)
      {
        if (!CFArrayGetValueAtIndex(theArray, i)) {
          break;
        }
        if (FigEndpointXPCRemoteGetObjectID()) {
          break;
        }
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, value);
      }
    }
    if (v13) {
      xpc_dictionary_set_value(0, (const char *)kFigRoutingContextXPCMsgParam_EndpointIDList, v13);
    }
  }
  if (a3) {
    FigXPCMessageSetCFDictionary();
  }
  uint64_t v15 = FigXPCRemoteClientSendSyncMessage();
LABEL_24:
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

uint64_t routingContextRemoteXPC_SelectRouteDescriptors(uint64_t a1, const __CFArray *a2)
{
  uint64_t v6 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v6);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      if (a2 && CFArrayGetCount(a2)) {
        FigXPCMessageSetCFArray();
      }
      FigXPCMessageSetCFDictionary();
      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
    }
  }
  uint64_t v4 = ObjectID;
  FigXPCRelease();
  return v4;
}

uint64_t routingContextRemoteXPC_CopyRoutes(uint64_t a1, void *a2)
{
  xpc_object_t xdict = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v6);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    xpc_dictionary_get_value(xdict, (const char *)kFigRoutingContextXPCMsgParam_EndpointIDList);
    uint64_t v4 = FigEndpointXPCRemoteRetainCopiedEndpointsFromArrayToCFArray();
    if (!v4)
    {
      routes_logEndpoints(0);
      *a2 = 0;
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingContextRemoteXPC_CopySelectedRouteForRemoteControl(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v4);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!ObjectID) {
        uint64_t ObjectID = FigEndpointXPCRemoteRetainCopiedEndpointFromReply();
      }
    }
  }
  uint64_t v2 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t routingContextRemoteXPC_AddToSelectedRoutes(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (a2)
  {
    uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v5);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigEndpointXPCRemoteGetObjectID();
        if (!ObjectID)
        {
          xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_EndpointID, 0);
          FigXPCMessageSetCFDictionary();
          uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v3 = ObjectID;
  FigXPCRelease();
  return v3;
}

uint64_t routingContextRemoteXPC_AddToSelectedRouteDescriptors(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v5);
  if (ObjectID)
  {
LABEL_7:
    uint64_t v3 = ObjectID;
    goto LABEL_5;
  }
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (!v3)
  {
    FigXPCMessageSetCFDictionary();
    FigXPCMessageSetCFDictionary();
    uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_5:
  FigXPCRelease();
  return v3;
}

uint64_t routingContextRemoteXPC_RemoveFromSelectedRoutes(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (a2)
  {
    uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v5);
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigEndpointXPCRemoteGetObjectID();
        if (!ObjectID)
        {
          xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_EndpointID, 0);
          FigXPCMessageSetCFDictionary();
          uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v3 = ObjectID;
  FigXPCRelease();
  return v3;
}

uint64_t routingContextRemoteXPC_RemoveFromSelectedRouteDescriptors(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_7;
  }
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v5);
  if (ObjectID)
  {
LABEL_7:
    uint64_t v3 = ObjectID;
    goto LABEL_5;
  }
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (!v3)
  {
    FigXPCMessageSetCFDictionary();
    FigXPCMessageSetCFDictionary();
    uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_5:
  FigXPCRelease();
  return v3;
}

uint64_t routingContextRemoteXPC_CreateCommChannel(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v11);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (FigXPCMessageSetCFDictionary(), uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageCopyCFString(), ObjectID))
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = 0;
    *a3 = v10;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t routingContextRemoteXPC_SendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = 0;
  if (!a2 || !a3)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_12;
  }
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v13);
  if (ObjectID)
  {
LABEL_12:
    uint64_t v10 = ObjectID;
    goto LABEL_13;
  }
  uint64_t v10 = FigXPCCreateBasicMessage();
  if (v10)
  {
LABEL_13:
    FigXPCRelease();
    return v10;
  }
  FigXPCMessageSetCFString();
  FigXPCMessageSetCFData();
  if (a4)
  {
    uint64_t v11 = (uint64_t *)malloc_type_malloc(0x28uLL, 0x10E004005DA489DuLL);
    v11[2] = a4;
    v11[3] = a2;
    v11[4] = a5;
    *uint64_t v11 = 1684108385;
    v11[1] = a1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v10 = remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(a1, 0, v11);
  FigXPCRelease();
  if (v11) {
    free(v11);
  }
  return v10;
}

uint64_t routingContextRemoteXPC_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  v10[6] = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_8:
    uint64_t v7 = ObjectID;
    goto LABEL_6;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v11);
  if (ObjectID) {
    goto LABEL_8;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_8;
  }
  uint64_t v7 = FigXPCRemoteClientSendSyncMessage();
  if (!v7)
  {
    uint64_t v8 = *(NSObject **)(v5 + 40);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __routingContextRemoteXPC_CloseCommChannel_block_invoke;
    v10[3] = &__block_descriptor_48_e5_v8__0l;
    v10[4] = v5;
    void v10[5] = a2;
    MXDispatchSync((uint64_t)"routingContextRemoteXPC_CloseCommChannel", (uint64_t)"FigRoutingContextRemoteXPC.m", 836, 0, 0, v8, (uint64_t)v10);
  }
LABEL_6:
  FigXPCRelease();
  return v7;
}

uint64_t routingContextRemoteXPC_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  CFIndex v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  if (a2)
  {
    if (!remoteXPCRoutingContext_GetObjectID(a1, &v13) && !FigXPCCreateBasicMessage())
    {
      FigXPCMessageSetCFString();
      FigXPCMessageSetCFDictionary();
      if (a4)
      {
        long long v10 = a4;
        uint64_t v11 = a5;
        *(void *)&long long v9 = 1668246893;
        *((void *)&v9 + 1) = a1;
      }
      remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(a1, v12, (uint64_t *)&v9);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  FigXPCRelease();
  return 0;
}

uint64_t routingContextRemoteXPC_CreateCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (*(_DWORD *)(DerivedStorage + 80) != 9) {
    return 4294955271;
  }
  if (a2)
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v17);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (FigXPCMessageSetCFDictionary(),
          FigXPCMessageSetCFString(),
          uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(),
          ObjectID)
      || (uint64_t ObjectID = FigXPCMessageCopyCFString(), ObjectID))
    {
      uint64_t v12 = ObjectID;
    }
    else
    {
      uint64_t v10 = v18;
      if (v18)
      {
        uint64_t v11 = *(NSObject **)(v8 + 40);
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 3221225472;
        v16[2] = __routingContextRemoteXPC_CreateCommChannelForDeviceID_block_invoke;
        v16[3] = &__block_descriptor_56_e5_v8__0l;
        v16[4] = v8;
        v16[5] = v18;
        v16[6] = a2;
        MXDispatchSync((uint64_t)"routingContextRemoteXPC_CreateCommChannelForDeviceID", (uint64_t)"FigRoutingContextRemoteXPC.m", 705, 0, 0, v11, (uint64_t)v16);
        uint64_t v10 = v18;
      }
      uint64_t v12 = 0;
      *a4 = v10;
    }
    uint64_t v13 = v20;
    if (v20)
    {
      uint64_t v20 = 0;
      xpc_release(v13);
    }
  }
  else
  {
    uint64_t v12 = FigSignalErrorAt();
  }
  unsigned int v14 = v19;
  if (v19)
  {
    uint64_t v19 = 0;
    xpc_release(v14);
  }
  return v12;
}

uint64_t routingContextRemoteXPC_SendDataForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  xpc_object_t object = 0;
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 80) != 9)
  {
    a4 = 0;
    uint64_t v13 = 4294955271;
    goto LABEL_13;
  }
  if (!a3) {
    goto LABEL_14;
  }
  if (!a4)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_14:
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_15;
  }
  uint64_t v16 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v16);
  if (ObjectID)
  {
LABEL_15:
    uint64_t v13 = ObjectID;
    a4 = 0;
    goto LABEL_13;
  }
  uint64_t v13 = FigXPCCreateBasicMessage();
  xpc_object_t v14 = object;
  if (v13)
  {
    a4 = 0;
    if (!object) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  FigXPCMessageSetCFString();
  FigXPCMessageSetCFString();
  FigXPCMessageSetCFData();
  if (a5)
  {
    a4 = (uint64_t *)malloc_type_malloc(0x28uLL, 0x10E004005DA489DuLL);
    a4[2] = a5;
    a4[3] = a3;
    a4[4] = a6;
    *a4 = 1935959652;
    a4[1] = a1;
  }
  else
  {
    a4 = 0;
  }
  uint64_t v13 = remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(a1, object, a4);
  xpc_object_t v14 = object;
  if (object)
  {
LABEL_12:
    xpc_object_t object = 0;
    xpc_release(v14);
  }
LABEL_13:
  free(a4);
  return v13;
}

uint64_t routingContextRemoteXPC_CloseCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = 0;
  if (*(_DWORD *)(DerivedStorage + 80) != 9) {
    return 4294955271;
  }
  if (a3 && a2)
  {
    uint64_t v7 = DerivedStorage;
    uint64_t v14 = 0;
    uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v14);
    if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
    {
      uint64_t v9 = ObjectID;
    }
    else
    {
      FigXPCMessageSetCFString();
      FigXPCMessageSetCFString();
      uint64_t v9 = FigXPCRemoteClientSendSyncMessage();
      if (!v9)
      {
        uint64_t v10 = *(NSObject **)(v7 + 40);
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 3221225472;
        v13[2] = __routingContextRemoteXPC_CloseCommChannelForDeviceID_block_invoke;
        v13[3] = &__block_descriptor_48_e5_v8__0l;
        v13[4] = v7;
        void v13[5] = a3;
        MXDispatchSync((uint64_t)"routingContextRemoteXPC_CloseCommChannelForDeviceID", (uint64_t)"FigRoutingContextRemoteXPC.m", 874, 0, 0, v10, (uint64_t)v13);
      }
    }
    uint64_t v11 = v15;
    if (v15)
    {
      uint64_t v15 = 0;
      xpc_release(v11);
    }
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t routingContextRemoteXPC_ResetPredictedSelectedRouteDescriptor(uint64_t a1)
{
  memset(v5, 0, sizeof(v5));
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t routingContextRemoteXPC_CopySelectedBufferedEndpointForTesting(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, v4);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      FigXPCMessageSetCFString();
      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!ObjectID) {
        uint64_t ObjectID = FigEndpointXPCRemoteRetainCopiedEndpointFromReply();
      }
    }
  }
  uint64_t v2 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t routingContextRemoteXPC_AddToSelectedRouteDescriptorsWithCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v12);
  if (ObjectID)
  {
    uint64_t v9 = ObjectID;
    goto LABEL_10;
  }
  uint64_t v9 = FigXPCCreateBasicMessage();
  if (v9)
  {
LABEL_10:
    FigXPCRelease();
    return v9;
  }
  FigXPCMessageSetCFDictionary();
  FigXPCMessageSetCFDictionary();
  if (a4)
  {
    uint64_t v10 = (uint64_t *)malloc_type_malloc(0x28uLL, 0x10E004005DA489DuLL);
    v10[1] = a1;
    v10[2] = a4;
    v10[4] = a5;
    *uint64_t v10 = 1635021668;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v9 = remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(a1, 0, v10);
  FigXPCRelease();
  if (v10) {
    free(v10);
  }
  return v9;
}

uint64_t routingContextRemoteXPC_RemoveFromSelectedRouteDescriptorsWithCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v12);
  if (ObjectID)
  {
    uint64_t v9 = ObjectID;
    goto LABEL_10;
  }
  uint64_t v9 = FigXPCCreateBasicMessage();
  if (v9)
  {
LABEL_10:
    FigXPCRelease();
    return v9;
  }
  FigXPCMessageSetCFDictionary();
  FigXPCMessageSetCFDictionary();
  if (a4)
  {
    uint64_t v10 = (uint64_t *)malloc_type_malloc(0x28uLL, 0x10E004005DA489DuLL);
    v10[1] = a1;
    v10[2] = a4;
    v10[4] = a5;
    *uint64_t v10 = 1919316836;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v9 = remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(a1, 0, v10);
  FigXPCRelease();
  if (v10) {
    free(v10);
  }
  return v9;
}

uint64_t routingContextRemoteXPC_SelectRouteDescriptorWithCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v12);
  if (ObjectID)
  {
    uint64_t v9 = ObjectID;
    goto LABEL_10;
  }
  uint64_t v9 = FigXPCCreateBasicMessage();
  if (v9)
  {
LABEL_10:
    FigXPCRelease();
    return v9;
  }
  FigXPCMessageSetCFDictionary();
  FigXPCMessageSetCFDictionary();
  if (a4)
  {
    uint64_t v10 = (uint64_t *)malloc_type_malloc(0x28uLL, 0x10E004005DA489DuLL);
    v10[1] = a1;
    v10[2] = a4;
    v10[4] = a5;
    *uint64_t v10 = 1936026724;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v9 = remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(a1, 0, v10);
  FigXPCRelease();
  if (v10) {
    free(v10);
  }
  return v9;
}

uint64_t routingContextRemoteXPC_SelectRouteDescriptorsWithCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = 0;
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, &v12);
  if (ObjectID)
  {
    uint64_t v9 = ObjectID;
    goto LABEL_10;
  }
  uint64_t v9 = FigXPCCreateBasicMessage();
  if (v9)
  {
LABEL_10:
    FigXPCRelease();
    return v9;
  }
  FigXPCMessageSetCFArray();
  FigXPCMessageSetCFDictionary();
  if (a4)
  {
    uint64_t v10 = (uint64_t *)malloc_type_malloc(0x28uLL, 0x10E004005DA489DuLL);
    v10[1] = a1;
    v10[2] = a4;
    v10[4] = a5;
    *uint64_t v10 = 1936024691;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v9 = remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(a1, 0, v10);
  FigXPCRelease();
  if (v10) {
    free(v10);
  }
  return v9;
}

void routes_logEndpoints(const __CFArray *a1)
{
  CFTypeRef cf = 0;
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      CFIndex v4 = 0;
      uint64_t v5 = *MEMORY[0x1E4F20F28];
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      do
      {
        CFArrayGetValueAtIndex(a1, v4);
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v9 + 48);
        if (!v10 || v10(CMBaseObject, v5, v6, &cf)) {
          break;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        ++v4;
      }
      while (v3 != v4);
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

uint64_t remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = DerivedStorage;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  uint64_t v26 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  char v22 = 0;
  if (a3)
  {
    uint64_t v8 = *(NSObject **)(DerivedStorage + 16);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke;
    v18[3] = &unk_1E57C6180;
    v18[4] = &v23;
    v18[5] = a1;
    void v18[6] = DerivedStorage;
    v18[7] = a3;
    MXDispatchSync((uint64_t)"remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback", (uint64_t)"FigRoutingContextRemoteXPC.m", 382, 0, 0, v8, (uint64_t)v18);
    xpc_dictionary_set_uint64(a2, (const char *)kFigRoutingContextXPCMsgParam_CompletionID, v24[3]);
  }
  uint64_t v9 = FigXPCRemoteClientSendSyncMessage();
  uint64_t v10 = v9;
  if (a3)
  {
    if (v9)
    {
      uint64_t v11 = *(NSObject **)(v7 + 16);
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = __remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke_2;
      v17[3] = &unk_1E57C6158;
      void v17[6] = v7;
      v17[7] = a3;
      v17[4] = &v23;
      v17[5] = &v19;
      MXDispatchSync((uint64_t)"remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback", (uint64_t)"FigRoutingContextRemoteXPC.m", 398, 0, 0, v11, (uint64_t)v17);
      if (*((unsigned char *)v20 + 24))
      {
        int v16 = v10;
        remoteXPCRoutingContext_runOneCallback(v12, a3, &v16);
        uint64_t v13 = (const void *)a3[1];
        if (v13) {
          CFRelease(v13);
        }
        uint64_t v14 = (const void *)a3[3];
        if (v14) {
          CFRelease(v14);
        }
      }
    }
  }
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  return v10;
}

void sub_194E234E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 32);
  uint64_t v4 = 1;
  if ((unint64_t)(v3 + 1) > 1) {
    uint64_t v4 = v3 + 1;
  }
  *(void *)(DerivedStorage + 32) = v4;
  *(void *)(*(void *)(a1[4] + 8) + 24) = v3;
  uint64_t v5 = (const void *)a1[7];
  uint64_t v6 = *(__CFDictionary **)(a1[6] + 24);
  uint64_t v7 = *(const void **)(*(void *)(a1[4] + 8) + 24);
  CFDictionarySetValue(v6, v7, v5);
}

void __remoteXPCFigRoutingContext_sendMessageSynchronouslyExpectingCompletionCallback_block_invoke_2(void *a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1[6] + 24);
  if (v2)
  {
    if (CFDictionaryGetValueIfPresent(v2, *(const void **)(*(void *)(a1[4] + 8) + 24), 0))
    {
      uint64_t v3 = a1[7];
      uint64_t v4 = *(const void **)(v3 + 8);
      if (v4)
      {
        CFRetain(v4);
        uint64_t v3 = a1[7];
      }
      uint64_t v5 = *(const void **)(v3 + 24);
      if (v5) {
        CFRetain(v5);
      }
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    }
    uint64_t v6 = *(__CFDictionary **)(a1[6] + 24);
    uint64_t v7 = *(const void **)(*(void *)(a1[4] + 8) + 24);
    CFDictionaryRemoveValue(v6, v7);
  }
}

uint64_t FigRoutingContextResilientRemoteCreateAudioContext(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  uint64_t v6 = routingContextResilientRemote_copyCreationOptionsEnsuringContextID(a1);
  if (a1) {
    CFRetain(a1);
  }
  if (v6) {
    CFRetain(v6);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingContextResilientRemoteCreateAudioContext_block_invoke;
  v10[3] = &unk_1E57CA080;
  v10[4] = Current;
  void v10[5] = a1;
  v10[6] = v6;
  v9[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v9[1] = (void (*)(void))3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCreateAudioContext_block_invoke_2;
  v9[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v9[4] = (void (*)(void))a1;
  v9[5] = (void (*)(void))v6;
  uint64_t v7 = FigRoutingContextResilientRemoteCreate(v10, v9, a3);
  if (v6) {
    CFRelease(v6);
  }
  return v7;
}

__CFDictionary *routingContextResilientRemote_copyCreationOptionsEnsuringContextID(const __CFAllocator *a1)
{
  MutableCFArrayRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!CFDictionaryContainsKey(MutableCopy, @"contextUUID"))
  {
    CFUUIDRef v3 = CFUUIDCreate(a1);
    CFStringRef v4 = CFUUIDCreateString(a1, v3);
    CFDictionarySetValue(MutableCopy, @"contextUUID", v4);
    if (v3) {
      CFRelease(v3);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
  return MutableCopy;
}

uint64_t __FigRoutingContextResilientRemoteCreateAudioContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) createAudioContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCreateAudioContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCopyAllAudioContexts(uint64_t a1)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  return [(FigRemoteRoutingContextFactory *)Current copyAllAudioContexts:a1];
}

uint64_t FigRoutingContextResilientRemoteCreateVideoContext(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  uint64_t v6 = routingContextResilientRemote_copyCreationOptionsEnsuringContextID(a1);
  if (a1) {
    CFRetain(a1);
  }
  if (v6) {
    CFRetain(v6);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingContextResilientRemoteCreateVideoContext_block_invoke;
  v10[3] = &unk_1E57CA080;
  v10[4] = Current;
  void v10[5] = a1;
  v10[6] = v6;
  v9[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v9[1] = (void (*)(void))3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCreateVideoContext_block_invoke_2;
  v9[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v9[4] = (void (*)(void))a1;
  v9[5] = (void (*)(void))v6;
  uint64_t v7 = FigRoutingContextResilientRemoteCreate(v10, v9, a3);
  if (v6) {
    CFRelease(v6);
  }
  return v7;
}

uint64_t __FigRoutingContextResilientRemoteCreateVideoContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) createVideoContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCreateVideoContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCreatePerAppSecondDisplayContext(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  uint64_t v6 = routingContextResilientRemote_copyCreationOptionsEnsuringContextID(a1);
  if (a1) {
    CFRetain(a1);
  }
  if (v6) {
    CFRetain(v6);
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingContextResilientRemoteCreatePerAppSecondDisplayContext_block_invoke;
  v10[3] = &unk_1E57CA080;
  v10[4] = Current;
  void v10[5] = a1;
  v10[6] = v6;
  v9[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v9[1] = (void (*)(void))3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCreatePerAppSecondDisplayContext_block_invoke_2;
  v9[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v9[4] = (void (*)(void))a1;
  v9[5] = (void (*)(void))v6;
  uint64_t v7 = FigRoutingContextResilientRemoteCreate(v10, v9, a3);
  if (v6) {
    CFRelease(v6);
  }
  return v7;
}

uint64_t __FigRoutingContextResilientRemoteCreatePerAppSecondDisplayContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) createPerAppSecondDisplayContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCreatePerAppSecondDisplayContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCopySystemAudioContext(const void *a1, const void *a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySystemAudioContext_block_invoke;
  v9[3] = &unk_1E57CA080;
  v9[4] = Current;
  v9[5] = a1;
  void v9[6] = a2;
  v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v8[1] = (void (*)(void))3221225472;
  _OWORD v8[2] = __FigRoutingContextResilientRemoteCopySystemAudioContext_block_invoke_2;
  v8[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(void))a1;
  v8[5] = (void (*)(void))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t __FigRoutingContextResilientRemoteCopySystemAudioContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) copySystemAudioContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCopySystemAudioContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCopySystemRemoteDisplay(const void *a1, const void *a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySystemRemoteDisplay_block_invoke;
  v9[3] = &unk_1E57CA080;
  v9[4] = Current;
  v9[5] = a1;
  void v9[6] = a2;
  v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v8[1] = (void (*)(void))3221225472;
  _OWORD v8[2] = __FigRoutingContextResilientRemoteCopySystemRemoteDisplay_block_invoke_2;
  v8[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(void))a1;
  v8[5] = (void (*)(void))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t __FigRoutingContextResilientRemoteCopySystemRemoteDisplay_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) copySystemRemoteDisplayContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCopySystemRemoteDisplay_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCopySystemMirroringContext(const void *a1, const void *a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySystemMirroringContext_block_invoke;
  v9[3] = &unk_1E57CA080;
  v9[4] = Current;
  v9[5] = a1;
  void v9[6] = a2;
  v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v8[1] = (void (*)(void))3221225472;
  _OWORD v8[2] = __FigRoutingContextResilientRemoteCopySystemMirroringContext_block_invoke_2;
  v8[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(void))a1;
  v8[5] = (void (*)(void))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t __FigRoutingContextResilientRemoteCopySystemMirroringContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) copySystemMirroringContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCopySystemMirroringContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void __FigRoutingContextResilientRemoteCopySystemMusicContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCopySidePlayContext(const void *a1, const void *a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySidePlayContext_block_invoke;
  v9[3] = &unk_1E57CA080;
  v9[4] = Current;
  v9[5] = a1;
  void v9[6] = a2;
  v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v8[1] = (void (*)(void))3221225472;
  _OWORD v8[2] = __FigRoutingContextResilientRemoteCopySidePlayContext_block_invoke_2;
  v8[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(void))a1;
  v8[5] = (void (*)(void))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t __FigRoutingContextResilientRemoteCopySidePlayContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) copySidePlayContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCopySidePlayContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCreateRemoteMusicControllerContext(const void *a1, const void *a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCreateRemoteMusicControllerContext_block_invoke;
  v9[3] = &unk_1E57CA080;
  v9[4] = Current;
  v9[5] = a1;
  void v9[6] = a2;
  v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v8[1] = (void (*)(void))3221225472;
  _OWORD v8[2] = __FigRoutingContextResilientRemoteCreateRemoteMusicControllerContext_block_invoke_2;
  v8[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(void))a1;
  v8[5] = (void (*)(void))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t __FigRoutingContextResilientRemoteCreateRemoteMusicControllerContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) createRemoteMusicControllerContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCreateRemoteMusicControllerContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCopySystemRemotePoolContext(const void *a1, const void *a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySystemRemotePoolContext_block_invoke;
  v9[3] = &unk_1E57CA080;
  v9[4] = Current;
  v9[5] = a1;
  void v9[6] = a2;
  v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v8[1] = (void (*)(void))3221225472;
  _OWORD v8[2] = __FigRoutingContextResilientRemoteCopySystemRemotePoolContext_block_invoke_2;
  v8[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(void))a1;
  v8[5] = (void (*)(void))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t __FigRoutingContextResilientRemoteCopySystemRemotePoolContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) copySystemRemotePoolContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCopySystemRemotePoolContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCreateControlChannelOnlyContext(const void *a1, const void *a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCreateControlChannelOnlyContext_block_invoke;
  v9[3] = &unk_1E57CA080;
  v9[4] = Current;
  v9[5] = a1;
  void v9[6] = a2;
  v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v8[1] = (void (*)(void))3221225472;
  _OWORD v8[2] = __FigRoutingContextResilientRemoteCreateControlChannelOnlyContext_block_invoke_2;
  v8[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(void))a1;
  v8[5] = (void (*)(void))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t __FigRoutingContextResilientRemoteCreateControlChannelOnlyContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) createControlChannelOnlyContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCreateControlChannelOnlyContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCopyDisplayMenuVideoContext(const void *a1, const void *a2, void *a3)
{
  CFAbsoluteTime Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopyDisplayMenuVideoContext_block_invoke;
  v9[3] = &unk_1E57CA080;
  v9[4] = Current;
  v9[5] = a1;
  void v9[6] = a2;
  v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v8[1] = (void (*)(void))3221225472;
  _OWORD v8[2] = __FigRoutingContextResilientRemoteCopyDisplayMenuVideoContext_block_invoke_2;
  v8[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  v8[4] = (void (*)(void))a1;
  v8[5] = (void (*)(void))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t __FigRoutingContextResilientRemoteCopyDisplayMenuVideoContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) copyDisplayMenuVideoContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

void __FigRoutingContextResilientRemoteCopyDisplayMenuVideoContext_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void __FigRoutingContextResilientRemoteCopyContextForUUID_block_invoke_2(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFUUIDRef v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigRoutingContextResilientRemoteCopyDefaultContext(uint64_t a1, uint64_t a2, void *a3)
{
  if (!_CFMZEnabled()) {
    goto LABEL_8;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __routingContextResilientRemote_copySharedAudioContext_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  if (routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextOnce != -1) {
    dispatch_once(&routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextOnce, block);
  }
  uint64_t v5 = routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextErr;
  if (routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextErr) {
    return v5;
  }
  if (!routingContextResilientRemote_copySharedAudioContext_sSharedAudioContext)
  {
LABEL_8:
    CFTypeRef v6 = 0;
    goto LABEL_9;
  }
  CFTypeRef v6 = CFRetain((CFTypeRef)routingContextResilientRemote_copySharedAudioContext_sSharedAudioContext);
  uint64_t v5 = routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextErr;
  if (!routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextErr)
  {
LABEL_9:
    if (!a3)
    {
      uint64_t v5 = FigSignalErrorAt();
      if (!v6) {
        return v5;
      }
      goto LABEL_15;
    }
    if (v6) {
      CFTypeRef v7 = CFRetain(v6);
    }
    else {
      CFTypeRef v7 = 0;
    }
    uint64_t v5 = 0;
    *a3 = v7;
  }
  if (v6) {
LABEL_15:
  }
    CFRelease(v6);
  return v5;
}

uint64_t routingContextResilientRemote_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_SetProperty_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

void routingContextResilientRemote_forwardNotificationFromRemoteContext(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef a4)
{
  CFTypeRef v5 = FigRoutingContextResilientRemoteCopyRemoteContext();
  CFTypeRef v6 = v5;
  if (v5 == a4)
  {
    CMNotificationCenterPostNotification();
    if (!v6) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  CFRelease(v6);
}

void routingContextResilientRemote_serverConnectionDied(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  if (a4) {
    CFRetain(a4);
  }
  CFTypeRef v7 = *(NSObject **)(DerivedStorage + 40);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __routingContextResilientRemote_serverConnectionDied_block_invoke;
  v8[3] = &__block_descriptor_56_e5_v8__0l;
  v8[4] = DerivedStorage;
  v8[5] = a2;
  v8[6] = a4;
  MXDispatchAsync((uint64_t)"routingContextResilientRemote_serverConnectionDied", (uint64_t)"FigRoutingContextResilientRemote.m", 146, 0, 0, v7, (uint64_t)v8);
}

void __routingContextResilientRemote_serverConnectionDied_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  int v3 = *(_DWORD *)(v2 + 48);
  if (v3 <= 4)
  {
    *(_DWORD *)(v2 + 48) = v3 + 1;
    if (!routingContextResilientRemote_replaceRemoteContext()) {
      *(_DWORD *)(a1[4] + 48) = 0;
    }
  }
  CFStringRef v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t routingContextResilientRemote_replaceRemoteContext()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)DerivedStorage + 16))();
  if (!result)
  {
    CMBaseObjectGetDerivedStorage();
    return FigSignalErrorAt();
  }
  return result;
}

void __routingContextResilientRemote_compareAndSwapRemoteContext_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 24; i += 8)
    CMNotificationCenterPostNotification();
  CFDictionarySetValue(Mutable, @"routeConfigUpdateReason", @"configUpdateReasonEndedFailed");
  CMNotificationCenterPostNotification();
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFStringRef v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t routingContextResilientRemote_SelectRoute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_SelectRoute_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_SelectRouteDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_SelectRouteDescriptor_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_CopyRoute(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __routingContextResilientRemote_CopyRoute_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextResilientRemote_CopySelectedRouteDescriptor(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __routingContextResilientRemote_CopySelectedRouteDescriptor_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextResilientRemote_SelectRoutes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_SelectRoutes_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_SelectRouteDescriptors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_SelectRouteDescriptors_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_CopyRoutes(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __routingContextResilientRemote_CopyRoutes_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextResilientRemote_CopySelectedRouteForRemoteControl(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __routingContextResilientRemote_CopySelectedRouteForRemoteControl_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextResilientRemote_AddToSelectedRoutes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_AddToSelectedRoutes_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_AddToSelectedRouteDescriptors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_AddToSelectedRouteDescriptors_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_RemoveFromSelectedRoutes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_RemoveFromSelectedRoutes_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_RemoveFromSelectedRouteDescriptors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_RemoveFromSelectedRouteDescriptors_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_CreateCommChannel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_CreateCommChannel_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_SendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v9 = FigRoutingContextResilientRemoteCopyRemoteContext();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 120);
  if (v12)
  {
    uint64_t v13 = v12(v9, a2, a3, a4, a5);
    if (!v9) {
      return v13;
    }
    goto LABEL_8;
  }
  uint64_t v13 = 4294954514;
  if (v9) {
LABEL_8:
  }
    CFRelease(v9);
  return v13;
}

uint64_t routingContextResilientRemote_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __routingContextResilientRemote_CloseCommChannel_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextResilientRemote_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __routingContextResilientRemote_SendCommand_block_invoke;
  v6[3] = &__block_descriptor_64_e34_i16__0__OpaqueFigRoutingContext__8l;
  v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  v6[7] = a5;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v6);
}

uint64_t routingContextResilientRemote_CopySelectedBufferedEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_CopySelectedBufferedEndpoint_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_CreateCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __routingContextResilientRemote_CreateCommChannelForDeviceID_block_invoke;
  void v5[3] = &__block_descriptor_56_e34_i16__0__OpaqueFigRoutingContext__8l;
  v5[4] = a2;
  v5[5] = a3;
  void v5[6] = a4;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v5);
}

uint64_t routingContextResilientRemote_SendDataForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef v11 = FigRoutingContextResilientRemoteCopyRemoteContext();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 160);
  if (v14)
  {
    uint64_t v15 = v14(v11, a2, a3, a4, a5, a6);
    if (!v11) {
      return v15;
    }
    goto LABEL_8;
  }
  uint64_t v15 = 4294954514;
  if (v11) {
LABEL_8:
  }
    CFRelease(v11);
  return v15;
}

uint64_t routingContextResilientRemote_CloseCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_CloseCommChannelForDeviceID_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_ResetPredictedSelectedRouteDescriptor(uint64_t a1)
{
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)&__block_literal_global_45);
}

uint64_t routingContextResilientRemote_CopySelectedBufferedEndpointForTesting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __routingContextResilientRemote_CopySelectedBufferedEndpointForTesting_block_invoke;
  void v4[3] = &__block_descriptor_48_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v4[4] = a2;
  v4[5] = a3;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v4);
}

uint64_t routingContextResilientRemote_AddToSelectedRouteDescriptorsWithCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __routingContextResilientRemote_AddToSelectedRouteDescriptorsWithCompletionCallback_block_invoke;
  v6[3] = &__block_descriptor_64_e34_i16__0__OpaqueFigRoutingContext__8l;
  v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  v6[7] = a5;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v6);
}

uint64_t routingContextResilientRemote_RemoveFromSelectedRouteDescriptorsWithCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __routingContextResilientRemote_RemoveFromSelectedRouteDescriptorsWithCompletionCallback_block_invoke;
  v6[3] = &__block_descriptor_64_e34_i16__0__OpaqueFigRoutingContext__8l;
  v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  v6[7] = a5;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v6);
}

uint64_t routingContextResilientRemote_SelectRouteDescriptorWithCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __routingContextResilientRemote_SelectRouteDescriptorWithCompletionCallback_block_invoke;
  v6[3] = &__block_descriptor_64_e34_i16__0__OpaqueFigRoutingContext__8l;
  v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  v6[7] = a5;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v6);
}

uint64_t routingContextResilientRemote_SelectRouteDescriptorsWithCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __routingContextResilientRemote_SelectRouteDescriptorsWithCompletionCallback_block_invoke;
  v6[3] = &__block_descriptor_64_e34_i16__0__OpaqueFigRoutingContext__8l;
  v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  v6[7] = a5;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v6);
}

void __routingContextResilientRemote_copySharedAudioContext_block_invoke(uint64_t a1)
{
  routingContextResilientRemote_copySharedAudioContext_sSharedAudioContextErr = FigRoutingContextResilientRemoteCreateAudioContext(*(const __CFAllocator **)(a1 + 32), 0, &routingContextResilientRemote_copySharedAudioContext_sSharedAudioContext);
  uint64_t v1 = routingContextResilientRemote_copySharedAudioContext_sSharedAudioContext;
  if (routingContextResilientRemote_copySharedAudioContext_sSharedAudioContext)
  {
    CFTypeRef cf = 0;
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    CFStringRef v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
    if (v4)
    {
      v4(v1, @"contextUUID", *MEMORY[0x1E4F1CF80], &cf);
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

uint64_t cmsmDoesPortMatchCurrentEndpointID(AudioObjectID a1)
{
  CFTypeRef v11 = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(qword_1E9359C88, 0, (uint64_t)&v11);
  CFTypeRef v10 = 0;
  if (v11)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    CFTypeRef v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
    if (v5) {
      v5(CMBaseObject, *MEMORY[0x1E4F20E38], *MEMORY[0x1E4F1CF80], &v10);
    }
  }
  CFStringRef v6 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(a1);
  CFTypeRef cf = 0;
  CMSMUtility_CreateTokensFromDeviceUID(v6, (CFStringRef *)&cf, 0);
  uint64_t v7 = FigCFEqual();
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v11)
  {
    CFRelease(v11);
    CFTypeRef v11 = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
  return v7;
}

id cmsmCopyQuiesceableWiredPortsForRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled()) {
    return 0;
  }
  int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a1);
  int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
  CFTypeRef v8 = vaemCopyConnectedPortsListForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, 0);
  if (!v8) {
    return 0;
  }
  CFTypeRef v9 = (void *)v8;
  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v11 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v18 != v13) {
          objc_enumerationMutation(v9);
        }
        uint64_t v15 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        if (vaeIsQuiesceableWiredPort([v15 unsignedIntValue])) {
          [v10 addObject:v15];
        }
      }
      uint64_t v12 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v12);
  }
  if (![v10 count])
  {

    id v10 = 0;
  }

  return v10;
}

void *cmsmCopyPickableQuiesceableWiredPortsForRouteConfiguration()
{
  if (!MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled()) {
    return 0;
  }
  uint64_t v0 = (void *)vaemCopyPickableQuiesceableWiredPortsList(0);
  if (![v0 count])
  {

    return 0;
  }
  return v0;
}

uint64_t cmsmCreateRouteDescriptionForFigAirPlayEndpoints(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  uint64_t result = 4294954315;
  if (!a1 || !a3) {
    return result;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954314;
  }
  CFTypeRef v8 = Mutable;
  CFTypeRef v71 = 0;
  uint64_t value = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v11 + 48);
  uint64_t v13 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!v12 || (v12(CMBaseObject, *MEMORY[0x1E4F20E38], v6, &v71), !v71))
  {
    CFStringRef Copy = 0;
    goto LABEL_13;
  }
  CFStringRef v14 = CFStringCreateWithFormat(v6, 0, @"%@-%@", v71, 0x1EE5EFD88);
  CFStringRef v15 = CFStringCreateWithFormat(v6, 0, @"%@-%@", v71, 0x1EE5EFDA8);
  if (FigCFEqual())
  {
    CFStringRef Copy = CFStringCreateCopy(v6, v14);
    CFDictionarySetValue(v8, @"RouteUID", v14);
    long long v17 = @"MirroringMode_None";
    long long v18 = kMXSession_RouteDescriptionKey_MirroringMode;
    goto LABEL_106;
  }
  if (FigCFEqual())
  {
    CFStringRef Copy = CFStringCreateCopy(v6, v15);
    CFDictionarySetValue(v8, @"RouteUID", v15);
    long long v62 = @"MirroringMode_Default";
    long long v63 = v8;
LABEL_105:
    CFDictionarySetValue(v63, @"MirroringMode", v62);
    long long v17 = *v13;
    CFDictionarySetValue(v8, @"RouteSupportsAirPlayScreen", *v13);
    CFDictionarySetValue(v8, @"RouteSupportsAirPlaySlideshow", v17);
    long long v18 = kMXSession_RouteDescriptionKey_RouteSupportsAirPlayPhoto;
LABEL_106:
    CFDictionarySetValue(v8, *v18, v17);
    if (!v14) {
      goto LABEL_108;
    }
    goto LABEL_107;
  }
  if (FigCFEqual())
  {
    CFStringRef Copy = CFStringCreateCopy(v6, v15);
    CFDictionarySetValue(v8, @"RouteUID", v15);
    long long v63 = v8;
    long long v62 = @"MirroringMode_SecondScreen";
    goto LABEL_105;
  }
  CFStringRef Copy = 0;
  if (v14) {
LABEL_107:
  }
    CFRelease(v14);
LABEL_108:
  if (v15) {
    CFRelease(v15);
  }
LABEL_13:
  uint64_t v19 = FigEndpointGetCMBaseObject();
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(void (**)(uint64_t, void, const __CFAllocator *, void **))(v21 + 48);
  if (v22) {
    v22(v19, *MEMORY[0x1E4F20F28], v6, &value);
  }
  if (value) {
    CFDictionarySetValue(v8, @"RouteName", value);
  }
  CFDictionarySetValue(v8, @"AVAudioRouteName", @"AirTunes");
  uint64_t v23 = *v13;
  CFDictionarySetValue(v8, @"RouteSupportsAudio", *v13);
  uint64_t v24 = (void *)*MEMORY[0x1E4F1CFC8];
  CFDictionarySetValue(v8, @"IsBTRoute", (const void *)*MEMORY[0x1E4F1CFC8]);
  CFDictionarySetValue(v8, @"RouteSupportsAirPlayAudio", v23);
  CFDictionarySetValue(v8, @"IsPreferredExternalRoute", v24);
  CFDictionarySetValue(v8, @"PreferredExternalRouteDetails_IsActive", v24);
  CFDictionarySetValue(v8, @"PreferredExternalRouteDetails_InEarDetectSupported", v24);
  CFTypeRef cf = 0;
  uint64_t v25 = FigEndpointGetCMBaseObject();
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  CFArrayRef v28 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v27 + 48);
  if (v28) {
    v28(v25, *MEMORY[0x1E4F20D08], v6, &cf);
  }
  if (FigCFEqual())
  {
    CFDictionarySetValue(v8, @"PortHasPassword", v23);
  }
  else
  {
    int v31 = FigCFEqual();
    CFDictionarySetValue(v8, @"PortHasPassword", v24);
    if (v31)
    {
      id v29 = v8;
      CFArrayRef v30 = v23;
      goto LABEL_30;
    }
  }
  id v29 = v8;
  CFArrayRef v30 = v24;
LABEL_30:
  CFDictionarySetValue(v29, @"RouteRequiresAirPlayPIN", v30);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if ((FigEndpointGetSupportedFeatures() & 4) != 0) {
    int v32 = v23;
  }
  else {
    int v32 = v24;
  }
  CFDictionarySetValue(v8, @"RouteSupportsAirPlayVideo", v32);
  CFRange v69 = v24;
  uint64_t v33 = FigEndpointGetCMBaseObject();
  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = *(void (**)(uint64_t, void, const __CFAllocator *, void **))(v35 + 48);
  if (v36) {
    v36(v33, *MEMORY[0x1E4F20CA8], v6, &v69);
  }
  if (v69) {
    CFDictionarySetValue(v8, @"AirPlayRouteHasCloudConnectivity", v69);
  }
  BOOL IsEndpointSelfOnlyLocalAirPlay = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay(a1);
  int v38 = kMXSessionPickableRouteType_Default;
  if (!IsEndpointSelfOnlyLocalAirPlay) {
    int v38 = kMXSessionPickableRouteType_Wireless;
  }
  CFDictionarySetValue(v8, @"RouteType", *v38);
  int v39 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v39)
  {
    uint64_t v40 = v39;
    if (value) {
      CFDictionarySetValue(v39, @"name", value);
    }
    if (Copy) {
      CFDictionarySetValue(v40, @"uid", Copy);
    }
    if (v71) {
      CFDictionarySetValue(v40, @"deviceID", v71);
    }
    CFTypeRef v68 = 0;
    uint64_t v41 = FigEndpointGetCMBaseObject();
    uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v42) {
      uint64_t v43 = v42;
    }
    else {
      uint64_t v43 = 0;
    }
    unsigned int v44 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v43 + 48);
    if (v44) {
      v44(v41, *MEMORY[0x1E4F20F18], v6, &v68);
    }
    if (v68)
    {
      CFDictionarySetValue(v40, @"model", v68);
      if (v68)
      {
        CFRelease(v68);
        CFTypeRef v68 = 0;
      }
    }
    CFTypeRef v67 = 0;
    uint64_t v45 = FigEndpointGetCMBaseObject();
    uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v46) {
      uint64_t v47 = v46;
    }
    else {
      uint64_t v47 = 0;
    }
    int v48 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v47 + 48);
    if (v48) {
      v48(v45, *MEMORY[0x1E4F21018], v6, &v67);
    }
    if (v67)
    {
      CFDictionarySetValue(v40, @"systemFlags", v67);
      if (v67)
      {
        CFRelease(v67);
        CFTypeRef v67 = 0;
      }
    }
    CFTypeRef v66 = 0;
    uint64_t v49 = FigEndpointGetCMBaseObject();
    uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v50) {
      uint64_t v51 = v50;
    }
    else {
      uint64_t v51 = 0;
    }
    uint64_t v52 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v51 + 48);
    if (v52) {
      v52(v49, *MEMORY[0x1E4F20CD0], v6, &v66);
    }
    if (v66)
    {
      CFDictionarySetValue(v40, @"AirPlayVodkaVersion", v66);
      if (v66)
      {
        CFRelease(v66);
        CFTypeRef v66 = 0;
      }
    }
    CFTypeRef v65 = 0;
    uint64_t v53 = FigEndpointGetCMBaseObject();
    uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v54) {
      uint64_t v55 = v54;
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v56 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v55 + 48);
    if (v56) {
      v56(v53, *MEMORY[0x1E4F21040], v6, &v65);
    }
    if (FigCFEqual())
    {
      LOBYTE(valuePtr) = 2;
      CFNumberRef v57 = CFNumberCreate(v6, kCFNumberSInt8Type, &valuePtr);
      CFDictionarySetValue(v40, @"transportType", v57);
      if (v57) {
        CFRelease(v57);
      }
    }
    if (v65)
    {
      CFRelease(v65);
      CFTypeRef v65 = 0;
    }
    AudioObjectPropertyAddress valuePtr = 0;
    uint64_t v58 = FigEndpointGetCMBaseObject();
    uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v59) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0;
    }
    long long v61 = *(void (**)(uint64_t, void, const __CFAllocator *, const void **))(v60 + 48);
    if (v61)
    {
      v61(v58, *MEMORY[0x1E4F20EF0], v6, &valuePtr);
      if (valuePtr)
      {
        CFDictionarySetValue(v40, @"MACAddress", valuePtr);
        if (valuePtr)
        {
          CFRelease(valuePtr);
          AudioObjectPropertyAddress valuePtr = 0;
        }
      }
    }
    CFDictionarySetValue(v8, @"AirPlayPortExtendedInfo", v40);
    CFRelease(v40);
  }
  *a3 = v8;
  if (v71)
  {
    CFRelease(v71);
    CFTypeRef v71 = 0;
  }
  if (value)
  {
    CFRelease(value);
    uint64_t value = 0;
  }
  if (Copy) {
    CFRelease(Copy);
  }
  return 0;
}

void cmsmAddBTDetailsFromBTEndpointToRouteDescription(uint64_t a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFDictionaryGetValue(theDict, @"RouteUID");
    if (a1)
    {
      CFDictionaryRef theDicta = 0;
      uint64_t v4 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      CFTypeRef v8 = *(void (**)(uint64_t, void, uint64_t, CFDictionaryRef *))(v7 + 48);
      if (v8)
      {
        v8(CMBaseObject, *MEMORY[0x1E4F20D18], v4, &theDicta);
        if (theDicta)
        {
          CFTypeRef v9 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F203E8]);
          if (v9) {
            CFDictionarySetValue(theDict, @"BTDetails_BatteryLevelLeft", v9);
          }
          uint64_t v10 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F203F0]);
          if (v10) {
            CFDictionarySetValue(theDict, @"BTDetails_BatteryLevelRight", v10);
          }
          uint64_t v11 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F203E0]);
          if (v11) {
            CFDictionarySetValue(theDict, @"BTDetails_BatteryLevelCase", v11);
          }
          uint64_t v12 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F203F8]);
          if (v12) {
            CFDictionarySetValue(theDict, @"BTDetails_BatteryLevelSingle", v12);
          }
          if (theDicta)
          {
            CFRelease(theDicta);
            CFDictionaryRef theDicta = 0;
          }
        }
      }
      uint64_t value = 0;
      uint64_t v13 = FigEndpointGetCMBaseObject();
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = *(void (**)(uint64_t, void, uint64_t, void **))(v15 + 48);
      if (v16)
      {
        v16(v13, *MEMORY[0x1E4F20F18], v4, &value);
        if (value)
        {
          CFDictionarySetValue(theDict, @"BTDetails_ProductID", value);
          if (value)
          {
            CFRelease(value);
            uint64_t value = 0;
          }
        }
      }
      CFTypeRef cf = 0;
      uint64_t v17 = FigEndpointGetCMBaseObject();
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v19 + 48);
      if (v20)
      {
        v20(v17, *MEMORY[0x1E4F20E68], v4, &cf);
        if (cf)
        {
          CFDictionarySetValue(theDict, @"IsGenuineAppleAccessory", cf);
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
  }
}

__CFDictionary *cmsmCreateNonConnectedBTRouteDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"RouteType", @"Wireless");
  uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(Mutable, @"RouteSupportsAudio", (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionarySetValue(Mutable, @"IsBTRoute", v4);
  uint64_t value = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(void (**)(uint64_t, void, uint64_t, void **))(v7 + 48);
  if (v8)
  {
    v8(CMBaseObject, *MEMORY[0x1E4F20E38], v2, &value);
    if (value)
    {
      CFDictionarySetValue(Mutable, @"RouteUID", value);
      if (value)
      {
        CFRelease(value);
        uint64_t value = 0;
      }
    }
  }
  CFTypeRef cf = 0;
  uint64_t v9 = FigEndpointGetCMBaseObject();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v11 + 48);
  if (v12)
  {
    v12(v9, *MEMORY[0x1E4F20F28], v2, &cf);
    if (cf)
    {
      CFDictionarySetValue(Mutable, @"RouteName", cf);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
  }
  CFDictionarySetValue(Mutable, @"AVAudioRouteName", @"HeadphonesBT");
  cmsmAddBTDetailsFromBTEndpointToRouteDescription(a1, Mutable);
  return Mutable;
}

CFTypeRef cmsmCopyActiveNonQuiesceablePortsForRouteConfigurationScopeAndDevice(int a1, int a2, const void *a3, const void *a4, int a5, uint64_t a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFArrayRef outData = 0;
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, a3, a4);
  if (a5 == 1) {
    AudioObjectPropertyScope v9 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v9 = 1869968496;
  }
  inAddress.mSelector = 1634627954;
  inAddress.mScope = v9;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  OSStatus PropertyData = AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData);
  if (!PropertyData && outData && (CFTypeID v10 = CFGetTypeID(outData), v10 == CFArrayGetTypeID()))
  {
    if (CFArrayGetCount(outData))
    {
      if (a5 == 1)
      {
        p_CFTypeRef cf = &cf;
        uint64_t v12 = a6;
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = &cf;
        uint64_t v12 = a6;
        p_CFTypeRef cf = 0;
      }
      vaemGetPortListForDevice(outData, v12, p_cf, v13);
      if (cf) {
        CFRetain(cf);
      }
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (outData) {
    CFRelease(outData);
  }
  if (RouteConfigurationDictionary) {
    CFRelease(RouteConfigurationDictionary);
  }
  return cf;
}

void cmsmUnpickQuiesceableWiredPortsRoutes(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled() || vaemIsPersistentRouteActive())
    && [a1 count])
  {
    uint64_t v14 = a3;
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v9 = [a1 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(a1);
          }
          uint64_t v13 = [*(id *)(*((void *)&v15 + 1) + 8 * v12) unsignedIntValue];
          if (vaeIsPortRoutable(v13))
          {
            if (a4) {
              [+[MXSessionManager sharedInstance] setQuiesceableWiredPortPreference:v13 autoRouteOnConnect:0];
            }
            objc_msgSend(v8, "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", v13));
          }
          ++v12;
        }
        while (v10 != v12);
        uint64_t v10 = [a1 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v10);
    }
    vaemMakeArrayOfPortsRoutable(v8, 0, a2, v14, 0);
  }
}

uint64_t cmsmUnpickWirelessRoutes(const __CFArray *a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex Count = CFArrayGetCount(a1);
  CFIndex v10 = Count;
  if (a2)
  {
    if (Count >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        FigCFArrayGetInt64AtIndex();
        vaeGetPortTypeFromPortID(0);
        ++v11;
      }
      while (v10 != v11);
    }
  }
  else if (Count >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      FigCFArrayGetInt64AtIndex();
      ++v13;
    }
    while (v10 != v13);
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(Mutable)) {
    uint64_t ArrayOfPortsRoutable = vaemDeaggregatePorts((uint64_t)Mutable, (uint64_t)Mutable, a3, a4);
  }
  else {
    uint64_t ArrayOfPortsRoutable = (uint64_t)vaemMakeArrayOfPortsRoutable(Mutable, 0, a3, a4, 0);
  }
  uint64_t v12 = ArrayOfPortsRoutable;
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v12;
}

void cmsmCopyCurrentActiveRoutesInfoForVADUID(uint64_t a1, __CFArray **a2, __CFArray **a3, __CFArray **a4)
{
  if (a2 || a3 || a4)
  {
    CFArrayRef v7 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, a1);
    if (v7)
    {
      CFArrayRef v8 = v7;
      if (CFArrayGetCount(v7))
      {
        CFTypeID v9 = CFGetTypeID(v8);
        if (v9 == CFArrayGetTypeID()) {
          CMSMVAUtility_CopyRoutesInfoFromInputAndOutputPorts(v8, 0, a2, a3, 0, a4);
        }
      }
      CFRelease(v8);
    }
  }
}

__CFArray *cmsmCopyCurrentActiveRouteTypes()
{
  uint64_t v1 = 0;
  cmsmCopyCurrentActiveRoutesInfoForVADUID(0x1EE5EBF48, &v1, 0, 0);
  return v1;
}

CFTypeRef cmsmCopyCurrentActiveRouteTypeAtIndex(CFIndex a1)
{
  CFArrayRef theArray = 0;
  cmsmCopyCurrentActiveRoutesInfoForVADUID(0x1EE5EBF48, &theArray, 0, 0);
  CFArrayRef v2 = theArray;
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  if (Count > a1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v2, a1);
    if (ValueAtIndex)
    {
      CFTypeRef v5 = CFRetain(ValueAtIndex);
      if (!v2) {
        return v5;
      }
      goto LABEL_9;
    }
  }
  CFTypeRef v5 = 0;
  if (v2) {
LABEL_9:
  }
    CFRelease(v2);
  return v5;
}

void cmsmCopyCurrentActiveRouteInfoAtIndexForVADUID(uint64_t a1, CFIndex a2, void *a3, void *a4, void *a5)
{
  CFArrayRef v19 = 0;
  CFArrayRef theArray = 0;
  CFArrayRef v18 = 0;
  cmsmCopyCurrentActiveRoutesInfoForVADUID(a1, &theArray, &v19, &v18);
  CFIndex Count = (CFIndex)theArray;
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  if (a3)
  {
    if (Count > a2)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, a2);
      CFTypeRef v11 = CFRetain(ValueAtIndex);
      *a3 = v11;
      if (CFEqual(v11, &stru_1EE5E8D28)) {
        *a3 = 0;
      }
    }
  }
  CFIndex v12 = (CFIndex)v19;
  if (v19) {
    CFIndex v12 = CFArrayGetCount(v19);
  }
  if (a4)
  {
    if (v12 > a2)
    {
      uint64_t v13 = CFArrayGetValueAtIndex(v19, a2);
      CFTypeRef v14 = CFRetain(v13);
      *a4 = v14;
      if (CFEqual(v14, &stru_1EE5E8D28)) {
        *a4 = 0;
      }
    }
  }
  CFIndex v15 = (CFIndex)v18;
  if (v18) {
    CFIndex v15 = CFArrayGetCount(v18);
  }
  if (a5)
  {
    if (v15 > a2)
    {
      long long v16 = CFArrayGetValueAtIndex(v18, a2);
      CFTypeRef v17 = CFRetain(v16);
      *a5 = v17;
      if (CFEqual(v17, &stru_1EE5E8D28)) {
        *a5 = 0;
      }
    }
  }
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (v19)
  {
    CFRelease(v19);
    CFArrayRef v19 = 0;
  }
  if (v18) {
    CFRelease(v18);
  }
}

uint64_t cmsmInputPortIsConnectedForRouteConfiguration(int a1, int a2, int a3, const void *a4)
{
  CFArrayRef v5 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(a2, a3, a4, 1);
  if (!v5) {
    return 0;
  }
  CFArrayRef v6 = v5;
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
LABEL_6:
    uint64_t v11 = 0;
  }
  else
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      int valuePtr = 0;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v9);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr == a1) {
        break;
      }
      if (v8 == ++v9) {
        goto LABEL_6;
      }
    }
    uint64_t v11 = 1;
  }
  CFRelease(v6);
  return v11;
}

uint64_t cmsmGetCurrentConnectedPortToRoute(const void *a1)
{
  if (a1) {
    CFArrayRef v1 = (const __CFArray *)CFRetain(a1);
  }
  else {
    CFArrayRef v1 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(0, 0, 0, 0);
  }
  CFArrayRef v2 = v1;
  if (!v1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
LABEL_29:
    uint64_t v17 = 0;
    goto LABEL_33;
  }
  uint64_t v4 = Count;
  uint64_t v5 = *MEMORY[0x1E4F20648];
  while (1)
  {
    AudioObjectID valuePtr = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v2, v4 - 1);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    int PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
    CFTypeRef v8 = vaeCopyDeviceIdentifierFromVADPort(valuePtr);
    CFIndex v9 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v8, 1, v5, qword_1E9359C88);
    if (v8) {
      CFRelease(v8);
    }
    if (!v9) {
      break;
    }
    if (PortTypeFromPortID == 1886614639)
    {
      uint64_t v17 = valuePtr;
      CFRelease(v9);
      goto LABEL_33;
    }
    CFRelease(v9);
LABEL_27:
    if (v4-- <= 1) {
      goto LABEL_29;
    }
  }
  if (vaeGetConnectionTypeForPort(valuePtr) == 1885544823)
  {
    CFArrayRef theArray = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints(qword_1E9359C88, (uint64_t)&theArray);
    if (theArray)
    {
      CFIndex v10 = CFArrayGetCount(theArray);
      if (v10 < 1)
      {
LABEL_18:
        BOOL v15 = 0;
      }
      else
      {
        CFIndex v11 = v10;
        CFIndex v12 = 0;
        while (1)
        {
          uint64_t v13 = CFArrayGetValueAtIndex(theArray, v12);
          BOOL ShouldAutoRouteOnConnect = CMSMVAUtility_ShouldAutoRouteOnConnect(valuePtr, (uint64_t)v13);
          if (ShouldAutoRouteOnConnect) {
            break;
          }
          if (v11 == ++v12) {
            goto LABEL_18;
          }
        }
        BOOL v15 = ShouldAutoRouteOnConnect;
      }
      if (theArray)
      {
        CFRelease(theArray);
        CFArrayRef theArray = 0;
      }
    }
    else
    {
      BOOL v15 = 0;
    }
    int CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    uint64_t v17 = valuePtr;
    if (v15 || valuePtr == CurrentOutputPortAtIndex) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  uint64_t v17 = valuePtr;
LABEL_33:
  CFRelease(v2);
  return v17;
}

uint64_t cmsmIsDeviceIDIncludedInCarBluetoothIDs(const __CFString *a1, uint64_t a2)
{
  CFTypeRef v10 = 0;
  CMSMUtility_CreateTokensFromDeviceUID(a1, (CFStringRef *)&v10, 0);
  if (a2)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
    if (Count < 1)
    {
LABEL_8:
      a2 = 0;
    }
    else
    {
      CFIndex v4 = Count;
      CFIndex v5 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a2, v5);
        CFTypeRef cf = 0;
        CMSMUtility_CreateTokensFromDeviceUID(ValueAtIndex, (CFStringRef *)&cf, 0);
        unsigned int v7 = CMSMUtility_CFStringEqualCaseInsensitive((const __CFString *)cf, (const __CFString *)v10);
        if (cf) {
          CFRelease(cf);
        }
        if (v7) {
          break;
        }
        if (v4 == ++v5) {
          goto LABEL_8;
        }
      }
      a2 = 1;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  return a2;
}

CFArrayRef cmsCopySubPortPreferencesAndInputOverride(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v24 = a1;
  uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "subPortPreferences"), "count");
  if (v3 >= 1)
  {
    uint64_t v4 = v3;
    for (CFIndex i = 0; v4 != i; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)[v24 subPortPreferences], i);
      keys = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      values = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      int v7 = CFDictionaryContainsKey(ValueAtIndex, @"polar pattern");
      CFStringRef Value = (void *)CFDictionaryGetValue(ValueAtIndex, @"sub-port id");
      CFIndex v9 = (void *)CFDictionaryGetValue(ValueAtIndex, @"port id");
      if (v7)
      {
        CFTypeRef v10 = (void *)CFDictionaryGetValue(ValueAtIndex, @"polar pattern");
        if (v9) {
          goto LABEL_5;
        }
      }
      else
      {
        CFTypeRef v10 = 0;
        if (v9)
        {
LABEL_5:
          keys = @"SelectedRouteDescription_RouteID";
          values = v9;
          CFIndex v11 = 1;
          if (!Value) {
            goto LABEL_7;
          }
LABEL_6:
          *(&keys + v11) = @"SelectedRouteDescription_DataSourceID";
          *(&values + v11++) = Value;
          goto LABEL_7;
        }
      }
      CFIndex v11 = 0;
      if (Value) {
        goto LABEL_6;
      }
LABEL_7:
      if (v10)
      {
        *(&keys + v11) = @"SelectedRouteDescription_MicrophonePolarPattern";
        *(&values + v11++) = v10;
LABEL_13:
        CFDictionaryRef v12 = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, v11, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFArrayAppendValue(Mutable, v12);
        if (v12) {
          CFRelease(v12);
        }
        continue;
      }
      if (v11) {
        goto LABEL_13;
      }
      CFArrayAppendValue(Mutable, 0);
    }
  }
  if ([v24 overridePortsList])
  {
    uint64_t v13 = objc_msgSend((id)objc_msgSend(v24, "overridePortsList"), "count");
    if (v13 >= 1)
    {
      uint64_t v14 = v13;
      CFIndex v15 = 0;
      long long v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      uint64_t v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      do
      {
        CFNumberRef v18 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)[v24 overridePortsList], v15);
        unsigned int valuePtr = 0;
        keys = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        values = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        if (v18)
        {
          CFNumberRef v19 = v18;
          CFNumberGetValue(v18, kCFNumberSInt32Type, &valuePtr);
          if (vaeIsPortAnInputPort(valuePtr))
          {
            keys = @"SelectedRouteDescription_RouteID";
            values = v19;
            CFDictionaryRef v20 = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 1, v16, v17);
            CFArrayAppendValue(Mutable, v20);
            if (v20) {
              CFRelease(v20);
            }
          }
        }
        else if (vaeIsPortAnInputPort(0))
        {
          CFArrayAppendValue(Mutable, 0);
        }
        ++v15;
      }
      while (v14 != v15);
    }
  }
  if (!Mutable) {
    return 0;
  }
  CFArrayRef Copy = CFArrayCreateCopy(allocator, Mutable);
  CFRelease(Mutable);
  return Copy;
}

CFIndex cmsDeselectSubPortPreferences(CFIndex result, CFArrayRef theArray)
{
  if (theArray)
  {
    uint64_t v3 = (void *)result;
    uint64_t result = CFArrayGetCount(theArray);
    if (result >= 1)
    {
      uint64_t result = CFArrayGetCount(theArray);
      if (result >= 1)
      {
        CFIndex v4 = 0;
        CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          CFArrayRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v4);
          if (CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_MicrophonePolarPattern"))
          {
            CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_MicrophonePolarPattern");
            CFDictionarySetValue(Mutable, @"polar pattern", Value);
            CFIndex v9 = CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_DataSourceID");
            CFDictionarySetValue(Mutable, @"sub-port id", v9);
            CFTypeRef v10 = CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_RouteID");
            CFDictionarySetValue(Mutable, @"port id", v10);
            if ([v3 subPortPreferences]
              && objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "count"))
            {
              CFIndex v11 = 0;
              while (!cmsmSubPortPreferenceMatches((const __CFDictionary *)objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "objectAtIndex:", v11), Mutable))
              {
                if (objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "count") <= (unint64_t)++v11) {
                  goto LABEL_26;
                }
              }
              goto LABEL_19;
            }
          }
          else if (CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_DataSourceID"))
          {
            CFDictionaryRef v12 = CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_DataSourceID");
            CFDictionarySetValue(Mutable, @"sub-port id", v12);
            uint64_t v13 = CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_RouteID");
            CFDictionarySetValue(Mutable, @"port id", v13);
            if ([v3 subPortPreferences]
              && objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "count"))
            {
              CFIndex v11 = 0;
              while (1)
              {
                CFDictionaryRef v14 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)[v3 subPortPreferences], v11);
                if (cmsmSubPortPreferenceMatches(v14, Mutable)) {
                  break;
                }
                if (objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "count") <= (unint64_t)++v11) {
                  goto LABEL_26;
                }
              }
LABEL_19:
              CFIndex v15 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(v3, "subPortPreferences"));
              [v15 removeObjectAtIndex:v11];
              [v3 setSubPortPreferences:v15];

              if (!Mutable) {
                goto LABEL_28;
              }
              goto LABEL_27;
            }
          }
          else if ([v3 overridePortsList])
          {
            CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_RouteID");
            if (objc_msgSend((id)objc_msgSend(v3, "overridePortsList"), "count"))
            {
              CFIndex v17 = 0;
              while (1)
              {
                CFNumberRef v18 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)[v3 overridePortsList], v17);
                if (CFNumberCompare(v18, v16, 0) == kCFCompareEqualTo) {
                  break;
                }
                if (objc_msgSend((id)objc_msgSend(v3, "overridePortsList"), "count") <= (unint64_t)++v17) {
                  goto LABEL_26;
                }
              }
              [v3 setOverridePortsList:0];
              if (!Mutable) {
                goto LABEL_28;
              }
LABEL_27:
              CFRelease(Mutable);
              goto LABEL_28;
            }
          }
LABEL_26:
          if (Mutable) {
            goto LABEL_27;
          }
LABEL_28:
          ++v4;
          uint64_t result = CFArrayGetCount(theArray);
        }
        while (result > v4);
      }
    }
  }
  return result;
}

CFComparisonResult routeDescriptionComparator(const __CFDictionary *a1, const __CFDictionary *a2, CFStringCompareFlags a3)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"RouteName");
  CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(a2, @"RouteName");
  CFStringRef v8 = v7;
  if (Value) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (v7) {
      CFComparisonResult result = kCFCompareLessThan;
    }
    else {
      CFComparisonResult result = kCFCompareEqualTo;
    }
    if (Value) {
      return 1;
    }
  }
  else
  {
    v16.length = CFStringGetLength(Value);
    v16.location = 0;
    CFComparisonResult result = CFStringCompareWithOptionsAndLocale(Value, v8, v16, a3, 0);
  }
  if (result == kCFCompareEqualTo)
  {
    CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(a1, @"RouteUID");
    CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(a2, @"RouteUID");
    if (v11) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      if (v12) {
        uint64_t v14 = -1;
      }
      else {
        uint64_t v14 = 0;
      }
      if (v11) {
        return 1;
      }
      else {
        return v14;
      }
    }
    else
    {
      return CFStringCompare(v11, v12, 0);
    }
  }
  return result;
}

void cmsmCopyHFPOrA2DPBTDeviceDetails(const __CFDictionary *a1, const __CFString **a2, __CFString **a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef cf2 = 0;
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (!a1) {
    goto LABEL_22;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"RouteUID");
  CMSMUtility_CreateTokensFromDeviceUID(Value, (CFStringRef *)&cf, (CFStringRef *)&cf2);
  if (!cf2) {
    goto LABEL_22;
  }
  if (CFEqual(@"tsco", cf2))
  {
    CFStringRef v8 = kCMSessionBTDeviceType_HFP;
  }
  else
  {
    if (!CFEqual(@"tacl", cf2)) {
      goto LABEL_22;
    }
    CFStringRef v8 = kCMSessionBTDeviceType_A2DP;
  }
  BOOL v9 = *v8;
  if (*v8)
  {
    if (a2)
    {
      *a2 = Value;
      if (Value) {
        CFRetain(Value);
      }
    }
    if (a3)
    {
      *a3 = v9;
      CFRetain(v9);
    }
    if (a4)
    {
      CFTypeRef v10 = cf;
      *a4 = cf;
      if (!v10) {
        goto LABEL_24;
      }
      CFRetain(v10);
    }
  }
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
LABEL_24:
  if (cf2) {
    CFRelease(cf2);
  }
}

void cmsmCreateAndInsertAirPlayRouteDescription(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  CFDictionaryRef theDict = 0;
  cmsmCreateRouteDescriptionForFigAirPlayEndpoints(a1, a2, &theDict);
  if (theDict)
  {
    CFIndex Count = CFArrayGetCount(a3);
    CFDictionaryGetValue(theDict, @"RouteUID");
    if (Count >= 1)
    {
      CFIndex v5 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v5);
        CFDictionaryGetValue(ValueAtIndex, @"RouteUID");
        if (FigCFEqual()) {
          break;
        }
        if (Count == ++v5) {
          goto LABEL_12;
        }
      }
      CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"PortNumber");
      if (Value) {
        CFDictionarySetValue(theDict, @"PortNumber", Value);
      }
      if (CFDictionaryGetValue(ValueAtIndex, @"RouteCurrentlyPicked")) {
        CFDictionarySetValue(theDict, @"RouteCurrentlyPicked", (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      CFArrayRemoveValueAtIndex(a3, v5);
    }
LABEL_12:
    CFArrayAppendValue(a3, theDict);
    if (theDict) {
      CFRelease(theDict);
    }
  }
}

void CMSMDebugUtility_DumpDebugInfo()
{
  CMSMDebugUtility_PrintBuildInfo();
  CMSMStrings_Check();
  CMSMDebugUtility_DumpSessionListOneTime();
  [+[MXSessionManager sharedInstance] dumpDebugInfo];
  [+[MXExclaves sharedInstance] logDebugInfo];
  CMSMDebugUtility_DumpDeviceState();
  CMSMDebugUtility_DumpTriangleInfo();
  CMSMDebugUtility_DumpDetailedRouteDescriptions();
  CMSMDebugUtility_DumpMutedSessionBundleIDsList();
  MX_RunningBoardServices_DumpAssertionInfo();
  CMSMDebugUtility_DumpDeviceInfo();
  MX_RunningBoardServices_DumpMonitoredProcessPredicates();
}

void CMSMDebugUtility_PrintBuildInfo()
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void CMSMDebugUtility_DumpSessionListOneTime()
{
  uint64_t v249 = *MEMORY[0x1E4F143B8];
  uint64_t context = (void *)MEMORY[0x1997179E0]();
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  obuint64_t j = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v0 = &qword_1E9359000;
  if (dword_1E9359ED0)
  {
    LODWORD(v23singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v226 = 0u;
  long long v227 = 0u;
  long long v224 = 0u;
  long long v225 = 0u;
  uint64_t v216 = -[NSPointerArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v224, v235, 16, v206, v211);
  if (v216)
  {
    uint64_t v215 = *(void *)v225;
    do
    {
      uint64_t v2 = 0;
      do
      {
        if (*(void *)v225 != v215) {
          objc_enumerationMutation(obj);
        }
        uint64_t v218 = v2;
        uint64_t v3 = *(void **)(*((void *)&v224 + 1) + 8 * v2);
        v217 = (void *)[v3 copyMXSessionList];
        uint64_t v4 = [v217 count];
        v219 = v3;
        if (dword_1E9359ED0)
        {
          uint64_t v5 = v4;
          LODWORD(v23singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          CFArrayRef v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v7 = v230;
          if (os_log_type_enabled(v6, type[0])) {
            unsigned int v8 = v7;
          }
          else {
            unsigned int v8 = v7 & 0xFFFFFFFE;
          }
          if (v8)
          {
            uint64_t v9 = [v3 displayID];
            int v242 = 136315650;
            v243 = "CMSMDebugUtility_DumpSessionListOneTime";
            __int16 v244 = 2114;
            uint64_t v245 = v9;
            __int16 v246 = 2048;
            uint64_t v247 = v5;
            LODWORD(v212) = 32;
            v207 = &v242;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFTypeRef v10 = objc_msgSend(MEMORY[0x1E4F28E78], "stringWithString:", &stru_1EE5E8D28, v207, v212);
        [v10 appendString:@"\nClient Configuration Info :\n"];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"DisplayID =", (__CFString *)[v3 displayID]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"clientName =", (__CFString *)[v3 clientName]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"ptr =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%p", v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"PID =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend((id)objc_msgSend(v3, "clientPID"), "intValue")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"category =", (__CFString *)[v3 audioCategory]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"mode =", (__CFString *)[v3 audioMode]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"audioSessionID =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "audioSessionID")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"CoreSessionID =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%lld", objc_msgSend((id)objc_msgSend(v3, "ID"), "longLongValue")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"reporterIDs =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "reporterIDs")]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"originalReporterIDs =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "originalReporterIDs")]);
        CFStringRef v11 = NSString;
        if ([v3 isSharedAVAudioSessionInstance]) {
          CFStringRef v12 = @"YES";
        }
        else {
          CFStringRef v12 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isSharedAVAudioSessionInstance =", (__CFString *)[v11 stringWithFormat:@"%@", v12]);
        BOOL v13 = NSString;
        if ([v3 isAirPlayReceiverSession]) {
          uint64_t v14 = @"YES";
        }
        else {
          uint64_t v14 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isAirPlayReceiverSession =", (__CFString *)[v13 stringWithFormat:@"%@", v14]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"clientPriority =", (__CFString *)-[MXSessionManager getClientPriorityAsString:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getClientPriorityAsString:", [v3 clientPriority]));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"canBeNowPlayingApp =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", +[MXSystemController getCanBeNowPlayingAppForPID:](MXSystemController, "getCanBeNowPlayingAppForPID:", objc_msgSend((id)objc_msgSend(v3, "clientPID"), "intValue"))));
        CFIndex v15 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", CMSMUtility_GetStyleString(objc_msgSend(v3, "interruptionStyle")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"interruptionStyle =", v15);
        CFRange v16 = (__CFString *)[NSString stringWithFormat:@"%@", FigRoutingManagerContextUtilities_GetContextString(objc_msgSend(v3, "routingContextUUID"))];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"context =", v16);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"routeSharingPolicy =", (__CFString *)[NSString stringWithFormat:@"%@", -[MXSessionManager getRouteSharingPolicyAsString:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getRouteSharingPolicyAsString:", objc_msgSend(v3, "routeSharingPolicy"))]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"PIDInheritingFrom =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "pidToInheritAppStateFrom")));
        CFIndex v17 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%s", CMSMUtility_GetFlagsString(objc_msgSend(v3, "hwControlFlags")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"requires flags =", v17);
        CFNumberRef v18 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%s", CMSMUtility_GetFlagsString(objc_msgSend(v3, "hwControlFlags") >> 16));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"desires flags =", v18);
        CFNumberRef v19 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_GetIsEligibleForNowPlayingAppConsideration(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"eligibleForNPA =", v19);
        CFDictionaryRef v20 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_GetPrefersNoDucking(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersNoDucking =", v20);
        uint64_t v21 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_GetPrefersSuppressingRecordingState(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersSuppressingRecordingState =", v21);
        uint64_t v22 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_GetIsActuallyPlayingAudio(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"actuallyPlaysAudio =", v22);
        uint64_t v23 = NSString;
        if (CMSUtility_GetIsEligibleForBTSmartRoutingConsideration(v3)) {
          uint64_t v24 = @"YES";
        }
        else {
          uint64_t v24 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isEligibleForBTSmartRoutingConsideration =", (__CFString *)[v23 stringWithFormat:@"%@", v24]);
        uint64_t v25 = NSString;
        if ([v3 isEligibleForBTTriangleConsideration]) {
          uint64_t v26 = @"YES";
        }
        else {
          uint64_t v26 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isEligibleForBTTriangleConsideration =", (__CFString *)[v25 stringWithFormat:@"%@", v26]);
        uint64_t v27 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_GetWantsToBeVolumeButtonClient(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"wantsToBeVolumeButtonClient =", v27);
        uint64_t v28 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_GetOptOutOfMutePriority(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"optOutOfMutePriority =", v28);
        id v29 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_GetAllowSystemSoundsWhileRecording(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"allowSystemSoundsWhileRecording =", v29);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"microphoneAttribution =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "wantsToShowMicrophoneIndicatorWhenNotRecording")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"needsAudioBudget =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "needsAudioBudget")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"shadowingAudioSessionID =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "shadowingAudioSessionID")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isSharePlayMediaSession =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "isSharePlayMediaSession")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isSharePlayCallSession =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "isSharePlayCallSession")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isSharePlayCapableCallSession =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "isSharePlayCapableCallSession")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isHardwareSafetySession =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "isHardwareSafetySession")));
        uint64_t v30 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_GetPrefersToTakeHWControlFlagsFromAnotherSession(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersToTakeHWControlFlagsFromAnotherSession =", v30);
        uint64_t v31 = NSString;
        if ([v3 dontTakeOverHardware]) {
          uint64_t v32 = @"YES";
        }
        else {
          uint64_t v32 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"dontTakeOverHardware =", (__CFString *)[v31 stringWithFormat:@"%@", v32]);
        uint64_t v33 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersNoInterruptionWhenSecureMicrophoneIsEngaged =", v33);
        uint64_t v34 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_GetPrefersMultichannelAudio(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersMultichannelAudio =", v34);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"preferredNumberOfInputChannels =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "preferredNumberOfInputChannels")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"preferredNumberOfOutputChannels =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "preferredNumberOfOutputChannels")));
        uint64_t v35 = NSString;
        [v3 preferredInputSampleRate];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"preferredInputSampleRate =", (__CFString *)objc_msgSend(v35, "stringWithFormat:", @"%f", v36));
        CFArrayRef v37 = NSString;
        [v3 preferredOutputSampleRate];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"preferredOutputSampleRate =", (__CFString *)objc_msgSend(v37, "stringWithFormat:", @"%f", v38));
        int v39 = NSString;
        if ([v3 preferredOutputSampleRateSetByClient]) {
          uint64_t v40 = @"YES";
        }
        else {
          uint64_t v40 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"preferredOutputSampleRateSetByClient =", (__CFString *)[v39 stringWithFormat:@"%@", v40]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersToVibeWhenVibrationsAreDisabled =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "prefersToVibeWhenVibrationsAreDisabled")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersNoInterruptionsByMixableSessions =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "prefersNoInterruptionsByMixableSessions")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersNoInterruptionsDuringRemoteDeviceControl =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "prefersNoInterruptionsDuringRemoteDeviceControl")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersToInterruptActiveRecordingSessions =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%{BOOL}u", objc_msgSend(v3, "prefersToInterruptActiveRecordingSessions")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersBluetoothAccessoryMuting =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "prefersBluetoothAccessoryMuting")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"Entitlements : hasEntitlementToRecordAudioInAnExtension =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "hasEntitlementToRecordAudioInAnExtension")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"hasEntitlementToStartRecordingInTheBackground =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "hasEntitlementToStartRecordingInTheBackground")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"hasEntitlementToSuppressRecordingStateToSystemStatus =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "hasEntitlementToSuppressRecordingStateToSystemStatus")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"hasEntitlementToShowMicrophoneIndicatorWhileNotRecording =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "hasEntitlementToShowMicrophoneIndicatorWhileNotRecording")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"hasEntitlementToSupportProcessAssertionAuditTokens =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "hasEntitlementToSupportProcessAssertionAuditTokens")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"hasEntitlementToRecordDuringCall =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "hasEntitlementToRecordDuringCall")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"hasEntitlementToSetEmergencyAlertPriority =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "hasEntitlementToSetEmergencyAlertPriority")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"hasEntitlementToSetPrefersNoInterruptions =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "hasEntitlementToSetPrefersNoInterruptions")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"hasEntitlementToSetPrefersToOptOutOfHardwareSafetyInterruptions", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%u", objc_msgSend(v3, "hasEntitlementToSetPrefersToOptOutOfHardwareSafetyInterruptions")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersToOptOutOfHardwareSafetyInterruptions", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%u", objc_msgSend(v3, "prefersToOptOutOfHardwareSafetyInterruptions")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"wombatEnabled =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%u", -[MXSessionManager wombatEnabled](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "wombatEnabled")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersToPlayDuringWombat =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%u", objc_msgSend(v3, "prefersToPlayDuringWombat")));
        uint64_t v41 = NSString;
        [v3 interruptionFadeDuration];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"interruptionFadeDuration =", (__CFString *)objc_msgSend(v41, "stringWithFormat:", @"%f", v42));
        uint64_t v43 = NSString;
        [v3 duckFadeDuration];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"duckFadeDuration =", (__CFString *)objc_msgSend(v43, "stringWithFormat:", @"%f", v44));
        uint64_t v45 = NSString;
        [v3 unduckFadeDuration];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"unduckFadeDuration =", (__CFString *)objc_msgSend(v45, "stringWithFormat:", @"%f", v46));
        uint64_t v47 = NSString;
        [v3 duckToLevelScalar];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"duckToLevelScalar =", (__CFString *)objc_msgSend(v47, "stringWithFormat:", @"%f", v48));
        uint64_t v49 = NSString;
        [v3 unduckToLevelScalar];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"unduckToLevelScalar = ", (__CFString *)objc_msgSend(v49, "stringWithFormat:", @"%f", v50));
        uint64_t v51 = NSString;
        [v3 duckToLevelDB];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"duckToLevelDB =", (__CFString *)objc_msgSend(v51, "stringWithFormat:", @"%f", v52));
        uint64_t v53 = NSString;
        if ([v3 isInterruptionCalledOffAudioControlQueue]) {
          uint64_t v54 = @"YES";
        }
        else {
          uint64_t v54 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isInterruptionCalledOffAudioControlQueue = ", (__CFString *)[v53 stringWithFormat:@"%@", v54]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"allowedRouteTypes =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "allowedRouteTypes")]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"powerProfile =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "powerProfile")]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"notificationsSubscribedTo =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "notificationsSubscribedTo")]);
        uint64_t v55 = NSString;
        if ([v3 wantsToPauseSpokenAudio]) {
          uint64_t v56 = @"YES";
        }
        else {
          uint64_t v56 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"wantsToPauseSpokenAudio =", (__CFString *)[v55 stringWithFormat:@"%@", v56]);
        CFNumberRef v57 = NSString;
        if ([v3 isTheAssistant]) {
          uint64_t v58 = @"YES";
        }
        else {
          uint64_t v58 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isTheAssistant =", (__CFString *)[v57 stringWithFormat:@"%@", v58]);
        uint64_t v59 = NSString;
        if ([v3 mutesAudioBasedOnRingerSwitchState]) {
          uint64_t v60 = @"YES";
        }
        else {
          uint64_t v60 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"mutesAudioBasedOnRingerSwitchState", (__CFString *)[v59 stringWithFormat:@"%@", v60]);
        long long v61 = NSString;
        if ([v3 isTemporaryAssertionEnabled]) {
          long long v62 = @"YES";
        }
        else {
          long long v62 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isTemporaryAssertionEnabled", (__CFString *)[v61 stringWithFormat:@"%@", v62]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"assertionAuditTimeInterval =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%u", objc_msgSend(v3, "assertionAuditTimerDelay")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"preferredRouteControlFeatures =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "preferredRouteControlFeatures")]);
        long long v63 = NSString;
        if ([v3 prefersEchoCancelledInput]) {
          long long v64 = @"YES";
        }
        else {
          long long v64 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersEchoCancelledInput =", (__CFString *)[v63 stringWithFormat:@"%@", v64]);
        CFTypeRef v65 = NSString;
        [v3 constantOutputVolumeLeveldB];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"constantOutputVolumeLeveldB =", (__CFString *)objc_msgSend(v65, "stringWithFormat:", @"%f", v66));
        CFTypeRef v67 = NSString;
        if ([v3 prefersBeingInterruptedByNextActiveRecordingClient]) {
          CFTypeRef v68 = @"YES";
        }
        else {
          CFTypeRef v68 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"prefersBeingInterruptedByNextActiveRecordingClient =", (__CFString *)[v67 stringWithFormat:@"%@", v68]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"preferredPersistentRoute =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "preferredPersistentRoute")]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"activeOSTransaction =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "activeOSTransaction")]);
        CFRange v69 = NSString;
        if ([v3 isCameraRecordingExtension]) {
          unsigned int v70 = @"YES";
        }
        else {
          unsigned int v70 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"isCameraRecordingExtension =", (__CFString *)[v69 stringWithFormat:@"%@", v70]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"preferredMinimumMicrophoneIndicatorLightOnTime =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "preferredMinimumMicrophoneIndicatorLightOnTime")]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v10, @"vibrationData =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "vibrationData")]);
        CMSMDebugUtility_DumpOneLineAndResetString(v10);
        CFTypeRef v71 = (void *)[MEMORY[0x1E4F28E78] stringWithString:&stru_1EE5E8D28];
        [v71 appendString:@"\nClient State Info :\n"];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"DisplayID =", (__CFString *)[v3 displayID]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"clientName =", (__CFString *)[v3 clientName]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"ptr =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%p", v3));
        uint64_t v72 = NSString;
        int v73 = [v3 isActive];
        uint64_t v74 = "inactive";
        if (v73) {
          uint64_t v74 = "ACTIVE";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"active state =", (__CFString *)objc_msgSend(v72, "stringWithFormat:", @"%s", v74));
        unsigned int v75 = NSString;
        int v76 = [v3 isPlaying];
        CFTypeRef v77 = "not playing";
        if (v76) {
          CFTypeRef v77 = "PLAYING";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"play state =", (__CFString *)objc_msgSend(v75, "stringWithFormat:", @"%s", v77));
        __int16 v78 = NSString;
        int v79 = [v3 isRecording];
        uint64_t v80 = "not recording";
        if (v79) {
          uint64_t v80 = "RECORDING";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"recording State =", (__CFString *)objc_msgSend(v78, "stringWithFormat:", @"%s", v80));
        if ([v3 isUsingBuiltInMicForRecording]) {
          os_log_type_t v81 = @"YES";
        }
        else {
          os_log_type_t v81 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"isUsingBuiltInMicForRecording =", v81);
        if ([v3 isUsingExclaveSensor]) {
          unsigned int v82 = @"YES";
        }
        else {
          unsigned int v82 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"isUsingExclaveSensor =", v82);
        unsigned int v83 = NSString;
        int v84 = [v3 isPlayingOutput];
        CFTypeRef v85 = "NO";
        if (v84) {
          CFTypeRef v85 = "YES";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"isPlayingOutput =", (__CFString *)objc_msgSend(v83, "stringWithFormat:", @"%s", v85));
        StringForApplicationState = (__CFString *)CMSMUtility_GetStringForApplicationState([v3 applicationState]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"appState =", StringForApplicationState);
        os_log_type_t v87 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%s", CMSMUtility_GetFlagsString(objc_msgSend(v3, "currentlyControllingFlags")));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"controlling flags =", v87);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"usingCamera =", (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", objc_msgSend(v3, "isUsingCamera")));
        unsigned int v88 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%d", CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v3));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"isNowPlayingEligible =", v88);
        CFTypeRef v89 = NSString;
        int v90 = [v3 isDucked];
        CFTypeRef v91 = "not ducked";
        if (v90) {
          CFTypeRef v91 = "DUCKED";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"ducking state =", (__CFString *)objc_msgSend(v89, "stringWithFormat:", @"%s", v91));
        CFTypeRef v92 = NSString;
        if ([v3 silentMuted]) {
          CFTypeRef v93 = "Yes";
        }
        else {
          CFTypeRef v93 = "No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"silentMuted =", (__CFString *)objc_msgSend(v92, "stringWithFormat:", @"%s", v93));
        int v94 = NSString;
        if ([v3 duckedOnVAD]) {
          CFTypeRef v95 = "Yes";
        }
        else {
          CFTypeRef v95 = "No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"duckedOnVAD =", (__CFString *)objc_msgSend(v94, "stringWithFormat:", @"%s", v95));
        __int16 v96 = NSString;
        if ([v3 auditTokenSetByClient]) {
          CFTypeRef v97 = "Yes";
        }
        else {
          CFTypeRef v97 = "No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"auditTokenSetByClient =", (__CFString *)objc_msgSend(v96, "stringWithFormat:", @"%s", v97));
        __int16 v98 = (__CFString *)[NSString stringWithFormat:@"%@", CMSUtility_GetCurrentAudioDestination(v3)];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"Current Audio Destination =", v98);
        CFTypeRef v99 = NSString;
        if ([v3 prefersConcurrentAirPlayAudio]) {
          __int16 v100 = @"YES";
        }
        else {
          __int16 v100 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"prefersConcurrentAirPlayAudio =", (__CFString *)[v99 stringWithFormat:@"%@", v100]);
        CFTypeRef v101 = NSString;
        int IsPAAccessLoggingEnabled = MX_PrivacyAccounting_IsPAAccessLoggingEnabled();
        CFArrayRef v103 = "Enabled";
        if (!IsPAAccessLoggingEnabled) {
          CFArrayRef v103 = "Disabled";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"PAAccessLoggingEnabled(lazy init) =", (__CFString *)objc_msgSend(v101, "stringWithFormat:", @"%s", v103));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"Ducker sources = ", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "duckingSourceList")]);
        v104 = NSString;
        [v3 audioQueueDuckVolume];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"audioQueueDuckVolume = ", (__CFString *)objc_msgSend(v104, "stringWithFormat:", @"%f", v105));
        v106 = NSString;
        [v3 audioQueueFadeDuration];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"audioQueueFadeDuration = ", (__CFString *)objc_msgSend(v106, "stringWithFormat:", @"%f", v107));
        v108 = NSString;
        [v3 lastDuckVolumeApplied];
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"lastDuckVolumeApplied = ", (__CFString *)objc_msgSend(v108, "stringWithFormat:", @"%f", v109));
        v110 = NSString;
        if ([v3 interruptionFadeDurationSetByClient]) {
          v111 = "Yes";
        }
        else {
          v111 = "No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"interruptionFadeDurationSetByClient =", (__CFString *)objc_msgSend(v110, "stringWithFormat:", @"%s", v111));
        v112 = NSString;
        if ([v3 duckFadeDurationSetByClient]) {
          v113 = "Yes";
        }
        else {
          v113 = "No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"duckFadeDurationSetByClient =", (__CFString *)objc_msgSend(v112, "stringWithFormat:", @"%s", v113));
        v114 = NSString;
        if ([v3 unduckFadeDurationSetByClient]) {
          v115 = "Yes";
        }
        else {
          v115 = "No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"unduckFadeDurationSetByClient =", (__CFString *)objc_msgSend(v114, "stringWithFormat:", @"%s", v115));
        v116 = NSString;
        if ([v3 duckToLevelScalarSetByClient]) {
          v117 = "Yes";
        }
        else {
          v117 = "No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"duckToLevelScalarSetByClient =", (__CFString *)objc_msgSend(v116, "stringWithFormat:", @"%s", v117));
        v118 = NSString;
        if ([v3 unduckToLevelScalarSetByClient]) {
          v119 = @"Yes";
        }
        else {
          v119 = @"No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"unduckToLevelScalarSetByClient = ", (__CFString *)[v118 stringWithFormat:@"%@", v119]);
        v120 = NSString;
        if ([v3 duckToLevelDBSetByClient]) {
          v121 = "Yes";
        }
        else {
          v121 = "No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"duckToLevelDBSetByClient =", (__CFString *)objc_msgSend(v120, "stringWithFormat:", @"%s", v121));
        v122 = NSString;
        if ([v3 addSharedAudioRouteToRoutablePorts]) {
          v123 = "Yes";
        }
        else {
          v123 = "No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"addSharedAudioRouteToRoutablePorts =", (__CFString *)objc_msgSend(v122, "stringWithFormat:", @"%s", v123));
        v124 = NSString;
        if ([v3 needToEndInterruption]) {
          v125 = "Yes";
        }
        else {
          v125 = "No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"needToEndInterruption =", (__CFString *)objc_msgSend(v124, "stringWithFormat:", @"%s", v125));
        v126 = NSString;
        if ([v3 areBothBudsInEarForA2DPPortBeforeInterrupting]) {
          v127 = @"Yes";
        }
        else {
          v127 = @"No";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"areBothBudsInEarForA2DPPortBeforeInterrupting =", (__CFString *)[v126 stringWithFormat:@"%@", v127]);
        v128 = NSString;
        if ([v3 triggeredRemoteInterruption]) {
          v129 = "Yes";
        }
        else {
          v129 = "No";
        }
        v130 = v3;
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"triggeredRemoteInterruption =", (__CFString *)objc_msgSend(v128, "stringWithFormat:", @"%s", v129));
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"isPlayingStartTime =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "isPlayingStartTime")]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"isPlayingStopTime =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "isPlayingStopTime")]);
        v131 = NSString;
        int v132 = [v3 mixesWithEveryone];
        v133 = @"NO";
        if (v132) {
          v133 = @"YES";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"mixesWithEveryone =", (__CFString *)[v131 stringWithFormat:@"%@", v133]);
        v134 = NSString;
        if (CMSMUtility_IsInputAllowedForCategory((const void *)[v3 audioCategory])) {
          uint64_t CurrentInputVADUID = CMSUtility_GetCurrentInputVADUID(v3);
        }
        else {
          uint64_t CurrentInputVADUID = 0;
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"input VAD =", (__CFString *)[v134 stringWithFormat:@"%@", CurrentInputVADUID]);
        v136 = NSString;
        if ([v3 hasPhoneCallBehavior]) {
          v137 = @"YES";
        }
        else {
          v137 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"hasPhoneCallBehavior =", (__CFString *)[v136 stringWithFormat:@"%@", v137]);
        v138 = NSString;
        if ([v3 hasFetchedBackgroundPrivileges]) {
          v139 = @"YES";
        }
        else {
          v139 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"hasFetchedBackgroundPrivileges =", (__CFString *)[v138 stringWithFormat:@"%@", v139]);
        v140 = NSString;
        if ([v3 enableBluetoothRecordingPreference]) {
          v141 = @"YES";
        }
        else {
          v141 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"enableBluetoothRecordingPreference =", (__CFString *)[v140 stringWithFormat:@"%@", v141]);
        v142 = NSString;
        if ([v3 enableBluetoothRecordingPreferenceSetByClient]) {
          v143 = @"YES";
        }
        else {
          v143 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"enableBluetoothRecordingPreferenceSetByClient =", (__CFString *)[v142 stringWithFormat:@"%@", v143]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"defaultBuiltInRoutePreference =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "defaultBuiltInRoutePreference")]);
        v144 = NSString;
        if ([v3 defaultBuiltInRoutePreferenceSetByClient]) {
          v145 = @"YES";
        }
        else {
          v145 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"defaultBuiltInRoutePreferenceSetByClient =", (__CFString *)[v144 stringWithFormat:@"%@", v145]);
        v146 = NSString;
        if ([v3 prefersSpeechDetectEnabled]) {
          v147 = @"YES";
        }
        else {
          v147 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"prefersSpeechDetectEnabled = ", (__CFString *)[v146 stringWithFormat:@"%@", v147]);
        v148 = NSString;
        int v149 = [v3 prefersNoInterruptions];
        v150 = "No";
        if (v149) {
          v150 = "Yes";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"PrefersNoInterruptions =", (__CFString *)objc_msgSend(v148, "stringWithFormat:", @"%s", v150));
        v151 = NSString;
        if ([+[MXSessionManager sharedInstance] doesSessionPreferInterruptionOnRouteDisconnect:v3])
        {
          v152 = @"YES";
        }
        else
        {
          v152 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"prefersInterruptionOnRouteDisconnect (actual) = ", (__CFString *)[v151 stringWithFormat:@"%@", v152]);
        v153 = NSString;
        if ([v3 prefersInterruptionOnRouteDisconnect]) {
          v154 = @"YES";
        }
        else {
          v154 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"prefersInterruptionOnRouteDisconnect = ", (__CFString *)[v153 stringWithFormat:@"%@", v154]);
        v155 = NSString;
        if ([v3 prefersInterruptionOnRouteDisconnectSetByClient]) {
          v156 = @"YES";
        }
        else {
          v156 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"prefersInterruptionOnRouteDisconnectSetByClient = ", (__CFString *)[v155 stringWithFormat:@"%@", v156]);
        v157 = NSString;
        if ([v3 wasActiveWhenDeviceOwnershipRelinquished]) {
          v158 = @"YES";
        }
        else {
          v158 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"wasActiveWhenDeviceOwnershipRelinquished =", (__CFString *)[v157 stringWithFormat:@"%@", v158]);
        v159 = NSString;
        if ([v3 isRecordingMutedForRemoteDevice]) {
          v160 = @"YES";
        }
        else {
          v160 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"isRecordingMutedForRemoteDevice =", (__CFString *)[v159 stringWithFormat:@"%@", v160]);
        v161 = NSString;
        if ([v3 shouldMuteBeAppliedToRemoteDevice]) {
          v162 = @"YES";
        }
        else {
          v162 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"shouldMuteBeAppliedToRemoteDevice =", (__CFString *)[v161 stringWithFormat:@"%@", v162]);
        v163 = NSString;
        if ([v3 doesGameAudioNeedToBeSpatialized]) {
          v164 = @"YES";
        }
        else {
          v164 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"doesGameAudioNeedToBeSpatialized =", (__CFString *)[v163 stringWithFormat:@"%@", v164]);
        v165 = NSString;
        if ([v3 bypassSystemSpatialAudioForGame]) {
          v166 = @"YES";
        }
        else {
          v166 = @"NO";
        }
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"bypassSystemSpatialAudioForGame =", (__CFString *)[v165 stringWithFormat:@"%@", v166]);
        CMSMDebugUtility_AppendFieldAndValue((uint64_t)v71, @"timestampWhenMostRecentlyActivated =", (__CFString *)[NSString stringWithFormat:@"%@", objc_msgSend(v3, "timestampWhenMostRecentlyActivated")]);
        CMSMDebugUtility_DumpOneLineAndResetString(v71);
        if ([v3 playbackAssertionRef]
          || [v3 resumeAssertionRef]
          || objc_msgSend((id)objc_msgSend(v3, "hostProcessPlaybackAssertions"), "count"))
        {
          if (dword_1E9359ED0)
          {
            LODWORD(v23singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v167 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v168 = v230;
            if (os_log_type_enabled(v167, type[0])) {
              unsigned int v169 = v168;
            }
            else {
              unsigned int v169 = v168 & 0xFFFFFFFE;
            }
            if (v169)
            {
              int v242 = 136315138;
              v243 = "CMSMDebugUtility_DumpSessionStateInfo";
              LODWORD(v212) = 12;
              v208 = (os_log_type_t *)&v242;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (objc_msgSend(v3, "playbackAssertionRef", v208) && dword_1E9359ED0)
          {
            LODWORD(v23singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v170 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v171 = v230;
            if (os_log_type_enabled(v170, type[0])) {
              unsigned int v172 = v171;
            }
            else {
              unsigned int v172 = v171 & 0xFFFFFFFE;
            }
            if (v172)
            {
              uint64_t v173 = [v3 playbackAssertionRef];
              uint64_t v174 = objc_msgSend((id)objc_msgSend(v3, "playbackAssertionRef"), "explanation");
              int v242 = 136315650;
              v243 = "CMSMDebugUtility_DumpSessionStateInfo";
              __int16 v244 = 2048;
              uint64_t v245 = v173;
              __int16 v246 = 2114;
              uint64_t v247 = v174;
              LODWORD(v212) = 32;
              v209 = &v242;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (objc_msgSend(v3, "resumeAssertionRef", v209) && dword_1E9359ED0)
          {
            LODWORD(v23singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v175 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v176 = v230;
            if (os_log_type_enabled(v175, type[0])) {
              unsigned int v177 = v176;
            }
            else {
              unsigned int v177 = v176 & 0xFFFFFFFE;
            }
            if (v177)
            {
              uint64_t v178 = [v3 resumeAssertionRef];
              uint64_t v179 = objc_msgSend((id)objc_msgSend(v3, "resumeAssertionRef"), "explanation");
              int v242 = 136315650;
              v243 = "CMSMDebugUtility_DumpSessionStateInfo";
              __int16 v244 = 2048;
              uint64_t v245 = v178;
              __int16 v246 = 2114;
              uint64_t v247 = v179;
              LODWORD(v212) = 32;
              v210 = &v242;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (objc_msgSend((id)objc_msgSend(v3, "hostProcessPlaybackAssertions", v210), "count"))
          {
            if (dword_1E9359ED0)
            {
              LODWORD(v23singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v180 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v181 = v230;
              if (os_log_type_enabled(v180, type[0])) {
                unsigned int v182 = v181;
              }
              else {
                unsigned int v182 = v181 & 0xFFFFFFFE;
              }
              if (v182)
              {
                int v242 = 136315138;
                v243 = "CMSMDebugUtility_DumpSessionStateInfo";
                LODWORD(v212) = 12;
                v208 = (os_log_type_t *)&v242;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            long long v232 = 0u;
            long long v233 = 0u;
            long long v230 = 0u;
            long long v231 = 0u;
            v183 = objc_msgSend(v3, "hostProcessPlaybackAssertions", v208);
            uint64_t v184 = [v183 countByEnumeratingWithState:&v230 objects:v248 count:16];
            if (v184)
            {
              uint64_t v185 = v184;
              uint64_t v186 = *(void *)v231;
              do
              {
                for (uint64_t i = 0; i != v185; ++i)
                {
                  if (*(void *)v231 != v186) {
                    objc_enumerationMutation(v183);
                  }
                  v188 = *(void **)(*((void *)&v230 + 1) + 8 * i);
                  uint64_t v189 = objc_msgSend((id)objc_msgSend(v130, "hostProcessPlaybackAssertions", v208), "objectForKey:", v188);
                  if (dword_1E9359ED0)
                  {
                    v190 = (void *)v189;
                    unsigned int v229 = 0;
                    os_log_type_t v228 = OS_LOG_TYPE_DEFAULT;
                    v191 = v0;
                    v192 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v193 = v229;
                    if (os_log_type_enabled(v192, v228)) {
                      unsigned int v194 = v193;
                    }
                    else {
                      unsigned int v194 = v193 & 0xFFFFFFFE;
                    }
                    if (v194)
                    {
                      *(_DWORD *)os_log_type_t type = 136315394;
                      v237 = "CMSMDebugUtility_DumpSessionStateInfo";
                      __int16 v238 = 2114;
                      v239 = v188;
                      LODWORD(v212) = 22;
                      v208 = type;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    if (dword_1E9359ED0)
                    {
                      unsigned int v229 = 0;
                      os_log_type_t v228 = OS_LOG_TYPE_DEFAULT;
                      v195 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      unsigned int v196 = v229;
                      if (os_log_type_enabled(v195, v228)) {
                        unsigned int v197 = v196;
                      }
                      else {
                        unsigned int v197 = v196 & 0xFFFFFFFE;
                      }
                      if (v197)
                      {
                        uint64_t v198 = [v190 explanation];
                        *(_DWORD *)os_log_type_t type = 136315650;
                        v237 = "CMSMDebugUtility_DumpSessionStateInfo";
                        __int16 v238 = 2048;
                        v239 = v190;
                        __int16 v240 = 2114;
                        uint64_t v241 = v198;
                        LODWORD(v212) = 32;
                        v208 = type;
                        _os_log_send_and_compose_impl();
                      }
                      uint64_t v0 = v191;
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                  }
                  v130 = v219;
                }
                uint64_t v185 = [v183 countByEnumeratingWithState:&v230 objects:v248 count:16];
              }
              while (v185);
            }
          }
        }
        if (dword_1E9359ED0)
        {
          LODWORD(v23singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v199 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v200 = v230;
          if (os_log_type_enabled(v199, type[0])) {
            unsigned int v201 = v200;
          }
          else {
            unsigned int v201 = v200 & 0xFFFFFFFE;
          }
          if (v201)
          {
            int v242 = 136315138;
            v243 = "CMSMDebugUtility_DumpSessionListOneTime";
            LODWORD(v212) = 12;
            v208 = (os_log_type_t *)&v242;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        long long v222 = 0u;
        long long v223 = 0u;
        long long v220 = 0u;
        long long v221 = 0u;
        uint64_t v202 = objc_msgSend(v217, "countByEnumeratingWithState:objects:count:", &v220, v234, 16, v208);
        if (v202)
        {
          uint64_t v203 = v202;
          uint64_t v204 = *(void *)v221;
          do
          {
            for (uint64_t j = 0; j != v203; ++j)
            {
              if (*(void *)v221 != v204) {
                objc_enumerationMutation(v217);
              }
              [*(id *)(*((void *)&v220 + 1) + 8 * j) dumpInfo];
            }
            uint64_t v203 = [v217 countByEnumeratingWithState:&v220 objects:v234 count:16];
          }
          while (v203);
        }

        uint64_t v2 = v218 + 1;
      }
      while (v218 + 1 != v216);
      uint64_t v216 = [(NSPointerArray *)obj countByEnumeratingWithState:&v224 objects:v235 count:16];
    }
    while (v216);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  [+[MXSessionManagerSecure sharedInstance] logDebugInfo];
  [+[MXMediaEndowmentManager sharedInstance] dumpDebugInfo];
  +[MXSystemController dumpInfoOfMXSystemControllers];
  [+[MXNowPlayingAppManager sharedInstance] dumpNowPlayingAppInfo];
  [+[MXAppProtectionManager sharedInstance] dumpDebugInfo];
}

uint64_t CMSMDebugUtility_DumpDeviceState()
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1E9359ED0)
    {
      CFArrayRef v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  PVMGetVibeIntensityPreference();
  if (dword_1E9359ED0)
  {
    uint64_t v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFPreferencesGetAppBooleanValue(@"celestialToMediaExperienceDomainMigrationFullyCompleted", @"com.apple.mediaexperience", 0);
  if (dword_1E9359ED0)
  {
    uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = CFPreferencesGetAppBooleanValue(@"celestialToMediaExperienceDomainMigrationCompleted", @"com.apple.mediaexperience", 0);
  if (dword_1E9359ED0)
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1E9359ED0)
    {
      CFArrayRef v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (dword_1E9359ED0)
      {
        unsigned int v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (dword_1E9359ED0)
        {
          unsigned int v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
          return fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  return result;
}

void CMSMDebugUtility_DumpTriangleInfo()
{
  uint64_t v0 = (void *)[MEMORY[0x1E4F28E78] stringWithString:&stru_1EE5E8D28];
  CFArrayRef v1 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
  id v2 = CMSM_IDSConnection_CopyNearbyPairedDeviceInfo();
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"\nSharedAudioRoutePortIds = ", (__CFString *)[NSString stringWithFormat:@"%@", v1, v27]);
  uint64_t v4 = NSString;
  if (CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()) {
    uint64_t v5 = @"YES";
  }
  else {
    uint64_t v5 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsSomeClientPlayingOverSharedAudioRouteOnRemote =", (__CFString *)[v4 stringWithFormat:@"%@", v5]);
  CFArrayRef v6 = NSString;
  if (CMSM_IDSConnection_IsWaitingForGizmoPlayingInfo()) {
    unsigned int v7 = @"YES";
  }
  else {
    unsigned int v7 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsWaitingForGizmoPlayingInfo =", (__CFString *)[v6 stringWithFormat:@"%@", v7]);
  unsigned int v8 = NSString;
  if (CMSM_IDSConnection_DidRemoteReplyWithInitialPlayingInfo()) {
    uint64_t v9 = @"YES";
  }
  else {
    uint64_t v9 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"DidRemoteReplyWithInitialPlayingInfo =", (__CFString *)[v8 stringWithFormat:@"%@", v9]);
  CFTypeRef v10 = (__CFString *)[NSString stringWithFormat:@"%@", CMSM_IDSConnection_GetRemotePlayingInfo()];
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"RemotePlayingInfo =", v10);
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"nearbyDeviceInfo =", (__CFString *)[NSString stringWithFormat:@"%@", v2]);
  CFStringRef v11 = NSString;
  if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote()) {
    CFStringRef v12 = @"YES";
  }
  else {
    CFStringRef v12 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsSharedAudioRouteConnectedToLocalAndRemote =", (__CFString *)[v11 stringWithFormat:@"%@", v12]);
  BOOL v13 = NSString;
  if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()) {
    uint64_t v14 = @"YES";
  }
  else {
    uint64_t v14 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsSharedAudioRouteConnectedToLocal =", (__CFString *)[v13 stringWithFormat:@"%@", v14]);
  CFIndex v15 = NSString;
  if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote()) {
    CFRange v16 = @"YES";
  }
  else {
    CFRange v16 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsSharedAudioRouteConnectedToRemote =", (__CFString *)[v15 stringWithFormat:@"%@", v16]);
  CFIndex v17 = NSString;
  if (CMSM_IDSConnection_IsRemoteUsingSharedAudioRoute()) {
    CFNumberRef v18 = @"YES";
  }
  else {
    CFNumberRef v18 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsRemoteUsingSharedAudioRoute =", (__CFString *)[v17 stringWithFormat:@"%@", v18]);
  CFNumberRef v19 = NSString;
  if (CMSM_IDSConnection_IsNearbyPairedDevicePresent()) {
    CFDictionaryRef v20 = @"YES";
  }
  else {
    CFDictionaryRef v20 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsNearbyPairedDevicePresent =", (__CFString *)[v19 stringWithFormat:@"%@", v20]);
  uint64_t v21 = NSString;
  if (CMSM_IDSConnection_IsNearbyPairedDevicePresentAndConnected()) {
    uint64_t v22 = @"YES";
  }
  else {
    uint64_t v22 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsNearbyPairedDevicePresentAndConnected =", (__CFString *)[v21 stringWithFormat:@"%@", v22]);
  uint64_t v23 = NSString;
  if (CMSM_IDSConnection_IsTimerForRemotePlayingInfoReplyExpired()) {
    uint64_t v24 = @"YES";
  }
  else {
    uint64_t v24 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsTimerForRemotePlayingInfoReplyExpired =", (__CFString *)[v23 stringWithFormat:@"%@", v24]);
  uint64_t v25 = NSString;
  if (CMSM_IDSConnection_IsPairedToAnotherDevice()) {
    uint64_t v26 = @"YES";
  }
  else {
    uint64_t v26 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsPairedToAnotherDevice =", (__CFString *)[v25 stringWithFormat:@"%@", v26]);
  CMSMDebugUtility_DumpOneLineAndResetString(v0);
}

uint64_t CMSMDebugUtility_DumpDetailedRouteDescriptions()
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (dword_1E9359ED0)
  {
    unsigned int v24 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  obuint64_t j = [+[MXAdditiveRoutingManager sharedInstance] detailedRoutesDescription];
  uint64_t result = [(NSDictionary *)obj countByEnumeratingWithState:&v19 objects:v29 count:16];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)v20;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v20 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v19 + 1) + 8 * v4);
        id v6 = -[MXAdditiveRoutingManager copyDetailedRouteDescription:](+[MXAdditiveRoutingManager sharedInstance](MXAdditiveRoutingManager, "sharedInstance", v15, v17), "copyDetailedRouteDescription:", [v5 unsignedIntValue]);
        if (dword_1E9359ED0)
        {
          unsigned int v24 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          unsigned int v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v8 = v24;
          if (os_log_type_enabled(v7, type)) {
            unsigned int v9 = v8;
          }
          else {
            unsigned int v9 = v8 & 0xFFFFFFFE;
          }
          if (v9)
          {
            uint64_t VADNameForVADID = CMSMUtility_GetVADNameForVADID([v5 unsignedIntValue]);
            int v25 = 136315394;
            uint64_t v26 = "CMSMDebugUtility_DumpDetailedRouteDescriptions";
            __int16 v27 = 2114;
            uint64_t v28 = VADNameForVADID;
            LODWORD(v17) = 22;
            CFIndex v15 = &v25;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSMDebugUtility_PrintDictionary(v6);
        if (dword_1E9359ED0)
        {
          unsigned int v24 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          CFStringRef v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v12 = v24;
          if (os_log_type_enabled(v11, type)) {
            unsigned int v13 = v12;
          }
          else {
            unsigned int v13 = v12 & 0xFFFFFFFE;
          }
          if (v13)
          {
            int v25 = 136315138;
            uint64_t v26 = "CMSMDebugUtility_DumpDetailedRouteDescriptions";
            LODWORD(v17) = 12;
            CFIndex v15 = &v25;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }

        ++v4;
      }
      while (v2 != v4);
      uint64_t result = [(NSDictionary *)obj countByEnumeratingWithState:&v19 objects:v29 count:16];
      uint64_t v2 = result;
    }
    while (result);
  }
  return result;
}

void CMSMDebugUtility_DumpMutedSessionBundleIDsList()
{
  if (!MX_FeatureFlags_IsSessionBasedMutingEnabled())
  {
    if (MX_FeatureFlags_IsCallManagementMuteControlEnabled())
    {
      uint64_t v0 = [+[MXSessionManager sharedInstance] mutedSessionBundleIDs];
      if ([(NSSet *)v0 count])
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSMDebugUtility_PrintCollection(v0);
      }
    }
  }
}

uint64_t CMSMDebugUtility_DumpDeviceInfo()
{
  uint64_t v0 = (void *)[MEMORY[0x1E4F28E78] stringWithString:&stru_1EE5E8D28];
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = (void *)MGCopyAnswer();
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"Device class =", (__CFString *)[NSString stringWithFormat:@"%@", v2]);

  uint64_t v3 = (void *)MGCopyAnswer();
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"Device Name =", (__CFString *)[NSString stringWithFormat:@"%@", v3]);

  uint64_t v4 = (void *)MGCopyAnswer();
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"Region Code =", (__CFString *)[NSString stringWithFormat:@"%@", v4]);

  uint64_t v5 = NSString;
  if (CMSMDeviceState_IsMediaserverd()) {
    id v6 = @"YES";
  }
  else {
    id v6 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsMediaserverd =", (__CFString *)[v5 stringWithFormat:@"%@", v6, v24]);
  unsigned int v7 = NSString;
  if (CMSMDeviceState_IsAudiomxd()) {
    unsigned int v8 = @"YES";
  }
  else {
    unsigned int v8 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsAudiomxd =", (__CFString *)[v7 stringWithFormat:@"%@", v8]);
  unsigned int v9 = NSString;
  if (CMSMDeviceState_ItsAniPhone()) {
    CFTypeRef v10 = @"YES";
  }
  else {
    CFTypeRef v10 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"ItsAniPhone =", (__CFString *)[v9 stringWithFormat:@"%@", v10]);
  CFStringRef v11 = NSString;
  if (CMSMDeviceState_ItsAniPad()) {
    unsigned int v12 = @"YES";
  }
  else {
    unsigned int v12 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"ItsAniPad =", (__CFString *)[v11 stringWithFormat:@"%@", v12]);
  unsigned int v13 = NSString;
  if (CMSMDeviceState_ItsAnAppleTV()) {
    uint64_t v14 = @"YES";
  }
  else {
    uint64_t v14 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"ItsAnAppleTV =", (__CFString *)[v13 stringWithFormat:@"%@", v14]);
  CFIndex v15 = NSString;
  if (CMSMDeviceState_ItsAnAppleWatch()) {
    uint64_t v16 = @"YES";
  }
  else {
    uint64_t v16 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"ItsAnAppleWatch =", (__CFString *)[v15 stringWithFormat:@"%@", v16]);
  uint64_t v17 = NSString;
  if (CMSMDeviceState_ItsAnInternalBuild()) {
    CFNumberRef v18 = @"YES";
  }
  else {
    CFNumberRef v18 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"ItsAnInternalBuild =", (__CFString *)[v17 stringWithFormat:@"%@", v18]);
  long long v19 = NSString;
  if (CMSMDeviceState_ItsAHomePod()) {
    long long v20 = @"YES";
  }
  else {
    long long v20 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"ItsAHomePod =", (__CFString *)[v19 stringWithFormat:@"%@", v20]);
  long long v21 = NSString;
  if (CMSMDeviceState_IsAVirtualDevice()) {
    long long v22 = @"YES";
  }
  else {
    long long v22 = @"NO";
  }
  CMSMDebugUtility_AppendFieldAndValue((uint64_t)v0, @"IsVirtualDevice =", (__CFString *)[v21 stringWithFormat:@"%@", v22]);
  return CMSMDebugUtility_DumpOneLineAndResetString(v0);
}

uint64_t CMSMDebugUtility_AppendFieldAndValue(uint64_t result, void *a2, __CFString *a3)
{
  if (a2)
  {
    uint64_t v4 = (void *)result;
    if (a3) {
      uint64_t v5 = a3;
    }
    else {
      uint64_t v5 = @"null";
    }
    uint64_t v6 = [(__CFString *)v5 length];
    uint64_t v7 = [v4 length];
    if ((unint64_t)(v7 + [a2 length] + v6) >= 0x321)
    {
      CMSMDebugUtility_DumpOneLineAndResetString(v4);
      [v4 appendString:@"\ncontinued...\n"];
    }
    [v4 appendString:a2];
    [v4 appendString:@" "];
    [v4 appendString:v5];
    return [v4 appendString:@", "];
  }
  return result;
}

uint64_t CMSMDebugUtility_DumpOneLineAndResetString(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if ([a1 length] && dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return objc_msgSend(a1, "setString:", &stru_1EE5E8D28, v4, v5);
}

__CFString *CMSMDebugUtility_GetSpeechDetechStyleString(unsigned int a1)
{
  if (a1 > 6) {
    return @"Invalid";
  }
  else {
    return off_1E57CA1D0[a1];
  }
}

void CMSMDebugUtility_RegisterForCACentralStateDumping()
{
  if (kCMSession_LoadAudioToolboxRoutinesOnce != -1) {
    dispatch_once_f(&kCMSession_LoadAudioToolboxRoutinesOnce, 0, (dispatch_function_t)cmsmLoadAudioToolboxRoutinesOnce);
  }
  uint64_t v0 = (void (*)(uint64_t, __CFString *, void *))CACentralStateDumpRegisterSubsystem;
  if (CACentralStateDumpRegisterSubsystem)
  {
    v0(20, @"CMSession", &__block_literal_global_46);
  }
}

void *cmsmLoadAudioToolboxRoutinesOnce()
{
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 4);
  if (result)
  {
    uint64_t result = dlsym(result, "CACentralStateDumpRegisterSubsystem");
    CACentralStateDumpRegisterSubsystem = result;
  }
  return result;
}

void sub_194E2E5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

uint64_t FigRoutingContextCreateAudioContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create_0(a1, 4, a2, a3);
}

uint64_t FigRoutingContextCreateVideoContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create_0(a1, 5, a2, a3);
}

uint64_t FigRoutingContextCreatePerAppSecondDisplayContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create_0(a1, 6, a2, a3);
}

uint64_t FigRoutingContextCopySystemMirroringContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(2u, a3);
}

uint64_t FigRoutingContextCopySidePlayContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(0xCu, a3);
}

uint64_t FigRoutingContextCopySystemRemotePoolContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(9u, a3);
}

uint64_t FigRoutingContextCopySystemAudioInputContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(0xDu, a3);
}

uint64_t FigRoutingContextCopySystemRemoteDisplayContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(0xEu, a3);
}

uint64_t FigRoutingContextCreateControlChannelOnlyContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create_0(a1, 7, a2, a3);
}

uint64_t FigRoutingCopyDisplayMenuVideoContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(0xAu, a3);
}

uint64_t FigRoutingContextCreateSystemAudioContextInternal(const void *a1)
{
  if (FigRoutingContextCreateSystemAudioContextInternal_loggingToken == -1)
  {
    if (a1) {
      goto LABEL_3;
    }
    return 0;
  }
  dispatch_once(&FigRoutingContextCreateSystemAudioContextInternal_loggingToken, &__block_literal_global_27_0);
  if (!a1) {
    return 0;
  }
LABEL_3:
  FigRoutingContextGetClassID();
  uint64_t result = CMDerivedObjectCreate();
  if (!result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v4 = CFRetain(a1);
    uint64_t result = 0;
    *(void *)(DerivedStorage + 8) = v4;
    *(_DWORD *)uint64_t DerivedStorage = 1;
  }
  return result;
}

uint64_t __FigRoutingContextCreateSystemAudioContextInternal_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  return fig_note_initialize_category_with_default_work();
}

uint64_t FigRoutingContextCreateSystemMirroringContextInternal(uint64_t result)
{
  if (result)
  {
    CFArrayRef v1 = (const void *)result;
    FigRoutingContextGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v3 = CFRetain(v1);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 8) = v3;
      *(_DWORD *)uint64_t DerivedStorage = 2;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemMusicContextInternal(uint64_t result)
{
  if (result)
  {
    CFArrayRef v1 = (const void *)result;
    FigRoutingContextGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v3 = CFRetain(v1);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 8) = v3;
      *(_DWORD *)uint64_t DerivedStorage = 3;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSidePlayContextInternal(uint64_t result)
{
  if (result)
  {
    CFArrayRef v1 = (const void *)result;
    FigRoutingContextGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v3 = CFRetain(v1);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 8) = v3;
      *(_DWORD *)uint64_t DerivedStorage = 12;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemVideoContextInternal(uint64_t result)
{
  if (result)
  {
    CFArrayRef v1 = (const void *)result;
    FigRoutingContextGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v3 = CFRetain(v1);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 8) = v3;
      *(_DWORD *)uint64_t DerivedStorage = 11;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemRemotePoolContextInternal(uint64_t result)
{
  if (result)
  {
    CFArrayRef v1 = (const void *)result;
    FigRoutingContextGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v3 = CFRetain(v1);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 8) = v3;
      *(_DWORD *)uint64_t DerivedStorage = 9;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemVideoDisplayMenu(uint64_t result)
{
  if (result)
  {
    CFArrayRef v1 = (const void *)result;
    FigRoutingContextGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v3 = CFRetain(v1);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 8) = v3;
      *(_DWORD *)uint64_t DerivedStorage = 10;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemInputContextInternal(uint64_t result)
{
  if (result)
  {
    CFArrayRef v1 = (const void *)result;
    FigRoutingContextGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v3 = CFRetain(v1);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 8) = v3;
      *(_DWORD *)uint64_t DerivedStorage = 13;
    }
  }
  return result;
}

uint64_t FigRoutingContextCreateSystemRemoteDisplayInternal(const void *a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    FigRoutingContextGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v5 = CFRetain(a1);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 8) = v5;
      *(_DWORD *)uint64_t DerivedStorage = 14;
    }
  }
  return result;
}

void routingContext_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = *(const void **)(DerivedStorage + 8);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  SharedQueue = FigRoutingManagerGetSharedQueue();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __routingContext_Finalize_block_invoke;
  void v5[3] = &__block_descriptor_40_e5_v8__0l;
  v5[4] = v2;
  MXDispatchAsync((uint64_t)"routingContext_Finalize", (uint64_t)"FigRoutingContext.m", 296, 0, 0, SharedQueue, (uint64_t)v5);
  CFTypeRef v4 = *(const void **)(DerivedStorage + 8);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *routingContext_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (int *)CMBaseObjectGetDerivedStorage();
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFTypeRef v4 = Mutable;
  uint64_t v5 = *DerivedStorage;
  if (v5 > 0xE) {
    uint64_t v6 = "UNKNOWN";
  }
  else {
    uint64_t v6 = off_1E57CA230[v5];
  }
  CFStringAppendFormat(Mutable, 0, @"<FigRoutingContext %p> %s uuid %@", a1, v6, *((void *)DerivedStorage + 1));
  return v4;
}

uint64_t routingContext_SetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual()) {
    return 4294954512;
  }
  if (dword_1E9359DA0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v7) {
    CFRelease(v7);
  }
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(*(void *)(DerivedStorage + 8), 0, (uint64_t)cf);
  FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(*(const void **)(DerivedStorage + 8), cf[0], @"configUpdateReasonEndedBottomUpRouteChange", 0);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return 0;
}

void routingContext_collectPickedEndpoints(int a1, CFDictionaryRef theDict, __CFArray *a3)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!theDict) {
    goto LABEL_6;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"CurrentEndpoints");
  CFArrayRef v5 = Value;
  if (!Value) {
    goto LABEL_7;
  }
  if (CFArrayGetCount(Value) >= 1 && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v5, 0)) != 0) {
    CFArrayRef v5 = (const __CFArray *)CFRetain(ValueAtIndex);
  }
  else {
LABEL_6:
  }
    CFArrayRef v5 = 0;
LABEL_7:
  CFArrayRef theArray = 0;
  if (!a3)
  {
    if (dword_1E9359DA0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_33:
    if (!v5) {
      return;
    }
    goto LABEL_34;
  }
  if (v5)
  {
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v5))
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      CFTypeRef v10 = *(uint64_t (**)(uint64_t, void, void, CFArrayRef *))(v9 + 48);
      if (v10)
      {
        int v11 = v10(CMBaseObject, *MEMORY[0x1E4F20FB0], 0, &theArray);
        CFArrayRef v12 = theArray;
        if (v11)
        {
LABEL_31:
          if (v12) {
            CFRelease(v12);
          }
          goto LABEL_33;
        }
        if (theArray)
        {
          CFIndex v13 = 0;
          uint64_t v14 = *MEMORY[0x1E4F21048];
          while (CFArrayGetCount(v12) > v13)
          {
            cf[0] = 0;
            CFIndex v15 = CFArrayGetValueAtIndex(theArray, v13);
            uint64_t v16 = FigEndpointGetCMBaseObject();
            uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v17) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = 0;
            }
            long long v19 = *(unsigned int (**)(uint64_t, uint64_t, void, CFTypeRef *))(v18 + 48);
            if (v19 && !v19(v16, v14, 0, cf)) {
              CFArrayAppendValue(a3, v15);
            }
            if (cf[0]) {
              CFRelease(cf[0]);
            }
            ++v13;
            CFArrayRef v12 = theArray;
            if (!theArray) {
              goto LABEL_33;
            }
          }
          CFArrayRef v12 = theArray;
          goto LABEL_31;
        }
      }
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)v5))
    {
      CFArrayAppendValue(a3, v5);
    }
LABEL_34:
    CFRelease(v5);
    return;
  }
  if (dword_1E9359DA0)
  {
    long long v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t routingContext_SelectRoute(const void *a1, const void *a2, const void *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1) {
      CFRetain(a1);
    }
    if (a2) {
      CFRetain(a2);
    }
    if (a3) {
      CFRetain(a3);
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __routingContext_SelectRoute_block_invoke;
    v11[3] = &__block_descriptor_56_e5_v8__0l;
    v11[4] = a1;
    v11[5] = a2;
    void v11[6] = a3;
    MXDispatchAsync((uint64_t)"routingContext_SelectRoute", (uint64_t)"FigRoutingContext.m", 709, 0, 0, SharedQueue, (uint64_t)v11);
    uint64_t v9 = (void *)MEMORY[0x1997179E0]();
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"routingContext_SelectRoute" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_SelectRouteDescriptor(const void *a1, const void *a2, const void *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 1);
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1) {
      CFRetain(a1);
    }
    if (a2) {
      CFRetain(a2);
    }
    if (a3) {
      CFRetain(a3);
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __routingContext_SelectRouteDescriptor_block_invoke;
    v11[3] = &__block_descriptor_56_e5_v8__0l;
    v11[4] = a1;
    v11[5] = a2;
    void v11[6] = a3;
    MXDispatchAsync((uint64_t)"routingContext_SelectRouteDescriptor", (uint64_t)"FigRoutingContext.m", 780, 0, 0, SharedQueue, (uint64_t)v11);
    uint64_t v9 = (void *)MEMORY[0x1997179E0]();
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"routingContext_SelectRouteDescriptor" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_CopyRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v11 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __routingContext_CopyRoute_block_invoke;
    v9[3] = &unk_1E57C5878;
    v9[4] = &v10;
    v9[5] = a1;
    void v9[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CopyRoute", (uint64_t)"FigRoutingContext.m", 906, 0, 0, SharedQueue, (uint64_t)v9);
    uint64_t v7 = (void *)MEMORY[0x1997179E0]();
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"routingContext_CopyRoute" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
    uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v11 + 6);
  }
  _Block_object_dispose(&v10, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E2FD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CopySelectedRouteDescriptor(uint64_t a1, void *a2)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 1);
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    CFArrayRef theArray = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t IsOperationOnSystemInputContextAllowedInternal = FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors(*(void *)(DerivedStorage + 8), (uint64_t)&theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) >= 1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (ValueAtIndex) {
          CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
        }
        *a2 = ValueAtIndex;
      }
      if (theArray)
      {
        CFRelease(theArray);
        CFArrayRef theArray = 0;
      }
    }
    uint64_t v7 = (void *)MEMORY[0x1997179E0]();
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"routingContext_CopySelectedRouteDescriptor" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_SelectRoutes(const void *a1, const void *a2, const void *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1) {
      CFRetain(a1);
    }
    if (a2) {
      CFRetain(a2);
    }
    if (a3) {
      CFRetain(a3);
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __routingContext_SelectRoutes_block_invoke;
    v12[3] = &__block_descriptor_64_e5_v8__0l;
    v12[4] = a2;
    void v12[5] = DerivedStorage;
    v12[6] = a3;
    v12[7] = a1;
    MXDispatchAsync((uint64_t)"routingContext_SelectRoutes", (uint64_t)"FigRoutingContext.m", 1347, 0, 0, SharedQueue, (uint64_t)v12);
    uint64_t v10 = (void *)MEMORY[0x1997179E0]();
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"routingContext_SelectRoutes" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_SelectRouteDescriptors(const void *a1, const void *a2, const void *a3)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a1) {
      CFRetain(a1);
    }
    if (a2) {
      CFRetain(a2);
    }
    if (a3) {
      CFRetain(a3);
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __routingContext_SelectRouteDescriptors_block_invoke;
    v12[3] = &__block_descriptor_64_e5_v8__0l;
    v12[4] = a2;
    void v12[5] = DerivedStorage;
    v12[6] = a3;
    v12[7] = a1;
    MXDispatchAsync((uint64_t)"routingContext_SelectRouteDescriptors", (uint64_t)"FigRoutingContext.m", 1438, 0, 0, SharedQueue, (uint64_t)v12);
    uint64_t v10 = (void *)MEMORY[0x1997179E0]();
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"routingContext_SelectRouteDescriptors" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_CopySelectedRoutes(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  int v16 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v14 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __routingContext_CopySelectedRoutes_block_invoke;
    v12[3] = &unk_1E57C9240;
    v12[4] = &v13;
    void v12[5] = &v17;
    v12[6] = DerivedStorage;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CopySelectedRoutes", (uint64_t)"FigRoutingContext.m", 1522, 0, 0, SharedQueue, (uint64_t)v12);
    if (!*((_DWORD *)v14 + 6))
    {
      uint64_t v8 = v18;
      *a2 = v18[3];
      v8[3] = 0;
    }
    uint64_t v9 = (void *)MEMORY[0x1997179E0]();
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"routingContext_CopySelectedRoutes" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
    uint64_t v10 = (const void *)v18[3];
    if (v10)
    {
      CFRelease(v10);
      v18[3] = 0;
    }
    uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v14 + 6);
  }
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E30284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CopySelectedRouteForRemoteControl(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v9 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __routingContext_CopySelectedRouteForRemoteControl_block_invoke;
    v7[3] = &unk_1E57C5878;
    v7[4] = &v8;
    void v7[5] = DerivedStorage;
    void v7[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CopySelectedRouteForRemoteControl", (uint64_t)"FigRoutingContext.m", 1796, 0, 0, SharedQueue, (uint64_t)v7);
    uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v9 + 6);
  }
  _Block_object_dispose(&v8, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E303B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_AddToSelectedRoutes(const void *a1, const void *a2, const void *a3)
{
  CFTypeRef cf[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v23 = 0;
    cf[0] = 0;
    if (a2)
    {
      uint64_t v8 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v11 + 48);
      if (v12) {
        v12(CMBaseObject, *MEMORY[0x1E4F20F28], v8, cf);
      }
      uint64_t v13 = FigEndpointGetCMBaseObject();
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v15 + 48);
      if (v16) {
        v16(v13, *MEMORY[0x1E4F20E38], v8, &v23);
      }
    }
    if (dword_1E9359DA0)
    {
      int v22 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    if (v23)
    {
      CFRelease(v23);
      CFTypeRef v23 = 0;
    }
    if (a1) {
      CFRetain(a1);
    }
    if (a2) {
      CFRetain(a2);
    }
    if (a3) {
      CFRetain(a3);
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __routingContext_AddToSelectedRoutes_block_invoke;
    v20[3] = &__block_descriptor_64_e5_v8__0l;
    v20[4] = a2;
    v20[5] = DerivedStorage;
    v20[6] = a3;
    void v20[7] = a1;
    MXDispatchAsync((uint64_t)"routingContext_AddToSelectedRoutes", (uint64_t)"FigRoutingContext.m", 1832, 0, 0, SharedQueue, (uint64_t)v20);
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_AddToSelectedRouteDescriptors(const void *a1, const __CFDictionary *a2, const void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v8 = DerivedStorage;
      uint64_t v16 = 0;
      uint64_t v17 = &v16;
      uint64_t v18 = 0x2020000000;
      uint64_t v19 = 0;
      if (a2)
      {
        CFArrayRef Value = CFDictionaryGetValue(a2, @"RouteName");
        v17[3] = (uint64_t)Value;
        uint64_t v10 = CFDictionaryGetValue(a2, @"RouteUID");
      }
      else
      {
        uint64_t v10 = 0;
      }
      if (dword_1E9359DA0)
      {
        int v15 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a1) {
        CFRetain(a1);
      }
      if (a2) {
        CFRetain(a2);
      }
      if (a3) {
        CFRetain(a3);
      }
      SharedQueue = FigRoutingManagerGetSharedQueue();
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = __routingContext_AddToSelectedRouteDescriptors_block_invoke;
      v13[3] = &unk_1E57C8E58;
      v13[4] = &v16;
      void v13[5] = a2;
      void v13[6] = v8;
      v13[7] = v10;
      v13[8] = a3;
      v13[9] = a1;
      MXDispatchAsync((uint64_t)"routingContext_AddToSelectedRouteDescriptors", (uint64_t)"FigRoutingContext.m", 1904, 0, 0, SharedQueue, (uint64_t)v13);
      _Block_object_dispose(&v16, 8);
      return 0;
    }
    else
    {
      return 4294955276;
    }
  }
  return result;
}

void sub_194E30A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_RemoveFromSelectedRoutes(const void *a1, const void *a2, const void *a3)
{
  uint64_t result = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 0);
  if (!result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a2))
    {
      return 4294955269;
    }
    else
    {
      if (a1) {
        CFRetain(a1);
      }
      if (a2) {
        CFRetain(a2);
      }
      if (a3) {
        CFRetain(a3);
      }
      SharedQueue = FigRoutingManagerGetSharedQueue();
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __routingContext_RemoveFromSelectedRoutes_block_invoke;
      v9[3] = &__block_descriptor_64_e5_v8__0l;
      v9[4] = DerivedStorage;
      v9[5] = a2;
      void v9[6] = a3;
      void v9[7] = a1;
      MXDispatchAsync((uint64_t)"routingContext_RemoveFromSelectedRoutes", (uint64_t)"FigRoutingContext.m", 2022, 0, 0, SharedQueue, (uint64_t)v9);
      return 0;
    }
  }
  return result;
}

uint64_t routingContext_RemoveFromSelectedRouteDescriptors(const void *a1, const void *a2, const void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal((uint64_t)a1, 1);
  *((_DWORD *)v17 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      if (a1) {
        CFRetain(a1);
      }
      if (a2) {
        CFRetain(a2);
      }
      if (a3) {
        CFRetain(a3);
      }
      if (a2)
      {
        CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"RouteName");
        uint64_t v9 = CFDictionaryGetValue((CFDictionaryRef)a2, @"RouteUID");
      }
      else
      {
        CFArrayRef Value = 0;
        uint64_t v9 = 0;
      }
      if (dword_1E9359DA0)
      {
        int v15 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      SharedQueue = FigRoutingManagerGetSharedQueue();
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = __routingContext_RemoveFromSelectedRouteDescriptors_block_invoke;
      v13[3] = &unk_1E57C61F0;
      void v13[6] = DerivedStorage;
      v13[7] = Value;
      v13[8] = v9;
      v13[9] = a3;
      v13[4] = &v16;
      void v13[5] = a2;
      void v13[10] = a1;
      MXDispatchAsync((uint64_t)"routingContext_RemoveFromSelectedRouteDescriptors", (uint64_t)"FigRoutingContext.m", 2087, 0, 0, SharedQueue, (uint64_t)v13);
      uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v17 + 6);
    }
    else
    {
      uint64_t IsOperationOnSystemInputContextAllowedInternal = 4294955276;
    }
  }
  _Block_object_dispose(&v16, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E30E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CreateCommChannel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v11 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __routingContext_CreateCommChannel_block_invoke;
    v9[3] = &unk_1E57C6180;
    v9[4] = &v10;
    v9[5] = DerivedStorage;
    void v9[6] = a2;
    void v9[7] = a3;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CreateCommChannel", (uint64_t)"FigRoutingContext.m", 1020, 0, 0, SharedQueue, (uint64_t)v9);
    uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v11 + 6);
  }
  _Block_object_dispose(&v10, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E30F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_SendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v19 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1E9359DA0)
    {
      int v17 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __routingContext_SendData_block_invoke;
    v15[3] = &unk_1E57C61F0;
    void v15[6] = a1;
    v15[7] = a4;
    v15[4] = &v18;
    v15[5] = DerivedStorage;
    void v15[8] = a5;
    v15[9] = a2;
    v15[10] = a3;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_SendData", (uint64_t)"FigRoutingContext.m", 1115, 0, 0, SharedQueue, (uint64_t)v15);
    uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v19 + 6);
  }
  _Block_object_dispose(&v18, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E311F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v12 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1E9359DA0)
    {
      int v10 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __routingContext_CloseCommChannel_block_invoke;
    v8[3] = &unk_1E57C5878;
    v8[4] = &v11;
    v8[5] = DerivedStorage;
    v8[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CloseCommChannel", (uint64_t)"FigRoutingContext.m", 1197, 0, 0, SharedQueue, (uint64_t)v8);
    uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v12 + 6);
  }
  _Block_object_dispose(&v11, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E31434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v19 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1E9359DA0)
    {
      int v17 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __routingContext_SendCommand_block_invoke;
    v15[3] = &unk_1E57C61F0;
    void v15[6] = a1;
    v15[7] = a4;
    v15[4] = &v18;
    v15[5] = DerivedStorage;
    void v15[8] = a5;
    v15[9] = a2;
    v15[10] = a3;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_SendCommand", (uint64_t)"FigRoutingContext.m", 1287, 0, 0, SharedQueue, (uint64_t)v15);
    uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v19 + 6);
  }
  _Block_object_dispose(&v18, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E31698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CreateCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v12 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage() == 9)
    {
      DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __routingContext_CreateCommChannelForDeviceID_block_invoke;
      v10[3] = &unk_1E57C6180;
      v10[4] = &v11;
      void v10[5] = a2;
      v10[6] = a3;
      void v10[7] = a4;
      MXDispatchSync((uint64_t)"routingContext_CreateCommChannelForDeviceID", (uint64_t)"FigRoutingContext.m", 1058, 0, 0, DataTransmissionQueue, (uint64_t)v10);
      uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v12 + 6);
    }
    else
    {
      uint64_t IsOperationOnSystemInputContextAllowedInternal = 4294955271;
      *((_DWORD *)v12 + 6) = -12025;
    }
  }
  _Block_object_dispose(&v11, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E317E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_SendDataForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  int v18 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v16 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage() == 9)
    {
      DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      v14[2] = __routingContext_SendDataForDeviceID_block_invoke;
      v14[3] = &unk_1E57C8E58;
      v14[4] = &v15;
      v14[5] = a2;
      v14[6] = a3;
      v14[7] = a4;
      v14[8] = a5;
      void v14[9] = a6;
      MXDispatchSync((uint64_t)"routingContext_SendDataForDeviceID", (uint64_t)"FigRoutingContext.m", 1170, 0, 0, DataTransmissionQueue, (uint64_t)v14);
      uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v16 + 6);
    }
    else
    {
      uint64_t IsOperationOnSystemInputContextAllowedInternal = 4294955271;
      *((_DWORD *)v16 + 6) = -12025;
    }
  }
  _Block_object_dispose(&v15, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E31944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_CloseCommChannelForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  *((_DWORD *)v10 + 6) = IsOperationOnSystemInputContextAllowedInternal;
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage() == 9)
    {
      DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      _OWORD v8[2] = __routingContext_CloseCommChannelForDeviceID_block_invoke;
      v8[3] = &unk_1E57C5878;
      v8[4] = &v9;
      v8[5] = a2;
      v8[6] = a3;
      MXDispatchSync((uint64_t)"routingContext_CloseCommChannelForDeviceID", (uint64_t)"FigRoutingContext.m", 1232, 0, 0, DataTransmissionQueue, (uint64_t)v8);
      uint64_t IsOperationOnSystemInputContextAllowedInternal = *((unsigned int *)v10 + 6);
    }
    else
    {
      uint64_t IsOperationOnSystemInputContextAllowedInternal = 4294955271;
      *((_DWORD *)v10 + 6) = -12025;
    }
  }
  _Block_object_dispose(&v9, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194E31A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_ResetPredictedSelectedRouteDescriptor(uint64_t a1)
{
  uint64_t IsOperationOnSystemInputContextAllowedInternal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __routingContext_ResetPredictedSelectedRouteDescriptor_block_invoke;
    void v5[3] = &__block_descriptor_40_e5_v8__0l;
    v5[4] = DerivedStorage;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_ResetPredictedSelectedRouteDescriptor", (uint64_t)"FigRoutingContext.m", 1712, 0, 0, SharedQueue, (uint64_t)v5);
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_CopySelectedBufferedEndpointForTesting(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  SharedQueue = FigRoutingManagerGetSharedQueue();
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __routingContext_CopySelectedBufferedEndpointForTesting_block_invoke;
  v10[3] = &unk_1E57C5878;
  v10[4] = &v11;
  void v10[5] = DerivedStorage;
  v10[6] = a2;
  MXDispatchAsyncAndWait((uint64_t)"routingContext_CopySelectedBufferedEndpointForTesting", (uint64_t)"FigRoutingContext.m", 1769, 0, 0, SharedQueue, (uint64_t)v10);
  uint64_t v8 = v12 + 3;
  uint64_t v7 = (const void *)v12[3];
  if (a3)
  {
    *a3 = v7;
LABEL_5:
    *uint64_t v8 = 0;
    goto LABEL_6;
  }
  if (v7)
  {
    CFRelease(v7);
    uint64_t v8 = v12 + 3;
    goto LABEL_5;
  }
LABEL_6:
  _Block_object_dispose(&v11, 8);
  return 0;
}

void sub_194E31C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_AddToSelectedRouteDescriptorsWithCompletionCallback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = routingContext_AddClientRouteRequestIDToDictionary(a3);
  -[MXRoutingContextCallbackHelper initWithRoutingContext:routeConfigUpdateID:callback:context:]([MXRoutingContextCallbackHelper alloc], "initWithRoutingContext:routeConfigUpdateID:callback:context:", a1, [v9 objectForKey:@"clientRouteRequestID"], a4, a5);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = *(uint64_t (**)(uint64_t, uint64_t, id))(v11 + 88);
  if (v12)
  {
    uint64_t v13 = v12(a1, a2, v9);
    if (!v9) {
      return v13;
    }
    goto LABEL_8;
  }
  uint64_t v13 = 4294954514;
  if (v9) {
LABEL_8:
  }
    CFRelease(v9);
  return v13;
}

uint64_t routingContext_RemoveFromSelectedRouteDescriptorsWithCompletionCallback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = routingContext_AddClientRouteRequestIDToDictionary(a3);
  -[MXRoutingContextCallbackHelper initWithRoutingContext:routeConfigUpdateID:callback:context:]([MXRoutingContextCallbackHelper alloc], "initWithRoutingContext:routeConfigUpdateID:callback:context:", a1, [v9 objectForKey:@"clientRouteRequestID"], a4, a5);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = *(uint64_t (**)(uint64_t, uint64_t, id))(v11 + 104);
  if (v12)
  {
    uint64_t v13 = v12(a1, a2, v9);
    if (!v9) {
      return v13;
    }
    goto LABEL_8;
  }
  uint64_t v13 = 4294954514;
  if (v9) {
LABEL_8:
  }
    CFRelease(v9);
  return v13;
}

uint64_t routingContext_SelectRouteDescriptorWithCompletionCallback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = routingContext_AddClientRouteRequestIDToDictionary(a3);
  -[MXRoutingContextCallbackHelper initWithRoutingContext:routeConfigUpdateID:callback:context:]([MXRoutingContextCallbackHelper alloc], "initWithRoutingContext:routeConfigUpdateID:callback:context:", a1, [v9 objectForKey:@"clientRouteRequestID"], a4, a5);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = *(uint64_t (**)(uint64_t, uint64_t, id))(v11 + 16);
  if (v12)
  {
    uint64_t v13 = v12(a1, a2, v9);
    if (!v9) {
      return v13;
    }
    goto LABEL_8;
  }
  uint64_t v13 = 4294954514;
  if (v9) {
LABEL_8:
  }
    CFRelease(v9);
  return v13;
}

uint64_t routingContext_SelectRouteDescriptorsWithCompletionCallback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = routingContext_AddClientRouteRequestIDToDictionary(a3);
  -[MXRoutingContextCallbackHelper initWithRoutingContext:routeConfigUpdateID:callback:context:]([MXRoutingContextCallbackHelper alloc], "initWithRoutingContext:routeConfigUpdateID:callback:context:", a1, [v9 objectForKey:@"clientRouteRequestID"], a4, a5);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = *(uint64_t (**)(uint64_t, uint64_t, id))(v11 + 48);
  if (v12)
  {
    uint64_t v13 = v12(a1, a2, v9);
    if (!v9) {
      return v13;
    }
    goto LABEL_8;
  }
  uint64_t v13 = 4294954514;
  if (v9) {
LABEL_8:
  }
    CFRelease(v9);
  return v13;
}

void routingContext_sendDataCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  if (dword_1E9359DA0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
  {
    uint64_t v8 = (void (*)(CFTypeRef, uint64_t, uint64_t, CFTypeRef))a4[1];
    if (v8) {
      v8(*a4, a2, a3, a4[2]);
    }
    CFRelease(*a4);
    free(a4);
  }
}

void routingContext_sendCommandCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  if (dword_1E9359DA0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
  {
    uint64_t v8 = (void (*)(CFTypeRef, uint64_t, uint64_t, CFTypeRef))a4[1];
    if (v8) {
      v8(*a4, a3, a2, a4[2]);
    }
    CFRelease(*a4);
    free(a4);
  }
}

id routingContext_AddClientRouteRequestIDToDictionary(void *a1)
{
  CFTypeRef v2 = (void *)MEMORY[0x1997179E0]();
  if (a1) {
    id v3 = (id)[a1 mutableCopy];
  }
  else {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  id v4 = v3;
  objc_msgSend(v3, "setObject:forKey:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29128], "UUID"), "UUIDString"), @"clientRouteRequestID");
  return v4;
}

void MXInitialize()
{
  if (MXInitialize_onceToken != -1) {
    dispatch_once(&MXInitialize_onceToken, &__block_literal_global_49);
  }
}

void __MXInitialize_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1997179E0]();
  +[MXInitialization start];
  cmsmInitializeCMSessionManager();
}

dispatch_semaphore_t MXSystemControllerSetup()
{
  gMXSystemControllerList = [objc_alloc(MEMORY[0x1E4F28F50]) initWithOptions:5];
  gSidekickMXSystemControllerList = [objc_alloc(MEMORY[0x1E4F28F50]) initWithOptions:5];
  gMXSystemControllerListActiveReaders = 0;
  gMXSystemControllerListReadLock = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28E08]);
  dispatch_semaphore_t result = dispatch_semaphore_create(1);
  gMXSystemControllerListWriteSemaphore = (uint64_t)result;
  return result;
}

uint64_t MXSystemMirroring_PickEndpoint(const void *a1, const void *a2, CFDictionaryRef theDict, const void *a4)
{
  uint64_t v8 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(theDict);
  if (!a2)
  {
    mxSystemMirroring_disconnect((uint64_t)a1, theDict);
    uint64_t v9 = 0;
    if (!v8) {
      return v9;
    }
    goto LABEL_3;
  }
  uint64_t v9 = mxSystemMirroring_preprocessPickEndpoint(a2, a1, v8, a4);
  if (v8) {
LABEL_3:
  }
    CFRelease(v8);
  return v9;
}

void mxSystemMirroring_disconnect(uint64_t a1, const __CFDictionary *a2)
{
  v24[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  FigRoutingContextUtilities_LogCurrentState(a1, a2);
  id v4 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a2);
  FigRoutingManagerLogRoutingRequestDetails(@"mxSystemMirroring_disconnect - ", 0, 0, 0, a1, v4);
  v24[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)v24);
  if (FigRoutingManagerUtilities_IsEndpointPicked(0, (uint64_t)v24[0]))
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v24[0], v4, @"configUpdateReasonEndedNoop");
  }
  else
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v24[0], a2, @"configUpdateReasonStarted");
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
    CFTypeRef v22 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v24[0], 0, (uint64_t)&v22);
    CFTypeRef v21 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)cf, 0, (uint64_t)&v21);
    CFTypeRef v20 = 0;
    if (v22)
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v7 = v6 ? v6 : 0;
      uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
      if (v8) {
        v8(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &v20);
      }
    }
    if (v21 == v22 && FigRoutingManagerIsEndpointOfType((uint64_t)v21))
    {
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManager_RouteAwayFromAirPlayEndpoint((uint64_t)v22, (uint64_t)v24[0], 1);
      FigRoutingManagerLogEndpointID(@"Going to deactivate endpoint with name=", (uint64_t)v22, @"because most recent currently activating endpoint is NULL", 1);
      mxSystemMirroring_iOSDeactivateEndpoint(v22, 1, (uint64_t)a2);
      uint64_t v10 = CMSMUtility_CopyCurrentRouteIdentifiers();
      unsigned int NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
      if (NumberOfCurrentOutputPorts)
      {
        uint64_t v12 = NumberOfCurrentOutputPorts;
        CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        CFIndex v14 = 0;
        uint64_t v15 = *MEMORY[0x1E4F20660];
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v14);
          uint64_t v17 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v15, (uint64_t)cf);
          if (v17)
          {
            int v18 = v17;
            CFArrayAppendValue(Mutable, v17);
            CFRelease(v18);
          }
          ++v14;
        }
        while (v12 != v14);
      }
      else
      {
        CFArrayRef Mutable = 0;
      }
      int v19 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(Mutable, 0);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, Mutable, @"configUpdateReasonEndedSuccess", (uint64_t)a2, (uint64_t)v19);
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)cf, 0);
      if (v19) {
        CFRelease(v19);
      }
      if (v10) {
        CFRelease(v10);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    if (!MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed()) {
      FigRoutingManagerContextUtilities_SetPickedEndpoints(v24[0], 0, @"configUpdateReasonEndedSuccess", (uint64_t)a2, 0);
    }
    mxSystemMirroring_iOSDeactivateEndpoint(v22, 1, (uint64_t)a2);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v22)
    {
      CFRelease(v22);
      CFTypeRef v22 = 0;
    }
    if (v21)
    {
      CFRelease(v21);
      CFTypeRef v21 = 0;
    }
    if (v20) {
      CFRelease(v20);
    }
  }
  if (v24[0])
  {
    CFRelease(v24[0]);
    v24[0] = 0;
  }
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t mxSystemMirroring_preprocessPickEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t IsEndpointOfType = FigRoutingManagerIsEndpointOfType((uint64_t)a1);
  if (!IsEndpointOfType) {
    return 0;
  }
  FigRoutingContextUtilities_LogCurrentState(IsEndpointOfType, v9);
  CFTypeRef v49 = 0;
  uint64_t v10 = *MEMORY[0x1E4F20F28];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v13 + 48);
  if (v15) {
    v15(CMBaseObject, v10, allocator, &v49);
  }
  uint64_t v16 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  FigRoutingManagerLogRoutingRequestDetails(@"mxSystemMirroring_preprocessPickEndpoint - ", (uint64_t)a1, 0, 0, (uint64_t)a2, v16);
  CFTypeRef v48 = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a2, (uint64_t)&v48);
  CFArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, a1);
  BOOL v18 = 1;
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 1);
  CFDictionaryRef v43 = v16;
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint(0, (uint64_t)a2, (uint64_t)a1, (uint64_t)v16, (uint64_t)a4);
  CFTypeRef v46 = 0;
  CFTypeRef v47 = 0;
  FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(&v46, &v47, 0);
  uint64_t v19 = FigRoutingManagerContextUtilities_CopyScreenEndpointUUID((uint64_t)a2);
  if (v19)
  {
    CFTypeRef v20 = (const void *)v19;
    int IsRoutedToLocalAirplayReceiver = FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver((uint64_t)a2);
    BOOL v18 = IsRoutedToLocalAirplayReceiver != 0;
    if (!IsRoutedToLocalAirplayReceiver && dword_1E9359DC0)
    {
      LODWORD(cf) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRelease(v20);
  }
  if (!v46) {
    goto LABEL_20;
  }
  int IsCurrentRouteHandoff = FigRoutingManagerUtilities_IsCurrentRouteHandoff();
  char v24 = !v18;
  if (IsCurrentRouteHandoff) {
    char v24 = 1;
  }
  if (v24)
  {
LABEL_20:
    theArray[0] = 0;
    CFArrayRef v50 = 0;
    FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(-1, theArray, &v50, 0, 0);
    if (theArray[0])
    {
      CFIndex Count = CFArrayGetCount(theArray[0]);
      if (Count >= 1)
      {
        CFIndex v29 = Count;
        for (CFIndex i = 0; i != v29; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], i);
          uint64_t v32 = CFArrayGetValueAtIndex(v50, i);
          if (ValueAtIndex != a1 || v32 != a2)
          {
            uint64_t v34 = v32;
            CFMutableDictionaryRef v35 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            FigCFDictionarySetValue();
            CFTypeRef cf = 0;
            FigRoutingManagerCreateEndpointDeactivateCompletionContext(v34, &cf);
            FigRoutingManagerLogEndpointID(@"Preprocess - Calling to deactivate endpoint with name=", (uint64_t)ValueAtIndex, 0, 1);
            FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)v34, (uint64_t)ValueAtIndex, @"configUpdateReasonEndedUserCancelled");
            mxSystemMirroring_iOSDeactivateEndpoint(ValueAtIndex, 0, 0);
            if (v35) {
              CFRelease(v35);
            }
          }
        }
      }
    }
    CFDictionaryRef v36 = v43;
    uint64_t v14 = mxSystemMirroring_iOSActivateEndpoint(a1, a2, v43, a4);
    if (theArray[0])
    {
      CFRelease(theArray[0]);
      theArray[0] = 0;
    }
    if (v50) {
      CFRelease(v50);
    }
  }
  else
  {
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 2);
    CMSMAP_MakeAirPlayHandOffPortRoutable(1, (uint64_t)a2);
    CFTypeRef cf = 0;
    uint64_t v25 = FigEndpointGetCMBaseObject();
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v27 + 48);
    if (v38) {
      v38(v25, v10, allocator, &cf);
    }
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v46))
    {
      if (dword_1E9359DC0)
      {
        int v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      mxSystemMirroring_iOSDeactivateEndpoint(v46, 1, 0);
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)v46))
    {
      if (dword_1E9359DC0)
      {
        uint64_t v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)v46, v47, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
      CMSMVAUtility_DestroyMusicVADIfNeeded((uint64_t)v47);
      FigRoutingManagerContextUtilities_SetPickedEndpoints(v47, 0, @"configUpdateReasonEndedBottomUpRouteChange", 0, 0);
    }
    CFDictionaryRef v36 = v43;
    uint64_t v14 = mxSystemMirroring_iOSActivateEndpoint(a1, a2, v43, a4);
    if (cf) {
      CFRelease(cf);
    }
  }
  if (v47)
  {
    CFRelease(v47);
    CFTypeRef v47 = 0;
  }
  CFTypeRef v41 = v48;
  if (v48)
  {
    CFRelease(v48);
    CFTypeRef v48 = 0;
  }
  FigRoutingContextUtilities_LogCurrentState(v41, v37);
  if (v49)
  {
    CFRelease(v49);
    CFTypeRef v49 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v46)
  {
    CFRelease(v46);
    CFTypeRef v46 = 0;
  }
  if (v36) {
    CFRelease(v36);
  }
  return v14;
}

uint64_t MXSystemMirroring_PickRouteDescriptor(const void *a1, CFDictionaryRef theDict, const __CFDictionary *a3, const __CFDictionary *a4)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (theDict)
  {
    CFDictionaryGetValue(theDict, @"RouteName");
    CFDictionaryGetValue(theDict, @"RouteUID");
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!FigCFDictionaryGetCount())
  {
    mxSystemMirroring_disconnect((uint64_t)a1, a3);
    return 0;
  }
  uint64_t v9 = FigEndpointDescriptorUtility_CopyEndpointFromDescriptor((uint64_t)theDict, (uint64_t)a1);
  if (v9)
  {
    uint64_t v10 = (const void *)v9;
    *(void *)os_log_type_t type = 0;
    CFArrayRef theArray = 0;
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)type);
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints(*(uint64_t *)type, (uint64_t)&theArray);
    if (theArray && (CFIndex Count = CFArrayGetCount(theArray), Count >= 1))
    {
      CFIndex v12 = Count;
      if (CFArrayGetValueAtIndex(theArray, 0) == v10)
      {
        uint64_t v16 = 0;
        BOOL v17 = 1;
      }
      else
      {
        CFIndex v13 = 1;
        while (1)
        {
          CFIndex v14 = v13;
          if (v12 == v13) {
            break;
          }
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13);
          CFIndex v13 = v14 + 1;
          if (ValueAtIndex == v10)
          {
            uint64_t v16 = v14;
            goto LABEL_21;
          }
        }
        uint64_t v16 = 0;
LABEL_21:
        BOOL v17 = v14 < v12;
      }
    }
    else
    {
      BOOL v17 = 0;
      uint64_t v16 = 0;
    }
    CFTypeRef v26 = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    char v24 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v23 + 48);
    if (v24) {
      v24(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &v26);
    }
    if (v17)
    {
      if (dword_1E9359DC0)
      {
        uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      cf[0] = 0;
      FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex(*(uint64_t *)type, v16, (uint64_t)cf);
      FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex(*(uint64_t *)type, v16);
      FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo(*(uint64_t *)type, (uint64_t)cf[0]);
      FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(*(uint64_t *)type, a3, a4);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    else if (FigRoutingManagerUtilities_IsEndpointPicked(v10, *(uint64_t *)type))
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(*(uint64_t *)type, a3, @"configUpdateReasonEndedNoop");
    }
    else
    {
      mxSystemMirroring_preprocessPickEndpoint(v10, a1, a3, a4);
    }
    if (v26)
    {
      CFRelease(v26);
      CFTypeRef v26 = 0;
    }
    CFRelease(v10);
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
    if (*(void *)type) {
      CFRelease(*(CFTypeRef *)type);
    }
    return 0;
  }
  BOOL v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v19 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v19, @"configUpdateReasonEndedFailed");
  if (v19) {
    CFRelease(v19);
  }
  return 4294954296;
}

void MXSystemMirroring_iOSHandleEndpointAudioActivation(void *a1, uint64_t a2, uint64_t a3, const void *a4, const __CFDictionary *a5)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  CFTypeRef v25 = 0;
  uint64_t v9 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFIndex v13 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
  if (v13) {
    v13(CMBaseObject, *MEMORY[0x1E4F21048], v9, &v25);
  }
  CFTypeRef v24 = 0;
  uint64_t v14 = FigEndpointGetCMBaseObject();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  BOOL v17 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v16 + 48);
  if (v17) {
    v17(v14, *MEMORY[0x1E4F20F28], v9, &v24);
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRoutingManagerStartDeactivateAirPlayEndpointTimer(a1, a3, 5.0);
  int AirPlayPortForEndpoint = CMSMAP_FindAirPlayPortForEndpoint((uint64_t)a1);
  if (AirPlayPortForEndpoint)
  {
    int v20 = AirPlayPortForEndpoint;
    FigRoutingManagerStopDeactivateAirPlayEndpointTimer();
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 9);
    if (a5) {
      CFArrayRef Value = CFDictionaryGetValue(a5, @"defaultAudioToLocal");
    }
    else {
      CFArrayRef Value = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    if (Value == (const void *)*MEMORY[0x1E4F1CFD0])
    {
      if (dword_1E9359DC0)
      {
        uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a4, a1, @"configUpdateReasonEndedSuccess", (uint64_t)a5);
      FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a4);
    }
    else
    {
      if (!CMSMVAUtility_MakePortRoutable(v20, (uint64_t)a4))
      {
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a4, a1, @"configUpdateReasonEndedSuccess", (uint64_t)a5);
        cf[0] = 0;
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(cf[0], a1, @"configUpdateReasonEndedSuccess", (uint64_t)a5);
        FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a4);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        goto LABEL_30;
      }
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a4, 0, @"configUpdateReasonEndedFailed");
      if (dword_1E9359DC0)
      {
        uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      mxSystemMirroring_iOSDeactivateEndpoint(a1, 0, 0);
    }
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
LABEL_30:
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)cf);
    FigRoutingManagerContextUtilities_StopMirroringTimer((uint64_t)cf[0]);
    FigRoutingManagerContextUtilities_StopDiscoveryTimer((uint64_t)cf[0]);
    FigRoutingManagerContextUtilities_SetScreenEndpoint((uint64_t)cf[0], 0);
    FigRoutingManagerContextUtilities_SetAudioEndpoint((uint64_t)cf[0], 0);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    goto LABEL_32;
  }
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 8);
LABEL_32:
  if (v24)
  {
    CFRelease(v24);
    CFTypeRef v24 = 0;
  }
  if (v25) {
    CFRelease(v25);
  }
}

void mxSystemMirroring_iOSDeactivateEndpoint(const void *a1, uint64_t a2, uint64_t a3)
{
  v38[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  SharedManager = FigRoutingManagerGetSharedManager();
  CFTypeRef v36 = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v9 + 48);
  if (v10) {
    v10(CMBaseObject, *MEMORY[0x1E4F20F28], v6, &v36);
  }
  if (dword_1E9359DC0)
  {
    LODWORD(v33) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v38[0] = 0;
  uint64_t v12 = FigEndpointGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v14 + 48);
  if (v15) {
    v15(v12, *MEMORY[0x1E4F20E40], v6, v38);
  }
  if (v38[0] == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    CFRetain(a1);
    BOOL v18 = *((void *)SharedManager + 1);
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = __mxSystemMirroring_iOSDeactivateEndpoint_block_invoke;
    v34[3] = &__block_descriptor_40_e5_v8__0l;
    v34[4] = a1;
    MXDispatchAsync((uint64_t)"mxSystemMirroring_iOSDeactivateEndpoint", (uint64_t)"MXSystemMirroring_Embedded.m", 482, 0, 0, v18, (uint64_t)v34);
    CFTypeRef cf = 0;
    uint64_t v19 = FigEndpointGetCMBaseObject();
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v23 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v21 + 48);
    if (v23) {
      v23(v19, *MEMORY[0x1E4F20F78], v6, &cf);
    }
    FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)cf);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetValue();
    FigRoutingManagerUnregisterFromFigEndpointNotifications((uint64_t)a1);
    uint64_t v33 = 0;
    FigRoutingManagerCreateEndpointDeactivateCompletionContext(cf, &v33);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v26 = v25 ? v25 : 0;
      uint64_t v27 = *(void (**)(const void *, void))(v26 + 48);
      if (v27) {
        v27(a1, 0);
      }
    }
    uint64_t v28 = v33;
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = *(void (**)(const void *, CFMutableDictionaryRef, void (*)(const void *, uint64_t, uint64_t, int, uint64_t), uint64_t))(v30 + 16);
    if (v31) {
      v31(a1, Mutable, mxSystemMirroring_iOSEndpointDeactivateCompletionCallback, v28);
    }
    if (FigCFEqual() || FigCFEqual() || FigCFEqual())
    {
      uint64_t v32 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed;
    }
    else if (FigCFEqual() || FigCFEqual() || FigCFEqual())
    {
      uint64_t v32 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedSuccess;
    }
    else
    {
      if (!FigCFEqual()) {
        goto LABEL_43;
      }
      uint64_t v32 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedBottomUpRouteChange;
    }
    FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, 0, (uint64_t)*v32, a3, 0);
LABEL_43:
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_47;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v22 = *(void (**)(const void *, void))(v17 + 48);
    if (v22) {
      v22(a1, 0);
    }
    FigEndpointDeactivate();
  }
LABEL_47:
  if (v38[0])
  {
    CFRelease(v38[0]);
    v38[0] = 0;
  }
  if (v36) {
    CFRelease(v36);
  }
}

void MXSystemMirroring_HandleNewWirelessPorts(const void *a1, const void *a2)
{
  uint64_t v12 = 0;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)a2, &v12);
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)a2, (uint64_t)&cf);
  int v10 = 0;
  FigRoutingManagerContextUtilities_GetPickingState((uint64_t)a2, (uint64_t)&v10);
  if (v10 != 8)
  {
    if (v10 != 5 || !CMSMVAUtility_IsPortAvailableForEndpoint((uint64_t)v12, a1)) {
      goto LABEL_8;
    }
    int v4 = 6;
    goto LABEL_7;
  }
  if (CMSMVAUtility_IsPortAvailableForEndpoint((uint64_t)v12, a1))
  {
    int v4 = 9;
LABEL_7:
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, v4);
  }
LABEL_8:
  FigRoutingManagerContextUtilities_GetPickingState((uint64_t)a2, (uint64_t)&v10);
  if (v10 == 9)
  {
    uint64_t v9 = 0;
    FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)v12, (uint64_t)&v9);
    uint64_t v8 = 0;
    FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures((uint64_t)a2, (uint64_t)v12, (uint64_t)&v8);
    CFDictionaryRef theDict = 0;
    FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpointInfo((uint64_t)a2, &theDict);
    if (theDict)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CurrentlyActivatingEndpointsInfo_ClientRouteChangeOptions");
      CFAllocatorRef v6 = CFDictionaryGetValue(theDict, @"CurrentlyActivatingEndpointsInfo_InternalRouteChangeOptions");
    }
    else
    {
      CFDictionaryRef Value = 0;
      CFAllocatorRef v6 = 0;
    }
    mxSystemMirroring_iOSHandleFigEndpointFeaturesActivation(v12, v8, v9, a2, Value, (uint64_t)v6);
    if (theDict) {
      CFRelease(theDict);
    }
  }
  if (v12)
  {
    CFRelease(v12);
    uint64_t v12 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
}

void mxSystemMirroring_iOSHandleFigEndpointFeaturesActivation(void *a1, char a2, uint64_t a3, const void *a4, const __CFDictionary *a5, uint64_t a6)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((a2 & 2) != 0)
    {
      cf[0] = 0;
      FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)cf);
      if (!MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed()
        || MXSystemMirroring_IsDefaultRouteAirPlayReceiver()
        && FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver((uint64_t)cf[0]))
      {
        MXSystemMirroring_iOSHandleEndpointAudioActivation(a1, v12, a3, a4, a5);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    if (a2)
    {
      CFTypeRef v25 = 0;
      CFTypeRef v26 = 0;
      int IsPropertyTrue = FigEndpointUtility_EndpointPredicate_IsPropertyTrue();
      uint64_t v14 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      BOOL v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
      if (v18) {
        v18(CMBaseObject, *MEMORY[0x1E4F21048], v14, &v26);
      }
      uint64_t v19 = FigEndpointGetCMBaseObject();
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v21 + 48);
      if (v22)
      {
        v22(v19, *MEMORY[0x1E4F21040], v14, &v25);
        CFTypeRef v23 = v25;
      }
      else
      {
        CFTypeRef v23 = 0;
      }
      CMScreenHandleActivation(v26, v23);
      if (!(FigRoutingManagerIsEndpointOfType((uint64_t)a1) | IsPropertyTrue)) {
        FigEndpointCopyFirstStreamOfType();
      }
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed()
        && (!MXSystemMirroring_IsDefaultRouteAirPlayReceiver()
         || !FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver((uint64_t)a4)))
      {
        FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a4);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a4, a1, @"configUpdateReasonEndedSuccess", a6);
        FigRoutingManagerContextUtilities_StopMirroringTimer((uint64_t)a4);
      }
      if (v26)
      {
        CFRelease(v26);
        CFTypeRef v26 = 0;
      }
      if (v25) {
        CFRelease(v25);
      }
    }
  }
}

uint64_t MXSystemMirroring_IsTestCodeEnabled()
{
  return FigGetCFPreferenceNumberWithDefault();
}

uint64_t MXSystemMirroring_IsDefaultRouteAirPlayReceiver()
{
  if (MXSystemMirroring_IsDefaultRouteAirPlayReceiver_onceToken != -1) {
    dispatch_once(&MXSystemMirroring_IsDefaultRouteAirPlayReceiver_onceToken, &__block_literal_global_50);
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MXSystemMirroring_IsDefaultRouteAirPlayReceiver_isSystemMirroringDefaultRouteAirPlayReceiver;
}

uint64_t MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed()
{
  if (MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed_onceToken != -1) {
    dispatch_once(&MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed_onceToken, &__block_literal_global_24_0);
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed_isMirroringScreenAudioSeperate;
}

uint64_t mxSystemMirroring_iOSActivateEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  v61[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v8 = FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  CFMutableDictionaryRef EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions((uint64_t)a1, (uint64_t)a2, a3);
  uint64_t FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)a2);
  CFTypeRef cf = 0;
  uint64_t v10 = *MEMORY[0x1E4F20F28];
  uint64_t v48 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v13 + 48);
  if (v14) {
    v14(CMBaseObject, v10, v48, &cf);
  }
  uint64_t v46 = v10;
  if (dword_1E9359DC0)
  {
    LODWORD(v54) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v16 = v54;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (v17)
    {
      int v55 = 136315650;
      uint64_t v56 = "mxSystemMirroring_iOSActivateEndpoint";
      __int16 v57 = 2114;
      CFTypeRef v58 = cf;
      __int16 v59 = 2048;
      v60[0] = FigEndpointFeatures;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    CFMutableDictionaryRef EndpointDelegateContext = FigRoutingManagerCreateEndpointDelegateContext();
    uint64_t v19 = malloc_type_malloc(0x18uLL, 0x60040149E097CuLL);
    CFTypeRef v20 = a1 ? CFRetain(a1) : 0;
    v19[1] = v20;
    v19[2] = EndpointDelegateContext;
    *uint64_t v19 = 0;
    SharedManager = FigRoutingManagerGetSharedManager();
    MEMORY[0x199716EE0](SharedManager[7]);
    if (SharedManager[8]) {
      *(void *)SharedManager[9] = v19;
    }
    else {
      SharedManager[8] = v19;
    }
    SharedManager[9] = v19;
    MEMORY[0x199716EF0](SharedManager[7]);
    v61[3] = 0;
    v61[4] = 0;
    v61[0] = EndpointDelegateContext;
    v61[1] = FigRoutingManager_HandleAuthorizationRequiredDelegate;
    v61[2] = mxSystemMirroring_handleEndpointFailedDelegate;
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v23 = v22 ? v22 : 0;
    CFTypeRef v24 = *(void (**)(const void *, CFTypeRef *))(v23 + 48);
    if (v24) {
      v24(a1, v61);
    }
  }
  if (!v8)
  {
    if (a3)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(a3, @"authInfo");
      if (Value) {
        FigRoutingManager_SetAuthorizationOnEndpoint((uint64_t)a1, (uint64_t)Value);
      }
    }
    int v50 = 0;
    FigRoutingManagerContextUtilities_GetPickingState((uint64_t)a2, (uint64_t)&v50);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 5);
      *(void *)os_log_type_t type = 0;
      FigRoutingManagerCreateEndpointActivateCompletionContext(a2, a3, a4, EndpointActivateOptions, type);
      uint64_t v27 = *(uint64_t **)type;
      MutableCFArrayRef Copy = (const void *)FigCFDictionaryCreateMutableCopy();
      CFTypeRef v54 = 0;
      uint64_t v29 = FigEndpointGetCMBaseObject();
      uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v30) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v31 + 48);
      if (v32) {
        v32(v29, v46, v48, &v54);
      }
      if (dword_1E9359DC0)
      {
        unsigned int v53 = 0;
        os_log_type_t v52 = OS_LOG_TYPE_DEFAULT;
        uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v34 = v53;
        if (os_log_type_enabled(v33, v52)) {
          unsigned int v35 = v34;
        }
        else {
          unsigned int v35 = v34 & 0xFFFFFFFE;
        }
        if (v35)
        {
          int v55 = 136315906;
          uint64_t v56 = "mxSystemMirroring_endpointActivateWithCompletionCallback";
          __int16 v57 = 2114;
          CFTypeRef v58 = v54;
          __int16 v59 = 1024;
          LODWORD(v60[0]) = FigEndpointFeatures;
          WORD2(v60[0]) = 2114;
          *(void *)((char *)v60 + 6) = EndpointActivateOptions;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
      {
        if (v27)
        {
          uint64_t v36 = *v27;
          uint64_t v37 = v27[1];
        }
        else
        {
          uint64_t v36 = 0;
          uint64_t v37 = 0;
        }
        v61[0] = 0;
        uint64_t v38 = FigEndpointGetCMBaseObject();
        uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v40 = v39 ? v39 : 0;
        CFTypeRef v41 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v40 + 48);
        if (v41)
        {
          v41(v38, *MEMORY[0x1E4F20DF8], v48, v61);
          CFTypeRef v42 = v61[0];
        }
        else
        {
          CFTypeRef v42 = 0;
        }
        FigRoutingManagerSetMirroringModeOnBKSDisplayServices(EndpointActivateOptions, v36, v37, v42 == (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
        if (v61[0]) {
          CFRelease(v61[0]);
        }
      }
      uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v43) {
        uint64_t v44 = v43;
      }
      else {
        uint64_t v44 = 0;
      }
      uint64_t v45 = *(uint64_t (**)(const void *, uint64_t, const void *, void, uint64_t *))(v44 + 8);
      if (v45) {
        uint64_t v8 = v45(a1, FigEndpointFeatures, MutableCopy, mxSystemMirroring_endpointActivateCompletionCallback, v27);
      }
      else {
        uint64_t v8 = 4294954514;
      }
      if (v54)
      {
        CFRelease(v54);
        CFTypeRef v54 = 0;
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (EndpointActivateOptions) {
    CFRelease(EndpointActivateOptions);
  }
  return v8;
}

void mxSystemMirroring_handleEndpointFailedDelegate(const void *a1, uint64_t a2, const void *a3, const void *a4)
{
  if (a1 && a3)
  {
    SharedManager = FigRoutingManagerGetSharedManager();
    CFRetain(a1);
    CFRetain(a3);
    if (a4) {
      CFRetain(a4);
    }
    uint64_t v9 = *((void *)SharedManager + 1);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __mxSystemMirroring_handleEndpointFailedDelegate_block_invoke;
    v10[3] = &__block_descriptor_64_e5_v8__0l;
    v10[4] = a4;
    void v10[5] = a3;
    v10[6] = a1;
    void v10[7] = a2;
    MXDispatchAsync((uint64_t)"mxSystemMirroring_handleEndpointFailedDelegate", (uint64_t)"MXSystemMirroring_Embedded.m", 81, 0, 0, v9, (uint64_t)v10);
  }
}

void mxSystemMirroring_endpointActivateCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  SharedManager = FigRoutingManagerGetSharedManager();
  if (a5)
  {
    uint64_t v11 = *(const void **)a5;
    uint64_t v12 = *(const void **)(a5 + 8);
    uint64_t v13 = *(const void **)(a5 + 16);
    uint64_t v14 = *(void **)(a5 + 32);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  [v14 timeIntervalSinceNow];
  double v16 = v15;
  if (a1) {
    CFRetain(a1);
  }
  if (v11) {
    CFRetain(v11);
  }
  if (v12) {
    CFRetain(v12);
  }
  if (v13) {
    CFRetain(v13);
  }
  float v17 = fabs(v16) * 1000.0;
  id v18 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  uint64_t v19 = *((void *)SharedManager + 1);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = __mxSystemMirroring_endpointActivateCompletionCallback_block_invoke;
  v20[3] = &unk_1E57C8F98;
  v20[4] = v18;
  v20[5] = a1;
  int v21 = a4;
  v20[6] = a3;
  void v20[7] = a2;
  float v22 = v17;
  void v20[8] = v11;
  v20[9] = v12;
  v20[10] = v13;
  v20[11] = a5;
  MXDispatchAsync((uint64_t)"mxSystemMirroring_endpointActivateCompletionCallback", (uint64_t)"MXSystemMirroring_Embedded.m", 333, 0, 0, v19, (uint64_t)v20);
}

void __mxSystemMirroring_handleEndpointFailedDelegate_block_invoke(uint64_t a1)
{
  v50[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 32);
  if (v4) {
    CFDictionaryRef Value = CFDictionaryGetValue(v4, @"EndpointDelegateContextKey_ClientRouteChangeOptions");
  }
  else {
    CFDictionaryRef Value = 0;
  }
  int v49 = 0;
  FigCFDictionaryGetInt32IfPresent();
  BOOL IsEndpointActivated = FigRoutingManagerIsEndpointActivated(*(void *)(a1 + 48));
  if (IsEndpointActivated)
  {
    *(void *)CFTypeRef v47 = 0;
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v10 + 48);
    if (v13) {
      v13(CMBaseObject, *MEMORY[0x1E4F20E38], v2, &cf);
    }
    uint64_t v14 = *MEMORY[0x1E4F20F28];
    uint64_t v15 = FigEndpointGetCMBaseObject();
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    id v18 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, os_log_type_t *))(v17 + 48);
    if (v18) {
      v18(v15, v14, v2, v47);
    }
    uint64_t v19 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint(*(void *)(a1 + 48), 0);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    CFTypeRef v46 = 0;
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&v46);
    CFTypeRef v45 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v46, 0, (uint64_t)&v45);
    CFTypeRef v44 = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v44);
    CFTypeRef v43 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v44, 0, (uint64_t)&v43);
    if (v45)
    {
      uint64_t v20 = FigEndpointGetCMBaseObject();
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, os_log_type_t *))(v22 + 48);
      if (v23) {
        v23(v20, v14, v2, v47);
      }
      if (v45 && FigRoutingManagerIsEndpointOfType((uint64_t)v45))
      {
        CFTypeRef v24 = &qword_1E9359000;
        if (FigCFEqual())
        {
          if (dword_1E9359DC0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CFTypeRef v24 = &qword_1E9359000;
          }
          FigRoutingManager_RouteAwayFromAirPlayEndpoint((uint64_t)v45, (uint64_t)v46, 1);
        }
        mxSystemMirroring_iOSDeactivateEndpoint(*(const void **)(a1 + 48), 0, (uint64_t)Value);
        CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E4F205A0]);
        if (FigCFEqual()) {
          FigRoutingManager_iOSHandleStartupFailed(v49, Mutable);
        }
        uint64_t v29 = CMSMUtility_CopyCurrentRouteIdentifiers();
        unsigned int NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
        if (NumberOfCurrentOutputPorts)
        {
          uint64_t v31 = NumberOfCurrentOutputPorts;
          uint64_t v32 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
          CFIndex v33 = 0;
          uint64_t v34 = *MEMORY[0x1E4F20660];
          do
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v29, v33);
            uint64_t v36 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v34, (uint64_t)v44);
            if (v36)
            {
              uint64_t v37 = v36;
              CFArrayAppendValue(v32, v36);
              CFRelease(v37);
            }
            ++v33;
          }
          while (v31 != v33);
          CFTypeRef v24 = &qword_1E9359000;
        }
        else
        {
          uint64_t v32 = 0;
        }
        uint64_t v38 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v32, 0);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(v44, v32, @"configUpdateReasonEndedSuccess", (uint64_t)Value, (uint64_t)v38);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v44, 0);
        if (*((_DWORD *)v24 + 880))
        {
          uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v38) {
          CFRelease(v38);
        }
        if (v29) {
          CFRelease(v29);
        }
        if (v32) {
          CFRelease(v32);
        }
      }
    }
    if (*(void *)v47)
    {
      CFRelease(*(CFTypeRef *)v47);
      *(void *)CFTypeRef v47 = 0;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v46)
    {
      CFRelease(v46);
      CFTypeRef v46 = 0;
    }
    if (v45)
    {
      CFRelease(v45);
      CFTypeRef v45 = 0;
    }
    if (v44)
    {
      CFRelease(v44);
      CFTypeRef v44 = 0;
    }
    CFTypeRef v28 = v43;
    if (v43) {
LABEL_67:
    }
      CFRelease(v28);
  }
  else if (MX_FeatureFlags_IsAirPlayDaemonEnabled(IsEndpointActivated, v7))
  {
    CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 32);
    if (v11) {
      uint64_t v12 = CFDictionaryGetValue(v11, @"EndpointDelegateContextKey_RoutingContextUUID");
    }
    else {
      uint64_t v12 = 0;
    }
    char FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures(*(void *)(a1 + 48), (uint64_t)v12);
    v50[0] = 0;
    FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)v12, v50);
    FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 48), FigEndpointFeatures, (uint64_t)v12);
    FigRoutingManagerContextUtilities_RemoveActivatedEndpoint((uint64_t)v12, *(void *)(a1 + 48), *(void *)(a1 + 56));
    if (FigCFEqual()) {
      FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(v12, 0, @"configUpdateReasonEndedFailed", 0);
    }
    CFTypeRef v28 = v50[0];
    if (v50[0]) {
      goto LABEL_67;
    }
  }
  else if (dword_1E9359DC0)
  {
    LODWORD(cf) = 0;
    v47[0] = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v40 = *(const void **)(a1 + 48);
  if (v40) {
    CFRelease(v40);
  }
  CFTypeRef v41 = *(const void **)(a1 + 40);
  if (v41) {
    CFRelease(v41);
  }
  CFTypeRef v42 = *(const void **)(a1 + 32);
  if (v42) {
    CFRelease(v42);
  }
}

void __mxSystemMirroring_endpointActivateCompletionCallback_block_invoke(uint64_t a1)
{
  v38[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) timeIntervalSinceNow];
  CFTypeRef v35 = 0;
  CFTypeRef v36 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef v34 = 0;
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFAllocatorRef v6 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v5 + 48);
    if (v6) {
      v6(CMBaseObject, *MEMORY[0x1E4F20F28], v2, &v36);
    }
    uint64_t v7 = FigEndpointGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
    if (v10) {
      v10(v7, *MEMORY[0x1E4F20E38], v2, &v35);
    }
    uint64_t v11 = FigEndpointGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v13 + 48);
    if (v14) {
      v14(v11, *MEMORY[0x1E4F20D08], v2, &v34);
    }
    uint64_t v15 = FigEndpointGetCMBaseObject();
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    id v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
    if (v18) {
      v18(v15, *MEMORY[0x1E4F20EF0], v2, &v33);
    }
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v38[0] = 0;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint(*(void *)(a1 + 64), v38);
  int v20 = *(_DWORD *)(a1 + 96);
  if (v20 && v20 != -16727)
  {
    if (FigRoutingManagerIsEndpointOfType(*(void *)(a1 + 40))) {
      FigEndpointUIAgentHelper_CleanupPrompt(v36, (uint64_t)v35, (uint64_t)v33, 0);
    }
    if (v38[0] == *(CFTypeRef *)(a1 + 40)) {
      FigRoutingManager_iOSHandleEndpointActivationError((uint64_t)v38[0], *(void *)(a1 + 56), *(_DWORD *)(a1 + 96), *(void *)(a1 + 48), *(void *)(a1 + 64));
    }
  }
  else
  {
    if (FigRoutingManagerIsEndpointOfType(*(void *)(a1 + 40)))
    {
      CFTypeRef v22 = v35;
      CFTypeRef v21 = v36;
      CFTypeRef v23 = v33;
      int v24 = FigCFEqual();
      FigEndpointUIAgentHelper_CleanupPrompt(v21, (uint64_t)v22, (uint64_t)v23, v24);
    }
    if (v38[0] == *(CFTypeRef *)(a1 + 40))
    {
      FigRoutingManagerContextUtilities_SetPickingState(*(void *)(a1 + 64), 7);
      FigRoutingManagerRegisterForFigEndpointNotifications(*(void *)(a1 + 40));
      mxSystemMirroring_iOSHandleFigEndpointFeaturesActivation(*(void **)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 48), *(const void **)(a1 + 64), *(const __CFDictionary **)(a1 + 72), *(void *)(a1 + 80));
      FigRoutingManagerContextUtilities_AddActivatedEndpoint(*(void *)(a1 + 64), *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 48));
    }
    else
    {
      CFTypeRef cf = 0;
      if (v38[0])
      {
        uint64_t v25 = FigEndpointGetCMBaseObject();
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v27 = v26 ? v26 : 0;
        CFTypeRef v28 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v27 + 48);
        if (v28) {
          v28(v25, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &cf);
        }
      }
      mxSystemMirroring_iOSDeactivateEndpoint(*(const void **)(a1 + 40), 1, *(void *)(a1 + 72));
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      FigRoutingManagerContextUtilities_SetPickingState(*(void *)(a1 + 64), 0);
    }
  }
  FigRoutingManagerDestroyEndpointActivateCompletionContext(*(CFTypeRef **)(a1 + 88));
  if (v38[0])
  {
    CFRelease(v38[0]);
    v38[0] = 0;
  }
  if (v36)
  {
    CFRelease(v36);
    CFTypeRef v36 = 0;
  }
  if (v34)
  {
    CFRelease(v34);
    CFTypeRef v34 = 0;
  }
  if (v33)
  {
    CFRelease(v33);
    CFTypeRef v33 = 0;
  }
  if (v35)
  {
    CFRelease(v35);
    CFTypeRef v35 = 0;
  }
  uint64_t v29 = *(const void **)(a1 + 64);
  if (v29) {
    CFRelease(v29);
  }
  uint64_t v30 = *(const void **)(a1 + 40);
  if (v30) {
    CFRelease(v30);
  }
  uint64_t v31 = *(const void **)(a1 + 72);
  if (v31) {
    CFRelease(v31);
  }
  uint64_t v32 = *(const void **)(a1 + 80);
  if (v32) {
    CFRelease(v32);
  }
}

void __mxSystemMirroring_iOSDeactivateEndpoint_block_invoke(uint64_t a1)
{
  FigRoutingManagerStopDeactivateAirPlayEndpointTimer();
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void mxSystemMirroring_iOSEndpointDeactivateCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a1)
  {
    CFRetain(a1);
    uint64_t v10 = *((void *)FigRoutingManagerGetSharedManager() + 1);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __mxSystemMirroring_iOSEndpointDeactivateCompletionCallback_block_invoke;
    v11[3] = &__block_descriptor_68_e5_v8__0l;
    int v12 = a4;
    v11[4] = a1;
    v11[5] = a3;
    void v11[6] = a2;
    void v11[7] = a5;
    MXDispatchAsync((uint64_t)"mxSystemMirroring_iOSEndpointDeactivateCompletionCallback", (uint64_t)"MXSystemMirroring_Embedded.m", 437, 0, 0, v10, (uint64_t)v11);
  }
}

void __mxSystemMirroring_iOSEndpointDeactivateCompletionCallback_block_invoke(uint64_t a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (*(void *)(a1 + 32))
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
    if (v5) {
      v5(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], cf);
    }
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v7 = *(uint64_t **)(a1 + 56);
  if (v7) {
    uint64_t v8 = *v7;
  }
  else {
    uint64_t v8 = 0;
  }
  FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 32), *(void *)(a1 + 48), v8);
  FigRoutingManagerContextUtilities_RemoveActivatedEndpoint(v8, *(void *)(a1 + 32), *(void *)(a1 + 40));
  FigRoutingManagerRemoveCachedDelegateContext(*(void *)(a1 + 32));
  FigRoutingManagerDestroyEndpointDeactivateCompletionContext(*(const void ***)(a1 + 56));
  uint64_t v9 = *(const void **)(a1 + 32);
  if (v9) {
    CFRelease(v9);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

uint64_t MXSystemRemotePool_AddEndpointToContext(const void *a1, const void *a2, const __CFDictionary *a3)
{
  if (a1)
  {
    FigRoutingManagerLogEndpointID(@"MXSystemRemotePool_AddEndpointToContext - Adding endpoint=", (uint64_t)a1, @"on system remote pool context", 1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v7 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_IsAddOperation", (const void *)*MEMORY[0x1E4F1CFD0]);
    CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_UserPickedRoute", v7);
    uint64_t v8 = mxSystemRemotePool_processAddEndpoint(a1, a2, a3, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, @"configUpdateReasonEndedNoop");
    return 0;
  }
  return v8;
}

uint64_t mxSystemRemotePool_processAddEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  v48[16] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v8 = FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)&cf);
  if (!cf)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  FigRoutingContextUtilities_LogCurrentState(v8, v9);
  uint64_t v10 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  *(void *)os_log_type_t type = 0;
  uint64_t v11 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v14 + 48);
  if (v16) {
    v16(CMBaseObject, *MEMORY[0x1E4F20F28], v11, type);
  }
  FigRoutingManagerLogRoutingRequestDetails(@"mxSystemRemotePool_processAddEndpoint", (uint64_t)a1, 0, 0, (uint64_t)a2, v10);
  CFTypeRef v17 = cf;
  if (!cf || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    CFTypeRef v17 = 0;
  }
  if (!FigRoutingManagerIsEndpointPresentInAggregate(a1, (uint64_t)v17)
    && FigRoutingManagerIsEndpointActivated((uint64_t)a1))
  {
    if (dword_1E9359DC0)
    {
      v43[0] = OS_LOG_TYPE_DEFAULT;
      id v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v48[0] = 0;
    FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)a1, (uint64_t)v48);
    FigRoutingManager_iOSDeactivateEndpoint(a1, v48[0]);
  }
  if (dword_1E9359DC0)
  {
    v43[0] = OS_LOG_TYPE_DEFAULT;
    int v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoint((uint64_t)a2, (uint64_t)cf, a1, (uint64_t)v10, (uint64_t)a4);
  long long v44 = 0u;
  long long v45 = 0u;
  if (mxSystemRemotePool_getDelegateContext_onceToken != -1) {
    dispatch_once(&mxSystemRemotePool_getDelegateContext_onceToken, &__block_literal_global_51);
  }
  *(void *)&long long v44 = gDelegateContext;
  *(void *)&long long v45 = FigRoutingManager_HandleDidReceiveDataFromCommChannelDelegate;
  *((void *)&v45 + 1) = FigRoutingManager_HandleDidCloseCommChannelDelegate;
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CFTypeRef v23 = *(void (**)(const void *, long long *))(v22 + 56);
  if (v23) {
    v23(a1, &v44);
  }
  *(void *)CFTypeRef v43 = 0;
  FigRoutingManagerCreateAggregateAddEndpointCompletionContext(a2, v10, a4, v43);
  CFMutableDictionaryRef SubEndpointAddOptions = FigRoutingManagerCreateSubEndpointAddOptions((uint64_t)a1, (uint64_t)a2);
  if (v10)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v10, @"authInfo");
    if (Value) {
      FigRoutingManager_SetAuthorizationOnEndpoint((uint64_t)a1, (uint64_t)Value);
    }
  }
  MutableCFArrayRef Copy = (const void *)FigCFDictionaryCreateMutableCopy();
  if (SubEndpointAddOptions) {
    CFRelease(SubEndpointAddOptions);
  }
  CFTypeRef v27 = cf;
  if (!cf || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    CFTypeRef v27 = 0;
  }
  uint64_t v28 = *(void *)v43;
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v33 = *(void *)(VTable + 32);
  CFTypeRef v31 = (CFTypeRef)(VTable + 32);
  uint64_t v32 = v33;
  if (v33) {
    uint64_t v34 = v32;
  }
  else {
    uint64_t v34 = 0;
  }
  CFTypeRef v35 = *(uint64_t (**)(CFTypeRef, const void *, const void *, void (*)(const void *, CFTypeRef, uint64_t, uint64_t, int, uint64_t), uint64_t))(v34 + 8);
  if (v35)
  {
    CFTypeRef v31 = (CFTypeRef)v35(v27, a1, MutableCopy, FigRoutingManagerAggregateAddEndpointCompletionCallback, v28);
    uint64_t v19 = (uint64_t)v31;
    if (!v31)
    {
      CFTypeRef v42 = 0;
      uint64_t v36 = FigEndpointGetCMBaseObject();
      uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v37) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0;
      }
      uint64_t v40 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v38 + 48);
      if (v40) {
        v40(v36, *MEMORY[0x1E4F20E38], v11, &v42);
      }
      if (dword_1E9359DC0)
      {
        CFTypeRef v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFTypeRef v31 = v42;
      if (v42) {
        CFRelease(v42);
      }
      uint64_t v19 = 0;
      if (!MutableCopy) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v19 = 4294954514;
  }
  if (MutableCopy) {
LABEL_42:
  }
    CFRelease(MutableCopy);
LABEL_43:
  FigRoutingContextUtilities_LogCurrentState(v31, v30);
  if (v10) {
    CFRelease(v10);
  }
  if (*(void *)type)
  {
    CFRelease(*(CFTypeRef *)type);
    *(void *)os_log_type_t type = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

CFTypeRef MXSystemRemotePool_RemoveEndpointFromContext(const void *a1, const void *a2, const __CFDictionary *a3)
{
  if (a1)
  {
    FigRoutingManagerLogEndpointID(@"MXSystemRemotePool_RemoveEndpointFromContext - Removing endpoint=", (uint64_t)a1, @"on system remote pool context", 1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v7 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_IsRemoveOperation", (const void *)*MEMORY[0x1E4F1CFD0]);
    CFDictionarySetValue(Mutable, @"RouteChangeOptionKey_UserPickedRoute", v7);
    CFTypeRef v8 = mxSystemRemotePool_processRemoveEndpoint(a1, a2, a3, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, @"configUpdateReasonEndedNoop");
    return 0;
  }
  return v8;
}

CFTypeRef mxSystemRemotePool_processRemoveEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  v31[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v31[0] = 0;
  uint64_t v8 = FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)v31);
  if (!v31[0])
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  FigRoutingContextUtilities_LogCurrentState(v8, v9);
  uint64_t v10 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  CFTypeRef cf = 0;
  uint64_t v11 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
  if (v16) {
    v16(CMBaseObject, *MEMORY[0x1E4F20F28], v11, &cf);
  }
  FigRoutingManagerLogRoutingRequestDetails(@"mxSystemRemotePool_processRemoveEndpoint", (uint64_t)a1, 0, 0, (uint64_t)a2, v10);
  CFTypeRef v17 = v31[0];
  if (!v31[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    CFTypeRef v17 = 0;
  }
  if (FigRoutingManagerIsEndpointPresentInAggregate(a1, (uint64_t)v17))
  {
    CFTypeRef v18 = v31[0];
    if (!v31[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
      CFTypeRef v18 = 0;
    }
    CFTypeRef v19 = (CFTypeRef)FigRoutingManagerRemoveEndpointFromAggregate((uint64_t)v18, a1, a2, v10, a4, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
    CFTypeRef v25 = v19;
    if (v19) {
      goto LABEL_29;
    }
    *(void *)os_log_type_t type = 0;
    uint64_t v21 = FigEndpointGetCMBaseObject();
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v26 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v23 + 48);
    if (v26) {
      v26(v21, *MEMORY[0x1E4F20E38], v11, type);
    }
    if (dword_1E9359DC0)
    {
      CFTypeRef v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFTypeRef v19 = *(CFTypeRef *)type;
    if (*(void *)type) {
      CFRelease(*(CFTypeRef *)type);
    }
  }
  else
  {
    if (dword_1E9359DC0)
    {
      *(_DWORD *)os_log_type_t type = 0;
      int v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, v10, @"configUpdateReasonEndedNoop");
  }
  CFTypeRef v25 = 0;
LABEL_29:
  FigRoutingContextUtilities_LogCurrentState(v19, v20);
  if (v10) {
    CFRelease(v10);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v31[0]) {
    CFRelease(v31[0]);
  }
  return v25;
}

uint64_t MXSystemRemotePool_RemoveEndpoint(const void *a1)
{
  CFTypeRef v5 = 0;
  FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID((uint64_t)&v5);
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)v5, (uint64_t)&cf);
  if (FigRoutingManagerIsEndpointPresentInAggregate(a1, (uint64_t)cf))
  {
    FigRoutingManagerRemoveEndpointFromAggregate((uint64_t)cf, a1, v5, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 4294954294;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v5) {
    CFRelease(v5);
  }
  return v2;
}

uint64_t MXSystemRemotePool_ActivateAggregateEndpoint(uint64_t a1, const void *a2)
{
  void v23[16] = *MEMORY[0x1E4F143B8];
  uint64_t FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures(a1, (uint64_t)a2);
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  if (a1)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (v8) {
      v8(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &cf);
    }
  }
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v10 = objc_alloc_init(MEMORY[0x1E4F29128]);
  objc_msgSend(v9, "setValue:forKey:", objc_msgSend(v10, "UUIDString"), @"clientRouteRequestID");
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v23[3] = 0;
  v23[4] = 0;
  if (mxSystemRemotePool_getDelegateContext_onceToken != -1) {
    dispatch_once(&mxSystemRemotePool_getDelegateContext_onceToken, &__block_literal_global_51);
  }
  v23[0] = gDelegateContext;
  v23[1] = mxSystemRemotePool_handleAuthorizationRequiredDelegate;
  v23[2] = mxSystemRemotePool_handleEndpointFailedDelegate;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, void *))(v13 + 48);
  if (v14) {
    v14(a1, v23);
  }
  uint64_t v22 = 0;
  uint64_t v15 = FigRoutingManagerCreateEndpointActivateCompletionContext(a2, v9, 0, 0, &v22);
  if (!v15)
  {
    uint64_t v16 = v22;
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    CFTypeRef v19 = *(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t))(v18 + 8);
    if (v19) {
      uint64_t v15 = v19(a1, FigEndpointFeatures, 0, mxSystemRemotePool_endpointActivateCompletionCallback, v16);
    }
    else {
      uint64_t v15 = 4294954514;
    }
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }

  return v15;
}

void mxSystemRemotePool_handleAuthorizationRequiredDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFTypeRef v37 = 0;
    CFTypeRef v38 = 0;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v13 + 48);
    if (v14) {
      v14(CMBaseObject, *MEMORY[0x1E4F21048], v10, &v38);
    }
    CFTypeRef cf = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (a2)
    {
      uint64_t v16 = FigEndpointGetCMBaseObject();
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v20 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v18 + 48);
      if (v20) {
        v20(v16, *MEMORY[0x1E4F20F28], v10, &cf);
      }
      uint64_t v21 = FigEndpointGetCMBaseObject();
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      int v24 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v23 + 48);
      if (v24) {
        v24(v21, *MEMORY[0x1E4F20E38], v10, &v37);
      }
      CFMutableDictionaryRef v19 = FigRoutingManagerCopyAuthInfoForEndpoint(a2);
      FigCFDictionarySetValue();
      if (dword_1E9359DC0)
      {
        unsigned int v35 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(void *)&long long v29 = v19;
      *((void *)&v29 + 1) = Mutable;
      uint64_t v32 = a6;
      uint64_t v33 = a7;
      CFTypeRef v30 = v37;
      uint64_t v31 = a2;
      FigEndpointAuthRequestHandler_ProcessRequest(&v29);
      if (dword_1E9359DC0)
      {
        unsigned int v35 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v27 = v35;
        if (os_log_type_enabled(v26, type)) {
          unsigned int v28 = v27;
        }
        else {
          unsigned int v28 = v27 & 0xFFFFFFFE;
        }
        if (v28)
        {
          int v39 = 136315394;
          uint64_t v40 = "mxSystemRemotePool_handleAuthorizationRequiredDelegate";
          __int16 v41 = 2114;
          CFTypeRef v42 = cf;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      CFMutableDictionaryRef v19 = 0;
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v38)
    {
      CFRelease(v38);
      CFTypeRef v38 = 0;
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v37) {
      CFRelease(v37);
    }
  }
}

void mxSystemRemotePool_handleEndpointFailedDelegate(const void *a1, uint64_t a2, const void *a3)
{
  if (a1)
  {
    if (a3)
    {
      SharedManager = FigRoutingManagerGetSharedManager();
      CFRetain(a1);
      CFRetain(a3);
      uint64_t v6 = *((void *)SharedManager + 1);
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      v7[2] = __mxSystemRemotePool_handleEndpointFailedDelegate_block_invoke;
      v7[3] = &__block_descriptor_48_e5_v8__0l;
      v7[4] = a3;
      void v7[5] = a1;
      MXDispatchAsync((uint64_t)"mxSystemRemotePool_handleEndpointFailedDelegate", (uint64_t)"FigRoutingManager_SystemRemotePool.m", 398, 0, 0, v6, (uint64_t)v7);
    }
  }
}

void mxSystemRemotePool_endpointActivateCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  SharedManager = FigRoutingManagerGetSharedManager();
  if (a5)
  {
    uint64_t v12 = *(const void **)a5;
    uint64_t v11 = *(const void **)(a5 + 8);
    uint64_t v13 = *(void **)(a5 + 32);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  [v13 timeIntervalSinceNow];
  double v15 = v14;
  if (a1) {
    CFRetain(a1);
  }
  if (v12) {
    CFRetain(v12);
  }
  if (v11) {
    CFRetain(v11);
  }
  float v16 = fabs(v15) * 1000.0;
  id v17 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  uint64_t v18 = *((void *)SharedManager + 1);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __mxSystemRemotePool_endpointActivateCompletionCallback_block_invoke;
  v19[3] = &unk_1E57CAAA8;
  v19[4] = v17;
  v19[5] = a1;
  int v20 = a4;
  void v19[6] = a3;
  v19[7] = a2;
  float v21 = v16;
  v19[8] = v12;
  v19[9] = v11;
  v19[10] = a5;
  MXDispatchAsync((uint64_t)"mxSystemRemotePool_endpointActivateCompletionCallback", (uint64_t)"FigRoutingManager_SystemRemotePool.m", 548, 0, 0, v18, (uint64_t)v19);
}

uint64_t MXSystemRemotePool_CreateCommChannel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 4294954296;
  if (a1 && a3)
  {
    CFTypeRef v6 = routingManagerSystemRemotePool_copySubEndpointWithID();
    if (v6)
    {
      uint64_t v7 = v6;
      FigEndpointExtendedGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 24);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v9 + 88);
        if (v11) {
          uint64_t v3 = v11(v7, a2, a3);
        }
        else {
          uint64_t v3 = 4294954514;
        }
        if (dword_1E9359DC0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      CFRelease(v7);
    }
    else
    {
      if (dword_1E9359DC0)
      {
        CFAllocatorRef v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 4294954294;
    }
  }
  return v3;
}

CFTypeRef routingManagerSystemRemotePool_copySubEndpointWithID()
{
  CFTypeRef v19 = 0;
  FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID((uint64_t)&v19);
  CFTypeRef v18 = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v19, (uint64_t)&v18);
  CFArrayRef theArray = 0;
  if (!v18) {
    goto LABEL_23;
  }
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v2 = v1 ? v1 : 0;
  uint64_t v3 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v2 + 48);
  if (!v3) {
    goto LABEL_23;
  }
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  v3(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
  if (!theArray) {
    goto LABEL_23;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    goto LABEL_23;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  uint64_t v8 = *MEMORY[0x1E4F20E38];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
    CFTypeRef cf = 0;
    uint64_t v10 = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(v10, v8, v4, &cf);
    }
    if (FigCFEqual()) {
      break;
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v6 == ++v7) {
      goto LABEL_23;
    }
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (ValueAtIndex) {
    CFTypeRef v14 = CFRetain(ValueAtIndex);
  }
  else {
LABEL_23:
  }
    CFTypeRef v14 = 0;
  if (v19)
  {
    CFRelease(v19);
    CFTypeRef v19 = 0;
  }
  if (v18)
  {
    CFRelease(v18);
    CFTypeRef v18 = 0;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v14;
}

uint64_t MXSystemRemotePool_SendData(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(CFTypeRef, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v5 = 4294954296;
  if (a1 && a2 && a3)
  {
    CFTypeRef v10 = routingManagerSystemRemotePool_copySubEndpointWithID();
    if (v10)
    {
      uint64_t v11 = v10;
      FigEndpointExtendedGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        uint64_t v12 = malloc_type_calloc(1uLL, 0x10uLL, 0x80040803F642BuLL);
        *uint64_t v12 = a4;
        v12[1] = a5;
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v15 = *(void *)(VTable + 24);
        LODWORD(VTable) = VTable + 24;
        uint64_t v14 = v15;
        if (v15) {
          uint64_t v16 = v14;
        }
        else {
          uint64_t v16 = 0;
        }
        CFTypeRef v18 = *(uint64_t (**)(const void *, uint64_t, uint64_t, void (*)(int, uint64_t, uint64_t, void *), void *))(v16 + 96);
        if (!v18
          || (uint64_t VTable = v18(v11, a2, a3, routingManagerSystemRemotePool_sendDataCompletionCallback, v12),
              uint64_t v5 = VTable,
              VTable == -12782))
        {
          uint64_t v5 = 4294954514;
          routingManagerSystemRemotePool_sendDataCompletionCallback(VTable, a2, 4294954514, v12);
        }
        if (dword_1E9359DC0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        cf[0] = 0;
        FigRoutingManagerCopySystemContext((uint64_t)cf, 9u);
        a4(cf[0], a2, 4294954296, a5);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        uint64_t v5 = 0;
      }
      CFRelease(v11);
    }
    else
    {
      if (dword_1E9359DC0)
      {
        id v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 4294954294;
    }
  }
  return v5;
}

void routingManagerSystemRemotePool_sendDataCompletionCallback(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
  {
    if (*a4)
    {
      cf[0] = 0;
      FigRoutingManagerCopySystemContext((uint64_t)cf, 9u);
      ((void (*)(CFTypeRef, uint64_t, uint64_t, void))*a4)(cf[0], a2, a3, a4[1]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    free(a4);
  }
}

uint64_t MXSystemRemotePool_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294954296;
  if (a1 && a2)
  {
    CFTypeRef v4 = routingManagerSystemRemotePool_copySubEndpointWithID();
    if (v4)
    {
      uint64_t v5 = v4;
      FigEndpointExtendedGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 24);
        if (v6) {
          uint64_t v7 = v6;
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v9 = *(uint64_t (**)(const void *, uint64_t))(v7 + 104);
        if (v9) {
          uint64_t v2 = v9(v5, a2);
        }
        else {
          uint64_t v2 = 4294954514;
        }
        if (dword_1E9359DC0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      CFRelease(v5);
    }
    else
    {
      if (dword_1E9359DC0)
      {
        uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 4294954294;
    }
  }
  return v2;
}

void __mxSystemRemotePool_getDelegateContext_block_invoke()
{
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID((uint64_t)&cf);
  gDelegateContext = (uint64_t)FigRoutingManagerCreateEndpointDelegateContext();
  if (cf) {
    CFRelease(cf);
  }
}

void __mxSystemRemotePool_handleEndpointFailedDelegate_block_invoke(uint64_t a1)
{
  v24[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v23 = 0;
  v24[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID((uint64_t)&v23);
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), (const void *)*MEMORY[0x1E4F20368]);
  uint64_t v22 = 0;
  FigCFDictionaryGetInt64IfPresent();
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v21 = 0;
  FigCFDictionaryGetInt32IfPresent();
  CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), (const void *)*MEMORY[0x1E4F205A0]);
  if (Value)
  {
    CFTypeRef v20 = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v7 + 48);
    if (v8) {
      v8(CMBaseObject, *MEMORY[0x1E4F20E38], v3, &v20);
    }
    uint64_t v9 = FigEndpointGetCMBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v11 + 48);
    if (v12) {
      v12(v9, *MEMORY[0x1E4F20F28], v3, v24);
    }
    if (FigRoutingManagerIsEndpointActivated((uint64_t)Value))
    {
      uint64_t v13 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)Value, 0);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      CFTypeRef cf = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)v23, (uint64_t)&cf);
      if (cf)
      {
        uint64_t v14 = *(void *)(a1 + 40);
        if (!v14 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
          uint64_t v14 = 0;
        }
        if (FigRoutingManagerRemoveEndpointFromAggregate(v14, Value, v23, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback))
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          FigRoutingManagerLogEndpointID(@"HandleEndpointFailedDelegate: Removed endpoint with ID", (uint64_t)Value, @"from aggregate", 1);
        }
      }
      if (dword_1E9359DC0)
      {
        uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    if (v20) {
      CFRelease(v20);
    }
  }
  if (v23)
  {
    CFRelease(v23);
    CFTypeRef v23 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v24[0])
  {
    CFRelease(v24[0]);
    v24[0] = 0;
  }
  id v17 = *(const void **)(a1 + 40);
  if (v17) {
    CFRelease(v17);
  }
  CFTypeRef v18 = *(const void **)(a1 + 32);
  if (v18) {
    CFRelease(v18);
  }
}

void __mxSystemRemotePool_endpointActivateCompletionCallback_block_invoke(uint64_t a1)
{
  cf[28] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) timeIntervalSinceNow];
  cf[0] = 0;
  if (*(void *)(a1 + 40))
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
    if (v5) {
      v5(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], cf);
    }
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRoutingManagerContextUtilities_SetPickingState(*(void *)(a1 + 64), 7);
  FigRoutingManagerRegisterForFigEndpointNotifications(*(void *)(a1 + 40));
  FigRoutingManagerContextUtilities_AddActivatedEndpoint(*(void *)(a1 + 64), *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 48));
  FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(*(const void **)(a1 + 64), *(const void **)(a1 + 40), @"configUpdateReasonEndedSuccess", *(void *)(a1 + 72));
  FigRoutingManagerContextUtilities_SetPickingState(*(void *)(a1 + 64), 0);
  FigRoutingManagerDestroyEndpointActivateCompletionContext(*(CFTypeRef **)(a1 + 80));
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 64);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 40);
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(a1 + 72);
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t FigEndpointUIAgentGetClassID()
{
  if (FigEndpointUIAgentGetClassID_sRegisterFigEndpointUIAgentTypeOnce != -1) {
    dispatch_once(&FigEndpointUIAgentGetClassID_sRegisterFigEndpointUIAgentTypeOnce, &__block_literal_global_52);
  }
  return sFigEndpointUIAgentClassID;
}

uint64_t __FigEndpointUIAgentGetClassID_block_invoke()
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigEndpointUIAgentClassDesc, ClassID, 1, &sFigEndpointUIAgentClassID);
}

uint64_t FigEndpointUIAgentGetTypeID()
{
  if (FigEndpointUIAgentGetClassID_sRegisterFigEndpointUIAgentTypeOnce != -1) {
    dispatch_once(&FigEndpointUIAgentGetClassID_sRegisterFigEndpointUIAgentTypeOnce, &__block_literal_global_52);
  }
  uint64_t v0 = sFigEndpointUIAgentClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

CFStringRef FigEndpointUIAgentCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigEndpointUIAgent %p]", a1);
}

void mx_ioKit_hidEventCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)MEMORY[0x1997179E0]();
  [a2 handleEvent:a4];
}

void sub_194E3D294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MX_IOKit_Initialize()
{
  if (CMSMDeviceState_IsSecureMicrophoneSupported() && MX_IOKit_Initialize_onceToken != -1)
  {
    dispatch_once(&MX_IOKit_Initialize_onceToken, &__block_literal_global_53);
  }
}

uint64_t mx_ioKit_getSmartCoverState(CFArrayRef theArray, int a2)
{
  CFIndex v4 = 0;
  uint64_t v5 = 0;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); v4 < i; CFIndex i = 0)
  {
    CFArrayGetValueAtIndex(theArray, v4);
    KeyboardEvent = (const void *)IOHIDEventCreateKeyboardEvent();
    uint64_t v8 = IOHIDServiceClientCopyEvent();
    if (v8)
    {
      uint64_t v9 = (const void *)v8;
      if (IOHIDEventGetIntegerValue()) {
        int v10 = a2;
      }
      else {
        int v10 = 0;
      }
      uint64_t v5 = v10 | v5;
      CFRelease(v9);
    }
    if (KeyboardEvent) {
      CFRelease(KeyboardEvent);
    }
    ++v4;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return v5;
}

uint64_t DisplayModeRefreshRateObserver_UpdateHDMILatencyOnCoreAnimation()
{
  return objc_msgSend((id)displayModeRefreshRateObserver, "updateHDMILatencyOnCoreAnimation:");
}

void MX_RunningBoardServices_StopMonitoringForPID(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((int)a1 >= 1)
  {
    uint64_t v2 = [MEMORY[0x1E4F963F8] identifierWithPid:a1];
    if (v2 && (uint64_t v3 = [MEMORY[0x1E4F96430] predicateMatchingIdentifier:v2]) != 0)
    {
      uint64_t v4 = v3;
      if (dword_1E9359EF8)
      {
        int v13 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend((id)gProcessPredicatesSetLock, "lock", v9, v10);
      uint64_t v7 = (void *)[(id)gProcessPredicatesSet copy];
      [(id)gProcessPredicatesSet removeObject:v4];
      uint64_t v8 = (void *)[(id)gProcessPredicatesSet copy];
      [(id)gProcessPredicatesSetLock unlock];
      if ([v7 isEqualToSet:v8])
      {
      }
      else
      {
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 3221225472;
        v11[2] = __MX_RunningBoardServices_StopMonitoringForPID_block_invoke;
        v11[3] = &unk_1E57CAC30;
        v11[4] = v8;
        [(id)gProcessMonitor updateConfiguration:v11];
        mx_runningBoardServices_removePIDFromApplicationStateCache((void *)[MEMORY[0x1E4F28ED0] numberWithInt:a1]);
      }
    }
    else
    {
      uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t mx_runningBoardServices_removePIDFromApplicationStateCache(void *a1)
{
  if ([a1 unsignedIntValue])
  {
    [(id)gApplicationStateCacheLock lock];
    if ([(id)gApplicationStateCache objectForKey:a1]) {
      [(id)gApplicationStateCache removeObjectForKey:a1];
    }
    uint64_t v2 = (void *)gApplicationStateCacheLock;
    return [v2 unlock];
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void MX_RunningBoardServices_DumpMonitoredProcessPredicates()
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (mx_runningBoardServices_initializeMonitoring_onceToken != -1) {
    dispatch_once(&mx_runningBoardServices_initializeMonitoring_onceToken, &__block_literal_global_54);
  }
  [(id)gProcessPredicatesSetLock lock];
  uint64_t v0 = objc_msgSend((id)objc_msgSend((id)gProcessPredicatesSet, "allObjects"), "copy");
  [(id)gProcessPredicatesSetLock unlock];
  [(id)gApplicationStateCacheLock lock];
  obuint64_t j = (id)[(id)gApplicationStateCache copy];
  [(id)gApplicationStateCacheLock unlock];
  if (dword_1E9359EF8)
  {
    unsigned int v20 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMDebugUtility_PrintCollection(v0);
  if (dword_1E9359EF8)
  {
    unsigned int v20 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v27, 16, v12, v13);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(obj);
        }
        if (dword_1E9359EF8)
        {
          uint64_t v7 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          unsigned int v20 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v9 = v20;
          if (os_log_type_enabled(v8, type)) {
            unsigned int v10 = v9;
          }
          else {
            unsigned int v10 = v9 & 0xFFFFFFFE;
          }
          if (v10)
          {
            uint64_t StringForApplicationState = CMSMUtility_GetStringForApplicationState(objc_msgSend((id)objc_msgSend(obj, "objectForKey:", v7), "unsignedIntValue"));
            int v21 = 136315650;
            uint64_t v22 = "MX_RunningBoardServices_DumpMonitoredProcessPredicates";
            __int16 v23 = 2114;
            uint64_t v24 = v7;
            __int16 v25 = 2114;
            uint64_t v26 = StringForApplicationState;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v15 objects:v27 count:16];
    }
    while (v4);
  }
}

void MX_RunningBoardServices_InvalidateAssertion(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken != -1) {
      dispatch_once(&mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken, &__block_literal_global_50_0);
    }
    uint64_t v2 = (void *)MEMORY[0x1997179E0]();
    MEMORY[0x199716E90](gProcessAssertionMutex);
    if (CFArrayGetCount((CFArrayRef)gProcessAssertionArray) >= 1)
    {
      CFIndex v3 = 0;
      while (CFArrayGetValueAtIndex((CFArrayRef)gProcessAssertionArray, v3) != a1)
      {
        if (++v3 >= CFArrayGetCount((CFArrayRef)gProcessAssertionArray)) {
          goto LABEL_17;
        }
      }
      if (gHostProcessAssertionDictionary
        && CFDictionaryContainsKey((CFDictionaryRef)gHostProcessAssertionDictionary, a1))
      {
        CFDictionaryRef Value = (void *)CFDictionaryGetValue((CFDictionaryRef)gHostProcessAssertionDictionary, a1);
        [Value invalidate];
        uint64_t v5 = MXGetAssertionLog();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = "-MX_RunningBoardServices-";
          __int16 v12 = 2082;
          int v10 = 136447234;
          uint64_t v13 = "MX_RunningBoardServices_InvalidateAssertion";
          __int16 v14 = 1024;
          int v15 = 891;
          __int16 v16 = 2048;
          long long v17 = Value;
          __int16 v18 = 2114;
          uint64_t v19 = [Value explanation];
          _os_log_impl(&dword_194CDF000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Invalidated host process assertion %p explanation %{public}@", (uint8_t *)&v10, 0x30u);
        }
        CFDictionaryRemoveValue((CFMutableDictionaryRef)gHostProcessAssertionDictionary, a1);
      }
      uint64_t v6 = +[MXAudioStatistics sharedInstance];
      uint64_t v7 = [a1 explanation];
      [(MXAudioStatistics *)v6 sendSinglePerformanceMessageForAssertion:"MX_RunningBoardServices_InvalidateAssertion" explanation:v7 activity:kMXAudioStatistics_AssertionActivity_AssertionInvalidated];
      uint64_t v8 = MXGetAssertionLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = [a1 explanation];
        int v10 = 136447234;
        uint64_t v11 = "-MX_RunningBoardServices-";
        __int16 v12 = 2082;
        uint64_t v13 = "MX_RunningBoardServices_InvalidateAssertion";
        __int16 v14 = 1024;
        int v15 = 898;
        __int16 v16 = 2048;
        long long v17 = a1;
        __int16 v18 = 2114;
        uint64_t v19 = v9;
        _os_log_impl(&dword_194CDF000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Invalidated assertion %p explanation %{public}@", (uint8_t *)&v10, 0x30u);
      }
      [a1 invalidate];
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)gProcessAssertionArray, v3);
    }
LABEL_17:
    MEMORY[0x199716EA0](gProcessAssertionMutex);
  }
}

void MX_RunningBoardServices_InvalidateBackgroundDownloadProcessAssertion(void *a1)
{
  if (initializeLogging_onceToken != -1) {
    dispatch_once(&initializeLogging_onceToken, &__block_literal_global_52);
  }
  uint64_t v2 = (void *)MEMORY[0x1997179E0]();
  mx_runningBoardServices_InvalidateProcessAssertion(a1);
}

uint64_t mx_runningBoardServices_InvalidateProcessAssertion(void *a1)
{
  if (a1)
  {
    return [a1 invalidate];
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void MX_RunningBoardServices_InvalidateMediaPlaybackProcessAssertion(void *a1)
{
  if (initializeLogging_onceToken != -1) {
    dispatch_once(&initializeLogging_onceToken, &__block_literal_global_52);
  }
  uint64_t v2 = (void *)MEMORY[0x1997179E0]();
  mx_runningBoardServices_InvalidateProcessAssertion(a1);
}

uint64_t MX_RunningBoardServices_IsAssertionValid(const void *a1)
{
  if (!a1) {
    return 1;
  }
  MEMORY[0x199716E90](gProcessAssertionMutex);
  CFArrayRef v2 = (const __CFArray *)gProcessAssertionArray;
  v5.length = CFArrayGetCount((CFArrayRef)gProcessAssertionArray);
  v5.location = 0;
  BOOL v3 = CFArrayContainsValue(v2, v5, a1) != 0;
  MEMORY[0x199716EA0](gProcessAssertionMutex);
  return v3;
}

void *MX_RunningBoardServices_CreateMediaPlaybackProcessAssertionForPID(uint64_t a1, __CFString *a2)
{
  if (initializeLogging_onceToken != -1) {
    dispatch_once(&initializeLogging_onceToken, &__block_literal_global_52);
  }
  if ((int)a1 <= 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x1997179E0]();
    MXAssertionForPID = mx_runningBoardServices_createMXAssertionForPID(a1, a2, 0);
    return MXAssertionForPID;
  }
}

void *MX_RunningBoardServices_CreateBackgroundDownloadProcessAssertionForBundleIdentifier(uint64_t a1, __CFString *a2)
{
  v11[24] = *MEMORY[0x1E4F143B8];
  if (initializeLogging_onceToken == -1)
  {
    if (a1) {
      goto LABEL_3;
    }
LABEL_11:
    LODWORD(v11[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_12;
  }
  dispatch_once(&initializeLogging_onceToken, &__block_literal_global_52);
  if (!a1) {
    goto LABEL_11;
  }
LABEL_3:
  if (a2)
  {
    v11[0] = 0;
    uint64_t v4 = objc_msgSend(MEMORY[0x1E4F963E8], "handleForPredicate:error:", objc_msgSend(MEMORY[0x1E4F96430], "predicateMatchingBundleIdentifier:", a1), v11);
    if (!v11[0])
    {
      uint64_t v7 = [v4 identity];
      uint64_t v8 = [MEMORY[0x1E4F96478] targetWithProcessIdentity:v7];
      if (v8) {
        return mx_runningBoardServices_createAssertionForTarget(v8, a2, @"com.apple.coremedia", @"AssetDownload", 0);
      }
    }
    CFRange v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    LODWORD(v11[0]) = 0;
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  }
LABEL_12:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

void MX_RunningBoardServices_InvalidatePlaybackAssertionsContainingSessionID(uint64_t a1, void *a2, int a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken != -1) {
    dispatch_once(&mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken, &__block_literal_global_50_0);
  }
  uint64_t context = (void *)MEMORY[0x1997179E0]();
  MEMORY[0x199716E90](gProcessAssertionMutex);
  MutableCFArrayRef Copy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFArrayRef)gProcessAssertionArray);
  CFIndex v6 = 0;
  if (!MutableCopy) {
    goto LABEL_6;
  }
  while (v6 < CFArrayGetCount(MutableCopy))
  {
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(MutableCopy, v6);
      int v8 = objc_msgSend((id)objc_msgSend(ValueAtIndex, "explanation"), "containsString:", a1);
      char v9 = [a2 containsObject:ValueAtIndex];
      if (v8 && (v9 & 1) == 0)
      {
        if (gHostProcessAssertionDictionary
          && CFDictionaryContainsKey((CFDictionaryRef)gHostProcessAssertionDictionary, ValueAtIndex))
        {
          objc_msgSend((id)CFDictionaryGetValue((CFDictionaryRef)gHostProcessAssertionDictionary, ValueAtIndex), "invalidate");
          CFDictionaryRemoveValue((CFMutableDictionaryRef)gHostProcessAssertionDictionary, ValueAtIndex);
        }
        int v10 = MXGetAssertionLog();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136447490;
          uint64_t v36 = "-MX_RunningBoardServices-";
          __int16 v37 = 2082;
          CFTypeRef v38 = "MX_RunningBoardServices_InvalidatePlaybackAssertionsContainingSessionID";
          __int16 v39 = 1024;
          int v40 = 1106;
          __int16 v41 = 2048;
          CFTypeRef v42 = ValueAtIndex;
          __int16 v43 = 1024;
          int v44 = a3;
          __int16 v45 = 2114;
          uint64_t v46 = a1;
          _os_log_impl(&dword_194CDF000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Invalidating unaccounted assertion %p for reason %u as its explanation contains matching session id %{public}@", buf, 0x36u);
        }
        uint64_t v11 = +[MXAudioStatistics sharedInstance];
        uint64_t v12 = [ValueAtIndex explanation];
        [(MXAudioStatistics *)v11 sendSinglePerformanceMessageForAssertion:"MX_RunningBoardServices_InvalidatePlaybackAssertionsContainingSessionID" explanation:v12 activity:kMXAudioStatistics_AssertionActivity_AssertionInvalidated];
        [ValueAtIndex invalidate];
        CFArrayRemoveValueAtIndex(MutableCopy, v6--);
      }
      ++v6;
      if (MutableCopy) {
        break;
      }
LABEL_6:
      if ((v6 & 0x8000000000000000) == 0)
      {
        uint64_t v13 = (const void *)gProcessAssertionArray;
        gProcessAssertionArray = 0;
        if (v13) {
          goto LABEL_18;
        }
        goto LABEL_19;
      }
    }
  }
  uint64_t v13 = (const void *)gProcessAssertionArray;
  gProcessAssertionArray = (uint64_t)MutableCopy;
  CFRetain(MutableCopy);
  if (v13) {
LABEL_18:
  }
    CFRelease(v13);
LABEL_19:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  __int16 v14 = (void *)[(id)gHostProcessAssertionDictionary mutableCopy];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  int v15 = (void *)[v14 allKeys];
  uint64_t v16 = [v15 countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v31 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void *)(*((void *)&v30 + 1) + 8 * i);
        int v21 = (void *)[v14 objectForKey:v20];
        int v22 = objc_msgSend((id)objc_msgSend(v21, "explanation"), "containsString:", a1);
        char v23 = [a2 containsObject:v20];
        if (v22 && (v23 & 1) == 0)
        {
          uint64_t v24 = MXGetAssertionLog();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136447490;
            uint64_t v36 = "-MX_RunningBoardServices-";
            __int16 v37 = 2082;
            CFTypeRef v38 = "MX_RunningBoardServices_InvalidatePlaybackAssertionsContainingSessionID";
            __int16 v39 = 1024;
            int v40 = 1135;
            __int16 v41 = 2048;
            CFTypeRef v42 = v21;
            __int16 v43 = 1024;
            int v44 = a3;
            __int16 v45 = 2114;
            uint64_t v46 = a1;
            _os_log_impl(&dword_194CDF000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Invalidating unaccounted assertion %p for reason %u as its explanation contains matching session id %{public}@", buf, 0x36u);
          }
          __int16 v25 = +[MXAudioStatistics sharedInstance];
          uint64_t v26 = [v21 explanation];
          [(MXAudioStatistics *)v25 sendSinglePerformanceMessageForAssertion:"MX_RunningBoardServices_InvalidatePlaybackAssertionsContainingSessionID" explanation:v26 activity:kMXAudioStatistics_AssertionActivity_AssertionInvalidated];
          [v21 invalidate];
          [v14 removeObjectForKey:v20];
        }
      }
      uint64_t v17 = [v15 countByEnumeratingWithState:&v30 objects:v34 count:16];
    }
    while (v17);
  }
  unsigned int v27 = (const void *)gHostProcessAssertionDictionary;
  gHostProcessAssertionDictionary = (uint64_t)v14;
  if (v14) {
    CFRetain(v14);
  }
  if (v27) {
    CFRelease(v27);
  }

  MEMORY[0x199716EA0](gProcessAssertionMutex);
}

uint64_t MX_RunningBoardServices_DumpAssertionInfo()
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken != -1) {
    dispatch_once(&mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken, &__block_literal_global_50_0);
  }
  MEMORY[0x199716E90](gProcessAssertionMutex);
  uint64_t v0 = (void *)gProcessAssertionArray;
  long long v30 = (void *)gHostProcessAssertionDictionary;
  if ([(id)gProcessAssertionArray count] || objc_msgSend(v30, "count"))
  {
    if (dword_1E9359EF8)
    {
      unsigned int v40 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v35, v50, 16, v24, v27);
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v36 != v4) {
            objc_enumerationMutation(v0);
          }
          if (dword_1E9359EF8)
          {
            CFIndex v6 = *(void **)(*((void *)&v35 + 1) + 8 * i);
            unsigned int v40 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v8 = v40;
            if (os_log_type_enabled(v7, type)) {
              unsigned int v9 = v8;
            }
            else {
              unsigned int v9 = v8 & 0xFFFFFFFE;
            }
            if (v9)
            {
              uint64_t v10 = [v6 explanation];
              int v41 = 136315650;
              CFTypeRef v42 = "MX_RunningBoardServices_DumpAssertionInfo";
              __int16 v43 = 2048;
              int v44 = v6;
              __int16 v45 = 2114;
              uint64_t v46 = v10;
              LODWORD(v28) = 32;
              __int16 v25 = &v41;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        uint64_t v3 = [v0 countByEnumeratingWithState:&v35 objects:v50 count:16];
      }
      while (v3);
    }
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v11 = objc_msgSend(v30, "allKeys", v25, v28);
    uint64_t v12 = [v11 countByEnumeratingWithState:&v31 objects:v49 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v32;
      do
      {
        for (uint64_t j = 0; j != v13; ++j)
        {
          if (*(void *)v32 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v31 + 1) + 8 * j);
          uint64_t v17 = objc_msgSend(v30, "objectForKey:", v16, v26, v29);
          if (dword_1E9359EF8)
          {
            uint64_t v18 = (void *)v17;
            unsigned int v40 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v20 = v40;
            if (os_log_type_enabled(v19, type)) {
              unsigned int v21 = v20;
            }
            else {
              unsigned int v21 = v20 & 0xFFFFFFFE;
            }
            if (v21)
            {
              uint64_t v22 = [v18 explanation];
              int v41 = 136315906;
              CFTypeRef v42 = "MX_RunningBoardServices_DumpAssertionInfo";
              __int16 v43 = 2048;
              int v44 = v16;
              __int16 v45 = 2048;
              uint64_t v46 = (uint64_t)v18;
              __int16 v47 = 2114;
              uint64_t v48 = v22;
              LODWORD(v29) = 42;
              uint64_t v26 = &v41;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v31 objects:v49 count:16];
      }
      while (v13);
    }
  }
  return MEMORY[0x199716EA0](gProcessAssertionMutex);
}

id __mx_runningBoardServices_initializeMonitoring_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (initializeLogging_onceToken != -1) {
    dispatch_once(&initializeLogging_onceToken, &__block_literal_global_52);
  }
  gProcessPredicatesSetLock = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28E08]);
  gProcessPredicatesSet = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28BD0]);
  gApplicationStateCache = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  gApplicationStateCacheLock = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28E08]);
  if (dword_1E9359EF8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  id result = (id)objc_msgSend(MEMORY[0x1E4F96418], "monitorWithConfiguration:", &__block_literal_global_28, v2, v3);
  gProcessMonitor = (uint64_t)result;
  return result;
}

uint64_t __mx_runningBoardServices_initializeMonitoring_block_invoke_26(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)[MEMORY[0x1E4F96448] descriptor];
  [v3 setValues:33];
  [v3 setEndowmentNamespaces:&unk_1EE605DD0];
  [a2 setStateDescriptor:v3];
  return [a2 setUpdateHandler:&__block_literal_global_35_0];
}

void __mx_runningBoardServices_initializeMonitoring_block_invoke_36(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "setPredicates:", objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  uint64_t v3 = *(void **)(a1 + 32);
}

uint64_t __mx_runningBoardServices_createAndStoreAssertionForPIDWithInvalidationHandler_block_invoke(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a3)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716E90](gProcessAssertionMutex);
  for (CFIndex i = 0; ; ++i)
  {
    CFIndex Count = gProcessAssertionArray;
    if (gProcessAssertionArray) {
      CFIndex Count = CFArrayGetCount((CFArrayRef)gProcessAssertionArray);
    }
    if (i >= Count) {
      break;
    }
    if (CFArrayGetValueAtIndex((CFArrayRef)gProcessAssertionArray, i) == a2)
    {
      if (gHostProcessAssertionDictionary
        && CFDictionaryContainsKey((CFDictionaryRef)gHostProcessAssertionDictionary, a2))
      {
        objc_msgSend((id)CFDictionaryGetValue((CFDictionaryRef)gHostProcessAssertionDictionary, a2), "invalidate");
        CFDictionaryRemoveValue((CFMutableDictionaryRef)gHostProcessAssertionDictionary, a2);
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)gProcessAssertionArray, i);
      return MEMORY[0x199716EA0](gProcessAssertionMutex);
    }
  }
  return MEMORY[0x199716EA0](gProcessAssertionMutex);
}

uint64_t __mx_runningBoardServices_initializeGlobalAssertionProperties_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  gProcessAssertionArray = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  gHostProcessAssertionDictionary = (uint64_t)CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t result = FigReentrantMutexCreate();
  gProcessAssertionMutex = result;
  return result;
}

uint64_t __initializeLogging_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  uint64_t result = fig_note_initialize_category_with_default_work();
  if ((dword_1E9359EF8 & 0x100) != 0) {
    dword_1E9359EF8 = 0;
  }
  return result;
}

uint64_t __mx_runningBoardServices_createAssertionForTarget_block_invoke()
{
  uint64_t result = getpid();
  mx_runningBoardServices_createAssertionForTarget_pid = result;
  return result;
}

BOOL CMSUtility_AreRoutingContextsEquivalent(uint64_t a1, uint64_t a2)
{
  if (!FigCFEqual())
  {
    [+[MXSessionManager sharedInstance] systemMirroringRoutingContextUUID];
    if (FigCFEqual())
    {
      if (FigCFEqual()) {
        return 1;
      }
      if (FigCFEqual()) {
        return FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(a2) == 0;
      }
      return 0;
    }
    if (FigCFEqual()) {
      return FigCFEqual() != 0;
    }
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (!FigCFEqual()) {
    return 0;
  }
  if (!FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(a2)) {
    return 1;
  }
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a2, 0, (uint64_t)&cf);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
  {
    CFArrayRef theArray = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    unsigned int v8 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v5 + 48);
    BOOL v6 = 1;
    if (v8)
    {
      v8(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
      if (theArray)
      {
        if (CFArrayGetCount(theArray)) {
          BOOL v6 = 0;
        }
      }
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

BOOL CMSUtilityPredicate_IsSessionUsingRoutingContext(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = [a2 routingContextUUID];
  return CMSUtility_AreRoutingContextsEquivalent(a3, v4);
}

uint64_t CMSUtilityPredicate_HasSameAudioCategory(uint64_t a1, void *a2)
{
  [a2 audioCategory];
  return FigCFEqual();
}

uint64_t CMSUtilityPredicate_IsSameClientAndNotStopped(int a1, void *a2, CFNumberRef number)
{
  int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (!a2) {
    return 0;
  }
  uint64_t result = [a2 isPlaying];
  if (result)
  {
    int v5 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    return v5 == valuePtr;
  }
  return result;
}

void *CMSUtility_GetIsPlaying(void *result)
{
  if (result) {
    return (void *)[result isPlaying];
  }
  return result;
}

uint64_t CMSUtilityPredicate_BelongsToTheSameProcessAndIsActiveAndStopsWhenBackgrounded(int a1, void *a2, CFNumberRef number)
{
  int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  int v4 = [a2 isActive];
  uint64_t result = 0;
  if (v4)
  {
    int v6 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    if (v6 == valuePtr) {
      return [a2 stopsWhenDeviceLocks];
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CMSUtilityPredicate_BelongsToTheSameProcessAndIsPlayingAndStopsWhenBackgrounded(int a1, void *a2, CFNumberRef number)
{
  int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (!a2) {
    return 0;
  }
  uint64_t result = [a2 isPlaying];
  if (!result) {
    return result;
  }
  int v5 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
  if (v5 == valuePtr) {
    return [a2 stopsWhenDeviceLocks];
  }
  else {
    return 0;
  }
}

uint64_t CMSUtilityPredicate_IsVolumeButtonClient(uint64_t a1, void *a2, const __CFString *a3)
{
  int v4 = PVMCategoriesAreEquivalent((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", [a2 audioCategory]), (const void *)objc_msgSend(a2, "audioMode"), a3, 0);
  if ([a2 isActive])
  {
    LODWORD(result) = [a2 hasPhoneCallBehavior];
    if (v4) {
      return 1;
    }
    else {
      return result;
    }
  }
  else
  {
    LODWORD(result) = [a2 wantsVolumeChangesWhenPausedOrInactive];
    if (v4) {
      return result;
    }
    else {
      return 0;
    }
  }
}

BOOL CMSUtilityPredicate_IsSameClientAndActive(int a1, void *a2, CFNumberRef number)
{
  int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  int v4 = [a2 isActive];
  BOOL result = 0;
  if (v4)
  {
    int v6 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    if (v6 == valuePtr)
    {
      [a2 audioCategory];
      return FigCFEqual() == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMSUtilityPredicate_IsActiveWithDisplayID(uint64_t a1, void *a2)
{
  uint64_t result = [a2 isActive];
  if (result)
  {
    [a2 displayID];
    return FigCFEqual() != 0;
  }
  return result;
}

uint64_t CMSUtilityPredicate_SessionWantsSystemSoundNotifications(uint64_t a1, void *a2)
{
  return [a2 wantsVibrationNotifications];
}

uint64_t CMSUtilityPredicate_SessionHasSubscribedToNotification(uint64_t a1, void *a2, uint64_t a3)
{
  return objc_msgSend((id)objc_msgSend(a2, "notificationsSubscribedTo"), "containsObject:", a3);
}

void *CMSUtility_PlaysToCarAltAudio(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    [result audioCategory];
    if (FigCFEqual()
      || ([v1 audioCategory], uint64_t result = (void *)FigCFEqual(), result))
    {
      [v1 audioMode];
      return (void *)(FigCFEqual() != 0);
    }
  }
  return result;
}

id CMSMUtility_GetCurrentAudioDestinationForVoiceOverSession()
{
  id v0 = @"VirtualAudioDevice_Default";
  if (CMSMDeviceState_IsVoiceOverOn())
  {
    id v1 = [+[MXSessionManager sharedInstance] copyVoiceOverSession];
    uint64_t v2 = [v1 audioDestinationPriority];
    if (v1) {
      BOOL v3 = v2 == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3) {
      id v0 = [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v2];
    }
  }
  return v0;
}

uint64_t CMSMUtility_AreVADsRoutedToTheSamePhysicalDevice(uint64_t a1, uint64_t a2)
{
  int VADIDForVADName = CMSMUtility_GetVADIDForVADName(a1);
  if (VADIDForVADName == CMSMUtility_GetVADIDForVADName(a2)) {
    return 1;
  }
  CFTypeRef v11 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v9 = 0;
  CFTypeRef v10 = 0;
  CFTypeRef v7 = 0;
  CFTypeRef v8 = 0;
  cmsmCopyCurrentActiveRouteInfoAtIndexForVADUID(a1, 0, &cf, &v11, &v10);
  cmsmCopyCurrentActiveRouteInfoAtIndexForVADUID(a2, 0, &v9, &v8, &v7);
  BOOL v5 = FigCFEqual() && FigCFEqual() && FigCFEqual();
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v5;
}

uint64_t CMSUtility_AreSessionsRoutedToTheSamePhysicalDevice(void *a1, void *a2)
{
  id v4 = @"VirtualAudioDevice_Default";
  uint64_t v5 = [a1 audioDestinationPriority];
  id v6 = @"VirtualAudioDevice_Default";
  if (a1)
  {
    id v6 = @"VirtualAudioDevice_Default";
    if (v5) {
      id v6 = [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v5];
    }
  }
  uint64_t v7 = [a2 audioDestinationPriority];
  if (a2 && v7) {
    id v4 = [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v7];
  }
  return CMSMUtility_AreVADsRoutedToTheSamePhysicalDevice((uint64_t)v6, (uint64_t)v4);
}

uint64_t CMSUtilityPredicate_ShouldDuck(void *a1, void *a2)
{
  if (a2 == a1 || ![a2 isPlaying])
  {
    BOOL v5 = 1;
  }
  else
  {
    unsigned int v4 = [a2 clientPriority];
    BOOL v5 = v4 > [a1 clientPriority];
  }
  int v6 = CMSUtility_AreSessionsRoutedToTheSamePhysicalDevice(a1, a2);
  int v7 = [a2 isActive];
  uint64_t v8 = 0;
  if (a2 != a1 && v7)
  {
    CFTypeRef v9 = CMSMUtility_CopyCurrentRouteTypes();
    if (v6) {
      char v10 = v5;
    }
    else {
      char v10 = 1;
    }
    LODWORD(v8) = (v10 & 1) == 0
               || ([a1 audioCategory], FigCFEqual())
               && (FigCFArrayContainsValue()
                || ([a2 audioCategory], FigCFEqual()));
    [a2 audioCategory];
    if (FigCFEqual()) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v8;
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  return v8;
}

BOOL CMSUtility_SessionDucksOthers(void *a1)
{
  return [a1 interruptionStyle] == 32;
}

__CFArray *CMSUtility_CopyDuckableSessionsPlayingToDefaultVAD(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  BOOL v3 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v4 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8 * v7);
        if (v8 != a1)
        {
          if ([*(id *)(*((void *)&v12 + 1) + 8 * v7) isPlaying])
          {
            unsigned int v9 = [v8 clientPriority];
            if (v9 <= [a1 clientPriority])
            {
              if (CMSUtility_IsPlayingToDefaultVAD(v8)) {
                CFArrayAppendValue(Mutable, v8);
              }
            }
          }
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (CFArrayGetCount(Mutable)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = Mutable == 0;
  }
  if (!v10)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t CMSUtility_IsSessionTheDefaultMusicApp(void *a1)
{
  [a1 displayID];
  [+[MXSessionManager sharedInstance] defaultMusicApp];
  return FigCFEqual();
}

uint64_t CMSUtility_DidSessionRecentlyWantToPauseSpokenAudio(void *a1)
{
  return [a1 recentlyWantedToPauseSpokenAudio];
}

BOOL CMSUtility_IsDoingSpokenAudio(void *a1)
{
  if (CMSMUtility_IsCarPlaySessionPresent())
  {
    [a1 audioMode];
    if (FigCFEqual()) {
      return 0;
    }
  }
  [a1 audioMode];
  if (FigCFEqual()) {
    return 1;
  }
  [a1 audioMode];
  return FigCFEqual() != 0;
}

uint64_t CMSUtility_IsDisruptiveWhenGoingActive(void *a1)
{
  int outData = 1;
  int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)[a1 audioCategory]);
  int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName([a1 audioMode]);
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)[a1 activationContext], (const void *)objc_msgSend(a1, "allowedPortTypes"));
  *(void *)&inAddress.mSelector = *(void *)"rsidbolg";
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  if (AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData))
  {
    int outData = 1;
  }
  if (RouteConfigurationDictionary) {
    CFRelease(RouteConfigurationDictionary);
  }
  return outData;
}

uint64_t CMSUtility_IsAllowedToStopOthers(void *a1)
{
  if ([a1 applicationState] == 8) {
    return 1;
  }
  if (![a1 applicationState]) {
    return 1;
  }
  [a1 setApplicationState:CMSUtility_GetApplicationStateForSession(a1)];
  if ([a1 applicationState] == 8 || !objc_msgSend(a1, "applicationState")) {
    return 1;
  }
  if ([a1 applicationState] != 4)
  {
    if (!dword_1E9359ED0) {
      return 0;
    }
LABEL_25:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  if (!CMSUtility_HasBackgroundEntitlement(a1))
  {
    if (!dword_1E9359ED0) {
      return 0;
    }
    goto LABEL_25;
  }
  int v2 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID];
  if (v2 == objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue")) {
    return 1;
  }
  if (objc_msgSend((id)objc_msgSend(a1, "displayID"), "isEqualToString:", -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID")))return 1; {
  if (CMSUtility_IsSessionTheDefaultMusicApp(a1))
  }
    return 1;
  [a1 displayID];
  [+[MXSessionManager sharedInstance] appAllowedToInitiatePlaybackTemporarily];
  if (FigCFEqual()) {
    return 1;
  }
  if (+[MXSystemController isAppAllowedToInitiatePlayback:](MXSystemController, "isAppAllowedToInitiatePlayback:", [a1 displayID]))
  {
    return 1;
  }
  if (CMSUtility_HasAssertionsToStartNonMixablePlayback(a1)) {
    return 1;
  }
  [a1 audioCategory];
  if (FigCFEqual()) {
    return 1;
  }
  if ([a1 hasPhoneCallBehavior]) {
    return 1;
  }
  [a1 audioCategory];
  if (FigCFEqual()
    || [a1 clientPriority] == 10
    || CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1)
    && CMSMUtility_IAPAppProcessIDIsUsingAccessory([a1 displayID]))
  {
    return 1;
  }
  if (dword_1E9359ED0) {
    goto LABEL_25;
  }
  return 0;
}

uint64_t CMSUtility_HasAssertionsToStartNonMixablePlayback(void *a1)
{
  CFArrayRef v1 = (const __CFArray *)MX_RunningBoardServices_CopyAssertionReasonsForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
LABEL_9:
    uint64_t v8 = 0;
  }
  else
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(v2, v5);
      uint64_t UInt64 = FigCFNumberGetUInt64();
      if (UInt64 == 16 || UInt64 == 50004) {
        break;
      }
      if (v4 == ++v5) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = 1;
  }
  CFRelease(v2);
  return v8;
}

uint64_t CMSUtility_IsAllowedToStopThisSession(void *a1, void *a2)
{
  uint64_t result = CMSUtility_IsAllowedToStopOthers(a1);
  if (result) {
    return !a2 || [a2 applicationState] != 8;
  }
  return result;
}

uint64_t CMSUtility_IsReplayKitExtension(void *a1)
{
  CFArrayRef v1 = (const void *)MX_RunningBoardServices_CopyBundleExtensionPointID(a1);
  uint64_t v2 = FigCFEqual();
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void *CMSUtility_GetAudioMode(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 audioMode];
  }
  return a1;
}

uint64_t cmsutility_hasAssertionsToStartMixablePlayback(void *a1)
{
  CFArrayRef v2 = (const __CFArray *)MX_RunningBoardServices_CopyAssertionReasonsForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
  if (!v2) {
    return 1;
  }
  CFArrayRef v3 = v2;
  CFIndex Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
LABEL_17:
    uint64_t HasGPSEntitlement = 1;
  }
  else
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      CFArrayGetValueAtIndex(v3, i);
      uint64_t UInt64 = FigCFNumberGetUInt64();
      if (UInt64 > 9999)
      {
        if ((unint64_t)(UInt64 - 10000) < 6 || UInt64 == 50002 || UInt64 == 50004) {
          goto LABEL_17;
        }
      }
      else if ((unint64_t)UInt64 <= 0x17 && ((1 << UInt64) & 0x8937FE) != 0)
      {
        goto LABEL_17;
      }
    }
    uint64_t HasGPSEntitlement = CMSUtility_HasGPSEntitlement(a1);
  }
  CFRelease(v3);
  return HasGPSEntitlement;
}

void *CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(void *result)
{
  if (result) {
    return (void *)[result prefersNoInterruptionWhenSecureMicrophoneIsEngaged];
  }
  return result;
}

uint64_t cmsutility_hasAssertionsToStartMixableRecording(void *a1)
{
  CFArrayRef v2 = (const __CFArray *)MX_RunningBoardServices_CopyAssertionReasonsForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
  if (!v2) {
    return 1;
  }
  CFArrayRef v3 = v2;
  CFIndex Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
LABEL_17:
    uint64_t HasGPSEntitlement = 1;
  }
  else
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      CFArrayGetValueAtIndex(v3, i);
      uint64_t UInt64 = FigCFNumberGetUInt64();
      if (UInt64 > 9999)
      {
        if ((unint64_t)(UInt64 - 10000) < 6 || UInt64 == 50002 || UInt64 == 50004) {
          goto LABEL_17;
        }
      }
      else if ((unint64_t)UInt64 <= 0x17 && ((1 << UInt64) & 0x8917FE) != 0)
      {
        goto LABEL_17;
      }
    }
    uint64_t HasGPSEntitlement = CMSUtility_HasGPSEntitlement(a1);
  }
  CFRelease(v3);
  return HasGPSEntitlement;
}

BOOL CMSUtility_IsAnyoneBesidesAssistantsSessionsActive(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFArrayRef v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * v6);
        if (v7 != a1)
        {
          if ([*(id *)(*((void *)&v10 + 1) + 8 * v6) isActive])
          {
            [v7 audioCategory];
            if (!FigCFEqual())
            {
              if (CMSUtility_DoesSessionActuallyPlayAudio(v7))
              {
                BOOL v8 = v7 != 0;
                goto LABEL_14;
              }
            }
          }
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  BOOL v8 = 0;
LABEL_14:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v8;
}

uint64_t CMSUtility_DoesSessionActuallyPlayAudio(void *a1)
{
  if (!a1 || ![a1 doesntActuallyPlayAudio]) {
    return 1;
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t CMSUtility_SessionWithPIDCanContinueAirPlayingVideoIfScreenIsLocked(int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!CMSMDeviceState_ScreenIsBlanked() || !CMSMUtility_IsAirPlayVideoActive()) {
    return 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFArrayRef v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1)
        {
          if ([v7 isPlaying])
          {
            [v7 audioCategory];
            if (FigCFEqual()
              || ([v7 audioCategory], FigCFEqual())
              || ([v7 audioCategory], FigCFEqual()))
            {
              uint64_t v8 = 1;
              goto LABEL_18;
            }
          }
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 0;
LABEL_18:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v8;
}

void *CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(void *a1)
{
  uint64_t result = CMSUtility_HasBackgroundEntitlement(a1);
  if (result)
  {
    uint64_t result = (void *)1;
    if ([a1 displayID])
    {
      if (CFStringFind((CFStringRef)[a1 displayID], @"WebKit", 1uLL).length > 0) {
        return 0;
      }
      [a1 displayID];
      if (FigCFArrayContainsValue()) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CMSUtility_IsSessionWithPIDAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFArrayRef v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1)
        {
          uint64_t v8 = (uint64_t)CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(v7);
          goto LABEL_11;
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 1;
LABEL_11:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v8;
}

uint64_t CMSUtility_HasGPSEntitlement(void *a1)
{
  if (([a1 hasFetchedGPSPrivileges] & 1) == 0)
  {
    objc_msgSend(a1, "setHasGPSPrivileges:", CMSUtility_FetchGPSEntitlementForSessionWithPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue")));
    [a1 setHasFetchedGPSPrivileges:1];
  }
  return [a1 hasGPSPrivileges];
}

BOOL CMSUtility_FetchGPSEntitlementForSessionWithPID(uint64_t a1)
{
  if ((int)a1 < 1) {
    return 0;
  }
  CFArrayRef v1 = (const __CFArray *)MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID(@"UIBackgroundModes", a1);
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  BOOL v4 = v3 == CFArrayGetTypeID() && CMSMUtility_AllowedToUseGPSInBackground(v2);
  CFRelease(v2);
  return v4;
}

uint64_t CMSUtility_IsSomeOtherNonIDSClientActiveOnDestination(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  CFArrayRef v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (([v7 isIDSMXCoreSession] & 1) == 0)
        {
          char v8 = [v7 isHardwareSafetySession];
          if (v7 != a1 && (v8 & 1) == 0 && CMSUtility_IsNonIDSClientActiveOnDestination(v7))
          {
            uint64_t v9 = 1;
            goto LABEL_14;
          }
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v9 = 0;
LABEL_14:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v9;
}

uint64_t CMSUtility_IsNonIDSClientActiveOnDestination(void *a1)
{
  if ([a1 isIDSMXCoreSession]) {
    return 0;
  }
  uint64_t result = [a1 isActive];
  if (result)
  {
    if (([a1 doesntActuallyPlayAudio] & 1) != 0
      || ([a1 hwControlFlags] & 0x20000) == 0 && (objc_msgSend(a1, "hwControlFlags") & 2) == 0)
    {
      return 0;
    }
    uint64_t v3 = [a1 audioDestinationPriority];
    if (a1)
    {
      if (v3) {
        [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v3];
      }
    }
    return FigCFEqual() != 0;
  }
  return result;
}

uint64_t CMSUtility_IsSomeOtherNonIDSClientActiveWithNonDefaultVADConfiguration(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFArrayRef v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * v6);
        if (v7 != a1
          && CMSUtility_IsNonIDSClientActiveOnDestination(*(void **)(*((void *)&v10 + 1) + 8 * v6))
          && (CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)[v7 audioCategory]) != 1668505974|| CMSMVAUtility_GetVADModeFromFigModeName(objc_msgSend(v7, "audioMode")) != 1768776806))
        {
          uint64_t v8 = 1;
          goto LABEL_14;
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 0;
LABEL_14:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v8;
}

float CMSUtility_GetUserVolume(void *a1)
{
  uint64_t v11 = 0;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)long long v10 = 0u;
  CFTypeRef v7 = 0;
  CFTypeRef cf = 0;
  float v1 = 0.5;
  if (!CMSUtility_CopyCurrentCategoryAndDeviceRoute(a1, (NSDictionary **)&cf, &v7, &v9[1], &v10[1], v10))
  {
    CFArrayRef v2 = +[MXSessionManager sharedInstance];
    CFStringRef v3 = [(MXSessionManager *)v2 getUncustomizedCategory:cf];
    v5[0] = *(_OWORD *)v9;
    v5[1] = *(_OWORD *)v10;
    uint64_t v6 = v11;
    float v1 = PVMGetVolumePreference(v3, v7, (uint64_t)v5);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v7)
  {
    CFRelease(v7);
    CFTypeRef v7 = 0;
  }
  if (v9[1])
  {
    CFRelease(v9[1]);
    v9[1] = 0;
  }
  if (v10[1])
  {
    CFRelease(v10[1]);
    v10[1] = 0;
  }
  if (v10[0]) {
    CFRelease(v10[0]);
  }
  return v1;
}

uint64_t CMSUtility_CopyCurrentCategoryAndDeviceRoute(void *a1, NSDictionary **a2, void *a3, CFTypeRef *a4, CFTypeRef *a5, CFTypeRef *a6)
{
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v17 = 0;
  if ([a1 audioCategory])
  {
    long long v12 = (NSDictionary *)CFRetain((CFTypeRef)[a1 audioCategory]);
    long long v13 = (const void *)[a1 audioMode];
    long long v14 = (const void *)[a1 activationContext];
    if (v13) {
      CFRetain(v13);
    }
  }
  else
  {
    long long v12 = (NSDictionary *)CFRetain(@"Audio/Video");
    long long v13 = 0;
    long long v14 = 0;
  }
  if (![a1 isActive])
  {
    uint64_t v15 = CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration(v12, (uint64_t)v13, v14, 0, &cf, &v18, &v17);
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  PVMCopyCurrentDeviceRoute(&cf, &v18, &v17);
  uint64_t v15 = 0;
  if (a2)
  {
LABEL_9:
    *a2 = v12;
    long long v12 = 0;
  }
LABEL_10:
  if (a3)
  {
    *a3 = v13;
    long long v13 = 0;
  }
  if (a4)
  {
    *a4 = cf;
    CFTypeRef cf = 0;
  }
  if (a5)
  {
    *a5 = v18;
    CFTypeRef v18 = 0;
  }
  if (a6)
  {
    *a6 = v17;
    CFTypeRef v17 = 0;
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v15;
}

CFNumberRef CMSUtility_CopyFadeDuration(void *a1, int a2, int a3)
{
  int valuePtr = -1082130432;
  if (a1 && [a1 interruptionFadeDurationSetByClient])
  {
    [a1 interruptionFadeDuration];
    goto LABEL_4;
  }
  if (a2 == 1) {
    goto LABEL_14;
  }
  if (a2) {
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  }
  if (([a1 isTheAssistant] & 1) != 0
    || ([a1 isIDSMXCoreSession] & 1) != 0
    || [a1 hasPhoneCallBehavior])
  {
    int v8 = 1008981770;
LABEL_15:
    int valuePtr = v8;
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  }
  if (!a3)
  {
LABEL_14:
    int v8 = 1060320051;
    goto LABEL_15;
  }
  float FadeOutDurationForPlaybackHandoff = CMSMUtility_GetFadeOutDurationForPlaybackHandoff();
LABEL_4:
  int valuePtr = LODWORD(FadeOutDurationForPlaybackHandoff);
  if (FadeOutDurationForPlaybackHandoff == 0.0) {
    return 0;
  }
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
}

BOOL CMSUtility_ShouldInterrupt(void *a1, void *a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1 == a2
    || ![a2 isActive]
    || [a1 siriInputDeviceUUID]
    || [a2 siriInputDeviceUUID])
  {
    return 0;
  }
  if (([a1 prefersNoInterruptions] & 1) != 0 || objc_msgSend(a2, "prefersNoInterruptions"))
  {
    if (dword_1E9359ED0) {
      goto LABEL_16;
    }
    return 0;
  }
  if ([a1 isSharePlayCallSession]
    && [a2 isSharePlayMediaSession])
  {
    if (dword_1E9359ED0) {
      goto LABEL_16;
    }
    return 0;
  }
  if (CMSMVAUtility_IsAdditiveRoutingEnabled()
    && [+[MXSessionManager sharedInstance] canSessionsCoexistDueToIndependentRecording:a1 victim:a2])
  {
    if (dword_1E9359ED0)
    {
LABEL_16:
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_17:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (a3)
  {
    if (![a2 isActive]) {
      return 0;
    }
    [a2 audioCategory];
    return FigCFEqual() != 0;
  }
  int IsContextSystemMusicAndIndependent = FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent([a1 routingContextUUID]);
  if (IsContextSystemMusicAndIndependent != FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent([a2 routingContextUUID])
    && !CMSMDeviceState_ItsAHomePod())
  {
    if (!dword_1E9359ED0) {
      return 0;
    }
    goto LABEL_16;
  }
  if (FigRoutingManagerContextUtilities_IsContextVideoAndIndependent([a1 routingContextUUID])
    || FigRoutingManagerContextUtilities_IsContextVideoAndIndependent([a2 routingContextUUID]))
  {
    if (!dword_1E9359ED0) {
      return 0;
    }
    goto LABEL_16;
  }
  if (![a1 mixesWithEveryone]
    || ![a2 isActive]
    || [a1 isTheAssistant] && (objc_msgSend(a2, "isRecording") & 1) != 0
    || [a1 prefersToInterruptActiveRecordingSessions]
    && [a2 isRecording]
    && ![a2 isTheAssistant])
  {
    if ([a2 isActive])
    {
      unsigned int v12 = [a2 clientPriority];
      uint64_t v7 = v12 <= [a1 clientPriority];
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (![a2 mixesWithEveryone]) {
      goto LABEL_88;
    }
    if ([+[MXSessionManager sharedInstance] isMixableSessionBeingInterruptedByNextRecordingClient:a1 victim:a2])
    {
      if (dword_1E9359ED0)
      {
LABEL_51:
        long long v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        unsigned int v15 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_72;
      }
      goto LABEL_71;
    }
    [a1 audioCategory];
    if (FigCFEqual()
      || ([a1 hasPhoneCallBehavior] & 1) != 0
      || ([a1 audioCategory], FigCFEqual()))
    {
      [a2 audioCategory];
      if (FigCFEqual())
      {
LABEL_56:
        unsigned int v15 = 0;
        goto LABEL_72;
      }
      if ([a2 isAirPlayReceiverSession]
        && ([a1 hasPhoneCallBehavior] & 1) == 0)
      {
        if (!dword_1E9359ED0) {
          goto LABEL_56;
        }
        goto LABEL_61;
      }
      if ([a2 hasAudioMode:@"EchoCancellationInput"])
      {
        if (!dword_1E9359ED0) {
          goto LABEL_56;
        }
LABEL_61:
        long long v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_56;
      }
    }
    else
    {
      if ([a1 clientPriority] != 20
        || ![a2 hasAudioMode:@"EchoCancellationInput"])
      {
        goto LABEL_56;
      }
      if (dword_1E9359ED0) {
        goto LABEL_51;
      }
    }
LABEL_71:
    unsigned int v15 = 1;
LABEL_72:
    if ((objc_msgSend(a2, "applicationState", v20, v21) == 2
       || [a2 applicationState] == 4)
      && [a2 isActive]
      && ([a2 isPlaying] & 1) == 0)
    {
      unsigned int v15 = [a2 hwControlFlags] & 2;
    }
    if (![a1 isTheAssistant]) {
      goto LABEL_85;
    }
    if (CMSMUtility_IsCarPlaySessionPresent()
      && CMSUtility_PlaysToCarAltAudio(a2)
      && CMSUtility_DoesSessionActuallyPlayAudio(a2))
    {
      CMSMUtility_HandOverInterruptionsToSession(a2, a1);
    }
    else if (([a2 isCarSession] & 1) == 0 && (objc_msgSend(a2, "isHardwareSafetySession") & 1) == 0)
    {
      unsigned int v15 = [a2 isIDSMXCoreSession] ^ 1;
LABEL_85:
      int v16 = [a1 hasAudioMode:@"Beacon"];
      int v17 = [a1 hasAudioCategory:@"HearingTest"];
      if ([a1 isHardwareSafetySession] | v17 | v16) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = v15;
      }
LABEL_88:
      if (CMSMVAUtility_IsAdditiveRoutingEnabled()
        && v7
        && ([a1 isTheAssistant] & 1) == 0
        && (([a1 hasAudioMode:@"SoundRecognition"] & 1) != 0
         || [a2 hasAudioMode:@"SoundRecognition"])
        && (([a2 isRoutedToOnDemandVAD] & 1) != 0
         || [a1 willRouteToOnDemandVADOnActivation]))
      {
        if (!dword_1E9359ED0) {
          return 0;
        }
        uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        goto LABEL_17;
      }
      int v18 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
      if (v18 == objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue"))
      {
        [a1 audioCategory];
        if (FigCFEqual())
        {
          if (CMSMUtility_IsRecordingCategory((const void *)[a2 audioCategory])) {
            return 0;
          }
        }
        [a2 audioCategory];
        if (FigCFEqual())
        {
          if (CMSMUtility_IsRecordingCategory((const void *)[a1 audioCategory])) {
            return 0;
          }
        }
      }
      return v7;
    }
    unsigned int v15 = 0;
    goto LABEL_85;
  }
  int v10 = CMSMDeviceState_ItsAHomePod();
  int v11 = [a1 wantsToPauseSpokenAudio];
  if (v10)
  {
    if (!v11
      || !CMSUtility_IsDoingSpokenAudio(a2)
      || FigRoutingManagerIsConfigurationWHASilentPrimary([a2 routingContextUUID])
      || ([a2 prefersNoInterruptionsByMixableSessions] & 1) != 0)
    {
      return 0;
    }
    CMSUtility_GetCurrentAudioDestination(a1);
    CMSUtility_GetCurrentAudioDestination(a2);
    [a1 setDontTakeOverHardware:FigCFEqual() != 0];
    return 1;
  }
  if (!v11 || !CMSUtility_IsDoingSpokenAudio(a2)) {
    return 0;
  }
  uint64_t v7 = [a2 prefersNoInterruptionsByMixableSessions] ^ 1;
  if (([a1 isTheAssistant] & 1) == 0)
  {
    CMSUtility_GetCurrentAudioDestination(a1);
    CMSUtility_GetCurrentAudioDestination(a2);
    [a1 setDontTakeOverHardware:FigCFEqual() != 0];
  }
  return v7;
}

uint64_t CMSUtility_ShouldSessionToInterruptHandOverInterruptions(void *a1, void *a2)
{
  if ([a1 handsOverInterruptionsToInterruptor]
    && ([a2 handsOverInterruptionsToInterruptor] & 1) != 0
    || [a1 mixesWithEveryone] && (objc_msgSend(a1, "wantsToPauseSpokenAudio") & 1) != 0)
  {
    return 1;
  }
  else
  {
    return [a1 isTheAssistant];
  }
}

BOOL CMSUtility_ShouldSessionToInterruptHandOverDucking(void *a1, void *a2)
{
  int v3 = [a1 interruptionStyle];
  return [a2 interruptionStyle] == 32 && v3 == 32;
}

void *CMSUtility_GetDisplayID(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 displayID];
  }
  return a1;
}

uint64_t CMSUtility_IsPlayingToSystemSoundLocalVAD(void *a1)
{
  uint64_t v2 = [a1 audioDestinationPriority];
  if (a1 && v2) {
    [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v2];
  }
  return FigCFEqual();
}

uint64_t CMSUtility_IsPlayingToSystemSoundRemoteVAD(void *a1)
{
  uint64_t v2 = [a1 audioDestinationPriority];
  if (a1 && v2) {
    [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v2];
  }
  return FigCFEqual();
}

uint64_t CMSUtilityPredicate_IsPlayingAndPlaysToCarMainAudio(uint64_t a1, void *a2)
{
  uint64_t result = [a2 isPlaying];
  if (result) {
    return CMSUtility_PlaysToCarMainAudio(a2);
  }
  return result;
}

BOOL CMSUtility_PlaysToCarMainAudio(void *a1)
{
  if (!a1) {
    return 0;
  }
  [a1 audioCategory];
  BOOL v2 = 0;
  if (!FigCFEqual())
  {
    [a1 audioCategory];
    if (!FigCFEqual()
      && !CMSUtility_PlaysToCarAltAudio(a1)
      && CMSUtility_DoesSessionActuallyPlayAudio(a1))
    {
      BOOL v2 = 1;
    }
  }
  if ([a1 isTheAssistant]
    && FigRoutingManager_iOSIsCarPlayAuxStreamSupported())
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return v2;
}

uint64_t CMSUtility_ShouldBorrowCarMainAudio(void *a1)
{
  if (a1)
  {
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    if (-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [a1 audioCategory]))
    {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    [a1 audioMode];
    if (FigCFEqual()) {
      goto LABEL_29;
    }
    if ([a1 hasPhoneCallBehavior]) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if FigCFEqual() || ([a1 isTheAssistant]) {
      goto LABEL_29;
    }
    [a1 audioCategory];
    if (!FigCFEqual())
    {
      [a1 audioCategory];
      if (!FigCFEqual())
      {
        LOBYTE(v3) = 0;
        return v3;
      }
    }
    unsigned int v2 = [a1 interruptionStyle] - 1;
    if (v2 > 7) {
LABEL_29:
    }
      LOBYTE(v3) = 1;
    else {
      return (0x1010100010100uLL >> (8 * v2));
    }
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3;
}

uint64_t CMSUtility_GetStarkInterruptionContext(uint64_t result, void *a2, uint64_t a3)
{
  if (!a3) {
    return result;
  }
  int v5 = result;
  *(_DWORD *)a3 = result;
  uint64_t result = [a2 audioCategory];
  *(void *)(a3 + 32) = result;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  if (!a2) {
    return result;
  }
  if (v5 == 1)
  {
    if (FigEndpointCentralEntityIsDoingActivity(qword_1E9359C70, 0x1EE5E67A8, @"PhoneCall")
      && (uint64_t result = CMSMUtility_PhoneCallOrRingtoneExists(), !result))
    {
      *(_DWORD *)(a3 + 16) = -1;
    }
    else
    {
      uint64_t result = CMSMUtility_IsPlayAndRecordCategory([a2 audioCategory]);
      if (!result)
      {
        [a2 audioCategory];
        uint64_t result = FigCFEqual();
        if (!result) {
          return result;
        }
      }
    }
    *(_DWORD *)(a3 + 24) = -1;
    return result;
  }
  if (v5) {
    return result;
  }
  [a2 audioCategory];
  if (FigCFEqual())
  {
    int v6 = -1;
LABEL_14:
    *(_DWORD *)(a3 + 24) = v6;
    goto LABEL_15;
  }
  if (CMSMUtility_ShouldCarPlaySpeechAppStateBeSet((uint64_t)a2))
  {
    int v6 = 10;
    goto LABEL_14;
  }
LABEL_15:
  uint64_t result = [a2 hasPhoneCallBehavior];
  if ((result & 1) != 0 || ([a2 audioCategory], uint64_t result = FigCFEqual(), result)) {
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

void CMSUtilityApplier_InheritApplicationStateAndPostApplicationStateDidChangeNotification(void *a1, const __CFNumber *a2)
{
  objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
  CFNumberRef SInt32 = (const __CFNumber *)FigCFNumberCreateSInt32();
  CMSessionMgrHandleApplicationStateChange(SInt32, a2, 0);
  if (SInt32)
  {
    CFRelease(SInt32);
  }
}

void CMSUtility_PostInterruptionCommandNotification(void *a1, unsigned int a2, __CFString *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unsigned int valuePtr = a2;
  CFAllocatorRef v17 = CFGetAllocator(a1);
  CFNumberRef v18 = CFNumberCreate(v17, kCFNumberSInt32Type, &valuePtr);
  if (v18)
  {
    CFNumberRef v19 = v18;
    CFDictionarySetValue(Mutable, @"InterruptionCmd", v18);
    CFRelease(v19);
  }
  if (a3) {
    uint64_t v20 = a3;
  }
  else {
    uint64_t v20 = @"unknown interruptor";
  }
  CFDictionarySetValue(Mutable, @"InterruptorName", v20);
  if (a4) {
    CFDictionarySetValue(Mutable, @"Status", a4);
  }
  if (a7) {
    CFDictionarySetValue(Mutable, @"InterruptionReason", a7);
  }
  if (a8) {
    CFDictionarySetValue(Mutable, @"InterruptorBundleID", a8);
  }
  int v21 = [a1 applicationState];
  uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
  if (v21 == 2) {
    CFDictionarySetValue(Mutable, @"InterruptedDueToAppSuspension", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (a5) {
    CFDictionarySetValue(Mutable, @"QuietVolume", a5);
  }
  if (a6) {
    CFDictionarySetValue(Mutable, @"VolumeChangeDuration", a6);
  }
  int IsAsyncDuckingEnabled = MX_FeatureFlags_IsAsyncDuckingEnabled();
  if ((a2 & 0xFFFFFFFE) == 2 && IsAsyncDuckingEnabled) {
    CFDictionarySetValue(Mutable, @"ModeAsync", *v22);
  }
  if (MX_FeatureFlags_IsAudiomxdEnabled()
    || ![a1 isAudioSession]
    || ([a1 isFigInstantiatedAudioSession] & 1) != 0)
  {
    int IsAirPlayVideoActive = CMSMUtility_IsAirPlayVideoActive();
    __int16 v25 = (void (*)(uint64_t, uint64_t, void, __CFDictionary *))unk_1E9359B68;
    if (unk_1E9359B68)
    {
      uint64_t v26 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
      uint64_t v27 = [a1 audioSessionID];
      v25(v26, v27, valuePtr, Mutable);
    }
    if (IsAirPlayVideoActive)
    {
      if (a2)
      {
LABEL_32:
        if ([a1 isCarSession])
        {
          CMSMUtility_PostNotificationToSession(a1, @"Interruption");
          float v38 = 0.5;
          CFNumberGetValue((CFNumberRef)a6, kCFNumberFloat32Type, &v38);
          usleep((float)(v38 * 1000000.0));
          goto LABEL_38;
        }
        if (Mutable) {
          CFRetain(Mutable);
        }
        id v29 = a1;
        long long v30 = MXGetNotificationSenderQueue();
        v37[0] = MEMORY[0x1E4F143A8];
        v37[1] = 3221225472;
        v37[2] = __CMSUtility_PostInterruptionCommandNotification_block_invoke_2;
        v37[3] = &unk_1E57CA3A0;
        v37[4] = a1;
        v37[5] = Mutable;
        long long v31 = v37;
        uint64_t v32 = 6727;
        goto LABEL_37;
      }
    }
    else
    {
      char v28 = [a1 isAudioOnlyAirPlayVideoActive];
      if (a2 || (v28 & 1) == 0) {
        goto LABEL_32;
      }
    }
    CMSMUtility_PostNotificationToSession(a1, @"AirPlayVideoWillBeInterrupted");
    goto LABEL_32;
  }
  long long v33 = (void (*)(uint64_t, uint64_t, void, __CFDictionary *))unk_1E9359B68;
  if (unk_1E9359B68)
  {
    uint64_t v34 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
    uint64_t v35 = [a1 audioSessionID];
    v33(v34, v35, valuePtr, Mutable);
    if (Mutable) {
      CFRetain(Mutable);
    }
    id v36 = a1;
    long long v30 = MXGetNotificationSenderQueue();
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3221225472;
    v39[2] = __CMSUtility_PostInterruptionCommandNotification_block_invoke;
    v39[3] = &unk_1E57CA3A0;
    v39[4] = a1;
    v39[5] = Mutable;
    long long v31 = v39;
    uint64_t v32 = 6672;
LABEL_37:
    MXDispatchAsync((uint64_t)"CMSUtility_PostInterruptionCommandNotification", (uint64_t)"CMSessionManager_SessionUtilities.m", v32, 0, 0, v30, (uint64_t)v31);
  }
LABEL_38:
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void *CMSUtilityApplier_ResumeWaitingLockStopper(void *result, unsigned char *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    if (([result isPlaying] & 1) != 0
      || ![v3 waitingToResumeWhenDeviceUnlocksOrInForeground])
    {
      if ([v3 wasInterruptedByNowPlayingApp])
      {
        CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@.%@", @"non-resumable", [v3 audioCategory]);
        valuePtr[0] = 1060320051;
        CFNumberRef v7 = CFNumberCreate(v5, kCFNumberFloat32Type, valuePtr);
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtility_PostInterruptionCommandNotification(v3, 1u, (__CFString *)objc_msgSend(v3, "clientName", v10, v12), v6, 0, v7, 0, 0);
        if (v7) {
          CFRelease(v7);
        }
        if (v6) {
          CFRelease(v6);
        }
        [v3 setWasInterruptedByNowPlayingApp:0];
      }
    }
    else
    {
      cmsSetIsPlaying(v3, 1);
      if (dword_1E9359ED0)
      {
        uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSUtility_PostInterruptionCommandNotification(v3, 5u, 0, 0, 0, 0, 0, 0);
      *a2 = 1;
      if ([v3 wasRecordingBeforeBeingInterrupted])
      {
        [v3 setIsRecording:1];
        [v3 setWasRecordingBeforeBeingInterrupted:0];
        CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
      }
    }
    return objc_msgSend(v3, "setWaitingToResumeWhenDeviceUnlocksOrInForeground:", 0, v9, v11);
  }
  return result;
}

void CMSUtilityApplier_PostNotification_StopCommand(void *a1, unsigned __int8 *a2)
{
}

void CMSUtilityApplier_PostNotification_StopCommandWithReason(void *a1, unsigned __int8 *a2, const void *a3)
{
  if (a1)
  {
    if (a2)
    {
      int v5 = *a2;
      CFNumberRef v6 = CMSUtility_CopyFadeDuration(0, 0, v5);
      if (v5) {
        CMSMUtility_PostNotifyStyleFadeOutAppliedForPlaybackHandoff();
      }
    }
    else
    {
      CFNumberRef v6 = CMSUtility_CopyFadeDuration(0, 0, 0);
    }
    CMSUtility_PostInterruptionCommandNotification(a1, 0, @"CMSessionManager", 0, 0, v6, a3, 0);
    if ([a1 needToEndInterruption]) {
      MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, @"interrupted", 1);
    }
    if ([a1 isActive]) {
      cmsSetIsActive(a1, 0, 0);
    }
    if (v6)
    {
      CFRelease(v6);
    }
  }
}

void CMSUtilityApplier_PostNotificationToBackgroundedSession_StopCommand(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFNumberRef v2 = CMSUtility_CopyFadeDuration(0, 0, 0);
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSUtility_PostInterruptionCommandNotification(a1, 0, @"CMSessionManager", 0, 0, v2, 0, 0);
    if (v2) {
      CFRelease(v2);
    }
    if (objc_msgSend(a1, "needToEndInterruption", v5, v6))
    {
      if ([a1 wantsToSendResumableEndInterruptionWhenBackgrounded]) {
        CFStringRef v4 = @"resumable.backgrounded";
      }
      else {
        CFStringRef v4 = @"interrupted";
      }
      MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, v4, 1);
    }
    if ([a1 isActive]) {
      cmsSetIsActive(a1, 0, 0);
    }
  }
}

void CMSUtilityApplier_PostNotificationToLockStoppers_StopCommand(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFNumberRef v2 = CMSUtility_CopyFadeDuration(0, 0, 0);
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSUtility_PostInterruptionCommandNotification(a1, 0, @"CMSessionManager", 0, 0, v2, 0, 0);
    if ([a1 wantsToSendResumableEndInterruptionWhenBackgrounded]) {
      CFStringRef v4 = @"resumable.backgrounded";
    }
    else {
      CFStringRef v4 = @"backgrounded";
    }
    MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, v4, 1);
    if ([a1 isActive]) {
      cmsSetIsActive(a1, 0, 0);
    }
    objc_msgSend(a1, "setWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground:", 1, v5, v6);
    if (v2) {
      CFRelease(v2);
    }
  }
}

void *CMSUtilityApplier_PostNotification_EndInterruptionCommand(void *result)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    float v1 = result;
    if (([result isActive] & 1) == 0
      && [v1 waitingForEndInterruptionWhenDeviceUnlocksOrInForeground])
    {
      CFNumberRef v2 = (void *)[[NSString alloc] initWithFormat:@"%@.%@", @"non-resumable", objc_msgSend(v1, "audioCategory")];
      valuePtr[0] = 1060320051;
      CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, valuePtr);
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSUtility_PostInterruptionCommandNotification(v1, 1u, (__CFString *)objc_msgSend(v1, "clientName", v5, v6), v2, 0, v3, 0, 0);
    }
    return (void *)[v1 setWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground:0];
  }
  return result;
}

uint64_t CMSUtilityApplier_PostNotification_PauseCommand(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1) {
    uint64_t v2 = [a1 isPlaying];
  }
  else {
    uint64_t v2 = 0;
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSUtility_PostInterruptionCommandNotification(a1, 4u, 0, 0, 0, 0, 0, 0);
  cmsSetIsPlaying(a1, 0);
  CMSMSleep_ReleasePlaybackProcessAssertion(a1);
  if ([a1 needToEndInterruption]) {
    MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, @"backgrounded", 1);
  }
  if (objc_msgSend(a1, "isActive", v6, v7)) {
    cmsSetIsActive(a1, 0, 0);
  }
  objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
  CFNumberRef SInt32 = (const void *)FigCFNumberCreateSInt32();
  if (-[NSArray containsObject:](-[MXSessionManager recordingClientPIDs](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "recordingClientPIDs"), "containsObject:", SInt32)&& [a1 isRecording])
  {
    [a1 setIsRecording:0];
    [a1 setWasRecordingBeforeBeingInterrupted:1];
    CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
  }
  if (SInt32) {
    CFRelease(SInt32);
  }
  return [a1 setWaitingToResumeWhenDeviceUnlocksOrInForeground:v2];
}

void *CMSUtilityApplier_PostNotification_ResumeCommand(void *result)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    float v1 = result;
    if (([result isPlaying] & 1) != 0
      || ![v1 waitingToResumeWhenDeviceUnlocksOrInForeground])
    {
      if ([v1 wasInterruptedByNowPlayingApp])
      {
        CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@.%@", @"non-resumable", [v1 audioCategory]);
        valuePtr[0] = 1060320051;
        CFNumberRef v5 = CFNumberCreate(v3, kCFNumberFloat32Type, valuePtr);
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtility_PostInterruptionCommandNotification(v1, 1u, (__CFString *)objc_msgSend(v1, "clientName", v8, v10), v4, 0, v5, 0, 0);
        if (v5) {
          CFRelease(v5);
        }
        if (v4) {
          CFRelease(v4);
        }
        [v1 setWasInterruptedByNowPlayingApp:0];
      }
    }
    else
    {
      if (dword_1E9359ED0)
      {
        uint64_t v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSUtility_PostInterruptionCommandNotification(v1, 5u, 0, 0, 0, 0, 0, 0);
      if ([v1 wasRecordingBeforeBeingInterrupted])
      {
        [v1 setIsRecording:1];
        [v1 setWasRecordingBeforeBeingInterrupted:0];
        CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
      }
    }
    return objc_msgSend(v1, "setWaitingToResumeWhenDeviceUnlocksOrInForeground:", 0, v7, v9);
  }
  return result;
}

void CMSUtility_DeactivateTimerHandler(uint64_t a1)
{
  float v1 = CMSMUtility_CopyMXCoreSessionWithID(a1);
  if (v1)
  {
    uint64_t v2 = v1;
    if ([v1 isActive]
      && ([v2 isPlaying] & 1) == 0
      && [v2 sessionDeactivateTimer])
    {
      dispatch_source_cancel((dispatch_source_t)[v2 sessionDeactivateTimer]);
      [v2 setSessionDeactivateTimer:0];
      if (-[MXSessionManager isAirPlaySession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAirPlaySession:", v2)&& [v2 reporterStarted])
      {
        CMSUtility_StopReporterWithAudioStatistics(v2);
      }
      else
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtilityApplier_PostNotification_StopCommandWithReason(v2, 0, 0);
      }
    }
  }
}

CFIndex CMSUtility_StopReporterWithAudioStatistics(void *a1)
{
  valuePtr[21] = *MEMORY[0x1E4F143B8];
  CFIndex result = [a1 reporterIDs];
  if (result)
  {
    CFIndex result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      CFIndex v3 = result;
      for (CFIndex i = 0; i != v3; ++i)
      {
        valuePtr[0] = 1;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(a1, "reporterIDs", v7, v8), i);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, valuePtr);
        [a1 setReporterStarted:0];
        CFIndex result = off_1E9359CF0(valuePtr[0]);
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          CFIndex result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  return result;
}

uint64_t CMSUtility_CopyCPMSPowerBudgetForSession()
{
  return 0;
}

void CMSUtility_InterruptSessionForSecureMicrophonePolicy(void *a1)
{
  if (a1)
  {
    CFNumberRef SInt32 = (const void *)FigCFNumberCreateSInt32();
    CMSUtility_PostInterruptionCommandNotification(a1, 0, @"CMSessionManager", 0, 0, 0, SInt32, 0);
    MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, @"interrupted.securemicrophoneengaged", 1);
    if (SInt32)
    {
      CFRelease(SInt32);
    }
  }
}

void CMSMUtility_UpdateRecordingAccessIntervals(void *a1)
{
  int v2 = [a1 auditTokenSetByClient];
  if (a1)
  {
    [a1 auditToken];
  }
  else
  {
    long long v4 = 0u;
    long long v5 = 0u;
  }
  id v3 = MX_PrivacyAccounting_CreateRecordingAccessIntervals(v2, &v4, objc_msgSend((id)objc_msgSend(a1, "clientPID", v4, v5), "intValue"), objc_msgSend(a1, "hostProcessAttribution"), objc_msgSend(a1, "displayID"));
  MX_PrivacyAccounting_EndRecordingAccessIntervals((void *)[a1 bundleIdToPAAccessIntervalMap]);
  [a1 setBundleIdToPAAccessIntervalMap:v3];
}

void *CMSUtility_IsSessionPlayingLongFormAudio(void *result)
{
  if (result)
  {
    [result audioCategory];
    return (void *)(FigCFEqual() != 0);
  }
  return result;
}

uint64_t CMSUtility_StartReporterWithAudioStatistics(void *a1)
{
  valuePtr[21] = *MEMORY[0x1E4F143B8];
  uint64_t result = objc_msgSend((id)objc_msgSend(a1, "reporterIDs"), "count");
  if (result >= 1)
  {
    uint64_t v3 = result;
    for (CFIndex i = 0; i != v3; ++i)
    {
      valuePtr[0] = 1;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(a1, "reporterIDs", v7, v8), i);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, valuePtr);
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      off_1E9359CE8(valuePtr[0]);
      uint64_t result = [a1 setReporterStarted:1];
    }
  }
  return result;
}

void CMSUtility_SendSessionReinterruptionDisallowedEventToAudioStatistics(void *a1)
{
  if (a1 && objc_msgSend((id)objc_msgSend(a1, "reporterIDs"), "count"))
  {
    uint64_t valuePtr = 1;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)[a1 reporterIDs], 0);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    [a1 displayID];
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetFloat32();
    off_1E9359D10(valuePtr, Mutable, 11, 6);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

CFArrayRef CMSUtility_CopySessionsToDuck(int a1, void *a2, const __CFArray *a3)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef Mutable = a3;
  if (!a2)
  {
    if (!a3) {
      return Mutable;
    }
    if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1))
    {
      unsigned int v15 = CMSMUtility_CopyMatchingSessions((uint64_t)Mutable, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_ShouldDuck, 0);
LABEL_29:
      CFArrayRef Mutable = v15;
      if (!v15) {
        return Mutable;
      }
LABEL_30:
      if (CFArrayGetCount(Mutable)) {
        goto LABEL_31;
      }
      CFRelease(Mutable);
      return 0;
    }
    int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)[(__CFArray *)Mutable audioCategory]);
    int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName([(__CFArray *)Mutable audioMode]);
    CFArrayRef v8 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)[(__CFArray *)Mutable activationContext], 0, 0, 0x1EE5EFB08);
    if (v8)
    {
      CFArrayRef v9 = v8;
      if (CFArrayGetCount(v8) < 1)
      {
        int v13 = 0;
      }
      else
      {
        AudioObjectID PortAtIndex = CMSMVAUtility_GetPortAtIndex(v9, 0);
        CFTypeRef v11 = vaeCopyDeviceIdentifierFromVADPort(PortAtIndex);
        CFTypeRef v12 = FigRoutingManagerCopyActivatedCarPlayEndpoint(qword_1E9359C88);
        int v13 = FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID();
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v11) {
          CFRelease(v11);
        }
        if (v12) {
          CFRelease(v12);
        }
      }
      CFRelease(v9);
      if (!CMSUtility_IsPlayingToSystemSoundRemoteVAD(Mutable)
        && (!v13 || !FigRoutingManager_iOSIsCarPlayAuxStreamSupported()))
      {
        goto LABEL_27;
      }
    }
    else if (!CMSUtility_IsPlayingToSystemSoundRemoteVAD(Mutable))
    {
LABEL_27:
      if (!CMSUtility_IsPlayingToDefaultVAD(Mutable))
      {
        CMSUtility_IsPlayingToSystemSoundLocalVAD(Mutable);
        return 0;
      }
      unsigned int v15 = CMSUtility_CopyDuckableSessionsPlayingToDefaultVAD(Mutable);
      goto LABEL_29;
    }
    CMSUtility_IsPlayingToSystemSoundRemoteVAD(Mutable);
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return Mutable;
    }
    if (qword_1E9359C68 && !CMSMUtility_IsPhoneCallActive()) {
      CFArrayAppendValue(Mutable, (const void *)qword_1E9359C68);
    }
    goto LABEL_30;
  }
  if (!CMSUtilityPredicate_ShouldDuck(a3, a2)) {
    return 0;
  }
  long long v5 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef Mutable = v5;
  if (v5)
  {
    CFArrayAppendValue(v5, a2);
LABEL_31:
    CFArrayGetCount(Mutable);
  }
  return Mutable;
}

uint64_t CMSUtility_ResetIsPlayingStates(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  [a1 setClientIsPlaying:0];
  [a1 setHapticEngineIsPlaying:0];
  int v2 = (void *)[a1 copyMXSessionList];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if ([v7 getIsPlaying]) {
          [v7 resetIsPlayingStates];
        }
        if ([v7 getIsPlayingOutput]) {
          [v7 setIsPlayingOutput:0];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }

  [a1 setSomeMXSessionIsPlaying:0];
  [a1 setIsPlayingOutput:0];
  return cmsSetIsPlaying(a1, 0);
}

__CFArray *CMSUtility_CopyPickableRoutesForSession(void *a1)
{
  int v2 = CMSUtility_CopyNonNULLCategoryForPickingRoutes(a1);
  uint64_t v3 = CMSUtility_CopyNonNULLModeForPickingRoutes(a1);
  uint64_t v4 = (void *)CMSUtility_CopyAllowedPortTypesArrayForPickingRoutes(a1);
  uint64_t v5 = (void *)CMSUtility_CopyActivationContextForPickingRoutes(a1);
  uint64_t v6 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)v2, (uint64_t)v3, v5, v4);
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t CMSUtility_UpdateAlarmBehaviorOnAccessory(void *a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if ([a1 hasAudioMode:@"Sleep"])
  {
    if (dword_1E9359ED0)
    {
      unsigned int v29 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_39:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v3 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v4 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v24 objects:v36 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v3);
        }
        CFArrayRef v8 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        if (v8 != a1
          && [*(id *)(*((void *)&v24 + 1) + 8 * i) isActive]
          && [v8 isPlaying]
          && CMSUtility_IsDoingSpokenAudio(v8))
        {
          BOOL v9 = FigRoutingManagerContextUtilities_IsOnlyRoutedToSelf([v8 routingContextUUID]) != 0;
          BOOL IsOnlyRoutedToLocalStereoPair = FigRoutingManagerContextUtilities_IsOnlyRoutedToLocalStereoPair([v8 routingContextUUID]);
          goto LABEL_17;
        }
      }
      uint64_t v5 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v24 objects:v36 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  BOOL v9 = 0;
  BOOL IsOnlyRoutedToLocalStereoPair = 0;
LABEL_17:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (v9 || IsOnlyRoutedToLocalStereoPair)
  {
    if (dword_1E9359ED0)
    {
      unsigned int v29 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v17 = v29;
      if (os_log_type_enabled(v16, type)) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v17 & 0xFFFFFFFE;
      }
      if (v18)
      {
        CFNumberRef v19 = @"NO";
        long long v31 = "CMSUtility_UpdateAlarmBehaviorOnAccessory";
        if (v9) {
          uint64_t v20 = @"YES";
        }
        else {
          uint64_t v20 = @"NO";
        }
        int v30 = 136315650;
        __int16 v32 = 2114;
        long long v33 = v20;
        if (IsOnlyRoutedToLocalStereoPair) {
          CFNumberRef v19 = @"YES";
        }
        __int16 v34 = 2114;
        uint64_t v35 = v19;
        LODWORD(v23) = 32;
        uint64_t v22 = &v30;
        _os_log_send_and_compose_impl();
      }
      goto LABEL_39;
    }
LABEL_40:
    uint64_t v15 = 8;
    return objc_msgSend(a1, "updateInterruptionStyle:", v15, v22, v23);
  }
  if (([a1 duckFadeDurationSetByClient] & 1) == 0)
  {
    LODWORD(v11) = 0.5;
    [a1 setDuckFadeDuration:v11];
  }
  if (([a1 unduckFadeDurationSetByClient] & 1) == 0)
  {
    LODWORD(v12) = 0.5;
    [a1 setUnduckFadeDuration:v12];
  }
  if (([a1 duckToLevelScalarSetByClient] & 1) == 0)
  {
    LODWORD(v13) = 1045220557;
    [a1 setDuckToLevelScalar:v13];
  }
  if (([a1 duckToLevelDBSetByClient] & 1) == 0)
  {
    LODWORD(v14) = -1038090240;
    [a1 setDuckToLevelDB:v14];
  }
  uint64_t v15 = 32;
  return objc_msgSend(a1, "updateInterruptionStyle:", v15, v22, v23);
}

float CMSUtility_GetVolumeDeltaIfRoutedToThirdPartyTV(void *a1, float a2)
{
  CFArrayRef theArray = 0;
  if (a1)
  {
    FigRoutingManagerCopyPickedEndpointsForRoutingContext([a1 routingContextUUID], &theArray);
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        CFIndex v4 = Count;
        CFIndex v5 = 0;
        int v6 = 0;
        float v7 = flt_194EDF218[a2 < 0.0];
        do
        {
          CFArrayGetValueAtIndex(theArray, v5);
          int IsEndpointThirdPartyTVFamily = FigEndpointUtility_IsEndpointThirdPartyTVFamily();
          if (v4 == v6 + 1) {
            float v9 = v7;
          }
          else {
            float v9 = a2;
          }
          if (IsEndpointThirdPartyTVFamily)
          {
            ++v6;
            a2 = v9;
          }
          ++v5;
        }
        while (v4 != v5);
      }
      if (theArray) {
        CFRelease(theArray);
      }
    }
  }
  return a2;
}

uint64_t CMSUtility_DoesSessionRemainActiveAfterStoppingPlaying(void *a1)
{
  if (![a1 isActive]) {
    return 0;
  }
  if ([a1 isPlaying]) {
    return 0;
  }
  if (![a1 isPlayingStopTime]) {
    return 0;
  }
  if (![a1 isPlayingStartTime]) {
    return 0;
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "now"), "timeIntervalSinceDate:", objc_msgSend(a1, "isPlayingStopTime"));
  if (v2 <= 0.0) {
    return 0;
  }
  objc_msgSend((id)objc_msgSend(a1, "isPlayingStopTime"), "timeIntervalSinceDate:", objc_msgSend(a1, "isPlayingStartTime"));
  if (v3 <= 0.0) {
    return 0;
  }
  if (!dword_1E9359ED0) {
    return 1;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  uint64_t v6 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v6;
}

uint64_t CMSUtility_IsSessionPlayStateEligibleForTipi(void *a1)
{
  if (([a1 isActive] & 1) == 0)
  {
    if (dword_1E9359ED0)
    {
LABEL_6:
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (CMSUtility_DoesSessionRemainActiveAfterStoppingPlaying(a1))
  {
    if (dword_1E9359ED0) {
      goto LABEL_6;
    }
    return 0;
  }
  return 1;
}

uint64_t CMSUtility_GetIsActuallyPlayingAudio(void *a1)
{
  if (a1) {
    return [a1 doesntActuallyPlayAudio] ^ 1;
  }
  else {
    return 1;
  }
}

uint64_t CMSUtility_GetClientPID(void *a1)
{
  float v1 = (void *)[a1 clientPID];
  return [v1 intValue];
}

void *CMSUtility_GetIsRecording(void *result)
{
  if (result) {
    return (void *)[result isRecording];
  }
  return result;
}

void *CMSUtility_GetPrefersNoDucking(void *result)
{
  if (result) {
    return (void *)[result prefersNoDucking];
  }
  return result;
}

void *CMSUtility_GetPrefersSuppressingRecordingState(void *result)
{
  if (result) {
    return (void *)[result prefersSuppressingRecordingState];
  }
  return result;
}

void *CMSUtility_GetOptOutOfMutePriority(void *result)
{
  if (result) {
    return (void *)[result optOutOfMutePriority];
  }
  return result;
}

void *CMSUtility_GetPrefersToTakeHWControlFlagsFromAnotherSession(void *result)
{
  if (result) {
    return (void *)[result prefersToTakeHWControlFlagsFromAnotherSession];
  }
  return result;
}

void *CMSUtility_GetPrefersMultichannelAudio(void *result)
{
  if (result) {
    return (void *)[result prefersMultichannelAudio];
  }
  return result;
}

uint64_t CMSUtility_GetWantsAutomaticClusterPairingOnPlaybackStart(void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!CMSMDeviceState_ItsAHomePod())
  {
    int v3 = CMSMDeviceState_ItsAnAppleTV();
    return v3 != 0;
  }
  if ([a1 wantsAutomaticClusterPairingOnPlaybackStart]) {
    return 1;
  }
  [a1 displayID];
  uint64_t v2 = 1;
  if (!FigCFStringFind())
  {
    [a1 displayID];
    uint64_t v2 = 1;
    if (!FigCFStringFind())
    {
      [a1 displayID];
      uint64_t v2 = 1;
      if (!FigCFStringFind())
      {
        [a1 displayID];
        uint64_t v2 = 1;
        if (!FigCFStringFind())
        {
          [a1 displayID];
          int v3 = FigCFStringFind();
          return v3 != 0;
        }
      }
    }
  }
  return v2;
}

uint64_t CMSUtility_GetCoreSessionID(void *a1)
{
  float v1 = (void *)[a1 ID];
  return [v1 longLongValue];
}

id CMSUtility_CopyCurrentRouteTypeAtIndex(void *a1, CFIndex a2)
{
  id v4 = @"VirtualAudioDevice_Default";
  uint64_t v5 = [a1 audioDestinationPriority];
  if (a1 && v5) {
    id v4 = [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v5];
  }
  CFArrayRef v6 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, (uint64_t)v4);
  if (!v6) {
    return 0;
  }
  CFArrayRef v7 = v6;
  CFIndex Count = CFArrayGetCount(v6);
  if (Count) {
    BOOL v9 = Count <= a2;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    id v12 = 0;
  }
  else
  {
    uint64_t PortAtIndex = CMSMVAUtility_GetPortAtIndex(v7, a2);
    unsigned int PortTypeFromPortID = vaeGetPortTypeFromPortID(PortAtIndex);
    id v12 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
  }
  CFRelease(v7);
  return v12;
}

uint64_t CMSUtility_ShouldSkipDuckingForSystemSounds(void *a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  [a1 audioCategory];
  if (FigCFEqual()
    || [a1 interruptionStyle] == 32
    || CMSUtility_IsDoingSpokenAudio(a1)
    || [a1 hasPhoneCallBehavior])
  {
    if (dword_1E9359ED0)
    {
LABEL_6:
      unsigned int v43 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_46:
      BOOL v7 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return v7;
    }
    return 1;
  }
  uint64_t v5 = [a1 routingContextUUID];
  if (!CMSMDeviceState_ItsAHomePod())
  {
    if ([a1 isCarSession]) {
      return 0;
    }
    uint64_t CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
    if (CurrentOutputVADID == a2)
    {
LABEL_37:
      if (!FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(v5)
        && !FigRoutingManagerContextUtilities_IsContextVideoAndIndependent(v5))
      {
        return 0;
      }
      if (dword_1E9359ED0)
      {
        unsigned int v43 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        long long v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v26 = v43;
        if (os_log_type_enabled(v25, type)) {
          unsigned int v27 = v26;
        }
        else {
          unsigned int v27 = v26 & 0xFFFFFFFE;
        }
        if (!v27) {
          goto LABEL_46;
        }
LABEL_35:
        uint64_t v24 = [a1 clientName];
        int v46 = 136315650;
        __int16 v47 = "CMSUtility_ShouldSkipDuckingForSystemSounds";
        __int16 v48 = 2048;
        int v49 = a1;
        __int16 v50 = 2114;
        uint64_t v51 = v24;
        _os_log_send_and_compose_impl();
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v9 = CurrentOutputVADID;
      id v10 = [+[MXAdditiveRoutingManager sharedInstance] copyDetailedRouteDescription:a2];
      id v11 = [+[MXAdditiveRoutingManager sharedInstance] copyDetailedRouteDescription:v9];
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v33 = v10;
      id v12 = objc_msgSend((id)objc_msgSend(v10, "objectForKey:", @"RouteDetailedDescription_Outputs"), "allObjects");
      uint64_t v31 = [v12 countByEnumeratingWithState:&v38 objects:v45 count:16];
      if (v31)
      {
        uint64_t v13 = *(void *)v39;
        __int16 v32 = v11;
        int v30 = v12;
        uint64_t v29 = *(void *)v39;
        do
        {
          uint64_t v14 = 0;
          do
          {
            if (*(void *)v39 != v13) {
              objc_enumerationMutation(v12);
            }
            uint64_t v15 = (void *)[*(id *)(*((void *)&v38 + 1) + 8 * v14) objectForKey:@"RouteDetailedDescription_ID"];
            long long v34 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            int v16 = objc_msgSend((id)objc_msgSend(v11, "objectForKey:", @"RouteDetailedDescription_Outputs"), "allObjects");
            uint64_t v17 = [v16 countByEnumeratingWithState:&v34 objects:v44 count:16];
            if (v17)
            {
              uint64_t v18 = v17;
              uint64_t v19 = *(void *)v35;
              while (2)
              {
                for (uint64_t i = 0; i != v18; ++i)
                {
                  if (*(void *)v35 != v19) {
                    objc_enumerationMutation(v16);
                  }
                  if (objc_msgSend(v15, "isEqualToNumber:", objc_msgSend(*(id *)(*((void *)&v34 + 1) + 8 * i), "objectForKey:", @"RouteDetailedDescription_ID")))
                  {

                    goto LABEL_37;
                  }
                }
                uint64_t v18 = [v16 countByEnumeratingWithState:&v34 objects:v44 count:16];
                if (v18) {
                  continue;
                }
                break;
              }
            }
            ++v14;
            id v11 = v32;
            id v12 = v30;
            uint64_t v13 = v29;
          }
          while (v14 != v31);
          uint64_t v31 = [v30 countByEnumeratingWithState:&v38 objects:v45 count:16];
        }
        while (v31);
      }

      if (dword_1E9359ED0)
      {
        unsigned int v43 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        int v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v22 = v43;
        if (os_log_type_enabled(v21, type)) {
          unsigned int v23 = v22;
        }
        else {
          unsigned int v23 = v22 & 0xFFFFFFFE;
        }
        if (!v23) {
          goto LABEL_46;
        }
        goto LABEL_35;
      }
    }
    return 1;
  }
  if (FigRoutingManagerContextUtilities_IsOnlyRoutedToSelf(v5)) {
    return 0;
  }
  BOOL IsOnlyRoutedToLocalStereoPair = FigRoutingManagerContextUtilities_IsOnlyRoutedToLocalStereoPair(v5);
  BOOL v7 = !IsOnlyRoutedToLocalStereoPair;
  if (!IsOnlyRoutedToLocalStereoPair && dword_1E9359ED0) {
    goto LABEL_6;
  }
  return v7;
}

uint64_t CMSUtility_IsSessionAlwaysExpectingEndInterruption(void *a1, const char *a2)
{
  return [a1 hasAudioCategory:@"AmbientSound"];
}

uint64_t CMSUtility_SomeOtherPrimaryAudioCategoryClientIsPlaying(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v2 = [+[MXSessionManager sharedInstance] copyMXCoreSessionList];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        BOOL v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ([v7 isPlaying])
        {
          char v8 = [v7 doesntActuallyPlayAudio];
          if (v7 != a1 && (v8 & 1) == 0 && CMSUtility_IsAudioCategoryPrimary(v7))
          {
            uint64_t v9 = 1;
            goto LABEL_14;
          }
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v9 = 0;
LABEL_14:

  return v9;
}

uint64_t CMSUtility_DoPickedEndpointsForSessionContainDeviceIdentifier(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  CFArrayRef theArray = 0;
  if (a2)
  {
    FigRoutingManagerContextUtilities_CopyPickedEndpoints([a1 routingContextUUID], (uint64_t)&theArray);
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count < 1)
      {
LABEL_15:
        uint64_t v2 = 0;
      }
      else
      {
        CFIndex v4 = Count;
        CFIndex v5 = 0;
        uint64_t v6 = *MEMORY[0x1E4F20E38];
        uint64_t v7 = *MEMORY[0x1E4F1CF80];
        while (1)
        {
          CFArrayGetValueAtIndex(theArray, v5);
          CFStringRef theString = 0;
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v9) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
          long long v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef *))(v10 + 48);
          if (v11) {
            v11(CMBaseObject, v6, v7, &theString);
          }
          if (theString)
          {
            int HasPrefix = CFStringHasPrefix(theString, (CFStringRef)v2);
            if (theString) {
              CFRelease(theString);
            }
            if (HasPrefix) {
              break;
            }
          }
          if (v4 == ++v5) {
            goto LABEL_15;
          }
        }
        uint64_t v2 = 1;
      }
      if (theArray) {
        CFRelease(theArray);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFStringRef volumeController_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVolumeController %p]", a1);
}

void sub_194E47928(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t soft_nw_release(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v2 = (uint64_t (*)(uint64_t))getnw_releaseSymbolLoc_ptr;
  uint64_t v9 = getnw_releaseSymbolLoc_ptr;
  if (!getnw_releaseSymbolLoc_ptr)
  {
    uint64_t v3 = (void *)NetworkLibrary();
    v7[3] = (uint64_t)dlsym(v3, "nw_release");
    getnw_releaseSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    uint64_t v2 = (uint64_t (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    CFIndex v5 = (_Unwind_Exception *)__68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return v2(a1);
}

void sub_194E47F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194E47FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MX_NetworkObserver_IsCarrierNetworkReachable()
{
  if (mx_networkObserver_Initialize_onceToken != -1) {
    dispatch_once(&mx_networkObserver_Initialize_onceToken, &__block_literal_global_56);
  }
  uint64_t result = gNetworkObserver;
  if (gNetworkObserver) {
    return [(id)gNetworkObserver isCarrierNetworkReachable];
  }
  return result;
}

void *__getnw_path_monitor_create_with_typeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)NetworkLibrary();
  uint64_t result = dlsym(v2, "nw_path_monitor_create_with_type");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getnw_path_monitor_create_with_typeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t NetworkLibrary()
{
  uint64_t v0 = NetworkLibraryCore();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t NetworkLibraryCore()
{
  if (!NetworkLibraryCore_frameworkLibrary) {
    NetworkLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return NetworkLibraryCore_frameworkLibrary;
}

uint64_t __NetworkLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  NetworkLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getnw_path_monitor_set_update_handlerSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)NetworkLibrary();
  uint64_t result = dlsym(v2, "nw_path_monitor_set_update_handler");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getnw_path_monitor_set_update_handlerSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getnw_path_monitor_set_queueSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)NetworkLibrary();
  uint64_t result = dlsym(v2, "nw_path_monitor_set_queue");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getnw_path_monitor_set_queueSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getnw_path_monitor_startSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)NetworkLibrary();
  uint64_t result = dlsym(v2, "nw_path_monitor_start");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getnw_path_monitor_startSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getnw_path_create_evaluator_for_endpointSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)NetworkLibrary();
  uint64_t result = dlsym(v2, "nw_path_create_evaluator_for_endpoint");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getnw_path_create_evaluator_for_endpointSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getnw_path_evaluator_copy_pathSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)NetworkLibrary();
  uint64_t result = dlsym(v2, "nw_path_evaluator_copy_path");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getnw_path_evaluator_copy_pathSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getnw_releaseSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)NetworkLibrary();
  uint64_t result = dlsym(v2, "nw_release");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getnw_releaseSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getnw_path_monitor_cancelSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)NetworkLibrary();
  uint64_t result = dlsym(v2, "nw_path_monitor_cancel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getnw_path_monitor_cancelSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getnw_retainSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)NetworkLibrary();
  uint64_t result = dlsym(v2, "nw_retain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getnw_retainSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getnw_path_get_statusSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)NetworkLibrary();
  uint64_t result = dlsym(v2, "nw_path_get_status");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getnw_path_get_statusSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

__CFDictionary *FigEndpointDescriptorUtility_CopyDescriptorForNonVirtualAudioEndpoint(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (MX_FeatureFlags_IsBulkCopyOfRouteDescriptorEnabled())
  {
    int IsEndpointOfType = FigRoutingManagerIsEndpointOfType(a1);
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (IsEndpointOfType)
    {
      CFTypeRef v48 = 0;
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v6 = v5 ? v5 : 0;
      uint64_t v8 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v6 + 48);
      if (v8)
      {
        v8(CMBaseObject, *MEMORY[0x1E4F20D98], v3, &v48);
        if (v48)
        {
          MutableCFArrayRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
          CFDictionarySetValue(MutableCopy, @"IsBTRoute", (const void *)*MEMORY[0x1E4F1CFC8]);
          CFDictionarySetValue(MutableCopy, @"AudioRouteName", @"AirTunes");
          figEndpointDescriptorUtility_setAirPlayFeatures(a1, MutableCopy);
          figEndpointDescriptorUtility_setAirPlayRouteSubType(a1, MutableCopy);
          BOOL IsEndpointSelfOnlyLocalAirPlay = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay(a1);
          uint64_t v10 = kFigEndpointDescriptor_RouteType_Default;
          if (!IsEndpointSelfOnlyLocalAirPlay) {
            uint64_t v10 = kFigEndpointDescriptor_RouteType_Wireless;
          }
          CFDictionarySetValue(MutableCopy, @"RouteType", *v10);
          if (FigEndpointGetSupportedFeatures()) {
            CFDictionarySetValue(MutableCopy, @"SupportsScreenMirroringControls", (const void *)*MEMORY[0x1E4F1CFD0]);
          }
LABEL_73:
          if (v48) {
            CFRelease(v48);
          }
          return MutableCopy;
        }
      }
    }
  }
  else
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  MutableCFArrayRef Copy = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef cf = 0;
  uint64_t v11 = *MEMORY[0x1E4F20F28];
  uint64_t v12 = FigEndpointGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v14 + 48);
  if (v15) {
    v15(v12, v11, v3, &cf);
  }
  uint64_t v42 = v11;
  FigCFDictionarySetValue();
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  CFTypeRef v46 = 0;
  uint64_t v16 = *MEMORY[0x1E4F20E38];
  uint64_t v17 = FigEndpointGetCMBaseObject();
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v19 + 48);
  if (v20) {
    v20(v17, v16, v3, &v46);
  }
  FigCFDictionarySetValue();
  if (v46)
  {
    CFRelease(v46);
    CFTypeRef v46 = 0;
  }
  CFTypeRef v45 = 0;
  uint64_t v21 = *MEMORY[0x1E4F20EF0];
  uint64_t v22 = FigEndpointGetCMBaseObject();
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  long long v25 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v24 + 48);
  if (v25) {
    v25(v22, v21, v3, &v45);
  }
  FigCFDictionarySetValue();
  if (v45)
  {
    CFRelease(v45);
    CFTypeRef v45 = 0;
  }
  uint64_t valuePtr = 0;
  CFNumberRef number = 0;
  uint64_t v26 = FigEndpointGetCMBaseObject();
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *(void (**)(uint64_t, void, const __CFAllocator *, CFNumberRef *))(v28 + 48);
  if (v29) {
    v29(v26, *MEMORY[0x1E4F20C88], v3, &number);
  }
  if (number) {
    CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  }
  if (FigEndpointGetSupportedFeatures() & 1) != 0 || (valuePtr)
  {
    CFTypeRef v48 = 0;
    uint64_t v30 = FigEndpointGetCMBaseObject();
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    long long v33 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v32 + 48);
    if (v33) {
      v33(v30, @"subType", v3, &v48);
    }
    int v34 = FigCFEqual();
    long long v35 = (const void **)MEMORY[0x1E4F1CFC8];
    if (!v34) {
      long long v35 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(MutableCopy, @"SupportsScreenMirroringControls", *v35);
    if (v48) {
      CFRelease(v48);
    }
  }
  if (number)
  {
    CFRelease(number);
    CFNumberRef number = 0;
  }
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    figEndpointDescriptorUtility_addAirPlayDetailsToDescriptor(a1, MutableCopy);
    return MutableCopy;
  }
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    figEndpointDescriptorUtility_addBTDetailsToDescriptor(a1, MutableCopy);
    return MutableCopy;
  }
  if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled()
    && FigRoutingManagerIsEndpointOfType(a1))
  {
    uint64_t v36 = *MEMORY[0x1E4F20E40];
    uint64_t v37 = FigEndpointGetCMBaseObject();
    uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v38) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 0;
    }
    CFTypeRef v48 = 0;
    long long v40 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v39 + 48);
    if (v40) {
      v40(v37, v36, v3, &v48);
    }
    if (FigCFEqual()) {
      figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E10], MutableCopy, @"HIDs");
    }
    FigCFDictionarySetValue();
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F18], MutableCopy, @"RouteModel");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20EF8], MutableCopy, @"Manufacturer");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20DF0], MutableCopy, @"FirmwareVersion");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F88], MutableCopy, @"SerialNumber");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F210A0], MutableCopy, @"iOSEntityIsDoingTurnByTurn");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F80], MutableCopy, @"ScreenInfo");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F48], MutableCopy, @"OEMIcons");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F38], MutableCopy, @"OEMIconLabel");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F40], MutableCopy, @"OEMIconVisible");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F30], MutableCopy, @"NightMode");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F70], MutableCopy, @"RightHandDrive");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20EE0], MutableCopy, @"LimitedUIElements");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20ED8], MutableCopy, @"LimitedUI");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20D28], MutableCopy, @"CarEntityIsDoingTurnByTurn");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20D40], MutableCopy, @"CarEntityOwnsScreen");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20D30], MutableCopy, @"CarEntityIsDoingVoiceRecognition");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F21070], MutableCopy, @"VehicleInformation");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F21040], MutableCopy, @"TransportType");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20D00], MutableCopy, @"AuthenticationType");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20CF8], MutableCopy, @"AuthenticationData");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F21078], MutableCopy, @"VoiceActivationType");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20D38], MutableCopy, @"CarEntityOwnsMainAudio");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20DB0], MutableCopy, @"ExtendedFeatures");
    figEndpointDescriptorUtility_setDescriptorKey(a1, v36, MutableCopy, @"IsActivated");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20CE8], MutableCopy, @"AlternateSiri");
    goto LABEL_73;
  }
  if (FigRoutingManagerIsEndpointOfType(a1) && MutableCopy)
  {
    figEndpointDescriptorUtility_setDescriptorKey(a1, v42, MutableCopy, @"RouteName");
    figEndpointDescriptorUtility_setDescriptorKey(a1, v16, MutableCopy, @"RouteUID");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20FB8], MutableCopy, @"RouteSubtype");
    figEndpointDescriptorUtility_setDescriptorKey(a1, v21, MutableCopy, @"MACAddress");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F18], MutableCopy, @"RouteModel");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20EF8], MutableCopy, @"Manufacturer");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20DF0], MutableCopy, @"FirmwareVersion");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F88], MutableCopy, @"SerialNumber");
  }
  return MutableCopy;
}

void figEndpointDescriptorUtility_addAirPlayDetailsToDescriptor(uint64_t a1, CFMutableDictionaryRef theDict)
{
  if (!theDict) {
    return;
  }
  CFIndex v4 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFDictionarySetValue(theDict, @"IsBTRoute", (const void *)*MEMORY[0x1E4F1CFC8]);
  CFDictionarySetValue(theDict, @"AudioRouteName", @"AirTunes");
  figEndpointDescriptorUtility_setAirPlayFeatures(a1, theDict);
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F18], theDict, @"RouteModel");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20EF8], theDict, @"Manufacturer");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20DF0], theDict, @"FirmwareVersion");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F88], theDict, @"SerialNumber");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F21038], theDict, @"TightSyncUUID");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F21028], theDict, @"TightSyncIsGroupLeader");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F21020], theDict, @"TightSyncBuddyNotReachable");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F60], theDict, @"PersistentGroupUUID");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20D70], theDict, @"ClusterLeaderUUID");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E58], theDict, @"IsClusterLeader");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20D78], theDict, @"ClusterSize");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20D80], theDict, @"ClusterType");
  CFArrayRef theArray = 0;
  uint64_t v5 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, void, uint64_t, CFArrayRef *))(v8 + 48);
  if (v9)
  {
    v9(CMBaseObject, *MEMORY[0x1E4F20D60], v5, &theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) >= 1) {
        CFDictionarySetValue(theDict, @"ClusterComposition", theArray);
      }
      if (theArray)
      {
        CFRelease(theArray);
        CFArrayRef theArray = 0;
      }
    }
  }
  CFArrayRef v27 = 0;
  uint64_t v10 = FigEndpointGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, CFArrayRef *))(v12 + 48);
  if (v13)
  {
    v13(v10, *MEMORY[0x1E4F20D68], v5, &v27);
    if (v27)
    {
      if (CFArrayGetCount(v27) >= 1) {
        CFDictionarySetValue(theDict, @"ClusterHierarchy", v27);
      }
      if (v27)
      {
        CFRelease(v27);
        CFArrayRef v27 = 0;
      }
    }
  }
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E48], theDict, @"IsAppleMusicSubscriber");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20D50], theDict, @"CloudLibraryIsOn");
  figEndpointDescriptorUtility_setAirPlayRouteSubType(a1, theDict);
  BOOL IsEndpointSelfOnlyLocalAirPlay = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay(a1);
  uint64_t v15 = kFigEndpointDescriptor_RouteType_Default;
  if (!IsEndpointSelfOnlyLocalAirPlay) {
    uint64_t v15 = kFigEndpointDescriptor_RouteType_Wireless;
  }
  CFDictionarySetValue(theDict, @"RouteType", *v15);
  CFTypeRef cf = 0;
  uint64_t v16 = FigEndpointGetCMBaseObject();
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v18 + 48);
  if (v19) {
    v19(v16, *MEMORY[0x1E4F20D08], v5, &cf);
  }
  int v20 = FigCFEqual();
  uint64_t v21 = (const void **)MEMORY[0x1E4F1CFD0];
  if (v20)
  {
    CFDictionarySetValue(theDict, @"RouteRequiresPassword", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  else
  {
    int v24 = FigCFEqual();
    CFDictionarySetValue(theDict, @"RouteRequiresPassword", v4);
    if (v24)
    {
      uint64_t v23 = *v21;
      uint64_t v22 = theDict;
      goto LABEL_32;
    }
  }
  uint64_t v22 = theDict;
  uint64_t v23 = v4;
LABEL_32:
  CFDictionarySetValue(v22, @"RouteRequiresAirPlayPIN", v23);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20EC8], theDict, @"IsWHAGroupable");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F21008], theDict, @"SupportsRelay");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20FF0], theDict, @"SupportsFitnessUIOverlay");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F10], theDict, @"IsMediaRemoteControllable");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E00], theDict, @"GroupContainsGroupLeader");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E70], theDict, @"IsGroupLeader");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F90], theDict, @"IsSilentPrimary");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20FE0], theDict, @"SupportsExtendedWHAFeatures");
  if (FigRoutingManagerIsEndpointLocal(a1)) {
    long long v25 = *v21;
  }
  else {
    long long v25 = v4;
  }
  CFDictionarySetValue(theDict, @"IsLocalDevice", v25);
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20C98], theDict, @"AdvertisesHAPSupport");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E08], theDict, @"GroupUUID");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E30], theDict, @"HouseholdID");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20CA8], theDict, @"RouteHasAirPlayCloudConnectivity");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20CD0], theDict, @"AirPlayVodkaVersion");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20CB0], theDict, @"AirPlaySecurity");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E80], theDict, @"IsHKAccessControlEnabled");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E18], theDict, @"HKAccessControlLevel");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20CA0], theDict, @"AirPlayEndpointProperties");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20DB8], theDict, @"ExternalPlaybackCannotFetchMediaFromSender");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20DD8], theDict, @"ExternalPlaybackDoesNotSupportEncryptedCRABS");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20DD0], theDict, @"ExternalPlaybackDoesNotShowProperUIForAudioOnlyAssets");
  figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E90], theDict, @"IsLowFidelity");
}

void figEndpointDescriptorUtility_addBTDetailsToDescriptor(uint64_t a1, CFMutableDictionaryRef theDict)
{
  if (theDict)
  {
    CFIndex v4 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFDictionarySetValue(theDict, @"RouteSupportsAudio", (const void *)*MEMORY[0x1E4F1CFD0]);
    CFTypeRef cf = 0;
    uint64_t v5 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v8 + 48);
    if (v9)
    {
      v9(CMBaseObject, *MEMORY[0x1E4F20E60], v5, &cf);
      CFTypeRef v10 = cf;
    }
    else
    {
      CFTypeRef v10 = 0;
    }
    if (v10 == (CFTypeRef)*MEMORY[0x1E4F1CFC8])
    {
      CFDictionarySetValue(theDict, @"RouteType", @"Wireless");
      CFDictionarySetValue(theDict, @"IsBTRoute", v4);
      CFDictionarySetValue(theDict, @"AudioRouteName", @"HeadphonesBT");
      figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E50], theDict, @"IsBluetoothShareable");
      CFTypeRef v10 = cf;
    }
    if (v10)
    {
      CFRelease(v10);
      CFTypeRef cf = 0;
    }
    uint64_t v11 = *MEMORY[0x1E4F20F18];
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20F18], theDict, @"RouteModel");
    figEndpointDescriptorUtility_setDescriptorKey(a1, v11, theDict, @"BTDetails_ProductID");
    if (MX_FeatureFlags_IsCounterfeitDetectionEnabled()) {
      figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E68], theDict, @"IsGenuineAppleAccessory");
    }
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F21010], theDict, @"SupportsSmartRouting");
    if (MX_FeatureFlags_IsConversationDetectSupported())
    {
      figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20FD0], theDict, @"SupportsConversationDetect");
      figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20D90], theDict, @"ConversationDetectEnable");
    }
    CFDictionaryRef theDicta = 0;
    uint64_t v12 = FigEndpointGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, CFDictionaryRef *))(v14 + 48);
    if (v15)
    {
      v15(v12, *MEMORY[0x1E4F20D18], v5, &theDicta);
      if (theDicta)
      {
        CFDictionaryRef Value = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F203E8]);
        if (Value) {
          CFDictionarySetValue(theDict, @"BTDetails_BatteryLevelLeft", Value);
        }
        uint64_t v17 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F203F0]);
        if (v17) {
          CFDictionarySetValue(theDict, @"BTDetails_BatteryLevelRight", v17);
        }
        uint64_t v18 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F203E0]);
        if (v18) {
          CFDictionarySetValue(theDict, @"BTDetails_BatteryLevelCase", v18);
        }
        uint64_t v19 = CFDictionaryGetValue(theDicta, (const void *)*MEMORY[0x1E4F203F8]);
        if (v19) {
          CFDictionarySetValue(theDict, @"BTDetails_BatteryLevelSingle", v19);
        }
        CFRelease(theDicta);
      }
    }
  }
}

void figEndpointDescriptorUtility_addMissingEntriesApplierFunction(void *key, const void *a2, CFDictionaryRef theDict)
{
  if (!CFDictionaryContainsKey(theDict, key))
  {
    CFDictionarySetValue(theDict, key, a2);
  }
}

uint64_t FigEndpointDescriptorUtility_CopyEndpointFromDescriptor(uint64_t a1, uint64_t a2)
{
  if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled()
    && FigRoutingManagerContextUtilities_IsContextSystemRemoteDisplay(a2))
  {
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a2, 0, (uint64_t)&cf);
    FigCFDictionaryGetValue();
    CFTypeRef v11 = 0;
    if (cf)
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v6 = v5 ? v5 : 0;
      uint64_t v9 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
      if (v9) {
        v9(CMBaseObject, *MEMORY[0x1E4F20E38], *MEMORY[0x1E4F1CF80], &v11);
      }
    }
    if (FigCFEqual())
    {
      if (!cf)
      {
        CFTypeRef v10 = 0;
LABEL_19:
        if (v11) {
          CFRelease(v11);
        }
        return (uint64_t)v10;
      }
      CFTypeRef v10 = CFRetain(cf);
    }
    else
    {
      CFTypeRef v10 = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_19;
  }
  uint64_t v7 = +[MXEndpointDescriptorCache sharedInstance];
  return (uint64_t)[(MXEndpointDescriptorCache *)v7 copyEndpointFromRouteDescriptor:a1 routingContextUUID:a2 retryCount:1];
}

id FigEndpointDescriptorUtility_CopyEndpointArrayFromDescriptors(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v5 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(a1);
        }
        uint64_t v9 = FigEndpointDescriptorUtility_CopyEndpointFromDescriptor(*(void *)(*((void *)&v12 + 1) + 8 * v8), a2);
        if (v9)
        {
          CFTypeRef v10 = (const void *)v9;
          [v4 addObject:v9];
          CFRelease(v10);
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [a1 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
  return v4;
}

void FigEndpointDescriptorUtilitySetUserManualRoute(uint64_t a1, int a2)
{
  if (a1)
  {
    if (FigRoutingManagerIsEndpointOfType(a1))
    {
      if (a2) {
        id v4 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      }
      else {
        id v4 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      }
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      long long v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
      if (v14)
      {
        uint64_t v15 = *MEMORY[0x1E4F21068];
        uint64_t v16 = *v4;
        v14(CMBaseObject, v15, v16);
      }
    }
    else if (FigRoutingManagerIsEndpointOfType(a1))
    {
      CFTypeRef v8 = FigRoutingManagerCopyBluetoothEndpointAssociatedWithVAEndpoint();
      if (v8)
      {
        uint64_t v9 = v8;
        if (a2) {
          CFTypeRef v10 = (void *)MEMORY[0x1E4F1CFD0];
        }
        else {
          CFTypeRef v10 = (void *)MEMORY[0x1E4F1CFC8];
        }
        uint64_t v11 = FigEndpointGetCMBaseObject();
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v17 = *(void (**)(uint64_t, void, void))(v13 + 56);
        if (v17) {
          v17(v11, *MEMORY[0x1E4F21068], *v10);
        }
        CFRelease(v9);
      }
    }
  }
}

uint64_t FigEndpointDescriptorUtility_IsEndpointOfType()
{
  uint64_t v0 = (const void *)FigEndpointUtility_CopyEndpointType();
  uint64_t v1 = FigCFEqual();
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

void figEndpointDescriptorUtility_setAirPlayFeatures(uint64_t a1, __CFDictionary *a2)
{
  if (a2)
  {
    char SupportedFeatures = FigEndpointGetSupportedFeatures();
    id v4 = (const void *)*MEMORY[0x1E4F1CFD0];
    uint64_t v5 = (const void *)*MEMORY[0x1E4F1CFC8];
    if ((SupportedFeatures & 2) != 0) {
      uint64_t v6 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v6 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(a2, @"RouteSupportsAudio", v6);
    if ((FigEndpointGetSupportedFeatures() & 4) != 0) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = v5;
    }
    CFDictionarySetValue(a2, @"RouteSupportsAirPlayVideo", v7);
    if (FigEndpointGetSupportedFeatures()) {
      CFTypeRef v8 = v4;
    }
    else {
      CFTypeRef v8 = v5;
    }
    CFDictionarySetValue(a2, @"RouteSupportsAirPlayScreen", v8);
    if ((FigEndpointGetSupportedFeatures() & 8) != 0) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v5;
    }
    CFDictionarySetValue(a2, @"RouteSupportsAirPlayMusic", v9);
  }
}

void figEndpointDescriptorUtility_setAirPlayRouteSubType(uint64_t a1, __CFDictionary *a2)
{
  if (a2)
  {
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
    if (v6) {
      v6(CMBaseObject, *MEMORY[0x1E4F20FB8], *MEMORY[0x1E4F1CF80], &cf);
    }
    if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_Unknown;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_AppleTV;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_HomePod;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_iOS;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_Mac;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartyTV;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartySetTopBox;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_LowFidelitySpeaker;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartyTVStick;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartySpeaker;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_ClusterStereoPair;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_ClusterHomeTheater;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_ClusterGeneric;
    }
    else if (FigCFEqual())
    {
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_ClusterGenericAudio;
    }
    else
    {
      if (!FigCFEqual()) {
        goto LABEL_38;
      }
      uint64_t v7 = kFigEndpointDescriptorKey_AudioRouteSubType_visionOS;
    }
    CFDictionarySetValue(a2, @"AudioRouteSubType", *v7);
LABEL_38:
    if (cf) {
      CFRelease(cf);
    }
  }
}

os_log_t __MXGetAssertionLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.mediaexperience", "Assertion");
  MXGetAssertionLog__log = (uint64_t)result;
  return result;
}

os_log_t __MXGetSessionLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.mediaexperience", "Session");
  MXGetSessionLog__log = (uint64_t)result;
  return result;
}

os_log_t __MXGetPerformanceLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.mediaexperience", "Performance");
  MXGetPerformanceLog__log = (uint64_t)result;
  return result;
}

void sub_194E4E180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void *MXBlockDictionaryRetain(int a1, void *aBlock)
{
  return _Block_copy(aBlock);
}

void MXBlockDictionaryRelease(int a1, void *aBlock)
{
}

void MXInstallSysdiagnoseBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)MEMORY[0x1997179E0]();
  [+[MXDebugPlatform sharedInstance] installSysdiagnoseBlock:a1 blockToRun:a2];
}

void MXSimulateCrash(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1997179E0]();
  [+[MXDebugPlatform sharedInstance] simulateCrash:a1];
}

void sub_194E4F868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAPSubjectClass_block_invoke(uint64_t a1)
{
  AppProtectionLibrary();
  Class result = objc_getClass("APSubject");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getAPSubjectClass_block_invoke_cold_1();
  }
  getAPSubjectClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void AppProtectionLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!AppProtectionLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __AppProtectionLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E57CAE68;
    uint64_t v3 = 0;
    AppProtectionLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)v1[0];
  if (!AppProtectionLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __AppProtectionLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AppProtectionLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getAPApplicationClass_block_invoke(uint64_t a1)
{
  AppProtectionLibrary();
  Class result = objc_getClass("APApplication");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getAPApplicationClass_block_invoke_cold_1();
  }
  getAPApplicationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t _CMSessionCreate(uint64_t *a1)
{
  long long v2 = (void *)MEMORY[0x1997179E0]();
  uint64_t CFObject = cmsession_createCFObject(a1);
  if (!CFObject) {
    uint64_t CFObject = MXCoreSessionInitialize(*(void **)(*a1 + 16));
  }
  return CFObject;
}

uint64_t _CMSessionCreateForRemoteDeviceID(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)MEMORY[0x1997179E0]();
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    uint64_t v6 = [[MXCoreSessionSidekick alloc] initWithRemoteDeviceID:a1];
    uint64_t v7 = 0;
    *a2 = (uint64_t)v6;
  }
  else
  {
    uint64_t v7 = _CMSessionCreate(a2);
  }
  return v7;
}

void CMSessionFinalize(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (dword_1E9359ED0)
  {
    int v6 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)(a1 + 24) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    uint64_t v3 = MXGetSerialQueue();
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __CMSessionFinalize_block_invoke;
    void v4[3] = &__block_descriptor_40_e5_v8__0l;
    void v4[4] = a1;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionFinalize", (uint64_t)"CMSession_CInterface.m", 242, 0, 0, v3, (uint64_t)v4);
  }
}

void __CMSessionFinalize_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16) = 0;
}

uint64_t CMSessionNotificationBarrier()
{
  return 0;
}

uint64_t _CMSessionNotificationBarrier()
{
  return 0;
}

uint64_t CMSessionAddResource(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (MX_FeatureFlags_IsBypassCodecArbitrationEnabled()) {
    return 0;
  }
  +[MXInitialization waitUntilMXIsFullyInitialized];
  if (isCoreSessionSidekick(a1)) {
    return 4294954309;
  }
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  uint64_t v9 = MXGetSerialQueue();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __CMSessionAddResource_block_invoke;
  v11[3] = &unk_1E57C60E0;
  v11[4] = &v12;
  void v11[5] = a1;
  void v11[6] = a2;
  void v11[7] = a3;
  void v11[8] = a4;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionAddResource", (uint64_t)"CMSession_CInterface.m", 294, 0, 0, v9, (uint64_t)v11);
  uint64_t v8 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_194E51580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CMSessionAddResource_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    uint64_t v3 = *(void **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = MXCoreSessionAddResource(v3, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 64));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CMSessionRemoveResource(void *a1, uint64_t a2)
{
  if (MX_FeatureFlags_IsBypassCodecArbitrationEnabled()) {
    return 0;
  }
  +[MXInitialization waitUntilMXIsFullyInitialized];
  if (isCoreSessionSidekick(a1)) {
    return 4294954309;
  }
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  uint64_t v5 = MXGetSerialQueue();
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __CMSessionRemoveResource_block_invoke;
  v7[3] = &unk_1E57C5878;
  v7[4] = &v8;
  void v7[5] = a1;
  void v7[6] = a2;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionRemoveResource", (uint64_t)"CMSession_CInterface.m", 318, 0, 0, v5, (uint64_t)v7);
  uint64_t v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_194E516F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CMSessionRemoveResource_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = MXCoreSessionRemoveResource(v3, *(void **)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CMSessionBeginInterruption(void *a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  uint64_t v2 = (void *)MEMORY[0x1997179E0](+[MXInitialization waitUntilMXIsFullyInitialized]);
  if (isCoreSessionSidekick(a1))
  {
    int v3 = [a1 activate];
    *((_DWORD *)v10 + 6) = v3;
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v5 = MXGetSerialQueue();
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __CMSessionBeginInterruption_block_invoke;
    v8[3] = &unk_1E57C58A0;
    v8[4] = &v9;
    v8[5] = a1;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionBeginInterruption", (uint64_t)"CMSession_CInterface.m", 350, 0, 0, v5, (uint64_t)v8);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"CMSessionBeginInterruption" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  }
  uint64_t v6 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_194E51898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CMSessionBeginInterruption_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    int v3 = *(void **)(v2 + 16);
  }
  else {
    int v3 = 0;
  }
  uint64_t result = MXCoreSessionBeginInterruption_WithSecTaskAndFlags(v3, 0, 0, 1);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _CMSessionBeginInterruption_WithSecTaskAndFlags(void *a1, __SecTask *a2, uint64_t a3)
{
  uint64_t v6 = (void *)MEMORY[0x1997179E0](+[MXInitialization waitUntilMXIsFullyInitialized]);
  if (isCoreSessionSidekick(a1))
  {
    uint64_t v7 = [a1 activate];
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1) {
      uint64_t v9 = (void *)a1[2];
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v7 = MXCoreSessionBeginInterruption_WithSecTaskAndFlags(v9, a2, a3, 0);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"_CMSessionBeginInterruption_WithSecTaskAndFlags" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  }
  return v7;
}

uint64_t _CMSessionBeginInterruption_WithFlags(void *a1, uint64_t a2)
{
  return _CMSessionBeginInterruption_WithSecTaskAndFlags(a1, 0, a2);
}

uint64_t CMSessionEndInterruption(void *a1, const __CFString *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  uint64_t v4 = (void *)MEMORY[0x1997179E0](+[MXInitialization waitUntilMXIsFullyInitialized]);
  if (isCoreSessionSidekick(a1))
  {
    if (a2) {
      BOOL v5 = CFStringHasPrefix(a2, @"resumable") != 0;
    }
    else {
      BOOL v5 = 0;
    }
    int v8 = [a1 deactivate:v5 postInterruptionNotification:0];
    *((_DWORD *)v13 + 6) = v8;
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v7 = MXGetSerialQueue();
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __CMSessionEndInterruption_block_invoke;
    v11[3] = &unk_1E57C5878;
    v11[4] = &v12;
    void v11[5] = a1;
    void v11[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionEndInterruption", (uint64_t)"CMSession_CInterface.m", 411, 0, 0, v7, (uint64_t)v11);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"CMSessionEndInterruption" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  }
  uint64_t v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_194E51B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CMSessionEndInterruption_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    int v3 = *(void **)(v2 + 16);
  }
  else {
    int v3 = 0;
  }
  uint64_t result = MXCoreSessionEndInterruption_WithSecTaskAndStatus(v3, 0, *(const __CFString **)(a1 + 48), 1);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CMSessionEndInterruption_WithInterruptionNotification(void *a1, const __CFString *a2, int a3)
{
  uint64_t v14 = 0;
  int v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  uint64_t v6 = (void *)MEMORY[0x1997179E0](+[MXInitialization waitUntilMXIsFullyInitialized]);
  if (isCoreSessionSidekick(a1))
  {
    if (a2) {
      BOOL v7 = CFStringHasPrefix(a2, @"resumable") != 0;
    }
    else {
      BOOL v7 = 0;
    }
    int v10 = [a1 deactivate:v7 postInterruptionNotification:a3 != 0];
    *((_DWORD *)v15 + 6) = v10;
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v9 = MXGetSerialQueue();
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __CMSessionEndInterruption_WithInterruptionNotification_block_invoke;
    v13[3] = &unk_1E57C5878;
    v13[4] = &v14;
    void v13[5] = a1;
    void v13[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionEndInterruption_WithInterruptionNotification", (uint64_t)"CMSession_CInterface.m", 440, 0, 0, v9, (uint64_t)v13);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"CMSessionEndInterruption_WithInterruptionNotification" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  }
  uint64_t v11 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_194E51D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CMSessionEndInterruption_WithSecTaskAndStatus(void *a1, __SecTask *a2, const __CFString *a3)
{
  uint64_t v6 = (void *)MEMORY[0x1997179E0](+[MXInitialization waitUntilMXIsFullyInitialized]);
  if (isCoreSessionSidekick(a1))
  {
    if (a3) {
      BOOL v7 = CFStringHasPrefix(a3, @"resumable") != 0;
    }
    else {
      BOOL v7 = 0;
    }
    uint64_t v10 = [a1 deactivate:v7 postInterruptionNotification:0];
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1) {
      uint64_t v9 = (void *)a1[2];
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = MXCoreSessionEndInterruption_WithSecTaskAndStatus(v9, a2, a3, 0);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"_CMSessionEndInterruption_WithSecTaskAndStatus" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  }
  return v10;
}

uint64_t _CMSessionEndInterruption(void *a1, const __CFString *a2)
{
  return _CMSessionEndInterruption_WithSecTaskAndStatus(a1, 0, a2);
}

uint64_t CMSessionSetProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  int v16 = 0;
  uint64_t v6 = (void *)MEMORY[0x1997179E0](+[MXInitialization waitUntilMXIsFullyInitialized]);
  if (isCoreSessionSidekick(a1))
  {
    int v7 = [a1 setPropertyForKey:a2 value:a3];
    *((_DWORD *)v14 + 6) = v7;
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v9 = MXGetSerialQueue();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __CMSessionSetProperty_block_invoke;
    v12[3] = &unk_1E57C6180;
    v12[4] = &v13;
    void v12[5] = a1;
    v12[6] = a2;
    void v12[7] = a3;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionSetProperty", (uint64_t)"CMSession_CInterface.m", 503, 0, 0, v9, (uint64_t)v12);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"CMSessionSetProperty" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:a2];
  }
  uint64_t v10 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_194E52018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CMSessionSetProperty_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    int v3 = *(void **)(v2 + 16);
  }
  else {
    int v3 = 0;
  }
  uint64_t result = MXCoreSessionSetProperty(v3, *(__CFString **)(a1 + 48), *(NSDictionary **)(a1 + 56), 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _CMSessionSetProperty(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = (void *)MEMORY[0x1997179E0](+[MXInitialization waitUntilMXIsFullyInitialized]);
  if (isCoreSessionSidekick(a1))
  {
    uint64_t v7 = [a1 setPropertyForKey:a2 value:a3];
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1) {
      uint64_t v9 = a1[2];
    }
    else {
      LODWORD(v9) = 0;
    }
    uint64_t v7 = MXCoreSessionSetProperty(v9, a2);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"_CMSessionSetProperty" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:a2];
  }
  return v7;
}

uint64_t HandleDispatchBlockException(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  [(id)objc_msgSend(NSString stringWithFormat:@"Exception thrown: %s, %s, %s:%d, %llu, %llu", "Unknown", a1, a2, a3, a4, a5), "UTF8String"];
  uint64_t v5 = abort_with_reason();
  return MXDispatchSyncFunction(v5);
}

void MXDispatchSyncFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7, uint64_t a8)
{
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  int v16 = (void *)MEMORY[0x1997179E0]();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MXDispatchSyncFunction_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = a8;
  void block[5] = a7;
  dispatch_block_t v17 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  uint64_t v18 = (void *)MEMORY[0x1997179E0]();
  uint64_t v28 = 0;
  long long v27 = 0uLL;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == a6) {
      CreateACQDispatchID();
    }
  }
  long long v30 = v27;
  uint64_t v31 = v28;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == a6) {
      MEMORY[0x199715FA0](&v30, 0, "MXDispatchSyncFunction", a1, a2, a3, a4, a5);
    }
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __MXDispatchSyncFunction_block_invoke_2;
  v19[3] = &unk_1E57CAE88;
  long long v20 = v30;
  uint64_t v21 = v31;
  uint64_t v22 = a1;
  int v26 = a3;
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v19[4] = a6;
  v19[5] = v17;
  dispatch_barrier_async_and_wait(a6, v19);
}

uint64_t __MXDispatchSyncFunction_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void __MXDispatchSyncFunction_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1997179E0]();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(unsigned int *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == v3) {
      MEMORY[0x199715FA0](a1 + 48, 1, "MXDispatchSyncFunction_block_invoke_2", v4, v5, v6, v7, v8);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(unsigned int *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == v9) {
      MEMORY[0x199715FA0](a1 + 48, 2, "MXDispatchSyncFunction_block_invoke_2", v10, v11, v12, v13, v14);
    }
  }
  uint64_t v15 = *(const void **)(a1 + 40);
  _Block_release(v15);
}

void MXSetSerialQueue(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MXSetSerialQueue_block_invoke;
  block[3] = &unk_1E57C6368;
  block[4] = a1;
  if (MXSetSerialQueue_onceToken != -1) {
    dispatch_once(&MXSetSerialQueue_onceToken, block);
  }
}

void __MXSetSerialQueue_block_invoke(uint64_t a1)
{
  if (!*(void *)(a1 + 32) || dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (gSerialQueue)
  {
    uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    dispatch_release((dispatch_object_t)gSerialQueue);
  }
  gSerialQueue = *(void *)(a1 + 32);
}

void __MXGetSerialQueue_block_invoke()
{
  if (!gSerialQueue)
  {
    uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    gSerialQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.mediaexperience.iAmNotACQ", v0);
    MXSimulateCrash((uint64_t)"AudioControlQueue (ACQ) is being used before being set by AudioToolbox! Please file a radar"
                             " against 'MediaExperience Framework | All'");
  }
}

dispatch_queue_t __MXGetNotificationSenderQueue_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t result = dispatch_queue_create("com.apple.mediaexperience.NotificationSenderQueue", v0);
  MXGetNotificationSenderQueue_notificationSenderQueue = (uint64_t)result;
  return result;
}

void MXDispatchUtilityCancelTimer(dispatch_source_t *a1)
{
  if (a1)
  {
    dispatch_source_cancel(*a1);
    if (*a1)
    {
      dispatch_release(*a1);
      *a1 = 0;
    }
  }
}

CFTypeRef PVMCopyMappedRoute(CFTypeRef key)
{
  if (key)
  {
    CFTypeRef v1 = key;
    if (*(void *)(sStorage + 184)) {
      key = CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 184), key);
    }
    if (!key) {
      key = v1;
    }
    return CFRetain(key);
  }
  return key;
}

void __PVMInitialize_block_invoke()
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  if (pvmInitializeLogging_onceToken != -1) {
    dispatch_once(&pvmInitializeLogging_onceToken, &__block_literal_global_168);
  }
  sStorage = (uint64_t)malloc_type_calloc(1uLL, 0x130uLL, 0x10E00405DAA18BBuLL);
  if (!sStorage) {
    goto LABEL_163;
  }
  uint64_t v0 = FigReentrantMutexCreate();
  CFTypeRef v1 = (CFTypeRef *)sStorage;
  *(void *)sStorage = v0;
  if (!v0) {
    goto LABEL_141;
  }
  MXInstallSysdiagnoseBlock(@"MXVolumePreferences", (uint64_t)&__block_literal_global_94_0);
  CelestialGetModelSpecificName();
  *(void *)(sStorage + 168) = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  CelestialGetModelSpecificName();
  *(void *)(sStorage + 184) = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  CelestialGetModelSpecificName();
  *(void *)(sStorage + 192) = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  CelestialGetModelSpecificName();
  *(void *)(sStorage + 20singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  CelestialGetModelSpecificName();
  *(void *)(sStorage + 8singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  CelestialGetModelSpecificName();
  CFDictionaryRef v2 = (const __CFDictionary *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFDictionaryRef Value = CFDictionaryGetValue(v2, @"RouteDefaultVolumes");
    *(void *)(sStorage + 208) = Value;
    if (Value) {
      CFRetain(Value);
    }
    if (!FigCFDictionaryGetFloatIfPresent()) {
      *(_DWORD *)(sStorage + 296) = 1065353216;
    }
    CFRelease(v3);
  }
  uint64_t v5 = sStorage;
  *(_WORD *)(sStorage + 30singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
  CFDictionaryRef v6 = *(const __CFDictionary **)(v5 + 168);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v6) {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v6);
  }
  else {
    MutableCFArrayRef Copy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  uint64_t v9 = sStorage;
  *(void *)(sStorage + 176) = MutableCopy;
  *(void *)(v9 + 144) = 0x3FC000003F000000;
  *(void *)(sStorage + 136) = CFRetain(@"Ringtone");
  CelestialGetModelSpecificName();
  CFDictionaryRef v10 = (const __CFDictionary *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v10)
  {
    CFDictionaryRef v11 = v10;
    uint64_t v12 = CFDictionaryGetValue(v10, @"Zero");
    uint64_t v13 = CFDictionaryGetValue(v11, @"One");
    uint64_t v14 = CFDictionaryGetValue(v11, @"Category");
    if (v12)
    {
      uint64_t v15 = v14;
      CFTypeID v16 = CFGetTypeID(v12);
      if (v16 == CFNumberGetTypeID())
      {
        if (v13)
        {
          CFTypeID v17 = CFGetTypeID(v13);
          if (v17 == CFNumberGetTypeID())
          {
            if (v15)
            {
              CFTypeID v18 = CFGetTypeID(v15);
              if (v18 == CFStringGetTypeID())
              {
                valuePtr[0] = 0.0;
                LODWORD(v134) = 0;
                CFNumberGetValue((CFNumberRef)v12, kCFNumberFloat32Type, valuePtr);
                CFNumberGetValue((CFNumberRef)v13, kCFNumberFloat32Type, &v134);
                if (*(float *)&v134 <= 5.0
                  && valuePtr[0] <= 1.0
                  && valuePtr[0] >= 0.0
                  && (float)(*(float *)&v134 - valuePtr[0]) >= 0.25)
                {
                  CFTypeRef v19 = CFRetain(v15);
                  uint64_t v20 = sStorage;
                  *(void *)(sStorage + 136) = v19;
                  int v21 = v134;
                  *(float *)(v20 + 144) = valuePtr[0];
                  *(_DWORD *)(v20 + 148) = v21;
                }
              }
            }
          }
        }
      }
    }
    CFRelease(v11);
  }
  *(float *)(sStorage + 152) = *(float *)(sStorage + 148) - *(float *)(sStorage + 144);
  CFStringRef v22 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v23 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPropertyListRef v24 = CFPreferencesCopyValue(@"volumes", @"com.apple.mediaexperience", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  *(void *)(sStorage + 16) = 0;
  if (v24)
  {
    uint64_t v25 = v24;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v25))
    {
      DeepCFArrayRef Copy = (const __CFDictionary *)CFPropertyListCreateDeepCopy(v7, v25, 1uLL);
      if (DeepCopy)
      {
        CFDictionaryRef v28 = DeepCopy;
        CFAllocatorRef v123 = v7;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionaryApplyFunction(v28, (CFDictionaryApplierFunction)pvmApplierFunction_ValidateVolumesForRoute, Mutable);
        CFStringRef hostName = v23;
        CFMutableDictionaryRef cf = Mutable;
        if (Mutable)
        {
          CFTypeRef v30 = CFRetain(Mutable);
          *(void *)(sStorage + 16) = v30;
          if (v30)
          {
            uint64_t v31 = (void *)v30;
            CFPropertyListRef v32 = CFPreferencesCopyValue(@"AirTunesEntriesDeleted", @"com.apple.mediaexperience", v22, v23);
            long long v33 = (const void *)*MEMORY[0x1E4F1CFD0];
            if (FigCFEqual()) {
              goto LABEL_48;
            }
            CFDictionaryRef v115 = v28;
            v119 = v25;
            id v34 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
            long long v134 = 0u;
            long long v135 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            uint64_t v35 = [v31 countByEnumeratingWithState:&v134 objects:valuePtr count:16];
            if (v35)
            {
              uint64_t v36 = v35;
              v113 = v33;
              CFStringRef v126 = v22;
              char v37 = 0;
              uint64_t v38 = *(void *)v135;
              do
              {
                for (uint64_t i = 0; i != v36; ++i)
                {
                  if (*(void *)v135 != v38) {
                    objc_enumerationMutation(v31);
                  }
                  long long v40 = *(void **)(*((void *)&v134 + 1) + 8 * i);
                  uint64_t v41 = [v31 objectForKey:v40];
                  if ([v40 hasPrefix:@"AirTunes"]) {
                    char v37 = 1;
                  }
                  else {
                    [v34 setObject:v41 forKey:v40];
                  }
                }
                uint64_t v36 = [v31 countByEnumeratingWithState:&v134 objects:valuePtr count:16];
              }
              while (v36);
              CFRelease(*(CFTypeRef *)(sStorage + 16));
              uint64_t v42 = sStorage;
              *(void *)(sStorage + 16) = v34;
              CFStringRef v22 = v126;
              long long v33 = v113;
              if (v37)
              {
                *(unsigned char *)(v42 + 24) = 1;
                pvmWritePrefs();
              }
            }
            else
            {
              CFRelease(*(CFTypeRef *)(sStorage + 16));
              *(void *)(sStorage + 16) = v34;
            }
            MXCFPreferencesSetAndSynchronizeUserPreference(@"AirTunesEntriesDeleted", v33);
            CFDictionaryRef v28 = v115;
            uint64_t v25 = v119;
            if (v32) {
LABEL_48:
            }
              CFRelease(v32);
          }
        }
        else
        {
          *(void *)(sStorage + 16) = 0;
        }
        unsigned int v43 = *(void **)(sStorage + 16);
        if (v43)
        {
          CFPropertyListRef v44 = CFPreferencesCopyValue(@"BluetoothA2DPAndHFPVolumesCombined", @"com.apple.mediaexperience", v22, v23);
          CFTypeRef v45 = (const void *)*MEMORY[0x1E4F1CFD0];
          if (FigCFEqual())
          {
            CFRelease(v44);
          }
          else
          {
            CFDictionaryRef v116 = v28;
            v120 = v25;
            id v46 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
            long long v134 = 0u;
            long long v135 = 0u;
            long long v136 = 0u;
            long long v137 = 0u;
            uint64_t v47 = [v43 countByEnumeratingWithState:&v134 objects:valuePtr count:16];
            if (v47)
            {
              uint64_t v48 = v47;
              v114 = v45;
              CFStringRef v127 = v22;
              char v49 = 0;
              uint64_t v50 = *(void *)v135;
              do
              {
                for (uint64_t j = 0; j != v48; ++j)
                {
                  if (*(void *)v135 != v50) {
                    objc_enumerationMutation(v43);
                  }
                  uint64_t v52 = *(void **)(*((void *)&v134 + 1) + 8 * j);
                  uint64_t v53 = [v43 objectForKey:v52];
                  uint64_t MappedBluetoothRouteWithDeviceIDAppended = pvmGetMappedBluetoothRouteWithDeviceIDAppended(v52);
                  if (MappedBluetoothRouteWithDeviceIDAppended)
                  {
                    uint64_t v55 = MappedBluetoothRouteWithDeviceIDAppended;
                    uint64_t v56 = [v43 objectForKey:v52];
                    id v57 = (id)objc_msgSend((id)objc_msgSend(v46, "objectForKey:", v55), "mutableCopy");
                    if (!v57) {
                      id v57 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
                    }
                    [v57 addEntriesFromDictionary:v56];
                    [v46 setObject:v57 forKey:v55];

                    char v49 = 1;
                  }
                  else
                  {
                    [v46 setObject:v53 forKey:v52];
                  }
                }
                uint64_t v48 = [v43 countByEnumeratingWithState:&v134 objects:valuePtr count:16];
              }
              while (v48);
              CFRelease(*(CFTypeRef *)(sStorage + 16));
              uint64_t v58 = sStorage;
              *(void *)(sStorage + 16) = v46;
              CFStringRef v22 = v127;
              CFTypeRef v45 = v114;
              if (v49)
              {
                *(unsigned char *)(v58 + 24) = 1;
                pvmWritePrefs();
              }
            }
            else
            {
              CFRelease(*(CFTypeRef *)(sStorage + 16));
              *(void *)(sStorage + 16) = v46;
            }
            MXCFPreferencesSetAndSynchronizeUserPreference(@"BluetoothA2DPAndHFPVolumesCombined", v45);
            CFDictionaryRef v28 = v116;
            uint64_t v25 = v120;
          }
        }
        __int16 v59 = *(void **)(sStorage + 16);
        if (v59)
        {
          CFPropertyListRef v60 = CFPreferencesCopyValue(@"AirPlayLowLatencyEntriesDeleted", @"com.apple.mediaexperience", v22, v23);
          long long v61 = (const void *)*MEMORY[0x1E4F1CFD0];
          if (FigCFEqual()) {
            goto LABEL_87;
          }
          CFDictionaryRef v117 = v28;
          v121 = v25;
          CFStringRef v128 = v22;
          id v62 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          long long v134 = 0u;
          long long v135 = 0u;
          long long v136 = 0u;
          long long v137 = 0u;
          uint64_t v63 = [v59 countByEnumeratingWithState:&v134 objects:valuePtr count:16];
          if (v63)
          {
            uint64_t v64 = v63;
            char v65 = 0;
            uint64_t v66 = *(void *)v135;
            do
            {
              for (uint64_t k = 0; k != v64; ++k)
              {
                if (*(void *)v135 != v66) {
                  objc_enumerationMutation(v59);
                }
                CFTypeRef v68 = *(void **)(*((void *)&v134 + 1) + 8 * k);
                uint64_t v69 = [v59 objectForKey:v68];
                if ([v68 hasPrefix:@"AirPlayLowLatency"]) {
                  char v65 = 1;
                }
                else {
                  [v62 setObject:v69 forKey:v68];
                }
              }
              uint64_t v64 = [v59 countByEnumeratingWithState:&v134 objects:valuePtr count:16];
            }
            while (v64);
          }
          else
          {
            char v65 = 0;
          }
          uint64_t v70 = sStorage;
          CFTypeRef v71 = *(const void **)(sStorage + 16);
          if (v71)
          {
            CFRelease(v71);
            uint64_t v70 = sStorage;
            *(void *)(sStorage + 16) = 0;
          }
          CFStringRef v22 = v128;
          CFDictionaryRef v28 = v117;
          uint64_t v25 = v121;
          *(void *)(v70 + 16) = v62;
          if (v65)
          {
            *(unsigned char *)(v70 + 24) = 1;
            pvmWritePrefs();
          }
          MXCFPreferencesSetAndSynchronizeUserPreference(@"AirPlayLowLatencyEntriesDeleted", v61);
          CFStringRef v23 = hostName;
          if (v60) {
LABEL_87:
          }
            CFRelease(v60);
        }
        if (cf) {
          CFRelease(cf);
        }
        CFRelease(v28);
        CFAllocatorRef v7 = v123;
      }
    }
    CFRelease(v25);
  }
  CFPropertyListRef v72 = CFPreferencesCopyValue(@"inputVolumes", @"com.apple.mediaexperience", v22, v23);
  if (v72)
  {
    int v73 = v72;
    CFTypeID v74 = CFDictionaryGetTypeID();
    if (v74 == CFGetTypeID(v73)) {
      *(void *)(sStorage + 48) = CFPropertyListCreateDeepCopy(v7, v73, 1uLL);
    }
    CFRelease(v73);
  }
  CFPropertyListRef v75 = CFPreferencesCopyValue(@"volumeLimits", @"com.apple.mediaexperience", v22, v23);
  *(void *)(sStorage + 32) = 0;
  if (v75)
  {
    int v76 = v75;
    CFTypeID v77 = CFDictionaryGetTypeID();
    if (v77 == CFGetTypeID(v76))
    {
      CFDictionaryRef v78 = (const __CFDictionary *)CFPropertyListCreateDeepCopy(v7, v76, 1uLL);
      if (v78)
      {
        CFDictionaryRef v79 = v78;
        CFMutableDictionaryRef v80 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionaryApplyFunction(v79, (CFDictionaryApplierFunction)pvmApplierFunction_CopyValidatedVolumes, v80);
        if (v80)
        {
          *(void *)(sStorage + 32) = CFRetain(v80);
          CFRelease(v80);
        }
        else
        {
          *(void *)(sStorage + 32) = 0;
        }
        CFRelease(v79);
      }
    }
    CFRelease(v76);
  }
  CFPropertyListRef v81 = CFPreferencesCopyValue(@"endpointTypeInfo", @"com.apple.mediaexperience", v22, v23);
  if (!v81) {
    goto LABEL_130;
  }
  unsigned int v82 = v81;
  CFTypeID v83 = CFDictionaryGetTypeID();
  if (v83 != CFGetTypeID(v82)) {
    goto LABEL_129;
  }
  CFStringRef v129 = v22;
  CFPropertyListRef v84 = CFPropertyListCreateDeepCopy(v7, v82, 1uLL);
  *(void *)(sStorage + 12singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = v84;
  if (!v84) {
    goto LABEL_128;
  }
  CFTypeRef v85 = (void *)v84;
  CFTypeRef v86 = (void *)MXCFPreferencesCopyPreference(@"endpointTypeInfoEntriesDeleted");
  if ([v86 BOOLValue]) {
    goto LABEL_127;
  }
  CFStringRef hostNamea = v23;
  id v87 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v134 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  uint64_t v88 = [v85 countByEnumeratingWithState:&v134 objects:valuePtr count:16];
  if (!v88)
  {
    CFRelease(*(CFTypeRef *)(sStorage + 120));
    *(void *)(sStorage + 12singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = v87;
    goto LABEL_126;
  }
  uint64_t v89 = v88;
  cfa = v87;
  v118 = v86;
  v122 = v82;
  char v90 = 0;
  uint64_t v91 = *(void *)v135;
  do
  {
    uint64_t v92 = 0;
    do
    {
      if (*(void *)v135 != v91) {
        objc_enumerationMutation(v85);
      }
      CFTypeRef v93 = *(void **)(*((void *)&v134 + 1) + 8 * v92);
      uint64_t v94 = [v85 objectForKey:v93];
      uint64_t v95 = pvmGetMappedBluetoothRouteWithDeviceIDAppended(v93);
      if (([v93 hasPrefix:@"AirTunes"] & 1) != 0
        || ([v93 hasPrefix:@"CarAudioOutput"] & 1) != 0
        || ([v93 hasPrefix:@"AirPlayLowLatency"] & 1) != 0)
      {
        goto LABEL_118;
      }
      if (v95)
      {
        [cfa setValue:v94 forKey:v95];
LABEL_118:
        char v90 = 1;
        goto LABEL_119;
      }
      [cfa setValue:v94 forKey:v93];
LABEL_119:
      ++v92;
    }
    while (v89 != v92);
    uint64_t v96 = [v85 countByEnumeratingWithState:&v134 objects:valuePtr count:16];
    uint64_t v89 = v96;
  }
  while (v96);
  CFRelease(*(CFTypeRef *)(sStorage + 120));
  uint64_t v97 = sStorage;
  *(void *)(sStorage + 12singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = cfa;
  unsigned int v82 = v122;
  CFTypeRef v86 = v118;
  if (v90)
  {
    *(unsigned char *)(v97 + 128) = 1;
    pvmWritePrefs();
  }
LABEL_126:
  MXCFPreferencesSetAndSynchronizeUserPreference(@"endpointTypeInfoEntriesDeleted", (const void *)*MEMORY[0x1E4F1CFD0]);
  CFStringRef v23 = hostNamea;
LABEL_127:

LABEL_128:
  CFStringRef v22 = v129;
LABEL_129:
  CFRelease(v82);
LABEL_130:
  CFPropertyListRef v98 = CFPreferencesCopyValue(@"vibeIntensity", @"com.apple.mediaexperience", v22, v23);
  uint64_t v99 = sStorage;
  *(void *)(sStorage + 64) = v98;
  CelesteGetRegionSpecificVolumeLimit(*(const __CFDictionary **)(v99 + 80));
  *(_DWORD *)(sStorage + 88) = v100;
  float v132 = 1.0;
  CFNumberRef v101 = (const __CFNumber *)MXCFPreferencesCopyPreference(@"maxVolumeLimitForBuiltInSpeaker");
  if (v101)
  {
    CFNumberRef v102 = v101;
    CFNumberGetValue(v101, kCFNumberFloat32Type, &v132);
    float v103 = v132;
    if (v132 <= 1.0)
    {
      if (v132 < 0.2)
      {
        float v132 = 0.2;
        float v103 = 0.2;
      }
    }
    else
    {
      float v132 = 1.0;
      float v103 = 1.0;
    }
    *(float *)(sStorage + 92) = v103;
    CFRelease(v102);
  }
  else
  {
    *(float *)(sStorage + 92) = v132;
  }
  if (dword_1E9359D38)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  pvmAssureCurrentCategoryAndDeviceRoute();
  uint64_t v105 = sStorage;
  *(void *)(sStorage + 272) = 0;
  if (pvmSetCurrentRouteInfo(@"Unspecified", *(void *)(v105 + 256), *(void *)(v105 + 264), 0, *(CFTypeRef *)(v105 + 280)))
  {
    CFTypeRef v1 = (CFTypeRef *)sStorage;
    if (sStorage)
    {
LABEL_141:
      if (v1[2])
      {
        CFRelease(v1[2]);
        CFTypeRef v1 = (CFTypeRef *)sStorage;
        *(void *)(sStorage + 16) = 0;
      }
      if (v1[4])
      {
        CFRelease(v1[4]);
        CFTypeRef v1 = (CFTypeRef *)sStorage;
        *(void *)(sStorage + 32) = 0;
      }
      if (v1[15])
      {
        CFRelease(v1[15]);
        CFTypeRef v1 = (CFTypeRef *)sStorage;
        *(void *)(sStorage + 12singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
      }
      if (v1[32])
      {
        CFRelease(v1[32]);
        *(void *)(sStorage + 256) = 0;
        *(unsigned char *)(sStorage + 288) = FigCFEqual();
        char v106 = FigCFEqual();
        CFTypeRef v1 = (CFTypeRef *)sStorage;
        *(unsigned char *)(sStorage + 289) = v106;
      }
      if (v1[27])
      {
        CFRelease(v1[27]);
        CFTypeRef v1 = (CFTypeRef *)sStorage;
        *(void *)(sStorage + 216) = 0;
      }
      if (v1[29])
      {
        CFRelease(v1[29]);
        CFTypeRef v1 = (CFTypeRef *)sStorage;
        *(void *)(sStorage + 232) = 0;
      }
      if (*v1)
      {
        FigSimpleMutexDestroy();
        CFTypeRef v1 = (CFTypeRef *)sStorage;
        *(void *)sStorage = 0;
      }
      free(v1);
      sStorage = 0;
    }
  }
  else
  {
    pvmRemoveVolumesForDeviceRoute(@"LineOut", 0, 0);
    float v107 = *(const void **)(sStorage + 104);
    if (v107)
    {
      CFRelease(v107);
      *(void *)(sStorage + 104) = 0;
    }
    CFPropertyListRef v108 = CFPreferencesCopyValue(@"volumeMultiplier", @"com.apple.mediaexperience", v22, v23);
    if (v108)
    {
      float v109 = v108;
      CFTypeID v110 = CFDictionaryGetTypeID();
      if (v110 == CFGetTypeID(v109)) {
        *(void *)(sStorage + 104) = CFPropertyListCreateDeepCopy(v7, v109, 1uLL);
      }
      CFRelease(v109);
    }
    *(unsigned char *)(sStorage + 112) = 0;
    v111 = MXGetSerialQueue();
    notify_register_dispatch("HAENVolumeLimitStatusDidChange", (int *)&pvmAdd100dBVolumeLimitChangedListener_sHAENVolumeLimitNotifyToken, v111, &__block_literal_global_212);
    pvmGetMappedCategoryWithModeAppended(@"MediaPlayback", @"VoicePrompt");
  }
LABEL_163:
  v112 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"PVMInitialize_block_invoke", (uint64_t)"MXPreferredVolumeManager.m", 1801, 0, 0, v112, (uint64_t)&__block_literal_global_49_0);
}

uint64_t __PVMInitialize_block_invoke_2()
{
  MEMORY[0x199716E90](*(void *)sStorage);
  pvmUpdatePreferredVolumeAndLimit(@"CategoryChange", 0, *(const __CFString **)(sStorage + 216), *(const void **)(sStorage + 224), 0, 1, 0, 0.0, 0.0);
  MEMORY[0x199716EA0](*(void *)sStorage);
  MEMORY[0x199716E90](*(void *)sStorage);
  uint64_t v0 = (void *)sStorage;
  *(unsigned char *)(sStorage + 8) = 0;
  MEMORY[0x199716EA0](*v0);
  BOOL v1 = FigGetCFPreferenceNumberWithDefault() != 0;
  return pvmUpdate100dBVolumeLimit(v1);
}

uint64_t pvmUpdate100dBVolumeLimit(uint64_t result)
{
  if (g100dBVolumeLimitEnabled != result)
  {
    char v1 = result;
    if (dword_1E9359D38)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    g100dBVolumeLimitEnabled = v1;
    MEMORY[0x199716E90](*(void *)sStorage);
    pvmReassertAllPreferredVolumesForRoute(0);
    pvmUpdatePreferredVolumeAndLimit(@"VolumeLimitChange", 0, *(const __CFString **)(sStorage + 216), *(const void **)(sStorage + 224), 0, 1, 0, 0.0, 0.0);
    return MEMORY[0x199716EA0](*(void *)sStorage);
  }
  return result;
}

BOOL PVMVolumePrefExistsForRouteAndCategory(const void *a1, unint64_t a2, uint64_t a3, const __CFString *a4, const void *a5)
{
  if (!PVMInitialize())
  {
    CFStringRef DeviceRouteString = pvmCreateDeviceRouteString(a1, a2, a3);
    if (DeviceRouteString)
    {
      CFStringRef v12 = DeviceRouteString;
      MEMORY[0x199716E90](*(void *)sStorage);
      if (!*(void *)(sStorage + 16)) {
        goto LABEL_12;
      }
      CFDictionaryRef v13 = *(const __CFDictionary **)(sStorage + 168);
      if (v13)
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v13, a4);
        if (Value) {
          a4 = Value;
        }
      }
      if (a4)
      {
        if (a5) {
          goto LABEL_10;
        }
      }
      else
      {
        a4 = *(const __CFString **)(sStorage + 216);
        if (a5) {
          goto LABEL_10;
        }
      }
      a5 = *(const void **)(sStorage + 224);
LABEL_10:
      MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a4, a5);
      CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 16), v12);
      if (v16)
      {
        BOOL v10 = CFDictionaryGetValue(v16, MappedCategoryWithModeAppended) != 0;
LABEL_13:
        MEMORY[0x199716EA0](*(void *)sStorage);
        CFRelease(v12);
        return v10;
      }
LABEL_12:
      BOOL v10 = 0;
      goto LABEL_13;
    }
  }
  return 0;
}

uint64_t PVMSetCurrentPreferredVolumeWithRefCon(uint64_t a1, uint64_t a2, int a3, float a4)
{
  uint64_t v8 = PVMInitialize();
  if (!v8 && !*(unsigned char *)(sStorage + 8))
  {
    MEMORY[0x199716E90](*(void *)sStorage);
    pvmAssureCurrentCategoryAndDeviceRoute();
    uint64_t v9 = sStorage;
    if (*(float *)(sStorage + 292) != a4)
    {
      CFStringRef v10 = *(const __CFString **)(sStorage + 216);
      CFDictionaryRef v11 = *(const void **)(sStorage + 224);
      long long v12 = *(_OWORD *)(sStorage + 264);
      v15[0] = *(_OWORD *)(sStorage + 248);
      v15[1] = v12;
      uint64_t v16 = *(void *)(sStorage + 280);
      pvmSetVolumePref(v10, v11, v15, 0, a4);
      uint64_t v9 = sStorage;
    }
    if (a3) {
      CFDictionaryRef v13 = @"ImplicitVolumeChange";
    }
    else {
      CFDictionaryRef v13 = @"ExplicitVolumeChange";
    }
    pvmUpdatePreferredVolumeAndLimit((uint64_t)v13, a1, *(const __CFString **)(v9 + 216), *(const void **)(v9 + 224), 0, 1, a2, 0.0, 0.0);
    MEMORY[0x199716EA0](*(void *)sStorage);
  }
  return v8;
}

void pvmSetVolumePref(const __CFString *a1, const void *a2, long long *a3, int a4, float a5)
{
  if (!*(void *)(sStorage + 16)) {
    *(void *)(sStorage + 16) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  if (FigCFEqual())
  {
    CFDictionaryRef v10 = *(const __CFDictionary **)(sStorage + 184);
    if (v10) {
      CFStringRef Value = (__CFString *)CFDictionaryGetValue(v10, @"broadcast");
    }
    else {
      CFStringRef Value = @"broadcast";
    }
    *((void *)a3 + 2) = 0;
    *((void *)a3 + 3) = 0;
    if (Value) {
      long long v12 = Value;
    }
    else {
      long long v12 = @"broadcast";
    }
    *((void *)a3 + 1) = v12;
  }
  if (FigCFEqual() && !PVMInitialize()) {
    pvmSetSystemSoundVolumeMultiplierForVolumeGuts(a5);
  }
  CFStringRef DeviceRouteString = pvmCreateDeviceRouteString(*((CFTypeRef *)a3 + 1), *((void *)a3 + 3), *((void *)a3 + 2));
  if (DeviceRouteString)
  {
    CFStringRef v14 = DeviceRouteString;
    float valuePtr = 0.0;
    if (a4)
    {
      long long v15 = a3[1];
      long long v32 = *a3;
      long long v33 = v15;
      uint64_t v34 = *((void *)a3 + 4);
      long long v16 = a3[1];
      long long v35 = *a3;
      long long v36 = v16;
      uint64_t v37 = *((void *)a3 + 4);
      float VolumeLimitPref = pvmGetVolumeLimitPref();
      float v18 = a5 / (float)(VolumeLimitPref * pvmGetCurrentVolumeLimitForRoute((uint64_t)&v32, a1));
      if (v18 <= 1.0) {
        float v19 = v18;
      }
      else {
        float v19 = 1.0;
      }
      long long v20 = a3[1];
      long long v32 = *a3;
      long long v33 = v20;
      uint64_t v34 = *((void *)a3 + 4);
      long long v21 = a3[1];
      long long v35 = *a3;
    }
    else
    {
      long long v22 = a3[1];
      long long v32 = *a3;
      long long v33 = v22;
      uint64_t v34 = *((void *)a3 + 4);
      if (a5 <= 1.0) {
        float v19 = a5;
      }
      else {
        float v19 = 1.0;
      }
      long long v21 = a3[1];
      long long v35 = *a3;
    }
    long long v36 = v21;
    uint64_t v37 = *((void *)a3 + 4);
    float v23 = pvmGetVolumeLimitPref();
    float v24 = v19 * (float)(v23 * pvmGetCurrentVolumeLimitForRoute((uint64_t)&v32, a1));
    float valuePtr = v24;
    float MinimumCategoryVolume = pvmGetMinimumCategoryVolume(a1, a2);
    if (v24 < MinimumCategoryVolume)
    {
      float valuePtr = MinimumCategoryVolume;
      float v24 = MinimumCategoryVolume;
    }
    float MaximumCategoryVolume = pvmGetMaximumCategoryVolume(a1, a2);
    if (v24 > MaximumCategoryVolume) {
      float valuePtr = MaximumCategoryVolume;
    }
    CFMutableDictionaryRef Mutable = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 16), v14);
    CFAllocatorRef v28 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(sStorage + 16), v14, Mutable);
      CFRelease(Mutable);
    }
    CFNumberRef v29 = CFNumberCreate(v28, kCFNumberFloat32Type, &valuePtr);
    CFStringRef CategoryStringWithModeAppended = pvmCreateCategoryStringWithModeAppended(a1, a2);
    CFDictionarySetValue((CFMutableDictionaryRef)Mutable, CategoryStringWithModeAppended, v29);
    CFRelease(v29);
    CFRelease(CategoryStringWithModeAppended);
    *(unsigned char *)(sStorage + 24) = 1;
    pvmWritePrefs();
    CFRelease(v14);
  }
}

uint64_t PVMSetCurrentPreferredVolume(uint64_t a1, int a2, float a3)
{
  return PVMSetCurrentPreferredVolumeWithRefCon(0, a1, a2, a3);
}

float PVMGetRawVolumeForCurrentRouteFromVolume(const __CFString *a1, const void *a2, float a3)
{
  PVMInitialize();
  CFTypeRef v15 = 0;
  if (a1)
  {
    cf[0] = 0;
    MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a1, a2);
    pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, &v15, cf);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  else
  {
    CFAllocatorRef v7 = *(const void **)(sStorage + 216);
    CFTypeRef v15 = v7;
    if (v7) {
      CFRetain(v7);
    }
  }
  MEMORY[0x199716E90](*(void *)sStorage);
  CFTypeRef v8 = v15;
  long long v9 = *(_OWORD *)(sStorage + 264);
  v16[0] = *(_OWORD *)(sStorage + 248);
  v16[1] = v9;
  uint64_t v17 = *(void *)(sStorage + 280);
  long long v10 = *(_OWORD *)(sStorage + 264);
  *(_OWORD *)CFMutableDictionaryRef cf = *(_OWORD *)(sStorage + 248);
  long long v19 = v10;
  uint64_t v20 = *(void *)(sStorage + 280);
  float VolumeLimitPref = pvmGetVolumeLimitPref();
  float CurrentVolumeLimitForRoute = pvmGetCurrentVolumeLimitForRoute((uint64_t)v16, v8);
  MEMORY[0x199716EA0](*(void *)sStorage);
  if (v15) {
    CFRelease(v15);
  }
  float v13 = 1.0;
  if (a3 <= 1.0) {
    float v13 = a3;
  }
  return v13 * (float)(VolumeLimitPref * CurrentVolumeLimitForRoute);
}

uint64_t PVMSetCurrentPreferredVolumeForDeviceRoute(uint64_t a1, int a2, uint64_t a3, int a4, float a5)
{
  uint64_t v10 = PVMInitialize();
  if (!v10 && !*(unsigned char *)(sStorage + 8))
  {
    MEMORY[0x199716E90](*(void *)sStorage);
    CFDictionaryRef v11 = *(void **)(a1 + 8);
    if (v11)
    {
      CFDictionaryRef v12 = *(const __CFDictionary **)(sStorage + 184);
      if (v12) {
        CFStringRef Value = (void *)CFDictionaryGetValue(v12, *(const void **)(a1 + 8));
      }
      else {
        CFStringRef Value = *(void **)(a1 + 8);
      }
      if (Value) {
        CFStringRef v14 = Value;
      }
      else {
        CFStringRef v14 = v11;
      }
    }
    else
    {
      CFStringRef v14 = 0;
    }
    *(void *)(a1 + 8) = v14;
    uint64_t MappedRouteIdentifier = pvmGetMappedRouteIdentifier(*(void **)(a1 + 24), v14);
    uint64_t v16 = 0;
    *(void *)(a1 + 24) = MappedRouteIdentifier;
    uint64_t v17 = *(void *)(a1 + 16);
    if (v17)
    {
      float v18 = *(void **)(a1 + 8);
      if (v18)
      {
        if (([*(id *)(a1 + 8) hasPrefix:@"HeadphonesBT"] & 1) != 0
          || (int v19 = [v18 hasPrefix:@"HeadsetBT"], v16 = v17, v19))
        {
          uint64_t v16 = 0;
        }
      }
    }
    *(void *)(a1 + 16) = v16;
    long long v20 = *(_OWORD *)(a1 + 16);
    long long v26 = *(_OWORD *)a1;
    long long v27 = v20;
    uint64_t v28 = *(void *)(a1 + 32);
    if (PVMIsCurrentDeviceRoute((uint64_t)&v26) | a2)
    {
      pvmAssureCurrentCategoryAndDeviceRoute();
      CFStringRef v21 = *(const __CFString **)(sStorage + 216);
      long long v22 = *(const void **)(sStorage + 224);
      long long v23 = *(_OWORD *)(a1 + 16);
      long long v26 = *(_OWORD *)a1;
      long long v27 = v23;
      uint64_t v28 = *(void *)(a1 + 32);
      pvmSetVolumePref(v21, v22, &v26, 0, a5);
      if (a4) {
        float v24 = @"ImplicitVolumeChange";
      }
      else {
        float v24 = @"ExplicitVolumeChange";
      }
      pvmUpdatePreferredVolumeAndLimit((uint64_t)v24, 0, *(const __CFString **)(sStorage + 216), *(const void **)(sStorage + 224), 0, 1, a3, 0.0, 0.0);
    }
    MEMORY[0x199716EA0](*(void *)sStorage);
  }
  return v10;
}

float PVMGetCurrentPreferredVolumeForDeviceRoute(uint64_t a1)
{
  float DefaultVolume = pvmGetDefaultVolume();
  if (!PVMInitialize())
  {
    if (!*(void *)(a1 + 8)) {
      *(void *)(a1 + 8) = @"Speaker";
    }
    MEMORY[0x199716E90](*(void *)sStorage);
    CFDictionaryRef v3 = *(void **)(a1 + 8);
    if (v3)
    {
      CFDictionaryRef v4 = *(const __CFDictionary **)(sStorage + 184);
      if (v4) {
        CFStringRef Value = (void *)CFDictionaryGetValue(v4, *(const void **)(a1 + 8));
      }
      else {
        CFStringRef Value = *(void **)(a1 + 8);
      }
      if (Value) {
        CFDictionaryRef v6 = Value;
      }
      else {
        CFDictionaryRef v6 = v3;
      }
    }
    else
    {
      CFDictionaryRef v6 = 0;
    }
    *(void *)(a1 + 8) = v6;
    uint64_t MappedRouteIdentifier = pvmGetMappedRouteIdentifier(*(void **)(a1 + 24), v6);
    uint64_t v8 = 0;
    *(void *)(a1 + 24) = MappedRouteIdentifier;
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(void **)(a1 + 8);
      if (v10)
      {
        if (([*(id *)(a1 + 8) hasPrefix:@"HeadphonesBT"] & 1) != 0
          || (v11 = [v10 hasPrefix:@"HeadsetBT"], uint64_t v8 = v9, v11))
        {
          uint64_t v8 = 0;
        }
      }
    }
    *(void *)(a1 + 16) = v8;
    pvmAssureCurrentCategoryAndDeviceRoute();
    CFStringRef v12 = *(const __CFString **)(sStorage + 216);
    float v13 = *(const void **)(sStorage + 224);
    long long v14 = *(_OWORD *)(a1 + 16);
    v17[0] = *(_OWORD *)a1;
    v17[1] = v14;
    uint64_t v18 = *(void *)(a1 + 32);
    pvmGetVolumePref(v12, v13, v17);
    float DefaultVolume = v15;
    MEMORY[0x199716EA0](*(void *)sStorage);
  }
  return DefaultVolume;
}

uint64_t PVMSetCurrentCategoryAndMode(const __CFString *a1, const void *a2, uint64_t a3)
{
  if (*(unsigned char *)(sStorage + 8)) {
    return 0;
  }
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  uint64_t result = PVMInitialize();
  if (!result)
  {
    CFAllocatorRef v7 = (void *)sStorage;
    if (!*(unsigned char *)(sStorage + 8))
    {
      if (!a1) {
        a1 = @"Audio/Video";
      }
      MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a1, a2);
      pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, &cf, &v15);
      MEMORY[0x199716E90](*(void *)sStorage);
      pvmAssureCurrentCategoryAndDeviceRoute();
      if (!FigCFEqual() || !FigCFEqual())
      {
        uint64_t v9 = *(const void **)(sStorage + 216);
        CFTypeRef v10 = cf;
        *(void *)(sStorage + 216) = cf;
        if (v10) {
          CFRetain(v10);
        }
        if (v9) {
          CFRelease(v9);
        }
        int v11 = *(const void **)(sStorage + 224);
        CFTypeRef v12 = v15;
        *(void *)(sStorage + 224) = v15;
        if (v12) {
          CFRetain(v12);
        }
        if (v11) {
          CFRelease(v11);
        }
      }
      float v13 = *(const void **)(sStorage + 232);
      *(void *)(sStorage + 232) = a1;
      CFRetain(a1);
      if (v13) {
        CFRelease(v13);
      }
      long long v14 = *(const void **)(sStorage + 240);
      *(void *)(sStorage + 24singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v14) {
        CFRelease(v14);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v15) {
        CFRelease(v15);
      }
      MEMORY[0x199716EA0](*(void *)sStorage);
      CFAllocatorRef v7 = (void *)sStorage;
    }
    MEMORY[0x199716E90](*v7);
    pvmUpdatePreferredVolumeAndLimit(@"CategoryChange", 0, *(const __CFString **)(sStorage + 216), *(const void **)(sStorage + 224), 0, 1, a3, 0.0, 0.0);
    MEMORY[0x199716EA0](*(void *)sStorage);
    return 0;
  }
  return result;
}

float PVMGetMaxVolumeLimitForBuiltInSpeaker()
{
  return *(float *)(sStorage + 92);
}

uint64_t PVMCopyCurrentState(_DWORD *a1, CFTypeRef *a2, void *a3, CFTypeRef *a4, CFTypeRef *a5, CFTypeRef *a6)
{
  uint64_t v12 = PVMInitialize();
  if (!v12)
  {
    MEMORY[0x199716E90](*(void *)sStorage);
    pvmAssureCurrentCategoryAndDeviceRoute();
    uint64_t v13 = sStorage;
    if (a1) {
      *a1 = *(_DWORD *)(sStorage + 292);
    }
    if (a2)
    {
      *a2 = CFRetain(*(CFTypeRef *)(v13 + 216));
      uint64_t v13 = sStorage;
    }
    if (a3)
    {
      CFTypeRef v14 = *(CFTypeRef *)(v13 + 224);
      if (v14)
      {
        CFTypeRef v14 = CFRetain(v14);
        uint64_t v13 = sStorage;
      }
      *a3 = v14;
    }
    if (a4)
    {
      *a4 = CFRetain(*(CFTypeRef *)(v13 + 256));
      uint64_t v13 = sStorage;
    }
    if (a5)
    {
      CFTypeRef v15 = *(const void **)(v13 + 272);
      if (!v15)
      {
        *a5 = 0;
        if (a6)
        {
LABEL_16:
          uint64_t v16 = *(const void **)(v13 + 264);
          if (v16)
          {
            *a6 = CFRetain(v16);
            uint64_t v13 = sStorage;
          }
          else
          {
            *a6 = 0;
          }
        }
LABEL_21:
        MEMORY[0x199716EA0](*(void *)v13);
        return v12;
      }
      *a5 = CFRetain(v15);
      uint64_t v13 = sStorage;
    }
    if (a6) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  return v12;
}

uint64_t PVMRemoveVolumesForDeviceRoute(void *a1, void *a2, uint64_t a3)
{
  uint64_t result = PVMInitialize();
  if (!result)
  {
    if (a1)
    {
      CFStringRef Value = a1;
      if (*(void *)(sStorage + 184)) {
        CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 184), a1);
      }
      if (Value) {
        uint64_t v8 = Value;
      }
      else {
        uint64_t v8 = a1;
      }
      unint64_t MappedRouteIdentifier = pvmGetMappedRouteIdentifier(a2, a1);
      if (!a3
        || ([a1 hasPrefix:@"HeadphonesBT"] & 1) == 0
        && ![a1 hasPrefix:@"HeadsetBT"])
      {
        goto LABEL_14;
      }
    }
    else
    {
      unint64_t MappedRouteIdentifier = pvmGetMappedRouteIdentifier(a2, 0);
      uint64_t v8 = 0;
    }
    a3 = 0;
LABEL_14:
    MEMORY[0x199716E90](*(void *)sStorage);
    uint64_t v10 = pvmRemoveVolumesForDeviceRoute(v8, MappedRouteIdentifier, a3);
    MEMORY[0x199716EA0](*(void *)sStorage);
    return v10;
  }
  return result;
}

uint64_t pvmRemoveVolumesForDeviceRoute(const void *a1, unint64_t a2, uint64_t a3)
{
  CFStringRef DeviceRouteString = pvmCreateDeviceRouteString(a1, a2, a3);
  if (!DeviceRouteString) {
    return 4294938296;
  }
  CFStringRef v4 = DeviceRouteString;
  uint64_t v5 = sStorage;
  CFDictionaryRef v6 = *(__CFDictionary **)(sStorage + 16);
  if (v6)
  {
    CFDictionaryRemoveValue(v6, v4);
    uint64_t v5 = sStorage;
    *(unsigned char *)(sStorage + 24) = 1;
  }
  CFAllocatorRef v7 = *(__CFDictionary **)(v5 + 32);
  if (v7)
  {
    CFDictionaryRemoveValue(v7, v4);
    uint64_t v5 = sStorage;
    *(unsigned char *)(sStorage + 56) = 1;
  }
  if (*(unsigned char *)(v5 + 24) || *(unsigned char *)(v5 + 56)) {
    pvmWritePrefs();
  }
  CFRelease(v4);
  return 0;
}

uint64_t PVMSetVolumePreference(const __CFString *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, int a6, float a7, float a8, float a9)
{
  long long v9 = *(_OWORD *)(a4 + 16);
  v11[0] = *(_OWORD *)a4;
  v11[1] = v9;
  uint64_t v12 = *(void *)(a4 + 32);
  return pvmSetVolumePreferenceInternal(a1, a2, a3, (uint64_t)v11, 0, a5, a6, a7, a8, a9);
}

uint64_t pvmSetVolumePreferenceInternal(const __CFString *a1, const void *a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, float a8, float a9, float a10)
{
  uint64_t v20 = PVMInitialize();
  CFTypeRef v38 = 0;
  CFTypeRef cf = 0;
  if (v20) {
    return v20;
  }
  if (!a1) {
    a1 = @"Audio/Video";
  }
  if (!*(void *)(a4 + 8)) {
    *(void *)(a4 + 8) = @"Speaker";
  }
  MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a1, a2);
  pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, &cf, &v38);
  MEMORY[0x199716E90](*(void *)sStorage);
  long long v22 = *(_OWORD *)(a4 + 16);
  long long v35 = *(_OWORD *)a4;
  long long v36 = v22;
  uint64_t v37 = *(void *)(a4 + 32);
  pvmSetVolumePref((const __CFString *)cf, v38, &v35, a5, a8);
  long long v23 = *(_OWORD *)(a4 + 16);
  long long v35 = *(_OWORD *)a4;
  long long v36 = v23;
  uint64_t v37 = *(void *)(a4 + 32);
  BOOL v24 = PVMIsCategoryAndRouteInfoCurrent(a1, a2, (uint64_t)&v35);
  if (v24) {
    *(float *)(sStorage + 292) = a8;
  }
  if (CMSMDeviceState_ItsAHomePod() && FigCFEqual())
  {
    if (a7) {
      uint64_t v25 = @"ImplicitVolumeChange";
    }
    else {
      uint64_t v25 = @"ExplicitVolumeChange";
    }
    CFStringRef v26 = @"VoiceCommand";
    long long v27 = 0;
    float v28 = a9;
    float v29 = a10;
    int v30 = a3;
    int v31 = 0;
  }
  else
  {
    long long v32 = *(_OWORD *)(a4 + 16);
    long long v35 = *(_OWORD *)a4;
    long long v36 = v32;
    uint64_t v37 = *(void *)(a4 + 32);
    BOOL v33 = PVMIsCurrentDeviceRoute((uint64_t)&v35);
    if (!(v24 | a5) || !v33) {
      goto LABEL_21;
    }
    if (a7) {
      uint64_t v25 = @"ImplicitVolumeChange";
    }
    else {
      uint64_t v25 = @"ExplicitVolumeChange";
    }
    CFStringRef v26 = *(const __CFString **)(sStorage + 216);
    long long v27 = *(const void **)(sStorage + 224);
    float v28 = a9;
    float v29 = a10;
    int v30 = a3;
    int v31 = 1;
  }
  pvmUpdatePreferredVolumeAndLimit((uint64_t)v25, 0, v26, v27, v30, v31, a6, v28, v29);
LABEL_21:
  MEMORY[0x199716EA0](*(void *)sStorage);
  if (cf) {
    CFRelease(cf);
  }
  if (v38) {
    CFRelease(v38);
  }
  return v20;
}

uint64_t PVMSetRawVolumePreference(const __CFString *a1, const void *a2, uint64_t a3, uint64_t a4, int a5, int a6, float a7)
{
  long long v7 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  uint64_t v10 = *(void *)(a3 + 32);
  return pvmSetVolumePreferenceInternal(a1, a2, a6, (uint64_t)v9, 1, a4, a5, a7, 0.0, 0.0);
}

uint64_t PVMSetVolumeLimit(uint64_t a1, float a2)
{
  uint64_t v4 = PVMInitialize();
  if (!v4)
  {
    float v5 = 0.0;
    if (a2 >= 0.0) {
      float v5 = a2;
    }
    if (v5 <= 1.0) {
      float v6 = v5;
    }
    else {
      float v6 = 1.0;
    }
    MEMORY[0x199716E90](*(void *)sStorage);
    if (!PVMVolumePrefExistsForRouteAndCategory(*(const void **)(sStorage + 256), *(void *)(sStorage + 272), *(void *)(sStorage + 264), 0, 0))
    {
      float DefaultVolume = pvmGetDefaultVolume();
      CFStringRef v8 = *(const __CFString **)(sStorage + 216);
      long long v9 = *(const void **)(sStorage + 224);
      long long v10 = *(_OWORD *)(sStorage + 264);
      v16[0] = *(_OWORD *)(sStorage + 248);
      v16[1] = v10;
      uint64_t v17 = *(void *)(sStorage + 280);
      pvmSetVolumePref(v8, v9, v16, 0, DefaultVolume);
    }
    *(float *)uint64_t v16 = v6;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if ((*(void *)(sStorage + 32)
       || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(sStorage + 32) = Mutable) != 0))&& (CFNumberRef v13 = CFNumberCreate(v11, kCFNumberFloat32Type, v16)) != 0)
    {
      CFNumberRef v14 = v13;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(sStorage + 32), @"Headphone", v13);
      CFRelease(v14);
      *(unsigned char *)(sStorage + 56) = 1;
      pvmWritePrefs();
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = FigSignalErrorAt();
    }
    pvmReassertAllPreferredVolumesForRoute(a1);
    pvmUpdatePreferredVolumeAndLimit(@"VolumeLimitChange", 0, *(const __CFString **)(sStorage + 216), *(const void **)(sStorage + 224), 0, 1, a1, 0.0, 0.0);
    MEMORY[0x199716EA0](*(void *)sStorage);
  }
  return v4;
}

void pvmReassertAllPreferredVolumesForRoute(uint64_t a1)
{
  uint64_t context = a1;
  CFDictionaryRef v1 = *(const __CFDictionary **)(sStorage + 16);
  if (v1)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1);
    if (Copy)
    {
      CFDictionaryRef v3 = Copy;
      CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)pvmReassertDeviceVolumesIfMatchesRoute, &context);
      CFRelease(v3);
    }
  }
}

float PVMGetVolumeLimit()
{
  float VolumeLimitPref = 1.0;
  if (!PVMInitialize())
  {
    MEMORY[0x199716E90](*(void *)sStorage);
    float VolumeLimitPref = pvmGetVolumeLimitPref();
    MEMORY[0x199716EA0](*(void *)sStorage);
  }
  return VolumeLimitPref;
}

BOOL PVMIsOKToMuteCurrentCategory()
{
  MEMORY[0x199716E90](*(void *)sStorage);
  pvmAssureCurrentCategoryAndDeviceRoute();
  BOOL v0 = !FigCFEqual() && !FigCFEqual();
  MEMORY[0x199716EA0](*(void *)sStorage);
  return v0;
}

float PVMGetVolumeMultiplier()
{
  float v0 = 1.0;
  if (!PVMInitialize())
  {
    MEMORY[0x199716E90](*(void *)sStorage);
    float v0 = *(float *)(sStorage + 296);
    float valuePtr = v0;
    CFDictionaryRef v1 = *(const __CFDictionary **)(sStorage + 104);
    if (v1)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v1, @"global");
      if (Value)
      {
        CFNumberRef v3 = Value;
        CFTypeID v4 = CFGetTypeID(Value);
        if (v4 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v3, kCFNumberFloat32Type, &valuePtr);
          float v0 = valuePtr;
        }
      }
    }
    MEMORY[0x199716EA0](*(void *)sStorage);
  }
  return v0;
}

uint64_t PVMGetThirdPartyVolumeMultiplier()
{
  return MEMORY[0x199716EA0](*(void *)sStorage);
}

void PVMApplyVolumeReductionToHeadphoneRoutes(float a1)
{
  v69[16] = *MEMORY[0x1E4F143B8];
  MEMORY[0x199716E90](*(void *)sStorage);
  CFDictionaryRef v2 = (void *)[*(id *)(sStorage + 16) copy];
  CFNumberRef v3 = (void *)[*(id *)(sStorage + 120) copy];
  MEMORY[0x199716EA0](*(void *)sStorage);
  if (v2)
  {
    if (v3)
    {
      unsigned int v43 = v2;
      id v4 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      id v5 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      uint64_t v6 = [v3 countByEnumeratingWithState:&v56 objects:v68 count:16];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)v57;
        do
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            if (*(void *)v57 != v8) {
              objc_enumerationMutation(v3);
            }
            long long v10 = *(void **)(*((void *)&v56 + 1) + 8 * i);
            if (objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", v10), "isEqualToString:", @"Headphones")&& objc_msgSend(v10, "containsString:", @"Headphone"))
            {
              [v4 addObject:v10];
            }
          }
          uint64_t v7 = [v3 countByEnumeratingWithState:&v56 objects:v68 count:16];
        }
        while (v7);
      }
      uint64_t v42 = v3;
      if ([v4 count])
      {
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        uint64_t v11 = [v4 countByEnumeratingWithState:&v52 objects:v67 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v53;
          do
          {
            for (uint64_t j = 0; j != v12; ++j)
            {
              if (*(void *)v53 != v13) {
                objc_enumerationMutation(v4);
              }
              uint64_t v15 = *(void *)(*((void *)&v52 + 1) + 8 * j);
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "objectForKey:", v15), "objectForKey:", @"Audio/Video"), "floatValue");
              if (v16 > a1) {
                [v5 addObject:v15];
              }
            }
            uint64_t v12 = [v4 countByEnumeratingWithState:&v52 objects:v67 count:16];
          }
          while (v12);
        }
        if ([v5 count])
        {
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          uint64_t v47 = [v5 countByEnumeratingWithState:&v48 objects:v66 count:16];
          if (!v47) {
            goto LABEL_66;
          }
          uint64_t v45 = *(void *)v49;
          id v46 = v4;
          CFPropertyListRef v44 = v5;
          while (1)
          {
            for (uint64_t k = 0; k != v47; ++k)
            {
              if (*(void *)v49 != v45) {
                objc_enumerationMutation(v5);
              }
              uint64_t v18 = *(void **)(*((void *)&v48 + 1) + 8 * k);
              int v19 = objc_msgSend(v18, "componentsSeparatedByString:", @"~", v40, v41, v42);
              uint64_t v20 = [v19 count];
              if (!v20)
              {
                uint64_t v23 = 0;
                uint64_t v22 = 0;
                uint64_t v25 = 0;
                goto LABEL_37;
              }
              uint64_t v21 = v20;
              uint64_t v22 = [v19 objectAtIndex:0];
              uint64_t v23 = 0;
              if (v21 == 2)
              {
                uint64_t v24 = 1;
                goto LABEL_35;
              }
              if (v21 == 3)
              {
                uint64_t v23 = [v19 objectAtIndex:1];
                uint64_t v24 = 2;
LABEL_35:
                uint64_t v25 = [v19 objectAtIndex:v24];
                goto LABEL_37;
              }
              uint64_t v25 = 0;
LABEL_37:
              uint64_t VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
              if (dword_1E9359D38)
              {
                unsigned int v61 = 0;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v28 = v61;
                if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
                  unsigned int v29 = v28;
                }
                else {
                  unsigned int v29 = v28 & 0xFFFFFFFE;
                }
                if (v29)
                {
                  int v62 = 136315394;
                  uint64_t v63 = "PVMApplyVolumeReductionToHeadphoneRoutes";
                  __int16 v64 = 2114;
                  char v65 = v18;
                  LODWORD(v41) = 22;
                  long long v40 = &v62;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              MEMORY[0x199716E90](*(void *)sStorage);
              int v30 = (void *)sStorage;
              *(unsigned char *)(sStorage + 8) = 0;
              MEMORY[0x199716EA0](*v30);
              v69[0] = @"Headphones";
              v69[1] = v22;
              v69[2] = v23;
              v69[3] = v25;
              v69[4] = 0;
              pvmSetVolumePreferenceInternal(@"Audio/Video", @"Default", 0, (uint64_t)v69, 1, VolumeSequenceNumber, 0, a1, 0.0, 0.0);
              MEMORY[0x199716E90](*(void *)sStorage);
              int v31 = (void *)sStorage;
              *(unsigned char *)(sStorage + 8) = 1;
              MEMORY[0x199716EA0](*v31);
              id v4 = v46;
              id v5 = v44;
            }
            uint64_t v47 = [v44 countByEnumeratingWithState:&v48 objects:v66 count:16];
            if (!v47)
            {
LABEL_66:

              goto LABEL_68;
            }
          }
        }
        if (!dword_1E9359D38) {
          goto LABEL_66;
        }
        unsigned int v61 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v38 = v61;
        if (os_log_type_enabled(v37, type)) {
          unsigned int v39 = v38;
        }
        else {
          unsigned int v39 = v38 & 0xFFFFFFFE;
        }
        if (!v39)
        {
LABEL_65:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_66;
        }
        int v62 = 136315138;
        uint64_t v63 = "PVMApplyVolumeReductionToHeadphoneRoutes";
      }
      else
      {
        if (!dword_1E9359D38) {
          goto LABEL_66;
        }
        unsigned int v61 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v35 = v61;
        if (os_log_type_enabled(v34, type)) {
          unsigned int v36 = v35;
        }
        else {
          unsigned int v36 = v35 & 0xFFFFFFFE;
        }
        if (!v36) {
          goto LABEL_65;
        }
        int v62 = 136315138;
        uint64_t v63 = "PVMApplyVolumeReductionToHeadphoneRoutes";
      }
      _os_log_send_and_compose_impl();
      goto LABEL_65;
    }
    if (dword_1E9359D38)
    {
      unsigned int v61 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      BOOL v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }

    id v5 = 0;
  }
  else
  {
    if (dword_1E9359D38)
    {
      unsigned int v61 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      long long v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    id v5 = v3;
  }
LABEL_68:
}

uint64_t PVMSetVibeIntensityPreference(float a1)
{
  float valuePtr = a1;
  MEMORY[0x199716E90](*(void *)sStorage);
  CFDictionaryRef v1 = *(const void **)(sStorage + 64);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(sStorage + 64) = 0;
  }
  CFNumberRef v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  uint64_t v3 = sStorage;
  *(void *)(sStorage + 64) = v2;
  if (v2)
  {
    *(unsigned char *)(v3 + 72) = 1;
    pvmWritePrefs();
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  MEMORY[0x199716EA0](*(void *)sStorage);
  return v4;
}

void pvmWritePrefs()
{
  MEMORY[0x199716E90](*(void *)sStorage);
  uint64_t v0 = sStorage;
  int v1 = *(unsigned __int8 *)(sStorage + 24);
  if (*(unsigned char *)(sStorage + 24))
  {
    CFNumberRef v2 = *(const void **)(sStorage + 16);
    if (v2)
    {
      MXCFPreferencesSetAndSynchronizeUserPreference(@"volumes", v2);
      uint64_t v0 = sStorage;
      *(unsigned char *)(sStorage + 24) = 0;
      int v1 = 1;
    }
    else
    {
      int v1 = 0;
    }
  }
  if (*(unsigned char *)(v0 + 40))
  {
    uint64_t v3 = *(const void **)(v0 + 48);
    if (v3)
    {
      MXCFPreferencesSetAndSynchronizeUserPreference(@"inputVolumes", v3);
      uint64_t v0 = sStorage;
      *(unsigned char *)(sStorage + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
      int v1 = 1;
    }
  }
  if (*(unsigned char *)(v0 + 56))
  {
    uint64_t v4 = *(const void **)(v0 + 32);
    if (v4)
    {
      MXCFPreferencesSetAndSynchronizeUserPreference(@"volumeLimits", v4);
      uint64_t v0 = sStorage;
      *(unsigned char *)(sStorage + 56) = 0;
      int v1 = 1;
    }
  }
  if (*(unsigned char *)(v0 + 96))
  {
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, (const void *)(v0 + 92));
    MXCFPreferencesSetAndSynchronizeUserPreference(@"maxVolumeLimitForBuiltInSpeaker", v5);
    uint64_t v0 = sStorage;
    *(unsigned char *)(sStorage + 96) = 0;
    if (v5)
    {
      CFRelease(v5);
      uint64_t v0 = sStorage;
    }
    int v1 = 1;
  }
  if (*(unsigned char *)(v0 + 112))
  {
    uint64_t v6 = *(const void **)(v0 + 104);
    if (v6)
    {
      MXCFPreferencesSetAndSynchronizeUserPreference(@"volumeMultiplier", v6);
      uint64_t v0 = sStorage;
      *(unsigned char *)(sStorage + 112) = 0;
      int v1 = 1;
    }
  }
  if (*(unsigned char *)(v0 + 72) && (uint64_t v7 = *(const void **)(v0 + 64)) != 0)
  {
    MXCFPreferencesSetAndSynchronizeUserPreference(@"vibeIntensity", v7);
    *(unsigned char *)(sStorage + 72) = 0;
  }
  else if (!v1)
  {
LABEL_23:
    if (*(unsigned char *)(v0 + 128))
    {
      long long v9 = *(const void **)(v0 + 120);
      if (v9)
      {
        MXCFPreferencesSetAndSynchronizeUserPreference(@"endpointTypeInfo", v9);
        *(unsigned char *)(sStorage + 128) = 0;
      }
    }
    JUMPOUT(0x199716EA0);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  MXDispatchAsync((uint64_t)"pvmWritePrefs", (uint64_t)"MXPreferredVolumeManager.m", 1890, 0, 0, global_queue, (uint64_t)&__block_literal_global_235);
  uint64_t v0 = sStorage;
  goto LABEL_23;
}

float PVMGetVibeIntensityPreference()
{
  float valuePtr = 1.0;
  MEMORY[0x199716E90](*(void *)sStorage);
  CFNumberRef v1 = *(const __CFNumber **)(sStorage + 64);
  if (v1)
  {
    CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
    v0.n128_f64[0] = valuePtr;
    if (valuePtr > 0.1) {
      float valuePtr = 1.0;
    }
  }
  MEMORY[0x199716EA0](*(void *)sStorage, v0);
  return valuePtr;
}

uint64_t PVMSetInputVolumePreference(const void *a1, unint64_t a2, uint64_t a3, float a4)
{
  float valuePtr = a4;
  if (FigCFEqual())
  {
    CFStringRef DeviceRouteString = pvmCreateDeviceRouteString(a1, a2, a3);
    if (DeviceRouteString)
    {
      CFStringRef v8 = DeviceRouteString;
      MEMORY[0x199716E90](*(void *)sStorage);
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
      if (v10)
      {
        CFNumberRef v11 = v10;
        CFMutableDictionaryRef Mutable = *(__CFDictionary **)(sStorage + 48);
        if (!Mutable)
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(void *)(sStorage + 48) = Mutable;
        }
        CFDictionarySetValue(Mutable, v8, v11);
        *(unsigned char *)(sStorage + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 1;
        pvmWritePrefs();
        CFRelease(v11);
      }
      MEMORY[0x199716EA0](*(void *)sStorage);
      CFRelease(v8);
    }
  }
  return 0;
}

float PVMGetInputVolumePreference(const void *a1, unint64_t a2, uint64_t a3)
{
  int valuePtr = 1065353216;
  CFStringRef DeviceRouteString = pvmCreateDeviceRouteString(a1, a2, a3);
  float v4 = 1.0;
  if (DeviceRouteString)
  {
    CFStringRef v5 = DeviceRouteString;
    if (*(void *)(sStorage + 48))
    {
      MEMORY[0x199716E90](*(void *)sStorage);
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 48), v5);
      if (Value) {
        CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
      }
      MEMORY[0x199716EA0](*(void *)sStorage);
      CFRelease(v5);
      return *(float *)&valuePtr;
    }
    else
    {
      CFRelease(DeviceRouteString);
    }
  }
  return v4;
}

BOOL PVMInputVolumePrefExistsForDeviceRoute(const void *a1, unint64_t a2, uint64_t a3)
{
  CFStringRef DeviceRouteString = pvmCreateDeviceRouteString(a1, a2, a3);
  if (!DeviceRouteString) {
    return 0;
  }
  CFStringRef v4 = DeviceRouteString;
  if (*(void *)(sStorage + 48))
  {
    MEMORY[0x199716E90](*(void *)sStorage);
    BOOL v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 48), v4) != 0;
    MEMORY[0x199716EA0](*(void *)sStorage);
  }
  else
  {
    BOOL v5 = 0;
  }
  CFRelease(v4);
  return v5;
}

uint64_t PVMSetMaxVolumeLimitForBuiltInSpeaker(float a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  float v1 = *(float *)(sStorage + 92);
  if (v1 == a1)
  {
    if (dword_1E9359D38)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    float v3 = 1.0;
    if (a1 <= 1.0)
    {
      float v3 = a1;
      if (a1 < 0.2) {
        float v3 = 0.2;
      }
    }
    *(_DWORD *)(sStorage + 92) = 1065353216;
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = @"Speaker";
    uint64_t v17 = 0;
    uint64_t v18 = @"Speaker";
    uint64_t v19 = 0;
    float v4 = PVMGetVolumePreference(@"Audio/Video", 0, (uint64_t)&v16);
    if (v4 < v3) {
      float v5 = v4;
    }
    else {
      float v5 = v3;
    }
    MEMORY[0x199716E90](*(void *)sStorage);
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = @"Speaker";
    uint64_t v17 = 0;
    uint64_t v18 = @"Speaker";
    uint64_t v19 = 0;
    pvmSetVolumePref(@"Audio/Video", 0, &v16, 0, v5);
    MEMORY[0x199716EA0](*(void *)sStorage);
    *(float *)(sStorage + 92) = v3;
    if (dword_1E9359D38)
    {
      uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (FigCFEqual() && FigCFEqual())
    {
      MEMORY[0x199716E90](*(void *)sStorage);
      uint64_t v7 = (void *)sStorage;
      *(unsigned char *)(sStorage + 8) = 0;
      MEMORY[0x199716EA0](*v7);
      MEMORY[0x199716E90](*(void *)sStorage);
      pvmUpdatePreferredVolumeAndLimit(@"VolumeLimitChange", 0, @"Audio/Video", 0, 0, 1, 0, 0.0, 0.0);
      MEMORY[0x199716EA0](*(void *)sStorage);
    }
    *(unsigned char *)(sStorage + 96) = 1;
    pvmWritePrefs();
    BOOL v8 = v1 < 1.0 && v3 == 1.0;
    if (v8 || (v1 == 1.0 ? (BOOL v9 = v3 < 1.0) : (BOOL v9 = 0), v9))
    {
      if (dword_1E9359D38)
      {
        CFNumberRef v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFNumberRef v11 = +[MXPreferredVolumeManager sharedInstance];
      LODWORD(v12) = *(_DWORD *)(sStorage + 292);
      [(MXPreferredVolumeManager *)v11 postNotification:@"PVMStateDidChange" category:0 mode:0 volume:1 rampUpwardDuration:0 rampDownwardDuration:0 silenceVolumeHUD:v12 reason:0.0 refCon:0.0 sequenceNumber:0];
    }
  }
  return 0;
}

void __pvmInitialize_block_invoke()
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v1 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFDictionaryRef v2 = (const __CFDictionary *)CFPreferencesCopyValue(@"volumes", @"com.apple.mediaexperience", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFStringRef v45 = v1;
    int64_t Count = CFDictionaryGetCount(v2);
    float v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryRef cf = v3;
    uint64_t v47 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    long long v48 = v5;
    CFDictionaryGetKeysAndValues(v3, v5, v47);
    int64_t v46 = Count;
    if (Count >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        CFDictionaryRef v7 = (const __CFDictionary *)v47[v6];
        int64_t v8 = CFDictionaryGetCount(v7);
        BOOL v9 = (const void **)malloc_type_calloc(v8, 8uLL, 0x80040B8603338uLL);
        CFNumberRef v10 = (const void **)malloc_type_calloc(v8, 8uLL, 0x80040B8603338uLL);
        CFDictionaryGetKeysAndValues(v7, v9, v10);
        if (dword_1E9359D38)
        {
          unsigned int valuePtr = 0;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v8 >= 1)
        {
          uint64_t v12 = 0;
          int v13 = dword_1E9359D38;
          do
          {
            if (v13)
            {
              unsigned int valuePtr = 0;
              uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              int v13 = dword_1E9359D38;
            }
            ++v12;
          }
          while (v8 != v12);
        }
        free(v9);
        free(v10);
        ++v6;
      }
      while (v6 != v46);
    }
    free(v48);
    free(v47);
    CFRelease(cf);
    CFStringRef v1 = v45;
  }
  CFNumberRef v15 = (const __CFNumber *)MXCFPreferencesCopyPreference(@"maxVolumeLimitForBuiltInSpeaker");
  if (v15)
  {
    CFNumberRef v16 = v15;
    unsigned int valuePtr = 0;
    CFNumberGetValue(v15, kCFNumberFloat32Type, &valuePtr);
    if (dword_1E9359D38)
    {
      uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRelease(v16);
  }
  CFDictionaryRef v18 = (const __CFDictionary *)CFPreferencesCopyValue(@"volumeMultiplier", @"com.apple.mediaexperience", v0, v1);
  if (v18)
  {
    CFDictionaryRef v19 = v18;
    uint64_t v20 = (const void **)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    uint64_t v21 = (const void **)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(v19, v20, v21);
    if (dword_1E9359D38)
    {
      uint64_t v22 = (const char *)*v20;
      uint64_t v23 = *v21;
      unsigned int valuePtr = 0;
      uint64_t v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v25 = valuePtr;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        int v50 = 136315650;
        long long v51 = "pvmDumpVolumePreferences";
        __int16 v52 = 2114;
        long long v53 = v22;
        __int16 v54 = 2114;
        long long v55 = v23;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    free(v20);
    free(v21);
    CFRelease(v19);
  }
  if (dword_1E9359D38)
  {
    unsigned int valuePtr = 0;
    long long v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v28 = valuePtr;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFFE;
    }
    if (v29)
    {
      int v30 = CMSMDeviceState_RingerIsOn(1);
      int v31 = "not silenced";
      if (!v30) {
        int v31 = "silenced";
      }
      int v50 = 136315394;
      long long v51 = "pvmDumpVolumePreferences";
      __int16 v52 = 2082;
      long long v53 = v31;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1E9359D38)
    {
      unsigned int valuePtr = 0;
      long long v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v33 = valuePtr;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = v33 & 0xFFFFFFFE;
      }
      if (v34)
      {
        if (CMSMDeviceState_VibrateOnRing(1)) {
          unsigned int v35 = "ON";
        }
        else {
          unsigned int v35 = "OFF";
        }
        int v50 = 136315394;
        long long v51 = "pvmDumpVolumePreferences";
        __int16 v52 = 2082;
        long long v53 = v35;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (dword_1E9359D38)
      {
        unsigned int valuePtr = 0;
        unsigned int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v37 = valuePtr;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v38 = v37;
        }
        else {
          unsigned int v38 = v37 & 0xFFFFFFFE;
        }
        if (v38)
        {
          if (CMSMDeviceState_VibrateOnSilent(1)) {
            unsigned int v39 = "ON";
          }
          else {
            unsigned int v39 = "OFF";
          }
          int v50 = 136315394;
          long long v51 = "pvmDumpVolumePreferences";
          __int16 v52 = 2082;
          long long v53 = v39;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (dword_1E9359D38)
        {
          unsigned int valuePtr = 0;
          long long v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v41 = valuePtr;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v42 = v41;
          }
          else {
            unsigned int v42 = v41 & 0xFFFFFFFE;
          }
          if (v42)
          {
            if (CMSMDeviceState_ButtonsCanChangeRingerVolume()) {
              unsigned int v43 = "ON";
            }
            else {
              unsigned int v43 = "OFF";
            }
            int v50 = 136315394;
            long long v51 = "pvmDumpVolumePreferences";
            __int16 v52 = 2082;
            long long v53 = v43;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
}

void pvmApplierFunction_CopyValidatedVolumes(const void *a1, CFNumberRef number, __CFDictionary *a3)
{
  if (a3)
  {
    float valuePtr = 0.0;
    CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
    if (valuePtr > 1.0) {
      float valuePtr = 1.0;
    }
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
    CFDictionarySetValue(a3, a1, v5);
    if (v5) {
      CFRelease(v5);
    }
  }
}

uint64_t __pvmInitializeLogging_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  uint64_t result = fig_note_initialize_category_with_default_work();
  if ((dword_1E9359D38 & 0x100) != 0) {
    dword_1E9359D38 = 0;
  }
  return result;
}

void pvmApplierFunction_ValidateVolumesForRoute(const void *a1, const __CFDictionary *a2, __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)pvmApplierFunction_ValidateVolumesForCategory, Mutable);
  CFDictionarySetValue(a3, a1, Mutable);
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void pvmApplierFunction_ValidateVolumesForCategory(const void *a1, CFNumberRef number, __CFDictionary *a3)
{
  int valuePtr = 1056964608;
  CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(a3, a1, v5);
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t pvmGetMappedBluetoothRouteWithDeviceIDAppended(void *a1)
{
  if (([a1 hasPrefix:@"HeadphonesBT"] & 1) == 0
    && ![a1 hasPrefix:@"HeadsetBT"])
  {
    return 0;
  }
  CFDictionaryRef v2 = objc_msgSend((id)objc_msgSend(a1, "componentsSeparatedByString:", @"~"), "lastObject");
  if (v2) {
    uint64_t v3 = objc_msgSend((id)objc_msgSend(v2, "componentsSeparatedByString:", @"-"), "firstObject");
  }
  else {
    uint64_t v3 = 0;
  }
  float v4 = (void *)[@"HeadphonesBT" stringByAppendingString:@"~"];
  return [v4 stringByAppendingString:v3];
}

uint64_t __pvmAdd100dBVolumeLimitChangedListener_block_invoke()
{
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (dword_1E9359D38)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716E90](*(void *)sStorage);
  CFDictionaryRef v2 = (void *)sStorage;
  *(unsigned char *)(sStorage + 8) = 0;
  MEMORY[0x199716EA0](*v2);
  return pvmUpdate100dBVolumeLimit(CFPreferenceNumberWithDefault != 0);
}

uint64_t __pvmWritePrefs_block_invoke()
{
  return notify_post("com.apple.celestial.uservolumepreferenceschanged");
}

uint64_t pvmSetSystemSoundVolumeMultiplierForVolumeGuts(float a1)
{
  MEMORY[0x199716E90](*(void *)sStorage);
  float v2 = *(float *)(sStorage + 144);
  float v3 = *(float *)(sStorage + 152);
  if ((float)((float)(v2 + a1) * v3) >= v2) {
    float v2 = (float)(v2 + a1) * v3;
  }
  if (v2 > *(float *)(sStorage + 148)) {
    float v2 = *(float *)(sStorage + 148);
  }
  float valuePtr = v2;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if ((*(void *)(sStorage + 104)
     || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(sStorage + 104) = Mutable) != 0))&& (v6 = CFNumberCreate(v4, kCFNumberFloat32Type, &valuePtr)) != 0)
  {
    CFNumberRef v7 = v6;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(sStorage + 104), @"global", v6);
    CFRelease(v7);
    *(unsigned char *)(sStorage + 112) = 1;
    pvmWritePrefs();
  }
  else
  {
    FigSignalErrorAt();
  }
  return MEMORY[0x199716EA0](*(void *)sStorage);
}

void pvmReassertDeviceVolumesIfMatchesRoute(const __CFString *a1, const __CFDictionary *a2, uint64_t *a3)
{
  CFStringRef v6 = @"HeadphonesBT";
  if (CFStringHasPrefix(a1, @"HeadphonesBT")
    || (CFStringRef v6 = @"Headphone", CFStringHasPrefix(a1, @"Headphone")))
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    MutableCFDictionaryRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v6);
    CFStringAppend(MutableCopy, @"~");
    int HasPrefix = CFStringHasPrefix(a1, MutableCopy);
    CFRelease(MutableCopy);
    if (HasPrefix)
    {
      CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v7, a1, @"~");
      CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
      uint64_t v12 = *a3;
      CFNumberRef v15 = 0;
      CFNumberRef ValueAtIndex = 0;
      uint64_t v18 = v12;
      CFStringRef context = v6;
      if (Count >= 2)
      {
        CFIndex v13 = Count;
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 1);
        if (v13 != 2) {
          CFNumberRef v15 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
        }
      }
      uint64_t v17 = *(void *)(sStorage + 248);
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)pvmReassertVolume, &context);
      CFRelease(ArrayBySeparatingStrings);
    }
  }
}

void pvmReassertVolume(void *a1, CFNumberRef number, uint64_t *a3)
{
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  uint64_t v5 = a3[4];
  float valuePtr = 0.0;
  CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
  uint64_t v7 = a3[2];
  uint64_t v6 = a3[3];
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  float v10 = valuePtr;
  uint64_t v17 = v6;
  uint64_t v18 = v9;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  uint64_t v21 = 0;
  float VolumeLimitPref = pvmGetVolumeLimitPref();
  uint64_t v17 = v6;
  uint64_t v18 = v9;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  uint64_t v21 = 0;
  float v12 = v10 / (float)(VolumeLimitPref * pvmGetCurrentVolumeLimitForRoute((uint64_t)&v17, 0));
  if (v12 <= 1.0) {
    float v13 = v12;
  }
  else {
    float v13 = 1.0;
  }
  pvmCreateSeparateCategoryAndModeStrings(a1, &cf, &v15);
  uint64_t v17 = v6;
  uint64_t v18 = v9;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  uint64_t v21 = 0;
  pvmSetVolumePreferenceInternal((const __CFString *)cf, v15, 0, (uint64_t)&v17, 0, v5, 0, v13, 0.0, 0.0);
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
}

void CMScreenInitialize()
{
  gCMScreen_0 = 0;
  CFStringRef v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  gCMScreen_1 = (uint64_t)dispatch_queue_create("com.apple.coremedia.cmsession.screenqueue", v0);
  MXDispatchAsync((uint64_t)"CMScreenInitialize", (uint64_t)"CMSessionManager_Screen.m", 131, 0, 0, gCMScreen_1, (uint64_t)&__block_literal_global_62);
  CMScreenSetMirroringMode(0);
  CMScreenSetVirtualDisplayClientPID(0);
}

CFTypeRef __CMScreenInitialize_block_invoke()
{
  return cmscreenSetCurrentState(@"ScreenState_Deactivated");
}

CFTypeRef cmscreenSetCurrentState(CFTypeRef cf)
{
  if (gCMScreen_2) {
    CFRelease((CFTypeRef)gCMScreen_2);
  }
  if (cf) {
    CFTypeRef result = CFRetain(cf);
  }
  else {
    CFTypeRef result = 0;
  }
  gCMScreen_2 = (uint64_t)result;
  return result;
}

void CMScreenSetMirroringMode(int a1)
{
  if (BackBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&BackBoardServicesLibrary_sOnce, &__block_literal_global_36);
  }
  if (BackBoardServicesLibrary_sLib)
  {
    if (dlsym((void *)BackBoardServicesLibrary_sLib, "BKSDisplayServicesSetCloneMirroringMode"))
    {
      v2[0] = MEMORY[0x1E4F143A8];
      v2[1] = 3221225472;
      v2[2] = __CMScreenSetMirroringMode_block_invoke;
      v2[3] = &__block_descriptor_36_e5_v8__0l;
      int v3 = a1;
      MXDispatchAsync((uint64_t)"CMScreenSetMirroringMode", (uint64_t)"CMSessionManager_Screen.m", 689, 0, 0, gCMScreen_1, (uint64_t)v2);
    }
  }
}

void CMScreenSetVirtualDisplayClientPID(int a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (BackBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&BackBoardServicesLibrary_sOnce, &__block_literal_global_36);
  }
  if (BackBoardServicesLibrary_sLib
    && dlsym((void *)BackBoardServicesLibrary_sLib, "BKSDisplayServicesSetVirtualDisplayClientPID"))
  {
    if (dword_1E9359ED0)
    {
      int v6 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    _OWORD v3[2] = __CMScreenSetVirtualDisplayClientPID_block_invoke;
    v3[3] = &__block_descriptor_36_e5_v8__0l;
    int v4 = a1;
    MXDispatchAsync((uint64_t)"CMScreenSetVirtualDisplayClientPID", (uint64_t)"CMSessionManager_Screen.m", 705, 0, 0, gCMScreen_1, (uint64_t)v3);
  }
}

uint64_t CMScreenHandleActivation(CFTypeRef cf, CFTypeRef a2)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a2) {
    CFRetain(a2);
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = __CMScreenHandleActivation_block_invoke;
  void v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = cf;
  void v5[5] = a2;
  MXDispatchAsync((uint64_t)"CMScreenHandleActivation", (uint64_t)"CMSessionManager_Screen.m", 217, 0, 0, gCMScreen_1, (uint64_t)v5);
  return 0;
}

void __CMScreenHandleActivation_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!cmscreenIsActivated())
  {
    if (!gCMScreen_0)
    {
      uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      int v3 = "unknown endpoint type";
      if (CStringPtrAndBufferToFree) {
        int v3 = (const char *)CStringPtrAndBufferToFree;
      }
      snprintf(__str, 0x80uLL, "CMSessionManager-%s", v3);
      free(0);
      gCMScreen_0 = FigOSTransactionCreate();
    }
    cmscreenSetCurrentState(@"ScreenState_Suspended");
    if (cmscreenEndpointIsStarkWiFi() && !sCMScreenStarkWiFiIdleSleepPreventor)
    {
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v6 = CFDateCreate(v4, Current);
      PowerLogDataForStarkWiFuint64_t i = CMSMPowerLogCreatePowerLogDataForStarkWiFi(@"WiFiCarPlayScreenActivate", sCMScreenStarkWiFiIdleSleepPreventor, @"com.apple.cmsession.WiFiCarPlay.IsConnected", v6);
      CMSMSleep_CreateIdleSleepPreventor(@"com.apple.cmsession.WiFiCarPlay.IsConnected", @"WiFiCarPlayScreen", PowerLogDataForStarkWiFi, (IOPMAssertionID *)&sCMScreenStarkWiFiIdleSleepPreventor);
      if (v6) {
        CFRelease(v6);
      }
      if (PowerLogDataForStarkWiFi) {
        CFRelease(PowerLogDataForStarkWiFi);
      }
    }
    CMSMPowerLogPostScreenMirroringPowerLogs((const void *)*MEMORY[0x1E4F1CFD0]);
  }
  uint64_t v8 = *(const void **)(a1 + 32);
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t CMScreenHandleDeactivation(CFTypeRef cf, CFTypeRef a2)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a2) {
    CFRetain(a2);
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = __CMScreenHandleDeactivation_block_invoke;
  void v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = cf;
  void v5[5] = a2;
  MXDispatchAsync((uint64_t)"CMScreenHandleDeactivation", (uint64_t)"CMSessionManager_Screen.m", 268, 0, 0, gCMScreen_1, (uint64_t)v5);
  return 0;
}

void __CMScreenHandleDeactivation_block_invoke(uint64_t a1)
{
  cmscreenSetCurrentState(@"ScreenState_Deactivated");
  if (cmscreenEndpointIsStarkWiFi()) {
    BOOL v2 = sCMScreenStarkWiFiIdleSleepPreventor == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v5 = CFDateCreate(v3, Current);
    PowerLogDataForStarkWiFuint64_t i = CMSMPowerLogCreatePowerLogDataForStarkWiFi(@"WiFiCarPlayScreenDeactivate", sCMScreenStarkWiFiIdleSleepPreventor, @"com.apple.cmsession.WiFiCarPlay.IsConnected", v5);
    CMSMSleep_ReleaseIdleSleepPreventor(sCMScreenStarkWiFiIdleSleepPreventor, @"WiFiCarPlayScreen", PowerLogDataForStarkWiFi);
    sCMScreenStarkWiFiIdleSleepPreventor = 0;
    if (v5) {
      CFRelease(v5);
    }
    if (PowerLogDataForStarkWiFi) {
      CFRelease(PowerLogDataForStarkWiFi);
    }
  }
  CMSMPowerLogPostScreenMirroringPowerLogs((const void *)*MEMORY[0x1E4F1CFC8]);
  if (gCMScreen_0)
  {

    gCMScreen_0 = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 32);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
  }
}

uint64_t CMScreenSuspendStream(const void *a1, const void *a2, const void *a3, const void *a4)
{
  if (!a1) {
    return 4294954316;
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  if (a4) {
    CFRetain(a4);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __CMScreenSuspendStream_block_invoke;
  v9[3] = &__block_descriptor_64_e5_v8__0l;
  v9[4] = a1;
  v9[5] = a2;
  void v9[6] = a3;
  void v9[7] = a4;
  MXDispatchAsync((uint64_t)"CMScreenSuspendStream", (uint64_t)"CMSessionManager_Screen.m", 338, 0, 0, gCMScreen_1, (uint64_t)v9);
  return 0;
}

void __CMScreenSuspendStream_block_invoke(void *a1)
{
  if (a1[4])
  {
    if (FigCFEqual())
    {
      FigSignalErrorAt();
    }
    else
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (cmscreenEndpointIsStarkWiFi() && sCMScreenStarkWiFiIdleSleepPreventor)
      {
        CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v5 = CFDateCreate(v3, Current);
        PowerLogDataForStarkWiFuint64_t i = CMSMPowerLogCreatePowerLogDataForStarkWiFi(@"WiFiCarPlayScreenSuspend", sCMScreenStarkWiFiIdleSleepPreventor, @"com.apple.cmsession.WiFiCarPlay.IsConnected", v5);
        CMSMSleep_ReleaseIdleSleepPreventor(sCMScreenStarkWiFiIdleSleepPreventor, @"WiFiCarPlayScreen", PowerLogDataForStarkWiFi);
        sCMScreenStarkWiFiIdleSleepPreventor = 0;
        if (v5) {
          CFRelease(v5);
        }
        if (PowerLogDataForStarkWiFi) {
          CFRelease(PowerLogDataForStarkWiFi);
        }
      }
      FigEndpointStreamSuspend();
      cmscreenSetCurrentState(@"ScreenState_Suspended");
    }
  }
  uint64_t v7 = (const void *)a1[4];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)a1[5];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)a1[6];
  if (v9) {
    CFRelease(v9);
  }
  float v10 = (const void *)a1[7];
  if (v10) {
    CFRelease(v10);
  }
}

uint64_t CMScreenResumeStream(const void *a1, const void *a2, const void *a3, const void *a4)
{
  if (!a1) {
    return 4294954316;
  }
  CFRetain(a1);
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  if (a4) {
    CFRetain(a4);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __CMScreenResumeStream_block_invoke;
  v9[3] = &__block_descriptor_64_e5_v8__0l;
  v9[4] = a1;
  v9[5] = a2;
  void v9[6] = a3;
  void v9[7] = a4;
  MXDispatchAsync((uint64_t)"CMScreenResumeStream", (uint64_t)"CMSessionManager_Screen.m", 408, 0, 0, gCMScreen_1, (uint64_t)v9);
  return 0;
}

void __CMScreenResumeStream_block_invoke(void *a1)
{
  if (a1[4])
  {
    if (FigCFEqual() || FigCFEqual())
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (cmscreenEndpointIsStarkWiFi() && !sCMScreenStarkWiFiIdleSleepPreventor)
      {
        CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v5 = CFDateCreate(v3, Current);
        PowerLogDataForStarkWiFuint64_t i = CMSMPowerLogCreatePowerLogDataForStarkWiFi(@"WiFiCarPlayScreenResume", sCMScreenStarkWiFiIdleSleepPreventor, @"com.apple.cmsession.WiFiCarPlay.IsConnected", v5);
        CMSMSleep_CreateIdleSleepPreventor(@"com.apple.cmsession.WiFiCarPlay.IsConnected", @"WiFiCarPlayScreen", PowerLogDataForStarkWiFi, (IOPMAssertionID *)&sCMScreenStarkWiFiIdleSleepPreventor);
        if (v5) {
          CFRelease(v5);
        }
        if (PowerLogDataForStarkWiFi) {
          CFRelease(PowerLogDataForStarkWiFi);
        }
      }
      FigEndpointStreamResume();
      cmscreenSetCurrentState(@"ScreenState_Activated");
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  uint64_t v7 = (const void *)a1[4];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)a1[5];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)a1[6];
  if (v9) {
    CFRelease(v9);
  }
  float v10 = (const void *)a1[7];
  if (v10) {
    CFRelease(v10);
  }
}

uint64_t CMScreenGetScreenState()
{
  uint64_t v3 = 0;
  CFAllocatorRef v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 0;
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __CMScreenGetScreenState_block_invoke;
  v2[3] = &unk_1E57C5B30;
  void v2[4] = &v3;
  MXDispatchSync((uint64_t)"CMScreenGetScreenState", (uint64_t)"CMSessionManager_Screen.m", 568, 0, 0, gCMScreen_1, (uint64_t)v2);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_194E58778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CMScreenGetScreenState_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = gCMScreen_2;
  return result;
}

uint64_t CMScreenIsSuspended()
{
  uint64_t v3 = 0;
  CFAllocatorRef v4 = &v3;
  uint64_t v5 = 0x2020000000;
  char v6 = 0;
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __CMScreenIsSuspended_block_invoke;
  v2[3] = &unk_1E57C5B30;
  void v2[4] = &v3;
  MXDispatchSync((uint64_t)"CMScreenIsSuspended", (uint64_t)"CMSessionManager_Screen.m", 670, 0, 0, gCMScreen_1, (uint64_t)v2);
  uint64_t v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_194E58870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CMScreenIsSuspended_block_invoke(uint64_t a1)
{
  uint64_t result = FigCFEqual();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t __CMScreenSetMirroringMode_block_invoke(uint64_t a1)
{
  return softLinkBKSDisplayServicesSetCloneMirroringMode(*(unsigned int *)(a1 + 32));
}

uint64_t __CMScreenSetVirtualDisplayClientPID_block_invoke(uint64_t a1)
{
  return softLinkBKSDisplayServicesSetVirtualDisplayClientPID(*(unsigned int *)(a1 + 32));
}

uint64_t cmscreenEndpointIsStarkWiFi()
{
  uint64_t result = FigCFEqual();
  if (result) {
    return FigCFEqual() != 0;
  }
  return result;
}

uint64_t __cmscreenIsTetheredDemoModeOn_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  cmscreenIsTetheredDemoModeOn_isThetheredDemoModeOn = result;
  return result;
}

void *__BackBoardServicesLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices", 2);
  BackBoardServicesLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initBKSDisplayServicesSetCloneMirroringMode(uint64_t a1)
{
  if (BackBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&BackBoardServicesLibrary_sOnce, &__block_literal_global_36);
  }
  BOOL v2 = (uint64_t (*)())dlsym((void *)BackBoardServicesLibrary_sLib, "BKSDisplayServicesSetCloneMirroringMode");
  softLinkBKSDisplayServicesSetCloneMirroringMode = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t initBKSDisplayServicesSetVirtualDisplayClientPID(uint64_t a1)
{
  if (BackBoardServicesLibrary_sOnce != -1) {
    dispatch_once(&BackBoardServicesLibrary_sOnce, &__block_literal_global_36);
  }
  BOOL v2 = (uint64_t (*)())dlsym((void *)BackBoardServicesLibrary_sLib, "BKSDisplayServicesSetVirtualDisplayClientPID");
  softLinkBKSDisplayServicesSetVirtualDisplayuint64_t ClientPID = v2;
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void *CMSM_IDSClient_Initialize()
{
  if (cmsm_IDSClient_GetClient_once != -1) {
    dispatch_once(&cmsm_IDSClient_GetClient_once, &__block_literal_global_63);
  }
  idsFrameworkLib = (uint64_t)dlopen("/System/Library/PrivateFrameworks/IDS.framework/IDS", 4);
  uint64_t result = dlsym((void *)idsFrameworkLib, "IDSSendMessageOptionQueueOneIdentifierKey");
  kMXSession_IDSSendMessageOptionQueueOneIdentifierKey = (uint64_t)result;
  return result;
}

id CMSM_IDSClient_CreateSessionInfoDictionary(void *a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v5 = [a1 clientName];
  if (v5)
  {
    [v4 setObject:v5 forKey:@"ClientName"];
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(a1, "ID", v9, v10), @"CMSessionID");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(a1, "audioCategory"), @"AudioCategory");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(a1, "audioMode"), @"AudioMode");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend(a1, "interruptionStyle")), @"InterruptionStyle");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend(a1, "clientPriority")), @"ClientPriority");
  if (a2)
  {
    uint64_t v7 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", objc_msgSend(a1, "handsOverInterruptionsToInterruptor"));
    [v4 setObject:v7 forKey:kMXSession_IDSMessage_HandoverInterruption];
  }
  return v4;
}

uint64_t CMSM_IDSClient_QueryRemote_BTDeviceConnectionStatus()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_BTDeviceConnectionStatusQuery);
  int valuePtr = 1065353216;
  CFNumberRef v2 = CFNumberCreate(v0, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v2);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v3;
}

uint64_t CMSM_IDSClient_SendNotificationMessage(uint64_t a1)
{
  v16[23] = *MEMORY[0x1E4F143B8];
  if (cmsm_IDSClient_GetClient_once != -1) {
    dispatch_once(&cmsm_IDSClient_GetClient_once, &__block_literal_global_63);
  }
  CFNumberRef v2 = (void *)cmsm_IDSClient_GetClient_idsClient;
  uint64_t v3 = (void *)CMSM_IDSConnection_CopyNearbyPairedDevice();
  if (!v3)
  {
    FigCFDictionaryGetValue();
    goto LABEL_17;
  }
  id v4 = (void *)CMSM_IDSCopyIDForDevice();
  uint64_t Value = FigCFDictionaryGetValue();
  if (!v4)
  {
LABEL_17:
    LODWORD(v16[0]) = 0;
    v15[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    id v4 = 0;
    uint64_t v10 = 0;
    goto LABEL_23;
  }
  *(void *)CFTypeRef v15 = 0;
  v16[0] = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    FigCFDictionarySetValue();
  }
  uint64_t v7 = [MEMORY[0x1E4F1CAD0] setWithObject:v4];
  if (!CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
    && Value != kMXSession_IDSMessage_Type_BTDeviceConnectionStatusChanged
    && Value != kMXSession_IDSMessage_Type_BTDeviceConnectionStatusReply)
  {
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v10 = objc_msgSend(v2, "sendMessage:toDestinations:priority:options:identifier:error:", a1, v7, 300, Mutable, v15, v16, v13, v14);
  if (!v10 || dword_1E9359ED0)
  {
    uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_23:

  return v10;
}

uint64_t CMSM_IDSClient_ReplyToRemote_BTDeviceConnectionStatus(int a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_BTDeviceConnectionStatusReply);
  int valuePtr = 1065353216;
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
  if (a1) {
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_BTDeviceIsConnectedKey, *v5);
  uint64_t v6 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v6;
}

uint64_t CMSM_IDSClient_NotifyRemote_BTDeviceConnectionStatusChanged(int a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_BTDeviceConnectionStatusChanged);
  int valuePtr = 1065353216;
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
  if (a1) {
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_BTDeviceIsConnectedKey, *v5);
  uint64_t v6 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v6;
}

uint64_t CMSM_IDSClient_QueryRemote_PlayingInfo()
{
  CMSM_IDSConnection_UpdateRemoteRepliedWithInitialPlayingInfo(0);
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_RemotePlayingInfoQuery);
  int valuePtr = 1065353216;
  CFNumberRef v2 = CFNumberCreate(v0, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v2);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v3 && !CMSM_IDSConnection_DidRemoteReplyWithInitialPlayingInfo()) {
    CMSM_IDSConnection_StartWaitForRemoteToReplyWithInitialPlayingInfoTimer(20.0);
  }
  return v3;
}

uint64_t CMSM_IDSClient_ReplyToRemote_PlayingInfo(const void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_RemotePlayingInfoReply);
  int valuePtr = 1065353216;
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4) {
    CFRelease(v4);
  }
  if (a1) {
    CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_AllPlayingSessionsKey, a1);
  }
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  CMSMUtility_GetCurrentRouteInfoAtIndex(0, &v10);
  int DoesPortSupportMultipleConnections = vaeDoesPortSupportMultipleConnections(DWORD2(v12));
  uint64_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
  if (DoesPortSupportMultipleConnections) {
    uint64_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_CurrentRouteIsSharedKey, *v6);
  if ((void)v11) {
    uint64_t v7 = (__CFString *)v11;
  }
  else {
    uint64_t v7 = &stru_1EE5E8D28;
  }
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_CurrentRouteUIDKey, v7);
  uint64_t v8 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v8;
}

uint64_t CMSM_IDSClient_NotifyRemote_LocalIsBeingInitialized()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_LocalIsBeingInitialized);
  int valuePtr = 1065353216;
  CFNumberRef v2 = CFNumberCreate(v0, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v2);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v3;
}

id CMSM_IDSClient_NotifyRemote_InterruptionStartAndCopyIdentifier(void *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  int valuePtr = 1065353216;
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4) {
    CFRelease(v4);
  }
  id SessionInfoDictionary = CMSM_IDSClient_CreateSessionInfoDictionary(a1, 1);
  FigCFDictionarySetValue();
  if (cmsm_IDSClient_GetClient_once != -1) {
    dispatch_once(&cmsm_IDSClient_GetClient_once, &__block_literal_global_63);
  }
  uint64_t v6 = cmsm_IDSClient_GetClient_idsClient;
  uint64_t v7 = (void *)CMSM_IDSConnection_CopyNearbyPairedDevice();
  if (v7) {
    uint64_t v8 = (void *)CMSM_IDSCopyIDForDevice();
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v36 = 0;
  unsigned int v37 = &v36;
  uint64_t v38 = 0x3052000000;
  unsigned int v39 = __Block_byref_object_copy__11;
  long long v40 = __Block_byref_object_dispose__11;
  uint64_t v41 = 0;
  uint64_t v32 = 0;
  unsigned int v33 = &v32;
  uint64_t v34 = 0x2020000000;
  char v35 = 0;
  if (v8)
  {
    uint64_t v26 = 0;
    long long v27 = &v26;
    uint64_t v28 = 0x3052000000;
    unsigned int v29 = __Block_byref_object_copy__11;
    int v30 = __Block_byref_object_dispose__11;
    uint64_t v31 = 0;
    MessagingQueue = CMSM_IDSConnection_GetMessagingQueue();
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = __CMSM_IDSClient_SendMessageAsyncAndCopyIdentifier_block_invoke;
    v25[3] = &unk_1E57CAF08;
    v25[4] = v6;
    v25[5] = v8;
    v25[6] = &v32;
    v25[7] = &v36;
    v25[8] = &v26;
    v25[9] = Mutable;
    MXDispatchSync((uint64_t)"CMSM_IDSClient_SendMessageAsyncAndCopyIdentifier", (uint64_t)"CMSessionManager_IDSClient.m", 635, 0, 0, MessagingQueue, (uint64_t)v25);
    if (Mutable) {
      uint64_t Value = CFDictionaryGetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey);
    }
    else {
      uint64_t Value = 0;
    }
    if (*((unsigned char *)v33 + 24))
    {
      if (!dword_1E9359ED0)
      {
LABEL_25:
        _Block_object_dispose(&v26, 8);
        goto LABEL_26;
      }
      unsigned int v24 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v12 = v24;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = v12 & 0xFFFFFFFE;
      }
      if (v13)
      {
        uint64_t v14 = v37[5];
        int v42 = 136315650;
        unsigned int v43 = "CMSM_IDSClient_SendMessageAsyncAndCopyIdentifier";
        __int16 v44 = 2114;
        CFStringRef v45 = Value;
        __int16 v46 = 2114;
        uint64_t v47 = v14;
        _os_log_send_and_compose_impl();
      }
    }
    else
    {
      unsigned int v24 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CFTypeRef v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v16 = v24;
      if (os_log_type_enabled(v15, type)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        uint64_t v18 = v37[5];
        uint64_t v19 = v27[5];
        int v42 = 136315906;
        unsigned int v43 = "CMSM_IDSClient_SendMessageAsyncAndCopyIdentifier";
        __int16 v44 = 2114;
        CFStringRef v45 = Value;
        __int16 v46 = 2114;
        uint64_t v47 = v18;
        __int16 v48 = 2114;
        uint64_t v49 = v19;
        _os_log_send_and_compose_impl();
      }
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_25;
  }
LABEL_26:

  id v20 = (id)v37[5];
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  if (SessionInfoDictionary) {
    CFRelease(SessionInfoDictionary);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v20;
}

void sub_194E59F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t CMSM_IDSClient_NotifyRemote_InterruptionDone(int a1, const void *a2)
{
  int v10 = a1;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_RemoteInterruptionDone);
  int valuePtr = 1065353216;
  CFNumberRef v5 = CFNumberCreate(v3, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v5);
  if (v5) {
    CFRelease(v5);
  }
  CFNumberRef v6 = CFNumberCreate(v3, kCFNumberSInt32Type, &v10);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_RemoteInterruptionDoneErrorCode, v6);
  if (v6) {
    CFRelease(v6);
  }
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_IdentifierKey, a2);
  uint64_t v7 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

uint64_t CMSM_IDSClient_NotifyRemote_LocalIsPlayingStart(void *a1)
{
  if (CMSM_GetLocalSessionPriority(a1, 0) == 100) {
    return 1;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_LocalIsPlayingStart);
  int valuePtr = 1065353216;
  CFNumberRef v5 = CFNumberCreate(v3, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v5);
  if (v5) {
    CFRelease(v5);
  }
  id SessionInfoDictionary = CMSM_IDSClient_CreateSessionInfoDictionary(a1, 0);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_PlayingSessionKey, SessionInfoDictionary);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  CMSMUtility_GetCurrentRouteInfoAtIndex(0, &v11);
  int DoesPortSupportMultipleConnections = vaeDoesPortSupportMultipleConnections(DWORD2(v13));
  uint64_t v8 = (const void **)MEMORY[0x1E4F1CFC8];
  if (DoesPortSupportMultipleConnections) {
    uint64_t v8 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_CurrentRouteIsSharedKey, *v8);
  if ((void)v12) {
    uint64_t v9 = (__CFString *)v12;
  }
  else {
    uint64_t v9 = &stru_1EE5E8D28;
  }
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_CurrentRouteUIDKey, v9);
  uint64_t v2 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (SessionInfoDictionary) {
    CFRelease(SessionInfoDictionary);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v2;
}

uint64_t CMSM_IDSClient_NotifyRemote_LocalIsPlayingDone(void *a1)
{
  if (CMSM_GetLocalSessionPriority(a1, 0) == 100) {
    return 1;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_LocalIsPlayingDone);
  int valuePtr = 1065353216;
  CFNumberRef v5 = CFNumberCreate(v3, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v5);
  if (v5) {
    CFRelease(v5);
  }
  id SessionInfoDictionary = CMSM_IDSClient_CreateSessionInfoDictionary(a1, 0);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_PlayingSessionKey, SessionInfoDictionary);
  uint64_t v2 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (SessionInfoDictionary) {
    CFRelease(SessionInfoDictionary);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v2;
}

uint64_t CMSM_IDSClient_NotifyRemote_LocalIsDoingEndInterruption(const void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_LocalIsDoingEndInterruption);
  int valuePtr = 1065353216;
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4) {
    CFRelease(v4);
  }
  if (a1) {
    CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_LocalEndInterruptionStatusKey, a1);
  }
  uint64_t v5 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v5;
}

uint64_t CMSM_IDSClient_NotifyRemote_UpdateSharedAudioRouteMacAddress(const void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_TypeKey, (const void *)kMXSession_IDSMessage_Type_UpdateSharedAudioRouteMacAddress);
  int valuePtr = 1065353216;
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_VersionKey, v4);
  if (v4) {
    CFRelease(v4);
  }
  if (a1)
  {
    CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_SharedAudioRouteMacAddress, a1);
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  else
  {
    uint64_t v5 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(Mutable, (const void *)kMXSession_IDSMessage_ClearSharedAudioRoute, *v5);
  uint64_t v6 = CMSM_IDSClient_SendNotificationMessage((uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v6;
}

id CMSMVAUtility_CopyFigIODeviceNameFromVADPortTypes(int a1, unsigned int a2)
{
  if (a1 == 1886216809 && a2 == 1886545251) {
    return (id)CFRetain(@"ReceiverAndMicrophone");
  }
  if (a1 == 1886222185 && a2 == 1885892727) {
    return (id)CFRetain(@"HeadsetInOut");
  }
  if (a1 == 1886216809 && a2 == 1885892727) {
    return (id)CFRetain(@"HeadphonesAndMicrophone");
  }
  if (a1 == 1886216809 && a2 == 1886613611) {
    return (id)CFRetain(@"SpeakerAndMicrophone");
  }
  if (a1 == 1886216820 && a2 == 1885892706) {
    return (id)CFRetain(@"HeadsetBT");
  }
  if (a1 == 1886680169 && a2 == 1886680175) {
    return (id)CFRetain(@"TTY");
  }
  if (a1 == 1886153070 && a2 == 1886154613) {
    return (id)CFRetain(@"LineInOut");
  }
  return CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(a2);
}

__CFString *CMSMVAUtility_MapVASiriInputSourceToString(int a1)
{
  if (a1 <= 1936289390)
  {
    if (a1 == 1936024681) {
      return @"ExternalDeviceInput";
    }
    if (a1 == 1936286822) {
      return @"DefaultDevice";
    }
  }
  else
  {
    switch(a1)
    {
      case 1936289391:
        return @"None";
      case 1936290660:
        return @"SpeechDetectionDevice";
      case 1936679529:
        return @"OutOfBandSpeechInput";
    }
  }
  return 0;
}

NSDictionary *CMSMVAUtility_GetVADOutputPortTypeFromFigRouteName(NSDictionary *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    uint64_t result = [+[MXSessionManager sharedInstance] figRouteToVADOutputPortTypeDict];
    if (result) {
      return (NSDictionary *)[(NSDictionary *)[+[MXSessionManager sharedInstance] figRouteToVADOutputPortTypeDict] objectForKey:v1];
    }
  }
  return result;
}

NSDictionary *CMSMVAUtility_GetVADInputPortTypeFromFigRouteName(NSDictionary *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    uint64_t result = [+[MXSessionManager sharedInstance] figRouteToVADInputPortTypeDict];
    if (result) {
      return (NSDictionary *)[(NSDictionary *)[+[MXSessionManager sharedInstance] figRouteToVADInputPortTypeDict] objectForKey:v1];
    }
  }
  return result;
}

BOOL CMSMVAUtility_MakeConnectedPortRoutable(AudioObjectID a1)
{
  int PortRoutable = vaeMakePortRoutable(a1, 1, 0, qword_1E9359C88);
  CFAllocatorRef v3 = (const void *)vaeCopyNameForPort(a1);
  if (v3) {
    CFRelease(v3);
  }
  return PortRoutable == 0;
}

uint64_t CMSMVAUtility_MakePortRoutable(int a1, uint64_t a2)
{
  return vaeMakePortRoutable(a1, 1, 1, a2);
}

uint64_t CMSMVAUtility_MakeLowLatencyAirPlayPortRoutable(uint64_t a1)
{
  CFAllocatorRef v2 = CMSMVAUtility_CopyConnectedWirelessPorts();
  if (!v2) {
    return 0;
  }
  CFArrayRef v3 = v2;
  CFIndex Count = CFArrayGetCount(v2);
  if (Count < 1) {
    goto LABEL_10;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v3, v6);
    uint64_t valuePtr = 0;
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
    int v8 = valuePtr;
    if (vaeGetPortTypeFromPortID(valuePtr) == 1885433964) {
      break;
    }
    if (v5 == ++v6) {
      goto LABEL_10;
    }
  }
  if (v8)
  {
    uint64_t v9 = 1;
    vaeMakePortRoutable(v8, 1, 1, a1);
  }
  else
  {
LABEL_10:
    uint64_t v9 = 0;
  }
  CFRelease(v3);
  return v9;
}

BOOL CMSMVAUtility_ShouldAutoRouteOnConnect(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  CFTypeRef v5 = vaeCopyDeviceIdentifierFromVADPort(a1);
  CFIndex v6 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v5, 1, *MEMORY[0x1E4F20648], 0);
  if (v6)
  {
    CFRelease(v6);
LABEL_3:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  if (PortTypeFromPortID > 1885433970)
  {
    if (PortTypeFromPortID == 1885433975)
    {
      BOOL ShouldBTPortBeTreatedAsInEar = 0;
      goto LABEL_107;
    }
    if (PortTypeFromPortID != 1885433971)
    {
LABEL_23:
      BOOL ShouldBTPortBeTreatedAsInEar = 0;
      uint64_t v7 = 1;
      if (PortTypeFromPortID > 1886152040)
      {
        if (PortTypeFromPortID == 1886152041 || PortTypeFromPortID == 1886152047) {
          goto LABEL_106;
        }
        int v15 = 1886216820;
      }
      else
      {
        if (PortTypeFromPortID == 1885565807) {
          goto LABEL_106;
        }
        if (PortTypeFromPortID == 1885892674) {
          goto LABEL_31;
        }
        int v15 = 1885892706;
      }
      if (PortTypeFromPortID != v15) {
        goto LABEL_4;
      }
LABEL_31:
      if (!vaeDoesPortSupportMultipleConnections(a1))
      {
        BOOL ShouldBTPortBeTreatedAsInEar = CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(a1);
        if (PortTypeFromPortID != 1885892674
          || CMSMDeviceState_ItsAnAppleTV()
          || !vaemLineOutIsConnected()
          && !vaemUSBAudioOutputIsConnected()
          && !vaemHDMIAudioOutputIsConnected()
          && !vaemDisplayPortAudioOutputIsConnected()
          && !vaemThunderboltOutputIsConnected()
          && !vaemStarkAudioPortIsCurrentlyActive()
          && !vaemContinuityScreenOutputIsConnected())
        {
          goto LABEL_106;
        }
        goto LABEL_105;
      }
      *(_WORD *)os_log_type_t type = 0;
      MXBluetoothServices_QueryAudioRoutingActionForNewWirelessPort(a1, &type[1], type, 0, 0);
      if (type[0])
      {
        if (type[1])
        {
          if (CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(a1))
          {
            if (!vaeRequestOwnershipOnBTPort(a1)) {
              goto LABEL_103;
            }
            unsigned int v42 = 0;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v17 = v42;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v18 = v17;
            }
            else {
              unsigned int v18 = v17 & 0xFFFFFFFE;
            }
            if (!v18) {
              goto LABEL_104;
            }
            int v43 = 136315138;
            __int16 v44 = "CMSMVAUtility_ShouldAutoRouteOnConnect";
            goto LABEL_87;
          }
          if (dword_1E9359ED0)
          {
            unsigned int v42 = 0;
            unsigned int v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v26 = v42;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v27 = v26;
            }
            else {
              unsigned int v27 = v26 & 0xFFFFFFFE;
            }
            if (!v27) {
              goto LABEL_104;
            }
            goto LABEL_86;
          }
        }
        else if (dword_1E9359ED0)
        {
          unsigned int v42 = 0;
          uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v23 = v42;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v24 = v23;
          }
          else {
            unsigned int v24 = v23 & 0xFFFFFFFE;
          }
          if (v24)
          {
            int v43 = 136315138;
            __int16 v44 = "CMSMVAUtility_ShouldAutoRouteOnConnect";
            _os_log_send_and_compose_impl();
          }
          goto LABEL_104;
        }
LABEL_105:
        BOOL ShouldBTPortBeTreatedAsInEar = 0;
        goto LABEL_106;
      }
      if (vaeDoesBTPortSupportInEarDetection(a1))
      {
        if (FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID())
        {
          if (!cmsmShouldSetupForCoordinatedInterruptions(a1, 0)) {
            goto LABEL_103;
          }
          if (dword_1E9359ED0)
          {
            unsigned int v42 = 0;
            uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v20 = v42;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v21 = v20;
            }
            else {
              unsigned int v21 = v20 & 0xFFFFFFFE;
            }
            if (v21)
            {
              int v43 = 136315394;
              __int16 v44 = "CMSMVAUtility_ShouldAutoRouteOnConnect";
              __int16 v45 = 2048;
              uint64_t v46 = a1;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!vaeRequestOwnershipOnBTPort(a1)) {
            goto LABEL_103;
          }
          unsigned int v42 = 0;
          unsigned int v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v38 = v42;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v39 = v38;
          }
          else {
            unsigned int v39 = v38 & 0xFFFFFFFE;
          }
          if (!v39) {
            goto LABEL_104;
          }
          int v43 = 136315138;
          __int16 v44 = "CMSMVAUtility_ShouldAutoRouteOnConnect";
          goto LABEL_87;
        }
        if (CMSMVAUtility_IsBTPortKnownToNotBeInEar(a1))
        {
          if (!dword_1E9359ED0) {
            goto LABEL_105;
          }
          unsigned int v42 = 0;
          uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v32 = v42;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v33 = v32;
          }
          else {
            unsigned int v33 = v32 & 0xFFFFFFFE;
          }
          if (!v33) {
            goto LABEL_104;
          }
        }
        else
        {
          if (vaeGetBTPortOwnsSharedAudioConnection(a1)) {
            goto LABEL_103;
          }
          if (!dword_1E9359ED0) {
            goto LABEL_105;
          }
          unsigned int v42 = 0;
          uint64_t v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v35 = v42;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v36 = v35;
          }
          else {
            unsigned int v36 = v35 & 0xFFFFFFFE;
          }
          if (!v36) {
            goto LABEL_104;
          }
        }
      }
      else
      {
        if (vaeGetBTPortOwnsSharedAudioConnection(a1)) {
          goto LABEL_103;
        }
        if (!dword_1E9359ED0) {
          goto LABEL_105;
        }
        unsigned int v42 = 0;
        uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v29 = v42;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v30 = v29;
        }
        else {
          unsigned int v30 = v29 & 0xFFFFFFFE;
        }
        if (!v30) {
          goto LABEL_104;
        }
      }
LABEL_86:
      int v43 = 136315394;
      __int16 v44 = "CMSMVAUtility_ShouldAutoRouteOnConnect";
      __int16 v45 = 2048;
      uint64_t v46 = a1;
LABEL_87:
      _os_log_send_and_compose_impl();
LABEL_104:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_105;
    }
LABEL_20:
    if (a2)
    {
      BOOL ShouldBTPortBeTreatedAsInEar = FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID() != 0;
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (PortTypeFromPortID == 1885433953) {
    goto LABEL_20;
  }
  if (PortTypeFromPortID != 1885433964) {
    goto LABEL_23;
  }
  unsigned int NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  if (!NumberOfCurrentOutputPorts)
  {
LABEL_103:
    BOOL ShouldBTPortBeTreatedAsInEar = 1;
    goto LABEL_106;
  }
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = NumberOfCurrentOutputPorts;
  do
  {
    MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, v10, (uint64_t)v47);
    AudioObjectID v13 = v48;
    if ((vaeGetPortTypeFromPortID(v48) & 0xFFFFFFDF) == 0x70687042 && CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(v13)) {
      int v11 = 1;
    }
    ++v10;
  }
  while (v12 != v10);
  if (v11)
  {
    uint64_t v7 = dword_1E9359ED0;
    if (dword_1E9359ED0)
    {
      unsigned int v42 = 0;
      type[1] = OS_LOG_TYPE_DEFAULT;
      uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = 1;
  }
LABEL_4:
  BOOL ShouldBTPortBeTreatedAsInEar = v7;
  if (PortTypeFromPortID != 1885433975) {
LABEL_106:
  }
    FigPredictedRouting_StopPreemptivePortChangedTimer(!ShouldBTPortBeTreatedAsInEar);
LABEL_107:
  if (v5) {
    CFRelease(v5);
  }
  return ShouldBTPortBeTreatedAsInEar;
}

BOOL CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(AudioObjectID a1)
{
  return !vaeHasUserEnabledInEarDetectionForBTPort(a1) || vaeIsInEarStatusTrueForBTPort(a1);
}

uint64_t CMSMVAUtility_IsBTPortKnownToNotBeInEar(AudioObjectID a1)
{
  uint64_t result = vaeHasUserEnabledInEarDetectionForBTPort(a1);
  if (result) {
    return !vaeIsInEarStatusTrueForBTPort(a1);
  }
  return result;
}

uint64_t CMSMVAUtility_MakeNewlyConnectedWirelessPortsRoutableForEndpoint(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (!Count) {
    return 0;
  }
  uint64_t v7 = Count;
  uint64_t v8 = CMSMVAUtility_ArePortsHFPOnly(a1);
  uint64_t v37 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (v7 >= 1)
  {
    uint64_t v38 = a3;
    uint64_t v10 = v8;
    CFIndex v11 = 0;
    int v12 = 0;
    do
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v11);
      CFNumberRef v14 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFStringRef valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        uint64_t v15 = valuePtr;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (CMSMVAUtility_ShouldAutoRouteOnConnect(v15, a2))
      {
        CFArrayAppendValue(Mutable, v14);
        if (vaeDoesPortSupportMultipleConnections(v15))
        {
          if (vaeGetPortTypeFromPortID(v15) == 1885892674
            || vaeGetPortTypeFromPortID(v15) == 1885892706)
          {
            int v12 = v15;
          }
        }
      }
      ++v11;
    }
    while (v7 != v11);
    uint64_t v8 = v10;
    a3 = v38;
    if (v12)
    {
      ArrayFromPortID = CMSMVAUtility_CreateArrayFromPortID(v12);
      Routable = cmsmCopyPartnerPortsToMakeRoutable(ArrayFromPortID);
      if (Routable)
      {
        CFArrayRef v18 = Routable;
        CFIndex v19 = CFArrayGetCount(Routable);
        if (v19 >= 1)
        {
          CFIndex v20 = v19;
          for (CFIndex i = 0; i != v20; ++i)
          {
            uint64_t v22 = CFArrayGetValueAtIndex(v18, i);
            if (!FigCFArrayContainsValue()) {
              CFArrayAppendValue(Mutable, v22);
            }
          }
        }
        CFRelease(v18);
      }
      if (ArrayFromPortID) {
        CFRelease(ArrayFromPortID);
      }
    }
  }
  if (!Mutable) {
    return 0;
  }
  CFIndex v23 = CFArrayGetCount(Mutable);
  if (v23 < 1)
  {
    uint64_t ArrayOfPortsRoutable = 0;
  }
  else
  {
    CFIndex v24 = v23;
    CFStringRef valuePtr = 0;
    if (a2)
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v27 = v26 ? v26 : 0;
      unsigned int v29 = *(void (**)(uint64_t, void, uint64_t, CFStringRef *))(v27 + 48);
      if (v29) {
        v29(CMBaseObject, *MEMORY[0x1E4F20E38], v37, &valuePtr);
      }
    }
    CFIndex v30 = 0;
    while (1)
    {
      CFNumberRef v31 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, v30);
      AudioObjectID v39 = 0;
      CFNumberGetValue(v31, kCFNumberSInt32Type, &v39);
      CFStringRef v32 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(v39);
      int PortTypeFromPortID = vaeGetPortTypeFromPortID(v39);
      if (MXCFStringHasCaseInsensitivePrefix(v32, valuePtr) || PortTypeFromPortID == 1885433964) {
        break;
      }
      if (v32) {
        CFRelease(v32);
      }
      if (v24 == ++v30)
      {
        uint64_t v35 = 0;
        goto LABEL_46;
      }
    }
    if (v32) {
      CFRelease(v32);
    }
    uint64_t v35 = 1;
LABEL_46:
    uint64_t ArrayOfPortsRoutable = vaemMakeArrayOfPortsRoutable(Mutable, 1, v35, a3, v8);
    if (valuePtr) {
      CFRelease(valuePtr);
    }
  }
  CFRelease(Mutable);
  return ArrayOfPortsRoutable;
}

uint64_t CMSMVAUtility_ArePortsHFPOnly(const __CFArray *a1)
{
  if (a1 && (CFIndex Count = CFArrayGetCount(a1), Count >= 1))
  {
    CFIndex v3 = Count;
    CFIndex v4 = 0;
    unsigned __int8 v5 = 1;
    do
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v4);
      uint64_t valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      int PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
      if (PortTypeFromPortID != 1886216820 && PortTypeFromPortID != 1885892706) {
        unsigned __int8 v5 = 0;
      }
      BOOL v9 = PortTypeFromPortID == 1886216820 || PortTypeFromPortID == 1885892706;
      ++v4;
    }
    while (v9 && v3 != v4);
  }
  else
  {
    return 1;
  }
  return v5;
}

__CFArray *CMSMVAUtility_CreateArrayFromPortID(int a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  SInt64 = (const void *)FigCFNumberCreateSInt64();
  CFArrayAppendValue(Mutable, SInt64);
  if (SInt64) {
    CFRelease(SInt64);
  }
  return Mutable;
}

uint64_t CMSMVAUtility_AggregateEndpoints(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFArrayGetValueAtIndex(a1, i);
        uint64_t value = 0;
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        AudioObjectID v13 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v12 + 48);
        if (v13) {
          v13(CMBaseObject, 0x1EE5F4148, v7, &value);
        }
        CFArrayAppendValue(Mutable, value);
        if (value) {
          CFRelease(value);
        }
      }
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  }
  int IsBluetoothSharingSessionEnabled = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
  uint64_t v15 = vaemAggregatePorts((uint64_t)Mutable, a2, IsBluetoothSharingSessionEnabled, a3);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v15;
}

uint64_t CMSMVAUtility_AggregatePorts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int IsBluetoothSharingSessionEnabled = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
  return vaemAggregatePorts(a1, a2, IsBluetoothSharingSessionEnabled, a3);
}

void CMSMVAUtility_RouteToPreferredDeviceAddressIfInEar(const __CFString *a1)
{
  valuePtr[16] = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = CMSMVAUtility_CopyWirelessPortsSupportingMultipleConnections();
  if (!v2) {
    return;
  }
  CFArrayRef v3 = v2;
  CFIndex Count = CFArrayGetCount(v2);
  if (Count < 1) {
    goto LABEL_34;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
    int IsPortPresentInConnectedOutputPorts = vaemIsPortPresentInConnectedOutputPorts((uint64_t)ValueAtIndex);
    CFNumberRef v9 = (const __CFNumber *)CFArrayGetValueAtIndex(v3, v6);
    valuePtr[0] = 0;
    CFNumberGetValue(v9, kCFNumberSInt64Type, valuePtr);
    AudioObjectID v10 = valuePtr[0];
    BOOL ShouldBTPortBeTreatedAsInEar = CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(valuePtr[0]);
    if (!IsPortPresentInConnectedOutputPorts || !ShouldBTPortBeTreatedAsInEar)
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_11;
    }
    CFStringRef v12 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(v10);
    if (MXCFStringHasCaseInsensitivePrefix(v12, a1)) {
      break;
    }
    if (v12) {
      CFRelease(v12);
    }
LABEL_11:
    if (v5 == ++v6) {
      goto LABEL_34;
    }
  }
  ArrayFromPortID = CMSMVAUtility_CreateArrayFromPortID(v10);
  Routable = cmsmCopyPartnerPortsToMakeRoutable(ArrayFromPortID);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Routable && CFArrayGetCount(Routable) >= 1)
  {
    v21.length = CFArrayGetCount(Routable);
    v21.location = 0;
    CFArrayAppendArray(Mutable, Routable, v21);
  }
  if (ArrayFromPortID && CFArrayGetCount(ArrayFromPortID) >= 1)
  {
    v22.length = CFArrayGetCount(ArrayFromPortID);
    v22.location = 0;
    CFArrayAppendArray(Mutable, ArrayFromPortID, v22);
  }
  uint64_t A2DPPort = cmsmGetA2DPPort(Mutable);
  if (vaeGetBTPortOwnsSharedAudioConnection(A2DPPort))
  {
    CFArrayRef v18 = (const void *)vaeCopyNameForPort(A2DPPort);
    if (dword_1E9359ED0)
    {
      CFIndex v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemMakeArrayOfPortsRoutable(Mutable, 1, 0, qword_1E9359C88, 0);
    if (v18) {
      CFRelease(v18);
    }
  }
  else if (!vaeRequestOwnershipOnBTPort(A2DPPort))
  {
    vaemMakeArrayOfPortsRoutable(Mutable, 1, 0, qword_1E9359C88, 0);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (Routable) {
    CFRelease(Routable);
  }
  if (ArrayFromPortID) {
    CFRelease(ArrayFromPortID);
  }
  if (v12) {
    CFRelease(v12);
  }
LABEL_34:
  CFRelease(v3);
}

CFArrayRef CMSMVAUtility_CopyWirelessPortsToEnableBluetoothSharing(const __CFArray *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      for (CFIndex i = 0; i != v3; ++i)
      {
        AudioObjectID valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (vaeIsPortBluetoothShareable(valuePtr))
        {
          if (dword_1E9359ED0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFArrayRef v7 = (const __CFArray *)vaeCopyBluetoothShareablePortsForPort(valuePtr);
          if (v7)
          {
            CFArrayRef v8 = v7;
            if (CFArrayGetCount(v7) > 0) {
              return v8;
            }
            CFRelease(v8);
          }
        }
      }
    }
  }
  return 0;
}

CFArrayRef CMSMVAUtility_GetPortOfTypeInConnectedPortsList(int a1)
{
  CFArrayRef v2 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(0, 0, 0, 0);
  CFArrayRef PortOfTypeInArray = CMSMVAUtility_GetPortOfTypeInArray(a1, v2);
  if (v2) {
    CFRelease(v2);
  }
  return PortOfTypeInArray;
}

CFArrayRef CMSMVAUtility_GetPortOfTypeInArray(int a1, CFArrayRef theArray)
{
  CFArrayRef v2 = theArray;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0;
      while (1)
      {
        AudioObjectID valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v2, v6);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (vaeGetPortTypeFromPortID(valuePtr) == a1) {
          break;
        }
        if (v5 == ++v6) {
          return 0;
        }
      }
      CFArrayRef v2 = (const __CFArray *)valuePtr;
      if (valuePtr)
      {
        CFNumberRef v9 = (const void *)vaeCopyNameForPort(valuePtr);
        if (v9) {
          CFRelease(v9);
        }
      }
    }
  }
  return v2;
}

BOOL CMSMVAUtility_DoesCurrentOutputPortSupportSoftwareVolume()
{
  CFAllocatorRef v0 = CMSMUtility_CopyCurrentOutputPorts();
  if (!v0) {
    return 0;
  }
  CFArrayRef v1 = v0;
  if (CFArrayGetCount(v0) < 1)
  {
    BOOL DoesPortSupportSoftwareVolume = 0;
  }
  else
  {
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v1, 0);
    uint64_t valuePtr = 0;
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
    BOOL DoesPortSupportSoftwareVolume = vaeDoesPortSupportSoftwareVolume(valuePtr);
  }
  CFRelease(v1);
  return DoesPortSupportSoftwareVolume;
}

uint64_t CMSMVAUtility_SetCurrentPreferredVolume(float a1)
{
  return PVMSetCurrentPreferredVolume(0, 0, a1);
}

void CMSMVAUtility_SetVolumePreferenceForPort()
{
  int v0 = 0;
  CMSMUtility_CopyCurrentRoutesInfo();
}

void CMSMVAUtility_SetIndividualVolumeOnCurrentBluetoothShareableRoutes()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  int v0 = 0;
  CMSMUtility_CopyCurrentRoutesInfo();
}

CFDictionaryRef CMSMVAUtility_GetUIDFromRouteDescription(const __CFDictionary *result)
{
  if (result) {
    return (const __CFDictionary *)CFDictionaryGetValue(result, @"RouteUID");
  }
  return result;
}

BOOL CMSMVAUtility_IsNewVirtualFormatRedundantForDeviceAndScope(AudioObjectID a1, uint64_t a2, int a3)
{
  AudioObjectID outData = 0;
  memset(v7, 0, sizeof(v7));
  int Stream0 = vaemGetStream0(a1, a3, &outData);
  double v5 = 0.0;
  if (!Stream0 && outData)
  {
    vaemGetStreamASBD(outData, (uint64_t)v7);
    double v5 = *(double *)v7;
  }
  return v5 == *(double *)a2
      && *(void *)&v7[8] == *(void *)(a2 + 8)
      && *(_DWORD *)&v7[16] == *(_DWORD *)(a2 + 16)
      && *(void *)&v7[20] == *(void *)(a2 + 20)
      && *(void *)&v7[28] == *(void *)(a2 + 28)
      && *(_DWORD *)&v7[36] == *(_DWORD *)(a2 + 36);
}

uint64_t CMSMVAUtility_IsAnyRouteAvailableForRouteConfiguration(uint64_t a1, NSDictionary *a2, uint64_t a3, const void *a4)
{
  int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a2);
  int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a3);
  CFArrayRef v9 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a4, 0);
  CFArrayRef v10 = v9;
  if (v9)
  {
    CFIndex Count = CFArrayGetCount(v9);
    if (!a1) {
      goto LABEL_15;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (!a1) {
      goto LABEL_15;
    }
  }
  CFIndex v12 = CFArrayGetCount((CFArrayRef)a1);
  if (v12 >= 1)
  {
    CFIndex v13 = v12;
    CFIndex v14 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex((CFArrayRef)a1, v14);
      if (Count >= 1) {
        break;
      }
LABEL_13:
      if (++v14 == v13) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = 0;
    while (1)
    {
      FigCFArrayGetInt64AtIndex();
      unsigned int PortTypeFromPortID = vaeGetPortTypeFromPortID(0);
      id v17 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
      int v18 = FigCFEqual();
      if (v17) {
        CFRelease(v17);
      }
      if (v18) {
        break;
      }
      if (Count == ++v15) {
        goto LABEL_13;
      }
    }
    a1 = 1;
    if (v10) {
      goto LABEL_16;
    }
    return a1;
  }
LABEL_14:
  a1 = 0;
LABEL_15:
  if (v10) {
LABEL_16:
  }
    CFRelease(v10);
  return a1;
}

BOOL CMSMVAUtility_IsA2DPPortAvailableForEndpoint(BOOL result, _DWORD *a2)
{
  if (result)
  {
    CFArrayRef v3 = (const __CFArray *)vaemCopyConnectedPortsForPortTypeAndScope(0, 0x6F757470u);
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CFArrayRef v7 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
    if (v7) {
      v7(CMBaseObject, *MEMORY[0x1E4F20E38], *MEMORY[0x1E4F1CF80], &cf);
    }
    if (v3 && (CFIndex Count = CFArrayGetCount(v3), Count >= 1))
    {
      CFIndex v9 = Count;
      CFIndex v10 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v3, v10);
        uint64_t valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        uint64_t v12 = valuePtr;
        CFStringRef v13 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(valuePtr);
        if (vaeGetPortTypeFromPortID(v12) == 1885892674
          && MXCFStringHasCaseInsensitivePrefix(v13, (CFStringRef)cf))
        {
          CFIndex v14 = CFArrayGetValueAtIndex(v3, v10);
          if (vaemIsPortPresentInConnectedOutputPorts((uint64_t)v14)) {
            break;
          }
        }
        if (v13) {
          CFRelease(v13);
        }
        if (v9 == ++v10) {
          goto LABEL_16;
        }
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    else
    {
LABEL_16:
      LODWORD(v12) = 0;
    }
    if (a2) {
      *a2 = v12;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v3) {
      CFRelease(v3);
    }
    return v12 != 0;
  }
  return result;
}

uint64_t CMSMVAUtility_IsPortAvailableForEndpoint(uint64_t a1, const void *a2)
{
  uint64_t v2 = a1;
  if (!a1) {
    return v2;
  }
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFArrayRef v7 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
  if (v7) {
    v7(CMBaseObject, *MEMORY[0x1E4F20E38], *MEMORY[0x1E4F1CF80], &cf);
  }
  if (a2) {
    CFArrayRef v8 = (const __CFArray *)CFRetain(a2);
  }
  else {
    CFArrayRef v8 = (const __CFArray *)vaemCopyConnectedPortsForPortTypeAndScope(0, 0x6F757470u);
  }
  CFArrayRef v9 = v8;
  if (v8) {
    CFIndex Count = CFArrayGetCount(v8);
  }
  else {
    CFIndex Count = 0;
  }
  if (FigRoutingManagerIsEndpointOfType(v2))
  {
    if (Count >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        FigCFArrayGetInt64AtIndex();
        if (vaeGetPortTypeFromPortID(0) == 1885433975) {
          goto LABEL_32;
        }
      }
      while (Count != ++v11);
    }
LABEL_25:
    uint64_t v2 = 0;
    if (!v9) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (Count < 1) {
    goto LABEL_25;
  }
  uint64_t v12 = 0;
  while (1)
  {
    FigCFArrayGetInt64AtIndex();
    CFStringRef v13 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(0);
    if (MXCFStringHasCaseInsensitivePrefix(v13, (CFStringRef)cf)) {
      break;
    }
    if (v13) {
      CFRelease(v13);
    }
    if (Count == ++v12) {
      goto LABEL_25;
    }
  }
  if (v13) {
    CFRelease(v13);
  }
LABEL_32:
  uint64_t v2 = 1;
  if (v9) {
LABEL_26:
  }
    CFRelease(v9);
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  return v2;
}

__CFArray *CMSMVAUtility_CreateArrayFromPortIDAndPartners(int a1)
{
  ArrayFromPortID = CMSMVAUtility_CreateArrayFromPortID(a1);
  Routable = cmsmCopyPartnerPortsToMakeRoutable(ArrayFromPortID);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Routable && CFArrayGetCount(Routable) >= 1)
  {
    v5.length = CFArrayGetCount(Routable);
    v5.location = 0;
    CFArrayAppendArray(Mutable, Routable, v5);
  }
  if (ArrayFromPortID)
  {
    if (CFArrayGetCount(ArrayFromPortID) >= 1)
    {
      v6.length = CFArrayGetCount(ArrayFromPortID);
      v6.location = 0;
      CFArrayAppendArray(Mutable, ArrayFromPortID, v6);
    }
    CFRelease(ArrayFromPortID);
  }
  if (Routable) {
    CFRelease(Routable);
  }
  return Mutable;
}

CFStringRef CMSMVAUtility_CopyDeviceIDFromBTAddress(const __CFString *a1)
{
  CFArrayRef v2 = cmsmCopyWirelessPortsArrayForRouteConfiguration(0, 0, 0);
  if (!v2) {
    return 0;
  }
  CFArrayRef v3 = v2;
  CFIndex Count = CFArrayGetCount(v2);
  if (Count < 1)
  {
LABEL_8:
    CFStringRef v8 = 0;
  }
  else
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    while (1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v3, v6);
      uint64_t valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      CFStringRef v8 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(valuePtr);
      if (MXCFStringHasCaseInsensitivePrefix(v8, a1)) {
        break;
      }
      if (v8) {
        CFRelease(v8);
      }
      if (v5 == ++v6) {
        goto LABEL_8;
      }
    }
  }
  CFRelease(v3);
  return v8;
}

uint64_t CMSMVAUtility_CreateMusicVADIfNeeded(const __CFArray *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (vaemMusicVADExists())
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  unsigned int valuePtr = 0;
  CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0);
  CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
  if (vaeGetPortTypeFromPortID(valuePtr) == 1885433964)
  {
    CFIndex v6 = CMSMVAUtility_CopyConnectedWirelessPorts();
    if (dword_1E9359ED0)
    {
      *(_DWORD *)os_log_type_t type = 0;
      v21[0] = OS_LOG_TYPE_DEFAULT;
      CFArrayRef v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (!v6) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }
  }
  else
  {
    if (a1) {
      CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1);
    }
    else {
      CFArrayRef Copy = CMSMVAUtility_CopyConnectedWirelessPorts();
    }
    CFIndex v6 = Copy;
  }
  if (!v6)
  {
LABEL_14:
    CFIndex Count = 0;
    goto LABEL_15;
  }
LABEL_12:
  CFIndex Count = CFArrayGetCount(v6);
LABEL_15:
  if (dword_1E9359ED0)
  {
    *(_DWORD *)os_log_type_t type = 0;
    v21[0] = OS_LOG_TYPE_DEFAULT;
    CFIndex v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Count >= 1)
  {
    CFIndex v11 = 0;
    while (1)
    {
      *(_DWORD *)os_log_type_t type = 0;
      CFNumberRef v12 = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v11);
      CFNumberGetValue(v12, kCFNumberSInt32Type, type);
      if (vaeGetPortTypeFromPortID(*(unsigned int *)type) == 1885433975) {
        break;
      }
      if (Count == ++v11) {
        goto LABEL_34;
      }
    }
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v15 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
    CFNumberRef v16 = CFNumberCreate(v13, kCFNumberSInt32Type, type);
    CFArrayAppendValue(v15, v16);
    if (v15)
    {
      CFDictionarySetValue(Mutable, @"port id array", v15);
      CFRelease(v15);
    }
    if (v16) {
      CFRelease(v16);
    }
    *(_DWORD *)CFRange v21 = 1986884979;
    CFNumberRef v17 = CFNumberCreate(v13, kCFNumberSInt32Type, v21);
    if (v17)
    {
      CFNumberRef v18 = v17;
      CFDictionarySetValue(Mutable, @"VAD type 4cc", v17);
      CFRelease(v18);
    }
    if (dword_1E9359ED0)
    {
      CFIndex v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemCreateVADWithRouteConfigurationDictionary(Mutable, a2, 1, 1);
    if (FigRoutingManagerUtilities_IsCurrentRouteHandoff()) {
      CMSMAP_MakeAirPlayHandOffPortRoutable(0, a2);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
LABEL_34:
  if (v6) {
    CFRelease(v6);
  }
  return 0;
}

uint64_t CMSMVAUtility_DestroyMusicVADIfNeeded(uint64_t a1)
{
  if (vaemMusicVADExists())
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayRef v3 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4F28ED0]), "initWithUnsignedInt:", -[MXSessionManager musicVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "musicVADID"));
    if (v3)
    {
      CFIndex v4 = v3;
      CFDictionarySetValue(Mutable, @"VAD type 4cc", v3);
      CFRelease(v4);
    }
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemDeleteVADWithRouteConfigurationDictionary(Mutable, a1, 0, 1);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  return 0;
}

uint64_t CMSMVAUtility_CreatePerAppAirPlayVADWithHandOffPort(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (vaemPerAppAirPlayVADExists())
  {
    CFIndex v4 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4F28ED0]), "initWithUnsignedInt:", -[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID"));
    if (v4)
    {
      CFIndex v5 = v4;
      CFDictionarySetValue(Mutable, @"VAD type 4cc", v4);
      CFRelease(v5);
    }
    vaemDeleteVADWithRouteConfigurationDictionary(Mutable, a1, 0, 0);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFIndex v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFArrayRef v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  CFNumberRef v8 = CFNumberCreate(v2, kCFNumberSInt32Type, &dword_1E9359BB0);
  CFArrayAppendValue(v7, v8);
  if (v7)
  {
    CFDictionarySetValue(v6, @"port id array", v7);
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  int valuePtr = 1986095474;
  CFNumberRef v9 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
  if (v9)
  {
    CFNumberRef v10 = v9;
    CFDictionarySetValue(v6, @"VAD type 4cc", v9);
    CFRelease(v10);
  }
  byte_1E9359B9F = 1;
  uint64_t VADWithRouteConfigurationDictionary = vaemCreateVADWithRouteConfigurationDictionary(v6, a1, 0, 1);
  if (v6) {
    CFRelease(v6);
  }
  return VADWithRouteConfigurationDictionary;
}

uint64_t CMSMVAUtility_CreatePerAppAirPlayVADIfNeeded(CFArrayRef theArray, uint64_t a2, uint64_t a3)
{
  if (theArray) {
    CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theArray);
  }
  else {
    CFArrayRef Copy = CMSMVAUtility_CopyConnectedWirelessPorts();
  }
  CFArrayRef v5 = Copy;
  if (!Copy) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(Copy);
  if (!Count)
  {
    CFRelease(v5);
    return 0;
  }
  CFIndex v7 = Count;
  if (Count < 1)
  {
LABEL_13:
    uint64_t VADWithRouteConfigurationDictionary = 0;
  }
  else
  {
    CFIndex v8 = 0;
    while (1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v5, v8);
      AudioObjectID valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      int PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
      CFTypeRef v11 = vaeCopyDeviceIdentifierFromVADPort(valuePtr);
      if (PortTypeFromPortID == 1885433953)
      {
        if (FigEndpointUtility_EndpointPredicate_ContainsID()) {
          break;
        }
      }
      if (v11) {
        CFRelease(v11);
      }
      if (v7 == ++v8) {
        goto LABEL_13;
      }
    }
    BOOL v13 = vaemPerAppAirPlayVADExists();
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v13)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFNumberRef v16 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4F28ED0]), "initWithUnsignedInt:", -[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID"));
      if (v16)
      {
        CFNumberRef v17 = v16;
        CFDictionarySetValue(Mutable, @"VAD type 4cc", v16);
        CFRelease(v17);
      }
      vaemDeleteVADWithRouteConfigurationDictionary(Mutable, a3, 0, 0);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    CFNumberRef v18 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFIndex v19 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
    CFNumberRef v20 = CFNumberCreate(v14, kCFNumberSInt32Type, &valuePtr);
    CFArrayAppendValue(v19, v20);
    if (v19)
    {
      CFDictionarySetValue(v18, @"port id array", v19);
      CFRelease(v19);
    }
    if (v20) {
      CFRelease(v20);
    }
    int v24 = 1986095474;
    CFNumberRef v21 = CFNumberCreate(v14, kCFNumberSInt32Type, &v24);
    if (v21)
    {
      CFNumberRef v22 = v21;
      CFDictionarySetValue(v18, @"VAD type 4cc", v21);
      CFRelease(v22);
    }
    byte_1E9359B9F = 0;
    uint64_t VADWithRouteConfigurationDictionary = vaemCreateVADWithRouteConfigurationDictionary(v18, a3, 1, 1);
    if (v18) {
      CFRelease(v18);
    }
    if (v11) {
      CFRelease(v11);
    }
    CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID();
  }
  if (FigRoutingManagerUtilities_IsCurrentRouteHandoff()) {
    CMSMAP_MakeAirPlayHandOffPortRoutable(0, a3);
  }
  CFRelease(v5);
  return VADWithRouteConfigurationDictionary;
}

uint64_t CMSMVAUtility_DestroyPerAppAirPlayVAD(uint64_t a1)
{
  if (vaemPerAppAirPlayVADExists())
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayRef v3 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4F28ED0]), "initWithUnsignedInt:", -[MXSessionManager perAppAirPlayVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "perAppAirPlayVADID"));
    if (v3)
    {
      CFIndex v4 = v3;
      CFDictionarySetValue(Mutable, @"VAD type 4cc", v3);
      CFRelease(v4);
    }
    vaemDeleteVADWithRouteConfigurationDictionary(Mutable, a1, 0, 1);
    CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  return 0;
}

uint64_t CMSMVAUtility_SetBlurConfigurationOnVA(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef cf = Mutable;
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetFloat32();
  FigCFDictionarySetFloat32();
  uint64_t v5 = *(void *)"dsavptuo";
  int v6 = 0;
  if (!unk_1E9359B48)
  {
    uint64_t v3 = 0;
    if (!Mutable) {
      return v3;
    }
    goto LABEL_3;
  }
  uint64_t v3 = unk_1E9359B48(a1, &v5, 0, 0, 8, &cf);
  CFMutableDictionaryRef Mutable = cf;
  if (cf) {
LABEL_3:
  }
    CFRelease(Mutable);
  return v3;
}

void CMSMVAUtility_DisableBluetoothSharingSession()
{
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CMSMUtility_GetCurrentOutputPortAtIndex(0);
    SInt64 = (const void *)FigCFNumberCreateSInt64();
    CFArrayAppendValue(Mutable, SInt64);
    if (SInt64) {
      CFRelease(SInt64);
    }
    CMSMUtility_GetCurrentOutputPortAtIndex(1);
    CFAllocatorRef v2 = (const void *)FigCFNumberCreateSInt64();
    CFArrayAppendValue(Mutable, v2);
    if (v2) {
      CFRelease(v2);
    }
    CFTypeRef v3 = CMSMUtility_CopySystemAudioRoutingContextUUID();
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemDeaggregatePorts((uint64_t)Mutable, (uint64_t)Mutable, 1, (uint64_t)v3);
    if (v3) {
      CFRelease(v3);
    }
  }
}

uint64_t CMSMVAUtility_IsInputDeviceAvailableForSession(void *a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  uint64_t v2 = qword_1E9359B78;
  uint64_t v3 = [a1 audioCategory];
  uint64_t v4 = [a1 audioMode];
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFIndex v7 = *(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, CFTypeRef *))(v6 + 16);
  if (v7) {
    v7(v2, 0x1EE5F3628, *MEMORY[0x1E4F1CF80], v3, v4, 0, cf);
  }
  uint64_t v8 = FigCFEqual();
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v8;
}

uint64_t CMSMVAUtility_SetSharePlayMediaSessionInfoOnVA(int a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = vaemShouldSetSharePlayMediaInfoInRouteConfiguration(a1, a2, 1);
  if (result)
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    memset(v7, 0, sizeof(v7));
    int v8 = 256;
    int v9 = a1;
    uint64_t v10 = a2;
    long long v11 = 0u;
    long long v12 = 0u;
    return cmsmSetVADRouteConfiguration((uint64_t)v7, 0, 0);
  }
  else if (dword_1E9359ED0)
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t CMSMVAUtility_OverrideToPartnerPort()
{
  long long v10 = 0u;
  CFDictionaryRef theDict = 0;
  DWORD2(v1singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
  p_CFDictionaryRef theDict = &theDict;
  uint64_t v12 = 8;
  uint64_t v7 = *(void *)"pvovbolgisesbolg";
  int v8 = 0;
  if (!unk_1E9359B48) {
    return 4294954310;
  }
  int v0 = unk_1E9359B48(dword_1E9359BA0, &v7, 0, 0, 32, &v10);
  CFDictionaryRef v1 = theDict;
  if (v0) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = theDict == 0;
  }
  if (v2)
  {
    uint64_t v3 = 4294954310;
    if (!theDict) {
      return v3;
    }
    goto LABEL_14;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"route change reason");
  if (Value)
  {
    int valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    if (CMSMVAUtility_MapVADReasonToCMSReason(valuePtr) != 9)
    {
      vaemAQMERouteChanged(theDict, 0, 0);
      vaemVADRouteChangeListener();
    }
  }
  uint64_t v3 = 0;
  CFDictionaryRef v1 = theDict;
  if (theDict) {
LABEL_14:
  }
    CFRelease(v1);
  return v3;
}

void CMSMVAUtility_RouteDefaultVADToCarPlayIfNecessary(CFArrayRef theArray)
{
  unsigned int PortOfTypeInArray = CMSMVAUtility_GetPortOfTypeInArray(1886614639, theArray);
  if (PortOfTypeInArray)
  {
    AudioObjectID v2 = PortOfTypeInArray;
    uint64_t v3 = CMSMUtility_CopyMostImportantPlayingSession();
    if (cmsmRequestCarMainAudioForSession(v3)) {
      CMSMVAUtility_MakeConnectedPortRoutable(v2);
    }
  }
}

uint64_t CMSMVAUtility_CancelAnyInProgressVolumeRamp(uint64_t a1, __int16 a2)
{
  uint64_t result = MX_FeatureFlags_IsAdaptiveVolumeControlEnabled();
  if (result)
  {
    uint64_t result = vaemIsVolumeRampInProgress(a1);
    if (result)
    {
      return vaemDeviceCancelVolumeRamp(a1, a2);
    }
  }
  return result;
}

uint64_t CMSMVAUtility_DoesSessionConfigurationSupportEchoCancelledInput(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F28ED0]) initWithInt:a1];
  uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F28ED0]) initWithInt:a2];
  [v4 setObject:v5 forKey:0x1EE5EF368];
  [v4 setObject:v6 forKey:0x1EE5EF348];
  *(void *)&inAddress.mSelector = *(void *)"sicebolg";
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  int outData = 0;
  if (AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8u, v4, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }

  return outData;
}

uint64_t CMSMVAUtility_DoesVADHaveEchoCancelledInput(AudioObjectID a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.mSelector = *(void *)"cesrbolg";
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  int outData = 0;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData) || dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return outData;
}

uint64_t FigRoutingSessionManagerRemoteCopyLongFormVideoManager(const __CFAllocator *a1, void *a2)
{
  if (routingSessionManagerRemote_ensureClientEstablished_onceToken != -1) {
    dispatch_once(&routingSessionManagerRemote_ensureClientEstablished_onceToken, &__block_literal_global_66);
  }
  uint64_t v4 = routingSessionManagerRemote_ensureClientEstablished_err;
  if (routingSessionManagerRemote_ensureClientEstablished_err) {
    goto LABEL_16;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5) {
    goto LABEL_19;
  }
  uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v5) {
    goto LABEL_19;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
    uint64_t v4 = 4294951905;
    goto LABEL_16;
  }
  uint64_t v7 = uint64;
  uint64_t v5 = FigXPCRemoteClientRetainCopiedObject();
  if (v5) {
    goto LABEL_19;
  }
  FigRoutingSessionManagerGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (!v8)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    void *DerivedStorage = v7;
    uint64_t v10 = FigSimpleMutexCreate();
    DerivedStorage[2] = v10;
    if (v10
      && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
          (DerivedStorage[3] = Mutable) != 0))
    {
      DerivedStorage[4] = 1;
      uint64_t v8 = FigXPCRemoteClientAssociateObject();
      if (!v8)
      {
        uint64_t v4 = 0;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v8 = FigSignalErrorAt();
    }
  }
  uint64_t v4 = v8;
LABEL_13:
  if (!v4)
  {
    if (a2)
    {
      uint64_t v4 = 0;
      *a2 = 0;
      goto LABEL_16;
    }
    uint64_t v5 = FigSignalErrorAt();
LABEL_19:
    uint64_t v4 = v5;
  }
LABEL_16:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

void __routingSessionManagerRemote_ensureClientEstablished_block_invoke()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"RoutingSessionManager_ServerConnectionDied");
  routingSessionManagerRemote_ensureClientEstablished_err = FigXPCRemoteClientCreate();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void routingSessionManagerRemote_DeadConnectionCallback(const void *a1)
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  if (a1) {
    CFRetain(a1);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  _OWORD v3[2] = __routingSessionManagerRemote_DeadConnectionCallback_block_invoke;
  v3[3] = &__block_descriptor_tmp_4;
  void v3[4] = a1;
  MXDispatchAsync((uint64_t)"routingSessionManagerRemote_DeadConnectionCallback", (uint64_t)"FigRoutingSessionManagerRemoteXPC.c", 587, 0, 0, global_queue, (uint64_t)v3);
}

uint64_t routingSessionManagerRemote_NotificationFilter()
{
  return 0;
}

uint64_t routingSessionManagerRemote_HandleClientMessage()
{
  uint64_t result = FigXPCMessageGetOpCode();
  if (!result) {
    return 4294951138;
  }
  return result;
}

void routingSessionManagerRemote_runOneCallback(const __CFDictionary *a1, uint64_t a2)
{
  CFNumberRef Value = (void (*)(const void *, uint64_t))CFDictionaryGetValue(a1, @"Callback");
  uint64_t v5 = CFDictionaryGetValue(a1, @"CallbackContext");
  uint64_t v6 = CFDictionaryGetValue(a1, @"Manager");
  if (Value) {
    Value(v5, a2);
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

void routingSessionManagerRemote_dequeueAndInvokeCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 16));
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), UInt64);
  if (Value) {
    CFDictionaryRef v7 = (const __CFDictionary *)CFRetain(Value);
  }
  else {
    CFDictionaryRef v7 = 0;
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64);
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 16));
  if (v7)
  {
    routingSessionManagerRemote_runOneCallback(v7, a3);
    CFRelease(v7);
  }
  if (UInt64)
  {
    CFRelease(UInt64);
  }
}

uint64_t routingSessionManagerRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendSyncMessage();
  }
  FigSimpleMutexDestroy();
  CFDictionaryRef v1 = *(const void **)(DerivedStorage + 24);
  if (v1) {
    CFRelease(v1);
  }
  return FigXPCRelease();
}

uint64_t CMBaseObjectNotificationBarrier(uint64_t a1)
{
  AudioObjectID v2 = *(void **)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*v3 < 2uLL) {
    return 4294954514;
  }
  uint64_t v4 = (uint64_t (*)(uint64_t))v3[8];
  if (!v4) {
    return 4294954514;
  }
  return v4(a1);
}

uint64_t routingSessionManagerRemote_CopyCurrentSession(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t v6 = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_9:
    uint64_t v4 = ObjectID;
    goto LABEL_7;
  }
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID(a1, &v6);
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t v4 = FigXPCMessageCopyCFDictionary();
  if (!v4) {
    *a2 = FigRoutingSessionCopyFromDictionary(0);
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingSessionManagerRemote_StartSessionForHighConfidenceDestination(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  uint64_t v8 = Mutable;
  if (a2) {
    CFDictionarySetValue(Mutable, @"Callback", a2);
  }
  if (a3) {
    CFDictionarySetValue(v8, @"CallbackContext", a3);
  }
  if (a1) {
    CFTypeRef v9 = CFRetain(a1);
  }
  else {
    CFTypeRef v9 = 0;
  }
  CFDictionarySetValue(v8, @"Manager", v9);
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 16));
  uint64_t v10 = *(void *)(DerivedStorage + 32);
  *(void *)(DerivedStorage + 32) = v10 + 1;
  uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64, v8);
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 16));
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID((uint64_t)a1, &v17);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v13 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID, v10);
    uint64_t v13 = FigXPCRemoteClientSendSyncMessage();
    if (!v13) {
      goto LABEL_18;
    }
  }
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 16));
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), UInt64);
  if (Value) {
    CFTypeRef v15 = CFRetain(Value);
  }
  else {
    CFTypeRef v15 = 0;
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64);
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 16));
  if (v15)
  {
    if (a1) {
      CFRelease(a1);
    }
    CFRelease(v15);
LABEL_18:
    if (!UInt64) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v13 = 0;
  if (UInt64) {
LABEL_19:
  }
    CFRelease(UInt64);
LABEL_20:
  if (v8) {
    CFRelease(v8);
  }
  FigXPCRelease();
  return v13;
}

uint64_t routingSessionManagerRemote_CopyLikelyDestinations(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID(a1, &v4);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!ObjectID) {
        uint64_t ObjectID = FigXPCMessageCopyCFArray();
      }
    }
  }
  uint64_t v2 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t routingSessionManagerRemote_PrepareForPlayback(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  uint64_t v8 = Mutable;
  if (a2) {
    CFDictionarySetValue(Mutable, @"Callback", a2);
  }
  if (a3) {
    CFDictionarySetValue(v8, @"CallbackContext", a3);
  }
  if (a1) {
    CFTypeRef v9 = CFRetain(a1);
  }
  else {
    CFTypeRef v9 = 0;
  }
  CFDictionarySetValue(v8, @"Manager", v9);
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 16));
  uint64_t v10 = *(void *)(DerivedStorage + 32);
  *(void *)(DerivedStorage + 32) = v10 + 1;
  uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64, v8);
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 16));
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID((uint64_t)a1, &v15);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v13 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID, v10);
    uint64_t v13 = FigXPCRemoteClientSendSyncMessage();
    if (!v13) {
      goto LABEL_12;
    }
  }
  routingSessionManagerRemote_dequeueAndInvokeCallback((uint64_t)a1, v10, v13);
LABEL_12:
  if (UInt64) {
    CFRelease(UInt64);
  }
  if (v8) {
    CFRelease(v8);
  }
  return FigXPCRelease();
}

uint64_t routingSessionManagerRemote_GetAirPlayVideoActive(uint64_t a1, BOOL *a2)
{
  uint64_t v6 = 0;
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID(a1, &v6);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v4) {
      *a2 = xpc_dictionary_get_BOOL(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_AirPlayVideoActive);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingSessionManagerRemote_GetAirPlayVideoPlaying(uint64_t a1, BOOL *a2)
{
  uint64_t v6 = 0;
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID(a1, &v6);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v4) {
      *a2 = xpc_dictionary_get_BOOL(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_AirPlayVideoPlaying);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingSessionManagerRemote_UpdateCurrentSessionFromLikelyDestinations(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  uint64_t v8 = Mutable;
  if (a2) {
    CFDictionarySetValue(Mutable, @"Callback", a2);
  }
  if (a3) {
    CFDictionarySetValue(v8, @"CallbackContext", a3);
  }
  if (a1) {
    CFTypeRef v9 = CFRetain(a1);
  }
  else {
    CFTypeRef v9 = 0;
  }
  CFDictionarySetValue(v8, @"Manager", v9);
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 16));
  uint64_t v10 = *(void *)(DerivedStorage + 32);
  *(void *)(DerivedStorage + 32) = v10 + 1;
  uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64, v8);
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 16));
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID((uint64_t)a1, &v17);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v13 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID, v10);
    uint64_t v13 = FigXPCRemoteClientSendSyncMessage();
    if (!v13) {
      goto LABEL_18;
    }
  }
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 16));
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), UInt64);
  if (Value) {
    CFTypeRef v15 = CFRetain(Value);
  }
  else {
    CFTypeRef v15 = 0;
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), UInt64);
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 16));
  if (v15)
  {
    if (a1) {
      CFRelease(a1);
    }
    CFRelease(v15);
LABEL_18:
    if (!UInt64) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v13 = 0;
  if (UInt64) {
LABEL_19:
  }
    CFRelease(UInt64);
LABEL_20:
  if (v8) {
    CFRelease(v8);
  }
  FigXPCRelease();
  return v13;
}

uint64_t routingSessionManagerRemote_GetPrefersLikelyDestinationsOverCurrentSession(uint64_t a1, BOOL *a2)
{
  uint64_t v6 = 0;
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID(a1, &v6);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v4) {
      *a2 = xpc_dictionary_get_BOOL(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_PrefersLikelyDestinations);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t routingSessionManagerRemote_StartSessionWithRouteDescriptors(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID(a1, &v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2 || (uint64_t v2 = FigXPCMessageSetCFArray(), v2)) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t routingSessionManagerRemote_StartSuppressingLikelyDestinations(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID(a1, &v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t routingSessionManagerRemote_StopSuppressingLikelyDestinations(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t ObjectID = routingSessionManagerRemote_getObjectID(a1, &v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t routingSessionManagerRemote_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || !a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t FigRoutingContextStartServer()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  uint64_t v1 = FigXPCServerStart();
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v1;
}

uint64_t FigRoutingContextXPCHandleCopySelectedRouteMessage(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v4 + 24);
  if (!v5) {
    return 4294954514;
  }
  uint64_t v6 = v5(a2, &cf);
  CFTypeRef v7 = cf;
  if (v6)
  {
    uint64_t v8 = v6;
    if (!cf) {
      return v8;
    }
LABEL_8:
    CFRelease(v7);
    return v8;
  }
  if (!cf) {
    return 0;
  }
  uint64_t v8 = FigEndpointXPCServerWriteNeighborEndpointToReply();
  CFTypeRef v7 = cf;
  if (cf) {
    goto LABEL_8;
  }
  return v8;
}

uint64_t FigRoutingContextXPCHandleCopySelectedRouteDescriptorMessage(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v5 + 32);
  if (v6)
  {
    uint64_t v7 = v6(a1, &cf);
    if (v7)
    {
      uint64_t v11 = v7;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 3))
      {
        uint64_t v8 = frcXPCServer_copySanitizedRouteDescriptor((const __CFDictionary *)cf);
        CFTypeRef v9 = v8;
        CFTypeRef v10 = cf;
        CFTypeRef cf = v8;
        if (v8) {
          CFRetain(v8);
        }
        if (v10) {
          CFRelease(v10);
        }
        if (v9) {
          CFRelease(v9);
        }
      }
      FigXPCMessageSetCFDictionary();
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t FigRoutingContextXPCHandleCopySelectedRoutesMessage(uint64_t a1, uint64_t a2, void *a3)
{
  CFArrayRef theArray = 0;
  xpc_object_t v5 = xpc_array_create(0, 0);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, CFArrayRef *))(v7 + 56);
  if (!v8)
  {
    uint64_t v12 = 4294954514;
    goto LABEL_16;
  }
  uint64_t appended = v8(a2, &theArray);
  if (appended) {
    goto LABEL_15;
  }
  if (!theArray)
  {
    routes_logEndpoints(0);
    goto LABEL_14;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  routes_logEndpoints(theArray);
  if (Count < 1)
  {
LABEL_14:
    xpc_dictionary_set_value(a3, (const char *)kFigRoutingContextXPCMsgParam_EndpointIDList, v5);
    uint64_t v12 = 0;
    goto LABEL_16;
  }
  CFIndex v11 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(theArray, v11);
    uint64_t appended = FigEndpointXPCServerAppendNeighborEndpointToArray();
    if (appended) {
      break;
    }
    if (Count == ++v11) {
      goto LABEL_14;
    }
  }
LABEL_15:
  uint64_t v12 = appended;
LABEL_16:
  FigXPCRelease();
  if (theArray) {
    CFRelease(theArray);
  }
  return v12;
}

uint64_t FigRoutingContextXPCHandleCopySelectedRouteForRemoteControlMessage(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  xpc_object_t v5 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v4 + 72);
  if (!v5) {
    return 4294954514;
  }
  uint64_t v6 = v5(a2, &cf);
  CFTypeRef v7 = cf;
  if (v6)
  {
    uint64_t v8 = v6;
    if (!cf) {
      return v8;
    }
LABEL_8:
    CFRelease(v7);
    return v8;
  }
  if (!cf) {
    return 0;
  }
  uint64_t v8 = FigEndpointXPCServerWriteNeighborEndpointToReply();
  CFTypeRef v7 = cf;
  if (cf) {
    goto LABEL_8;
  }
  return v8;
}

uint64_t FigRoutingContextXPCHandleCreateCommChannelMessage(uint64_t a1)
{
  CFTypeRef v7 = 0;
  FigXPCMessageCopyCFDictionary();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, CFTypeRef *))(v3 + 112);
  if (v4)
  {
    uint64_t v5 = v4(a1, 0, &v7);
    if (!v5) {
      FigXPCMessageSetCFString();
    }
  }
  else
  {
    uint64_t v5 = 4294954514;
  }
  if (v7) {
    CFRelease(v7);
  }
  return v5;
}

uint64_t FigRoutingContextXPCHandleCreateCommChannelForDeviceIDMessage(uint64_t a1, uint64_t a2)
{
  CFTypeRef v15 = 0;
  FigXPCMessageCopyCFDictionary();
  FigXPCMessageCopyCFString();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v5 + 152);
  if (v6)
  {
    uint64_t v7 = v6(a1, 0, 0, &v15);
    if (v7)
    {
      uint64_t v13 = v7;
    }
    else if (a2)
    {
      CFTypeRef v8 = v15;
      CFDictionaryRef v9 = *(const __CFDictionary **)(a2 + 16);
      if (v9
        || (CFDictionaryRef v9 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(a2 + 16) = v9) != 0))
      {
        CFNumberRef Value = CFDictionaryGetValue(v9, 0);
        if (Value)
        {
          CFIndex v11 = (__CFSet *)CFRetain(Value);
          if (v11) {
            goto LABEL_13;
          }
        }
        CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
        if (Mutable)
        {
          CFIndex v11 = Mutable;
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 16), 0, Mutable);
LABEL_13:
          CFSetAddValue(v11, v8);
          CFRelease(v11);
          FigXPCMessageSetCFString();
          uint64_t v13 = 0;
          goto LABEL_15;
        }
      }
      uint64_t v13 = 4294955275;
    }
    else
    {
      uint64_t v13 = 4294955276;
    }
  }
  else
  {
    uint64_t v13 = 4294954514;
  }
LABEL_15:
  if (v15) {
    CFRelease(v15);
  }
  return v13;
}

uint64_t FigRoutingContextXPCHandleSendDataMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5
    || (uint64_t v5 = FigXPCMessageCopyCFData(), v5)
    || ((CompletionCallbackParametersFromMessageAndConnection = CreateCompletionCallbackParametersFromMessageAndConnection(a3)) != 0
      ? (uint64_t v7 = SendDataCompletionCallback)
      : (uint64_t v7 = 0),
        (uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v9 = 0) : (v9 = v8),
        (CFTypeRef v10 = *(uint64_t (**)(uint64_t, void, void, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), void *))(v9 + 120)) != 0
     && (uint64_t v5 = v10(a2, 0, 0, v7, CompletionCallbackParametersFromMessageAndConnection), v5 != -12782)))
  {
    uint64_t v11 = v5;
    CompletionCallbackParametersFromMessageAndConnection = 0;
  }
  else
  {
    uint64_t v11 = 4294954514;
  }
  DestroyCompletionCallbackParameters(CompletionCallbackParametersFromMessageAndConnection);
  return v11;
}

uint64_t FigRoutingContextXPCHandleSendDataForDeviceIDMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    goto LABEL_13;
  }
  uint64_t v5 = FigXPCMessageCopyCFData();
  if (v5) {
    goto LABEL_13;
  }
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    goto LABEL_13;
  }
  CompletionCallbackParametersFromMessageAndConnection = CreateCompletionCallbackParametersFromMessageAndConnection(a3);
  uint64_t v7 = CompletionCallbackParametersFromMessageAndConnection ? SendDataCompletionCallback : 0;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v9 = v8 ? v8 : 0;
  CFTypeRef v10 = *(uint64_t (**)(uint64_t, void, void, void, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), void *))(v9 + 160);
  if (v10
    && (uint64_t v5 = v10(a2, 0, 0, 0, v7, CompletionCallbackParametersFromMessageAndConnection), v5 != -12782))
  {
LABEL_13:
    uint64_t v11 = v5;
    CompletionCallbackParametersFromMessageAndConnection = 0;
  }
  else
  {
    uint64_t v11 = 4294954514;
  }
  DestroyCompletionCallbackParameters(CompletionCallbackParametersFromMessageAndConnection);
  return v11;
}

uint64_t FigRoutingContextXPCHandleCloseCommChannelMessage(uint64_t a1)
{
  uint64_t v2 = FigXPCMessageCopyCFString();
  if (!v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, void))(v4 + 128);
    if (!v5) {
      return 4294954514;
    }
    return v5(a1, 0);
  }
  return v2;
}

uint64_t FigRoutingContextXPCHandleCloseCommChannelForDeviceIDMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = FigXPCMessageCopyCFString();
  if (v4) {
    return v4;
  }
  uint64_t v4 = FigXPCMessageCopyCFString();
  if (v4) {
    return v4;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, void))(v6 + 168);
  if (!v7) {
    return 4294954514;
  }
  uint64_t v4 = v7(a1, 0, 0);
  if (v4) {
    return v4;
  }
  if (!a2) {
    return 4294955276;
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a2 + 16);
  if (!v8) {
    return 4294955276;
  }
  CFNumberRef Value = (__CFSet *)CFDictionaryGetValue(v8, 0);
  if (!Value) {
    return 4294955272;
  }
  CFSetRef v10 = Value;
  CFSetRemoveValue(Value, 0);
  if (!CFSetGetCount(v10)) {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 16), 0);
  }
  return 0;
}

uint64_t FigRoutingContextXPCHandleSendCommandMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5
    || (uint64_t v5 = FigXPCMessageCopyCFDictionary(), v5)
    || ((CompletionCallbackParametersFromMessageAndConnection = CreateCompletionCallbackParametersFromMessageAndConnection(a3)) != 0
      ? (uint64_t v7 = SendCommandCompletionCallback)
      : (uint64_t v7 = 0),
        (uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v9 = 0) : (v9 = v8),
        (CFSetRef v10 = *(uint64_t (**)(uint64_t, void, void, uint64_t (*)(uint64_t, uint64_t, int, uint64_t), void *))(v9 + 136)) != 0
     && (uint64_t v5 = v10(a2, 0, 0, v7, CompletionCallbackParametersFromMessageAndConnection), v5 != -12782)))
  {
    uint64_t v11 = v5;
    CompletionCallbackParametersFromMessageAndConnection = 0;
  }
  else
  {
    uint64_t v11 = 4294954514;
  }
  DestroyCompletionCallbackParameters(CompletionCallbackParametersFromMessageAndConnection);
  return v11;
}

uint64_t FigRoutingContextXPCHandleResetPredictedSelectedRouteDescriptorMessage(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 184);
  if (!v4) {
    return 4294954514;
  }
  return v4(a1);
}

uint64_t FigRoutingContextXPCHandleCopySelectedBufferedEndpointForTestingMessage(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  FigXPCMessageCopyCFString();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, CFTypeRef *))(v4 + 192);
  if (!v5) {
    return 4294954514;
  }
  uint64_t v6 = v5(a2, 0, &cf);
  CFTypeRef v7 = cf;
  if (v6)
  {
    uint64_t v8 = v6;
    if (!cf) {
      return v8;
    }
LABEL_8:
    CFRelease(v7);
    return v8;
  }
  if (!cf) {
    return 0;
  }
  uint64_t v8 = FigEndpointXPCServerWriteNeighborEndpointToReply();
  CFTypeRef v7 = cf;
  if (cf) {
    goto LABEL_8;
  }
  return v8;
}

uint64_t CloseCommChannelApplier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v8 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v7 = v8;
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  CFSetRef v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 168);
  if (v10)
  {
    return v10(v3, v4, a1);
  }
  return result;
}

uint64_t FigRoutingContextServerNotificationFilter(uint64_t a1, int a2, int a3, CFDictionaryRef theDict, __CFDictionary **a5)
{
  uint64_t result = 0;
  if (a1 && theDict)
  {
    if (*(unsigned char *)(a1 + 3)) {
      return 0;
    }
    unint64_t Value = (unint64_t)CFDictionaryGetValue(theDict, @"routeConfigUpdateReasonEndedFailed_DeviceID");
    if (!(Value | (unint64_t)CFDictionaryGetValue(theDict, @"routeConfigUpdateReasonEndedFailed_CurrentRoutes")))
    {
      return 0;
    }
    else
    {
      MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
      CFDictionaryRemoveValue(MutableCopy, @"routeConfigUpdateReasonEndedFailed_DeviceID");
      CFDictionaryRemoveValue(MutableCopy, @"routeConfigUpdateReasonEndedFailed_CurrentRoutes");
      *a5 = MutableCopy;
      return 4;
    }
  }
  return result;
}

void *CreateCompletionCallbackParametersFromMessageAndConnection(void *a1)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(a1, (const char *)kFigRoutingContextXPCMsgParam_CompletionID);
  if (!uint64) {
    return 0;
  }
  uint64_t v3 = uint64;
  uint64_t v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x108004098BBCF0FuLL);
  uint64_t v5 = v4;
  if (v4)
  {
    *uint64_t v4 = v3;
    v4[1] = xpc_dictionary_get_uint64(a1, (const char *)*MEMORY[0x1E4F20280]);
    _OWORD v5[2] = FigXPCRetain();
  }
  else
  {
    FigSignalErrorAt();
  }
  return v5;
}

uint64_t RoutingContextModificationCallback(uint64_t a1)
{
  if (a1 && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_CompletionID, *(void *)a1);
    FigXPCMessageSetCFString();
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  DestroyCompletionCallbackParameters((void *)a1);
  return FigXPCRelease();
}

void DestroyCompletionCallbackParameters(void *a1)
{
  if (a1)
  {
    FigXPCRelease();
    free(a1);
  }
}

__CFDictionary *frcXPCServer_copySanitizedRouteDescriptor(const __CFDictionary *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableSetRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, @"RouteSupportsAudio");
  CFArrayAppendValue(Mutable, @"RouteSupportsAirPlayVideo");
  CFArrayAppendValue(Mutable, @"RouteSupportsAirPlayScreen");
  CFArrayAppendValue(Mutable, @"AudioRouteName");
  CFArrayAppendValue(Mutable, @"AudioRouteSubType");
  CFArrayAppendValue(Mutable, @"RouteSupportsAirPlayMusic");
  CFArrayAppendValue(Mutable, @"RouteHasAirPlayCloudConnectivity");
  CFArrayAppendValue(Mutable, @"ExternalPlaybackCannotFetchMediaFromSender");
  CFArrayAppendValue(Mutable, @"ExternalPlaybackDoesNotSupportEncryptedCRABS");
  CFArrayAppendValue(Mutable, @"ExternalPlaybackDoesNotShowProperUIForAudioOnlyAssets");
  CFArrayAppendValue(Mutable, @"RouteName");
  if (Mutable) {
    CFIndex Count = CFArrayGetCount(Mutable);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t v5 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(v5, @"RouteUID");
  CFArrayAppendValue(v5, @"RouteName");
  CFArrayAppendValue(v5, @"GroupUUID");
  CFArrayAppendValue(v5, @"TightSyncUUID");
  if (a1)
  {
    uint64_t v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    if (Count >= 1)
    {
      CFIndex v7 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v7);
        unint64_t Value = (__CFString *)CFDictionaryGetValue(a1, ValueAtIndex);
        if (Value) {
          break;
        }
        if (FigCFArrayContainsValue())
        {
          uint64_t v11 = v6;
          uint64_t v12 = ValueAtIndex;
          CFSetRef v10 = @"*** Missing entitlement ***";
          goto LABEL_11;
        }
LABEL_12:
        if (Count == ++v7) {
          goto LABEL_13;
        }
      }
      CFSetRef v10 = Value;
      uint64_t v11 = v6;
      uint64_t v12 = ValueAtIndex;
LABEL_11:
      CFDictionarySetValue(v11, v12, v10);
      goto LABEL_12;
    }
LABEL_13:
    if (!CFDictionaryContainsKey(v6, @"RouteName")) {
      CFDictionarySetValue(v6, @"RouteName", @"*** Missing entitlement ***");
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t SendDataCompletionCallback(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a4 && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_CompletionID, *(void *)a4);
    FigXPCMessageSetCFString();
    xpc_dictionary_set_int64(0, (const char *)kFigRoutingContextXPCMsgParam_CompletionStatus, a3);
    xpc_connection_send_message(*(xpc_connection_t *)(a4 + 16), 0);
  }
  DestroyCompletionCallbackParameters((void *)a4);
  return FigXPCRelease();
}

uint64_t SendCommandCompletionCallback(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a4 && !FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, (const char *)kFigRoutingContextXPCMsgParam_CompletionID, *(void *)a4);
    FigXPCMessageSetCFDictionary();
    xpc_dictionary_set_int64(0, (const char *)kFigRoutingContextXPCMsgParam_CompletionStatus, a3);
    xpc_connection_send_message(*(xpc_connection_t *)(a4 + 16), 0);
  }
  DestroyCompletionCallbackParameters((void *)a4);
  return FigXPCRelease();
}

void std::vector<CMSRouteInfo>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E57C4F48, MEMORY[0x1E4FBA1C8]);
}

void sub_194E61E9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void *CMSM_IDS_Initialize()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/IDS.framework/IDS", 1);
  sIDSHandle = (uint64_t)result;
  if (result)
  {
    sIDSCopyIDForDevice = (uint64_t (*)(void))dlsym(result, "IDSCopyIDForDevice");
    uint64_t result = objc_getClass("IDSService");
    sIDSServiceClass = (uint64_t)result;
  }
  return result;
}

uint64_t CMSM_IDSCopyIDForDevice()
{
  if (sIDSCopyIDForDevice) {
    return sIDSCopyIDForDevice();
  }
  else {
    return 0;
  }
}

uint64_t CMSM_GetIDSServiceClass()
{
  return sIDSServiceClass;
}

uint64_t FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager(uint64_t a1, void *a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  if (a2)
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    v6[2] = __FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_block_invoke;
    v6[3] = &unk_1E57CAF98;
    v6[4] = &v7;
    void v6[5] = a1;
    if (FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_onceToken != -1) {
      dispatch_once(&FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_onceToken, v6);
    }
    uint64_t v3 = *((unsigned int *)v8 + 6);
    if (!v3)
    {
      CFTypeRef v4 = (CFTypeRef)FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_sLongFormManager;
      if (FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_sLongFormManager)
      {
        CFTypeRef v4 = CFRetain((CFTypeRef)FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_sLongFormManager);
        uint64_t v3 = *((unsigned int *)v8 + 6);
      }
      else
      {
        uint64_t v3 = 0;
      }
      *a2 = v4;
    }
  }
  else
  {
    uint64_t v3 = FigSignalErrorAt();
    *((_DWORD *)v8 + 6) = v3;
  }
  _Block_object_dispose(&v7, 8);
  return v3;
}

void __FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  FigRoutingSessionManagerGetClassID();
  int started = CMDerivedObjectCreate();
  if (started) {
    goto LABEL_26;
  }
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = _Block_copy(&__block_literal_global_67);
  uint64_t *DerivedStorage = (uint64_t)v5;
  if (!v5
    || (uint64_t v6 = FigSimpleMutexCreate(), (DerivedStorage[1] = v6) == 0)
    || (uint64_t v7 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM),
        dispatch_queue_t v8 = dispatch_queue_create("com.apple.coremedia.routing-session-manager.remote-replacement", v7),
        (DerivedStorage[3] = (uint64_t)v8) == 0))
  {
    int started = FigSignalErrorAt();
    goto LABEL_26;
  }
  unsigned int v9 = 0;
  uint64_t v10 = *DerivedStorage;
  CFTypeRef cf = 0;
  do
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v10 + 16))(v10, v2, &cf);
  while ((v11 == -16155 || v11 == -15394) && v9++ < 4);
  int v14 = v11;
  CFTypeRef v15 = cf;
  if (!v14)
  {
    if (cf)
    {
      CFTypeRef v16 = CFRetain(cf);
      CFTypeRef v15 = cf;
    }
    else
    {
      CFTypeRef v16 = 0;
    }
    DerivedStorage[2] = (uint64_t)v16;
  }
  if (v15) {
    CFRelease(v15);
  }
  if (!v14)
  {
    int started = routingSessionManagerResilientRemote_startObservingRemoteManager();
    if (!started)
    {
      int v14 = 0;
      FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_sLongFormManager = 0;
      goto LABEL_24;
    }
LABEL_26:
    int v14 = started;
  }
LABEL_24:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v14;
}

uint64_t __FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager_block_invoke_2(uint64_t a1, const __CFAllocator *a2, void *a3)
{
  return FigRoutingSessionManagerRemoteCopyLongFormVideoManager(a2, a3);
}

uint64_t routingSessionManagerResilientRemote_startObservingRemoteManager()
{
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v0 = 0;
  while (1)
  {
    uint64_t result = FigNotificationCenterAddWeakListener();
    if (result) {
      break;
    }
    v0 += 8;
    if (v0 == 32)
    {
      return FigNotificationCenterAddWeakListener();
    }
  }
  return result;
}

void routingSessionManagerResilientRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    _Block_release(*(const void **)DerivedStorage);
  }
  if (*(void *)(DerivedStorage + 16)) {
    routingSessionManagerResilientRemote_stopObservingRemoteManager();
  }
  if (*(void *)(DerivedStorage + 8)) {
    FigSimpleMutexDestroy();
  }
  uint64_t v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1) {
    dispatch_release(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t CMBaseObjectNotificationBarrier_0(uint64_t a1)
{
  uint64_t v2 = *(void **)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*v3 < 2uLL) {
    return 4294954514;
  }
  CFTypeRef v4 = (uint64_t (*)(uint64_t))v3[8];
  if (!v4) {
    return 4294954514;
  }
  return v4(a1);
}

uint64_t routingSessionManagerResilientRemote_stopObservingRemoteManager()
{
  CMNotificationCenterGetDefaultLocalCenter();
  for (uint64_t i = 0; i != 32; i += 8)
    FigNotificationCenterRemoveWeakListener();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t routingSessionManagerResilientRemote_forwardNotificationFromRemoteManager()
{
  return CMNotificationCenterPostNotification();
}

void routingSessionManagerResilientRemote_serverConnectionDied(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  if (a4) {
    CFRetain(a4);
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 24);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  _OWORD v8[2] = __routingSessionManagerResilientRemote_serverConnectionDied_block_invoke;
  v8[3] = &__block_descriptor_tmp_5;
  v8[4] = DerivedStorage;
  v8[5] = a2;
  void v8[6] = a4;
  MXDispatchAsync((uint64_t)"routingSessionManagerResilientRemote_serverConnectionDied", (uint64_t)"FigRoutingSessionManagerResilientRemote.c", 212, 0, 0, v7, (uint64_t)v8);
}

void __routingSessionManagerResilientRemote_serverConnectionDied_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  int v3 = *(_DWORD *)(v2 + 32);
  if (v3 <= 4)
  {
    *(_DWORD *)(v2 + 32) = v3 + 1;
    if (!routingSessionManagerResilientRemote_replaceRemoteManager()) {
      *(_DWORD *)(a1[4] + 32) = 0;
    }
  }
  CFTypeRef v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t routingSessionManagerResilientRemote_replaceRemoteManager()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)DerivedStorage + 16))();
  if (!result)
  {
    CMBaseObjectGetDerivedStorage();
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t routingSessionManagerResilientRemote_CopyCurrentSession(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  _OWORD v3[2] = __routingSessionManagerResilientRemote_CopyCurrentSession_block_invoke;
  v3[3] = &__block_descriptor_tmp_7;
  void v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_StartSessionForHighConfidenceDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __routingSessionManagerResilientRemote_StartSessionForHighConfidenceDestination_block_invoke;
  void v4[3] = &__block_descriptor_tmp_8;
  void v4[4] = a2;
  void v4[5] = a3;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v4);
}

uint64_t routingSessionManagerResilientRemote_CopyLikelyDestinations(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  _OWORD v3[2] = __routingSessionManagerResilientRemote_CopyLikelyDestinations_block_invoke;
  v3[3] = &__block_descriptor_tmp_9;
  void v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_PrepareForPlayback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __routingSessionManagerResilientRemote_PrepareForPlayback_block_invoke;
  void v4[3] = &__block_descriptor_tmp_10;
  void v4[4] = a2;
  void v4[5] = a3;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v4);
}

uint64_t routingSessionManagerResilientRemote_GetAirPlayVideoActive(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  _OWORD v3[2] = __routingSessionManagerResilientRemote_GetAirPlayVideoActive_block_invoke;
  v3[3] = &__block_descriptor_tmp_11;
  void v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_GetAirPlayVideoPlaying(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  _OWORD v3[2] = __routingSessionManagerResilientRemote_GetAirPlayVideoPlaying_block_invoke;
  v3[3] = &__block_descriptor_tmp_12;
  void v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_UpdateCurrentSessionFromLikelyDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __routingSessionManagerResilientRemote_UpdateCurrentSessionFromLikelyDestination_block_invoke;
  void v4[3] = &__block_descriptor_tmp_13;
  void v4[4] = a2;
  void v4[5] = a3;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v4);
}

uint64_t routingSessionManagerResilientRemote_GetPrefersLikelyDestinationsOverCurrentSession(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  _OWORD v3[2] = __routingSessionManagerResilientRemote_GetPrefersLikelyDestinationsOverCurrentSession_block_invoke;
  v3[3] = &__block_descriptor_tmp_14;
  void v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_StartSessionWithRouteDescriptors(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  _OWORD v3[2] = __routingSessionManagerResilientRemote_StartSessionWithRouteDescriptors_block_invoke;
  v3[3] = &__block_descriptor_tmp_15;
  void v3[4] = a2;
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)v3);
}

uint64_t routingSessionManagerResilientRemote_StartSuppressingLikelyDestinations(uint64_t a1)
{
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)&__block_literal_global_18_0);
}

uint64_t routingSessionManagerResilientRemote_StopSuppressingLikelyDestinations(uint64_t a1)
{
  return routingSessionManagerResilientRemote_withServerDeathRetry(a1, (uint64_t)&__block_literal_global_21_0);
}

uint64_t routingSessionManagerResilientRemote_withServerDeathRetry(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 8));
  CFTypeRef v4 = *(const void **)(DerivedStorage + 16);
  if (v4) {
    CFTypeRef v5 = CFRetain(v4);
  }
  else {
    CFTypeRef v5 = 0;
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
  uint64_t v6 = 0;
  int v7 = 0;
  CFTypeRef cf = v5;
  while (1)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, CFTypeRef))(a2 + 16))(a2, cf);
    uint64_t v9 = v8;
    ++v7;
    if (v8 == -15394 || v8 == -16155) {
      break;
    }
LABEL_25:
    if (v9 != -16155 && v9 != -15394 || v7 >= 5)
    {
      uint64_t v14 = v9;
      if (v6) {
        goto LABEL_35;
      }
      goto LABEL_36;
    }
  }
  CFTypeRef v11 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  while (1)
  {
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t v12 = routingSessionManagerResilientRemote_replaceRemoteManager();
    BOOL v13 = v12 == -15394;
    if (v12 == -16155)
    {
      BOOL v13 = 1;
LABEL_20:
      ++v7;
      goto LABEL_21;
    }
    uint64_t v14 = v12;
    if (v12) {
      break;
    }
LABEL_21:
    if (v7 >= 5) {
      BOOL v13 = 0;
    }
    if (!v13)
    {
      uint64_t v6 = v11;
      goto LABEL_25;
    }
  }
  if (v12 == -15394) {
    goto LABEL_20;
  }
  uint64_t v6 = v11;
  if (v11) {
LABEL_35:
  }
    CFRelease(v6);
LABEL_36:
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t CMSMNP_GetNowPlayingAppIsInterrupted()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v0 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID];
  if (v0 < 1) {
    return 0;
  }
  int v1 = v0;
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == v1
          && ([v7 isActive] & 1) == 0
          && [v7 interruptingSession]
          && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v7))
        {
          uint64_t v8 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 0;
LABEL_15:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v8;
}

id CMSMNP_CopyNowPlayingAppSession()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v0 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID];
  id v1 = [+[MXSessionManager sharedInstance] copyMXCoreSessionList];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v6)
          && [v6 isActive]
          && [v6 isPlaying]
          && objc_msgSend((id)objc_msgSend(v6, "clientPID"), "intValue") == v0)
        {
          id v7 = v6;
          goto LABEL_14;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  id v7 = 0;
LABEL_14:

  return v7;
}

uint64_t CMSMNP_NowPlayingAppIsPlayingDidChangeTimerDidFinish()
{
  if (qword_1E9359C18)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1E9359C18);
    if (qword_1E9359C18)
    {
      dispatch_release((dispatch_object_t)qword_1E9359C18);
      qword_1E9359C18 = 0;
    }
  }
  int IsPlaying = CMSMNP_GetNowPlayingAppIsPlaying();
  return CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChangeDelayed(IsPlaying);
}

CFPropertyListRef CMSMNP_CopyNowPlayingAppDisplayIDFromDisk()
{
  return CFPreferencesCopyValue(@"nowPlayingAppDisplayID", @"com.apple.mediaexperience", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
}

CFPropertyListRef CMSMNP_CopyNowPlayingAppWasPlayingUponCarPlayDisconnectFromDisk()
{
  CFPropertyListRef v0 = CFPreferencesCopyValue(@"nowPlayingAppWasPlayingUponCarPlayDisconnect", @"com.apple.mediaexperience", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v0;
}

void CMSMNP_WriteNowPlayingAppWasPlayingUponCarPlayDisconnectToDisk(int a1)
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v3 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a1) {
    uint64_t v3 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  MXCFPreferencesSetAndSynchronizeUserPreference(@"nowPlayingAppWasPlayingUponCarPlayDisconnect", *v3);
}

void CMSMNP_SaveCarPlayNowPlayingState()
{
  CFPropertyListRef v0 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID];
  if ([+[MXSessionManager sharedInstance] starkMainAudioIsOwnedByiOSButBorrowedByCar])
  {
    int IsInterrupted = CMSMNP_GetNowPlayingAppIsInterrupted();
  }
  else
  {
    int IsInterrupted = CMSMNP_GetNowPlayingAppIsPlaying();
  }
  int v2 = IsInterrupted;
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMNP_WriteNowPlayingAppWasPlayingUponCarPlayDisconnectToDisk(v2);
  if (v2) {
    CMSMNP_WriteNowPlayingAppDisplayIDUponCarPlayDisconnectToDisk(v0);
  }
  byte_1E9359CD1 = 1;
}

void CMSMNP_WriteNowPlayingAppDisplayIDUponCarPlayDisconnectToDisk(const void *a1)
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MXCFPreferencesSetAndSynchronizeUserPreference(@"nowPlayingAppDisplayIDUponCarPlayDisconnect", a1);
}

CFPropertyListRef CMSMNP_CopyNowPlayingAppDisplayIDUponCarPlayDisconnectFromDisk()
{
  CFPropertyListRef v0 = CFPreferencesCopyValue(@"nowPlayingAppDisplayIDUponCarPlayDisconnect", @"com.apple.mediaexperience", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v0;
}

uint64_t CMSMNP_GetNowPlayingAppShouldResumeForCarPlay()
{
  return byte_1E9359C49;
}

uint64_t CMSMNP_SetNowPlayingAppShouldResumeForCarPlay(uint64_t result)
{
  byte_1E9359C49 = result;
  return result;
}

void CMSMNP_ResumeNowPlayingAppOverCarPlay(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  int v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __CMSMNP_ResumeNowPlayingAppOverCarPlay_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  void v3[4] = cf;
  MXDispatchAsync((uint64_t)"CMSMNP_ResumeNowPlayingAppOverCarPlay", (uint64_t)"CMSessionManager_NowPlaying.m", 473, 0, 0, v2, (uint64_t)v3);
}

uint64_t CMSMNP_IsNowPlayingAppPlayingToPort(int a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v2 = CMSMNP_CopyNowPlayingAppSession();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  if ([v2 isSharePlayMediaSession]) {
    return 0;
  }
  CFArrayRef theArray = 0;
  FigRoutingManagerCopyPickedRouteDescriptorsForRoutingContext([v3 routingContextUUID], &theArray);
  if (!theArray)
  {
    CFIndex Count = 0;
    goto LABEL_13;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_13:
    int v7 = 0;
    goto LABEL_14;
  }
  unsigned __int8 v4 = 0;
  for (CFIndex i = 0; i != Count; ++i)
  {
    int v13 = 0;
    CFArrayGetValueAtIndex(theArray, i);
    FigCFDictionaryGetInt32IfPresent();
    if (v13 == a1) {
      unsigned __int8 v4 = 1;
    }
  }
  if (v4) {
    goto LABEL_22;
  }
  int v7 = 1;
LABEL_14:
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v7)
  {
    CFIndex v9 = 0;
    do
    {
      CFArrayGetValueAtIndex(theArray, v9);
      FigCFDictionaryGetInt32IfPresent();
      if (dword_1E9359ED0)
      {
        long long v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ++v9;
    }
    while (Count != v9);
  }
  unsigned __int8 v4 = 0;
LABEL_22:
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }

  return v4;
}

id CMSMNP_GetBTPortForNowPlayingApp()
{
  unsigned int v4 = 0;
  id result = CMSMNP_CopyNowPlayingAppSession();
  if (result)
  {
    id v1 = result;
    CFArrayRef theArray = 0;
    FigRoutingManagerCopyPickedRouteDescriptorsForRoutingContext([result routingContextUUID], &theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1)
      {
LABEL_7:
        if (theArray)
        {
          CFRelease(theArray);
          CFArrayRef theArray = 0;
        }
        goto LABEL_9;
      }
      CFArrayGetValueAtIndex(theArray, 0);
      FigCFDictionaryGetInt32IfPresent();
      if (theArray)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
        if (CFDictionaryGetValue(ValueAtIndex, @"IsBTRoute") != (const void *)*MEMORY[0x1E4F1CFD0]) {
          unsigned int v4 = 0;
        }
        goto LABEL_7;
      }
    }
LABEL_9:

    return (id)v4;
  }
  return result;
}

void CMSMDeviceState_Initialize(NSObject *a1)
{
  state64[16] = *MEMORY[0x1E4F143B8];
  char CFPreferenceBooleanWithDefault = FigGetCFPreferenceBooleanWithDefault();
  if (dword_1E9359ED0)
  {
    LODWORD(valuePtr) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  byte_1E9358932 = CFPreferenceBooleanWithDefault;
  unsigned int v4 = (const void *)MGCopyAnswer();
  int v5 = FigCFEqual();
  if (v4) {
    CFRelease(v4);
  }
  byte_1E9358938 = v5 != 0;
  CFBooleanRef v6 = (const __CFBoolean *)MGCopyAnswer();
  if (v6)
  {
    CFBooleanRef v7 = v6;
    byte_1E935893B = CFBooleanGetValue(v6);
    CFRelease(v7);
  }
  else
  {
    byte_1E935893B = 0;
  }
  byte_1E9358939 = FigDebugIsInternalBuild();
  qword_1E93589D0 = FigReentrantMutexCreate();
  uint64_t v8 = dlopen("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag", 4);
  sMKBLockStatusHandle = (uint64_t)v8;
  if (v8 && (sMKBGetLockStatus = (uint64_t (*)(void))dlsym(v8, "MKBGetDeviceLockState")) != 0)
  {
    if (a1)
    {
LABEL_11:
      BOOL v9 = notify_register_dispatch("com.apple.mobile.keybagd.lock_status", &dword_1E9358940, a1, &__block_literal_global_107) == 0;
      goto LABEL_14;
    }
  }
  else
  {
    LODWORD(valuePtr) = 0;
    long long v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (a1) {
      goto LABEL_11;
    }
  }
  BOOL v9 = 0;
LABEL_14:
  byte_1E9358944 = v9;
  if (sMKBGetLockStatus) {
    BOOL v11 = sMKBGetLockStatus(0) != 0;
  }
  else {
    BOOL v11 = 0;
  }
  MEMORY[0x199716E90](qword_1E93589D0);
  byte_1E935893C = v11;
  MEMORY[0x199716EA0](qword_1E93589D0);
  if (a1) {
    BOOL v12 = notify_register_dispatch("com.apple.springboard.hasBlankedScreen", &dword_1E9358954, a1, &__block_literal_global_110_0) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  byte_1E9358958 = v12;
  state64[0] = 0;
  if (notify_get_state(dword_1E9358954, state64)) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = state64[0] == 0;
  }
  char v14 = !v13;
  byte_1E9358950 = v14;
  if (a1) {
    BOOL v15 = notify_register_dispatch("com.apple.backboard.proximity.changed", &dword_1E935896C, a1, &__block_literal_global_113) == 0;
  }
  else {
    BOOL v15 = 0;
  }
  byte_1E9358970 = v15;
  state64[0] = 0;
  if (notify_get_state(dword_1E935896C, state64)) {
    BOOL v16 = 1;
  }
  else {
    BOOL v16 = state64[0] == 0;
  }
  char v17 = !v16;
  byte_1E9358968 = v17;
  if (a1) {
    notify_register_dispatch("com.apple.springboard.ringerstate", &dword_1E9358974, a1, &__block_literal_global_115);
  }
  if (cmsmdevicestate_RegisterForRingerIsOnNotification_onceToken != -1) {
    dispatch_once(&cmsmdevicestate_RegisterForRingerIsOnNotification_onceToken, &__block_literal_global_117_1);
  }
  if (!MX_FeatureFlags_IsMXSilentModeEnabled())
  {
    cmsmdevicestate_UpdateRingerIsOn();
    CFNumberRef v20 = +[MXSessionManager sharedInstance];
    BOOL v21 = byte_1E9358971 == 0;
LABEL_54:
    -[MXSessionManager setSilentModeEnabled:](v20, "setSilentModeEnabled:", v21, v45, v46);
    goto LABEL_55;
  }
  if (byte_1E9358935 || byte_1E9358937 || byte_1E9358938)
  {
    CFNumberRef v20 = +[MXSessionManager sharedInstance];
    BOOL v21 = 0;
    goto LABEL_54;
  }
  if (CMSMDeviceState_DeviceHasHardwareRingerSwitch_once != -1) {
    dispatch_once(&CMSMDeviceState_DeviceHasHardwareRingerSwitch_once, &__block_literal_global_34);
  }
  if (CMSMDeviceState_DeviceHasHardwareRingerSwitch_hasPhysicalSwitch)
  {
    if (BackBoardServicesLibrary_sOnce_0 != -1) {
      dispatch_once(&BackBoardServicesLibrary_sOnce_0, &__block_literal_global_60_2);
    }
    if (BackBoardServicesLibrary_sLib_0
      && dlsym((void *)BackBoardServicesLibrary_sLib_0, "BKSHIDServicesGetRingerState"))
    {
      int RingerState = softLinkBKSHIDServicesGetRingerState();
      if (dword_1E9359ED0)
      {
        LODWORD(valuePtr) = 0;
        CFIndex v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      byte_1E9358971 = RingerState != 0;
      __int16 v44 = +[MXSessionManager sharedInstance];
      [(MXSessionManager *)v44 setSilentModeEnabled:byte_1E9358971 == 0];
      [+[MXSessionManager sharedInstance] setSilentModeReason:@"MXSessionManager startup HID ringer switch state"];
      [+[MXSessionManager sharedInstance] setSilentModeEnabledUntilTime:0];
    }
    else
    {
      LODWORD(valuePtr) = 0;
      unsigned int v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_55:
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, &byte_1E935897C, (CFNotificationCallback)cmsmdevicestate_VibrateOnRingChangedNotificationCallback, @"com.apple.springboard.ring-vibrate.changed", 0, (CFNotificationSuspensionBehavior)0);
  cmsmdevicestate_UpdateVibrateOnRing();
  CFIndex v23 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v23, &byte_1E935897D, (CFNotificationCallback)cmsmdevicestate_VibrateOnSilentChangedNotificationCallback, @"com.apple.springboard.silent-vibrate.changed", 0, (CFNotificationSuspensionBehavior)0);
  cmsmdevicestate_UpdateVibrateOnSilent();
  CelestialGetModelSpecificName();
  CFDictionaryRef v24 = (const __CFDictionary *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v24)
  {
    CFDictionaryRef v25 = v24;
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v24, @"ChangesRingerVolume");
    if (Value && (CFBooleanRef v27 = Value, v28 = CFGetTypeID(Value), v28 == CFBooleanGetTypeID())) {
      Boolean v29 = CFBooleanGetValue(v27);
    }
    else {
      Boolean v29 = 1;
    }
    byte_1E935897E = v29;
    CFRelease(v25);
  }
  else
  {
    byte_1E935897E = 1;
  }
  CFIndex v30 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v30, &byte_1E935897E, (CFNotificationCallback)cmsmdevicestate_ButtonsCanChangeRingerVolumeChangedNotificationCallback, @"com.apple.preferences.sounds.buttons-can-change-ringer-volume.changed", 0, (CFNotificationSuspensionBehavior)0);
  cmsmdevicestate_UpdateButtonsCanChangeRingerVolume();
  cmsmdevicestate_UpdateVibrationDisabledFlag();
  CFNumberRef v31 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v31, &byte_1E935897F, (CFNotificationCallback)cmsmdevicestate_VibrationDisabledPreferenceChangedNotificationCallback, @"VibrationDisabledPreferenceDidChange", 0, (CFNotificationSuspensionBehavior)0);
  state64[0] = MEMORY[0x1E4F143A8];
  state64[1] = 3221225472;
  state64[2] = (uint64_t)__cmsmdevicestate_RegisterForDeviceIsChargingNotification_block_invoke;
  state64[3] = (uint64_t)&unk_1E57C6368;
  state64[4] = (uint64_t)a1;
  if (cmsmdevicestate_RegisterForDeviceIsChargingNotification_onceToken != -1) {
    dispatch_once(&cmsmdevicestate_RegisterForDeviceIsChargingNotification_onceToken, state64);
  }
  CFStringRef v32 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v32, &byte_1E9358990, (CFNotificationCallback)cmsmdevicestate_VoiceOverIsOnChangeCallback, @"com.apple.accessibility.voiceovertouch.status", 0, (CFNotificationSuspensionBehavior)0);
  cmsmdevicestate_UpdateVoiceOverIsOn();
  if (byte_1E9358937 | byte_1E9358935)
  {
    unsigned int v33 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v33, &qword_1E93589A8, (CFNotificationCallback)cmsmdevicestate_AirPlayPrefsChangedCallback, @"com.apple.airplay.prefsChanged", 0, (CFNotificationSuspensionBehavior)0);
    CFStringRef v34 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
    CFStringRef v35 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
    CFPropertyListRef v36 = CFPreferencesCopyValue(@"tightSyncUUID", @"com.apple.airplay", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    cmsmdevicestate_UpdateTightSyncUUID(v36);
    CFPreferencesSynchronize(@"com.apple.airplay", v34, v35);
    byte_1E93589A0 = FigGetCFPreferenceNumberWithDefault() == 0;
    uint64_t valuePtr = 0;
    CFNumberRef v37 = (const __CFNumber *)CFPreferencesCopyValue(@"persistentGroupSize", @"com.apple.airplay", v34, v35);
    if (v37)
    {
      CFNumberRef v38 = v37;
      CFTypeID v39 = CFGetTypeID(v37);
      if (v39 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v38, kCFNumberCFIndexType, &valuePtr);
        uint64_t v40 = valuePtr;
      }
      else
      {
        uint64_t v40 = 2 * (v36 != 0);
        uint64_t valuePtr = v40;
      }
      qword_1E93589B0 = v40;
      CFRelease(v38);
    }
    else
    {
      uint64_t valuePtr = 2 * (v36 != 0);
      qword_1E93589B0 = valuePtr;
    }
    if (dword_1E9359ED0)
    {
      uint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v36) {
      CFRelease(v36);
    }
  }
  if (MX_FeatureFlags_IsSeparatePlayerProcessEnabled())
  {
    int v43 = MXGetSerialQueue();
    MXDispatchAsyncAndWait((uint64_t)"cmsmdevicestate_RegisterForDeviceThermalLevelNotification", (uint64_t)"CMSessionManager_DeviceState.m", 1587, 0, 0, v43, (uint64_t)&__block_literal_global_174);
  }
}

void cmsmdevicestate_UpdateRingerIsOn()
{
  if (byte_1E9358935) {
    BOOL v0 = 0;
  }
  else {
    BOOL v0 = byte_1E9358937 == 0;
  }
  if (v0 && byte_1E9358938 == 0)
  {
    uint64_t state64 = 0;
    if (!notify_get_state(dword_1E9358974, &state64)) {
      byte_1E9358971 = state64 != 0;
    }
  }
  else
  {
    byte_1E9358971 = 1;
  }
}

uint64_t CMSMDeviceState_DeviceHasHardwareRingerSwitch()
{
  if (CMSMDeviceState_DeviceHasHardwareRingerSwitch_once != -1) {
    dispatch_once(&CMSMDeviceState_DeviceHasHardwareRingerSwitch_once, &__block_literal_global_34);
  }
  return CMSMDeviceState_DeviceHasHardwareRingerSwitch_hasPhysicalSwitch;
}

uint64_t cmsmdevicestate_UpdateVibrationDisabledFlag()
{
  CFPreferencesSynchronize(@"com.apple.Accessibility", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  byte_1E935897F = result != 0;
  return result;
}

uint64_t CMSMDeviceState_ItsAniPhone()
{
  return byte_1E9358934;
}

uint64_t CMSMDeviceState_ItsAnAppleWatch()
{
  return byte_1E9358936;
}

uint64_t CMSMDeviceState_IsAVirtualDevice()
{
  return byte_1E935893A;
}

void CMSMDeviceState_UpdateDeviceConfiguration()
{
  if (CMSMDeviceState_UpdateDeviceConfiguration_once != -1) {
    dispatch_once(&CMSMDeviceState_UpdateDeviceConfiguration_once, &__block_literal_global_68);
  }
}

uint64_t CMSMDeviceState_AddQueueToWatchDogMonitoring()
{
  if (HIBYTE(gDeviceState)) {
    return MEMORY[0x1F41682E8]();
  }
  return result;
}

uint64_t CMSMDeviceState_SupportsBeacon()
{
  if (CMSMDeviceState_SupportsBeacon_once != -1) {
    dispatch_once(&CMSMDeviceState_SupportsBeacon_once, &__block_literal_global_19);
  }
  return CMSMDeviceState_SupportsBeacon_supportsBeaconMode;
}

CFTypeRef CMSMDeviceState_CopyHardwareSafetySession()
{
  if (CMSMDeviceState_CopyHardwareSafetySession_onceToken != -1) {
    dispatch_once(&CMSMDeviceState_CopyHardwareSafetySession_onceToken, &__block_literal_global_26);
  }
  CFTypeRef result = (CFTypeRef)qword_1E93589D8;
  if (qword_1E93589D8)
  {
    return CFRetain(result);
  }
  return result;
}

void CMSMDeviceState_InterruptAllActiveSessionsAndSystemSounds()
{
  CMSystemSoundMgr_DeactivateAllSystemSounds();
  BOOL v0 = (void **)CMSMDeviceState_CopyHardwareSafetySession();
  if (v0)
  {
    id v1 = v0;
    MXCoreSessionBeginInterruption_WithSecTaskAndFlags(v0[2], 0, 0, 1);
    CFRelease(v1);
  }
}

uint64_t CMSMDeviceState_DeactivateHardwareSafetySession(const __CFString *a1)
{
  id v2 = (void **)CMSMDeviceState_CopyHardwareSafetySession();
  if (!v2) {
    return 4294954315;
  }
  uint64_t v3 = v2;
  uint64_t v4 = MXCoreSessionEndInterruption_WithSecTaskAndStatus(v2[2], 0, a1, 1);
  CFRelease(v3);
  return v4;
}

uint64_t CMSMDeviceState_ItsAnInternalBuild()
{
  return byte_1E9358939;
}

void *CMSMDeviceState_RegisterForScreenIsBlankedNotification(void *result)
{
  off_1E9358960 = result;
  return result;
}

uint64_t CMSMDeviceState_ScreenIsBlankedByProximitySensor()
{
  if (byte_1E9358970) {
    return byte_1E9358968;
  }
  uint64_t state64 = 0;
  if (notify_get_state(dword_1E935896C, &state64)) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = state64 == 0;
  }
  return !v1;
}

void CMSMDeviceState_UpdateSmartCoverState(int a1)
{
  MEMORY[0x199716E90](qword_1E93589D0);
  byte_1E9358945 = a1;
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716EA0](qword_1E93589D0);
  if (a1)
  {
    uint64_t v3 = MXGetSerialQueue();
    qword_1E9358948 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v3, 2.0, (uint64_t)&__block_literal_global_43_0, 0, 0);
  }
  else if (qword_1E9358948)
  {
    MXDispatchUtilityCancelTimer((dispatch_source_t *)&qword_1E9358948);
  }
}

uint64_t CMSMDeviceState_IsSecureMicrophoneSupported()
{
  return MGGetBoolAnswer();
}

uint64_t CMSMDeviceState_UpdateRingerStateForSilentMode(int a1)
{
  byte_1E9358971 = a1 == 0;
  BOOL v1 = +[MXSessionManager sharedInstance];
  BOOL v2 = byte_1E9358971 != 0;
  return [(MXSessionManager *)v1 ringerIsOnChanged:v2];
}

uint64_t CMSMDeviceState_PostRingerStateDarwinNotification(int a1)
{
  uint64_t v1 = a1 == 0;
  notify_set_state(dword_1E9358974, a1 != 0);
  notify_post("com.apple.springboard.ringerstate");
  notify_set_state(dword_1E9358978, v1);
  return notify_post("com.apple.mediaexperience.silentmode");
}

uint64_t cmsmdevicestate_UpdateVibrateOnRing()
{
  CFPreferencesSynchronize(@"com.apple.springboard", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  byte_1E935897C = result != 0;
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t cmsmdevicestate_UpdateVibrateOnSilent()
{
  CFPreferencesSynchronize(@"com.apple.springboard", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  byte_1E935897D = result != 0;
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void *CMSMDeviceState_RegisterForVoiceOverIsOnChangedNotification(void *result)
{
  off_1E9358998 = result;
  return result;
}

void *CMSMDeviceState_RegisterForTightSyncUUIDChangeNotification(void *result)
{
  if (byte_1E9358937) {
    off_1E93589B8 = result;
  }
  return result;
}

uint64_t CMSMDeviceState_IsAirplaneModeEnabled()
{
  uint64_t v0 = MGGetBoolAnswer();
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v0;
}

void *__BackBoardServicesLibrary_block_invoke_0()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices", 2);
  BackBoardServicesLibrary_sLib_0 = (uint64_t)result;
  return result;
}

uint64_t initBKSHIDServicesGetRingerState()
{
  if (BackBoardServicesLibrary_sOnce_0 != -1) {
    dispatch_once(&BackBoardServicesLibrary_sOnce_0, &__block_literal_global_60_2);
  }
  uint64_t v0 = (uint64_t (*)())dlsym((void *)BackBoardServicesLibrary_sLib_0, "BKSHIDServicesGetRingerState");
  softLinkBKSHIDServicesGetint RingerState = v0;
  return v0();
}

uint64_t cmsmdevicestate_UpdateVoiceOverIsOn()
{
  uint64_t v0 = byte_1E9358990;
  CFPreferencesSynchronize(@"com.apple.Accessibility", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  byte_1E9358990 = result != 0;
  BOOL v2 = (uint64_t (*)(uint64_t))off_1E9358998;
  if (off_1E9358998)
  {
    return v2(v0);
  }
  return result;
}

void cmsmdevicestate_AirPlayPrefsChangedCallback()
{
  valuePtr[21] = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v1 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFPropertyListRef v2 = CFPreferencesCopyValue(@"tightSyncUUID", @"com.apple.airplay", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (!FigCFEqual())
  {
    cmsmdevicestate_UpdateTightSyncUUID(v2);
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (off_1E93589B8) {
      off_1E93589B8(qword_1E93589A8);
    }
  }
  CFPreferencesSynchronize(@"com.apple.airplay", v0, v1);
  BOOL v4 = FigGetCFPreferenceNumberWithDefault() == 0;
  if (byte_1E93589A0 != v4)
  {
    byte_1E93589A0 = v4;
    if (dword_1E9359ED0)
    {
      int v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (off_1E93589C0) {
      off_1E93589C0(byte_1E93589A0 == 0, v4);
    }
  }
  valuePtr[0] = 0;
  CFNumberRef v6 = (const __CFNumber *)CFPreferencesCopyValue(@"persistentGroupSize", @"com.apple.airplay", v0, v1);
  CFNumberRef v7 = v6;
  if (v6 && (CFTypeID v8 = CFGetTypeID(v6), v8 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(v7, kCFNumberCFIndexType, valuePtr);
    uint64_t v9 = valuePtr[0];
  }
  else
  {
    uint64_t v9 = 2 * (v2 != 0);
    valuePtr[0] = v9;
  }
  uint64_t v10 = qword_1E93589B0;
  if (v9 != qword_1E93589B0)
  {
    qword_1E93589B0 = v9;
    if (dword_1E9359ED0)
    {
      BOOL v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (off_1E93589C8) {
      off_1E93589C8(v10, valuePtr[0]);
    }
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void cmsmdevicestate_UpdateTightSyncUUID(const void *a1)
{
  CFStringRef v1 = (const void *)qword_1E93589A8;
  qword_1E93589A8 = (uint64_t)a1;
  if (a1) {
    CFRetain(a1);
  }
  if (v1)
  {
    CFRelease(v1);
  }
}

uint64_t cmsmdevicestate_UpdateButtonsCanChangeRingerVolume()
{
  CFPreferencesSynchronize(@"com.apple.preferences.sounds", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  byte_1E935897E = result != 0;
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void MXBluetoothServices_RegisterForAudioRoutingChanged()
{
  CFStringRef v0 = MXGetSerialQueue();
  if (!notify_register_dispatch("com.apple.BluetoothServices.AudioRoutingChanged", &MXBluetoothServices_RegisterForAudioRoutingChanged_notifyToken, v0, &__block_literal_global_69))
  {
    mxBluetoothServices_handleAudioRoutingChanged();
  }
}

void mxBluetoothServices_handleAudioRoutingChanged()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFArrayRef v0 = CMSMVAUtility_CopyWirelessPortsSupportingMultipleConnections();
  CFArrayRef v1 = v0;
  if (v0) {
    CFIndex Count = CFArrayGetCount(v0);
  }
  else {
    CFIndex Count = 0;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  BOOL v4 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableSetRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef theArray = CFArrayCreateMutable(v3, 0, v4);
  if (Count < 1)
  {
    char v7 = 0;
  }
  else
  {
    CFIndex v6 = 0;
    char v7 = 0;
    do
    {
      valuePtr[0] = 0;
      CFArrayRef v8 = v1;
      valuePtr[0] = CMSMVAUtility_GetPortAtIndex(v1, v6);
      CFNumberRef v9 = CFNumberCreate(v3, kCFNumberSInt32Type, valuePtr);
      CFTypeRef v10 = vaeCopyDeviceIdentifierFromVADPort(valuePtr[0]);
      BOOL v11 = (const void *)vaeCopyNameForPort(valuePtr[0]);
      LOBYTE(v18) = 0;
      mxBluetoothServices_readCachedPort((uint64_t)v11, v10, (BOOL *)&v18);
      int IsPortBTManaged = MXBluetoothServices_IsPortBTManaged(valuePtr[0], 0);
      BOOL v13 = Mutable;
      if (!IsPortBTManaged) {
        CFMutableSetRef Mutable = theArray;
      }
      if ((_BYTE)v18) {
        BOOL v14 = IsPortBTManaged != 0;
      }
      else {
        BOOL v14 = 1;
      }
      if (!v14) {
        char v7 = 1;
      }
      mxBluetoothServices_addCachedPort((uint64_t)v11, v10, IsPortBTManaged != 0);
      CFArrayAppendValue(Mutable, v9);
      if (v9) {
        CFRelease(v9);
      }
      if (v11) {
        CFRelease(v11);
      }
      CFArrayRef v1 = v8;
      CFMutableSetRef Mutable = v13;
      if (v10) {
        CFRelease(v10);
      }
      ++v6;
    }
    while (Count != v6);
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemUpdateSharedAudioRouteState(Mutable, theArray);
  if (theArray)
  {
    if (CFArrayGetCount(theArray) && v7 != 0)
    {
      mxBluetoothServices_routeToBTDeviceIfNeeded(theArray);
LABEL_41:
      FigPredictedRouting_UpdatePredictedRoute(2);
      goto LABEL_42;
    }
  }
  if (Mutable && CFArrayGetCount(Mutable))
  {
    if (theArray && CFArrayGetCount(theArray)) {
      goto LABEL_41;
    }
    mxBluetoothServices_routeToBTDeviceIfNeeded(0);
  }
  FigPredictedRouting_UpdatePredictedRoute(2);
  if (!theArray)
  {
    if (!Mutable) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_42:
  CFRelease(theArray);
  if (Mutable) {
LABEL_37:
  }
    CFRelease(Mutable);
LABEL_38:
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t MXBluetoothServices_RegisterForPreemptivePortChanged()
{
  uint64_t result = MX_FeatureFlags_IsPreemptiveConnectedBannerEnabled();
  if (result)
  {
    CFArrayRef v1 = MXGetSerialQueue();
    uint64_t result = notify_register_dispatch("com.apple.BluetoothServices.PreemptivePortChanged", &MXBluetoothServices_RegisterForPreemptivePortChanged_notifyToken, v1, &__block_literal_global_4_5);
    if (result)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t MXBluetoothServices_RegisterForPreemptivePortDisconnected()
{
  uint64_t result = MX_FeatureFlags_IsPreemptiveConnectedBannerEnabled();
  if (result)
  {
    CFArrayRef v1 = MXGetSerialQueue();
    uint64_t result = notify_register_dispatch("com.apple.BluetoothServices.PreemptivePortDisconnected", (int *)&MXBluetoothServices_RegisterForPreemptivePortDisconnected_notifyToken, v1, &__block_literal_global_7_0);
    if (result)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void MXBluetoothServices_QueryAudioRoutingActionForNewWirelessPort(AudioObjectID a1, unsigned char *a2, unsigned char *a3, int a4, int a5)
{
  v29[22] = *(CFStringRef *)MEMORY[0x1E4F143B8];
  if (mxBluetoothServices_isBluetoothServicesLoaded())
  {
    CFTypeRef v10 = (const void *)vaeCopyNameForPort(a1);
    CFStringRef v11 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(a1);
    v29[0] = 0;
    unsigned int v28 = 0;
    id v12 = mxBluetoothServices_copyHighestPriorityLocalSessionBundleIDAndAudioScore(&v28);
    CMSMUtility_CreateTokensFromDeviceUID(v11, v29, 0);
    uint64_t v24 = 0;
    CFDictionaryRef v25 = &v24;
    uint64_t v26 = 0x2020000000;
    BOOL v27 = 0;
    uint64_t v20 = 0;
    BOOL v21 = &v20;
    uint64_t v22 = 0x2020000000;
    char v23 = 0;
    uint64_t v16 = 0;
    char v17 = &v16;
    uint64_t v18 = 0x2020000000;
    char v19 = 1;
    if (a4) {
      mxBluetoothServices_readCachedPort((uint64_t)v10, v11, &v27);
    }
    if (a5)
    {
      if (MX_FeatureFlags_IsSmartRoutingInEarQueryEnabled()) {
        uint64_t v13 = 32;
      }
      else {
        uint64_t v13 = 1;
      }
    }
    else
    {
      uint64_t v13 = 1;
    }
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    long long v15[2] = __MXBluetoothServices_QueryAudioRoutingActionForNewWirelessPort_block_invoke;
    v15[3] = &unk_1E57CB160;
    v15[4] = &v24;
    v15[5] = &v20;
    void v15[6] = &v16;
    v15[7] = v10;
    os_log_type_t v15[8] = v11;
    mxBluetoothServices_SendAudioRoutingRequest((uint64_t)v29[0], (uint64_t)v12, v28, v13, (uint64_t)v15);
    if (a3) {
      *a3 = *((unsigned char *)v25 + 24);
    }
    if (a2) {
      *a2 = *((unsigned char *)v21 + 24);
    }
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*((unsigned char *)v17 + 24)) {
      mxBluetoothServices_addCachedPort((uint64_t)v10, v11, *((unsigned __int8 *)v25 + 24));
    }

    if (v11) {
      CFRelease(v11);
    }
    if (v10) {
      CFRelease(v10);
    }
    _Block_object_dispose(&v16, 8);
    _Block_object_dispose(&v20, 8);
    _Block_object_dispose(&v24, 8);
  }
}

void sub_194E6889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

id mxBluetoothServices_copyHighestPriorityLocalSessionBundleIDAndAudioScore(_DWORD *a1)
{
  if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()) {
    id v2 = [+[MXSessionManager sharedInstance] copyHighestPriorityActiveSession:0x1EE5EBF48 deviceIdentifier:0];
  }
  else {
    id v2 = CMSM_CopyHighestPriorityLocalPlayingSession(1);
  }
  CFAllocatorRef v3 = v2;
  int LocalSessionPriority = CMSM_GetLocalSessionPriority(v2, 1);
  if (LocalSessionPriority == 100)
  {
    id v5 = 0;
    int v6 = 0;
  }
  else
  {
    int v6 = LocalSessionPriority;
    id v5 = (id)[v3 displayID];
  }

  if (a1) {
    *a1 = v6;
  }
  return v5;
}

uint64_t mxBluetoothServices_readCachedPort(uint64_t a1, const void *a2, BOOL *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t result = mxBluetoothServices_isBluetoothServicesLoaded();
  if (result)
  {
    [(id)gBluetoothPortsToBTManagedMappingLock lock];
    if (gBluetoothPortsToBTManagedMapping)
    {
      CFBooleanRef Value = CFDictionaryGetValue((CFDictionaryRef)gBluetoothPortsToBTManagedMapping, a2);
      if (Value) {
        *a3 = Value == (const void *)*MEMORY[0x1E4F1CFD0];
      }
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    return objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "unlock", v8, v9);
  }
  return result;
}

void mxBluetoothServices_SendAudioRoutingRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v10 = objc_alloc_init((Class)BTAudioRoutingRequestClass);
  [v10 setDeviceAddress:a1];
  [v10 setAppBundleID:a2];
  [v10 setAudioScore:a3];
  [v10 setFlags:a4];
  if (mxBluetoothServices_getRoutingRequestQueue_once != -1) {
    dispatch_once(&mxBluetoothServices_getRoutingRequestQueue_once, &__block_literal_global_27_1);
  }
  [v10 setDispatchQueue:mxBluetoothServices_getRoutingRequestQueue_routingRequestQueue];
  [MEMORY[0x1E4F1C9C8] now];
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  id v12 = objc_msgSend(v10, "activateSync", v15, v18);
  if (dword_1E9359ED0)
  {
    uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(v12, "error", v16, v19))
  {
    BOOL v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    (*(void (**)(uint64_t, void *))(a5 + 16))(a5, v12);
  }
  objc_msgSend(v10, "invalidate", v17, v20);
}

uint64_t mxBluetoothServices_addCachedPort(uint64_t a1, const void *a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t result = mxBluetoothServices_isBluetoothServicesLoaded();
  if (result)
  {
    [(id)gBluetoothPortsToBTManagedMappingLock lock];
    int v6 = (__CFDictionary *)gBluetoothPortsToBTManagedMapping;
    if (gBluetoothPortsToBTManagedMapping)
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v6 = (__CFDictionary *)gBluetoothPortsToBTManagedMapping;
      }
      uint64_t v8 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!a3) {
        uint64_t v8 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v6, a2, *v8);
    }
    return objc_msgSend((id)gBluetoothPortsToBTManagedMappingLock, "unlock", v9, v10);
  }
  return result;
}

uint64_t MXBluetoothServices_CopyPreferredDeviceAddress(uint64_t a1, uint64_t a2, int a3, char a4)
{
  if (a3) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 1;
  }
  return mxBluetoothServices_CopyPreferredDeviceAddress(a1, a2, v4, a4, 0);
}

uint64_t mxBluetoothServices_CopyPreferredDeviceAddress(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (!mxBluetoothServices_isBluetoothServicesLoaded()) {
    return 0;
  }
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __mxBluetoothServices_CopyPreferredDeviceAddress_block_invoke;
  v12[3] = &unk_1E57CB1B0;
  char v14 = a4;
  void v12[5] = &v15;
  v12[6] = a5;
  int v13 = a1;
  v12[4] = &v19;
  mxBluetoothServices_SendAudioRoutingRequest(0, a2, a1, a3, (uint64_t)v12);
  if (*((unsigned char *)v16 + 24)) {
    FigPredictedRouting_UpdatePredictedRoute(10);
  }
  uint64_t v10 = v20[3];
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  return v10;
}

void sub_194E6965C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t MXBluetoothServices_CopyPreemptivePortInfo(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return mxBluetoothServices_CopyPreferredDeviceAddress(a1, a2, 16, a3, a4);
}

uint64_t MXBluetoothServices_IsPortBTManaged(uint64_t a1, int a2)
{
  if (!mxBluetoothServices_isBluetoothServicesLoaded()
    || !vaeDoesPortSupportMultipleConnections(a1))
  {
    return 0;
  }
  CFStringRef v4 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(a1);
  if (a2)
  {
    [(id)gBluetoothPortsToBTManagedMappingLock lock];
    if (v4)
    {
      if (FigCFDictionaryGetCount() <= 0)
      {
        [(id)gBluetoothPortsToBTManagedMappingLock unlock];
      }
      else
      {
        CFBooleanRef Value = CFDictionaryGetValue((CFDictionaryRef)gBluetoothPortsToBTManagedMapping, v4);
        [(id)gBluetoothPortsToBTManagedMappingLock unlock];
        if (Value)
        {
          uint64_t v6 = Value == (const void *)*MEMORY[0x1E4F1CFD0];
          CFRelease(v4);
          return v6;
        }
      }
    }
  }
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 1;
  char v7 = (const void *)vaeCopyNameForPort(a1);
  uint64_t v10 = 0;
  CMSMUtility_CreateTokensFromDeviceUID(v4, (CFStringRef *)&v10, 0);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __MXBluetoothServices_IsPortBTManaged_block_invoke;
  v9[3] = &unk_1E57CB188;
  v9[4] = &v15;
  v9[5] = &v11;
  void v9[6] = v7;
  void v9[7] = v4;
  mxBluetoothServices_SendAudioRoutingRequest((uint64_t)v10, 0, 0, 0, (uint64_t)v9);
  if (*((unsigned char *)v12 + 24)) {
    mxBluetoothServices_addCachedPort((uint64_t)v7, v4, *((unsigned __int8 *)v16 + 24));
  }

  if (v4) {
    CFRelease(v4);
  }
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v6 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  return v6;
}

void sub_194E69874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t MXBluetoothServices_RemoveDisconnectedDeviceIDs(const __CFArray *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t result = mxBluetoothServices_isBluetoothServicesLoaded();
  if (!result) {
    return result;
  }
  [(id)gBluetoothPortsToBTManagedMappingLock lock];
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)gBluetoothPortsToBTManagedMapping);
  if (Count < 1) {
    return [(id)gBluetoothPortsToBTManagedMappingLock unlock];
  }
  CFIndex v4 = Count;
  v18[1] = v18;
  MEMORY[0x1F4188790]();
  uint64_t v6 = (const void **)((char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v5 >= 0x200) {
    size_t v7 = 512;
  }
  else {
    size_t v7 = v5;
  }
  bzero((char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)gBluetoothPortsToBTManagedMapping, v6, 0);
  CFArrayRef v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, v4, MEMORY[0x1E4F1D510]);
  CFIndex v9 = 0;
  *(void *)&long long v10 = 136315395;
  long long v19 = v10;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
    if (CFArrayGetCount(a1))
    {
      v27.length = CFArrayGetCount(a1);
      v27.location = 0;
      if (CFArrayContainsValue(a1, v27, ValueAtIndex)) {
        goto LABEL_23;
      }
      if (dword_1E9359ED0)
      {
        unsigned int v21 = 0;
        os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v13 = v21;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v20)) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = v13 & 0xFFFFFFFE;
        }
        if (v14) {
          goto LABEL_20;
        }
        goto LABEL_21;
      }
    }
    else if (dword_1E9359ED0)
    {
      unsigned int v21 = 0;
      os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
      uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v16 = v21;
      if (os_log_type_enabled(v15, v20)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
LABEL_20:
        int v22 = v19;
        char v23 = "MXBluetoothServices_RemoveDisconnectedDeviceIDs";
        __int16 v24 = 2113;
        CFDictionaryRef v25 = ValueAtIndex;
        _os_log_send_and_compose_impl();
      }
LABEL_21:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gBluetoothPortsToBTManagedMapping, ValueAtIndex);
    FigPredictedRouting_StopTimer();
LABEL_23:
    ++v9;
  }
  while (v4 != v9);
  if (v8) {
    CFRelease(v8);
  }
  return [(id)gBluetoothPortsToBTManagedMappingLock unlock];
}

void mxBluetoothServices_routeToBTDeviceIfNeeded(const __CFArray *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (FigRoutingManagerUtilities_IsSystemAudioRouteBuiltIn())
  {
    BOOL v2 = 1;
  }
  else if (CMSMDeviceState_RingerIsOn(1))
  {
    BOOL v2 = 0;
  }
  else
  {
    BOOL v2 = CMSMUtility_GetCurrentOutputPortAtIndex(0) == 0;
  }
  int IsBluetoothSharingSessionEnabled = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
  int IsTimerActive = FigPredictedRouting_IsTimerActive();
  if (!v2 || IsBluetoothSharingSessionEnabled || IsTimerActive)
  {
    if (!dword_1E9359ED0) {
      return;
    }
    goto LABEL_20;
  }
  if (a1)
  {
    uint64_t A2DPPort = cmsmGetA2DPPort(a1);
    if (!A2DPPort) {
      return;
    }
    uint64_t v6 = A2DPPort;
    if (CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(A2DPPort))
    {
      if (vaemShouldRequestOwnershipForSharedAudioRoute())
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!vaeRequestOwnershipOnBTPort(v6))
        {
          CFTypeRef v12 = CMSMUtility_CopySystemAudioRoutingContextUUID();
          ArrayFromPortIDAndPartners = CMSMVAUtility_CreateArrayFromPortIDAndPartners(v6);
          vaemMakeArrayOfPortsRoutable(ArrayFromPortIDAndPartners, 1, 0, (uint64_t)v12, 0);
          if (v12) {
            CFRelease(v12);
          }
          if (ArrayFromPortIDAndPartners) {
            CFRelease(ArrayFromPortIDAndPartners);
          }
        }
      }
      return;
    }
    if (!dword_1E9359ED0) {
      return;
    }
LABEL_20:
    unsigned int v14 = 0;
    uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
  unsigned int v14 = 0;
  id v8 = mxBluetoothServices_copyHighestPriorityLocalSessionBundleIDAndAudioScore(&v14);
  CFIndex v9 = (__CFString *)mxBluetoothServices_CopyPreferredDeviceAddress(v14, (uint64_t)v8, 1, 0, 0);
  if (dword_1E9359ED0)
  {
    long long v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMVAUtility_RouteToPreferredDeviceAddressIfInEar(v9);
}

id __mxBluetoothServices_loadFramework_block_invoke()
{
  id result = dlopen("/System/Library/PrivateFrameworks/BluetoothServices.framework/BluetoothServices", 4);
  if (result)
  {
    sBluetoothServicesLoaded = 1;
    BTAudioRoutingRequestClass = (uint64_t)objc_getClass("BTAudioRoutingRequest");
    gBluetoothPortsToBTManagedMapping = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    id result = objc_alloc_init(MEMORY[0x1E4F28E08]);
    gBluetoothPortsToBTManagedMappingLocuint64_t k = (uint64_t)result;
  }
  return result;
}

dispatch_queue_t __mxBluetoothServices_getRoutingRequestQueue_block_invoke()
{
  CFArrayRef v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t result = dispatch_queue_create("com.apple.mediaexperience.btroutingrequestqueue", v0);
  mxBluetoothServices_getRoutingRequestQueue_routingRequestQueue = (uint64_t)result;
  return result;
}

uint64_t PowerManager_SetCPMSSupportedForAudio(uint64_t result)
{
  sCMSMPowerManagerForAudio_0 = result;
  return result;
}

uint64_t PowerManager_InitializeCPMSForAudio()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (sCMSMPowerManagerForAudio_1) {
    return 0;
  }
  sCMSMPowerManagerForAudio_2 = [MEMORY[0x1E4F56678] sharedCPMSAgent];
  if (sCMSMPowerManagerForAudio_2)
  {
    sCMSMPowerManagerForAudio_5 = vaemCopyCPMSPowerBudgetRangeInMilliWatts(5);
    if (!sCMSMPowerManagerForAudio_5)
    {
      uint64_t v0 = 4294954513;
      goto LABEL_41;
    }
    *(void *)CFRange v27 = 0;
    CFArrayRef v1 = (void *)sCMSMPowerManagerForAudio_2;
    id v2 = objc_alloc_init(MEMORY[0x1E4F56688]);
    [v2 setClientId:5];
    [v2 setPowerLevels:sCMSMPowerManagerForAudio_5];
    [v2 setIsContinuous:1];
    [v2 setNotificationCallback:&__block_literal_global_5_2];
    [v2 setGetCurrentPower:&__block_literal_global_70];
    [v2 setPowerBudgetUpdateMinimumPeriod:10];
    int v3 = sCMSMPowerManagerForAudio_1;
    if ((sCMSMPowerManagerForAudio_1 & 1) == 0)
    {
      if (![v1 registerClientWithDescription:v2 error:v27])
      {
        uint64_t v0 = 4294954513;
        goto LABEL_33;
      }
      sCMSMPowerManagerForAudio_1 = 1;
    }
    id v30 = 0;
    CFIndex v4 = (void *)sCMSMPowerManagerForAudio_2;
    CFMutableDictionaryRef PowerBudgetRequestDict = PowerManager_CreatePowerBudgetRequestDict((const __CFDictionary *)sCMSMPowerManagerForAudio_5, 1);
    if (PowerBudgetRequestDict)
    {
      CFMutableDictionaryRef v6 = PowerBudgetRequestDict;
      uint64_t v7 = [v4 copyPowerBudgetForRequest:PowerBudgetRequestDict forClient:5 error:&v30];
      if (v7)
      {
        uint64_t v8 = v7;
        if (sCMSMPowerManagerForAudio_6) {
          CFRelease((CFTypeRef)sCMSMPowerManagerForAudio_6);
        }
        sCMSMPowerManagerForAudio_6 = v8;
        if (dword_1E9359ED0)
        {
          *(_DWORD *)Boolean v29 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v10 = *(_DWORD *)v29;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
            unsigned int v11 = v10;
          }
          else {
            unsigned int v11 = v10 & 0xFFFFFFFE;
          }
          if (v11)
          {
            int v31 = 136315394;
            CFStringRef v32 = "powerManager_RequestPowerBudgetFromCPMSForAudioResource";
            __int16 v33 = 2114;
            uint64_t v34 = sCMSMPowerManagerForAudio_6;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFRelease(v6);
        uint64_t v0 = PowerManager_SetPowerBudgetOnVAAndSendAcknowledgementToCPMSForResource(5, (void *)sCMSMPowerManagerForAudio_2, sCMSMPowerManagerForAudio_6);
        if ((v3 & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_33;
      }
      *(_DWORD *)Boolean v29 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CFTypeRef v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v13 = *(_DWORD *)v29;
      if (os_log_type_enabled(v12, type)) {
        unsigned int v14 = v13;
      }
      else {
        unsigned int v14 = v13 & 0xFFFFFFFE;
      }
      if (v14)
      {
        uint64_t v15 = [v30 description];
        int v31 = 136315394;
        CFStringRef v32 = "powerManager_RequestPowerBudgetFromCPMSForAudioResource";
        __int16 v33 = 2114;
        uint64_t v34 = v15;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFRelease(v6);
    }
    LODWORD(v3singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
    v29[0] = OS_LOG_TYPE_DEFAULT;
    unsigned int v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v17 = v30;
    if (os_log_type_enabled(v16, v29[0])) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      int v31 = 136315138;
      CFStringRef v32 = "powerManager_RequestInitialBudgetFromCPMSForAudioResource";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v0 = 4294954510;
    if (!v3)
    {
LABEL_39:

      if (sCMSMPowerManagerForAudio_6)
      {
        if (!v0) {
          return v0;
        }
        goto LABEL_41;
      }
      goto LABEL_48;
    }
LABEL_33:
    LODWORD(v3singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
    v29[0] = OS_LOG_TYPE_DEFAULT;
    long long v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v20 = v30;
    if (os_log_type_enabled(v19, v29[0])) {
      unsigned int v21 = v20;
    }
    else {
      unsigned int v21 = v20 & 0xFFFFFFFE;
    }
    if (v21)
    {
      uint64_t v22 = [*(id *)v27 description];
      int v31 = 136315394;
      CFStringRef v32 = "powerManager_RequestInitialBudgetFromCPMSForAudioResource";
      __int16 v33 = 2114;
      uint64_t v34 = v22;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_39;
  }
LABEL_48:
  uint64_t v0 = 4294954510;
LABEL_41:
  LODWORD(v3singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
  v27[0] = OS_LOG_TYPE_DEFAULT;
  char v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v24 = v30;
  if (os_log_type_enabled(v23, v27[0])) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = v24 & 0xFFFFFFFE;
  }
  if (v25)
  {
    int v31 = 136315394;
    CFStringRef v32 = "PowerManager_InitializeCPMSForAudio";
    __int16 v33 = 1024;
    LODWORD(v34) = v0;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v0;
}

void sub_194E6B430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194E6C364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void MXRoutingContextControllerModificationCallback(void *a1)
{
  location[16] = *(id *)MEMORY[0x1E4F143B8];
  if (dword_1E9359ED0)
  {
    int v14 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v3 = objc_msgSend(a1, "objectForKey:", @"MXRoutingContextController", v7, v8);
  uint64_t v4 = [a1 objectForKey:@"CompletionHandler"];
  if (FigCFEqual()) {
    unint64_t v5 = -[MXRoutingPrewarmingChannel initWithRoutingContextUUID:endpoint:previousRouteDescriptors:]([MXRoutingPrewarmingChannel alloc], "initWithRoutingContextUUID:endpoint:previousRouteDescriptors:", [v3 routingContextUUID], 0, objc_msgSend(a1, "objectForKey:", @"PreviousRouteDescriptors"));
  }
  else {
    unint64_t v5 = 0;
  }
  objc_initWeak(location, v3);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  _OWORD v11[2] = __MXRoutingContextControllerModificationCallback_block_invoke;
  v11[3] = &unk_1E57CB250;
  objc_copyWeak(&v12, location);
  [(MXRoutingPrewarmingChannel *)v5 setPersistPrewarmingBlock:v11];
  uint64_t v6 = [a1 objectForKey:@"PreviousRouteDescriptors"];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __MXRoutingContextControllerModificationCallback_block_invoke_50;
  v9[3] = &unk_1E57CB278;
  objc_copyWeak(&v10, location);
  v9[4] = v6;
  [(MXRoutingPrewarmingChannel *)v5 setCloseChannelBlock:v9];
  if (v4) {
    (*(void (**)(uint64_t, MXRoutingPrewarmingChannel *))(v4 + 16))(v4, v5);
  }

  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);
  objc_destroyWeak(location);
}

void sub_194E6CD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __MXRoutingContextControllerModificationCallback_block_invoke(uint64_t a1)
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return [objc_loadWeak((id *)(a1 + 32)) setContextPrewarmed:0];
}

uint64_t __MXRoutingContextControllerModificationCallback_block_invoke_50(uint64_t a1)
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  Weauint64_t k = objc_loadWeak((id *)(a1 + 40));
  [Weak setContextPrewarmed:0];
  return [Weak selectRouteDescriptors:*(void *)(a1 + 32)];
}

void CMSystemSoundMgr_Initialize()
{
  uint64_t v465 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (!gSystemSoundRingerSettings)
  {
    CelestialGetModelSpecificName();
    uint64_t v1 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v1)
    {
      CFDictionaryRef v2 = (const __CFDictionary *)v1;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v2))
      {
        CFIndex Count = CFDictionaryGetCount(v2);
        unint64_t v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
        uint64_t v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
        char v65 = v5;
        uint64_t v66 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
        __int16 v64 = v6;
        CFDictionaryGetKeysAndValues(v2, v5, v6);
        CFAllocatorRef v7 = *v0;
        if (Count >= 1)
        {
          CFIndex v9 = v6;
          uint64_t v8 = v5;
          id v10 = (CFDataRef *)v66;
          CFIndex v11 = Count;
          do
          {
            long long context = xmmword_194EDF2F8;
            long long v68 = xmmword_194EDF308;
            CFTypeID v12 = CFStringGetTypeID();
            if (v12 != CFGetTypeID(*v8)) {
              break;
            }
            CFTypeID v13 = CFDictionaryGetTypeID();
            if (v13 != CFGetTypeID(*v9)) {
              break;
            }
            *(void *)&long long context = *v8;
            CFDictionaryApplyFunction((CFDictionaryRef)*v9, (CFDictionaryApplierFunction)cmsmWordyToCompact, &context);
            if (!BYTE8(v68)) {
              break;
            }
            *v10++ = CFDataCreate(v7, (const UInt8 *)&context + 8, 8);
            ++v9;
            ++v8;
            --v11;
          }
          while (v11);
        }
        CFDictionaryRef v14 = CFDictionaryCreate(v7, v65, v66, Count, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        free(v65);
        free(v64);
        if (v66)
        {
          if (Count >= 1)
          {
            uint64_t v15 = v66;
            do
            {
              if (*v15) {
                CFRelease(*v15);
              }
              ++v15;
              --Count;
            }
            while (Count);
          }
          free(v66);
        }
        uint64_t v0 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
      }
      else
      {
        CFDictionaryRef v14 = 0;
      }
      gSystemSoundRingerSettings = (uint64_t)v14;
      CFRelease(v2);
    }
  }
  if (!gSystemSoundAudioBehaviors)
  {
    CelestialGetModelSpecificName();
    uint64_t v16 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v16)
    {
      unsigned int v17 = (const void *)v16;
      CFTypeID v18 = CFDictionaryGetTypeID();
      if (v18 == CFGetTypeID(v17)) {
        CFTypeRef v19 = CFRetain(v17);
      }
      else {
        CFTypeRef v19 = 0;
      }
      gSystemSoundAudioBehaviors = (uint64_t)v19;
      CFRelease(v17);
    }
  }
  if (!gRegionalSystemSoundsThatShareBehaviour)
  {
    CelestialGetModelSpecificName();
    uint64_t v20 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v20)
    {
      CFDictionaryRef v21 = (const __CFDictionary *)v20;
      CFTypeID v22 = CFDictionaryGetTypeID();
      if (v22 == CFGetTypeID(v21)
        && (CFBooleanRef v23 = (const __CFBoolean *)MGCopyAnswer()) != 0
        && (CFBooleanRef v24 = v23, v25 = CFBooleanGetValue(v23), CFRelease(v24), v25))
      {
        gCMSS_3 = MGGetBoolAnswer();
        if ((gCMSS_3 & 1) == 0 && dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        unsigned int v28 = (const void *)MGCopyAnswer();
        if (dword_1E9359ED0)
        {
          Boolean v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFBooleanRef Value = CFDictionaryGetValue(v21, v28);
        uint64_t v27 = (uint64_t)Value;
        if (Value) {
          CFRetain(Value);
        }
        if (v28) {
          CFRelease(v28);
        }
      }
      else
      {
        uint64_t v27 = 0;
      }
      gRegionalSystemSoundsThatShareBehaviour = v27;
      CFRelease(v21);
    }
  }
  if (!gSystemSoundVibrationPatterns)
  {
    CelestialGetModelSpecificName();
    uint64_t v31 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v31)
    {
      CFStringRef v32 = (const void *)v31;
      CFTypeID v33 = CFDictionaryGetTypeID();
      if (v33 == CFGetTypeID(v32)) {
        CFTypeRef v34 = CFRetain(v32);
      }
      else {
        CFTypeRef v34 = 0;
      }
      gSystemSoundVibrationPatterns = (uint64_t)v34;
      CFRelease(v32);
    }
  }
  if (!gSystemSoundRoutingForCategories)
  {
    CelestialGetModelSpecificName();
    uint64_t v35 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v35)
    {
      CFPropertyListRef v36 = (const void *)v35;
      CFTypeID v37 = CFDictionaryGetTypeID();
      if (v37 == CFGetTypeID(v36)) {
        CFTypeRef v38 = CFRetain(v36);
      }
      else {
        CFTypeRef v38 = 0;
      }
      gSystemSoundRoutingForCategories = (uint64_t)v38;
      CFRelease(v36);
    }
  }
  if (!gSystemSoundLowersMusicVolume)
  {
    CelestialGetModelSpecificName();
    uint64_t v39 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v39)
    {
      uint64_t v40 = (const void *)v39;
      CFTypeID v41 = CFDictionaryGetTypeID();
      if (v41 == CFGetTypeID(v40)) {
        CFTypeRef v42 = CFRetain(v40);
      }
      else {
        CFTypeRef v42 = 0;
      }
      gSystemSoundLowersMusicVolume = (uint64_t)v42;
      CFRelease(v40);
    }
  }
  if (!gSystemSoundMaxVolume)
  {
    CelestialGetModelSpecificName();
    uint64_t v43 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v43)
    {
      __int16 v44 = (const void *)v43;
      CFTypeID v45 = CFDictionaryGetTypeID();
      if (v45 == CFGetTypeID(v44)) {
        CFTypeRef v46 = CFRetain(v44);
      }
      else {
        CFTypeRef v46 = 0;
      }
      gSystemSoundMaxVolume = (uint64_t)v46;
      CFRelease(v44);
    }
  }
  if (!gSystemSoundMaxVibrationIntensity)
  {
    CelestialGetModelSpecificName();
    uint64_t v47 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v47)
    {
      AudioObjectID v48 = (const void *)v47;
      CFTypeID v49 = CFDictionaryGetTypeID();
      if (v49 == CFGetTypeID(v48)) {
        CFTypeRef v50 = CFRetain(v48);
      }
      else {
        CFTypeRef v50 = 0;
      }
      gSystemSoundMaxVibrationIntensity = (uint64_t)v50;
      CFRelease(v48);
    }
  }
  if (!gSystemSoundsWithNoVolumeAdjustment || !gSystemSoundsDoNotObeyAccessibilityVibrationSetting)
  {
    CelestialGetModelSpecificName();
    uint64_t v51 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v51)
    {
      CFDictionaryRef v52 = (const __CFDictionary *)v51;
      CFTypeID v53 = CFDictionaryGetTypeID();
      if (v53 == CFGetTypeID(v52))
      {
        __int16 v54 = CFDictionaryGetValue(v52, @"NoVolumeAdjustment");
        if (v54) {
          __int16 v54 = CFRetain(v54);
        }
      }
      else
      {
        __int16 v54 = 0;
      }
      gSystemSoundsWithNoVolumeAdjustment = (uint64_t)v54;
      CFTypeID v55 = CFDictionaryGetTypeID();
      if (v55 == CFGetTypeID(v52))
      {
        uint64_t v56 = CFDictionaryGetValue(v52, @"DoNotObeyAccessibilityVibrationSetting");
        if (v56) {
          uint64_t v56 = CFRetain(v56);
        }
      }
      else
      {
        uint64_t v56 = 0;
      }
      gSystemSoundsDoNotObeyAccessibilityVibrationSetting = (uint64_t)v56;
      CFRelease(v52);
    }
  }
  if (!gSystemSoundMinVolume)
  {
    CelestialGetModelSpecificName();
    uint64_t v57 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v57) {
      gSystemSoundMinVolume = v57;
    }
  }
  memset(&keyCallBacks, 0, sizeof(keyCallBacks));
  *(void *)&long long context = 0x1EE5ED6E8;
  *((void *)&context + 1) = 0x1EE5ED6E8;
  *(void *)&long long v68 = 0x1EE5ED6E8;
  *((void *)&v68 + 1) = 0x1EE5ED6E8;
  uint64_t v69 = 0x1EE5ED6E8;
  uint64_t v70 = 0x1EE5ED6E8;
  uint64_t v71 = 0x1EE5ED6E8;
  uint64_t v72 = 0x1EE5ED6E8;
  uint64_t v73 = 0x1EE5ED6E8;
  uint64_t v74 = 0x1EE5ED6E8;
  uint64_t v75 = 0x1EE5ED228;
  uint64_t v76 = 0x1EE5ED228;
  CFTypeID v77 = @"SystemSoundPreview";
  CFDictionaryRef v78 = @"MailReceived";
  CFDictionaryRef v79 = @"MailSent";
  CFMutableDictionaryRef v80 = @"VoicemailReceived";
  CFPropertyListRef v81 = @"SMSReceived";
  unsigned int v82 = @"SMSSent";
  CFTypeID v83 = @"CalendarAlert";
  CFPropertyListRef v84 = @"LowPower";
  CFTypeRef v85 = @"SMSReceived_Alert";
  CFTypeRef v86 = @"SMSReceived_Alert";
  id v87 = @"SMSReceived_Alert";
  uint64_t v88 = @"SMSReceived_Alert";
  uint64_t v89 = @"SMSReceived_Alert";
  char v90 = @"SMSReceived_Vibrate";
  uint64_t v91 = @"SMSReceived_Alert";
  uint64_t v92 = @"SMSReceived_Alert";
  CFTypeRef v93 = @"MailSent";
  uint64_t v94 = @"ReminderAlert";
  uint64_t v95 = @"MailSent";
  uint64_t v96 = @"SMSReceived_Alert";
  uint64_t v97 = @"SMSReceived_Alert";
  CFPropertyListRef v98 = @"SMSReceived_Alert";
  uint64_t v99 = @"SMSReceived_Alert";
  int v100 = @"SMSReceived_Alert";
  CFNumberRef v101 = @"SMSReceived_Alert";
  CFNumberRef v102 = @"SMSReceived_Alert";
  float v103 = @"SMSReceived_Alert";
  v104 = @"SMSReceived_Alert";
  uint64_t v105 = @"SMSReceived_Alert";
  char v106 = @"SMSReceived_Alert";
  float v107 = @"SMSReceived_Alert";
  CFPropertyListRef v108 = @"SMSReceived_Alert";
  float v109 = @"SMSReceived_Alert";
  CFTypeID v110 = @"SMSReceived_Alert";
  v111 = @"SMSReceived_Alert";
  v112 = @"SMSReceived_Alert";
  v113 = @"USSDAlert";
  v114 = @"SIMToolkitTone";
  CFDictionaryRef v115 = @"SIMToolkitTone";
  CFDictionaryRef v116 = @"SIMToolkitTone";
  CFDictionaryRef v117 = @"SIMToolkitTone";
  v118 = @"SIMToolkitTone";
  v119 = @"PINKeyPressed";
  v120 = @"ScreenLocked";
  v121 = @"FailedUnlock";
  v122 = @"KeyPressed";
  CFAllocatorRef v123 = @"KeyPressed";
  v124 = @"KeyPressed";
  v125 = @"ConnectedToPower";
  CFStringRef v126 = @"RingerSwitchIndication";
  CFStringRef v127 = @"CameraShutter";
  uint64_t v128 = 0x1EE5ED288;
  uint64_t v129 = 0x1EE5ED2A8;
  uint64_t v130 = 0x1EE5ED2C8;
  uint64_t v131 = 0x1EE5ED2E8;
  uint64_t v132 = 0x1EE5ED308;
  uint64_t v133 = 0x1EE5ED328;
  uint64_t v134 = 0x1EE5ED348;
  uint64_t v135 = 0x1EE5ED368;
  uint64_t v136 = 0x1EE5ED388;
  uint64_t v137 = 0x1EE5ED3A8;
  uint64_t v138 = 0x1EE5ED3C8;
  uint64_t v139 = 0x1EE5ED408;
  uint64_t v140 = 0x1EE5ED3C8;
  uint64_t v141 = 0x1EE5ED3C8;
  uint64_t v142 = 0x1EE5ED3C8;
  uint64_t v143 = 0x1EE5ED3C8;
  uint64_t v144 = 0x1EE5ED3C8;
  uint64_t v145 = 0x1EE5ED728;
  uint64_t v146 = 0x1EE5EF168;
  uint64_t v147 = 0x1EE5EF188;
  uint64_t v148 = 0x1EE5EF1A8;
  uint64_t v149 = 0x1EE5EF1C8;
  uint64_t v150 = 0x1EE5EF1E8;
  uint64_t v151 = 0x1EE5EF208;
  uint64_t v152 = 0x1EE5EF228;
  uint64_t v153 = 0x1EE5EF248;
  uint64_t v154 = 0x1EE5EF268;
  uint64_t v155 = 0x1EE5ED4A8;
  uint64_t v156 = 0x1EE5ED428;
  uint64_t v157 = 0x1EE5ED448;
  uint64_t v158 = 0x1EE5ED468;
  uint64_t v159 = 0x1EE5ED488;
  v160 = @"KeyPressed";
  v161 = @"KeyPressed";
  v162 = @"KeyPressed";
  uint64_t v163 = 0x1EE5ED4C8;
  uint64_t v164 = 0x1EE5ED4E8;
  uint64_t v165 = 0x1EE5ED748;
  uint64_t v166 = 0x1EE5ED508;
  uint64_t v167 = 0x1EE5ED528;
  uint64_t v168 = 0x1EE5ED748;
  uint64_t v169 = 0x1EE5ED548;
  uint64_t v170 = 0x1EE5ED568;
  uint64_t v171 = 0x1EE5ED6E8;
  uint64_t v172 = 0x1EE5ED6E8;
  uint64_t v173 = 0x1EE5ED588;
  uint64_t v174 = 0x1EE5ED5A8;
  uint64_t v175 = 0x1EE5ED5C8;
  uint64_t v176 = 0x1EE5ED5E8;
  unsigned int v177 = @"TouchTone";
  uint64_t v178 = @"TouchTone";
  uint64_t v179 = @"TouchTone";
  v180 = @"TouchTone";
  unsigned int v181 = @"TouchTone";
  unsigned int v182 = @"TouchTone";
  v183 = @"TouchTone";
  uint64_t v184 = @"TouchTone";
  uint64_t v185 = @"TouchTone";
  uint64_t v186 = @"TouchTone";
  v187 = @"TouchTone";
  v188 = @"TouchTone";
  uint64_t v189 = @"SystemSoundPreview_IgnoreRingerSwitch";
  v190 = @"SystemSoundPreview_IgnoreRingerSwitch";
  v191 = @"SystemSoundPreview_IgnoreRingerSwitch";
  v192 = @"SystemSoundPreview_IgnoreRingerSwitch";
  unsigned int v193 = @"SystemSoundPreview_IgnoreRingerSwitch";
  unsigned int v194 = @"SystemSoundPreview";
  v195 = @"KeyPressClickPreview";
  unsigned int v196 = @"SMSReceived_Selection";
  unsigned int v197 = @"SMSReceived_Selection";
  uint64_t v198 = @"SMSReceived_Selection";
  v199 = @"SMSReceived_Selection";
  unsigned int v200 = @"SMSReceived_Selection";
  unsigned int v201 = @"SMSReceived_Vibrate";
  uint64_t v202 = @"SMSReceived_Selection";
  uint64_t v203 = @"SMSReceived_Selection";
  uint64_t v204 = @"SystemSoundPreview_IgnoreRingerSwitch";
  v205 = @"SystemSoundPreview_IgnoreRingerSwitch_NoVibe";
  uint64_t v206 = @"SMSReceived_Selection";
  v207 = @"SMSReceived_Selection";
  v208 = @"SMSReceived_Selection";
  v209 = @"SMSReceived_Selection";
  v210 = @"SMSReceived_Selection";
  uint64_t v211 = @"SMSReceived_Selection";
  uint64_t v212 = @"SMSReceived_Selection";
  v213 = @"SMSReceived_Selection";
  v214 = @"SMSReceived_Selection";
  uint64_t v215 = @"SMSReceived_Selection";
  uint64_t v216 = @"SMSReceived_Selection";
  v217 = @"SMSReceived_Selection";
  uint64_t v218 = @"SMSReceived_Selection";
  v219 = @"SMSReceived_Selection";
  long long v220 = @"SMSReceived_Selection";
  long long v221 = @"SMSReceived_Selection";
  long long v222 = @"SMSReceived_Selection";
  long long v223 = @"RingerVibeChanged";
  long long v224 = @"SilentVibeChanged";
  uint64_t v225 = 0x1EE5EEEC8;
  long long v226 = @"Headset_StartCall";
  long long v227 = @"Headset_Redial";
  os_log_type_t v228 = @"Headset_AnswerCall";
  unsigned int v229 = @"Headset_EndCall";
  long long v230 = @"Headset_CallWaitingActions";
  long long v231 = @"Headset_TransitionEnd";
  uint64_t v232 = 0x1EE5ED248;
  uint64_t v233 = 0x1EE5ED268;
  uint64_t v234 = 0x1EE5ED628;
  uint64_t v235 = 0x1EE5ED648;
  uint64_t v236 = 0x1EE5ED668;
  uint64_t v237 = 0x1EE5ED688;
  uint64_t v238 = 0x1EE5ED6A8;
  uint64_t v239 = 0x1EE5ED6C8;
  uint64_t v240 = 0x1EE5ED748;
  uint64_t v241 = 0x1EE5ED768;
  uint64_t v242 = 0x1EE5ED768;
  uint64_t v243 = 0x1EE5ED788;
  uint64_t v244 = 0x1EE5ED7A8;
  uint64_t v245 = 0x1EE5ED7C8;
  uint64_t v246 = 0x1EE5ED7E8;
  uint64_t v247 = 0x1EE5ED808;
  uint64_t v248 = 0x1EE5ED828;
  uint64_t v249 = 0x1EE5ED848;
  uint64_t v250 = 0x1EE5ED868;
  uint64_t v251 = 0x1EE5ED888;
  uint64_t v252 = 0x1EE5ED8A8;
  uint64_t v253 = 0x1EE5ED8C8;
  uint64_t v254 = 0x1EE5ED8E8;
  uint64_t v255 = 0x1EE5ED908;
  uint64_t v256 = 0x1EE5ED928;
  uint64_t v257 = 0x1EE5ED948;
  uint64_t v258 = 0x1EE5ED968;
  uint64_t v259 = 0x1EE5ED988;
  uint64_t v260 = 0x1EE5ED9A8;
  uint64_t v261 = 0x1EE5ED9C8;
  uint64_t v262 = 0x1EE5ED9E8;
  uint64_t v263 = 0x1EE5EDA08;
  uint64_t v264 = 0x1EE5EDA28;
  uint64_t v265 = 0x1EE5EDA48;
  uint64_t v266 = 0x1EE5EDA68;
  uint64_t v267 = 0x1EE5EDA88;
  uint64_t v268 = 0x1EE5EDAA8;
  uint64_t v269 = 0x1EE5EDAC8;
  uint64_t v270 = 0x1EE5EDAE8;
  uint64_t v271 = 0x1EE5EDB08;
  uint64_t v272 = 0x1EE5EDB28;
  uint64_t v273 = 0x1EE5EDB48;
  uint64_t v274 = 0x1EE5EDB68;
  uint64_t v275 = 0x1EE5EDB88;
  uint64_t v276 = 0x1EE5EDBA8;
  uint64_t v277 = 0x1EE5EDBC8;
  uint64_t v278 = 0x1EE5EDBE8;
  uint64_t v279 = 0x1EE5EDC08;
  uint64_t v280 = 0x1EE5EDC28;
  uint64_t v281 = 0x1EE5EDC48;
  uint64_t v282 = 0x1EE5EDC68;
  uint64_t v283 = 0x1EE5EDC88;
  uint64_t v284 = 0x1EE5EDCA8;
  uint64_t v285 = 0x1EE5EDCC8;
  uint64_t v286 = 0x1EE5EDCE8;
  uint64_t v287 = 0x1EE5EDD08;
  uint64_t v288 = 0x1EE5EDD28;
  uint64_t v289 = 0x1EE5EDD48;
  uint64_t v290 = 0x1EE5EDD68;
  uint64_t v291 = 0x1EE5EDD88;
  uint64_t v292 = 0x1EE5EDDA8;
  uint64_t v293 = 0x1EE5EDDC8;
  uint64_t v294 = 0x1EE5EDDE8;
  uint64_t v295 = 0x1EE5EDE08;
  uint64_t v296 = 0x1EE5EDE28;
  uint64_t v297 = 0x1EE5EDE48;
  uint64_t v298 = 0x1EE5EDE68;
  uint64_t v299 = 0x1EE5EDE88;
  uint64_t v300 = 0x1EE5EDEA8;
  uint64_t v301 = 0x1EE5EDEC8;
  uint64_t v302 = 0x1EE5EDEE8;
  uint64_t v303 = 0x1EE5EDF08;
  uint64_t v304 = 0x1EE5EDF28;
  uint64_t v305 = 0x1EE5EDF48;
  uint64_t v306 = 0x1EE5EDF68;
  uint64_t v307 = 0x1EE5EDF88;
  uint64_t v308 = 0x1EE5EDFA8;
  uint64_t v309 = 0x1EE5EDFC8;
  uint64_t v310 = 0x1EE5EDFE8;
  uint64_t v311 = 0x1EE5EE008;
  uint64_t v312 = 0x1EE5EE028;
  uint64_t v313 = 0x1EE5EE048;
  uint64_t v314 = 0x1EE5EE068;
  uint64_t v315 = 0x1EE5EE088;
  uint64_t v316 = 0x1EE5EE0A8;
  uint64_t v317 = 0x1EE5EE0C8;
  uint64_t v318 = 0x1EE5EE0E8;
  uint64_t v319 = 0x1EE5EE108;
  uint64_t v320 = 0x1EE5EE128;
  uint64_t v321 = 0x1EE5EE148;
  uint64_t v322 = 0x1EE5EE168;
  uint64_t v323 = 0x1EE5EE188;
  uint64_t v324 = 0x1EE5EE1A8;
  uint64_t v325 = 0x1EE5EE1C8;
  uint64_t v326 = 0x1EE5EE1E8;
  uint64_t v327 = 0x1EE5EE208;
  uint64_t v328 = 0x1EE5EE228;
  uint64_t v329 = 0x1EE5EE248;
  uint64_t v330 = 0x1EE5EE268;
  uint64_t v331 = 0x1EE5EE288;
  uint64_t v332 = 0x1EE5EE2A8;
  uint64_t v333 = 0x1EE5EE2C8;
  uint64_t v334 = 0x1EE5EE2E8;
  uint64_t v335 = 0x1EE5EE308;
  uint64_t v336 = 0x1EE5EE328;
  uint64_t v337 = 0x1EE5EE348;
  uint64_t v338 = 0x1EE5EE368;
  uint64_t v339 = 0x1EE5EE388;
  uint64_t v340 = 0x1EE5EE3A8;
  uint64_t v341 = 0x1EE5EE3C8;
  uint64_t v342 = 0x1EE5EE3E8;
  uint64_t v343 = 0x1EE5EE408;
  uint64_t v344 = 0x1EE5EE428;
  uint64_t v345 = 0x1EE5EE448;
  uint64_t v346 = 0x1EE5EE468;
  uint64_t v347 = 0x1EE5EE488;
  uint64_t v348 = 0x1EE5EE4A8;
  uint64_t v349 = 0x1EE5EE4C8;
  uint64_t v350 = 0x1EE5EE4E8;
  uint64_t v351 = 0x1EE5EE508;
  uint64_t v352 = 0x1EE5EE528;
  uint64_t v353 = 0x1EE5EE548;
  uint64_t v354 = 0x1EE5EE568;
  uint64_t v355 = 0x1EE5EE588;
  uint64_t v356 = 0x1EE5EE5A8;
  uint64_t v357 = 0x1EE5EE5C8;
  uint64_t v358 = 0x1EE5EE5E8;
  uint64_t v359 = 0x1EE5EE608;
  uint64_t v360 = 0x1EE5EE628;
  uint64_t v361 = 0x1EE5EE648;
  uint64_t v362 = 0x1EE5EE668;
  uint64_t v363 = 0x1EE5EE688;
  uint64_t v364 = 0x1EE5EE6A8;
  uint64_t v365 = 0x1EE5EE6C8;
  uint64_t v366 = 0x1EE5EE6E8;
  uint64_t v367 = 0x1EE5EE708;
  uint64_t v368 = 0x1EE5EE728;
  uint64_t v369 = 0x1EE5EE748;
  uint64_t v370 = 0x1EE5EE768;
  uint64_t v371 = 0x1EE5EE788;
  uint64_t v372 = 0x1EE5EE7A8;
  uint64_t v373 = 0x1EE5EE7C8;
  uint64_t v374 = 0x1EE5EE7E8;
  uint64_t v375 = 0x1EE5EE808;
  uint64_t v376 = 0x1EE5EE828;
  uint64_t v377 = 0x1EE5EE848;
  uint64_t v378 = 0x1EE5EE868;
  uint64_t v379 = 0x1EE5EE888;
  uint64_t v380 = 0x1EE5EE8A8;
  uint64_t v381 = 0x1EE5EE8C8;
  uint64_t v382 = 0x1EE5EE8E8;
  uint64_t v383 = 0x1EE5EE908;
  uint64_t v384 = 0x1EE5EE928;
  uint64_t v385 = 0x1EE5EE948;
  uint64_t v386 = 0x1EE5EE968;
  uint64_t v387 = 0x1EE5EE988;
  uint64_t v388 = 0x1EE5EE9A8;
  uint64_t v389 = 0x1EE5EE9C8;
  uint64_t v390 = 0x1EE5EE9E8;
  uint64_t v391 = 0x1EE5EEA08;
  uint64_t v392 = 0x1EE5EEA28;
  uint64_t v393 = 0x1EE5EEA48;
  uint64_t v394 = 0x1EE5EEA68;
  uint64_t v395 = 0x1EE5EEA88;
  uint64_t v396 = 0x1EE5EEAA8;
  uint64_t v397 = 0x1EE5EEAC8;
  uint64_t v398 = 0x1EE5EEAE8;
  uint64_t v399 = 0x1EE5EEB08;
  uint64_t v400 = 0x1EE5EEB28;
  uint64_t v401 = 0x1EE5EEB48;
  uint64_t v402 = 0x1EE5EEB68;
  uint64_t v403 = 0x1EE5EEB88;
  uint64_t v404 = 0x1EE5EEBA8;
  uint64_t v405 = 0x1EE5EEBC8;
  uint64_t v406 = 0x1EE5ED608;
  uint64_t v407 = 0x1EE5ED6E8;
  uint64_t v408 = 0x1EE5ED6E8;
  uint64_t v409 = 0x1EE5EEBE8;
  uint64_t v410 = 0x1EE5EEC08;
  uint64_t v411 = 0x1EE5EED48;
  uint64_t v412 = 0x1EE5EED68;
  uint64_t v413 = 0x1EE5EED88;
  uint64_t v414 = 0x1EE5EEDA8;
  uint64_t v415 = 0x1EE5EEDC8;
  uint64_t v416 = 0x1EE5EEC28;
  uint64_t v417 = 0x1EE5EEC48;
  uint64_t v418 = 0x1EE5EEDE8;
  uint64_t v419 = 0x1EE5EEE08;
  uint64_t v420 = 0x1EE5EEE28;
  uint64_t v421 = 0x1EE5EEE48;
  uint64_t v422 = 0x1EE5EEE68;
  uint64_t v423 = 0x1EE5EEE88;
  uint64_t v424 = 0x1EE5F02A8;
  uint64_t v425 = 0x1EE5F02C8;
  uint64_t v426 = 0x1EE5EEC68;
  uint64_t v427 = 0x1EE5EEC88;
  uint64_t v428 = 0x1EE5EECA8;
  uint64_t v429 = 0x1EE5EDEC8;
  uint64_t v430 = 0x1EE5EECC8;
  uint64_t v431 = 0x1EE5EECE8;
  uint64_t v432 = 0x1EE5EED08;
  uint64_t v433 = 0x1EE5EED28;
  uint64_t v434 = 0x1EE5ED6E8;
  uint64_t v435 = 0x1EE5ED6E8;
  uint64_t v436 = 0x1EE5ED6E8;
  uint64_t v437 = 0x1EE5ED6E8;
  uint64_t v438 = 0x1EE5EEEA8;
  uint64_t v439 = 0x1EE5EEEE8;
  uint64_t v440 = 0x1EE5EEF08;
  uint64_t v441 = 0x1EE5EEF28;
  uint64_t v442 = 0x1EE5EEF48;
  uint64_t v443 = 0x1EE5EEF68;
  uint64_t v444 = 0x1EE5EEF88;
  uint64_t v445 = 0x1EE5EEFA8;
  uint64_t v446 = 0x1EE5EEFC8;
  uint64_t v447 = 0x1EE5EEFE8;
  uint64_t v448 = 0x1EE5EF008;
  uint64_t v449 = 0x1EE5EF028;
  uint64_t v450 = 0x1EE5EF048;
  uint64_t v451 = 0x1EE5EF068;
  uint64_t v452 = 0x1EE5EF088;
  uint64_t v453 = 0x1EE5EF0A8;
  uint64_t v454 = 0x1EE5EF0C8;
  uint64_t v455 = 0x1EE5EF0E8;
  uint64_t v456 = 0x1EE5EF108;
  uint64_t v457 = 0x1EE5EF128;
  uint64_t v458 = 0x1EE5EF148;
  uint64_t v459 = 0x1EE5EF288;
  uint64_t v460 = 0x1EE5EF2A8;
  uint64_t v461 = 0x1EE5EF2C8;
  CFAllocatorRef v58 = *v0;
  uint64_t v462 = 0x1EE5EF2E8;
  uint64_t v463 = 0x1EE5EF308;
  gSystemSoundIDToCategory = (uint64_t)CFDictionaryCreate(v58, (const void **)&cmsmInitializeSSIDCategoryMappings_ssids, (const void **)&context, 399, &keyCallBacks, MEMORY[0x1E4F1D540]);
  gCMSS_12 = FigReentrantMutexCreate();
  CelestialGetModelSpecificName();
  CFDictionaryRef v59 = (const __CFDictionary *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v59)
  {
    CFDictionaryRef v60 = v59;
    unsigned int v61 = CFDictionaryGetValue(v59, @"DefaultVADToSystemSoundVADVolumeRatio");
    uint64_t v62 = (uint64_t)v61;
    if (v61) {
      CFRetain(v61);
    }
    CFRelease(v60);
  }
  else
  {
    uint64_t v62 = 0;
  }
  gCMSS_4 = v62;
  gCMSS_5 = (uint64_t)CFDictionaryCreateMutable(v58, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  gCMSS_6 = (uint64_t)CFArrayCreateMutable(v58, 0, MEMORY[0x1E4F1D510]);
  gCMSS_7 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (!gCMSS_7)
  {
    uint64_t v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MXInstallSysdiagnoseBlock(@"CMSessionSystemSoundManagerState", (uint64_t)&__block_literal_global_72);
}

uint64_t CMSystemSoundMgr_ActivateSystemSoundsForPID(uint64_t result)
{
  if (gCMSS_1)
  {
    int v1 = result;
    MEMORY[0x199716E90](gCMSS_12);
    for (uint64_t i = gCMSS_0; i; uint64_t i = *(void *)i)
    {
      if (*(_DWORD *)(i + 12) == v1)
      {
        if (*(unsigned char *)(i + 16) && !*(unsigned char *)(i + 18))
        {
          cmsmPrewarmAudioForSSID(1, (void *)*(unsigned int *)(i + 8), v1);
          *(unsigned char *)(i + 18) = 1;
        }
        if (*(unsigned char *)(i + 17) && !*(unsigned char *)(i + 19))
        {
          cmsmPrewarmVibeForSSID(1, *(unsigned int *)(i + 8), *(_DWORD *)(i + 12));
          *(unsigned char *)(i + 19) = 1;
        }
        CMSMSleep_CreatePrewarmIdleSleepPreventor(*(unsigned int *)(i + 8), *(unsigned int *)(i + 12));
      }
    }
    JUMPOUT(0x199716EA0);
  }
  return result;
}

void cmsmPrewarmVibeForSSID(int a1, uint64_t a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int valuePtr = a3;
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!gCMSS_6 || !FigVibratorIsVibeSynthEngineAvailable())
  {
    if (!v4) {
      return;
    }
    goto LABEL_18;
  }
  if (!a1)
  {
    if (!v4) {
      return;
    }
    CFArrayRef v7 = (const __CFArray *)gCMSS_6;
    if (gCMSS_6) {
      v8.length = CFArrayGetCount((CFArrayRef)gCMSS_6);
    }
    else {
      v8.length = 0;
    }
    v8.location = 0;
    FirstIndexOfCFBooleanRef Value = CFArrayGetFirstIndexOfValue(v7, v8, v4);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)gCMSS_6, FirstIndexOfValue);
      if (gCMSS_6 && CFArrayGetCount((CFArrayRef)gCMSS_6))
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (dword_1E9359ED0)
        {
          CFIndex v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigVibratorStopPrewarm(0);
      }
    }
    goto LABEL_18;
  }
  if (!gCMSS_6 || !CFArrayGetCount((CFArrayRef)gCMSS_6))
  {
    if (dword_1E9359ED0)
    {
      uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigVibratorStartPrewarm(0);
LABEL_16:
    if (!v4) {
      return;
    }
    goto LABEL_17;
  }
  if (!dword_1E9359ED0) {
    goto LABEL_16;
  }
  unint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v4)
  {
LABEL_17:
    CFArrayAppendValue((CFMutableArrayRef)gCMSS_6, v4);
LABEL_18:
    CFRelease(v4);
  }
}

uint64_t cmsmRemoveSystemSoundAudioCategoriesThatMixIn(uint64_t a1)
{
  MEMORY[0x199716E90](gCMSS_12);
  CFDictionaryRef v2 = (void *)gCMSS_7;
  if ([+[MXSessionManager sharedInstance] defaultVADID])
  {
    BOOL v3 = v2 == 0;
  }
  else
  {
    BOOL v3 = 1;
  }
  if (v3) {
    return MEMORY[0x199716EA0](gCMSS_12);
  }
  CFNumberRef v4 = objc_msgSend(v2, "objectForKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", a1));
  if (!v4)
  {
    if (!dword_1E9359ED0) {
      return MEMORY[0x199716EA0](gCMSS_12);
    }
LABEL_10:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return MEMORY[0x199716EA0](gCMSS_12);
  }
  unint64_t v5 = v4;
  if (![v4 countForObject:@"KeyPressed"]) {
    goto LABEL_10;
  }
  [v5 removeObject:@"KeyPressed"];
  if (![v5 count]) {
    objc_msgSend(v2, "removeObjectForKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", a1));
  }
  return MEMORY[0x199716EA0](gCMSS_12);
}

void CMSystemSoundMgr_ActivateAllSystemSounds()
{
  if (gCMSS_1)
  {
    MEMORY[0x199716E90](gCMSS_12);
    for (uint64_t i = gCMSS_0; i; uint64_t i = *(void *)i)
    {
      if (*(unsigned char *)(i + 16) && !*(unsigned char *)(i + 18))
      {
        cmsmPrewarmAudioForSSID(1, (void *)*(unsigned int *)(i + 8), *(_DWORD *)(i + 12));
        *(unsigned char *)(i + 18) = 1;
      }
      if (*(unsigned char *)(i + 17) && !*(unsigned char *)(i + 19))
      {
        cmsmPrewarmVibeForSSID(1, *(unsigned int *)(i + 8), *(_DWORD *)(i + 12));
        *(unsigned char *)(i + 19) = 1;
      }
      CMSMSleep_CreatePrewarmIdleSleepPreventor(*(unsigned int *)(i + 8), *(unsigned int *)(i + 12));
    }
    JUMPOUT(0x199716EA0);
  }
}

void CMSystemSoundMgr_DeactivateAllSystemSounds()
{
  if (gCMSS_1)
  {
    MEMORY[0x199716E90](gCMSS_12);
    for (uint64_t i = gCMSS_0; i; uint64_t i = *(void *)i)
    {
      if (*(unsigned char *)(i + 16) && *(unsigned char *)(i + 18))
      {
        int v1 = (void *)*(unsigned int *)(i + 8);
        if ((v1 - 1103) <= 2)
        {
          cmsmRemoveSystemSoundAudioCategoriesThatMixIn(*(unsigned int *)(i + 12));
          int v1 = (void *)*(unsigned int *)(i + 8);
        }
        cmsmPrewarmAudioForSSID(0, v1, *(_DWORD *)(i + 12));
        *(unsigned char *)(i + 18) = 0;
      }
      if (*(unsigned char *)(i + 17) && *(unsigned char *)(i + 19))
      {
        cmsmPrewarmVibeForSSID(0, *(unsigned int *)(i + 8), *(_DWORD *)(i + 12));
        *(unsigned char *)(i + 19) = 0;
      }
      CMSMSleep_ReleasePrewarmIdleSleepPreventor(*(_DWORD *)(i + 8), *(_DWORD *)(i + 12));
    }
    JUMPOUT(0x199716EA0);
  }
}

uint64_t CMSystemSoundMgr_StopSystemSoundsforPID()
{
  uint64_t v0 = (uint64_t (*)(void))off_1E9359B40;
  if (off_1E9359B40)
  {
    return v0();
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t CMSystemSoundManager_GetNumberOfSystemSoundsPlayingAudio()
{
  return gCMSS_8;
}

CFStringRef CMSystemSoundMgr_SystemSoundMustBeHeard(void *a1)
{
  CFStringRef SystemSoundCategory = (const __CFString *)cmsmGetSystemSoundCategory(a1);
  CFStringRef result = CMSystemsoundMgr_GetMappedBehaviorCategory(SystemSoundCategory);
  if (result) {
    return (const __CFString *)(CFStringHasSuffix(result, @"AlwaysHeard") != 0);
  }
  return result;
}

uint64_t CMSessionMgrCopySystemSoundAudioBehavior(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  CFNumberRef v4 = (void *)MEMORY[0x1997179E0]();
  +[MXInitialization waitUntilMXIsFullyInitialized];
  if (a1)
  {
    if (!gSystemSoundAudioBehaviors)
    {
LABEL_38:
      uint64_t v7 = 0;
      goto LABEL_56;
    }
    int v37 = 0;
    FigCFDictionaryGetInt32IfPresent();
    unsigned int v36 = 0;
    FigCFDictionaryGetInt32IfPresent();
    char v35 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    char v34 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    char v33 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    unsigned __int8 v32 = 0;
    if (MX_FeatureFlags_IsOnenessEnabled()
      && !MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled())
    {
      FigCFDictionaryGetBooleanIfPresent();
    }
    uint64_t SystemSoundCategory = cmsmGetSystemSoundCategory(0);
    if (dword_1E9359ED0)
    {
      LODWORD(v38) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int ApplicationStateForPID = MX_RunningBoardServices_GetApplicationStateForPID(v36, 1);
    float valuePtr = 0.0;
    *(_DWORD *)os_log_type_t type = 0;
    if (ApplicationStateForPID == 4)
    {
      if (CMSMUtility_FetchBackgroundEntitlement(v36)) {
        goto LABEL_14;
      }
      int ApplicationStateForPID = MX_RunningBoardServices_GetApplicationStateForPID(+[MXSystemController getPIDToInheritAppStateFromForPID:v36], 1);
    }
    if ((ApplicationStateForPID & 0xFFFFFFF7) == 0) {
      goto LABEL_15;
    }
    if (ApplicationStateForPID != 4)
    {
LABEL_21:
      uint64_t v13 = 0;
LABEL_54:
      uint64_t v7 = 0;
      goto LABEL_55;
    }
LABEL_14:
    if (CMSMUtility_FetchBackgroundEntitlement(v36))
    {
LABEL_15:
      int v9 = v32;
      if (gCMSS_2 != 1)
      {
        *(void *)CFTypeRef v42 = 0;
        *(void *)&v42[8] = v42;
        *(void *)&v42[16] = 0x2020000000;
        int v43 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = &v38;
        uint64_t v40 = 0x2020000000;
        int v41 = 0;
        id v10 = MXGetSerialQueue();
        v44[0] = MEMORY[0x1E4F143A8];
        v44[1] = 3221225472;
        v44[2] = __cmsmSystemSoundShouldPlay_block_invoke;
        v44[3] = &unk_1E57CB2C8;
        int v45 = 0;
        unsigned int v46 = v36;
        unsigned __int8 v47 = v32;
        v44[4] = v42;
        char v48 = v35;
        char v49 = v34;
        char v50 = v33;
        v44[6] = type;
        v44[7] = &valuePtr;
        v44[5] = &v38;
        MXDispatchAsyncAndWait((uint64_t)"cmsmSystemSoundShouldPlay", (uint64_t)"CMSessionManager_SystemSounds.m", 3718, 0, 0, v10, (uint64_t)v44);
        if MX_FeatureFlags_IsAsyncDuckingEnabled() && (*(unsigned char *)(*(void *)&v42[8] + 25))
        {
          CFIndex v11 = +[MXSessionManager sharedInstance];
          LODWORD(v12) = 0.5;
          [(MXSessionManager *)v11 sleepForAsyncDucking:1 duration:v12];
        }
        uint64_t v7 = *((unsigned int *)v39 + 6);
        _Block_object_dispose(&v38, 8);
        _Block_object_dispose(v42, 8);
        if (v7)
        {
          uint64_t v13 = 0;
LABEL_55:
          *a2 = v13;
          goto LABEL_56;
        }
        int v9 = v32;
      }
      CFStringRef v14 = (const __CFString *)cmsmGetSystemSoundCategory(0);
      MappedBehaviorCategory = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(v14);
      uint64_t v16 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(MappedBehaviorCategory, v9);
      uint64_t v13 = v16;
      if (v16)
      {
        unsigned int v17 = (const void *)*MEMORY[0x1E4F1CFD0];
        CFTypeID v18 = (const void *)*MEMORY[0x1E4F1CFC8];
        if (type[0]) {
          CFTypeRef v19 = (const void *)*MEMORY[0x1E4F1CFD0];
        }
        else {
          CFTypeRef v19 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v16, @"Audio", v19);
        if (valuePtr != 0.0)
        {
          CFNumberRef v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
          CFDictionarySetValue(v13, @"AudioVolume", v20);
          if (v20) {
            CFRelease(v20);
          }
        }
        CFDictionaryRef v21 = v18;
        if ((type[0] & 2) != 0)
        {
          if (CMSMDeviceState_IsVibrationDisabled()
            && ([(id)gSystemSoundsDoNotObeyAccessibilityVibrationSetting containsObject:SystemSoundCategory] & 1) == 0)
          {
            LODWORD(v38) = 0;
            CFTypeID v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v23 = v38;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v24 = v23;
            }
            else {
              unsigned int v24 = v23 & 0xFFFFFFFE;
            }
            if (v24)
            {
              *(_DWORD *)CFTypeRef v42 = 136315394;
              *(void *)&v42[4] = "CMSessionMgrCopySystemSoundAudioBehavior";
              *(_WORD *)&v42[12] = 2114;
              *(void *)&v42[14] = SystemSoundCategory;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFDictionaryRef v21 = v17;
        }
        CFDictionarySetValue(v13, @"Vibration", v21);
        if ((type[0] & 8) != 0) {
          int v25 = v17;
        }
        else {
          int v25 = v18;
        }
        CFDictionarySetValue(v13, @"NeedsFinishCall", v25);
        if ((type[0] & 0x10) != 0) {
          uint64_t v26 = v17;
        }
        else {
          uint64_t v26 = v18;
        }
        CFDictionarySetValue(v13, @"SynchronizedSystemSound", v26);
        if ((type[0] & 0x40) != 0) {
          uint64_t v27 = v17;
        }
        else {
          uint64_t v27 = v18;
        }
        CFDictionarySetValue(v13, @"InterruptCurrentSystemSounds", v27);
        if ((type[0] & 0x80) != 0) {
          unsigned int v28 = v17;
        }
        else {
          unsigned int v28 = v18;
        }
        CFDictionarySetValue(v13, @"NeedsUnduckCall", v28);
        goto LABEL_54;
      }
      goto LABEL_38;
    }
    goto LABEL_21;
  }
  uint64_t v7 = 4294954316;
LABEL_56:
  return v7;
}

void sub_194E700FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __CMSessionMgrCopySystemSoundAudioBehavior_block_invoke()
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMDeviceState_InterruptAllActiveSessionsAndSystemSounds();
}

void CMSessionMgrSystemSoundDidFinish(int a1)
{
  CFDictionaryRef v2 = (void *)MEMORY[0x1997179E0]();
  +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  BOOL v3 = MXGetSerialQueue();
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __CMSessionMgrSystemSoundDidFinish_block_invoke;
  v6[3] = &unk_1E57C8A88;
  int v7 = a1;
  v6[4] = &v8;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrSystemSoundDidFinish", (uint64_t)"CMSessionManager_SystemSounds.m", 4233, 0, 0, v3, (uint64_t)v6);
  if (*((unsigned char *)v9 + 24))
  {
    CFNumberRef v4 = +[MXSessionManager sharedInstance];
    LODWORD(v5) = 0.5;
    [(MXSessionManager *)v4 sleepForAsyncDucking:0 duration:v5];
  }
  _Block_object_dispose(&v8, 8);
}

void sub_194E70364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __CMSessionMgrSystemSoundDidFinish_block_invoke(uint64_t a1)
{
  cmsmSystemSoundDidFinishGuts((void *)*(unsigned int *)(a1 + 40), 0, (unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  if (*(_DWORD *)(a1 + 40) == 1061)
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSMDeviceState_DeactivateHardwareSafetySession(@"resumable.LiquidDetectSystemSoundDisengaged");
  }
}

void cmsmSystemSoundDidFinishGuts(void *a1, int a2, unsigned char *a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (dword_1E9359ED0)
  {
    unsigned int v79 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v7 = gCMSS_8;
  if (gCMSS_8 <= 1) {
    int v7 = 1;
  }
  gCMSS_8 = v7 - 1;
  MEMORY[0x199716E90](gCMSM);
  int v8 = dword_1E9359C10;
  if (a1 && !a2)
  {
    if (dword_1E9359C10 <= 1) {
      int v9 = 1;
    }
    else {
      int v9 = dword_1E9359C10;
    }
    dword_1E9359C10 = v9 - 1;
  }
  if (!gCMSS_9) {
    goto LABEL_25;
  }
  dispatch_source_cancel((dispatch_source_t)gCMSS_9);
  if (gCMSS_9) {
    dispatch_release((dispatch_object_t)gCMSS_9);
  }
  BOOL v10 = a1 == 1117 || v8 == 0;
  BOOL v11 = !v10;
  BOOL v12 = gCMSS_11 != a1 && a2 == 0;
  gCMSS_9 = 0;
  if (!v12 && !v11)
  {
LABEL_25:
    char v13 = 1;
LABEL_26:
    if (a1 != 1117)
    {
      if (v8)
      {
        if (a2
          || (CFStringRef v14 = MXGetSerialQueue(),
              v76[0] = MEMORY[0x1E4F143A8],
              v76[1] = 3221225472,
              v76[2] = __cmsmSystemSoundDidFinishGuts_block_invoke,
              v76[3] = &__block_descriptor_36_e5_v8__0l,
              int v77 = (int)a1,
              (gCMSS_9 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v14, 1.0, (uint64_t)v76, 0, 0)) != 0))
        {
          if (v13)
          {
            MEMORY[0x199716EA0](gCMSM);
          }
          else
          {
            uint64_t v40 = cmsmCopySessionsToUnduck(gCMSS_11);
            MEMORY[0x199716EA0](gCMSM);
            if (v40)
            {
              cmsmUnduckSessions(v40, gCMSS_11, a3);
              CFRelease(v40);
            }
          }
          gCMSS_11 = (int)a1;
          return;
        }
      }
    }
    goto LABEL_36;
  }
  if (a1 != 1117)
  {
    char v13 = 0;
    goto LABEL_26;
  }
  uint64_t v15 = cmsmCopySessionsToUnduck(gCMSS_11);
  MEMORY[0x199716EA0](gCMSM);
  if (v15)
  {
    cmsmUnduckSessions(v15, gCMSS_11, a3);
    CFRelease(v15);
  }
  MEMORY[0x199716E90](gCMSM);
LABEL_36:
  int v62 = a2;
  uint64_t v63 = a3;
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v16 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v17 = [(NSPointerArray *)v16 countByEnumeratingWithState:&v72 objects:v88 count:16];
  if (!v17)
  {
    int v19 = 0;
    goto LABEL_61;
  }
  uint64_t v18 = v17;
  int v19 = 0;
  uint64_t v20 = *(void *)v73;
  do
  {
    uint64_t v21 = 0;
    do
    {
      if (*(void *)v73 != v20) {
        objc_enumerationMutation(v16);
      }
      CFTypeID v22 = *(void **)(*((void *)&v72 + 1) + 8 * v21);
      if (CMSUtility_GetIsActive(v22) && ([v22 currentlyControllingFlags] & 2) != 0)
      {
        if (![v22 hasPhoneCallBehavior]
          || !FigCFArrayContainsValue()
          || (CFStringRef SystemSoundCategory = (const __CFString *)cmsmGetSystemSoundCategory(a1)) == 0
          || (MappedBehaviorCategory = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(SystemSoundCategory),
              CurrentVADForSystemSoundAudioCategory = cmsmGetCurrentVADForSystemSoundAudioCategory(MappedBehaviorCategory, 0), CurrentAudioDestination = CMSUtility_GetCurrentAudioDestination(v22), uint64_t VADNameForVADID = CMSMUtility_GetVADNameForVADID(CurrentVADForSystemSoundAudioCategory), !CMSMUtility_AreVADsRoutedToTheSamePhysicalDevice(CurrentAudioDestination, VADNameForVADID)))
        {
          cmsTryToTakeControl(v22);
LABEL_54:
          int v19 = 1;
          goto LABEL_55;
        }
        if (!dword_1E9359ED0) {
          goto LABEL_54;
        }
        unsigned int v79 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        unsigned int v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v29 = v79;
        if (os_log_type_enabled(v28, type)) {
          unsigned int v30 = v29;
        }
        else {
          unsigned int v30 = v29 & 0xFFFFFFFE;
        }
        if (v30)
        {
          uint64_t v31 = [v22 clientName];
          int v80 = 136315394;
          CFPropertyListRef v81 = "cmsmShouldSessionWithRouteControlTryToTakeControl";
          __int16 v82 = 2048;
          uint64_t v83 = v31;
          LODWORD(v61) = 22;
          CFDictionaryRef v59 = &v80;
          _os_log_send_and_compose_impl();
        }
        int v19 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_55:
      ++v21;
    }
    while (v18 != v21);
    uint64_t v32 = [(NSPointerArray *)v16 countByEnumeratingWithState:&v72 objects:v88 count:16];
    uint64_t v18 = v32;
  }
  while (v32);
LABEL_61:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (!v19)
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    char v33 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v34 = [(NSPointerArray *)v33 countByEnumeratingWithState:&v68 objects:v87 count:16];
    if (v34)
    {
      uint64_t v35 = v34;
      int v36 = 0;
      uint64_t v37 = *(void *)v69;
      do
      {
        for (uint64_t i = 0; i != v35; ++i)
        {
          if (*(void *)v69 != v37) {
            objc_enumerationMutation(v33);
          }
          uint64_t v39 = *(void **)(*((void *)&v68 + 1) + 8 * i);
          if ([v39 systemSoundHasModifiedCurrentlyControllingFlags]
            && [v39 prefersToTakeHWControlFlagsFromAnotherSession]
            && CMSUtility_GetIsActive(v39))
          {
            [v39 setSystemSoundHasModifiedCurrentlyControllingFlags:0];
            cmsTryToTakeControl(v39);
            int v36 = 1;
          }
        }
        uint64_t v35 = [(NSPointerArray *)v33 countByEnumeratingWithState:&v68 objects:v87 count:16];
      }
      while (v35);
    }
    else
    {
      int v36 = 0;
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    if (!v36)
    {
      [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      int v41 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
      uint64_t v42 = [(NSPointerArray *)v41 countByEnumeratingWithState:&v64 objects:v86 count:16];
      if (v42)
      {
        uint64_t v43 = v42;
        int v44 = 0;
        uint64_t v45 = *(void *)v65;
        do
        {
          for (uint64_t j = 0; j != v43; ++j)
          {
            if (*(void *)v65 != v45) {
              objc_enumerationMutation(v41);
            }
            unsigned __int8 v47 = *(void **)(*((void *)&v64 + 1) + 8 * j);
            if ([v47 systemSoundHasModifiedCurrentlyControllingFlags]
              && ([v47 prefersToTakeHWControlFlagsFromAnotherSession] & 1) == 0
              && CMSUtility_GetIsActive(v47))
            {
              [v47 setSystemSoundHasModifiedCurrentlyControllingFlags:0];
              cmsTryToTakeControl(v47);
              int v44 = 1;
            }
          }
          uint64_t v43 = [(NSPointerArray *)v41 countByEnumeratingWithState:&v64 objects:v86 count:16];
        }
        while (v43);
      }
      else
      {
        int v44 = 0;
      }
      [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
      if (v62 && !v44)
      {
        PVMSetEnabled(1);
        vaemResetVADCategoryToStandardAVAndDefaultMode();
        CFStringRef v48 = (const __CFString *)cmsmGetSystemSoundCategory(a1);
        char v49 = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(v48);
        uint64_t v50 = cmsmGetCurrentVADForSystemSoundAudioCategory(v49, 0);
        CurrentRouteTypeForSystemSoundAtIndex = CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(0);
        if (dword_1E9359ED0)
        {
          unsigned int v79 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          CFDictionaryRef v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v53 = v79;
          if (os_log_type_enabled(v52, type)) {
            unsigned int v54 = v53;
          }
          else {
            unsigned int v54 = v53 & 0xFFFFFFFE;
          }
          if (v54)
          {
            uint64_t v55 = CMSMUtility_GetVADNameForVADID(v50);
            int v80 = 136315650;
            CFPropertyListRef v81 = "cmsmSystemSoundDidFinishGuts";
            __int16 v82 = 2114;
            uint64_t v83 = v55;
            __int16 v84 = 2114;
            CFTypeRef v85 = CurrentRouteTypeForSystemSoundAtIndex;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        vaemSetDeviceVolumeIfNotSet(v50, 0, CurrentRouteTypeForSystemSoundAtIndex, 0, 0.5, 0.0, 0.0);
        uint64_t VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
        PVMSetCurrentCategoryAndMode(@"Audio/Video", 0, VolumeSequenceNumber);
      }
    }
  }
  uint64_t v57 = cmsmCopySessionsToUnduck(a1);
  MEMORY[0x199716EA0](gCMSM);
  if (v57)
  {
    cmsmUnduckSessions(v57, a1, v63);
    CFRelease(v57);
  }
}

void CMSessionMgrSystemSoundUnduckMedia(int a1)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  CFDictionaryRef v2 = MXGetSerialQueue();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = __CMSessionMgrSystemSoundUnduckMedia_block_invoke;
  void v5[3] = &unk_1E57C8A88;
  int v6 = a1;
  v5[4] = &v7;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrSystemSoundUnduckMedia", (uint64_t)"CMSessionManager_SystemSounds.m", 4266, 0, 0, v2, (uint64_t)v5);
  if (*((unsigned char *)v8 + 24))
  {
    BOOL v3 = +[MXSessionManager sharedInstance];
    LODWORD(v4) = 0.5;
    [(MXSessionManager *)v3 sleepForAsyncDucking:0 duration:v4];
  }
  _Block_object_dispose(&v7, 8);
}

void sub_194E70EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __CMSessionMgrSystemSoundUnduckMedia_block_invoke(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716E90](gCMSM);
  double v4 = cmsmCopySessionsToUnduck(v1);
  MEMORY[0x199716EA0](gCMSM);
  if (v4)
  {
    cmsmUnduckSessions(v4, v1, (unsigned char *)(v2 + 24));
    CFRelease(v4);
  }
}

void CMSessionMgrSystemSoundActivate(int a1, char a2)
{
}

uint64_t CMSessionMgrVibrateForSystemSoundWithOptions(int a1, const __CFDictionary *a2)
{
  double v4 = (void *)MEMORY[0x1997179E0]();
  +[MXInitialization waitUntilMXIsFullyInitialized];
  if (a2)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"Duration");
    int valuePtr = 0;
    if (Value) {
      CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
    }
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Intensity");
    int v18 = 0;
    if (v6) {
      CFNumberGetValue(v6, kCFNumberFloatType, &v18);
    }
    uint64_t v7 = CFDictionaryGetValue(a2, @"VibrationPattern");
    CFDataRef v8 = (const __CFData *)CFDictionaryGetValue(a2, @"Synchronizer");
    if (v8) {
      BytePtr = CFDataGetBytePtr(v8);
    }
    else {
      BytePtr = 0;
    }
    CFBooleanRef v11 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"Loop");
    if (v11) {
      Boolean v12 = CFBooleanGetValue(v11);
    }
    else {
      Boolean v12 = 0;
    }
    char v13 = CFDictionaryGetValue(a2, @"DidFinishContext");
    CFBooleanRef v14 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"CancelCurrentVibePattern");
    if (v14) {
      Boolean v15 = CFBooleanGetValue(v14);
    }
    else {
      Boolean v15 = 0;
    }
    uint64_t v24 = 0;
    int v25 = &v24;
    uint64_t v26 = 0x2020000000;
    int v27 = 0;
    uint64_t v16 = MXGetSerialQueue();
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __cmsmVibrateForSystemSoundInternal_block_invoke;
    v20[3] = &unk_1E57CB2F0;
    int v21 = a1;
    v20[4] = &v24;
    v20[5] = v7;
    Boolean v22 = v12;
    v20[6] = BytePtr;
    void v20[7] = v13;
    Boolean v23 = v15;
    MXDispatchAsyncAndWait((uint64_t)"cmsmVibrateForSystemSoundInternal", (uint64_t)"CMSessionManager_SystemSounds.m", 4830, 0, 0, v16, (uint64_t)v20);
    uint64_t v10 = *((unsigned int *)v25 + 6);
    _Block_object_dispose(&v24, 8);
  }
  else
  {
    uint64_t v10 = 4294954315;
  }
  return v10;
}

void sub_194E71280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CMSessionMgrVibratorStopWithOptions(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1997179E0]();
  +[MXInitialization waitUntilMXIsFullyInitialized];
  BOOL v3 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __CMSessionMgrVibratorStopWithOptions_block_invoke;
  void v4[3] = &__block_descriptor_40_e5_v8__0l;
  void v4[4] = a1;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrVibratorStopWithOptions", (uint64_t)"CMSessionManager_SystemSounds.m", 5067, 0, 0, v3, (uint64_t)v4);
}

uint64_t __CMSessionMgrVibratorStopWithOptions_block_invoke(uint64_t a1)
{
  return FigVibratorStopWithOptions(*(void *)(a1 + 32));
}

void cmsmWordyToCompact(const __CFString *a1, const void *a2, uint64_t a3)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a1)
    || (CFTypeID v7 = CFArrayGetTypeID(), v7 != CFGetTypeID(a2))
    || (CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, @",")) == 0)
  {
    *(unsigned char *)(a3 + 24) = 0;
    return;
  }
  CFArrayRef v9 = ArrayBySeparatingStrings;
  if (CFArrayGetCount(ArrayBySeparatingStrings) != 3) {
    goto LABEL_47;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
  CFBooleanRef v11 = CFArrayGetValueAtIndex(v9, 1);
  Boolean v12 = CFArrayGetValueAtIndex(v9, 2);
  BOOL v13 = !ValueAtIndex || v11 == 0;
  if (v13 || v12 == 0) {
    goto LABEL_47;
  }
  Boolean v15 = v12;
  if (CFEqual(ValueAtIndex, @"RingVibrateOff"))
  {
    int v16 = 16;
  }
  else if (CFEqual(ValueAtIndex, @"RingVibrateOn"))
  {
    int v16 = 32;
  }
  else
  {
    if (!CFEqual(ValueAtIndex, @"RingVibrateIgnore")) {
      goto LABEL_47;
    }
    int v16 = 48;
  }
  if (CFEqual(v11, @"SilentVibrateOff"))
  {
    int v17 = 4;
  }
  else if (CFEqual(v11, @"SilentVibrateOn"))
  {
    int v17 = 8;
  }
  else
  {
    if (!CFEqual(v11, @"SilentVibrateIgnore")) {
      goto LABEL_47;
    }
    int v17 = 12;
  }
  if (CFEqual(v15, @"RingerSwitchOff"))
  {
    int v18 = 1;
    goto LABEL_31;
  }
  if (CFEqual(v15, @"RingerSwitchOn"))
  {
    int v18 = 2;
    goto LABEL_31;
  }
  if (CFEqual(v15, @"RingerSwitchIgnore"))
  {
    int v18 = 3;
LABEL_31:
    int v33 = v18;
    CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
    if (Count < 1)
    {
      LOBYTE(v23) = 0;
    }
    else
    {
      CFIndex v20 = Count;
      int v32 = v17;
      CFIndex v21 = 0;
      int v22 = 0;
      int v23 = 0;
      do
      {
        uint64_t v24 = CFArrayGetValueAtIndex((CFArrayRef)a2, v21);
        if (!v24 || (CFTypeID v25 = CFStringGetTypeID(), v25 != CFGetTypeID(v24))) {
          int v22 = 1;
        }
        if (CFEqual(v24, @"Beep"))
        {
          v23 |= 1u;
        }
        else if (CFEqual(v24, @"Vibrate"))
        {
          v23 |= 2u;
        }
        else if (CFEqual(v24, @"Synchronize"))
        {
          v23 |= 0x10u;
        }
        else if (CFEqual(v24, @"Interrupt"))
        {
          v23 |= 0x40u;
        }
        else
        {
          int v22 = 1;
        }
        ++v21;
      }
      while (v20 != v21);
      int v17 = v32;
      if (v22) {
        goto LABEL_47;
      }
    }
    for (uint64_t i = 0; i != 8; ++i)
    {
      if (i) {
        int v27 = 2;
      }
      else {
        int v27 = 1;
      }
      if ((i & 2) != 0) {
        int v28 = 8;
      }
      else {
        int v28 = 4;
      }
      int v29 = v27 | v28;
      if ((i & 4) != 0) {
        int v30 = 32;
      }
      else {
        int v30 = 16;
      }
      if (((v29 | v30) & ~(v16 | v17 | v33)) == 0)
      {
        uint64_t v31 = a3 + i;
        *(unsigned char *)(v31 + 8) = v23;
        *(unsigned char *)(v31 + 16) = 1;
      }
    }
    goto LABEL_48;
  }
LABEL_47:
  *(unsigned char *)(a3 + 24) = 0;
LABEL_48:
  CFRelease(v9);
}

CFArrayRef cmsmCopyDestinationsWithoutElement(CFArrayRef theArray, uint64_t a2)
{
  if (!theArray) {
    return 0;
  }
  MutableCFArrayRef Copy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theArray);
  CFArrayRef v4 = MutableCopy;
  if (a2 && CFArrayGetCount(MutableCopy) >= 1)
  {
    CFIndex v5 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(v4, v5);
      if (FigCFEqual()) {
        break;
      }
      if (++v5 >= CFArrayGetCount(v4)) {
        return v4;
      }
    }
    CFArrayRemoveValueAtIndex(v4, v5);
  }
  return v4;
}

void __cmsmSystemSoundShouldPlay_block_invoke(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  BOOL v3 = (void *)*(unsigned int *)(a1 + 64);
  int v4 = *(unsigned __int8 *)(a1 + 72);
  if (cmsmSkipPlayingSystemSound_onceToken != -1) {
    dispatch_once(&cmsmSkipPlayingSystemSound_onceToken, &__block_literal_global_152_0);
  }
  if (gSystemSoundRingerSettings) {
    BOOL v5 = gSystemSoundRoutingForCategories == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || gSystemSoundLowersMusicVolume == 0 || gSystemSoundMaxVolume == 0) {
    goto LABEL_96;
  }
  if (objc_msgSend((id)cmsmSkipPlayingSystemSound_unskippableSystemSounds, "containsObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", v3)))
  {
    if (!dword_1E9359ED0) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  if (!CMSystemSoundMgr_SystemSoundMustBeHeard(v3))
  {
    if ([+[MXSessionManager sharedInstance] isSessionWithAudioModeActive:@"Enrollment"])
    {
      if (dword_1E9359ED0) {
        goto LABEL_96;
      }
    }
    else if ([+[MXSessionManager sharedInstance] wombatEnabled])
    {
      if (dword_1E9359ED0) {
        goto LABEL_96;
      }
    }
    else
    {
      BOOL v28 = [+[MXSessionManager sharedInstance] isSessionWithAudioCategoryActive:@"HearingTest"];
      if (v3 == 1169 || !v28)
      {
        if (MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled())
        {
          active = (const void *)cmsmCopyCurrentActiveRouteTypesForSystemSound();
          CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(0);
          if (FigCFEqual()) {
            BOOL v32 = vaemContinuityScreenOutputIsConnected() != 0;
          }
          else {
            BOOL v32 = 0;
          }
          CFStringRef SystemSoundCategory = (const __CFString *)cmsmGetSystemSoundCategory(v3);
          MappedBehaviorCategory = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(SystemSoundCategory);
          int CurrentVADForSystemSoundAudioCategory = cmsmGetCurrentVADForSystemSoundAudioCategory(MappedBehaviorCategory, 0);
          unsigned int v36 = [+[MXSessionManager sharedInstance] speakerAlertVADID];
          if (active) {
            CFRelease(active);
          }
          if (CurrentVADForSystemSoundAudioCategory == v36) {
            BOOL v32 = 0;
          }
          if (v32 && dword_1E9359ED0)
          {
            unsigned int v43 = 0;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (v32) {
            goto LABEL_21;
          }
        }
        if (!FigVAEndpointManagerGetPropertyBoolean(qword_1E9359B78, 0x1EE5F3048)
          && FigCFArrayContainsValue()
          && CMSMUtility_SomeClientIsPlaying()
          && (CFStringRef v38 = (const __CFString *)cmsmGetSystemSoundCategory(v3),
              uint64_t v39 = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(v38),
              AudioObjectID v40 = cmsmGetCurrentVADForSystemSoundAudioCategory(v39, v4),
              BOOL IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly(0),
              vaemIsNotCurrentDeviceFormat(v40, IsCategoryInputOnly)))
        {
          if (dword_1E9359ED0)
          {
LABEL_96:
            unsigned int v43 = 0;
            uint64_t v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          if (!CMSMUtility_IsSomeClientRecording()
            || !CMSMUtility_IsSomeRecordingSessionPresentThatDisallowsSystemSounds()
            || cmsmSystemSoundShouldPlayDuringRecording((int)v3))
          {
            goto LABEL_22;
          }
          if (dword_1E9359ED0) {
            goto LABEL_96;
          }
        }
      }
      else if (dword_1E9359ED0)
      {
        goto LABEL_96;
      }
    }
LABEL_21:
    **(_DWORD **)(a1 + 48) = 0;
    return;
  }
  if (dword_1E9359ED0)
  {
LABEL_17:
    CFArrayRef v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_22:
  unsigned int v43 = 0;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = cmsmGetUpdatedSystemSoundPlayFlags((void *)*(unsigned int *)(a1 + 64), *(_DWORD *)(a1 + 68), *(unsigned __int8 *)(a1 + 73), *(unsigned __int8 *)(a1 + 74), *(unsigned __int8 *)(a1 + 75), *(float **)(a1 + 56), 0, &v43, *(unsigned char *)(a1 + 72));
  if (FigGetUpTimeNanoseconds() - UpTimeNanoseconds >= 1000001000)
  {
    int v10 = *(_DWORD *)(a1 + 64);
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
    if (CMSMDeviceState_ItsAnAppleTV())
    {
      int v12 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = 0;
      gCMSS_2 = 1;
      if (gCMSS_10)
      {
        dispatch_source_cancel((dispatch_source_t)gCMSS_10);
        if (gCMSS_10)
        {
          dispatch_release((dispatch_object_t)gCMSS_10);
          gCMSS_10 = 0;
        }
      }
      BOOL v13 = MXGetSerialQueue();
      gCMSS_10 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v13, 0.25, (uint64_t)&__block_literal_global_193, 0, 0);
      if (!gCMSS_10) {
        gCMSS_2 = 0;
      }
      if ((v12 & 8) != 0) {
        CMSessionMgrSystemSoundDidFinish(v10);
      }
    }
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
  int v15 = *(_DWORD *)(v14 + 24);
  if (v15) {
    ++gCMSS_8;
  }
  *(_DWORD *)(v14 + 24) = v15 & 0xFFFFFFF7 | (8 * (v15 & 1));
  int v16 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if ((v16 & 2) != 0)
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, @"VibeWillStart", 0, 0, 1u);
    int v16 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  int v18 = *(_DWORD *)(a1 + 64);
  unsigned int v19 = v43;
  IsBluetoothSharingSessionEnabledForMediaPlaybacuint64_t k = CMSUtility_IsBluetoothSharingSessionEnabledForMediaPlayback();
  if ((v16 & v19 & 1) != 0 && !IsBluetoothSharingSessionEnabledForMediaPlayback)
  {
    CFArrayRef v21 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
    uint64_t A2DPPort = cmsmGetA2DPPort(v21);
    if (v21) {
      CFRelease(v21);
    }
    if (A2DPPort && vaeDoesPortSupportMultipleConnections(A2DPPort))
    {
      if (vaeDoesBTPortSupportInEarDetection(A2DPPort)) {
        BOOL ShouldBTPortBeTreatedAsInEar = CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(A2DPPort);
      }
      else {
        BOOL ShouldBTPortBeTreatedAsInEar = 1;
      }
    }
    else
    {
      BOOL ShouldBTPortBeTreatedAsInEar = 0;
    }
    if (!CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote())
    {
      if (CMSMDeviceState_ItsAnAppleWatch())
      {
        BOOL v24 = v18 == 1413 || v18 == 1403;
        int v25 = v24;
      }
      else
      {
        int v25 = 1;
      }
      if ((ShouldBTPortBeTreatedAsInEar & v25) == 1 && !vaeGetBTPortOwnsSharedAudioConnection(A2DPPort))
      {
        CFArrayRef v29 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
        uint64_t v30 = cmsmGetA2DPPort(v29);
        if (v29) {
          CFRelease(v29);
        }
        if (v30)
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = vaeRequestOwnershipOnBTPort(v30);
          if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
            vaeMakePortRoutable(v30, 1, 0, qword_1E9359C88);
          }
        }
      }
    }
  }
  CFStringRef v26 = (const __CFString *)cmsmGetSystemSoundCategory((void *)*(unsigned int *)(a1 + 64));
  CMSystemsoundMgr_GetMappedBehaviorCategory(v26);
  if (dword_1E9359ED0)
  {
    int v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  **(_DWORD **)(a1 + 48) = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t __cmsmSkipPlayingSystemSound_block_invoke()
{
  uint64_t result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", &unk_1EE605E00, &unk_1EE605E18, 0);
  cmsmSkipPlayingSystemSound_unskippableSystemSounds = result;
  return result;
}

uint64_t cmsmSystemSoundShouldPlayDuringRecording(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1152)
  {
    if (((a1 - 1061) > 0x3D || ((1 << (a1 - 37)) & 0x37FE800000004001) == 0)
      && (a1 - 30) >= 0xA)
    {
      return 0;
    }
  }
  else if (a1 <= 1262)
  {
    unsigned int v3 = a1 - 1153;
    if (v3 > 0x3A || ((1 << v3) & 0x7FF800000000003) == 0) {
      return 0;
    }
  }
  else if (((a1 - 1263) > 0xB || ((1 << (a1 + 17)) & 0xF83) == 0) {
         && ((a1 - 1364) > 0x28 || ((1 << (a1 - 84)) & 0x1002000000FLL) == 0)
  }
         && (a1 - 1556) >= 2)
  {
    return 0;
  }
  return result;
}

void cmsmGetSystemSoundMaxVolume(const void *a1)
{
  *(float *)&int valuePtr = 1.0;
  if (a1 && (uint64_t v2 = (void *)[(id)gSystemSoundMinVolume objectForKey:a1]) != 0
    || (uint64_t v2 = (void *)[(id)gSystemSoundMinVolume objectForKey:@"Default"]) != 0)
  {
    CurrentRouteTypeForSystemSoundAtIndex = CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(0);
    int v4 = (void *)PVMCopyMappedRoute(CurrentRouteTypeForSystemSoundAtIndex);
    if (v4 && (BOOL v5 = (void *)[v2 objectForKey:v4]) != 0
      || (BOOL v5 = (void *)[v2 objectForKey:@"Default"]) != 0)
    {
      [v5 floatValue];
      float v7 = v6;
    }
    else
    {
      float v7 = 0.0;
    }
  }
  else
  {
    float v7 = 0.0;
  }
  if (a1 && (CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundMaxVolume, a1)) != 0
    || (CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundMaxVolume, @"Default")) != 0)
  {
    CFArrayRef v9 = CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(0);
    CFTypeRef v10 = PVMCopyMappedRoute(v9);
    if (!v10 || (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v8, v10)) == 0)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v8, @"Default");
      if (!Value)
      {
        if (!v10) {
          return;
        }
        goto LABEL_31;
      }
    }
    CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
    float v12 = PVMGetVolumeMultiplier();
    if ([(id)gSystemSoundsWithNoVolumeAdjustment containsObject:a1])
    {
      float v12 = 1.0;
      float v13 = *(float *)&valuePtr;
    }
    else
    {
      float v13 = 1.0;
      if (a1
        && PVMCategoriesAreEquivalent((const __CFString *)[+[MXSessionManager sharedInstance] getUncustomizedCategory:a1], 0, @"ThirdPartySystemSound", 0))
      {
        PVMGetThirdPartyVolumeMultiplier();
        float v12 = v14;
      }
    }
    if (FigCFEqual())
    {
      uint64_t v18 = 0;
      memset(v17, 0, sizeof(v17));
      float v15 = PVMGetVolumePreference(@"Ringtone", 0, (uint64_t)v17);
    }
    else
    {
      float v15 = *(float *)&valuePtr;
    }
    float v16 = v12 * v15;
    if (v16 >= v13) {
      float v16 = v13;
    }
    if (v7 > v16) {
      float v16 = v7;
    }
    *(float *)&int valuePtr = v16;
    if (v10) {
LABEL_31:
    }
      CFRelease(v10);
  }
}

BOOL cmsmVibrationForSystemSoundCanBeAlteredBasedOnSystemState(unsigned int a1)
{
  if (a1 > 0x1000) {
    return 1;
  }
  BOOL result = 1;
  if (a1 - 1000 > 0xF || ((1 << (a1 + 24)) & 0x808B) == 0) {
    return a1 == 1106;
  }
  return result;
}

void cmsmAddPrewarmedAudioCategoriesThatMixIn(uint64_t a1, uint64_t a2)
{
  MEMORY[0x199716E90](gCMSS_12);
  for (uint64_t i = gCMSS_0; i; uint64_t i = *(void *)i)
  {
    if (FigCFEqual()
      && *(_DWORD *)(i + 12) == a1
      && *(unsigned char *)(i + 18)
      && (*(_DWORD *)(i + 8) - 1103) <= 2)
    {
      MEMORY[0x199716E90](gCMSS_12);
      BOOL v5 = (void *)gCMSS_7;
      if ([+[MXSessionManager sharedInstance] defaultVADID]&& v5)
      {
        float v6 = objc_msgSend(v5, "objectForKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", a1));
        if (!v6)
        {
          float v6 = (void *)[MEMORY[0x1E4F28BD0] set];
          objc_msgSend(v5, "setObject:forKey:", v6, objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", a1));
        }
        [v6 addObject:a2];
      }
      MEMORY[0x199716EA0](gCMSS_12);
    }
  }
  JUMPOUT(0x199716EA0);
}

float cmsmGetSystemSoundVolumeScalarForCurrentRoute(__CFString *a1, int a2)
{
  if (!PVMGetEnabled()) {
    return 1.0;
  }
  CFDictionaryRef v4 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(a1, a2);
  uint64_t CurrentSystemSoundVADForAudioBehaviour = cmsGetCurrentSystemSoundVADForAudioBehaviour();
  float v6 = PVMGetCurrentPreferredRawVolume();
  if (v4) {
    CFRelease(v4);
  }
  float SystemSoundVolumeScalarForRawVolume = cmsmGetSystemSoundVolumeScalarForRawVolume(a1, CurrentSystemSoundVADForAudioBehaviour, v6);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return SystemSoundVolumeScalarForRawVolume;
}

float cmsmGetSystemSoundVolumeScalarForRawVolume(const __CFString *a1, uint64_t a2, float a3)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cmsmGetSystemSoundMaxVolume(a1);
  float v7 = v6;
  BOOL v8 = PVMGetEnabled();
  int v9 = v8;
  if (v7 >= a3)
  {
    PVMSetEnabled(v8);
    return cmsmGetAdjustedVolumeScalarForReceiverRoutes(1.0, a3);
  }
  else
  {
    PVMSetEnabled(1);
    float v20 = v7;
    float v21 = a3;
    int v10 = cmsmConvertToDecibelInVAD(a2, &v20);
    if (cmsmConvertToDecibelInVAD(a2, &v21) | v10
      || a1 && CFStringHasPrefix(a1, @"JBL")
      || FigCFEqual())
    {
      float v11 = 1.0;
      if (a3 != 0.0) {
        float v11 = a3;
      }
      float v22 = v7 / v11;
    }
    else
    {
      float v22 = v20 - v21;
      cf[0] = 0;
      uint64_t v13 = qword_1E9359B78;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 24);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      float v16 = *(void (**)(uint64_t, uint64_t, void, float *, CFTypeRef *))(v15 + 8);
      if (v16)
      {
        v16(v13, 0x1EE5F3548, *MEMORY[0x1E4F1CF80], &v22, cf);
        CFNumberRef v17 = (const __CFNumber *)cf[0];
      }
      else
      {
        CFNumberRef v17 = 0;
      }
      double ValueFloat32 = MXCFNumberGetValueFloat32(v17);
      float v22 = *(float *)&ValueFloat32;
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    PVMSetEnabled(v9);
    return cmsmGetAdjustedVolumeScalarForReceiverRoutes(v22, a3);
  }
}

float cmsmGetAdjustedVolumeScalarForReceiverRoutes(float a1, float a2)
{
  if (!FigCFArrayContainsValue() && !FigCFArrayContainsValue()) {
    return a1;
  }
  if (a2 <= 0.5)
  {
    float v5 = fminf(a1, 0.5);
  }
  else
  {
    double v4 = (float)(1.0 - a2);
    if (v4 < 0.3) {
      double v4 = 0.3;
    }
    float v5 = v4 <= a1 ? v4 : a1;
  }
  if (v5 == a1) {
    return a1;
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v5;
}

uint64_t cmsmConvertToDecibelInVAD(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 4294954315;
  }
  CFTypeRef cf = 0;
  uint64_t v4 = qword_1E9359B78;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, _DWORD *, CFTypeRef *))(v6 + 40);
  if (v8)
  {
    uint64_t v7 = v8(v4, 0x1EE5F3608, *MEMORY[0x1E4F1CF80], a1, a2, &cf);
    CFNumberRef v9 = (const __CFNumber *)cf;
  }
  else
  {
    CFNumberRef v9 = 0;
    uint64_t v7 = 4294954514;
  }
  double ValueFloat32 = MXCFNumberGetValueFloat32(v9);
  *a2 = LODWORD(ValueFloat32);
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

void __cmsmRunSystemSoundWatchdogForAppleTV_block_invoke()
{
  if (gCMSS_10)
  {
    dispatch_source_cancel((dispatch_source_t)gCMSS_10);
    if (gCMSS_10)
    {
      dispatch_release((dispatch_object_t)gCMSS_10);
      gCMSS_10 = 0;
    }
  }
  gCMSS_2 = 0;
}

__CFArray *cmsmCopySessionsToUnduck(unsigned int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = [[MXDuckingSource alloc] initWithType:0 ID:a1 duckVolume:0.0 duckFadeDuration:0.0];
  CFMutableSetRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  unsigned int v3 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v4 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        BOOL v8 = *(const void **)(*((void *)&v10 + 1) + 8 * v7);
        if ([+[MXSessionManager sharedInstance] isSessionDucked:v8 duckingSource:v1])
        {
          CFArrayAppendValue(Mutable, v8);
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];

  return Mutable;
}

void cmsmUnduckSessions(const __CFArray *a1, unsigned int a2, unsigned char *a3)
{
  CFIndex Count = CFArrayGetCount(a1);
  [+[MXSessionManager sharedInstance] startAsyncDuckingOperation];
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      CFNumberRef v9 = [[MXDuckingSource alloc] initWithType:0 ID:a2 duckVolume:0.0 duckFadeDuration:0.0];
      [+[MXSessionManager sharedInstance] unduckVolume:ValueAtIndex sessionCausingUnduck:0 duckingSource:v9];
    }
  }
  if (a3)
  {
    [+[MXSessionManager sharedInstance] mostRecentDuckFadeDuration];
    *a3 |= v10 > 0.0;
  }
}

uint64_t __cmsmSystemSoundDidFinishGuts_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  char v5 = 0;
  uint64_t result = cmsmSystemSoundDidFinishGuts(v1, 1, &v5);
  if (v5)
  {
    unsigned int v3 = +[MXSessionManager sharedInstance];
    LODWORD(v4) = 0.5;
    return [(MXSessionManager *)v3 sleepForAsyncDucking:0 duration:v4];
  }
  return result;
}

uint64_t __cmsmVibrateForSystemSoundInternal_block_invoke(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v23;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v23 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        if ([v7 isActive]
          && [v7 isPlaying]
          && ([v7 isVibrating] & 1) != 0)
        {
          [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
          uint64_t result = 4294954313;
          goto LABEL_41;
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v22 objects:v26 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  CFStringRef SystemSoundCategory = (const void *)cmsmGetSystemSoundCategory((void *)*(unsigned int *)(a1 + 64));
  uint64_t result = 4294954315;
  if (SystemSoundCategory && gSystemSoundVibrationPatterns)
  {
    CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 40);
    if (!v10
      && ((v12 = (const __CFDictionary *)cmsmCFDictionaryGetValueWithDefaultAsFallback((CFDictionaryRef)gSystemSoundVibrationPatterns, SystemSoundCategory)) == 0|| (v10 = v12, !CFDictionaryGetCount(v12)))|| (!FigCFArrayContainsValue() ? (v11 = FigCFArrayContainsValue() != 0) : (v11 = 1), !FigCFArrayContainsValue() ? (BOOL v13 = FigCFArrayContainsValue() != 0) : (BOOL v13 = 1), CMSMUtility_IsPhoneCallActive()&& (v11 || v13)&& cmsmVibrationForSystemSoundCanBeAlteredBasedOnSystemState(*(_DWORD *)(a1 + 64))&& CMSMUtility_VibrationPatternIsActuallyGoingToVibe((CFIndex)v10)&& (!v11 ? (v14 = @"DefaultShort_SpeakerphoneActive") : (v14 = @"DefaultShort_ReceiverActive"), (v15 = (const __CFDictionary *)cmsmCFDictionaryGetValueWithDefaultAsFallback((CFDictionaryRef)gSystemSoundVibrationPatterns, v14), (v10 = v15) != 0)&& !CFDictionaryGetCount(v15))))
    {
      uint64_t result = 4294954315;
    }
    else
    {
      CFTypeRef v16 = cmsmCopyCurrentActiveRouteTypeAtIndex(0);
      int valuePtr = 1065353216;
      if (v16)
      {
        CFNumberRef v17 = v16;
        ValueWithDefaultAsFallbacuint64_t k = (const __CFNumber *)cmsmCFDictionaryGetValueWithDefaultAsFallback((CFDictionaryRef)gSystemSoundMaxVibrationIntensity, v16);
        if (ValueWithDefaultAsFallback)
        {
          CFNumberGetValue(ValueWithDefaultAsFallback, kCFNumberFloatType, &valuePtr);
          int v19 = 1;
        }
        else
        {
          int v19 = 0;
        }
        CFRelease(v17);
        float v20 = *(float *)&valuePtr;
      }
      else
      {
        int v19 = 0;
        float v20 = 1.0;
      }
      uint64_t result = FigVibratorPlayVibrationWithDictionary(v10, v19, *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 68), *(const void **)(a1 + 56), *(unsigned __int8 *)(a1 + 69), 0, v20);
    }
  }
LABEL_41:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

const void *cmsmCFDictionaryGetValueWithDefaultAsFallback(CFDictionaryRef theDict, const void *a2)
{
  uint64_t result = 0;
  if (theDict)
  {
    if (a2)
    {
      uint64_t result = CFDictionaryGetValue(theDict, a2);
      if (!result)
      {
        return CFDictionaryGetValue(theDict, @"Default");
      }
    }
  }
  return result;
}

uint64_t FigRoutingSessionGetClassID()
{
  if (FigRoutingSessionGetClassID_sRegisterFigRoutingSessionBaseTypeOnce != -1) {
    dispatch_once_f(&FigRoutingSessionGetClassID_sRegisterFigRoutingSessionBaseTypeOnce, &FigRoutingSessionGetClassID_sFigRoutingSessionClassID, (dispatch_function_t)routingSession_getClassID);
  }
  return FigRoutingSessionGetClassID_sFigRoutingSessionClassID;
}

uint64_t routingSession_getClassID(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&routingSession_getClassID_sFigRoutingSessionClassDesc, ClassID, 1, a1);
}

uint64_t FigRoutingSessionGetTypeID()
{
  if (FigRoutingSessionGetClassID_sRegisterFigRoutingSessionBaseTypeOnce != -1) {
    dispatch_once_f(&FigRoutingSessionGetClassID_sRegisterFigRoutingSessionBaseTypeOnce, &FigRoutingSessionGetClassID_sFigRoutingSessionClassID, (dispatch_function_t)routingSession_getClassID);
  }
  uint64_t v0 = FigRoutingSessionGetClassID_sFigRoutingSessionClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

CFStringRef routingSession_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRoutingSession %p]", a1);
}

void sub_194E76378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
}

uint64_t getAAAudioSessionControlClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__15;
  uint64_t v7 = __Block_byref_object_dispose__15;
  uint64_t v0 = getAAAudioSessionControlClass_softClass;
  uint64_t v8 = getAAAudioSessionControlClass_softClass;
  if (!getAAAudioSessionControlClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getAAAudioSessionControlClass_block_invoke;
    v2[3] = &unk_1E57C5B30;
    void v2[4] = &v3;
    __getAAAudioSessionControlClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_194E7653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194E778D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_194E7A524(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

Class __getAAAudioSessionControlClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AudioAccessoryServicesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    _OWORD v3[2] = (void *)3221225472;
    v3[3] = __AudioAccessoryServicesLibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E57CB430;
    uint64_t v5 = 0;
    AudioAccessoryServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!AudioAccessoryServicesLibraryCore_frameworkLibrary)
    {
      abort_report_np();
LABEL_8:
      __getAAAudioSessionControlClass_block_invoke_cold_1();
    }
    if (v3[0]) {
      free(v3[0]);
    }
  }
  Class result = objc_getClass("AAAudioSessionControl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    goto LABEL_8;
  }
  getAAAudioSessionControlClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __AudioAccessoryServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AudioAccessoryServicesLibraryCore_frameworkLibrary = result;
  return result;
}

__CFString *PowerManager_GetClientTypeFromID(uint64_t a1)
{
  uint64_t v1 = @"unknown";
  if (a1 == 6) {
    uint64_t v1 = @"haptics";
  }
  if (a1 == 5) {
    return @"audio";
  }
  else {
    return v1;
  }
}

CFMutableDictionaryRef PowerManager_CreatePowerBudgetRequestDict(const __CFDictionary *a1, int a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int64_t Count = FigCFDictionaryGetCount();
    BOOL v11 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(a1, v11, 0);
    if (Count >= 1)
    {
      uint64_t v5 = v11;
      do
      {
        if (a1)
        {
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, *v5);
          if (Value)
          {
            CFArrayRef v7 = Value;
            if (CFArrayGetCount(Value) != 2)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CFArrayGetValueAtIndex(v7, a2 != 0);
          }
          else
          {
            CFNumberRef v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        FigCFDictionarySetValue();
        ++v5;
        --Count;
      }
      while (Count);
    }
    free(v11);
  }
  return Mutable;
}

uint64_t PowerManager_SendAcknowledgementToCPMSForResource(uint64_t a1, void *a2, uint64_t a3)
{
  v5[22] = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if ([a2 acknowledgePowerBudget:a3 forClientId:a1 error:v5]) {
    return 0;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294950314;
}

uint64_t PowerManager_SetPowerBudgetOnVAAndSendAcknowledgementToCPMSForResource(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = vaemSetCPMSPowerBudget(a3, a1);
  if (v6)
  {
    uint64_t v7 = v6;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v7;
  }
  else
  {
    return PowerManager_SendAcknowledgementToCPMSForResource(a1, a2, a3);
  }
}

float FigRoutingSessionManagerGetConfidenceThresholds(float *a1, float *a2)
{
  if (a1)
  {
    routingSessionManager_getConfiguration(&v8);
    FigGetCFPreferenceDoubleWithDefault();
    float result = v4;
    *a1 = result;
  }
  if (a2)
  {
    routingSessionManager_getConfiguration(&v7);
    FigGetCFPreferenceDoubleWithDefault();
    float result = v6;
    *a2 = result;
  }
  return result;
}

void routingSessionManager_getConfiguration(_OWORD *a1@<X8>)
{
  if (FigRoutingSessionManager_ensureConfigurationInitialized_onceToken != -1) {
    dispatch_once(&FigRoutingSessionManager_ensureConfigurationInitialized_onceToken, &__block_literal_global_75);
  }
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  MEMORY[0x199716EE0](gConfigurationMutex);
  long long v2 = xmmword_1E93594B0;
  a1[2] = xmmword_1E93594A0;
  a1[3] = v2;
  a1[4] = xmmword_1E93594C0;
  long long v3 = xmmword_1E9359490;
  *a1 = gConfiguration;
  a1[1] = v3;
  JUMPOUT(0x199716EF0);
}

uint64_t FigRoutingSessionManagerCopyLongFormVideoManager(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v8 = 0;
  CFNumberRef v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (!a2) {
    goto LABEL_9;
  }
  if (routingSessionManager_getSingletonQueue_sSingletonQueueOnce != -1) {
    dispatch_once(&routingSessionManager_getSingletonQueue_sSingletonQueueOnce, &__block_literal_global_92_0);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __FigRoutingSessionManagerCopyLongFormVideoManager_block_invoke;
  block[3] = &unk_1E57C5B30;
  block[4] = &v8;
  dispatch_sync((dispatch_queue_t)routingSessionManager_getSingletonQueue_sSingletonQueue, block);
  long long v3 = (const void *)v9[3];
  if (v3)
  {
    uint64_t v4 = 0;
    *a2 = CFRetain(v3);
  }
  else
  {
LABEL_9:
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v5 = (const void *)v9[3];
  if (v5) {
    CFRelease(v5);
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_194E7CAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef __FigRoutingSessionManagerCopyLongFormVideoManager_block_invoke(uint64_t a1)
{
  CFTypeRef result = (CFTypeRef)sLongFormVideoManager;
  if (sLongFormVideoManager) {
    CFTypeRef result = CFRetain((CFTypeRef)sLongFormVideoManager);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t FigRoutingSessionManagerInit(const void *a1)
{
  if (a1)
  {
    CFRetain(a1);
    if (routingSessionManager_getSingletonQueue_sSingletonQueueOnce != -1) {
      dispatch_once(&routingSessionManager_getSingletonQueue_sSingletonQueueOnce, &__block_literal_global_92_0);
    }
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __FigRoutingSessionManagerInit_block_invoke;
    void v4[3] = &__block_descriptor_40_e5_v8__0l;
    void v4[4] = a1;
    MXDispatchAsync((uint64_t)"FigRoutingSessionManagerInit", (uint64_t)"FigRoutingSessionManager.m", 3569, 0, 0, routingSessionManager_getSingletonQueue_sSingletonQueue, (uint64_t)v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void __FigRoutingSessionManagerInit_block_invoke(uint64_t a1)
{
  valuePtr[16] = *MEMORY[0x1E4F143B8];
  if (sLongFormVideoManager) {
    goto LABEL_73;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v3 = *(const void **)(a1 + 32);
  uint64_t v4 = (void *)MEMORY[0x1997179E0]();
  getpid();
  CFNumberRef SInt32 = (const void *)FigCFNumberCreateSInt32();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  FigRoutingSessionManagerGetClassID();
  if (CMDerivedObjectCreate()) {
    goto LABEL_56;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3) {
    CFTypeRef v7 = CFRetain(v3);
  }
  else {
    CFTypeRef v7 = 0;
  }
  *(void *)uint64_t DerivedStorage = v7;
  uint64_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v9 = dispatch_queue_create("com.apple.coremedia.routing-session-manager.session-expiration", v8);
  *(void *)(DerivedStorage + 32) = v9;
  if (!v9)
  {
    FigSignalErrorAt();
LABEL_56:
    CFStringRef v13 = 0;
    CFDictionaryRef v14 = 0;
    goto LABEL_66;
  }
  uint64_t v10 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = v10;
  if (!v10) {
    goto LABEL_56;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 104) = Mutable;
  if (!Mutable) {
    goto LABEL_56;
  }
  CFArrayRef v12 = CFArrayCreate(v2, 0, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 48) = v12;
  if (!v12) {
    goto LABEL_56;
  }
  CFStringRef v13 = CFStringCreateWithFormat(v2, 0, @"FigRoutingSessionManager - %p", 0);
  CFDictionaryRef v14 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt();
  LODWORD(valuePtr[0]) = 0;
  getpid();
  CFNumberRef v15 = (const __CFNumber *)FigCFNumberCreateSInt32();
  CFNumberGetValue(v15, kCFNumberSInt32Type, valuePtr);
  CFTypeRef v16 = [MXSystemController alloc];
  CFNumberRef v17 = [(MXSystemController *)v16 initWithPID:LODWORD(valuePtr[0])];
  *(void *)(DerivedStorage + 16) = v17;
  uint64_t v18 = v17;

  if (v15) {
    CFRelease(v15);
  }
  int v19 = (uint64_t *)(DerivedStorage + 8);
  if (FigRouteDiscovererCreate((int)v2, v14, (CFTypeRef *)(DerivedStorage + 8))) {
    goto LABEL_66;
  }
  uint64_t v20 = *v19;
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v22 = v21 ? v21 : 0;
  long long v23 = *(unsigned int (**)(uint64_t, __CFString *, const void *))(v22 + 56);
  if (!v23 || v23(v20, @"clientPID", SInt32)) {
    goto LABEL_66;
  }
  uint64_t v24 = *v19;
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v26 = v25 ? v25 : 0;
  uint64_t v27 = *(unsigned int (**)(uint64_t, __CFString *, CFStringRef))(v26 + 56);
  if (!v27 || v27(v24, @"clientName", v13)) {
    goto LABEL_66;
  }
  unsigned int v46 = 0;
  unsigned __int8 v47 = &v46;
  uint64_t v48 = 0x2020000000;
  LODWORD(v49) = 0;
  valuePtr[0] = MEMORY[0x1E4F143A8];
  valuePtr[1] = 3221225472;
  valuePtr[2] = __routingSessionManager_loadAirPlayRoutePredictionFramework_block_invoke;
  valuePtr[3] = &unk_1E57C5B30;
  valuePtr[4] = &v46;
  if (routingSessionManager_loadAirPlayRoutePredictionFramework_onceToken != -1) {
    dispatch_once(&routingSessionManager_loadAirPlayRoutePredictionFramework_onceToken, valuePtr);
  }
  _Block_object_dispose(&v46, 8);
  *(void *)(DerivedStorage + 24) = (id)[(id)sARPRoutePredictorClass routePredictor];
  CMNotificationCenterGetDefaultLocalCenter();
  if (FigNotificationCenterAddWeakListener()) {
    goto LABEL_66;
  }
  long long context = v4;
  CMNotificationCenterGetDefaultLocalCenter();
  if (FigNotificationCenterAddWeakListener()) {
    goto LABEL_66;
  }
  unsigned int v46 = @"SomeLongFormVideoClientIsActiveOverAirPlayVideoDidChange";
  unsigned __int8 v47 = (__CFString **)@"SomeLongFormVideoClientIsPlayingOverAirPlayVideo";
  uint64_t v48 = @"SomeLongFormVideoClientIsPlayingDidChange";
  char v49 = @"SomeSharePlayCapableCallSessionIsActiveDidChange";
  objc_msgSend(*(id *)(DerivedStorage + 16), "setAttributeForKey:andValue:", @"SubscribeToNotifications", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v46, 4));
  CMNotificationCenterGetDefaultLocalCenter();
  if (FigNotificationCenterAddWeakListener()) {
    goto LABEL_66;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  if (FigNotificationCenterAddWeakListener()) {
    goto LABEL_66;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  if (FigNotificationCenterAddWeakListener()) {
    goto LABEL_66;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  if (*(void *)(DerivedStorage + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    if (FigNotificationCenterAddWeakListener()) {
      goto LABEL_66;
    }
  }
  CFTypeRef cf = 0;
  uint64_t v28 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v30 + 64);
  if (v31 && !v31(v28, &cf))
  {
    if (routingSessionManager_routeIsBuiltIn((const __CFArray *)cf))
    {
      if (dword_1E9359DE0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      routingSessionManager_establishRoutingSessionFromCurrentRoutes(0, (const __CFArray *)cf, @"Initial routes from FigRoutingContext");
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  *(void *)(DerivedStorage + 112) = routingSessionManager_copyEligibleInEarHeadphones(*(void *)(DerivedStorage + 8));
  routingSessionManager_updateSessionFromLatestInEarHeadphones(0);
  *(unsigned char *)(DerivedStorage + 12singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = [*(id *)(DerivedStorage + 16) someSharePlayCapableCallSessionIsActive];
  routingSessionManager_updateSessionFromLatestActiveStatusOfSharePlayCapableCallSession(0);
  routingSessionManager_updatePredictedDestinations(0, (uint64_t)&__block_literal_global_103);
  int v33 = dlopen("/System/Library/PrivateFrameworks/MobileWiFi.framework/MobileWiFi", 1);
  uint64_t v34 = v33;
  if (!v33) {
    goto LABEL_54;
  }
  uint64_t v35 = (uint64_t (*)(const __CFAllocator *, void))dlsym(v33, "WiFiManagerClientCreate");
  sMobileWiFiWiFiManagerClientCreate = (uint64_t)v35;
  if (!v35) {
    goto LABEL_54;
  }
  sFigNetworkInterfaceMonitorWifiManagerClient = v35(v2, 0);
  if (!sFigNetworkInterfaceMonitorWifiManagerClient)
  {
LABEL_65:
    dlclose(v34);
    goto LABEL_66;
  }
  unsigned int v36 = (uint64_t (*)(uint64_t))dlsym(v34, "WiFiManagerClientCopyDevices");
  sMobileWiFiWiFiManagerClientCopyDevices = (uint64_t)v36;
  if (!v36) {
    goto LABEL_54;
  }
  CFArrayRef v37 = (const __CFArray *)v36(sFigNetworkInterfaceMonitorWifiManagerClient);
  CFStringRef v38 = v37;
  if (!v37 || !CFArrayGetCount(v37))
  {
LABEL_60:
    if (sFigNetworkInterfaceMonitorWifiManagerClient) {
      CFRelease((CFTypeRef)sFigNetworkInterfaceMonitorWifiManagerClient);
    }
    if (v38) {
      CFRelease(v38);
    }
    if (!v34) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v38, 0);
  sFigRoutingSessionManagerWiFiDevice = (uint64_t)ValueAtIndex;
  if (ValueAtIndex) {
    CFRetain(ValueAtIndex);
  }
  CFRelease(v38);
  CFStringRef v38 = dlsym(v34, "WiFiManagerClientScheduleWithRunLoop");
  sMobileWiFiWiFiManagerClientScheduleWithRunLoop = (uint64_t)v38;
  if (!v38)
  {
LABEL_59:
    uint64_t v4 = context;
    goto LABEL_60;
  }
  uint64_t v40 = sFigNetworkInterfaceMonitorWifiManagerClient;
  CFRunLoopRef Main = CFRunLoopGetMain();
  ((void (*)(uint64_t, CFRunLoopRef, void))v38)(v40, Main, *MEMORY[0x1E4F1D418]);
  uint64_t v42 = (void (*)(uint64_t, void (*)(uint64_t, const void *), void))dlsym(v34, "WiFiDeviceClientRegisterPowerCallback");
  sWiFiDeviceClientRegisterPowerCallbacuint64_t k = (uint64_t)v42;
  if (!v42)
  {
    CFStringRef v38 = 0;
    goto LABEL_59;
  }
  v42(sFigRoutingSessionManagerWiFiDevice, routingSessionManager_wifiPowerStatusChanged, 0);
  sWiFiDeviceClientGetPower = (uint64_t (*)(void))dlsym(v34, "WiFiDeviceClientGetPower");
  uint64_t v4 = context;
  if (!sWiFiDeviceClientGetPower)
  {
LABEL_54:
    CFStringRef v38 = 0;
    goto LABEL_60;
  }
LABEL_66:
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (SInt32) {
    CFRelease(SInt32);
  }
LABEL_73:
  unsigned int v43 = *(const void **)(a1 + 32);
  if (v43) {
    CFRelease(v43);
  }
}

void routingSessionManager_updateConfiguration(const void *a1)
{
  if (a1)
  {
    CFTypeID v2 = CFGetTypeID(a1);
    if (v2 == CFDictionaryGetTypeID())
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"RoutingSessionManagerConfiguration");
      if (Value)
      {
        CFDictionaryRef v4 = Value;
        CFTypeID v5 = CFGetTypeID(Value);
        if (v5 == CFDictionaryGetTypeID())
        {
          double v6 = (const void *)MGCopyAnswer();
          MEMORY[0x199716EE0](gConfigurationMutex);
          if (CFDictionaryContainsKey(v4, @"RoutePredictionsDisabled"))
          {
            CFTypeRef v7 = CFDictionaryGetValue(v4, @"RoutePredictionsDisabled");
            if (v7)
            {
              CFTypeID v8 = CFGetTypeID(v7);
              if (v8 == CFDictionaryGetTypeID())
              {
                if (FigCFDictionaryGetBooleanIfPresent())
                {
                  if (dword_1E9359DE0)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  LOBYTE(gConfiguration) = 1;
                }
              }
            }
          }
          if (CFDictionaryContainsKey(v4, @"AutoRoutingDisabled"))
          {
            uint64_t v10 = CFDictionaryGetValue(v4, @"AutoRoutingDisabled");
            if (v10)
            {
              CFTypeID v11 = CFGetTypeID(v10);
              if (v11 == CFDictionaryGetTypeID())
              {
                if (FigCFDictionaryGetBooleanIfPresent())
                {
                  if (dword_1E9359DE0)
                  {
                    CFArrayRef v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  BYTE1(gConfiguration) = 1;
                }
              }
            }
          }
          if (FigCFDictionaryGetFloatIfPresent() && -1.0 >= 0.0 && -1.0 <= 1.0)
          {
            if (dword_1E9359DE0)
            {
              CFStringRef v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            DWORD1(gConfiguration) = -1082130432;
          }
          if (FigCFDictionaryGetFloatIfPresent() && -1.0 >= 0.0 && -1.0 <= 1.0)
          {
            if (dword_1E9359DE0)
            {
              CFDictionaryRef v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            DWORD2(gConfiguration) = -1082130432;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1E9359DE0)
            {
              CFNumberRef v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(void *)&xmmword_1E9359490 = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1E9359DE0)
            {
              CFTypeRef v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *((void *)&xmmword_1E9359490 + 1) = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1E9359DE0)
            {
              CFNumberRef v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(void *)&xmmword_1E93594A0 = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1E9359DE0)
            {
              uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *((void *)&xmmword_1E93594A0 + 1) = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1E9359DE0)
            {
              int v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(double *)&xmmword_1E93594B0 = -1.0 * 60.0;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1E9359DE0)
            {
              uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *((void *)&xmmword_1E93594B0 + 1) = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent() && -1.0 >= 0.0)
          {
            if (dword_1E9359DE0)
            {
              uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(void *)&xmmword_1E93594C0 = 0xBFF0000000000000;
          }
          if (FigCFDictionaryGetDoubleIfPresent())
          {
            v22.n128_u64[0] = 0xBFF0000000000000;
            if (-1.0 >= 0.0)
            {
              if (dword_1E9359DE0)
              {
                long long v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v22.n128_f64[0] = -1.0 * 60.0;
              *((double *)&xmmword_1E93594C0 + 1) = -1.0 * 60.0;
            }
          }
          MEMORY[0x199716EF0](gConfigurationMutex, v22);
          if (v6) {
            CFRelease(v6);
          }
        }
      }
    }
  }
}

dispatch_queue_t __routingSessionManager_getSingletonQueue_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.routingsessionmanager.singleton", v0);
  routingSessionManager_getSingletonQueue_sSingletonQueue = (uint64_t)result;
  return result;
}

void routingSessionManager_routeConfigUpdated(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Value = (void *)CFDictionaryGetValue(a5, @"routeConfigUpdateReason");
  CFTypeRef cf = 0;
  if (*DerivedStorage == a4)
  {
    uint64_t v10 = Value;
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFStringRef v13 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v12 + 64);
    if (!v13 || v13(a4, &cf)) {
      goto LABEL_10;
    }
    if (FigCFEqual() || FigCFEqual()) {
      goto LABEL_9;
    }
    if (FigCFEqual())
    {
      if (!routingSessionManager_routeIsBuiltIn((const __CFArray *)cf))
      {
LABEL_9:
        routingSessionManager_establishRoutingSessionFromCurrentRoutes(a2, (const __CFArray *)cf, v10);
        goto LABEL_10;
      }
    }
    else if (!FigCFEqual())
    {
      goto LABEL_10;
    }
    routingSessionManager_updateCurrentSession(a2, 0, 0, 0, 0, 0, 0, 0, 0, 0, v10, 0);
LABEL_10:
    if (cf) {
      CFRelease(cf);
    }
    return;
  }
  FigSignalErrorAt();
}

void routingSessionManager_longFormVideoPlayingChanged(uint64_t a1, const void *a2)
{
}

uint64_t routingSessionManager_airPlayVideoActiveChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 16) == a4)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t routingSessionManager_airPlayVideoPlayingChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 16) == a4)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void routingSessionManager_sharePlayCapableCallSessionIsActiveChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetValue();
  int v4 = FigCFEqual();
  if (v4 != *(unsigned __int8 *)(DerivedStorage + 120))
  {
    char v5 = v4;
    if (dword_1E9359DE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(unsigned char *)(DerivedStorage + 12singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = v5;
    routingSessionManager_updateSessionFromLatestActiveStatusOfSharePlayCapableCallSession(a2);
  }
}

void routingSessionManager_predictionsForCurrentContextUpdated(uint64_t a1, const void *a2)
{
  if (dword_1E9359DE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  routingSessionManager_updatePredictedDestinations(a2, (uint64_t)&__block_literal_global_254);
}

void routingSessionManager_updateSessionFromLatestInEarHeadphones(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_queue_t v9 = 0;
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  Float32 = (const void *)FigCFNumberCreateFloat32();
  CFArrayRef v5 = routingSessionManager_copyEligibleInEarHeadphones(*(void *)(DerivedStorage + 8));
  if (!v5)
  {
    dispatch_queue_t v9 = 0;
    routingSessionManager_updateCurrentSession(a1, 0, 0, 0, 0, 1, 0, 0, 0, 0, @"Headphones are not in-ear", 0);
    goto LABEL_10;
  }
  CFArrayRef v6 = v5;
  if (CFArrayGetCount(v5) < 1)
  {
    dispatch_queue_t v9 = 0;
    routingSessionManager_updateCurrentSession(a1, 0, 0, 0, 0, 1, 0, 0, 0, 0, @"Headphones are not in-ear", 0);
    CFArrayRef v8 = v6;
  }
  else
  {
    DestinationWithRouteDescriptors = routingSessionManager_createDestinationWithRouteDescriptors(v6);
    if (!FigRoutingSessionCreateForInEarHeadphones(v3, DestinationWithRouteDescriptors, &v9)) {
      routingSessionManager_updateCurrentSession(a1, v9, 0, 0, 0, 1, 0, 0, 0, 0, @"Headphones are in-ear", 0);
    }
    CFRelease(v6);
    if (DestinationWithRouteDescriptors) {
      CFRelease(DestinationWithRouteDescriptors);
    }
    CFArrayRef v8 = (const __CFArray *)v9;
    if (!v9)
    {
LABEL_10:
      if (!Float32) {
        return;
      }
      goto LABEL_11;
    }
  }
  CFRelease(v8);
  if (!Float32) {
    return;
  }
LABEL_11:
  CFRelease(Float32);
}

void routingSessionManager_updateSessionFromLatestActiveStatusOfSharePlayCapableCallSession(uint64_t a1)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  cf[0] = 0;
  uint64_t v3 = *(void *)DerivedStorage;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFArrayRef v6 = *(unsigned int (**)(uint64_t, CFArrayRef *))(v5 + 64);
  if (!v6 || v6(v3, &theArray)) {
    goto LABEL_14;
  }
  if (!theArray || CFArrayGetCount(theArray) <= 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_14:
    DestinationWithRouteDescriptors = 0;
    goto LABEL_15;
  }
  if (*(unsigned char *)(DerivedStorage + 120))
  {
    DestinationWithRouteDescriptors = routingSessionManager_createDestinationWithRouteDescriptors(theArray);
    if (FigRoutingSessionCreateForActiveSharePlayCapableCallSession(*MEMORY[0x1E4F1CF80], DestinationWithRouteDescriptors, cf))goto LABEL_15; {
    CFArrayRef v8 = @"SharePlay-capable call session is active";
    }
    CFTypeRef v9 = cf[0];
  }
  else
  {
    CFTypeRef v9 = 0;
    DestinationWithRouteDescriptors = 0;
    CFArrayRef v8 = @"SharePlay-capable call session is not active";
  }
  routingSessionManager_updateCurrentSession(a1, v9, 0, 0, 0, 0, 1, 0, 0, 0, v8, 0);
LABEL_15:
  if (theArray) {
    CFRelease(theArray);
  }
  if (DestinationWithRouteDescriptors) {
    CFRelease(DestinationWithRouteDescriptors);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

void routingSessionManager_updatePredictedDestinations(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  double Current = CFAbsoluteTimeGetCurrent();
  routingSessionManager_getConfiguration(&v15);
  double v6 = v16;
  CFTypeRef cf = 0;
  uint64_t v7 = *DerivedStorage;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, CFTypeRef *))(v9 + 64);
  if (v10) {
    v10(v7, &cf);
  }
  double v11 = Current + v6;
  if (a1) {
    CFRetain(a1);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __routingSessionManager_updatePredictedDestinations_block_invoke;
  v13[3] = &__block_descriptor_48_e20_C16__0____CFArray__8l;
  v13[4] = a1;
  void v13[5] = DerivedStorage;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __routingSessionManager_updatePredictedDestinations_block_invoke_274;
  v12[3] = &unk_1E57CB568;
  v12[4] = a2;
  void v12[5] = a1;
  routingSessionManager_discoverRoutes((uint64_t)v13, (uint64_t)v12, v11);
  if (cf) {
    CFRelease(cf);
  }
}

void routingSessionManager_Finalize()
{
  uint64_t v0 = (void *)MEMORY[0x1997179E0]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)(DerivedStorage + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)(DerivedStorage + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  CFTypeID v2 = *(const void **)(DerivedStorage + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 72);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 80);
  if (v4) {
    CFRelease(v4);
  }
  FigSimpleMutexDestroy();
  uint64_t v5 = *(const void **)(DerivedStorage + 48);
  if (v5) {
    CFRelease(v5);
  }
  double v6 = *(const void **)(DerivedStorage + 104);
  if (v6) {
    CFRelease(v6);
  }

  uint64_t v7 = *(const void **)(DerivedStorage + 112);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 32);
  if (v8) {
    dispatch_release(v8);
  }
}

__CFString *routingSessionManager_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFTypeRef cf = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t, CFTypeRef *))(v4 + 8);
  if (v5)
  {
    v5(a1, &cf);
    CFTypeRef v6 = cf;
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  CFStringAppendFormat(Mutable, 0, @"<FigRoutingSessionManager = %p: currentSession = %@>", a1, v6);
  if (cf) {
    CFRelease(cf);
  }
  return Mutable;
}

uint64_t routingSessionManager_CopyCurrentSession(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  uint64_t v4 = *(const void **)(DerivedStorage + 72);
  if (!v4)
  {
    MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
    goto LABEL_5;
  }
  CFTypeRef v5 = CFRetain(v4);
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  if (!v5)
  {
LABEL_5:
    *a2 = 0;
    return 0;
  }
  *a2 = CFRetain(v5);
  CFRelease(v5);
  return 0;
}

uint64_t routingSessionManager_StartSessionForHighConfidenceDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (dword_1E9359DE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v9) {
    return v9(a1, a2, a3);
  }
  else {
    return 4294954514;
  }
}

uint64_t routingSessionManager_CopyLikelyDestinations(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
    if (sWiFiDeviceClientGetPower) {
      BOOL v5 = sFigRoutingSessionManagerWiFiDevice == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if ((v5 || sWiFiDeviceClientGetPower()) && *(void *)(v4 + 56))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      double v7 = Current - MEMORY[0x199716270]([*(id *)(v4 + 56) microLocationEventDate]);
      routingSessionManager_getConfiguration(v12);
      if (v7 >= v13)
      {
        if (dword_1E9359DE0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        uint64_t v8 = *(const void **)(v4 + 48);
        if (v8)
        {
          uint64_t v9 = CFRetain(v8);
          MEMORY[0x199716EF0](*(void *)(v4 + 40));
          if (v9) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
      }
    }
    MEMORY[0x199716EF0](*(void *)(v4 + 40));
LABEL_15:
    uint64_t v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D510]);
    if (!v9)
    {
      *a2 = 0;
      return 0;
    }
LABEL_16:
    *a2 = CFRetain(v9);
    CFRelease(v9);
    return 0;
  }
  return FigSignalErrorAt();
}

void routingSessionManager_PrepareForPlayback(const void *a1, uint64_t a2, uint64_t a3)
{
  v28[7] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __routingSessionManager_PrepareForPlayback_block_invoke;
  aBlock[3] = &__block_descriptor_48_e8_v12__0i8l;
  aBlock[4] = a2;
  aBlock[5] = a3;
  double v7 = (void (**)(void *, void))_Block_copy(aBlock);
  double Current = CFAbsoluteTimeGetCurrent();
  routingSessionManager_getConfiguration(v24);
  double v9 = v25;
  if (dword_1E9359DE0)
  {
    int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!routingSessionManager_routePredictionsEnabled())
  {
    CFTypeRef v13 = 0;
LABEL_30:
    v7[2](v7, 0);
    goto LABEL_31;
  }
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  CFArrayRef v11 = *(const __CFArray **)(DerivedStorage + 104);
  if (v11) {
    BOOL v12 = CFArrayGetCount(v11) > 0;
  }
  else {
    BOOL v12 = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 72);
  if (v14) {
    CFTypeRef v13 = CFRetain(v14);
  }
  else {
    CFTypeRef v13 = 0;
  }
  int v15 = *(unsigned __int8 *)(DerivedStorage + 96);
  *(unsigned char *)(DerivedStorage + 96) = 0;
  if (v15) {
    int v16 = 1;
  }
  else {
    int v16 = v12;
  }
  if (v16 == 1) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 104), v7);
  }
  int v17 = *(unsigned __int8 *)(DerivedStorage + 64);
  *(unsigned char *)(DerivedStorage + 64) = 0;
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  if (v17 && dword_1E9359DE0)
  {
    int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((v16 & 1) == 0)
  {
    if (dword_1E9359DE0)
    {
      int v23 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_30;
  }
  if (v15)
  {
    if (a1) {
      CFRetain(a1);
    }
    if (v13) {
      CFRetain(v13);
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __routingSessionManager_PrepareForPlayback_block_invoke_108;
    v21[3] = &__block_descriptor_56_e8_v12__0i8l;
    double v19 = Current + v9;
    os_log_type_t v21[4] = a1;
    v21[5] = DerivedStorage;
    void v21[6] = v13;
    if (a1) {
      CFRetain(a1);
    }
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke;
    v27[3] = &unk_1E57CB540;
    v27[4] = v21;
    v27[5] = a1;
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke_2;
    v28[3] = &unk_1E57CB568;
    v28[4] = v21;
    v28[5] = a1;
    routingSessionManager_discoverRoutes((uint64_t)v27, (uint64_t)v28, v19);
  }
LABEL_31:
  if (v13) {
    CFRelease(v13);
  }
  _Block_release(v7);
}

uint64_t routingSessionManager_getAirPlayVideoActive(uint64_t a1, unsigned char *a2)
{
  char v3 = [*(id *)(CMBaseObjectGetDerivedStorage() + 16) someLongFormVideoClientIsActiveOverAirPlayVideo];
  if (a2)
  {
    *a2 = v3;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t routingSessionManager_getAirPlayVideoPlaying(uint64_t a1, unsigned char *a2)
{
  char v3 = [*(id *)(CMBaseObjectGetDerivedStorage() + 16) someLongFormVideoClientIsPlayingOverAirPlayVideo];
  if (a2)
  {
    *a2 = v3;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t routingSessionManager_UpdateCurrentSessionFromLikelyDestinations(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9359DE0)
  {
    int v12 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 32);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  CFTypeRef v10[2] = __routingSessionManager_UpdateCurrentSessionFromLikelyDestinations_block_invoke;
  v10[3] = &__block_descriptor_64_e5_v8__0l;
  v10[4] = a1;
  void v10[5] = DerivedStorage;
  v10[6] = a2;
  void v10[7] = a3;
  MXDispatchAsync((uint64_t)"routingSessionManager_UpdateCurrentSessionFromLikelyDestinations", (uint64_t)"FigRoutingSessionManager.m", 1386, 0, 0, v8, (uint64_t)v10);
  return 0;
}

uint64_t routingSessionManager_GetPrefersLikelyDestinationsOverCurrentSession(uint64_t a1, char *a2)
{
  v22[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char isVideoOnScreen = routingSessionManager_isVideoOnScreen(a1);
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  CFTypeRef cf = 0;
  v22[0] = 0;
  uint64_t v6 = *(void *)(DerivedStorage + 72);
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  double v9 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v8 + 8);
  if (!v9)
  {
    char shouldUpdateCurrentSession = 0;
    uint64_t v16 = 4294954514;
    goto LABEL_27;
  }
  uint64_t v10 = v9(v6, v22);
  if (v10)
  {
    uint64_t v16 = v10;
    char shouldUpdateCurrentSession = 0;
  }
  else
  {
LABEL_7:
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 48);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        goto LABEL_19;
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), i);
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"routingSessionDestination_RouteDescriptors");
      if (!routingSessionManager_routeIsBuiltIn(Value))
      {
        if (routingSessionManager_routeDescriptorsProvideExternalVideoPlayback(Value)) {
          break;
        }
      }
    }
    if (ValueAtIndex)
    {
      uint64_t v16 = FigRoutingSessionCreate(*MEMORY[0x1E4F1CF80], 0, ValueAtIndex, &cf);
      CFTypeRef v17 = cf;
      if (!v16)
      {
        char shouldUpdateCurrentSession = routingSessionManager_shouldUpdateCurrentSession(*(void **)(DerivedStorage + 24), *(void *)(DerivedStorage + 72), *(void **)(DerivedStorage + 88), *(unsigned __int8 *)(DerivedStorage + 96), (uint64_t)cf, *(void **)(DerivedStorage + 56), 1, 0, 0, isVideoOnScreen);
        CFTypeRef v17 = cf;
        if (!cf) {
          goto LABEL_27;
        }
        goto LABEL_18;
      }
      char shouldUpdateCurrentSession = 0;
      if (cf) {
LABEL_18:
      }
        CFRelease(v17);
    }
    else
    {
LABEL_19:
      if (*(void *)(DerivedStorage + 72))
      {
        if (dword_1E9359DE0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        char shouldUpdateCurrentSession = 0;
      }
      else
      {
        if (!dword_1E9359DE0)
        {
          uint64_t v16 = 0;
          char shouldUpdateCurrentSession = 1;
          goto LABEL_27;
        }
        double v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        char shouldUpdateCurrentSession = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v16 = 0;
    }
  }
LABEL_27:
  if (v22[0]) {
    CFRelease(v22[0]);
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  if (!v16)
  {
    if (a2)
    {
      uint64_t v16 = 0;
      *a2 = shouldUpdateCurrentSession;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v16;
}

uint64_t routingSessionManager_StartSessionWithRouteDescriptors(const void *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v26 = 0;
  DestinationWithRouteDescriptors = routingSessionManager_createDestinationWithRouteDescriptors(a2);
  routingSessionManager_getConfiguration(&v27);
  FigGetCFPreferenceDoubleWithDefault();
  double v7 = v6;
  double Current = CFAbsoluteTimeGetCurrent();
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  double v10 = CFAbsoluteTimeGetCurrent();
  routingSessionManager_getConfiguration(&v24);
  CFDateRef v11 = CFDateCreate(v9, v10 - v25);
  uint64_t v12 = FigRoutingSessionCreate((uint64_t)v9, 0, DestinationWithRouteDescriptors, &v26);
  if (v12)
  {
    uint64_t v14 = 0;
    if (v11) {
LABEL_12:
    }
      CFRelease(v11);
  }
  else
  {
    routingSessionManager_updateCurrentSession(a1, v26, 0, 1, 0, 0, 0, 0, 0, 0, @"Set pending route", 0);
    uint64_t v13 = [FigRoutingSessionUpdateState alloc];
    uint64_t v14 = [(FigRoutingSessionUpdateState *)v13 initWithNewSession:v26];
    if (a1) {
      CFRetain(a1);
    }
    routingSessionManager_getConfiguration(v22);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __routingSessionManager_StartSessionWithRouteDescriptors_block_invoke;
    v21[3] = &unk_1E57CB728;
    v21[5] = a1;
    void v21[6] = DerivedStorage;
    os_log_type_t v21[4] = v14;
    routingSessionManager_waitForRecentPredictions(a1, v11, (uint64_t)v21, v23);
    if (DestinationWithRouteDescriptors) {
      CFRetain(DestinationWithRouteDescriptors);
    }
    if (a1) {
      CFRetain(a1);
    }
    double v15 = v7 + Current;
    if (v26)
    {
      CFRetain(v26);
      uint64_t v16 = v26;
    }
    else
    {
      uint64_t v16 = 0;
    }
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __routingSessionManager_StartSessionWithRouteDescriptors_block_invoke_3;
    v19[3] = &unk_1E57CB778;
    void v19[6] = a1;
    v19[7] = v16;
    v19[8] = DerivedStorage;
    v19[4] = v14;
    v19[5] = DestinationWithRouteDescriptors;
    __int16 v20 = 1;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = __routingSessionManager_StartSessionWithRouteDescriptors_block_invoke_5;
    v18[3] = &__block_descriptor_56_e8_v12__0i8l;
    v18[4] = a1;
    v18[5] = v16;
    void v18[6] = DestinationWithRouteDescriptors;
    routingSessionManager_discoverRoutes((uint64_t)v19, (uint64_t)v18, v15);
    if (v11) {
      goto LABEL_12;
    }
  }

  if (DestinationWithRouteDescriptors) {
    CFRelease(DestinationWithRouteDescriptors);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v12;
}

uint64_t routingSessionManager_StartSuppressingLikelyDestinations(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9359DE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  *(unsigned char *)(DerivedStorage + 64) = 1;
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  routingSessionManager_updatePredictedDestinations(a1, (uint64_t)&__block_literal_global_232);
  return 0;
}

uint64_t routingSessionManager_StopSuppressingLikelyDestinations(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9359DE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  *(unsigned char *)(DerivedStorage + 64) = 0;
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  routingSessionManager_updatePredictedDestinations(a1, (uint64_t)&__block_literal_global_234);
  return 0;
}

uint64_t routingSessionManager_routePredictionsEnabled()
{
  if (MX_FeatureFlags_IsCorianderEnabled()) {
    return 0;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"EnableRoutePrediction", @"com.apple.coremedia", &keyExistsAndHasValidFormat);
  routingSessionManager_getConfiguration(v3);
  if (!LOBYTE(v3[0]) || !keyExistsAndHasValidFormat)
  {
    routingSessionManager_getConfiguration(v2);
    return LOBYTE(v2[0]);
  }
  return AppBooleanValue;
}

void routingSessionManager_discoverRoutes(uint64_t a1, uint64_t a2, double a3)
{
  CFTypeRef cf = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  getpid();
  CFNumberRef SInt32 = (const void *)FigCFNumberCreateSInt32();
  uint64_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  CFAllocatorRef v9 = dispatch_queue_create("com.apple.coremedia.routing-session-manager.discovery", v8);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDateRef v11 = (const void *)FigCFNumberCreateSInt32();
  CFDictionarySetValue(Mutable, @"discovererType", v11);
  uint64_t v12 = FigRouteDiscovererCreate((int)v6, Mutable, &cf);
  if (v12) {
    goto LABEL_49;
  }
  CFTypeRef v13 = cf;
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(CFTypeRef, __CFString *, const void *))(v15 + 56);
  if (!v16) {
    goto LABEL_16;
  }
  uint64_t v12 = v16(v13, @"clientPID", SInt32);
  if (v12) {
    goto LABEL_49;
  }
  CFTypeRef v17 = cf;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v19 = v18 ? v18 : 0;
  __int16 v20 = *(uint64_t (**)(CFTypeRef, __CFString *, __CFString *))(v19 + 56);
  if (!v20)
  {
LABEL_16:
    uint64_t v28 = 4294954514;
    if (!a2)
    {
LABEL_18:
      __n128 v22 = 0;
      goto LABEL_19;
    }
LABEL_17:
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v28);
    goto LABEL_18;
  }
  uint64_t v12 = v20(v17, @"clientName", @"FigRoutingSessionManager");
  if (v12)
  {
LABEL_49:
    uint64_t v28 = v12;
    if (!a2) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  CFTypeRef v21 = cf;
  __n128 v22 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(v22, @"RouteDiscoverer", v21);
  if (v22) {
    CFRetain(v22);
  }
  v45[0] = MEMORY[0x1E4F143A8];
  v45[1] = 3221225472;
  v45[2] = __routingSessionManager_discoverRoutes_block_invoke;
  v45[3] = &unk_1E57C59C0;
  v45[4] = a1;
  v45[5] = v22;
  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 3221225472;
  v44[2] = __routingSessionManager_discoverRoutes_block_invoke_2;
  v44[3] = &unk_1E57CB568;
  v44[4] = a2;
  v44[5] = v22;
  double v23 = CFDictionaryGetValue(v22, @"RouteDiscoverer");
  uint64_t value = FigNotificationListenerCreate(v23, @"Discoverer_AvailableRoutesChanged");
  long long v24 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v9);
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v29 = *(uint64_t (**)(const void *, __CFString *, __CFString *))(v27 + 56);
  uint64_t v39 = a1;
  if (!v29)
  {
    uint64_t v34 = 0;
    BOOL v32 = 0;
    int started = -12782;
    goto LABEL_40;
  }
  int v30 = v29(v23, @"DiscoveryMode", @"DiscoveryMode_AirPlayInfraOnly");
  if (v30)
  {
    int started = v30;
    uint64_t v34 = 0;
    BOOL v32 = 0;
LABEL_40:
    uint64_t v35 = value;
    if (!value) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  CFDictionarySetValue(v22, @"NotificationListener", value);
  if (v22) {
    CFRetain(v22);
  }
  v48[10] = MEMORY[0x1E4F143A8];
  v48[11] = 3221225472;
  v48[12] = __routingSessionManager_startDiscovery_block_invoke;
  v48[13] = &__block_descriptor_40_e5_v8__0l;
  v48[14] = v22;
  DispatchSourceBlocuint64_t k = (void *)FigDispatchCreateDispatchSourceBlock();
  v48[5] = MEMORY[0x1E4F143A8];
  v48[6] = 3221225472;
  v48[7] = __routingSessionManager_startDiscovery_block_invoke_127;
  v48[8] = &__block_descriptor_40_e5_v8__0l;
  v48[9] = v22;
  BOOL v32 = (const void *)FigDispatchCreateDispatchSourceBlock();
  dispatch_time_t v33 = dispatch_time(0, (uint64_t)((a3 - Current) * 1000000000.0));
  dispatch_source_set_timer(v24, v33, 0xFFFFFFFFFFFFFFFFLL, 0);
  uint64_t v34 = DispatchSourceBlock;
  dispatch_source_set_event_handler(v24, DispatchSourceBlock);
  dispatch_source_set_mandatory_cancel_handler();
  dispatch_resume(v24);
  CFDictionarySetValue(v22, @"TimeoutTimer", v24);
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 3221225472;
  v48[2] = __routingSessionManager_startDiscovery_block_invoke_2;
  v48[3] = &unk_1E57CB590;
  v48[4] = v45;
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 3221225472;
  v47[2] = __routingSessionManager_startDiscovery_block_invoke_3;
  v47[3] = &unk_1E57CB5B8;
  v47[4] = v44;
  uint64_t v35 = value;
  int started = FigNotificationListenerStartNotifications(value, (uint64_t)v9, v48, v47);
  if (value) {
LABEL_41:
  }
    CFRelease(v35);
LABEL_42:
  if (v24) {
    dispatch_release(v24);
  }
  _Block_release(v34);
  _Block_release(v32);
  if (!started)
  {
    if (v22) {
      CFRetain(v22);
    }
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 3221225472;
    v43[2] = __routingSessionManager_discoverRoutes_block_invoke_3;
    v43[3] = &unk_1E57C59C0;
    v43[4] = v39;
    v43[5] = v22;
    CFArrayRef v37 = v43;
    uint64_t v38 = 3024;
    goto LABEL_48;
  }
  if (v22)
  {
    CFRetain(v22);
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    v41[2] = __routingSessionManager_discoverRoutes_block_invoke_4;
    v41[3] = &__block_descriptor_44_e5_v8__0l;
    v41[4] = v22;
    int v42 = started;
    CFArrayRef v37 = v41;
    uint64_t v38 = 3032;
LABEL_48:
    MXDispatchAsync((uint64_t)"routingSessionManager_discoverRoutes", (uint64_t)"FigRoutingSessionManager.m", v38, 0, 0, v9, (uint64_t)v37);
  }
LABEL_19:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SInt32) {
    CFRelease(SInt32);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v9) {
    dispatch_release(v9);
  }
}

uint64_t __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke(uint64_t a1, const __CFArray *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef theDict = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  double v7 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v6 + 8);
  if (!v7) {
    goto LABEL_30;
  }
  uint64_t v8 = v7(v4, &cf);
  if (v8)
  {
LABEL_67:
    uint64_t v31 = v8;
LABEL_31:
    uint64_t v32 = *(void *)(a1 + 32);
    if (v32) {
      (*(void (**)(uint64_t, uint64_t))(v32 + 16))(v32, v31);
    }
    goto LABEL_33;
  }
  CFTypeRef v9 = cf;
  if (cf)
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(CFTypeRef, CFDictionaryRef *))(v11 + 8);
    if (v12)
    {
      uint64_t v8 = v12(v9, &theDict);
      if (!v8) {
        goto LABEL_12;
      }
      goto LABEL_67;
    }
LABEL_30:
    uint64_t v31 = 4294954514;
    goto LABEL_31;
  }
LABEL_12:
  if (!theDict
    || (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"routingSessionDestination_RouteDescriptors")) == 0)
  {
    if (dword_1E9359DE0)
    {
      LODWORD(block[0]) = 0;
      v49[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v35 = block[0];
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v49[0])) {
        unsigned int v36 = v35;
      }
      else {
        unsigned int v36 = v35 & 0xFFFFFFFE;
      }
      if (v36)
      {
        LODWORD(v63) = 136315138;
        *(void *)((char *)&v63 + 4) = "routingSessionManager_routeToDestinationOfCurrentSession_block_invoke";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v31 = 0;
    goto LABEL_31;
  }
  uint64_t v14 = (uint64_t)routingSessionManager_copyRouteDescriptorsMatchingPropertiesOfRouteDescriptors(a2, Value, 0);
  if (!v14) {
    goto LABEL_34;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  routingSessionManager_getConfiguration(v43);
  double v16 = Current + v44;
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke_117;
  v42[3] = &unk_1E57CB518;
  CFTypeRef v17 = *(const void **)(a1 + 40);
  v42[4] = *(void *)(a1 + 32);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  CFTypeRef v21 = FigNotificationListenerCreate(*(const void **)DerivedStorage, @"routeConfigUpdated");
  CFUUIDRef v22 = CFUUIDCreate(v19);
  CFStringRef v23 = CFUUIDCreateString(v19, v22);
  CFDictionarySetValue(Mutable, @"clientRouteRequestID", v23);
  CFDictionarySetValue(Mutable, @"initiator", @"FigRoutingSessionManager");
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  *(unsigned char *)(DerivedStorage + 121) = 1;
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  int64_t v24 = (uint64_t)((v16 - CFAbsoluteTimeGetCurrent()) * 1000000000.0);
  if (v17) {
    CFRetain(v17);
  }
  dispatch_time_t v25 = dispatch_time(0, v24);
  uint64_t v26 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __routingSessionManager_setDestinationOnRoutingContext_block_invoke;
  block[3] = &unk_1E57CB608;
  block[4] = v42;
  void block[5] = DerivedStorage;
  void block[6] = v17;
  dispatch_after(v25, v26, block);
  if (v21) {
    CFRetain(v21);
  }
  if (v17) {
    CFRetain(v17);
  }
  if (v23) {
    CFRetain(v23);
  }
  CFRetain((CFTypeRef)v14);
  *(void *)char v49 = MEMORY[0x1E4F143A8];
  uint64_t v50 = 3221225472;
  uint64_t v51 = __routingSessionManager_setDestinationOnRoutingContext_block_invoke_155;
  CFDictionaryRef v52 = &__block_descriptor_56_e9_v16__0_v8l;
  CFStringRef v53 = v23;
  uint64_t v54 = v14;
  uint64_t v55 = v21;
  *(void *)&long long v63 = MEMORY[0x1E4F143A8];
  *((void *)&v63 + 1) = 3221225472;
  long long v64 = __routingSessionManager_setDestinationOnRoutingContext_block_invoke_2;
  long long v65 = &unk_1E57CB650;
  long long v66 = v42;
  uint64_t v67 = DerivedStorage;
  long long v68 = v17;
  long long v69 = v21;
  CFStringRef v70 = v23;
  uint64_t v71 = v14;
  if (FigNotificationListenerStartNotifications(v21, 0, v49, &v63)) {
    goto LABEL_55;
  }
  uint64_t v27 = FigRouteDescriptorArrayCopySuccinctDescription(v19, (const __CFArray *)v14);
  if (dword_1E9359DE0)
  {
    unsigned int v48 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v29 = v48;
    if (os_log_type_enabled(v28, type)) {
      unsigned int v30 = v29;
    }
    else {
      unsigned int v30 = v29 & 0xFFFFFFFE;
    }
    if (v30)
    {
      int v57 = 136315650;
      uint64_t v58 = "routingSessionManager_setDestinationOnRoutingContext";
      __int16 v59 = 2114;
      CFStringRef v60 = v23;
      __int16 v61 = 2114;
      int v62 = v27;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v27) {
    CFRelease(v27);
  }
  CFArrayRef v37 = *(const void **)DerivedStorage;
  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v39 = v38 ? v38 : 0;
  uint64_t v40 = *(unsigned int (**)(const void *, uint64_t, __CFDictionary *))(v39 + 48);
  if (!v40 || v40(v37, v14, Mutable))
  {
LABEL_55:
    CFNumberRef SInt32 = (const void *)FigCFNumberCreateSInt32();
    FigNotificationListenerStopNotifications(v21, (uint64_t)SInt32);
    if (SInt32) {
      CFRelease(SInt32);
    }
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v21) {
    CFRelease(v21);
  }
  CFRelease((CFTypeRef)v14);
LABEL_33:
  uint64_t v14 = 1;
LABEL_34:
  if (cf) {
    CFRelease(cf);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  return v14;
}

uint64_t FigRoutingSessionCopyDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }
  return v6(a1, a2);
}

CFTypeRef routingSessionManager_copyRouteDescriptorsMatchingPropertiesOfRouteDescriptors(const __CFArray *a1, const __CFArray *a2, int a3)
{
  CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex v6 = 0;
  CFArrayRef v17 = a2;
  if (!a2) {
    goto LABEL_3;
  }
LABEL_2:
  CFIndex Count = CFArrayGetCount(a2);
LABEL_4:
  if (v6 < Count)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v6);
    CFDictionaryGetValue(ValueAtIndex, @"RouteUID");
    CFDictionaryGetValue(ValueAtIndex, @"RouteName");
    CFIndex v9 = 0;
    if (a1)
    {
LABEL_6:
      CFIndex v10 = CFArrayGetCount(a1);
      goto LABEL_8;
    }
    while (1)
    {
      CFIndex v10 = 0;
LABEL_8:
      if (v9 >= v10) {
        break;
      }
      CFDictionaryRef v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v9);
      CFDictionaryGetValue(v11, @"RouteUID");
      CFDictionaryGetValue(v11, @"RouteName");
      if (FigCFEqual() || a3 && FigCFEqual())
      {
        if (!v11) {
          break;
        }
        CFArrayAppendValue(theArray, v11);
        a2 = v17;
        ++v6;
        if (!v17)
        {
LABEL_3:
          CFIndex Count = 0;
          goto LABEL_4;
        }
        goto LABEL_2;
      }
      ++v9;
      if (a1) {
        goto LABEL_6;
      }
    }
  }
  if (theArray) {
    CFIndex v12 = CFArrayGetCount(theArray);
  }
  else {
    CFIndex v12 = 0;
  }
  CFIndex v13 = (CFIndex)v17;
  if (v17) {
    CFIndex v13 = CFArrayGetCount(v17);
  }
  if (v12 == v13)
  {
    if (theArray)
    {
      CFTypeRef v14 = CFRetain(theArray);
LABEL_25:
      CFRelease(theArray);
      return v14;
    }
    return 0;
  }
  else
  {
    CFTypeRef v14 = 0;
    CFTypeRef result = 0;
    if (theArray) {
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke_117(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void __routingSessionManager_routeToDestinationOfCurrentSession_block_invoke_2(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      (*(void (**)(void))(v3 + 16))();
    }
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
  }
}

void __routingSessionManager_discoverRoutes_block_invoke(uint64_t a1)
{
}

void routingSessionManager_vendDiscoveredRoutes(const __CFDictionary *a1, uint64_t a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"RouteDiscoverer");
  CFTypeRef cf = 0;
  if (Value)
  {
    uint64_t v5 = Value;
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(unsigned int (**)(const void *, __CFString *, void, CFTypeRef *))(v7 + 48);
    if (!v8
      || v8(v5, @"availableRouteDescriptors", *MEMORY[0x1E4F1CF80], &cf)
      || (*(unsigned int (**)(uint64_t, CFTypeRef))(a2 + 16))(a2, cf))
    {
      routingSessionManager_stopDiscovery(a1);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void __routingSessionManager_discoverRoutes_block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  CFTypeID v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __routingSessionManager_discoverRoutes_block_invoke_3(uint64_t a1)
{
  routingSessionManager_vendDiscoveredRoutes(*(const __CFDictionary **)(a1 + 40), *(void *)(a1 + 32));
  CFTypeID v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __routingSessionManager_discoverRoutes_block_invoke_4(uint64_t a1)
{
  routingSessionManager_stopDiscovery(*(const __CFDictionary **)(a1 + 32));
  CFTypeID v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void routingSessionManager_stopDiscovery(const __CFDictionary *a1)
{
  CFNumberRef SInt32 = (const void *)FigCFNumberCreateSInt32();
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"NotificationListener");
  uint64_t v4 = CFDictionaryGetValue(a1, @"RouteDiscoverer");
  uint64_t v5 = CFDictionaryGetValue(a1, @"TimeoutTimer");
  if (Value)
  {
    FigNotificationListenerStopNotifications(Value, (uint64_t)SInt32);
    CFDictionaryRemoveValue(a1, @"NotificationListener");
  }
  if (v4)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(const void *, __CFString *, __CFString *))(v7 + 56);
    if (v8) {
      v8(v4, @"DiscoveryMode", @"DiscoveryMode_None");
    }
    CFDictionaryRemoveValue(a1, @"RouteDiscoverer");
  }
  if (v5)
  {
    dispatch_source_cancel(v5);
    CFDictionaryRemoveValue(a1, @"TimeoutTimer");
  }
  if (SInt32)
  {
    CFRelease(SInt32);
  }
}

__CFDictionary *FigNotificationListenerCreate(const void *a1, const void *a2)
{
  uint64_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v5 = dispatch_queue_create("com.apple.coremedia.notification-listener.serialization", v4);
  CFMutableArrayRef Mutable = 0;
  if (a1 && a2)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    DefaultLocalCenter = (const void *)CMNotificationCenterGetDefaultLocalCenter();
    CFDictionarySetValue(Mutable, @"notificationCenter", DefaultLocalCenter);
    CFDictionarySetValue(Mutable, @"observedObject", a1);
    CFDictionarySetValue(Mutable, @"notificationName", a2);
    CFDictionarySetValue(Mutable, @"serializationQueue", v5);
  }
  if (v5) {
    dispatch_release(v5);
  }
  return Mutable;
}

void __routingSessionManager_startDiscovery_block_invoke(uint64_t a1)
{
  if (dword_1E9359DE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  routingSessionManager_stopDiscovery(*(const __CFDictionary **)(a1 + 32));
}

void __routingSessionManager_startDiscovery_block_invoke_127(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t FigNotificationListenerStartNotifications(const __CFDictionary *a1, uint64_t a2, const void *a3, const void *a4)
{
  CFDictionaryGetValue(a1, @"notificationCenter");
  CFDictionaryGetValue(a1, @"observedObject");
  CFDictionaryGetValue(a1, @"notificationName");
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"serializationQueue");
  uint64_t v8 = _Block_copy(a3);
  CFIndex v9 = _Block_copy(a4);
  CFIndex v10 = v9;
  if (v8)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __FigNotificationListenerStartNotifications_block_invoke;
    block[3] = &unk_1E57CB5E0;
    void block[5] = v9;
    void block[6] = a1;
    block[4] = v8;
    dispatch_sync(Value, block);
    uint64_t v11 = FigNotificationCenterAddWeakListener();
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  uint64_t v12 = v11;
  _Block_release(v8);
  _Block_release(v10);
  return v12;
}

uint64_t __routingSessionManager_startDiscovery_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __routingSessionManager_startDiscovery_block_invoke_3(uint64_t a1, CFNumberRef number)
{
  unsigned int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, valuePtr);
  }
  return result;
}

void __FigNotificationListenerStartNotifications_block_invoke(uint64_t a1)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), @"notificationBlock", *(const void **)(a1 + 32));
  CFTypeID v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = *(__CFDictionary **)(a1 + 48);
    CFDictionarySetValue(v3, @"completionBlock", v2);
  }
}

void notificationListener_receivedNotification(int a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"serializationQueue");
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x3052000000;
  CFIndex v13 = __Block_byref_object_copy__16;
  CFTypeRef v14 = __Block_byref_object_dispose__16;
  uint64_t v15 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __notificationListener_receivedNotification_block_invoke;
  v9[3] = &unk_1E57C58A0;
  v9[4] = &v10;
  void v9[5] = theDict;
  dispatch_sync(Value, v9);
  uint64_t v8 = (void (**)(void, void))v11[5];
  if (v8)
  {
    v8[2](v8, a5);
    uint64_t v8 = (void (**)(void, void))v11[5];
  }
  _Block_release(v8);
  _Block_object_dispose(&v10, 8);
}

void sub_194E82A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__notificationListener_receivedNotification_block_invoke(uint64_t a1)
{
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"notificationBlock");
  uint64_t result = _Block_copy(Value);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = result;
  return result;
}

uint64_t FigNotificationListenerStopNotifications(const __CFDictionary *a1, uint64_t a2)
{
  CFDictionaryGetValue(a1, @"notificationCenter");
  CFDictionaryGetValue(a1, @"observedObject");
  CFDictionaryGetValue(a1, @"notificationName");
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x3052000000;
  uint64_t v12 = __Block_byref_object_copy__16;
  CFIndex v13 = __Block_byref_object_dispose__16;
  uint64_t v14 = 0;
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"serializationQueue");
  uint64_t v5 = FigNotificationCenterRemoveWeakListener();
  if (!v5)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __FigNotificationListenerStopNotifications_block_invoke;
    v8[3] = &unk_1E57C58A0;
    v8[4] = &v9;
    v8[5] = a1;
    dispatch_sync(Value, v8);
    uint64_t v6 = v10[5];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, a2);
    }
  }
  _Block_release((const void *)v10[5]);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_194E82C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __FigNotificationListenerStopNotifications_block_invoke(uint64_t a1)
{
  CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"completionBlock");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = _Block_copy(Value);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), @"notificationBlock");
  uint64_t v3 = *(__CFDictionary **)(a1 + 40);
  CFDictionaryRemoveValue(v3, @"completionBlock");
}

void __routingSessionManager_setDestinationOnRoutingContext_block_invoke(void *a1)
{
  MEMORY[0x199716EE0](*(void *)(a1[5] + 40));
  uint64_t v2 = a1[5];
  int v3 = *(unsigned __int8 *)(v2 + 121);
  *(unsigned char *)(v2 + 121) = 0;
  MEMORY[0x199716EF0](*(void *)(v2 + 40));
  if (v3)
  {
    if (dword_1E9359DE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    (*(void (**)(void, uint64_t))(a1[4] + 16))(a1[4], 4294951903);
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5) {
    CFRelease(v5);
  }
}

void __routingSessionManager_setDestinationOnRoutingContext_block_invoke_155(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4 = (void *)MEMORY[0x1997179E0]();
  CFDictionaryGetValue(a2, @"routeConfigUpdateID");
  CFDictionaryGetValue(a2, @"routeConfigUpdateReason");
  if (FigCFEqual()
    && (FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()
     || FigCFEqual()))
  {
    CFNumberRef SInt32 = (const void *)FigCFNumberCreateSInt32();
    if (gARPFeedback_7 && gARPFeedback_3 && FigCFEqual() && FigCFEqual())
    {
      id v6 = routingSessionManager_outputDeviceIDsArrayFromRouteDescriptors(*(const __CFArray **)(a1 + 40));
      gARPFeedback_7(gARPFeedback_3, v6);
    }
    FigNotificationListenerStopNotifications(*(const __CFDictionary **)(a1 + 48), (uint64_t)SInt32);
    if (SInt32) {
      CFRelease(SInt32);
    }
  }
}

id routingSessionManager_outputDeviceIDsArrayFromRouteDescriptors(const __CFArray *a1)
{
  id v2 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:1];
  CFIndex v3 = 0;
  if (!a1) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(a1); v3 < i; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v3);
    if (ValueAtIndex)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, @"RouteUID");
      if (Value) {
        [v2 addObject:Value];
      }
    }
    ++v3;
    if (a1) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return v2;
}

void __routingSessionManager_setDestinationOnRoutingContext_block_invoke_2(void *a1, CFNumberRef number)
{
  unsigned int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  MEMORY[0x199716EE0](*(void *)(a1[5] + 40));
  uint64_t v3 = a1[5];
  int v4 = *(unsigned __int8 *)(v3 + 121);
  *(unsigned char *)(v3 + 121) = 0;
  MEMORY[0x199716EF0](*(void *)(v3 + 40));
  if (v4)
  {
    uint64_t v5 = a1[4];
    if (v5) {
      (*(void (**)(uint64_t, void))(v5 + 16))(v5, valuePtr);
    }
  }
  id v6 = (const void *)a1[6];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[7];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)a1[8];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)a1[9];
  if (v9) {
    CFRelease(v9);
  }
}

void routingSessionManager_updateCurrentSession(const void *a1, const void *a2, void *a3, char a4, int a5, int a6, char a7, int a8, uint64_t a9, char a10, void *a11, char *a12)
{
  values[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char isVideoOnScreen = routingSessionManager_isVideoOnScreen((uint64_t)a1);
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  uint64_t v22 = *(void *)(DerivedStorage + 72);
  if (a8)
  {
    if (v22 != a9)
    {
LABEL_18:
      MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
      char v27 = 0;
      goto LABEL_28;
    }
    uint64_t v22 = a9;
  }
  if (!routingSessionManager_shouldUpdateCurrentSession(*(void **)(DerivedStorage + 24), v22, *(void **)(DerivedStorage + 88), *(unsigned __int8 *)(DerivedStorage + 96), (uint64_t)a2, a3, a5, a6, a7, isVideoOnScreen))goto LABEL_18; {
  CFStringRef v23 = *(const void **)(DerivedStorage + 72);
  }
  *(void *)(DerivedStorage + 72) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v23) {
    CFRelease(v23);
  }
  int64_t v24 = *(void **)(DerivedStorage + 88);
  if (v24 != a3)
  {

    *(void *)(DerivedStorage + 88) = a3;
  }
  dispatch_time_t v25 = *(const void **)(DerivedStorage + 80);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(DerivedStorage + 8singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
  }
  if (!a10) {
    *(unsigned char *)(DerivedStorage + 96) = a4;
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  if (v23 != a2)
  {
    if (dword_1E9359DE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    values[0] = a11;
    CFDictionaryRef v28 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigRoutingSessionManagerPayloadValue_Reason, (const void **)values, 1, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v28) {
      CFRelease(v28);
    }
    routingSessionManager_updateSessionExpiration(a1);
    if (!a2)
    {
      if (dword_1E9359DE0)
      {
        unsigned int v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      routingSessionManager_updateSessionFromLatestInEarHeadphones(a1);
      if (dword_1E9359DE0)
      {
        unsigned int v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      routingSessionManager_updateSessionFromLatestActiveStatusOfSharePlayCapableCallSession((uint64_t)a1);
    }
  }
  char v27 = 1;
LABEL_28:
  if (a12) {
    *a12 = v27;
  }
}

uint64_t routingSessionManager_isVideoOnScreen(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = *(unsigned int (**)(uint64_t, char *))(v3 + 40);
  if (!v4 || v4(a1, &v6)) {
    return 0;
  }
  LODWORD(result) = [*(id *)(CMBaseObjectGetDerivedStorage() + 16) someLongFormVideoClientIsPlaying];
  if (v6) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t routingSessionManager_shouldUpdateCurrentSession(void *a1, uint64_t a2, void *a3, int a4, uint64_t a5, void *a6, int a7, int a8, char a9, char a10)
{
  v107[16] = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v102 = 0;
  if (a2 | a5)
  {
    if (routingSession_isFromForcedPrediction(a2))
    {
      int v19 = routingSession_establishedAutomaticallyFromLikelyDestination(a2);
      if (a4)
      {
        if (v19)
        {
          if (dword_1E9359DE0) {
            goto LABEL_3;
          }
          goto LABEL_186;
        }
      }
    }
    if (routingSession_isFromForcedPrediction(a5))
    {
      if (dword_1E9359DE0)
      {
        LODWORD(v103) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_159:
        uint64_t v87 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_187;
      }
LABEL_158:
      uint64_t v87 = 1;
      goto LABEL_187;
    }
    v107[0] = @"RouteUID";
    v107[1] = @"RouteName";
    v107[2] = @"AudioRouteName";
    v107[3] = @"RouteSupportsAirPlayVideo";
    CFDictionaryRef v103 = 0;
    *(void *)CFDictionaryRef theDict = 0;
    CFNumberRef v101 = a3;
    if (a2)
    {
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v26 = *(unsigned int (**)(uint64_t, unsigned char *))(v22 + 8);
      if (!v26 || v26(a2, theDict))
      {
        int v29 = 0;
        CFStringRef v23 = 0;
        goto LABEL_31;
      }
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)theDict, @"routingSessionDestination_RouteDescriptors");
      CFStringRef v23 = routingSessionManager_copyFilteredRouteDescriptors(Value, (uint64_t)v107);
      if (!a5) {
        goto LABEL_23;
      }
    }
    else
    {
      CFStringRef v23 = 0;
      if (!a5)
      {
LABEL_23:
        CFDictionaryRef v28 = 0;
LABEL_29:
        int v29 = FigCFEqual();
        goto LABEL_32;
      }
    }
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    unsigned int v30 = *(unsigned int (**)(uint64_t, CFDictionaryRef *))(v25 + 8);
    if (v30 && !v30(a5, &v103))
    {
      CFArrayRef v31 = (const __CFArray *)CFDictionaryGetValue(v103, @"routingSessionDestination_RouteDescriptors");
      CFDictionaryRef v28 = routingSessionManager_copyFilteredRouteDescriptors(v31, (uint64_t)v107);
      goto LABEL_29;
    }
    int v29 = 0;
LABEL_31:
    CFDictionaryRef v28 = 0;
LABEL_32:
    if (*(void *)theDict) {
      CFRelease(*(CFTypeRef *)theDict);
    }
    if (v103) {
      CFRelease(v103);
    }
    if (v23) {
      CFRelease(v23);
    }
    if (v28) {
      CFRelease(v28);
    }
    if (v29)
    {
      if (!dword_1E9359DE0) {
        goto LABEL_186;
      }
      LODWORD(v103) = 0;
      uint64_t v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v33 = v103;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v34 = v33;
      }
      else {
        unsigned int v34 = v33 & 0xFFFFFFFE;
      }
      if (!v34) {
        goto LABEL_185;
      }
      *(_DWORD *)CFDictionaryRef theDict = 136315138;
      *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
    }
    else
    {
      if (!a7 || !a10)
      {
        if (a2)
        {
          if (FigRoutingSessionCopyDestination(a2, (uint64_t)&v102)) {
            goto LABEL_186;
          }
          CFArrayRef v38 = (const __CFArray *)CFDictionaryGetValue(v102, @"routingSessionDestination_RouteDescriptors");
          if (a7)
          {
            CFArrayRef v39 = v38;
            if (v101 && a6)
            {
              uint64_t v40 = [a6 microLocationProbabilityVector];
              uint64_t v41 = [v101 microLocationProbabilityVector];
              double v42 = sARPMicroLocationSimilarityFunction(v40, v41);
              [a1 microLocationSimilarityThreshold];
              BOOL v44 = v42 < v43;
            }
            else
            {
              if (dword_1E9359DE0)
              {
                LODWORD(v103) = 0;
                uint64_t v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v52 = v103;
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v53 = v52;
                }
                else {
                  unsigned int v53 = v52 & 0xFFFFFFFE;
                }
                if (v53)
                {
                  *(_DWORD *)CFDictionaryRef theDict = 136315138;
                  *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              BOOL v44 = 0;
            }
            int v61 = routingSession_establishedAutomaticallyFromLikelyDestination(a2);
            if (a4 && v61)
            {
              if (!dword_1E9359DE0) {
                goto LABEL_158;
              }
              LODWORD(v103) = 0;
              int v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v63 = v103;
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v64 = v63;
              }
              else {
                unsigned int v64 = v63 & 0xFFFFFFFE;
              }
              if (!v64) {
                goto LABEL_159;
              }
              *(_DWORD *)CFDictionaryRef theDict = 136315138;
              *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
            }
            else
            {
              if (!a5)
              {
                if (dword_1E9359DE0)
                {
                  LODWORD(v103) = 0;
                  long long v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v70 = v103;
                  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v71 = v70;
                  }
                  else {
                    unsigned int v71 = v70 & 0xFFFFFFFE;
                  }
                  if (v71)
                  {
                    int v72 = routingSession_establishedBasedOnInEarStatusOfConnectedHeadphones();
                    *(_DWORD *)CFDictionaryRef theDict = 136315394;
                    *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                    __int16 v105 = 1024;
                    LODWORD(v106) = v72;
                    _os_log_send_and_compose_impl();
                  }
                  goto LABEL_185;
                }
                goto LABEL_186;
              }
              if (!v44)
              {
                if (!dword_1E9359DE0) {
                  goto LABEL_186;
                }
                LODWORD(v103) = 0;
                long long v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v74 = v103;
                if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v75 = v74;
                }
                else {
                  unsigned int v75 = v74 & 0xFFFFFFFE;
                }
                if (!v75) {
                  goto LABEL_185;
                }
                uint64_t v76 = "NULL";
                if (v101) {
                  uint64_t v76 = "non-NULL";
                }
                *(_DWORD *)CFDictionaryRef theDict = 136315394;
                *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                __int16 v105 = 2082;
                char v106 = v76;
                goto LABEL_55;
              }
              if (!routingSessionManager_routeIsBuiltIn(v39)
                && (!routingSessionManager_routeDescriptorsProvideExternalVideoPlayback(v39)
                 || !v39
                 || CFArrayGetCount(v39) != 1))
              {
                if (!dword_1E9359DE0) {
                  goto LABEL_186;
                }
                LODWORD(v103) = 0;
                int v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v81 = v103;
                if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v82 = v81;
                }
                else {
                  unsigned int v82 = v81 & 0xFFFFFFFE;
                }
                if (!v82) {
                  goto LABEL_185;
                }
                *(_DWORD *)CFDictionaryRef theDict = 136315138;
                *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                goto LABEL_55;
              }
              if (!dword_1E9359DE0) {
                goto LABEL_158;
              }
              LODWORD(v103) = 0;
              long long v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v66 = v103;
              if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v67 = v66;
              }
              else {
                unsigned int v67 = v66 & 0xFFFFFFFE;
              }
              if (!v67) {
                goto LABEL_159;
              }
              long long v68 = "NULL";
              if (v101) {
                long long v68 = "non-NULL";
              }
              *(_DWORD *)CFDictionaryRef theDict = 136315394;
              *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
              __int16 v105 = 2082;
              char v106 = v68;
            }
          }
          else if (a8)
          {
            if (routingSession_establishedBasedOnInEarStatusOfConnectedHeadphones())
            {
              if (!dword_1E9359DE0) {
                goto LABEL_158;
              }
              LODWORD(v103) = 0;
              unsigned int v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v49 = v103;
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v50 = v49;
              }
              else {
                unsigned int v50 = v49 & 0xFFFFFFFE;
              }
              if (!v50) {
                goto LABEL_159;
              }
              *(_DWORD *)CFDictionaryRef theDict = 136315138;
              *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
            }
            else
            {
              if (!a5)
              {
                if (!dword_1E9359DE0) {
                  goto LABEL_186;
                }
                LODWORD(v103) = 0;
                uint64_t v88 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v89 = v103;
                if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v90 = v89;
                }
                else {
                  unsigned int v90 = v89 & 0xFFFFFFFE;
                }
                if (!v90) {
                  goto LABEL_185;
                }
                *(_DWORD *)CFDictionaryRef theDict = 136315138;
                *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                goto LABEL_55;
              }
              int v57 = routingSession_establishedAutomaticallyFromLikelyDestination(a2);
              if (!a4 || !v57)
              {
                if (!dword_1E9359DE0) {
                  goto LABEL_186;
                }
                LODWORD(v103) = 0;
                uint64_t v91 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v92 = v103;
                if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v93 = v92;
                }
                else {
                  unsigned int v93 = v92 & 0xFFFFFFFE;
                }
                if (!v93) {
                  goto LABEL_185;
                }
                *(_DWORD *)CFDictionaryRef theDict = 136315138;
                *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                goto LABEL_55;
              }
              if (!dword_1E9359DE0) {
                goto LABEL_158;
              }
              LODWORD(v103) = 0;
              uint64_t v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v59 = v103;
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v60 = v59;
              }
              else {
                unsigned int v60 = v59 & 0xFFFFFFFE;
              }
              if (!v60) {
                goto LABEL_159;
              }
              *(_DWORD *)CFDictionaryRef theDict = 136315138;
              *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
            }
          }
          else if (a9)
          {
            if (routingSession_establishedBasedOnActiveSharePlayCapableCallSession())
            {
              if (!dword_1E9359DE0) {
                goto LABEL_158;
              }
              LODWORD(v103) = 0;
              uint64_t v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v55 = v103;
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v56 = v55;
              }
              else {
                unsigned int v56 = v55 & 0xFFFFFFFE;
              }
              if (!v56) {
                goto LABEL_159;
              }
              *(_DWORD *)CFDictionaryRef theDict = 136315138;
              *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
            }
            else
            {
              if (!a5)
              {
                if (!dword_1E9359DE0) {
                  goto LABEL_186;
                }
                LODWORD(v103) = 0;
                uint64_t v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v95 = v103;
                if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v96 = v95;
                }
                else {
                  unsigned int v96 = v95 & 0xFFFFFFFE;
                }
                if (!v96) {
                  goto LABEL_185;
                }
                *(_DWORD *)CFDictionaryRef theDict = 136315138;
                *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                goto LABEL_55;
              }
              int v83 = routingSession_establishedAutomaticallyFromLikelyDestination(a2);
              if (!a4 || !v83)
              {
                if (!dword_1E9359DE0) {
                  goto LABEL_186;
                }
                LODWORD(v103) = 0;
                uint64_t v97 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v98 = v103;
                if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v99 = v98;
                }
                else {
                  unsigned int v99 = v98 & 0xFFFFFFFE;
                }
                if (!v99) {
                  goto LABEL_185;
                }
                *(_DWORD *)CFDictionaryRef theDict = 136315138;
                *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
                goto LABEL_55;
              }
              if (!dword_1E9359DE0) {
                goto LABEL_158;
              }
              LODWORD(v103) = 0;
              __int16 v84 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v85 = v103;
              if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v86 = v85;
              }
              else {
                unsigned int v86 = v85 & 0xFFFFFFFE;
              }
              if (!v86) {
                goto LABEL_159;
              }
              *(_DWORD *)CFDictionaryRef theDict = 136315138;
              *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
            }
          }
          else
          {
            if (!dword_1E9359DE0) {
              goto LABEL_158;
            }
            LODWORD(v103) = 0;
            int v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v78 = v103;
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v79 = v78;
            }
            else {
              unsigned int v79 = v78 & 0xFFFFFFFE;
            }
            if (!v79) {
              goto LABEL_159;
            }
            *(_DWORD *)CFDictionaryRef theDict = 136315138;
            *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
          }
        }
        else
        {
          if (!dword_1E9359DE0) {
            goto LABEL_158;
          }
          LODWORD(v103) = 0;
          uint64_t v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v46 = v103;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v47 = v46;
          }
          else {
            unsigned int v47 = v46 & 0xFFFFFFFE;
          }
          if (!v47) {
            goto LABEL_159;
          }
          *(_DWORD *)CFDictionaryRef theDict = 136315138;
          *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
        }
        _os_log_send_and_compose_impl();
        goto LABEL_159;
      }
      if (!dword_1E9359DE0) {
        goto LABEL_186;
      }
      LODWORD(v103) = 0;
      unsigned int v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v36 = v103;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v37 = v36;
      }
      else {
        unsigned int v37 = v36 & 0xFFFFFFFE;
      }
      if (!v37) {
        goto LABEL_185;
      }
      *(_DWORD *)CFDictionaryRef theDict = 136315138;
      *(void *)&theDict[4] = "routingSessionManager_shouldUpdateCurrentSession";
    }
LABEL_55:
    _os_log_send_and_compose_impl();
    goto LABEL_185;
  }
  if (dword_1E9359DE0)
  {
LABEL_3:
    LODWORD(v103) = 0;
    uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
LABEL_185:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_186:
  uint64_t v87 = 0;
LABEL_187:
  if (v102) {
    CFRelease(v102);
  }
  return v87;
}

void routingSessionManager_updateSessionExpiration(const void *a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  double Current = CFAbsoluteTimeGetCurrent();
  MEMORY[0x199716EE0](DerivedStorage[5]);
  uint64_t v4 = DerivedStorage[9];
  if (!v4)
  {
    MEMORY[0x199716EF0](DerivedStorage[5]);
    goto LABEL_12;
  }
  cf[0] = 0;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, CFTypeRef *))(v6 + 8);
  if (v7)
  {
    v7(v4, cf);
    CFDictionaryRef v8 = (const __CFDictionary *)cf[0];
  }
  else
  {
    CFDictionaryRef v8 = 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v8, @"routingSessionDestination_RouteDescriptors");
  unsigned int v10 = routingSessionManager_routeIsBuiltIn(Value);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  MEMORY[0x199716EF0](DerivedStorage[5]);
  if (v10)
  {
LABEL_12:
    int v11 = [*(id *)(CMBaseObjectGetDerivedStorage() + 16) someLongFormVideoClientIsPlaying];
    MEMORY[0x199716EE0](DerivedStorage[5]);
    if (v11)
    {
      uint64_t v12 = (const void *)DerivedStorage[10];
      if (v12)
      {
        CFRelease(v12);
        DerivedStorage[10] = 0;
        if (dword_1E9359DE0)
        {
          int v27 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    else
    {
      if (!DerivedStorage[9]) {
        goto LABEL_21;
      }
      if (!DerivedStorage[10])
      {
        CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        routingSessionManager_getConfiguration(cf);
        FigGetCFPreferenceDoubleWithDefault();
        DerivedStorage[10] = CFDateCreate(v14, Current + v15);
      }
    }
    double v16 = (const void *)DerivedStorage[9];
    if (v16)
    {
      CFTypeRef v17 = CFRetain(v16);
      goto LABEL_22;
    }
LABEL_21:
    CFTypeRef v17 = 0;
LABEL_22:
    uint64_t v18 = (const void *)DerivedStorage[10];
    if (v18) {
      CFTypeRef v19 = CFRetain(v18);
    }
    else {
      CFTypeRef v19 = 0;
    }
    MEMORY[0x199716EF0](DerivedStorage[5]);
    if (v17 && v19)
    {
      double v20 = MEMORY[0x199716270](v19);
      if (Current <= v20)
      {
        double v21 = v20;
        if (dword_1E9359DE0)
        {
          int v27 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (a1) {
          CFRetain(a1);
        }
        dispatch_time_t v23 = dispatch_time(0, (uint64_t)((v21 - Current) * 1000000000.0));
        uint64_t v24 = DerivedStorage[4];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __routingSessionManager_updateSessionExpiration_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = a1;
        dispatch_after(v23, v24, block);
      }
      else
      {
        routingSessionManager_updateCurrentSession(a1, 0, 0, 0, 0, 0, 0, 1, v17, 0, @"Session expiration after playback end", 0);
      }
    }
    else if (!v17)
    {
      if (!v19) {
        return;
      }
      goto LABEL_31;
    }
    CFRelease(v17);
    if (!v19) {
      return;
    }
LABEL_31:
    CFRelease(v19);
  }
}

uint64_t routingSession_isFromForcedPrediction(uint64_t a1)
{
  unsigned __int8 v9 = 0;
  CFTypeRef cf = 0;
  if (a1)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v3 = v2 ? v2 : 0;
    uint64_t v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v3 + 8);
    if (v4)
    {
      int v5 = v4(a1, &cf);
      CFTypeRef v6 = cf;
      if (!v5)
      {
        FigCFDictionaryGetBooleanIfPresent();
        CFTypeRef v6 = cf;
      }
      if (v6) {
        CFRelease(v6);
      }
    }
  }
  return v9;
}

uint64_t routingSession_establishedAutomaticallyFromLikelyDestination(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 0;
  }
  uint64_t CMBaseObject = FigRoutingSessionGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v3 = v2 ? v2 : 0;
  uint64_t v4 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (!v4) {
    return 0;
  }
  if (v4(CMBaseObject, @"EstablishedAutomaticallyFromLikelyDestination", *MEMORY[0x1E4F1CF80], &cf)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  }
  uint64_t v6 = v5;
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t routingSession_establishedBasedOnInEarStatusOfConnectedHeadphones()
{
  CFBooleanRef BOOLean = 0;
  uint64_t CMBaseObject = FigRoutingSessionGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v2 + 48);
  if (!v3) {
    return 0;
  }
  int v4 = v3(CMBaseObject, @"EstablishedBasedOnInEarStatusOfConnectedHeadphones", *MEMORY[0x1E4F1CF80], &BOOLean);
  CFBooleanRef v5 = BOOLean;
  if (v4)
  {
    uint64_t Value = 0;
    if (!BOOLean) {
      return Value;
    }
    goto LABEL_7;
  }
  uint64_t Value = CFBooleanGetValue(BOOLean);
  CFBooleanRef v5 = BOOLean;
  if (BOOLean) {
LABEL_7:
  }
    CFRelease(v5);
  return Value;
}

CFArrayRef routingSessionManager_routeIsBuiltIn(const __CFArray *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    if (CFArrayGetCount(result) == 1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, 0);
      CFDictionaryGetValue(ValueAtIndex, @"AudioRouteName");
      if (FigCFEqual()) {
        return (const __CFArray *)1;
      }
      else {
        return (const __CFArray *)(FigCFEqual() != 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t routingSessionManager_routeDescriptorsProvideExternalVideoPlayback(CFArrayRef theArray)
{
  for (CFIndex i = 0; ; ++i)
  {
    CFIndex v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (i >= v3) {
      break;
    }
    CFArrayGetValueAtIndex(theArray, i);
    FigCFDictionaryGetBooleanIfPresent();
  }
  return 0;
}

uint64_t routingSession_establishedBasedOnActiveSharePlayCapableCallSession()
{
  CFBooleanRef BOOLean = 0;
  uint64_t CMBaseObject = FigRoutingSessionGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  CFIndex v3 = *(uint64_t (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v2 + 48);
  if (!v3) {
    return 0;
  }
  int v4 = v3(CMBaseObject, @"EstablishedBasedOnActiveSharePlayCapableCallSession", *MEMORY[0x1E4F1CF80], &BOOLean);
  CFBooleanRef v5 = BOOLean;
  if (v4)
  {
    uint64_t Value = 0;
    if (!BOOLean) {
      return Value;
    }
    goto LABEL_7;
  }
  uint64_t Value = CFBooleanGetValue(BOOLean);
  CFBooleanRef v5 = BOOLean;
  if (BOOLean) {
LABEL_7:
  }
    CFRelease(v5);
  return Value;
}

__CFSet *routingSessionManager_copyFilteredRouteDescriptors(const __CFArray *a1, uint64_t a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  CFIndex v6 = 0;
  uint64_t v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  if (!a1) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(a1); v6 < i; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v6);
    unsigned int v10 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D048], v7);
    for (uint64_t j = 0; j != 32; j += 8)
    {
      uint64_t v12 = *(const void **)(a2 + j);
      uint64_t Value = CFDictionaryGetValue(ValueAtIndex, v12);
      if (Value) {
        CFDictionarySetValue(v10, v12, Value);
      }
    }
    CFSetAddValue(Mutable, v10);
    if (v10) {
      CFRelease(v10);
    }
    ++v6;
    if (a1) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return Mutable;
}

void __routingSessionManager_updateSessionExpiration_block_invoke(uint64_t a1)
{
  routingSessionManager_updateSessionExpiration(*(void *)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t routingSessionManager_createFakePredictionContext()
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [MEMORY[0x1E4F29128] UUID];
  v5[0] = &unk_1EE605E48;
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];
  id v1 = objc_alloc((Class)sARPPredictionContextClass);
  uint64_t v2 = [MEMORY[0x1E4F1C9C8] date];
  return objc_msgSend(v1, "initWithPredictionDate:microLocationEventDate:microLocationProbabilityVector:", v2, objc_msgSend(MEMORY[0x1E4F1C9C8], "date"), v0);
}

void routingSessionManager_waitForRecentPredictions(const void *a1, const void *a2, uint64_t a3, double a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v9 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  unsigned int v10 = dispatch_queue_create("com.apple.coremedia.routing-session-manager.route-prediction", v9);
  int v11 = FigNotificationListenerCreate(*(const void **)(DerivedStorage + 24), (const void *)sARPRoutePredictorPredictionsForCurrentContextUpdatedNotificationName);
  uint64_t v12 = [[FigRoutePredictionFetchOneShotCompletion alloc] initWithCompletionHandler:a3];
  routingSessionManager_updatePredictedDestinations(a1, (uint64_t)&__block_literal_global_186);
  if (v11) {
    CFRetain(v11);
  }
  if (a2) {
    CFRetain(a2);
  }
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  _OWORD v17[2] = __routingSessionManager_waitForRecentPredictions_block_invoke_2;
  v17[3] = &unk_1E57CB698;
  v17[4] = v12;
  v17[5] = DerivedStorage;
  void v17[6] = a2;
  v17[7] = v11;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  long long v16[2] = __routingSessionManager_waitForRecentPredictions_block_invoke_3;
  v16[3] = &__block_descriptor_48_e10_v16__0r_v8l;
  v16[4] = v11;
  v16[5] = a2;
  if (FigNotificationListenerStartNotifications(v11, (uint64_t)v10, v17, v16))
  {
    [(FigRoutePredictionFetchOneShotCompletion *)v12 invokeWithRoutePredictions:0 predictionContext:0];
  }
  else
  {
    if (v11) {
      CFRetain(v11);
    }
    if (a2) {
      CFRetain(a2);
    }
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    long long v15[2] = __routingSessionManager_waitForRecentPredictions_block_invoke_4;
    v15[3] = &unk_1E57C5998;
    v15[4] = v12;
    v15[5] = DerivedStorage;
    void v15[6] = a2;
    v15[7] = v11;
    MXDispatchAsync((uint64_t)"routingSessionManager_waitForRecentPredictions", (uint64_t)"FigRoutingSessionManager.m", 2891, 0, 0, v10, (uint64_t)v15);
    if (v11) {
      CFRetain(v11);
    }
    dispatch_time_t v13 = dispatch_time(0, (uint64_t)(a4 * 1000000000.0));
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __routingSessionManager_waitForRecentPredictions_block_invoke_5;
    v14[3] = &unk_1E57CA3A0;
    v14[4] = v12;
    v14[5] = v11;
    dispatch_after(v13, v10, v14);
  }

  if (v10) {
    dispatch_release(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
}

id __routingSessionManager_waitForRecentPredictions_block_invoke_2(uint64_t a1)
{
  id v4 = 0;
  uint64_t v2 = [*(id *)(*(void *)(a1 + 40) + 24) predictionsWithCurrentContext:&v4];
  id result = v4;
  if (v4)
  {
    id result = (id)objc_msgSend((id)objc_msgSend(v4, "microLocationEventDate"), "compare:", *(void *)(a1 + 48));
    if (result == (id)1)
    {
      [*(id *)(a1 + 32) invokeWithRoutePredictions:v2 predictionContext:v4];
      return (id)FigNotificationListenerStopNotifications(*(const __CFDictionary **)(a1 + 56), 0);
    }
  }
  return result;
}

void __routingSessionManager_waitForRecentPredictions_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFIndex v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void __routingSessionManager_waitForRecentPredictions_block_invoke_4(uint64_t a1)
{
  id v5 = 0;
  uint64_t v2 = [*(id *)(*(void *)(a1 + 40) + 24) predictionsWithCurrentContext:&v5];
  if (v5 && objc_msgSend((id)objc_msgSend(v5, "microLocationEventDate"), "compare:", *(void *)(a1 + 48)) == 1)
  {
    [*(id *)(a1 + 32) invokeWithRoutePredictions:v2 predictionContext:v5];
    FigNotificationListenerStopNotifications(*(const __CFDictionary **)(a1 + 56), 0);
  }
  CFIndex v3 = *(const void **)(a1 + 56);
  if (v3) {
    CFRelease(v3);
  }
  id v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
}

void __routingSessionManager_waitForRecentPredictions_block_invoke_5(uint64_t a1)
{
  [*(id *)(a1 + 32) invokeWithRoutePredictions:0 predictionContext:0];
  FigNotificationListenerStopNotifications(*(const __CFDictionary **)(a1 + 40), 0);
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __routingSessionManager_startSessionIfNecessary_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3, void *a4, int a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    routingSessionManager_updateCurrentSession(*(const void **)(a1 + 32), 0, 0, 0, 1, 0, 0, 0, 0, 0, @"Top predicted destination not found", 0);
    uint64_t v7 = 0;
    goto LABEL_52;
  }
  routingSessionManager_getConfiguration(cf);
  FigGetCFPreferenceDoubleWithDefault();
  if (!a3)
  {
    if (dword_1E9359DE0)
    {
      *(float *)Boolean keyExistsAndHasValidFormat = 0.0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_49:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_50;
    }
    goto LABEL_50;
  }
  double v12 = v11;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a3, @"routingSessionDestination_RouteDescriptors");
  id v14 = routingSessionManager_outputDeviceIDsArrayFromRouteDescriptors(Value);
  if (MX_FeatureFlags_IsCorianderEnabled()) {
    goto LABEL_5;
  }
  keyExistsAndHasValidFormat[0] = 0;
  AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"EnableAutoRouting", @"com.apple.coremedia", keyExistsAndHasValidFormat);
  routingSessionManager_getConfiguration(cf);
  if (!BYTE1(cf[0]) || !keyExistsAndHasValidFormat[0])
  {
    routingSessionManager_getConfiguration(&v49);
    AppBooleanCFArrayRef Value = BYTE1(v49);
  }
  if (!AppBooleanValue)
  {
LABEL_5:
    if (!dword_1E9359DE0) {
      goto LABEL_50;
    }
    *(float *)Boolean keyExistsAndHasValidFormat = 0.0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    double v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v16 = *(_DWORD *)keyExistsAndHasValidFormat;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = v16 & 0xFFFFFFFE;
    }
    if (!v17) {
      goto LABEL_49;
    }
    LODWORD(v49) = 136315138;
    *(void *)((char *)&v49 + 4) = "routingSessionManager_startSessionIfNecessary_block_invoke";
LABEL_48:
    _os_log_send_and_compose_impl();
    goto LABEL_49;
  }
  if (sWiFiDeviceClientGetPower && sFigRoutingSessionManagerWiFiDevice && !sWiFiDeviceClientGetPower())
  {
    if (!dword_1E9359DE0) {
      goto LABEL_50;
    }
    *(float *)Boolean keyExistsAndHasValidFormat = 0.0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v33 = *(_DWORD *)keyExistsAndHasValidFormat;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v34 = v33;
    }
    else {
      unsigned int v34 = v33 & 0xFFFFFFFE;
    }
    if (!v34) {
      goto LABEL_49;
    }
    LODWORD(v49) = 136315138;
    *(void *)((char *)&v49 + 4) = "routingSessionManager_startSessionIfNecessary_block_invoke";
    goto LABEL_48;
  }
  if (CFDictionaryGetValue(a3, @"routingSessionDestination_ProvidesExternalVideoPlayback") != (const void *)*MEMORY[0x1E4F1CFD0]
    && !routingSessionManager_routeIsBuiltIn(Value))
  {
    if (dword_1E9359DE0)
    {
      *(float *)Boolean keyExistsAndHasValidFormat = 0.0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      int v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v30 = *(_DWORD *)keyExistsAndHasValidFormat;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v31 = v30;
      }
      else {
        unsigned int v31 = v30 & 0xFFFFFFFE;
      }
      if (v31)
      {
        LODWORD(v49) = 136315138;
        *(void *)((char *)&v49 + 4) = "routingSessionManager_startSessionIfNecessary_block_invoke";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v7 = 0;
    if (!gARPFeedback_6 || !gARPFeedback_2) {
      goto LABEL_51;
    }
    gARPFeedback_6(gARPFeedback_2, v14);
    goto LABEL_50;
  }
  float v20 = v12;
  *(float *)Boolean keyExistsAndHasValidFormat = 0.0;
  FigCFDictionaryGetFloatIfPresent();
  LODWORD(v21) = *(_DWORD *)keyExistsAndHasValidFormat;
  if (*(float *)keyExistsAndHasValidFormat < v20)
  {
    if (dword_1E9359DE0)
    {
LABEL_24:
      *(_DWORD *)os_log_type_t type = 0;
      os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
      uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      goto LABEL_49;
    }
LABEL_50:
    uint64_t v7 = 0;
LABEL_51:
    routingSessionManager_updateCurrentSession(*(const void **)(a1 + 32), 0, 0, 0, 1, 0, 0, 0, 0, 0, @"No longer in high confidence", 0);
    goto LABEL_52;
  }
  if (a4
    && (dispatch_time_t v23 = (const void *)objc_msgSend(a4, "microLocationEventDate", v21)) != 0
    && (CFTypeRef v24 = CFRetain(v23)) != 0)
  {
    uint64_t v7 = v24;
    double Current = CFAbsoluteTimeGetCurrent();
    double v26 = Current - MEMORY[0x199716270](v7);
    routingSessionManager_getConfiguration(&v45);
    if (v26 >= v46)
    {
      if (dword_1E9359DE0)
      {
        *(_DWORD *)os_log_type_t type = 0;
        os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
        unsigned int v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_51;
    }
    if (dword_1E9359DE0)
    {
      *(_DWORD *)os_log_type_t type = 0;
      os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
      int v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (!a5)
    {
      if (dword_1E9359DE0) {
        goto LABEL_24;
      }
      goto LABEL_50;
    }
    if (dword_1E9359DE0)
    {
      *(_DWORD *)os_log_type_t type = 0;
      os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
      CFDictionaryRef v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v7 = 0;
  }
  CFArrayRef v38 = *(const void **)(a1 + 32);
  cf[0] = 0;
  CFArrayRef v39 = (const __CFArray *)CFDictionaryGetValue(a3, @"routingSessionDestination_RouteDescriptors");
  LOBYTE(v49) = 0;
  id v40 = routingSessionManager_outputDeviceIDsArrayFromRouteDescriptors(v39);
  if (!FigRoutingSessionCreate(*MEMORY[0x1E4F1CF80], 1, a3, cf))
  {
    routingSessionManager_updateCurrentSession(v38, cf[0], a4, 1, 1, 0, 0, 0, 0, 0, @"Establish predicted session", (char *)&v49);
    if ((_BYTE)v49)
    {
      uint64_t v41 = (void (*)(uint64_t, id))gARPFeedback_5;
      if (!gARPFeedback_5) {
        goto LABEL_74;
      }
      uint64_t v42 = gARPFeedback_0;
      if (!gARPFeedback_0) {
        goto LABEL_74;
      }
LABEL_73:
      v41(v42, v40);
      goto LABEL_74;
    }
    uint64_t v41 = (void (*)(uint64_t, id))gARPFeedback_6;
    if (gARPFeedback_6)
    {
      uint64_t v42 = gARPFeedback_4;
      if (gARPFeedback_4) {
        goto LABEL_73;
      }
    }
  }
LABEL_74:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
LABEL_52:
  unsigned int v35 = *(void (**)(void, uint64_t))(a1 + 40);
  if (v35) {
    v35(*(void *)(a1 + 48), a2);
  }
  if (v7) {
    CFRelease(v7);
  }
  unsigned int v36 = *(const void **)(a1 + 32);
  if (v36) {
    CFRelease(v36);
  }
}

uint64_t __routingSessionManager_findTopAvailablePredictedDestination_block_invoke(uint64_t a1, const __CFArray *a2)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  id v4 = (void *)MEMORY[0x1997179E0]();
  uint64_t v12 = 0;
  cf[0] = 0;
  char v11 = 0;
  routingSessionManager_copyTopPredictedDestination(*(void *)(a1 + 40), cf, &v12, &v11);
  if (cf[0])
  {
    CFDictionaryRef AvailableDestinationFromAvailableRoutes = routingSessionManager_createAvailableDestinationFromAvailableRoutes(a2, (CFDictionaryRef)cf[0]);
    if (!AvailableDestinationFromAvailableRoutes)
    {
      uint64_t v9 = 0;
      goto LABEL_11;
    }
    CFDictionaryRef v6 = AvailableDestinationFromAvailableRoutes;
    CFStringRef v7 = FigRoutingSessionDestinationCopyDescription((const __CFAllocator *)*MEMORY[0x1E4F1CF80], AvailableDestinationFromAvailableRoutes);
    if (dword_1E9359DE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v7) {
      CFRelease(v7);
    }
    (*(void (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0);
    CFRelease(v6);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  uint64_t v9 = 1;
LABEL_11:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v9;
}

void routingSessionManager_copyTopPredictedDestination(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v9 = 0;
  CFDictionaryRef v6 = routingSessionManager_copyCurrentPredictedDestinations(a1, &v9, a4);
  CFIndex v7 = 0;
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(v6); v7 < i; CFIndex i = 0)
  {
    CFArrayGetValueAtIndex(v6, v7);
    FigCFDictionaryGetFloatIfPresent();
    ++v7;
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = v9;
  }
  if (v6) {
    CFRelease(v6);
  }
}

CFDictionaryRef routingSessionManager_createAvailableDestinationFromAvailableRoutes(const __CFArray *a1, CFDictionaryRef theDict)
{
  MutableCFArrayRef Copy = theDict;
  if (theDict)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"routingSessionDestination_RouteDescriptors");
    CFArrayRef v5 = (const __CFArray *)routingSessionManager_copyRouteDescriptorsMatchingPropertiesOfRouteDescriptors(a1, Value, 1);
    int v6 = routingSessionManager_routeDescriptorsProvideExternalVideoPlayback(v5);
    if (v5)
    {
      CFIndex v7 = (const void **)MEMORY[0x1E4F1CFC8];
      if (v6) {
        CFIndex v7 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      CFDictionaryRef v8 = *v7;
      MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MutableCopy);
      CFDictionarySetValue(MutableCopy, @"routingSessionDestination_RouteDescriptors", v5);
      CFDictionarySetValue(MutableCopy, @"routingSessionDestination_ProvidesExternalVideoPlayback", v8);
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return MutableCopy;
}

void __routingSessionManager_findTopAvailablePredictedDestination_block_invoke_196(uint64_t a1, uint64_t a2)
{
  theDict[16] = *(CFDictionaryRef *)MEMORY[0x1E4F143B8];
  id v4 = (void *)MEMORY[0x1997179E0]();
  if (a2)
  {
    if (gARPFeedback_6) {
      BOOL v5 = gARPFeedback_1 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      theDict[0] = 0;
      routingSessionManager_copyTopPredictedDestination(*(void *)(a1 + 40), theDict, 0, 0);
      if (theDict[0]
        && (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict[0], @"routingSessionDestination_RouteDescriptors")) != 0)
      {
        id v7 = routingSessionManager_outputDeviceIDsArrayFromRouteDescriptors(Value);
      }
      else
      {
        id v7 = 0;
      }
      gARPFeedback_6(gARPFeedback_1, v7);
      if (theDict[0]) {
        CFRelease(theDict[0]);
      }
    }
    if (dword_1E9359DE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    (*(void (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2);
  }
  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9) {
    CFRelease(v9);
  }
}

__CFArray *routingSessionManager_copyCurrentPredictedDestinations(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  id FakePredictionContext = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!routingSessionManager_routePredictionsEnabled())
  {
LABEL_7:
    id v17 = 0;
    goto LABEL_8;
  }
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  int v8 = *(unsigned __int8 *)(DerivedStorage + 64);
  uint64_t v9 = MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  if (v8)
  {
    if (dword_1E9359DE0)
    {
      int v36 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_7;
  }
  long long context = (void *)MEMORY[0x1997179E0](v9);
  v40[0] = 0.0;
  int v39 = 0;
  char v11 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
  uint64_t v12 = (void *)CFPreferencesCopyAppValue(@"HighConfidenceRouteName", @"com.apple.coremedia");
  dispatch_time_t v13 = (void *)CFPreferencesCopyAppValue(@"HighestMediumConfidenceRouteName", @"com.apple.coremedia");
  id v14 = (void *)CFPreferencesCopyAppValue(@"ForcedHighConfidenceDeviceUID", @"com.apple.coremedia");
  double v15 = (void *)CFPreferencesCopyAppValue(@"ForcedMediumConfidenceDeviceUID", @"com.apple.coremedia");
  FigRoutingSessionManagerGetConfidenceThresholds(v40, (float *)&v39);
  if (v15)
  {
    int v29 = 1;
    DestinationWithRouteID = routingSessionManager_createDestinationWithRouteID(v15, 1);
    CFArrayAppendValue(v11, DestinationWithRouteID);
  }
  else
  {
    if (!v14)
    {
      if (v12)
      {
        DestinationWithRouteName = routingSessionManager_createDestinationWithRouteName(v12);
        CFArrayAppendValue(v11, DestinationWithRouteName);
        if (DestinationWithRouteName) {
          CFRelease(DestinationWithRouteName);
        }
      }
      if (!v13)
      {
        int v29 = 0;
        goto LABEL_13;
      }
      DestinationWithRouteID = routingSessionManager_createDestinationWithRouteName(v13);
      CFArrayAppendValue(v11, DestinationWithRouteID);
      int v29 = 0;
      if (!DestinationWithRouteID) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    int v29 = 1;
    DestinationWithRouteID = routingSessionManager_createDestinationWithRouteID(v14, 1);
    CFArrayAppendValue(v11, DestinationWithRouteID);
  }
  if (DestinationWithRouteID) {
LABEL_12:
  }
    CFRelease(DestinationWithRouteID);
LABEL_13:
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v11)
  {
    if (CFArrayGetCount(v11) >= 1)
    {
      v42.length = CFArrayGetCount(v11);
      v42.location = 0;
      CFArrayAppendArray(Mutable, v11, v42);
      if (a3) {
        *a3 = 1;
      }
    }
    CFRelease(v11);
  }
  if (v29)
  {
    id FakePredictionContext = (id)routingSessionManager_createFakePredictionContext();
  }
  else
  {
    CFTypeRef v19 = *(void **)(DerivedStorage + 24);
    if (v19)
    {
      float v20 = (void *)[v19 predictionsWithCurrentContext:&FakePredictionContext];
      id v21 = FakePredictionContext;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v22 = [v20 countByEnumeratingWithState:&v31 objects:v38 count:16];
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = *(void *)v32;
        do
        {
          for (uint64_t i = 0; i != v23; ++i)
          {
            if (*(void *)v32 != v24) {
              objc_enumerationMutation(v20);
            }
            double v26 = *(void **)(*((void *)&v31 + 1) + 8 * i);
            [v26 confidence];
            int v27 = routingSessionManager_createDestinationWithRouteID((void *)[v26 outputDeviceID], 0);
            CFArrayAppendValue(Mutable, v27);
            if (v27) {
              CFRelease(v27);
            }
          }
          uint64_t v23 = [v20 countByEnumeratingWithState:&v31 objects:v38 count:16];
        }
        while (v23);
      }
    }
  }
  id v17 = FakePredictionContext;
  if (a2)
  {
    *a2 = FakePredictionContext;
    id v17 = FakePredictionContext;
  }
LABEL_8:

  return Mutable;
}

__CFDictionary *routingSessionManager_createDestinationWithRouteID(void *a1, int a2)
{
  values = a1;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  id v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D048];
  CFAllocatorRef v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  CFTypeRef cf = CFDictionaryCreate(v3, (const void **)kFigEndpointDescriptorKey_RouteUID, (const void **)&values, 1, v4, v5);
  CFArrayRef v7 = CFArrayCreate(v3, &cf, 1, MEMORY[0x1E4F1D510]);
  if (v7) {
    CFDictionarySetValue(Mutable, @"routingSessionDestination_RouteDescriptors", v7);
  }
  FigCFDictionarySetFloat();
  if (a2) {
    CFDictionarySetValue(Mutable, @"routingSessionDestination_FromForcedPrediction", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  return Mutable;
}

__CFDictionary *routingSessionManager_createDestinationWithRouteName(void *a1)
{
  values = a1;
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D048];
  CFAllocatorRef v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  CFTypeRef cf = CFDictionaryCreate(v1, (const void **)kFigEndpointDescriptorKey_RouteName, (const void **)&values, 1, v2, v3);
  CFArrayRef v5 = CFArrayCreate(v1, &cf, 1, MEMORY[0x1E4F1D510]);
  int v6 = (const void **)MEMORY[0x1E4F1CFC8];
  int v7 = FigCFEqual();
  int v8 = (const void **)MEMORY[0x1E4F1CFD0];
  if (v7) {
    int v8 = v6;
  }
  uint64_t v9 = *v8;
  if (v5)
  {
    CFDictionarySetValue(Mutable, @"routingSessionDestination_RouteDescriptors", v5);
    CFDictionarySetValue(Mutable, @"routingSessionDestination_ProvidesExternalVideoPlayback", v9);
    FigCFDictionarySetFloat();
    CFRelease(v5);
  }
  else
  {
    CFDictionarySetValue(Mutable, @"routingSessionDestination_ProvidesExternalVideoPlayback", v9);
    FigCFDictionarySetFloat();
  }
  if (cf) {
    CFRelease(cf);
  }
  return Mutable;
}

__CFDictionary *routingSessionManager_createDestinationWithRouteDescriptors(const __CFArray *a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  int v3 = routingSessionManager_routeDescriptorsProvideExternalVideoPlayback(a1);
  id v4 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFArrayRef v5 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (a1) {
    CFDictionarySetValue(Mutable, @"routingSessionDestination_RouteDescriptors", a1);
  }
  if (v3) {
    int v6 = v4;
  }
  else {
    int v6 = v5;
  }
  CFDictionarySetValue(Mutable, @"routingSessionDestination_ProvidesExternalVideoPlayback", v6);
  return Mutable;
}

uint64_t routingSessionManager_setPredictionContextForSession(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1E9359DE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716EE0](DerivedStorage[5]);
  if (DerivedStorage[9] == a2)
  {
    if (!DerivedStorage[11])
    {
      DerivedStorage[11] = a3;
      return MEMORY[0x199716EF0](DerivedStorage[5]);
    }
    if (dword_1E9359DE0) {
      goto LABEL_8;
    }
  }
  else if (dword_1E9359DE0)
  {
LABEL_8:
    int v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MEMORY[0x199716EF0](DerivedStorage[5]);
}

void *__routingSessionManager_loadAirPlayRoutePredictionFramework_block_invoke(uint64_t a1)
{
  uint64_t v2 = dlopen("/System/Library/PrivateFrameworks/AirPlayRoutePrediction.framework/AirPlayRoutePrediction", 4);
  if (!v2) {
    goto LABEL_14;
  }
  int v3 = v2;
  sARPRoutePredictorClass = (uint64_t)objc_getClass("ARPRoutePredictor");
  if (!sARPRoutePredictorClass) {
    goto LABEL_14;
  }
  sARPPredictionContextClass = (uint64_t)objc_getClass("ARPPredictionContext");
  if (!sARPPredictionContextClass) {
    goto LABEL_14;
  }
  id v4 = (uint64_t *)dlsym(v3, "ARPRoutePredictorPredictionsForCurrentContextUpdated");
  if (!v4) {
    goto LABEL_14;
  }
  sARPRoutePredictorPredictionsForCurrentContextUpdatedNotificationName = *v4;
  sARPMicroLocationSimilarityFunction = (double (*)(void, void))dlsym(v3, "ARPMicroLocationSimilarity");
  if (!sARPMicroLocationSimilarityFunction) {
    goto LABEL_14;
  }
  CFArrayRef v5 = (uint64_t *)dlsym(v3, "ARPPredictionSuppressedReasonNotFound");
  if (!v5) {
    goto LABEL_14;
  }
  gARPFeedback_1 = *v5;
  int v6 = (uint64_t *)dlsym(v3, "ARPPredictionSuppressedReasonNotSupported");
  if (!v6) {
    goto LABEL_14;
  }
  gARPFeedback_2 = *v6;
  int v7 = (uint64_t *)dlsym(v3, "ARPPresentationMediumAutoroute");
  if (!v7) {
    goto LABEL_14;
  }
  gARPFeedback_0 = *v7;
  int v8 = (uint64_t *)dlsym(v3, "ARPRoutingFailureReasonNotFound");
  if (!v8
    || (gARPFeedback_3 = *v8, (uint64_t v9 = (uint64_t *)dlsym(v3, "ARPPredictionSuppressedReasonExistingRoute")) == 0)
    || (gARPFeedback_4 = *v9, (gARPFeedback_5 = dlsym(v3, "ARPDonateFeedbackForPredictionPresented")) == 0)
    || (gARPFeedback_6 = dlsym(v3, "ARPDonateFeedbackForPredictionSuppressed")) == 0
    || (id result = dlsym(v3, "ARPDonateFeedbackForRoutingFailure"), (gARPFeedback_7 = result) == 0))
  {
LABEL_14:
    id result = (void *)FigSignalErrorAt();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

void routingSessionManager_establishRoutingSessionFromCurrentRoutes(const void *a1, const __CFArray *a2, void *a3)
{
  CFTypeRef cf = 0;
  DestinationWithRouteDescriptors = routingSessionManager_createDestinationWithRouteDescriptors(a2);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!FigRoutingSessionCreate(*MEMORY[0x1E4F1CF80], 0, DestinationWithRouteDescriptors, &cf))
  {
    routingSessionManager_updateCurrentSession(a1, cf, 0, 0, 0, 0, 0, 0, 0, 0, a3, 0);
    CFTypeRef v7 = cf;
    double Current = CFAbsoluteTimeGetCurrent();
    routingSessionManager_getConfiguration(&v14);
    CFDateRef v9 = CFDateCreate(v6, Current - v15);
    if (a1) {
      CFRetain(a1);
    }
    if (v7) {
      CFRetain(v7);
    }
    routingSessionManager_getConfiguration(v12);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    _OWORD v11[2] = __routingSessionManager_updatePredictionContextForSession_block_invoke;
    v11[3] = &__block_descriptor_48_e42_v24__0__NSArray_8__ARPPredictionContext_16l;
    void v11[4] = a1;
    void v11[5] = v7;
    routingSessionManager_waitForRecentPredictions(a1, v9, (uint64_t)v11, v13);
    if (v9) {
      CFRelease(v9);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (DestinationWithRouteDescriptors) {
    CFRelease(DestinationWithRouteDescriptors);
  }
}

void __routingSessionManager_updatePredictionContextForSession_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  routingSessionManager_setPredictionContextForSession(*(void *)(a1 + 32), *(void *)(a1 + 40), a3);
  id v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  CFArrayRef v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    CFRelease(v5);
  }
}

BOOL __routingSessionManager_updatePredictedDestinations_block_invoke(uint64_t a1, const __CFArray *a2)
{
  v28[21] = *(id *)MEMORY[0x1E4F143B8];
  v28[0] = 0;
  id v4 = routingSessionManager_copyCurrentPredictedDestinations(*(void *)(a1 + 32), v28, 0);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex v7 = 0;
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(v4); v7 < i; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v7);
    CFDictionaryRef AvailableDestinationFromAvailableRoutes = routingSessionManager_createAvailableDestinationFromAvailableRoutes(a2, ValueAtIndex);
    if (AvailableDestinationFromAvailableRoutes)
    {
      CFDictionaryRef v11 = AvailableDestinationFromAvailableRoutes;
      CFArrayAppendValue(Mutable, AvailableDestinationFromAvailableRoutes);
      CFRelease(v11);
    }
    ++v7;
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(Mutable);
    if (v4)
    {
LABEL_11:
      CFIndex v13 = CFArrayGetCount(v4);
      goto LABEL_14;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (v4) {
      goto LABEL_11;
    }
  }
  CFIndex v13 = 0;
LABEL_14:
  MEMORY[0x199716EE0](*(void *)(*(void *)(a1 + 40) + 40));
  int v14 = FigCFEqual();
  uint64_t v15 = *(void *)(a1 + 40);
  unsigned int v16 = *(const void **)(v15 + 48);
  *(void *)(v15 + 48) = Mutable;
  if (Mutable) {
    CFRetain(Mutable);
  }
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *(void *)(a1 + 40);
  id v18 = *(id *)(v17 + 56);
  if (v28[0] != v18)
  {

    id v19 = v28[0];
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(v17 + 56) = v19;
  }
  MEMORY[0x199716EF0](*(void *)(v17 + 40));
  if (!v14)
  {
    float v20 = CFStringCreateMutable(v5, 0);
    CFIndex v21 = 0;
    if (!Mutable) {
      goto LABEL_23;
    }
LABEL_22:
    for (CFIndex j = CFArrayGetCount(Mutable); v21 < j; CFIndex j = 0)
    {
      CFDictionaryRef v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v21);
      CFStringRef v24 = FigRoutingSessionDestinationCopyDescription(v5, v23);
      CFStringAppend(v20, v24);
      if (Mutable) {
        CFIndex v25 = CFArrayGetCount(Mutable);
      }
      else {
        CFIndex v25 = 0;
      }
      if (v21 < v25 - 1) {
        CFStringAppend(v20, @", ");
      }
      if (v24) {
        CFRelease(v24);
      }
      ++v21;
      if (Mutable) {
        goto LABEL_22;
      }
LABEL_23:
      ;
    }
    if (v20)
    {
      if (dword_1E9359DE0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRelease(v20);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v4) {
    CFRelease(v4);
  }
  return Count == v13;
}

void __routingSessionManager_updatePredictedDestinations_block_invoke_274(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  int v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void routingSessionManager_wifiPowerStatusChanged(uint64_t a1, const void *a2)
{
  if (sWiFiDeviceClientGetPower) {
    BOOL v3 = sFigRoutingSessionManagerWiFiDevice == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    int Power = 1;
  }
  else {
    int Power = sWiFiDeviceClientGetPower();
  }
  if (dword_1E9359DE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!Power)
  {
    routingSessionManager_updateCurrentSession(a2, 0, 0, 0, 1, 0, 0, 0, 0, 0, @"WiFi is powered off", 0);
    routingSessionManager_updatePredictedDestinations(a2, (uint64_t)&__block_literal_global_290);
  }
}

void sub_194E89518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void sub_194E8973C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t MXEndpointDescriptorLogRouteDelta(uint64_t a1, const __CFArray *a2, uint64_t a3, int a4)
{
  if (a4) {
    CFAllocatorRef v5 = @"The following endpoints went away for endpointManager=%@\n";
  }
  else {
    CFAllocatorRef v5 = @"The following endpoints are newly available for endpointManager=%@\n";
  }
  CFDictionaryRef v23 = v5;
  CFAllocatorRef v6 = (void *)[NSString stringWithFormat:a1];
  CFIndex v7 = 0;
  uint64_t v8 = 0;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_5:
  for (CFIndex i = CFArrayGetCount(a2); v7 < i; CFIndex i = 0)
  {
    CFArrayGetValueAtIndex(a2, v7);
    FigCFDictionaryGetValue();
    if (FigCFArrayContainsValue())
    {
      FigCFDictionaryGetValue();
      uint64_t Value = FigCFDictionaryGetValue();
      uint64_t v11 = FigCFDictionaryGetValue();
      if (v11) {
        LOBYTE(v11) = FigCFNumberGetUInt64();
      }
      uint64_t v12 = FigRoutingManagerCopyEndpointFeaturesAsString(v11);
      CFIndex v13 = (void *)[NSString stringWithFormat:@"\t[%ld] Endpoint=%@, supportedFeatures=%@\n", v8, Value, v12];
      uint64_t v14 = [v6 length];
      if ((unint64_t)([v13 length] + v14) > 0x3FF)
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v19 = objc_msgSend(NSString, "stringWithFormat:", v23, a1, v20);
        uint64_t v15 = [NSString stringWithFormat:@"%@\t[%ld] Endpoint=%@, supportedFeatures=%@\n", v19, v8, Value, v12];
      }
      else
      {
        uint64_t v15 = [NSString stringWithFormat:@"%@%@", v6, v13, v21, v22];
      }
      CFAllocatorRef v6 = (void *)v15;
      ++v8;
      if (v12) {
        CFRelease(v12);
      }
    }
    ++v7;
    if (a2) {
      goto LABEL_5;
    }
LABEL_6:
    ;
  }
  uint64_t result = [v6 length];
  if (result && dword_1E9359ED0)
  {
    id v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void MXEndpointDescriptorEndpointDescriptionDidChangeHandler(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x199716E90]([a2 _getCacheMutex]);
  [a2 _endpointDescriptionDidChangeForEndpoint:a4 notificationName:a3 payload:a5];
  [a2 _getCacheMutex];
  JUMPOUT(0x199716EA0);
}

uint64_t FigRoutingSessionManagerGetClassID()
{
  if (FigRoutingSessionManagerGetClassID_sRegisterFigRoutingSessionManagerBaseTypeOnce != -1) {
    dispatch_once_f(&FigRoutingSessionManagerGetClassID_sRegisterFigRoutingSessionManagerBaseTypeOnce, &FigRoutingSessionManagerGetClassID_sFigRoutingSessionManagerClassID, (dispatch_function_t)routingSessionManager_getClassID);
  }
  return FigRoutingSessionManagerGetClassID_sFigRoutingSessionManagerClassID;
}

uint64_t routingSessionManager_getClassID(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&routingSessionManager_getClassID_sFigRoutingSessionManagerClassDesc, ClassID, 1, a1);
}

uint64_t FigRoutingSessionManagerGetTypeID()
{
  if (FigRoutingSessionManagerGetClassID_sRegisterFigRoutingSessionManagerBaseTypeOnce != -1) {
    dispatch_once_f(&FigRoutingSessionManagerGetClassID_sRegisterFigRoutingSessionManagerBaseTypeOnce, &FigRoutingSessionManagerGetClassID_sFigRoutingSessionManagerClassID, (dispatch_function_t)routingSessionManager_getClassID);
  }
  uint64_t v0 = FigRoutingSessionManagerGetClassID_sFigRoutingSessionManagerClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

CFStringRef routingSessionManager_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRoutingSessionManager %p]", a1);
}

void sub_194E8C6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

__CFDictionary *FigRoutingSessionCopyAsDictionary(uint64_t a1, int a2)
{
  uint64_t value = 0;
  CFTypeRef cf = 0;
  if (!a1) {
    return 0;
  }
  uint64_t CMBaseObject = FigRoutingSessionGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, void, void **))(v6 + 48);
  if (!v8
    || (CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        v8(CMBaseObject, @"EstablishedAutomaticallyFromLikelyDestination", *MEMORY[0x1E4F1CF80], &value))
    || ((uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v11 = 0) : (v11 = v10),
        (uint64_t v12 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v11 + 8)) == 0 || v12(a1, &cf)))
  {
    CFIndex v7 = 0;
    CFIndex v13 = 0;
  }
  else
  {
    CFIndex v13 = CopySanitizedDestination((CFDictionaryRef)cf, a2);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFIndex v7 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"EstablishedAutomaticallyFromLikelyDestination", value);
      CFDictionarySetValue(v7, @"Destination", v13);
    }
  }
  if (value) {
    CFRelease(value);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

__CFDictionary *CopySanitizedDestination(CFDictionaryRef theDict, int a2)
{
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  id v4 = MutableCopy;
  if (!a2) {
    CFDictionaryRemoveValue(MutableCopy, @"routingSessionDestination_RouteDescriptors");
  }
  return v4;
}

CFDictionaryRef FigRoutingSessionCopyFromDictionary(const __CFDictionary *result)
{
  uint64_t v3 = 0;
  if (result)
  {
    CFDictionaryRef v1 = result;
    uint64_t Value = CFDictionaryGetValue(result, @"EstablishedAutomaticallyFromLikelyDestination");
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(v1, @"Destination");
    if (result)
    {
      FigRoutingSessionCreate(*MEMORY[0x1E4F1CF80], Value == (const void *)*MEMORY[0x1E4F1CFD0], result, &v3);
      return (const __CFDictionary *)v3;
    }
  }
  return result;
}

uint64_t FigRoutingSessionManagerStartServer()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  uint64_t v1 = FigXPCServerStart();
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v1;
}

uint64_t HandleRoutingSessionManagerRemoteMessageWithReply(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t HandleRoutingSessionManagerRemoteMessageWithNoReply(int a1, xpc_object_t xdict)
{
  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  unsigned int v3 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v3) {
    return v3;
  }
  else {
    return 4294951138;
  }
}

void *CreateCompletionCallbackParametersFromMessageAndConnection_0(void *a1)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(a1, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID);
  if (!uint64) {
    return 0;
  }
  uint64_t v3 = uint64;
  id v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200403ED2C137uLL);
  if (!v4)
  {
    if (FigSignalErrorAt()) {
      DestroyCompletionCallbackParameters(0);
    }
    return 0;
  }
  uint64_t v5 = v4;
  *id v4 = v3;
  v4[1] = xpc_dictionary_get_uint64(a1, (const char *)*MEMORY[0x1E4F20280]);
  void v5[2] = FigXPCRetain();
  return v5;
}

uint64_t StartHighConfidenceSessionCompletionCallback(uint64_t a1, int a2)
{
  if (a1)
  {
    if (!FigXPCCreateBasicMessage())
    {
      xpc_dictionary_set_uint64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID, *(void *)a1);
      xpc_dictionary_set_int64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionStatus, a2);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  DestroyCompletionCallbackParameters((void *)a1);
  return FigXPCRelease();
}

uint64_t PrepareForPlaybackCompletionCallback(uint64_t a1, int a2)
{
  if (a1)
  {
    if (!FigXPCCreateBasicMessage())
    {
      xpc_dictionary_set_uint64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionID, *(void *)a1);
      xpc_dictionary_set_int64(0, (const char *)kFigRoutingSessionManagerXPCMsgParam_CompletionStatus, a2);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  DestroyCompletionCallbackParameters((void *)a1);
  return FigXPCRelease();
}

uint64_t MXAggregateEndpointCreateAggregateEndpoint(const void *a1, const void *a2, int a3, void *a4)
{
  if (MXAggregateSetUpLoggingOnce_setUpLogging != -1) {
    dispatch_once(&MXAggregateSetUpLoggingOnce_setUpLogging, &__block_literal_global_77);
  }
  FigEndpointAggregateGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (!v8)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)(DerivedStorage + 56) = 0u;
    *(_OWORD *)(DerivedStorage + 72) = 0u;
    *(void *)(DerivedStorage + 88) = 0;
    *(_OWORD *)(DerivedStorage + 104) = 0u;
    *(_OWORD *)(DerivedStorage + 12singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0u;
    if (a2) {
      CFTypeRef v10 = CFRetain(a2);
    }
    else {
      CFTypeRef v10 = 0;
    }
    *(void *)(DerivedStorage + 32) = v10;
    if (a1) {
      CFTypeRef v11 = CFRetain(a1);
    }
    else {
      CFTypeRef v11 = 0;
    }
    *(void *)(DerivedStorage + 16) = v11;
    *(_DWORD *)(DerivedStorage + 24) = a3;
    *(void *)(DerivedStorage + 48) = 0;
    *(void *)(DerivedStorage + 96) = 0;
    *(void *)(DerivedStorage + 136) = 0;
    *(void *)(DerivedStorage + 144) = objc_alloc_init(MEMORY[0x1E4F1C978]);
    id v12 = objc_alloc_init(MEMORY[0x1E4F29128]);
    CFIndex v13 = (void *)[v12 UUIDString];

    *(void *)uint64_t DerivedStorage = v13;
    id v14 = [NSString alloc];
    uint64_t v15 = *(int *)(DerivedStorage + 24);
    if (v15 > 3) {
      unsigned int v16 = @"?";
    }
    else {
      unsigned int v16 = off_1E57CB970[v15];
    }
    *(void *)(DerivedStorage + 8) = [v14 initWithFormat:@"MXEndpointAggregate-%@-[{%p}]", v16, 0];
    *(void *)(DerivedStorage + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = FigSimpleMutexCreate();
    *a4 = 0;
    if (dword_1E9359B18)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v8;
}

uint64_t __MXAggregateSetUpLoggingOnce_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  return fig_note_initialize_category_with_default_work();
}

uint64_t endpointAggregate_Finalize()
{
  if (dword_1E9359B18)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 32);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 32) = 0;
  }
  id v4 = *(const void **)(DerivedStorage + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 96);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 136);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 136) = 0;
  }
  CFIndex v7 = *(const void **)(DerivedStorage + 8);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }

  uint64_t result = FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
  return result;
}

id endpointAggregate_CopyDebugDescription()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](DerivedStorage[5]);
  uint64_t v2 = (void *)[NSString stringWithFormat:@"<MXAggregateEndpoint: routingContextUUID: [%@] name: %@ uuid: %@ APAggregateEndpoint %@> ", DerivedStorage[4], DerivedStorage[1], *DerivedStorage, DerivedStorage[6]];
  MEMORY[0x199716EF0](DerivedStorage[5]);
  return v2;
}

uint64_t endpointAggregate_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
    CFArrayRef Copy = *(const void **)(DerivedStorage + 48);
    if (Copy) {
      CFArrayRef Copy = CFRetain(Copy);
    }
    goto LABEL_4;
  }
  if (FigCFEqual())
  {
    CFTypeRef v11 = *(const void **)(DerivedStorage + 8);
    if (v11)
    {
LABEL_7:
      CFTypeRef v12 = CFRetain(v11);
LABEL_11:
      uint64_t result = 0;
      *a4 = v12;
      return result;
    }
LABEL_10:
    CFTypeRef v12 = 0;
    goto LABEL_11;
  }
  if (FigCFEqual())
  {
    CFTypeRef v11 = *(const void **)DerivedStorage;
    if (*(void *)DerivedStorage) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    CFTypeRef v11 = *(const void **)(DerivedStorage + 32);
    if (v11) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    CFTypeRef v11 = (const void *)*MEMORY[0x1E4F21550];
    if (*MEMORY[0x1E4F21550]) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
    CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFArrayRef *)(DerivedStorage + 144));
LABEL_4:
    *a4 = Copy;
    MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
    return 0;
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __endpointAggregate_CopyProperty_block_invoke;
  v13[3] = &__block_descriptor_56_e28_i16__0__OpaqueFigEndpoint__8l;
  v13[4] = a2;
  void v13[5] = a3;
  void v13[6] = a4;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v13);
}

uint64_t endpointAggregate_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __endpointAggregate_SetProperty_block_invoke;
  void v4[3] = &__block_descriptor_48_e28_i16__0__OpaqueFigEndpoint__8l;
  void v4[4] = a2;
  void v4[5] = a3;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v4);
}

uint64_t endpointAggregate_WithRemoteAggregateEndpoint(uint64_t a1, uint64_t a2)
{
  v36[5] = *MEMORY[0x1E4F143B8];
  if (!endpointAggregate_IsMXAggregateEndpoint(a1))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  uint64_t v6 = *(const void **)(DerivedStorage + 48);
  if (v6)
  {
    uint64_t v7 = 0;
    goto LABEL_23;
  }
  unsigned int v30 = (const void *)a1;
  long long v32 = (uint64_t *)(DerivedStorage + 48);
  if (dword_1E9359B18)
  {
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v9 = *(void *)(DerivedStorage + 16);
  unsigned int v31 = *(_DWORD *)(DerivedStorage + 24);
  int v10 = 5;
  while (1)
  {
    if (dword_1E9359B18)
    {
      CFTypeRef v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    id v14 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v13 + 24);
    if (!v14)
    {
      uint64_t v7 = 4294954514;
      goto LABEL_17;
    }
    uint64_t v7 = v14(v9, v31, v32);
    if (!v7) {
      break;
    }
LABEL_17:
    if (dword_1E9359B18)
    {
      uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    usleep(0xC350u);
    if (!--v10) {
      goto LABEL_20;
    }
  }
  uint64_t v17 = (const void **)(DerivedStorage + 48);
  uint64_t v7 = *v32;
  if (!*v32)
  {
LABEL_20:
    unsigned int v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    uint64_t v17 = (const void **)(DerivedStorage + 48);
LABEL_21:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_22;
  }
  FigEndpointAggregateGetClassID();
  if (!CMBaseObjectIsMemberOfClass())
  {
    uint64_t v7 = 4294950576;
    goto LABEL_41;
  }
  if (!endpointAggregate_IsMXAggregateEndpoint((uint64_t)v30))
  {
    uint64_t v7 = 4294950576;
    goto LABEL_41;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v7 = FigNotificationCenterAddWeakListener();
  if (v7)
  {
LABEL_41:
    CFDictionaryRef v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    goto LABEL_21;
  }
  if (v30)
  {
    uint64_t v20 = *v32;
    if (*v32)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      *(void *)&buf[8] = MXAggregateEndpointHandleAuthRequired;
      *(void *)&buf[16] = MXAggregateEndpointHandleEndpointFailed;
      *(void *)buf = CFRetain(v30);
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      CFStringRef v24 = *(void (**)(uint64_t, unsigned char *))(v22 + 48);
      if (v24) {
        v24(v20, buf);
      }
      v36[1] = 0;
      v36[2] = MXAggregateEndpointDidReceiveDataFromCommChannel;
      v36[3] = MXAggregateEndpointDidCloseCommChannel;
      v36[0] = CFRetain(v30);
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      int v27 = *(uint64_t (**)(uint64_t, void *))(v26 + 56);
      if (v27) {
        uint64_t v7 = v27(v20, v36);
      }
      else {
        uint64_t v7 = 4294954514;
      }
    }
  }
LABEL_22:
  uint64_t v6 = *v17;
  if (*v17) {
LABEL_23:
  }
    CFTypeRef v18 = CFRetain(v6);
  else {
    CFTypeRef v18 = 0;
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  if (!v7 && v18)
  {
LABEL_28:
    uint64_t v7 = (*(uint64_t (**)(uint64_t, CFTypeRef))(a2 + 16))(a2, v18);
    goto LABEL_29;
  }
  MXSimulateCrash((uint64_t)"Something went wrong when setting up the remote aggregate endpoint. Please file a bug to Medi"
                           "aExperience (New Bugs) | All.");
  if (v7)
  {
    CFDictionaryRef v28 = MXGetAssertionLog();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "-MXAggregateEndpoint-";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "endpointAggregate_WithRemoteAggregateEndpoint";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v34) = 590;
      _os_log_impl(&dword_194CDF000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Something is seriously wrong. Please file a radar to MediaExperience (New Bugs) | All.", buf, 0x1Cu);
    }
    if (!v18) {
      return v7;
    }
LABEL_29:
    CFRelease(v18);
    return v7;
  }
  if (v18) {
    goto LABEL_28;
  }
  int v29 = MXGetAssertionLog();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "-MXAggregateEndpoint-";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "endpointAggregate_WithRemoteAggregateEndpoint";
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v34) = 591;
    _os_log_impl(&dword_194CDF000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Something is seriously wrong. Please file a radar to MediaExperience (New Bugs) | All.", buf, 0x1Cu);
  }
  return 4294950571;
}

BOOL endpointAggregate_IsMXAggregateEndpoint(uint64_t a1)
{
  BOOL result = 0;
  if (a1)
  {
    FigEndpointAggregateGetClassID();
    if (CMBaseObjectIsMemberOfClass())
    {
      if ((_UNKNOWN *)CMBaseObjectGetVTable() == &kMXAggregateEndpointVTable) {
        return 1;
      }
    }
  }
  return result;
}

void endpointAggregate_NotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)MEMORY[0x1997179E0]();
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  int v8 = FigCFEqual();
  MEMORY[0x199716EE0](DerivedStorage[5]);
  if (a4 && FigCFEqual())
  {
    if (v8)
    {
      if (dword_1E9359B18)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MXAggregateEndpointRemoveAndDestroyRemoteAggregateEndpoint(a2);
      CFTypeRef v11 = (void (*)(uint64_t, void, void, const void *))DerivedStorage[9];
      if (DerivedStorage[12]) {
        uint64_t v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      }
      else {
        uint64_t v12 = 0;
      }
      MEMORY[0x199716EF0](DerivedStorage[5]);
      if (v11) {
        v11(a2, 0, MEMORY[0x1E4F1CC08], v12);
      }
      if (v12) {
        CFRelease(v12);
      }
    }
    else
    {
      MEMORY[0x199716EF0](DerivedStorage[5]);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
  }
  else
  {
    if (dword_1E9359B18)
    {
      int v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x199716EF0](DerivedStorage[5]);
  }
}

uint64_t MXAggregateEndpointRemoveAndDestroyRemoteAggregateEndpoint(uint64_t a1)
{
  if (!endpointAggregate_IsMXAggregateEndpoint(a1)) {
    return 4294950576;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 48)
    && (FigEndpointAggregateGetClassID(), CMBaseObjectIsMemberOfClass())
    && endpointAggregate_IsMXAggregateEndpoint(a1))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v3 = FigNotificationCenterRemoveWeakListener();
  }
  else
  {
    uint64_t v3 = 4294950576;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 48);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t))(v6 + 32);
  if (v7) {
    v7(v4);
  }
  int v8 = *(const void **)(DerivedStorage + 48);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 48) = 0;
  }

  *(void *)(DerivedStorage + 144) = objc_alloc_init(MEMORY[0x1E4F1C978]);
  return v3;
}

void MXAggregateEndpointHandleAuthRequired(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](DerivedStorage[5]);
  id v14 = (void (*)(uint64_t, uint64_t, uint64_t, const void *, uint64_t, uint64_t, uint64_t))DerivedStorage[8];
  if (DerivedStorage[12]) {
    uint64_t v15 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    uint64_t v15 = 0;
  }
  MEMORY[0x199716EF0](DerivedStorage[5]);
  if (v14) {
    v14(a4, a2, a3, v15, a5, a6, a7);
  }
  if (v15)
  {
    CFRelease(v15);
  }
}

void MXAggregateEndpointHandleEndpointFailed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](DerivedStorage[5]);
  int v8 = (void (*)(uint64_t, uint64_t, uint64_t, const void *))DerivedStorage[9];
  if (DerivedStorage[12]) {
    uint64_t v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    uint64_t v9 = 0;
  }
  MEMORY[0x199716EF0](DerivedStorage[5]);
  if (v8) {
    v8(a4, a2, a3, v9);
  }
  if (v9)
  {
    CFRelease(v9);
  }
}

void MXAggregateEndpointDidReceiveDataFromCommChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](DerivedStorage[5]);
  int v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, const void *))DerivedStorage[15];
  if (DerivedStorage[17]) {
    CFTypeRef v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    CFTypeRef v11 = 0;
  }
  MEMORY[0x199716EF0](DerivedStorage[5]);
  if (v10) {
    v10(a5, a2, a3, a4, v11);
  }
  if (v11)
  {
    CFRelease(v11);
  }
}

void MXAggregateEndpointDidCloseCommChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](DerivedStorage[5]);
  int v8 = (void (*)(uint64_t, uint64_t, uint64_t, const void *))DerivedStorage[16];
  if (DerivedStorage[17]) {
    uint64_t v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    uint64_t v9 = 0;
  }
  MEMORY[0x199716EF0](DerivedStorage[5]);
  if (v8) {
    v8(a4, a2, a3, v9);
  }
  if (v9)
  {
    CFRelease(v9);
  }
}

uint64_t endpointAggregate_Activate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __endpointAggregate_Activate_block_invoke;
  v6[3] = &__block_descriptor_72_e28_i16__0__OpaqueFigEndpoint__8l;
  v6[4] = a1;
  void v6[5] = a2;
  void v6[6] = a3;
  v6[7] = a4;
  void v6[8] = a5;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v6);
}

uint64_t endpointAggregate_Deactivate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  uint64_t v9 = *(const void **)(DerivedStorage + 48);
  if (v9)
  {
    CFTypeRef v10 = CFRetain(v9);
    if (v10)
    {
      CFTypeRef v11 = v10;
      uint64_t v12 = [[MXAggregateEndpointCallback alloc] initWithAggregate:a1 features:0 options:a2 callback:a3 callbackRefCon:a4 operationType:2];
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v17 = *(uint64_t (**)(const void *, uint64_t, void (*)(uint64_t, uint64_t, uint64_t, unsigned int, void *), MXAggregateEndpointCallback *))(v14 + 16);
      if (v17)
      {
        uint64_t v16 = v17(v11, a2, MXAggregateEndpointCompletionCallback, v12);
        if (!v16)
        {
          uint64_t v16 = MXAggregateEndpointRemoveAndDestroyRemoteAggregateEndpoint(a1);
LABEL_13:
          CFRelease(v11);
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v16 = 4294954514;
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_13;
    }
  }
  uint64_t v15 = MXGetAssertionLog();
  uint64_t v16 = 0;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v21 = "-MXAggregateEndpoint-";
    __int16 v22 = 2082;
    CFDictionaryRef v23 = "endpointAggregate_Deactivate";
    __int16 v24 = 1024;
    int v25 = 690;
    _os_log_impl(&dword_194CDF000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Something is seriously wrong. Please file a radar to MediaExperience (New Bugs) | All.", buf, 0x1Cu);
    uint64_t v16 = 0;
  }
LABEL_14:
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  return v16;
}

uint64_t endpointAggregate_SetDelegateRouting(uint64_t a1, long long *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (dword_1E9359B18)
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  uint64_t v6 = *(const void **)(DerivedStorage + 96);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v7 = (_OWORD *)(DerivedStorage + 56);
  if (a2)
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(DerivedStorage + 88) = *((void *)a2 + 4);
    *uint64_t v7 = v8;
    *(_OWORD *)(DerivedStorage + 72) = v9;
    *(void *)(DerivedStorage + 96) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  }
  else
  {
    *(void *)(DerivedStorage + 88) = 0;
    *uint64_t v7 = 0u;
    *(_OWORD *)(DerivedStorage + 72) = 0u;
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  _OWORD v11[2] = __endpointAggregate_SetDelegateRouting_block_invoke;
  v11[3] = &__block_descriptor_40_e28_i16__0__OpaqueFigEndpoint__8l;
  void v11[4] = a1;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v11);
}

uint64_t endpointAggregate_SetDelegateRemoteControl(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  uint64_t v5 = *(const void **)(DerivedStorage + 136);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 136) = 0;
  }
  uint64_t v6 = (_OWORD *)(DerivedStorage + 104);
  if (a2)
  {
    long long v7 = a2[1];
    _OWORD *v6 = *a2;
    *(_OWORD *)(DerivedStorage + 12singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = v7;
    *(void *)(DerivedStorage + 136) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  }
  else
  {
    _OWORD *v6 = 0u;
    *(_OWORD *)(DerivedStorage + 12singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0u;
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __endpointAggregate_SetDelegateRemoteControl_block_invoke;
  v9[3] = &__block_descriptor_40_e28_i16__0__OpaqueFigEndpoint__8l;
  v9[4] = a1;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v9);
}

void MXAggregateEndpointCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5)
{
  long long v8 = (void (*)(uint64_t, uint64_t, uint64_t, void, uint64_t))[a5 callback];
  uint64_t v9 = [a5 endpoint];
  uint64_t v10 = [a5 callbackRefCon];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9359B18)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v8) {
    v8(v9, a2, a3, a4, v10);
  }
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  if ([a5 operationType] == 2)
  {
    uint64_t v13 = [*(id *)(DerivedStorage + 144) count];
    if (a1)
    {
      if (!v13 && *(void *)(DerivedStorage + 48) && FigCFEqual())
      {
        if (dword_1E9359B18)
        {
          uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MXAggregateEndpointRemoveAndDestroyRemoteAggregateEndpoint(v9);
      }
    }
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
}

uint64_t endpointAggregate_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __endpointAggregate_SendCommand_block_invoke;
  v6[3] = &__block_descriptor_64_e28_i16__0__OpaqueFigEndpoint__8l;
  v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  v6[7] = a5;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v6);
}

uint64_t endpointAggregate_SendData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __endpointAggregate_SendData_block_invoke;
  v6[3] = &__block_descriptor_64_e28_i16__0__OpaqueFigEndpoint__8l;
  v6[4] = a2;
  void v6[5] = a3;
  void v6[6] = a4;
  v6[7] = a5;
  return endpointAggregate_WithRemoteAggregateEndpoint(a1, (uint64_t)v6);
}

uint64_t endpointAggregate_AddEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  FigEndpointAggregateGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t FigEndpoint = FigEndpointAggregateGetFigEndpoint();
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __endpointAggregate_AddEndpoint_block_invoke;
  v13[3] = &__block_descriptor_80_e28_i16__0__OpaqueFigEndpoint__8l;
  v13[4] = a1;
  void v13[5] = a3;
  void v13[6] = a4;
  void v13[7] = a5;
  v13[8] = a2;
  v13[9] = DerivedStorage;
  return endpointAggregate_WithRemoteAggregateEndpoint(FigEndpoint, (uint64_t)v13);
}

uint64_t endpointAggregate_RemoveEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  FigEndpointAggregateGetFigEndpoint();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t FigEndpoint = FigEndpointAggregateGetFigEndpoint();
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __endpointAggregate_RemoveEndpoint_block_invoke;
  v13[3] = &__block_descriptor_80_e28_i16__0__OpaqueFigEndpoint__8l;
  v13[4] = a1;
  void v13[5] = a3;
  void v13[6] = a4;
  void v13[7] = a5;
  v13[8] = a2;
  v13[9] = DerivedStorage;
  return endpointAggregate_WithRemoteAggregateEndpoint(FigEndpoint, (uint64_t)v13);
}

void MXAggregateSubEndpointCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  CFTypeRef v11 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))[a6 callback];
  uint64_t v12 = [a6 endpoint];
  uint64_t v13 = [a6 callbackRefCon];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9359B18)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 40));
  MXAggregateEndpointUpdateSubEndpoints();
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 40));
  if (v11) {
    v11(v12, a2, a3, a4, a5, v13);
  }
}

void MXAggregateEndpointUpdateSubEndpoints()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  uint64_t v1 = *(const void **)(DerivedStorage + 48);
  if (!v1)
  {
    CFTypeRef v2 = 0;
    goto LABEL_6;
  }
  CFTypeRef v2 = CFRetain(v1);
  if (!v2)
  {
LABEL_6:
    char v6 = 1;
    goto LABEL_11;
  }
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  long long v7 = *(void (**)(uint64_t, void, void, void **))(v5 + 48);
  if (v7) {
    v7(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &v9);
  }
  char v6 = 0;
LABEL_11:

  id v8 = v9;
  if (!v9) {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1C978]);
  }
  *(void *)(DerivedStorage + 144) = v8;
  if ((v6 & 1) == 0) {
    CFRelease(v2);
  }
}

uint64_t MXCoreSessionTeardown(void *a1)
{
  v15[16] = *MEMORY[0x1E4F143B8];
  if ([a1 playbackAssertionRef]) {
    CMSMSleep_ReleasePlaybackProcessAssertion(a1);
  }
  if ([a1 needToEndInterruption])
  {
    if ([a1 isTheAssistant]) {
      CFStringRef v2 = @"resumable.deallocated";
    }
    else {
      CFStringRef v2 = @"non-resumable.deallocated";
    }
    MXCoreSessionEndInterruption_WithSecTaskAndStatus(a1, 0, v2, 1);
  }
  else
  {
    if ([a1 isPlaying]) {
      cmsSetIsPlaying(a1, 0);
    }
    if ([a1 isActive])
    {
      cmsSetIsActive(a1, 0, 0);
      CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded();
    }
  }
  int v3 = [a1 wantsToShowMicrophoneIndicatorWhenNotRecording];
  [a1 setHasEntitlementToShowMicrophoneIndicatorWhileNotRecording:0];
  [a1 setWantsToShowMicrophoneIndicatorWhenNotRecording:0];
  int v4 = [a1 isUsingBuiltInMicForRecording];
  [a1 setHasEntitlementToSetIsUsingBuiltInMicForRecording:0];
  [a1 setIsUsingBuiltInMicForRecording:0];
  if ([a1 isRecording])
  {
    [a1 setIsRecording:0];
    CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
    MX_PrivacyAccounting_EndRecordingAccessIntervals((void *)[a1 bundleIdToPAAccessIntervalMap]);
    [a1 setBundleIdToPAAccessIntervalMap:0];
  }
  else if ((v3 | v4) == 1)
  {
    MX_SystemStatus_PublishRecordingClientsInfo();
  }
  if ([+[MXExclaves sharedInstance] updateSensorStatus:a1 reason:@"session is being released"])
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  cmsVibrateForSession(a1, 0);
  CMSMSleep_UpdateIdleSleepPreventor(a1, 0);
  if (!MX_FeatureFlags_IsBypassCodecArbitrationEnabled())
  {
    MEMORY[0x199716E90](gCMSM);
    if (dword_1E9359BF8 >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        int v14 = 0;
        uint64_t v7 = *(void *)(qword_1E9359C00 + 24 * v6);
        v15[0] = 0;
        cmsmGetCountAndResourceEntriesOfType(v7, &v14, v15);
        id v8 = (void *)v15[0];
        if (!v15[0]) {
          break;
        }
        uint64_t v9 = v14;
        if (v14 >= 1)
        {
          uint64_t v10 = (void **)(v15[0] + 16 * v6);
          do
          {
            if (*v10 == a1)
            {
              *id v8 = 0;
              v8[1] = 0;
            }
            v8 += 2;
            --v9;
          }
          while (v9);
        }
        ++v6;
      }
      while (v6 < dword_1E9359BF8);
    }
    MEMORY[0x199716EA0](gCMSM);
  }
  cmsReleaseBorrowedStarkMainAudio(a1, 0);
  [+[MXSessionManager sharedInstance] unduckSessionsForDucker:a1];
  CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
  if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
    && MX_FeatureFlags_IsCallManagementMuteControlEnabled()
    && [a1 hasPhoneCallBehavior])
  {
    -[MXSessionManager removeEntryFromMutedBundleIDCache:bundleID:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "removeEntryFromMutedBundleIDCache:bundleID:", objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), 0);
  }
  MX_RunningBoardServices_StopMonitoringForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID", v12, v13), "intValue"));
  [a1 setClientPID:0];
  MX_RunningBoardServices_StopMonitoringForPID([a1 pidToInheritAppStateFrom]);
  [a1 setPidToInheritAppStateFrom:0];
  return [+[MXSessionManager sharedInstance] cleanupSessionAssertionsIfNeeded:a1 cleanupReason:1];
}

uint64_t MXCoreSessionEndInterruption_WithSecTaskAndStatus(void *a1, __SecTask *a2, const __CFString *a3, int a4)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ([a1 isActive] & 1) != 0 || (objc_msgSend(a1, "notFullyInactive"))
    {
      if (a4
        || ![a1 isActive]
        || CMSUtility_HasEntitlementForInterruptions(a1, a2))
      {
        if (qword_1E9359B68) {
          ((void (*)(uint64_t, uint64_t, void, void))qword_1E9359B68)(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), objc_msgSend(a1, "audioSessionID"), 0, 0);
        }
        char v101 = [a1 currentlyControllingFlags];
        char v134 = 1;
        char v133 = 1;
        v111 = -[MXDuckingSource initWithType:ID:duckVolume:duckFadeDuration:]([MXDuckingSource alloc], "initWithType:ID:duckVolume:duckFadeDuration:", 2, objc_msgSend((id)objc_msgSend(a1, "ID"), "longLongValue"), 0.0, 0.0);
        int v108 = [a1 nowPlayingAppWasStoppedOnMostRecentActivation];
        CFStringRef cf1 = a3;
        if (CMSUtility_DoesSessionWantToPauseSpokenAudio(a1)
          || CMSUtility_DidSessionRecentlyWantToPauseSpokenAudio(a1))
        {
          char v8 = [a1 isTheAssistant];
          char v107 = v8 ^ 1;
        }
        else
        {
          char v107 = 0;
          char v8 = 1;
        }
        if (dword_1E9359ED0)
        {
          *(_DWORD *)CFAllocatorRef v123 = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if ([(NSPointerArray *)[+[MXSessionManager sharedInstance] mxCoreSessionList] count] < 0x21)
        {
          int v14 = (void **)v148;
        }
        else
        {
          NSUInteger v13 = [(NSPointerArray *)[+[MXSessionManager sharedInstance] mxCoreSessionList] count];
          int v14 = (void **)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 16 * v13, 0);
          if (!v14)
          {

            return 0;
          }
        }
        ptr = v14;
        CMSUtility_InterpretInterruptionStyle(a1, (BOOL *)&v134, 0, (BOOL *)&v133);
        if (cf1) {
          BOOL v104 = CFEqual(cf1, @"non-resumable.deallocated") != 0;
        }
        else {
          BOOL v104 = 0;
        }
        if ([a1 makesMusicResume])
        {
          char v15 = 0;
        }
        else
        {
          if (![a1 needToEndInterruption])
          {
            char v15 = 0;
            CFStringRef cf = 0;
LABEL_43:
            if (-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v89, v95), "isSpeechDetectCategory:", [a1 audioCategory])&& ((cf1 != 0) & objc_msgSend(a1, "areBothBudsInEarForA2DPPortBeforeInterrupting")) == 1&& CFStringHasPrefix(cf1, @"resumable")&& -[MXSessionManager isAtleastOneBudNotInEarForA2DPPort](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAtleastOneBudNotInEarForA2DPPort"))
            {
              if (cf) {
                CFRelease(cf);
              }
              CFStringRef cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@-%@", @"non", cf1);
              if (dword_1E9359ED0)
              {
                *(_DWORD *)CFAllocatorRef v123 = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v21, type[0]);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            [+[MXSessionManager sharedInstance] cancelAnyInProgressRampIfNeeded:a1 reason:1];
            cmsSetIsPlaying(a1, 0);
            if (![a1 extendBackgroundAppAssertionTimer] && objc_msgSend(a1, "playbackAssertionRef")) {
              CMSMSleep_ReleasePlaybackProcessAssertion(a1);
            }
            MEMORY[0x199716E90](gCMSM);
            if (dword_1E9359ED0)
            {
              *(_DWORD *)CFAllocatorRef v123 = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              __int16 v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v22, type[0]);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (objc_msgSend(a1, "triggeredRemoteInterruption", v91, v97))
            {
              if ((CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
                 || CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
                && CMSM_IDSConnection_IsNearbyPairedDevicePresent())
              {
                CMSM_IDSClient_NotifyRemote_LocalIsDoingEndInterruption(cf1);
              }
              [a1 setTriggeredRemoteInterruption:0];
            }
            int v110 = [a1 currentlyControllingFlags];
            BOOL v23 = ([a1 currentlyControllingFlags] & 2) != 0
               && ([a1 currentlyControllingFlags] & 0x10) == 0;
            cmsSetIsActive(a1, 0, 0);
            [a1 resetInterruptionFlags];
            [a1 setWasInterruptedByNowPlayingApp:0];
            [a1 setWasInterruptedWhileSuspended:0];
            int v103 = [a1 doNotNotifyOtherSessionsOnNextInactive];
            if (v103)
            {

              if (cf) {
                CFRelease(cf);
              }
              goto LABEL_231;
            }
            if ((([a1 currentlyControllingFlags] & 0x10) != 0
               && ![a1 isSharePlayCapableCallSession]
               || CMSUtility_IsSharePlayCapableMediaSession(a1))
              && CMSMUtility_IsSharePlayCapableCallSessionActive())
            {
              CMSMUtility_SetPhoneCallVolumeToCurrentMediaPlaybackVolume();
              CMSMUtility_TransferVolumeControlFlagToSharePlayCapableCallSession();
            }
            else if (([a1 isSharePlayCapableCallSession] & v23) == 1)
            {
              CMSMUtility_SetPhoneCallVolumeToCurrentMediaPlaybackVolume();
            }
            cmsReleaseBorrowedStarkMainAudio(a1, v15);
            [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
            long long v131 = 0u;
            long long v132 = 0u;
            long long v129 = 0u;
            long long v130 = 0u;
            obCFIndex j = [+[MXSessionManager sharedInstance] mxCoreSessionList];
            int v24 = 0;
            uint64_t v25 = [(NSPointerArray *)obj countByEnumeratingWithState:&v129 objects:v146 count:16];
            if (v25)
            {
              uint64_t v26 = *(void *)v130;
              CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              do
              {
                uint64_t v27 = 0;
                do
                {
                  if (*(void *)v130 != v26) {
                    objc_enumerationMutation(obj);
                  }
                  CFDictionaryRef v28 = *(void **)(*((void *)&v129 + 1) + 8 * v27);
                  if (v28 != a1
                    && [*(id *)(*((void *)&v129 + 1) + 8 * v27) isDucked]
                    && [+[MXSessionManager sharedInstance] isSessionDucked:v28 duckingSource:v111])
                  {
                    int v29 = &ptr[2 * v24];
                    NSObject *v29 = v28;
                    *((_DWORD *)v29 + 2) = 3;
                    id v30 = v28;
                    ++v24;
                  }
                  if (objc_msgSend(v28, "waitingToResume", v92, v98)
                    && ([v28 isPlaying] & 1) == 0)
                  {
                    if (v28 == a1)
                    {
                      [a1 setWaitingToResume:0];
                      goto LABEL_110;
                    }
                    [a1 audioCategory];
                    if (FigCFEqual())
                    {
                      [v28 audioCategory];
                      if (FigCFEqual())
                      {
                        if (CMSMUtility_FetchBackgroundEntitlement(objc_msgSend((id)objc_msgSend(v28, "clientPID"), "intValue"))) {
                          CMSMSleep_FetchTemporaryPlaybackProcessAssertion(v28);
                        }
                        [v28 setWaitingToResume:0];
                        long long v32 = &ptr[2 * v24];
                        *long long v32 = v28;
                        *((_DWORD *)v32 + 2) = 1;
                        id v33 = v28;
                        ++v24;
                        goto LABEL_110;
                      }
                    }
                    if ((void *)[v28 interruptingSession] != a1) {
                      goto LABEL_110;
                    }
                    if (FigEndpointCentralEntityHoldsResource(qword_1E9359C70, 0x1EE5E6788, 0x1EE5F1968))
                    {
                      [v28 setInterruptingSession:qword_1E9359C68];
                      goto LABEL_110;
                    }
                    uint64_t v34 = CMSMUtility_GetPlayingPhoneCallOrRingtoneSession();
                    int v35 = v108;
                    if (!v34) {
                      int v35 = 0;
                    }
                    if (v35 == 1
                      && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v28)
                      && ([v28 isSharePlayMediaSession] & 1) == 0)
                    {
                      [v28 setInterruptingSession:v34];
                      goto LABEL_110;
                    }
                    if (v108
                      && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v28)
                      && CMSMNP_GetNowPlayingAppIsPlaying())
                    {
                      id v36 = CMSMNP_CopyNowPlayingAppSession();
                      if (dword_1E9359ED0)
                      {
                        *(_DWORD *)CFAllocatorRef v123 = 0;
                        type[0] = OS_LOG_TYPE_DEFAULT;
                        unsigned int v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v37, type[0]);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      objc_msgSend(v28, "setInterruptingSession:", 0, v92, v98);
                      [v28 setWaitingToResume:0];

                      goto LABEL_110;
                    }
                    [v28 setWaitingToResume:0];
                    CFArrayRef v38 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
                    AudioObjectID A2DPPort = cmsmGetA2DPPort(v38);
                    if (v38) {
                      CFRelease(v38);
                    }
                    if (A2DPPort && vaeDoesBTPortSupportInEarDetection(A2DPPort))
                    {
                      int IsBTPortKnownToNotBeInEar = CMSMVAUtility_IsBTPortKnownToNotBeInEar(A2DPPort);
                      BOOL v41 = IsBTPortKnownToNotBeInEar != 0;
                      if (IsBTPortKnownToNotBeInEar && dword_1E9359ED0)
                      {
                        *(_DWORD *)CFAllocatorRef v123 = 0;
                        type[0] = OS_LOG_TYPE_DEFAULT;
                        CFRange v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v42, type[0]);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        BOOL v41 = 1;
                      }
                    }
                    else
                    {
                      BOOL v41 = 0;
                    }
                    if (CMSUtility_IsAudioCategoryNonLongFormPlayback((uint64_t)v28)) {
                      goto LABEL_236;
                    }
                    if ([v28 overridePortsList]) {
                      goto LABEL_236;
                    }
                    int IsSharedAudioRouteConnectedToLocalAndRemote = CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote();
                    if (!v41)
                    {
                      if (IsSharedAudioRouteConnectedToLocalAndRemote) {
                        goto LABEL_236;
                      }
                    }
                    if (objc_msgSend(v28, "audioCategory", v92, v98)
                      && (int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)[v28 audioCategory]),
                          int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName([v28 audioMode]),
                          CFArrayRef v46 = (const __CFArray *)vaemCopyVADOutputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)[v28 activationContext], (const void *)objc_msgSend(v28, "allowedPortTypes")), (v47 = v46) != 0))
                    {
                      CFIndex Count = CFArrayGetCount(v46);
                      if (Count < 1)
                      {
                        CFMutableDictionaryRef Mutable = 0;
                      }
                      else
                      {
                        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
                        for (uint64_t i = 0; i != Count; ++i)
                        {
                          uint64_t v147 = 0;
                          FigCFArrayGetInt64AtIndex();
                          id v50 = vaeCopyFigOutputDeviceNameFromVADPort(v147);
                          if (v50)
                          {
                            CFArrayAppendValue(Mutable, v50);
                            CFRelease(v50);
                          }
                        }
                      }
                      CFRelease(v47);
                    }
                    else
                    {
                      CFMutableDictionaryRef Mutable = 0;
                    }
                    [v28 activeRoutesWhenInterrupted];
                    if (FigCFEqual())
                    {
LABEL_148:
                      int v51 = 1;
                      if (!Mutable) {
                        goto LABEL_155;
                      }
LABEL_154:
                      CFRelease(Mutable);
                      goto LABEL_155;
                    }
                    if (CMSMVAUtility_IsAnyRouteAvailableForRouteConfiguration([v28 activeRoutesWhenInterrupted], (NSDictionary *)objc_msgSend(v28, "audioCategory"), objc_msgSend(v28, "audioMode"), (const void *)objc_msgSend(v28, "allowedPortTypes")))
                    {
                      [v28 activeRoutesWhenInterrupted];
                      if (FigCFArrayContainsValue())
                      {
                        byte_1E9359C78 = 0;
                        goto LABEL_148;
                      }
                    }
                    int v51 = 0;
                    if (Mutable) {
                      goto LABEL_154;
                    }
LABEL_155:
                    if (v51)
                    {
LABEL_236:
                      char v52 = !CMSMUtility_FetchBackgroundEntitlement(objc_msgSend((id)objc_msgSend(v28, "clientPID", v92, v98), "intValue"))|| v104;
                      if ((v52 & 1) == 0 && ([v28 wasInterruptedWhileSuspended] & 1) == 0) {
                        CMSMSleep_FetchTemporaryPlaybackProcessAssertion(v28);
                      }
                      if (dword_1E9359ED0)
                      {
                        *(_DWORD *)CFAllocatorRef v123 = 0;
                        type[0] = OS_LOG_TYPE_DEFAULT;
                        unsigned int v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v53, type[0]);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      uint64_t v54 = &ptr[2 * v24];
                      *uint64_t v54 = v28;
                      *((_DWORD *)v54 + 2) = 1;
                      id v55 = v28;
                      ++v24;
                    }
                    if (CMSUtility_IsDoingSpokenAudio(v28)) {
                      char v56 = v107;
                    }
                    else {
                      char v56 = 0;
                    }
                    if ((v56 & 1) == 0) {
                      [v28 setActiveRoutesWhenInterrupted:0];
                    }
                    goto LABEL_110;
                  }
                  if (v28 == a1) {
                    goto LABEL_110;
                  }
                  if ([v28 isActive] && objc_msgSend(v28, "isPlaying"))
                  {
                    [v28 setWaitingToResume:0];
                    if (!v110) {
                      goto LABEL_110;
                    }
LABEL_93:
                    cmsTryToTakeControl(v28);
                    goto LABEL_110;
                  }
                  if ([v28 isActive])
                  {
                    if (!CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote() && v110 != 0) {
                      goto LABEL_93;
                    }
                  }
LABEL_110:
                  ++v27;
                }
                while (v27 != v25);
                uint64_t v57 = [(NSPointerArray *)obj countByEnumeratingWithState:&v129 objects:v146 count:16];
                uint64_t v25 = v57;
              }
              while (v57);
            }
            [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
            MEMORY[0x199716EA0](gCMSM);
            [+[MXSessionManager sharedInstance] startAsyncDuckingOperation];
            if ([+[MXSessionManager sharedInstance] voiceOverSessionWantsRelativeDucking:a1])
            {
              if (dword_1E9359ED0)
              {
                *(_DWORD *)CFAllocatorRef v123 = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                uint64_t v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v58, type[0]);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              [+[MXSessionManager sharedInstance] updateDuckedSessionsForVoiceOver:a1];
            }
            CFStringRef v59 = cf1;
            if (v24 < 1)
            {
              [+[MXSessionManager sharedInstance] endAsyncDuckingOperationForSession:a1];
              goto LABEL_222;
            }
            if (cf) {
              CFStringRef v59 = cf;
            }
            CFStringRef obja = v59;
            uint64_t v60 = v24;
            uint64_t v61 = v24;
            int v62 = ptr;
            while (1)
            {
              CFNumberRef v63 = CMSUtility_CopyFadeDuration(a1, 1, 0);
              int v64 = *((_DWORD *)v62 + 2);
              if (v64 == 3)
              {
                [+[MXSessionManager sharedInstance] unduckVolume:*v62 sessionCausingUnduck:a1 duckingSource:v111];
              }
              else if (v64 == 1)
              {
                BOOL IsDoingSpokenAudio = CMSUtility_IsDoingSpokenAudio(*v62);
                char v66 = v107 ^ 1;
                if (!IsDoingSpokenAudio) {
                  char v66 = 1;
                }
                if ((v66 & 1) == 0)
                {
                  *(void *)uint64_t v143 = 0;
                  *(void *)&v143[8] = v143;
                  *(void *)&v143[16] = 0x3052000000;
                  uint64_t v144 = __Block_byref_object_copy__18;
                  *(void *)&long long v145 = __Block_byref_object_dispose__18;
                  *((void *)&v145 + 1) = 0;
                  unsigned int v67 = *v62;
                  if (*v62) {
                    unsigned int v67 = CFRetain(v67);
                  }
                  *((void *)&v145 + 1) = v67;
                  *(void *)CFAllocatorRef v123 = 0;
                  v124 = v123;
                  uint64_t v125 = 0x3052000000;
                  CFStringRef v126 = __Block_byref_object_copy__18;
                  CFStringRef v127 = __Block_byref_object_dispose__18;
                  CFTypeRef v128 = 0;
                  CFTypeRef v128 = CFRetain(a1);
                  v121[0] = 0;
                  v121[1] = v121;
                  v121[2] = 0x2020000000;
                  CFTypeRef v122 = 0;
                  CFTypeRef v68 = (CFTypeRef)[a1 clientName];
                  if (v68) {
                    CFTypeRef v68 = CFRetain(v68);
                  }
                  CFTypeRef v122 = v68;
                  uint64_t v117 = 0;
                  v118 = &v117;
                  uint64_t v119 = 0x2020000000;
                  CFTypeRef v120 = 0;
                  if (obja) {
                    CFTypeRef v69 = CFRetain(obja);
                  }
                  else {
                    CFTypeRef v69 = 0;
                  }
                  CFTypeRef v120 = v69;
                  objc_msgSend(a1, "setWaitingToSendEndInterruptionToSpokenAudioApp:", 1, v93, v99);
                  if (dword_1E9359ED0)
                  {
                    unsigned int v116 = 0;
                    os_log_type_t v115 = OS_LOG_TYPE_DEFAULT;
                    int v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v78 = v116;
                    if (os_log_type_enabled(v77, v115)) {
                      unsigned int v80 = v78;
                    }
                    else {
                      unsigned int v80 = v78 & 0xFFFFFFFE;
                    }
                    if (v80)
                    {
                      ClientName = CMSUtility_GetClientName(*(void **)(*(void *)&v143[8] + 40), v79);
                      DisplayID = CMSUtility_GetDisplayID(*(void **)(*(void *)&v143[8] + 40), v82);
                      uint64_t v84 = v118[3];
                      *(_DWORD *)os_log_type_t type = 136315906;
                      uint64_t v136 = "MXCoreSessionEndInterruption_WithSecTaskAndStatus";
                      __int16 v137 = 2114;
                      uint64_t v138 = ClientName;
                      __int16 v139 = 2114;
                      uint64_t v140 = DisplayID;
                      __int16 v141 = 2114;
                      uint64_t v142 = v84;
                      LODWORD(v99) = 42;
                      unsigned int v93 = type;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  dispatch_time_t v85 = dispatch_time(0, 1000000000);
                  unsigned int v86 = MXGetSerialQueue();
                  block[0] = MEMORY[0x1E4F143A8];
                  block[1] = 3221225472;
                  block[2] = __MXCoreSessionEndInterruption_WithSecTaskAndStatus_block_invoke;
                  block[3] = &unk_1E57C9B90;
                  block[4] = v143;
                  void block[5] = v123;
                  void block[6] = &v117;
                  void block[7] = v121;
                  dispatch_after(v85, v86, block);
                  _Block_object_dispose(&v117, 8);
                  _Block_object_dispose(v121, 8);
                  _Block_object_dispose(v123, 8);
                  _Block_object_dispose(v143, 8);
                  if (!v63) {
                    goto LABEL_214;
                  }
LABEL_213:
                  CFRelease(v63);
                  goto LABEL_214;
                }
                if (dword_1E9359ED0)
                {
                  *(_DWORD *)CFAllocatorRef v123 = 0;
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  unsigned int v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v71 = *(_DWORD *)v123;
                  if (os_log_type_enabled(v70, type[0])) {
                    unsigned int v73 = v71;
                  }
                  else {
                    unsigned int v73 = v71 & 0xFFFFFFFE;
                  }
                  if (v73)
                  {
                    unsigned int v74 = CMSUtility_GetClientName(*v62, v72);
                    uint64_t v76 = (void (*)(uint64_t, uint64_t))CMSUtility_GetDisplayID(*v62, v75);
                    *(_DWORD *)uint64_t v143 = 136315906;
                    *(void *)&v143[4] = "MXCoreSessionEndInterruption_WithSecTaskAndStatus";
                    *(_WORD *)&v143[12] = 2114;
                    *(void *)&v143[14] = v74;
                    *(_WORD *)&v143[22] = 2114;
                    uint64_t v144 = v76;
                    LOWORD(v145) = 2114;
                    *(void *)((char *)&v145 + 2) = obja;
                    LODWORD(v99) = 42;
                    unsigned int v93 = (os_log_type_t *)v143;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                CMSUtility_PostInterruptionCommandNotification(*v62, 1u, (__CFString *)objc_msgSend(a1, "clientName", v93, v99), obja, 0, v63, 0, (const void *)objc_msgSend(a1, "displayID"));
                if (cf
                  && CFStringHasPrefix(cf, @"resumable")
                  && ([*v62 wasInterruptedWhileRecording] & 1) != 0
                  || cf1
                  && CFStringHasPrefix(cf1, @"resumable")
                  && [*v62 wasInterruptedWhileRecording])
                {
                  [*v62 setTimestampWhenMostRecentResumableEndInterruptionWasSent:FigGetUpTimeNanoseconds()];
                }
              }
              if (v63) {
                goto LABEL_213;
              }
LABEL_214:
              v62 += 2;
              if (!--v61)
              {
                [+[MXSessionManager sharedInstance] endAsyncDuckingOperationForSession:a1];
                uint64_t v87 = ptr;
                do
                {

                  *uint64_t v87 = 0;
                  v87 += 2;
                  --v60;
                }
                while (v60);
LABEL_222:
                if (ptr != (void **)v148) {
                  CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], ptr);
                }
                objc_msgSend(a1, "setNeedToEndInterruption:", 0, v93, v99);
                [a1 setAreBothBudsInEarForA2DPPortBeforeInterrupting:0];
                [a1 setRecentlyWantedToPauseSpokenAudio:0];
                [a1 setNotFullyInactive:0];
                if ((v101 & 2) != 0 && ([a1 currentlyControllingFlags] & 2) == 0) {
                  cmsmUpdatePickableRouteDescriptionLists(1);
                }
                CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded();

                if (cf)
                {
                  CFRelease(cf);
                  if ((v103 & 1) == 0) {
                    return 0;
                  }
                }
                else if (!v103)
                {
                  return 0;
                }
LABEL_231:
                MEMORY[0x199716EA0](gCMSM);
                return 0;
              }
            }
          }
          if (v133 || cf1 && CFStringHasPrefix(cf1, @"resumable"))
          {
            char v15 = 0;
            CFStringRef cf = 0;
          }
          else
          {
            uint64_t v18 = [a1 audioCategory];
            CFStringRef cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@.%@", @"non-resumable", v18);
            if ([a1 isTheAssistant])
            {
              if (dword_1E9359ED0)
              {
                *(_DWORD *)CFAllocatorRef v123 = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v19, type[0]);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              char v15 = 1;
            }
            else
            {
              char v15 = 0;
            }
          }
          if ([+[MXSessionManager sharedInstance] phoneCallBehaviorSessionShouldResumeForCarPlay])
          {
            [+[MXSessionManager sharedInstance] setPhoneCallBehaviorSessionShouldResumeForCarPlay:0];
            if (dword_1E9359ED0)
            {
              *(_DWORD *)CFAllocatorRef v123 = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, type[0]);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            char v15 = 1;
          }
          if (v8) {
            goto LABEL_43;
          }
          if (cf) {
            CFRelease(cf);
          }
        }
        uint64_t v16 = objc_msgSend(a1, "audioCategory", v89, v95);
        CFStringRef cf = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@.%@", @"resumable", v16);
        goto LABEL_43;
      }
      uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954308;
    }
    else
    {
      [a1 resetInterruptionFlags];
      if (dword_1E9359ED0)
      {
        CFTypeRef v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
  }
  else
  {
    uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
}

void sub_194E93498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void cmsReleaseBorrowedStarkMainAudio(void *a1, char a2)
{
  if (qword_1E9359C70 && [a1 starkBorrowCount])
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@ '%@' stopped using main audio", [a1 clientName], objc_msgSend(a1, "displayID"));
    CMSUtility_GetStarkInterruptionContext(1, a1, (uint64_t)&v8);
    while ([a1 starkBorrowCount])
    {
      v5[0] = v8;
      v5[1] = v9;
      uint64_t v6 = v10;
      uint64_t v7 = 0x1EE5E6948;
      FigEndpointSessionHandleInterruption((void *)qword_1E9359C70, v5, (uint64_t)v4, &v7, a2);
      objc_msgSend(a1, "setStarkBorrowCount:", objc_msgSend(a1, "starkBorrowCount") - 1);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
}

void __cmsmInitializeLogging_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  if ((dword_1E9359ED0 & 0x100) != 0)
  {
    dword_1E9359ED0 = 0;
  }
  else if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMSMDebugUtility_PrintBuildInfo();
}

void cmsmInitializeCMSessionManager()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (cmsmInitializeLogging_onceToken != -1) {
    dispatch_once(&cmsmInitializeLogging_onceToken, &__block_literal_global_78);
  }
  CMSMDeviceState_UpdateDeviceConfiguration();
  MXCFPreferencesMigrateUserPreferencesToMXDomain();
  MXCFPreferencesMigrateSilentModeUserPreferenceToMXDomain();
  +[MXAppProtectionManager sharedInstance];
  [+[MXMediaEndowmentManager sharedInstance] loadMediaEndowments];
  +[MXSessionManager sharedInstance];
  sCMSessionClass = 0;
  unk_1E9358EE0 = "CMSession";
  qword_1E9358EE8 = (uint64_t)cmsInit;
  unk_1E9358EF0 = 0;
  qword_1E9358EF8 = (uint64_t)CMSessionFinalize;
  unk_1E9358F00 = 0;
  qword_1E9358F08 = 0;
  unk_1E9358F10 = 0;
  qword_1E9358F18 = (uint64_t)cmsCopyDebugDesc;
  sCMSessionID = _CFRuntimeRegisterClass();
  if (cmsmLoadAudioStatisticsRoutines_once != -1) {
    dispatch_once(&cmsmLoadAudioStatisticsRoutines_once, &__block_literal_global_235_0);
  }
  if (cmsmLoadClusterSyncMgrRoutines_once != -1) {
    dispatch_once(&cmsmLoadClusterSyncMgrRoutines_once, &__block_literal_global_292);
  }
  int IsAudiomxd = CMSMDeviceState_IsAudiomxd();
  MXGetNotificationSenderQueue();
  if (IsAudiomxd) {
    CMSMDeviceState_AddQueueToWatchDogMonitoring();
  }
  else {
    FigWatchdogMonitorDispatchQueue();
  }
  gCMSM = FigReentrantMutexCreate();
  qword_1E9359CC8 = 0;
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigRouteDiscoveryManagerInit();
  FigRouteDiscoveryManagerStart();
  FigRoutingManagerInit();
  CMScreenInitialize();
  MX_FrontBoardServices_Initialize();
  CMSM_IDS_Initialize();
  CMSM_IDSClient_Initialize();
  CMSM_IDSServer_Initialize();
  CMSM_IDSConnection_Initialize();
  MX_CoreServices_Initialize();
  if (!gDefaultVolumeCategory)
  {
    CelestialGetModelSpecificName();
    uint64_t v2 = CelestialCFCreatePropertyListForModelAndBundleIdentifier();
    if (v2)
    {
      CFDictionaryRef v3 = (const __CFDictionary *)v2;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v3))
      {
        uint64_t Value = CFDictionaryGetValue(v3, @"Category");
        uint64_t v6 = (uint64_t)Value;
        if (Value) {
          CFRetain(Value);
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      gDefaultVolumeCategory = v6;
      CFRelease(v3);
    }
    else
    {
      gDefaultVolumeCategory = 0;
    }
  }
  +[MXSessionManager sharedInstance];
  PVMInitialize();
  CMSystemSoundMgr_Initialize();
  uint64_t v7 = MXGetNotificationSenderQueue();
  CMSMDeviceState_Initialize(v7);
  MX_IOKit_Initialize();
  dword_1E9359C14 = FigGetCFPreferenceNumberWithDefault();
  [+[MXSessionManager sharedInstance] setCurrentAudioCategory:@"Audio/Video"];
  [+[MXSessionManager sharedInstance] setCurrentAudioMode:@"Default"];
  [+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") updateSilentModeState:[+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") silentModeEnabled] untilTime:[+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") silentModeEnabledUntilTime] withReason:[+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") silentModeReason] forClientType:[+[MXSessionManager sharedInstance] silentModeClient] updateForStartup:1];
  MEMORY[0x199716E90](gCMSM);
  MXVW_CreateVectorCMSRouteInfo();
}

__CFString *cmsCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"%p\n", a1);
  return Mutable;
}

uint64_t cmsmUpdateAppsLists(uint64_t result)
{
  if (result)
  {
    CFDictionaryRef v1 = (const __CFDictionary *)result;
    CFTypeID v2 = CFGetTypeID((CFTypeRef)result);
    BOOL result = CFDictionaryGetTypeID();
    if (v2 == result)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v1, @"LongFormVideoApps");
      if (Value)
      {
        CFArrayRef v4 = Value;
        CFTypeID v5 = CFGetTypeID(Value);
        if (v5 == CFArrayGetTypeID() && cmsmValidateAppsList(v4))
        {
          [+[MXSessionManager sharedInstance] setLongFormVideoApps:v4];
          CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
        }
      }
      BOOL result = (uint64_t)CFDictionaryGetValue(v1, @"NonLongFormMediaApps");
      if (result)
      {
        CFArrayRef v6 = (const __CFArray *)result;
        CFTypeID v7 = CFGetTypeID((CFTypeRef)result);
        BOOL result = CFArrayGetTypeID();
        if (v7 == result)
        {
          BOOL result = cmsmValidateAppsList(v6);
          if (result)
          {
            return CMSMUtility_SetNonLongFormMediaApps(v6);
          }
        }
      }
    }
  }
  return result;
}

void __cmsmInitializeCMSessionManager_block_invoke()
{
  CFArrayRef theArray = 0;
  cmsmCopyCurrentActiveRoutesInfoForVADUID(0x1EE5EBF48, 0, &theArray, 0);
  if (theArray && (CFIndex Count = CFArrayGetCount(theArray), Count >= 1))
  {
    CFIndex v1 = Count;
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFIndex v3 = 0;
    uint64_t v4 = *MEMORY[0x1E4F20660];
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
      CFArrayRef v6 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v4, qword_1E9359C88);
      if (v6)
      {
        CFTypeID v7 = v6;
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v7);
      }
      ++v3;
    }
    while (v1 != v3);
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  uint64_t v8 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(Mutable, 0);
  FigRoutingManagerContextUtilities_SetPickedEndpoints((const void *)qword_1E9359C88, Mutable, @"configUpdateReasonEndedBottomUpRouteChange", 0, (uint64_t)v8);
  if (v8) {
    CFRelease(v8);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

void cmsmScreenIsBlankedChangedCallback(char a1, char a2)
{
  uint64_t v4 = MXGetSerialQueue();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  long long v5[2] = __cmsmScreenIsBlankedChangedCallback_block_invoke;
  void v5[3] = &__block_descriptor_34_e5_v8__0l;
  char v6 = a1;
  char v7 = a2;
  MXDispatchAsync((uint64_t)"cmsmScreenIsBlankedChangedCallback", (uint64_t)"CMSessionManager.m", 17466, 0, 0, v4, (uint64_t)v5);
}

void cmsmTightSyncUUIDChangedCallback()
{
  uint64_t v0 = MXGetSerialQueue();
  MXDispatchAsyncAndWait((uint64_t)"cmsmTightSyncUUIDChangedCallback", (uint64_t)"CMSessionManager.m", 17515, 0, 0, v0, (uint64_t)&__block_literal_global_349);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void cmsmVoiceOverIsOnChangedCallback(uint64_t a1, char a2)
{
  CFIndex v3 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __cmsmVoiceOverIsOnChangedCallback_block_invoke;
  void v4[3] = &__block_descriptor_33_e5_v8__0l;
  char v5 = a2;
  MXDispatchAsyncAndWait((uint64_t)"cmsmVoiceOverIsOnChangedCallback", (uint64_t)"CMSessionManager.m", 17535, 0, 0, v3, (uint64_t)v4);
}

void __cmsmInitializeCMSessionManager_block_invoke_2()
{
  uint64_t v0 = MXGetSerialQueue();
  MXDispatchAsyncAndWait((uint64_t)"cmsmInitializeCMSessionManager_block_invoke_2", (uint64_t)"CMSessionManager.m", 1035, 0, 0, v0, (uint64_t)&__block_literal_global_40_1);
}

uint64_t __cmsmInitializeCMSessionManager_block_invoke_5()
{
  MXBluetoothServices_RegisterForAudioRoutingChanged();
  MXBluetoothServices_RegisterForPreemptivePortChanged();
  uint64_t v0 = MXBluetoothServices_RegisterForPreemptivePortDisconnected();
  uint64_t result = MX_FeatureFlags_IsAirPlayDaemonEnabled(v0, v1);
  if (!result)
  {
    return FigRoutingManagerPerformPostInitOperations();
  }
  return result;
}

uint64_t __cmsmInitializeCMSessionManager_block_invoke_6()
{
  uint64_t result = CMSessionCreate(&qword_1E9359BE8);
  if (result) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = qword_1E9359BE8 == 0;
  }
  if (!v1)
  {
    pid_t valuePtr = getpid();
    if (valuePtr)
    {
      CFNumberRef v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      if (v2)
      {
        CFNumberRef v3 = v2;
        _CMSessionSetProperty((void *)qword_1E9359BE8, @"ClientPID", (uint64_t)v2);
        CFRelease(v3);
      }
    }
    _CMSessionSetProperty((void *)qword_1E9359BE8, @"ClientName", @"Default");
    _CMSessionSetProperty((void *)qword_1E9359BE8, @"AudioCategory", @"Audio/Video");
    cmsSetControlFlags(*(void **)(qword_1E9359BE8 + 16), 0x120000u);
    return [*(id *)(qword_1E9359BE8 + 16) updateInterruptionStyle:8];
  }
  return result;
}

__CFArray *cmsmCopyPartnerPortsToMakeRoutable(const __CFArray *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (uint64_t i = 0; i != v5; ++i)
      {
        FigCFArrayGetInt64AtIndex();
        memset(outData, 0, sizeof(outData));
        unsigned int PartnersForPort = vaeGetPartnersForPort(0, outData);
        if (PartnersForPort)
        {
          uint64_t v8 = PartnersForPort;
          uint64_t v9 = outData;
          do
          {
            if (vaeDoesPortSupportRoutability(*v9))
            {
              if (!vaeIsPortRoutable(*v9))
              {
                CFNumberRef v10 = CFNumberCreate(v2, kCFNumberSInt32Type, v9);
                CFArrayAppendValue(Mutable, v10);
                if (v10) {
                  CFRelease(v10);
                }
              }
            }
            ++v9;
            --v8;
          }
          while (v8);
        }
      }
    }
  }
  return Mutable;
}

uint64_t cmsmShouldSetupForCoordinatedInterruptions(uint64_t a1, int a2)
{
  AudioObjectID v3 = a1;
  uint64_t result = vaeDoesPortSupportMultipleConnections(a1);
  if (result)
  {
    int DoesBTPortSupportInEarDetection = vaeDoesBTPortSupportInEarDetection(v3);
    BOOL BTPortOwnsSharedAudioConnection = vaeGetBTPortOwnsSharedAudioConnection(v3);
    uint64_t result = (DoesBTPortSupportInEarDetection | BTPortOwnsSharedAudioConnection) == 0;
    if (DoesBTPortSupportInEarDetection)
    {
      if (!BTPortOwnsSharedAudioConnection) {
        return !a2 || CMSMVAUtility_IsBTPortKnownToNotBeInEar(v3) == 0;
      }
    }
  }
  return result;
}

void cmsmUpdateInEarBasedPlaybackState(unsigned int BTPortForNowPlayingApp, int a2, int a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return;
  }
  int CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  if (a3)
  {
    if (dword_1E9359ED0)
    {
      uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 0;

    cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = 0;
    cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = 0;
    if (cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused)
    {
      CFRelease((CFTypeRef)cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused);
      cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused = 0;
    }
    if (CurrentOutputPortAtIndex)
    {
      if (vaeDoesBTPortSupportInEarDetection(CurrentOutputPortAtIndex))
      {
        int CurrentAudioRouteInEarStatus = cmsmGetCurrentAudioRouteInEarStatus(CurrentOutputPortAtIndex);
        cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus = CurrentAudioRouteInEarStatus;
        if (CurrentAudioRouteInEarStatus == 5)
        {
          if (dword_1E9359ED0)
          {
            int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus = 2;
        }
      }
    }
    return;
  }
  if (!BTPortForNowPlayingApp)
  {
    BTPortForNowPlayingApp = CMSMNP_GetBTPortForNowPlayingApp();
    id v9 = CMSMNP_CopyNowPlayingAppSession();
    CFNumberRef v10 = CMSMUtility_CopyCurrentRouteTypes();
    if (a2)
    {
      if (!BTPortForNowPlayingApp)
      {
        if (FigCFArrayContainsValue())
        {
          if (v9)
          {
            int v11 = cmsmGetCurrentAudioRouteInEarStatus(CurrentOutputPortAtIndex);
            cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus = v11;
            if (v11 == 5)
            {
              if (dword_1E9359ED0)
              {
                uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus = 2;
            }
          }
        }
      }
    }
    if (v10) {
      CFRelease(v10);
    }
  }
  if (vaeDoesBTPortSupportInEarDetection(BTPortForNowPlayingApp))
  {
    if (a2)
    {
      if (CMSMNP_IsNowPlayingAppPlayingToPort(BTPortForNowPlayingApp))
      {
        if (dword_1E9359ED0)
        {
          char v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 1;

        cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1C9C8]);
        cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = BTPortForNowPlayingApp;
        __int16 v22 = (const void *)cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused;
        BOOL v23 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID];
        cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused = (uint64_t)v23;
        if (v23) {
          CFRetain(v23);
        }
        if (v22) {
          CFRelease(v22);
        }
      }
      return;
    }
    int v20 = cmsmGetCurrentAudioRouteInEarStatus(BTPortForNowPlayingApp);
    if (dword_1E9359ED0)
    {
      uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (BTPortForNowPlayingApp == CurrentOutputPortAtIndex)
    {
      if (v20 == 5 && cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus == 1)
      {
        if (dword_1E9359ED0)
        {
          int v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
          int v20 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          int v20 = 1;
        }
      }
      else if (v20 == 5 && cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus == 3)
      {
        if (dword_1E9359ED0)
        {
          uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        int v20 = 2;
      }
    }
    uint64_t v27 = &kMXSession_IDSMessage_PlayingSessionKey;
    if (v20 == cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus)
    {
LABEL_63:
      *((unsigned char *)v27 + 384) = v20;
      return;
    }
    if (dword_1E9359ED0)
    {
      CFDictionaryRef v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (BTPortForNowPlayingApp == CurrentOutputPortAtIndex)
    {
      BOOL v30 = cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus == 2
         || cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus == 4;
      if (v20 == 1 && v30)
      {
        if (dword_1E9359ED0)
        {
          unsigned int v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar == 1
          && cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived == CurrentOutputPortAtIndex)
        {
          int v39 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID];
          if ([(NSString *)v39 isEqualToString:cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused])
          {
            if (dword_1E9359ED0)
            {
              id v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            cmsmSendCommandToMediaRemote((uint64_t)[+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID], 0, @"com.apple.cmsession.airpods");
          }
        }
LABEL_113:
        cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 0;

        cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = 0;
        cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = 0;
        if (cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused)
        {
          CFRelease((CFTypeRef)cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused);
          cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused = 0;
        }
        goto LABEL_63;
      }
      if (cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus != 3)
      {
        if (cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus == 1)
        {
          if (v20 != 4)
          {
            if (v20 == 3)
            {
              if (dword_1E9359ED0)
              {
                CFRange v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (!CMSMNP_IsNowPlayingAppPlayingToPort(CurrentOutputPortAtIndex)) {
                goto LABEL_63;
              }
              if (dword_1E9359ED0)
              {
                CFArrayRef v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              cmsmSendCommandToMediaRemote((uint64_t)[+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID], 1, @"com.apple.cmsession.airpods");
              cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 1;
              cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = CurrentOutputPortAtIndex;

              cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1C9C8]);
LABEL_123:
              CFArrayRef v47 = (const void *)cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused;
              unsigned int v48 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID];
              cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused = (uint64_t)v48;
              if (v48) {
                CFRetain(v48);
              }
              if (v47) {
                CFRelease(v47);
              }
              goto LABEL_63;
            }
            if (v20 != 2) {
              goto LABEL_63;
            }
          }
          if (dword_1E9359ED0)
          {
            long long v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!CMSMNP_IsNowPlayingAppPlayingToPort(CurrentOutputPortAtIndex)) {
            goto LABEL_63;
          }
          id v44 = CMSMNP_CopyNowPlayingAppSession();
          [+[MXSessionManager sharedInstance] cancelAnyInProgressRampIfNeeded:v44 reason:2];

          if (dword_1E9359ED0)
          {
            long long v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          cmsmSendCommandToMediaRemote((uint64_t)[+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID], 1, @"com.apple.cmsession.airpods");
          cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 1;
          cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = CurrentOutputPortAtIndex;
          goto LABEL_123;
        }
LABEL_88:
        if (v20 == 3)
        {
          if (dword_1E9359ED0)
          {
            uint64_t v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar == 1
            && cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived == BTPortForNowPlayingApp)
          {
            if (dword_1E9359ED0)
            {
              BOOL v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }

            cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = 0;
            cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1C9C8]);
          }
        }
        goto LABEL_63;
      }
    }
    else if (cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus != 3)
    {
      goto LABEL_88;
    }
    if (dword_1E9359ED0)
    {
      id v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v27 = &kMXSession_IDSMessage_PlayingSessionKey;
    }
    if (cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar != 1
      || cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived != BTPortForNowPlayingApp
      || BTPortForNowPlayingApp != CurrentOutputPortAtIndex)
    {
      goto LABEL_63;
    }
    int v35 = (void *)[MEMORY[0x1E4F1C9C8] now];
    [v35 timeIntervalSinceDate:cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar];
    double v37 = v36;
    if (dword_1E9359ED0)
    {
      CFArrayRef v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    os_log_type_t v43 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID];
    if ([(NSString *)v43 isEqualToString:cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused]&& v37 <= 15.0)
    {
      cmsmSendCommandToMediaRemote((uint64_t)[+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID], 0, @"com.apple.cmsession.airpods");
    }
    goto LABEL_113;
  }
  if (a2
    && cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived == CurrentOutputPortAtIndex
    && vaeDoesBTPortSupportInEarDetection(CurrentOutputPortAtIndex)
    && cmsmUpdateInEarBasedPlaybackState_audioRouteInEarStatus != 3
    && cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar)
  {
    uint64_t v16 = (void *)[MEMORY[0x1E4F1C9C8] now];
    [v16 timeIntervalSinceDate:cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar];
    double v18 = v17;
    if (dword_1E9359ED0)
    {
      uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v26 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID];
    if ([(NSString *)v26 isEqualToString:cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused]&& v18 <= 15.0)
    {
      cmsmSendCommandToMediaRemote((uint64_t)[+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID], 0, @"com.apple.cmsession.airpods");
    }
    cmsmUpdateInEarBasedPlaybackState_audioPausedOnBudsOutOfEar = 0;

    cmsmUpdateInEarBasedPlaybackState_timestampWhenNoBudWasInEar = 0;
    cmsmUpdateInEarBasedPlaybackState_portForWhichLastUpdateWasReceived = 0;
    if (cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused)
    {
      CFRelease((CFTypeRef)cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused);
      cmsmUpdateInEarBasedPlaybackState_nowPlayingDisplayIDWhenPaused = 0;
    }
  }
}

uint64_t cmsmGetCurrentAudioRouteInEarStatus(AudioObjectID a1)
{
  if (!a1 || !vaeDoesBTPortSupportInEarDetection(a1)) {
    return 3;
  }
  int BTPortSecondaryBudInEarStatus = vaeGetBTPortSecondaryBudInEarStatus(a1);
  int BTPortPrimaryBudInEarStatus = vaeGetBTPortPrimaryBudInEarStatus(a1);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (BTPortPrimaryBudInEarStatus == 1 && BTPortSecondaryBudInEarStatus == 1) {
    return 1;
  }
  BOOL v7 = BTPortPrimaryBudInEarStatus == 3 && BTPortSecondaryBudInEarStatus == 1;
  BOOL v8 = BTPortSecondaryBudInEarStatus == 3 && BTPortPrimaryBudInEarStatus == 1;
  uint64_t result = 4;
  if (!v8 && !v7)
  {
    BOOL v9 = BTPortPrimaryBudInEarStatus == 2 && BTPortSecondaryBudInEarStatus == 1;
    BOOL v10 = v9;
    BOOL v11 = BTPortSecondaryBudInEarStatus == 2 && BTPortPrimaryBudInEarStatus == 1;
    uint64_t result = 2;
    if (!v11 && !v10)
    {
      BOOL v13 = BTPortPrimaryBudInEarStatus == 1 && BTPortSecondaryBudInEarStatus == 0;
      if (BTPortPrimaryBudInEarStatus) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = BTPortSecondaryBudInEarStatus == 1;
      }
      if (v14) {
        BOOL v13 = 1;
      }
      if (v13) {
        return 5;
      }
      else {
        return 3;
      }
    }
  }
  return result;
}

__CFString *cmsmAudioRouteInEarStatusToString(unsigned int a1)
{
  if (a1 - 1 >= 5) {
    return (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"UNKNOWN (%d)", a1);
  }
  else {
    return off_1E57CBA28[(char)(a1 - 1)];
  }
}

void cmsmSendCommandToMediaRemote(uint64_t a1, uint64_t a2, const void *a3)
{
  if (MediaRemoteLibrary_sOnce != -1) {
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_352);
  }
  if (MediaRemoteLibrary_sLib && dlsym((void *)MediaRemoteLibrary_sLib, "MRMediaRemoteSendCommandToApp"))
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (a3)
    {
      BOOL v8 = (const void *)getkMRMediaRemoteOptionRemoteControlInterfaceIdentifier[0]();
      CFDictionarySetValue(Mutable, v8, a3);
    }
    if (MediaRemoteLibrary_sOnce != -1) {
      dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_352);
    }
    if (MediaRemoteLibrary_sLib && dlsym((void *)MediaRemoteLibrary_sLib, "MRMediaRemoteGetLocalOrigin")) {
      uint64_t LocalOrigin = softLinkMRMediaRemoteGetLocalOrigin();
    }
    else {
      uint64_t LocalOrigin = 0;
    }
    softLinkMRMediaRemoteSendCommandToApp(a2, (uint64_t)Mutable, LocalOrigin, a1, 0, 0, 0);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void cmsmUpdateEnableSharedAudioRouteSyntheticMute(int a1, int a2, int a3, int a4, int a5, int a6)
{
  MEMORY[0x199716E90](gCMSM);
  int v12 = HIBYTE(word_1E9359BD8);
  if (a6)
  {
    if (CMSMDeviceState_RingerIsOn(1) && (_BYTE)word_1E9359BD8)
    {
      int v13 = 1;
      HIBYTE(word_1E9359BD_Block_object_dispose(&STACK[0x210], 8) = 1;
    }
    else
    {
      int v13 = HIBYTE(word_1E9359BD8);
    }
  }
  else
  {
    if (!(a2 | a1 | a3) && (a4 == 1919184754 || !a5))
    {
      JUMPOUT(0x199716EA0);
    }
    int v13 = 0;
    HIBYTE(word_1E9359BD_Block_object_dispose(&STACK[0x210], 8) = 0;
  }
  MEMORY[0x199716EA0](gCMSM);
  if (v12 != v13)
  {
    cmsUpdateMuteStatus(0);
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t MXCoreSessionAddResource(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v24[16] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = 4294954315;
    if (a2 && qword_1E9359C00)
    {
      MEMORY[0x199716E90](gCMSM);
      if (dword_1E9359BF8 < 1) {
        goto LABEL_27;
      }
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (!FigCFEqual())
      {
        ++v9;
        v8 += 24;
        if (v9 >= dword_1E9359BF8) {
          goto LABEL_27;
        }
      }
      if (!*(_DWORD *)(qword_1E9359C00 + v8 + 8)) {
        goto LABEL_27;
      }
      int v23 = 0;
      v24[0] = 0;
      *a4 = 0;
      cmsmGetCountAndResourceEntriesOfType(a2, &v23, v24);
      uint64_t v11 = v24[0];
      if (!v24[0]) {
        goto LABEL_27;
      }
      int v12 = v23;
      if (v23 < 1)
      {
        LODWORD(v13) = 0;
        int v16 = -1;
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        char v15 = (uint64_t *)(v24[0] + 8);
        int v16 = -1;
        while (*(v15 - 1))
        {
          uint64_t v18 = *v15;
          v15 += 2;
          uint64_t v17 = v18;
          if (v18 > v14)
          {
            int v16 = v13;
            uint64_t v14 = v17;
          }
          if (v23 == ++v13)
          {
            LODWORD(v13) = v23;
            goto LABEL_21;
          }
        }
        *(v15 - 1) = (uint64_t)a1;
        uint64_t *v15 = FigGetUpTimeNanoseconds();
        int v16 = v13;
      }
LABEL_21:
      if (v16 >= v12)
      {
LABEL_27:
        uint64_t v5 = 4294954315;
        goto LABEL_28;
      }
      uint64_t v19 = v16;
      if (v13 == v12)
      {
        int v20 = (void **)(v11 + 16 * v16);
        uint64_t v21 = *v20;
        if (*v20)
        {
          MEMORY[0x199716EA0](gCMSM);
          uint64_t v5 = cmsBeginInterruptionGuts(a1, v21, 2);
          MEMORY[0x199716E90](gCMSM);
          if (v5)
          {
LABEL_28:
            MEMORY[0x199716EA0](gCMSM);
            return v5;
          }
          *int v20 = a1;
          *(void *)(v11 + 16 * v19 + _Block_object_dispose(&STACK[0x210], 8) = FigGetUpTimeNanoseconds();
        }
      }
      uint64_t v5 = 0;
      *a4 = v11 + 16 * v19;
      goto LABEL_28;
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  return v5;
}

uint64_t MXCoreSessionRemoveResource(uint64_t a1, void *a2)
{
  if (a1)
  {
    MEMORY[0x199716E90](gCMSM);
    if (a2 && *a2 == a1)
    {
      uint64_t v4 = 0;
      *a2 = 0;
      a2[1] = 0;
    }
    else
    {
      uint64_t v4 = 4294954315;
    }
    MEMORY[0x199716EA0](gCMSM);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  return v4;
}

uint64_t cmsmRequestCarMainAudioForSession(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if ([+[MXSessionManager sharedInstance] sessionUtilizesIndependentRecordingOnly:a1])
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (([a1 hasPhoneCallBehavior] & 1) != 0 || CMSUtility_IsAudioCategoryRingtone(a1))
  {
    if (CMSMUtility_IsPhoneCallActive())
    {
      int v3 = 1;
    }
    else
    {
      if (dword_1E9359ED0)
      {
        uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      int v3 = 1;
      byte_1E9359C38 = 1;
    }
  }
  else if (CMSMUtility_IsPhoneCallActive() | byte_1E9359C38)
  {
    int v3 = 0;
  }
  else
  {
    int v3 = -1;
  }
  if (CMSUtility_IsAudioCategoryRingtone(a1))
  {
    int v6 = -1;
  }
  else if (CMSMUtility_ShouldCarPlaySpeechAppStateBeSet((uint64_t)a1))
  {
    int v6 = 10;
  }
  else
  {
    int v6 = 0;
  }
  int v12 = @"Take";
  if (CMSUtility_ShouldBorrowCarMainAudio(a1))
  {
    int v12 = @"Borrow";
    [a1 setNeedToEndInterruption:1];
  }
  CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Connected to car; Requesting main audio for session, %@ '%@'",
         objc_msgSend(a1, "clientName", v10, v11),
         [a1 displayID]);
  uint64_t v8 = [a1 audioCategory];
  v13[0] = 0;
  v13[1] = 0;
  int v14 = v3;
  int v15 = 0;
  int v16 = v6;
  int v17 = 0;
  uint64_t v18 = v8;
  FigEndpointCentralRequestResource(qword_1E9359C70, 0x1EE5F1968, (uint64_t)v13, (uint64_t)v7, &v12);
  if (FigCFEqual()) {
    objc_msgSend(a1, "setStarkBorrowCount:", objc_msgSend(a1, "starkBorrowCount") + 1);
  }
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v5 = FigEndpointCentralEntityHoldsResource(qword_1E9359C70, 0x1EE5E67A8, 0x1EE5F1968);
  [a1 setTookControlOfStarkMainAudio:v5 != 0];
  return v5;
}

void cmsAddToListOfSessionsToInterruptIfNecessary(void *a1, void *a2, int a3, int a4, uint64_t a5, int *a6, int *a7)
{
  int v14 = *a6;
  int v15 = *a7;
  if (([a2 isCarSession] & 1) == 0)
  {
    [a2 audioCategory];
    if (FigCFEqual())
    {
      if (a4 != 1) {
        goto LABEL_20;
      }
    }
    else
    {
      [a1 audioCategory];
      int v16 = FigCFEqual();
      if (a4 != 1 && v16) {
        goto LABEL_20;
      }
    }
    if ([a1 isHardwareSafetySession]
      && [a2 prefersToOptOutOfHardwareSafetyInterruptions])
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else if (CMSUtility_ShouldInterrupt(a1, a2, a3))
    {
      [a2 setWaitingToResumeWhenDeviceUnlocksOrInForeground:0];
      [a2 setWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground:0];
      uint64_t v18 = a5 + 16 * v14;
      *(void *)uint64_t v18 = a2;
      id v19 = a2;
      *(unsigned char *)(v18 + _Block_object_dispose(&STACK[0x210], 8) = [a2 isPlaying];
      *(unsigned char *)(v18 + 9) = [a2 wasRecentlyActivated];
      ++v14;
      int v20 = CMSMUtility_CopyActiveCoreSessionsShadowingAudioSessionID([a2 audioSessionID]);
      if (v20)
      {
        CFArrayRef v21 = v20;
        if (CMSMDeviceState_ItsAnAppleTV() || CMSMDeviceState_ItsAHomePod())
        {
          CFIndex Count = CFArrayGetCount(v21);
          if (Count >= 1)
          {
            CFIndex v23 = Count;
            CFIndex v24 = 0;
            uint64_t v25 = (unsigned char *)(a5 + 16 * v14 + 9);
            do
            {
              CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v21, v24);
              *(void *)(v25 - 9) = ValueAtIndex;
              id v27 = ValueAtIndex;
              *(v25 - 1) = [ValueAtIndex isPlaying];
              *uint64_t v25 = [ValueAtIndex wasRecentlyActivated];
              v25 += 16;
              ++v24;
            }
            while (v23 != v24);
            v14 += v24;
          }
        }
        CFRelease(v21);
      }
    }
  }
LABEL_20:
  *a6 = v14;
  *a7 = v15;
}

uint64_t CMSessionMgrIsVolumeChangeTriggered(int a1)
{
  if ((a1 - 1) > 0xD) {
    return 0;
  }
  else {
    return byte_194EE0024[a1 - 1];
  }
}

void __cmsSetIsActive_block_invoke(uint64_t a1)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "ID"), "longLongValue");
  CMSUtility_DeactivateTimerHandler(v1);
}

uint64_t FigEndpointManagerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v11)
  {
    return v11(CMBaseObject, a2, a3);
  }
  return result;
}

void __cmsSetIsActive_block_invoke_130(uint64_t a1)
{
}

void __cmsSetIsPlaying_block_invoke(uint64_t a1)
{
}

void __cmsSetIsPlaying_block_invoke_2(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = CMSMUtility_CopyMXCoreSessionWithID(*(void *)(a1 + 32));
  if (v1)
  {
    CFAllocatorRef v2 = v1;
    if ([v1 sessionAssertionAuditTimer])
    {
      dispatch_source_cancel((dispatch_source_t)[v2 sessionAssertionAuditTimer]);
      [v2 setSessionAssertionAuditTimer:0];
    }
    int v3 = MXGetSessionLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136446978;
      CFStringRef v7 = "-CMSessionMgr-";
      __int16 v8 = 2082;
      uint64_t v9 = "cmsSessionAssertionAuditTimeDidFinish";
      __int16 v10 = 1024;
      int v11 = 6000;
      __int16 v12 = 2114;
      ClientName = CMSUtility_GetClientName(v2, v4);
      _os_log_impl(&dword_194CDF000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Timer expired for client %{public}@", (uint8_t *)&v6, 0x26u);
    }
    if (CMSUtility_DoesSessionRemainActiveAfterStoppingPlaying(v2))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "now"), "timeIntervalSinceDate:", objc_msgSend(v2, "isPlayingStopTime"));
      if (v5 >= (double)[v2 assertionAuditTimerDelay]) {
        [+[MXSessionManager sharedInstance] cleanupSessionAssertionsIfNeeded:v2 cleanupReason:2];
      }
    }
  }
}

uint64_t cmsmStartAllowedToInitiatePlaybackTemporarilyTimer()
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716E90](gCMSM);
  if (qword_1E9359C20)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1E9359C20);
    if (qword_1E9359C20)
    {
      dispatch_release((dispatch_object_t)qword_1E9359C20);
      qword_1E9359C20 = 0;
    }
  }
  uint64_t v1 = MXGetSerialQueue();
  qword_1E9359C20 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v1, 10.0, (uint64_t)&__block_literal_global_151, 0, 0);
  if (!qword_1E9359C20) {
    [+[MXSessionManager sharedInstance] setAppAllowedToInitiatePlaybackTemporarily:0];
  }
  return MEMORY[0x199716EA0](gCMSM);
}

uint64_t __cmsmStartAllowedToInitiatePlaybackTemporarilyTimer_block_invoke()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  MEMORY[0x199716E90](gCMSM);
  uint64_t v0 = qword_1E9359C20;
  if (qword_1E9359C20)
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v0 = qword_1E9359C20;
    }
    dispatch_source_cancel(v0);
    if (qword_1E9359C20)
    {
      dispatch_release((dispatch_object_t)qword_1E9359C20);
      qword_1E9359C20 = 0;
    }
  }
  [+[MXSessionManager sharedInstance] setAppAllowedToInitiatePlaybackTemporarily:0];
  return MEMORY[0x199716EA0](gCMSM);
}

uint64_t cmsmStartAllowedToFadeInTemporarilyTimer()
{
  uint64_t result = MX_FeatureFlags_IsHandoffEnabled();
  if (result)
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x199716E90](gCMSM);
    if (qword_1E9359C28)
    {
      dispatch_source_cancel((dispatch_source_t)qword_1E9359C28);
      if (qword_1E9359C28)
      {
        dispatch_release((dispatch_object_t)qword_1E9359C28);
        qword_1E9359C28 = 0;
      }
    }
    CFAllocatorRef v2 = MXGetSerialQueue();
    qword_1E9359C28 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v2, 5.0, (uint64_t)&__block_literal_global_153_0, 0, 0);
    return MEMORY[0x199716EA0](gCMSM);
  }
  return result;
}

uint64_t __cmsmStartAllowedToFadeInTemporarilyTimer_block_invoke()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t result = MX_FeatureFlags_IsHandoffEnabled();
  if (result)
  {
    MEMORY[0x199716E90](gCMSM);
    uint64_t v1 = qword_1E9359C28;
    if (qword_1E9359C28)
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v1 = qword_1E9359C28;
      }
      dispatch_source_cancel(v1);
      if (qword_1E9359C28)
      {
        dispatch_release((dispatch_object_t)qword_1E9359C28);
        qword_1E9359C28 = 0;
      }
    }
    [+[MXSessionManager sharedInstance] setAppAllowedToFadeInTemporarily:0];
    return MEMORY[0x199716EA0](gCMSM);
  }
  return result;
}

uint64_t CMSessionMgrRegisterEndpointManager(const void *a1)
{
  if (MXGetSerialQueue())
  {
    return FigRouteDiscoveryManagerRegisterEndpointManager(a1);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__CFString *CMSessionMgrGetUpdatedHardwareFormatBasedOnPreferredNumberOfOutputChannelsAndPreferredHardwareFormat(int a1, uint64_t a2)
{
  if (vaemIsAC3EncodingSupported())
  {
    int v4 = FigCFEqual();
    if (a1 >= 3)
    {
      if (v4)
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return @"AC-3";
      }
    }
  }
  return (__CFString *)a2;
}

void cmsUpdateAllowedRouteTypes(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v5 = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(a2);
        }
        VADOutputPortTypeFromFigRouteName = CMSMVAUtility_GetVADOutputPortTypeFromFigRouteName(*(NSDictionary **)(*((void *)&v10 + 1) + 8 * v8));
        if (VADOutputPortTypeFromFigRouteName) {
          objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", VADOutputPortTypeFromFigRouteName));
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [a2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
  [a1 setAllowedRouteTypes:a2];
  objc_msgSend(a1, "setAllowedPortTypes:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithArray:", v4));
}

uint64_t cmsEnableBluetoothRecording(void *a1, int a2, void *a3)
{
  if (![a1 allowsBluetoothRecordingCustomization]) {
    return 4294954315;
  }
  [a1 setEnableBluetoothRecordingPreference:a2 != 0];
  [a1 setEnableBluetoothRecordingPreferenceSetByClient:1];
  CustomizedCategory = (const void *)CMSUtility_GetCustomizedCategory(a1);
  [a1 audioCategory];
  if (FigCFEqual()) {
    return 0;
  }
  uint64_t v9 = [a1 interruptionStyle];
  if ([a1 interruptionStyleSetByClient]) {
    BOOL v10 = [a3 objectForKey:@"InterruptionStyle"] == 0;
  }
  else {
    BOOL v10 = 0;
  }
  [+[MXNowPlayingAppManager sharedInstance] setIgnoreNowPlayingAppUpdates:v10];
  uint64_t v7 = cmsSetAudioCategory(a1, CustomizedCategory, 0, a3);
  [+[MXNowPlayingAppManager sharedInstance] setIgnoreNowPlayingAppUpdates:0];
  if (v10) {
    [a1 setInterruptionStyleAtClientRequest:v9];
  }
  return v7;
}

uint64_t cmsSetClientPriority(void *a1, uint64_t a2)
{
  if (a2 <= 0x14 && ((1 << a2) & 0x100401) != 0)
  {
    int CanClientsSetEmergencyAlertPriority = MX_FeatureFlags_CanClientsSetEmergencyAlertPriority();
    if (a2 != 20 || !CanClientsSetEmergencyAlertPriority)
    {
      if (!CanClientsSetEmergencyAlertPriority && ([a1 mustUseDefaultClientPriority] & 1) != 0) {
        return 4294954309;
      }
      int v6 = [a1 isActive];
      if (a2 == 10 && v6 && !CMSUtility_IsAudioCategoryRingtone(a1)) {
        return 4294954309;
      }
      goto LABEL_15;
    }
    if ([a1 hasEntitlementToSetEmergencyAlertPriority])
    {
      [a1 isActive];
LABEL_15:
      unsigned int v7 = [a1 clientPriority];
      [a1 setClientPriority:a2];
      [a1 setHasPhoneCallBehavior:CMSUtility_HasPhoneCallBehaviour(a1) != 0];
      [a1 setOptOutOfMutePriority:CMSUtility_HasPhoneCallBehaviour(a1) != 0];
      if ([a1 clientPriority] <= v7
        || ![a1 isActive]
        || (uint64_t result = cmsBeginInterruptionGuts(a1, 0, 2), !result)
        && (uint64_t result = [+[MXAdditiveRoutingManager sharedInstance] sendActiveSessionsInfoToVA], !result))
      {
        if ((CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded(),
              MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
          && ([a1 isActive] & 1) != 0
          || (uint64_t result = [a1 isPlaying], result))
        {
          CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 12);
          CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
          return 0;
        }
      }
      return result;
    }
  }
  return FigSignalErrorAt();
}

uint64_t cmsUpdateExcludedPortsList(void *a1, CFTypeRef cf)
{
  if (!a1) {
    return 4294954316;
  }
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 != CFArrayGetTypeID()) {
      return 4294954315;
    }
    [a1 setExcludedPortsList:0];
    if (CFArrayGetCount((CFArrayRef)cf) >= 1)
    {
      CFIndex v5 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v5);
        CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"PortNumber");
        if (Value)
        {
          uint64_t v8 = Value;
          uint64_t v9 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(a1, "excludedPortsList"));
          [v9 addObject:v8];
          [a1 setExcludedPortsList:v9];
        }
        ++v5;
      }
      while (CFArrayGetCount((CFArrayRef)cf) > v5);
    }
  }
  else
  {
    [a1 setExcludedPortsList:0];
  }
  uint64_t result = [a1 isActive];
  if (result)
  {
    if (([a1 currentlyControllingFlags] & 2) != 0) {
      cmsSetCategoryOnPVMAndAudioDevice(a1, 0, 0);
    }
    return 0;
  }
  return result;
}

uint64_t cmsSetOverrideRoute(void *a1, NSDictionary *a2)
{
  if (!a1) {
    return 4294954316;
  }
  if (FigCFEqual())
  {
    -[NSDictionary objectForKey:](-[MXSessionManager figCategoryToOutputOverridabilityDict](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "figCategoryToOutputOverridabilityDict"), "objectForKey:", [a1 audioCategory]);
    if (FigCFEqual()) {
      return 4294954315;
    }
  }
  uint64_t v5 = [a1 audioCategory];
  int v6 = (__CFString *)[a1 audioMode];
  int VADOutputPortTypeFromFigRouteName = CMSMVAUtility_GetVADOutputPortTypeFromFigRouteName(a2);
  int VADInputPortTypeFromFigRouteName = CMSMVAUtility_GetVADInputPortTypeFromFigRouteName(a2);
  if (v5) {
    uint64_t v9 = (NSDictionary *)v5;
  }
  else {
    uint64_t v9 = (NSDictionary *)@"Audio/Video";
  }
  if (!v6) {
    int v6 = @"Default";
  }
  int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v9);
  int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName((uint64_t)v6);
  if (!VADInputPortTypeFromFigRouteName && VADOutputPortTypeFromFigRouteName == 1886613611)
  {
    int v12 = VADModeFromFigModeName;
    int VADPortIDFromVADPortType = vaemGetVADPortIDFromVADPortType(1886216809);
    if (cmsmInputPortIsConnectedForRouteConfiguration(VADPortIDFromVADPortType, VADCategoryFromFigCategoryName, v12, (const void *)[a1 allowedPortTypes]))int VADInputPortTypeFromFigRouteName = 1886216809; {
    else
    }
      int VADInputPortTypeFromFigRouteName = 0;
  }
  int v14 = vaemGetVADPortIDFromVADPortType(VADOutputPortTypeFromFigRouteName);
  int v15 = vaemGetVADPortIDFromVADPortType(VADInputPortTypeFromFigRouteName);
  OverridePortsList = CMSMUtility_CreateOverridePortsList(v15, v14);
  [a1 setOverridePortsList:OverridePortsList];
  if (OverridePortsList) {
    CFRelease(OverridePortsList);
  }
  uint64_t result = [a1 isActive];
  if (result)
  {
    cmsTryToTakeControl(a1);
    return 0;
  }
  return result;
}

uint64_t cmsSetVolume(void *a1, uint64_t a2, float a3)
{
  if ([a1 isActive] && !PVMGetEnabled()) {
    cmsTryToTakeControl(a1);
  }
  uint64_t VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
  return PVMSetCurrentPreferredVolumeWithRefCon(a2, VolumeSequenceNumber, 0, a3);
}

uint64_t cmsmActivateEndpointFromRouteDescription(const __CFDictionary *a1)
{
  if (!a1) {
    return 0;
  }
  CFStringRef UIDFromRouteDescription = (const __CFString *)CMSMVAUtility_GetUIDFromRouteDescription(a1);
  AudioObjectID CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  CFTypeRef v4 = vaeCopyDeviceIdentifierFromVADPort(CurrentOutputPortAtIndex);
  if (FigCFEqual())
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v4) {
      CFRelease(v4);
    }
    return 0;
  }
  CFDictionaryGetValue(a1, @"AVAudioRouteName");
  int v6 = (const void *)vaeCopyNameForPort(CurrentOutputPortAtIndex);
  CFDictionaryGetValue(a1, @"RouteName");
  if (dword_1E9359ED0)
  {
    unsigned int v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (FigCFEqual())
  {
    BOOL v10 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)UIDFromRouteDescription, 1, *MEMORY[0x1E4F20638], 0);
    if (UIDFromRouteDescription && CFStringHasSuffix(UIDFromRouteDescription, @"screen")) {
      uint64_t v11 = qword_1E9359C98;
    }
    else {
      uint64_t v11 = qword_1E9359C80;
    }
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = *(uint64_t (**)(uint64_t, const void *, void))(v13 + 8);
    if (v14)
    {
      uint64_t v8 = v14(v11, v10, 0);
      if (!v10)
      {
LABEL_28:
        if (v8) {
          return v8;
        }
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v8 = 4294954514;
      if (!v10) {
        goto LABEL_28;
      }
    }
    CFRelease(v10);
    goto LABEL_28;
  }
LABEL_29:
  if (FigCFEqual() || FigCFEqual())
  {
    if (CFDictionaryGetValue(a1, @"PortNumber")) {
      int v15 = (uint64_t *)MEMORY[0x1E4F20660];
    }
    else {
      int v15 = (uint64_t *)MEMORY[0x1E4F20640];
    }
    int v16 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)UIDFromRouteDescription, 0, *v15, 0);
    uint64_t v17 = qword_1E9359C80;
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    int v20 = *(uint64_t (**)(uint64_t, const void *, void))(v19 + 8);
    if (!v20)
    {
      uint64_t v8 = 4294954514;
      if (!v16) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    uint64_t v21 = v20(v17, v16, 0);
LABEL_45:
    uint64_t v8 = v21;
    if (!v16)
    {
LABEL_41:
      if (v8) {
        return v8;
      }
      goto LABEL_42;
    }
LABEL_40:
    CFRelease(v16);
    goto LABEL_41;
  }
  if (FigCFEqual())
  {
    int v16 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)UIDFromRouteDescription, 0, *MEMORY[0x1E4F20660], 0);
    uint64_t v21 = FigRoutingContextSelectRoute(qword_1E9359C80, (uint64_t)v16);
    goto LABEL_45;
  }
  uint64_t v22 = FigRoutingManagerPickRouteDescriptorForContext((const void *)qword_1E9359C88, a1, 0, 0);
  if (v22) {
    return v22;
  }
LABEL_42:
  cmsmUpdateFakeSharedAudioRouteAsPicked(1, 0, 0, 0);
  cmsmUpdateEnableSharedAudioRouteSyntheticMute(0, 0, 1, 0, 0, 0);
  return 0;
}

void CMSessionMgrInterruptVoiceAssistantIfCarSupportsAuxStream()
{
  uint64_t v0 = MXGetSerialQueue();
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrInterruptVoiceAssistantIfCarSupportsAuxStream", (uint64_t)"CMSessionManager.m", 12513, 0, 0, v0, (uint64_t)&__block_literal_global_185);
}

uint64_t __CMSessionMgrInterruptVoiceAssistantIfCarSupportsAuxStream_block_invoke()
{
  uint64_t result = FigRoutingManager_iOSIsCarPlayAuxStreamSupported();
  if (result)
  {
    return CMSMUtility_InterruptActiveSiriSession();
  }
  return result;
}

uint64_t FigEndpointManagerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  BOOL v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  return v10(CMBaseObject, a2, a3, a4);
}

uint64_t FigVAEndpointManagerCopyPropertyForRouteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v15 = *(void *)(VTable + 24);
  uint64_t result = VTable + 24;
  uint64_t v14 = v15;
  if (v15) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(v16 + 16);
  if (v17)
  {
    return v17(a1, a2, a3, a4, a5, 0, a6);
  }
  return result;
}

uint64_t FigRoutingContextSelectRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, void))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }
  return v6(a1, a2, 0);
}

uint64_t CMSessionMgrHasRouteSharingPolicyLongFormVideo(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  if (a1)
  {
    uint64_t v4 = MXGetSerialQueue();
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __CMSessionMgrHasRouteSharingPolicyLongFormVideo_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a1;
    void v6[5] = a2;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrHasRouteSharingPolicyLongFormVideo", (uint64_t)"CMSessionManager.m", 15120, 0, 0, v4, (uint64_t)v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t __CMSessionMgrHasRouteSharingPolicyLongFormVideo_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = [+[MXSessionManager sharedInstance] isLongFormVideoApp:*(void *)(a1 + 32)];
  if (result)
  {
    **(unsigned char **)(a1 + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 1;
  }
  else
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v3 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v4 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v10;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v9 + 1) + 8 * i);
          if (v8)
          {
            [*(id *)(*((void *)&v9 + 1) + 8 * i) displayID];
            if (FigCFEqual())
            {
              if ([v8 routeSharingPolicy] == 3)
              {
                **(unsigned char **)(a1 + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 1;
                return [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
              }
            }
          }
        }
        uint64_t v5 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
    return [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  }
  return result;
}

uint64_t CMSessionMgrShouldHijackAudioRoute(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 && a4)
  {
    uint64_t v8 = MXGetSerialQueue();
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    CFTypeRef v10[2] = __CMSessionMgrShouldHijackAudioRoute_block_invoke;
    v10[3] = &__block_descriptor_60_e5_v8__0l;
    int v11 = a1;
    v10[4] = a2;
    void v10[5] = a3;
    v10[6] = a4;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrShouldHijackAudioRoute", (uint64_t)"CMSessionManager.m", 15150, 0, 0, v8, (uint64_t)v10);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t __CMSessionMgrShouldHijackAudioRoute_block_invoke(uint64_t a1)
{
  number[16] = *(CFNumberRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = FigRoutingManagerCopyEndpointWithDeviceID(*(void *)(a1 + 32), 1, *MEMORY[0x1E4F20660], 0);
  unsigned int valuePtr = 0;
  if (!v2) {
    goto LABEL_24;
  }
  uint64_t v3 = (const void *)v2;
  number[0] = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(void (**)(uint64_t, uint64_t, void, CFNumberRef *))(v6 + 48);
  if (v7)
  {
    v7(CMBaseObject, 0x1EE5F4148, *MEMORY[0x1E4F1CF80], number);
    if (number[0])
    {
      CFNumberGetValue(number[0], kCFNumberIntType, &valuePtr);
      if (number[0])
      {
        CFRelease(number[0]);
        number[0] = 0;
      }
    }
  }
  CFRelease(v3);
  if (!valuePtr || !MXBluetoothServices_IsPortBTManaged(valuePtr, 1))
  {
LABEL_24:
    **(unsigned char **)(a1 + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
    **(void **)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = 0x1EE5F0288;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = CMSM_GetHighestPriorityOfLocalSessionPlayingToDevice(*(void *)(a1 + 32));
  unsigned int v9 = *(_DWORD *)(a1 + 56);
  if (v9 < result) {
    goto LABEL_27;
  }
  BOOL v10 = result == 501 && v9 == 501;
  char v11 = !v10;
  if (v10) {
    uint64_t v12 = 0x1EE5F0268;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t result = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
  if (result)
  {
    if (dword_1E9359ED0)
    {
      uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_27:
    char v11 = 0;
    uint64_t v12 = 0x1EE5F0248;
  }
  **(unsigned char **)(a1 + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = v11;
  **(void **)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = v12;
  if (dword_1E9359ED0)
  {
    uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t CMSessionMgrCopyDeviceRouteForRouteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  BOOL v10 = MXGetSerialQueue();
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = __CMSessionMgrCopyDeviceRouteForRouteConfiguration_block_invoke;
  v13[3] = &unk_1E57C8E58;
  v13[4] = &v14;
  void v13[5] = a1;
  void v13[6] = a2;
  void v13[7] = a3;
  v13[8] = a4;
  v13[9] = a5;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrCopyDeviceRouteForRouteConfiguration", (uint64_t)"CMSessionManager.m", 15224, 0, 0, v10, (uint64_t)v13);
  uint64_t v11 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_194E99FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __CMSessionMgrCopyDeviceRouteForRouteConfiguration_block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFTypeRef v20 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v19 = 0;
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v15 objects:v22 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v16;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v16 != v5) {
        objc_enumerationMutation(v2);
      }
      unsigned int v7 = *(void **)(*((void *)&v15 + 1) + 8 * v6);
      if (([v7 currentlyControllingFlags] & 2) != 0) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v15 objects:v22 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    unsigned int v7 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (!v7
    || ![v7 audioCategory]
    || !CFEqual((CFTypeRef)[v7 audioCategory], *(CFTypeRef *)(a1 + 40)))
  {
    goto LABEL_30;
  }
  CFTypeRef v13 = 0;
  CFTypeRef v14 = 0;
  CFStringRef v8 = [+[MXSessionManager sharedInstance] getUncustomizedCategory:*(void *)(a1 + 40)];
  if (!PVMCopyCurrentState(0, &v14, &v13, &cf, &v20, &v19))
  {
    if (*(void *)(a1 + 40) && v14 && PVMCategoriesAreEquivalent(v8, 0, (const __CFString *)v14, v13))
    {
      int v9 = 0;
      goto LABEL_25;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v20)
    {
      CFRelease(v20);
      CFTypeRef v20 = 0;
    }
    if (v19)
    {
      CFRelease(v19);
      CFTypeRef v19 = 0;
    }
  }
  int v9 = 1;
LABEL_25:
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v9) {
LABEL_30:
  }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration(*(NSDictionary **)(a1 + 40), *(void *)(a1 + 48), 0, 0, &cf, &v20, &v19);
  BOOL v10 = *(CFTypeRef **)(a1 + 56);
  if (v10)
  {
    *BOOL v10 = cf;
    CFTypeRef cf = 0;
  }
  uint64_t v11 = *(CFTypeRef **)(a1 + 64);
  if (v11)
  {
    *uint64_t v11 = v20;
    CFTypeRef v20 = 0;
  }
  uint64_t v12 = *(CFTypeRef **)(a1 + 72);
  if (v12)
  {
    *uint64_t v12 = v20;
    CFTypeRef v20 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
}

__CFString *MXSMGetVolumeRampCategory(const __CFString *a1, const void *a2)
{
  uint64_t v4 = @"PhoneCall";
  if (!PVMCategoriesAreEquivalent(a1, a2, @"PhoneCall", 0))
  {
    uint64_t v4 = @"VoiceCommand";
    if (!PVMCategoriesAreEquivalent(a1, a2, @"VoiceCommand", 0))
    {
      uint64_t v4 = @"Audio/Video";
      if (!PVMCategoriesAreEquivalent(a1, a2, @"Audio/Video", 0)) {
        return 0;
      }
    }
  }
  return v4;
}

void cmsmGetAndSetVolumePreferencesForNonActiveVolumeClient(void *a1, uint64_t a2, int a3, float a4, uint64_t a5, uint64_t a6, CFTypeRef *a7, const void *a8, unsigned char *a9, unsigned char *a10, float *a11, unsigned char *a12, unsigned char *a13, unsigned __int8 a14, char a15, unsigned __int8 a16)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (a9)
  {
    if (a11 && a12 != 0)
    {
      long long v17 = a9;
      CFTypeRef v45 = 0;
      CFTypeRef cf = 0;
      uint64_t v44 = 0;
      *(_OWORD *)CFRange v42 = 0u;
      *(_OWORD *)os_log_type_t v43 = 0u;
      CMSUtility_CopyCurrentCategoryAndDeviceRoute(a1, (NSDictionary **)&cf, &v45, &v42[1], &v43[1], v43);
      CFIndex v24 = +[MXSessionManager sharedInstance];
      CFTypeRef v25 = [(MXSessionManager *)v24 getUncustomizedCategory:cf];
      if (v25) {
        CFTypeRef v25 = CFRetain(v25);
      }
      CFTypeRef cf = v25;
      long long v47 = *(_OWORD *)v42;
      long long v48 = *(_OWORD *)v43;
      uint64_t v49 = v44;
      v42[0] = PVMGetMappedEndpointType((uint64_t)&v47);
      switch(a3)
      {
        case 1:
          vaemUnmuteFullMuteIfMuted();
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          float v30 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          PVMSetVolumePreference((const __CFString *)cf, v45, a16, (uint64_t)&v47, a2, a14, v30 + a4, 0.0, 0.0);
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          *a11 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
          *a10 = 1;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(1u, a16, v30, *a11);
          if (dword_1E9359ED0) {
            goto LABEL_19;
          }
          goto LABEL_43;
        case 2:
          vaemUnmuteFullMuteIfMuted();
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          float v32 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          PVMSetVolumePreference((const __CFString *)cf, v45, a16, (uint64_t)&v47, a2, a14, a4, 0.0, 0.0);
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          *a11 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
          *a10 = 1;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(2u, a16, v32, *a11);
          if (dword_1E9359ED0)
          {
LABEL_19:
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          goto LABEL_43;
        case 3:
        case 6:
          goto LABEL_42;
        case 4:
          long long v17 = a10;
          vaemUnmuteFullMuteIfMuted();
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          float v33 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          PVMSetVolumePreference((const __CFString *)cf, v45, a16, (uint64_t)&v47, a2, a14, v33 + a4, 0.0, 0.0);
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          float v34 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
          *a11 = v34;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(4u, a16, v33, v34);
          if (dword_1E9359ED0) {
            goto LABEL_34;
          }
          goto LABEL_35;
        case 5:
          long long v17 = a10;
          vaemUnmuteFullMuteIfMuted();
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          float v35 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          PVMSetVolumePreference((const __CFString *)cf, v45, a16, (uint64_t)&v47, a2, a14, a4, 0.0, 0.0);
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          float v36 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
          *a11 = v36;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(5u, a16, v35, v36);
          if (dword_1E9359ED0) {
            goto LABEL_34;
          }
          goto LABEL_35;
        case 7:
          goto LABEL_29;
        case 8:
          if (!a13) {
            goto LABEL_43;
          }
          goto LABEL_32;
        case 9:
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          if (!PVMIsCurrentDeviceRoute((uint64_t)&v47)) {
            goto LABEL_43;
          }
LABEL_29:
          char v37 = [a1 userMuted];
          *a12 = v37 ^ (MXCoreSessionSetProperty((int)a1, @"UserMuted") == 0);
LABEL_35:
          unsigned char *v17 = 1;
          goto LABEL_43;
        case 10:
          if (a13)
          {
            long long v47 = *(_OWORD *)v42;
            long long v48 = *(_OWORD *)v43;
            uint64_t v49 = v44;
            if (PVMIsCurrentDeviceRoute((uint64_t)&v47)) {
LABEL_32:
            }
              *a13 = [a1 userMuted];
            else {
              *a13 = 0;
            }
          }
          goto LABEL_43;
        case 11:
        case 12:
        case 13:
          if (!a8) {
            goto LABEL_43;
          }
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          if (v45)
          {
            CFRelease(v45);
            CFTypeRef v45 = 0;
          }
          CFStringRef v26 = (const __CFString *)CFRetain(a8);
          CFTypeRef cf = v26;
          if (a3 == 12)
          {
            if (!a15)
            {
              vaemUnmuteFullMuteIfMuted();
              CFStringRef v26 = (const __CFString *)cf;
            }
            long long v47 = *(_OWORD *)v42;
            long long v48 = *(_OWORD *)v43;
            uint64_t v49 = v44;
            float v41 = PVMGetVolumePreference(v26, v45, (uint64_t)&v47);
            long long v47 = *(_OWORD *)v42;
            long long v48 = *(_OWORD *)v43;
            uint64_t v49 = v44;
            PVMSetVolumePreference((const __CFString *)cf, v45, a16, (uint64_t)&v47, a2, a14, a4, 0.0, 0.0);
            MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xCu, a16, v41, a4);
            if (dword_1E9359ED0)
            {
LABEL_17:
              int v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          else
          {
            if (a3 != 11) {
              goto LABEL_42;
            }
            vaemUnmuteFullMuteIfMuted();
            long long v47 = *(_OWORD *)v42;
            long long v48 = *(_OWORD *)v43;
            uint64_t v49 = v44;
            float v27 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
            *a11 = v27 + a4;
            long long v47 = *(_OWORD *)v42;
            long long v48 = *(_OWORD *)v43;
            uint64_t v49 = v44;
            PVMSetVolumePreference((const __CFString *)cf, v45, a16, (uint64_t)&v47, a2, a14, v27 + a4, 0.0, 0.0);
            long long v47 = *(_OWORD *)v42;
            long long v48 = *(_OWORD *)v43;
            uint64_t v49 = v44;
            float v28 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
            MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xBu, a16, v27, v28);
            if (dword_1E9359ED0) {
              goto LABEL_17;
            }
          }
          *a10 = 1;
LABEL_42:
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          *a11 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
LABEL_43:
          if (a7)
          {
            *a7 = cf;
          }
          else
          {
            if (!cf) {
              goto LABEL_48;
            }
            CFRelease(cf);
          }
          CFTypeRef cf = 0;
LABEL_48:
          if (v45)
          {
            CFRelease(v45);
            CFTypeRef v45 = 0;
          }
          if (v43[1])
          {
            CFRelease(v43[1]);
            v43[1] = 0;
          }
          if (v42[1])
          {
            CFRelease(v42[1]);
            v42[1] = 0;
          }
          if (v43[0]) {
            CFRelease(v43[0]);
          }
          break;
        case 14:
          long long v17 = a10;
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          float v38 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          PVMSetRawVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47, a2, a14, a16, a4);
          long long v47 = *(_OWORD *)v42;
          long long v48 = *(_OWORD *)v43;
          uint64_t v49 = v44;
          float v39 = PVMGetVolumePreference((const __CFString *)cf, v45, (uint64_t)&v47);
          *a11 = v39;
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xEu, a16, v38, v39);
          if (dword_1E9359ED0)
          {
LABEL_34:
            id v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          goto LABEL_35;
        default:
          goto LABEL_43;
      }
    }
  }
}

uint64_t CMSessionManagerPerformVolumeOperationWithSequenceNumber(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = 0;
  float v28 = &v27;
  uint64_t v29 = 0x2020000000;
  int v30 = 0;
  CFTypeRef v20 = MXGetSerialQueue();
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __CMSessionManagerPerformVolumeOperationWithSequenceNumber_block_invoke;
  v23[3] = &unk_1E57CB998;
  int v24 = a1;
  float v25 = a9;
  v23[4] = &v27;
  v23[5] = a2;
  v23[6] = a3;
  v23[7] = a4;
  int v26 = a6;
  v23[8] = a5;
  v23[9] = a7;
  v23[10] = a8;
  v23[11] = a10;
  v23[12] = a11;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionManagerPerformVolumeOperationWithSequenceNumber", (uint64_t)"CMSessionManager.m", 16795, 0, 0, v20, (uint64_t)v23);
  uint64_t v21 = *((unsigned int *)v28 + 6);
  _Block_object_dispose(&v27, 8);
  return v21;
}

void sub_194E9B484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CMSessionManagerPerformVolumeOperationWithSequenceNumber_block_invoke(uint64_t a1)
{
  uint64_t result = MXSMPerformVolumeOperation(*(_DWORD *)(a1 + 104), *(__CFString **)(a1 + 40), *(const void **)(a1 + 48), *(const void **)(a1 + 56), *(const __CFString **)(a1 + 64), 0, *(unsigned int *)(a1 + 112), *(float **)(a1 + 72), *(float *)(a1 + 108), 0.0, 0.0, *(unsigned char **)(a1 + 80), *(CFTypeRef **)(a1 + 88), *(uint64_t **)(a1 + 96), 0, 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CMSessionMgrPerformVolumeOperation(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v24 = 0;
  float v25 = &v24;
  uint64_t v26 = 0x2020000000;
  int v27 = 0;
  long long v18 = MXGetSerialQueue();
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = __CMSessionMgrPerformVolumeOperation_block_invoke;
  v21[3] = &unk_1E57CB9C0;
  int v22 = a1;
  float v23 = a9;
  os_log_type_t v21[4] = &v24;
  v21[5] = a2;
  void v21[6] = a3;
  void v21[7] = a4;
  v21[8] = a5;
  v21[9] = a6;
  v21[10] = a7;
  v21[11] = a8;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrPerformVolumeOperation", (uint64_t)"CMSessionManager.m", 16833, 0, 0, v18, (uint64_t)v21);
  uint64_t v19 = *((unsigned int *)v25 + 6);
  _Block_object_dispose(&v24, 8);
  return v19;
}

void sub_194E9B634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CMSessionMgrPerformVolumeOperation_block_invoke(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 96);
  float v3 = *(float *)(a1 + 100);
  uint64_t v4 = *(__CFString **)(a1 + 40);
  uint64_t v5 = *(const void **)(a1 + 48);
  uint64_t v6 = *(const void **)(a1 + 56);
  CFStringRef v7 = *(const __CFString **)(a1 + 64);
  uint64_t v8 = getpid();
  uint64_t result = MXSMPerformVolumeOperation(v2, v4, v5, v6, v7, 0, v8, *(float **)(a1 + 72), v3, 0.0, 0.0, *(unsigned char **)(a1 + 80), *(CFTypeRef **)(a1 + 88), 0, 0, 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _CMSessionMgrCopyPortDescription(const __CFNumber *a1, uint64_t a2, CFDictionaryRef *a3)
{
  if (a1 && (CFTypeID v5 = CFGetTypeID(a1), v5 == CFNumberGetTypeID()))
  {
    AudioObjectID PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(a1);
    if (a3) {
      *a3 = cmsmCopyDetailedPortInfoForRouteConfiguration(PortFromCFNumber, 0, 1768776806, 0, 2);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigPlayerCMSessionOneTimeInitialization()
{
  if (MX_FeatureFlags_IsAudiomxdEnabled())
  {
    CMSMDeviceState_UpdateDeviceConfiguration();
  }
  else
  {
    MXInitialize();
  }
}

__n128 MediaServerCMSessionOneTimeInitialization(uint64_t a1, uint64_t a2)
{
  if (cmsmInitializeLogging_onceToken != -1) {
    dispatch_once(&cmsmInitializeLogging_onceToken, &__block_literal_global_78);
  }
  MXSetSerialQueue(a1);
  *(_OWORD *)&unk_1E9359B28 = *(_OWORD *)a2;
  unk_1E9359B38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&unk_1E9359B48 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&unk_1E9359B58 = *(_OWORD *)(a2 + 48);
  __n128 result = *(__n128 *)(a2 + 64);
  *(__n128 *)&qword_1E9359B68 = result;
  return result;
}

uint64_t FigPlayerCMSessionOneTimeFinalization()
{
  return FigVibratorStopWithOptions(0);
}

uint64_t FigPlayerCMSession_SystemWillSleep()
{
  return FigVibratorStopWithOptions(0);
}

void MXSessionManagerFadeOutCurrentNowPlayingApp(int a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (MX_FeatureFlags_IsHandoffEnabled())
  {
    id v2 = CMSMNP_CopyNowPlayingAppSession();
    if (v2)
    {
      float v3 = v2;
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      valuePtr[0] = 0;
      if (a1) {
        float FadeOutDurationForPlaybackHandoff = CMSMUtility_GetFadeOutDurationForPlaybackHandoff();
      }
      else {
        float FadeOutDurationForPlaybackHandoff = 0.0;
      }
      float v12 = FadeOutDurationForPlaybackHandoff;
      CFAllocatorRef v6 = CFGetAllocator(v3);
      CFNumberRef v7 = CFNumberCreate(v6, kCFNumberFloat32Type, valuePtr);
      CFAllocatorRef v8 = CFGetAllocator(v3);
      CFNumberRef v9 = CFNumberCreate(v8, kCFNumberFloat32Type, &v12);
      CMSMUtility_PostNotifyStyleFadeOutAppliedForPlaybackHandoff();
      CMSUtility_PostInterruptionCommandNotification(v3, 2u, (__CFString *)[v3 clientName], 0, v7, v9, 0, 0);
      BOOL v10 = +[MXSessionManager sharedInstance];
      *(float *)&double v11 = v12;
      [(MXSessionManager *)v10 sleepForAsyncDucking:1 duration:v11];
      if (v7) {
        CFRelease(v7);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void MXSessionManagerFadeInCurrentNowPlayingApp(int a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (MX_FeatureFlags_IsHandoffEnabled())
  {
    id v2 = CMSMNP_CopyNowPlayingAppSession();
    if (v2)
    {
      float v3 = v2;
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a1) {
        float FadeInDurationForPlaybackHandoff = CMSMUtility_GetFadeInDurationForPlaybackHandoff();
      }
      else {
        float FadeInDurationForPlaybackHandoff = 0.0;
      }
      valuePtr[0] = FadeInDurationForPlaybackHandoff;
      CFAllocatorRef v6 = CFGetAllocator(v3);
      CFNumberRef v7 = CFNumberCreate(v6, kCFNumberFloat32Type, valuePtr);
      CMSMUtility_PostNotifyStyleFadeInAppliedForPlaybackHandoff();
      CMSUtility_PostInterruptionCommandNotification(v3, 3u, (__CFString *)[v3 clientName], 0, 0, v7, 0, 0);
      CFAllocatorRef v8 = +[MXSessionManager sharedInstance];
      *(float *)&double v9 = valuePtr[0];
      [(MXSessionManager *)v8 sleepForAsyncDucking:0 duration:v9];
      if (v7) {
        CFRelease(v7);
      }
    }
  }
}

void *__cmsmLoadAudioStatisticsRoutines_block_invoke()
{
  __n128 result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    gCMSessionAudioStatistics = (uint64_t)dlsym(result, "CreateSharedCAReportingClient");
    off_1E9359CE0 = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCreateReporterID");
    off_1E9359CE8 = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStartReporter");
    off_1E9359CF0 = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStopReporter");
    off_1E9359CF8 = dlsym(v1, "CAReportingClientSetAudioServiceType");
    qword_1E9359D00 = (uint64_t)dlsym(v1, "CAReportingClientGetAudioServiceType");
    off_1E9359D08 = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetConfiguration");
    off_1E9359D10 = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    __n128 result = dlsym(v1, "CAReportingClientDestroyReporterID");
    off_1E9359D18 = (uint64_t (*)(void))result;
  }
  return result;
}

void cmsmVibeStoppedNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
}

void cmsmGetCountAndResourceEntriesOfType(uint64_t a1, _DWORD *a2, void *a3)
{
  *a3 = 0;
  *a2 = 0;
  if (dword_1E9359BF8 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      if (FigCFEqual())
      {
        uint64_t v7 = qword_1E9359C00 + v5;
        *a2 = *(_DWORD *)(qword_1E9359C00 + v5 + 8);
        *a3 = *(void *)(v7 + 16);
      }
      ++v6;
      v5 += 24;
    }
    while (v6 < dword_1E9359BF8);
  }
}

uint64_t (*__cmsmLoadClusterSyncMgrRoutines_block_invoke())(void)
{
  uint64_t v0 = dlopen("/System/Library/Frameworks/MediaToolbox.framework/MediaToolbox", 4);
  if (!v0
    || (__n128 result = (uint64_t (*)(void))dlsym(v0, "FigClusterSynchronizationManager_ClientIsPlaying"),
        (sFigClusterSynchronizationManager_Clientint IsPlaying = result) == 0))
  {
    return (uint64_t (*)(void))FigSignalErrorAt();
  }
  return result;
}

void __cmsChangeGroupableAirPlayRouteFromSystemAudioToSystemMusic_block_invoke(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, *(const void **)(a1 + 32));
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(v5, @"RouteChangeOptionKey_UserPickedRoute", (const void *)*MEMORY[0x1E4F1CFC8]);
  FigRoutingManagerPickEndpointsForContext(*(const void **)(a1 + 40), Mutable, 0, v5);
  if (v5) {
    CFRelease(v5);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v6 = *(const void **)(a1 + 32);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t __cmsmUpdateSomeClientIsPlaying_block_invoke()
{
  return CMSMNotificationUtility_PostSomeClientIsPlayingDidChange(byte_1E9359C30);
}

void __cmsHandleIdleSleep_block_invoke_2(uint64_t a1)
{
}

BOOL cmsmValidateAppsList(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
    return 1;
  }
  else
  {
    CFIndex v3 = Count;
    BOOL v4 = 0;
    if (CFArrayGetValueAtIndex(a1, 0))
    {
      CFIndex v5 = 1;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v5 - 1);
        CFTypeID v7 = CFGetTypeID(ValueAtIndex);
        if (v7 != CFStringGetTypeID()) {
          break;
        }
        BOOL v4 = v5 >= v3;
        if (v3 == v5) {
          break;
        }
      }
      while (CFArrayGetValueAtIndex(a1, v5++));
    }
  }
  return v4;
}

void MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(unsigned int a1, int a2, float a3, float a4)
{
  uint64_t CurrentOutputPortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  int DoesBluetoothSupportFeature = vaeDoesBluetoothSupportFeature(CurrentOutputPortAtIndex);
  if (a1 <= 0xE && ((1 << a1) & 0x5836) != 0 && a3 != a4 && !a2 && DoesBluetoothSupportFeature)
  {
    CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(1, a4 > a3);
  }
}

void __cmsmRegisterForAudioDeviceStartNotifications_block_invoke()
{
  int AudioDeviceStart = cmsmGetAudioDeviceStart();
  if (![+[MXSessionManager sharedInstance] defaultVADID])return; {
  if (AudioDeviceStart)
  }
  {
    if (!FigAtomicCompareAndSwap32()) {
      return;
    }
    ::AudioDeviceStart([+[MXSessionManager sharedInstance] defaultVADID], 0);
    if (!FigAtomicCompareAndSwap32()) {
      return;
    }
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFStringAppendFormat(Mutable, 0, @"com.apple.appletv.audiostart");
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v4 = CFDateCreate(v1, Current);
    CFIndex v5 = (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorName;
    sCMSessionMgrAudioDeviceStartIdleSleepPreventorName = (uint64_t)Mutable;
    if (Mutable) {
      CFRetain(Mutable);
    }
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime;
    sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime = (uint64_t)v4;
    if (v4) {
      CFRetain(v4);
    }
    if (v6) {
      CFRelease(v6);
    }
    PowerLogDataForAppleTV = CMSMPowerLogCreatePowerLogDataForAppleTV(@"AppleTV_Awake", sCMSessionMgrAudioDeviceStartIdleSleepPreventor, (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorName, (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime);
    sCMSessionMgrAudioDeviceStartIdleSleepPreventorAllocated = CMSMSleep_CreateIdleSleepPreventor(Mutable, @"CoreMedia_AppleTVIdleSleepPreventor", PowerLogDataForAppleTV, (IOPMAssertionID *)&sCMSessionMgrAudioDeviceStartIdleSleepPreventor);
    if (PowerLogDataForAppleTV) {
      CFRelease(PowerLogDataForAppleTV);
    }
    if (Mutable)
    {
      CFRelease(Mutable);
      if (!v4) {
        return;
      }
      goto LABEL_26;
    }
  }
  else
  {
    if (!FigAtomicCompareAndSwap32()) {
      return;
    }
    AudioDeviceStop([+[MXSessionManager sharedInstance] defaultVADID], 0);
    if (!FigAtomicCompareAndSwap32()) {
      return;
    }
    CFDateRef v4 = CMSMPowerLogCreatePowerLogDataForAppleTV(@"AppleTV_Asleep", sCMSessionMgrAudioDeviceStartIdleSleepPreventor, (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorName, (const void *)sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime);
    if (!CMSMSleep_ReleaseIdleSleepPreventor(sCMSessionMgrAudioDeviceStartIdleSleepPreventor, @"CoreMedia_AppleTVIdleSleepPreventor", v4))
    {
      sCMSessionMgrAudioDeviceStartIdleSleepPreventorAllocated = 1;
      if (!v4) {
        return;
      }
      goto LABEL_26;
    }
    sCMSessionMgrAudioDeviceStartIdleSleepPreventor = 0;
    if (sCMSessionMgrAudioDeviceStartIdleSleepPreventorName)
    {
      CFRelease((CFTypeRef)sCMSessionMgrAudioDeviceStartIdleSleepPreventorName);
      sCMSessionMgrAudioDeviceStartIdleSleepPreventorName = 0;
    }
    if (sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime)
    {
      CFRelease((CFTypeRef)sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime);
      sCMSessionMgrAudioDeviceStartIdleSleepPreventorCreationTime = 0;
    }
  }
  if (!v4) {
    return;
  }
LABEL_26:
  CFRelease(v4);
}

uint64_t cmsmGetAudioDeviceStart()
{
  uint64_t state64 = 0;
  if (notify_get_state(gAudioDeviceStartNotifyToken, &state64)) {
    return gAudioDeviceStartCached;
  }
  uint64_t result = state64 != 0;
  gAudioDeviceStartCached = state64 != 0;
  return result;
}

void __cmsmScreenIsBlankedChangedCallback_block_invoke(uint64_t a1)
{
  int IsBlanked = CMSMUtility_ShouldEnableLongPullModeWhenScreenIsBlanked();
  CMScreenHandleIdleEvent(100, *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
  if (*(unsigned char *)(a1 + 33)) {
    goto LABEL_8;
  }
  if (IsBlanked || FigVAEndpointManagerGetPropertyBoolean(qword_1E9359B78, 0x1EE5F3388))
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemCalculateAndSetDeviceBufferDuration(1, 0, 0.0, 0.0);
  }
  dispatch_time_t v4 = dispatch_time(0, 1000000000);
  CFIndex v5 = MXGetSerialQueue();
  dispatch_after(v4, v5, &__block_literal_global_345);
  if (*(unsigned char *)(a1 + 33)) {
LABEL_8:
  }
    CMSystemSoundMgr_DeactivateAllSystemSounds();
  else {
    CMSystemSoundMgr_ActivateAllSystemSounds();
  }
  if (*(unsigned char *)(a1 + 33) && IsBlanked)
  {
    if (dword_1E9359ED0)
    {
      uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemCalculateAndSetDeviceBufferDuration(1, 0, 0.0, 0.0);
  }
}

uint64_t __cmsmTightSyncUUIDChangedCallback_block_invoke()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v12;
    BOOL v10 = v0;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v12 != v3) {
          objc_enumerationMutation(v0);
        }
        CFIndex v5 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ((-[MXSessionManager isAirPlaySession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v8, v9), "isAirPlaySession:", v5)|| CMSUtility_GetWantsAutomaticClusterPairingOnPlaybackStart(v5))&& [v5 isActive]&& objc_msgSend(v5, "isPlaying"))
        {
          if (dword_1E9359ED0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v0 = v10;
          }
          CMSUtilityApplier_PostNotification_StopCommand(v5, 0);
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v2);
  }
  return [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
}

uint64_t __cmsmVoiceOverIsOnChangedCallback_block_invoke(uint64_t a1)
{
  int v1 = byte_1E9359CB0;
  int v2 = *(unsigned __int8 *)(a1 + 32);
  byte_1E9359CB0 = *(unsigned char *)(a1 + 32);
  [+[MXAdditiveRoutingManager sharedInstance] sendActiveSessionsInfoToVA];
  uint64_t result = MX_FeatureFlags_IsRelativeVoiceOverVolumeEnabled();
  if (result && v1 != v2)
  {
    [+[MXSessionManager sharedInstance] startAsyncDuckingOperation];
    [+[MXSessionManager sharedInstance] updateDuckedSessionsForVoiceOver:0];
    dispatch_time_t v4 = +[MXSessionManager sharedInstance];
    return [(MXSessionManager *)v4 endAsyncDuckingOperation];
  }
  return result;
}

void *__MediaRemoteLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote", 2);
  MediaRemoteLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initValkMRMediaRemoteOptionRemoteControlInterfaceIdentifier()
{
  if (MediaRemoteLibrary_sOnce != -1) {
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_352);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)MediaRemoteLibrary_sLib, "kMRMediaRemoteOptionRemoteControlInterfaceIdentifier");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkMRMediaRemoteOptionRemoteControlInterfaceIdentifier = result;
  }
  else
  {
    uint64_t result = constantValkMRMediaRemoteOptionRemoteControlInterfaceIdentifier;
  }
  getkMRMediaRemoteOptionRemoteControlInterfaceIdentifier[0] = kMRMediaRemoteOptionRemoteControlInterfaceIdentifierFunction;
  return result;
}

uint64_t kMRMediaRemoteOptionRemoteControlInterfaceIdentifierFunction()
{
  return constantValkMRMediaRemoteOptionRemoteControlInterfaceIdentifier;
}

uint64_t initMRMediaRemoteSendCommandToApp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (MediaRemoteLibrary_sOnce != -1) {
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_352);
  }
  long long v14 = (uint64_t (*)())dlsym((void *)MediaRemoteLibrary_sLib, "MRMediaRemoteSendCommandToApp");
  softLinkMRMediaRemoteSendCommandToApp = v14;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t initMRMediaRemoteGetLocalOrigin()
{
  if (MediaRemoteLibrary_sOnce != -1) {
    dispatch_once(&MediaRemoteLibrary_sOnce, &__block_literal_global_352);
  }
  uint64_t v0 = (uint64_t (*)())dlsym((void *)MediaRemoteLibrary_sLib, "MRMediaRemoteGetLocalOrigin");
  softLinkMRMediaRemoteGetuint64_t LocalOrigin = v0;
  return v0();
}

uint64_t fsmcontroller_CopyCarModesQueue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  }
  return v1;
}

uint64_t FigStarkModeControllerCreate(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (fsm_stateObjectGetTypeID_sRegisterStateOnce != -1) {
    dispatch_once(&fsm_stateObjectGetTypeID_sRegisterStateOnce, &__block_literal_global_79);
  }
  Instance = (void *)_CFRuntimeCreateInstance();
  dispatch_time_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  CFIndex v5 = dispatch_queue_create("com.apple.mediaexperience.carmodes", v4);
  Instance[2] = v5;
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  Instance[3] = dispatch_queue_create_with_target_V2("com.apple.mediaexperience.carmodes-request", initially_inactive, v5);
  Instance[15] = CFArrayCreateMutable(v2, 0, 0);
  CFTypeID v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  Instance[10] = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  Instance[6] = CFArrayCreateMutable(v2, 0, v7);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  uint64_t v15 = 0;
  long long v14 = 0u;
  void v13[5] = 100;
  v13[3] = 0;
  v13[1] = 100;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v2, 0, v7);
  void v13[2] = Mutable;
  v13[0] = 0x6400000002;
  CFMutableArrayRef v9 = CFArrayCreateMutable(v2, 0, v7);
  void v13[6] = v9;
  v13[4] = 0x6400000002;
  uint64_t v10 = FigStarkModeControllerSetCurrentInternalMode((uint64_t)Instance, (uint64_t)v13);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFRelease(Instance);
    Instance = 0;
  }
  *a1 = Instance;
  return v10;
}

uint64_t FigStarkModeControllerSetCurrentInternalMode(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294950566;
  }
  uint64_t result = fsm_verifyResourceState(a2);
  if (!result)
  {
    uint64_t result = fsm_verifyResourceState(a2 + 32);
    if (!result)
    {
      int v5 = *(_DWORD *)(a2 + 68);
      if (*(_DWORD *)(a2 + 64))
      {
        if (!v5) {
          return 4294949811;
        }
      }
      else if (v5)
      {
        return 4294949810;
      }
      long long v6 = *(_OWORD *)a2;
      long long v7 = *(_OWORD *)(a2 + 32);
      long long v8 = *(_OWORD *)(a2 + 48);
      long long v13 = *(_OWORD *)(a2 + 16);
      long long v14 = v7;
      long long v9 = *(_OWORD *)(a2 + 64);
      long long v15 = v8;
      long long v16 = v9;
      long long v12 = v6;
      uint64_t v10 = *(NSObject **)(a1 + 16);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      _OWORD v11[2] = __FigStarkModeControllerSetCurrentInternalMode_block_invoke;
      v11[3] = &__block_descriptor_120_e5_v8__0l;
      void v11[4] = a1;
      MXDispatchSync((uint64_t)"FigStarkModeControllerSetCurrentInternalMode", (uint64_t)"FigStarkMode.m", 1029, 0, 0, v10, (uint64_t)v11);
      return 0;
    }
  }
  return result;
}

uint64_t fsm_verifyResourceState(uint64_t a1)
{
  if (!*(_DWORD *)a1) {
    return 4294949813;
  }
  if (!*(_DWORD *)(a1 + 4)) {
    return 4294950560;
  }
  if (!*(_DWORD *)(a1 + 8)) {
    return 4294950559;
  }
  CFArrayRef v2 = *(const __CFArray **)(a1 + 16);
  if (v2 && CFArrayGetCount(v2))
  {
    if (!*(_DWORD *)(a1 + 24)) {
      return 4294950558;
    }
  }
  else if (*(_DWORD *)(a1 + 24))
  {
    return 4294949812;
  }
  return 0;
}

CFTypeRef __FigStarkModeControllerSetCurrentInternalMode_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(const void **)(v2 + 80);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(a1 + 32) + 8singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  dispatch_time_t v4 = *(const void **)(v2 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(*(void *)(a1 + 32) + 4_Block_object_dispose(&STACK[0x210], 8) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 40);
  long long v5 = *(_OWORD *)(a1 + 56);
  long long v6 = *(_OWORD *)(a1 + 72);
  long long v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 96) = v7;
  *(_OWORD *)(v2 + 4_Block_object_dispose(&STACK[0x210], 8) = v5;
  *(_OWORD *)(v2 + 64) = v6;
  uint64_t v8 = *(void *)(a1 + 32);
  CFTypeRef v9 = *(CFTypeRef *)(v8 + 80);
  if (v9)
  {
    CFTypeRef v9 = CFRetain(v9);
    uint64_t v8 = *(void *)(a1 + 32);
  }
  *(void *)(v8 + 8singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = v9;
  uint64_t v10 = *(void *)(a1 + 32);
  CFTypeRef result = *(CFTypeRef *)(v10 + 48);
  if (result)
  {
    CFTypeRef result = CFRetain(result);
    uint64_t v10 = *(void *)(a1 + 32);
  }
  *(void *)(v10 + 4_Block_object_dispose(&STACK[0x210], 8) = result;
  return result;
}

void FigStarkModeControllerSetExecuteChangeHandler(void *a1, const void *a2)
{
  if (a1)
  {
    CFRetain(a1);
    dispatch_time_t v4 = _Block_copy(a2);
    long long v5 = a1[2];
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigStarkModeControllerSetExecuteChangeHandler_block_invoke;
    v6[3] = &unk_1E57C59C0;
    v6[4] = v4;
    void v6[5] = a1;
    MXDispatchAsync((uint64_t)"FigStarkModeControllerSetExecuteChangeHandler", (uint64_t)"FigStarkMode.m", 1066, 0, 0, v5, (uint64_t)v6);
  }
}

void __FigStarkModeControllerSetExecuteChangeHandler_block_invoke(uint64_t a1)
{
  _Block_release(*(const void **)(*(void *)(a1 + 40) + 112));
  uint64_t v2 = *(void **)(a1 + 40);
  v2[14] = *(void *)(a1 + 32);
  CFRelease(v2);
}

uint64_t FigStarkModeControllerAddStateChangedHandler(void *a1, NSObject *a2, const void *a3)
{
  if (!a1) {
    return 0;
  }
  if (fsm_stateChangedHandlerTokenObjectGetTypeID_sRegisterStateChangedHandlerTokenOnce != -1) {
    dispatch_once(&fsm_stateChangedHandlerTokenObjectGetTypeID_sRegisterStateChangedHandlerTokenOnce, &__block_literal_global_52_0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!a2) {
    a2 = MEMORY[0x1E4F14428];
  }
  *(_DWORD *)(Instance + 16) = FigAtomicIncrement32();
  *(void *)(Instance + 24) = a2;
  dispatch_retain(a2);
  *(void *)(Instance + 32) = _Block_copy(a3);
  CFRetain(a1);
  long long v7 = a1[2];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __FigStarkModeControllerAddStateChangedHandler_block_invoke;
  v9[3] = &__block_descriptor_48_e5_v8__0l;
  v9[4] = a1;
  void v9[5] = Instance;
  MXDispatchAsync((uint64_t)"FigStarkModeControllerAddStateChangedHandler", (uint64_t)"FigStarkMode.m", 1086, 0, 0, v7, (uint64_t)v9);
  return Instance;
}

void __FigStarkModeControllerAddStateChangedHandler_block_invoke(uint64_t a1)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1 + 32) + 120), *(const void **)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

void FigStarkModeControllerRemoveStateChangedHandler(CFTypeRef cf, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (cf && a2)
  {
    CFRetain(cf);
    dispatch_time_t v4 = *(NSObject **)(a2 + 24);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigStarkModeControllerRemoveStateChangedHandler_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = cf;
    void v6[5] = a2;
    MXDispatchAsync((uint64_t)"FigStarkModeControllerRemoveStateChangedHandler", (uint64_t)"FigStarkMode.m", 1104, 0, 0, v4, (uint64_t)v6);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void __FigStarkModeControllerRemoveStateChangedHandler_block_invoke(uint64_t a1)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  long long v5 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v5 + 16);
  v4[2] = __FigStarkModeControllerRemoveStateChangedHandler_block_invoke_2;
  void v4[3] = &__block_descriptor_48_e5_v8__0l;
  MXDispatchSync((uint64_t)"FigStarkModeControllerRemoveStateChangedHandler_block_invoke", (uint64_t)"FigStarkMode.m", 1105, 0, 0, v2, (uint64_t)v4);
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
}

void __FigStarkModeControllerRemoveStateChangedHandler_block_invoke_2(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(*(void *)(a1 + 32) + 120);
  v6.length = CFArrayGetCount(v2);
  v6.location = 0;
  FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v2, v6, *(const void **)(a1 + 40));
  if (FirstIndexOfValue != -1)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(*(void *)(a1 + 32) + 120), FirstIndexOfValue);
    dispatch_time_t v4 = *(const void **)(a1 + 40);
    CFRelease(v4);
  }
}

uint64_t _fsmcontroller_GetCurrentMode(__n128 *a1, __n128 *a2)
{
  if (!a1) {
    return 4294950566;
  }
  if (!a2) {
    return 4294949645;
  }
  if (_FigIsNotCurrentDispatchQueue()) {
    MXSimulateCrash((uint64_t)"This method should only be called from controller queue! Please file a radar against 'Media"
  }
                             "Experience Session | All'");
  fsm_getCurrentMode(a1, a2, 0);
  return 0;
}

__n128 fsm_getCurrentMode(__n128 *a1, __n128 *a2, int a3)
{
  unsigned int CurrentBorrower = fsm_getCurrentBorrower((const __CFArray *)&a1[2]);
  unsigned __int32 v7 = a1[2].n128_u32[0];
  if (CurrentBorrower) {
    unsigned int v8 = CurrentBorrower;
  }
  else {
    unsigned int v8 = a1[2].n128_u32[0];
  }
  a2->n128_u32[0] = v8;
  a2->n128_u32[1] = v7;
  if (a3)
  {
    unsigned int v9 = 2;
  }
  else
  {
    unsigned int v9 = fsm_getCurrentBorrower((const __CFArray *)&a1[4]);
    if (!v9) {
      unsigned int v9 = a1[4].n128_u32[0];
    }
  }
  unsigned __int32 v10 = a1[4].n128_u32[0];
  a2->n128_u32[2] = v9;
  a2->n128_u32[3] = v10;
  __n128 result = a1[6];
  a2[1] = result;
  return result;
}

uint64_t fsmcontroller_GetCurrentMode(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294950566;
  }
  if (!a2) {
    return 4294949645;
  }
  CFArrayRef v2 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __fsmcontroller_GetCurrentMode_block_invoke;
  void v4[3] = &__block_descriptor_48_e5_v8__0l;
  void v4[4] = a1;
  void v4[5] = a2;
  MXDispatchSync((uint64_t)"fsmcontroller_GetCurrentMode", (uint64_t)"FigStarkMode.m", 1143, 0, 0, v2, (uint64_t)v4);
  return 0;
}

uint64_t FigStarkModeControllerGetCurrentMode(uint64_t a1, uint64_t a2)
{
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
  {
    if (dword_1E9359FB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    unsigned int v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    if (v8) {
      v8(a1, a2);
    }
  }
  else
  {
    if (dword_1E9359FB0)
    {
      long long v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fsmcontroller_GetCurrentMode(a1, a2);
  }
  return 0;
}

uint64_t FigStarkModeControllerGetCurrentResourceBorrowConstraint(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  CFArrayRef v2 = *(NSObject **)(a1 + 16);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  long long v5[2] = __FigStarkModeControllerGetCurrentResourceBorrowConstraint_block_invoke;
  void v5[3] = &unk_1E57C5878;
  void v5[4] = &v6;
  void v5[5] = a2;
  void v5[6] = a1;
  MXDispatchSync((uint64_t)"FigStarkModeControllerGetCurrentResourceBorrowConstraint", (uint64_t)"FigStarkMode.m", 1181, 0, 0, v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_194E9DC80(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __FigStarkModeControllerGetCurrentResourceBorrowConstraint_block_invoke(uint64_t a1)
{
  uint64_t result = FigCFEqual();
  if (result)
  {
    uint64_t v3 = (_DWORD *)(*(void *)(a1 + 48) + 72);
  }
  else
  {
    uint64_t result = FigCFEqual();
    if (!result) {
      return result;
    }
    uint64_t v3 = (_DWORD *)(*(void *)(a1 + 48) + 40);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *v3;
  return result;
}

void FigStarkModeControllerUpdateIsVoiceAssistantActive(uint64_t a1, char a2)
{
  if (a1)
  {
    CFArrayRef v2 = *(NSObject **)(a1 + 16);
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    _OWORD v3[2] = __FigStarkModeControllerUpdateIsVoiceAssistantActive_block_invoke;
    v3[3] = &__block_descriptor_41_e5_v8__0l;
    void v3[4] = a1;
    char v4 = a2;
    MXDispatchAsync((uint64_t)"FigStarkModeControllerUpdateIsVoiceAssistantActive", (uint64_t)"FigStarkMode.m", 1223, 0, 0, v2, (uint64_t)v3);
  }
}

uint64_t __FigStarkModeControllerUpdateIsVoiceAssistantActive_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 12_Block_object_dispose(&STACK[0x210], 8) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t fsmcontroller_RequestModeChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = 0;
  long long v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  if (a1)
  {
    long long v5 = *(NSObject **)(a1 + 24);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __fsmcontroller_RequestModeChange_block_invoke;
    v8[3] = &unk_1E57C8E30;
    v8[4] = &v10;
    v8[5] = a1;
    void v8[6] = a2;
    void v8[7] = a3;
    v8[8] = a4;
    char v9 = a5;
    MXDispatchSync((uint64_t)"fsmcontroller_RequestModeChange", (uint64_t)"FigStarkMode.m", 1237, 0, 0, v5, (uint64_t)v8);
    uint64_t v6 = *((unsigned int *)v11 + 6);
  }
  else
  {
    uint64_t v6 = 4294950566;
    int v13 = -16730;
  }
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_194E9DE8C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t fsm_requestModeChange(__n128 *a1, long long *a2, const char *a3, char a4, uint64_t a5, int a6)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  __n128 v63 = 0u;
  long long v64 = 0u;
  fsm_getCurrentMode(a1, &v63, 0);
  if (!*(_DWORD *)a2 || !*((_DWORD *)a2 + 1)) {
    return 4294949813;
  }
  uint64_t result = fsm_verifyResourceChangeRequest((uint64_t)a2 + 8);
  if (!result)
  {
    char v56 = a3;
    char v55 = a4;
    CFTypeRef cf = a1;
    uint64_t result = fsm_verifyResourceChangeRequest((uint64_t)(a2 + 2));
    if (!result)
    {
      __n128 v75 = *(__n128 *)((char *)a2 + 8);
      *(void *)&long long v76 = *((void *)a2 + 3);
      CFStringRef v13 = FSMDebug_CopyFigStarkModeBorrowIDString((uint64_t)&v75);
      __n128 v75 = (__n128)a2[2];
      *(void *)&long long v76 = *((void *)a2 + 6);
      CFStringRef v14 = FSMDebug_CopyFigStarkModeBorrowIDString((uint64_t)&v75);
      if (dword_1E9359FB0)
      {
        os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v13) {
        CFRelease(v13);
      }
      if (v14) {
        CFRelease(v14);
      }
      long long v16 = FSMDebug_CopyPrettyPrintStringForModeChangeRequest((int *)a2);
      int v17 = a6;
      if (v16) {
        CFRelease(v16);
      }
      long long v18 = a1;
      if (a6)
      {
        if (dword_1E9359FB0)
        {
          uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v17 = a6;
        }
        a1[2].n128_u32[0] = 2;
        a1[4].n128_u32[0] = 2;
      }
      fsm_requestResourceModeChange(*(_DWORD *)a2, (uint64_t)a2 + 8, (uint64_t)&a1[2]);
      CFTypeRef v20 = a1 + 4;
      fsm_requestResourceModeChange(*((_DWORD *)a2 + 1), (uint64_t)(a2 + 2), (uint64_t)&a1[4]);
      fsm_printListOfBorrowers((uint64_t)&a1[2]);
      fsm_printListOfBorrowers((uint64_t)&a1[4]);
      if (!a1[8].n128_u8[0] || !FigRoutingManager_iOSIsCarPlayAuxStreamSupported())
      {
        unsigned __int32 v21 = a1[6].n128_u32[0];
        unsigned int CurrentBorrower = fsm_getCurrentBorrower((const __CFArray *)&cf[4]);
        if (!CurrentBorrower) {
          unsigned int CurrentBorrower = v20->n128_u32[0];
        }
        if (v21 != CurrentBorrower) {
          cf[6].n128_u64[0] = 0;
        }
      }
      unsigned __int32 v23 = cf[6].n128_u32[2];
      unsigned int v24 = fsm_getCurrentBorrower((const __CFArray *)&cf[4]);
      if (!v24) {
        unsigned int v24 = v20->n128_u32[0];
      }
      if (v23 != v24) {
        cf[6].n128_u32[2] = 0;
      }
      int v25 = *((_DWORD *)a2 + 14);
      if (v25)
      {
        if (v25 == -1)
        {
          if (cf[6].n128_u32[0] != *((_DWORD *)a2 + 1)) {
            goto LABEL_38;
          }
          unsigned __int32 v26 = 0;
          cf[6].n128_u32[0] = 0;
          goto LABEL_37;
        }
        int v27 = *((_DWORD *)a2 + 1);
        unsigned int v28 = fsm_getCurrentBorrower((const __CFArray *)&cf[4]);
        if (!v28) {
          unsigned int v28 = v20->n128_u32[0];
        }
        if (v27 == v28 || FigRoutingManager_iOSIsCarPlayAuxStreamSupported())
        {
          cf[6].n128_u32[0] = *((_DWORD *)a2 + 1);
          unsigned __int32 v26 = *((_DWORD *)a2 + 14);
LABEL_37:
          cf[6].n128_u32[1] = v26;
        }
      }
LABEL_38:
      int v29 = *((_DWORD *)a2 + 15);
      if (v29 == 1)
      {
        int v31 = *((_DWORD *)a2 + 1);
        unsigned int v32 = fsm_getCurrentBorrower((const __CFArray *)&cf[4]);
        if (!v32) {
          unsigned int v32 = v20->n128_u32[0];
        }
        if (v31 == v32)
        {
          unsigned __int32 v30 = *((_DWORD *)a2 + 1);
          goto LABEL_46;
        }
      }
      else if (v29 == -1 && cf[6].n128_u32[2] == *((_DWORD *)a2 + 1))
      {
        unsigned __int32 v30 = 0;
LABEL_46:
        cf[6].n128_u32[2] = v30;
      }
      int v33 = *((_DWORD *)a2 + 16);
      if (v33 == 1)
      {
        cf[6].n128_u32[3] = *((_DWORD *)a2 + 1);
      }
      else if (v33 == -1 && cf[6].n128_u32[3] == *((_DWORD *)a2 + 1))
      {
        cf[6].n128_u32[3] = 0;
      }
      fsm_getCurrentMode(cf, (__n128 *)a5, v17);
      float v34 = FSMDebug_CopyPrettyPrintStringForStarkModeState((int *)a5);
      if (v34) {
        CFRelease(v34);
      }
      if (v56)
      {
        float v34 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v56, 0x8000100u);
        float v36 = v34;
      }
      else
      {
        float v36 = 0;
      }
      __n128 v61 = v63;
      long long v62 = v64;
      __n128 type = *(__n128 *)a5;
      long long v60 = *(_OWORD *)(a5 + 16);
      long long v37 = a2[3];
      long long v70 = a2[2];
      long long v71 = v37;
      uint64_t v72 = *((void *)a2 + 8);
      long long v38 = a2[1];
      long long v68 = *a2;
      long long v69 = v38;
      CFTypeRef v67 = 0;
      if (MX_FeatureFlags_IsAirPlayDaemonEnabled(v34, v35))
      {
        if (dword_1E9359FB0)
        {
          unsigned int v66 = 0;
          os_log_type_t v65 = OS_LOG_TYPE_DEFAULT;
          float v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v40 = v66;
          if (os_log_type_enabled(v39, v65)) {
            unsigned int v41 = v40;
          }
          else {
            unsigned int v41 = v40 & 0xFFFFFFFE;
          }
          if (v41)
          {
            int v73 = 136315138;
            unsigned int v74 = "fsm_postStateChangedOnAllHandlers";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        __n128 v75 = type;
        long long v76 = v60;
        FigStarkModeCreateDictionaryRepresentation(&v75, &v67);
        CFTypeRef v45 = CMSMUtility_CopyStarkEndpointCentral();
        if (v45)
        {
          CFArrayRef v46 = v45;
          FigEndpointExtendedGetClassID();
          uint64_t v57 = v46;
          if (CMBaseObjectIsMemberOfClass())
          {
            CFTypeRef v47 = CFRetain(v46);
            long long v48 = v47;
            if (v47)
            {
              a4 = v55;
              if (_FigEndpointCentralSendCommand((uint64_t)v47, @"modesChanged", (uint64_t)v67, 0, 0))
              {
LABEL_86:
                CFRelease(v48);
LABEL_87:
                if (v67)
                {
                  CFRelease(v67);
                  CFTypeRef v67 = 0;
                }
                if (v57) {
                  CFRelease(v57);
                }
                if (v36) {
                  CFRelease(v36);
                }
                return 0;
              }
            }
            else
            {
              a4 = v55;
            }
          }
          else
          {
            a4 = v55;
            long long v48 = 0;
          }
LABEL_82:
          if (CFArrayGetCount((CFArrayRef)cf[7].n128_u64[1]) >= 1)
          {
            CFIndex v51 = 0;
            do
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v18[7].n128_u64[1], v51);
              int v53 = *((_DWORD *)ValueAtIndex + 4);
              CFRetain(cf);
              CFRetain(ValueAtIndex);
              uint64_t v54 = *((void *)ValueAtIndex + 3);
              v75.n128_u64[0] = MEMORY[0x1E4F143A8];
              v75.n128_u64[1] = 3221225472;
              *(void *)&long long v76 = __fsm_postStateChanged_block_invoke;
              *((void *)&v76 + 1) = &__block_descriptor_189_e5_v8__0l;
              int v77 = cf;
              unsigned int v78 = ValueAtIndex;
              int v84 = v53;
              long long v18 = cf;
              __n128 v85 = v61;
              long long v86 = v62;
              __n128 v87 = type;
              long long v88 = v60;
              uint64_t v83 = v72;
              long long v81 = v70;
              long long v82 = v71;
              long long v79 = v68;
              long long v80 = v69;
              char v89 = a4;
              MXDispatchAsync((uint64_t)"fsm_postStateChanged", (uint64_t)"FigStarkMode.m", 162, 0, 0, v54, (uint64_t)&v75);
              ++v51;
            }
            while (CFArrayGetCount((CFArrayRef)cf[7].n128_u64[1]) > v51);
          }
          if (!v48) {
            goto LABEL_87;
          }
          goto LABEL_86;
        }
      }
      else
      {
        if (dword_1E9359FB0)
        {
          unsigned int v66 = 0;
          os_log_type_t v65 = OS_LOG_TYPE_DEFAULT;
          CFRange v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v43 = v66;
          if (os_log_type_enabled(v42, v65)) {
            unsigned int v44 = v43;
          }
          else {
            unsigned int v44 = v43 & 0xFFFFFFFE;
          }
          if (v44)
          {
            int v73 = 136315138;
            unsigned int v74 = "fsm_postStateChangedOnAllHandlers";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        unint64_t v49 = cf[7].n128_u64[0];
        if (v49)
        {
          uint64_t v50 = *(void (**)(unint64_t, __n128 *))(v49 + 16);
          __n128 v75 = type;
          long long v76 = v60;
          v50(v49, &v75);
        }
      }
      long long v48 = 0;
      uint64_t v57 = 0;
      goto LABEL_82;
    }
  }
  return result;
}

uint64_t FigStarkModeControllerRequestModeChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
  {
    if (dword_1E9359FB0)
    {
      os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFStringRef v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16);
    if (v14) {
      v14(a1, a2, a3, a4, a5);
    }
  }
  else
  {
    if (dword_1E9359FB0)
    {
      long long v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fsmcontroller_RequestModeChange(a1, a2, a3, a4, a5);
  }
  return 0;
}

void fsmcontroller_RequestModeChangeAsync(void *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a1)
  {
    long long v8 = a2[3];
    long long v22 = a2[2];
    long long v23 = v8;
    uint64_t v24 = *((void *)a2 + 8);
    long long v9 = a2[1];
    long long v20 = *a2;
    long long v21 = v9;
    if (a3)
    {
      uint64_t v10 = malloc_type_malloc(0x40uLL, 0x3F603644uLL);
      __strlcpy_chk();
    }
    else
    {
      uint64_t v10 = 0;
    }
    CFRetain(a1);
    long long v11 = a1[3];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __fsmcontroller_RequestModeChangeAsync_block_invoke;
    _OWORD v12[3] = &unk_1E57CBAA0;
    long long v15 = v22;
    long long v16 = v23;
    long long v14 = v21;
    long long v13 = v20;
    uint64_t v17 = v24;
    long long v18 = v10;
    char v19 = a5;
    v12[4] = a4;
    void v12[5] = a1;
    MXDispatchAsync((uint64_t)"fsmcontroller_RequestModeChangeAsync", (uint64_t)"FigStarkMode.m", 1285, 0, 0, v11, (uint64_t)v12);
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
    (*(void (**)(uint64_t, uint64_t, long long *))(a4 + 16))(a4, 4294950566, &v20);
  }
}

uint64_t fsmcontroller_RequestInitialModeChange(uint64_t a1, int *a2, int *a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = 0;
  unsigned __int32 v30 = &v29;
  uint64_t v31 = 0x2020000000;
  int v32 = 0;
  if (a1)
  {
    if (a4)
    {
      long long v11 = a4[3];
      long long v26 = a4[2];
      long long v27 = v11;
      uint64_t v28 = *((void *)a4 + 8);
      long long v12 = a4[1];
      long long v24 = *a4;
      long long v25 = v12;
      fsm_validateInitialModeForResource(a2, (uint64_t)&v24, 0);
      fsm_validateInitialModeForResource(a3, (uint64_t)&v24, 1);
      long long v13 = *(NSObject **)(a1 + 16);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      long long v16[2] = __fsmcontroller_RequestInitialModeChange_block_invoke;
      v16[3] = &unk_1E57CBAC8;
      void v16[6] = a2;
      void v16[7] = a3;
      v16[4] = &v29;
      v16[5] = a1;
      long long v19 = v26;
      long long v20 = v27;
      long long v18 = v25;
      long long v17 = v24;
      uint64_t v21 = v28;
      uint64_t v22 = a5;
      uint64_t v23 = a6;
      MXDispatchSync((uint64_t)"fsmcontroller_RequestInitialModeChange", (uint64_t)"FigStarkMode.m", 1473, 0, 0, v13, (uint64_t)v16);
    }
    dispatch_activate(*(dispatch_object_t *)(a1 + 24));
    uint64_t v14 = *((unsigned int *)v30 + 6);
  }
  else
  {
    uint64_t v14 = 4294950566;
    int v32 = -16730;
  }
  _Block_object_dispose(&v29, 8);
  return v14;
}

void sub_194E9EF48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

int *fsm_validateInitialModeForResource(int *result, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = 8;
  }
  if (a3) {
    uint64_t v6 = a2 + 32;
  }
  else {
    uint64_t v6 = a2 + 8;
  }
  if (result)
  {
    uint64_t v7 = result;
    int v8 = *result;
    if (*result)
    {
      uint64_t v9 = 4 * (a3 != 0);
      if (dword_1E9359FB0)
      {
        os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        uint64_t result = (int *)fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v8 = *v7;
      }
      if (v8 == 1)
      {
        if (!v7[1])
        {
          if (dword_1E9359FB0)
          {
            long long v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
            uint64_t result = (int *)fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v7[1] = 100;
        }
        if (!v7[2])
        {
          if (dword_1E9359FB0)
          {
            uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
            uint64_t result = (int *)fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v7[2] = 100;
        }
      }
      if (*v7 == 2)
      {
        if ((*(_DWORD *)(a2 + v5) & 0xFFFFFFFE) != 0x14) {
          goto LABEL_40;
        }
        if (a3)
        {
          if (*(_DWORD *)(a2 + v9) == 1)
          {
            *(_DWORD *)(a2 + 64) = 0;
            *(void *)(a2 + 56) = 0;
          }
        }
        *(_DWORD *)(a2 + v9) = 2;
      }
      else
      {
        if (*v7 != 1) {
          goto LABEL_40;
        }
        int v15 = *(_DWORD *)(a2 + v5);
        if (v15 != 21)
        {
          if (v15 == 20)
          {
            *(_DWORD *)(v6 + 16) = v7[1];
            int v16 = v7[2];
            goto LABEL_39;
          }
          if (v15) {
            goto LABEL_40;
          }
        }
        *(void *)(a2 + v5) = 0x6400000014;
      }
      int v16 = 100;
      *(_DWORD *)(v6 + 16) = 100;
LABEL_39:
      *(_DWORD *)(v6 + 2singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = v16;
LABEL_40:
      if (!dword_1E9359FB0) {
        return result;
      }
      goto LABEL_41;
    }
  }
  int v11 = *(_DWORD *)(a2 + v5);
  if (v11 == 21 || v11 == 0)
  {
    *(void *)(a2 + v5) = 0x6400000014;
    *(void *)(v6 + 16) = 0x6400000064;
    if (dword_1E9359FB0)
    {
LABEL_41:
      long long v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      return (int *)fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t FigStarkModeControllerRequestInitialModeChange(uint64_t a1, int *a2, int *a3, long long *a4, uint64_t a5, uint64_t a6)
{
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
  {
    if (dword_1E9359FB0)
    {
      os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    int v16 = *(uint64_t (**)(uint64_t, int *, int *, long long *, uint64_t, uint64_t))(v15 + 24);
    if (v16) {
      return v16(a1, a2, a3, a4, a5, a6);
    }
    else {
      return 4294954514;
    }
  }
  else
  {
    if (dword_1E9359FB0)
    {
      long long v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return fsmcontroller_RequestInitialModeChange(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t FigStarkModeCopyController(CFTypeRef *a1, uint64_t a2)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  cf[0] = 0;
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
  {
    uint64_t result = FigStarkModeControllerRemoteCreate(*MEMORY[0x1E4F1CF80], 0, cf);
LABEL_8:
    *a1 = cf[0];
    return result;
  }
  if (dword_1E9359FB0)
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = CMSMUtility_CopyFigStarkModeController(cf);
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v6 = result;
  FigSignalErrorAt();
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v6;
}

uint64_t FigStarkModeControllerGetClassID()
{
  if (FigStarkModeControllerGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&FigStarkModeControllerGetClassID_sRegisterOnce, &FigStarkModeControllerGetClassID_sClassID, (dispatch_function_t)starkModeController_getClassID);
  }
  return FigStarkModeControllerGetClassID_sClassID;
}

uint64_t starkModeController_getClassID(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&starkModeController_getClassID_sClassDesc, ClassID, 1, a1);
}

uint64_t FigStarkModeControllerGetTypeID()
{
  if (FigStarkModeControllerGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&FigStarkModeControllerGetClassID_sRegisterOnce, &FigStarkModeControllerGetClassID_sClassID, (dispatch_function_t)starkModeController_getClassID);
  }
  uint64_t v0 = FigStarkModeControllerGetClassID_sClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t FigStarkModeControllerXPCCreate(uint64_t a1, int a2, void *a3)
{
  if (a3)
  {
    if (FigStarkModeControllerGetClassID_sRegisterOnce != -1) {
      dispatch_once_f(&FigStarkModeControllerGetClassID_sRegisterOnce, &FigStarkModeControllerGetClassID_sClassID, (dispatch_function_t)starkModeController_getClassID);
    }
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      *(_DWORD *)CMBaseObjectGetDerivedStorage() = a2;
      *a3 = 0;
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  return v5;
}

void FigStarkModeCreateDictionaryRepresentation(_DWORD *a1, void *a2)
{
  if (a2)
  {
    long long context = (void *)MEMORY[0x1997179E0]();
    id v28 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    int v4 = a1[6];
    if (v4 == 1) {
      uint64_t v5 = 2;
    }
    else {
      uint64_t v5 = v4 == 2;
    }
    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", 2), @"appStateID");
    objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", v5), @"entity");
    [v3 addObject:v6];

    int v7 = a1[4];
    int v8 = a1[5];
    if (v7 == 1) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = v7 == 2;
    }
    if (v8 == 11) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = -1;
    }
    if (v8 == 10) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    id v12 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    objc_msgSend(v12, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", 1), @"appStateID");
    objc_msgSend(v12, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", v9), @"entity");
    objc_msgSend(v12, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", v11), @"speechMode");
    [v3 addObject:v12];

    int v13 = a1[7];
    if (v13 == 1) {
      uint64_t v14 = 2;
    }
    else {
      uint64_t v14 = v13 == 2;
    }
    id v15 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    objc_msgSend(v15, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", 3), @"appStateID");
    objc_msgSend(v15, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", v14), @"entity");
    [v3 addObject:v15];

    id v16 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    int v17 = a1[2];
    int v18 = a1[3];
    if (v17 == 1) {
      uint64_t v19 = 2;
    }
    else {
      uint64_t v19 = v17 == 2;
    }
    if (v18 == 1) {
      uint64_t v20 = 2;
    }
    else {
      uint64_t v20 = v18 == 2;
    }
    id v21 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    objc_msgSend(v21, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", 2), @"resourceID");
    objc_msgSend(v21, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", v19), @"entity");
    objc_msgSend(v21, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", v20), @"permanentEntity");
    [v16 addObject:v21];

    int v22 = a1[1];
    if (*a1 == 1) {
      uint64_t v23 = 2;
    }
    else {
      uint64_t v23 = *a1 == 2;
    }
    if (v22 == 1) {
      uint64_t v24 = 2;
    }
    else {
      uint64_t v24 = v22 == 2;
    }
    id v25 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    objc_msgSend(v25, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", 1), @"resourceID");
    objc_msgSend(v25, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", v23), @"entity");
    objc_msgSend(v25, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", v24), @"permanentEntity");
    [v16 addObject:v25];

    [v28 setObject:v3 forKey:@"appStates"];
    [v28 setObject:v16 forKey:@"resources"];
    *a2 = v28;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t __fsm_stateObjectGetTypeID_block_invoke()
{
  fsm_stateObjectGetTypeID_sStateClass = 0;
  unk_1E93599B0 = "FigStarkModeControllerRefObject";
  qword_1E93599B8 = (uint64_t)fsm_stateInit;
  unk_1E93599C0 = 0;
  qword_1E93599C8 = (uint64_t)fsm_stateFinalize;
  unk_1E93599D0 = 0u;
  unk_1E93599E0 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  fsm_stateObjectGetTypeID_sStateID = result;
  return result;
}

double fsm_stateInit(uint64_t a1)
{
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x210], 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fsm_stateFinalize(uint64_t a1)
{
  dispatch_activate(*(dispatch_object_t *)(a1 + 24));
  CFArrayRef v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 16) = 0;
  }
  id v3 = *(NSObject **)(a1 + 24);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 24) = 0;
  }
  int v4 = *(const void **)(a1 + 120);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 12singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
  }
  _Block_release(*(const void **)(a1 + 112));
  uint64_t v5 = *(const void **)(a1 + 80);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 8singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = 0;
  }
  id v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = 0;
  }
}

uint64_t __fsm_stateChangedHandlerTokenObjectGetTypeID_block_invoke()
{
  fsm_stateChangedHandlerTokenObjectGetTypeID_sStateChangedHandlerTokenClass = 0;
  *(void *)algn_1E9359A28 = "FigStarkModeStateChangedHandlerTokenRefObject";
  qword_1E9359A30 = (uint64_t)fsm_stateChangedHandlerTokenInit;
  unk_1E9359A38 = 0;
  qword_1E9359A40 = (uint64_t)fsm_stateChangedHandlerTokenFinalize;
  *(_OWORD *)algn_1E9359A48 = 0u;
  *(_OWORD *)&algn_1E9359A48[16] = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  fsm_stateChangedHandlerTokenObjectGetTypeID_sStateChangedHandlerTokenID = result;
  return result;
}

void *fsm_stateChangedHandlerTokenInit(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void fsm_stateChangedHandlerTokenFinalize(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 0;
  dispatch_release(*(dispatch_object_t *)(a1 + 24));
  CFArrayRef v2 = *(const void **)(a1 + 32);
  _Block_release(v2);
}

CFArrayRef fsm_getCurrentBorrower(const __CFArray *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    uint64_t result = (const __CFArray *)*((void *)result + 2);
    if (result)
    {
      CFIndex Count = CFArrayGetCount(result);
      if (Count >= 1)
      {
        CFIndex v3 = Count;
        for (CFIndex i = 0; i != v3; ++i)
        {
          CFArrayGetValueAtIndex(*((CFArrayRef *)v1 + 2), i);
          FigCFDictionaryGetBooleanIfPresent();
        }
      }
      return 0;
    }
  }
  return result;
}

void fsm_requestResourceModeChange(int a1, uint64_t a2, uint64_t a3)
{
  switch(*(_DWORD *)a2)
  {
    case 0x14:
      unsigned int CurrentBorrower = fsm_getCurrentBorrower((const __CFArray *)a3);
      if (!CurrentBorrower || CurrentBorrower == a1)
      {
        if (*(_DWORD *)a3 == a1) {
          int v7 = 0;
        }
        else {
          int v7 = *(_DWORD *)(a3 + 4);
        }
      }
      else
      {
        int v7 = *(_DWORD *)(a3 + 24);
      }
      if (*(_DWORD *)(a2 + 4) >= v7)
      {
        *(_DWORD *)a3 = a1;
        *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x210], 8) = *(_DWORD *)(a2 + 20);
        *(_DWORD *)(a3 + 24) = 0;
        int v17 = *(__CFArray **)(a3 + 16);
        if (v17)
        {
          CFArrayRemoveAllValues(v17);
        }
      }
      else if (dword_1E9359FB0)
      {
        os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return;
    case 0x15:
      if (*(_DWORD *)a3 == a1) {
        *(void *)(a3 + 4) = 0x6400000064;
      }
      return;
    case 0x16:
      unsigned int v8 = fsm_getCurrentBorrower((const __CFArray *)a3);
      if (!v8)
      {
        if (*(_DWORD *)a3 != a1)
        {
          uint64_t v9 = (int *)(a3 + 8);
          goto LABEL_33;
        }
LABEL_23:
        int v15 = 0;
        goto LABEL_34;
      }
      if (v8 == a1) {
        goto LABEL_23;
      }
      uint64_t v9 = (int *)(a3 + 24);
LABEL_33:
      int v15 = *v9;
LABEL_34:
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFNumberRef SInt32 = (const void *)FigCFNumberCreateSInt32();
      uint64_t v20 = (const void *)FigCFNumberCreateSInt32();
      CFDictionarySetValue(Mutable, @"BorrowerEntity", SInt32);
      CFDictionarySetValue(Mutable, @"UnborrowConstraint", v20);
      if (*(void *)(a2 + 8))
      {
        FigCFDictionarySetValue();
      }
      else if (dword_1E9359FB0)
      {
        id v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_DWORD *)(a2 + 4) >= v15)
      {
        CFDictionarySetValue(Mutable, @"BorrowSucceeded", (const void *)*MEMORY[0x1E4F1CFD0]);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(a2 + 16);
      }
      else
      {
        CFDictionarySetValue(Mutable, @"BorrowSucceeded", (const void *)*MEMORY[0x1E4F1CFC8]);
        if (dword_1E9359FB0)
        {
          int v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a3 + 16), 0, Mutable);
      if (SInt32) {
        CFRelease(SInt32);
      }
      if (v20) {
        CFRelease(v20);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      return;
    case 0x17:
      if (*(void *)(a2 + 8))
      {
        CFArrayRef v10 = *(const __CFArray **)(a3 + 16);
        if (v10)
        {
          CFIndex Count = CFArrayGetCount(v10);
          CFIndex v12 = Count - 1;
          if (Count >= 1)
          {
            while (1)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), v12);
              FigCFDictionaryGetInt32IfPresent();
              FigCFDictionaryGetInt32IfPresent();
              if (ValueAtIndex) {
                CFDictionaryGetValue(ValueAtIndex, @"BorrowID");
              }
              if (!a1 && FigCFEqual()) {
                break;
              }
              if (--v12 == -1)
              {
                if (dword_1E9359FB0)
                {
                  uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                goto LABEL_50;
              }
            }
            if (dword_1E9359FB0)
            {
              uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a3 + 16), v12);
          }
        }
      }
      else
      {
LABEL_50:
        fsm_requestResourceModeChangeUnborrowWithoutBorrowID(a1, a3);
      }
      CFArrayRef v24 = *(const __CFArray **)(a3 + 16);
      if (!v24 || !CFArrayGetCount(v24))
      {
        *(_DWORD *)(a3 + 24) = 0;
        return;
      }
      CFArrayRef v25 = *(const __CFArray **)(a3 + 16);
      if (v25)
      {
        CFIndex v26 = CFArrayGetCount(v25);
        if (v26 < 1)
        {
          if (v26) {
            return;
          }
        }
        else
        {
          for (CFIndex i = 0; i != v26; ++i)
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), i);
            FigCFDictionaryGetBooleanIfPresent();
          }
        }
      }
      id v28 = (__CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), 0);
      FigCFDictionaryGetInt32IfPresent();
      CFDictionarySetValue(v28, @"BorrowSucceeded", (const void *)*MEMORY[0x1E4F1CFD0]);
      *(_DWORD *)(a3 + 24) = 0;
      return;
    default:
      return;
  }
}

CFIndex fsm_printListOfBorrowers(uint64_t a1)
{
  CFIndex result = *(void *)(a1 + 16);
  if (result)
  {
    CFIndex result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      CFIndex v3 = result;
      for (CFIndex i = 0; i != v3; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
        CFDictionaryGetValue(ValueAtIndex, @"BorrowID");
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        CFIndex result = FigCFDictionaryGetBooleanIfPresent();
        if (dword_1E9359FB0)
        {
          os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          CFIndex result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  return result;
}

uint64_t fsm_verifyResourceChangeRequest(uint64_t a1)
{
  switch(*(_DWORD *)a1)
  {
    case 0x14:
      int v1 = *(_DWORD *)(a1 + 4);
      if (!v1) {
        return 4294950564;
      }
      int v2 = *(_DWORD *)(a1 + 16);
      if (v2)
      {
        int v3 = *(_DWORD *)(a1 + 20);
        if (v3) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = 4294950559;
        }
        if (v1 == 100 && (v2 != 100 || v3 != 100)) {
          return 4294950557;
        }
      }
      else
      {
        if (v1 == 100) {
          return 4294950557;
        }
        return 4294950560;
      }
      return result;
    case 0x15:
      if (!*(_DWORD *)(a1 + 4))
      {
        BOOL v5 = *(void *)(a1 + 16) == 0;
        unsigned int v6 = -17480;
        goto LABEL_27;
      }
      return 4294950562;
    case 0x16:
      int v7 = *(_DWORD *)(a1 + 4);
      if (!v7) {
        return 4294950563;
      }
      int v8 = *(_DWORD *)(a1 + 16);
      if (v8)
      {
        if (*(_DWORD *)(a1 + 20)) {
          unsigned int v9 = -17482;
        }
        else {
          unsigned int v9 = 0;
        }
      }
      else
      {
        unsigned int v9 = -16738;
      }
      if (v8 == 100) {
        unsigned int v10 = v9;
      }
      else {
        unsigned int v10 = -16738;
      }
      if (v7 == 100) {
        return v10;
      }
      else {
        return v9;
      }
    case 0x17:
      if (!*(_DWORD *)(a1 + 4))
      {
        BOOL v5 = *(void *)(a1 + 16) == 0;
        unsigned int v6 = -17481;
        goto LABEL_27;
      }
      return 4294950561;
    default:
      if (*(_DWORD *)a1) {
        return 4294950565;
      }
      BOOL v5 = (*(void *)a1 | *(void *)(a1 + 8) | *(void *)(a1 + 16)) == 0;
      unsigned int v6 = -17487;
LABEL_27:
      if (v5) {
        return 0;
      }
      else {
        return v6;
      }
  }
}

void fsm_requestResourceModeChangeUnborrowWithoutBorrowID(int a1, uint64_t a2)
{
  CFArrayRef v4 = *(const __CFArray **)(a2 + 16);
  if (v4) {
    CFIndex Count = CFArrayGetCount(v4);
  }
  else {
    CFIndex Count = 0;
  }
  while (Count-- >= 1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), Count);
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    if (!a1)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a2 + 16), Count);
      return;
    }
  }
}

void __fsm_postStateChanged_block_invoke(uint64_t a1)
{
  uint64_t v23 = 0;
  CFArrayRef v24 = &v23;
  uint64_t v25 = 0x2020000000;
  char v26 = 0;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  long long v2 = *(_OWORD *)(a1 + 32);
  int v3 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v20[2] = __fsm_postStateChanged_block_invoke_2;
  v20[3] = &unk_1E57C6240;
  long long v21 = v2;
  int v22 = *(_DWORD *)(a1 + 120);
  v20[4] = &v23;
  MXDispatchSync((uint64_t)"fsm_postStateChanged_block_invoke", (uint64_t)"FigStarkMode.m", 164, 0, 0, v3, (uint64_t)v20);
  if (*((unsigned char *)v24 + 24))
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 32);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 188);
    unsigned int v9 = *(void (**)(uint64_t, _OWORD *, _OWORD *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16);
    long long v10 = *(_OWORD *)(a1 + 140);
    v19[0] = *(_OWORD *)(a1 + 124);
    v19[1] = v10;
    long long v11 = *(_OWORD *)(a1 + 172);
    v18[0] = *(_OWORD *)(a1 + 156);
    v18[1] = v11;
    long long v12 = *(_OWORD *)(a1 + 96);
    long long v16[2] = *(_OWORD *)(a1 + 80);
    v16[3] = v12;
    uint64_t v17 = *(void *)(a1 + 112);
    long long v13 = *(_OWORD *)(a1 + 64);
    v16[0] = *(_OWORD *)(a1 + 48);
    v16[1] = v13;
    v9(v7, v19, v18, v16, v8, v4, v5, v6);
  }
  uint64_t v14 = *(const void **)(a1 + 40);
  if (v14) {
    CFRelease(v14);
  }
  int v15 = *(const void **)(a1 + 32);
  if (v15) {
    CFRelease(v15);
  }
  _Block_object_dispose(&v23, 8);
}

void sub_194EA188C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

CFIndex __fsm_postStateChanged_block_invoke_2(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(*(void *)(a1 + 40) + 120);
  v4.length = CFArrayGetCount(v2);
  v4.location = 0;
  CFIndex result = CFArrayGetFirstIndexOfValue(v2, v4, *(const void **)(a1 + 48));
  if (result != -1 && *(_DWORD *)(*(void *)(a1 + 48) + 16) == *(_DWORD *)(a1 + 56)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

CFStringRef starkModeController_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigStarkModeController %p]", a1);
}

uint64_t mxFigStarkModeController_Finalize(uint64_t a1)
{
  if (a1)
  {
    return CMBaseObjectGetDerivedStorage();
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

__CFString *mxFigStarkModeController_CopyDebugDescription(const void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  if (a1)
  {
    uint64_t v6 = *(unsigned int *)CMBaseObjectGetDerivedStorage();
    CFStringAppendFormat(Mutable, 0, @"<FigStarkModeController %d>", v6);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFStringAppendFormat(Mutable, 0, @"<FigStarkModeControllerRef NULL>");
  }
  return Mutable;
}

uint64_t mxFigStarkModeController_GetCurrentMode(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950566;
  }
  uint64_t v3 = CMSMUtility_CopyFigStarkModeController(&cf);
  if (v3)
  {
    uint64_t CurrentMode = v3;
    FigSignalErrorAt();
  }
  else
  {
    uint64_t CurrentMode = fsmcontroller_GetCurrentMode((uint64_t)cf, a2);
  }
  if (cf) {
    CFRelease(cf);
  }
  return CurrentMode;
}

uint64_t mxFigStarkModeController_RequestModeChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a1)
  {
    CFTypeRef cf = 0;
    uint64_t v9 = CMSMUtility_CopyFigStarkModeController(&cf);
    if (v9)
    {
      uint64_t v10 = v9;
      FigSignalErrorAt();
    }
    else
    {
      uint64_t v10 = fsmcontroller_RequestModeChange((uint64_t)cf, a2, a3, a4, a5);
    }
  }
  else
  {
    uint64_t v10 = 4294950566;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t mxFigStarkModeController_RequestInitialModeChange(uint64_t a1, int *a2, int *a3, long long *a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    CFTypeRef cf = 0;
    uint64_t v11 = CMSMUtility_CopyFigStarkModeController(&cf);
    if (v11)
    {
      uint64_t v12 = v11;
      FigSignalErrorAt();
    }
    else
    {
      uint64_t v12 = fsmcontroller_RequestInitialModeChange((uint64_t)cf, a2, a3, a4, a5, a6);
    }
  }
  else
  {
    uint64_t v12 = 4294950566;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

void FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(void *a1, void *a2, int a3)
{
  CFDictionaryRef theDict = 0;
  FigRoutingManagerContextUtilities_CopyNonControlPickedContexts((uint64_t)&theDict);
  int64_t Count = CFDictionaryGetCount(theDict);
  uint64_t v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
  CFDictionaryGetKeysAndValues(theDict, v7, 0);
  if (Count >= 1)
  {
    uint64_t v19 = a1;
    uint64_t v20 = a2;
    uint64_t v8 = *MEMORY[0x1E4F21048];
    uint64_t v9 = *MEMORY[0x1E4F1CF80];
    uint64_t v10 = v7;
    while (1)
    {
      uint64_t v11 = *v10;
      CFTypeRef v22 = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v11, 0, (uint64_t)&v22);
      CFTypeRef cf = 0;
      if (v22)
      {
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v14 = v13 ? v13 : 0;
        int v15 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v14 + 48);
        if (v15) {
          v15(CMBaseObject, v8, v9, &cf);
        }
      }
      if (FigCFEqual()) {
        break;
      }
      int v16 = FigCFEqual();
      if (!a3)
      {
        if (v16) {
          break;
        }
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v22) {
        CFRelease(v22);
      }
      ++v10;
      if (!--Count) {
        goto LABEL_31;
      }
    }
    if (v19)
    {
      CFTypeRef v17 = v22;
      if (v22) {
        CFTypeRef v17 = CFRetain(v22);
      }
      *uint64_t v19 = v17;
    }
    if (v20)
    {
      if (v11) {
        CFTypeRef v18 = CFRetain(v11);
      }
      else {
        CFTypeRef v18 = 0;
      }
      *uint64_t v20 = v18;
    }
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_31;
  }
  if (v7) {
LABEL_31:
  }
    free(v7);
  if (theDict) {
    CFRelease(theDict);
  }
}

BOOL FigRoutingManagerUtilities_IsSystemAudioRoutingToDeviceID(const __CFString *a1)
{
  CFTypeRef v10 = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v10);
  CFTypeRef v9 = 0;
  FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint((uint64_t)v10, &v9);
  if (v9)
  {
    CFTypeRef cf = 0;
  }
  else
  {
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v10, 0, (uint64_t)&v9);
    CFTypeRef cf = 0;
    if (!v9) {
      goto LABEL_9;
    }
  }
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
  if (v5) {
    v5(CMBaseObject, *MEMORY[0x1E4F20E38], *MEMORY[0x1E4F1CF80], &cf);
  }
LABEL_9:
  BOOL v6 = FigCFEqual() || MXCFStringHasCaseInsensitivePrefix(a1, (CFStringRef)cf);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v10)
  {
    CFRelease(v10);
    CFTypeRef v10 = 0;
  }
  if (v9) {
    CFRelease(v9);
  }
  return v6;
}

uint64_t FigRoutingManagerUtilities_IsCurrentRouteHandoff()
{
  return *((unsigned __int8 *)FigRoutingManagerGetSharedManager() + 24);
}

unsigned char *FigRoutingManagerUtilities_UpdateIsRoutedToHandoff(char a1)
{
  CFIndex result = FigRoutingManagerGetSharedManager();
  result[24] = a1;
  return result;
}

BOOL FigRoutingManagerUtilities_DidRouteChangeToBuiltIn(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v3 + 48);
  if (v5)
  {
    v5(CMBaseObject, 0x1EE5F4288, *MEMORY[0x1E4F1CF80], &cf);
    CFNumberRef v6 = (const __CFNumber *)cf;
  }
  else
  {
    CFNumberRef v6 = 0;
  }
  unsigned int PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(v6);
  BOOL v4 = PortFromCFNumber == 1886613611 || PortFromCFNumber == 1886545251;
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

BOOL FigRoutingManagerUtilities_IsSystemAudioRouteNull()
{
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  BOOL IsContextRoutedToNull = FigRoutingManagerUtilities_IsContextRoutedToNull((uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  return IsContextRoutedToNull;
}

BOOL FigRoutingManagerUtilities_IsContextRoutedToNull(uint64_t a1)
{
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints(a1, (uint64_t)&theArray);
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (theArray) {
      CFRelease(theArray);
    }
  }
  else
  {
    CFIndex Count = 0;
  }
  return Count == 0;
}

BOOL FigRoutingManagerUtilities_IsSystemAudioRouteAirPlayLowLatency()
{
  CFTypeRef v3 = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v3);
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v3, 0, (uint64_t)&cf);
  BOOL IsEndpointLowLatencyAirPlay = FigRoutingManagerIsEndpointLowLatencyAirPlay((uint64_t)cf);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v3) {
    CFRelease(v3);
  }
  return IsEndpointLowLatencyAirPlay;
}

uint64_t FigRoutingManagerUtilities_CopySidePlayEndpoints()
{
  uint64_t v5 = 0;
  uint64_t result = FigRoutingManagerGetEndpointManager(*MEMORY[0x1E4F20658]);
  if (result)
  {
    uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    BOOL v4 = *(void (**)(uint64_t, void, void, uint64_t *))(v3 + 48);
    if (v4)
    {
      v4(CMBaseObject, *MEMORY[0x1E4F20608], *MEMORY[0x1E4F1CF80], &v5);
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL FigRoutingManagerUtilities_IsSystemAudioRouteWHAGroupableLocal()
{
  CFTypeRef v10 = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v10);
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v10, 0, (uint64_t)&cf);
  int IsEndpointOfType = FigRoutingManagerIsEndpointOfType((uint64_t)cf);
  uint64_t v1 = cf;
  if (IsEndpointOfType)
  {
    CFTypeRef v8 = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
    if (v5) {
      v5(CMBaseObject, *MEMORY[0x1E4F20E38], *MEMORY[0x1E4F1CF80], &v8);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t v1 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v8, 0, *MEMORY[0x1E4F20660], 0);
    CFTypeRef cf = v1;
    if (v8)
    {
      CFRelease(v8);
      uint64_t v1 = cf;
    }
  }
  BOOL IsEndpointWHAGroupable = FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v1);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
  return IsEndpointWHAGroupable;
}

__CFString *FigRoutingManagerUtilities_GetEvaluatedBadgeType()
{
  v34[27] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v33 = 0;
  v34[0] = 0;
  uint64_t v0 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFTypeRef v31 = 0;
  CFTypeRef v32 = v0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v31);
  CFTypeRef v30 = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v30);
  CFTypeRef v29 = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v31, 0, (uint64_t)&v29);
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v30, 0, (uint64_t)&cf);
  if (v29 && FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)v29))
  {
    CFTypeRef v1 = CMSMUtility_CopyStarkEndpointCentral();
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v5 + 48);
    if (v11) {
      v11(CMBaseObject, *MEMORY[0x1E4F20E38], v2, v34);
    }
    uint64_t v12 = FigEndpointGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    int v15 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
    if (v15) {
      v15(v12, *MEMORY[0x1E4F20F28], v2, &v33);
    }
    if (v1)
    {
      uint64_t v16 = FigEndpointGetCMBaseObject();
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v18 + 48);
      if (v19) {
        v19(v16, @"SupportsDCXForSpatialAudio", v2, &v32);
      }
      CFRelease(v1);
    }
    if (FigCFEqual())
    {
      if (!FigCFEqual()) {
        goto LABEL_48;
      }
      goto LABEL_44;
    }
    if (FigCFEqual())
    {
      if (!FigCFEqual()) {
        goto LABEL_48;
      }
      goto LABEL_46;
    }
  }
  else
  {
    CFNumberRef v6 = 0;
    if (!MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled() || !cf) {
      goto LABEL_50;
    }
    if (!FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent((uint64_t)v30)
      || !FigRoutingManagerIsEndpointOfType((uint64_t)cf)
      && !FigRoutingManagerIsEndpointOfType((uint64_t)cf))
    {
      goto LABEL_42;
    }
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    uint64_t v8 = FigEndpointGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v20 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v10 + 48);
    if (v20) {
      v20(v8, *MEMORY[0x1E4F20E38], v7, v34);
    }
    uint64_t v21 = FigEndpointGetCMBaseObject();
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    CFArrayRef v24 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v23 + 48);
    if (v24) {
      v24(v21, *MEMORY[0x1E4F20F28], v7, &v33);
    }
    if ((FigEndpointGetSupportedFeatures() & 8) == 0)
    {
LABEL_42:
      CFNumberRef v6 = 0;
      goto LABEL_50;
    }
    if (FigCFEqual())
    {
LABEL_44:
      uint64_t v25 = kMXSession_BadgeType_DolbyAtmos;
LABEL_49:
      CFNumberRef v6 = *v25;
      goto LABEL_50;
    }
    if (FigCFEqual())
    {
LABEL_46:
      uint64_t v25 = kMXSession_BadgeType_DolbyAudio;
      goto LABEL_49;
    }
  }
  if (FigCFEqual())
  {
LABEL_48:
    uint64_t v25 = kMXSession_BadgeType_SpatialAudio;
    goto LABEL_49;
  }
  if (FigCFEqual())
  {
    uint64_t v25 = kMXSession_BadgeType_Surround;
    goto LABEL_49;
  }
  if (FigCFEqual()) {
    CFNumberRef v6 = @"Stereo";
  }
  else {
    CFNumberRef v6 = 0;
  }
LABEL_50:
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v29)
  {
    CFRelease(v29);
    CFTypeRef v29 = 0;
  }
  if (v31)
  {
    CFRelease(v31);
    CFTypeRef v31 = 0;
  }
  if (v30)
  {
    CFRelease(v30);
    CFTypeRef v30 = 0;
  }
  if (v32)
  {
    CFRelease(v32);
    CFTypeRef v32 = 0;
  }
  if (v33)
  {
    CFRelease(v33);
    CFTypeRef v33 = 0;
  }
  if (v34[0]) {
    CFRelease(v34[0]);
  }
  if (v6) {
    return v6;
  }
  else {
    return @"NotApplicable";
  }
}

BOOL FigRoutingManagerUtilities_IsEndpointTypeVehicle(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFNumberRef number = 0;
  uint64_t v1 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFNumberRef v6 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef *))(v4 + 48);
  if (v6
    && (v6(CMBaseObject, 0x1EE5F4368, v1, &number), number)
    && (CFTypeRef cf = 0, CFNumberGetValue(number, kCFNumberSInt64Type, &cf), cf == 1701869160))
  {
    BOOL v5 = 1;
  }
  else
  {
    CFTypeRef cf = 0;
    uint64_t v7 = FigEndpointGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v9 + 48);
    if (v10)
    {
      v10(v7, 0x1EE5F4288, v1, &cf);
      CFNumberRef v11 = (const __CFNumber *)cf;
    }
    else
    {
      CFNumberRef v11 = 0;
    }
    BOOL v5 = CMSMVAUtility_GetPortFromCFNumber(v11) == 1886614639;
    if (cf) {
      CFRelease(cf);
    }
  }
  if (number) {
    CFRelease(number);
  }
  return v5;
}

void FigRoutingManagerUtilities_RegisterAirPlayStreamCapabilitiesDidChangeListener(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeRef v20 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  if (!a2) {
    goto LABEL_12;
  }
  if (FigRoutingManagerIsEndpointOfType(a2) || FigRoutingManagerUtilities_IsEndpointTypeVehicle(a2)) {
    goto LABEL_4;
  }
  if (a1 && FigEndpointAggregateGetFigEndpoint())
  {
    uint64_t v9 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(CMBaseObject, *MEMORY[0x1E4F20E38], v9, &cf);
    }
    if (FigCFEqual())
    {
      if (dword_1E9359DC0)
      {
LABEL_24:
        os_log_and_send_and_compose_flags_and_os_log___n128 type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      uint64_t v15 = FigEndpointGetCMBaseObject();
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
      if (!v18 || (v18(v15, *MEMORY[0x1E4F20FB0], v9, &v20), !v20) || CFArrayGetCount((CFArrayRef)v20) < 2)
      {
LABEL_4:
        FigEndpointCopyStreamsForTypeAndSubType();
        if (theArray)
        {
          if (CFArrayGetCount(theArray) >= 1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
            if (ValueAtIndex)
            {
              uint64_t v5 = (uint64_t)ValueAtIndex;
              FigRoutingManagerGetSharedManager();
              CMNotificationCenterGetDefaultLocalCenter();
              uint64_t v6 = CMNotificationCenterAddListener();
              routingManagerUtilities_handleAirPlayAggregateCapabilitiesChangedNotification(v6, v7, v8, v5);
            }
          }
        }
        goto LABEL_8;
      }
      if (dword_1E9359DC0) {
        goto LABEL_24;
      }
    }
  }
LABEL_8:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v20)
  {
    CFRelease(v20);
    CFTypeRef v20 = 0;
  }
LABEL_12:
  if (theArray) {
    CFRelease(theArray);
  }
}

void routingManagerUtilities_handleAirPlayAggregateCapabilitiesChangedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[22] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    SharedManager = FigRoutingManagerGetSharedManager();
    CFTypeRef cf = 0;
    v20[0] = 0;
    uint64_t v5 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t, void *))(v8 + 48);
    if (v9) {
      v9(CMBaseObject, @"SupportedAudioCapabilities", v5, v20);
    }
    uint64_t v10 = FigEndpointStreamGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(v10, *MEMORY[0x1E4F21368], v5, &cf);
    }
    if (dword_1E9359DC0)
    {
      int v18 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t v15 = *((void *)SharedManager + 1);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    long long v16[2] = __routingManagerUtilities_handleAirPlayAggregateCapabilitiesChangedNotification_block_invoke;
    v16[3] = &__block_descriptor_40_e5_v8__0l;
    _OWORD v16[4] = v20[0];
    MXDispatchAsync((uint64_t)"routingManagerUtilities_handleAirPlayAggregateCapabilitiesChangedNotification", (uint64_t)"FigRoutingManager_Utilities_Embedded.m", 466, 0, 0, v15, (uint64_t)v16);
  }
}

void FigRoutingManagerUtilities_UnRegisterAirPlayStreamCapabilitiesDidChangeListener(uint64_t a1, const void *a2)
{
  v19[22] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v18 = 0;
  v19[0] = 0;
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  if (a2)
  {
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a2)
      || FigRoutingManagerUtilities_IsEndpointTypeVehicle((uint64_t)a2))
    {
LABEL_4:
      FigEndpointCopyStreamsForTypeAndSubType();
      goto LABEL_24;
    }
    if (a1 && FigEndpointAggregateGetFigEndpoint())
    {
      uint64_t v4 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v7 + 48);
      if (v8) {
        v8(CMBaseObject, *MEMORY[0x1E4F20E38], v4, &v18);
      }
      if (FigCFEqual())
      {
        if (!dword_1E9359DC0) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      uint64_t v9 = FigEndpointGetCMBaseObject();
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, void, uint64_t, CFArrayRef *))(v11 + 48);
      if (v12)
      {
        v12(v9, *MEMORY[0x1E4F20FB0], v4, v19);
        if (v19[0])
        {
          if (CFArrayGetCount(v19[0]) == 1 && FigRoutingManagerIsEndpointPresentInAggregate(a2, a1)) {
            goto LABEL_4;
          }
        }
      }
      if (dword_1E9359DC0)
      {
LABEL_23:
        int v15 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
LABEL_24:
  if (v18)
  {
    CFRelease(v18);
    CFTypeRef v18 = 0;
  }
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (v19[0]) {
    CFRelease(v19[0]);
  }
}

void __routingManagerUtilities_handleAirPlayAggregateCapabilitiesChangedNotification_block_invoke(uint64_t a1)
{
  CMSMUtility_UpdateSupportedOutputChannelLayouts(*(void **)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigEndpointUIAgentXPCRemoteCreate(uint64_t a1, void *a2)
{
  if (!a2)
  {
    uint64_t v4 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (FigEndpointUIAgentRemoteXPC_EnsureClientEstablished_onceToken != -1) {
    dispatch_once(&FigEndpointUIAgentRemoteXPC_EnsureClientEstablished_onceToken, &__block_literal_global_80);
  }
  uint64_t v3 = FigEndpointUIAgentRemoteXPC_EnsureClientEstablished_err;
  if (!FigEndpointUIAgentRemoteXPC_EnsureClientEstablished_err)
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4)
    {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v4)
      {
        uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
        if (uint64)
        {
          uint64_t v6 = uint64;
          FigEndpointUIAgentGetClassID();
          uint64_t v3 = CMDerivedObjectCreate();
          if (!v3)
          {
            *(void *)(CMBaseObjectGetDerivedStorage() + _Block_object_dispose(&STACK[0x210], 8) = v6;
            FigXPCRemoteClientAssociateObject();
          }
          *a2 = 0;
        }
        else
        {
          uint64_t v3 = 4294950515;
        }
        goto LABEL_11;
      }
    }
LABEL_13:
    uint64_t v3 = v4;
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t remoteXPCendpointAgentClient_DeadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 1) = 1;
  return result;
}

uint64_t figEndpointUIAgentRemoteXPC_Finalize()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    unsigned char *DerivedStorage = 1;
    FigXPCRemoteClientDisassociateObject();
    if (!v1[1] && !FigXPCCreateBasicMessage()) {
      FigXPCRemoteClientSendSyncMessage();
    }
  }
  return FigXPCRelease();
}

uint64_t figEndpointUIAgentRemoteXPC_setAuthValue(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = 0;
  if (a2 || a3)
  {
    uint64_t ObjectID = remoteXPCendpointAgent_GetObjectID(a1, &v6);
    if (ObjectID)
    {
      uint64_t v4 = ObjectID;
    }
    else
    {
      uint64_t v4 = FigXPCCreateBasicMessage();
      if (!v4)
      {
        FigXPCMessageSetCFString();
        FigXPCMessageSetCFBoolean();
        uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  FigXPCRelease();
  return v4;
}

uint64_t figEndpointUIAgentRemoteXPC_setIsCurrentUIAgent(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCendpointAgent_GetObjectID(a1, &v4);
  if (ObjectID)
  {
    uint64_t v2 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (!v2)
    {
      FigXPCMessageSetCFBoolean();
      uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v2;
}

uint64_t figEndpointUIAgentRemoteXPC_deviceWakeStatus(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCendpointAgent_GetObjectID(a1, &v4);
  if (ObjectID)
  {
    uint64_t v2 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (!v2)
    {
      FigXPCMessageSetCFBoolean();
      uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v2;
}

uint64_t figEndpointUIAgentRemoteXPC_setPasswordFromKeychain(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCendpointAgent_GetObjectID(a1, &v4);
  if (ObjectID)
  {
    uint64_t v2 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (!v2)
    {
      FigXPCMessageSetCFString();
      FigXPCMessageSetCFObject();
      uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v2;
}

uint64_t remoteXPCendpointAgent_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage || *(unsigned char *)(DerivedStorage + 1))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

uint64_t remoteSystemController_DeadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x210], 8) = 1;
  return result;
}

uint64_t remoteSystemController_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EB3BA228)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    if (FigXPCCreateBasicMessage()
      || (int v2 = FigXPCRemoteClientSendSyncMessage(), FigXPCRemoteClientKillServerOnTimeout(), v2))
    {
      uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return FigXPCRelease();
}

uint64_t remoteSystemController_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  id v3 = [NSString alloc];
  CFIndex v4 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    uint64_t v5 = " SERVER DIED";
  }
  else {
    uint64_t v5 = "";
  }
  return objc_msgSend(v3, "initWithFormat:", @"<FigSystemControllerRemote %p retainCount: %ld objectID: %016llx%s>", a1, v4, *(void *)DerivedStorage, v5);
}

uint64_t remoteSystemController_CopyDeviceRouteForAudioCategory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v10, 0, sizeof(v10));
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v10);
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_11;
  }
  if (!a3)
  {
    if (!a4)
    {
      uint64_t v8 = 0;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  uint64_t v7 = FigXPCMessageCopyCFString();
  uint64_t v8 = v7;
  if (a4 && !v7)
  {
LABEL_10:
    uint64_t ObjectID = FigXPCMessageCopyCFString();
LABEL_11:
    uint64_t v8 = ObjectID;
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteSystemController_CopyVolumeCategoryAndMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  memset(v11, 0, sizeof(v11));
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v11);
  if (ObjectID) {
    goto LABEL_12;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_12;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_12;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_12;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_12;
  }
  if (!a4)
  {
    if (!a5)
    {
      uint64_t v9 = 0;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  uint64_t v8 = FigXPCMessageCopyCFString();
  uint64_t v9 = v8;
  if (a5 && !v8)
  {
LABEL_11:
    uint64_t ObjectID = FigXPCMessageCopyCFString();
LABEL_12:
    uint64_t v9 = ObjectID;
  }
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteSystemController_HasRouteSharingPolicyLongFormVideo(uint64_t a1, uint64_t a2, BOOL *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, &v8);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    uint64_t v6 = v5;
    if (a3 && !v5) {
      *a3 = xpc_dictionary_get_BOOL(xdict, (const char *)kFigSystemControllerXPCMsgParam_HasRouteSharingPolicyLongFormVideo);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteSystemController_ShouldHijackAudioRoute(uint64_t a1, int a2, uint64_t a3, BOOL *a4, uint64_t a5)
{
  xpc_object_t v12 = 0;
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, &v11);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      xpc_dictionary_set_int64(xdict, (const char *)kFigSystemControllerXPCMsgParam_AudioScore, a2);
      uint64_t ObjectID = FigXPCMessageSetCFString();
      if (!ObjectID)
      {
        uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!ObjectID)
        {
          if (a4) {
            *a4 = xpc_dictionary_get_BOOL(v12, (const char *)kFigSystemControllerXPCMsgParam_ShouldHijackAudioRoute);
          }
          if (!a5)
          {
            uint64_t v9 = 0;
            goto LABEL_11;
          }
          uint64_t ObjectID = FigXPCMessageCopyCFString();
        }
      }
    }
  }
  uint64_t v9 = ObjectID;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteSystemController_ToggleInputMute(uint64_t a1)
{
  memset(v5, 0, sizeof(v5));
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSystemController_SetInputMute(uint64_t a1, const UInt8 *a2)
{
  v7[0] = 0;
  v7[1] = 0;
  if (remoteSystemController_getObjectID(a1, v7)
    || FigXPCCreateBasicMessage()
    || FigXPCMessageSetCFBoolean())
  {
    uint64_t result = FigXPCRelease();
    __break(1u);
  }
  else
  {
    CFDataRef v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 32);
    uint64_t v4 = FigXPCMessageSetCFData();
    if (!v4) {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    }
    uint64_t v5 = v4;
    FigXPCRelease();
    if (v3) {
      CFRelease(v3);
    }
    FigXPCRemoteClientKillServerOnTimeout();
    return v5;
  }
  return result;
}

uint64_t remoteSystemController_GetInputMute(uint64_t a1, const UInt8 *a2, BOOL *a3)
{
  memset(v10, 0, sizeof(v10));
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v10);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v8 = ObjectID;
  }
  else
  {
    a2 = (const UInt8 *)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 32);
    uint64_t v6 = FigXPCMessageSetCFData();
    if (v6)
    {
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      uint64_t v8 = v7;
      if (a3)
      {
        if (!v7)
        {
          uint64_t v8 = FigXPCMessageCopyCFBoolean();
          if (!v8) {
            *a3 = *MEMORY[0x1E4F1CFD0] == 0;
          }
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  if (a2) {
    CFRelease(a2);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteSystemController_ClearUplinkMutedCache(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSystemController_allowAppToInitiateRecordingTemporarily(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2 || (uint64_t v2 = FigXPCMessageSetCFString(), v2)) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSystemController_createMediaEndowment(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2
      || (uint64_t v2 = FigXPCMessageSetCFString(), v2)
      || (uint64_t v2 = FigXPCMessageSetCFDictionary(), v2))
    {
      uint64_t v3 = v2;
    }
    else
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSystemController_invalidateMediaEndowment(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2 || (uint64_t v2 = FigXPCMessageSetCFString(), v2)) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSystemController_SetSilentMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9 = 0;
  xpc_object_t xdict = 0;
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, &v9);
  if (ObjectID)
  {
    uint64_t v7 = ObjectID;
  }
  else
  {
    uint64_t v7 = FigXPCCreateBasicMessage();
    if (!v7)
    {
      uint64_t v7 = FigXPCMessageSetCFBoolean();
      if (!v7)
      {
        uint64_t v7 = FigXPCMessageSetCFDate();
        if (!v7)
        {
          uint64_t v7 = FigXPCMessageSetCFString();
          if (!v7)
          {
            xpc_dictionary_set_uint64(xdict, (const char *)kFigSystemControllerXPCMsgParam_ClientType, a5);
            uint64_t v7 = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteSystemController_RemoteDeviceControlIsAllowed(uint64_t a1, _DWORD *a2)
{
  memset(v7, 0, sizeof(v7));
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v7);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v5 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCMessageCopyCFNumber();
    uint64_t v5 = v4;
    if (a2 && !v4) {
      *a2 = [0 unsignedIntValue];
    }
  }
  FigXPCRelease();
  FigXPCRelease();

  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteSystemController_GetVolumeButtonDelta(uint64_t a1, uint64_t a2, float *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, &v9);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    uint64_t v6 = v5;
    if (a3 && !v5)
    {
      float v7 = xpc_dictionary_get_double(xdict, (const char *)kFigSystemControllerXPCMsgParam_VolumeDelta);
      *a3 = v7;
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteSystemController_AllowAppsToInitiatePlayback(uint64_t a1)
{
  memset(v5, 0, sizeof(v5));
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2
      || (uint64_t v2 = FigXPCMessageSetCFArray(), v2)
      || (uint64_t v2 = FigXPCMessageSetCFString(), v2)
      || (uint64_t v2 = FigXPCMessageSetCFBoolean(), v2))
    {
      uint64_t v3 = v2;
    }
    else
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t FigEndpointUIAgentStartServer()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  uint64_t v0 = (uint64_t *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
  if (!v0)
  {
    uint64_t v7 = FigSignalErrorAt();
    if (v7) {
      return v7;
    }
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_4;
  }
  uint64_t v1 = v0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  v1[1] = (uint64_t)Mutable;
  if (Mutable)
  {
    uint64_t *v1 = FigReentrantMutexCreate();
    gEndpointAgentServerState = (uint64_t)v1;
    goto LABEL_4;
  }
  uint64_t v8 = FigSignalErrorAt();
  if (!v8)
  {
LABEL_4:
    CFMutableDictionaryRef v4 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    uint64_t v5 = FigXPCServerStart();
    if (v4) {
      CFRelease(v4);
    }
    return v5;
  }
  uint64_t v5 = v8;
  uint64_t v9 = (const void *)v1[1];
  if (v9) {
    CFRelease(v9);
  }
  if (*v1) {
    FigSimpleMutexDestroy();
  }
  free(v1);
  return v5;
}

uint64_t HandleEndpointUIAgentRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  CFTypeRef v7 = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v4) {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v6 = v4;
  if (!v4) {
    return 4294954516;
  }
  return v6;
}

uint64_t FigEndpointUIAgentCopyCurrentEndpointUIAgent(void *a1)
{
  if (!a1) {
    return 4294954516;
  }
  if (!gEndpointAgentServerState) {
    return 4294954513;
  }
  MEMORY[0x199716E90](*(void *)gEndpointAgentServerState);
  if (!*(void *)(gEndpointAgentServerState + 16))
  {
    CFArrayRef v5 = *(const __CFArray **)(gEndpointAgentServerState + 8);
    if (v5)
    {
      CFIndex Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        unint64_t v7 = Count + 1;
        do
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(gEndpointAgentServerState + 8), v7 - 2);
          FigCFDictionaryGetIntIfPresent();
          --v7;
        }
        while (v7 > 1);
      }
    }
  }
  CFAllocatorRef v2 = (void *)gEndpointAgentServerState;
  CFTypeRef v3 = *(CFTypeRef *)(gEndpointAgentServerState + 16);
  if (v3)
  {
    CFTypeRef v3 = CFRetain(v3);
    CFAllocatorRef v2 = (void *)gEndpointAgentServerState;
  }
  *a1 = v3;
  MEMORY[0x199716EA0](*v2);
  return 0;
}

void RefconDestructor(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  CMNotificationCenterGetDefaultLocalCenter();
  if (v2)
  {
    CMNotificationCenterPostNotification();
  }
  else
  {
    CMNotificationCenterPostNotification();
    uint64_t v8 = *(const void **)a1;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    xpc_object_t v12 = *(void (**)(const void *, void, uint64_t))(v10 + 8);
    if (v12) {
      v12(v8, 0, 1);
    }
  }
  CFTypeRef v3 = *(const void **)a1;
  if (gEndpointAgentServerState)
  {
    MEMORY[0x199716E90](*(void *)gEndpointAgentServerState);
    CFArrayRef v4 = *(const __CFArray **)(gEndpointAgentServerState + 8);
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        CFIndex v7 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(gEndpointAgentServerState + 8), v7);
          FigCFDictionaryGetValue();
          if (FigCFEqual()) {
            break;
          }
          if (v6 == ++v7) {
            goto LABEL_22;
          }
        }
        if (FigCFDictionaryGetValue())
        {
          if (dword_1E9359EB0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(gEndpointAgentServerState + 8), v7);
          uint64_t v13 = gEndpointAgentServerState;
          if (*(const void **)(gEndpointAgentServerState + 16) == v3)
          {
            if (dword_1E9359EB0)
            {
              uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t v13 = gEndpointAgentServerState;
            }
            *(void *)(v13 + 16) = 0;
            FigEndpointUIAgentHelper_SetNewUIAgent(0);
          }
        }
      }
    }
LABEL_22:
    MEMORY[0x199716EA0](*(void *)gEndpointAgentServerState);
    CFTypeRef v3 = *(const void **)a1;
  }
  if (v3)
  {
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(const void *))(v16 + 24);
    if (v17) {
      v17(v3);
    }
  }
  DisposePerUIAgentState((const void **)a1);
}

void DisposePerUIAgentState(const void **a1)
{
  if (a1)
  {
    int v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

void CMSMNotificationUtility_PostSessionPrefersConcurrentAirPlayAudioDidChange(void *a1)
{
  if ([a1 isActive])
  {
    CFDictionaryRef BooleanPayload = CMSMNotificationUtility_CreateBooleanPayload(@"PrefersConcurrentAirPlayAudio", [a1 prefersConcurrentAirPlayAudio]);
    CFTypeRef v3 = MXGetNotificationSenderQueue();
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __CMSMNotificationUtility_PostSessionPrefersConcurrentAirPlayAudioDidChange_block_invoke;
    void v4[3] = &unk_1E57CA3A0;
    void v4[4] = a1;
    void v4[5] = BooleanPayload;
    MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSessionPrefersConcurrentAirPlayAudioDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 92, 0, 0, v3, (uint64_t)v4);
  }
}

void CMSMNotificationUtility_PostSessionAudioBehaviourDidChange(void *a1)
{
  id v2 = a1;
  CFTypeRef v3 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostSessionAudioBehaviourDidChange_block_invoke;
  void v4[3] = &unk_1E57C6368;
  void v4[4] = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSessionAudioBehaviourDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 113, 0, 0, v3, (uint64_t)v4);
}

void CMSMNotificationUtility_PostSessionRouteControlFeaturesDidChange(void *a1, int a2)
{
  if (a2)
  {
    if ([a1 prefersEchoCancelledInput]) {
      BOOL IsRecordingCategory = CMSMUtility_IsRecordingCategory((const void *)[a1 audioCategory]);
    }
    else {
      BOOL IsRecordingCategory = 0;
    }
    uint64_t v4 = 1;
  }
  else
  {
    BOOL IsRecordingCategory = 0;
    uint64_t v4 = 0;
  }
  id v5 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v6 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:v4];
  uint64_t v7 = objc_msgSend(v5, "initWithObjectsAndKeys:", v6, @"RouteControlFeatures", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", IsRecordingCategory), @"HasEchoCancelledInput", 0);
  objc_initWeak(&location, a1);
  uint64_t v8 = MXGetNotificationSenderQueue();
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _OWORD v9[2] = __CMSMNotificationUtility_PostSessionRouteControlFeaturesDidChange_block_invoke;
  v9[3] = &unk_1E57C9BE8;
  objc_copyWeak(&v10, &location);
  v9[4] = a1;
  void v9[5] = v7;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSessionRouteControlFeaturesDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 137, 0, 0, v8, (uint64_t)v9);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_194EA6CCC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

__CFDictionary *CMSMNotificationUtility_CreateVolumeNotificationPayload(const void *a1, const void *a2, const void *a3, uint64_t a4, int a5, float a6)
{
  float valuePtr = a6;
  uint64_t value = 0;
  uint64_t v22 = a4;
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  xpc_object_t v12 = Mutable;
  if (a1) {
    CFDictionarySetValue(Mutable, @"AudioCategory", a1);
  }
  if (a2) {
    CFDictionarySetValue(v12, @"Reason", a2);
  }
  if (a3) {
    CFDictionarySetValue(v12, @"RefCon", a3);
  }
  CFNumberRef v13 = CFNumberCreate(v10, kCFNumberFloat32Type, &valuePtr);
  if (v13)
  {
    CFNumberRef v14 = v13;
    CFDictionarySetValue(v12, @"Volume", v13);
    CFRelease(v14);
  }
  CFNumberRef v15 = CFNumberCreate(v10, kCFNumberSInt64Type, &v22);
  if (v15)
  {
    CFNumberRef v16 = v15;
    CFDictionarySetValue(v12, @"SequenceNumber", v15);
    CFRelease(v16);
  }
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled())
  {
    uint64_t v17 = (const void **)MEMORY[0x1E4F1CFC8];
    if (a5) {
      uint64_t v17 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(v12, @"SilenceVolumeHUD", *v17);
  }
  PVMCopyCurrentCategoryAndMode(&cf, &v19);
  PVMCopyVolumeCategoryAndMode((const __CFString *)cf, v19, &value, 0);
  if (value) {
    CFDictionarySetValue(v12, @"ActiveAudioCategory", value);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v19)
  {
    CFRelease(v19);
    CFTypeRef v19 = 0;
  }
  if (value) {
    CFRelease(value);
  }
  return v12;
}

void CMSMNotificationUtility_PostVolumeDidChangeToVolumeButtonClientsWithPayload(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __CMSMNotificationUtility_PostVolumeDidChangeToVolumeButtonClientsWithPayload_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  void v3[4] = cf;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostVolumeDidChangeToVolumeButtonClientsWithPayload", (uint64_t)"CMSessionManager_NotificationUtilities.m", 259, 0, 0, v2, (uint64_t)v3);
}

void CMSMNotificationUtility_PostPauseCommandNotificationToMatchingNotStoppedClients(uint64_t a1)
{
}

void CMSMNotificationUtility_PostPauseCommandToPlayingLockStoppers(uint64_t a1)
{
}

void CMSMNotificationUtility_PostStopCommandToMatchingActiveClientsWithPID(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = CMSUtilityApplier_PostNotificationToBackgroundedSession_StopCommand;
  }
  else {
    uint64_t v2 = CMSUtilityApplier_PostNotification_StopCommand;
  }
  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsSameClientAndActive, a1, (unint64_t)v2, 0);
}

void CMSMNotificationUtility_PostStopCommandToActiveLockStoppers(uint64_t a1)
{
}

void CMSMNotificationUtility_PostStopCommandToActiveClientWithDisplayID(uint64_t a1, char a2)
{
  char v2 = a2;
  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsActiveWithDisplayID, a1, (unint64_t)CMSUtilityApplier_PostNotification_StopCommand, (uint64_t)&v2);
}

void CMSMNotificationUtility_PostCurrentOutputSampleRateDidChange()
{
  if (MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled())
  {
    CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"CurrentOutputSampleRateDidChange", 0, 0);
  }
}

void CMSMNotificationUtility_PostCurrentInputSampleRateDidChange()
{
  if (MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled())
  {
    CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"CurrentInputSampleRateDidChange", 0, 0);
  }
}

void CMSMNotificationUtility_PostCurrentOutputDeviceBufferSizeDidChange()
{
  if (MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled())
  {
    CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"CurrentOutputDeviceBufferSizeDidChange", 0, 0);
  }
}

void CMSMNotificationUtility_PostCurrentInputDeviceBufferSizeChange()
{
  if (MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled())
  {
    CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"CurrentInputDeviceBufferSizeDidChange", 0, 0);
  }
}

uint64_t CMSMNotificationUtility_PostNowPlayingAppPIDDidChange()
{
  uint64_t v0 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID];
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", v0), @"PID", 0);
  return +[MXSystemController notifyAll:@"NowPlayingAppPIDDidChange" payload:v1 dontPostIfSuspended:0];
}

uint64_t CMSMNotificationUtility_PostNowPlayingAppDidChange()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", @"NowPlayingAppDidChange", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance", v2, v3), "nowPlayingAppDisplayID"), @"DisplayID", 0), 0);
}

uint64_t CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChangeDelayed(int a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a1 != 0), @"State", 0);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return +[MXSystemController notifyAll:@"NowPlayingAppIsPlayingDidChange", v1, 0, v4, v5 payload dontPostIfSuspended];
}

uint64_t CMSMNotificationUtility_PostPreferredExternalRouteDidChange()
{
  return +[MXSystemController notifyAll:@"PreferredExternalRouteDidChange" payload:0 dontPostIfSuspended:0];
}

uint64_t CMSMNotificationUtility_PostSomeLongFormVideoClientIsActiveOverAirPlayVideoDidChange(int a1)
{
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a1 != 0), @"SomeLongFormVideoClientIsActiveOverAirPlayVideoDidChange_IsActive", 0);
  return +[MXSystemController notifyAll:@"SomeLongFormVideoClientIsActiveOverAirPlayVideoDidChange" payload:v1 dontPostIfSuspended:0];
}

uint64_t CMSMNotificationUtility_PostSomeLongFormVideoClientIsPlayingOverAirPlayVideoDidChange(int a1)
{
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a1 != 0), @"SomeLongFormVideoClientIsPlayingOverAirPlayVideo_IsPlaying", 0);
  return +[MXSystemController notifyAll:@"SomeLongFormVideoClientIsPlayingOverAirPlayVideo" payload:v1 dontPostIfSuspended:0];
}

uint64_t CMSMNotificationUtility_PostSomeLongFormVideoClientIsPlayingDidChange(int a1)
{
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a1 != 0), @"SomeLongFormVideoClientIsPlayingDidChange_IsPlaying", 0);
  return +[MXSystemController notifyAll:@"SomeLongFormVideoClientIsPlayingDidChange" payload:v1 dontPostIfSuspended:0];
}

uint64_t CMSMNotificationUtility_PostFullMuteDidChangeToVolumeButtonClientAndAVSystemControllers(int a1)
{
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a1 != 0), @"FullMuted", 0);
  return +[MXSystemController notifyAll:@"UserFullMuteDidChange" payload:v1 dontPostIfSuspended:0];
}

uint64_t CMSMNotificationUtility_PostCarPlayIsConnectedDidChange(int a1)
{
  BOOL v1 = a1 != 0;
  [+[MXSessionManager sharedInstance] setCarPlayIsConnected:v1];
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", v1), @"IsConnected", 0);
  return +[MXSystemController notifyAll:@"CarPlayIsConnectedDidChange" payload:v2 dontPostIfSuspended:0];
}

uint64_t CMSMNotificationUtility_PostCarPlayAuxStreamSupportDidChange(int a1)
{
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a1 != 0), @"IsSupported", 0);
  return +[MXSystemController notifyAll:@"CarPlayAuxStreamSupportDidChange" payload:v1 dontPostIfSuspended:0];
}

uint64_t CMSMNotificationUtility_PostHeadphoneJackIsConnectedDidChange()
{
  return +[MXSystemController notifyAll:@"HeadphoneJackIsConnectedDidChange" payload:0 dontPostIfSuspended:0];
}

void CMSMNotificationUtility_PostSystemHasAudioInputDeviceDidChange()
{
  +[MXSystemController notifyAll:@"SystemHasAudioInputDeviceDidChange" payload:0 dontPostIfSuspended:0];
  uint64_t v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSystemHasAudioInputDeviceDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 894, 0, 0, v0, (uint64_t)&__block_literal_global_26_1);
}

uint64_t CMSMNotificationUtility_PostActiveInputRouteForPlayAndRecordNoBluetoothDidChange()
{
  return +[MXSystemController notifyAll:@"ActiveInputRouteForPlayAndRecordNoBluetoothDidChange" payload:0 dontPostIfSuspended:0];
}

void CMSMNotificationUtility_PostSystemHasAudioInputDeviceExcludingBluetoothDidChange()
{
  +[MXSystemController notifyAll:@"SystemHasAudioInputDeviceExcludingBluetoothDidChange" payload:0 dontPostIfSuspended:0];
  uint64_t v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSystemHasAudioInputDeviceExcludingBluetoothDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 910, 0, 0, v0, (uint64_t)&__block_literal_global_28_0);
}

uint64_t CMSMNotificationUtility_PostUplinkMuteDidChange(int a1)
{
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a1 != 0), @"UplinkMute", 0);
  return +[MXSystemController notifyAll:@"UplinkMuteDidChange" payload:v1 dontPostIfSuspended:0];
}

uint64_t CMSMNotificationUtility_PostCurrentRouteHasVolumeControlDidChange(int a1)
{
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a1 != 0), @"HasVolumeControl", 0);
  return +[MXSystemController notifyAll:@"CurrentRouteHasVolumeControlDidChange" payload:v1 dontPostIfSuspended:0];
}

uint64_t CMSMNotificationUtility_PostExternalScreenDidChange()
{
  return +[MXSystemController notifyAll:@"ExternalScreenDidChange" payload:0 dontPostIfSuspended:0];
}

void CMSMNotificationUtility_PostVibeStopped(const void *a1)
{
  if (a1)
  {
    CFTypeID v2 = CFGetTypeID(a1);
    if (v2 == CFDictionaryGetTypeID())
    {
      CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"VibeStopped_Context");
      if (Value)
      {
        uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", Value, @"Context", 0);
        +[MXSystemController notifyAll:@"SystemSoundVibrateDidFinish" payload:v4 dontPostIfSuspended:0];
        id v5 = v4;
        uint64_t v6 = MXGetNotificationSenderQueue();
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 3221225472;
        void v7[2] = __CMSMNotificationUtility_PostVibeStopped_block_invoke;
        void v7[3] = &unk_1E57C6368;
        v7[4] = v4;
        MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostVibeStopped", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1010, 0, 0, v6, (uint64_t)v7);
      }
    }
  }
}

void CMSMNotificationUtility_PostForceSoundCheckDidChange(int a1, int a2)
{
  int valuePtr = a2;
  CFDictionaryRef BooleanPayload = CMSMNotificationUtility_CreateBooleanPayload(@"ForceSoundCheck", a1);
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (BooleanPayload) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    CFNumberRef v5 = v3;
    uint64_t v6 = MXGetNotificationSenderQueue();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __CMSMNotificationUtility_PostForceSoundCheckDidChange_block_invoke;
    void v7[3] = &__block_descriptor_48_e5_v8__0l;
    v7[4] = v5;
    void v7[5] = BooleanPayload;
    MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostForceSoundCheckDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1062, 0, 0, v6, (uint64_t)v7);
  }
}

void CMSMNotificationUtility_PostActiveNeroVisualStreamDidChange()
{
  uint64_t v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostActiveNeroVisualStreamDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1197, 0, 0, v0, (uint64_t)&__block_literal_global_35_2);
}

void CMSMNotificationUtility_PostActiveNeroVisualStreamInfoDidChange()
{
  +[MXSystemController notifyAll:@"ActiveNeroVisualStreamInfoDidChange" payload:0 dontPostIfSuspended:0];
  uint64_t v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostActiveNeroVisualStreamInfoDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1218, 0, 0, v0, (uint64_t)&__block_literal_global_37_0);
}

void CMSMNotificationUtility_PostAvailableVirtualFormatsDidChange()
{
  uint64_t v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostAvailableVirtualFormatsDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1269, 0, 0, v0, (uint64_t)&__block_literal_global_39);
}

void CMSMNotificationUtility_PostInputDataSourcesDidChange()
{
  uint64_t v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostInputDataSourcesDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1302, 0, 0, v0, (uint64_t)&__block_literal_global_41_0);
}

void CMSMNotificationUtility_PostOutputDataDestinationsDidChange()
{
  uint64_t v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostOutputDataDestinationsDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1321, 0, 0, v0, (uint64_t)&__block_literal_global_43_1);
}

void CMSMNotificationUtility_PostInputGainScalarDidChange()
{
  uint64_t v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostInputGainScalarDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1341, 0, 0, v0, (uint64_t)&__block_literal_global_45_0);
}

void CMSMNotificationUtility_PostCurrentRouteHasInputGainControlDidChange(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  CFTypeID v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __CMSMNotificationUtility_PostCurrentRouteHasInputGainControlDidChange_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  void v3[4] = cf;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostCurrentRouteHasInputGainControlDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1364, 0, 0, v2, (uint64_t)v3);
}

void CMSMNotificationUtility_PostNumberOfInputChannelsDidChange(int a1)
{
  CFTypeID v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __CMSMNotificationUtility_PostNumberOfInputChannelsDidChange_block_invoke;
  v3[3] = &__block_descriptor_36_e5_v8__0l;
  int v4 = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostNumberOfInputChannelsDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1373, 0, 0, v2, (uint64_t)v3);
}

CFDictionaryRef CMSMNotificationUtility_CreateSInt32Payload(void *a1, int a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = a2;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v5 = v4;
  BOOL v6 = v4 != 0;
  BOOL v7 = a1 != 0;
  CFIndex v9 = v7 & v6;
  BOOL v8 = !v7 || !v6;
  if (v7 && v6) {
    CFAllocatorRef v10 = a1;
  }
  else {
    CFAllocatorRef v10 = 0;
  }
  if (v8) {
    CFNumberRef v11 = 0;
  }
  else {
    CFNumberRef v11 = v4;
  }
  values = v11;
  keys[0] = v10;
  CFDictionaryRef v12 = CFDictionaryCreate(v3, (const void **)keys, (const void **)&values, v9, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v5) {
    CFRelease(v5);
  }
  return v12;
}

void CMSMNotificationUtility_PostNumberOfOutputChannelsDidChange(int a1)
{
  CFTypeID v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __CMSMNotificationUtility_PostNumberOfOutputChannelsDidChange_block_invoke;
  v3[3] = &__block_descriptor_36_e5_v8__0l;
  int v4 = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostNumberOfOutputChannelsDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1383, 0, 0, v2, (uint64_t)v3);
}

void CMSMNotificationUtility_PostBadgeTypeDidChange(id val)
{
  objc_initWeak(&location, val);
  CFTypeID v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  _OWORD v3[2] = __CMSMNotificationUtility_PostBadgeTypeDidChange_block_invoke;
  v3[3] = &unk_1E57CB278;
  objc_copyWeak(&v4, &location);
  void v3[4] = val;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostBadgeTypeDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1399, 0, 0, v2, (uint64_t)v3);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

void sub_194EA9300(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void CMSMNotificationUtility_PostSupportedBufferedAudioCapabilitiesDidChange(id val)
{
  objc_initWeak(&location, val);
  uint64_t v1 = MXGetNotificationSenderQueue();
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __CMSMNotificationUtility_PostSupportedBufferedAudioCapabilitiesDidChange_block_invoke;
  v2[3] = &unk_1E57CB250;
  objc_copyWeak(&v3, &location);
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSupportedBufferedAudioCapabilitiesDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1415, 0, 0, v1, (uint64_t)v2);
  objc_destroyWeak(&v3);
  objc_destroyWeak(&location);
}

void sub_194EA94B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t CMSMNotificationUtility_PostSomeSharePlayCapableCallSessionIsActiveDidChange(uint64_t result)
{
  if (CMSMNotificationUtility_PostSomeSharePlayCapableCallSessionIsActiveDidChange_sCachedValue != result)
  {
    CMSMNotificationUtility_PostSomeSharePlayCapableCallSessionIsActiveDidChange_sCachedCFArrayRef Value = result;
    uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", result), @"IsActive", 0);
    return +[MXSystemController notifyAll:@"SomeSharePlayCapableCallSessionIsActiveDidChange" payload:v1 dontPostIfSuspended:0];
  }
  return result;
}

void CMSMNotificationUtility_PostIsRecordingMutedDidChange(void *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", objc_msgSend(a1, "isRecordingMuted")), @"Muted");
  if ([+[MXSessionManager sharedInstance] appendContextToMuteNotification])
  {
    [v2 setObject:@"External" forKey:@"Context"];
    [+[MXSessionManager sharedInstance] setAppendContextToMuteNotification:0];
  }
  objc_initWeak(&location, a1);
  id v3 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostIsRecordingMutedDidChange_block_invoke;
  void v4[3] = &unk_1E57C9BE8;
  objc_copyWeak(&v5, &location);
  void v4[4] = a1;
  void v4[5] = v2;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostIsRecordingMutedDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1453, 0, 0, v3, (uint64_t)v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void sub_194EA97A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void CMSMNotificationUtility_PostWombatEnabledDidChange(uint64_t a1)
{
  uint64_t v1 = (void *)[objc_alloc(MEMORY[0x1E4F28ED0]) initWithBool:a1];
  id v2 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", v1, @"Enabled", 0);
  +[MXSystemController notifyAll:@"WombatEnabledDidChange" payload:v2 dontPostIfSuspended:0];
}

void CMSMNotificationUtility_PostSilentModeEnabledDidChange(uint64_t a1)
{
  char v1 = a1;
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F28ED0]) initWithBool:a1];
  id v3 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", v2, @"Enabled", 0);
  +[MXSystemController notifyAll:@"SilentModeEnabledDidChange" payload:v3 dontPostIfSuspended:0];
  id v4 = MXGetNotificationSenderQueue();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = __CMSMNotificationUtility_PostSilentModeEnabledDidChange_block_invoke;
  void v5[3] = &__block_descriptor_33_e5_v8__0l;
  char v6 = v1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSilentModeEnabledDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1531, 0, 0, v4, (uint64_t)v5);
}

void CMSMNotificationUtility_PostMaximumVolumeLimitForBuiltInSpeakerDidChangeIfNeeded(double a1)
{
  int v1 = LODWORD(a1);
  if (*(float *)&CMSMNotificationUtility_PostMaximumVolumeLimitForBuiltInSpeakerDidChangeIfNeeded_sCurrentLimit != *(float *)&a1)
  {
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", @"MaximumSpeakerVolumeLimitDidChange", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithFloat:", a1), @"MaximumSpeakerVolumeLimit", 0), 0);
    CMSMNotificationUtility_PostMaximumVolumeLimitForBuiltInSpeakerDidChangeIfNeeded_sCurrentLimit = v1;
  }
}

void CMSM_IDSConnection_Initialize()
{
  qword_1E9359000 = FigReentrantMutexCreate();
  qword_1E9358FF8 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  gIDSConnection = objc_alloc_init(CMSM_IDSConnection);
  global_queue = dispatch_get_global_queue(0, 0);
  MXDispatchAsync((uint64_t)"CMSM_IDSConnection_Initialize", (uint64_t)"CMSessionManager_IDSConnection.m", 87, 0, 0, global_queue, (uint64_t)&__block_literal_global_82);
}

uint64_t CMSM_IDSConnection_IsNearbyPairedDevicePresent()
{
  uint64_t v0 = (void *)[(id)gIDSConnection copyNearbyPairedDevice];
  uint64_t v1 = [v0 isNearby];

  return v1;
}

uint64_t CMSM_IDSConnection_IsNearbyPairedDevicePresentAndConnected()
{
  uint64_t v0 = (void *)[(id)gIDSConnection copyNearbyPairedDevice];
  if ([v0 isNearby]) {
    uint64_t v1 = [v0 isConnected];
  }
  else {
    uint64_t v1 = 0;
  }

  return v1;
}

uint64_t CMSM_IDSConnection_UpdateRemoteRepliedWithInitialPlayingInfo(uint64_t result)
{
  byte_1E9358FE8 = result;
  return result;
}

uint64_t CMSM_IDSConnection_HandleNearbyDeviceStatusChange()
{
  uint64_t v0 = (void *)[(id)gIDSConnection copyNearbyPairedDevice];
  int v1 = [v0 isNearby];

  CMSM_IDSConnection_IsNearbyPairedDevicePresentAndConnected();
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v1)
  {
    CMSM_IDSClient_QueryRemote_BTDeviceConnectionStatus();
    return CMSM_IDSClient_QueryRemote_PlayingInfo();
  }
  else
  {
    uint64_t result = CMSM_IDSConnection_DeactivateIDSMXCoreSession(@"non-resumable.noNearbyPairedDevice");
    byte_1E9358FE8 = 1;
  }
  return result;
}

uint64_t CMSM_IDSConnection_DeactivateIDSMXCoreSession(const __CFString *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (CMSMUtility_IsIDSSessionActive())
  {
    id v2 = (void *)CMSM_IDSConnection_CopyMXCoreSession();
    uint64_t v3 = CMSessionEndInterruption(v2, a1);
    id v4 = MXGetNotificationSenderQueue();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __CMSM_IDSConnection_DeactivateIDSMXCoreSession_block_invoke;
    void v7[3] = &__block_descriptor_40_e5_v8__0l;
    v7[4] = v2;
    MXDispatchAsync((uint64_t)"CMSM_IDSConnection_DeactivateIDSMXCoreSession", (uint64_t)"CMSessionManager_IDSConnection.m", 211, 0, 0, v4, (uint64_t)v7);
    return v3;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
}

CFTypeRef CMSM_IDSConnection_CopyMXCoreSession()
{
  if (CMSM_IDSConnection_CopyMXCoreSession_onceToken != -1) {
    dispatch_once(&CMSM_IDSConnection_CopyMXCoreSession_onceToken, &__block_literal_global_8_1);
  }
  CFTypeRef result = (CFTypeRef)sIDSInfo;
  if (sIDSInfo)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t CMSM_IDSConnection_AddRemotePlayingInfo(const void *a1)
{
  int IsSomeClientPlayingOverSharedAudioRouteOnRemote = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  MEMORY[0x199716E90](qword_1E9359000);
  CFMutableArrayRef Mutable = (__CFArray *)qword_1E9358FD8;
  if (!qword_1E9358FD8)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    qword_1E9358FD8 = (uint64_t)Mutable;
  }
  CFArrayAppendValue(Mutable, a1);
  MEMORY[0x199716EA0](qword_1E9359000);
  uint64_t result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  if (IsSomeClientPlayingOverSharedAudioRouteOnRemote != result)
  {
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
  return result;
}

BOOL CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()
{
  MEMORY[0x199716E90](qword_1E9359000);
  BOOL v0 = byte_1E9358FC3 && qword_1E9358FD8 && CFArrayGetCount((CFArrayRef)qword_1E9358FD8) > 0;
  MEMORY[0x199716EA0](qword_1E9359000);
  return v0;
}

uint64_t cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache()
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  [(NSRecursiveLock *)[+[MXSessionManager sharedInstance] propertiesLock] lock];
  BOOL v0 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithDictionary:", -[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"));
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  obCFIndex j = [+[MXSessionManager sharedInstance] pickableRoutesDescriptions];
  uint64_t v17 = [(NSMutableDictionary *)obj countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v17)
  {
    uint64_t v15 = *(void *)v26;
    CFNumberRef v16 = v0;
    do
    {
      uint64_t v1 = 0;
      do
      {
        if (*(void *)v26 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v19 = v1;
        uint64_t v18 = *(void *)(*((void *)&v25 + 1) + 8 * v1);
        id v2 = (void *)[(NSMutableDictionary *)[+[MXSessionManager sharedInstance] pickableRoutesDescriptions] objectForKey:v18];
        id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        id v20 = v2;
        uint64_t v4 = [v2 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v4)
        {
          uint64_t v5 = v4;
          uint64_t v6 = *(void *)v22;
          do
          {
            for (uint64_t i = 0; i != v5; ++i)
            {
              if (*(void *)v22 != v6) {
                objc_enumerationMutation(v20);
              }
              uint64_t v8 = *(void **)(*((void *)&v21 + 1) + 8 * i);
              CFIndex v9 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v8];
              CFAllocatorRef v10 = (void *)[v8 objectForKey:@"IsBTRoute"];
              if (objc_msgSend(v10, "isEqualToNumber:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", 1)))
              {
                [v9 removeObjectForKey:@"OtherDevicesConnected"];
                if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote())
                {
                  id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                  id v12 = CMSM_IDSConnection_CopyNearbyPairedDeviceInfo();
                  if (v12)
                  {
                    [v11 addObject:v12];
                    [v9 setObject:v11 forKey:@"OtherDevicesConnected"];
                  }
                  if (CMSM_GetFakeSharedAudioRouteAsPicked()) {
                    objc_msgSend(v9, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", 1), @"IsCurrentlyPickedOnPairedDevice");
                  }
                }
              }
              [v3 addObject:v9];
            }
            uint64_t v5 = [v20 countByEnumeratingWithState:&v21 objects:v29 count:16];
          }
          while (v5);
        }
        BOOL v0 = v16;
        [v16 setObject:v3 forKey:v18];

        uint64_t v1 = v19 + 1;
      }
      while (v19 + 1 != v17);
      uint64_t v17 = [(NSMutableDictionary *)obj countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v17);
  }
  if (objc_msgSend(v0, "isEqualToDictionary:", -[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions")))
  {

    return [(NSRecursiveLock *)[+[MXSessionManager sharedInstance] propertiesLock] unlock];
  }
  else
  {
    [+[MXSessionManager sharedInstance] setPickableRoutesDescriptions:v0];

    [(NSRecursiveLock *)[+[MXSessionManager sharedInstance] propertiesLock] unlock];
    return CMSMNotificationUtility_PostPickableRoutesDidChange(1);
  }
}

uint64_t CMSM_IDSConnection_RemoveRemotePlayingInfo(CFIndex a1)
{
  int IsSomeClientPlayingOverSharedAudioRouteOnRemote = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  MEMORY[0x199716E90](qword_1E9359000);
  if (!qword_1E9358FD8 || !CFArrayGetCount((CFArrayRef)qword_1E9358FD8))
  {
    JUMPOUT(0x199716EA0);
  }
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1E9358FD8, a1);
  MEMORY[0x199716EA0](qword_1E9359000);
  uint64_t result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  if (IsSomeClientPlayingOverSharedAudioRouteOnRemote != result)
  {
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
  return result;
}

uint64_t CMSM_IDSConnection_ResetRemotePlayingInfo()
{
  int IsSomeClientPlayingOverSharedAudioRouteOnRemote = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  MEMORY[0x199716E90](qword_1E9359000);
  if (!qword_1E9358FD8 || !CFArrayGetCount((CFArrayRef)qword_1E9358FD8))
  {
    JUMPOUT(0x199716EA0);
  }
  CFArrayRemoveAllValues((CFMutableArrayRef)qword_1E9358FD8);
  MEMORY[0x199716EA0](qword_1E9359000);
  uint64_t result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  if (IsSomeClientPlayingOverSharedAudioRouteOnRemote != result)
  {
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
  return result;
}

uint64_t CMSM_IDSConnection_DidRemoteReplyWithInitialPlayingInfo()
{
  return byte_1E9358FE8;
}

void CMSM_IDSConnection_StartWaitForRemoteToReplyWithInitialPlayingInfoTimer(float a1)
{
  MEMORY[0x199716E90](qword_1E9359000);
  if (qword_1E9358FF0)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1E9358FF0);
    if (qword_1E9358FF0)
    {
      dispatch_release((dispatch_object_t)qword_1E9358FF0);
      qword_1E9358FF0 = 0;
    }
  }
  MEMORY[0x199716EA0](qword_1E9359000);
  MEMORY[0x199716E90](qword_1E9359000);
  id v2 = MXGetSerialQueue();
  qword_1E9358FF0 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v2, a1, (uint64_t)&__block_literal_global_14, 0, 0);
  JUMPOUT(0x199716EA0);
}

void CMSM_IDSConnection_RouteToSharedAudioRouteUponReceivingOwnership()
{
  if ([+[MXSessionManager sharedInstance] carPlayIsConnected])
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (qword_1E9358FB8)
    {
      CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)qword_1E9358FB8);
      uint64_t A2DPPort = cmsmGetA2DPPort(Copy);
      if (Copy) {
        CFRelease(Copy);
      }
    }
    else
    {
      uint64_t A2DPPort = cmsmGetA2DPPort(0);
    }
    if (cmsmShouldRequestOwnershipOnSharedAudioRoute(0, A2DPPort)
      && !vaeRequestOwnershipOnBTPort(A2DPPort))
    {
      ArrayFromPortID = CMSMVAUtility_CreateArrayFromPortID(A2DPPort);
      Routable = cmsmCopyPartnerPortsToMakeRoutable(ArrayFromPortID);
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Routable && CFArrayGetCount(Routable) >= 1)
      {
        v7.length = CFArrayGetCount(Routable);
        v7.id location = 0;
        CFArrayAppendArray(Mutable, Routable, v7);
      }
      if (ArrayFromPortID && CFArrayGetCount(ArrayFromPortID) >= 1)
      {
        v8.length = CFArrayGetCount(ArrayFromPortID);
        v8.id location = 0;
        CFArrayAppendArray(Mutable, ArrayFromPortID, v8);
      }
      if (!vaeDoesBTPortSupportInEarDetection(A2DPPort)
        || CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(A2DPPort))
      {
        vaemMakeArrayOfPortsRoutable(Mutable, 1, 0, qword_1E9359C88, 0);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (Routable) {
        CFRelease(Routable);
      }
      if (ArrayFromPortID)
      {
        CFRelease(ArrayFromPortID);
      }
    }
  }
}

void CMSM_IDSConnection_StopWaitForRemoteToReplyWithInitialPlayingInfoTimer()
{
  global_queue = dispatch_get_global_queue(0, 0);
  MXDispatchAsync((uint64_t)"CMSM_IDSConnection_StopWaitForRemoteToReplyWithInitialPlayingInfoTimer", (uint64_t)"CMSessionManager_IDSConnection.m", 381, 0, 0, global_queue, (uint64_t)&__block_literal_global_16_0);
}

uint64_t CMSM_IDSConnection_IsWaitingForGizmoPlayingInfo()
{
  return byte_1E9358FC4;
}

void CMSM_IDSConnection_ResetWaitingForGizmoPlayingInfo()
{
  byte_1E9358FC4 = 0;
}

id CMSM_IDSConnection_GetRemotePlayingInfo()
{
  MEMORY[0x199716E90](qword_1E9359000);
  id v0 = objc_alloc(MEMORY[0x1E4F1C978]);
  id v1 = (id)[v0 initWithArray:qword_1E9358FD8 copyItems:1];
  MEMORY[0x199716EA0](qword_1E9359000);
  return v1;
}

uint64_t CMSM_IDSConnection_SetRemotePlayingInfo(const __CFArray *a1)
{
  int IsSomeClientPlayingOverSharedAudioRouteOnRemote = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  MEMORY[0x199716E90](qword_1E9359000);
  if (qword_1E9358FD8)
  {
    CFRelease((CFTypeRef)qword_1E9358FD8);
    qword_1E9358FD8 = 0;
  }
  if (a1) {
    qword_1E9358FD8 = (uint64_t)CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
  }
  MEMORY[0x199716EA0](qword_1E9359000);
  uint64_t result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  if (IsSomeClientPlayingOverSharedAudioRouteOnRemote != result)
  {
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
  return result;
}

uint64_t CMSM_IDSConnection_CopyNearbyPairedDevice()
{
  return [(id)gIDSConnection copyNearbyPairedDevice];
}

BOOL CMSM_IDSConnection_IsTimerForRemotePlayingInfoReplyExpired()
{
  id v0 = (void *)[(id)gIDSConnection copyNearbyPairedDevice];
  int v1 = [v0 isNearby];

  if (!v1) {
    return 0;
  }
  MEMORY[0x199716E90](qword_1E9359000);
  uint64_t v2 = qword_1E9358FF0;
  MEMORY[0x199716EA0](qword_1E9359000);
  return v2 == 0;
}

id CMSM_IDSConnection_CopyNearbyPairedDeviceInfo()
{
  id v0 = (void *)[(id)gIDSConnection copyNearbyPairedDevice];
  int v1 = [v0 isNearby];

  if (!v1) {
    return 0;
  }
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v3 = (void *)[(id)gIDSConnection copyNearbyPairedDeviceUniqueID];
  if (v3) {
    [v2 setObject:v3 forKey:@"ConnectedDevice_UniqueID"];
  }

  uint64_t v4 = (void *)[(id)gIDSConnection copyNearbyPairedDeviceName];
  if (v4) {
    [v2 setObject:v4 forKey:@"ConnectedDevice_Name"];
  }

  uint64_t v5 = (void *)[(id)gIDSConnection copyNearbyPairedDeviceModelIdentifier];
  if (v5) {
    [v2 setObject:v5 forKey:@"ConnectedDevice_ModelIdentifier"];
  }

  uint64_t v6 = (void *)[(id)gIDSConnection copyNearbyPairedDeviceProductName];
  if (v6) {
    [v2 setObject:v6 forKey:@"ConnectedDevice_ProductName"];
  }

  if (qword_1E9358FC8)
  {
    CFRange v7 = (void *)CFRetain((CFTypeRef)qword_1E9358FC8);
    if (v7) {
      [v2 setObject:v7 forKey:@"ConnectedDevice_RouteUID"];
    }
  }
  else
  {
    CFRange v7 = 0;
  }

  objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()), @"ConnectedDevice_Playing");
  return v2;
}

void CMSM_IDSConnection_UpdateRemoteCurrentRouteUID(const void *a1)
{
  int v1 = (const void *)qword_1E9358FC8;
  qword_1E9358FC8 = (uint64_t)a1;
  if (a1) {
    CFRetain(a1);
  }
  if (v1)
  {
    CFRelease(v1);
  }
}

void CMSM_IDSConnection_UpdateSharedAudioRouteMacAddressOnLocal(const __CFString *a1, int a2)
{
  if (CMSMDeviceState_ItsAnAppleWatch())
  {
    if (!a1) {
      goto LABEL_19;
    }
    if (!qword_1E9358FB0) {
      goto LABEL_19;
    }
    if (!FigCFEqual()) {
      goto LABEL_19;
    }
    CFArrayRef v4 = (const __CFArray *)qword_1E9358FB8;
    if (!qword_1E9358FB8) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  if (!a2 || !qword_1E9358FB8)
  {
    if (!a1 || !qword_1E9358FB0 || !FigCFEqual() || (CFArrayRef v4 = (const __CFArray *)qword_1E9358FB8) == 0)
    {
LABEL_19:
      cmsm_IDSConnection_updateSharedAudioRoutePortIDsOnLocal(a1);
      return;
    }
LABEL_17:
    if (CFArrayGetCount(v4)) {
      return;
    }
    goto LABEL_19;
  }
  CFArrayRemoveAllValues((CFMutableArrayRef)qword_1E9358FB8);
  if (byte_1E9358FC3)
  {
    byte_1E9358FC3 = 0;
    cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
}

void cmsm_IDSConnection_updateSharedAudioRoutePortIDsOnLocal(CFStringRef theString)
{
  if (theString)
  {
    uint64_t v1 = *MEMORY[0x1E4F1CF80];
    MutableCFArrayRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
    if (MutableCopy)
    {
      id v3 = MutableCopy;
      CFStringAppend(MutableCopy, @"-tacl");
      uint64_t v4 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v3, 1, *MEMORY[0x1E4F20660], 0);
      if (v4)
      {
        uint64_t v5 = (const void *)v4;
        CFNumberRef number = 0;
        AudioObjectID valuePtr = 0;
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        CFIndex v9 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef *))(v8 + 48);
        if (v9)
        {
          v9(CMBaseObject, 0x1EE5F4148, v1, &number);
          if (number)
          {
            CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
            if (!MXBluetoothServices_IsPortBTManaged(valuePtr, 1)) {
              CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs(valuePtr, 1, 0);
            }
            if (number) {
              CFRelease(number);
            }
          }
        }
        CFRelease(v5);
      }
      CFRelease(v3);
    }
  }
}

uint64_t CMSM_IDSConnection_UpdateRemoteIsUsingSharedAudioRoute(uint64_t result)
{
  if (byte_1E9358FC3 != result)
  {
    byte_1E9358FC3 = result;
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
  return result;
}

void CMSM_IDSConnection_DelaySharedAudioRoutingUntilRemoteInitialPlayingInfoIsReceived(const void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (CMSMDeviceState_ItsAnAppleWatch())
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    CFTypeRef v3 = CMSMUtility_CopySystemAudioRoutingContextUUID();
    if (dword_1E9359ED0)
    {
      int v10 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1) {
      CFRetain(a1);
    }
    if (dword_1E9359ED0)
    {
      int v10 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    byte_1E9358FC4 = 1;
    dispatch_time_t v6 = dispatch_time(0, 20000000000);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __CMSM_IDSConnection_DelaySharedAudioRoutingUntilRemoteInitialPlayingInfoIsReceived_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = a1;
    void block[5] = v3;
    dispatch_after(v6, global_queue, block);
  }
}

void CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs(AudioObjectID a1, int a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  AudioObjectID valuePtr = a1;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFStringRef v7 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(valuePtr);
  CFTypeRef cf = 0;
  CMSMUtility_CreateTokensFromDeviceUID(v7, (CFStringRef *)&cf, 0);
  if (!qword_1E9358FB8) {
    qword_1E9358FB8 = (uint64_t)CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v8 = qword_1E9358FB0;
  if (!qword_1E9358FB0)
  {
    qword_1E9358FB0 = (uint64_t)cf;
    if (!cf)
    {
      int v9 = 0;
      BOOL v10 = a2 != 0;
      goto LABEL_16;
    }
    CFRetain(cf);
    uint64_t v8 = qword_1E9358FB0;
  }
  int v9 = 0;
  BOOL v10 = a2 != 0;
  if (a2 && v8)
  {
    int v11 = FigCFEqual();
    if (a3) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    int v9 = v12;
    BOOL v10 = 1;
  }
LABEL_16:
  int v33 = v9;
  if (dword_1E9359ED0)
  {
    unsigned int v36 = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v14 = v36;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v14 & 0xFFFFFFFE;
    }
    if (v15)
    {
      CFNumberRef v16 = @"NO";
      if (v33) {
        CFNumberRef v16 = @"YES";
      }
      LODWORD(outData[0]) = 136315394;
      *(void *)((char *)outData + 4) = "CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs";
      WORD6(outData[0]) = 2114;
      *(void *)((char *)outData + 14) = v16;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigCFEqual())
  {
    if (FigCFArrayContainsValue() || !vaemIsPortPresentInConnectedOutputPorts((uint64_t)v6)) {
      goto LABEL_54;
    }
    CFArrayAppendValue((CFMutableArrayRef)qword_1E9358FB8, v6);
    int v17 = a3;
    if (!dword_1E9359ED0) {
      goto LABEL_52;
    }
    BOOL v18 = v10;
    CFNumberRef v19 = v6;
    unsigned int v36 = 0;
    id v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v21 = v36;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = v21 & 0xFFFFFFFE;
    }
    if (!v22) {
      goto LABEL_50;
    }
    goto LABEL_45;
  }
  if (!a2
    && (!vaeDoesBTPortSupportInEarDetection(valuePtr)
     || !CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(valuePtr))
    && vaeDoesBTPortSupportInEarDetection(valuePtr))
  {
    goto LABEL_70;
  }
  CFArrayRemoveAllValues((CFMutableArrayRef)qword_1E9358FB8);
  if (vaemIsPortPresentInConnectedOutputPorts((uint64_t)v6))
  {
    CFArrayAppendValue((CFMutableArrayRef)qword_1E9358FB8, v6);
    long long v23 = (const void *)qword_1E9358FB0;
    qword_1E9358FB0 = (uint64_t)cf;
    if (cf) {
      CFRetain(cf);
    }
    BOOL v18 = v10;
    if (v23) {
      CFRelease(v23);
    }
    int v17 = a3;
    if (!dword_1E9359ED0) {
      goto LABEL_51;
    }
    CFNumberRef v19 = v6;
    unsigned int v36 = 0;
    long long v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v25 = v36;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (!v26)
    {
LABEL_50:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFNumberRef v6 = v19;
LABEL_51:
      BOOL v10 = v18;
LABEL_52:
      if (v17) {
        cmsm_IDSConnection_UpdateSharedAudioRouteMacAddressOnRemote(v33, valuePtr);
      }
      goto LABEL_54;
    }
LABEL_45:
    LODWORD(outData[0]) = 136315651;
    *(void *)((char *)outData + 4) = "CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs";
    WORD6(outData[0]) = 1024;
    *(_DWORD *)((char *)outData + 14) = valuePtr;
    WORD1(outData[1]) = 2113;
    *(void *)((char *)&outData[1] + 4) = cf;
    _os_log_send_and_compose_impl();
    goto LABEL_50;
  }
LABEL_54:
  if (v10 && qword_1E9358FB8 && CFArrayGetCount((CFArrayRef)qword_1E9358FB8) >= 1)
  {
    CFNumberRef v32 = v6;
    memset(outData, 0, sizeof(outData));
    unsigned int PartnersForPort = vaeGetPartnersForPort(valuePtr, outData);
    if (PartnersForPort)
    {
      uint64_t v28 = PartnersForPort;
      CFTypeRef v29 = outData;
      while (1)
      {
        CFNumberRef v30 = CFNumberCreate(v5, kCFNumberSInt32Type, v29);
        if (vaemIsPortPresentInConnectedOutputPorts((uint64_t)v30))
        {
          if (!FigCFArrayContainsValue()) {
            break;
          }
        }
        if (v30) {
          goto LABEL_62;
        }
LABEL_63:
        CFTypeRef v29 = (_OWORD *)((char *)v29 + 4);
        if (!--v28) {
          goto LABEL_69;
        }
      }
      if (dword_1E9359ED0)
      {
        uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFArrayAppendValue((CFMutableArrayRef)qword_1E9358FB8, v30);
      if (!v30) {
        goto LABEL_63;
      }
LABEL_62:
      CFRelease(v30);
      goto LABEL_63;
    }
LABEL_69:
    CFNumberRef v6 = v32;
  }
LABEL_70:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t cmsm_IDSConnection_UpdateSharedAudioRouteMacAddressOnRemote(int a1, uint64_t a2)
{
  BOOL IsSomeClientPlayingOverSharedAudioRouteOnRemote = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
  if (a1 && IsSomeClientPlayingOverSharedAudioRouteOnRemote)
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (qword_1E9358FB8 && CFArrayGetCount((CFArrayRef)qword_1E9358FB8) == 3) {
      CFArrayRemoveAllValues((CFMutableArrayRef)qword_1E9358FB8);
    }
    uint64_t result = CMSM_IDSClient_NotifyRemote_UpdateSharedAudioRouteMacAddress(0);
LABEL_21:
    if (byte_1E9358FC3)
    {
      byte_1E9358FC3 = 0;
      return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
    }
    return result;
  }
  if (dword_1E9359ED0)
  {
    CFNumberRef v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!MXBluetoothServices_IsPortBTManaged(a2, 1)) {
    CMSM_IDSClient_NotifyRemote_UpdateSharedAudioRouteMacAddress((const void *)qword_1E9358FB0);
  }
  uint64_t result = CMSMDeviceState_ItsAnAppleWatch();
  if (result)
  {
    if (dword_1E9359ED0)
    {
      uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    int v9 = (void *)[(id)gIDSConnection copyNearbyPairedDevice];
    int v10 = [v9 isNearby];

    if (v10
      && (MEMORY[0x199716E90](qword_1E9359000), uint64_t v11 = qword_1E9358FF0, MEMORY[0x199716EA0](qword_1E9359000), !v11)
      || (uint64_t result = CMSM_IDSConnection_IsPairedToAnotherDevice(), !result))
    {
      if (dword_1E9359ED0)
      {
        BOOL v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
      if (!result || byte_1E9359C30)
      {
        if (dword_1E9359ED0)
        {
          CFNumberRef v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_21;
      }
    }
  }
  return result;
}

void CMSM_IDSConnection_RemovePortFromSharedAudioRoutePortIDs(int a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (qword_1E9358FB8)
  {
    if (CFArrayGetCount((CFArrayRef)qword_1E9358FB8) >= 1)
    {
      CFIndex v2 = 0;
      while (1)
      {
        int valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1E9358FB8, v2);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr == a1) {
          break;
        }
        if (++v2 >= CFArrayGetCount((CFArrayRef)qword_1E9358FB8)) {
          goto LABEL_10;
        }
      }
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1E9358FB8, v2);
    }
LABEL_10:
    if (!qword_1E9358FB8 || !CFArrayGetCount((CFArrayRef)qword_1E9358FB8))
    {
      if (qword_1E9358FB0)
      {
        CFRelease((CFTypeRef)qword_1E9358FB0);
        qword_1E9358FB0 = 0;
      }
    }
  }
}

uint64_t CMSM_IDSConnection_UpdateSharedAudioRouteIsConnectedToLocal(uint64_t result)
{
  if (byte_1E9358FC0 != result)
  {
    byte_1E9358FC0 = result;
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
  return result;
}

uint64_t CMSM_IDSConnection_UpdateSharedAudioRouteIsConnectedToRemote(uint64_t result)
{
  if (byte_1E9358FC1 != result)
  {
    byte_1E9358FC1 = result;
    if (!result) {
      CMSM_IDSConnection_DeactivateIDSMXCoreSession(@"non-resumable.sharedAudioRouteIsNotConnectedToRemote");
    }
    return cmsm_IDSConnection_UpdateOtherDevicesConnectedInfoInPickableRoutesCache();
  }
  return result;
}

uint64_t CMSM_IDSConnection_UpdateLocalOwnsSharedAudioRoute(uint64_t result)
{
  byte_1E9358FC2 = result;
  return result;
}

uint64_t CMSM_IDSConnection_IsRemoteUsingSharedAudioRoute()
{
  return byte_1E9358FC3;
}

uint64_t CMSM_IDSConnection_GetMessagingQueue()
{
  if (CMSM_IDSConnection_GetMessagingQueue_once != -1) {
    dispatch_once(&CMSM_IDSConnection_GetMessagingQueue_once, &__block_literal_global_31);
  }
  return CMSM_IDSConnection_GetMessagingQueue_messagingQueue;
}

void CMSM_IDSConnection_SetMessageWaitSemaphore(const void *a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
  CFDictionarySetValue(Mutable, @"lock", v3);
  if (a1 && Mutable)
  {
    MEMORY[0x199716E90](qword_1E9359000);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1E9358FF8, a1, Mutable);
    MEMORY[0x199716EA0](qword_1E9359000);
LABEL_5:
    CFRelease(Mutable);
    goto LABEL_6;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (Mutable) {
    goto LABEL_5;
  }
LABEL_6:
  dispatch_release(v3);
}

void CMSM_IDSConnection_WaitForReply(const void *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)cmsm_IDSConnection_CopyOutstandingMessage(a1);
  CFArrayRef Value = CFDictionaryGetValue(v2, @"lock");
  dispatch_time_t v4 = dispatch_time(0, 6000000000);
  if (dispatch_semaphore_wait(Value, v4))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    MEMORY[0x199716E90](qword_1E9359000);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1E9358FF8, a1);
    MEMORY[0x199716EA0](qword_1E9359000);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!v2) {
      return;
    }
  }
  CFRelease(v2);
}

CFTypeRef cmsm_IDSConnection_CopyOutstandingMessage(const void *a1)
{
  MEMORY[0x199716E90](qword_1E9359000);
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1E9358FF8, a1);
  if (Value) {
    CFTypeRef v3 = CFRetain(Value);
  }
  else {
    CFTypeRef v3 = 0;
  }
  MEMORY[0x199716EA0](qword_1E9359000);
  return v3;
}

void CMSM_IDSConnection_SetMessageReplyComplete(const void *a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)cmsm_IDSConnection_CopyOutstandingMessage(a1);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    CFArrayRef Value = CFDictionaryGetValue(v1, @"lock");
    dispatch_semaphore_signal(Value);
    CFRelease(v2);
  }
}

uint64_t CMSM_IDSConnection_IsPairedToAnotherDevice()
{
  uint64_t v3 = 0;
  dispatch_time_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__19;
  CFStringRef v7 = __Block_byref_object_dispose__19;
  id v0 = (void *)getNRPairedDeviceRegistryClass_softClass;
  uint64_t v8 = getNRPairedDeviceRegistryClass_softClass;
  if (!getNRPairedDeviceRegistryClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getNRPairedDeviceRegistryClass_block_invoke;
    v2[3] = &unk_1E57C5B30;
    void v2[4] = &v3;
    __getNRPairedDeviceRegistryClass_block_invoke((uint64_t)v2);
    id v0 = (void *)v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return objc_msgSend((id)objc_msgSend(v0, "sharedInstance"), "isPaired");
}

void sub_194EAD5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getNRPairedDeviceRegistryClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!NanoRegistryLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    _OWORD v3[2] = (void *)3221225472;
    v3[3] = __NanoRegistryLibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E57CBB38;
    uint64_t v5 = 0;
    NanoRegistryLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!NanoRegistryLibraryCore_frameworkLibrary)
    {
      abort_report_np();
LABEL_8:
      __getNRPairedDeviceRegistryClass_block_invoke_cold_1();
    }
    if (v3[0]) {
      free(v3[0]);
    }
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4singletonVolumeController_setCachedRemoteVolumController(gSingletonVolumeController, 0) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    goto LABEL_8;
  }
  getNRPairedDeviceRegistryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __NanoRegistryLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  NanoRegistryLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t __getBMDeviceSilentModeClass_block_invoke_cold_1()
{
  return __getPAAccessLoggerClass_block_invoke_cold_1();
}

uint64_t __getPAAccessLoggerClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getPAApplicationClass_block_invoke_cold_1(v0);
}

uint64_t __getPAApplicationClass_block_invoke_cold_1()
{
  return __getPATCCAccessClass_block_invoke_cold_1();
}

uint64_t __getPATCCAccessClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getCoreTelephonyClientClass_block_invoke_cold_1(v0);
}

uint64_t __getCoreTelephonyClientClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getCTBundleClass_block_invoke_cold_1(v0);
}

uint64_t __getCTBundleClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getSTMediaStatusDomainPublisherClass_block_invoke_cold_1(v0);
}

uint64_t __getSTMediaStatusDomainPublisherClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getSTMutableMediaStatusDomainDataClass_block_invoke_cold_1(v0);
}

uint64_t __getSTMutableMediaStatusDomainDataClass_block_invoke_cold_1()
{
  return __getSTAttributedEntityClass_block_invoke_cold_1();
}

uint64_t __getSTAttributedEntityClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getSTExecutableIdentityClass_block_invoke_cold_1(v0);
}

uint64_t __getSTExecutableIdentityClass_block_invoke_cold_1()
{
  return __getSTActivityAttributionClass_block_invoke_cold_1();
}

uint64_t __getSTActivityAttributionClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke_cold_1(v0);
}

uint64_t __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getGEOCountryConfigurationClass_block_invoke_cold_1(v0);
}

uint64_t __getGEOCountryConfigurationClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return -[MXDebugPlatform simulateCrash:](v0);
}

void __getAPSubjectClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  __getAPApplicationClass_block_invoke_cold_1(v0);
}

void __getAPApplicationClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  __getAAAudioSessionControlClass_block_invoke_cold_1(v0);
}

void __getAAAudioSessionControlClass_block_invoke_cold_1()
{
}

void __getNRPairedDeviceRegistryClass_block_invoke_cold_1()
{
}

OSStatus AudioDeviceStart(AudioObjectID inDevice, AudioDeviceIOProcID inProcID)
{
  return MEMORY[0x1F40D6FB0](*(void *)&inDevice, inProcID);
}

OSStatus AudioDeviceStop(AudioObjectID inDevice, AudioDeviceIOProcID inProcID)
{
  return MEMORY[0x1F40D6FC0](*(void *)&inDevice, inProcID);
}

OSStatus AudioObjectAddPropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  return MEMORY[0x1F40D6FE0](*(void *)&inObjectID, inAddress, inListener, inClientData);
}

OSStatus AudioObjectGetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  return MEMORY[0x1F40D6FF8](*(void *)&inObjectID, inAddress, *(void *)&inQualifierDataSize, inQualifierData, ioDataSize, outData);
}

OSStatus AudioObjectGetPropertyDataSize(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *outDataSize)
{
  return MEMORY[0x1F40D7000](*(void *)&inObjectID, inAddress, *(void *)&inQualifierDataSize, inQualifierData, outDataSize);
}

Boolean AudioObjectHasProperty(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress)
{
  return MEMORY[0x1F40D7008](*(void *)&inObjectID, inAddress);
}

OSStatus AudioObjectIsPropertySettable(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, Boolean *outIsSettable)
{
  return MEMORY[0x1F40D7010](*(void *)&inObjectID, inAddress, outIsSettable);
}

OSStatus AudioObjectRemovePropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  return MEMORY[0x1F40D7018](*(void *)&inObjectID, inAddress, inListener, inClientData);
}

void AudioServicesPlaySystemSoundWithCompletion(SystemSoundID inSystemSoundID, void *inCompletionBlock)
{
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1F40D74A8](bundle, key, value, tableName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

CFCalendarRef CFCalendarCopyCurrent(void)
{
  return (CFCalendarRef)MEMORY[0x1F40D7680]();
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  va_start(va, componentDesc);
  uint64_t v3 = va_arg(va, void);
  return MEMORY[0x1F40D7698](calendar, v3, at);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7928](theDate);
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B68](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1F40D7D78](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1F40D7D98](allocator, locale, style);
}

CFStringRef CFNumberFormatterCreateStringWithValue(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberType numberType, const void *valuePtr)
{
  return (CFStringRef)MEMORY[0x1F40D7DB0](allocator, formatter, numberType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7EC0](keysToFetch, applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F28](allocator, propertyList, mutabilityOption);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8390](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFComparisonResult CFStringCompareWithOptionsAndLocale(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions, CFLocaleRef locale)
{
  return MEMORY[0x1F40D8398](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions, locale);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.id location = v3;
  return result;
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1F40D8608](theString, suffix);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

uint64_t CMBaseGetClassID()
{
  return MEMORY[0x1F40DB900]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x1F40DB910]();
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x1F40DB920]();
}

uint64_t CMBaseObjectIsMemberOfClass()
{
  return MEMORY[0x1F40DB938]();
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x1F40DBB80]();
}

uint64_t CMNotificationCenterAddListener()
{
  return MEMORY[0x1F40DBCA8]();
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x1F40DBCB8]();
}

uint64_t CMNotificationCenterPostNotification()
{
  return MEMORY[0x1F40DBCC0]();
}

uint64_t CMNotificationCenterRemoveListener()
{
  return MEMORY[0x1F40DBCD8]();
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1F40DC0C8](time1, time2);
}

CMTime *__cdecl CMTimeConvertScale(CMTime *__return_ptr retstr, CMTime *time, int32_t newTimescale, CMTimeRoundingMethod method)
{
  return (CMTime *)MEMORY[0x1F40DC0D0](retstr, time, *(void *)&newTimescale, *(void *)&method);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x1F40DC100](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1F40DC108](retstr, value, *(void *)&timescale);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1F40DC120](retstr, *(void *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeMultiply(CMTime *__return_ptr retstr, CMTime *time, int32_t multiplier)
{
  return (CMTime *)MEMORY[0x1F40DC170](retstr, time, *(void *)&multiplier);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1F40DC1F0](retstr, lhs, rhs);
}

uint64_t CelestialCFCreatePropertyListForModelAndBundleIdentifier()
{
  return MEMORY[0x1F40DC380]();
}

uint64_t CelestialGetModelSpecificName()
{
  return MEMORY[0x1F40DC390]();
}

uint64_t CreateACQDispatchID()
{
  return MEMORY[0x1F410B6B8]();
}

uint64_t FigAtomicCompareAndSwap32()
{
  return MEMORY[0x1F40DC590]();
}

uint64_t FigAtomicIncrement32()
{
  return MEMORY[0x1F40DC5A8]();
}

uint64_t FigAtomicIncrement64()
{
  return MEMORY[0x1F40DC5B0]();
}

uint64_t FigCFArrayAppendArray()
{
  return MEMORY[0x1F40DC7E0]();
}

uint64_t FigCFArrayAppendInt32()
{
  return MEMORY[0x1F40DC810]();
}

uint64_t FigCFArrayContainsValue()
{
  return MEMORY[0x1F40DC848]();
}

uint64_t FigCFArrayCreateMutableCopy()
{
  return MEMORY[0x1F40DC870]();
}

uint64_t FigCFArrayGetInt64AtIndex()
{
  return MEMORY[0x1F40DC8D8]();
}

uint64_t FigCFArrayGetValueAtIndex()
{
  return MEMORY[0x1F40DC8F0]();
}

uint64_t FigCFDictionaryCopyArrayOfKeys()
{
  return MEMORY[0x1F40DC950]();
}

uint64_t FigCFDictionaryCopyArrayOfValues()
{
  return MEMORY[0x1F40DC958]();
}

uint64_t FigCFDictionaryCreateMutableCopy()
{
  return MEMORY[0x1F40DC970]();
}

uint64_t FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks()
{
  return MEMORY[0x1F40DC978]();
}

uint64_t FigCFDictionaryGetBooleanIfPresent()
{
  return MEMORY[0x1F40DC988]();
}

uint64_t FigCFDictionaryGetCount()
{
  return MEMORY[0x1F40DC9C8]();
}

uint64_t FigCFDictionaryGetDoubleIfPresent()
{
  return MEMORY[0x1F40DC9E0]();
}

uint64_t FigCFDictionaryGetFloatIfPresent()
{
  return MEMORY[0x1F40DC9F0]();
}

uint64_t FigCFDictionaryGetInt32IfPresent()
{
  return MEMORY[0x1F40DCA00]();
}

uint64_t FigCFDictionaryGetInt64IfPresent()
{
  return MEMORY[0x1F40DCA08]();
}

uint64_t FigCFDictionaryGetIntIfPresent()
{
  return MEMORY[0x1F40DCA10]();
}

uint64_t FigCFDictionaryGetValue()
{
  return MEMORY[0x1F40DCA38]();
}

uint64_t FigCFDictionarySetDouble()
{
  return MEMORY[0x1F40DCA98]();
}

uint64_t FigCFDictionarySetFloat()
{
  return MEMORY[0x1F40DCAA0]();
}

uint64_t FigCFDictionarySetFloat32()
{
  return MEMORY[0x1F40DCAA8]();
}

uint64_t FigCFDictionarySetInt()
{
  return MEMORY[0x1F40DCAB0]();
}

uint64_t FigCFDictionarySetInt32()
{
  return MEMORY[0x1F40DCAC0]();
}

uint64_t FigCFDictionarySetValue()
{
  return MEMORY[0x1F40DCAE8]();
}

uint64_t FigCFDictionarySetValueFromKeyInDict()
{
  return MEMORY[0x1F40DCAF0]();
}

uint64_t FigCFEqual()
{
  return MEMORY[0x1F40DCAF8]();
}

uint64_t FigCFNumberCreateFloat32()
{
  return MEMORY[0x1F40DCB18]();
}

uint64_t FigCFNumberCreateFloat64()
{
  return MEMORY[0x1F40DCB20]();
}

uint64_t FigCFNumberCreateSInt32()
{
  return MEMORY[0x1F40DCB30]();
}

uint64_t FigCFNumberCreateSInt64()
{
  return MEMORY[0x1F40DCB38]();
}

uint64_t FigCFNumberCreateUInt32()
{
  return MEMORY[0x1F40DCB50]();
}

uint64_t FigCFNumberCreateUInt64()
{
  return MEMORY[0x1F40DCB58]();
}

uint64_t FigCFNumberGetFloat32()
{
  return MEMORY[0x1F40DCB68]();
}

uint64_t FigCFNumberGetSInt32()
{
  return MEMORY[0x1F40DCB78]();
}

uint64_t FigCFNumberGetSInt64()
{
  return MEMORY[0x1F40DCB80]();
}

uint64_t FigCFNumberGetUInt32()
{
  return MEMORY[0x1F40DCB90]();
}

uint64_t FigCFNumberGetUInt64()
{
  return MEMORY[0x1F40DCB98]();
}

uint64_t FigCFStringFind()
{
  return MEMORY[0x1F40DCC18]();
}

uint64_t FigCFStringGetCStringPtrAndBufferToFree()
{
  return MEMORY[0x1F40DCC20]();
}

uint64_t FigCFWeakReferenceHolderCopyReferencedObject()
{
  return MEMORY[0x1F40DCCA0]();
}

uint64_t FigCFWeakReferenceHolderCreateWithReferencedObject()
{
  return MEMORY[0x1F40DCCA8]();
}

uint64_t FigCFWeakReferenceHolderGetTypeID()
{
  return MEMORY[0x1F40DCCB0]();
}

uint64_t FigCommonMediaProcessInitialization()
{
  return MEMORY[0x1F40DCF30]();
}

uint64_t FigDebugIsInternalBuild()
{
  return MEMORY[0x1F40DD2D8]();
}

uint64_t FigDispatchAsyncAndWait()
{
  return MEMORY[0x1F40DD368]();
}

uint64_t FigDispatchCreateDispatchSourceBlock()
{
  return MEMORY[0x1F40DD380]();
}

uint64_t FigEndpointActivate()
{
  return MEMORY[0x1F40DD3E8]();
}

uint64_t FigEndpointAggregateGetClassID()
{
  return MEMORY[0x1F40DD3F8]();
}

uint64_t FigEndpointAggregateGetFigEndpoint()
{
  return MEMORY[0x1F40DD400]();
}

uint64_t FigEndpointCopyFirstStreamOfType()
{
  return MEMORY[0x1F40DD440]();
}

uint64_t FigEndpointCopyStreamsForTypeAndSubType()
{
  return MEMORY[0x1F40DD448]();
}

uint64_t FigEndpointDeactivate()
{
  return MEMORY[0x1F40DD450]();
}

uint64_t FigEndpointExtendedGetClassID()
{
  return MEMORY[0x1F40DD458]();
}

uint64_t FigEndpointGetCMBaseObject()
{
  return MEMORY[0x1F40DD468]();
}

uint64_t FigEndpointGetClassID()
{
  return MEMORY[0x1F40DD470]();
}

uint64_t FigEndpointGetSupportedFeatures()
{
  return MEMORY[0x1F40DD478]();
}

uint64_t FigEndpointGetTypeID()
{
  return MEMORY[0x1F40DD480]();
}

uint64_t FigEndpointManagerCopyMatchingEndpoints()
{
  return MEMORY[0x1F40DD488]();
}

uint64_t FigEndpointManagerGetCMBaseObject()
{
  return MEMORY[0x1F40DD490]();
}

uint64_t FigEndpointManagerGetClassID()
{
  return MEMORY[0x1F40DD498]();
}

uint64_t FigEndpointRPCCacheApplyObjectDeltas()
{
  return MEMORY[0x1F40DD4E0]();
}

uint64_t FigEndpointRPCCacheComputeCacheDeltas()
{
  return MEMORY[0x1F40DD4E8]();
}

uint64_t FigEndpointRPCCacheCopyAvailableObjects()
{
  return MEMORY[0x1F40DD4F0]();
}

uint64_t FigEndpointRPCCacheCreate()
{
  return MEMORY[0x1F40DD4F8]();
}

uint64_t FigEndpointRPCCacheDispose()
{
  return MEMORY[0x1F40DD500]();
}

uint64_t FigEndpointServerSetActiveEndpoint()
{
  return MEMORY[0x1F40DD528]();
}

uint64_t FigEndpointStartServerEx()
{
  return MEMORY[0x1F40DD538]();
}

uint64_t FigEndpointStreamGetCMBaseObject()
{
  return MEMORY[0x1F40DD570]();
}

uint64_t FigEndpointStreamResume()
{
  return MEMORY[0x1F40DD580]();
}

uint64_t FigEndpointStreamSuspend()
{
  return MEMORY[0x1F40DD598]();
}

uint64_t FigEndpointUtility_CopyEndpointTransportType()
{
  return MEMORY[0x1F40DD5C0]();
}

uint64_t FigEndpointUtility_CopyEndpointType()
{
  return MEMORY[0x1F40DD5C8]();
}

uint64_t FigEndpointUtility_EndpointPredicate_ContainsID()
{
  return MEMORY[0x1F40DD5D0]();
}

uint64_t FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID()
{
  return MEMORY[0x1F40DD5D8]();
}

uint64_t FigEndpointUtility_EndpointPredicate_IsPropertyTrue()
{
  return MEMORY[0x1F40DD5E0]();
}

uint64_t FigEndpointUtility_IsEndpointThirdPartyTVFamily()
{
  return MEMORY[0x1F40DD5E8]();
}

uint64_t FigEndpointUtility_SetPropertyOnEndpointStreams()
{
  return MEMORY[0x1F40DD5F0]();
}

uint64_t FigEndpointXPCRemoteGetObjectID()
{
  return MEMORY[0x1F40DD5F8]();
}

uint64_t FigEndpointXPCRemotePing()
{
  return MEMORY[0x1F40DD600]();
}

uint64_t FigEndpointXPCRemoteRetainCopiedEndpointFromReply()
{
  return MEMORY[0x1F40DD608]();
}

uint64_t FigEndpointXPCRemoteRetainCopiedEndpointsFromArrayToCFArray()
{
  return MEMORY[0x1F40DD610]();
}

uint64_t FigEndpointXPCServerAppendNeighborEndpointToArray()
{
  return MEMORY[0x1F40DD618]();
}

uint64_t FigEndpointXPCServerWriteNeighborEndpointToReply()
{
  return MEMORY[0x1F40DD620]();
}

uint64_t FigGetCFPreferenceBooleanWithDefault()
{
  return MEMORY[0x1F40DD840]();
}

uint64_t FigGetCFPreferenceDoubleWithDefault()
{
  return MEMORY[0x1F40DD848]();
}

uint64_t FigGetCFPreferenceNumberWithDefault()
{
  return MEMORY[0x1F40DD858]();
}

uint64_t FigGetUpTime()
{
  return MEMORY[0x1F40DD8C8]();
}

uint64_t FigGetUpTimeNanoseconds()
{
  return MEMORY[0x1F40DD8D0]();
}

uint64_t FigIsAirplaydEnabled()
{
  return MEMORY[0x1F40DDB28]();
}

uint64_t FigMobileAsset_RegisterForAssetUpdates()
{
  return MEMORY[0x1F40DDCB8]();
}

uint64_t FigMobileAsset_UpdateCatalogIfTimeIntervalElapsed()
{
  return MEMORY[0x1F40DDCC0]();
}

uint64_t FigNanosecondsToHostTime()
{
  return MEMORY[0x1F40DDCC8]();
}

uint64_t FigNote_AllowInternalDefaultLogs()
{
  return MEMORY[0x1F40DDD50]();
}

uint64_t FigNotificationCenterAddWeakListener()
{
  return MEMORY[0x1F40DDD90]();
}

uint64_t FigNotificationCenterAddWeakListeners()
{
  return MEMORY[0x1F40DDD98]();
}

uint64_t FigNotificationCenterRemoveWeakListener()
{
  return MEMORY[0x1F40DDDB0]();
}

uint64_t FigNotificationCenterRemoveWeakListeners()
{
  return MEMORY[0x1F40DDDB8]();
}

uint64_t FigOSTransactionCreate()
{
  return MEMORY[0x1F40DDDF8]();
}

uint64_t FigReentrantMutexCreate()
{
  return MEMORY[0x1F40DDFA0]();
}

uint64_t FigReentrantMutexDestroy()
{
  return MEMORY[0x1F40DDFA8]();
}

uint64_t FigReentrantMutexLock()
{
  return MEMORY[0x1F40DDFB0]();
}

uint64_t FigReentrantMutexUnlock()
{
  return MEMORY[0x1F40DDFC0]();
}

uint64_t FigSignalErrorAt()
{
  return MEMORY[0x1F40DE320]();
}

uint64_t FigSimpleMutexCreate()
{
  return MEMORY[0x1F40DE340]();
}

uint64_t FigSimpleMutexDestroy()
{
  return MEMORY[0x1F40DE348]();
}

uint64_t FigSimpleMutexLock()
{
  return MEMORY[0x1F40DE350]();
}

uint64_t FigSimpleMutexUnlock()
{
  return MEMORY[0x1F40DE360]();
}

uint64_t FigUInt32NearestPowerOfTwo()
{
  return MEMORY[0x1F40DE7B8]();
}

uint64_t FigUSleep()
{
  return MEMORY[0x1F40DE7C0]();
}

uint64_t FigWatchdogMonitorDispatchQueue()
{
  return MEMORY[0x1F40DE8A8]();
}

uint64_t FigXPCConnectionHasEntitlement()
{
  return MEMORY[0x1F40DE908]();
}

uint64_t FigXPCCreateBasicMessage()
{
  return MEMORY[0x1F40DE950]();
}

uint64_t FigXPCEndpointServerRetainEndpointForID()
{
  return MEMORY[0x1F40DE958]();
}

uint64_t FigXPCHandleStdCopyPropertyMessage()
{
  return MEMORY[0x1F40DE970]();
}

uint64_t FigXPCHandleStdSetPropertyMessage()
{
  return MEMORY[0x1F40DE978]();
}

uint64_t FigXPCMessageCopyCFArray()
{
  return MEMORY[0x1F40DE9A8]();
}

uint64_t FigXPCMessageCopyCFBoolean()
{
  return MEMORY[0x1F40DE9B0]();
}

uint64_t FigXPCMessageCopyCFData()
{
  return MEMORY[0x1F40DE9B8]();
}

uint64_t FigXPCMessageCopyCFDate()
{
  return MEMORY[0x1F40DE9C0]();
}

uint64_t FigXPCMessageCopyCFDictionary()
{
  return MEMORY[0x1F40DE9C8]();
}

uint64_t FigXPCMessageCopyCFNumber()
{
  return MEMORY[0x1F40DE9D8]();
}

uint64_t FigXPCMessageCopyCFObject()
{
  return MEMORY[0x1F40DE9E0]();
}

uint64_t FigXPCMessageCopyCFString()
{
  return MEMORY[0x1F40DE9E8]();
}

uint64_t FigXPCMessageGetOpCode()
{
  return MEMORY[0x1F40DEA90]();
}

uint64_t FigXPCMessageSetCFArray()
{
  return MEMORY[0x1F40DEAB8]();
}

uint64_t FigXPCMessageSetCFBoolean()
{
  return MEMORY[0x1F40DEAC0]();
}

uint64_t FigXPCMessageSetCFData()
{
  return MEMORY[0x1F40DEAC8]();
}

uint64_t FigXPCMessageSetCFDate()
{
  return MEMORY[0x1F40DEAD0]();
}

uint64_t FigXPCMessageSetCFDictionary()
{
  return MEMORY[0x1F40DEAD8]();
}

uint64_t FigXPCMessageSetCFNumber()
{
  return MEMORY[0x1F40DEAE8]();
}

uint64_t FigXPCMessageSetCFObject()
{
  return MEMORY[0x1F40DEAF0]();
}

uint64_t FigXPCMessageSetCFString()
{
  return MEMORY[0x1F40DEAF8]();
}

uint64_t FigXPCRelease()
{
  return MEMORY[0x1F40DEB78]();
}

uint64_t FigXPCRemoteClientAssociateObject()
{
  return MEMORY[0x1F40DEB80]();
}

uint64_t FigXPCRemoteClientCreate()
{
  return MEMORY[0x1F40DEBA0]();
}

uint64_t FigXPCRemoteClientDisassociateObject()
{
  return MEMORY[0x1F40DEBB8]();
}

uint64_t FigXPCRemoteClientKillServerOnTimeout()
{
  return MEMORY[0x1F40DEBD0]();
}

uint64_t FigXPCRemoteClientRetainCopiedObject()
{
  return MEMORY[0x1F40DEBE0]();
}

uint64_t FigXPCRemoteClientSendAsyncMessage()
{
  return MEMORY[0x1F40DEBE8]();
}

uint64_t FigXPCRemoteClientSendSyncMessage()
{
  return MEMORY[0x1F40DEBF0]();
}

uint64_t FigXPCRemoteClientSendSyncMessageCreatingReply()
{
  return MEMORY[0x1F40DEBF8]();
}

uint64_t FigXPCRetain()
{
  return MEMORY[0x1F40DEC08]();
}

uint64_t FigXPCSendStdCopyPropertyMessage()
{
  return MEMORY[0x1F40DEC10]();
}

uint64_t FigXPCSendStdSetPropertyMessage()
{
  return MEMORY[0x1F40DEC18]();
}

uint64_t FigXPCServerAssociateCopiedObjectWithConnection()
{
  return MEMORY[0x1F40DEC28]();
}

uint64_t FigXPCServerAssociateObjectWithConnection()
{
  return MEMORY[0x1F40DEC40]();
}

uint64_t FigXPCServerDisassociateObjectWithConnection()
{
  return MEMORY[0x1F40DEC80]();
}

uint64_t FigXPCServerLookupAndRetainAssociatedObject()
{
  return MEMORY[0x1F40DECA0]();
}

uint64_t FigXPCServerStart()
{
  return MEMORY[0x1F40DECC8]();
}

uint64_t IOHIDEventCreateKeyboardEvent()
{
  return MEMORY[0x1F40E8948]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1F40E8A00]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1F40E8A38]();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return (CFArrayRef)MEMORY[0x1F40E8AB8](client);
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return MEMORY[0x1F40E8AC8]();
}

uint64_t IOHIDEventSystemClientRegisterEventCallback()
{
  return MEMORY[0x1F40E8AF0]();
}

uint64_t IOHIDEventSystemClientScheduleWithRunLoop()
{
  return MEMORY[0x1F40E8B20]();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return MEMORY[0x1F40E8B38]();
}

uint64_t IOHIDServiceClientCopyEvent()
{
  return MEMORY[0x1F40E8D08]();
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1F40E8F08](*(void *)&mainPort);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1F40E8F78](AssertionType, *(void *)&AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1F40E8FA8](*(void *)&AssertionID);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9168](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IORegistryEntrySetCFProperties(io_registry_entry_t entry, CFTypeRef properties)
{
  return MEMORY[0x1F40E9218](*(void *)&entry, properties);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x1F40E9230](notifyPort, *(void *)&service, interestType, callback, refCon, notification);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1F40E9250](*(void *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9268](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9278](name);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1F417CE18]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1F4145D90]();
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1F40F7128](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

CFTypeID SecTaskGetTypeID(void)
{
  return MEMORY[0x1F40F7188]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x1F40D8EA0]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _FigIsNotCurrentDispatchQueue()
{
  return MEMORY[0x1F40DED40]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

float __exp10f(float a1)
{
  MEMORY[0x1F40C9B98](a1);
  return result;
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1F40C9FF8]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

uint64_t abort_with_reason()
{
  return MEMORY[0x1F40CA1F8]();
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2E8](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2F0](atoken);
}

void bzero(void *a1, size_t a2)
{
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

uint64_t ct_green_tea_logger_create()
{
  return MEMORY[0x1F417A378]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1F40CBA68](key);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1F40CBBD8](queue);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

uint64_t dispatch_source_set_mandatory_cancel_handler()
{
  return MEMORY[0x1F40CBCE0]();
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1F40CBDA8](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1F40CBE28]();
}

uint64_t exclaves_sensor_create()
{
  return MEMORY[0x1F40CBF90]();
}

uint64_t exclaves_sensor_start()
{
  return MEMORY[0x1F40CBF98]();
}

uint64_t exclaves_sensor_status()
{
  return MEMORY[0x1F40CBFA0]();
}

uint64_t exclaves_sensor_stop()
{
  return MEMORY[0x1F40CBFA8]();
}

uint64_t fig_log_call_emit_and_clean_up_after_send_and_compose()
{
  return MEMORY[0x1F40DED58]();
}

uint64_t fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type()
{
  return MEMORY[0x1F40DED60]();
}

uint64_t fig_note_initialize_category_with_default_work()
{
  return MEMORY[0x1F40DED78]();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x1F417A398]();
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1F4181778](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_terminate(void)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1F40CD570]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

uint64_t xpc_array_get_uint64(xpc_object_t xarray, size_t index)
{
  return MEMORY[0x1F40CEA98](xarray, index);
}

void xpc_array_set_uint64(xpc_object_t xarray, size_t index, uint64_t value)
{
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1F40CEBE8]();
}

const char *__cdecl xpc_connection_get_name(xpc_connection_t connection)
{
  return (const char *)MEMORY[0x1F40CEC18](connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC20](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

uint64_t xpc_copy_entitlement_for_token()
{
  return MEMORY[0x1F40CED38]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  MEMORY[0x1F40CEEB8](xdict, key);
  return result;
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEF8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

void xpc_release(xpc_object_t object)
{
}

uint64_t xpc_set_event()
{
  return MEMORY[0x1F40CF250]();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}