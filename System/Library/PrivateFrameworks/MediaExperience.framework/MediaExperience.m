uint64_t FigRouteDiscoveryManagerUpdateDiscoveryMode()
{
  unint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t *v4;
  CFArrayRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  unsigned int DiscoveryModeAsInt;
  CFTypeRef v11;
  int v12;
  int64_t v13;
  int v14;
  int64_t v15;
  const void *v16;
  dispatch_time_t v17;
  dispatch_queue_t *v19;
  uint64_t v20;
  uint64_t v21;
  void v22[10];
  int v23;
  CFTypeRef cf;
  CFTypeRef v25[2];

  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  v0 = 0;
  if (qword_1E93591B0) {
    v1 = &discoverManager_getSharedManager_discoveryState;
  }
  else {
    v1 = 0;
  }
  v20 = *MEMORY[0x1E4F1CFC8];
  v2 = *MEMORY[0x1E4F1CFD0];
  if (qword_1E93591B0) {
    v3 = (uint64_t)&qword_1E93591B0;
  }
  else {
    v3 = 8;
  }
  v19 = (dispatch_queue_t *)v3;
  v4 = (int64_t *)(v1 + 40);
  do
  {
    if (v0 <= 8 && ((1 << v0) & 0x148) != 0) {
      goto LABEL_54;
    }
    v5 = (const __CFArray *)*(v4 - 2);
    discoveryManager_logDiscoverers((uint64_t)v1, 0);
    if (v0 > 8) {
      v21 = 0;
    }
    else {
      v21 = qword_194EDE5C8[v0];
    }
    v25[0] = 0;
    v6 = discoveryManager_copyHighestDiscoveryModeForDiscovererType((uint64_t)v1, v0, v25, v20);
    cf = 0;
    v7 = discoveryManager_copyHighestDiscoveryModeForDiscovererType((uint64_t)v1, v0, &cf, v2);
    v8 = discoveryManager_copyHighestDiscoveryModeForDiscovererType((uint64_t)v1, v0, 0, v20);
    v9 = discoveryManager_copyHighestDiscoveryModeForDiscovererType((uint64_t)v1, v0, 0, v2);
    DiscoveryModeAsInt = discovererManager_getDiscoveryModeAsInt();
    if (DiscoveryModeAsInt < discovererManager_getDiscoveryModeAsInt())
    {
      if (!v8)
      {
        v11 = 0;
        goto LABEL_24;
      }
      v11 = CFRetain(v8);
LABEL_23:
      CFRelease(v8);
      goto LABEL_24;
    }
    if (!v9)
    {
      v11 = 0;
      if (!v8) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    v11 = CFRetain(v9);
    if (v8) {
      goto LABEL_23;
    }
LABEL_24:
    if (v9) {
      CFRelease(v9);
    }
    if (discoveryManager_doesSwitchRequireDelay((const void *)*(v4 - 1)))
    {
      if (!discoveryManager_doesSwitchRequireDelay(v11))
      {
        v15 = mach_absolute_time();
        if (!*v4)
        {
          *v4 = FigNanosecondsToHostTime() + v15;
          v17 = dispatch_time(0, 5000000000);
          dispatch_after(v17, *v19, &__block_literal_global_38);
          goto LABEL_57;
        }
        if (v15 <= *v4) {
          goto LABEL_57;
        }
LABEL_36:
        *v4 = 0;
        goto LABEL_37;
      }
      v12 = FigCFEqual();
      v13 = *v4;
      if (v12)
      {
        if (v13)
        {
          v14 = 0;
          *v4 = 0;
          if (!v11) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }
LABEL_57:
        v14 = 0;
        if (!v11) {
          goto LABEL_39;
        }
LABEL_38:
        CFRelease(v11);
        goto LABEL_39;
      }
      if (v13) {
        goto LABEL_36;
      }
    }
LABEL_37:
    v14 = 1;
    if (v11) {
      goto LABEL_38;
    }
LABEL_39:
    if (v14)
    {
      v16 = (const void *)*(v4 - 1);
      *(v4 - 1) = (int64_t)v6;
      if (v6) {
        CFRetain(v6);
      }
      if (v16) {
        CFRelease(v16);
      }
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      v22[2] = __discoveryManager_updateDiscoveryModeForType_block_invoke;
      v22[3] = &__block_descriptor_84_e5_v8__0l;
      v22[4] = v1;
      v22[5] = v21;
      v22[6] = v6;
      v22[7] = v25[0];
      v23 = v0;
      v22[8] = v7;
      v22[9] = cf;
      FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v22);
    }
    if (v25[0])
    {
      CFRelease(v25[0]);
      v25[0] = 0;
    }
    if (v6) {
      CFRelease(v6);
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v7) {
      CFRelease(v7);
    }
    discoveryManager_removeFreedWeakRefs(v5);
LABEL_54:
    ++v0;
    v4 += 3;
  }
  while (v0 != 9);
  return 0;
}

void FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked(uint64_t a1)
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  if (qword_1E93591B0) {
    uint64_t v2 = (uint64_t)&qword_1E93592A0;
  }
  else {
    uint64_t v2 = 248;
  }
  MEMORY[0x199716E90](*(void *)v2);
  (*(void (**)(uint64_t))(a1 + 16))(a1);
  JUMPOUT(0x199716EA0);
}

CFTypeRef discoveryManager_copyHighestRequestedDiscoveryModeForEndpointManager(const __CFDictionary *a1, void *a2)
{
  CFTypeRef v3 = CFRetain((CFTypeRef)*MEMORY[0x1E4F205D0]);
  CFDictionaryGetValue(a1, @"EndpointManager_SupportedEndpointFeaturesKey");
  unint64_t UInt64 = FigCFNumberGetUInt64();
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"EndpointManager_RequestedDiscoveryModesKey");
  CFIndex v6 = 0;
  CFTypeRef cf = 0;
  do
  {
    if ((UInt64 >> v6))
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v6);
      v8 = CFDictionaryGetValue(ValueAtIndex, @"Requestor_DiscoveryMode");
      unsigned int DiscoveryModeAsInt = discovererManager_getDiscoveryModeAsInt();
      if (DiscoveryModeAsInt < discovererManager_getDiscoveryModeAsInt())
      {
        CFDictionaryGetValue(a1, @"EndpointManager_SupportedDiscoveryModesKey");
        int v10 = FigCFNumberGetUInt64();
        if (FigCFEqual())
        {
          int v11 = 4;
        }
        else if (FigCFEqual())
        {
          int v11 = 2;
        }
        else
        {
          if (!FigCFEqual()) {
            goto LABEL_16;
          }
          int v11 = 1;
        }
        if ((v10 & v11) != 0)
        {
          if (v8) {
            CFRetain(v8);
          }
          if (v3) {
            CFRelease(v3);
          }
          CFTypeRef cf = CFDictionaryGetValue(ValueAtIndex, @"Requestor_DiscovererWeakRef");
          CFTypeRef v3 = v8;
        }
      }
    }
LABEL_16:
    ++v6;
  }
  while (v6 != 7);
  if (a2)
  {
    CFTypeRef v12 = cf;
    if (cf) {
      CFTypeRef v12 = CFRetain(cf);
    }
    *a2 = v12;
  }
  return v3;
}

CFTypeRef discoveryManager_copyHighestDiscoveryModeForDiscovererType(uint64_t a1, unsigned int a2, void *a3, uint64_t a4)
{
  CFArrayRef v6 = *(const __CFArray **)(a1 + 24 * a2 + 24);
  if (*MEMORY[0x1E4F205D0]) {
    CFTypeRef v7 = CFRetain((CFTypeRef)*MEMORY[0x1E4F205D0]);
  }
  else {
    CFTypeRef v7 = 0;
  }
  CFIndex Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    v31 = a3;
    CFIndex v10 = 0;
    CFTypeRef v34 = 0;
    uint64_t v11 = *MEMORY[0x1E4F1CF80];
    CFTypeRef v12 = (const void *)*MEMORY[0x1E4F1CFC8];
    CFTypeRef v32 = (CFTypeRef)*MEMORY[0x1E4F205C0];
    CFTypeRef v30 = (CFTypeRef)*MEMORY[0x1E4F205D8];
    CFArrayRef v33 = v6;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v10);
      uint64_t v14 = discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
      if (v14) {
        break;
      }
      CFTypeRef v18 = v7;
LABEL_26:
      if (v9 == ++v10) {
        goto LABEL_62;
      }
    }
    v15 = (const void *)v14;
    CFTypeRef v36 = 0;
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    v19 = *(uint64_t (**)(const void *, __CFString *, uint64_t, CFTypeRef *))(v17 + 48);
    if (v19) {
      int v20 = v19(v15, @"DiscoveryMode", v11, &v36);
    }
    else {
      int v20 = -12782;
    }
    CFTypeRef cf = v12;
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    v23 = *(void (**)(const void *, __CFString *, uint64_t, CFTypeRef *))(v22 + 48);
    if (v23) {
      v23(v15, @"BluetoothRoutesOnly", v11, &cf);
    }
    if (v20 || !FigCFEqual())
    {
      CFTypeRef v18 = v7;
    }
    else
    {
      if (FigCFEqual())
      {
        CFTypeRef v18 = (CFTypeRef)*MEMORY[0x1E4F205C8];
        if (*MEMORY[0x1E4F205C8]) {
          CFRetain((CFTypeRef)*MEMORY[0x1E4F205C8]);
        }
        if (v7) {
          CFRelease(v7);
        }
        if (v34) {
          CFRelease(v34);
        }
        if (ValueAtIndex) {
          CFTypeRef v34 = CFRetain(ValueAtIndex);
        }
        else {
          CFTypeRef v34 = 0;
        }
        if (v36)
        {
          CFRelease(v36);
          CFTypeRef v36 = 0;
        }
        CFRelease(v15);
LABEL_62:
        a3 = v31;
        if (v31)
        {
          CFTypeRef v28 = v34;
LABEL_64:
          *a3 = v28;
        }
        else if (v34)
        {
          CFRelease(v34);
        }
        return v18;
      }
      v24 = v12;
      uint64_t v25 = v11;
      uint64_t v26 = a4;
      unsigned int DiscoveryModeAsInt = discovererManager_getDiscoveryModeAsInt();
      if (DiscoveryModeAsInt < discovererManager_getDiscoveryModeAsInt())
      {
        if (FigCFEqual())
        {
          CFTypeRef v18 = v32;
          if (v32) {
            CFRetain(v32);
          }
          a4 = v26;
        }
        else
        {
          if (!FigCFEqual())
          {
            CFTypeRef v18 = v7;
            a4 = v26;
            uint64_t v11 = v25;
            CFTypeRef v12 = v24;
            CFArrayRef v6 = v33;
LABEL_42:
            if (v34) {
              CFRelease(v34);
            }
            if (ValueAtIndex) {
              CFTypeRef v34 = CFRetain(ValueAtIndex);
            }
            else {
              CFTypeRef v34 = 0;
            }
            goto LABEL_21;
          }
          a4 = v26;
          CFTypeRef v18 = v30;
          if (v30) {
            CFRetain(v30);
          }
        }
        uint64_t v11 = v25;
        CFTypeRef v12 = v24;
        CFArrayRef v6 = v33;
        if (v7) {
          CFRelease(v7);
        }
        goto LABEL_42;
      }
      CFTypeRef v18 = v7;
      a4 = v26;
      uint64_t v11 = v25;
      CFTypeRef v12 = v24;
      CFArrayRef v6 = v33;
    }
LABEL_21:
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v36) {
      CFRelease(v36);
    }
    CFRelease(v15);
    CFTypeRef v7 = v18;
    goto LABEL_26;
  }
  if (a3)
  {
    CFTypeRef v28 = 0;
    CFTypeRef v18 = v7;
    goto LABEL_64;
  }
  return v7;
}

BOOL FigRouteDiscovereryManagerIsNewDiscoveryModeHigher()
{
  unsigned int DiscoveryModeAsInt = discovererManager_getDiscoveryModeAsInt();
  return DiscoveryModeAsInt < discovererManager_getDiscoveryModeAsInt();
}

uint64_t discovererManager_getDiscoveryModeAsInt()
{
  if (FigCFEqual() || FigCFEqual()) {
    return 0;
  }
  if (FigCFEqual() || FigCFEqual()) {
    return 10;
  }
  if (FigCFEqual() || FigCFEqual()) {
    return 20;
  }
  if (FigCFEqual()) {
    return 30;
  }
  uint64_t result = FigCFEqual();
  if (result) {
    return 30;
  }
  return result;
}

void discoveryManager_removeFreedWeakRefs(const __CFArray *a1)
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  if (qword_1E93591B0) {
    uint64_t v2 = (uint64_t)&qword_1E93592A8;
  }
  else {
    uint64_t v2 = 256;
  }
  MEMORY[0x199716EE0](*(void *)v2);
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
      CFTypeRef v7 = (const void *)discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
      if (v7)
      {
        ++v5;
        CFRelease(v7);
      }
      else
      {
        CFArrayRemoveValueAtIndex(a1, v5);
        --v4;
      }
    }
    while (v5 < v4);
  }
  JUMPOUT(0x199716EF0);
}

uint64_t CMSNP_IsCurrentNowPlayingSessionAirPlayingLongFormMedia()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v0 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v13 != v4) {
          objc_enumerationMutation(v1);
        }
        CFArrayRef v6 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if [v6 isActive] && (objc_msgSend(v6, "isPlaying"))
        {
          int v7 = 1;
        }
        else if ([v6 isActive] {
               && [v6 isActiveOverAirPlayVideo])
        }
        {
          int v7 = [v6 isAudioOnlyAirPlayVideoActive] ^ 1;
        }
        else
        {
          int v7 = 0;
        }
        BOOL v8 = objc_msgSend((id)objc_msgSend(v6, "clientPID"), "intValue") != v0 || v7 == 0;
        if (!v8 && CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(v6))
        {
          CFTypeRef cf = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex([v6 routingContextUUID], 0, (uint64_t)&cf);
          if (FigRoutingManagerIsEndpointOfType((uint64_t)cf)
            || FigRoutingManagerIsEndpointOfType((uint64_t)cf))
          {
            if (cf) {
              CFRelease(cf);
            }
            uint64_t v9 = 1;
            goto LABEL_28;
          }
          if (cf) {
            CFRelease(cf);
          }
        }
      }
      uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
  uint64_t v9 = 0;
LABEL_28:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v9;
}

uint64_t CMSMUtility_IsSharePlayCallSessionActive()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!MX_FeatureFlags_IsSharePlayEnabled()) {
    return 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  int v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        CFIndex v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if CMSUtility_GetIsActive(v5) && ([v5 isSharePlayCallSession])
        {
          uint64_t v6 = 1;
          goto LABEL_14;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_14:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

void *CMSUtility_GetIsActive(void *result)
{
  if (result) {
    return (void *)[result isActive];
  }
  return result;
}

uint64_t MX_FeatureFlags_IsSharePlayEnabled()
{
  if (MX_FeatureFlags_IsSharePlayEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsSharePlayEnabled_onceToken, &__block_literal_global_13);
  }
  return MX_FeatureFlags_IsSharePlayEnabled_sharePlayEnabled;
}

void discoveryManager_logDiscoverers(uint64_t a1, int a2)
{
  int v2 = a2;
  unint64_t v3 = 0;
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    Mutable = CFStringCreateMutable(alloc, 0);
    MEMORY[0x199716EE0](*(void *)(a1 + 256));
    uint64_t v5 = a1 + 24 * v3;
    CFArrayRef Copy = CFArrayCreateCopy(alloc, *(CFArrayRef *)(v5 + 24));
    CFStringAppendFormat(Mutable, 0, @"CURRENT DISCOVERYMODE %@ ::", *(void *)(v5 + 32));
    MEMORY[0x199716EF0](*(void *)(a1 + 256));
    if (Copy)
    {
      CFIndex Count = CFArrayGetCount(Copy);
      CFStringAppendFormat(Mutable, 0, @"Discoverers %ld\n", Count);
      if (Count >= 1)
      {
        unint64_t v8 = 0;
        unint64_t v9 = 1;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Copy, v8);
          long long v11 = (const void *)discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
          if (5 * (v8 / 5) == v8)
          {
            if (v3 > 6) {
              uint64_t v12 = 0;
            }
            else {
              uint64_t v12 = *((void *)&off_1E57C5A20 + v3);
            }
            CFStringAppendFormat(Mutable, 0, @"Discoverer Type: %@", v12, v28);
          }
          if (!v11) {
            goto LABEL_39;
          }
          cf[0] = 0;
          uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v13) {
            uint64_t v14 = v13;
          }
          else {
            uint64_t v14 = 0;
          }
          long long v15 = *(void (**)(const void *, __CFString *, const __CFAllocator *, CFTypeRef *))(v14 + 48);
          if (v15) {
            v15(v11, @"DiscoveryMode", alloc, cf);
          }
          *(void *)CFTypeRef v34 = 0;
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          CFTypeRef v18 = *(void (**)(const void *, __CFString *, const __CFAllocator *, unsigned char *))(v17 + 48);
          if (v18) {
            v18(v11, @"clientName", alloc, v34);
          }
          CFTypeRef v33 = 0;
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = *(void (**)(const void *, __CFString *, const __CFAllocator *, CFTypeRef *))(v20 + 48);
          if (v21) {
            v21(v11, @"discovererUUID", alloc, &v33);
          }
          if (cf[0] && *(void *)v34) {
            break;
          }
          if (cf[0])
          {
            CFStringAppendFormat(Mutable, 0, @"\n \t\t[%d] NONAME=%@", v8, cf[0], v29);
LABEL_31:
            if (v33) {
              CFStringAppendFormat(Mutable, 0, @" uuid=%@", v33);
            }
          }
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0;
          }
          if (*(void *)v34)
          {
            CFRelease(*(CFTypeRef *)v34);
            *(void *)CFTypeRef v34 = 0;
          }
          CFRelease(v11);
          if (v33) {
            CFRelease(v33);
          }
LABEL_39:
          if (Count - 1 == v8)
          {
            if (v2 && dword_1E9359D80)
            {
              LODWORD(v33) = 0;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v23 = v33;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v24 = v23;
              }
              else {
                unsigned int v24 = v23 & 0xFFFFFFFE;
              }
              if (v24)
              {
                *(_DWORD *)CFTypeRef v34 = 136315394;
                *(void *)&v34[4] = "discoveryManager_logDiscoverers";
                __int16 v35 = 2114;
                CFTypeRef v36 = Mutable;
                LODWORD(v28) = 22;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              int v2 = a2;
            }
          }
          else if (5 * (v9 / 5) - 1 == v8)
          {
            if (v2 && dword_1E9359D80)
            {
              LODWORD(v33) = 0;
              uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v26 = v33;
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v27 = v26;
              }
              else {
                unsigned int v27 = v26 & 0xFFFFFFFE;
              }
              if (v27)
              {
                *(_DWORD *)CFTypeRef v34 = 136315394;
                *(void *)&v34[4] = "discoveryManager_logDiscoverers";
                __int16 v35 = 2114;
                CFTypeRef v36 = Mutable;
                LODWORD(v28) = 22;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              int v2 = a2;
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            Mutable = CFStringCreateMutable(alloc, 0);
          }
          ++v8;
          ++v9;
          if (Count == v8) {
            goto LABEL_61;
          }
        }
        CFStringAppendFormat(Mutable, 0, @"\n \t\t[%d] %@=%@", v8, *(void *)v34, cf[0]);
        goto LABEL_31;
      }
LABEL_61:
      if (Mutable) {
LABEL_62:
      }
        CFRelease(Mutable);
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, @"Discoverers %ld\n", 0);
      if (Mutable) {
        goto LABEL_62;
      }
    }
    if (Copy) {
      CFRelease(Copy);
    }
    ++v3;
  }
  while (v3 != 9);
}

uint64_t discoverer_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    uint64_t v12 = 4294949956;
    goto LABEL_9;
  }
  uint64_t v10 = DerivedStorage;
  if (CFEqual(a2, @"DiscoveryMode"))
  {
    uint64_t DerivedStorage = *(void *)v10;
    if (!*(void *)v10)
    {
LABEL_8:
      uint64_t v12 = 0;
      *a4 = DerivedStorage;
      goto LABEL_9;
    }
LABEL_4:
    uint64_t DerivedStorage = (uint64_t)CFRetain((CFTypeRef)DerivedStorage);
    goto LABEL_8;
  }
  if (CFEqual(a2, @"clientPID"))
  {
    long long v11 = (const void *)(v10 + 12);
LABEL_7:
    uint64_t DerivedStorage = (uint64_t)CFNumberCreate(a3, kCFNumberSInt32Type, v11);
    goto LABEL_8;
  }
  if (CFEqual(a2, @"clientName"))
  {
    uint64_t DerivedStorage = *(void *)(v10 + 16);
    if (!DerivedStorage) {
      goto LABEL_8;
    }
    goto LABEL_4;
  }
  if (CFEqual(a2, @"BluetoothRoutesOnly"))
  {
    uint64_t DerivedStorage = *(void *)(v10 + 24);
    if (!DerivedStorage) {
      goto LABEL_8;
    }
    goto LABEL_4;
  }
  if (CFEqual(a2, @"audioSessionID"))
  {
    long long v11 = (const void *)(v10 + 8);
    goto LABEL_7;
  }
  uint64_t DerivedStorage = CFEqual(a2, @"discoversLocalRoute");
  if (!DerivedStorage)
  {
    if (CFEqual(a2, @"discovererUUID"))
    {
      uint64_t DerivedStorage = *(void *)(v10 + 56);
      if (!DerivedStorage) {
        goto LABEL_8;
      }
      goto LABEL_4;
    }
    if (CFEqual(a2, @"OnBehalfOf"))
    {
      uint64_t DerivedStorage = *(void *)(v10 + 32);
      if (!DerivedStorage) {
        goto LABEL_8;
      }
      goto LABEL_4;
    }
    if (CFEqual(a2, @"routePresent"))
    {
      uint64_t DerivedStorage = FigRouteDiscoveryManagerCopyRoutePresentForType((uint64_t)a3, *(_DWORD *)(v10 + 40), a4);
      uint64_t v12 = DerivedStorage;
      goto LABEL_9;
    }
    if (CFEqual(a2, @"userSelectionAvailable"))
    {
      MEMORY[0x199716E90](*(void *)(v10 + 64));
      if (*(unsigned char *)(v10 + 72)) {
        uint64_t v16 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v16 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      CFTypeRef v19 = *v16;
      if (*v16) {
        CFTypeRef v19 = CFRetain(v19);
      }
      *a4 = v19;
      if (dword_1E9359D80)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t DerivedStorage = MEMORY[0x199716EA0](*(void *)(v10 + 64));
LABEL_48:
      uint64_t v12 = 0;
      goto LABEL_9;
    }
    if (FigCFEqual())
    {
      uint64_t v17 = FigGetUpTimeNanoseconds();
      MEMORY[0x199716E90](*(void *)(v10 + 64));
      CFArrayRef v18 = (const __CFArray *)*(id *)(v10 + 88);
      if ((unint64_t)(v17 - *(void *)(v10 + 48)) > 0x2540BE3FFLL) {
        *(void *)(v10 + 48) = v17;
      }
    }
    else
    {
      uint64_t DerivedStorage = CFEqual(a2, @"availableRouteDescriptors");
      if (!DerivedStorage)
      {
        uint64_t v12 = 4294954512;
        goto LABEL_9;
      }
      if (FigCFEqual() && MX_FeatureFlags_IsCorianderEnabled())
      {
        uint64_t DerivedStorage = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1C978]);
        goto LABEL_8;
      }
      uint64_t v21 = FigGetUpTimeNanoseconds();
      MEMORY[0x199716E90](*(void *)(v10 + 64));
      CFArrayRef v18 = (const __CFArray *)*(id *)(v10 + 80);
      if ((unint64_t)(v21 - *(void *)(v10 + 48)) > 0x2540BE3FFLL)
      {
        *(void *)(v10 + 48) = v21;
        MEMORY[0x199716EA0](*(void *)(v10 + 64));
        *a4 = v18;
        uint64_t DerivedStorage = FigRouteDiscovererShouldLogForClient();
        if (DerivedStorage) {
          discoverer_logAvailableRouteDetails(*(void *)(v10 + 16), *(_DWORD *)(v10 + 40), v18);
        }
        goto LABEL_48;
      }
    }
    uint64_t DerivedStorage = MEMORY[0x199716EA0](*(void *)(v10 + 64));
    uint64_t v12 = 0;
    *a4 = v18;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  long long v15 = (void *)MEMORY[0x1E4F1CFC8];
  if ((*(_DWORD *)(v10 + 40) & 0xFFFFFFFA) != 0) {
    long long v15 = (void *)MEMORY[0x1E4F1CFD0];
  }
  *a4 = *v15;
LABEL_9:
  uint64_t v13 = (void *)MEMORY[0x1997179E0](DerivedStorage, v9);
  [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"discoverer_CopyProperty" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:a2];
  return v12;
}

uint64_t discoveryManager_copyDiscovererFromWeakRef(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 != FigCFWeakReferenceHolderGetTypeID()) {
    return 0;
  }
  return FigCFWeakReferenceHolderCopyReferencedObject();
}

uint64_t discoveryManager_doesSwitchRequireDelay(const void *a1)
{
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F205C8])) {
    return 1;
  }
  uint64_t result = CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F205C0]);
  if (result) {
    return 1;
  }
  return result;
}

void __discoveryManager_appendAvailableEndpoints_block_invoke(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(*(void *)(a1 + 32) + 240);
  if (v2 && CFArrayGetCount(v2) >= 1)
  {
    int v3 = *(_DWORD *)(a1 + 56);
    if (v3 == 7)
    {
      uint64_t v4 = *(__CFArray **)(a1 + 40);
      uint64_t v5 = [+[MXEndpointDescriptorCache sharedInstance] copyAvailableEndpointsForManager:FigRoutingManagerGetEndpointManager(*MEMORY[0x1E4F20658])];
      if (v5)
      {
        CFArrayRef v6 = v5;
        if (CFArrayGetCount(v5) >= 1)
        {
          v16.length = CFArrayGetCount(v6);
          v16.location = 0;
          CFArrayAppendArray(v4, v6, v16);
        }
        CFRelease(v6);
      }
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int AudioSessionIDForActiveCMSession = *(_DWORD *)(a1 + 60);
      int8x16_t v9 = *(int8x16_t *)(a1 + 40);
      if (!AudioSessionIDForActiveCMSession)
      {
        int8x16_t v10 = *(int8x16_t *)(a1 + 40);
        int AudioSessionIDForActiveCMSession = CMSMUtility_GetAudioSessionIDForActiveCMSession();
        int8x16_t v9 = v10;
      }
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = __discoveryManager_iOSAppendAvailableEndpoints_block_invoke;
      v11[3] = &__block_descriptor_64_e5_v8__0l;
      v11[4] = v7;
      int v13 = AudioSessionIDForActiveCMSession;
      int v14 = v3;
      int8x16_t v12 = vextq_s8(v9, v9, 8uLL);
      FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v11);
    }
  }
}

BOOL FigRouteDiscovererShouldLogForClient()
{
  return FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual() != 0;
}

uint64_t CMSMUtility_GetAudioSessionIDForActiveCMSession()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  int v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
LABEL_3:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v8 != v3) {
        objc_enumerationMutation(v0);
      }
      uint64_t v5 = *(void **)(*((void *)&v7 + 1) + 8 * v4);
      if ([v5 isActive])
      {
        if (([v5 currentlyControllingFlags] & 2) != 0) {
          break;
        }
      }
      if (v2 == ++v4)
      {
        uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          goto LABEL_3;
        }
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    uint64_t v5 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (v5) {
    return [v5 audioSessionID];
  }
  else {
    return 0;
  }
}

void __FigRouteDiscovererCopyUserSelectionAvailable_block_invoke(uint64_t a1)
{
  if (*(void *)(a1 + 40) == 1) {
    uint64_t v1 = 1;
  }
  else {
    uint64_t v1 = 2;
  }
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  CFIndex v2 = 0;
  if (qword_1E93591B0) {
    uint64_t v3 = (uint64_t)&qword_1E9359298;
  }
  else {
    uint64_t v3 = 240;
  }
  uint64_t v20 = *MEMORY[0x1E4F20620];
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t v5 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v21 = *MEMORY[0x1E4F20610];
  uint64_t v6 = *MEMORY[0x1E4F1CFD0];
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)v3;
    if (*(void *)v3) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v2 >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)v3, v2);
    CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"EndpointManager_RefKey");
    CFTypeRef v23 = 0;
    if (Value)
    {
      uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v12 = v11 ? v11 : 0;
      int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v12 + 48);
      if (v13) {
        v13(CMBaseObject, v20, v4, &v23);
      }
    }
    if (FigCFEqual() || FigCFEqual())
    {
      CFTypeRef cf = v5;
      uint64_t v14 = FigEndpointManagerGetCMBaseObject();
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v16 + 48);
      if (v17) {
        v17(v14, v21, v4, &cf);
      }
      uint64_t v18 = FigCFEqual() != 0;
      if (cf) {
        CFRelease(cf);
      }
      v1 -= v18;
    }
    if (v23) {
      CFRelease(v23);
    }
    if (!v1)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
      return;
    }
    ++v2;
  }
}

uint64_t __MXDispatchAsyncFunction_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

uint64_t mxCoreSessionRef_notificationCallback(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

void CMSMNotificationUtility_PostSessionAudioBehaviourDidChange_f(void *a1)
{
  CMSMUtility_PostNotificationToSession(a1, @"AudioBehaviourDidChange");
}

NSString *CMSMUtility_CopyNonNullCurrentlyActiveCategory()
{
  uint64_t result = CMSMUtility_CopyCurrentlyActiveCategory();
  if (!result)
  {
    return (NSString *)CFRetain(@"Audio/Video");
  }
  return result;
}

NSString *CMSMUtility_CopyCurrentlyActiveCategory()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  int v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isActive]
          && !-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [v5 audioCategory]))
        {
          uint64_t v6 = [+[MXSessionManager sharedInstance] currentAudioCategory];
          goto LABEL_12;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSUtilityPredicate_IsSameClientAndWaitingToResumeWhenDeviceUnlocksOrInForeground(int a1, void *a2, CFNumberRef number)
{
  int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (([a2 waitingToResumeWhenDeviceUnlocksOrInForeground] & 1) != 0
    || (uint64_t result = [a2 wasInterruptedByNowPlayingApp], result))
  {
    int v5 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    return v5 == valuePtr;
  }
  return result;
}

void CMSMUtility_ApplyForEachMatchingSessionGuts(uint64_t a1, unsigned int (*a2)(uint64_t, void, uint64_t), uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!a4 || !a5)
  {
    if (!a4) {
      a6 = 0;
    }
    if (a4 | a5)
    {
      uint64_t v29 = a6;
      id v13 = [+[MXSessionManager sharedInstance] copyMXCoreSessionList];
      id v31 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      obuint64_t j = v13;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      uint64_t v14 = [v13 countByEnumeratingWithState:&v41 objects:v47 count:16];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)v42;
        do
        {
          for (uint64_t i = 0; i != v15; ++i)
          {
            if (*(void *)v42 != v16) {
              objc_enumerationMutation(obj);
            }
            uint64_t v18 = *(void **)(*((void *)&v41 + 1) + 8 * i);
            if ((!a2 || a2(a1, *(void *)(*((void *)&v41 + 1) + 8 * i), a3))
              && (!a7
               || MX_RunningBoardServices_GetApplicationStateForPID(objc_msgSend((id)objc_msgSend(v18, "clientPID"), "intValue"), 0)- 1 >= 2))
            {
              [v31 addObject:v18];
            }
          }
          uint64_t v15 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
        }
        while (v15);
      }
      CFTypeRef v19 = CMSMUtility_CopyPrioritizedListBasedOnPlayingAndActiveState(v31);
      uint64_t v20 = v19;
      if (a5)
      {
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        uint64_t v21 = [v19 countByEnumeratingWithState:&v37 objects:v46 count:16];
        if (v21)
        {
          uint64_t v22 = v21;
          uint64_t v23 = *(void *)v38;
          do
          {
            for (uint64_t j = 0; j != v22; ++j)
            {
              if (*(void *)v38 != v23) {
                objc_enumerationMutation(v20);
              }
              CMSMUtility_PostNotificationToSession(*(void **)(*((void *)&v37 + 1) + 8 * j), a5);
            }
            uint64_t v22 = [v20 countByEnumeratingWithState:&v37 objects:v46 count:16];
          }
          while (v22);
        }
      }
      else if (a4)
      {
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        uint64_t v25 = [v19 countByEnumeratingWithState:&v33 objects:v45 count:16];
        if (v25)
        {
          uint64_t v26 = v25;
          uint64_t v27 = *(void *)v34;
          do
          {
            for (uint64_t k = 0; k != v26; ++k)
            {
              if (*(void *)v34 != v27) {
                objc_enumerationMutation(v20);
              }
              ((void (*)(void, uint64_t))a4)(*(void *)(*((void *)&v33 + 1) + 8 * k), v29);
            }
            uint64_t v26 = [v20 countByEnumeratingWithState:&v33 objects:v45 count:16];
          }
          while (v26);
        }
      }
    }
  }
}

uint64_t CMSUtilityPredicate_True()
{
  return 1;
}

CFNumberRef CMSUtilityPredicate_IsSameClient(int a1, void *a2, CFNumberRef number)
{
  CFNumberRef result = number;
  if (number)
  {
    int valuePtr = 0;
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    int v5 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    return (CFNumberRef)(v5 == valuePtr);
  }
  return result;
}

BOOL CMSUtilityPredicate_DoesInheritApplicationStateFromPID(int a1, void *a2, CFNumberRef number)
{
  int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (!valuePtr) {
    return 0;
  }
  int v4 = [a2 pidToInheritAppStateFrom];
  return v4 == valuePtr;
}

BOOL CMSUtilityPredicate_IsSameClientAndWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground(int a1, void *a2, CFNumberRef number)
{
  int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  int v4 = [a2 waitingForEndInterruptionWhenDeviceUnlocksOrInForeground];
  BOOL result = 0;
  if (v4)
  {
    int v6 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    return v6 == valuePtr;
  }
  return result;
}

uint64_t CMSUtilityPredicate_IsMatchingLockStopperThatMustResume(int a1, void *a2, CFNumberRef number)
{
  int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if ([a2 stopsWhenDeviceLocks]
    && ([a2 isPlaying] & 1) == 0
    && ([a2 waitingToResumeWhenDeviceUnlocksOrInForeground] & 1) != 0
    || (uint64_t result = [a2 wasInterruptedByNowPlayingApp], result))
  {
    int v5 = objc_msgSend((id)objc_msgSend(a2, "clientPID"), "intValue");
    return v5 == valuePtr;
  }
  return result;
}

uint64_t CMSUtilityPredicate_IsSomeOtherActiveSession(void *a1, void *a2)
{
  if (a2 == a1) {
    return 0;
  }
  else {
    return objc_msgSend(a2, "isActive", v2, v3);
  }
}

void CMSMUtility_PostNotificationToSession(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ([a1 isMemberOfClass:objc_opt_class()])
  {
    [a1 clientName];
    uint64_t v4 = [a1 copyMXSessionList];
  }
  else
  {
    if (![a1 isMemberOfClass:objc_opt_class()])
    {
      int v5 = 0;
      if (!a2) {
        goto LABEL_16;
      }
      goto LABEL_8;
    }
    [a1 clientName];
    uint64_t v4 = [a1 copyMXSessionSecureList];
  }
  int v5 = (void *)v4;
  if (!a2) {
    goto LABEL_16;
  }
LABEL_8:
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  int v6 = CMSMUtility_CopyPrioritizedListBasedOnPlayingAndActiveState(v5);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }

LABEL_16:
}

void *CMSMUtility_CopyPrioritizedListBasedOnPlayingAndActiveState(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1997179E0]();
  uint64_t v3 = (void *)[a1 sortedArrayUsingComparator:&__block_literal_global_23];
  id v4 = v3;
  return v3;
}

uint64_t CMSUtilityPredicate_IsSomeOtherForegroundAndActiveSession(void *a1, void *a2)
{
  if (a2 == a1) {
    return 0;
  }
  uint64_t result = [a2 isActive];
  if (result) {
    return [a2 applicationState] == 8;
  }
  return result;
}

uint64_t CMSUtilityApplier_SetApplicationState(void *a1, CFNumberRef number)
{
  unsigned int valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  return [a1 setApplicationState:valuePtr];
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
}

uint64_t cmsInit(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void __MXDispatchAsync_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1997179E0]();
  uint64_t v3 = a1 + 48;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(unsigned int *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == v4) {
      MEMORY[0x199715FA0](a1 + 48, 1, "MXDispatchAsync_block_invoke", v5, v6, v7, v8, v9);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(unsigned int *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == v10) {
      MEMORY[0x199715FA0](v3, 2, "MXDispatchAsync_block_invoke", v11, v12, v13, v15, v14);
    }
  }
}

void sub_194CE6B94(void *a1, int a2)
{
  id v4 = objc_begin_catch(a1);
  if (a2 == 2) {
    objc_exception_throw(v4);
  }
  HandleDispatchBlockException(*(void *)(v2 + 72), *(void *)(v2 + 80), *(unsigned int *)(v2 + 104), *(void *)(v2 + 88), *(void *)(v2 + 96));
  __break(1u);
}

void sub_194CE6BC0(_Unwind_Exception *a1)
{
}

void MXDispatchAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7)
{
  uint64_t v14 = (void *)MEMORY[0x1997179E0]();
  uint64_t v15 = (void *)MEMORY[0x1997179E0]();
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == a6) {
      CreateACQDispatchID();
    }
  }
  long long v26 = v24;
  uint64_t v27 = v25;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == a6) {
      MEMORY[0x199715FA0](&v26, 0, "MXDispatchAsync", a1, a2, a3, a4, a5);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MXDispatchAsync_block_invoke;
  block[3] = &unk_1E57CAE88;
  long long v17 = v26;
  uint64_t v18 = v27;
  uint64_t v19 = a1;
  int v23 = a3;
  uint64_t v20 = a2;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  block[4] = a6;
  block[5] = a7;
  dispatch_barrier_async(a6, block);
}

uint64_t CMSMDeviceState_IsAudiomxd()
{
  return HIBYTE(gDeviceState);
}

uint64_t CMSMDeviceState_IsMediaserverd()
{
  return gDeviceState;
}

uint64_t MX_FeatureFlags_IsAudiomxdEnabled()
{
  return _os_feature_enabled_impl();
}

void __discoveryManager_postNotificationForDiscoverer_block_invoke(void *a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  id v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
  }
}

void __cmsSetAudioCategory_block_invoke(uint64_t a1)
{
  CMSUtility_UpdateRoutingContextForSession(*(void **)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 32);
}

void CMSMUtility_NotifyEachMatchingSession(uint64_t a1, unsigned int (*a2)(uint64_t, void, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

void sub_194CE7448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __cmsCopyInitialRouteSharingPolicyToSession_block_invoke_2(uint64_t a1)
{
  if (FigCFEqual()) {
    [*(id *)(a1 + 32) updateRouteSharingPolicy:3 setByClient:1];
  }
  if (CMSUtility_IsLongFormVideoSession(*(void **)(a1 + 32)))
  {
    [*(id *)(a1 + 32) routingContextUUID];
    if (!FigCFEqual())
    {
      [*(id *)(a1 + 32) setRoutingContextUUID:qword_1E9359CA0];
      [*(id *)(a1 + 32) updateRouteSharingPolicy:3 setByClient:1];
      cmsUpdateAudioBehavior(*(void **)(a1 + 32));
      CMSMUtility_InformAirPlayOfAudioModeIfNecessary([*(id *)(a1 + 32) routingContextUUID]);
      id v2 = *(id *)(a1 + 32);
      uint64_t v3 = MXGetNotificationSenderQueue();
      MXDispatchAsyncFunction((uint64_t)"cmsCopyInitialRouteSharingPolicyToSession_block_invoke_2", (uint64_t)"CMSessionManager.m", 6608, 0, 0, v3, *(void *)(a1 + 32), (uint64_t)CMSMNotificationUtility_PostSessionRoutingContextDidChange_f);
    }
  }
  CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
  id v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(void **)(a1 + 32);
}

void CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(int a1, int a2)
{
  if (CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_onceToken != -1) {
    dispatch_once(&CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_onceToken, &__block_literal_global_81);
  }
  id v4 = [+[MXSessionManager sharedInstance] copySpeechDetectSession];
  if (a1)
  {
    if (a2) {
      unsigned int v5 = 5;
    }
    else {
      unsigned int v5 = 6;
    }
  }
  else
  {
    unsigned int v5 = [+[MXSessionManager sharedInstance] currentSpeechDetectStyle:v4];
  }
  [(id)CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_sLastSpeechDetectStyleLock lock];
  if (CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_sLastSpeechDetectStyle != v5)
  {
    CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_sLastSpeechDetectStyle = v5;
    uint64_t v6 = MXGetNotificationSenderQueue();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_block_invoke_2;
    v7[3] = &__block_descriptor_38_e5_v8__0l;
    unsigned int v8 = v5;
    char v9 = a1;
    char v10 = a2;
    MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded", (uint64_t)"CMSessionManager_NotificationUtilities.m", 333, 0, 0, v6, (uint64_t)v7);
  }
  [(id)CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded_sLastSpeechDetectStyleLock unlock];
}

uint64_t CMSMUtility_GetCurrentOutputPortAtIndex(uint64_t a1)
{
  uint64_t v2 = dword_1E9359BC0;
  MEMORY[0x199716E90](gCMSM);
  if (v2 <= a1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    __n128 CMSRouteInfoAt = MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, a1, (uint64_t)v6);
    uint64_t v4 = v6[10];
  }
  MEMORY[0x199716EA0](gCMSM, CMSRouteInfoAt);
  return v4;
}

uint64_t vaeDoesBluetoothSupportFeature(uint64_t result)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v7 = 0;
  if (result)
  {
    AudioObjectID v1 = result;
    inAddress.mElement = 0;
    *(void *)&inAddress.mSelector = *(void *)"fstbbolg";
    uint64_t result = AudioObjectHasProperty(result, &inAddress);
    if (result)
    {
      CFTypeRef outData = 0;
      UInt32 ioDataSize = 8;
      OSStatus PropertyData = AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData);
      if (PropertyData || !outData)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        FigCFDictionaryGetBooleanIfPresent();
      }
      if (outData) {
        CFRelease(outData);
      }
      return v7;
    }
  }
  return result;
}

void __cmsCopyInitialRouteSharingPolicyToSession_block_invoke(uint64_t a1)
{
  uint64_t v2 = MX_CoreServices_CopyInitialRouteSharingPolicyForBundleID(*(void *)(a1 + 40));
  uint64_t v3 = MXGetSerialQueue();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __cmsCopyInitialRouteSharingPolicyToSession_block_invoke_2;
  v5[3] = &unk_1E57C6108;
  uint64_t v4 = *(void *)(a1 + 40);
  v5[4] = *(void *)(a1 + 32);
  v5[5] = v2;
  v5[6] = v4;
  MXDispatchAsync((uint64_t)"cmsCopyInitialRouteSharingPolicyToSession_block_invoke", (uint64_t)"CMSessionManager.m", 6589, 0, 0, v3, (uint64_t)v5);
}

void __cmsCopyGameAudioPreferencesToSession_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  Weauint64_t k = objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    uint64_t v2 = Weak;
    int IsGameApp = CMSUtility_IsGameApp(Weak);
    if (IsGameApp)
    {
      uint64_t v4 = (void *)MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID(@"AVGameBypassSystemSpatialAudio", objc_msgSend((id)objc_msgSend(v2, "clientPID"), "unsignedIntValue"));
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v5 = [v4 BOOLValue];
      }
      else {
        uint64_t v5 = 0;
      }
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    objc_msgSend(v2, "setBypassSystemSpatialAudioForGame:", v5, v7, v8);
    [v2 setDoesGameAudioNeedToBeSpatialized:IsGameApp & (v5 ^ 1)];
  }
}

void __CMSessionMgrCopyDisplayIdentifierToSession_block_invoke(uint64_t a1)
{
  CFStringRef v2 = MX_RunningBoardServices_CopyDisplayIDForPID(objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "clientPID"), "intValue"));
  if (v2)
  {
    uint64_t v3 = (__CFString *)v2;
    [*(id *)(a1 + 32) setDisplayID:v2];

    if ([*(id *)(a1 + 32) isActive]) {
      [+[MXAdditiveRoutingManager sharedInstance] sendActiveSessionsInfoToVA];
    }
    CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
  }
  if ([*(id *)(a1 + 32) displayID] && objc_msgSend(*(id *)(a1 + 32), "reporterIDs"))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"MXHostApplicationDisplayID", (const void *)[*(id *)(a1 + 32) displayID]);
    uint64_t v5 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "reporterIDs"), "count");
    if (v5 >= 1)
    {
      uint64_t v6 = v5;
      for (CFIndex i = 0; i != v6; ++i)
      {
        uint64_t valuePtr = 1;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)[*(id *)(a1 + 32) reporterIDs], i);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        off_1E9359D08(valuePtr, Mutable);
      }
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v9 = *(void **)(a1 + 32);
    if ([v9 displayID])
    {
      CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFStringRef)[v9 displayID]);
      id v11 = v9;
      SerialQueue = MX_CoreServices_GetSerialQueue();
      uint64_t valuePtr = MEMORY[0x1E4F143A8];
      uint64_t v15 = 3221225472;
      uint64_t v16 = __cmsCopyInitialRouteSharingPolicyToSession_block_invoke;
      long long v17 = &unk_1E57CA3A0;
      v18[0] = v9;
      v18[1] = (id)Copy;
      MXDispatchAsync((uint64_t)"cmsCopyInitialRouteSharingPolicyToSession", (uint64_t)"CMSessionManager.m", 6585, 0, 0, SerialQueue, (uint64_t)&valuePtr);
    }
    objc_initWeak(&location, *(id *)(a1 + 32));
    uint64_t v13 = MX_CoreServices_GetSerialQueue();
    uint64_t valuePtr = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    uint64_t v16 = __cmsCopyGameAudioPreferencesToSession_block_invoke;
    long long v17 = &unk_1E57CB250;
    objc_copyWeak(v18, &location);
    MXDispatchAsync((uint64_t)"cmsCopyGameAudioPreferencesToSession", (uint64_t)"CMSessionManager.m", 6629, 0, 0, v13, (uint64_t)&valuePtr);
    objc_destroyWeak(v18);
    objc_destroyWeak(&location);
  }
}

void sub_194CE8C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t MX_CoreServices_GetSerialQueue()
{
  if (MX_CoreServices_GetSerialQueue_onceToken != -1) {
    dispatch_once(&MX_CoreServices_GetSerialQueue_onceToken, &__block_literal_global_8_0);
  }
  return MX_CoreServices_GetSerialQueue_sSerialQueue;
}

CFStringRef MX_RunningBoardServices_CopyDisplayIDForPID(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if ((int)a1 < 1) {
    return 0;
  }
  int v1 = a1;
  CFStringRef result = (CFStringRef)MX_RunningBoardServices_CopyBundleIdentifierForProcessID(a1);
  if (!result)
  {
    memset(v8, 0, 512);
    size_t v4 = 648;
    *(void *)uint64_t v5 = 0xE00000001;
    int v6 = 1;
    int v7 = v1;
    int v3 = sysctl(v5, 4u, v8, &v4, 0, 0);
    CFStringRef result = 0;
    if (v3 != -1)
    {
      if (v4) {
        return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)&v8[15] + 3, 0x8000100u);
      }
    }
  }
  return result;
}

uint64_t MX_RunningBoardServices_CopyBundleIdentifierForProcessID(uint64_t a1)
{
  if (initializeLogging_onceToken != -1) {
    dispatch_once(&initializeLogging_onceToken, &__block_literal_global_52);
  }
  CFStringRef v2 = (void *)MEMORY[0x1997179E0]();
  uint64_t v3 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a1), "bundle"), "identifier"), "copy");
  return v3;
}

void *MX_CoreServices_CopyInitialRouteSharingPolicyForBundleID(uint64_t a1)
{
  int v1 = 0;
  if (a1 && gCoreServicesIsInitialized)
  {
    CFStringRef v2 = (void *)[(id)gLSApplicationProxyClass applicationProxyForIdentifier:a1];
    id v3 = (id)objc_opt_new();
    [v3 addObject:@"AVInitialRouteSharingPolicy"];
    int v1 = objc_msgSend((id)objc_msgSend(v2, "objectsForInfoDictionaryKeys:", v3), "stringForKey:", @"AVInitialRouteSharingPolicy");
    id v4 = v1;
  }
  return v1;
}

uint64_t CMSUtility_IsGameApp(void *a1)
{
  if (MX_CoreServices_DoesAppHaveGamesGenre([a1 displayID]))
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t v5 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      return 1;
    }
  }
  else
  {
    id v3 = (void *)MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID(@"LSApplicationCategoryType", objc_msgSend((id)objc_msgSend(a1, "clientPID"), "unsignedIntValue"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v3 hasSuffix:@"games"])
    {
      if (dword_1E9359ED0)
      {
        id v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        uint64_t v5 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        uint64_t v5 = 1;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  return v5;
}

uint64_t MX_CoreServices_DoesAppHaveGamesGenre(uint64_t a1)
{
  if (a1)
  {
    int v1 = (void *)[(id)gLSApplicationProxyClass applicationProxyForIdentifier:a1];
    if (objc_msgSend((id)objc_msgSend(v1, "genre"), "containsString:", @"Games")) {
      return 1;
    }
    else {
      return objc_msgSend((id)objc_msgSend(v1, "genreID"), "isEqualToNumber:", &unk_1EE605DE8);
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
}

void __cmsmApplicationStateChangedNotificationCallback_block_invoke_2(uint64_t a1)
{
  CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_DoesInheritApplicationStateFromPID, *(void *)(a1 + 32), (unint64_t)CMSUtilityApplier_InheritApplicationStateAndPostApplicationStateDidChangeNotification, *(void *)(a1 + 40));
  CFStringRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  id v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

void __FigRoutingManagerApplicationStateChangedNotificationCallback_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFArrayRef v9 = 0;
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyEndpointsToDeactivateInfoAndUUIDsForPID(*(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), &theArray, &v9);
  if (!theArray) {
    goto LABEL_12;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  CFIndex v2 = Count;
  if (Count < 1 || dword_1E9359DC0 == 0)
  {
    if (Count < 1) {
      goto LABEL_10;
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFIndex v5 = 0;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v5);
    int v7 = CFArrayGetValueAtIndex(v9, v5);
    CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"ActivatedEndpointsInfo_Endpoint");
    uint64_t v11 = 0;
    FigCFDictionaryGetInt64IfPresent();
    FigRoutingManager_iOSDeactivateEndpoint(Value, v11);
    FigRoutingManagerContextUtilities_SetPickedEndpoints(v7, 0, @"configUpdateReasonEndedApplicationStateChanged", 0, 0);
    ++v5;
  }
  while (v2 != v5);
LABEL_10:
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
LABEL_12:
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t FigRoutingManagerContextUtilities_CopyEndpointsToDeactivateInfoAndUUIDsForPID(int a1, int a2, void *a3, void *a4)
{
  uint64_t result = 4294954296;
  if (a3 && a4)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    char v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFMutableArrayRef v12 = CFArrayCreateMutable(v9, 0, v10);
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v13 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v14 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v14 = 504;
    }
    uint64_t v15 = *(NSObject **)v14;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    id v18[2] = __FigRoutingManagerContextUtilities_CopyEndpointsToDeactivateInfoAndUUIDsForPID_block_invoke;
    v18[3] = &__block_descriptor_64_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v13 = 0;
    }
    int v19 = a2;
    int v20 = a1;
    v18[4] = v13;
    v18[5] = Mutable;
    v18[6] = v12;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyEndpointsToDeactivateInfoAndUUIDsForPID", (uint64_t)"FigRoutingManagerContextUtilities.m", 3738, 0, 0, v15, (uint64_t)v18);
    if (Mutable) {
      CFTypeRef v16 = CFRetain(Mutable);
    }
    else {
      CFTypeRef v16 = 0;
    }
    *a3 = v16;
    if (v12) {
      CFTypeRef v17 = CFRetain(v12);
    }
    else {
      CFTypeRef v17 = 0;
    }
    *a4 = v17;
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v12) {
      CFRelease(v12);
    }
    return 0;
  }
  return result;
}

void *CMSMUtility_GetCMSessionWithDisplayID(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  int v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
LABEL_4:
    uint64_t v5 = 0;
    while (1)
    {
      if (*(void *)v9 != v4) {
        objc_enumerationMutation(v1);
      }
      int v6 = *(void **)(*((void *)&v8 + 1) + 8 * v5);
      [v6 displayID];
      if (FigCFEqual()) {
        break;
      }
      if (v3 == ++v5)
      {
        uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v3) {
          goto LABEL_4;
        }
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    int v6 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

void __vaemPostAvailableEndpointsChangedNotification_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (*(unsigned char *)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  uint64_t v2 = (const void *)qword_1E9359B78;
  CFRelease(v2);
}

uint64_t __cmsmUpdatePickableRouteDescriptionLists_block_invoke(uint64_t a1)
{
  return CMSMNotificationUtility_PostPickableRoutesDidChange(*(unsigned char *)(a1 + 32));
}

void vaemPostAvailableEndpointsChangedNotification(char a1)
{
  if (qword_1E9359B78)
  {
    CFRetain((CFTypeRef)qword_1E9359B78);
    uint64_t v2 = MXGetNotificationSenderQueue();
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __vaemPostAvailableEndpointsChangedNotification_block_invoke;
    v3[3] = &__block_descriptor_33_e5_v8__0l;
    char v4 = a1;
    MXDispatchAsync((uint64_t)"vaemPostAvailableEndpointsChangedNotification", (uint64_t)"CMSessionManager_VAEndpointManager.m", 11202, 0, 0, v2, (uint64_t)v3);
  }
}

uint64_t CMSMNotificationUtility_PostPickableRoutesDidChange(char a1)
{
  uint64_t v2 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostPickableRoutesDidChange_block_invoke;
  v4[3] = &__block_descriptor_33_e5_v8__0l;
  char v5 = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostPickableRoutesDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1157, 0, 0, v2, (uint64_t)v4);
  return +[MXSystemController notifyAll:@"PickableRoutesDidChange" payload:0 dontPostIfSuspended:1];
}

void __MXCoreSessionSetProperty_block_invoke()
{
  CMSMUtility_UpdateSomeLongFormVideoClientIsActiveOverAirPlayVideo();
  CMSMUtility_UpdateSomeLongFormVideoClientIsPlayingOverAirPlayVideo();
  CMSMNotificationUtility_PostVideoStreamsDidChange();
}

void CMSMNotificationUtility_PostVideoStreamsDidChange()
{
  id CurrentlyAirPlayingVideoStreamsDictionary = CMSMUtility_CreateCurrentlyAirPlayingVideoStreamsDictionary(@"BundleID", @"VideoRoutes");
  if (!FigCFEqual())
  {
    +[MXSystemController notifyAll:@"VideoStreamsDidChange" payload:CurrentlyAirPlayingVideoStreamsDictionary dontPostIfSuspended:0];
    int v1 = (const void *)CMSMNotificationUtility_PostVideoStreamsDidChange_cachedVideoStreamsPayload;
    CMSMNotificationUtility_PostVideoStreamsDidChange_cachedVideoStreamsPayload = (uint64_t)CurrentlyAirPlayingVideoStreamsDictionary;
    if (CurrentlyAirPlayingVideoStreamsDictionary) {
      CFRetain(CurrentlyAirPlayingVideoStreamsDictionary);
    }
    if (v1) {
      CFRelease(v1);
    }
  }
  if (CurrentlyAirPlayingVideoStreamsDictionary)
  {
    CFRelease(CurrentlyAirPlayingVideoStreamsDictionary);
  }
}

uint64_t __vaemVADSerializationListener_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  MEMORY[0x199716E90](gCMSM);
  CMSMVAUtility_AudioObjectSetPropertyData();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return MEMORY[0x199716EA0](gCMSM);
}

uint64_t __vaemVADRouteChangeListener_block_invoke()
{
  return cmsmUpdatePickableRouteDescriptionLists(1);
}

void __FigRoutingManagerAvailableEndpointsDidChangeForEndpointManager_block_invoke(uint64_t a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v26 = 0;
  uint64_t v23 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  char v5 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v4 + 48);
  if (v5) {
    v5(CMBaseObject, *MEMORY[0x1E4F20620], v23, &v26);
  }
  CFTypeRef EndpointToAutoConnect = FigRoutingManagerCopyFirstEndpointToAutoConnect(*(CFArrayRef *)(a1 + 40));
  if (EndpointToAutoConnect)
  {
    int v7 = EndpointToAutoConnect;
    FigRoutingManagerProcessEndpointToAutoconnect(EndpointToAutoConnect);
    CFRelease(v7);
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    CFIndex v8 = 0;
    uint64_t v9 = *MEMORY[0x1E4F20FB0];
    while (1)
    {
      CFArrayRef Count = *(const __CFArray **)(a1 + 48);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (v8 >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v8);
      if (FigRoutingManagerIsEndpointNonRemoteControlLocalAirPlay((uint64_t)ValueAtIndex)
        && !CMSMDeviceState_IsHomePodHub())
      {
        CFTypeRef v24 = 0;
        CFTypeRef v25 = 0;
        FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v25);
        FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v25, (uint64_t)&v24);
        if (FigRoutingManagerIsConfigurationWHASilentPrimary((uint64_t)v25))
        {
          cf[0] = 0;
          if (v24)
          {
            uint64_t v12 = FigEndpointGetCMBaseObject();
            uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v14 = v13 ? v13 : 0;
            CFTypeRef v16 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v14 + 48);
            if (v16) {
              v16(v12, v9, v23, cf);
            }
          }
          FigRoutingManagerLogEndpointIDs(@"FigRoutingManager_iOSHandleAvailableEndpointsDidChangeNotification - Skip adding local endpoint to aggregate. The sub-endpoints in the aggregate are: ", (const __CFArray *)cf[0], 0, 1);
          if (cf[0]) {
            CFRelease(cf[0]);
          }
        }
        else
        {
          if (dword_1E9359DC0)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRoutingManagerAggregateAddLocalAirPlayEndpoint(v25, (void *)v24);
        }
        if (v24)
        {
          CFRelease(v24);
          CFTypeRef v24 = 0;
        }
        if (v25) {
          CFRelease(v25);
        }
      }
      ++v8;
    }
  }
  else if (FigCFEqual())
  {
    if ((CFArrayRef v17 = *(const __CFArray **)(a1 + 48)) != 0 && CFArrayGetCount(v17) > 0
      || (CFArrayRef v18 = *(const __CFArray **)(a1 + 56)) != 0 && CFArrayGetCount(v18) >= 1)
    {
      cf[0] = 0;
      FigRoutingManagerContextUtilities_CopySidePlayContextUUID((uint64_t)cf);
      FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], @"currentRouteChanged", 0);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
  }
  int v19 = *(const void **)(a1 + 32);
  if (v19) {
    CFRelease(v19);
  }
  int v20 = *(const void **)(a1 + 40);
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = *(const void **)(a1 + 48);
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(a1 + 56);
  if (v22) {
    CFRelease(v22);
  }
  if (v26) {
    CFRelease(v26);
  }
}

void __FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange_block_invoke(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int valuePtr = discovererManager_getDiscoveryModeAsInt();
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberSInt32Type, &valuePtr);
  if (v4) {
    CFDictionarySetValue(Mutable, @"Level", v4);
  }
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 40);
  if (v5)
  {
    if (CFDictionaryContainsKey(v5, @"ObjectHash"))
    {
      CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"ObjectHash");
      CFDictionarySetValue(Mutable, @"ObjectHash", Value);
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 40), @"Client"))
    {
      int v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"Client");
      CFDictionarySetValue(Mutable, @"Client", v7);
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 40), @"OnBehalfOf"))
    {
      CFIndex v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"OnBehalfOf");
      CFDictionarySetValue(Mutable, @"OnBehalfOf", v8);
    }
  }
  PLLogRegisteredEvent();
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v9 = *(const void **)(a1 + 32);
  if (v9) {
    CFRelease(v9);
  }
  long long v10 = *(const void **)(a1 + 40);
  if (v10) {
    CFRelease(v10);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void __CMSMPowerLogPostPowerLogData_block_invoke(uint64_t a1)
{
  PLLogRegisteredEvent();
  CFAllocatorRef v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
  }
}

CFTypeRef FigRoutingManagerCopyFirstEndpointToAutoConnect(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  uint64_t v3 = *MEMORY[0x1E4F20D10];
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  while (1)
  {
    CFIndex v5 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v5) {
      break;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2);
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    long long v10 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v9 + 48);
    if (v10) {
      v10(CMBaseObject, v3, v4, &cf);
    }
    int v11 = FigCFEqual();
    CFTypeRef v12 = 0;
    if (ValueAtIndex && v11) {
      CFTypeRef v12 = CFRetain(ValueAtIndex);
    }
    if (cf) {
      CFRelease(cf);
    }
    ++v2;
    if (v12) {
      return v12;
    }
  }
  return 0;
}

void FigRoutingManagerAvailableEndpointsDidChangeForEndpointManager(const void *a1, const void *a2, const void *a3, const void *a4)
{
  +[MXInitialization waitUntilMXIsFullyInitialized];
  SharedManager = FigRoutingManagerGetSharedManager();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  if (a4) {
    CFRetain(a4);
  }
  uint64_t v9 = *((void *)SharedManager + 1);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingManagerAvailableEndpointsDidChangeForEndpointManager_block_invoke;
  v10[3] = &__block_descriptor_64_e5_v8__0l;
  v10[4] = a1;
  v10[5] = a2;
  v10[6] = a3;
  v10[7] = a4;
  MXDispatchAsync((uint64_t)"FigRoutingManagerAvailableEndpointsDidChangeForEndpointManager", (uint64_t)"FigRoutingManager_iOS.m", 4758, 0, 0, v9, (uint64_t)v10);
}

uint64_t cmsSetAudioCategory(void *a1, const void *a2, int a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294954316;
  }
  [a1 audioCategory];
  int v8 = FigCFEqual();
  if (!a3 && v8) {
    return 0;
  }
  if (!a2 || CFEqual(a2, &stru_1EE5E8D28)) {
    return 4294954316;
  }
  if ([a1 isSharePlayMediaSession]
    && ![+[MXSessionManager sharedInstance] isAudioCategoryAllowedForSharePlayMedia:a2])
  {
    if (!dword_1E9359ED0) {
      return 4294951615;
    }
LABEL_19:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294951615;
  }
  if ([a1 isSharePlayCallSession])
  {
    [a1 audioMode];
    if (!CMSMUtility_AreCategoryAndModeValidForSharePlayCallSession((uint64_t)a2))
    {
      if (!dword_1E9359ED0) {
        return 4294951615;
      }
      goto LABEL_19;
    }
  }
  if ([a1 isRecording] && !CMSMUtility_IsInputAllowedForCategory(a2))
  {
    if (dword_1E9359ED0)
    {
      CFArrayRef v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 4294951611;
  }
  else
  {
    int v21 = [+[MXSessionManager sharedInstance] uplinkMute];
    if ([a1 audioCategory])
    {
      int v11 = (const void *)[a1 audioCategory];
      if (v11) {
        CFTypeRef v12 = (void *)CFRetain(v11);
      }
      else {
        CFTypeRef v12 = 0;
      }
      int IsAudioCategoryPrimary = CMSUtility_IsAudioCategoryPrimary(a1);
      unsigned int LocalSessionPriority = CMSM_GetLocalSessionPriority(a1, 1);
    }
    else
    {
      CFTypeRef v12 = 0;
      int IsAudioCategoryPrimary = 0;
      unsigned int LocalSessionPriority = 100;
    }
    [a1 setAudioCategory:a2];
    if (dword_1E9359ED0)
    {
      int v26 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cmsUpdateSessionStateForNewCategory(a1, v12, a4);
    if ([a1 isActive])
    {
      CMSUtility_UpdateRoutingContextForSession(a1);
      uint64_t v9 = cmsBeginInterruptionGuts(a1, 0, 2);
      if (v9)
      {
        [a1 setAudioCategory:v12];
        if (dword_1E9359ED0)
        {
          int v26 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        cmsUpdateSessionStateForNewCategory(a1, a2, a4);
        CMSUtility_UpdateRoutingContextForSession(a1);
      }
      if (objc_msgSend(a1, "mutesAudioBasedOnRingerSwitchState", v19, v20))
      {
        [a1 setMutesAudioBasedOnRingerSwitchState:0];
        cmsUpdateMuteStatus(a1);
      }
      CMSMUtility_UpdatePlayAndRecordAppSpeechState(0);
      CMSMNotificationUtility_PostVoicePromptStyleDidChange();
      CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics(a1, 0, 0xEu, 0, 0, 0);
      cmsUpdateMuteStatus(a1);
      if (CMSUtility_GetIsPlaying(a1))
      {
        if (IsAudioCategoryPrimary != CMSUtility_IsAudioCategoryPrimary(a1))
        {
          CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange(a1);
          CMSMNotificationUtility_PostSomeOtherPrimaryAudioCategoryIsPlayingDidChange(a1);
        }
        CMSUtility_RouteToPreferredRouteIfRequired(a1, LocalSessionPriority, 6);
      }
      cmsmUpdatePickableRouteDescriptionLists(1);
      if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
        && CMSMUtility_IsVoiceCallCategory()
        && !MX_FeatureFlags_IsCallManagementMuteControlEnabled())
      {
        vaemSetUplinkMute(v21);
      }
    }
    else
    {
      if (([a1 isActive] & 1) == 0)
      {
        id v16 = a1;
        CFArrayRef v17 = MXGetSerialQueue();
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        v24[2] = __cmsSetAudioCategory_block_invoke;
        v24[3] = &unk_1E57C6368;
        v24[4] = a1;
        MXDispatchAsync((uint64_t)"cmsSetAudioCategory", (uint64_t)"CMSessionManager.m", 7879, 0, 0, v17, (uint64_t)v24);
      }
      uint64_t v9 = 0;
    }
    if ((objc_msgSend(v12, "isEqualToString:", objc_msgSend(a1, "audioCategory", v19, v20)) & 1) == 0) {
      CMSMNotificationUtility_PostSessionAudioCategoryDidChange(a1);
    }
    if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
      && [a1 isActive]
      && MX_FeatureFlags_IsCallManagementMuteControlEnabled())
    {
      [+[MXSessionManager sharedInstance] applyUplinkMute:a1];
    }
    if (v12) {
      CFRelease(v12);
    }
  }
  return v9;
}

uint64_t CMSMUtility_IsSharePlayMediaSessionActive()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!MX_FeatureFlags_IsSharePlayEnabled()) {
    return 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  int v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        CFIndex v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if CMSUtility_GetIsActive(v5) && ([v5 isSharePlayMediaSession])
        {
          uint64_t v6 = 1;
          goto LABEL_14;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_14:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t MX_FeatureFlags_IsSessionBasedMutingEnabled()
{
  if (MX_FeatureFlags_IsSessionBasedMutingEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsSessionBasedMutingEnabled_onceToken, &__block_literal_global_141);
  }
  return MX_FeatureFlags_IsSessionBasedMutingEnabled_isSessionBasedMutingEnabled;
}

void *CMSUtility_GetAudioCategory(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 audioCategory];
  }
  return a1;
}

uint64_t cmsUpdateSessionStateForNewCategory(void *a1, const void *a2, void *a3)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  [a1 setOverridePortsList:0];
  if (CMSMUtility_IsInputAllowedForCategory(a2)
    && !CMSMUtility_IsInputAllowedForCategory((const void *)[a1 audioCategory]))
  {
    [a1 setSubPortPreferences:0];
  }
  [a1 setAllowedPortTypes:0];
  [a1 setAllowedRouteTypes:0];
  [a1 setStopsWhenDeviceLocks:0];
  [a1 setMakesMusicResume:0];
  [a1 setHasInput:0];
  [a1 setMustUseDefaultClientPriority:0];
  [a1 setAllowsBluetoothRecordingCustomization:0];
  [a1 setAllowsDefaultBuiltInRouteCustomization:0];
  [a1 setAllowSystemSoundsWhileRecording:0];
  [a1 setPrefersToTakeHWControlFlagsFromAnotherSession:1];
  [a1 setWantsToBeVolumeButtonClient:1];
  if (([a1 isEligibleForBTSmartRoutingConsiderationSetByClient] & 1) == 0) {
    [a1 setIsEligibleForBTSmartRoutingConsideration:1];
  }
  if ([a1 audioCategory]
    && (CFEqual((CFTypeRef)[a1 audioCategory], @"SystemSoundsAndHaptics")
     || -[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [a1 audioCategory])))
  {
    [a1 setIsEligibleForNowPlayingAppConsideration:0];
    [a1 setBadgeType:@"NotApplicable"];
    objc_msgSend(a1, "setSupportedOutputChannelLayouts:", objc_msgSend(MEMORY[0x1E4F1C978], "array"));
  }
  uint64_t v6 = (void *)[a3 objectForKey:@"InterruptionStyle"];
  if ([v6 unsignedIntValue]) {
    objc_msgSend(a1, "updateInterruptionStyle:", objc_msgSend(v6, "unsignedIntValue"));
  }
  else {
    [a1 setUpDefaultInterruptionStyleForCategoryAndMode];
  }
  if (![a1 audioCategory]) {
    goto LABEL_17;
  }
  objc_msgSend(a1, "setHasInput:", -[NSSet containsObject:](-[MXSessionManager audioCategoriesWithInput](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "audioCategoriesWithInput"), "containsObject:", objc_msgSend(a1, "audioCategory")));
  if (CFEqual((CFTypeRef)[a1 audioCategory], @"UserInterfaceSoundEffects")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"AmbientSound"))
  {
    [a1 setStopsWhenDeviceLocks:1];
LABEL_17:
    int v7 = a1;
    unsigned int v8 = 1179648;
LABEL_18:
    cmsSetControlFlags(v7, v8);
    goto LABEL_19;
  }
  if (-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [a1 audioCategory]))
  {
    [a1 setWantsToBeVolumeButtonClient:0];
    [a1 setPrefersNoDucking:1];
    [a1 setDoesntActuallyPlayAudio:1];
    [a1 setIsEligibleForBTSmartRoutingConsideration:0];
    [a1 setIsEligibleForBTSmartRoutingConsiderationSetByClient:0];
    [a1 setIsEligibleForBTTriangleConsideration:0];
    [a1 setHandsOverInterruptionsToInterruptor:1];
    v27[0] = @"SpeechDetectStyleDidChange";
    [MEMORY[0x1E4F1C978] arrayWithObjects:v27 count:1];
    MXCoreSessionSetProperty((int)a1, @"SubscribeToNotifications");
LABEL_54:
    int v7 = a1;
    unsigned int v8 = 0;
    goto LABEL_18;
  }
  if (CFEqual((CFTypeRef)[a1 audioCategory], @"MediaPlayback")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"MediaPlaybackNoSpeaker")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"LiveAudio")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"AudioProcessing")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"SoloAmbientSound"))
  {
    cmsSetControlFlags(a1, 0x120000u);
    if (CFEqual((CFTypeRef)[a1 audioCategory], @"SoloAmbientSound")) {
      [a1 setStopsWhenDeviceLocks:1];
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      [a1 setDoesntActuallyPlayAudio:1];
    }
    goto LABEL_19;
  }
  if (CFEqual((CFTypeRef)[a1 audioCategory], @"Notice")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"VoiceOver"))
  {
    goto LABEL_17;
  }
  if (CFEqual((CFTypeRef)[a1 audioCategory], @"VoiceCommand")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"VoiceCommand_WithBluetooth"))
  {
    [a1 setMakesMusicResume:1];
LABEL_69:
    [a1 setAllowsBluetoothRecordingCustomization:1];
    [a1 setHandsOverInterruptionsToInterruptor:1];
LABEL_70:
    int v7 = a1;
    unsigned int v8 = 18;
    goto LABEL_18;
  }
  if (CFEqual((CFTypeRef)[a1 audioCategory], @"VoiceCommandThatMixes")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"VoiceCommandThatMixes_WithBluetooth"))
  {
    goto LABEL_69;
  }
  if (!CFEqual((CFTypeRef)[a1 audioCategory], @"Record")
    && !CFEqual((CFTypeRef)[a1 audioCategory], @"Record_WithBluetooth")
    && !CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord")
    && !CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_WithBluetooth")
    && !CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_NoBluetooth_DefaultToSpeaker")
    && !CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_WithBluetooth_DefaultToSpeaker")
    && !CFEqual((CFTypeRef)[a1 audioCategory], @"Multi"))
  {
    if (CMSUtility_HasPhoneCallBehaviour(a1)) {
      goto LABEL_70;
    }
    if (CFEqual((CFTypeRef)[a1 audioCategory], @"Ringtone"))
    {
      int v21 = a1;
      unsigned int v22 = 1179648;
LABEL_118:
      cmsSetControlFlags(v21, v22);
      [a1 setHandsOverInterruptionsToInterruptor:1];
      goto LABEL_19;
    }
    if (CFEqual((CFTypeRef)[a1 audioCategory], @"Alarm"))
    {
      if (CFEqual((CFTypeRef)[a1 audioMode], @"Sleep")) {
        unsigned int v22 = 0;
      }
      else {
        unsigned int v22 = 1179648;
      }
      int v21 = a1;
      goto LABEL_118;
    }
    if (CFEqual((CFTypeRef)[a1 audioCategory], @"RingtonePreview"))
    {
      [a1 setMakesMusicResume:1];
      goto LABEL_121;
    }
    if (!CFEqual((CFTypeRef)[a1 audioCategory], @"FindMyPhone")
      && !CFEqual((CFTypeRef)[a1 audioCategory], @"WaterEjection"))
    {
      if (CFEqual((CFTypeRef)[a1 audioCategory], @"EmergencyAlert")
        || CFEqual((CFTypeRef)[a1 audioCategory], @"EmergencyAlert_Muteable"))
      {
        [a1 setHandsOverInterruptionsToInterruptor:1];
        [a1 setMustUseDefaultClientPriority:1];
        [a1 setMakesMusicResume:1];
        goto LABEL_70;
      }
      if (CFEqual((CFTypeRef)[a1 audioCategory], @"Voicemail")
        || CFEqual((CFTypeRef)[a1 audioCategory], @"VoicemailGreeting"))
      {
LABEL_121:
        [a1 setHandsOverInterruptionsToInterruptor:1];
        goto LABEL_17;
      }
      if (!CFEqual((CFTypeRef)[a1 audioCategory], @"FindMyAudioDevice"))
      {
        if (CFEqual((CFTypeRef)[a1 audioCategory], @"SystemSoundsAndHaptics"))
        {
          [a1 setStopsWhenDeviceLocks:1];
          [a1 setPrefersToTakeHWControlFlagsFromAnotherSession:0];
          [a1 setWantsToBeVolumeButtonClient:0];
          int v7 = a1;
          unsigned int v8 = 0x100000;
          goto LABEL_18;
        }
        if (CFEqual((CFTypeRef)[a1 audioCategory], @"eARC"))
        {
          int v7 = a1;
          unsigned int v8 = 2;
          goto LABEL_18;
        }
        CFEqual((CFTypeRef)[a1 audioCategory], @"HearingTest");
        goto LABEL_17;
      }
    }
    [a1 setHandsOverInterruptionsToInterruptor:1];
    [a1 setMakesMusicResume:1];
    goto LABEL_17;
  }
  [a1 setAllowsBluetoothRecordingCustomization:1];
  if (CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_WithBluetooth")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_NoBluetooth_DefaultToSpeaker")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_WithBluetooth_DefaultToSpeaker")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"Multi"))
  {
    [a1 setAllowsDefaultBuiltInRouteCustomization:1];
  }
  [a1 audioCategory];
  if (FigCFEqual())
  {
    [a1 setPreferredNumberOfInputChannels:0];
    [a1 setPreferredNumberOfOutputChannels:0];
  }
  if (([a1 audioHWControlFlagsSetByClient] & 1) == 0) {
    cmsSetControlFlags(a1, 0x12u);
  }
  double PreferredIOBufferDuration = CMSUtility_GetPreferredIOBufferDuration(a1, v16);
  if (*(float *)&PreferredIOBufferDuration == 0.0 && !CMSUtility_GetPreferredIOBufferFrames(a1, v17))
  {
    LODWORD(v19) = 1018980991;
    [a1 updatePreferredIOBufferDuration:v19];
  }
  if (CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_WithBluetooth")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_NoBluetooth_DefaultToSpeaker")
    || CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_WithBluetooth_DefaultToSpeaker"))
  {
    [a1 audioMode];
    [a1 setHandsOverInterruptionsToInterruptor:FigCFEqual() != 0];
  }
  if ((CFEqual((CFTypeRef)[a1 audioCategory], @"Record")
     || CFEqual((CFTypeRef)[a1 audioCategory], @"Record_WithBluetooth")
     || CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord")
     || CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_WithBluetooth")
     || CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_NoBluetooth_DefaultToSpeaker")
     || CFEqual((CFTypeRef)[a1 audioCategory], @"PlayAndRecord_WithBluetooth_DefaultToSpeaker"))
    && CFEqual((CFTypeRef)[a1 audioMode], @"SoundRecognition")
    && CMSMVAUtility_IsAdditiveRoutingEnabled()
    && (([a1 isRoutedToOnDemandVAD] & 1) != 0
     || [a1 willRouteToOnDemandVADOnActivation]))
  {
    if (dword_1E9359ED0)
    {
      LODWORD(v27[0]) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_54;
  }
LABEL_19:
  if (objc_msgSend(a1, "preferredPersistentRoute", v23, v25))
  {
    if (dword_1E9359ED0)
    {
      long long v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cmsSetControlFlags(a1, objc_msgSend(a1, "hwControlFlags", v24, v26) & 0xFFFDFFFD | 2);
  }
  cmsUpdateAudioBehavior(a1);
  cmsUpdatePiPIsPossible(a1);
  if ([a1 mustUseDefaultClientPriority]
    && !MX_FeatureFlags_CanClientsSetEmergencyAlertPriority())
  {
    [a1 setClientPriority:0];
  }
  if (!MX_FeatureFlags_CanClientsSetEmergencyAlertPriority())
  {
    if (CMSMUtility_IsEmergencyAlertCategory([a1 audioCategory])
      && ![a1 hasAudioMode:@"Beacon"])
    {
      uint64_t v10 = 20;
      goto LABEL_32;
    }
    if ([a1 clientPriority] == 20)
    {
      uint64_t v10 = 0;
LABEL_32:
      [a1 setClientPriority:v10];
    }
  }
  if ([a1 mode])
  {
    uint64_t CustomizedCategory = CMSUtility_GetCustomizedCategory(a1);
    if (CustomizedCategory)
    {
      uint64_t v12 = CustomizedCategory;
      [a1 audioCategory];
      if (!FigCFEqual()) {
        [a1 setAudioCategory:v12];
      }
    }
  }
  [a1 setHasPhoneCallBehavior:0];
  if ([a1 audioCategory])
  {
    if (CMSUtility_HasPhoneCallBehaviour(a1))
    {
      [a1 setHasPhoneCallBehavior:1];
      [a1 setOptOutOfMutePriority:1];
      [a1 setHandsOverInterruptionsToInterruptor:1];
      [a1 setAllowSystemSoundsWhileRecording:1];
      if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1))
      {
        int IsDoingActivity = FigEndpointCentralEntityIsDoingActivity(qword_1E9359C70, 0x1EE5E67A8, @"PhoneCall");
        int v14 = FigEndpointCentralEntityIsDoingActivity(qword_1E9359C70, 0x1EE5E67A8, @"Speech");
        if ([a1 hasPhoneCallBehavior])
        {
          if (IsDoingActivity && !v14) {
            FigEndpointCentralUpdateiOSDeviceState(qword_1E9359C70, 0, 10, @"Phone activity", 0);
          }
        }
      }
    }
  }
  if ([a1 isTheAssistant]) {
    [a1 setHandsOverInterruptionsToInterruptor:1];
  }
  [a1 audioCategory];
  [a1 setIsLongFormAudio:FigCFEqual() != 0];
  if ([a1 preferredDecoupledInputOutput]
    && !CMSMUtility_IsAllowedToSetPreferredDecoupledInputOutput([a1 audioCategory]))
  {
    [a1 setPreferredDecoupledInputOutput:0];
  }
  uint64_t result = [a1 isActive];
  if (result)
  {
    CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
    CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
    return [+[MXAdditiveRoutingManager sharedInstance] sendActiveSessionsInfoToVA];
  }
  return result;
}

uint64_t CMSUtility_IsAudioCategoryPrimary(void *a1)
{
  if (a1)
  {
    [a1 audioCategory];
    if (FigCFEqual()) {
      return 0;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      return 0;
    }
    [a1 audioCategory];
    if (FigCFEqual()) {
      return 0;
    }
    [a1 audioCategory];
    if (FigCFEqual()
      || -[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [a1 audioCategory]))
    {
      return 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 1;
}

uint64_t MX_FeatureFlags_IsSpeechDetectEnabled()
{
  if (MX_FeatureFlags_IsSpeechDetectEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsSpeechDetectEnabled_onceToken, &__block_literal_global_75);
  }
  return MX_FeatureFlags_IsSpeechDetectEnabled_sSpeechDetectEnabled;
}

uint64_t CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(void *a1, int a2)
{
  if (a1)
  {
    if (([a1 doesntActuallyPlayAudio] & 1) == 0)
    {
      if ([a1 preferredPersistentRoute])
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
      if (a2)
      {
        if (([a1 isEligibleForBTSmartRoutingConsideration] & 1) == 0) {
          return 0;
        }
      }
      else if (![a1 isEligibleForBTTriangleConsideration])
      {
        return 0;
      }
      return 1;
    }
    return 0;
  }
  CFIndex v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  uint64_t v6 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v6;
}

void cmsUpdatePiPIsPossible(void *a1)
{
  if (CMSMDeviceState_SupportsPiP())
  {
    if (CMSUtility_HasBackgroundEntitlement(a1))
    {
      int IsPiPAllowedForCategory = CMSMUtility_IsPiPAllowedForCategory([a1 audioCategory]);
      if (IsPiPAllowedForCategory != [a1 isPiPPossible])
      {
        [a1 setIsPiPPossible:IsPiPAllowedForCategory != 0];
        if (a1) {
          CFRetain(a1);
        }
        uint64_t v3 = MXGetNotificationSenderQueue();
        MXDispatchAsyncFunction((uint64_t)"cmsUpdatePiPIsPossible", (uint64_t)"CMSessionManager.m", 7503, 0, 0, v3, (uint64_t)a1, (uint64_t)CMSMNotificationUtility_PostPiPIsPossibleDidChange_f);
      }
    }
  }
}

void *CMSUtility_HasBackgroundEntitlement(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((int)objc_msgSend((id)objc_msgSend(result, "clientPID"), "intValue") >= 1
      && ([v1 hasFetchedBackgroundPrivileges] & 1) == 0)
    {
      objc_msgSend(v1, "setIsAllowedToPlayInBackground:", CMSMUtility_FetchBackgroundEntitlement(objc_msgSend((id)objc_msgSend(v1, "clientPID"), "intValue")));
      [v1 setHasFetchedBackgroundPrivileges:1];
    }
    return (void *)[v1 isAllowedToPlayInBackground];
  }
  return result;
}

uint64_t CMSMDeviceState_SupportsPiP()
{
  return byte_1E935893B;
}

uint64_t CMSUtility_HasPhoneCallBehaviour(void *a1)
{
  uint64_t v2 = [a1 audioCategory];
  [a1 audioMode];
  if (CMSMUtility_DoCategoryAndModeHavePhoneCallBehaviour(v2)) {
    return 1;
  }
  uint64_t result = CMSMUtility_IsPlayAndRecordCategory([a1 audioCategory]);
  if (result) {
    return [a1 clientPriority] > 9;
  }
  return result;
}

uint64_t CMSM_GetLocalSessionPriority(void *a1, int a2)
{
  if (!a1) {
    return 100;
  }
  if (!CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(a1, a2 != 0)) {
    return 100;
  }
  uint64_t v6 = [a1 displayID];
  uint64_t v7 = [a1 clientName];
  int v8 = [a1 interruptionStyle];
  uint64_t v9 = [a1 audioCategory];
  uint64_t v10 = [a1 audioMode];
  int v11 = [a1 clientPriority];
  [a1 audioCategory];
  if (FigCFEqual())
  {
    if (CMSUtility_IsAnyPortOfTypeBT((const __CFArray *)[a1 allowedPortTypes])) {
      uint64_t v9 = 0x1EE5E9888;
    }
  }
  v12[0] = v7;
  v12[1] = v6;
  int v13 = v8;
  int v14 = v11;
  uint64_t v15 = v9;
  uint64_t v16 = v10;
  return [+[MXSessionManager sharedInstance] getSessionPriority:v12 forTipi:a2 != 0];
}

uint64_t CMSMUtility_DoCategoryAndModeHavePhoneCallBehaviour(uint64_t a1)
{
  if (FigCFEqual() || FigCFEqual()) {
    return 1;
  }
  if (CMSMUtility_IsPlayAndRecordCategory(a1))
  {
    if (FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual())
    {
      return 1;
    }
    BOOL v3 = FigCFEqual() != 0;
  }
  else
  {
    BOOL v3 = 0;
  }
  uint64_t result = v3 | ((dword_1E9359C14 & 2) >> 1);
  if ((dword_1E9359C14 & 2) != 0 && !v3) {
    return FigCFEqual() != 0;
  }
  return result;
}

BOOL CMSMUtility_IsPlayAndRecordCategory(uint64_t a1)
{
  return a1
      && (FigCFEqual()
       || FigCFEqual()
       || FigCFEqual()
       || FigCFEqual());
}

BOOL CMSMUtility_IsInputAllowedForCategory(const void *a1)
{
  return a1
      && (CFEqual(a1, @"Multi")
       || CFEqual(a1, @"Record")
       || CFEqual(a1, @"Record_WithBluetooth")
       || CFEqual(a1, @"PlayAndRecord")
       || CFEqual(a1, @"PlayAndRecord_WithBluetooth")
       || CFEqual(a1, @"PlayAndRecord_NoBluetooth_DefaultToSpeaker")
       || CFEqual(a1, @"PlayAndRecord_WithBluetooth_DefaultToSpeaker")
       || CFEqual(a1, @"VoiceCommand")
       || CFEqual(a1, @"VoiceCommand_WithBluetooth")
       || CFEqual(a1, @"VoiceCommandThatMixes")
       || CFEqual(a1, @"VoiceCommandThatMixes_WithBluetooth")
       || CFEqual(a1, @"PhoneCall")
       || CFEqual(a1, @"TTYCall")
       || CFEqual(a1, @"eARC"));
}

uint64_t cmsSetControlFlags(void *a1, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294954316;
  }
  unsigned int v3 = a2 & 0xFFFFFFF1 | 2;
  if ((a2 & 0xC) == 0) {
    unsigned int v3 = a2;
  }
  if ((v3 & 0xC0000) != 0) {
    uint64_t v4 = v3 & 0xFFF1FFFF | 0x20000;
  }
  else {
    uint64_t v4 = v3;
  }
  if (v3 & 0xC0000 | a2 & 0xC) {
    BOOL v5 = dword_1E9359ED0 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((v4 & WORD1(v4)) != 0) {
    return 4294954315;
  }
  if (v4 != [a1 hwControlFlags])
  {
    if (dword_1E9359ED0)
    {
      int v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  objc_msgSend(a1, "setHwControlFlags:", v4, v9, v10);
  return 0;
}

const char *CMSMUtility_GetFlagsString(unsigned __int16 a1)
{
  if (a1 > 0x1Fu) {
    return "Unknown";
  }
  else {
    return off_1E57C94A0[(__int16)a1];
  }
}

uint64_t MX_FeatureFlags_CanClientsSetEmergencyAlertPriority()
{
  return _os_feature_enabled_impl();
}

unint64_t CMSMUtility_IsEmergencyAlertCategory(unint64_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    return CFEqual((CFTypeRef)result, @"EmergencyAlert") || CFEqual(v1, @"EmergencyAlert_Muteable") != 0;
  }
  return result;
}

void CMSMNotificationUtility_PostSessionAudioCategoryDidChange(void *a1)
{
  id v2 = a1;
  unsigned int v3 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostSessionAudioCategoryDidChange_block_invoke;
  v4[3] = &unk_1E57C6368;
  void v4[4] = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSessionAudioCategoryDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 76, 0, 0, v3, (uint64_t)v4);
}

uint64_t CMSUtility_IsAnyPortOfTypeBT(const __CFArray *a1)
{
  if (a1 && (CFIndex Count = CFArrayGetCount(a1), Count >= 1))
  {
    CFIndex v3 = Count;
    unsigned __int8 v4 = 0;
    for (CFIndex i = 0; i != v3; ++i)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
      unsigned int ValueUInt32 = MXCFNumberGetValueUInt32(ValueAtIndex);
      if (ValueUInt32 == 1885892674 || ValueUInt32 == 1885892706 || ValueUInt32 == 1886152047) {
        unsigned __int8 v4 = 1;
      }
      if (ValueUInt32 == 1885892674) {
        break;
      }
      if (ValueUInt32 == 1885892706) {
        break;
      }
      if (ValueUInt32 == 1886152047) {
        break;
      }
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

double CMSUtility_GetPreferredIOBufferDuration(void *a1, const char *a2)
{
  if (!a1) {
    return 0.0;
  }
  [a1 preferredIOBufferDuration];
  return result;
}

float cmsmGetDefaultBufferDuration()
{
  return 0.023;
}

FigResilientRemoteRoutingContextFactory *FigResilientRemoteRoutingContextFactoryGetCurrent()
{
  int v0 = objc_alloc_init(FigResilientRemoteRoutingContextFactory);
  return v0;
}

uint64_t MX_RunningBoardServices_CopyHostDisplayIDForPID(uint64_t a1)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a1), "hostProcess"), "bundle"), "identifier");
  return [v1 copy];
}

BOOL vaemCurrentRouteHasInputGainControl()
{
  int outData = 1;
  *(void *)&inAddress.mSelector = 0x696E707476637370;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  OSStatus PropertyData = AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData);
  return (PropertyData | outData) != 0;
}

void sub_194CEEBAC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x3C8]);
  _Unwind_Resume(a1);
}

uint64_t CMSMUtility_GetVADIDForVADName(uint64_t a1)
{
  if (a1
    && ((id v2 = [(NSDictionary *)[+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") audioDeviceInfo] objectForKey:a1]) != 0|| CMSMVAUtility_IsAdditiveRoutingEnabled()&& (id v2 = [(NSDictionary *)[+[MXAdditiveRoutingManager sharedInstance] vadNameToID] objectForKey:a1]) != 0))
  {
    return [v2 unsignedIntValue];
  }
  else
  {
    unsigned __int8 v4 = +[MXSessionManager sharedInstance];
    return [(MXSessionManager *)v4 defaultVADID];
  }
}

uint64_t CMSUtility_GetCurrentOutputVADID(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 audioDestinationPriority];
    if (v1) {
      id v2 = [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v1];
    }
    else {
      id v2 = @"VirtualAudioDevice_Default";
    }
    return CMSMUtility_GetVADIDForVADName((uint64_t)v2);
  }
  else
  {
    CFIndex v3 = +[MXSessionManager sharedInstance];
    return [(MXSessionManager *)v3 defaultVADID];
  }
}

__CFString *CMSMUtility_CopyMappedMXSessionAudioMode(__CFString *result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (CMSMUtility_CopyMappedMXSessionAudioMode_onceTokenTwo != -1) {
    dispatch_once(&CMSMUtility_CopyMappedMXSessionAudioMode_onceTokenTwo, &__block_literal_global_152);
  }
  id v2 = (__CFString *)[(id)CMSMUtility_CopyMappedMXSessionAudioMode_sAudioSessionToMXModeMap objectForKey:v1];
  if (!v2)
  {
    if ([(__CFString *)v1 hasPrefix:@"AVAudioSessionMode"]) {
      uint64_t v1 = @"Default";
    }
    if ([(__CFString *)v1 containsString:@"WebCam_MultiMic"])
    {
      CFIndex v3 = kMXSessionAudioMode_WebCam_MultiMic;
LABEL_12:
      id v2 = *v3;
      goto LABEL_16;
    }
    if ([(__CFString *)v1 containsString:@"WebCam"])
    {
      CFIndex v3 = kMXSessionAudioMode_WebCam;
      goto LABEL_12;
    }
    if ([(__CFString *)v1 containsString:@"Enrollment"]) {
      id v2 = @"Enrollment";
    }
    else {
      id v2 = v1;
    }
  }
LABEL_16:
  return v2;
}

uint64_t CMSUtility_GetCurrentAudioDestination(void *a1)
{
  uint64_t v2 = [a1 audioDestinationPriority];
  if (!a1) {
    return 0x1EE5EBF48;
  }
  uint64_t v3 = v2;
  if (!v2) {
    return 0x1EE5EBF48;
  }
  unsigned __int8 v4 = +[MXSessionManager sharedInstance];
  return (uint64_t)[(MXSessionManager *)v4 getAvailableAudioDestination:v3];
}

uint64_t vaemIsAudioDestinationAvailable(uint64_t a1)
{
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual())
  {
    unsigned int v3 = [+[MXSessionManager sharedInstance] systemSoundLocalVADID];
LABEL_21:
    BOOL v4 = v3 == 0;
    return !v4;
  }
  if (FigCFEqual())
  {
    unsigned int v3 = [+[MXSessionManager sharedInstance] systemSoundRemoteVADID];
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    unsigned int v3 = [+[MXSessionManager sharedInstance] speechDetectionVADID];
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    unsigned int v3 = [+[MXSessionManager sharedInstance] speakerAlertVADID];
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    unsigned int v3 = [+[MXSessionManager sharedInstance] decoupledInputVADID];
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    unsigned int v3 = [+[MXSessionManager sharedInstance] siriOutputVADID];
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    unsigned int v3 = [+[MXSessionManager sharedInstance] musicVADID];
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    unsigned int v3 = [+[MXSessionManager sharedInstance] perAppAirPlayVADID];
    goto LABEL_21;
  }
  if (FigCFEqual())
  {
    unsigned int v3 = [+[MXSessionManager sharedInstance] lowLatencyVADID];
    goto LABEL_21;
  }
  uint64_t result = CMSMVAUtility_IsAdditiveRoutingEnabled();
  if (!result) {
    return result;
  }
  BOOL v4 = [(NSDictionary *)[+[MXAdditiveRoutingManager sharedInstance] vadNameToID] objectForKey:a1] == 0;
  return !v4;
}

uint64_t CMSUtility_GetCurrentInputVADUID(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = 0x1EE5EBF48;
  if (a1)
  {
    if ([a1 audioBehaviour])
    {
      unsigned int v3 = objc_msgSend((id)objc_msgSend(a1, "audioBehaviour"), "objectForKey:", @"AudioBehaviour_Source");
      long long v10 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = *(void *)v11;
        while (2)
        {
          for (uint64_t i = 0; i != v5; ++i)
          {
            if (*(void *)v11 != v6) {
              objc_enumerationMutation(v3);
            }
            uint64_t v8 = *(void *)(*((void *)&v10 + 1) + 8 * i);
            if (vaemIsAudioDestinationAvailable(v8)) {
              return v8;
            }
          }
          uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
          if (v5) {
            continue;
          }
          break;
        }
      }
    }
  }
  return v1;
}

BOOL CMSMUtility_IsCategoryInputOnly(const void *a1)
{
  return a1 && (CFEqual(a1, @"Record") || CFEqual(a1, @"Record_WithBluetooth"));
}

uint64_t CMSUtility_GetCurrentInputVADID(void *a1)
{
  if (a1)
  {
    uint64_t CurrentInputVADUID = CMSUtility_GetCurrentInputVADUID(a1);
    return CMSMUtility_GetVADIDForVADName(CurrentInputVADUID);
  }
  else
  {
    unsigned int v3 = +[MXSessionManager sharedInstance];
    return [(MXSessionManager *)v3 defaultVADID];
  }
}

uint64_t CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(void *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = v6;
  CFTypeRef cf = v6;
  uint64_t v8 = (const void **)MEMORY[0x1E4F1CFD0];
  if (a2) {
    CFDictionarySetValue(v6, @"session going active", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  int v9 = [a1 isActive];
  long long v10 = *v8;
  long long v11 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (v9) {
    long long v12 = v10;
  }
  else {
    long long v12 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v7, @"session active", v12);
  if ([a1 isPlaying]) {
    long long v13 = v10;
  }
  else {
    long long v13 = v11;
  }
  CFDictionarySetValue(v7, @"session output running", v13);
  if ([a1 isRecording]) {
    int v14 = v10;
  }
  else {
    int v14 = v11;
  }
  CFDictionarySetValue(v7, @"session input running", v14);
  uint64_t v15 = [a1 reporterIDs];
  CFMutableArrayRef v16 = Mutable;
  if (v15) {
    CFMutableArrayRef v16 = (CFMutableArrayRef)objc_msgSend(a1, "reporterIDs", Mutable);
  }
  CFDictionarySetValue(v7, @"session reporter IDs", v16);
  if ([a1 audioBehaviour]) {
    CFArrayRef Value = (__CFArray *)CFDictionaryGetValue((CFDictionaryRef)[a1 audioBehaviour], @"AudioBehaviour_Destination");
  }
  else {
    CFArrayRef Value = 0;
  }
  if ([a1 audioBehaviour]) {
    double v19 = (__CFArray *)CFDictionaryGetValue((CFDictionaryRef)[a1 audioBehaviour], @"AudioBehaviour_Source");
  }
  else {
    double v19 = 0;
  }
  if (Value) {
    CFMutableArrayRef v20 = Value;
  }
  else {
    CFMutableArrayRef v20 = Mutable;
  }
  CFDictionarySetValue(v7, @"session output VAD UIDs", v20);
  if (v19) {
    CFMutableArrayRef v21 = v19;
  }
  else {
    CFMutableArrayRef v21 = Mutable;
  }
  CFDictionarySetValue(v7, @"session input VAD UIDs", v21);
  [a1 applicationState];
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  if (SInt32)
  {
    uint64_t v23 = SInt32;
    CFDictionarySetValue(v7, @"session app state", SInt32);
    CFRelease(v23);
  }
  int v26 = 0;
  uint64_t v25 = *(void *)"isesbolg";
  if (unk_1E9359B48)
  {
    uint64_t v18 = unk_1E9359B48(dword_1E9359BA0, &v25, 0, 0, 8, &cf);
    uint64_t v7 = (__CFDictionary *)cf;
    if (!cf) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v18 = 0;
  if (v7) {
LABEL_32:
  }
    CFRelease(v7);
LABEL_33:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v18;
}

uint64_t CMSMVAUtility_AudioObjectSetPropertyData()
{
  if (unk_1E9359B48) {
    return unk_1E9359B48();
  }
  else {
    return 0;
  }
}

void CMSUtility_CreateReporterIDIfNeeded(void *a1)
{
  if ([a1 reporterIDs]) {
    return;
  }
  uint64_t v2 = (void *)[MEMORY[0x1E4F28ED0] numberWithLongLong:off_1E9359CE0()];
  unsigned int v3 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(a1, "reporterIDs"));
  CFAllocatorRef v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(a1, "originalReporterIDs"));
  [v3 addObject:v2];
  [a1 setReporterIDs:v3];
  CMSMNotificationUtility_PostReporterIDsDidChange(a1);
  [v4 addObject:v2];
  [a1 setOriginalReporterIDs:v4];

  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v5 = [a1 displayID];
  BOOL v6 = v5 != 0;
  if (v5) {
    objc_msgSend(v7, "setObject:forKey:", objc_msgSend(a1, "displayID"), 0x1EE5F0A28);
  }
  if ([a1 isMemberOfClass:objc_opt_class()])
  {
    BOOL v6 = 1;
    objc_msgSend(v7, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", 1), 0x1EE5F0C88);
    objc_msgSend(v7, "setObject:forKey:", objc_msgSend(a1, "remoteDeviceID"), 0x1EE5F0CA8);
  }
  if ([a1 isMemberOfClass:objc_opt_class()])
  {
    [v7 setObject:MEMORY[0x1E4F1CC38] forKey:0x1EE5F0CC8];
LABEL_9:
    ((void (*)(uint64_t, id))off_1E9359D08)([v2 longLongValue], v7);
    goto LABEL_10;
  }
  if (v6) {
    goto LABEL_9;
  }
LABEL_10:
}

uint64_t CMSMUtility_GetVADNameForVADID(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] audioDeviceInfo];
  uint64_t v3 = [(NSDictionary *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v11 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * v6);
      if (objc_msgSend(-[NSDictionary objectForKey:](-[MXSessionManager audioDeviceInfo](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "audioDeviceInfo"), "objectForKey:", v7), "unsignedIntValue") == a1)break; {
      if (v4 == ++v6)
      }
      {
        uint64_t v4 = [(NSDictionary *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (!CMSMVAUtility_IsAdditiveRoutingEnabled()) {
      return 0x1EE5EBF48;
    }
    uint64_t v8 = [+[MXAdditiveRoutingManager sharedInstance] vadIDToName];
    uint64_t v7 = -[NSDictionary objectForKey:](v8, "objectForKey:", [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:a1]);
    if (!v7) {
      return 0x1EE5EBF48;
    }
  }
  return v7;
}

uint64_t MX_RunningBoardServices_GetApplicationStateForPID(uint64_t a1, int a2)
{
  uint64_t v4 = (void *)[MEMORY[0x1E4F28ED0] numberWithInt:a1];
  if (![v4 unsignedIntValue])
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_6:
    uint64_t v7 = (void *)[(id)mx_runningBoardServices_getProcessHandleForPID(a1) currentState];
    return mx_runningBoardServices_getMXApplicationStateForProcessState(v7);
  }
  [(id)gApplicationStateCacheLock lock];
  uint64_t v5 = objc_msgSend((id)objc_msgSend((id)gApplicationStateCache, "objectForKey:", v4), "unsignedIntValue");
  [(id)gApplicationStateCacheLock unlock];
  if (a2 || !v5) {
    goto LABEL_6;
  }
  return v5;
}

uint64_t mx_runningBoardServices_getProcessHandleForPID(uint64_t a1)
{
  v6[22] = *MEMORY[0x1E4F143B8];
  if ((int)a1 < 1) {
    return 0;
  }
  uint64_t v1 = [MEMORY[0x1E4F963F8] identifierWithPid:a1];
  if (!v1)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  v6[0] = 0;
  uint64_t v2 = [MEMORY[0x1E4F963E8] handleForIdentifier:v1 error:v6];
  if (v6[0])
  {
    uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v2;
}

uint64_t mx_runningBoardServices_getMXApplicationStateForProcessState(void *a1)
{
  switch([a1 taskState])
  {
    case 1u:
      uint64_t result = 1;
      break;
    case 2u:
      if (objc_msgSend((id)objc_msgSend(a1, "endowmentNamespaces"), "containsObject:", @"com.apple.frontboard.visibility"))uint64_t result = 8; {
      else
      }
        uint64_t result = 0;
      break;
    case 3u:
      uint64_t result = 2;
      break;
    case 4u:
      if (objc_msgSend((id)objc_msgSend(a1, "endowmentNamespaces"), "containsObject:", @"com.apple.frontboard.visibility"))uint64_t result = 8; {
      else
      }
        uint64_t result = 4;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void CMSMNotificationUtility_PostReporterIDsDidChange(void *a1)
{
  id v2 = a1;
  uint64_t v3 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostReporterIDsDidChange_block_invoke;
  v4[3] = &unk_1E57C6368;
  void v4[4] = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostReporterIDsDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 410, 0, 0, v3, (uint64_t)v4);
}

id CMSMNotificationUtility_CreateRecordingSessionsDescription()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v15 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if ([v6 isRecording])
        {
          long long v12 = 0u;
          long long v13 = 0u;
          if (v6) {
            [v6 auditToken];
          }
          id v7 = objc_alloc(MEMORY[0x1E4F1C9E8]);
          uint64_t v8 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend(v6, "audioSessionID"));
          uint64_t v9 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v12 length:32];
          long long v10 = objc_msgSend(v7, "initWithObjectsAndKeys:", v8, @"AudioSessionID", v9, @"AuditToken", 0, v12, v13);
          [v0 addObject:v10];
        }
      }
      uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v3);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v0;
}

id CMSMUtility_CopyRecordingClientsInfoForSystemStatus()
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  obuint64_t j = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)obj countByEnumeratingWithState:&v39 objects:v48 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v40;
    unint64_t v4 = 0x1E4F1C000uLL;
    id v33 = v0;
    uint64_t v34 = *(void *)v40;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v40 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v39 + 1) + 8 * v5);
        if ([v6 hasEntitlementToShowMicrophoneIndicatorWhileNotRecording]) {
          int v7 = [v6 wantsToShowMicrophoneIndicatorWhenNotRecording];
        }
        else {
          int v7 = 0;
        }
        if (([v6 isRecording] & 1) != 0
          || ([v6 isUsingBuiltInMicForRecording] | v7) == 1)
        {
          id v8 = objc_alloc_init(*(Class *)(v4 + 2656));
          if ([v6 hasEntitlementToSuppressRecordingStateToSystemStatus]) {
            BOOL v9 = CMSUtility_GetPrefersSuppressingRecordingState(v6) != 0;
          }
          else {
            BOOL v9 = 0;
          }
          if ((!v9 | v7) == 1 && v0 && v8)
          {
            objc_msgSend(v8, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(v6, "clientPID"), "unsignedIntValue")), 0x1EE5EC188);
            long long v10 = (void *)MEMORY[0x1E4F28ED0];
            if (v7) {
              uint64_t v11 = 0;
            }
            else {
              uint64_t v11 = [v6 isRecordingMuted];
            }
            objc_msgSend(v8, "setObject:forKey:", objc_msgSend(v10, "numberWithBool:", v11), 0x1EE5ECE08);
            if (MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled())
            {
              if ([v6 displayID]) {
                objc_msgSend(v8, "setObject:forKey:", objc_msgSend(v6, "displayID"), 0x1EE5F5108);
              }
              if ([v6 auditTokenSetByClient])
              {
                memset(v47, 0, 32);
                if (v6) {
                  [v6 auditToken];
                }
                objc_msgSend(v8, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v47, 32), 0x1EE5F5128);
              }
              long long v12 = objc_msgSend((id)objc_msgSend(v6, "hostProcessAttribution"), "firstObject");
              if (!v12)
              {
                CFMutableArrayRef v20 = objc_msgSend(-[MXMediaEndowmentManager getRecordingAttributions:](+[MXMediaEndowmentManager sharedInstance](MXMediaEndowmentManager, "sharedInstance"), "getRecordingAttributions:", objc_msgSend((id)objc_msgSend(v6, "clientPID"), "unsignedIntValue")), "firstObject");
                if (v20)
                {
                  CFMutableArrayRef v21 = v20;
                  uint64_t v14 = [v20 valueForKey:@"BundleID"];
                  uint64_t v15 = [v21 valueForKey:@"RecordingWebsite"];
                  uint64_t v16 = [v21 valueForKey:@"AuditToken"];
                  if (!dword_1E9359ED0) {
                    goto LABEL_43;
                  }
                  unsigned int v38 = 0;
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v23 = v38;
                  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
                    unsigned int v24 = v23;
                  }
                  else {
                    unsigned int v24 = v23 & 0xFFFFFFFE;
                  }
                  if (v24)
                  {
LABEL_40:
                    int v43 = 136315394;
                    long long v44 = "CMSMUtility_CopyRecordingClientsInfoForSystemStatus";
                    __int16 v45 = 2114;
                    uint64_t v46 = v14;
                    LODWORD(v32) = 22;
                    id v31 = &v43;
                    _os_log_send_and_compose_impl();
                  }
LABEL_41:
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                else
                {
                  if (![v6 isCameraRecordingExtension]) {
                    goto LABEL_49;
                  }
                  if (v6) {
                    [v6 auditToken];
                  }
                  else {
                    memset(v36, 0, sizeof(v36));
                  }
                  id v25 = MX_CoreServices_CopyContainingBundleID(v36);
                  uint64_t v14 = (uint64_t)v25;
                  if (!dword_1E9359ED0)
                  {
                    uint64_t v16 = 0;
                    uint64_t v15 = 0;
                    if (v25) {
                      goto LABEL_44;
                    }
                    goto LABEL_45;
                  }
                  unsigned int v38 = 0;
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  int v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v27 = v38;
                  if (os_log_type_enabled(v26, type)) {
                    unsigned int v28 = v27;
                  }
                  else {
                    unsigned int v28 = v27 & 0xFFFFFFFE;
                  }
                  if (v28)
                  {
                    int v43 = 136315394;
                    long long v44 = "CMSMUtility_CopyRecordingClientsInfoForSystemStatus";
                    __int16 v45 = 2114;
                    uint64_t v46 = v14;
                    LODWORD(v32) = 22;
                    id v31 = &v43;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                }
                id v0 = v33;
                goto LABEL_43;
              }
              long long v13 = v12;
              uint64_t v14 = [v12 valueForKey:@"BundleID"];
              uint64_t v15 = [v13 valueForKey:@"RecordingWebsite"];
              uint64_t v16 = [v13 valueForKey:@"AuditToken"];
              if (dword_1E9359ED0)
              {
                unsigned int v38 = 0;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                long long v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v18 = v38;
                if (os_log_type_enabled(v17, type)) {
                  unsigned int v19 = v18;
                }
                else {
                  unsigned int v19 = v18 & 0xFFFFFFFE;
                }
                if (v19) {
                  goto LABEL_40;
                }
                goto LABEL_41;
              }
LABEL_43:
              if (v14) {
LABEL_44:
              }
                objc_msgSend(v8, "setObject:forKey:", v14, 0x1EE5F50E8, v31, v32);
LABEL_45:
              if (v15) {
                [v8 setObject:v15 forKey:0x1EE5F50C8];
              }
              uint64_t v3 = v34;
              unint64_t v4 = 0x1E4F1C000;
              if (v16) {
                [v8 setObject:v16 forKey:0x1EE5F5148];
              }
LABEL_49:
              if (objc_msgSend(v6, "preferredMinimumMicrophoneIndicatorLightOnTime", v31, v32)) {
                objc_msgSend(v8, "setObject:forKey:", objc_msgSend(v6, "preferredMinimumMicrophoneIndicatorLightOnTime"), 0x1EE5F5168);
              }
            }
            [v0 addObject:v8];
          }
        }
        ++v5;
      }
      while (v2 != v5);
      uint64_t v29 = [(NSPointerArray *)obj countByEnumeratingWithState:&v39 objects:v48 count:16];
      uint64_t v2 = v29;
    }
    while (v29);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v0;
}

uint64_t MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled()
{
  if (MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled_onceToken, &__block_literal_global_92);
  }
  return MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled_sPublishHostAttributionToSystemStatusEnabled;
}

uint64_t cmsmUpdatePickableRouteDescriptionLists(char a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  [(NSRecursiveLock *)[+[MXSessionManager sharedInstance] propertiesLock] lock];
  if ([(NSMutableDictionary *)[+[MXSessionManager sharedInstance] pickableRoutesDescriptions] count])
  {
    uint64_t v1 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithDictionary:copyItems:", -[MXSessionManager pickableRoutesDescriptions](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "pickableRoutesDescriptions"), 1);
  }
  else
  {
    uint64_t v1 = 0;
  }
  [(NSMutableDictionary *)[+[MXSessionManager sharedInstance] pickableRoutesDescriptions] removeAllObjects];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if ([v7 isActive])
        {
          if (!-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [v7 audioCategory]))
          {
            id v8 = cmsmCopyPickableRoutesForRouteConfiguration([v7 audioCategory], objc_msgSend(v7, "audioMode"), objc_msgSend(v7, "activationContext"), objc_msgSend(v7, "allowedPortTypes"));
            if (v8) {
              CFRelease(v8);
            }
          }
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (![(NSMutableDictionary *)[+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") pickableRoutesDescriptions] count]|| ([(NSMutableDictionary *)[+[MXSessionManager sharedInstance] pickableRoutesDescriptions] isEqualToDictionary:v1] & 1) == 0)
  {
    BOOL v9 = MXGetNotificationSenderQueue();
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __cmsmUpdatePickableRouteDescriptionLists_block_invoke;
    v12[3] = &__block_descriptor_33_e5_v8__0l;
    char v13 = a1;
    MXDispatchAsync((uint64_t)"cmsmUpdatePickableRouteDescriptionLists", (uint64_t)"CMSessionManager_VARouting.m", 209, 0, 0, v9, (uint64_t)v12);
  }

  return [(NSRecursiveLock *)[+[MXSessionManager sharedInstance] propertiesLock] unlock];
}

NSDictionary *CMSMVAUtility_GetVADCategoryFromFigCategoryName(NSDictionary *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = [+[MXSessionManager sharedInstance] figCategoryToVADCategoryDict];
    if (result) {
      return (NSDictionary *)[(NSDictionary *)[+[MXSessionManager sharedInstance] figCategoryToVADCategoryDict] objectForKey:v1];
    }
  }
  return result;
}

uint64_t CMSMVAUtility_GetVADModeFromFigModeName(uint64_t a1)
{
  uint64_t v1 = 1768776806;
  if (a1
    && [+[MXSessionManager sharedInstance] figModeTypeToVADModeType])
  {
    unsigned int v3 = [(NSDictionary *)[+[MXSessionManager sharedInstance] figModeTypeToVADModeType] objectForKey:a1];
    if (v3) {
      return v3;
    }
    else {
      return 1768776806;
    }
  }
  return v1;
}

uint64_t vaemShouldIncludePortTypeForRouteConfiguration(int a1, int a2, const void *a3, AudioObjectPropertyElement a4)
{
  *(void *)&inAddress.mSelector = 0x676C6F6270727370;
  inAddress.mElement = a4;
  int outData = 0;
  UInt32 ioDataSize = 4;
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, 0, a3);
  AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData);
  if (RouteConfigurationDictionary) {
    CFRelease(RouteConfigurationDictionary);
  }
  return outData;
}

__CFArray *cmsmCopyPickableRoutesForRouteConfiguration(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = a2;
  int v7 = (NSDictionary *)a1;
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  CategoryStringWithModeAppended = (void *)CMSMUtility_CreateCategoryStringWithModeAppended(a1, a2);
  id v9 = [NSString alloc];
  v133 = a3;
  if (a3) {
    uint64_t v10 = objc_msgSend(v9, "initWithFormat:", @"%lu", objc_msgSend((id)objc_msgSend(a3, "description"), "hash"));
  }
  else {
    uint64_t v10 = [v9 initWithUTF8String:"null"];
  }
  uint64_t v11 = (void *)v10;
  long long v12 = (void *)[[NSString alloc] initWithFormat:@"%@%@%@", CategoryStringWithModeAppended, 0x1EE5ED208, v10];
  if ([a4 count]) {
    char v13 = a4;
  }
  else {
    char v13 = 0;
  }
  unint64_t v14 = 0x1EB3B9000uLL;
  [(NSRecursiveLock *)[+[MXSessionManager sharedInstance] propertiesLock] lock];
  long long v15 = 0;
  if (!v13)
  {
    if ([(NSMutableDictionary *)[+[MXSessionManager sharedInstance] pickableRoutesDescriptions] count])
    {
      long long v15 = (__CFArray *)(id)[(NSMutableDictionary *)[+[MXSessionManager sharedInstance] pickableRoutesDescriptions] objectForKey:v12];
    }
    else
    {
      long long v15 = 0;
    }
  }
  [(NSRecursiveLock *)[+[MXSessionManager sharedInstance] propertiesLock] unlock];
  if (v15 || !CategoryStringWithModeAppended) {
    goto LABEL_163;
  }
  CFTypeRef v140 = 0;
  cmsmCopyVADPickedRouteDescriptionForRouteConfiguration(v7, v6, v133, v13, (__CFDictionary **)&v140);
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  long long v15 = Mutable;
  if (v7) {
    BOOL v17 = v6 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  char v18 = v17;
  char v122 = v18;
  v129 = v13;
  obuint64_t j = Mutable;
  v125 = v11;
  v126 = CategoryStringWithModeAppended;
  v123 = v12;
  if (!v17)
  {
    CFDictionaryRef v19 = (const __CFDictionary *)v140;
    CFArrayRef v20 = cmsmCopyWirelessPortsArrayForRouteConfiguration(v7, v6, v13);
    if (v20)
    {
      CFArrayRef v21 = v20;
      if (CFArrayGetCount(v20)) {
        RouteDescriptionArrayFromPortIDsForRouteConfiguration = cmsmCreateRouteDescriptionArrayFromPortIDsForRouteConfiguration((uint64_t)v7, v21, 1, v19);
      }
      else {
        RouteDescriptionArrayFromPortIDsForRouteConfiguration = 0;
      }
      CFRelease(v21);
    }
    else
    {
      RouteDescriptionArrayFromPortIDsForRouteConfiguration = 0;
    }
    int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v7);
    int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(v6);
    int ShouldIncludePortTypeForRouteConfiguration = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v13, 0x70617061u);
    int theArray = VADCategoryFromFigCategoryName;
    int key = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v13, 0x70617073u);
    id v25 = +[MXEndpointDescriptorCache sharedInstance];
    int v26 = [+[MXEndpointDescriptorCache sharedInstance] copyAvailableEndpointsForManager:[(MXEndpointDescriptorCache *)v25 getEndpointManagerForType:*MEMORY[0x1E4F20638]]];
    v119 = RouteDescriptionArrayFromPortIDsForRouteConfiguration;
    v120 = v7;
    uint64_t v121 = v6;
    if (v26)
    {
      CFArrayRef v27 = v26;
      CFIndex Count = CFArrayGetCount(v26);
      if (RouteDescriptionArrayFromPortIDsForRouteConfiguration) {
        MutableCFStringRef Copy = CFArrayCreateMutableCopy(0, 0, RouteDescriptionArrayFromPortIDsForRouteConfiguration);
      }
      else {
        MutableCFStringRef Copy = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
      }
      CFArrayRef v31 = MutableCopy;
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v27, i);
          if (!FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)ValueAtIndex))
          {
            char SupportedFeatures = FigEndpointGetSupportedFeatures();
            if ((SupportedFeatures & 2) != 0 && ShouldIncludePortTypeForRouteConfiguration) {
              cmsmCreateAndInsertAirPlayRouteDescription((uint64_t)ValueAtIndex, 0x1EE5EFE08, v31);
            }
            if ((SupportedFeatures & 1) != 0 && key)
            {
              FigRoutingManagerGetMirroringModeFromEndpoint((uint64_t)ValueAtIndex);
              if (FigCFEqual()) {
                uint64_t v35 = 0x1EE5E7B28;
              }
              else {
                uint64_t v35 = 0x1EE5EFE28;
              }
              cmsmCreateAndInsertAirPlayRouteDescription((uint64_t)ValueAtIndex, v35, v31);
            }
          }
        }
      }
      CFMutableArrayRef v36 = CFArrayCreateMutableCopy(allocator, 0, v31);
      if (v31) {
        CFRelease(v31);
      }
      CFArrayRef v118 = v36;
      CFRelease(v27);
      CFTypeRef v30 = v123;
      char v13 = v129;
      long long v15 = obj;
      uint64_t v6 = v121;
    }
    else
    {
      CFTypeRef v30 = v12;
      CFArrayRef v118 = 0;
    }
    int v37 = theArray;
    unsigned int v38 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    v124 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    theArraya = CFArrayCreateMutable(allocator, 0, v38);
    int v39 = vaemShouldIncludePortTypeForRouteConfiguration(v37, VADModeFromFigModeName, v13, 0x70687062u);
    int v40 = vaemShouldIncludePortTypeForRouteConfiguration(v37, VADModeFromFigModeName, v13, 0x70687042u);
    int v41 = vaemShouldIncludePortTypeForRouteConfiguration(v37, VADModeFromFigModeName, v13, 0x706C656Fu);
    long long v42 = +[MXEndpointDescriptorCache sharedInstance];
    int v43 = [+[MXEndpointDescriptorCache sharedInstance] copyAvailableEndpointsForManager:[(MXEndpointDescriptorCache *)v42 getEndpointManagerForType:*MEMORY[0x1E4F20640]]];
    if (v43)
    {
      CFArrayRef v44 = v43;
      if (v39 || v40 || v41)
      {
        CFIndex v45 = CFArrayGetCount(v43);
        if (v45 >= 1)
        {
          CFIndex v46 = v45;
          CFIndex v47 = 0;
          uint64_t v48 = *MEMORY[0x1E4F20E60];
          uint64_t v49 = *MEMORY[0x1E4F20E38];
          do
          {
            v50 = CFArrayGetValueAtIndex(v44, v47);
            cf[0] = 0;
            uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
            uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v52) {
              uint64_t v53 = v52;
            }
            else {
              uint64_t v53 = 0;
            }
            v54 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v53 + 48);
            if (v54) {
              v54(CMBaseObject, v48, allocator, cf);
            }
            if (FigCFEqual())
            {
              NonConnectedBTRouteDescription = cmsmCreateNonConnectedBTRouteDescription((uint64_t)v50);
              if (NonConnectedBTRouteDescription)
              {
                v56 = NonConnectedBTRouteDescription;
                CFArrayAppendValue(theArraya, NonConnectedBTRouteDescription);
                *(void *)&v146[0] = 0;
                uint64_t v57 = FigEndpointGetCMBaseObject();
                uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v58) {
                  uint64_t v59 = v58;
                }
                else {
                  uint64_t v59 = 0;
                }
                v60 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, _OWORD *))(v59 + 48);
                if (v60) {
                  v60(v57, v49, allocator, v146);
                }
                if (*(void *)&v146[0]) {
                  CFRelease(*(CFTypeRef *)&v146[0]);
                }
                CFRelease(v56);
              }
            }
            if (cf[0]) {
              CFRelease(cf[0]);
            }
            ++v47;
          }
          while (v46 != v47);
        }
      }
      CFRelease(v44);
      CFTypeRef v30 = v123;
      char v13 = v129;
      long long v15 = obj;
      uint64_t v6 = v121;
    }
    if (theArraya && CFArrayGetCount(theArraya))
    {
      v150.length = CFArrayGetCount(theArraya);
      v150.id location = 0;
      CFArrayAppendArray(v124, theArraya, v150);
    }
    unint64_t v14 = 0x1EB3B9000;
    v61 = v119;
    int v7 = v120;
    long long v12 = v30;
    CFArrayRef v62 = v118;
    if (v118 && CFArrayGetCount(v118))
    {
      v151.length = CFArrayGetCount(v118);
      v151.id location = 0;
      CFArrayAppendArray(v124, v118, v151);
    }
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    CategoryStringWithModeAppended = v126;
    if ((unint64_t)(UpTimeNanoseconds - cmsmLogBluetoothDetails_availableRoutesLastLoggedTimestamp) >= 0x2540BE400)
    {
      uint64_t v117 = UpTimeNanoseconds;
      CFArrayRef v64 = v124;
      if (v124)
      {
        CFIndex v65 = CFArrayGetCount(v124);
        if (v65 >= 1)
        {
          CFIndex v66 = v65;
          CFIndex v67 = 0;
          v132 = (const void *)*MEMORY[0x1E4F1CFD0];
          do
          {
            CFDictionaryRef v68 = (const __CFDictionary *)CFArrayGetValueAtIndex(v64, v67);
            if (CFDictionaryGetValue(v68, @"IsBTRoute") == v132)
            {
              CFArrayRef Value = CFDictionaryGetValue(v68, @"RouteName");
              v70 = CFDictionaryGetValue(v68, @"RouteUID");
              v71 = CFDictionaryGetValue(v68, @"BTDetails_ProductID");
              CFDictionaryGetValue(v68, @"BTDetails_IsHFPRoute");
              if (dword_1E9359ED0)
              {
                inAddress.AudioObjectPropertySelector mSelector = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                AudioObjectPropertySelector mSelector = inAddress.mSelector;
                if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
                  unsigned int v74 = mSelector;
                }
                else {
                  unsigned int v74 = mSelector & 0xFFFFFFFE;
                }
                if (v74)
                {
                  int v75 = FigCFEqual();
                  LODWORD(v146[0]) = 136316163;
                  *(void *)((char *)v146 + 4) = "cmsmLogBluetoothDetails";
                  WORD6(v146[0]) = 2113;
                  *(void *)((char *)v146 + 14) = Value;
                  WORD3(v146[1]) = 2113;
                  *((void *)&v146[1] + 1) = v70;
                  LOWORD(v147) = 2114;
                  *(void *)((char *)&v147 + 2) = v71;
                  WORD5(v147) = 1024;
                  HIDWORD(v147) = v75;
                  LODWORD(v116) = 48;
                  v115 = v146;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                unint64_t v14 = 0x1EB3B9000;
                char v13 = v129;
                CFArrayRef v64 = v124;
              }
            }
            ++v67;
          }
          while (v66 != v67);
        }
      }
      cmsmLogBluetoothDetails_availableRoutesLastLoggedTimestamp = v117;
      long long v12 = v123;
      long long v15 = obj;
      v61 = v119;
      int v7 = v120;
      uint64_t v6 = v121;
      CFArrayRef v62 = v118;
      CategoryStringWithModeAppended = v126;
    }
    if (v61) {
      CFRelease(v61);
    }
    if (v62) {
      CFRelease(v62);
    }
    if (theArraya) {
      CFRelease(theArraya);
    }
    if (v124)
    {
      if (CFArrayGetCount(v124) && CFArrayGetCount(v124))
      {
        v152.length = CFArrayGetCount(v124);
        v152.id location = 0;
        CFArrayAppendArray(v15, v124, v152);
      }
      CFRelease(v124);
    }
  }
  if (MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled() && !vaemIsPersistentRouteActive())
  {
    v76 = v12;
    CFDictionaryRef v77 = (const __CFDictionary *)v140;
    int IsQuiesceableWiredConnectionEnabled = MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled();
    v79 = 0;
    if (v6 && v7 && IsQuiesceableWiredConnectionEnabled)
    {
      v80 = cmsmCopyPickableQuiesceableWiredPortsForRouteConfiguration();
      if ([v80 count]) {
        v79 = cmsmCreateRouteDescriptionArrayFromPortIDsForRouteConfiguration((uint64_t)v7, v80, 1, v77);
      }
      else {
        v79 = 0;
      }
      if (![(__CFArray *)v79 count])
      {

        v79 = 0;
      }
    }
    if ([(__CFArray *)v79 count])
    {
      v153.length = [(__CFArray *)v79 count];
      v153.id location = 0;
      CFArrayAppendArray(v15, v79, v153);
    }

    long long v12 = v76;
    CategoryStringWithModeAppended = v126;
  }
  if ((FigCFEqual() || FigCFEqual()) && FigCFEqual())
  {
    if (v7)
    {
      if (v6)
      {
        *(void *)os_log_type_t type = 0;
        UInt32 ioDataSize = 8;
        *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"strpptuo";
        inAddress.mElement = 0;
        if (!AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 0, 0, &ioDataSize, type))
        {
          if (*(void *)type)
          {
            CFTypeID v105 = CFGetTypeID(*(CFTypeRef *)type);
            if (v105 == CFArrayGetTypeID())
            {
              uint64_t v106 = (uint64_t)v7;
              id v107 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
              memset(v146, 0, sizeof(v146));
              long long v147 = 0u;
              long long v148 = 0u;
              v108 = *(void **)type;
              uint64_t v109 = [*(id *)type countByEnumeratingWithState:v146 objects:cf count:16];
              if (v109)
              {
                uint64_t v110 = v109;
                uint64_t v111 = **(void **)&v146[1];
                do
                {
                  for (uint64_t j = 0; j != v110; ++j)
                  {
                    if (**(void **)&v146[1] != v111) {
                      objc_enumerationMutation(v108);
                    }
                    v113 = *(void **)(*((void *)&v146[0] + 1) + 8 * j);
                    uint64_t v114 = objc_msgSend(v113, "unsignedIntValue", v115);
                    if (vaeGetPortTypeFromPortID(v114) == 1885892706
                      && !vaeIsAvailableForVoicePrompts(v114)
                      && vaeGetVADEndpointTypeForPort(v114) == 1701869160)
                    {
                      [v107 addObject:v113];
                    }
                  }
                  uint64_t v110 = [v108 countByEnumeratingWithState:v146 objects:cf count:16];
                }
                while (v110);
              }
              if (*(void *)type)
              {
                CFRelease(*(CFTypeRef *)type);
                *(void *)os_log_type_t type = 0;
              }
              int v7 = (NSDictionary *)v106;
              v81 = cmsmCreateRouteDescriptionArrayFromPortIDsForRouteConfiguration(v106, v107, 1, 0);
              CategoryStringWithModeAppended = v126;
              long long v12 = v123;
              long long v15 = obj;
              if (v107) {
                CFRelease(v107);
              }
              unint64_t v14 = 0x1EB3B9000;
              char v13 = v129;
              goto LABEL_124;
            }
            if (*(void *)type)
            {
              CFRelease(*(CFTypeRef *)type);
              *(void *)os_log_type_t type = 0;
            }
          }
        }
      }
    }
    v81 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
LABEL_124:
    v154.length = CFArrayGetCount(v81);
    v154.id location = 0;
    CFArrayAppendArray(v15, v81, v154);
    if (v81) {
      CFRelease(v81);
    }
  }
  int v82 = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v7);
  int v83 = CMSMVAUtility_GetVADModeFromFigModeName(v6);
  v84 = CMSMCreateRouteDescriptionFromPortIDOrRouteConfiguration(0, v82, v83, v133, v13);
  CFArrayAppendValue(v15, v84);
  LODWORD(cf[0]) = 0;
  FigCFDictionaryGetInt32IfPresent();
  v85 = v12;
  if ((v122 & 1) == 0)
  {
    v86 = CategoryStringWithModeAppended;
    int v87 = (int)cf[0];
    int v88 = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v7);
    int v89 = CMSMVAUtility_GetVADModeFromFigModeName(v6);
    id v90 = cmsmCopyBuiltinPortsListForRouteConfigurationScopeAndDevice(v88, v89, v13);
    if ((unint64_t)[v90 count] <= 1)
    {

      CategoryStringWithModeAppended = v86;
      long long v15 = obj;
    }
    else
    {
      uint64_t v91 = (uint64_t)v7;
      uint64_t v92 = 1;
      if (objc_msgSend((id)objc_msgSend(v90, "objectAtIndex:", 1), "unsignedIntValue") == v87)
      {
        uint64_t v93 = 0;
      }
      else
      {
        uint64_t v92 = [v90 count] - 1;
        uint64_t v93 = 1;
      }
      CategoryStringWithModeAppended = v86;
      v94 = cmsmCreateRouteDescriptionArrayFromPortIDsForRouteConfiguration(v91, objc_msgSend(v90, "subarrayWithRange:", v93, v92, v115), 0, 0);

      long long v15 = obj;
      if (v94)
      {
        if (CFArrayGetCount(v94))
        {
          v155.length = CFArrayGetCount(v94);
          v155.id location = 0;
          CFArrayAppendArray(obj, v94, v155);
        }
        CFRelease(v94);
      }
    }
  }
  if (CFArrayGetCount(v15) < 1)
  {
LABEL_140:
    int v97 = 1;
  }
  else
  {
    CFIndex v95 = 0;
    while (1)
    {
      CFDictionaryRef v96 = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v95);
      if (cmsmRouteDescriptionEqual((CFDictionaryRef)v140, v96)) {
        break;
      }
      if (++v95 >= CFArrayGetCount(v15)) {
        goto LABEL_140;
      }
    }
    CFDictionarySetValue(v96, @"RouteCurrentlyPicked", (const void *)*MEMORY[0x1E4F1CFD0]);
    int v97 = 0;
  }
  if (v140)
  {
    CFRelease(v140);
    CFTypeRef v140 = 0;
  }
  if (v97) {
    CFDictionarySetValue(v84, @"RouteCurrentlyPicked", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (v84) {
    CFRelease(v84);
  }
  long long v12 = v85;
  if (v15)
  {
    uint64_t v11 = v125;
    if (vaemIsContinuityScreenOutputPortPresentInConnectedOutputPorts())
    {
      id v98 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v136 = 0u;
      long long v137 = 0u;
      long long v138 = 0u;
      long long v139 = 0u;
      uint64_t v99 = [(__CFArray *)v15 countByEnumeratingWithState:&v136 objects:v144 count:16];
      if (v99)
      {
        uint64_t v100 = v99;
        uint64_t v101 = *(void *)v137;
        do
        {
          for (uint64_t k = 0; k != v100; ++k)
          {
            if (*(void *)v137 != v101) {
              objc_enumerationMutation(obj);
            }
            v103 = objc_msgSend(*(id *)(*((void *)&v136 + 1) + 8 * k), "mutableCopy", v115);
            if (vaeGetPortTypeFromPortID(objc_msgSend((id)objc_msgSend(v103, "objectForKey:", @"PortNumber"), "unsignedIntValue")) == 1885565807)
            {
              [v103 setObject:@"Speaker" forKey:@"RouteName"];
              [v103 setObject:@"Speaker" forKey:@"RouteUID"];
            }
            [v98 addObject:v103];
          }
          uint64_t v100 = [(__CFArray *)obj countByEnumeratingWithState:&v136 objects:v144 count:16];
        }
        while (v100);
      }

      long long v15 = (__CFArray *)[v98 copy];
      uint64_t v11 = v125;
      CategoryStringWithModeAppended = v126;
      long long v12 = v123;
      unint64_t v14 = 0x1EB3B9000uLL;
      char v13 = v129;
    }
    if (!v13)
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)(v14 + 3392), "sharedInstance"), "propertiesLock"), "lock");
      objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)(v14 + 3392), "sharedInstance"), "pickableRoutesDescriptions"), "setObject:forKey:", v15, v12);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)(v14 + 3392), "sharedInstance"), "propertiesLock"), "unlock");
    }
  }
  else
  {
    uint64_t v11 = v125;
  }
LABEL_163:

  return v15;
}

uint64_t CMSMUtility_CreateCategoryStringWithModeAppended(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return [[NSString alloc] initWithFormat:@"%@%@%@", a1, 0x1EE5ED208, a2];
  }
  else {
    return 0;
  }
}

CFArrayRef vaeCopySubPortDescriptionsForPortAndRouteConfiguration(AudioObjectPropertyElement a1, int a2, int a3, const void *a4)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  *(void *)&outData[0] = 0;
  int v43 = a2;
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a2, a3, 0, a4);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6261767263;
  AudioObjectID inObjectID = a1;
  inAddress.mElement = a1;
  ioDataSize[0] = 8;
  if (AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, ioDataSize, outData)|| !*(void *)&outData[0]|| (CFTypeID v36 = CFGetTypeID(*(CFTypeRef *)&outData[0]), v36 != CFArrayGetTypeID()))
  {
    *(void *)&outData[0] = 0;
  }
  if (RouteConfigurationDictionary) {
    CFRelease(RouteConfigurationDictionary);
  }
  CFArrayRef v10 = *(const __CFArray **)&outData[0];
  if (!*(void *)&outData[0])
  {
    CFArrayRef Copy = 0;
    if (!Mutable) {
      return Copy;
    }
    goto LABEL_60;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)&outData[0]);
  if (Count >= 1)
  {
    CFIndex v11 = 0;
    CFArrayRef v41 = v10;
    int v39 = a4;
    int v38 = a3;
    while (1)
    {
      AudioObjectPropertyElement valuePtr = 0;
      long long v55 = 0u;
      memset(outData, 0, sizeof(outData));
      *(_OWORD *)UInt32 ioDataSize = 0u;
      long long v54 = 0u;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v10, v11);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      if (ValueAtIndex)
      {
        *(void *)&outData[0] = @"DataSourceID";
        *(void *)UInt32 ioDataSize = ValueAtIndex;
        CFIndex v13 = 1;
      }
      else
      {
        CFIndex v13 = 0;
      }
      uint64_t v14 = vaeCopyNameForSubPort(inObjectID, valuePtr);
      long long v15 = (const void *)v14;
      if (v14)
      {
        *(void *)((unint64_t)outData | (8 * v13)) = @"DataSourceName";
        *(void *)((unint64_t)ioDataSize & 0xFFFFFFFFFFFFFFF7 | (8 * (v13++ & 1))) = v14;
      }
      CFDictionaryRef theDict = 0;
      UInt32 v50 = 8;
      *(void *)&v51.AudioObjectPropertySelector mSelector = 0x676C6F6273707070;
      v51.mElement = valuePtr;
      OSStatus PropertyData = AudioObjectGetPropertyData(inObjectID, &v51, 0, 0, &v50, &theDict);
      OSStatus v49 = PropertyData;
      if (PropertyData)
      {
        OSStatus v17 = PropertyData;
        unsigned int v48 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v19 = v48;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
          unsigned int v20 = v19;
        }
        else {
          unsigned int v20 = v19 & 0xFFFFFFFE;
        }
        if (v20)
        {
          int v57 = 136315906;
          uint64_t v58 = "vaeCopySelectedPolarPatternForSubPort";
          __int16 v59 = 1024;
          OSStatus v60 = v17;
          __int16 v61 = 1042;
          int v62 = 4;
          __int16 v63 = 2082;
          CFArrayRef v64 = &v49;
          _os_log_send_and_compose_impl();
        }
        char v44 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFDictionaryRef v21 = 0;
      }
      else
      {
        CFDictionaryRef v21 = theDict;
        if (theDict)
        {
          char v44 = 0;
          *((void *)outData + v13) = @"MicrophonePolarPattern";
          *(void *)&ioDataSize[2 * v13++] = v21;
        }
        else
        {
          char v44 = 1;
        }
      }
      AudioObjectPropertyElement v22 = valuePtr;
      CFDictionaryRef theDict = 0;
      OSStatus v49 = 0;
      unsigned int v23 = CMSMVAUtility_CreateRouteConfigurationDictionary(v43, a3, 0, a4);
      *(void *)&v51.AudioObjectPropertySelector mSelector = 0x676C6F6273706472;
      v51.mElement = v22;
      UInt32 v50 = 8;
      if (AudioObjectHasProperty(inObjectID, &v51))
      {
        OSStatus v24 = AudioObjectGetPropertyData(inObjectID, &v51, 8 * (v23 != 0), v23, &v50, &theDict);
        OSStatus v49 = v24;
        if (v24)
        {
          OSStatus v25 = v24;
          unsigned int v48 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          int v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v27 = v48;
          if (os_log_type_enabled(v26, type)) {
            unsigned int v28 = v27;
          }
          else {
            unsigned int v28 = v27 & 0xFFFFFFFE;
          }
          if (v28)
          {
            int v57 = 136315906;
            uint64_t v58 = "vaeCopyPhysicalDescriptionForSubPort";
            __int16 v59 = 1024;
            OSStatus v60 = v25;
            __int16 v61 = 1042;
            int v62 = 4;
            __int16 v63 = 2082;
            CFArrayRef v64 = &v49;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFDictionaryRef theDict = 0;
          a4 = v39;
          a3 = v38;
        }
      }
      if (v23) {
        CFRelease(v23);
      }
      CFDictionaryRef v29 = theDict;
      if (!theDict) {
        goto LABEL_39;
      }
      CFArrayRef Value = CFDictionaryGetValue(theDict, @"region");
      if (Value)
      {
        *((void *)outData + v13) = @"MicrophoneRegion";
        *(void *)&ioDataSize[2 * v13++] = Value;
      }
      CFArrayRef v31 = CFDictionaryGetValue(v29, @"orientation");
      if (v31)
      {
        *((void *)outData + v13) = @"MicrophoneOrientation";
        *(void *)&ioDataSize[2 * v13++] = v31;
      }
      uint64_t v32 = CFDictionaryGetValue(v29, @"polar pattern");
      if (v32)
      {
        *((void *)outData + v13) = @"MicrophonePolarPatterns";
        *(void *)&ioDataSize[2 * v13++] = v32;
      }
      else
      {
LABEL_39:
        if (!v13)
        {
          CFArrayAppendValue(Mutable, 0);
          char v34 = v44;
          if (!v29) {
            goto LABEL_44;
          }
          goto LABEL_43;
        }
      }
      CFDictionaryRef v33 = CFDictionaryCreate(allocator, (const void **)outData, (const void **)ioDataSize, v13, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFArrayAppendValue(Mutable, v33);
      char v34 = v44;
      if (v33) {
        CFRelease(v33);
      }
      if (!v29) {
        goto LABEL_44;
      }
LABEL_43:
      CFRelease(v29);
LABEL_44:
      if (v15) {
        CFRelease(v15);
      }
      if ((v34 & 1) == 0) {
        CFRelease(v21);
      }
      ++v11;
      CFArrayRef v10 = v41;
      if (Count == v11)
      {
        CFArrayRef Copy = CFArrayCreateCopy(allocator, Mutable);
        goto LABEL_59;
      }
    }
  }
  CFArrayRef Copy = 0;
LABEL_59:
  CFRelease(v10);
  if (Mutable) {
LABEL_60:
  }
    CFRelease(Mutable);
  return Copy;
}

__CFDictionary *CMSMVAUtility_CreateRouteConfigurationDictionary(int a1, int a2, const void *a3, const void *a4)
{
  int v15 = a2;
  int valuePtr = a1;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a1)
  {
    CFNumberRef v10 = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    if (v10) {
      CFDictionarySetValue(Mutable, @"category", v10);
    }
    if (a2)
    {
      CFNumberRef v11 = CFNumberCreate(v8, kCFNumberSInt32Type, &v15);
      if (v11)
      {
        CFNumberRef v12 = v11;
        CFDictionarySetValue(Mutable, @"mode", v11);
        CFRelease(v12);
      }
    }
    if (v10) {
      CFRelease(v10);
    }
  }
  if (a3) {
    CFDictionarySetValue(Mutable, @"initiation context", a3);
  }
  if (a4) {
    CFDictionarySetValue(Mutable, @"allowed port types", a4);
  }
  if (CFDictionaryGetCount(Mutable)) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = Mutable == 0;
  }
  if (!v13)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t vaeCopyNameForSubPort(AudioObjectID a1, AudioObjectPropertyElement a2)
{
  outData[22] = *MEMORY[0x1E4F143B8];
  outData[0] = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6273706E6DLL;
  inAddress.mElement = a2;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData)) {
    return outData[0];
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

uint64_t cmsmRouteDescriptionEqual(CFDictionaryRef theDict, const __CFDictionary *a2)
{
  if (theDict)
  {
    CFDictionaryGetValue(theDict, @"RouteType");
    if (!a2) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  if (a2) {
LABEL_3:
  }
    CFDictionaryGetValue(a2, @"RouteType");
LABEL_5:
  uint64_t result = FigCFEqual();
  if (result)
  {
    if (FigCFEqual() && FigCFEqual())
    {
      return 1;
    }
    else if (FigCFEqual())
    {
      CFDictionaryGetValue(theDict, @"RouteUID");
      CFDictionaryGetValue(a2, @"RouteUID");
      uint64_t result = FigCFEqual();
      if (result)
      {
        CFDictionaryGetValue(theDict, @"RouteSubtype");
        CFDictionaryGetValue(a2, @"RouteSubtype");
        uint64_t result = FigCFEqual();
        if (result)
        {
          CFDictionaryGetValue(theDict, @"RouteSupportsAirPlayVideo");
          CFDictionaryGetValue(a2, @"RouteSupportsAirPlayVideo");
          uint64_t result = FigCFEqual();
          if (result)
          {
            CFDictionaryGetValue(theDict, @"RouteSupportsAirPlayScreen");
            CFDictionaryGetValue(a2, @"RouteSupportsAirPlayScreen");
            return FigCFEqual() != 0;
          }
        }
      }
    }
    else
    {
      CFDictionaryGetValue(theDict, @"AVAudioRouteName");
      CFDictionaryGetValue(a2, @"AVAudioRouteName");
      return FigCFEqual();
    }
  }
  return result;
}

__CFArray *cmsmCreateRouteDescriptionArrayFromPortIDsForRouteConfiguration(uint64_t a1, void *a2, int a3, const __CFDictionary *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v8 = [a2 countByEnumeratingWithState:&v23 objects:v35 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v24 != v10) {
          objc_enumerationMutation(a2);
        }
        CFNumberRef v12 = CMSMCreateRouteDescriptionFromPortIDOrRouteConfiguration([*(id *)(*((void *)&v23 + 1) + 8 * i) unsignedIntValue], 0, 0, 0, 0);
        CFArrayAppendValue(Mutable, v12);
        if (v12) {
          CFRelease(v12);
        }
      }
      uint64_t v9 = [a2 countByEnumeratingWithState:&v23 objects:v35 count:16];
    }
    while (v9);
  }
  if (FigCFEqual()) {
    BOOL v13 = Mutable == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count >= 2)
    {
      CFIndex v15 = Count;
      CFTypeRef v33 = 0;
      CFTypeRef v34 = 0;
      cmsmCopyHFPOrA2DPBTDeviceDetails(a4, (const __CFString **)&v33, (__CFString **)&v34, 0);
      CFIndex v16 = 0;
      while (1)
      {
        CFTypeRef v31 = 0;
        CFTypeRef v32 = 0;
        CFTypeRef v30 = 0;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v16);
        cmsmCopyHFPOrA2DPBTDeviceDetails(ValueAtIndex, (const __CFString **)&v32, (__CFString **)&v31, &v30);
        CFTypeRef v18 = v31;
        if (!v31) {
          goto LABEL_40;
        }
        CFIndex v19 = v16 + 1;
        if (v16 + 1 >= v15) {
          goto LABEL_39;
        }
        do
        {
          CFTypeRef cf = 0;
          CFTypeRef v29 = 0;
          CFTypeRef v27 = 0;
          CFDictionaryRef v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v19);
          cmsmCopyHFPOrA2DPBTDeviceDetails(v20, (const __CFString **)&v29, (__CFString **)&cf, &v27);
          if (FigCFEqual())
          {
            if (FigCFEqual() && FigCFEqual())
            {
              if (FigCFEqual()) {
                CFIndex v21 = v19;
              }
              else {
                CFIndex v21 = v16;
              }
LABEL_29:
              CFArrayRemoveValueAtIndex(Mutable, v21);
              --v15;
              goto LABEL_31;
            }
            if (FigCFEqual() && FigCFEqual())
            {
              if (FigCFEqual()) {
                CFIndex v21 = v16;
              }
              else {
                CFIndex v21 = v19;
              }
              goto LABEL_29;
            }
          }
          ++v19;
LABEL_31:
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          if (v27)
          {
            CFRelease(v27);
            CFTypeRef v27 = 0;
          }
          if (v29) {
            CFRelease(v29);
          }
        }
        while (v19 < v15);
        CFTypeRef v18 = v31;
        if (v31)
        {
LABEL_39:
          CFRelease(v18);
          CFTypeRef v31 = 0;
        }
LABEL_40:
        if (v30)
        {
          CFRelease(v30);
          CFTypeRef v30 = 0;
        }
        if (v32) {
          CFRelease(v32);
        }
        if (++v16 >= v15)
        {
          if (v34)
          {
            CFRelease(v34);
            CFTypeRef v34 = 0;
          }
          if (v33) {
            CFRelease(v33);
          }
          break;
        }
      }
    }
  }
  if (a3)
  {
    v37.length = CFArrayGetCount(Mutable);
    v37.id location = 0;
    CFArraySortValues(Mutable, v37, (CFComparatorFunction)routeDescriptionComparator, (void *)0x20);
  }
  return Mutable;
}

void FigRouteDiscoveryManagerRunBlockOnSerialQueueIfOnEmbeddedPlatforms(uint64_t a1)
{
  uint64_t v2 = MXGetSerialQueue();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __FigRouteDiscoveryManagerRunBlockOnSerialQueueIfOnEmbeddedPlatforms_block_invoke;
  v3[3] = &unk_1E57C5930;
  void v3[4] = a1;
  MXDispatchAsyncAndWait((uint64_t)"FigRouteDiscoveryManagerRunBlockOnSerialQueueIfOnEmbeddedPlatforms", (uint64_t)"FigRouteDiscoveryManager.m", 2656, 0, 0, v2, (uint64_t)v3);
}

void sub_194CF3384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_194CF35CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_194CF3818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_194CF3990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MXGetSerialQueue()
{
  if (MXGetSerialQueue_onceToken != -1) {
    dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
  }
  return gSerialQueue;
}

void MXDispatchAsyncAndWait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7)
{
  uint64_t v14 = (void *)MEMORY[0x1997179E0]();
  CFIndex v15 = (void *)MEMORY[0x1997179E0]();
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == a6) {
      CreateACQDispatchID();
    }
  }
  long long v26 = v24;
  uint64_t v27 = v25;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == a6) {
      MEMORY[0x199715FA0](&v26, 0, "MXDispatchAsyncAndWait", a1, a2, a3, a4, a5);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MXDispatchAsyncAndWait_block_invoke;
  block[3] = &unk_1E57CAE88;
  long long v17 = v26;
  uint64_t v18 = v27;
  uint64_t v19 = a1;
  int v23 = a3;
  uint64_t v20 = a2;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  block[4] = a6;
  block[5] = a7;
  dispatch_barrier_async_and_wait(a6, block);
}

uint64_t MXSessionCopyProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v14 = 0;
  CFIndex v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  if (a1 && a2 && a3)
  {
    int v7 = (void *)MEMORY[0x1997179E0](v6);
    if ([a1 isMemberOfClass:objc_opt_class()])
    {
      uint64_t v8 = [+[MXSessionManagerSidekick sharedInstance] serialQueue];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = __MXSessionCopyProperty_block_invoke;
      v13[3] = &unk_1E57C6180;
      v13[4] = &v14;
      v13[5] = a1;
      v13[6] = a2;
      v13[7] = a3;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionCopyProperty", (uint64_t)"MXSession_CInterfaceCommon.m", 220, 0, 0, v8, (uint64_t)v13);
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      int v10 = [a1 copyPropertyForKey:a2 valueOut:a3];
      *((_DWORD *)v15 + 6) = v10;
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"MXSessionCopyProperty" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:a2];
    }
    uint64_t v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v11;
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_194CF3DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194CF3F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MXSessionSetProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v14 = 0;
  CFIndex v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  if (a1 && a2)
  {
    int v7 = (void *)MEMORY[0x1997179E0](v6);
    if ([a1 isMemberOfClass:objc_opt_class()])
    {
      uint64_t v8 = [+[MXSessionManagerSidekick sharedInstance] serialQueue];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = __MXSessionSetProperty_block_invoke;
      v13[3] = &unk_1E57C6180;
      v13[4] = &v14;
      v13[5] = a1;
      v13[6] = a2;
      v13[7] = a3;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionSetProperty", (uint64_t)"MXSession_CInterfaceCommon.m", 342, 0, 0, v8, (uint64_t)v13);
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      int v10 = [a1 setPropertyForKey:a2 value:a3];
      *((_DWORD *)v15 + 6) = v10;
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"MXSessionSetProperty" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:a2];
    }
    uint64_t v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v11;
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_194CF411C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _MXSessionCopyProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v14 = 0;
  CFIndex v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  if (a1)
  {
    int v7 = (void *)MEMORY[0x1997179E0](v6);
    if ([a1 isMemberOfClass:objc_opt_class()])
    {
      uint64_t v8 = [+[MXSessionManagerSidekick sharedInstance] serialQueue];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = ___MXSessionCopyProperty_block_invoke;
      v13[3] = &unk_1E57C6180;
      v13[4] = &v14;
      v13[5] = a1;
      v13[6] = a2;
      v13[7] = a3;
      MXDispatchAsyncAndWait((uint64_t)"_MXSessionCopyProperty", (uint64_t)"MXSession_CInterfaceCommon.m", 259, 0, 0, v8, (uint64_t)v13);
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      int v10 = [a1 _copyPropertyForKey:a2 valueOut:a3];
      *((_DWORD *)v15 + 6) = v10;
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"_MXSessionCopyProperty" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:a2];
    }
    uint64_t v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v11;
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_194CF42F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194CF4480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFArrayRef vaemCopyAvailableVADUIDs()
{
  if (qword_1E9358BA8) {
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)qword_1E9358BA8);
  }
  else {
    return 0;
  }
}

BOOL CMSMUtility_IsPhoneCallActive()
{
  id v0 = (void *)CMSMUtility_CopyActivePhoneCallInfo();
  BOOL v1 = v0 != 0;

  return v1;
}

uint64_t cmsmUpdateCurrentActiveRoutesInfo()
{
  MEMORY[0x199716E90](gCMSM);
  if (!CMSMUtility_GetNumberOfCurrentOutputPorts())
  {
    CFArrayRef v14 = 0;
    CFArrayRef theArray = 0;
    CFArrayRef v13 = 0;
    cmsmCopyCurrentActiveRoutesInfoForVADUID(0x1EE5EBF48, &theArray, &v14, &v13);
    if (theArray)
    {
      dword_1E9359BC0 = CFArrayGetCount(theArray);
      if (dword_1E9359BC0)
      {
        unint64_t v0 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v0);
          if (FigCFEqual()) {
            unint64_t v2 = 0;
          }
          else {
            unint64_t v2 = (unint64_t)ValueAtIndex;
          }
          unsigned int v3 = CFArrayGetValueAtIndex(v14, v0);
          if (FigCFEqual()) {
            uint64_t v4 = 0;
          }
          else {
            uint64_t v4 = v3;
          }
          uint64_t v5 = CFArrayGetValueAtIndex(v13, v0);
          if (FigCFEqual()) {
            uint64_t v6 = 0;
          }
          else {
            uint64_t v6 = v5;
          }
          long long v8 = v2;
          uint64_t v9 = v4;
          int v10 = v6;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          MXVW_VectorCMSRouteInfoPushBack((void **)qword_1E9359BB8, &v8);
          ++v0;
        }
        while (v0 < dword_1E9359BC0);
      }
      if (theArray)
      {
        CFRelease(theArray);
        CFArrayRef theArray = 0;
      }
    }
    else
    {
      dword_1E9359BC0 = 0;
    }
    if (v14)
    {
      CFRelease(v14);
      CFArrayRef v14 = 0;
    }
    if (v13) {
      CFRelease(v13);
    }
  }
  return MEMORY[0x199716EA0](gCMSM);
}

uint64_t CMSMUtility_GetCurrentRouteTypeAtIndex(uint64_t a1)
{
  MEMORY[0x199716E90](gCMSM);
  if (dword_1E9359BC0 <= a1)
  {
    uint64_t v3 = 0;
  }
  else
  {
    __n128 CMSRouteInfoAt = MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, a1, (uint64_t)v5);
    uint64_t v3 = v5[0];
  }
  MEMORY[0x199716EA0](gCMSM, CMSRouteInfoAt);
  return v3;
}

uint64_t vaemGetFullMute()
{
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F757470706F6D75;
  inAddress.mElement = 0;
  int outData = 0;
  UInt32 ioDataSize = 4;
  AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 0, 0, &ioDataSize, &outData);
  return outData;
}

CFPropertyListRef cmsmDeepCopyPickedRoute()
{
  return cmsDeepCopyPickedRoute(0);
}

uint64_t vaemHeadphoneJackIsConnected(int a1)
{
  if (a1) {
    return byte_1E9358B88;
  }
  if (vaemGetVADPortIDFromVADPortType(1886680175)) {
    return 1;
  }
  return vaemGetVADPortIDFromVADPortType(1885892727) != 0;
}

uint64_t vaemHeadphoneJackHasInput(int a1)
{
  if (a1) {
    return byte_1E9358B89;
  }
  if (vaemGetVADPortIDFromVADPortType(1886680169)) {
    return 1;
  }
  return vaemGetVADPortIDFromVADPortType(1886222185) != 0;
}

uint64_t CMSMUtility_CopyCurrentRouteHasVolumeControl()
{
  unint64_t v0 = CMSMUtility_CopyCurrentlyActiveCategory();
  MEMORY[0x199716E90](gCMSM);
  if (v0 || dword_1E9359B84 == 1668505974)
  {
    id v3 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v4 = [v3 initWithBool:byte_1E9359B80 != 0];
    MEMORY[0x199716EA0](gCMSM);
    if (v0) {
      CFRelease(v0);
    }
  }
  else
  {
    if (dword_1E9359C10)
    {
      id v1 = objc_alloc(MEMORY[0x1E4F28ED0]);
      BOOL HasVolumeControl = 0;
    }
    else
    {
      if (!CMSMUtility_SomeSessionHasDoNotResetAudioCategoryOnNextInactive()) {
        vaemResetVADCategoryToStandardAVAndDefaultMode();
      }
      id v5 = objc_alloc(MEMORY[0x1E4F28ED0]);
      BOOL HasVolumeControl = vaemCurrentRouteHasVolumeControl();
      id v1 = v5;
    }
    uint64_t v4 = [v1 initWithBool:HasVolumeControl];
    MEMORY[0x199716EA0](gCMSM);
  }
  return v4;
}

uint64_t vaemSystemHasAudioInputDeviceExcludingBluetooth()
{
  return byte_1E9358B6A;
}

uint64_t CMScreenGetScreenType()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v6 = 0;
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __CMScreenGetScreenType_block_invoke;
  v2[3] = &unk_1E57C5B30;
  v2[4] = &v3;
  MXDispatchSync((uint64_t)"CMScreenGetScreenType", (uint64_t)"CMSessionManager_Screen.m", 634, 0, 0, gCMScreen_1, (uint64_t)v2);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_194CF5CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSMUtility_IsCameraBeingUsed()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
    while (2)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v0);
        }
        if ([*(id *)(*((void *)&v7 + 1) + 8 * v4) isUsingCamera])
        {
          uint64_t v5 = 1;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v2 != v4);
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v5 = 0;
LABEL_11:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v5;
}

uint64_t MXSessionCreate(void *a1, MXSession **a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = (void *)MEMORY[0x1997179E0]();
    if ([a1 isMemberOfClass:objc_opt_class()])
    {
      uint64_t v10 = 0;
      uint64_t v11 = &v10;
      uint64_t v12 = 0x3052000000;
      CFArrayRef v13 = __Block_byref_object_copy__6;
      CFArrayRef v14 = __Block_byref_object_dispose__6;
      uint64_t v15 = 0;
      uint64_t v5 = [+[MXSessionManagerSidekick sharedInstance] serialQueue];
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __MXSessionCreate_block_invoke;
      v9[3] = &unk_1E57C58A0;
      v9[4] = &v10;
      v9[5] = a1;
      MXDispatchAsyncAndWait((uint64_t)"MXSessionCreate", (uint64_t)"MXSession_CInterfaceCommon.m", 64, 0, 0, v5, (uint64_t)v9);
      *a2 = (MXSession *)v11[5];
      _Block_object_dispose(&v10, 8);
      uint64_t v6 = *a2;
    }
    else
    {
      uint64_t v6 = [[MXSession alloc] initWithSession:a1];
      *a2 = v6;
    }
    if (v6) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = 4294951616;
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void sub_194CF6000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CMSUtility_FetchSessionEntitlements(void *a1, __SecTask *a2)
{
  [a1 setHasEntitlementToRecordAudioInAnExtension:0];
  [a1 setHasEntitlementToStartRecordingInTheBackground:0];
  [a1 setHasEntitlementToSuppressRecordingStateToSystemStatus:0];
  [a1 setHasEntitlementToSupportProcessAssertionAuditTokens:0];
  [a1 setHasEntitlementToSetEmergencyAlertPriority:0];
  [a1 setHasEntitlementToSetPrefersToOptOutOfHardwareSafetyInterruptions:0];
  [a1 setHasEntitlementToSetPrefersNoInterruptions:0];
  [a1 setHasEntitlementToSetPreferredMinimumMicrophoneIndicatorLightOnTime:0];
  if (CMSUtility_IsAnExtension(a1))
  {
    uint64_t v4 = (void *)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.coremedia.extensions.audiorecording.allow", 0);
    if ([v4 BOOLValue]) {
      [a1 setHasEntitlementToRecordAudioInAnExtension:1];
    }

    if (([a1 hasEntitlementToRecordAudioInAnExtension] & 1) == 0)
    {
      uint64_t v5 = (const void *)MX_RunningBoardServices_CopyBundleExtensionPointID(a1);
      if (FigCFEqual() || FigCFEqual())
      {
        BOOL v6 = 1;
        if (!v5)
        {
LABEL_9:
          [a1 setHasEntitlementToRecordAudioInAnExtension:v6];
          goto LABEL_10;
        }
      }
      else
      {
        BOOL v6 = FigCFEqual() != 0;
        if (!v5) {
          goto LABEL_9;
        }
      }
      CFRelease(v5);
      goto LABEL_9;
    }
  }
LABEL_10:
  uint64_t v7 = (void *)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.mediaexperience.startrecordinginthebackground.allow", 0);
  if ([v7 BOOLValue]) {
    [a1 setHasEntitlementToStartRecordingInTheBackground:1];
  }

  long long v8 = (void *)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.mediaexperience.suppressrecordingstatetosystemstatus", 0);
  if ([v8 BOOLValue]) {
    [a1 setHasEntitlementToSuppressRecordingStateToSystemStatus:1];
  }

  long long v9 = (void *)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.mediaexperience.processassertionaudittokens.allow", 0);
  if ([v9 BOOLValue]) {
    [a1 setHasEntitlementToSupportProcessAssertionAuditTokens:1];
  }

  uint64_t v10 = (void *)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.mediaexperience.allowrecordingduringcall", 0);
  if ([v10 BOOLValue]) {
    [a1 setHasEntitlementToRecordDuringCall:1];
  }

  uint64_t v11 = (void *)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.mediaexperience.allowemergencyalertpriority", 0);
  if ([v11 BOOLValue]) {
    [a1 setHasEntitlementToSetEmergencyAlertPriority:1];
  }

  uint64_t v12 = (void *)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.mediaexperience.prefersnointerruptions.allow", 0);
  if ([v12 BOOLValue]) {
    [a1 setHasEntitlementToSetPrefersNoInterruptions:1];
  }

  CFArrayRef v13 = (void *)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.mediaexperience.microphoneattribution.allow", 0);
  if ([v13 BOOLValue]) {
    [a1 setHasEntitlementToShowMicrophoneIndicatorWhileNotRecording:1];
  }

  CFArrayRef v14 = (void *)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.mediaexperience.preferredminimummicrophoneindicatorlightontime.allow", 0);
  if ([v14 BOOLValue]) {
    [a1 setHasEntitlementToSetPreferredMinimumMicrophoneIndicatorLightOnTime:1];
  }

  uint64_t v15 = (void *)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.mediaexperience.isusingbuiltinmicforrecording.allow", 0);
  if ([v15 BOOLValue]) {
    [a1 setHasEntitlementToSetIsUsingBuiltInMicForRecording:1];
  }

  id v16 = (id)SecTaskCopyValueForEntitlement(a2, @"com.apple.private.mediaexperience.preferstooptoutofhardwaresafetyinterruptions.allow", 0);
  if ([v16 BOOLValue]) {
    [a1 setHasEntitlementToSetPrefersToOptOutOfHardwareSafetyInterruptions:1];
  }
}

uint64_t MXCoreSessionInitialize(void *a1)
{
  [a1 updateClientName:0];
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  [a1 setRoutingContextUUID:cf];
  if (cf) {
    CFRelease(cf);
  }
  [a1 setNeedsAudioBudget:0];
  [a1 setPowerProfile:0];
  [a1 setIsLongFormAudio:0];
  [a1 setOverridePortsList:0];
  [a1 setMode:1768776806];
  cmsSetAudioCategory(a1, @"SoloAmbientSound", 1, 0);
  [a1 setIsEligibleForNowPlayingAppConsideration:1];
  LODWORD(v2) = *(_DWORD *)"333?";
  [a1 setInterruptionFadeDuration:v2];
  [a1 setDesiredInputGainScalar:0];
  [a1 setPidToInheritAppStateFrom:0];
  [a1 setForceSoundCheck:0];
  [a1 setPreferredHardwareFormat:@"LPCM"];
  [a1 setExcludedPortsList:0];
  [a1 setPreferredInputSampleRate:44100.0];
  [a1 setPreferredOutputSampleRate:44100.0];
  [a1 setPreferredOutputSampleRateSetByClient:0];
  [a1 setDoNotNotifyOtherSessionsOnNextInactive:0];
  [a1 setAllowSystemSoundsWhileRecording:0];
  [a1 setWantsToPauseSpokenAudio:0];
  [a1 setAllowedRouteTypes:0];
  [a1 setAllowedPortTypes:0];
  [a1 setPrefersMultichannelAudio:0];
  [a1 setOrientationOverride:5];
  [a1 setPreferredStereoInputOrientation:0];
  LODWORD(v3) = -1038090240;
  [a1 setDuckToLevelDB:v3];
  LODWORD(v4) = 1045220557;
  [a1 setDuckToLevelScalar:v4];
  LODWORD(v5) = 1045220557;
  [a1 setUnduckToLevelScalar:v5];
  [a1 setWantsAutomaticClusterPairingOnPlaybackStart:0];
  [a1 setDeactivateTimerDelay:480];
  [a1 setAssertionAuditTimerDelay:480];
  [a1 setDisplayID:0];
  [a1 setPlaybackAssertionRef:0];
  [a1 setResumeAssertionRef:0];
  [a1 setResumeBackgroundAppUpdaterTimer:0];
  [a1 setExtendBackgroundAppAssertionTimer:0];
  [a1 setAddSharedAudioRouteToRoutablePorts:0];
  [a1 setIsRecordingMuted:0];
  [a1 setInterruptionFadeDurationSetByClient:0];
  [a1 setInterruptionStyleSetByClient:0];
  [a1 setDuckFadeDurationSetByClient:0];
  [a1 setUnduckFadeDurationSetByClient:0];
  [a1 setDuckToLevelScalarSetByClient:0];
  [a1 setDuckToLevelDBSetByClient:0];
  [a1 setUnduckToLevelScalarSetByClient:0];
  [a1 setShadowingAudioSessionID:0];
  [a1 setTookControlOfStarkMainAudio:0];
  [a1 setStarkBorrowCount:0];
  [a1 setDuckCommandSentToCarSession:0];
  [a1 setPrefersConcurrentAirPlayAudio:0];
  [a1 setNowPlayingAppWasStoppedOnMostRecentActivation:0];
  [a1 setNowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio:0];
  [a1 setWaitingForRemoteInterruptionDoneIdentifier:0];
  [a1 setNotFullyInactive:0];
  [a1 setClientIsPlaying:0];
  [a1 setSomeMXSessionIsPlaying:0];
  [a1 setHapticEngineIsPlaying:0];
  [a1 setIsPlayingOutput:0];
  [a1 setSavedHWControlFlagsForClientThatDoesNotActuallyPlayAudio:0];
  [a1 setSystemSoundHasModifiedCurrentlyControllingFlags:0];
  [a1 setReporterStarted:0];
  [a1 setPrefersNoInterruptions:0];
  objc_msgSend(a1, "setDuckingSourceList:", objc_msgSend(MEMORY[0x1E4F1CA48], "array"));
  [a1 setApplicationState:0];
  [a1 setIsAllowedToPlayInBackground:0];
  [a1 setHasFetchedBackgroundPrivileges:0];
  [a1 setHasGPSPrivileges:0];
  [a1 setIsAirPlayReceiverSession:0];
  [a1 setIsPiPPossible:0];
  [a1 setIsShadowSessionForFigSBAR:0];
  [a1 setDoesntActuallyPlayAudio:0];
  [a1 setPrefersBeingInterruptedByNextActiveRecordingClient:0];
  [a1 setPrefersNoInterruptionsByRingtonesAndAlerts:0];
  [a1 setPrefersNoInterruptionsByMixableSessions:0];
  [a1 setPrefersToVibeWhenVibrationsAreDisabled:0];
  [a1 setPrefersToInterruptActiveRecordingSessions:0];
  [a1 setPreferredPersistentRoute:0];
  [a1 setAllowMixableAudioWhileRecording:0];
  [a1 setPrefersNoInterruptionWhenSecureMicrophoneIsEngaged:0];
  [a1 setIsSharePlayCallSession:0];
  [a1 setIsSharePlayMediaSession:0];
  [a1 setIsSharePlayCapableCallSession:0];
  [a1 setIsHardwareSafetySession:0];
  [a1 setAggregateDeviceClockUID:0];
  [a1 setRecentlyWantedToPauseSpokenAudio:0];
  [a1 setReporterIDs:0];
  [a1 setWasInterruptedWhileRecording:0];
  [a1 setTimestampWhenMostRecentResumableEndInterruptionWasSent:0];
  [a1 setTimestampWhenMostRecentlyInterrupted:0];
  [a1 setPrefersToTakeHWControlFlagsFromAnotherSession:1];
  [a1 setIsEligibleForBTTriangleConsideration:1];
  [a1 setPrefersNoDucking:0];
  [a1 setPrefersSuppressingRecordingState:0];
  [a1 setOptOutOfMutePriority:0];
  [a1 setPrefersBluetoothAccessoryMuting:0];
  [a1 setActiveOSTransaction:0];
  [a1 setVibratingOSTransaction:0];
  [a1 setBundleIdToPAAccessIntervalMap:0];
  [a1 setHasEntitlementToRecordAudioInAnExtension:0];
  [a1 setHasEntitlementToStartRecordingInTheBackground:0];
  [a1 setHasEntitlementToSuppressRecordingStateToSystemStatus:0];
  [a1 setHasEntitlementToSupportProcessAssertionAuditTokens:0];
  [a1 setHasEntitlementToSetEmergencyAlertPriority:0];
  [a1 setHasEntitlementToSetPrefersToOptOutOfHardwareSafetyInterruptions:0];
  [a1 setHasEntitlementToSetPrefersNoInterruptions:0];
  [a1 setHasEntitlementToShowMicrophoneIndicatorWhileNotRecording:0];
  [a1 setHasEntitlementToSetIsUsingBuiltInMicForRecording:0];
  [a1 setHasEntitlementToSetPreferredMinimumMicrophoneIndicatorLightOnTime:0];
  [a1 setPreferredMinimumMicrophoneIndicatorLightOnTime:0];
  objc_msgSend(a1, "setHostProcessAttribution:", objc_msgSend(MEMORY[0x1E4F1C978], "array"));
  objc_msgSend(a1, "setParentProcessAuditTokens:", objc_msgSend(MEMORY[0x1E4F1C978], "array"));
  objc_msgSend(a1, "setHostProcessPlaybackAssertions:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionary"));
  [a1 setWantsToShowMicrophoneIndicatorWhenNotRecording:0];
  [a1 setPrefersEchoCancelledInput:0];
  [a1 setHasEntitlementToRecordDuringCall:0];
  [a1 setPrefersSpeechDetectEnabled:1];
  [a1 setPrefersInterruptionOnRouteDisconnect:0];
  [a1 setPrefersInterruptionOnRouteDisconnectSetByClient:0];
  [a1 setWasActiveWhenDeviceOwnershipRelinquished:0];
  [a1 setIsSharedAVAudioSessionInstance:0];
  [a1 setAreBothBudsInEarForA2DPPortBeforeInterrupting:0];
  [a1 setBadgeType:@"NotApplicable"];
  objc_msgSend(a1, "setSupportedOutputChannelLayouts:", objc_msgSend(MEMORY[0x1E4F1C978], "array"));
  [a1 setIsUsingBuiltInMicForRecording:0];
  [a1 setIsUsingExclaveSensor:0];
  [a1 setIsRecordingMutedForRemoteDevice:0];
  [a1 setShouldMuteBeAppliedToRemoteDevice:1];
  [a1 setDoesGameAudioNeedToBeSpatialized:0];
  [a1 setBypassSystemSpatialAudioForGame:0];
  [a1 setPrefersToOptOutOfHardwareSafetyInterruptions:0];
  return 0;
}

id CMSMNotificationUtility_CreatePlayingSessionsDescription()
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v17 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v24;
    uint64_t v15 = *(void *)v24;
    id v16 = v0;
    do
    {
      uint64_t v4 = 0;
      uint64_t v18 = v2;
      do
      {
        if (*(void *)v24 != v3) {
          objc_enumerationMutation(v0);
        }
        double v5 = *(void **)(*((void *)&v23 + 1) + 8 * v4);
        if ([v5 isPlaying]
          && ([v5 hasAudioCategory:@"SystemSoundsAndHaptics"] & 1) == 0)
        {
          id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(v5, "clientPID"), "unsignedIntValue")), @"ClientPID");
          objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend(v5, "audioSessionID")), @"AudioSessionID");
          objc_msgSend(v6, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v5) != 0), @"IsNowPlayingEligible");
          long long v8 = (void *)[v5 copyMXSessionList];
          long long v19 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          uint64_t v9 = [v8 countByEnumeratingWithState:&v19 objects:v27 count:16];
          if (v9)
          {
            uint64_t v10 = v9;
            uint64_t v11 = *(void *)v20;
            do
            {
              for (uint64_t i = 0; i != v10; ++i)
              {
                if (*(void *)v20 != v11) {
                  objc_enumerationMutation(v8);
                }
                CFArrayRef v13 = *(void **)(*((void *)&v19 + 1) + 8 * i);
                if ([v13 getIsPlaying]) {
                  objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLongLong:", objc_msgSend(v13, "getID")));
                }
              }
              uint64_t v10 = [v8 countByEnumeratingWithState:&v19 objects:v27 count:16];
            }
            while (v10);
          }

          if ([v7 count]) {
            [v6 setObject:v7 forKey:@"MXSessionIDs"];
          }
          [v17 addObject:v6];

          uint64_t v3 = v15;
          uint64_t v0 = v16;
          uint64_t v2 = v18;
        }
        ++v4;
      }
      while (v4 != v2);
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v2);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v17;
}

void *CMSUtility_GetIsEligibleForNowPlayingAppConsideration(void *result)
{
  if (result) {
    return (void *)[result isEligibleForNowPlayingAppConsideration];
  }
  return result;
}

uint64_t CMSMNP_UpdateNowPlayingAppForNewInterruptionStyle(void *a1)
{
  BOOL v3 = 0;
  CMSUtility_InterpretInterruptionStyle(a1, &v3, 0, 0);
  [a1 setAllowedToBeNowPlayingApp:v3];
  if (([a1 allowedToBeNowPlayingApp] & 1) == 0)
  {
    [a1 setBadgeType:@"NotApplicable"];
    objc_msgSend(a1, "setSupportedOutputChannelLayouts:", objc_msgSend(MEMORY[0x1E4F1C978], "array"));
  }
  return -[MXNowPlayingAppManager updateNowPlayingApp:session:reasonForUpdate:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "updateNowPlayingApp:session:reasonForUpdate:", objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), a1, 3);
}

void *CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)[result isEligibleForNowPlayingAppConsideration];
    if (result)
    {
      uint64_t result = (void *)[v1 allowedToBeNowPlayingApp];
      if (result) {
        return (void *)+[MXSystemController getCanBeNowPlayingAppForPID:](MXSystemController, "getCanBeNowPlayingAppForPID:", objc_msgSend((id)objc_msgSend(v1, "clientPID"), "intValue"));
      }
    }
  }
  return result;
}

uint64_t CMSUtility_InterpretInterruptionStyle(void *a1, BOOL *a2, BOOL *a3, BOOL *a4)
{
  uint64_t result = [a1 interruptionStyle];
  BOOL v8 = result == 32;
  if (result == 8) {
    BOOL v8 = 0;
  }
  BOOL v9 = result == 4;
  BOOL v10 = result == 1 || result == 4;
  if (result == 1) {
    BOOL v9 = 0;
  }
  if ((int)result <= 7) {
    BOOL v8 = 0;
  }
  else {
    BOOL v10 = result == 8;
  }
  BOOL v11 = (int)result <= 7 && v9;
  if (a2) {
    *a2 = v10;
  }
  if (a3) {
    *a3 = v8;
  }
  if (a4) {
    *a4 = v11;
  }
  return result;
}

void CMSMNotificationUtility_PostNowPlayingAppStackDidChange()
{
  if (MX_FeatureFlags_IsNowPlayingAppStackEnabled())
  {
    id v0 = [+[MXNowPlayingAppManager sharedInstance] copyTopOfNowPlayingAppStack];
    if (v0)
    {
      uint64_t v1 = (uint64_t)v0;
      if (([(id)CMSMNotificationUtility_PostNowPlayingAppStackDidChange_sCachedTopOfNowPlayingStack isEqualToString:v0] & 1) == 0)
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }

        CMSMNotificationUtility_PostNowPlayingAppStackDidChange_sCachedTopOfNowPlayingStacuint64_t k = v1;
        +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", @"NowPlayingAppStackDidChange", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v1, @"TopOfStackDisplayID", 0), 0);
      }
    }
    else
    {
      MXSimulateCrash((uint64_t)"Current top of NowPlaying app stack is nil, this should never happen!!! Please file a rad"
                               "ar to MediaExperience (New Bugs) | All");
    }
  }
}

uint64_t MX_FeatureFlags_IsNowPlayingAppStackEnabled()
{
  if (MX_FeatureFlags_IsNowPlayingAppStackEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsNowPlayingAppStackEnabled_onceToken, &__block_literal_global_138);
  }
  return MX_FeatureFlags_IsNowPlayingAppStackEnabled_sIsNowPlayingAppStackEnabled;
}

uint64_t CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMSMNP_GetNowPlayingAppIsPlaying();
  if (CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange_nowPlayingAppIsPlayingCached != result)
  {
    int v1 = result;
    if (result)
    {
      if (!qword_1E9359C18)
      {
        uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", 1), @"State", -[MXNowPlayingAppManager nowPlayingAppDisplayID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppDisplayID"), @"DisplayID", 0);
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t result = +[MXSystemController notifyAll:@"NowPlayingAppIsPlayingDidChange", v4, 0, v6, v7 payload dontPostIfSuspended];
        goto LABEL_16;
      }
      dispatch_source_cancel((dispatch_source_t)qword_1E9359C18);
      if (qword_1E9359C18)
      {
        dispatch_release((dispatch_object_t)qword_1E9359C18);
        qword_1E9359C18 = 0;
      }
      uint64_t v2 = MXGetSerialQueue();
      uint64_t result = (uint64_t)FigRoutingManagerCreateOneShotTimer(v2, 0.25, (uint64_t)&__block_literal_global_18_1, 0, 0);
      qword_1E9359C18 = result;
      if (result)
      {
LABEL_16:
        CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange_nowPlayingAppIsPlayingCached = v1;
        return result;
      }
      LODWORD(result) = v1;
    }
    else
    {
      if (qword_1E9359C18)
      {
        dispatch_source_cancel((dispatch_source_t)qword_1E9359C18);
        if (qword_1E9359C18)
        {
          dispatch_release((dispatch_object_t)qword_1E9359C18);
          qword_1E9359C18 = 0;
        }
      }
      BOOL v3 = MXGetSerialQueue();
      uint64_t result = (uint64_t)FigRoutingManagerCreateOneShotTimer(v3, 0.25, (uint64_t)&__block_literal_global_21_2, 0, 0);
      qword_1E9359C18 = result;
      if (result) {
        goto LABEL_16;
      }
    }
    uint64_t result = CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChangeDelayed(result);
    goto LABEL_16;
  }
  return result;
}

uint64_t CMSMNP_GetNowPlayingAppIsPlaying()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!CMSMDeviceState_IsHomePodHub()
    && [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID] < 1)
  {
    return 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v3) {
          objc_enumerationMutation(v0);
        }
        double v5 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if ([v5 isActive])
        {
          if ([v5 isPlaying])
          {
            if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(v5))
            {
              int v6 = objc_msgSend((id)objc_msgSend(v5, "clientPID"), "intValue");
              if (v6 == [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID])
              {
                uint64_t v7 = 1;
                goto LABEL_16;
              }
            }
          }
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v7 = 0;
LABEL_16:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v7;
}

void sub_194CF8934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

uint64_t FigRoutingManagerContextUtilities_CopySystemAudioContextUUID(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_CopySystemAudioContextUUID_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v2 = 0;
    }
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemAudioContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4568, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t CMSUtility_SessionWithPIDIsPlaying(int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if ([v7 isPlaying]
          && objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1)
        {
          uint64_t v8 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v8;
}

uint64_t volumeControllerServer_handleRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t value = 0;
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v4) {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v6 = v4;
  if (!v4) {
    return 4294951138;
  }
  return v6;
}

uint64_t FigVolumeControllerGetTypeID()
{
  if (FigVolumeControllerGetClassID_sRegisterFigVolumeControllerBaseTypeOnce != -1) {
    dispatch_once_f(&FigVolumeControllerGetClassID_sRegisterFigVolumeControllerBaseTypeOnce, &FigVolumeControllerGetClassID_sFigVolumeControllerClassID, (dispatch_function_t)volumeController_getClassID);
  }
  uint64_t v0 = FigVolumeControllerGetClassID_sFigVolumeControllerClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t volumeControllerServer_handleGetEndpointVolumeControlTypeMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t value = 0;
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v7 + 88);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v9 = v8(a1, 0, &value);
  if (!v9) {
    xpc_dictionary_set_uint64(a3, kFigVolumeControllerXPCMsgParam_GetEndpointVolumeControlType, value);
  }
  return v9;
}

uint64_t volumeController_GetVolumeControlTypeForEndpointWithID(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a3) {
    return 4294949706;
  }
  CFTypeRef v13 = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&v13);
  CFTypeRef cf = 0;
  if (!v13) {
    return 0;
  }
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
  if (v8)
  {
    uint64_t v7 = v8(CMBaseObject, *MEMORY[0x1E4F21090], *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v9 = cf;
    if (v7) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = cf == 0;
    }
    if (!v10)
    {
      *a3 = FigCFNumberGetUInt64();
      CFTypeRef v9 = cf;
    }
    if (v9)
    {
      CFRelease(v9);
      CFTypeRef cf = 0;
    }
  }
  else
  {
    uint64_t v7 = 4294954514;
  }
  if (v13) {
    CFRelease(v13);
  }
  return v7;
}

uint64_t volumeController_copyEndpointWithID(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (a3)
  {
    uint64_t v5 = (void *)result;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x199716EE0](*(void *)(DerivedStorage + 8));
    int64_t Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 16));
    uint64_t v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(DerivedStorage + 16), v8, 0);
    OSStatus v49 = v5;
    AudioObjectPropertyAddress v51 = a3;
    if (Count >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v47 = *MEMORY[0x1E4F20FB0];
      uint64_t v46 = *MEMORY[0x1E4F1CF80];
      while (1)
      {
        uint64_t v10 = (uint64_t)v8[v9];
        CFArrayRef theArray = 0;
        FigRoutingManagerContextUtilities_CopyPickedEndpoints(v10, (uint64_t)&theArray);
        CFArrayRef v11 = theArray;
        if (!theArray) {
          goto LABEL_42;
        }
        CFIndex v12 = CFArrayGetCount(theArray);
        if (v12 < 1) {
          goto LABEL_15;
        }
        CFIndex v13 = v12;
        CFIndex v14 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v14);
          if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)) {
            break;
          }
          if (v13 == ++v14) {
            goto LABEL_15;
          }
        }
        if (!ValueAtIndex || (CFTypeRef v16 = CFRetain(ValueAtIndex)) == 0)
        {
LABEL_15:
          if (!theArray) {
            goto LABEL_42;
          }
          CFIndex v21 = CFArrayGetCount(theArray);
          if (v21 < 1) {
            goto LABEL_23;
          }
          CFIndex v22 = v21;
          CFIndex v23 = 0;
          while (1)
          {
            long long v24 = CFArrayGetValueAtIndex(theArray, v23);
            if (volumeController_doesEndpointHaveSameID((uint64_t)v24, a2)) {
              break;
            }
            if (v22 == ++v23) {
              goto LABEL_23;
            }
          }
          if (v24) {
            CFTypeRef v25 = CFRetain(v24);
          }
          else {
LABEL_23:
          }
            CFTypeRef v25 = 0;
          goto LABEL_39;
        }
        id v17 = v16;
        if (FigRoutingManagerIsEndpointOfType((uint64_t)v16))
        {
          CFArrayRef v53 = 0;
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          long long v26 = *(void (**)(uint64_t, uint64_t, uint64_t, CFArrayRef *))(v20 + 48);
          if (!v26) {
            goto LABEL_35;
          }
          v26(CMBaseObject, v47, v46, &v53);
          if (v53) {
            break;
          }
        }
        CFTypeRef v25 = 0;
LABEL_38:
        CFRelease(v17);
LABEL_39:
        if (theArray) {
          CFRelease(theArray);
        }
        if (v25) {
          goto LABEL_44;
        }
LABEL_42:
        if (++v9 == Count) {
          goto LABEL_43;
        }
      }
      CFIndex v27 = CFArrayGetCount(v53);
      if (v27 < 1) {
        goto LABEL_35;
      }
      CFIndex v28 = v27;
      CFIndex v29 = 0;
      while (1)
      {
        CFTypeRef v30 = CFArrayGetValueAtIndex(v53, v29);
        if (volumeController_doesEndpointHaveSameID((uint64_t)v30, a2)) {
          break;
        }
        if (v28 == ++v29) {
          goto LABEL_35;
        }
      }
      if (v30) {
        CFTypeRef v25 = CFRetain(v30);
      }
      else {
LABEL_35:
      }
        CFTypeRef v25 = 0;
      if (v53) {
        CFRelease(v53);
      }
      goto LABEL_38;
    }
LABEL_43:
    CFTypeRef v25 = 0;
LABEL_44:
    free(v8);
    *AudioObjectPropertyAddress v51 = (uint64_t)v25;
    MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
    uint64_t result = (uint64_t)v49;
    if (!*v51)
    {
      uint64_t v31 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x199716EE0](*(void *)(v31 + 8));
      int64_t v32 = CFDictionaryGetCount(*(CFDictionaryRef *)(v31 + 16));
      uint64_t v48 = v31;
      UInt32 v50 = (const void **)malloc_type_calloc(v32, 8uLL, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v31 + 16), v50, 0);
      CFArrayRef v33 = (const __CFArray *)FigRoutingManagerCopyRegisteredEndpointManagers();
      CFArrayRef v34 = v33;
      if (v33) {
        CFIndex v35 = CFArrayGetCount(v33);
      }
      else {
        CFIndex v35 = 0;
      }
      if (v32 < 1)
      {
LABEL_62:
        uint64_t v45 = 0;
      }
      else
      {
        uint64_t v36 = 0;
        uint64_t v37 = *MEMORY[0x1E4F20620];
        uint64_t v38 = *MEMORY[0x1E4F1CF80];
        while (v35 < 1)
        {
LABEL_61:
          if (++v36 == v32) {
            goto LABEL_62;
          }
        }
        CFIndex v39 = 0;
        uint64_t v40 = (uint64_t)v50[v36];
        while (1)
        {
          CFArrayGetValueAtIndex(v34, v39);
          CFArrayRef v53 = 0;
          uint64_t v41 = FigEndpointManagerGetCMBaseObject();
          uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v42) {
            uint64_t v43 = v42;
          }
          else {
            uint64_t v43 = 0;
          }
          char v44 = *(void (**)(uint64_t, uint64_t, uint64_t, CFArrayRef *))(v43 + 48);
          if (v44) {
            v44(v41, v37, v38, &v53);
          }
          uint64_t v45 = FigRoutingManagerCopyEndpointWithDeviceID(a2, 0, (uint64_t)v53, v40);
          if (v53) {
            CFRelease(v53);
          }
          if (v45) {
            break;
          }
          if (v35 == ++v39) {
            goto LABEL_61;
          }
        }
      }
      *AudioObjectPropertyAddress v51 = v45;
      if (v34) {
        CFRelease(v34);
      }
      free(v50);
      return MEMORY[0x199716EF0](*(void *)(v48 + 8));
    }
  }
  return result;
}

uint64_t FigRoutingManagerCopyRegisteredEndpointManagers()
{
  uint64_t v0 = +[MXEndpointDescriptorCache sharedInstance];
  return (uint64_t)[(MXEndpointDescriptorCache *)v0 copyRegisteredEndpointMangers];
}

uint64_t volumeControllerServer_handleGetMuteOfEndpointWithIDMessage(uint64_t a1, uint64_t a2, void *a3)
{
  char v11 = 0;
  uint64_t v5 = FigXPCMessageCopyCFString();
  if (v5) {
    return v5;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, char *))(v7 + 160);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v9 = v8(a1, 0, &v11);
  if (!v9) {
    xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_Mute, v11 != 0);
  }
  return v9;
}

uint64_t volumeController_GetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (!MX_FeatureFlags_IsMuteEnabled()) {
    return 0;
  }
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&cf);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
  {
    CFTypeRef v18 = 0;
    if (!cf) {
      return 4294949706;
    }
    CFTypeRef v6 = CFRetain(cf);
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    if (!v6) {
      goto LABEL_13;
    }
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    CFIndex v12 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v10 + 48);
    if (!v12)
    {
      uint64_t v11 = 4294954514;
      goto LABEL_15;
    }
    uint64_t v11 = v12(CMBaseObject, *MEMORY[0x1E4F20EA0], v7, &v18);
    if (!v11)
    {
LABEL_13:
      uint64_t v11 = 0;
      *a3 = FigCFEqual();
    }
LABEL_15:
    uint64_t v13 = FigEndpointGetCMBaseObject();
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CFTypeRef v16 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v15 + 48);
    if (v16) {
      v16(v13, *MEMORY[0x1E4F20F28], v7, &v19);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v18) {
      CFRelease(v18);
    }
    goto LABEL_24;
  }
  uint64_t v11 = 0;
LABEL_24:
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v19) {
    CFRelease(v19);
  }
  return v11;
}

uint64_t MX_FeatureFlags_IsMuteEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t volumeControllerServer_handleCanUseForRoutingContextMessage(uint64_t a1, xpc_object_t xdict, void *a3)
{
  CFTypeRef cf = 0;
  char v13 = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext);
  uint64_t v6 = FigRoutingContextXPCServerCopyRoutingContextForID(uint64, (uint64_t)&cf);
  if (v6)
  {
    uint64_t v11 = v6;
  }
  else
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, CFTypeRef, char *))(v9 + 8);
    if (v10)
    {
      uint64_t v11 = v10(a1, v7, &v13);
      if (!v11) {
        xpc_dictionary_set_BOOL(a3, kFigVolumeControllerXPCMsgParam_CanUseForRoutingContext, v13 != 0);
      }
    }
    else
    {
      uint64_t v11 = 4294954514;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t volumeController_AreVolumeOperationsSupportedForRoutingContext(uint64_t a1, uint64_t a2, Boolean *a3)
{
  uint64_t result = 4294949706;
  if (a2 && a3)
  {
    int key = 0;
    FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&key);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x199716EE0](*(void *)(DerivedStorage + 8));
    Boolean v6 = CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 16), key);
    MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
    *a3 = v6;
    if (key) {
      CFRelease(key);
    }
    return 0;
  }
  return result;
}

uint64_t FigRoutingManagerContextUtilities_CopyRoutingContextUUID(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 4294954296;
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  uint64_t v5 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v5 = 504;
  }
  Boolean v6 = *(NSObject **)v5;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __FigRoutingManagerContextUtilities_CopyRoutingContextUUID_block_invoke;
  v8[3] = &__block_descriptor_56_e5_v8__0l;
  if (!byte_1E9358E28) {
    uint64_t v4 = 0;
  }
  v8[4] = v4;
  v8[5] = a1;
  v8[6] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyRoutingContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 2575, 0, 0, v6, (uint64_t)v8);
  return 0;
}

uint64_t FigRoutingContextXPCServerCopyRoutingContextForID(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F40DECB0](gRoutingContextServer, a1, a2);
}

uint64_t FigVolumeControllerCopySharedController(void *a1)
{
  if (!a1) {
    return 4294949706;
  }
  if (FigVolumeControllerCopySharedController_sFigVolumeControllerSetupOnce != -1) {
    dispatch_once(&FigVolumeControllerCopySharedController_sFigVolumeControllerSetupOnce, &__block_literal_global_17);
  }
  CFTypeRef v2 = (CFTypeRef)FigVolumeControllerCopySharedController_volumeController;
  if (FigVolumeControllerCopySharedController_volumeController) {
    CFTypeRef v2 = CFRetain((CFTypeRef)FigVolumeControllerCopySharedController_volumeController);
  }
  *a1 = v2;
  return FigVolumeControllerCopySharedController_err;
}

void *CMSUtility_GetPreferredIOBufferFrames(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 preferredIOBufferFrames];
  }
  return a1;
}

uint64_t _VAEndpointManager_CopyPropertyForAudioSessionID(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294950586;
  if (a2 && a6)
  {
    *a6 = 0;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20608]))
    {
      id v10 = [+[MXSessionManager sharedInstance] copySessionWithAudioSessionID:a4];
      uint64_t v11 = v10;
      if (v10)
      {
        CFIndex v12 = (NSString *)[v10 audioCategory];
        char v13 = (NSString *)[v11 audioMode];
        uint64_t v14 = (void *)[v11 activationContext];
        uint64_t v15 = (void *)[v11 allowedPortTypes];
      }
      else
      {
        uint64_t v14 = 0;
        CFIndex v12 = 0;
        char v13 = 0;
        uint64_t v15 = 0;
      }
      *a6 = vaemCopyAvailableEndpointsForRouteConfiguration(v12, v13, v14, v15);
LABEL_12:

      return 0;
    }
    if (!CFEqual(a2, @"VAEM_AvailableInputEndpoints"))
    {
      uint64_t result = CFEqual(a2, @"VAEM_IsAirPlayIncluded");
      if (!result) {
        return result;
      }
      id v18 = [+[MXSessionManager sharedInstance] copySessionWithAudioSessionID:a4];
      uint64_t v11 = v18;
      if (v18)
      {
        int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)[v18 audioCategory]);
        int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName([v11 audioMode]);
        int ShouldIncludePortTypeForRouteConfiguration = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)[v11 allowedPortTypes], 0x70617061u);
        CFIndex v22 = (const void *)[v11 allowedPortTypes];
      }
      else
      {
        int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)@"Audio/Video");
        int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(@"Default");
        int ShouldIncludePortTypeForRouteConfiguration = vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, 0, 0x70617061u);
        CFIndex v22 = 0;
      }
      if (ShouldIncludePortTypeForRouteConfiguration | vaemShouldIncludePortTypeForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, v22, 0x70617073u))CFIndex v27 = (const void **)MEMORY[0x1E4F1CFD0]; {
      else
      }
        CFIndex v27 = (const void **)MEMORY[0x1E4F1CFC8];
      CFIndex v28 = *v27;
      *a6 = *v27;
      CFRetain(v28);
      goto LABEL_12;
    }
    if (a4)
    {
      id v16 = [+[MXSessionManager sharedInstance] copySessionWithAudioSessionID:a4];
      id v17 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      *a6 = 0;
      if (!v16) {
        goto LABEL_25;
      }
LABEL_18:
      int v24 = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)[v16 audioCategory]);
      int v25 = CMSMVAUtility_GetVADModeFromFigModeName([v16 audioMode]);
      long long v26 = (void *)vaemCopyConnectedPortsListForRouteConfiguration(v24, v25, 0, 1);
LABEL_26:
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      uint64_t v29 = [v26 countByEnumeratingWithState:&v35 objects:v39 count:16];
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = *(void *)v36;
        do
        {
          for (uint64_t i = 0; i != v30; ++i)
          {
            if (*(void *)v36 != v31) {
              objc_enumerationMutation(v26);
            }
            CFTypeRef v33 = vaemCopyEndpointForPort([*(id *)(*((void *)&v35 + 1) + 8 * i) unsignedIntValue]);
            [v17 addObject:v33];
            if (v33) {
              CFRelease(v33);
            }
          }
          uint64_t v30 = [v26 countByEnumeratingWithState:&v35 objects:v39 count:16];
        }
        while (v30);
      }
      *a6 = v17;
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }

      return 0;
    }
    id v17 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    *a6 = 0;
    uint64_t AudioSessionIDForActiveCMSession = CMSMUtility_GetAudioSessionIDForActiveCMSession();
    if (AudioSessionIDForActiveCMSession)
    {
      id v16 = [+[MXSessionManager sharedInstance] copySessionWithAudioSessionID:AudioSessionIDForActiveCMSession];
      if (v16) {
        goto LABEL_18;
      }
    }
    else
    {
      id v16 = 0;
    }
LABEL_25:
    long long v26 = 0;
    goto LABEL_26;
  }
  return result;
}

uint64_t CMSUtility_GetCustomizedCategory(void *a1)
{
  id v2 = (id)[a1 audioCategory];
  uint64_t v3 = [a1 shouldEnableBluetoothRecording];
  uint64_t v4 = (const void *)[a1 defaultBuiltInRouteToUse];
  if ([a1 allowsBluetoothRecordingCustomization]) {
    id v2 = -[MXSessionManager getBluetoothCustomizedAlternateCategory:enableBluetooth:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getBluetoothCustomizedAlternateCategory:enableBluetooth:", [a1 audioCategory], v3);
  }
  if (![a1 allowsDefaultBuiltInRouteCustomization]
    || !v4
    || !CFEqual(v4, @"Speaker") && !CFEqual(v4, @"Receiver"))
  {
    return (uint64_t)v2;
  }
  uint64_t v5 = +[MXSessionManager sharedInstance];
  return (uint64_t)[(MXSessionManager *)v5 getDefaultBuiltInCustomizedAlternateCategory:v2 defaultBuiltInRoute:v4];
}

uint64_t CMSMUtility_GetDefaultEnableBluetoothRecordingSettingForMode(int a1)
{
  uint64_t result = 0;
  if (a1 > 1768781425)
  {
    if (a1 > 1936749156)
    {
      if (a1 != 1936749157)
      {
        if (a1 == 1987208039) {
          goto LABEL_17;
        }
        int v3 = 1986884455;
        goto LABEL_16;
      }
    }
    else if (a1 != 1768781426 && a1 != 1835229549)
    {
      int v3 = 1919776355;
      goto LABEL_16;
    }
LABEL_18:
    uint64_t v4 = MEMORY[0x1E4F1CFC8];
    return *(void *)v4;
  }
  if (a1 > 1768778863)
  {
    if (a1 != 1768778864)
    {
      if (a1 == 1768779619) {
        goto LABEL_17;
      }
      int v3 = 1768781411;
LABEL_16:
      if (a1 != v3) {
        return result;
      }
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (a1 != 1735222132 && a1 != 1751212899)
  {
    int v3 = 1768057203;
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v4 = MEMORY[0x1E4F1CFD0];
  return *(void *)v4;
}

__CFString *CMSMUtility_GetDefaultBuiltInRouteSettingForMode(int a1)
{
  uint64_t result = 0;
  if (a1 > 1768781425)
  {
    if (a1 > 1936749156)
    {
      if (a1 == 1936749157 || a1 == 1986884455) {
        return @"Speaker";
      }
      int v3 = 1987208039;
    }
    else
    {
      if (a1 == 1768781426 || a1 == 1835229549) {
        return @"Speaker";
      }
      int v3 = 1919776355;
    }
LABEL_17:
    if (a1 != v3) {
      return result;
    }
    return @"Receiver";
  }
  if (a1 <= 1768778863)
  {
    if (a1 != 1735222132 && a1 != 1751212899)
    {
      int v3 = 1768057203;
      goto LABEL_17;
    }
    return @"Speaker";
  }
  if (a1 == 1768778864) {
    return @"Speaker";
  }
  if (a1 != 1768779619)
  {
    if (a1 != 1768781411) {
      return result;
    }
    return @"Speaker";
  }
  return @"Receiver";
}

__CFArray *vaemCopyAvailableEndpointsForRouteConfiguration(NSString *a1, NSString *a2, void *a3, void *a4)
{
  Boolean v6 = a2;
  CFTypeRef v7 = a1;
  if (!a1)
  {
    CFTypeRef v7 = [+[MXSessionManager sharedInstance] currentAudioCategory];
    if (v6) {
      goto LABEL_3;
    }
LABEL_15:
    Boolean v6 = [+[MXSessionManager sharedInstance] currentAudioMode];
    goto LABEL_3;
  }
  if (!a2) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t v8 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)v7, (uint64_t)v6, a3, a4);
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (v8)
  {
    CFIndex Count = CFArrayGetCount(v8);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      for (CFIndex i = 0; i != v11; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
        CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"PortNumber");
        if (Value) {
          CFArrayAppendValue(Mutable, Value);
        }
      }
    }
  }
  uint64_t v15 = vaemCopyEndpointsForListOfPorts(Mutable, 1);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v15;
}

__CFArray *vaemCopyEndpointsForListOfPorts(const __CFArray *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    for (CFIndex i = 0; i != v6; ++i)
    {
      uint64_t PortAtIndex = CMSMVAUtility_GetPortAtIndex(a1, i);
      uint64_t v9 = (const void *)vaeCopyNameForPort(PortAtIndex);
      int PortTypeFromPortID = vaeGetPortTypeFromPortID(PortAtIndex);
      if (!a2 || (int v11 = PortTypeFromPortID, !FigCFEqual()) && v11 != 1885433975 && v11 != 1885433964)
      {
        CFTypeRef v12 = vaemCopyEndpointForPort(PortAtIndex);
        if (v12)
        {
          char v13 = v12;
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v13);
        }
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
  if (Mutable && !CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

__CFDictionary *CMSMCreateRouteDescriptionFromPortIDOrRouteConfiguration(int a1, int a2, int a3, const void *a4, const void *a5)
{
  CFIndex v6 = 0;
  int v33 = a1;
  int64_t v32 = 0;
  CFTypeRef v7 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!a1)
  {
    if (MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled() && !vaemIsPersistentRouteActive())
    {
      CFTypeRef v15 = cmsmCopyActiveNonQuiesceablePortsForRouteConfigurationScopeAndDevice(a2, a3, a4, a5, 0, 0x1EE5EBF48);
      if (!v15) {
        goto LABEL_31;
      }
    }
    else
    {
      CFTypeRef v15 = cmsmCopyActiveNonWirelessPortsListForRouteConfigurationScopeAndDevice(a2, a3, a4, a5, 0, 0x1EE5EBF48);
      if (!v15) {
        goto LABEL_31;
      }
    }
    CFIndex v6 = (void *)v15;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_30;
    }
    if (![v6 count]) {
      goto LABEL_30;
    }
    int v33 = objc_msgSend((id)objc_msgSend(v6, "firstObject"), "unsignedIntValue");
    if (!v33) {
      goto LABEL_30;
    }
  }
  CFTypeRef cf = 0;
  uint64_t v8 = qword_1E9359B78;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  id v16 = *(void (**)(uint64_t, uint64_t, CFAllocatorRef, int *, CFTypeRef *))(v10 + 8);
  if (v16)
  {
    CFAllocatorRef v17 = *v7;
    v16(v8, 0x1EE5F3568, *v7, &v33, &cf);
    if (cf)
    {
      if (a1)
      {
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        CFIndex v23 = *(void (**)(uint64_t, uint64_t, CFAllocatorRef, __CFDictionary **))(v20 + 48);
        if (!v23) {
          goto LABEL_28;
        }
        uint64_t v24 = 0x1EE5F44C8;
      }
      else
      {
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        CFIndex v23 = *(void (**)(uint64_t, uint64_t, CFAllocatorRef, __CFDictionary **))(v22 + 48);
        if (!v23) {
          goto LABEL_28;
        }
        uint64_t v24 = 0x1EE5F44E8;
      }
      v23(CMBaseObject, v24, v17, &v32);
LABEL_28:
      CFRelease(cf);
    }
  }
  if (v6) {
LABEL_30:
  }
    CFRelease(v6);
LABEL_31:
  CFMutableArrayRef Mutable = v32;
  if (!v32)
  {
    CFAllocatorRef v26 = *v7;
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(*v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFIndex v27 = (const void *)MGCopyAnswer();
      CFStringRef v28 = CFStringCreateWithFormat(v26, 0, @"%@...", v27);
      if (!v28)
      {
        CFDictionarySetValue(Mutable, @"RouteType", @"Default");
        if (!v27) {
          return Mutable;
        }
        goto LABEL_35;
      }
      CFStringRef v29 = v28;
      CFDictionarySetValue(Mutable, @"RouteName", v28);
      CFDictionarySetValue(Mutable, @"RouteType", @"Default");
      CFRelease(v29);
      if (v27) {
LABEL_35:
      }
        CFRelease(v27);
    }
  }
  return Mutable;
}

uint64_t _VAEndpointManager_CopyPropertyWithQualifier(uint64_t a1, const void *a2, uint64_t a3, int *a4, void *a5)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294950586;
  if (a4 && a2 && a5)
  {
    *a5 = 0;
    if (CFEqual(a2, @"VAEM_VADPortIDFromVADPortType"))
    {
      unsigned int VADPortIDFromVADPortType = vaemGetVADPortIDFromVADPortType(*a4);
      uint64_t v10 = MXCFNumberCreateFromSInt64(VADPortIDFromVADPortType);
LABEL_17:
      CFTypeRef v15 = v10;
      uint64_t result = 0;
      *a5 = v15;
      return result;
    }
    if (CFEqual(a2, @"VAEM_IsPlayAndRecordCategory"))
    {
      int v11 = *a4;
      CFTypeRef v12 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (*a4 > 1668313665)
      {
        if (v11 != 1668313666)
        {
          unsigned __int16 v13 = 29299;
LABEL_14:
          if (v11 != (v13 | 0x63700000)) {
            CFTypeRef v12 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          }
        }
      }
      else if (v11 != 1668301427)
      {
        unsigned __int16 v13 = 24946;
        goto LABEL_14;
      }
      uint64_t v10 = (void *)CFRetain(*v12);
      goto LABEL_17;
    }
    if (CFEqual(a2, @"VAEM_ScalarEquivalent"))
    {
      float v14 = __exp10f(*(float *)a4 / 20.0);
      uint64_t v10 = MXCFNumberCreateFromFloat32(v14);
      goto LABEL_17;
    }
    uint64_t result = CFEqual(a2, @"VAEM_EndpointForPort");
    if (result)
    {
      uint64_t v10 = (void *)vaemCopyEndpointForPort(*a4);
      goto LABEL_17;
    }
  }
  return result;
}

CFTypeRef vaemCopyEndpointForPort(int a1)
{
  CFTypeRef result = 0;
  int valuePtr = a1;
  if (a1 && qword_1E9358AF8)
  {
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1E9358AF8, v3);
    if (Value
      || (vaemAddToPortEndpointCache(valuePtr),
          (CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1E9358AF8, v3)) != 0))
    {
      if (v3) {
        CFRelease(v3);
      }
      return CFRetain(Value);
    }
    else
    {
      if (v3) {
        CFRelease(v3);
      }
      return 0;
    }
  }
  return result;
}

uint64_t CMSMVAUtility_GetPortAtIndex(const __CFArray *a1, CFIndex a2)
{
  CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2);
  uint64_t valuePtr = 0;
  CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
  return valuePtr;
}

double vaemGetSampleRateForDevice(AudioObjectID a1)
{
  double outData = 0.0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F626E737274;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  double result = outData;
  if (PropertyData) {
    return 0.0;
  }
  return result;
}

void cmsmCopyVADPickedRouteDescriptionForRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3, const void *a4, __CFDictionary **a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a5) {
    *a5 = 0;
  }
  if (a1)
  {
    int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a1);
    int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
    CFArrayRef v11 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, a4, 0, 0x1EE5EBF48);
    CFArrayRef v12 = v11;
    if (!v11) {
      goto LABEL_13;
    }
    CFTypeID v13 = CFGetTypeID(v11);
    if (v13 != CFArrayGetTypeID()) {
      goto LABEL_13;
    }
    CFIndex Count = CFArrayGetCount(v12);
    if (Count != 1 && (Count < 2 || !CMSMVAUtility_IsBluetoothSharingSessionEnabled(v12))) {
      goto LABEL_13;
    }
    AudioObjectID valuePtr = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 0);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    int ConnectionTypeForPort = vaeGetConnectionTypeForPort(valuePtr);
    if (ConnectionTypeForPort == 1885544823
      || (int v17 = ConnectionTypeForPort, vaeIsQuiesceableWiredPort(valuePtr)))
    {
LABEL_11:
      int v31 = 0;
      CFNumberRef v18 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 0);
      CFNumberGetValue(v18, kCFNumberSInt32Type, &v31);
      int v19 = v31;
      int v20 = 0;
      int v21 = 0;
      uint64_t v22 = 0;
      CFIndex v23 = 0;
    }
    else
    {
      if (v17 == 1885561449)
      {
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        obuint64_t j = cmsmCopyBuiltinPortsListForRouteConfigurationScopeAndDevice(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a4);
        uint64_t v25 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
        if (v25)
        {
          uint64_t v26 = v25;
          uint64_t v27 = *(void *)v33;
          while (2)
          {
            uint64_t v28 = 0;
            do
            {
              if (*(void *)v33 != v27) {
                objc_enumerationMutation(obj);
              }
              AudioObjectID v29 = valuePtr;
              if (v29 == [*(id *)(*((void *)&v32 + 1) + 8 * v28) unsignedIntValue])
              {

                goto LABEL_11;
              }
              ++v28;
            }
            while (v26 != v28);
            uint64_t v26 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
            if (v26) {
              continue;
            }
            break;
          }
        }
      }
      int v19 = 0;
      int v20 = VADCategoryFromFigCategoryName;
      int v21 = VADModeFromFigModeName;
      uint64_t v22 = a3;
      CFIndex v23 = a4;
    }
    uint64_t v24 = CMSMCreateRouteDescriptionFromPortIDOrRouteConfiguration(v19, v20, v21, v22, v23);
    if (!v24) {
LABEL_13:
    }
      uint64_t v24 = CMSMCreateRouteDescriptionFromPortIDOrRouteConfiguration(0, VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, a4);
    if (a5)
    {
      *a5 = v24;
      uint64_t v24 = 0;
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v24) {
      CFRelease(v24);
    }
  }
}

id cmsmCopyBuiltinPortsListForRouteConfigurationScopeAndDevice(int a1, int a2, const void *a3)
{
  id outData = 0;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"cribptuo";
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, 0, a3);
  if (!AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData))[outData count]; {

  }
  return outData;
}

uint64_t vaeIsQuiesceableWiredPort(AudioObjectID a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int outData = 0;
  if (!MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled()) {
    return 0;
  }
  if (!a1)
  {
    inAddress.AudioObjectPropertySelector mSelector = 0;
    v8[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_7;
  }
  inAddress.mElement = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"rwqpbolg";
  UInt32 ioDataSize = 4;
  *(_DWORD *)uint64_t v8 = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  if (*(_DWORD *)v8)
  {
    id v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
LABEL_7:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return outData;
}

uint64_t MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled()
{
  if (MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled_onceToken, &__block_literal_global_81_0);
  }
  return MX_FeatureFlags_IsQuiesceableWiredConnectionEnabled_sIsQuiesceableWiredConnectionEnabled;
}

CFTypeRef cmsmCopyActiveNonWirelessPortsListForRouteConfigurationScopeAndDevice(int a1, int a2, const void *a3, const void *a4, int a5, uint64_t a6)
{
  CFTypeRef cf = 0;
  CFArrayRef outData = 0;
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, a3, a4);
  if (a5 == 1) {
    AudioObjectPropertyScope v9 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v9 = 1869968496;
  }
  inAddress.AudioObjectPropertySelector mSelector = 1634629490;
  inAddress.mScope = v9;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  OSStatus PropertyData = AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData);
  CFArrayRef v11 = outData;
  if (PropertyData) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = outData == 0;
  }
  if (!v12)
  {
    CFTypeID v13 = CFGetTypeID(outData);
    if (v13 == CFArrayGetTypeID() && CFArrayGetCount(outData))
    {
      if (a5 == 1)
      {
        p_CFTypeRef cf = &cf;
        uint64_t v15 = a6;
        id v16 = 0;
      }
      else
      {
        id v16 = &cf;
        uint64_t v15 = a6;
        p_CFTypeRef cf = 0;
      }
      vaemGetPortListForDevice(outData, v15, p_cf, v16);
      if (cf) {
        CFRetain(cf);
      }
    }
    CFArrayRef v11 = outData;
  }
  if (v11) {
    CFRelease(v11);
  }
  if (RouteConfigurationDictionary) {
    CFRelease(RouteConfigurationDictionary);
  }
  return cf;
}

uint64_t CMSMUtility_IsSiriRecording()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isTheAssistant]
          && [v5 isRecording]
          && ([v5 isActive] & 1) != 0)
        {
          uint64_t v6 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t systemController_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)gFigSystemControllerCopyPropertyMapping, a2);
  if (Value)
  {
    uint64_t v8 = [*DerivedStorage copyAttributeForKey:Value withValueOut:a4];
    if (v8) {
      FigCFEqual();
    }
  }
  else if (FigCFEqual())
  {
    uint64_t v8 = 0;
    *a4 = HDMILatencyMgr_CopyMeasuredHDMILatency();
  }
  else
  {
    return 4294954512;
  }
  return v8;
}

void CMSUtility_SendSessionVolumeToAudioStatistics(void *a1, int a2, const void *a3)
{
  float v7 = 0.0;
  if ([a1 displayID])
  {
    [a1 displayID];
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  }
  else
  {
    CStringPtrAndBufferToFree = 0;
  }
  CMSUtility_ComputePlaybackVolume(a1, &v7);
  CMSUtility_SendVolumeChangeEventToAudioStatistics(a1, CStringPtrAndBufferToFree, [a1 audioCategory], a3, a2, 0, v7);
  free(0);
}

void CMSUtility_SendVolumeChangeEventToAudioStatistics(void *a1, const char *a2, uint64_t a3, const void *a4, int a5, int a6, float a7)
{
  float v14 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsActive, 0);
  CFArrayRef v15 = v14;
  if (v14) {
    CFIndex Count = CFArrayGetCount(v14);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t value = 0;
  CFTypeRef v22 = 0;
  if (a1) {
    PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", [a1 audioCategory]), 0, &v22, 0);
  }
  PVMCopyVolumeCategoryAndMode((const __CFString *)[+[MXSessionManager sharedInstance] getUncustomizedCategory:a3], 0, &value, 0);
  int v17 = cmsutility_createVolumeChangeMessageForAudioStatistics(a2, value, a4, a5, a6, a7);
  if (a1 && [a1 isActive] && FigCFEqual())
  {
    CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics(a1, (uint64_t)v17, 0xEu, 5u, 1, a6);
  }
  else if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v15, i);
      CFTypeRef cf = 0;
      PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", [ValueAtIndex audioCategory]), 0, &cf, 0);
      [ValueAtIndex displayID];
      FigCFDictionarySetValue();
      if ([ValueAtIndex audioCategory])
      {
        PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", [ValueAtIndex audioCategory]), 0, &value, 0);
        CFDictionarySetValue(v17, @"MXSessionVolumeActiveSessionCategory", value);
      }
      CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics(ValueAtIndex, (uint64_t)v17, 0xEu, 5u, 1, a6);
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  if (v22)
  {
    CFRelease(v22);
    CFTypeRef v22 = 0;
  }
  if (value)
  {
    CFRelease(value);
    uint64_t value = 0;
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
}

id PVMCopyVolumeCategoryAndMode(const __CFString *a1, const void *a2, void *a3, void *a4)
{
  MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a1, a2);
  return pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, a3, a4);
}

id CMSMUtility_CreateCurrentlyAirPlayingVideoStreamsDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  CFTypeRef cf = 0;
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v5 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v6 = [(NSPointerArray *)v5 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        long long v10 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if (CMSUtility_IsLongFormVideoSession(v10)
          && [v10 isPlaying]
          && [v10 isActiveOverAirPlayVideo]
          && ([v10 isAudioOnlyAirPlayVideoActive] & 1) == 0)
        {
          if ([v10 displayID]) {
            objc_msgSend(v4, "setObject:forKey:", objc_msgSend(v10, "displayID"), a1);
          }
          FigRoutingManagerContextUtilities_CopyPickedEndpointNames([v10 routingContextUUID], (CFMutableArrayRef *)&cf);
          if (cf)
          {
            if ((unint64_t)[(id)cf count] >= 2)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            objc_msgSend(v4, "setObject:forKey:", cf, a2, v13, v14);
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
          }
          goto LABEL_20;
        }
      }
      uint64_t v7 = [(NSPointerArray *)v5 countByEnumeratingWithState:&v15 objects:v20 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_20:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v4;
}

uint64_t CMSMUtility_ShouldChangeMainVolume(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  theArray[20] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  unsigned int ContextType = FigRoutingManagerContextUtilities_GetContextType([a1 routingContextUUID]);
  if (ContextType > 4 || ((1 << ContextType) & 0x1A) == 0) {
    return 0;
  }
  theArray[0] = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints([a1 routingContextUUID], (uint64_t)theArray);
  if (!theArray[0]) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray[0]);
  if (Count == 1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], 0);
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
    {
LABEL_52:
      uint64_t v15 = 0;
      goto LABEL_58;
    }
    CFArrayRef v30 = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    long long v17 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v14 + 48);
    if (v17) {
      v17(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &v30);
    }
    CFIndex v18 = (CFIndex)v30;
    if (!v30 || (CFIndex v18 = CFArrayGetCount(v30), v18 != 1))
    {
      if (a4) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v18 <= 1;
      }
      int v22 = !v21;
LABEL_46:
      if (v30) {
        CFRelease(v30);
      }
      if (v22)
      {
LABEL_49:
        CFArrayRef v30 = 0;
        PVMCopyVolumeCategoryAndMode((const __CFString *)[+[MXSessionManager sharedInstance] getUncustomizedCategory:a3], 0, &v30, 0);
        if (CMSessionMgrIsVolumeChangeTriggered(a2) && dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if ((a2 - 11) < 2) {
          uint64_t v15 = FigCFEqual();
        }
        else {
          uint64_t v15 = (a2 - 1) <= 1;
        }
        if (v30) {
          CFRelease(v30);
        }
        goto LABEL_58;
      }
      goto LABEL_52;
    }
    int v19 = CFArrayGetValueAtIndex(v30, 0);
    BOOL IsEndpointSelfOnlyLocalAirPlay = FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)v19);
    if (!a4 && IsEndpointSelfOnlyLocalAirPlay)
    {
      if (dword_1E9359ED0) {
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    BOOL IsClusterLocalEndpoint = FigRoutingManagerIsClusterLocalEndpoint((uint64_t)v19);
    if (a4 || !IsClusterLocalEndpoint)
    {
      if (a4) {
        goto LABEL_45;
      }
      if (!dword_1E9359ED0) {
        goto LABEL_42;
      }
    }
    else
    {
      if (FigRoutingManagerIsEndpointOfSubtype((uint64_t)v19))
      {
        if (dword_1E9359ED0) {
          goto LABEL_44;
        }
        goto LABEL_45;
      }
      if (!FigRoutingManagerIsEndpointOfSubtype((uint64_t)v19)) {
        goto LABEL_45;
      }
      if (!CMSMDeviceState_ItsAnAppleTV())
      {
        if (dword_1E9359ED0)
        {
LABEL_44:
          uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_45:
        int v22 = 0;
        goto LABEL_46;
      }
      if (!dword_1E9359ED0)
      {
LABEL_42:
        int v22 = 1;
        goto LABEL_46;
      }
    }
    uint64_t v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    int v22 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_46;
  }
  uint64_t v15 = 0;
  if (!a4 && Count >= 2)
  {
    if (FigRoutingManagerAreAllEndpointsBluetoothShareable(theArray[0]))
    {
      if (dword_1E9359ED0)
      {
        long long v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_49;
    }
    goto LABEL_52;
  }
LABEL_58:
  if (theArray[0]) {
    CFRelease(theArray[0]);
  }
  return v15;
}

uint64_t FigRoutingManagerContextUtilities_IsContextVideoAndIndependent(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v2 = 0;
    }
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    int v12 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    char v10 = 0;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    id v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigRoutingManagerContextUtilities_IsContextVideoAndIndependent_block_invoke;
    v6[3] = &unk_1E57C6158;
    void v6[6] = v2;
    v6[7] = v1;
    v6[4] = v11;
    v6[5] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsContextVideoAndIndependent", (uint64_t)"FigRoutingManagerContextUtilities.m", 4975, 0, 0, v4, (uint64_t)v6);
    uint64_t v1 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(v11, 8);
  }
  return v1;
}

void sub_194CFE074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void cmsUpdateAudioBehavior(void *a1)
{
  if (CMSMVAUtility_IsAdditiveRoutingEnabled() && [a1 isRoutedToOnDemandVAD])
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)CMSUtility_CopySessionAudioBehaviour(a1);
  [a1 audioBehaviour];
  if (FigCFEqual())
  {
    if (!v3) {
      return;
    }
    goto LABEL_14;
  }
  if (v3) {
    CFArrayRef Value = CFDictionaryGetValue(v3, @"AudioBehaviour_Destination");
  }
  else {
    CFArrayRef Value = 0;
  }
  [a1 setAudioBehaviour:v3];
  [a1 setAudioDestinationPriority:Value];
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v5 = MXGetNotificationSenderQueue();
  MXDispatchAsyncFunction((uint64_t)"cmsUpdateAudioBehavior", (uint64_t)"CMSessionManager.m", 7483, 0, 0, v5, (uint64_t)a1, (uint64_t)CMSMNotificationUtility_PostSessionAudioBehaviourDidChange_f);
  CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 0);
  if (v3)
  {
LABEL_14:
    CFRelease(v3);
  }
}

void *CMSUtility_CopySessionAudioBehaviour(void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    CFDictionaryRef v2 = -[MXSessionManager copyAudioBehaviorForCategory:mode:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "copyAudioBehaviorForCategory:mode:", [a1 audioCategory], objc_msgSend(a1, "audioMode"));
    if (v2)
    {
      CFDictionaryRef v3 = v2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v1 siriInputDeviceUUID])
      {
        CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v3);
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v4, 1, MEMORY[0x1E4F1D510]);
        [v1 siriInputDeviceUUID];
        VADNameforSiriEndpointID = CMSMUtility_GetVADNameforSiriEndpointID();
        if (VADNameforSiriEndpointID) {
          CFArrayInsertValueAtIndex(Mutable, 0, VADNameforSiriEndpointID);
        }
        CFDictionarySetValue(MutableCopy, @"AudioBehaviour_Destination", Mutable);
        if (MutableCopy)
        {
          uint64_t v1 = (void *)CFRetain(MutableCopy);
          if (!Mutable) {
            goto LABEL_10;
          }
        }
        else
        {
          uint64_t v1 = 0;
          if (!Mutable)
          {
LABEL_10:
            if (MutableCopy)
            {
              uint64_t v8 = MutableCopy;
LABEL_30:
              CFRelease(v8);
              goto LABEL_31;
            }
            goto LABEL_31;
          }
        }
        CFRelease(Mutable);
        goto LABEL_10;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        && FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1)
        && CMSUtility_PlaysToCarAltAudio(v1))
      {
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v3, @"AudioBehaviour_Destination");
        long long v11 = CFArrayCreateMutableCopy(v9, 0, Value);
        int v12 = v11;
        uint64_t v13 = @"VirtualAudioDevice_SystemRemote";
      }
      else
      {
        [v1 routingContextUUID];
        if (FigCFEqual())
        {
          CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(v3, @"AudioBehaviour_Destination");
          int v12 = CFArrayCreateMutableCopy(v14, 0, v15);
          if (!CMSMDeviceState_ItsAnAppleTV()
            || !FigRoutingContextUtilities_IsFollowingAnotherContext(qword_1E9359CA0))
          {
            CFArrayInsertValueAtIndex(v12, 0, @"VirtualAudioDevice_Music");
          }
          long long v16 = CFDictionaryCreateMutableCopy(v14, 0, v3);
          long long v17 = v16;
LABEL_25:
          CFDictionarySetValue(v16, @"AudioBehaviour_Destination", v12);
          if (v17)
          {
            uint64_t v1 = (void *)CFRetain(v17);
            if (!v12) {
              goto LABEL_28;
            }
          }
          else
          {
            uint64_t v1 = 0;
            if (!v12)
            {
LABEL_28:
              if (v17)
              {
                uint64_t v8 = v17;
                goto LABEL_30;
              }
LABEL_31:
              CFRelease(v3);
              return v1;
            }
          }
          CFRelease(v12);
          goto LABEL_28;
        }
        if (!FigRoutingManagerContextUtilities_IsContextVideoAndIndependent([v1 routingContextUUID]))
        {
          uint64_t v1 = (void *)CFRetain(v3);
          goto LABEL_31;
        }
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue(v3, @"AudioBehaviour_Destination");
        long long v11 = CFArrayCreateMutableCopy(v9, 0, v18);
        int v12 = v11;
        uint64_t v13 = @"VirtualAudioDevice_PerAppAirPlay";
      }
      CFArrayInsertValueAtIndex(v11, 0, v13);
      long long v16 = CFDictionaryCreateMutableCopy(v9, 0, v3);
      long long v17 = v16;
      goto LABEL_25;
    }
    return 0;
  }
  return v1;
}

uint64_t FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(uint64_t a1, int a2)
{
  CFArrayRef theArray = 0;
  if (a1)
  {
    if (FigRoutingManagerContextUtilities_CopyActivatedEndpoints(a1, (uint64_t)&theArray)) {
      goto LABEL_10;
    }
  }
  else if (FigRoutingManagerContextUtilities_CopyActivatedEndpointsForContextType(a2, (uint64_t)&theArray))
  {
    goto LABEL_10;
  }
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v3 = Count;
    CFIndex v4 = 0;
    while (1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)) {
        break;
      }
      if (v3 == ++v4) {
        goto LABEL_10;
      }
    }
    uint64_t v6 = 1;
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v6 = 0;
LABEL_11:
  if (theArray) {
    CFRelease(theArray);
  }
  return v6;
}

uint64_t FigRoutingManagerContextUtilities_CopyActivatedEndpoints(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    uint64_t v10 = 0;
    long long v11 = &v10;
    uint64_t v12 = 0x2020000000;
    int v13 = 0;
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyActivatedEndpoints_block_invoke;
    v9[3] = &unk_1E57C6180;
    if (!byte_1E9358E28) {
      uint64_t v5 = 0;
    }
    v9[4] = &v10;
    v9[5] = v5;
    void v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyActivatedEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 3568, 0, 0, v7, (uint64_t)v9);
    uint64_t v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_194CFE7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MXDispatchSync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7)
{
  CFAllocatorRef v14 = (void *)MEMORY[0x1997179E0]();
  CFArrayRef v15 = (void *)MEMORY[0x1997179E0]();
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == a6) {
      CreateACQDispatchID();
    }
  }
  long long v26 = v24;
  uint64_t v27 = v25;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == a6) {
      MEMORY[0x199715FA0](&v26, 0, "MXDispatchSync", a1, a2, a3, a4, a5);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MXDispatchSync_block_invoke;
  block[3] = &unk_1E57CAE88;
  long long v17 = v26;
  uint64_t v18 = v27;
  uint64_t v19 = a1;
  int v23 = a3;
  uint64_t v20 = a2;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  block[4] = a6;
  block[5] = a7;
  dispatch_sync(a6, block);
}

__CFArray *CMSMUtility_CopyCurrentRouteTypes()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  MEMORY[0x199716E90](gCMSM);
  if (dword_1E9359BC0)
  {
    unint64_t v1 = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, v1, (uint64_t)&v4);
      if (v4) {
        uint64_t v2 = v4;
      }
      else {
        uint64_t v2 = &stru_1EE5E8D28;
      }
      CFArrayAppendValue(Mutable, v2);
      ++v1;
    }
    while (v1 < dword_1E9359BC0);
  }
  MEMORY[0x199716EA0](gCMSM);
  return Mutable;
}

__n128 MXVW_GetCMSRouteInfoAt@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1 + 48 * a2;
  long long v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v4;
  __n128 result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a3 + 32) = result;
  return result;
}

uint64_t MXGetNotificationSenderQueue()
{
  if (MXGetNotificationSenderQueue_onceToken != -1) {
    dispatch_once(&MXGetNotificationSenderQueue_onceToken, &__block_literal_global_4_4);
  }
  return MXGetNotificationSenderQueue_notificationSenderQueue;
}

void MXDispatchAsyncFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7, uint64_t a8)
{
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  long long v16 = (void *)MEMORY[0x1997179E0]();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MXDispatchAsyncFunction_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = a8;
  block[5] = a7;
  dispatch_block_t v17 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  uint64_t v18 = (void *)MEMORY[0x1997179E0]();
  uint64_t v28 = 0;
  long long v27 = 0uLL;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == a6) {
      CreateACQDispatchID();
    }
  }
  long long v30 = v27;
  uint64_t v31 = v28;
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == a6) {
      MEMORY[0x199715FA0](&v30, 0, "MXDispatchAsyncFunction", a1, a2, a3, a4, a5);
    }
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __MXDispatchAsyncFunction_block_invoke_2;
  v19[3] = &unk_1E57CAE88;
  long long v20 = v30;
  uint64_t v21 = v31;
  uint64_t v22 = a1;
  int v26 = a3;
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v19[4] = a6;
  v19[5] = v17;
  dispatch_barrier_async(a6, v19);
}

uint64_t CMSUtility_UpdateRoutingContextForSession(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (CMSMDeviceState_IsHomePodHub()) {
    return 0;
  }
  if ([a1 routeSharingPolicy]) {
    return 0;
  }
  if ([a1 routingContextSetByClient])
  {
    [a1 routingContextUUID];
    if (FigCFEqual()) {
      return 0;
    }
  }
  [a1 routingContextUUID];
  if (FigCFEqual())
  {
    if (CMSUtility_IsLongFormVideoSession(a1)) {
      return 0;
    }
  }
  if (!CMSNP_IsCurrentNowPlayingSessionAirPlayingLongFormMedia()
    || CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(a1))
  {
    if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1))
    {
      if (FigGetCFPreferenceNumberWithDefault())
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
      [a1 routingContextUUID];
      if (!FigCFEqual())
      {
        [a1 setRoutingContextUUID:qword_1E9359CA0];
        [a1 updateRouteSharingPolicy:1 setByClient:0];
        if (dword_1E9359ED0)
        {
          uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_25;
      }
      return 0;
    }
    [a1 routingContextUUID];
    if (FigCFEqual()) {
      return 0;
    }
LABEL_24:
    objc_msgSend(a1, "setRoutingContextUUID:", qword_1E9359C88, v6, v7);
    [a1 updateRouteSharingPolicy:0 setByClient:0];
LABEL_25:
    cmsutility_handleRoutingContextChanged(a1);
    return 1;
  }
  [a1 routingContextUUID];
  uint64_t result = FigCFEqual();
  if (result)
  {
    if (CMSMDeviceState_ItsAHomePod()) {
      return 0;
    }
    if (dword_1E9359ED0)
    {
      long long v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t CMSMDeviceState_IsHomePodHub()
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __CMSMDeviceState_IsHomePodHub_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v2 = 0;
  if (CMSMDeviceState_IsHomePodHub_sOnce != -1) {
    dispatch_once(&CMSMDeviceState_IsHomePodHub_sOnce, block);
  }
  return 0;
}

void *CMSUtility_IsLongFormVideoSession(void *result)
{
  if (result)
  {
    unint64_t v1 = result;
    return (void *)([result routeSharingPolicy] == 3
                 || -[MXSessionManager isLongFormVideoApp:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isLongFormVideoApp:", [v1 displayID]));
  }
  return result;
}

uint64_t CMSMDeviceState_ItsAHomePod()
{
  return byte_1E9358937;
}

uint64_t FigRoutingManagerContextUtilities_GetContextType(uint64_t a1)
{
  if (!a1) {
    return 4294949876;
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    char v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    char v2 = 0;
  }
  v12[0] = 0;
  v12[1] = v12;
  void v12[2] = 0x2020000000;
  int v13 = 0;
  uint64_t v8 = 0;
  CFAllocatorRef v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  uint64_t v3 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v3 = 504;
  }
  long long v4 = *(NSObject **)v3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __FigRoutingManagerContextUtilities_GetContextType_block_invoke;
  v7[3] = &unk_1E57C6158;
  v7[6] = v2;
  v7[7] = a1;
  void v7[4] = v12;
  v7[5] = &v8;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetContextType", (uint64_t)"FigRoutingManagerContextUtilities.m", 3988, 0, 0, v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v12, 8);
  return v5;
}

void sub_194CFFE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyPickedEndpoints(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v10 = 0;
    int v11 = &v10;
    uint64_t v12 = 0x2020000000;
    int v13 = 0;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyPickedEndpoints_block_invoke;
    v9[3] = &unk_1E57C6180;
    v9[4] = &v10;
    v9[5] = v5;
    void v9[6] = a1;
    v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyPickedEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 2810, 0, 0, v7, (uint64_t)v9);
    uint64_t v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_194CFFFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSMDeviceState_ItsAnAppleTV()
{
  return byte_1E9358935;
}

BOOL CMSMUtility_IsPiPAllowedForCategory(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (FigCFEqual() || FigCFEqual() || FigCFEqual())
    {
      return 1;
    }
    else
    {
      return CMSMUtility_IsPlayAndRecordCategory(v1);
    }
  }
  return result;
}

void __MXDispatchAsyncFunction_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1997179E0]();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(unsigned int *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == v3) {
      MEMORY[0x199715FA0](a1 + 48, 1, "MXDispatchAsyncFunction_block_invoke_2", v4, v5, v6, v7, v8);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(unsigned int *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == v9) {
      MEMORY[0x199715FA0](a1 + 48, 2, "MXDispatchAsyncFunction_block_invoke_2", v10, v11, v12, v13, v14);
    }
  }
  CFArrayRef v15 = *(const void **)(a1 + 40);
  _Block_release(v15);
}

void sub_194D00290(void *a1, int a2)
{
  id v4 = objc_begin_catch(a1);
  if (a2 == 2) {
    objc_exception_throw(v4);
  }
  HandleDispatchBlockException(*(void *)(v2 + 72), *(void *)(v2 + 80), *(unsigned int *)(v2 + 104), *(void *)(v2 + 88), *(void *)(v2 + 96));
  __break(1u);
}

void sub_194D002BC(_Unwind_Exception *a1)
{
}

uint64_t CMSMVAUtility_WillSessionWithDescriptionRouteToOnDemandVADOnActivation(uint64_t a1, unsigned char *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", a1, 0);
    [v4 setObject:v5 forKey:0x1EE5EF648];
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"srdobolg";
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    int outData = 0;
    uint64_t PropertyData = AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8u, v4, &ioDataSize, &outData);
    if (!PropertyData) {
      *a2 = outData;
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954316;
  }
  return PropertyData;
}

uint64_t CMSMUtility_PhoneCallOrRingtoneExists()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if (([v5 isIDSMXCoreSession] & 1) == 0
          && [v5 isActive]
          && (([v5 hasPhoneCallBehavior] & 1) != 0 || CMSUtility_IsAudioCategoryRingtone(v5)))
        {
          uint64_t v6 = 1;
          goto LABEL_14;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_14:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMUtility_CopyActivePhoneCallInfo()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if ([v5 isActive]
          && [v5 hasPhoneCallBehavior]
          && ([v5 isIDSMXCoreSession] & 1) == 0)
        {
          id v7 = objc_alloc(MEMORY[0x1E4F1C9E8]);
          uint64_t v6 = objc_msgSend(v7, "initWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", objc_msgSend(v5, "clientPriority")), @"ClientPriority", 0);
          goto LABEL_13;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

void *CMSessionMgrFindVolumeButtonClient(unsigned int a1)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  if (CMSMUtility_IsSharePlayCapableCallSessionActive())
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v106 objects:v119 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v107;
      while (2)
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v107 != v5) {
            objc_enumerationMutation(v2);
          }
          id v7 = *(void **)(*((void *)&v106 + 1) + 8 * i);
          if ([v7 isActive]
            && CMSUtility_GetWantsToBeVolumeButtonClient(v7)
            && CMSUtility_IsSharePlayCapableMediaSession(v7))
          {
            uint64_t v8 = [NSString stringWithFormat:@"Volume button client is %@ for reason: SharePlay-capable media session", objc_msgSend(v7, "clientName")];
            goto LABEL_15;
          }
        }
        uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v106 objects:v119 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }
    uint64_t v8 = 0;
    id v7 = 0;
LABEL_15:
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    if (v7) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v9 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v10 = [(NSPointerArray *)v9 countByEnumeratingWithState:&v102 objects:v118 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v103;
    while (2)
    {
      for (uint64_t j = 0; j != v11; ++j)
      {
        if (*(void *)v103 != v12) {
          objc_enumerationMutation(v9);
        }
        id v7 = *(void **)(*((void *)&v102 + 1) + 8 * j);
        if ([v7 hasPhoneCallBehavior]
          && [v7 isActive]
          && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
        {
          uint64_t v8 = [NSString stringWithFormat:@"Volume button client is %@ for reason: phone call", objc_msgSend(v7, "clientName")];
          goto LABEL_28;
        }
      }
      uint64_t v11 = [(NSPointerArray *)v9 countByEnumeratingWithState:&v102 objects:v118 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }
  id v7 = 0;
LABEL_28:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (!v7)
  {
    unsigned int v69 = a1;
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    uint64_t v14 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v15 = [(NSPointerArray *)v14 countByEnumeratingWithState:&v98 objects:v117 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      id v7 = 0;
      dispatch_block_t v17 = 0;
      uint64_t v18 = *(void *)v99;
      while (2)
      {
        for (uint64_t k = 0; k != v16; ++k)
        {
          if (*(void *)v99 != v18) {
            objc_enumerationMutation(v14);
          }
          long long v20 = *(void **)(*((void *)&v98 + 1) + 8 * k);
          if ([v20 isActive]
            && [v20 isPlaying]
            && ([v20 doesntActuallyPlayAudio] & 1) == 0
            && CMSUtility_GetWantsToBeVolumeButtonClient(v20))
          {
            if (CMSUtility_IsSessionOnlyPlayingLocally(v20) && !CMSUtility_ShouldSilentMute(v20))
            {
              uint64_t v8 = [NSString stringWithFormat:@"Volume button client is %@ for reason: session only playing locally", objc_msgSend(v20, "clientName")];
              dispatch_block_t v17 = v20;
              goto LABEL_49;
            }
            if (!CMSMDeviceState_IsHomePodHub())
            {
              if (CMSUtility_ShouldSilentMute(v20))
              {
                id v7 = v20;
              }
              else
              {
                uint64_t v8 = [NSString stringWithFormat:@"Volume button client might be %@ for reason: session playing but not only locally", objc_msgSend(v20, "clientName")];
                dispatch_block_t v17 = v20;
              }
            }
          }
        }
        uint64_t v16 = [(NSPointerArray *)v14 countByEnumeratingWithState:&v98 objects:v117 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }
    else
    {
      id v7 = 0;
      dispatch_block_t v17 = 0;
    }
LABEL_49:
    unint64_t v21 = 0x1EB3B9000uLL;
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    if (!v17 && v7)
    {
      uint64_t v8 = [NSString stringWithFormat:@"Volume button client is %@ for reason: session playing but muted", objc_msgSend(v7, "clientName")];
LABEL_54:
      a1 = v69;
      goto LABEL_55;
    }
    if (v17)
    {
      id v7 = v17;
      goto LABEL_54;
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v27 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v28 = [(NSPointerArray *)v27 countByEnumeratingWithState:&v94 objects:v116 count:16];
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = *(void *)v95;
      a1 = v69;
      while (2)
      {
        for (uint64_t m = 0; m != v29; ++m)
        {
          if (*(void *)v95 != v30) {
            objc_enumerationMutation(v27);
          }
          id v7 = *(void **)(*((void *)&v94 + 1) + 8 * m);
          if (CMSUtility_GetIsActive(v7))
          {
            CMSUtility_GetAudioCategory(v7, v32);
            if (FigCFEqual())
            {
              CMSUtility_GetAudioMode(v7, v33);
              if (FigCFEqual())
              {
                uint64_t v8 = [NSString stringWithFormat:@"Volume button client is %@ for reason: Active EmergencyAlert~CustomVolume session", objc_msgSend(v7, "clientName")];
                goto LABEL_80;
              }
            }
          }
        }
        uint64_t v29 = [(NSPointerArray *)v27 countByEnumeratingWithState:&v94 objects:v116 count:16];
        if (v29) {
          continue;
        }
        break;
      }
      id v7 = 0;
LABEL_80:
      unint64_t v21 = 0x1EB3B9000;
    }
    else
    {
      id v7 = 0;
      a1 = v69;
    }
    objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListEndIteration");
    if (!v7)
    {
      objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListBeginIteration");
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v34 = objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionList");
      uint64_t v35 = [v34 countByEnumeratingWithState:&v90 objects:v115 count:16];
      if (v35)
      {
        uint64_t v36 = v35;
        uint64_t v37 = *(void *)v91;
        while (2)
        {
          for (uint64_t n = 0; n != v36; ++n)
          {
            if (*(void *)v91 != v37) {
              objc_enumerationMutation(v34);
            }
            id v7 = *(void **)(*((void *)&v90 + 1) + 8 * n);
            if ([v7 wantsVolumeChangesWhenPausedOrInactive])
            {
              uint64_t v8 = [NSString stringWithFormat:@"Volume button client is %@ for reason: wantsVolumeChangesWhenPausedOrInactive (i.e. a volume slider)", objc_msgSend(v7, "clientName")];
              goto LABEL_93;
            }
          }
          uint64_t v36 = [v34 countByEnumeratingWithState:&v90 objects:v115 count:16];
          if (v36) {
            continue;
          }
          break;
        }
      }
      id v7 = 0;
LABEL_93:
      objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListEndIteration");
      if (!v7)
      {
        objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListBeginIteration");
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        CFIndex v39 = objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionList");
        uint64_t v40 = [v39 countByEnumeratingWithState:&v86 objects:v114 count:16];
        if (v40)
        {
          uint64_t v41 = v40;
          uint64_t v42 = *(void *)v87;
          while (2)
          {
            for (iuint64_t i = 0; ii != v41; ++ii)
            {
              if (*(void *)v87 != v42) {
                objc_enumerationMutation(v39);
              }
              id v7 = *(void **)(*((void *)&v86 + 1) + 8 * ii);
              if ([v7 isActive]
                && [v7 wantsVolumeChangesWhenPaused]
                && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
              {
                uint64_t v8 = [NSString stringWithFormat:@"Volume button client is %@ for reason: wantsVolumeChangesWhenPaused (and session is active)", objc_msgSend(v7, "clientName")];
                goto LABEL_106;
              }
            }
            uint64_t v41 = [v39 countByEnumeratingWithState:&v86 objects:v114 count:16];
            if (v41) {
              continue;
            }
            break;
          }
        }
        id v7 = 0;
LABEL_106:
        objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListEndIteration");
        if (!v7)
        {
          int v44 = +[MXSystemController getPIDForAnyAppThatWantsVolumeChanges];
          if (!v44) {
            goto LABEL_166;
          }
          int v45 = v44;
          objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListBeginIteration");
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          uint64_t v46 = objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionList");
          uint64_t v47 = [v46 countByEnumeratingWithState:&v82 objects:v113 count:16];
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = *(void *)v83;
            while (2)
            {
              for (juint64_t j = 0; jj != v48; ++jj)
              {
                if (*(void *)v83 != v49) {
                  objc_enumerationMutation(v46);
                }
                id v7 = *(void **)(*((void *)&v82 + 1) + 8 * jj);
                if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == v45
                  && [v7 isActive]
                  && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
                {
                  uint64_t v8 = [NSString stringWithFormat:@"Volume button client is %@ for reason: appWantsVolumeChanges is true, and session is active", objc_msgSend(v7, "clientName")];
                  goto LABEL_120;
                }
              }
              uint64_t v48 = [v46 countByEnumeratingWithState:&v82 objects:v113 count:16];
              if (v48) {
                continue;
              }
              break;
            }
          }
          id v7 = 0;
LABEL_120:
          objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListEndIteration");
          if (!v7)
          {
            objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListBeginIteration");
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            AudioObjectPropertyAddress v51 = objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionList");
            uint64_t v52 = [v51 countByEnumeratingWithState:&v78 objects:v112 count:16];
            if (v52)
            {
              uint64_t v53 = v52;
              uint64_t v54 = *(void *)v79;
              while (2)
              {
                for (kuint64_t k = 0; kk != v53; ++kk)
                {
                  if (*(void *)v79 != v54) {
                    objc_enumerationMutation(v51);
                  }
                  id v7 = *(void **)(*((void *)&v78 + 1) + 8 * kk);
                  if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == v45
                    && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
                  {
                    uint64_t v8 = [NSString stringWithFormat:@"Volume button client is %@ for reason: appWantsVolumeChanges is true, and session is not active", objc_msgSend(v7, "clientName")];
                    goto LABEL_132;
                  }
                }
                uint64_t v53 = [v51 countByEnumeratingWithState:&v78 objects:v112 count:16];
                if (v53) {
                  continue;
                }
                break;
              }
            }
            id v7 = 0;
LABEL_132:
            objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListEndIteration");
            if (!v7)
            {
LABEL_166:
              if (CMSMDeviceState_DeviceIsLocked())
              {
                int v56 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID];
                if (!v56) {
                  return 0;
                }
                int v57 = v56;
                objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListBeginIteration");
                long long v76 = 0u;
                long long v77 = 0u;
                long long v74 = 0u;
                long long v75 = 0u;
                uint64_t v58 = objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionList");
                uint64_t v59 = [v58 countByEnumeratingWithState:&v74 objects:v111 count:16];
                if (v59)
                {
                  uint64_t v60 = v59;
                  uint64_t v61 = *(void *)v75;
                  while (2)
                  {
                    for (muint64_t m = 0; mm != v60; ++mm)
                    {
                      if (*(void *)v75 != v61) {
                        objc_enumerationMutation(v58);
                      }
                      id v7 = *(void **)(*((void *)&v74 + 1) + 8 * mm);
                      if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == v57
                        && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
                      {
                        uint64_t v68 = [NSString stringWithFormat:@"Volume button client is %@ for reason: nowPlayingApp and screen is locked", objc_msgSend(v7, "clientName")];
                        goto LABEL_162;
                      }
                    }
                    uint64_t v60 = [v58 countByEnumeratingWithState:&v74 objects:v111 count:16];
                    if (v60) {
                      continue;
                    }
                    break;
                  }
                }
              }
              else
              {
                objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListBeginIteration");
                long long v72 = 0u;
                long long v73 = 0u;
                long long v70 = 0u;
                long long v71 = 0u;
                __int16 v63 = objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionList");
                uint64_t v64 = [v63 countByEnumeratingWithState:&v70 objects:v110 count:16];
                if (v64)
                {
                  uint64_t v65 = v64;
                  uint64_t v66 = *(void *)v71;
                  while (2)
                  {
                    for (nuint64_t n = 0; nn != v65; ++nn)
                    {
                      if (*(void *)v71 != v66) {
                        objc_enumerationMutation(v63);
                      }
                      id v7 = *(void **)(*((void *)&v70 + 1) + 8 * nn);
                      if ((MX_FeatureFlags_IsAudiomxdEnabled()
                         || [v7 isAudioSession])
                        && [v7 isActive]
                        && ([v7 applicationState] == 8
                         || [v7 isTheAssistant])
                        && CMSUtility_GetWantsToBeVolumeButtonClient(v7))
                      {
                        uint64_t v68 = [NSString stringWithFormat:@"Volume button client is %@ for reason: VoiceAssistant OR session is active and app is in the foreground", objc_msgSend(v7, "clientName")];
LABEL_162:
                        uint64_t v8 = v68;
                        goto LABEL_163;
                      }
                    }
                    uint64_t v65 = [v63 countByEnumeratingWithState:&v70 objects:v110 count:16];
                    if (v65) {
                      continue;
                    }
                    break;
                  }
                }
              }
              id v7 = 0;
LABEL_163:
              objc_msgSend((id)objc_msgSend((id)(v21 + 3392), "sharedInstance"), "mxCoreSessionListEndIteration");
            }
          }
        }
      }
    }
  }
LABEL_55:
  if (v7) {
    BOOL v22 = v8 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  BOOL v24 = v22 || a1 > 0xE || ((1 << a1) & 0x5836) == 0;
  if (!v24 && dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v7;
}

uint64_t CMSMUtility_IsSharePlayCapableCallSessionActive()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!MX_FeatureFlags_IsSharePlayEnabled()) {
    return 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if CMSUtility_GetIsActive(v5) && ([v5 isSharePlayCapableCallSession])
        {
          uint64_t v6 = 1;
          goto LABEL_14;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_14:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSUtility_ShouldSilentMute(void *a1)
{
  if (CMSMUtility_GetNumberOfCurrentOutputPorts() != 1) {
    return 0;
  }
  CurrentOutputuint64_t PortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  uint64_t result = [+[MXSessionManager sharedInstance] isCurrentPortTypeMuteable:vaeGetPortTypeFromPortID(CurrentOutputPortAtIndex)];
  if (result)
  {
    uint64_t result = CMSUtility_IsMuteable((uint64_t)a1);
    if (result)
    {
      uint64_t result = [a1 isActive];
      if (result) {
        return HIBYTE(word_1E9359BD8) || CMSMDeviceState_RingerIsOn(1) == 0;
      }
    }
  }
  return result;
}

uint64_t CMSMUtility_GetNumberOfCurrentOutputPorts()
{
  return dword_1E9359BC0;
}

uint64_t cmsmGetCurrentVADForSystemSoundAudioCategory(void *a1, int a2)
{
  CFDictionaryRef v2 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(a1, a2);
  uint64_t CurrentSystemSoundVADForAudioBehaviour = cmsGetCurrentSystemSoundVADForAudioBehaviour();
  if (v2) {
    CFRelease(v2);
  }
  return CurrentSystemSoundVADForAudioBehaviour;
}

CFDictionaryRef cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(void *key, int a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)gSystemSoundAudioBehaviors;
  if (key)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundAudioBehaviors, key);
    if (Value) {
      goto LABEL_5;
    }
    CFDictionaryRef v4 = (const __CFDictionary *)gSystemSoundAudioBehaviors;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, @"Default");
  if (!Value) {
    return 0;
  }
LABEL_5:
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, Value);
  if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1))
  {
    CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"AudioBehaviour_Destination");
    if (CMSMDeviceState_ScreenIsBlanked()
      && !CMSMDeviceState_ScreenIsBlankedByProximitySensor()
      && v8)
    {
      v20.length = CFArrayGetCount(v8);
      v20.id location = 0;
      if (CFArrayContainsValue(v8, v20, @"VirtualAudioDevice_SystemRemote"))
      {
        CFArrayRef v9 = cmsmCopyDestinationsWithoutElement(v8, 0x1EE5EBF68);
        if (v9)
        {
          CFArrayRef v10 = v9;
          CFDictionarySetValue(MutableCopy, @"AudioBehaviour_Destination", v9);
          CFRelease(v10);
        }
      }
      goto LABEL_13;
    }
    if (v8)
    {
LABEL_13:
      if (FigCFEqual() && CMSMUtility_IsPhoneCallActive())
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFArrayRef v12 = CFArrayCreateMutableCopy(v6, 0, v8);
        v21.length = CFArrayGetCount(v12);
        v21.id location = 0;
        FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v12, v21, @"VirtualAudioDevice_Default");
        if (FirstIndexOfValue != -1)
        {
          CFArrayRemoveValueAtIndex(v12, FirstIndexOfValue);
          CFArrayInsertValueAtIndex(v12, 0, @"VirtualAudioDevice_Default");
        }
        FigCFDictionarySetValue();
        if (v12) {
          CFRelease(v12);
        }
      }
    }
  }
  if (MX_FeatureFlags_IsOnenessEnabled()
    && !MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled()
    && vaemContinuityScreenOutputIsConnected())
  {
    if (a2)
    {
      if (dword_1E9359ED0)
      {
        uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (dword_1E9359ED0)
      {
        uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"AudioBehaviour_Destination");
      CFArrayRef v18 = cmsmCopyDestinationsWithoutElement(v17, 0x1EE5EBF68);
      if (v18)
      {
        CFArrayRef v19 = v18;
        CFDictionarySetValue(MutableCopy, @"AudioBehaviour_Destination", v18);
        CFRelease(v19);
      }
    }
  }
  return MutableCopy;
}

uint64_t vaemContinuityScreenOutputIsConnected()
{
  uint64_t result = MX_FeatureFlags_IsOnenessEnabled();
  if (result) {
    return vaemGetVADPortIDFromVADPortType(1885565807) != 0;
  }
  return result;
}

BOOL vaemIsContinuityScreenOutputPortPresentInConnectedOutputPorts()
{
  if (MX_FeatureFlags_IsOnenessEnabled()) {
    BOOL v0 = dword_1E9358BC8 == 0;
  }
  else {
    BOOL v0 = 1;
  }
  return !v0;
}

uint64_t MX_FeatureFlags_IsOnenessEnabled()
{
  if (MX_FeatureFlags_IsOnenessEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsOnenessEnabled_onceToken, &__block_literal_global_114);
  }
  return MX_FeatureFlags_IsOnenessEnabled_sIsOnenessEnabled;
}

CFArrayRef vaemGetVADPortIDFromVADPortType(int a1)
{
  unsigned int valuePtr = 0;
  int inQualifierData = a1;
  CFArrayRef result = (const __CFArray *)vaemCopyConnectedPortsForPortTypeAndScope(&inQualifierData, 0x676C6F62u);
  if (result)
  {
    CFArrayRef v2 = result;
    if (CFArrayGetCount(result) >= 1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v2, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    }
    CFRelease(v2);
    return (const __CFArray *)valuePtr;
  }
  return result;
}

CFTypeRef vaemCopyConnectedPortsForPortTypeAndScope(void *inQualifierData, AudioObjectPropertyScope a2)
{
  inAddress.AudioObjectPropertySelector mSelector = 1886549107;
  inAddress.mScope = a2;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  CFTypeRef outData = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 4 * (inQualifierData != 0), inQualifierData, &ioDataSize, &outData);
  CFTypeRef v3 = 0;
  if (PropertyData) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = outData == 0;
  }
  if (!v4)
  {
    CFTypeID v5 = CFGetTypeID(outData);
    CFTypeID TypeID = CFArrayGetTypeID();
    CFTypeRef v7 = outData;
    if (v5 == TypeID)
    {
      CFTypeRef v8 = CFRetain(outData);
      CFTypeRef v7 = outData;
      CFTypeRef v3 = v8;
      if (!outData) {
        return v3;
      }
      goto LABEL_9;
    }
    CFTypeRef v8 = 0;
    CFTypeRef v3 = 0;
    if (outData)
    {
LABEL_9:
      CFRelease(v7);
      return v8;
    }
  }
  return v3;
}

uint64_t MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled()
{
  if (MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled_onceToken, &__block_literal_global_117);
  }
  return MX_FeatureFlags_IsSystemSoundsMutingBehaviorInOnenessEnabled_sIsSystemSoundsMutingBehaviorInOnenessEnabled;
}

uint64_t CMSUtility_IsMuteable(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    if (-[MXSessionManager isAudioCategoryMuteable:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAudioCategoryMuteable:", [(id)result audioCategory]))
    {
      return 1;
    }
    else
    {
      return [v1 mutesAudioBasedOnRingerSwitchState];
    }
  }
  return result;
}

BOOL CMSUtility_IsSessionOnlyPlayingLocally(void *a1)
{
  if (CMSMDeviceState_IsHomePodHub())
  {
    if ([a1 shadowingAudioSessionID]) {
      return 0;
    }
    if (FigRoutingManagerContextUtilities_IsOnlyRoutedToSelf([a1 routingContextUUID])) {
      return 1;
    }
    int IsOnlyRoutedToLocalAirPlayEndpoint = FigRoutingManagerContextUtilities_IsOnlyRoutedToLocalAirPlayEndpoint([a1 routingContextUUID]);
  }
  else
  {
    int IsOnlyRoutedToLocalAirPlayEndpoint = CMSUtility_IsPlayingToDefaultVAD(a1);
  }
  return IsOnlyRoutedToLocalAirPlayEndpoint != 0;
}

void *CMSUtility_GetWantsToBeVolumeButtonClient(void *result)
{
  if (result) {
    return (void *)[result wantsToBeVolumeButtonClient];
  }
  return result;
}

BOOL CMSMDeviceState_DeviceIsLocked()
{
  MEMORY[0x199716E90](qword_1E93589D0);
  uint64_t v0 = byte_1E935893C;
  int v1 = byte_1E9358944;
  MEMORY[0x199716EA0](qword_1E93589D0);
  if (!v1) {
    return sMKBGetLockStatus && sMKBGetLockStatus(0) != 0;
  }
  return v0;
}

id CMSMUtility_CreateAudioQueueOptionsDictionary(void *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  float FadeInDurationForPlaybackHandoff = 0.0;
  if (MX_FeatureFlags_IsHandoffEnabled() && CMSUtility_IsAllowedToFadeInTemporarily(a1)) {
    float FadeInDurationForPlaybackHandoff = CMSMUtility_GetFadeInDurationForPlaybackHandoff();
  }
  if ([a1 isDucked] && (objc_msgSend(a1, "duckedOnVAD") & 1) == 0)
  {
    [a1 audioQueueDuckVolume];
    float v4 = v14;
    [a1 audioQueueFadeDuration];
    float FadeInDurationForPlaybackHandoff = v15;
    float v5 = 0.0;
  }
  else
  {
    float v4 = 1.0;
    float v5 = 0.0;
    if (CMSUtility_IsAudioCategoryRingtone(a1))
    {
      if (vaemStarkAudioPortIsCurrentlyActive())
      {
        id v6 = CMSMUtility_CopyCarPlaySession();
        if (v6)
        {

          if (MX_FeatureFlags_IsCarPlayRingtoneFadeInEnabled())
          {
            FigGetCFPreferenceDoubleWithDefault();
            *(float *)&double v7 = v7;
            float FadeInDurationForPlaybackHandoff = 10.0;
            if (*(float *)&v7 < 10.0)
            {
              FigGetCFPreferenceDoubleWithDefault();
              float FadeInDurationForPlaybackHandoff = v8;
            }
            FigGetCFPreferenceDoubleWithDefault();
            *(float *)&double v9 = v9;
            float v5 = 1.0;
            if (*(float *)&v9 < 1.0)
            {
              FigGetCFPreferenceDoubleWithDefault();
              float v5 = v10;
            }
            id v11 = objc_alloc(MEMORY[0x1E4F28ED0]);
            *(float *)&double v12 = v5;
            uint64_t v13 = (void *)[v11 initWithFloat:v12];
            [v2 setObject:v13 forKey:@"AsyncFadeInitialVolume"];
          }
        }
      }
    }
  }
  id v16 = objc_alloc(MEMORY[0x1E4F28ED0]);
  *(float *)&double v17 = FadeInDurationForPlaybackHandoff;
  CFArrayRef v18 = (void *)[v16 initWithFloat:v17];
  id v19 = objc_alloc(MEMORY[0x1E4F28ED0]);
  *(float *)&double v20 = v4;
  CFRange v21 = (void *)[v19 initWithFloat:v20];
  [v2 setObject:v18 forKey:@"FadeDuration"];
  [v2 setObject:v21 forKey:@"DuckVolume"];
  int v22 = [a1 silentMuted];
  uint64_t v23 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28ED0]), "initWithBool:", objc_msgSend(a1, "silentMuted"));
  [v2 setObject:v23 forKey:@"IsSilentMuted"];

  if (v4 != 1.0 || FadeInDurationForPlaybackHandoff != 0.0 || (v5 != 0.0 ? (int v24 = 1) : (int v24 = v22), v24 == 1))
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v2;
}

void *CMSUtility_IsAudioCategoryRingtone(void *result)
{
  if (result)
  {
    [result audioCategory];
    return (void *)FigCFEqual();
  }
  return result;
}

NSString *CMSUtility_IsAllowedToFadeInTemporarily(void *a1)
{
  int IsHandoffEnabled = MX_FeatureFlags_IsHandoffEnabled();
  CFArrayRef result = 0;
  if (a1)
  {
    if (IsHandoffEnabled)
    {
      CFArrayRef result = (NSString *)[a1 displayID];
      if (result)
      {
        CFArrayRef result = [+[MXSessionManager sharedInstance] appAllowedToFadeInTemporarily];
        if (result)
        {
          [a1 displayID];
          [+[MXSessionManager sharedInstance] appAllowedToFadeInTemporarily];
          CFArrayRef result = (NSString *)FigCFEqual();
          if (result)
          {
            [a1 audioCategory];
            return (NSString *)(FigCFEqual() != 0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t MX_FeatureFlags_IsHandoffEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t _MXSessionSetProperty(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v14 = 0;
  float v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  if (a1)
  {
    double v7 = (void *)MEMORY[0x1997179E0](v6);
    if ([a1 isMemberOfClass:objc_opt_class()])
    {
      double v8 = [+[MXSessionManagerSidekick sharedInstance] serialQueue];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = ___MXSessionSetProperty_block_invoke;
      v13[3] = &unk_1E57C6180;
      v13[4] = &v14;
      v13[5] = a1;
      v13[6] = a2;
      v13[7] = a3;
      MXDispatchAsyncAndWait((uint64_t)"_MXSessionSetProperty", (uint64_t)"MXSession_CInterfaceCommon.m", 381, 0, 0, v8, (uint64_t)v13);
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      int v10 = [a1 _setPropertyForKey:a2 value:a3];
      *((_DWORD *)v15 + 6) = v10;
      [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"_MXSessionSetProperty" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:a2];
    }
    uint64_t v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v11;
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_194D0314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t routingContextResilientRemote_CopyPredictedSelectedRouteDescriptor(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __routingContextResilientRemote_CopyPredictedSelectedRouteDescriptor_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextRemoteXPC_CopySelectedBufferedEndpoint(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, v4);
  if (!ObjectID)
  {
    uint64_t ObjectID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      FigXPCMessageSetCFString();
      uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!ObjectID) {
        uint64_t ObjectID = FigEndpointXPCRemoteRetainCopiedEndpointFromReply();
      }
    }
  }
  uint64_t v2 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t FigRoutingContextResilientRemoteCopySystemMusicContext(const void *a1, const void *a2, void *a3)
{
  Current = FigRemoteRoutingContextFactoryGetCurrent();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextResilientRemoteCopySystemMusicContext_block_invoke;
  v9[3] = &unk_1E57CA080;
  v9[4] = Current;
  v9[5] = a1;
  void v9[6] = a2;
  v8[0] = (void (*)(void))MEMORY[0x1E4F143A8];
  v8[1] = (void (*)(void))3221225472;
  v8[2] = __FigRoutingContextResilientRemoteCopySystemMusicContext_block_invoke_2;
  v8[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
  os_log_type_t v8[4] = (void (*)(void))a1;
  v8[5] = (void (*)(void))a2;
  return FigRoutingContextResilientRemoteCreate(v9, v8, a3);
}

uint64_t FigRoutingContextResilientRemoteCopyContextForUUID(const __CFAllocator *a1, CFDictionaryRef theDict, void *a3)
{
  CFTypeRef v20 = 0;
  int valuePtr = 0;
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(a1, 0, theDict);
  Current = FigRemoteRoutingContextFactoryGetCurrent();
  CFDictionaryRef Value = CFDictionaryGetValue(MutableCopy, @"contextType");
  id v19 = Value;
  if (Value)
  {
    CFNumberRef v8 = (const __CFNumber *)Value;
    CFRetain(Value);
    goto LABEL_3;
  }
  uint64_t v9 = [(FigRemoteRoutingContextFactory *)Current copyContextForUUIDWithAllocator:a1 options:MutableCopy context:&v20];
  if (v9)
  {
LABEL_9:
    uint64_t v10 = v9;
    goto LABEL_19;
  }
  uint64_t v10 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, __CFString *, void, const void **))(v12 + 48);
    if (v13)
    {
      uint64_t v9 = v13(v10, @"contextType", *MEMORY[0x1E4F1CF80], &v19);
      if (!v9)
      {
        CFDictionarySetValue(MutableCopy, @"contextType", v19);
        CFNumberRef v8 = (const __CFNumber *)v19;
LABEL_3:
        if (CFNumberGetValue(v8, kCFNumberIntType, &valuePtr))
        {
          if (a1) {
            CFRetain(a1);
          }
          if (MutableCopy) {
            CFRetain(MutableCopy);
          }
          v16[0] = MEMORY[0x1E4F143A8];
          v16[1] = 3221225472;
          v16[2] = __FigRoutingContextResilientRemoteCopyContextForUUID_block_invoke;
          v16[3] = &unk_1E57CA0A8;
          v16[5] = a1;
          v16[6] = MutableCopy;
          int v17 = valuePtr;
          v16[4] = Current;
          v15[0] = (void (*)(void))MEMORY[0x1E4F143A8];
          v15[1] = (void (*)(void))3221225472;
          v15[2] = __FigRoutingContextResilientRemoteCopyContextForUUID_block_invoke_2;
          v15[3] = (void (*)(void))&__block_descriptor_48_e5_v8__0l;
          v15[4] = (void (*)(void))a1;
          v15[5] = (void (*)(void))MutableCopy;
          uint64_t v9 = FigRoutingContextResilientRemoteCreate(v16, v15, a3);
        }
        else
        {
          uint64_t v9 = FigSignalErrorAt();
        }
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    uint64_t v10 = 4294954514;
  }
LABEL_19:
  if (v19) {
    CFRelease(v19);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v10;
}

uint64_t FigRoutingContextRemoteCopyContextForUUID(uint64_t a1, CFDictionaryRef theDict, void *a3)
{
  uint64_t v17 = 0;
  CFArrayRef v18 = &v17;
  uint64_t v19 = 0x2020000000;
  int v20 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  if (a3 && theDict)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"contextUUID");
    if (Value)
    {
      int v7 = routingContextRemoteXPC_EnsureClientEstablished();
      *((_DWORD *)v18 + 6) = v7;
      if (!v7)
      {
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3221225472;
        void v12[2] = __FigRoutingContextRemoteCopyContextForUUID_block_invoke;
        void v12[3] = &unk_1E57C6130;
        void v12[4] = &v13;
        v12[5] = &v17;
        v12[6] = Value;
        v12[7] = a1;
        v12[8] = theDict;
        MXDispatchSync((uint64_t)"FigRoutingContextRemoteCopyContextForUUID", (uint64_t)"FigRoutingContextRemoteXPC.m", 2187, 0, 0, gFigRoutingContextRemoteObject_1, (uint64_t)v12);
        CFNumberRef v8 = v14;
        *a3 = v14[3];
        v8[3] = 0;
      }
    }
    else
    {
      *((_DWORD *)v18 + 6) = -12020;
    }
  }
  else
  {
    int v20 = -12020;
  }
  uint64_t v9 = (const void *)v14[3];
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v10;
}

void sub_194D03784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t routingContext_create(uint64_t a1, const __CFDictionary *a2, int a3, CFTypeRef *a4)
{
  xpc_object_t v16 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  if (!a4)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_18:
    uint64_t v13 = v8;
    goto LABEL_14;
  }
  uint64_t v8 = routingContextRemoteXPC_EnsureClientEstablished();
  if (v8) {
    goto LABEL_18;
  }
  if (a2 && CFDictionaryContainsKey(a2, @"contextUUID"))
  {
    BOOL v9 = 0;
    int v10 = 1;
  }
  else
  {
    int v10 = 0;
    BOOL v9 = a3 != 0;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (v8) {
    goto LABEL_18;
  }
  xpc_dictionary_set_uint64(xdict, (const char *)kFigRoutingContextXPCMsgParam_ContextType, a1);
  FigXPCMessageSetCFDictionary();
  uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v8) {
    goto LABEL_18;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(v16, (const char *)*MEMORY[0x1E4F20280]);
  if (uint64)
  {
    uint64_t v12 = uint64;
    if ((v10 | v9) != 1 || (uint64_t v8 = FigXPCRemoteClientRetainCopiedObject(), !v8))
    {
      uint64_t v8 = remoteXPCRoutingContext_CreateInternal(v12, &cf);
      if (!v8)
      {
        uint64_t v13 = 0;
        *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 80) = a1;
        *a4 = cf;
        CFTypeRef cf = 0;
        goto LABEL_14;
      }
    }
    goto LABEL_18;
  }
  uint64_t v13 = 4294955274;
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t routingContext_create_0(uint64_t a1, int a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (a2 == 5 && !CFPreferenceNumberWithDefault)
  {
    uint64_t v8 = routingContext_copySystemContext(1u, &cf);
    if (!a4) {
      goto LABEL_7;
    }
LABEL_4:
    if (!v8)
    {
      *a4 = cf;
      return v8;
    }
    goto LABEL_7;
  }
  FigRoutingContextGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8) {
    goto LABEL_7;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = FigRoutingManagerRegisterAndCopyContext((uint64_t)cf, a3, a2, (CFStringRef *)(DerivedStorage + 8));
  if (!*(void *)(DerivedStorage + 8))
  {
    uint64_t v8 = 4294955275;
    goto LABEL_7;
  }
  uint64_t v8 = v11;
  if (!v11)
  {
    *(_DWORD *)uint64_t DerivedStorage = a2;
    if (a4) {
      goto LABEL_4;
    }
  }
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t routingContextRemoteXPC_EnsureClientEstablished()
{
  if (routingContextRemoteXPC_EnsureClientEstablished_onceToken != -1) {
    dispatch_once(&routingContextRemoteXPC_EnsureClientEstablished_onceToken, &__block_literal_global_44);
  }
  MEMORY[0x199716EE0](routingContextRemoteXPC_EnsureClientEstablished_sFigRoutingContextRemoteClientMutex);
  if (!gFigRoutingContextRemoteClient)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"RoutingContext_ServerConnectionDied");
    routingContextRemoteXPC_EnsureClientEstablished_err = FigXPCRemoteClientCreate();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  MEMORY[0x199716EF0](routingContextRemoteXPC_EnsureClientEstablished_sFigRoutingContextRemoteClientMutex);
  return routingContextRemoteXPC_EnsureClientEstablished_err;
}

uint64_t remoteXPCRoutingContext_CreateInternal(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  memset(&v18, 0, sizeof(v18));
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigRoutingContextGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (!v5)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    v18.versiouint64_t n = 0;
    v18.retaiuint64_t n = (CFDictionaryRetainCallBack)remoteXPCRoutingContext_cloneCompletionCallback;
    v18.copyDescriptiouint64_t n = 0;
    v18.equal = 0;
    v18.release = (CFDictionaryReleaseCallBack)remoteXPCRoutingContext_freeCompletionCallback;
    CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v4, 0, 0, &v18);
    DerivedStorage[3] = v7;
    if (v7)
    {
      uint64_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v9 = dispatch_queue_create("com.apple.coremedia.remoteRoutingContext.completioncallbacks", v8);
      DerivedStorage[2] = v9;
      if (v9)
      {
        DerivedStorage[4] = 1;
        int v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
        dispatch_queue_t v11 = dispatch_queue_create("com.apple.coremedia.remoteRoutingContext.commChannels", v10);
        DerivedStorage[5] = v11;
        if (v11)
        {
          uint64_t v12 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
          dispatch_queue_t v13 = dispatch_queue_create("com.apple.coremedia.remoteRoutingContext.notification", v12);
          DerivedStorage[6] = v13;
          if (v13)
          {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
            DerivedStorage[7] = Mutable;
            if (Mutable)
            {
              CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              DerivedStorage[8] = v15;
              if (v15)
              {
                DerivedStorage[1] = a1;
                FigXPCRemoteClientAssociateObject();
                uint64_t v16 = 0;
                *a2 = cf;
                return v16;
              }
            }
          }
        }
      }
    }
    uint64_t v5 = FigSignalErrorAt();
  }
  uint64_t v16 = v5;
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

uint64_t FigRoutingContextGetClassID()
{
  if (FigRoutingContextGetClassID_sRegisterFigRoutingContextTypeOnce != -1) {
    dispatch_once(&FigRoutingContextGetClassID_sRegisterFigRoutingContextTypeOnce, &__block_literal_global_11);
  }
  return sFigRoutingContextClassID;
}

uint64_t FigRoutingContextResilientRemoteCreate(void *a1, void (**a2)(void), void *a3)
{
  FigRoutingContextGetClassID();
  uint64_t started = CMDerivedObjectCreate();
  if (started) {
    goto LABEL_28;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = [a1 copy];
  *uint64_t DerivedStorage = v7;
  if (!v7)
  {
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v8 = v7;
  int v9 = 5;
  CFTypeRef cf = 0;
  while (1)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(v8 + 16))(v8, &cf);
    uint64_t v11 = v10;
    if ((int)v10 > -12027) {
      break;
    }
    if (v10 != -16155 && v10 != -16152) {
      goto LABEL_17;
    }
LABEL_12:
    if (!--v9) {
      goto LABEL_17;
    }
  }
  if (v10)
  {
    if (v10 != -12026) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  CFTypeRef v13 = cf;
  if (cf) {
    CFTypeRef v13 = CFRetain(cf);
  }
  DerivedStorage[3] = v13;
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (!v11)
  {
    DerivedStorage[2] = FigSimpleMutexCreate();
    if (!DerivedStorage[3]) {
      goto LABEL_27;
    }
    uint64_t v14 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v15 = dispatch_queue_create("com.apple.coremedia.routing-context.resilient-remote.notifications", v14);
    DerivedStorage[4] = v15;
    if (!v15) {
      goto LABEL_27;
    }
    uint64_t v16 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v17 = dispatch_queue_create("com.apple.coremedia.routing-context.remote-replacement", v16);
    DerivedStorage[5] = v17;
    if (!v17) {
      goto LABEL_27;
    }
    uint64_t started = routingContextResilientRemote_startObservingRemoteContext();
    if (!started)
    {
      if (a3)
      {
        *a3 = 0;
        uint64_t v11 = 0;
        DerivedStorage[1] = [a2 copy];
        return v11;
      }
LABEL_27:
      uint64_t started = FigSignalErrorAt();
    }
LABEL_28:
    uint64_t v11 = started;
  }
  if (a2 && v11) {
    a2[2](a2);
  }
  return v11;
}

uint64_t routingContextResilientRemote_startObservingRemoteContext()
{
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v0 = 0;
  while (1)
  {
    uint64_t result = FigNotificationCenterAddWeakListener();
    if (result) {
      break;
    }
    v0 += 8;
    if (v0 == 24)
    {
      uint64_t v2 = 0;
      while (1)
      {
        uint64_t result = FigNotificationCenterAddWeakListener();
        if (result) {
          break;
        }
        v2 += 8;
        if (v2 == 48)
        {
          return FigNotificationCenterAddWeakListener();
        }
      }
      return result;
    }
  }
  return result;
}

FigRemoteRoutingContextFactory *FigRemoteRoutingContextFactoryGetCurrent()
{
  uint64_t v0 = objc_alloc_init(FigRemoteRoutingContextFactory);
  uint64_t result = (FigRemoteRoutingContextFactory *)dispatch_get_specific(@"kFigRoutingSessionResilientRemoteCurrentRemoteRoutingContextFactoryKey");
  if (!result) {
    return v0;
  }
  return result;
}

uint64_t __FigRoutingContextResilientRemoteCopyContextForUUID_block_invoke(uint64_t a1, uint64_t a2)
{
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)(a1 + 40), 0, *(CFDictionaryRef *)(a1 + 48));
  CFDictionaryRemoveValue(MutableCopy, @"contextUUID");
  switch(*(_DWORD *)(a1 + 56))
  {
    case 1:
      uint64_t v5 = [*(id *)(a1 + 32) copySystemAudioContextWithAllocator:*(void *)(a1 + 40) options:MutableCopy context:a2];
      break;
    case 2:
      uint64_t v5 = [*(id *)(a1 + 32) copySystemMirroringContextWithAllocator:*(void *)(a1 + 40) options:MutableCopy context:a2];
      break;
    case 3:
      uint64_t v5 = [*(id *)(a1 + 32) copySystemMusicContextWithAllocator:*(void *)(a1 + 40) options:MutableCopy context:a2];
      break;
    case 4:
      uint64_t v5 = [*(id *)(a1 + 32) createAudioContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
      break;
    case 5:
      uint64_t v5 = [*(id *)(a1 + 32) createVideoContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
      break;
    case 6:
      uint64_t v5 = [*(id *)(a1 + 32) createPerAppSecondDisplayContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
      break;
    case 0xC:
      uint64_t v5 = [*(id *)(a1 + 32) copySidePlayContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
      break;
    default:
      uint64_t v5 = [*(id *)(a1 + 32) copyContextForUUIDWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
      break;
  }
  uint64_t v6 = v5;
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v6;
}

uint64_t FigRoutingContextRemoteCopySystemAudioContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(1uLL, a2, 1, a3);
}

uint64_t __FigRoutingContextResilientRemoteCopySystemMusicContext_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) copySystemMusicContextWithAllocator:*(void *)(a1 + 40) options:*(void *)(a1 + 48) context:a2];
}

uint64_t FigRoutingContextRemoteCopySystemMusicContext(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  return routingContext_create(3uLL, a2, 1, a3);
}

uint64_t routingContextResilientRemote_CopySelectedRouteDescriptors(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __routingContextResilientRemote_CopySelectedRouteDescriptors_block_invoke;
  v3[3] = &__block_descriptor_40_e34_i16__0__OpaqueFigRoutingContext__8l;
  void v3[4] = a2;
  return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v3);
}

uint64_t routingContextRemoteXPC_CopySelectedRouteDescriptors(uint64_t a1, void *a2)
{
  memset(v6, 0, sizeof(v6));
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, v6);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCMessageCopyCFArray();
    *a2 = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t singletonVolumeController_CanUseForRoutingContext(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteRoutingContext(a2);
  uint64_t v6 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  if (!v6)
  {
    CFTypeRef v7 = cf;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(CFTypeRef, const void *, uint64_t))(v9 + 8);
    if (!v10)
    {
      uint64_t v11 = 4294954514;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v6 = v10(v7, v5, a3);
  }
  uint64_t v11 = v6;
  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t FigVolumeControllerCopySharedControllerRemote(CFTypeRef *a1)
{
  CFTypeRef cf = 0;
  if (FigVolumeControllerCopySharedControllerRemote_sInitSingletonOnce != -1)
  {
    dispatch_once(&FigVolumeControllerCopySharedControllerRemote_sInitSingletonOnce, &__block_literal_global_34);
    if (a1) {
      goto LABEL_3;
    }
LABEL_12:
    uint64_t v2 = 4294949706;
    goto LABEL_8;
  }
  if (!a1) {
    goto LABEL_12;
  }
LABEL_3:
  if (volumeControllerRemote_ensureClientEstablished_onceToken != -1) {
    dispatch_once(&volumeControllerRemote_ensureClientEstablished_onceToken, &__block_literal_global_6_1);
  }
  uint64_t v2 = volumeControllerRemote_ensureClientEstablished_err;
  if (!volumeControllerRemote_ensureClientEstablished_err)
  {
    uint64_t v2 = singletonVolumeController_copyRemoteVolumeController(gSingletonVolumeController, &cf);
    if (!v2) {
      *a1 = CFRetain((CFTypeRef)gSingletonVolumeController);
    }
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  return v2;
}

uint64_t singletonVolumeController_GetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
LABEL_7:
    uint64_t v10 = v5;
    if (!v6) {
      return v10;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v8 + 160);
  if (v9)
  {
    uint64_t v5 = v9(v6, a2, a3);
    goto LABEL_7;
  }
  uint64_t v10 = 4294954514;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
  return v10;
}

uint64_t singletonVolumeController_GetVolumeControlTypeOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = singletonVolumeController_copyRemoteVolumeController(a1, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
LABEL_7:
    uint64_t v10 = v5;
    if (!v6) {
      return v10;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v8 + 88);
  if (v9)
  {
    uint64_t v5 = v9(v6, a2, a3);
    goto LABEL_7;
  }
  uint64_t v10 = 4294954514;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
  return v10;
}

uint64_t singletonVolumeController_copyRemoteVolumeController(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v11 = 0;
  uint64_t v5 = singletonVolumeController_copyCachedRemoteVolumeController(a1, &v11);
  if (v5)
  {
    uint64_t v6 = v5;
    goto LABEL_22;
  }
  if (v11)
  {
LABEL_3:
    uint64_t v6 = 0;
    *a2 = v11;
    return v6;
  }
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 8));
  uint64_t v6 = singletonVolumeController_copyCachedRemoteVolumeController(a1, &v11);
  if (!v6 && !v11)
  {
    xpc_object_t xdict = 0;
    uint64_t v14 = 0;
    CFTypeRef cf = 0;
    if (volumeControllerRemote_ensureClientEstablished_onceToken != -1) {
      dispatch_once(&volumeControllerRemote_ensureClientEstablished_onceToken, &__block_literal_global_6_1);
    }
    uint64_t v6 = volumeControllerRemote_ensureClientEstablished_err;
    if (!volumeControllerRemote_ensureClientEstablished_err)
    {
      uint64_t v8 = FigXPCCreateBasicMessage();
      if (v8
        || (uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v8)
        || (uint64_t uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]),
            uint64_t v8 = FigXPCRemoteClientRetainCopiedObject(),
            v8))
      {
        uint64_t v6 = v8;
      }
      else
      {
        CFTypeRef v10 = cf;
        if (cf)
        {
LABEL_16:
          uint64_t v6 = 0;
          CFTypeRef cf = 0;
LABEL_17:
          FigXPCRelease();
          FigXPCRelease();
          if (cf) {
            CFRelease(cf);
          }
          FigXPCRemoteClientKillServerOnTimeout();
          if (!v6)
          {
            singletonVolumeController_setCachedRemoteVolumController(a1, v10);
            CFTypeRef v11 = v10;
            MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
            goto LABEL_3;
          }
          MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
          goto LABEL_22;
        }
        CFTypeRef v15 = 0;
        FigVolumeControllerGetClassID();
        uint64_t v6 = CMDerivedObjectCreate();
        if (!v6)
        {
          *(void *)CMBaseObjectGetDerivedStorage() = uint64;
          FigXPCRemoteClientAssociateObject();
          CFTypeRef v10 = v15;
          goto LABEL_16;
        }
        if (v15) {
          CFRelease(v15);
        }
      }
    }
    CFTypeRef v10 = 0;
    goto LABEL_17;
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
  if (!v6) {
    goto LABEL_3;
  }
LABEL_22:
  if (v11) {
    CFRelease(v11);
  }
  return v6;
}

uint64_t singletonVolumeController_copyCachedRemoteVolumeController(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x199716EE0](*DerivedStorage);
    CFTypeRef v5 = (CFTypeRef)v4[2];
    if (v5)
    {
      if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8) == 1)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CFTypeRef v5 = (CFTypeRef)v4[2];
        if (v5)
        {
          CFRelease(v5);
          CFTypeRef v5 = 0;
          v4[2] = 0;
        }
      }
      else
      {
        CFTypeRef v5 = (CFTypeRef)v4[2];
        if (v5) {
          CFTypeRef v5 = CFRetain(v5);
        }
      }
    }
    *a2 = v5;
    MEMORY[0x199716EF0](*v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t volumeControllerRemote_GetVolumeControlTypeOfEndpointWithID(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3) {
        *a3 = xpc_dictionary_get_uint64(0, kFigVolumeControllerXPCMsgParam_GetEndpointVolumeControlType);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || *(unsigned char *)(DerivedStorage + 8))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t volumeControllerRemote_GetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v7 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v7);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigXPCMessageSetCFString(), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3) {
        *a3 = xpc_dictionary_get_BOOL(0, kFigVolumeControllerXPCMsgParam_Mute);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t volumeControllerRemote_CanUseForRoutingContext(uint64_t a1, uint64_t a2, BOOL *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  uint64_t value = 0;
  xpc_object_t v9 = 0;
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    uint64_t ObjectID = volumeControllerRemote_getObjectID(a1, &v11);
    if (ObjectID
      || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
      || (uint64_t ObjectID = FigRoutingContextXPCRemoteGetObjectID(a2, &value), ObjectID))
    {
      uint64_t v3 = ObjectID;
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, kFigVolumeControllerXPCMsgParam_RoutingContext, value);
      uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v3) {
        *a3 = xpc_dictionary_get_BOOL(v9, kFigVolumeControllerXPCMsgParam_CanUseForRoutingContext);
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t routingContextRemoteXPC_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = 0;
  if (a4)
  {
    uint64_t result = remoteXPCRoutingContext_GetObjectID(a1, &v6);
    if (!result) {
      uint64_t result = FigXPCSendStdCopyPropertyMessage();
    }
    *a4 = 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t remoteXPCRoutingContext_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

const void *singletonVolumeController_copyRemoteRoutingContext(const void *a1)
{
  BOOLeauint64_t n = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(const void *, uint64_t, void, CFBooleanRef *))(v3 + 48);
  if (v4 && (v4(a1, 0x1EE5F1E48, *MEMORY[0x1E4F1CF80], &BOOLean), BOOLean) && CFBooleanGetValue(BOOLean))
  {
    CFTypeRef v5 = FigRoutingContextResilientRemoteCopyRemoteContext();
  }
  else
  {
    if (!a1) {
      goto LABEL_11;
    }
    CFTypeRef v5 = CFRetain(a1);
  }
  a1 = v5;
LABEL_11:
  if (BOOLean) {
    CFRelease(BOOLean);
  }
  return a1;
}

uint64_t routingContextResilientRemote_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (FigCFEqual())
  {
    if (*MEMORY[0x1E4F1CFD0]) {
      CFTypeRef v8 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    }
    else {
      CFTypeRef v8 = 0;
    }
    uint64_t result = 0;
    *a4 = v8;
  }
  else
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __routingContextResilientRemote_CopyProperty_block_invoke;
    v10[3] = &__block_descriptor_56_e34_i16__0__OpaqueFigRoutingContext__8l;
    v10[4] = a2;
    v10[5] = a3;
    v10[6] = a4;
    return routingContextResilientRemote_withRemoteContext(a1, (uint64_t)v10);
  }
  return result;
}

uint64_t routingContextResilientRemote_withRemoteContext(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 16));
  CFTypeRef v4 = *(CFTypeRef *)(DerivedStorage + 24);
  if (v4) {
    CFTypeRef v4 = CFRetain(v4);
  }
  CFTypeRef cf = v4;
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 16));
  CFTypeRef v5 = 0;
  int v6 = 1;
  do
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, CFTypeRef))(a2 + 16))(a2, cf);
    uint64_t v8 = v7;
    if (v7 == -16155 || v7 == -12026 || v7 == -16152)
    {
      if (cf) {
        CFRetain(cf);
      }
      if (v5) {
        CFRelease(v5);
      }
      CFTypeRef v5 = cf;
    }
    do
    {
      uint64_t v11 = v8;
      BOOL v13 = v8 == -16155 || v8 == -12026 || v8 == -16152;
      if (!v13 || v6 == 5) {
        break;
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      uint64_t v8 = routingContextResilientRemote_replaceRemoteContext();
      ++v6;
    }
    while (v8);
  }
  while ((v11 == -16155 || v11 == -12026 || v11 == -16152) && v6 < 5);
  if (v5) {
    CFRelease(v5);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t FigRoutingContextXPCRemoteGetObjectID(uint64_t a1, void *a2)
{
  if (a1 && a2) {
    return remoteXPCRoutingContext_GetObjectID(a1, a2);
  }
  else {
    return 4294955276;
  }
}

CFTypeRef FigRoutingContextResilientRemoteCopyRemoteContext()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 16));
  int v1 = *(const void **)(DerivedStorage + 24);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 16));
  return v2;
}

void singletonVolumeController_setCachedRemoteVolumController(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*DerivedStorage);
  if (DerivedStorage[2])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CFTypeRef v4 = (const void *)DerivedStorage[2];
    if (v4)
    {
      CFRelease(v4);
      DerivedStorage[2] = 0;
    }
  }
  if (a2)
  {
    DerivedStorage[2] = CFRetain(a2);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
  }
  JUMPOUT(0x199716EF0);
}

uint64_t routingContextRemoteXPC_CopyPredictedSelectedRouteDescriptor(uint64_t a1, void *a2)
{
  memset(v6, 0, sizeof(v6));
  uint64_t ObjectID = remoteXPCRoutingContext_GetObjectID(a1, v6);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCMessageCopyCFDictionary();
    *a2 = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t __FigVolumeControllerCopySharedControllerRemote_block_invoke()
{
  FigVolumeControllerGetClassID();
  uint64_t result = CMDerivedObjectCreate();
  if (!result)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    *uint64_t DerivedStorage = FigSimpleMutexCreate();
    uint64_t result = FigSimpleMutexCreate();
    DerivedStorage[1] = result;
  }
  return result;
}

uint64_t FigVolumeControllerGetClassID()
{
  if (FigVolumeControllerGetClassID_sRegisterFigVolumeControllerBaseTypeOnce != -1) {
    dispatch_once_f(&FigVolumeControllerGetClassID_sRegisterFigVolumeControllerBaseTypeOnce, &FigVolumeControllerGetClassID_sFigVolumeControllerClassID, (dispatch_function_t)volumeController_getClassID);
  }
  return FigVolumeControllerGetClassID_sFigVolumeControllerClassID;
}

uint64_t FigRouteDiscovererRemoteXPC_SetProperty(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = remoteXPCRouteDiscoverer_GetObjectID(a1, &v2);
  if (!result)
  {
    return FigXPCSendStdSetPropertyMessage();
  }
  return result;
}

uint64_t FigRouteDiscovererRemoteXPC_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (a4)
  {
    if (CFEqual(@"availableRoutes", a2))
    {
      uint64_t result = remoteXPCRouteDiscoverer_CopyAvailableEndpoints(a1, &v7);
    }
    else
    {
      uint64_t result = remoteXPCRouteDiscoverer_GetObjectID(a1, &v8);
      if (!result) {
        uint64_t result = FigXPCSendStdCopyPropertyMessage();
      }
    }
    *a4 = v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t remoteXPCRouteDiscoverer_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

void discoverer_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9359D80)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 56) = 0;
  }
  CFTypeRef v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 32) = 0;
  }
  FigSimpleMutexDestroy();

  SharedQueue = FigRouteDiscoveryManagerGetSharedQueue();
  MXDispatchAsync((uint64_t)"discoverer_Finalize", (uint64_t)"FigRouteDiscoverer.m", 131, 0, 0, SharedQueue, (uint64_t)&__block_literal_global_20);
}

uint64_t CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFTypeRef v10 = [+[MXSessionManager sharedInstance] recordingClientPIDs];
  MEMORY[0x199716E90](gCMSM);
  int v11 = byte_1E9359C31;
  MEMORY[0x199716EA0](gCMSM);
  MEMORY[0x199716E90](gCMSM);
  byte_1E9359C31 = 0;
  dword_1E9359B98 = 0;
  uint64_t v0 = (void *)[MEMORY[0x1E4F1CA48] array];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  int v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v13 != v4) {
          objc_enumerationMutation(v1);
        }
        int v6 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v6 isRecording])
        {
          byte_1E9359C31 = 1;
          dword_1E9359B98 = objc_msgSend((id)objc_msgSend(v6, "clientPID"), "intValue");
          objc_msgSend(v0, "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(v6, "clientPID"), "unsignedIntValue")));
        }
      }
      uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v3);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  MEMORY[0x199716EA0](gCMSM);
  [+[MXSessionManager sharedInstance] setRecordingClientPIDs:v0];
  CMSMUtility_UpdateSomeRecordingSessionPresentThatDisallowsSystemSounds();
  uint64_t v7 = [+[MXSessionManager sharedInstance] recordingClientPIDs];
  if (v11 != byte_1E9359C31
    || (uint64_t result = [(NSArray *)v10 isEqualToArray:v7], (result & 1) == 0))
  {
    MX_SystemStatus_PublishRecordingClientsInfo();
    if (byte_1E9359C31) {
      uint64_t v9 = dword_1E9359B98;
    }
    else {
      uint64_t v9 = 0;
    }
    return CMSMNotificationUtility_PostRecordingStateDidChange(byte_1E9359C31, v9, (uint64_t)v7);
  }
  return result;
}

const void *MX_FrontBoardServcies_CopyPrimaryAppDisplayID()
{
  uint64_t v0 = (void *)MEMORY[0x1997179E0]();
  int v1 = (void *)[(id)gFrontBoardServicesMonitor currentLayout];
  if (v1 && (CFArrayRef v2 = (const __CFArray *)[v1 elements]) != 0 && (v3 = v2, CFArrayGetCount(v2) >= 1))
  {
    CFIndex v4 = 0;
    while (1)
    {
      CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v4);
      if (ValueAtIndex)
      {
        int v6 = ValueAtIndex;
        if ([ValueAtIndex layoutRole] == 1)
        {
          uint64_t v7 = (const void *)[v6 bundleIdentifier];
          if (v7) {
            break;
          }
        }
      }
      if (++v4 >= CFArrayGetCount(v3)) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = v7;
    CFRetain(v7);
  }
  else
  {
LABEL_9:
    uint64_t v8 = 0;
  }
  return v8;
}

void cmsmDisplayLayoutChanged(int a1, int a2, int a3, const void *a4)
{
  BOOL v9 = cmsmDisplayLayoutChanged_sideOverlayPresent == a1
    && cmsmDisplayLayoutChanged_fullScreenModalPresent == a2
    && cmsmDisplayLayoutChanged_fullScreenOverlayPresent == a3;
  if (!v9 || !FigCFEqual())
  {
    CMSMNotificationUtility_PostDisplayLayoutDidChange(a1, a2, a3, (uint64_t)a4);
    cmsmDisplayLayoutChanged_sideOverlayPresent = a1;
    cmsmDisplayLayoutChanged_fullScreenModalPresent = a2;
    cmsmDisplayLayoutChanged_fullScreenOverlayPresent = a3;
    CFTypeRef v10 = (const void *)cmsmDisplayLayoutChanged_displayID;
    cmsmDisplayLayoutChanged_displayID = (uint64_t)a4;
    if (a4) {
      CFRetain(a4);
    }
    if (v10)
    {
      CFRelease(v10);
    }
  }
}

uint64_t __discoveryManager_postNotificationToAllDiscoverers_block_invoke(uint64_t a1)
{
  v28[16] = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) timeIntervalSinceNow];
  uint64_t v23 = (void *)[MEMORY[0x1E4F1C9C8] now];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  id v27 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  int v3 = 0;
  uint64_t v4 = 0;
  ++*(void *)(*(void *)(a1 + 40) + 296);
  uint64_t v25 = Mutable;
  do
  {
    MEMORY[0x199716EE0](*(void *)(*(void *)(a1 + 40) + 256));
    uint64_t v26 = v4;
    CFArrayRef Copy = CFArrayCreateCopy(allocator, *(CFArrayRef *)(*(void *)(a1 + 40) + 24 * v4 + 24));
    MEMORY[0x199716EF0](*(void *)(*(void *)(a1 + 40) + 256));
    CFIndex Count = CFArrayGetCount(Copy);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(Copy, i);
        uint64_t v10 = discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
        if (v10)
        {
          int v11 = (const void *)v10;
          if (FigCFEqual())
          {
            v3 += FigRouteDiscovererUpdateCachedUserSelectionAvailable(v11);
          }
          else
          {
            if (FigCFEqual()) {
              v3 += FigRouteDiscovererUpdateCachedRouteInformation((uint64_t)v11, v27);
            }
            if (!FigRouteDiscoveryManagerIsClientSuspendedOrTerminated((uint64_t)v11))
            {
              uint64_t v12 = *(void *)(a1 + 40);
              long long v13 = *(const void **)(a1 + 48);
              long long v14 = *(const void **)(a1 + 56);
              CFRetain(v11);
              if (v13) {
                CFRetain(v13);
              }
              if (v14) {
                CFRetain(v14);
              }
              long long v15 = *(NSObject **)(v12 + 16);
              v28[0] = MEMORY[0x1E4F143A8];
              v28[1] = 3221225472;
              v28[2] = __discoveryManager_postNotificationForDiscoverer_block_invoke;
              v28[3] = &__block_descriptor_56_e5_v8__0l;
              v28[4] = v13;
              v28[5] = v11;
              v28[6] = v14;
              MXDispatchAsync((uint64_t)"discoveryManager_postNotificationForDiscoverer", (uint64_t)"FigRouteDiscoveryManager.m", 320, 0, 0, v15, (uint64_t)v28);
              CFMutableDictionaryRef Mutable = v25;
            }
          }
          CFRelease(v11);
        }
      }
    }
    if (Copy) {
      CFRelease(Copy);
    }
    uint64_t v4 = v26 + 1;
  }
  while (v26 != 8);
  uint64_t v16 = *(void *)(a1 + 40);
  MEMORY[0x199716EE0](*(void *)(v16 + 256));

  *(void *)(v16 + 272) = v27;
  MEMORY[0x199716EF0](*(void *)(v16 + 256));
  uint64_t v17 = *(const void **)(a1 + 48);
  if (v17) {
    CFRelease(v17);
  }
  CFDictionaryValueCallBacks v18 = *(const void **)(a1 + 56);
  if (v18) {
    CFRelease(v18);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }

  double v19 = (double)*(uint64_t *)(*(void *)(a1 + 40) + 296);
  uint64_t result = [v23 timeIntervalSinceNow];
  *(double *)(*(void *)(a1 + 40) + 304) = *(double *)(*(void *)(a1 + 40) + 304)
                                            - *(double *)(*(void *)(a1 + 40) + 304) / v19
                                            - v21 / v19;
  if (dword_1E9359D80)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

BOOL FigRouteDiscoveryManagerIsClientSuspendedOrTerminated(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (v4) {
    v4(a1, @"clientPID", *MEMORY[0x1E4F1CF80], &cf);
  }
  uint64_t SInt32 = FigCFNumberGetSInt32();
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  return MX_RunningBoardServices_GetApplicationStateForPID(SInt32, 0) - 1 < 2;
}

BOOL FigRouteDiscovererUpdateCachedRouteInformation(uint64_t a1, void *a2)
{
  v38[0] = 0;
  v38[1] = v38;
  v38[2] = 0x2020000000;
  int v39 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = *(_DWORD *)(DerivedStorage + 8);
  id v5 = (id)FigCFNumberCreateUInt32();
  int v6 = NSString;
  uint64_t v7 = [v5 stringValue];
  uint64_t v8 = *(int *)(DerivedStorage + 40);
  if (v8 > 8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = off_1E57C9288[v8];
  }
  int v10 = FigCFEqual();
  int v11 = @"YES";
  if (!v10) {
    int v11 = @"NO";
  }
  uint64_t v12 = [v6 stringWithFormat:@"%@+%@+%@", v7, v9, v11];
  long long v13 = (void *)[a2 objectForKey:v12];
  id v14 = (id)[v13 objectForKey:@"FigRouteDiscoverer_Endpoints_Key"];
  id v15 = (id)[v13 objectForKey:@"FigRouteDiscoverer_RouteDescriptors_Key"];
  if (v13)
  {
    id v16 = v15;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = &v34;
    uint64_t v36 = 0x2020000000;
    uint64_t v37 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = &v30;
    uint64_t v32 = 0x2020000000;
    uint64_t v33 = 0;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    uint64_t v23 = __FigRouteDiscovererUpdateCachedRouteInformation_block_invoke;
    int v24 = &unk_1E57C9268;
    int v29 = v4;
    uint64_t v25 = v38;
    uint64_t v26 = &v30;
    id v27 = &v34;
    uint64_t v28 = DerivedStorage;
    if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
    {
      v23((uint64_t)v22);
    }
    else
    {
      SharedQueue = FigRouteDiscoveryManagerGetSharedQueue();
      MXDispatchAsyncAndWait((uint64_t)"FigRouteDiscovererUpdateCachedRouteInformation", (uint64_t)"FigRouteDiscoverer.m", 940, 0, 0, SharedQueue, (uint64_t)v22);
    }
    CFDictionaryValueCallBacks v18 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    [v18 setValue:v31[3] forKey:@"FigRouteDiscoverer_Endpoints_Key"];
    [v18 setValue:v35[3] forKey:@"FigRouteDiscoverer_RouteDescriptors_Key"];
    [a2 setObject:v18 forKey:v12];
    id v14 = (id)[v18 objectForKey:@"FigRouteDiscoverer_Endpoints_Key"];
    id v16 = (id)[v18 objectForKey:@"FigRouteDiscoverer_RouteDescriptors_Key"];
    double v19 = (const void *)v31[3];
    if (v19)
    {
      CFRelease(v19);
      v31[3] = 0;
    }
    int v20 = (const void *)v35[3];
    if (v20)
    {
      CFRelease(v20);
      v35[3] = 0;
    }
    _Block_object_dispose(&v30, 8);
    _Block_object_dispose(&v34, 8);
  }
  MEMORY[0x199716E90](*(void *)(DerivedStorage + 64));

  *(void *)(DerivedStorage + 80) = v16;
  *(void *)(DerivedStorage + 88) = v14;
  MEMORY[0x199716EA0](*(void *)(DerivedStorage + 64));
  _Block_object_dispose(v38, 8);
  return v13 == 0;
}

void sub_194D068F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRouteDiscovererUpdateCachedUserSelectionAvailable(const void *a1)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned int v3 = *(_DWORD *)(DerivedStorage + 40);
  BOOL v4 = v3 > 8;
  int v5 = (1 << v3) & 0x10C;
  if (v4 || v5 == 0)
  {
    CFArrayRef v15 = 0;
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  uint64_t v7 = DerivedStorage;
  uint64_t v8 = *MEMORY[0x1E4F1CF80];
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  CFDictionaryRef Value = (const void *)FigCFDictionaryGetValue();
  if (Value)
  {
    CFTypeRef v11 = CFRetain(Value);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = 0;
      if (!UInt32) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  FigRouteDiscoveryManagerCopyRoutesForTypeAndAudioSessionID(v8, *(_DWORD *)(v7 + 40), *(_DWORD *)(v7 + 8), *(void *)(v7 + 24), (CFMutableArrayRef *)&cf);
  uint64_t v12 = (const void *)FigRouteDiscovererCopyUserSelectionAvailable(*(_DWORD *)(v7 + 40), (CFArrayRef)cf);
  FigCFDictionarySetValue();
  uint64_t v13 = 1;
  if (UInt32) {
LABEL_10:
  }
    CFRelease(UInt32);
LABEL_11:
  if (v12)
  {
    id v14 = (void *)[MEMORY[0x1E4F28ED0] numberWithBool:v12 == (const void *)*MEMORY[0x1E4F1CFD0]];
    discoverer_updateUserSelectionAvailableAndNotifyIfRoutePresentChanged(a1, (const __CFArray *)cf, v14);
    CFRelease(v12);
    goto LABEL_16;
  }
  CFArrayRef v15 = (const __CFArray *)cf;
LABEL_15:
  discoverer_updateUserSelectionAvailableAndNotifyIfRoutePresentChanged(a1, v15, 0);
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

void discoverer_updateUserSelectionAvailableAndNotifyIfRoutePresentChanged(const void *a1, const __CFArray *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = DerivedStorage;
  if (a3)
  {
    if ([a3 BOOLValue]) {
      uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
  }
  else
  {
    uint64_t v8 = (const void *)FigRouteDiscovererCopyUserSelectionAvailable(*(_DWORD *)(DerivedStorage + 40), a2);
  }
  MEMORY[0x199716E90](*(void *)(v7 + 64));
  int v9 = *(unsigned char *)(v7 + 72) != 0;
  *(unsigned char *)(v7 + 72) = FigCFEqual() != 0;
  MEMORY[0x199716EA0](*(void *)(v7 + 64));
  int v10 = FigCFEqual() != 0;
  CMBaseObjectGetDerivedStorage();
  BOOL IsClientSuspendedOrTerminated = FigRouteDiscoveryManagerIsClientSuspendedOrTerminated((uint64_t)a1);
  if (v9 != v10 && !IsClientSuspendedOrTerminated)
  {
    if (a1) {
      CFRetain(a1);
    }
    NotificationQueue = FigRouteDiscoveryManagerGetNotificationQueue();
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __discoverer_postRoutePresentChangedIfNecessary_block_invoke;
    v14[3] = &__block_descriptor_40_e5_v8__0l;
    v14[4] = a1;
    MXDispatchAsync((uint64_t)"discoverer_postRoutePresentChangedIfNecessary", (uint64_t)"FigRouteDiscoverer.m", 865, 0, 0, NotificationQueue, (uint64_t)v14);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void CMSMNotificationUtility_PostDisplayLayoutDidChange(int a1, int a2, int a3, uint64_t a4)
{
  id v8 = objc_alloc(MEMORY[0x1E4F1CA60]);
  uint64_t v9 = [MEMORY[0x1E4F28ED0] numberWithBool:a1 != 0];
  uint64_t v10 = [MEMORY[0x1E4F28ED0] numberWithBool:a2 != 0];
  CFTypeRef v11 = objc_msgSend(v8, "initWithObjectsAndKeys:", v9, @"DisplayLayoutDidChange_SideOverlayPresent", v10, @"DisplayLayoutDidChange_FullScreenModalPresent", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a3 != 0), @"DisplayLayoutDidChange_FullScreenOverlayPresent", 0);
  uint64_t v12 = v11;
  if (a4) {
    [v11 setValue:a4 forKeyPath:@"DisplayLayoutDidChange_ApplicationDisplayID"];
  }
  +[MXSystemController notifyAll:@"DisplayLayoutDidChange" payload:v12 dontPostIfSuspended:0];
  uint64_t v13 = MXGetNotificationSenderQueue();
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __CMSMNotificationUtility_PostDisplayLayoutDidChange_block_invoke;
  v14[3] = &unk_1E57C6368;
  v14[4] = v12;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostDisplayLayoutDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1188, 0, 0, v13, (uint64_t)v14);
}

uint64_t figConnection_notificationCallback(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if ([a3 isEqualToString:AVSystemController_FullMuteDidChangeNotification])
  {
    [a2 postFullMuteDidChangeNotification:a5];
    return [a2 postEffectiveVolumeNotification:a5];
  }
  else
  {
    if ([a3 isEqualToString:AVSystemController_SystemVolumeDidChangeNotification]) {
      [a2 postEffectiveVolumeNotification:a5];
    }
    return +[AVSystemController postNotificationOnMainQueue:a5 notification:a3 object:a2];
  }
}

void sub_194D07240(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t FigRouteDiscoveryManagerCopyRoutesForTypeAndAudioSessionID(uint64_t a1, int a2, int a3, uint64_t a4, CFMutableArrayRef *a5)
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  if (qword_1E93591B0) {
    uint64_t v9 = &discoverManager_getSharedManager_discoveryState;
  }
  else {
    uint64_t v9 = 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v11 = Mutable;
  if (*v9)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __discoveryManager_appendAvailableEndpoints_block_invoke;
    v13[3] = &__block_descriptor_64_e5_v8__0l;
    v13[4] = v9;
    v13[5] = Mutable;
    int v14 = a2;
    int v15 = a3;
    v13[6] = a4;
    FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v13);
  }
  if (a5)
  {
    *a5 = v11;
  }
  else if (v11)
  {
    CFRelease(v11);
  }
  return 0;
}

CFArrayRef FigRouteDiscoveryManagerCopyRouteDescriptorsFromEndpointsAndAudioSessionID(const __CFArray *a1, uint64_t a2)
{
  BOOL v4 = [+[MXEndpointDescriptorCache sharedInstance] copyRouteDescriptorsForEndpoints:a1];
  int v5 = FigRoutingManagerCopyEndpointsWithType(a1);
  CFArrayRef v6 = v5;
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  if (v5 && CFArrayGetCount(v5) >= 1)
  {
    if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
    {
      uint64_t v7 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v6, a2);
      v16[3] = (uint64_t)v7;
    }
    else
    {
      id v8 = MXGetSerialQueue();
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = __FigRouteDiscoveryManagerCopyRouteDescriptorsFromEndpointsAndAudioSessionID_block_invoke;
      v13[3] = &unk_1E57C58C8;
      v13[4] = &v15;
      v13[5] = v6;
      int v14 = a2;
      MXDispatchAsyncAndWait((uint64_t)"FigRouteDiscoveryManagerCopyRouteDescriptorsFromEndpointsAndAudioSessionID", (uint64_t)"FigRouteDiscoveryManager.m", 1941, 0, 0, v8, (uint64_t)v13);
    }
  }
  CFTypeRef cf = 0;
  MXCFArrayCopyAppendedArray((const __CFArray *)v16[3], v4, (__CFArray **)&cf);
  CFArrayRef v9 = FigEndpointDescriptorUtility_CopyAndRemoveDuplicateRouteDescriptors((CFArrayRef)cf);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v10 = (const void *)v16[3];
  if (v10)
  {
    CFRelease(v10);
    v16[3] = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v4) {
    CFRelease(v4);
  }
  if (!v9) {
    CFArrayRef v9 = (const __CFArray *)MEMORY[0x1E4F1CBF0];
  }
  _Block_object_dispose(&v15, 8);
  return v9;
}

void sub_194D07614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MXCFArrayCopyAppendedArray(const __CFArray *a1, const __CFArray *a2, __CFArray **a3)
{
  if (a3)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (a1 && CFArrayGetCount(a1))
    {
      v7.length = CFArrayGetCount(a1);
      v7.id location = 0;
      CFArrayAppendArray(Mutable, a1, v7);
    }
    if (a2)
    {
      if (CFArrayGetCount(a2))
      {
        v8.length = CFArrayGetCount(a2);
        v8.id location = 0;
        CFArrayAppendArray(Mutable, a2, v8);
      }
    }
    *a3 = Mutable;
  }
}

__CFArray *FigRoutingManagerCopyEndpointsWithType(const __CFArray *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex v3 = 0;
  if (!a1) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(a1); v3 < i; CFIndex i = 0)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
    {
      CFArrayRef v6 = CFArrayGetValueAtIndex(a1, v3);
      CFArrayAppendValue(Mutable, v6);
    }
    ++v3;
    if (a1) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return Mutable;
}

CFArrayRef FigEndpointDescriptorUtility_CopyAndRemoveDuplicateRouteDescriptors(CFArrayRef theArray)
{
  MutableCFArrayRef Copy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theArray);
  CFIndex v2 = 0;
  if (!MutableCopy) {
    goto LABEL_3;
  }
LABEL_2:
  CFIndex Count = CFArrayGetCount(MutableCopy);
LABEL_4:
  if (v2 < Count - 1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, v2);
    if (ValueAtIndex) {
      CFDictionaryRef v5 = (const __CFDictionary *)CFRetain(ValueAtIndex);
    }
    else {
      CFDictionaryRef v5 = 0;
    }
    CFDictionaryRef Value = CFDictionaryGetValue(v5, @"RouteUID");
    if (Value) {
      CFStringRef v7 = (const __CFString *)CFRetain(Value);
    }
    else {
      CFStringRef v7 = 0;
    }
    CFRange v8 = CFDictionaryGetValue(v5, @"PortNumber");
    CFMutableDictionaryRef theDict = v5;
    if (v8) {
      CFTypeRef cf = CFRetain(v8);
    }
    else {
      CFTypeRef cf = 0;
    }
    CFIndex v9 = v2 + 1;
    CFIndex v24 = v2;
    while (1)
    {
      CFIndex v10 = v9;
      if (MutableCopy) {
        CFIndex v11 = CFArrayGetCount(MutableCopy);
      }
      else {
        CFIndex v11 = 0;
      }
      if (v10 >= v11)
      {
LABEL_45:
        if (theDict) {
          CFRelease(theDict);
        }
        if (v7) {
          CFRelease(v7);
        }
        if (cf) {
          CFRelease(cf);
        }
        CFIndex v2 = v2 - (v10 < v11) + 1;
        if (MutableCopy) {
          goto LABEL_2;
        }
LABEL_3:
        CFIndex Count = 0;
        goto LABEL_4;
      }
      uint64_t v12 = CFArrayGetValueAtIndex(MutableCopy, v10);
      if (v12) {
        CFDictionaryRef v13 = (const __CFDictionary *)CFRetain(v12);
      }
      else {
        CFDictionaryRef v13 = 0;
      }
      int v14 = CFDictionaryGetValue(v13, @"RouteUID");
      if (v14)
      {
        CFStringRef v15 = (const __CFString *)CFRetain(v14);
        CFStringRef v16 = v15;
        char v17 = 1;
        if (!v7 || !v15) {
          goto LABEL_32;
        }
        CFIndex location = CFStringFind(v15, v7, 0).location;
        CFIndex v19 = CFStringFind(v7, v16, 0).location;
        if (FigCFEqual() || location != -1 || v19 != -1)
        {
          if (location == -1)
          {
            CFMutableDictionaryRef v20 = theDict;
            CFDictionarySetValue(theDict, @"RouteUID", v16);
          }
          else
          {
            CFDictionarySetValue(v13, @"RouteUID", v7);
            CFMutableDictionaryRef v20 = theDict;
          }
          if (cf)
          {
            CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)figEndpointDescriptorUtility_addMissingEntriesApplierFunction, v20);
            CFIndex v21 = v10;
          }
          else
          {
            CFDictionaryApplyFunction(v20, (CFDictionaryApplierFunction)figEndpointDescriptorUtility_addMissingEntriesApplierFunction, v13);
            CFIndex v21 = v2;
          }
          CFArrayRemoveValueAtIndex(MutableCopy, v21);
          if (dword_1E9359D80)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            char v17 = 0;
            CFIndex v2 = v24;
          }
          else
          {
            char v17 = 0;
          }
          goto LABEL_32;
        }
      }
      else
      {
        CFStringRef v16 = 0;
      }
      char v17 = 1;
LABEL_32:
      if (v13) {
        CFRelease(v13);
      }
      if (v16) {
        CFRelease(v16);
      }
      CFIndex v9 = v10 + 1;
      if ((v17 & 1) == 0) {
        goto LABEL_45;
      }
    }
  }
  return MutableCopy;
}

__CFArray *MXEndpointDescriptorCopyAvailableRouteDescriptorsFromEndpoints(const __CFArray *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex v3 = 0;
  if (!a1) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(a1); v3 < i; CFIndex i = 0)
  {
    CFArrayGetValueAtIndex(a1, v3);
    FigCFDictionaryGetValue();
    if (FigCFArrayContainsValue())
    {
      uint64_t Value = FigCFDictionaryGetValue();
      if (Value)
      {
        MutableCFArrayRef Copy = MXCFDictionaryCreateMutableCopy(Value);
        CFArrayAppendValue(Mutable, MutableCopy);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
      }
    }
    ++v3;
    if (a1) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return Mutable;
}

__CFArray *FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(const __CFArray *a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      for (CFIndex i = 0; i != v6; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        CFIndex v9 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)ValueAtIndex, a2);
        if (v9)
        {
          CFIndex v10 = v9;
          MutableCFArrayRef Copy = MXCFDictionaryCreateMutableCopy((uint64_t)v9);
          CFArrayAppendValue(Mutable, MutableCopy);
          CFRelease(v10);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
        }
      }
    }
  }
  CFIndex v12 = 0;
  if (Mutable) {
    goto LABEL_9;
  }
LABEL_10:
  CFIndex v13 = 0;
LABEL_11:
  if (v12 < v13 - 1)
  {
    int v14 = CFArrayGetValueAtIndex(Mutable, v12);
    if (v14) {
      CFDictionaryRef v15 = (const __CFDictionary *)CFRetain(v14);
    }
    else {
      CFDictionaryRef v15 = 0;
    }
    uint64_t Value = CFDictionaryGetValue(v15, @"RouteUID");
    if (Value) {
      CFStringRef v17 = (const __CFString *)CFRetain(Value);
    }
    else {
      CFStringRef v17 = 0;
    }
    uint64_t v18 = CFDictionaryGetValue(v15, @"PortNumber");
    if (v18) {
      CFTypeRef cf = CFRetain(v18);
    }
    else {
      CFTypeRef cf = 0;
    }
    CFIndex idx = v12;
    CFIndex v19 = v12 + 1;
    while (1)
    {
      CFIndex v20 = v19;
      if (Mutable) {
        CFIndex v21 = CFArrayGetCount(Mutable);
      }
      else {
        CFIndex v21 = 0;
      }
      if (v20 >= v21)
      {
LABEL_51:
        if (v15) {
          CFRelease(v15);
        }
        if (v17) {
          CFRelease(v17);
        }
        if (cf) {
          CFRelease(cf);
        }
        CFIndex v12 = idx - (v20 < v21) + 1;
        if (!Mutable) {
          goto LABEL_10;
        }
LABEL_9:
        CFIndex v13 = CFArrayGetCount(Mutable);
        goto LABEL_11;
      }
      int v22 = CFArrayGetValueAtIndex(Mutable, v20);
      CFDictionaryRef v23 = v22 ? (const __CFDictionary *)CFRetain(v22) : 0;
      CFIndex v24 = CFDictionaryGetValue(v23, @"RouteUID");
      if (!v24) {
        break;
      }
      CFStringRef v25 = (const __CFString *)CFRetain(v24);
      CFStringRef v26 = v25;
      char v27 = 1;
      if (v17 && v25)
      {
        CFIndex location = CFStringFind(v25, v17, 0).location;
        CFIndex v29 = CFStringFind(v17, v26, 0).location;
        if (FigCFEqual() || location != -1 || v29 != -1)
        {
          if (location == -1)
          {
            uint64_t v30 = v15;
            CFStringRef v31 = v26;
          }
          else
          {
            uint64_t v30 = v23;
            CFStringRef v31 = v17;
          }
          CFDictionarySetValue(v30, @"RouteUID", v31);
          if (cf)
          {
            CFDictionaryApplyFunction(v23, (CFDictionaryApplierFunction)figEndpointDescriptorUtility_addMissingEntriesApplierFunction, v15);
            CFIndex v32 = v20;
          }
          else
          {
            CFDictionaryApplyFunction(v15, (CFDictionaryApplierFunction)figEndpointDescriptorUtility_addMissingEntriesApplierFunction, v23);
            CFIndex v32 = idx;
          }
          CFArrayRemoveValueAtIndex(Mutable, v32);
          char v27 = 0;
          if (!v23) {
            goto LABEL_41;
          }
LABEL_40:
          CFRelease(v23);
          goto LABEL_41;
        }
        goto LABEL_38;
      }
LABEL_39:
      if (v23) {
        goto LABEL_40;
      }
LABEL_41:
      if (v26) {
        CFRelease(v26);
      }
      CFIndex v19 = v20 + 1;
      if ((v27 & 1) == 0) {
        goto LABEL_51;
      }
    }
    CFStringRef v26 = 0;
LABEL_38:
    char v27 = 1;
    goto LABEL_39;
  }
  return Mutable;
}

id MXCFDictionaryCreateMutableCopy(uint64_t a1)
{
  CFIndex v2 = (objc_class *)MEMORY[0x1E4F1CA60];
  if (a1)
  {
    id v3 = objc_alloc(MEMORY[0x1E4F1CA60]);
    return (id)[v3 initWithDictionary:a1 copyItems:1];
  }
  else
  {
    return objc_alloc_init(v2);
  }
}

void discoveryManager_postNotificationToAllDiscoverers(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3) {
    CFRetain(a3);
  }
  id v6 = (id)[MEMORY[0x1E4F1C9C8] now];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __discoveryManager_postNotificationToAllDiscoverers_block_invoke;
  v9[3] = &unk_1E57C5998;
  v9[4] = v6;
  v9[5] = a1;
  void v9[6] = cf;
  void v9[7] = a3;
  CFStringRef v7 = *(NSObject **)(a1 + 16);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __discoveryManager_postNotificationToAllDiscoverers_block_invoke_52;
  v8[3] = &unk_1E57C59C0;
  os_log_type_t v8[4] = v9;
  v8[5] = a1;
  MXDispatchAsync((uint64_t)"discoveryManager_postNotificationToAllDiscoverers", (uint64_t)"FigRouteDiscoveryManager.m", 457, 0, 0, v7, (uint64_t)v8);
}

uint64_t FigRouteDiscovererCopyUserSelectionAvailable(int a1, CFArrayRef theArray)
{
  uint64_t v18 = 0;
  CFIndex v19 = &v18;
  uint64_t v20 = 0x2020000000;
  uint64_t v3 = *MEMORY[0x1E4F1CFC8];
  uint64_t v21 = *MEMORY[0x1E4F1CFC8];
  if ((a1 & 0xFFFFFFFE) == 2)
  {
    if (theArray && CFArrayGetCount(theArray) >= 2)
    {
      BOOL v4 = v19;
      v19[3] = *MEMORY[0x1E4F1CFD0];
    }
    else
    {
      CFIndex v5 = 0;
      uint64_t v6 = 0;
      if (!theArray) {
        goto LABEL_12;
      }
LABEL_11:
      for (CFIndex i = CFArrayGetCount(theArray); v5 < i; CFIndex i = 0)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)) {
          ++v6;
        }
        ++v5;
        if (theArray) {
          goto LABEL_11;
        }
LABEL_12:
        ;
      }
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = __FigRouteDiscovererCopyUserSelectionAvailable_block_invoke;
      v17[3] = &unk_1E57C58A0;
      v17[4] = &v18;
      v17[5] = v6;
      FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v17);
      BOOL v4 = v19;
    }
    goto LABEL_24;
  }
  if (a1 == 8)
  {
    if (theArray)
    {
      if (CFArrayGetCount(theArray) > 1) {
        uint64_t v3 = *MEMORY[0x1E4F1CFD0];
      }
      BOOL v4 = v19;
    }
    else
    {
      BOOL v4 = &v18;
    }
    void v4[3] = v3;
    goto LABEL_24;
  }
  uint64_t AirPlayEndpointManager = FigRoutingManagerInternalGetAirPlayEndpointManager();
  BOOL v4 = v19;
  if (!AirPlayEndpointManager)
  {
LABEL_24:
    CFIndex v13 = (const void *)v4[3];
    if (v13) {
      CFRetain(v13);
    }
    goto LABEL_26;
  }
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFStringRef v16 = *(void (**)(uint64_t, void, void, uint64_t *))(v12 + 48);
  if (v16) {
    v16(CMBaseObject, *MEMORY[0x1E4F20610], *MEMORY[0x1E4F1CF80], v4 + 3);
  }
LABEL_26:
  uint64_t v14 = v19[3];
  _Block_object_dispose(&v18, 8);
  return v14;
}

void sub_194D0838C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerInternalGetAirPlayEndpointManager()
{
  uint64_t v0 = *MEMORY[0x1E4F20638];
  int v1 = +[MXEndpointDescriptorCache sharedInstance];
  return (uint64_t)[(MXEndpointDescriptorCache *)v1 getEndpointManagerForType:v0];
}

uint64_t FigRoutingManagerGetEndpointManager(uint64_t a1)
{
  CFIndex v2 = +[MXEndpointDescriptorCache sharedInstance];
  return (uint64_t)[(MXEndpointDescriptorCache *)v2 getEndpointManagerForType:a1];
}

uint64_t CMSMUtility_UpdateSomeRecordingSessionPresentThatDisallowsSystemSounds()
{
  uint64_t result = CMSMUtility_IsSomeRecordingSessionPresentThatDisallowsSystemSounds();
  if (result != byte_1E9359CD0)
  {
    byte_1E9359CD0 = result;
    return CMSMNotificationUtility_PostSomeRecordingSessionPresentThatDisallowsSystemSoundsDidChange(result);
  }
  return result;
}

uint64_t CMSMUtility_IsSomeRecordingSessionPresentThatDisallowsSystemSounds()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        CFIndex v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isRecording]
          && !CMSUtility_GetAllowSystemSoundsWhileRecording(v5))
        {
          uint64_t v6 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

void *CMSUtility_GetAllowSystemSoundsWhileRecording(void *result)
{
  if (result) {
    return (void *)[result allowSystemSoundsWhileRecording];
  }
  return result;
}

uint64_t CMSMNotificationUtility_PostSomeRecordingSessionPresentThatDisallowsSystemSoundsDidChange(int a1)
{
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a1 != 0), @"SessionPresent", 0);
  return +[MXSystemController notifyAll:@"SomeRecordingSessionPresentThatDisallowsSystemSounds" payload:v1 dontPostIfSuspended:0];
}

void CMSMUtility_InformAirPlayOfAudioModeIfNecessary(uint64_t a1)
{
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&cf);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)cf)
    || FigRoutingManagerIsEndpointOfType((uint64_t)cf))
  {
    CFTypeRef v1 = CMSMUtility_CopyMostRelevantAirPlayAudioModeForRoutingContext();
    FigEndpointUtility_SetPropertyOnEndpointStreams();
    if (v1) {
      CFRelease(v1);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigRoutingManagerIsEndpointOfType(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFIndex v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v3 + 48);
  if (v5) {
    v5(CMBaseObject, *MEMORY[0x1E4F21048], *MEMORY[0x1E4F1CF80], &cf);
  }
  uint64_t v4 = FigCFEqual();
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

__CFDictionary *FigEndpointDescriptorUtility_CopyDescriptorForEndpoint(uint64_t a1, uint64_t a2)
{
  number[16] = *(CFNumberRef *)MEMORY[0x1E4F143B8];
  if (FigRoutingManagerIsEndpointOfType(a1))
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!a1) {
      return Mutable;
    }
    uint64_t value = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    long long v10 = *(void (**)(uint64_t, void, const __CFAllocator *, void **))(v8 + 48);
    if (v10)
    {
      v10(CMBaseObject, *MEMORY[0x1E4F20F28], v4, &value);
      if (value)
      {
        CFDictionarySetValue(Mutable, @"RouteName", value);
        CFRelease(value);
        uint64_t value = 0;
      }
    }
    CFTypeRef cf = 0;
    uint64_t v11 = FigEndpointGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v13 + 48);
    if (v14) {
      v14(v11, *MEMORY[0x1E4F20E38], v4, &cf);
    }
    if (cf)
    {
      CFDictionarySetValue(Mutable, @"RouteUID", cf);
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFTypeRef v86 = 0;
    uint64_t v15 = FigEndpointGetCMBaseObject();
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v17 + 48);
    if (v18) {
      v18(v15, *MEMORY[0x1E4F20EF0], v4, &v86);
    }
    if (v86)
    {
      CFDictionarySetValue(Mutable, @"MACAddress", v86);
      CFRelease(v86);
      CFTypeRef v86 = 0;
    }
    CFIndex v19 = &kFigVAEndpointManagerProperty_DeviceBufferSizeRange;
    if (!Mutable)
    {
      uint64_t v24 = 0x1EE5F4288;
LABEL_149:
      CFTypeRef v85 = 0;
      uint64_t v73 = FigEndpointGetCMBaseObject();
      uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v74) {
        uint64_t v75 = v74;
      }
      else {
        uint64_t v75 = 0;
      }
      long long v76 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v75 + 48);
      if (v76)
      {
        v76(v73, v24, v4, &v85);
        CFNumberRef v77 = (const __CFNumber *)v85;
      }
      else
      {
        CFNumberRef v77 = 0;
      }
      unsigned int PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(v77);
      if (v85)
      {
        CFRelease(v85);
        CFTypeRef v85 = 0;
      }
      if (PortFromCFNumber == 1885433964)
      {
        CFTypeRef v79 = FigRoutingManagerCopyLocalAirPlayEndpoint();
        if (v79)
        {
          long long v80 = v79;
          figEndpointDescriptorUtility_addAirPlayDetailsToDescriptor((uint64_t)v79, Mutable);
          CFRelease(v80);
        }
        else
        {
          LODWORD(v94) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v82 = v94;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
            unsigned int v83 = v82;
          }
          else {
            unsigned int v83 = v82 & 0xFFFFFFFE;
          }
          if (v83)
          {
            LODWORD(valuePtr) = 136315138;
            *(void *)((char *)&valuePtr + 4) = "figEndpointDescriptorUtility_addAirPlayDetailsForLowLatencyRoute";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      return Mutable;
    }
    CFNumberRef v20 = (CFNumberRef)*MEMORY[0x1E4F1CFD0];
    CFDictionarySetValue(Mutable, @"RouteSupportsAudio", (const void *)*MEMORY[0x1E4F1CFD0]);
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F43E8, Mutable, @"AudioRouteName");
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20EC8], Mutable, @"IsWHAGroupable");
    CFTypeRef v94 = 0;
    uint64_t v21 = FigEndpointGetCMBaseObject();
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    CFStringRef v25 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v23 + 48);
    if (v25)
    {
      v25(v21, 0x1EE5F4148, v4, &v94);
      if (v94)
      {
        CFDictionarySetValue(Mutable, @"PortNumber", v94);
        CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)v94);
        if (v94)
        {
          CFRelease(v94);
          CFTypeRef v94 = 0;
        }
      }
    }
    CFTypeRef v92 = 0;
    *(void *)os_log_type_t type = 0;
    CFTypeRef v90 = 0;
    CFTypeRef v91 = 0;
    if (a2)
    {
      id v26 = [+[MXSessionManager sharedInstance] copySessionWithAudioSessionID:a2];
      MXCoreSessionCopyProperty(v26, @"AudioCategory", v4, type);
      MXCoreSessionCopyProperty(v26, @"AudioMode", v4, &v92);
      MXCoreSessionCopyProperty(v26, @"AllowedRouteTypes", v4, &v91);
      MXCoreSessionCopyProperty(v26, @"ActivationContext", v4, &v90);

      char v27 = (void *)v91;
      if (v91) {
        goto LABEL_37;
      }
    }
    else
    {
      *(void *)os_log_type_t type = CMSMUtility_CopyNonNullCurrentlyActiveCategory();
      CFTypeRef v92 = CMSMUtility_CopyNonNullCurrentlyActiveMode();
      char v27 = (void *)CMSMUtility_CopyCurrentAllowedPortTypes();
      CFTypeRef v91 = v27;
      if (v27)
      {
LABEL_37:
        CFTypeRef v89 = 0;
        cmsmCopyVADPickedRouteDescriptionForRouteConfiguration(*(NSDictionary **)type, (uint64_t)v92, v90, v27, (__CFDictionary **)&v89);
        uint64_t v28 = 0;
        id v29 = (id)v89;
        if (!v89) {
          goto LABEL_52;
        }
        goto LABEL_50;
      }
    }
    uint64_t v28 = cmsmCopyPickableRoutesForRouteConfiguration(*(uint64_t *)type, (uint64_t)v92, (void *)v90, v27);
    CFTypeRef v89 = 0;
    long long valuePtr = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    uint64_t v30 = [(__CFArray *)v28 countByEnumeratingWithState:&valuePtr objects:number count:16];
    if (!v30) {
      goto LABEL_52;
    }
    uint64_t v31 = v30;
    uint64_t v32 = *(void *)v96;
LABEL_42:
    uint64_t v33 = 0;
    while (1)
    {
      if (*(void *)v96 != v32) {
        objc_enumerationMutation(v28);
      }
      uint64_t v34 = *(void **)(*((void *)&valuePtr + 1) + 8 * v33);
      if (objc_msgSend((id)objc_msgSend(v34, "objectForKey:", @"RouteCurrentlyPicked"), "BOOLValue"))break; {
      if (v31 == ++v33)
      }
      {
        uint64_t v31 = [(__CFArray *)v28 countByEnumeratingWithState:&valuePtr objects:number count:16];
        if (v31) {
          goto LABEL_42;
        }
        CFIndex v19 = &kFigVAEndpointManagerProperty_DeviceBufferSizeRange;
        goto LABEL_52;
      }
    }
    id v29 = v34;
    CFTypeRef v89 = v29;
    CFIndex v19 = &kFigVAEndpointManagerProperty_DeviceBufferSizeRange;
    if (!v29) {
      goto LABEL_52;
    }
LABEL_50:
    if (objc_msgSend((id)objc_msgSend(v29, "objectForKey:", @"RouteUID"), "isEqualToString:", -[__CFDictionary objectForKey:](Mutable, "objectForKey:", @"RouteUID")))CFDictionarySetValue(Mutable, @"RouteCurrentlyPicked", v20); {
LABEL_52:
    }
    if (v28) {
      CFRelease(v28);
    }
    if (v89)
    {
      CFRelease(v89);
      CFTypeRef v89 = 0;
    }
    if (*(void *)type)
    {
      CFRelease(*(CFTypeRef *)type);
      *(void *)os_log_type_t type = 0;
    }
    if (v92)
    {
      CFRelease(v92);
      CFTypeRef v92 = 0;
    }
    if (v91)
    {
      CFRelease(v91);
      CFTypeRef v91 = 0;
    }
    if (v90) {
      CFRelease(v90);
    }
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4248, Mutable, @"RouteSubtype");
    CFTypeRef v94 = 0;
    uint64_t v24 = v19[101];
    uint64_t v35 = FigEndpointGetCMBaseObject();
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v37 + 48);
    if (v38) {
      v38(v35, v24, v4, &v94);
    }
    unsigned int v39 = CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)v94);
    if (v94)
    {
      CFRelease(v94);
      CFTypeRef v94 = 0;
    }
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4508, Mutable, @"SupportsSharePlay");
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F41A8, Mutable, @"SoftwareVolumeEnabled");
    if (v39 != 1885892674 && v39 != 1886152047 && v39 != 1885892706)
    {
      int v45 = (const void *)*MEMORY[0x1E4F1CFC8];
      CFDictionarySetValue(Mutable, @"IsBTRoute", (const void *)*MEMORY[0x1E4F1CFC8]);
      CFDictionarySetValue(Mutable, @"PreferredExternalRouteDetails_InEarDetectSupported", v45);
      if (v39 == 1885565807)
      {
        CFDictionarySetValue(Mutable, @"IsContinuityScreenOutput", v20);
        figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4528, Mutable, @"RouteModel");
      }
      else if (v39 == 1886614639)
      {
        CFDictionarySetValue(Mutable, @"PreferredExternalRouteDetails_IsActive", v20);
        CFDictionarySetValue(Mutable, @"IsPreferredExternalRoute", v20);
      }
      goto LABEL_149;
    }
    CFDictionarySetValue(Mutable, @"IsBTRoute", v20);
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F41C8, Mutable, @"BTDetails_PartnerRoutePresent");
    figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F41E8, Mutable, @"BTDetails_PartnerRouteRoutable");
    if (v39 == 1886152047) {
      figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4208, Mutable, @"BTDetails_SiblingRoutePresent");
    }
    figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E50], Mutable, @"IsBluetoothShareable");
    number[0] = 0;
    uint64_t v40 = FigEndpointGetCMBaseObject();
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFNumberRef *))(v42 + 48);
    if (v43)
    {
      v43(v40, 0x1EE5F4368, v4, number);
      if (number[0])
      {
        *(void *)&long long valuePtr = 0;
        CFNumberGetValue(number[0], kCFNumberSInt64Type, &valuePtr);
        if ((int)valuePtr > 1701868399)
        {
          switch(valuePtr)
          {
            case 0x65707370:
              int v44 = kFigEndpointDescriptor_BTDetails_EndpointType_Speakers;
              goto LABEL_94;
            case 0x65707474:
              int v44 = kFigEndpointDescriptor_BTDetails_EndpointType_TTY;
              goto LABEL_94;
            case 0x65707668:
              int v44 = kFigEndpointDescriptor_BTDetails_EndpointType_Vehicle;
              goto LABEL_94;
          }
        }
        else
        {
          switch(valuePtr)
          {
            case 0x65706861:
              int v44 = kFigEndpointDescriptor_BTDetails_EndpointType_HearingAid;
              goto LABEL_94;
            case 0x65706870:
              int v44 = kFigEndpointDescriptor_BTDetails_EndpointType_Headphones;
              goto LABEL_94;
            case 0x65706F74:
              int v44 = kFigEndpointDescriptor_BTDetails_EndpointType_Other;
LABEL_94:
              CFDictionarySetValue(Mutable, @"BTDetails_EndpointType", *v44);
              if (number[0]) {
                CFRelease(number[0]);
              }
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20FC8], Mutable, @"BTDetails_SupportedListeningModes");
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20EE8], Mutable, @"BTDetails_ListeningMode");
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20FF8], Mutable, @"SupportsHeadTrackedSpatialAudio");
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E20], Mutable, @"HeadTrackedSpatialAudioIsActive");
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20CE0], Mutable, @"AllowsHeadTrackedSpatialAudio");
              figEndpointDescriptorUtility_setDescriptorKey(a1, *MEMORY[0x1E4F20E28], Mutable, @"HeadTrackedSpatialAudioMode");
              number[0] = 0;
              uint64_t v46 = FigEndpointGetCMBaseObject();
              uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v47) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = 0;
              }
              uint64_t v49 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFNumberRef *))(v48 + 48);
              if (v49)
              {
                v49(v46, 0x1EE5F4428, v4, number);
                CFNumberRef v50 = number[0];
              }
              else
              {
                CFNumberRef v50 = 0;
              }
              if (v50 == v20)
              {
                CFDictionarySetValue(Mutable, @"IsPreferredExternalRoute", v20);
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4228, Mutable, @"BTDetails_IsBTManaged");
                if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote())
                {
                  AudioObjectPropertyAddress v51 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
                  id v52 = CMSM_IDSConnection_CopyNearbyPairedDeviceInfo();
                  if (v52)
                  {
                    CFArrayAppendValue(v51, v52);
                    CFDictionarySetValue(Mutable, @"OtherDevicesConnected", v51);
                  }
                  if (CMSM_GetFakeSharedAudioRouteAsPicked()) {
                    CFDictionarySetValue(Mutable, @"IsCurrentlyPickedOnPairedDevice", v20);
                  }
                  if (v52) {
                    CFRelease(v52);
                  }
                  if (v51) {
                    CFRelease(v51);
                  }
                }
                CFNumberRef v50 = number[0];
              }
              if (v50) {
                CFRelease(v50);
              }
              number[0] = 0;
              uint64_t v53 = FigEndpointGetCMBaseObject();
              uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v54) {
                uint64_t v55 = v54;
              }
              else {
                uint64_t v55 = 0;
              }
              int v56 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFNumberRef *))(v55 + 48);
              if (v56)
              {
                v56(v53, 0x1EE5F4448, v4, number);
                CFNumberRef v57 = number[0];
              }
              else
              {
                CFNumberRef v57 = 0;
              }
              if (v57 == v20)
              {
                CFDictionarySetValue(Mutable, @"IsPreferredExternalRoute", v20);
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4448, Mutable, @"PreferredExternalRouteDetails_InEarDetectSupported");
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4488, Mutable, @"PreferredExternalRouteDetails_InEarDetectEnabled");
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4468, Mutable, @"PreferredExternalRouteDetails_IsActive");
              }
              else
              {
                *(void *)&long long valuePtr = 0;
                uint64_t v58 = FigEndpointGetCMBaseObject();
                uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v59) {
                  uint64_t v60 = v59;
                }
                else {
                  uint64_t v60 = 0;
                }
                uint64_t v61 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, long long *))(v60 + 48);
                if (v61)
                {
                  v61(v58, 0x1EE5F4428, v4, &valuePtr);
                  CFNumberRef v62 = (CFNumberRef)valuePtr;
                }
                else
                {
                  CFNumberRef v62 = 0;
                }
                if (v62 == v20)
                {
                  __int16 v63 = (const void *)*MEMORY[0x1E4F1CFC8];
                  CFDictionarySetValue(Mutable, @"PreferredExternalRouteDetails_InEarDetectSupported", (const void *)*MEMORY[0x1E4F1CFC8]);
                  CFDictionarySetValue(Mutable, @"PreferredExternalRouteDetails_IsActive", v63);
                  CFNumberRef v62 = (CFNumberRef)valuePtr;
                }
                if (v62) {
                  CFRelease(v62);
                }
              }
              if (number[0]) {
                CFRelease(number[0]);
              }
              if (v39 == 1885892706)
              {
                CFDictionarySetValue(Mutable, @"BTDetails_IsHFPRoute", v20);
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4408, Mutable, @"BTDetails_SupportsLiveListen");
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4308, Mutable, @"BTDetails_IsAvailableForVoicePrompts");
                figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F44A8, Mutable, @"BTDetails_SupportsStereoHFP");
              }
              else if (v39 == 1885892674)
              {
                CFDictionarySetValue(Mutable, @"BTDetails_IsA2DPRoute", v20);
                CFNumberRef v64 = (CFNumberRef)*MEMORY[0x1E4F1CFC8];
                number[0] = *(CFNumberRef *)MEMORY[0x1E4F1CFC8];
                uint64_t v65 = FigEndpointGetCMBaseObject();
                uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v66) {
                  uint64_t v67 = v66;
                }
                else {
                  uint64_t v67 = 0;
                }
                uint64_t v68 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFNumberRef *))(v67 + 48);
                if (v68)
                {
                  v68(v65, 0x1EE5F4168, v4, number);
                  CFNumberRef v64 = number[0];
                }
                CFDictionarySetValue(Mutable, @"BTDetails_SupportsDoAP", v64);
                CFNumberRef v69 = number[0];
                if (number[0] == v20)
                {
                  figEndpointDescriptorUtility_setDescriptorKey(a1, 0x1EE5F4188, Mutable, @"BTDetails_SupportsSoftwareVolume");
                  CFNumberRef v69 = number[0];
                }
                if (v69) {
                  CFRelease(v69);
                }
              }
              long long v70 = CFDictionaryGetValue(Mutable, @"RouteUID");
              uint64_t v71 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v70, 1, *MEMORY[0x1E4F20640], 0);
              if (v71)
              {
                long long v72 = (const void *)v71;
                figEndpointDescriptorUtility_addBTDetailsToDescriptor(v71, Mutable);
                CFRelease(v72);
              }
              goto LABEL_149;
          }
        }
      }
    }
    int v44 = kFigEndpointDescriptor_BTDetails_EndpointType_Unspecified;
    goto LABEL_94;
  }
  CFMutableArrayRef Mutable = [+[MXEndpointDescriptorCache sharedInstance] copyRouteDescriptorForEndpoint:a1];
  if (!Mutable)
  {
    if (dword_1E9359D80)
    {
      long long v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return FigEndpointDescriptorUtility_CopyDescriptorForNonVirtualAudioEndpoint(a1);
  }
  return Mutable;
}

uint64_t _VAEndpoint_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, const void **a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 4294950586;
  if (a2 && a4)
  {
    long long v9 = DerivedStorage;
    uint64_t v10 = *DerivedStorage;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E38]))
    {
LABEL_4:
      Float32 = vaeCopyDeviceIdentifierFromVADPort(v10);
LABEL_9:
      uint64_t v8 = 0;
LABEL_10:
      *a4 = Float32;
      return v8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21048]))
    {
      uint64_t v12 = (const void **)MEMORY[0x1E4F21578];
LABEL_7:
      Float32 = *v12;
LABEL_8:
      Float32 = CFRetain(Float32);
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FA8]))
    {
LABEL_13:
      uint64_t v8 = 0;
      *a4 = 0;
      return v8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F28]))
    {
LABEL_15:
      Float32 = (const void *)vaeCopyNameForPort(v10);
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FC0]))
    {
      *(void *)&long long valuePtr = 2;
      Float32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EC8]))
    {
      int IsPortWHAGroupable = vaeIsPortWHAGroupable(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E50])) {
      goto LABEL_21;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F00]))
    {
      vaemGetDeviceVolume([+[MXSessionManager sharedInstance] defaultVADID], 0);
      Float32 = (const void *)FigCFNumberCreateFloat32();
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F08]))
    {
LABEL_21:
      int IsPortWHAGroupable = vaeIsPortBluetoothShareable(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21080]))
    {
      int IsPortBluetoothShareable = vaeIsPortBluetoothShareable(v10);
      LODWORD(valuePtr) = 0;
      if (vaeIsPortActiveForCurrentRouteConfiguration(v10))
      {
        if (vaeIsPortWHAGroupable(v10)
          || IsPortBluetoothShareable && CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
        {
          unsigned int PortTypeFromPortID = vaeGetPortTypeFromPortID(v10);
          id v17 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
          CFStringRef v18 = vaeCopyRouteSubtypeFromVADPort(v10);
          CFTypeRef v19 = vaeCopyDeviceIdentifierFromVADPort(v10);
          uint64_t v20 = getpid();
          uint64_t v8 = MXSMPerformVolumeOperation(0xDu, @"Audio/Video", v17, v19, v18, 0, v20, (float *)&valuePtr, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0);
          if (v19) {
            CFRelease(v19);
          }
          if (v18) {
            CFRelease(v18);
          }
          if (v17) {
            CFRelease(v17);
          }
        }
        else
        {
          uint64_t v8 = 0;
          LODWORD(valuePtr) = vaemGetDeviceVolume([+[MXSessionManager sharedInstance] defaultVADID], 0);
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      Float32 = (const void *)FigCFNumberCreateFloat32();
      goto LABEL_10;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21090]))
    {
      Float32 = (const void *)FigCFNumberCreateUInt64();
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F21088]))
    {
      int HasVolumeControl = vaemCurrentRouteHasVolumeControl();
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EA0]))
    {
      int HasVolumeControl = vaemGetFullMute();
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F20]))
    {
      int HasVolumeControl = vaemCurrentRouteHasMuteControl();
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VAE_ActivateOptions"))
    {
      Float32 = (const void *)*((void *)v9 + 1);
      if (!Float32) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    if (CFEqual(a2, @"VAE_PortID"))
    {
      uint64_t v24 = v10;
LABEL_58:
      Float32 = MXCFNumberCreateFromSInt64(v24);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"VAE_RouteSubtype"))
    {
      Float32 = vaeCopyRouteSubtypeFromVADPort(v10);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"VAE_DeviceIdentifier")) {
      goto LABEL_4;
    }
    if (CFEqual(a2, @"VAE_PortType"))
    {
      LODWORD(v24) = vaeGetPortTypeFromPortID(v10);
LABEL_64:
      uint64_t v24 = v24;
      goto LABEL_58;
    }
    if (CFEqual(a2, @"VAE_SpecificPortName"))
    {
      Float32 = (const void *)vaeCopySpecificNameForPort(v10);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"VAE_HiddenSubPortDescriptions"))
    {
      Float32 = vaeCopyHiddenSubPortDescriptionsForPort(v10);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"VAE_PortName")) {
      goto LABEL_15;
    }
    if (CFEqual(a2, @"VAE_IsAvailableForVoicePrompts"))
    {
      int IsPortWHAGroupable = vaeIsAvailableForVoicePrompts(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, @"VAE_IsHeadphones"))
    {
      int IsPortWHAGroupable = vaeIsHeadphonesPort(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, @"VAE_IsRoutable"))
    {
      int IsPortWHAGroupable = vaeIsPortRoutable(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, @"VAE_VAEndpointType"))
    {
      LODWORD(v24) = vaeGetVADEndpointTypeForPort(v10);
      goto LABEL_64;
    }
    if (CFEqual(a2, @"VAE_VAConnectionType"))
    {
      LODWORD(v24) = vaeGetConnectionTypeForPort(v10);
      goto LABEL_64;
    }
    if (CFEqual(a2, @"VAE_IsInputEndpoint"))
    {
      int IsPortWHAGroupable = vaeIsPortAnInputPort(v10);
      goto LABEL_22;
    }
    if (CFEqual(a2, @"VAE_FigInputDeviceName"))
    {
      unsigned int v25 = vaeGetPortTypeFromPortID(v10);
      Float32 = CMSMVAUtility_CopyFigInputDeviceNameFromVADPortType(v25);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"VAE_FigOutputDeviceName"))
    {
      unsigned int v26 = vaeGetPortTypeFromPortID(v10);
      Float32 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(v26);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"VAE_SupportsLiveListen"))
    {
      int IsPortWHAGroupable = vaeIsLiveListenSupportedOnVADPort(v10);
LABEL_22:
      uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
      if (IsPortWHAGroupable) {
        uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      goto LABEL_7;
    }
    if (CFEqual(a2, @"VAE_SupportsMultipleConnections"))
    {
      if (v10
        && (*(void *)&long long valuePtr = 0x676C6F626F736163,
            DWORD2(valuePtr) = 0,
            AudioObjectHasProperty(v10, (const AudioObjectPropertyAddress *)&valuePtr)))
      {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      else
      {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
      }
LABEL_52:
      uint64_t v23 = *v22;
      *a4 = *v22;
      CFRetain(v23);
      return 0;
    }
    if (CFEqual(a2, @"VAE_SupportsInEarDetection"))
    {
      int HasVolumeControl = vaeDoesBTPortSupportInEarDetection(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VAE_IsBTManaged"))
    {
      int HasVolumeControl = MXBluetoothServices_IsPortBTManaged(v10, 1);
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VAE_IsInEar"))
    {
      int HasVolumeControl = vaeIsInEarStatusTrueForBTPort(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VAE_InEarDetectEnabled"))
    {
      int HasVolumeControl = vaeHasUserEnabledInEarDetectionForBTPort(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VAE_RouteDescription"))
    {
      uint64_t v27 = a1;
      int v28 = 0;
LABEL_105:
      Float32 = vaeCreateRouteDescription(v27, v28);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"VAE_DefaultRouteDescription"))
    {
      uint64_t v27 = a1;
      int v28 = 1;
      goto LABEL_105;
    }
    if (CFEqual(a2, @"VAE_SupportsDoAP"))
    {
      int HasVolumeControl = vaeDoesPortSupportDoAP(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FC8]))
    {
      vaeGetSupportedBluetoothListeningModes(v10);
LABEL_112:
      Float32 = (const void *)FigCFNumberCreateSInt64();
      goto LABEL_9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20EE8]))
    {
      vaeGetBluetoothListeningMode(v10);
      goto LABEL_112;
    }
    if (CFEqual(a2, @"VAE_SupportsSoftwareVolume") || CFEqual(a2, @"VAE_SoftwareVolumeEnabled"))
    {
      int HasVolumeControl = vaeDoesPortSupportSoftwareVolume(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VAE_PartnerRoutePresent"))
    {
      long long valuePtr = 0u;
      long long v34 = 0u;
      int HasVolumeControl = vaeGetPartnersForPort(v10, &valuePtr);
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VAE_PartnerRouteRoutable"))
    {
      int HasVolumeControl = vaePartnerRouteRoutable(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VAE_SiblingRoutePresent"))
    {
      long long valuePtr = 0u;
      long long v34 = 0u;
      int HasVolumeControl = vaeGetSiblingsForPort(v10, &valuePtr);
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20FF8]))
    {
      DWORD2(valuePtr) = 0;
      *(void *)&long long valuePtr = *(void *)"nepsbolg";
      int HasVolumeControl = AudioObjectHasProperty(v10, (const AudioObjectPropertyAddress *)&valuePtr);
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E20]))
    {
      int HasVolumeControl = vaeIsHeadTrackedSpatialAudioActive(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CE0]))
    {
      int HasVolumeControl = vaeDoesPortAllowHeadTrackedSpatialAudio(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, @"VAE_SupportsStereoHFP"))
    {
      int HasVolumeControl = vaeDoesPortSupportStereoHFP(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20E28]))
    {
      vaeGetBluetoothSpatialAudioMode(v10);
      goto LABEL_112;
    }
    if (CFEqual(a2, @"VAE_SupportsSharePlay"))
    {
      int HasVolumeControl = vaeDoesPortSupportSharePlay(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20F78]))
    {
      *(void *)&long long valuePtr = 0;
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&valuePtr);
      uint64_t v8 = 0;
      *a4 = (const void *)valuePtr;
      return v8;
    }
    if (CFEqual(a2, @"SupportsConversationDetect"))
    {
      int HasVolumeControl = vaeCopyIfBluetoothEndpointSupportsConversationDetect(v10);
      goto LABEL_50;
    }
    if (CFEqual(a2, @"ConversationDetectEnable"))
    {
      int HasVolumeControl = vaeCopyIfBluetoothEndpointHasConversationDetectEnabled(v10);
LABEL_50:
      uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!HasVolumeControl) {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_52;
    }
    if (CFEqual(a2, @"VAE_ModelUID"))
    {
      Float32 = vaeCopyModelUIDForPort(v10);
      goto LABEL_9;
    }
    uint64_t v29 = *MEMORY[0x1E4F20CF0];
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20CF0])) {
      goto LABEL_13;
    }
    if (*MEMORY[0x1E4F1CFC8]) {
      CFTypeRef v30 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFC8]);
    }
    else {
      CFTypeRef v30 = 0;
    }
    *(void *)&long long valuePtr = v30;
    if (vaeGetPortTypeFromPortID(v10) == 1885433971)
    {
      CFTypeRef v31 = vaeCopyDeviceIdentifierFromVADPort(v10);
      uint64_t v32 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v31, 1, *MEMORY[0x1E4F20638], 0);
      if (v31) {
        CFRelease(v31);
      }
      if (v32)
      {
        if (v30)
        {
          CFRelease(v30);
          *(void *)&long long valuePtr = 0;
        }
        FigEndpointCopyProperty((uint64_t)v32, v29, *MEMORY[0x1E4F1CF80], (uint64_t)&valuePtr);
        CFRelease(v32);
        CFTypeRef v30 = (CFTypeRef)valuePtr;
      }
    }
    uint64_t v8 = 0;
    *a4 = v30;
  }
  return v8;
}

void figEndpointDescriptorUtility_setDescriptorKey(uint64_t a1, uint64_t a2, __CFDictionary *a3, const void *a4)
{
  if (a3)
  {
    uint64_t value = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v9 = v8 ? v8 : 0;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, void **))(v9 + 48);
    if (v10)
    {
      v10(CMBaseObject, a2, *MEMORY[0x1E4F1CF80], &value);
      uint64_t v11 = value;
      if (value && value != (void *)*MEMORY[0x1E4F1D260])
      {
        CFDictionarySetValue(a3, a4, value);
        uint64_t v11 = value;
      }
      if (v11) {
        CFRelease(v11);
      }
    }
  }
}

id vaeCopyFigOutputDeviceNameFromVADPort(uint64_t a1)
{
  unsigned int PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  return CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
}

uint64_t vaeGetPortTypeFromPortID(uint64_t result)
{
  unsigned int outData = 0;
  if (result)
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6270747970;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    if (AudioObjectGetPropertyData(result, &inAddress, 0, 0, &ioDataSize, &outData)) {
      return 0;
    }
    else {
      return outData;
    }
  }
  return result;
}

id CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(unsigned int a1)
{
  id v1 = [(NSDictionary *)[+[MXSessionManager sharedInstance] vadOutputPortTypeToFigOutputDeviceNameDict] objectForKey:a1];
  id v2 = v1;
  if (v1) {
    CFRetain(v1);
  }
  return v2;
}

CFNumberRef MXCFNumberCreateFromSInt64(uint64_t a1)
{
  uint64_t valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
}

CFNumberRef CMSMVAUtility_GetPortFromCFNumber(const __CFNumber *result)
{
  if (result)
  {
    uint64_t valuePtr = 0;
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

__CFDictionary *vaeCreateRouteDescription(uint64_t a1, int a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  AudioObjectID valuePtr = *(_DWORD *)CMBaseObjectGetDerivedStorage();
  int PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
  CFTypeRef v4 = vaeCopyDeviceIdentifierFromVADPort(valuePtr);
  uint64_t v5 = cmsmCopyEndpointWithUID((uint64_t)v4, PortTypeFromPortID);
  uint64_t v6 = (const void *)v5;
  uint64_t v7 = (const void **)MEMORY[0x1E4F1CFD0];
  uint64_t v8 = (const void **)MEMORY[0x1E4F1CFC8];
  if (PortTypeFromPortID == 1885433971)
  {
    *(void *)&long long inAddress = 0;
    FigRoutingManagerGetMirroringModeFromEndpoint(v5);
    if (FigCFEqual()) {
      uint64_t v9 = 0x1EE5E7B28;
    }
    else {
      uint64_t v9 = 0x1EE5EFE28;
    }
LABEL_7:
    cmsmCreateRouteDescriptionForFigAirPlayEndpoints((uint64_t)v6, v9, (__CFDictionary **)&inAddress);
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    MutableCFArrayRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    uint64_t v12 = (const void *)inAddress;
    if (!(void)inAddress) {
      goto LABEL_97;
    }
LABEL_96:
    CFRelease(v12);
    goto LABEL_97;
  }
  if (PortTypeFromPortID == 1885433953)
  {
    *(void *)&long long inAddress = 0;
    uint64_t v9 = 0x1EE5EFE08;
    goto LABEL_7;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  MutableCFArrayRef Copy = Mutable;
  if (!Mutable) {
    goto LABEL_97;
  }
  uint64_t v14 = *v7;
  CFDictionarySetValue(Mutable, @"RouteSupportsAudio", *v7);
  uint64_t v15 = (const void *)vaeCopyNameForPort(valuePtr);
  if (v15) {
    CFDictionarySetValue(MutableCopy, @"RouteName", v15);
  }
  CFTypeRef cf = v15;
  if (v4) {
    CFDictionarySetValue(MutableCopy, @"RouteUID", v4);
  }
  CFStringRef v16 = vaeCopyRouteSubtypeFromVADPort(valuePtr);
  if (v16)
  {
    CFStringRef v17 = v16;
    CFDictionarySetValue(MutableCopy, @"RouteSubtype", v16);
    CFRelease(v17);
  }
  unsigned int v18 = vaeGetPortTypeFromPortID(valuePtr);
  id v19 = CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(v18);
  if (v19) {
    CFDictionarySetValue(MutableCopy, @"AVAudioRouteName", v19);
  }
  id v47 = v19;
  if (a2)
  {
    uint64_t v20 = kMXSessionPickableRouteType_Default;
  }
  else
  {
    int ConnectionTypeForPort = vaeGetConnectionTypeForPort(valuePtr);
    switch(ConnectionTypeForPort)
    {
      case 1885566825:
        if (CMSMDeviceState_ItsAnAppleTV() || !vaeIsQuiesceableWiredPort(valuePtr)) {
          goto LABEL_22;
        }
        uint64_t v20 = kMXSessionPickableRouteType_Wired;
        break;
      case 1885561449:
        uint64_t v20 = kMXSessionPickableRouteType_Override;
        break;
      case 1885544823:
        uint64_t v20 = kMXSessionPickableRouteType_Wireless;
        break;
      default:
        goto LABEL_22;
    }
  }
  if (*v20) {
    CFDictionarySetValue(MutableCopy, @"RouteType", *v20);
  }
LABEL_22:
  BOOL DoesPortSupportSoftwareVolume = vaeDoesPortSupportSoftwareVolume(valuePtr);
  uint64_t v22 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (DoesPortSupportSoftwareVolume) {
    uint64_t v23 = v14;
  }
  else {
    uint64_t v23 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(MutableCopy, @"SoftwareVolumeEnabled", v23);
  if (PortTypeFromPortID == 1885892674 || PortTypeFromPortID == 1886152047 || PortTypeFromPortID == 1885892706)
  {
    CFDictionarySetValue(MutableCopy, @"IsBTRoute", v14);
    long long inAddress = 0u;
    long long v51 = 0u;
    if (vaeGetPartnersForPort(valuePtr, &inAddress)) {
      uint64_t v24 = v14;
    }
    else {
      uint64_t v24 = v22;
    }
    CFDictionarySetValue(MutableCopy, @"BTDetails_PartnerRoutePresent", v24);
    if (vaePartnerRouteRoutable(valuePtr)) {
      unsigned int v25 = v14;
    }
    else {
      unsigned int v25 = v22;
    }
    CFDictionarySetValue(MutableCopy, @"BTDetails_PartnerRouteRoutable", v25);
    unsigned int v26 = vaeCopyVADEndpointTypeForPort(valuePtr);
    if (v26)
    {
      uint64_t v27 = v26;
      CFDictionarySetValue(MutableCopy, @"BTDetails_EndpointType", v26);
      CFRelease(v27);
    }
    if (PortTypeFromPortID == 1886152047)
    {
      long long inAddress = 0u;
      long long v51 = 0u;
      if (vaeGetSiblingsForPort(valuePtr, &inAddress)) {
        int v28 = v14;
      }
      else {
        int v28 = v22;
      }
      CFDictionarySetValue(MutableCopy, @"BTDetails_SiblingRoutePresent", v28);
    }
    if (valuePtr)
    {
      *(void *)&long long inAddress = 0x676C6F626F736163;
      DWORD2(inAddress) = 0;
      if (AudioObjectHasProperty(valuePtr, (const AudioObjectPropertyAddress *)&inAddress))
      {
        CFDictionarySetValue(MutableCopy, @"IsPreferredExternalRoute", v14);
        uint64_t v29 = MXBluetoothServices_IsPortBTManaged(valuePtr, 1) ? v14 : v22;
        CFDictionarySetValue(MutableCopy, @"BTDetails_IsBTManaged", v29);
        if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote())
        {
          CFTypeRef v30 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E4F1D510]);
          id v31 = CMSM_IDSConnection_CopyNearbyPairedDeviceInfo();
          if (v31)
          {
            CFArrayAppendValue(v30, v31);
            CFDictionarySetValue(MutableCopy, @"OtherDevicesConnected", v30);
          }
          if (CMSM_GetFakeSharedAudioRouteAsPicked()) {
            CFDictionarySetValue(MutableCopy, @"IsCurrentlyPickedOnPairedDevice", v14);
          }
          if (v31) {
            CFRelease(v31);
          }
          uint64_t v7 = (const void **)MEMORY[0x1E4F1CFD0];
          if (v30) {
            CFRelease(v30);
          }
        }
      }
      if (!vaeDoesBTPortSupportInEarDetection(valuePtr))
      {
        *(void *)&long long inAddress = 0x676C6F626F736163;
        DWORD2(inAddress) = 0;
        if (!AudioObjectHasProperty(valuePtr, (const AudioObjectPropertyAddress *)&inAddress)) {
          goto LABEL_71;
        }
        CFDictionarySetValue(MutableCopy, @"PreferredExternalRouteDetails_InEarDetectSupported", v22);
        uint64_t v32 = MutableCopy;
        uint64_t v33 = v22;
        goto LABEL_70;
      }
    }
    else if (!vaeDoesBTPortSupportInEarDetection(0))
    {
      goto LABEL_71;
    }
    CFDictionarySetValue(MutableCopy, @"IsPreferredExternalRoute", v14);
    CFDictionarySetValue(MutableCopy, @"PreferredExternalRouteDetails_InEarDetectSupported", v14);
    if (vaeHasUserEnabledInEarDetectionForBTPort(valuePtr)) {
      uint64_t v35 = v14;
    }
    else {
      uint64_t v35 = v22;
    }
    CFDictionarySetValue(MutableCopy, @"PreferredExternalRouteDetails_InEarDetectEnabled", v35);
    if (CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(valuePtr)) {
      uint64_t v33 = v14;
    }
    else {
      uint64_t v33 = v22;
    }
    uint64_t v32 = MutableCopy;
LABEL_70:
    CFDictionarySetValue(v32, @"PreferredExternalRouteDetails_IsActive", v33);
LABEL_71:
    if (PortTypeFromPortID == 1885892674)
    {
      CFDictionarySetValue(MutableCopy, @"BTDetails_IsA2DPRoute", v14);
      int DoesPortSupportDoAP = vaeDoesPortSupportDoAP(valuePtr);
      if (DoesPortSupportDoAP) {
        uint64_t v41 = v14;
      }
      else {
        uint64_t v41 = v22;
      }
      CFDictionarySetValue(MutableCopy, @"BTDetails_SupportsDoAP", v41);
      if (!DoesPortSupportDoAP) {
        goto LABEL_89;
      }
      BOOL DoesPortSupportStereoHFP = vaeDoesPortSupportSoftwareVolume(valuePtr);
      unsigned int v39 = kMXSession_RouteDescriptionKey_BTDetails_SupportsSoftwareVolume;
    }
    else
    {
      if (PortTypeFromPortID != 1885892706)
      {
LABEL_89:
        cmsmAddBTDetailsFromBTEndpointToRouteDescription((uint64_t)v6, MutableCopy);
        goto LABEL_90;
      }
      if (vaeIsLiveListenSupportedOnVADPort(valuePtr)) {
        uint64_t v36 = v14;
      }
      else {
        uint64_t v36 = v22;
      }
      CFDictionarySetValue(MutableCopy, @"BTDetails_SupportsLiveListen", v36);
      CFDictionarySetValue(MutableCopy, @"BTDetails_IsHFPRoute", v14);
      if (vaeIsAvailableForVoicePrompts(valuePtr)) {
        uint64_t v37 = v14;
      }
      else {
        uint64_t v37 = v22;
      }
      CFDictionarySetValue(MutableCopy, @"BTDetails_IsAvailableForVoicePrompts", v37);
      BOOL DoesPortSupportStereoHFP = vaeDoesPortSupportStereoHFP(valuePtr);
      unsigned int v39 = kMXSession_RouteDescriptionKey_BTDetails_SupportsStereoHFP;
    }
    if (DoesPortSupportStereoHFP) {
      uint64_t v42 = v14;
    }
    else {
      uint64_t v42 = v22;
    }
    CFDictionarySetValue(MutableCopy, *v39, v42);
    goto LABEL_89;
  }
LABEL_90:
  if (FigCFEqual())
  {
    CFDictionarySetValue(MutableCopy, @"IsPreferredExternalRoute", v14);
    CFDictionarySetValue(MutableCopy, @"PreferredExternalRouteDetails_IsActive", v14);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v8 = (const void **)MEMORY[0x1E4F1CFC8];
  if (v47)
  {
    uint64_t v12 = v47;
    goto LABEL_96;
  }
LABEL_97:
  if (vaeDoesPortSupportSharePlay(valuePtr)) {
    uint64_t v43 = v7;
  }
  else {
    uint64_t v43 = v8;
  }
  CFDictionarySetValue(MutableCopy, @"SupportsSharePlay", *v43);
  CFNumberRef v44 = CFNumberCreate(v10, kCFNumberSInt32Type, &valuePtr);
  if (v44)
  {
    CFNumberRef v45 = v44;
    CFDictionarySetValue(MutableCopy, @"PortNumber", v44);
    CFRelease(v45);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v6) {
    CFRelease(v6);
  }
  return MutableCopy;
}

uint64_t vaeCopyNameForPort(AudioObjectID a1)
{
  outData[22] = *MEMORY[0x1E4F143B8];
  outData[0] = 0;
  if (a1)
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62706E616DLL;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 8;
    if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData)) {
      return outData[0];
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

CFTypeRef vaeCopyDeviceIdentifierFromVADPort(AudioObjectID a1)
{
  inAddress.mElement = 0;
  CFTypeRef outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"diupbolg";
  UInt32 ioDataSize = 8;
  OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  CFTypeRef result = 0;
  if (!PropertyData)
  {
    CFTypeRef result = outData;
    if (outData)
    {
      int v3 = CFEqual(outData, &stru_1EE5E8D28);
      CFTypeRef result = outData;
      if (v3)
      {
        CFRelease(outData);
        return 0;
      }
    }
  }
  return result;
}

BOOL vaeDoesPortSupportSoftwareVolume(AudioObjectID a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  UInt32 ioDataSize = 4;
  int outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"newsbolg";
  inAddress.mElement = 0;
  if (!AudioObjectHasProperty(a1, &inAddress)) {
    goto LABEL_5;
  }
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_5:
    int v3 = 0;
    return v3 != 0;
  }
  int v3 = outData;
  return v3 != 0;
}

CFStringRef vaeCopyRouteSubtypeFromVADPort(AudioObjectID a1)
{
  int outData = 0;
  if (!a1) {
    return 0;
  }
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6270737562;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData) || !outData) {
    return 0;
  }
  LOBYTE(inAddress.mSelector) = HIBYTE(outData);
  BYTE1(inAddress.mSelector) = BYTE2(outData);
  BYTE2(inAddress.mSelector) = BYTE1(outData);
  HIBYTE(inAddress.mSelector) = outData;
  LOBYTE(inAddress.mScope) = 0;
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)&inAddress, 0);
}

BOOL vaeDoesPortSupportSharePlay(AudioObjectID a1)
{
  uint64_t v2 = 1;
  UInt32 ioDataSize = 4;
  int outData = 1;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6270737073;
  inAddress.mElement = 0;
  if (AudioObjectHasProperty(a1, &inAddress)
    && !AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    return outData != 0;
  }
  return v2;
}

uint64_t cmsmCopyEndpointWithUID(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  if (a2 > 1885892673)
  {
    if (a2 == 1885892674 || a2 == 1885892706 || a2 == 1886152047)
    {
      int v3 = (uint64_t *)MEMORY[0x1E4F20640];
LABEL_10:
      uint64_t v6 = *v3;
      uint64_t v5 = (NSString *)qword_1E9359C88;
      goto LABEL_11;
    }
    return 0;
  }
  if (a2 == 1885433953)
  {
    int v3 = (uint64_t *)MEMORY[0x1E4F20638];
    goto LABEL_10;
  }
  if (a2 != 1885433971) {
    return 0;
  }
  uint64_t v4 = *MEMORY[0x1E4F20638];
  uint64_t v5 = [+[MXSessionManager sharedInstance] systemMirroringRoutingContextUUID];
  a1 = v2;
  uint64_t v6 = v4;
LABEL_11:
  return FigRoutingManagerCopyEndpointWithDeviceID(a1, 1, v6, (uint64_t)v5);
}

uint64_t vaeIsPortWHAGroupable(uint64_t a1)
{
  int PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  char CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (CMSMDeviceState_ItsAHomePod() && PortTypeFromPortID == 1886613611) {
    return 1;
  }
  uint64_t result = 0;
  if (CFPreferenceNumberWithDefault && PortTypeFromPortID == 1886613611)
  {
    uint64_t result = 1;
    if ((vaeIsPortWHAGroupable_didLog & 1) == 0) {
      vaeIsPortWHAGroupable_didLog = 1;
    }
  }
  return result;
}

CFTypeRef CMSMUtility_CopyCurrentAllowedPortTypes()
{
  CFTypeRef result = (CFTypeRef)qword_1E9359B90;
  if (qword_1E9359B90) {
    return CFRetain((CFTypeRef)qword_1E9359B90);
  }
  return result;
}

id CMSUtility_CopyBundleID(void *a1)
{
  uint64_t v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "hostProcessAttribution"), "firstObject"), "valueForKey:", @"BundleID");
  if (!v2)
  {
    uint64_t v2 = objc_msgSend((id)objc_msgSend(-[MXMediaEndowmentManager getRecordingAttributions:](+[MXMediaEndowmentManager sharedInstance](MXMediaEndowmentManager, "sharedInstance"), "getRecordingAttributions:", objc_msgSend((id)objc_msgSend(a1, "clientPID"), "unsignedIntValue")), "firstObject"), "valueForKey:", @"BundleID");
    if (!v2) {
      uint64_t v2 = (void *)[a1 displayID];
    }
  }
  return v2;
}

void CMSMDebugUtility_PrintDictionary(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  context = (void *)MEMORY[0x1997179E0]();
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(a1);
        }
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      uint64_t v3 = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }
}

void CMSMDebugUtility_PrintCollection(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  context = (void *)MEMORY[0x1997179E0]();
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(a1);
        }
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      uint64_t v3 = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }
}

uint64_t remoteSystemController_PerformVolumeOperation(uint64_t a1, uint64_t a2, float a3, float a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, float *a11, BOOL *a12, uint64_t a13, uint64_t a14)
{
  xpc_object_t xdict = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, &v27);
  if (ObjectID) {
    goto LABEL_24;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_24;
  }
  [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:a2];
  uint64_t v20 = FigXPCMessageSetCFNumber();
  if (v20)
  {
    uint64_t v25 = v20;
    goto LABEL_26;
  }
  [MEMORY[0x1E4F28ED0] numberWithDouble:a3];
  uint64_t ObjectID = FigXPCMessageSetCFNumber();
  if (ObjectID) {
    goto LABEL_24;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_24;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_24;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_24;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_24;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_24;
  }
  *(float *)&double v21 = a4;
  [MEMORY[0x1E4F28ED0] numberWithFloat:v21];
  uint64_t ObjectID = FigXPCMessageSetCFNumber();
  if (ObjectID) {
    goto LABEL_24;
  }
  *(float *)&double v22 = a5;
  [MEMORY[0x1E4F28ED0] numberWithFloat:v22];
  uint64_t ObjectID = FigXPCMessageSetCFNumber();
  if (ObjectID) {
    goto LABEL_24;
  }
  uint64_t ObjectID = FigXPCMessageSetCFBoolean();
  if (ObjectID) {
    goto LABEL_24;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_24;
  }
  if (a11)
  {
    float v23 = xpc_dictionary_get_double(xdict, (const char *)kFigSystemControllerXPCMsgParam_Volume);
    *a11 = v23;
  }
  if (a12) {
    *a12 = xpc_dictionary_get_BOOL(xdict, (const char *)kFigSystemControllerXPCMsgParam_Muted);
  }
  if (!a13)
  {
    if (!a14)
    {
      uint64_t v25 = 0;
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  uint64_t v24 = FigXPCMessageCopyCFString();
  uint64_t v25 = v24;
  if (a14 && !v24)
  {
LABEL_23:
    uint64_t ObjectID = FigXPCMessageCopyCFString();
LABEL_24:
    uint64_t v25 = ObjectID;
  }
LABEL_26:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v25;
}

uint64_t remoteSystemController_CopyPickableRoutesForCategoryAndMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v9, 0, sizeof(v9));
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v9);
  if (ObjectID) {
    goto LABEL_8;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_8;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_8;
  }
  uint64_t ObjectID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_8;
  }
  uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  uint64_t v7 = v6;
  if (a4 && !v6)
  {
    uint64_t ObjectID = FigXPCMessageCopyCFArray();
LABEL_8:
    uint64_t v7 = ObjectID;
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteSystemController_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  if (a2 && a4)
  {
    uint64_t ObjectID = remoteSystemController_getObjectID(a1, &v7);
    if (!ObjectID) {
      uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
    }
  }
  else
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v5 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteSystemController_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t remoteSystemController_SetProperty(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  if (!a2)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t ObjectID = remoteSystemController_getObjectID(a1, v6);
  if (ObjectID)
  {
LABEL_10:
    uint64_t v4 = ObjectID;
    goto LABEL_7;
  }
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (v3 || (uint64_t v3 = FigXPCMessageSetCFString(), v3) || (uint64_t v3 = FigXPCMessageSetCFObject(), v3)) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = FigXPCRemoteClientSendAsyncMessage();
  }
LABEL_7:
  FigXPCRelease();
  return v4;
}

uint64_t cmsSetClientPID(void *a1, CFTypeRef cf)
{
  int valuePtr = 0;
  if (!cf) {
    return 4294954316;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFNumberGetTypeID()) {
    return 4294954315;
  }
  CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
  int v5 = valuePtr;
  if (valuePtr < 1) {
    return 4294954315;
  }
  if (v5 == objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue")) {
    return 0;
  }
  objc_msgSend(a1, "setClientPID:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", valuePtr));
  [a1 updateCameraExtensionFlagsIfNeeded];
  if ([a1 idleSleepPreventorAllocated])
  {
    PowerLogDataForSessiouint64_t n = CMSMPowerLogCreatePowerLogDataForSession(a1);
    CMSMPowerLogPostPowerLogData(@"CoreMedia_AudioPlayback", PowerLogDataForSession);
    if (PowerLogDataForSession) {
      CFRelease(PowerLogDataForSession);
    }
  }
  MX_RunningBoardServices_StartMonitoringForPID(valuePtr);
  [+[MXMediaEndowmentManager sharedInstance] refreshAssertions];
  [a1 setHasFetchedBackgroundPrivileges:0];
  [a1 updateApplicationStateAndPIDToInheritAppStateFrom];
  cmsUpdatePiPIsPossible(a1);
  int v7 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
  if (v7 != getpid()) {
    CMSessionMgrCopyDisplayIdentifierToSession(a1);
  }
  uint64_t result = [a1 hasEntitlementToShowMicrophoneIndicatorWhileNotRecording];
  if (result)
  {
    uint64_t result = [a1 wantsToShowMicrophoneIndicatorWhenNotRecording];
    if (result)
    {
      MX_SystemStatus_PublishRecordingClientsInfo();
      [a1 setHasEntitlementToShowMicrophoneIndicatorWhileNotRecording:0];
      [a1 setWantsToShowMicrophoneIndicatorWhenNotRecording:0];
      return 0;
    }
  }
  return result;
}

void CMSessionMgrCopyDisplayIdentifierToSession(void *a1)
{
  id v2 = a1;
  uint64_t v3 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __CMSessionMgrCopyDisplayIdentifierToSession_block_invoke;
  void v4[3] = &unk_1E57C6368;
  void v4[4] = a1;
  MXDispatchAsync((uint64_t)"CMSessionMgrCopyDisplayIdentifierToSession", (uint64_t)"CMSessionManager.m", 6662, 0, 0, v3, (uint64_t)v4);
}

void CMSMNotificationUtility_PostSessionIsActiveDidChange(void *a1)
{
  CFDictionaryRef BooleanPayload = CMSMNotificationUtility_CreateBooleanPayload(@"CMSessionIsActive", [a1 isActive]);
  if (BooleanPayload)
  {
    CFDictionaryRef v2 = BooleanPayload;
    CMSMUtility_PostNotificationToSession(a1, @"CMSessionIsActiveDidChange");
    CFRelease(v2);
  }
}

void CMSMNotificationUtility_PostPiPIsPossibleDidChange_f(void *a1)
{
  CFDictionaryRef BooleanPayload = CMSMNotificationUtility_CreateBooleanPayload(@"PiPIsPossibleDidChange_PiPPossible", [a1 isPiPPossible]);
  CMSMUtility_PostNotificationToSession(a1, @"PiPIsPossibleDidChange");
  if (BooleanPayload) {
    CFRelease(BooleanPayload);
  }
}

CFDictionaryRef CMSMNotificationUtility_CreateBooleanPayload(void *a1, int a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (void **)MEMORY[0x1E4F1CFC8];
  if (a2) {
    CFDictionaryRef v2 = (void **)MEMORY[0x1E4F1CFD0];
  }
  uint64_t v3 = *v2;
  BOOL v4 = v3 != 0;
  BOOL v5 = a1 != 0;
  CFIndex v7 = v5 & v4;
  BOOL v6 = !v5 || !v4;
  if (v5 && v4) {
    long long v8 = a1;
  }
  else {
    long long v8 = 0;
  }
  if (v6) {
    uint64_t v3 = 0;
  }
  values = v3;
  keys[0] = v8;
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, v7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

void __MXDispatchSync_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2 = (void *)MEMORY[0x1997179E0]();
  uint64_t v3 = a1 + 48;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(unsigned int *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == v4) {
      MEMORY[0x199715FA0](a1 + 48, 1, "MXDispatchSync_block_invoke", v5, v6, v7, v8, v9);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(unsigned int *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == v10) {
      MEMORY[0x199715FA0](v3, 2, "MXDispatchSync_block_invoke", v11, v12, v13, v15, v14);
    }
  }
}

const UInt8 *_routingContextUtilities_getContextForUUIDFromDict(CFDictionaryRef theDict, void *key)
{
  uint64_t result = 0;
  if (theDict)
  {
    if (key)
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, key);
      if (!Value || (uint64_t result = CFDataGetBytePtr(Value)) == 0)
      {
        CFDictionaryRemoveValue(theDict, key);
        return 0;
      }
    }
  }
  return result;
}

void sub_194D0EAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

uint64_t MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled()
{
  if (MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled_onceToken, &__block_literal_global_35);
  }
  return MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled_sIsDiscoveryEnhancementEnabled;
}

CFArrayRef __discoveryManager_iOSAppendAvailableEndpoints_block_invoke(uint64_t a1)
{
  CFIndex v2 = 0;
  uint64_t v71 = *MEMORY[0x1E4F20620];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v72 = *MEMORY[0x1E4F20660];
  uint64_t v66 = *MEMORY[0x1E4F20608];
  CFTypeRef v76 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  BOOL v73 = *MEMORY[0x1E4F1CFD0] != 0;
  uint64_t v69 = *MEMORY[0x1E4F20E38];
  uint64_t v68 = *MEMORY[0x1E4F20E60];
  CFTypeRef v70 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  BOOL v67 = 1;
  while (1)
  {
    CFArrayRef result = *(const __CFArray **)(*(void *)(a1 + 32) + 240);
    if (result) {
      CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    }
    if (v2 >= (uint64_t)result) {
      return result;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 32) + 240), v2);
    CFDataRef Value = CFDictionaryGetValue(ValueAtIndex, @"EndpointManager_RefKey");
    if (*(CFTypeRef *)(a1 + 40) == v76)
    {
      CFTypeRef v89 = 0;
      uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v8 + 48);
      if (v9) {
        v9(CMBaseObject, v71, allocator, &v89);
      }
      BOOL v10 = !FigCFEqual() && !FigCFEqual();
      if (v89) {
        CFRelease(v89);
      }
      if (v10) {
        goto LABEL_122;
      }
    }
    uint64_t v12 = *(unsigned int *)(a1 + 56);
    unsigned int v11 = *(_DWORD *)(a1 + 60);
    CFTypeRef v96 = 0;
    uint64_t v13 = FigEndpointManagerGetCMBaseObject();
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CFStringRef v16 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v15 + 48);
    if (v16) {
      v16(v13, v71, allocator, &v96);
    }
    if (FigCFEqual() || FigCFEqual())
    {
      BOOL v17 = v11 == 6;
LABEL_25:
      char v18 = !v17;
      goto LABEL_28;
    }
    if (!FigCFEqual() || (char v18 = 1, v67) && v11 != 8)
    {
      if (!FigCFEqual())
      {
        int v35 = FigCFEqual();
        BOOL v17 = v11 != 8 || v35 == 0;
        goto LABEL_25;
      }
      if (v11 > 8 || ((1 << v11) & 0x121) == 0)
      {
        uint64_t v77 = 0;
        uint64_t v78 = (uint64_t)&v77;
        uint64_t v79 = 0x2020000000;
        long long v80 = (void *)v76;
        if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
        {
          uint64_t v26 = v78;
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 24);
          if (v27) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v65 = *(void (**)(const void *, uint64_t, const __CFAllocator *, uint64_t, void, uint64_t))(v28 + 24);
          if (v65) {
            v65(Value, 0x1EE5F3668, allocator, v12, 0, v26 + 24);
          }
        }
        else
        {
          CFNumberRef v64 = MXGetSerialQueue();
          CFTypeRef v89 = (CFTypeRef)MEMORY[0x1E4F143A8];
          uint64_t v90 = 3221225472;
          CFTypeRef v91 = __discoveryManager_shouldSkipAvailableEndpointsQuery_block_invoke;
          CFTypeRef v92 = &unk_1E57C58C8;
          int v95 = v12;
          long long v93 = (CFTypeRef *)&v77;
          CFTypeRef v94 = Value;
          MXDispatchAsyncAndWait((uint64_t)"discoveryManager_shouldSkipAvailableEndpointsQuery", (uint64_t)"FigRouteDiscoveryManager.m", 995, 0, 0, v64, (uint64_t)&v89);
        }
        BOOL v67 = *(void *)(v78 + 24) == (void)v76;
        _Block_object_dispose(&v77, 8);
      }
      char v18 = 0;
    }
LABEL_28:
    if (v96) {
      CFRelease(v96);
    }
    if ((v18 & 1) == 0)
    {
      if (ValueAtIndex
        && (unsigned int v19 = *(_DWORD *)(a1 + 60), v19 <= 8)
        && (uint64_t v20 = *(unsigned int *)(a1 + 56),
            int v74 = *(_DWORD *)(a1 + 60),
            uint64_t v21 = qword_194EDE5C8[v19],
            CFDictionaryGetValue(ValueAtIndex, @"EndpointManager_SupportedEndpointFeaturesKey"),
            (FigCFNumberGetUInt64() & v21) != 0))
      {
        double v22 = CFDictionaryGetValue(ValueAtIndex, @"EndpointManager_RefKey");
        v100[0] = 0;
        if (v22)
        {
          uint64_t v23 = FigEndpointManagerGetCMBaseObject();
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v25 = v24 ? v24 : 0;
          uint64_t v29 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v25 + 48);
          if (v29) {
            v29(v23, v71, allocator, v100);
          }
        }
        CFTypeRef v96 = 0;
        long long v97 = &v96;
        uint64_t v98 = 0x2020000000;
        uint64_t v99 = 0;
        if (FigCFEqual())
        {
          if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
          {
            CFTypeRef v30 = v97;
            uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 24);
            if (v31) {
              uint64_t v32 = v31;
            }
            else {
              uint64_t v32 = 0;
            }
            uint64_t v36 = *(void (**)(const void *, uint64_t, const __CFAllocator *, uint64_t, void, CFTypeRef *))(v32 + 24);
            if (v36) {
              v36(v22, v66, allocator, v20, 0, v30 + 3);
            }
          }
          else
          {
            long long v34 = MXGetSerialQueue();
            CFTypeRef v89 = (CFTypeRef)MEMORY[0x1E4F143A8];
            uint64_t v90 = 3221225472;
            CFTypeRef v91 = __discoveryManager_iOSCopyAvailableEndpoints_block_invoke;
            CFTypeRef v92 = &unk_1E57C58C8;
            int v95 = v20;
            long long v93 = &v96;
            CFTypeRef v94 = v22;
            MXDispatchAsyncAndWait((uint64_t)"discoveryManager_iOSCopyAvailableEndpoints", (uint64_t)"FigRouteDiscoveryManager.m", 870, 0, 0, v34, (uint64_t)&v89);
          }
        }
        else
        {
          uint64_t v33 = [+[MXEndpointDescriptorCache sharedInstance] copyAvailableEndpointsForManager:v22];
          v97[3] = v33;
        }
        CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
        CFArrayRef v38 = (const __CFArray *)v97[3];
        if (v38)
        {
          CFIndex Count = CFArrayGetCount(v38);
          if (Count >= 1)
          {
            CFIndex v40 = 0;
            while (1)
            {
              uint64_t v41 = CFArrayGetValueAtIndex((CFArrayRef)v97[3], v40);
              if (!v41 || (FigEndpointGetSupportedFeatures() & v21) == 0) {
                goto LABEL_115;
              }
              if (((0xB3uLL >> v74) & 1) == 0)
              {
                CFTypeRef cf = 0;
                uint64_t v42 = FigEndpointGetCMBaseObject();
                uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v43) {
                  uint64_t v44 = v43;
                }
                else {
                  uint64_t v44 = 0;
                }
                CFNumberRef v45 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v44 + 48);
                BOOL v46 = v73;
                if (v45)
                {
                  v45(v42, @"AudioWithScreenMirroringOnly", allocator, &cf);
                  BOOL v46 = cf != v76;
                  if (cf) {
                    CFRelease(cf);
                  }
                }
                if (!v46) {
                  goto LABEL_115;
                }
              }
              int v47 = FigCFEqual();
              if (v74 == 6 || !v47)
              {
                if (FigCFEqual() && FigCFEqual())
                {
                  CFTypeRef cf = 0;
                  uint64_t v51 = FigEndpointGetCMBaseObject();
                  uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v52) {
                    uint64_t v53 = v52;
                  }
                  else {
                    uint64_t v53 = 0;
                  }
                  uint64_t v61 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v53 + 48);
                  if (v61) {
                    v61(v51, v69, allocator, &cf);
                  }
                  CFTypeRef v62 = FigRoutingManagerCopyEndpointWithDeviceIDFromBluetoothManager();
                  if (v62) {
                    CFArrayAppendValue(Mutable, v41);
                  }
                  if (cf)
                  {
                    CFRelease(cf);
                    CFTypeRef cf = 0;
                  }
                  if (v62) {
                    CFRelease(v62);
                  }
                }
                else
                {
                  CFArrayAppendValue(Mutable, v41);
                }
                goto LABEL_115;
              }
              CFTypeRef v88 = 0;
              uint64_t v48 = FigEndpointGetCMBaseObject();
              uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v49) {
                uint64_t v50 = v49;
              }
              else {
                uint64_t v50 = 0;
              }
              uint64_t v54 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v50 + 48);
              if (v54) {
                v54(v48, v68, allocator, &v88);
              }
              if (v88 != v70) {
                break;
              }
              CFArrayAppendValue(Mutable, v41);
LABEL_104:
              if (v88) {
                CFRelease(v88);
              }
LABEL_115:
              if (Count == ++v40) {
                goto LABEL_116;
              }
            }
            CFTypeRef v87 = 0;
            uint64_t v55 = FigEndpointGetCMBaseObject();
            uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v56) {
              uint64_t v57 = v56;
            }
            else {
              uint64_t v57 = 0;
            }
            uint64_t v58 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v57 + 48);
            if (v58) {
              v58(v55, v69, allocator, &v87);
            }
            CFTypeRef cf = 0;
            p_CFTypeRef cf = &cf;
            uint64_t v85 = 0x2020000000;
            uint64_t v86 = 0;
            if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
            {
              CFTypeRef v59 = (CFTypeRef)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v87, 0, v72, 0);
              p_cf[3] = v59;
              if (v59) {
                goto LABEL_100;
              }
LABEL_99:
              CFArrayAppendValue(Mutable, v41);
              CFTypeRef v59 = p_cf[3];
              if (v59)
              {
LABEL_100:
                CFRelease(v59);
                p_cf[3] = 0;
              }
              if (v87)
              {
                CFRelease(v87);
                CFTypeRef v87 = 0;
              }
              _Block_object_dispose(&cf, 8);
              goto LABEL_104;
            }
            uint64_t v60 = MXGetSerialQueue();
            uint64_t v77 = MEMORY[0x1E4F143A8];
            uint64_t v78 = 3221225472;
            uint64_t v79 = (uint64_t)__discoveryManager_iOSCopyAvailableEndpoints_block_invoke_2;
            long long v80 = &unk_1E57C58A0;
            long long v81 = &cf;
            CFTypeRef v82 = v87;
            MXDispatchAsyncAndWait((uint64_t)"discoveryManager_iOSCopyAvailableEndpoints", (uint64_t)"FigRouteDiscoveryManager.m", 916, 0, 0, v60, (uint64_t)&v77);
            CFTypeRef v59 = p_cf[3];
            if (!v59) {
              goto LABEL_99;
            }
            goto LABEL_100;
          }
        }
LABEL_116:
        CFTypeRef v63 = v97[3];
        if (v63)
        {
          CFRelease(v63);
          v97[3] = 0;
        }
        if (v100[0])
        {
          CFRelease(v100[0]);
          v100[0] = 0;
        }
        _Block_object_dispose(&v96, 8);
        FigCFArrayAppendArray();
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      else
      {
        FigCFArrayAppendArray();
      }
    }
LABEL_122:
    ++v2;
  }
}

void sub_194D0F930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t FigEndpointDescriptorUtility_IsAudiomxdGuardRailsEnabled()
{
  return FigGetCFPreferenceNumberWithDefault();
}

uint64_t MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled()
{
  if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled_onceToken, &__block_literal_global_146);
  }
  return MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled_reduceRouteDiscoveryQueueHopping;
}

uint64_t _VAEndpointManager_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294950586;
  if (!a2 || !a4) {
    return result;
  }
  if (*(unsigned char *)(DerivedStorage + 8)) {
    return 4294950584;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20620]))
  {
    uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F20660];
LABEL_6:
    BOOL v10 = (__CFArray *)CFRetain(*v9);
LABEL_7:
    unsigned int v11 = v10;
    uint64_t result = 0;
    *a4 = v11;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20608]))
  {
    uint64_t v12 = (void *)CMSMUtility_CopyCurrentAllowedPortTypes();
    *a4 = vaemCopyAvailableEndpointsForRouteConfiguration(0, 0, 0, v12);
    if (v12) {
      CFRelease(v12);
    }
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20610]))
  {
LABEL_14:
    uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20630]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20628]))
  {
    v22[0] = 2;
    BOOL v10 = CFNumberCreate(a3, kCFNumberSInt64Type, v22);
    goto LABEL_7;
  }
  if (CFEqual(a2, @"VAEM_StarkIsAvailableForCurrentCategoryAndMode"))
  {
    unsigned int PortOfTypeInConnectedPortsList = CMSMVAUtility_GetPortOfTypeInConnectedPortsList(1886614639);
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_StarkAudioPortIsCurrentlyActive"))
  {
    uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    int v15 = dword_1E9359C60;
    goto LABEL_25;
  }
  if (CFEqual(a2, @"VAEM_DeviceBufferSizeRange"))
  {
    vaemGetDeviceBufferNumPCMFramesRange(v22, (_DWORD *)v22 + 1);
    BOOL v10 = MXCFArrayCreateFromCArrayOfSInt32((int *)v22, 2u);
    goto LABEL_7;
  }
  if (CFEqual(a2, @"VAEM_AllEndpoints"))
  {
    BOOL v10 = vaemCopyAllEndpoints();
    goto LABEL_7;
  }
  if (CFEqual(a2, @"VAEM_BufferFrameSizeShouldBeRestricted"))
  {
    unsigned int PortOfTypeInConnectedPortsList = vaemBufferFrameSizeShouldBeRestricted();
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_SystemLocalVADExists"))
  {
    unsigned int PortOfTypeInConnectedPortsList = [+[MXSessionManager sharedInstance] systemSoundLocalVADID];
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_SystemRemoteVADExists"))
  {
    unsigned int PortOfTypeInConnectedPortsList = [+[MXSessionManager sharedInstance] systemSoundRemoteVADID];
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_AC3IsSupported"))
  {
    unsigned int PortOfTypeInConnectedPortsList = vaemGetAC3IsSupported();
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_AC3EncodeIsSupported"))
  {
LABEL_42:
    uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_6;
  }
  if (CFEqual(a2, @"VAEM_VirtualFormatsSupported"))
  {
    BOOL v10 = vaemCopyVirtualFormatsSupported();
    goto LABEL_7;
  }
  if (CFEqual(a2, @"VAEM_UplinkMute"))
  {
    unsigned int PortOfTypeInConnectedPortsList = vaemGetUplinkMute();
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_DownlinkMute"))
  {
    LODWORD(v22[0]) = 0;
    if (unk_1E9359B58)
    {
      unk_1E9359B58(0, v22);
      if ((v22[0] & 2) != 0) {
        goto LABEL_14;
      }
    }
    goto LABEL_42;
  }
  if (CFEqual(a2, @"VAEM_DeviceSupportsMute"))
  {
    unsigned int PortOfTypeInConnectedPortsList = vaemDeviceSupportsMute();
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_LineOutIsConnected"))
  {
    int v16 = 1886154613;
LABEL_63:
    unsigned int PortOfTypeInConnectedPortsList = vaemGetVADPortIDFromVADPortType(v16);
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_USBAudioOutputIsConnected"))
  {
    int v16 = 1886745455;
    goto LABEL_63;
  }
  if (CFEqual(a2, @"VAEM_HDMIAudioOutputIsConnected"))
  {
    int v16 = 1885889645;
    goto LABEL_63;
  }
  if (CFEqual(a2, @"VAEM_DisplayPortAudioOutputIsConnected"))
  {
    int v16 = 1885631344;
    goto LABEL_63;
  }
  if (CFEqual(a2, @"VAEM_ThunderboltOutputIsConnected"))
  {
    int v16 = 1886675567;
    goto LABEL_63;
  }
  if (CFEqual(a2, @"VAEM_HeadphoneJackIsConnected"))
  {
    id v17 = objc_alloc(MEMORY[0x1E4F28ED0]);
    int v18 = byte_1E9358B88;
LABEL_68:
    BOOL v10 = (__CFArray *)[v17 initWithBool:v18 != 0];
    goto LABEL_7;
  }
  if (CFEqual(a2, @"VAEM_HeadphoneJackHasInput"))
  {
    id v17 = objc_alloc(MEMORY[0x1E4F28ED0]);
    int v18 = byte_1E9358B89;
    goto LABEL_68;
  }
  if (CFEqual(a2, @"VAEM_CurrentRouteHasVolumeControl"))
  {
    unsigned int PortOfTypeInConnectedPortsList = vaemCurrentRouteHasVolumeControl();
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_CurrentRouteHasMuteControl"))
  {
    unsigned int PortOfTypeInConnectedPortsList = vaemCurrentRouteHasMuteControl();
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_CurrentRouteHasInputGainControl"))
  {
    unsigned int PortOfTypeInConnectedPortsList = vaemCurrentRouteHasInputGainControl();
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_CurrentInputDataSource"))
  {
    BOOL v10 = vaemCopyCurrentInputDataSource();
    goto LABEL_7;
  }
  if (CFEqual(a2, @"VAEM_CurrentOutputDataDestination"))
  {
    BOOL v10 = vaemCopyCurrentOutputDataDestination();
    goto LABEL_7;
  }
  if (CFEqual(a2, @"VAEM_InputDataSources"))
  {
    BOOL v10 = vaemCopyInputDataSources();
    goto LABEL_7;
  }
  if (CFEqual(a2, @"VAEM_OutputDataDestinations"))
  {
    BOOL v10 = vaemCopyOutputDataDestinations();
    goto LABEL_7;
  }
  if (CFEqual(a2, @"VAEM_VirtualAudioCategory"))
  {
    unsigned int VirtualAudioPlugInCategory = vaemGetVirtualAudioPlugInCategory();
LABEL_85:
    BOOL v10 = MXCFNumberCreateFromSInt64(VirtualAudioPlugInCategory);
    goto LABEL_7;
  }
  if (CFEqual(a2, @"VAEM_VADInRecordingCategory"))
  {
    unsigned int PortOfTypeInConnectedPortsList = vaemIsVADInRecordingCategory();
    goto LABEL_20;
  }
  if (CFEqual(a2, @"VAEM_VirtualAudioMode"))
  {
    unsigned int VirtualAudioPlugInCategory = vaemGetVirtualAudioPlugInMode();
    goto LABEL_85;
  }
  if (!CFEqual(a2, @"VAEM_DeviceInputGainScalar"))
  {
    if (CFEqual(a2, @"VAEM_ThermalGainAdjustment_Speaker"))
    {
      float v21 = *(float *)&qword_1E9358B98;
    }
    else
    {
      if (!CFEqual(a2, @"VAEM_ThermalGainAdjustment_Haptics"))
      {
        if (CFEqual(a2, @"VAEM_AudioInputDeviceIsAvailable"))
        {
          uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          int v15 = byte_1E9358B69;
        }
        else if (CFEqual(a2, @"VAEM_AudioInputDeviceExcludingBluetoothIsAvailable"))
        {
          uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          int v15 = byte_1E9358B6A;
        }
        else if (CFEqual(a2, @"VAEM_DisallowAudioFormatChanges"))
        {
          uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          int v15 = byte_1E9358B94;
        }
        else
        {
          if (!CFEqual(a2, @"VAEM_InLongPullMode"))
          {
            if (CFEqual(a2, @"VAEM_MATAtmosIsEnabled"))
            {
              unsigned int PortOfTypeInConnectedPortsList = vaemIsMATAtmosEnabled();
            }
            else
            {
              uint64_t result = CFEqual(a2, @"VAEM_MATAtmosIsAvailable");
              if (!result) {
                return result;
              }
              unsigned int PortOfTypeInConnectedPortsList = vaemIsMATAtmosAvailable();
            }
LABEL_20:
            uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
            if (PortOfTypeInConnectedPortsList) {
              uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
            }
            goto LABEL_6;
          }
          uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          int v15 = byte_1E9358B95;
        }
LABEL_25:
        if (v15) {
          uint64_t v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v9 = v14;
        }
        goto LABEL_6;
      }
      float v21 = *((float *)&qword_1E9358B98 + 1);
    }
    BOOL v10 = MXCFNumberCreateFromFloat32(v21);
    goto LABEL_7;
  }
  LODWORD(v22[0]) = 0;
  uint64_t DeviceInputGainScalar = vaemGetDeviceInputGainScalar(v22);
  if (!DeviceInputGainScalar) {
    *a4 = MXCFNumberCreateFromFloat32(*(float *)v22);
  }
  return DeviceInputGainScalar;
}

__CFArray *MXEndpointDescriptorCopyReducedForManager(const __CFArray *a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex v5 = 0;
  if (!a1) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(a1); v5 < i; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
    FigCFDictionaryGetValue();
    if (FigCFEqual())
    {
      if (a2) {
        CFDictionaryRef ValueAtIndex = (const void *)FigCFDictionaryGetValue();
      }
      CFArrayAppendValue(Mutable, ValueAtIndex);
    }
    ++v5;
    if (a1) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return Mutable;
}

void FigRouteDiscoveryManagerRemoveCachedDiscoverers()
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  CFIndex v0 = 0;
  if (qword_1E93591B0) {
    uint64_t v1 = (uint64_t)&qword_1E93592C0;
  }
  else {
    uint64_t v1 = 280;
  }
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)v1;
    if (*(void *)v1) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v0 >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v1, v0);
    uint64_t v4 = (const void *)discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
    if (FigCFEqual())
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)v1, v0);
      if (v4) {
        CFRelease(v4);
      }
      break;
    }
    if (v4) {
      CFRelease(v4);
    }
    ++v0;
  }
  CFArrayRef v5 = *(const __CFArray **)v1;
  discoveryManager_removeFreedWeakRefs(v5);
}

void _routingContextUtilities_copyPickedEndpointAtIndex(uint64_t a1, CFIndex a2, void *a3)
{
  CFArrayRef theArray = 0;
  _routingContextUtilities_copyPickedEndpoints(a1, &theArray);
  CFArrayRef v5 = theArray;
  if (a2 < 0 || (!theArray ? (CFIndex Count = 0) : (CFIndex Count = CFArrayGetCount(theArray)), Count <= a2))
  {
    CFDictionaryRef ValueAtIndex = 0;
  }
  else
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v5, a2);
    if (ValueAtIndex) {
      CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
    }
  }
  *a3 = ValueAtIndex;
  if (v5)
  {
    CFRelease(v5);
  }
}

void _routingContextUtilities_copyPickedEndpoints(uint64_t a1, void *a2)
{
  *a2 = 0;
  if (*(_DWORD *)a1 == 10)
  {
    _routingContextUtilities_pruneLeaders(*(const __CFArray **)(a1 + 80));
    CFArrayRef v4 = *(const __CFArray **)(a1 + 80);
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        CFIndex v7 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
          ContextFromWeakRef = _routingContextUtilities_getContextFromWeakRef((uint64_t)ValueAtIndex);
          if (ContextFromWeakRef)
          {
            CFTypeRef v10 = (CFTypeRef)*((void *)ContextFromWeakRef + 9);
            if (v10) {
              break;
            }
          }
          if (v6 == ++v7) {
            return;
          }
        }
        goto LABEL_15;
      }
    }
  }
  else
  {
    if (!_routingContextUtilities_getLeaderWeakRef(a1))
    {
      CFTypeRef v10 = *(CFTypeRef *)(a1 + 72);
      if (!v10)
      {
LABEL_16:
        *a2 = v10;
        return;
      }
LABEL_15:
      CFTypeRef v10 = CFRetain(v10);
      goto LABEL_16;
    }
    LeaderWeakRef = _routingContextUtilities_getLeaderWeakRef(a1);
    if (!LeaderWeakRef) {
      return;
    }
    uint64_t v12 = _routingContextUtilities_getContextFromWeakRef((uint64_t)LeaderWeakRef);
    if (v12)
    {
      CFTypeRef v10 = (CFTypeRef)*((void *)v12 + 9);
      if (!v10) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    _routingContextUtilities_removeLeader(a1);
  }
}

const void *_routingContextUtilities_getLeaderWeakRef(uint64_t a1)
{
  if (!a1 || CFArrayGetCount(*(CFArrayRef *)(a1 + 80)) < 1) {
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(a1 + 80);
  return CFArrayGetValueAtIndex(v2, 0);
}

void __FigRouteDiscovererCreate_block_invoke(uint64_t a1)
{
  FigRouteDiscoveryManagerAddDiscoverer(*(void *)(a1 + 32), *(_DWORD *)(*(void *)(a1 + 40) + 40));
  CFArrayRef v2 = NSString;
  uint64_t v3 = [*(id *)(a1 + 48) stringValue];
  uint64_t v4 = *(int *)(*(void *)(a1 + 40) + 40);
  if (v4 > 8) {
    CFArrayRef v5 = 0;
  }
  else {
    CFArrayRef v5 = off_1E57C9288[v4];
  }
  int v6 = FigCFEqual();
  CFIndex v7 = @"YES";
  if (!v6) {
    CFIndex v7 = @"NO";
  }
  uint64_t v8 = [v2 stringWithFormat:@"%@+%@+%@", v3, v5, v7];
  id v9 = FigRouteDiscoveryManagerCopyCachedAudioSessionRouteInformation();
  CFTypeRef v10 = (void *)[v9 objectForKey:v8];
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  uint64_t v34 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2020000000;
  uint64_t v30 = 0;
  if (v10)
  {
    unsigned int v11 = v10;
    id v12 = (id)[v10 objectForKey:@"FigRouteDiscoverer_Endpoints_Key"];
    v32[3] = (uint64_t)v12;
    id v13 = (id)[v11 objectForKey:@"FigRouteDiscoverer_RouteDescriptors_Key"];
    v28[3] = (uint64_t)v13;
  }
  else
  {
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    double v22 = __FigRouteDiscovererCreate_block_invoke_2;
    uint64_t v23 = &unk_1E57C9240;
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v25 = &v27;
    uint64_t v26 = v14;
    uint64_t v24 = &v31;
    if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled()) {
      FigRouteDiscoveryManagerRunBlockOnSerialQueueIfOnEmbeddedPlatforms((uint64_t)v21);
    }
    else {
      v22(v21);
    }
  }
  MEMORY[0x199716E90](*(void *)(*(void *)(a1 + 40) + 64));

  id v15 = (id)v32[3];
  uint64_t v16 = *(void *)(a1 + 40);
  *(void *)(v16 + 88) = v15;

  id v17 = (id)v28[3];
  uint64_t v18 = *(void *)(a1 + 40);
  *(void *)(v18 + 80) = v17;
  MEMORY[0x199716EA0](*(void *)(v18 + 64));

  unsigned int v19 = (const void *)v32[3];
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = (const void *)v28[3];
  if (v20) {
    CFRelease(v20);
  }
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
}

void sub_194D10A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

id FigRouteDiscoveryManagerCopyCachedAudioSessionRouteInformation()
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  if (qword_1E93591B0) {
    uint64_t v0 = (uint64_t)&qword_1E93592A8;
  }
  else {
    uint64_t v0 = 256;
  }
  if (qword_1E93591B0) {
    uint64_t v1 = (uint64_t)&qword_1E93592B8;
  }
  else {
    uint64_t v1 = 272;
  }
  MEMORY[0x199716EE0](*(void *)v0);
  id v2 = *(id *)v1;
  MEMORY[0x199716EF0](*(void *)v0);
  return v2;
}

uint64_t FigRouteDiscoveryManagerAddDiscoverer(uint64_t a1, int a2)
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  uint64_t v3 = qword_1E93591B0;
  if (qword_1E93591B0) {
    uint64_t v4 = discoverManager_getSharedManager_discoveryState;
  }
  else {
    uint64_t v4 = 0;
  }
  CFArrayRef v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  int v6 = *(__CFArray **)&v4[24 * a2 + 24];
  discoveryManager_logDiscoverers((uint64_t)v4, 0);
  if (a2 == 3)
  {
    uint64_t v11 = (uint64_t)&unk_1E93591F0;
    if (!v3) {
      uint64_t v11 = 72;
    }
    id v12 = *(__CFArray **)v11;
    uint64_t v13 = 48;
    if (v3) {
      uint64_t v13 = (uint64_t)&unk_1E93591D8;
    }
    int v6 = *(__CFArray **)v13;
    if (v3) {
      uint64_t v14 = (uint64_t)&qword_1E93592A8;
    }
    else {
      uint64_t v14 = 256;
    }
    MEMORY[0x199716EE0](*(void *)v14);
    CFArrayAppendValue(v12, v5);
    goto LABEL_29;
  }
  if (a2 != 6)
  {
    if (v3) {
      uint64_t v14 = (uint64_t)&qword_1E93592A8;
    }
    else {
      uint64_t v14 = 256;
    }
    MEMORY[0x199716EE0](*(void *)v14);
LABEL_29:
    CFArrayAppendValue(v6, v5);
    MEMORY[0x199716EF0](*(void *)v14);
    goto LABEL_30;
  }
  uint64_t v7 = 0;
  if (v3) {
    uint64_t v8 = (uint64_t)&qword_1E93592A8;
  }
  else {
    uint64_t v8 = 256;
  }
  id v9 = (__CFArray **)(v4 + 24);
  do
  {
    if (v7 != 3 && v7 != 6)
    {
      CFTypeRef v10 = *v9;
      MEMORY[0x199716EE0](*(void *)v8);
      CFArrayAppendValue(v10, v5);
      MEMORY[0x199716EF0](*(void *)v8);
    }
    ++v7;
    v9 += 3;
  }
  while (v7 != 9);
LABEL_30:
  discoveryManager_logDiscoverers((uint64_t)v4, 0);
  if (v5) {
    CFRelease(v5);
  }
  return 0;
}

void __FigRoutingContextRemoteCopyContextForUUID_block_invoke(uint64_t a1)
{
  if (CFDictionaryGetValue((CFDictionaryRef)gFigRoutingContextRemoteObject_0, *(const void **)(a1 + 48))) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigCFWeakReferenceHolderCopyReferencedObject();
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v3 = (CFTypeRef *)(v2 + 24);
  if (!v4)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = routingContext_create(1uLL, *(const __CFDictionary **)(a1 + 64), 1, v3);
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        int key = 0;
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v8 = v7 ? v7 : 0;
        id v9 = *(void (**)(uint64_t, __CFString *, void, void **))(v8 + 48);
        if (v9)
        {
          v9(v6, @"contextUUID", *MEMORY[0x1E4F1CF80], &key);
          if (key)
          {
            CFTypeRef v10 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
            if (v10)
            {
              uint64_t v11 = v10;
              CFDictionarySetValue((CFMutableDictionaryRef)gFigRoutingContextRemoteObject_0, key, v10);
              CFRelease(v11);
            }
            id v12 = *(const void **)(DerivedStorage + 72);
            uint64_t v13 = key;
            *(void *)(DerivedStorage + 72) = key;
            if (v13) {
              CFRetain(v13);
            }
            if (v12) {
              CFRelease(v12);
            }
            if (key) {
              CFRelease(key);
            }
          }
        }
      }
    }
  }
}

void CMSMNotificationUtility_PostSessionRoutingContextDidChange_f(void *a1)
{
  CMSMUtility_PostNotificationToSession(a1, @"RoutingContextDidChange");
}

void __MXDispatchAsyncAndWait_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1997179E0]();
  uint64_t v3 = a1 + 48;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(unsigned int *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == v4) {
      MEMORY[0x199715FA0](a1 + 48, 1, "MXDispatchAsyncAndWait_block_invoke", v5, v6, v7, v8, v9);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(unsigned int *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  if (CMSMDeviceState_IsMediaserverd() && !MX_FeatureFlags_IsAudiomxdEnabled()
    || CMSMDeviceState_IsAudiomxd() && MX_FeatureFlags_IsAudiomxdEnabled())
  {
    if (MXGetSerialQueue_onceToken != -1) {
      dispatch_once(&MXGetSerialQueue_onceToken, &__block_literal_global_60);
    }
    if (gSerialQueue == v10) {
      MEMORY[0x199715FA0](v3, 2, "MXDispatchAsyncAndWait_block_invoke", v11, v12, v13, v15, v14);
    }
  }
}

void sub_194D115C8(void *a1, int a2)
{
  id v4 = objc_begin_catch(a1);
  if (a2 == 2) {
    objc_exception_throw(v4);
  }
  HandleDispatchBlockException(*(void *)(v2 + 72), *(void *)(v2 + 80), *(unsigned int *)(v2 + 104), *(void *)(v2 + 88), *(void *)(v2 + 96));
  __break(1u);
}

void sub_194D115F4(_Unwind_Exception *a1)
{
}

void __CMSessionMgrCopyPickableRoutesForCategoryAndMode_block_invoke(uint64_t a1)
{
  uint64_t v2 = CMSMUtility_CopyMappedMXSessionAudioCategory(*(__CFString **)(a1 + 32));
  uint64_t v3 = CMSMUtility_CopyMappedMXSessionAudioMode(*(__CFString **)(a1 + 40));
  id v4 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)[+[MXSessionManager sharedInstance] getBluetoothCustomizedAlternateCategory:v2 enableBluetooth:1], (uint64_t)v3, 0, 0);
  **(void **)(a1 + 48) = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 0);
  if (v4) {
    CFRelease(v4);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

__CFString *CMSMUtility_CopyMappedMXSessionAudioCategory(__CFString *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (CMSMUtility_CopyMappedMXSessionAudioCategory_onceToken != -1) {
      dispatch_once(&CMSMUtility_CopyMappedMXSessionAudioCategory_onceToken, &__block_literal_global_74_0);
    }
    uint64_t v2 = (__CFString *)[(id)CMSMUtility_CopyMappedMXSessionAudioCategory_sAudioSessionToMXCategoryMap objectForKey:v1];
    if (!v2)
    {
      if ([(__CFString *)v1 hasPrefix:@"AVAudioSessionCategory"]) {
        uint64_t v2 = @"MediaPlayback";
      }
      else {
        uint64_t v2 = v1;
      }
    }
    return v2;
  }
  return result;
}

uint64_t MXSMPerformVolumeOperation(unsigned int a1, __CFString *a2, const void *a3, const void *a4, const __CFString *a5, int a6, uint64_t pid, float *a8, float VolumeDeltaIfRoutedToThirdPartyTV, float a10, float a11, unsigned char *a12, CFTypeRef *a13, uint64_t *a14, unsigned __int8 a15, char a16)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  memset(buffer, 0, sizeof(buffer));
  unsigned int v85 = a1;
  if ((int)pid < 1)
  {
    unsigned int v22 = a1;
    int v21 = 0;
    goto LABEL_5;
  }
  int v21 = proc_name(pid, buffer, 0x20u);
  unsigned int v22 = v85;
  if ((v21 & 0x80000000) == 0) {
LABEL_5:
  }
    buffer[v21] = 0;
  BOOL v23 = a11 != 0.0 && a10 != 0.0;
  if ((a10 != 0.0) != (a11 != 0.0))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  uint64_t VolumeSequenceNumber = 0;
  if (v22 > 0xE || ((1 << v22) & 0x5836) == 0)
  {
LABEL_18:
    if (dword_1E9359C10) {
      return 0;
    }
    if (a2) {
      BOOL v28 = 0;
    }
    else {
      BOOL v28 = v22 == 13;
    }
    if (v28) {
      uint64_t v29 = @"SoloAmbientSound";
    }
    else {
      uint64_t v29 = a2;
    }
    CFTypeRef cf = [+[MXSessionManager sharedInstance] getUncustomizedCategory:v29];
    CFTypeRef v91 = 0;
    if (CMSMVAUtility_IsAdditiveRoutingEnabled())
    {
      id v30 = [+[MXAdditiveRoutingManager sharedInstance] copyActiveVoiceOverSessionPlayingToOnDemandVAD];
      if (v30)
      {
        if (dword_1E9359ED0)
        {
          LODWORD(v92[0]) = 0;
          uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_initWeak((id *)&location, v30);
        [+[MXSessionManager sharedInstance] mxCoreSessionListRemoveSession:objc_loadWeak((id *)&location)];
        [+[MXSessionManager sharedInstance] mxCoreSessionListAddSession:objc_loadWeak((id *)&location)];
        objc_destroyWeak((id *)&location);
      }
    }
    else
    {
      id v30 = 0;
    }
    VolumeButtonClient = CMSessionMgrFindVolumeButtonClient(v85);
    __int16 v90 = 0;
    BOOL v89 = 0;
    float v88 = 0.0;
    *(_OWORD *)os_log_type_t type = 0u;
    long long v96 = 0u;
    BOOL IsAdditiveRoutingEnabled = CMSMVAUtility_IsAdditiveRoutingEnabled();
    char v34 = 1;
    if (v30 && IsAdditiveRoutingEnabled)
    {
      int v35 = PVMGetMappedCategory((void *)[VolumeButtonClient audioCategory]);
      if (([VolumeButtonClient isEqual:v30] & 1) != 0
        || ![v35 isEqualToString:@"Audio/Video"])
      {
        char v34 = 1;
      }
      else
      {
        if ((int)objc_msgSend((id)objc_msgSend(v30, "clientPID"), "intValue") < 1)
        {
          int v36 = 0;
        }
        else
        {
          int v36 = proc_name(objc_msgSend((id)objc_msgSend(v30, "clientPID"), "intValue"), type, 0x20u);
          if (v36 < 0)
          {
            char v34 = 0;
            goto LABEL_41;
          }
        }
        char v34 = 0;
        type[v36] = OS_LOG_TYPE_DEFAULT;
      }
    }
LABEL_41:
    if (v85 == 1) {
      VolumeDeltaIfRoutedToThirdPartyTV = CMSUtility_GetVolumeDeltaIfRoutedToThirdPartyTV(VolumeButtonClient, VolumeDeltaIfRoutedToThirdPartyTV);
    }
    int v37 = a15;
    if (objc_msgSend(VolumeButtonClient, "isActive", v72, v75))
    {
      if (VolumeButtonClient
        && ![VolumeButtonClient currentlyControllingFlags]
        && [VolumeButtonClient hwControlFlags])
      {
        CFArrayRef v38 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_HasSameAudioCategory, @"VoiceOver");
        unsigned int v39 = v38;
        if (v38)
        {
          CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v38, 0);
          if (ValueAtIndex)
          {
            if (([ValueAtIndex currentlyControllingFlags] & 2) != 0)
            {
              [VolumeButtonClient audioCategory];
              if (FigCFEqual()) {
                [VolumeButtonClient isPlaying];
              }
            }
          }
          CFRelease(v39);
        }
        if (v85 <= 0xE && ((1 << v85) & 0x5836) != 0) {
          cmsTryToTakeControl(VolumeButtonClient);
        }
      }
      if (CMSMUtility_ShouldChangeMainVolume(VolumeButtonClient, v85, (uint64_t)cf, (uint64_t)a3))
      {
        vaemUnmuteFullMuteIfMuted();
        CMSMUtility_ChangeMainVolumeForSession(VolumeButtonClient, VolumeDeltaIfRoutedToThirdPartyTV, pid, (uint64_t)buffer, v85, (uint64_t)&v88);
        uint64_t v41 = @"Audio/Video";
        if (@"Audio/Video") {
          goto LABEL_62;
        }
        goto LABEL_63;
      }
      v92[0] = 0;
      PVMCopyCurrentCategoryAndMode(&v91, v92);
      if (!PVMGetEnabled())
      {
        if (!CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()
          && v85 <= 0xE
          && ((1 << v85) & 0x5836) != 0)
        {
          cmsTryToTakeControl(VolumeButtonClient);
        }
        if (v91)
        {
          CFRelease(v91);
          CFTypeRef v91 = 0;
        }
        if (v92[0])
        {
          CFRelease(v92[0]);
          v92[0] = 0;
        }
        PVMCopyCurrentCategoryAndMode(&v91, v92);
      }
      if (!v23) {
        MXSMCancelAnyInProgressVolumeRampIfNeeded((const __CFString *)v91, v92[0], v85);
      }
      if (CMSMVAUtility_IsAdditiveRoutingEnabled()) {
        char v43 = v34;
      }
      else {
        char v43 = 1;
      }
      if ((v43 & 1) == 0)
      {
        id v87 = (id)[v30 audioCategory];
        *(void *)uint64_t v86 = (id)[v30 audioMode];
        if (v85 <= 0xE && ((1 << v85) & 0x5836) != 0)
        {
          [+[MXSessionManager sharedInstance] setVoiceOverVADVolumeNeedsUpdate:1];
        }
        else
        {
          if (dword_1E9359ED0)
          {
            uint64_t v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            int v37 = a15;
          }
          cmsmGetAndSetVolumePreferencesForActiveVolumeClient(v30, VolumeSequenceNumber, v85, 0.0, 0.0, VolumeDeltaIfRoutedToThirdPartyTV, objc_msgSend((id)objc_msgSend(v30, "clientPID", v73, v76), "intValue"), (uint64_t)type, (const __CFString **)&v87, (const void **)v86, cf, a3, a4, a5, 0, &v90, &v89, &v88, (unsigned char *)&v90 + 1,
            a12,
            v37,
            a16);
          uint64_t VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
        }
      }
      cmsmGetAndSetVolumePreferencesForActiveVolumeClient(VolumeButtonClient, VolumeSequenceNumber, v85, a10, a11, VolumeDeltaIfRoutedToThirdPartyTV, pid, (uint64_t)buffer, (const __CFString **)&v91, v92, cf, a3, a4, a5, a6, &v90, &v89, &v88, (unsigned char *)&v90 + 1,
        a12,
        v37,
        a16);
      char v42 = v43 ^ 1;
      goto LABEL_154;
    }
    if (VolumeButtonClient)
    {
      if (CMSMUtility_ShouldChangeMainVolume(VolumeButtonClient, v85, (uint64_t)cf, (uint64_t)a3))
      {
        vaemUnmuteFullMuteIfMuted();
        CMSMUtility_ChangeMainVolumeForSession(VolumeButtonClient, VolumeDeltaIfRoutedToThirdPartyTV, pid, (uint64_t)buffer, v85, (uint64_t)&v88);
        uint64_t v41 = @"Audio/Video";
        if (@"Audio/Video") {
LABEL_62:
        }
          uint64_t v41 = (__CFString *)CFRetain(@"Audio/Video");
LABEL_63:
        char v42 = 0;
        CFTypeRef v91 = v41;
        BOOL v89 = 1;
        goto LABEL_154;
      }
      if (CMSMVAUtility_IsAdditiveRoutingEnabled()) {
        char v44 = v34;
      }
      else {
        char v44 = 1;
      }
      if ((v44 & 1) == 0)
      {
        v92[0] = (id)[v30 audioCategory];
        id v87 = (id)[v30 audioMode];
        if (v85 <= 0xE && ((1 << v85) & 0x5836) != 0) {
          [+[MXSessionManager sharedInstance] setVoiceOverVADVolumeNeedsUpdate:1];
        }
        if (dword_1E9359ED0)
        {
          *(_DWORD *)uint64_t v86 = 0;
          CFNumberRef v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v37 = a15;
        }
        cmsmGetAndSetVolumePreferencesForActiveVolumeClient(v30, VolumeSequenceNumber, v85, 0.0, 0.0, VolumeDeltaIfRoutedToThirdPartyTV, objc_msgSend((id)objc_msgSend(v30, "clientPID", v73, v76), "intValue"), (uint64_t)type, (const __CFString **)v92, (const void **)&v87, cf, a3, a4, a5, 0, &v90, &v89, &v88, (unsigned char *)&v90 + 1,
          a12,
          v37,
          a16);
        uint64_t VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
      }
      if (!v23) {
        MXSMCancelAnyInProgressVolumeRampIfNeeded((const __CFString *)v91, 0, v85);
      }
      cmsmGetAndSetVolumePreferencesForNonActiveVolumeClient(VolumeButtonClient, VolumeSequenceNumber, v85, VolumeDeltaIfRoutedToThirdPartyTV, pid, (uint64_t)buffer, &v91, cf, &v90, &v89, &v88, (unsigned char *)&v90 + 1, a12, v37, a16, a6);
      char v42 = v44 ^ 1;
LABEL_154:
      uint64_t v61 = (void *)v91;
      if (!v37)
      {
        int v62 = FigCFEqual();
        int v37 = v85 == 12 && v62 != 0;
        uint64_t v61 = (void *)v91;
      }
      if (v61)
      {
        CFNumberRef v64 = PVMGetMappedCategory(v61);
        if (v64) {
          CFNumberRef v64 = CFRetain(v64);
        }
        CFTypeRef v91 = v64;
        CFRelease(v61);
      }
      if (!v37 && v89)
      {
        VolumeNotificationPayload = CMSMNotificationUtility_CreateVolumeNotificationPayload(v91, @"ExplicitVolumeChange", 0, VolumeSequenceNumber, a6, v88);
        CMSMNotificationUtility_PostVolumeDidChangeToVolumeButtonClientsWithPayload(VolumeNotificationPayload);
        CMSMNotificationUtility_PostVolumeDidChangeToAVSystemControllersWithPayload((uint64_t)VolumeNotificationPayload);
        if (VolumeNotificationPayload) {
          CFRelease(VolumeNotificationPayload);
        }
      }
      if ((_BYTE)v90) {
        CMSMNotificationUtility_PostUserMutedDidChange((uint64_t)v91, HIBYTE(v90));
      }
      if (v85 <= 0xE && ((1 << v85) & 0x5836) != 0)
      {
        BOOL v66 = a6 != 0;
        if (VolumeButtonClient) {
          int IsPlaying = CMSUtility_GetIsPlaying(VolumeButtonClient);
        }
        else {
          int IsPlaying = 0;
        }
        if (cf) {
          CMSUtility_SendVolumeChangeEventToAudioStatistics(VolumeButtonClient, buffer, (uint64_t)cf, a3, IsPlaying, v66, v88);
        }
        else {
          CMSUtility_SendVolumeChangeEventToAudioStatistics(VolumeButtonClient, buffer, (uint64_t)v91, a3, IsPlaying, v66, v88);
        }
        BOOL v68 = CMSMVAUtility_IsAdditiveRoutingEnabled();
        char v69 = v42 ^ 1;
        if (!v68) {
          char v69 = 1;
        }
        if ((v69 & 1) == 0)
        {
          if (cf) {
            CFTypeRef v70 = cf;
          }
          else {
            CFTypeRef v70 = v91;
          }
          CMSUtility_SendVolumeChangeEventToAudioStatistics(v30, (const char *)type, (uint64_t)v70, a3, objc_msgSend(v30, "isPlaying", v73, v76), v66, v88);
        }
        if (FigCFEqual()) {
          vaemSetBootChimeVolume(v88);
        }
      }
      if (a8) {
        *a8 = v88;
      }
      if (a13)
      {
        *a13 = v91;
      }
      else
      {
        if (!v91)
        {
LABEL_196:
          if (a14) {
            *a14 = VolumeSequenceNumber;
          }

          return 0;
        }
        CFRelease(v91);
      }
      CFTypeRef v91 = 0;
      goto LABEL_196;
    }
    if (cf)
    {
      uint64_t v77 = (__CFString *)CFRetain(cf);
      CFTypeRef v91 = v77;
      goto LABEL_104;
    }
    uint64_t v77 = (__CFString *)cmsmCopyUpdatedVolumeOperationCategoryForNullDefaultCategory(v85);
    CFTypeRef v91 = v77;
    switch(v85)
    {
      case 3u:
        int v46 = 13;
        break;
      case 2u:
        int v46 = 12;
        break;
      case 1u:
        int v46 = 11;
        break;
      default:
LABEL_103:
        CFTypeRef cf = v77;
LABEL_104:
        if (!v23)
        {
          MXSMCancelAnyInProgressVolumeRampIfNeeded(v77, 0, v85);
          uint64_t v77 = (__CFString *)v91;
        }
        uint64_t v94 = 0;
        *(_OWORD *)CFTypeRef v92 = 0u;
        *(_OWORD *)long long v93 = 0u;
        switch(v85)
        {
          case 1u:
            vaemUnmuteFullMuteIfMuted();
            uint64_t v100 = 0;
            long long location = 0u;
            long long v99 = 0u;
            float v49 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            PVMSetVolumePreference(v77, 0, a6, (uint64_t)&location, VolumeSequenceNumber, a15, VolumeDeltaIfRoutedToThirdPartyTV + v49, 0.0, 0.0);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            float v88 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            BOOL v89 = 1;
            MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(1u, a6, v49, v88);
            if (dword_1E9359ED0) {
              goto LABEL_117;
            }
            goto LABEL_153;
          case 2u:
            vaemUnmuteFullMuteIfMuted();
            uint64_t v100 = 0;
            long long location = 0u;
            long long v99 = 0u;
            float v51 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            PVMSetVolumePreference(v77, 0, a6, (uint64_t)&location, VolumeSequenceNumber, a15, VolumeDeltaIfRoutedToThirdPartyTV, 0.0, 0.0);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            float v88 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            BOOL v89 = 1;
            MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(2u, a6, v51, v88);
            if (dword_1E9359ED0)
            {
LABEL_117:
              LODWORD(v87) = 0;
              v86[0] = OS_LOG_TYPE_DEFAULT;
              uint64_t v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              int v37 = a15;
            }
            goto LABEL_153;
          case 3u:
            uint64_t v100 = 0;
            long long location = 0uLL;
            long long v99 = 0uLL;
            float v52 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            goto LABEL_126;
          case 4u:
            v92[1] = a3;
            v93[0] = a5;
            v93[1] = a4;
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            v92[0] = PVMGetMappedEndpointType((uint64_t)&location);
            vaemUnmuteFullMuteIfMuted();
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            float v53 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            PVMSetVolumePreference(v77, 0, a6, (uint64_t)&location, VolumeSequenceNumber, a15, VolumeDeltaIfRoutedToThirdPartyTV + v53, 0.0, 0.0);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            float v88 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(4u, a6, v53, v88);
            if (dword_1E9359ED0) {
              goto LABEL_122;
            }
            goto LABEL_144;
          case 5u:
            v92[1] = a3;
            v93[0] = a5;
            v93[1] = a4;
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            v92[0] = PVMGetMappedEndpointType((uint64_t)&location);
            vaemUnmuteFullMuteIfMuted();
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            float v55 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            PVMSetVolumePreference(v77, 0, a6, (uint64_t)&location, VolumeSequenceNumber, a15, VolumeDeltaIfRoutedToThirdPartyTV, 0.0, 0.0);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            float v88 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(5u, a6, v55, v88);
            if (dword_1E9359ED0) {
              goto LABEL_122;
            }
            goto LABEL_144;
          case 6u:
            v92[1] = a3;
            v93[0] = a5;
            v93[1] = a4;
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            v92[0] = PVMGetMappedEndpointType((uint64_t)&location);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            float v52 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
LABEL_126:
            float v88 = v52;
            goto LABEL_153;
          case 8u:
          case 0xAu:
            if (a12) {
              *a12 = 0;
            }
            goto LABEL_153;
          case 0xBu:
          case 0xCu:
          case 0xDu:
            if (!cf) {
              goto LABEL_153;
            }
            if (a3)
            {
              v92[1] = CFRetain(a3);
              CFTypeRef v47 = a5;
              if (a5) {
                CFTypeRef v47 = CFRetain(a5);
              }
              v93[0] = v47;
              CFTypeRef v48 = a4;
              if (a4) {
                CFTypeRef v48 = CFRetain(a4);
              }
              v93[1] = v48;
            }
            else
            {
              CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration((NSDictionary *)v77, 0, 0, 0, &v92[1], &v93[1], v93);
            }
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            BOOL v82 = PVMIsCategoryAndRouteInfoCurrent(v77, 0, (uint64_t)&location);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            v92[0] = PVMGetMappedEndpointType((uint64_t)&location);
            if (v85 == 12)
            {
              PVMSetEnabled(1);
              if (!a16) {
                vaemUnmuteFullMuteIfMuted();
              }
              long long location = *(_OWORD *)v92;
              long long v99 = *(_OWORD *)v93;
              uint64_t v100 = v94;
              float v59 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
              long long location = *(_OWORD *)v92;
              long long v99 = *(_OWORD *)v93;
              uint64_t v100 = v94;
              PVMSetVolumePreference(v77, 0, a6, (uint64_t)&location, VolumeSequenceNumber, a15, VolumeDeltaIfRoutedToThirdPartyTV, 0.0, 0.0);
              MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xCu, a6, v59, VolumeDeltaIfRoutedToThirdPartyTV);
              if (dword_1E9359ED0)
              {
LABEL_143:
                LODWORD(v87) = 0;
                v86[0] = OS_LOG_TYPE_DEFAULT;
                uint64_t v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                int v37 = a15;
              }
            }
            else
            {
              if (v85 != 11) {
                goto LABEL_147;
              }
              PVMSetEnabled(1);
              vaemUnmuteFullMuteIfMuted();
              long long location = *(_OWORD *)v92;
              long long v99 = *(_OWORD *)v93;
              uint64_t v100 = v94;
              float v58 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
              long long location = *(_OWORD *)v92;
              long long v99 = *(_OWORD *)v93;
              uint64_t v100 = v94;
              PVMSetVolumePreference(v77, 0, a6, (uint64_t)&location, VolumeSequenceNumber, a15, VolumeDeltaIfRoutedToThirdPartyTV + v58, 0.0, 0.0);
              long long location = *(_OWORD *)v92;
              long long v99 = *(_OWORD *)v93;
              uint64_t v100 = v94;
              float v88 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
              MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xBu, a6, v58, v88);
              if (dword_1E9359ED0) {
                goto LABEL_143;
              }
            }
            BOOL v89 = !v82;
LABEL_147:
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            float v88 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            if (v93[0])
            {
              CFRelease(v93[0]);
              v93[0] = 0;
            }
            if (v92[1])
            {
              CFRelease(v92[1]);
              v92[1] = 0;
            }
            if (v93[1]) {
              CFRelease(v93[1]);
            }
LABEL_153:
            char v42 = 0;
            goto LABEL_154;
          case 0xEu:
            v92[1] = a3;
            v93[0] = a5;
            v93[1] = a4;
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            v92[0] = PVMGetMappedEndpointType((uint64_t)&location);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            float v56 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            PVMSetRawVolumePreference(v77, 0, (uint64_t)&location, VolumeSequenceNumber, a15, a6, VolumeDeltaIfRoutedToThirdPartyTV);
            long long location = *(_OWORD *)v92;
            long long v99 = *(_OWORD *)v93;
            uint64_t v100 = v94;
            float v88 = PVMGetVolumePreference(v77, 0, (uint64_t)&location);
            MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xEu, a6, v56, v88);
            if (dword_1E9359ED0)
            {
LABEL_122:
              LODWORD(v87) = 0;
              v86[0] = OS_LOG_TYPE_DEFAULT;
              uint64_t v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              int v37 = a15;
            }
LABEL_144:
            BOOL v89 = 1;
            goto LABEL_153;
          default:
            goto LABEL_153;
        }
    }
    unsigned int v85 = v46;
    goto LABEL_103;
  }
  if (dword_1E9359ED0)
  {
    LODWORD(v92[0]) = 0;
    uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!HIBYTE(word_1E9359BD8))
  {
    uint64_t VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
    unsigned int v22 = v85;
    goto LABEL_18;
  }
  cmsmUpdateEnableSharedAudioRouteSyntheticMute(0, 1, 0, 0, 0, 0);
  return 0;
}

void sub_194D13BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL CMSMVAUtility_IsAdditiveRoutingEnabled()
{
  if (dword_1E9359BA0)
  {
    if (CMSMVAUtility_IsAdditiveRoutingEnabled_onceToken != -1) {
      dispatch_once(&CMSMVAUtility_IsAdditiveRoutingEnabled_onceToken, &__block_literal_global_64);
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return CMSMVAUtility_IsAdditiveRoutingEnabled_isAdditiveRoutingSupportedForHardware
      && MX_FeatureFlags_IsAdditiveRoutingEnabled() != 0;
}

uint64_t MX_FeatureFlags_IsAdditiveRoutingEnabled()
{
  if (MX_FeatureFlags_IsAdditiveRoutingEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsAdditiveRoutingEnabled_onceToken, &__block_literal_global_2_0);
  }
  return MX_FeatureFlags_IsAdditiveRoutingEnabled_additiveRoutingEnabled;
}

uint64_t MXSMCancelAnyInProgressVolumeRampIfNeeded(const __CFString *a1, const void *a2, unsigned int a3)
{
  uint64_t result = MX_FeatureFlags_IsAdaptiveVolumeControlEnabled();
  if (result)
  {
    if (a3 <= 0xE && ((1 << a3) & 0x5836) != 0)
    {
      uint64_t result = vaemVolumeStateGetLastVolumeRampInProgress();
      if (result)
      {
        vaemVolumeStateGetLastVolumeRampCategory();
        MXSMGetVolumeRampCategory(a1, a2);
        uint64_t result = FigCFEqual();
        if (result)
        {
          uint64_t LastVolumeSetVADID = vaemVolumeStateGetLastVolumeSetVADID();
          return CMSMVAUtility_CancelAnyInProgressVolumeRamp(LastVolumeSetVADID, 3);
        }
      }
    }
  }
  return result;
}

uint64_t MX_FeatureFlags_IsAdaptiveVolumeControlEnabled()
{
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsAdaptiveVolumeControlEnabled_onceToken, &__block_literal_global_72);
  }
  return MX_FeatureFlags_IsAdaptiveVolumeControlEnabled_sAdaptiveVolumeControlEnabled;
}

void *PVMGetMappedCategory(void *key)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(sStorage + 168);
  if (v2)
  {
    CFDataRef Value = CFDictionaryGetValue(v2, key);
    if (Value) {
      return (void *)Value;
    }
  }
  return key;
}

uint64_t __FigRouteDiscoveryManagerRunBlockOnSerialQueueIfOnEmbeddedPlatforms_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL PVMGetEnabled()
{
  MEMORY[0x199716E90](*(void *)sStorage);
  BOOL v0 = *(unsigned char *)(sStorage + 8) == 0;
  MEMORY[0x199716EA0](*(void *)sStorage);
  return v0;
}

void __cmsmApplicationStateChangedNotificationCallback_block_invoke(uint64_t a1)
{
  uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
  uint64_t v3 = (const void *)FigCFNumberCreateSInt32();
  if (CMSessionMgrHandleApplicationStateChange((const __CFNumber *)v3, (CFNumberRef)SInt32, *(void *)(a1 + 32)))
  {
    if (SInt32) {
      CFRelease(SInt32);
    }
    if (v3)
    {
      CFRelease(v3);
    }
  }
  else
  {
    id v4 = MXGetSerialQueue();
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __cmsmApplicationStateChangedNotificationCallback_block_invoke_2;
    void v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = v3;
    v6[5] = SInt32;
    MXDispatchAsync((uint64_t)"cmsmApplicationStateChangedNotificationCallback_block_invoke", (uint64_t)"CMSessionManager.m", 17148, 0, 0, v4, (uint64_t)v6);
    uint64_t v5 = *(const void **)(a1 + 32);
    if (v5) {
      CFRelease(v5);
    }
  }
}

CFTypeRef cmsmCopyUpdatedVolumeOperationCategoryForNullDefaultCategory(int a1)
{
  if (CMSMDeviceState_ButtonsCanChangeRingerVolume() || (a1 - 1) >= 6 && a1 != 14)
  {
    CFDictionaryRef v2 = (__CFString *)gDefaultVolumeCategory;
    if (!gDefaultVolumeCategory) {
      return 0;
    }
  }
  else
  {
    CFDictionaryRef v2 = @"Audio/Video";
    if (!@"Audio/Video") {
      return 0;
    }
  }
  return CFRetain(v2);
}

uint64_t CMSMDeviceState_ButtonsCanChangeRingerVolume()
{
  return byte_1E935897E;
}

void __discoveryManager_postNotificationToAllDiscoverers_block_invoke_2(uint64_t a1)
{
}

uint64_t __CMSessionCopyProperty_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    uint64_t v3 = *(void **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = MXCoreSessionCopyProperty(v3, *(CFTypeRef *)(a1 + 48), *(const __CFAllocator **)(a1 + 56), *(void **)(a1 + 64));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CMSMNotificationUtility_PostUserMutedDidChange(uint64_t a1, int a2)
{
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a2 != 0), @"AudioMuted", a1, @"AudioCategory", 0);
  return +[MXSystemController notifyAll:@"DeviceMutedDidChange" payload:v2 dontPostIfSuspended:0];
}

uint64_t systemController_notificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFDictionary *a5)
{
  if (FigCFEqual())
  {
    uint64_t v6 = kMXSystemControllerNotificationKey_SomeClientIsPlayingDidChange_IsPlaying;
  }
  else if (FigCFEqual())
  {
    uint64_t v6 = kMXSystemControllerNotificationKey_NowPlayingAppIsPlayingDidChange_State;
  }
  else if (FigCFEqual())
  {
    uint64_t v6 = kMXSystemControllerNotificationKey_SpeechDetectionDevicePresentDidChange_Present;
  }
  else if (FigCFEqual())
  {
    uint64_t v6 = kMXSystemControllerNotificationKey_CurrentRouteHasVolumeControlDidChange_HasVolumeControl;
  }
  else
  {
    if (!FigCFEqual()) {
      goto LABEL_13;
    }
    uint64_t v6 = kMXSystemControllerNotificationKey_CallIsActiveDidChange_CallActive;
  }
  uint64_t v7 = *v6;
  if (!CFDictionaryGetValue(a5, *v6)) {
    CFDictionarySetValue(a5, v7, (const void *)*MEMORY[0x1E4F1CFC8]);
  }
LABEL_13:
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

CFArrayRef __discoveryManager_updateDiscoveryModeForType_block_invoke(uint64_t a1)
{
  CFIndex v2 = 0;
  v61[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v3 = (const void **)(a1 + 48);
  id v4 = (const void **)(a1 + 64);
  char v44 = (const void **)(a1 + 72);
  CFNumberRef v45 = (const void **)(a1 + 56);
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v40 = *MEMORY[0x1E4F20620];
  uint64_t v41 = (const void **)(a1 + 64);
  while (1)
  {
    CFArrayRef result = *(const __CFArray **)(*(void *)(a1 + 32) + 240);
    if (result) {
      CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    }
    if (v2 >= (uint64_t)result) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 32) + 240), v2);
    uint64_t v7 = CFDictionaryGetValue(ValueAtIndex, @"EndpointManager_RefKey");
    uint64_t v8 = CFDictionaryGetValue(ValueAtIndex, @"EndpointManager_TypeKey");
    CFDictionaryGetValue(ValueAtIndex, @"EndpointManager_SupportedEndpointFeaturesKey");
    if ((*(void *)(a1 + 40) & FigCFNumberGetUInt64()) != 0)
    {
      int v9 = FigCFEqual();
      uint64_t v10 = v3;
      uint64_t v11 = v45;
      if (v9)
      {
        unsigned int DiscoveryModeAsInt = discovererManager_getDiscoveryModeAsInt();
        unsigned int v13 = discovererManager_getDiscoveryModeAsInt();
        uint64_t v10 = v3;
        uint64_t v11 = v45;
        if (DiscoveryModeAsInt < v13)
        {
          uint64_t v14 = *(void *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 80);
          uint64_t v15 = *(const void **)(v14 + 32);
          uint64_t v16 = *(const void **)(a1 + 64);
          *(void *)(v14 + 32) = v16;
          if (v16) {
            CFRetain(v16);
          }
          uint64_t v10 = v4;
          uint64_t v11 = v44;
          if (v15)
          {
            CFRelease(v15);
            uint64_t v10 = v4;
            uint64_t v11 = v44;
          }
        }
      }
      discoveryManager_saveRequestedDiscoveryModeForEndpointManager(ValueAtIndex, *(void *)(a1 + 40), *v10, *v11);
      CFTypeRef v51 = 0;
      CFTypeRef v17 = discoveryManager_copyHighestRequestedDiscoveryModeForEndpointManager(ValueAtIndex, &v51);
      CFDictionaryGetValue(ValueAtIndex, @"EndpointFeature_CurrentDiscoveryModeKey");
      if (!FigCFEqual())
      {
        uint64_t value = 0;
        CFTypeRef v50 = 0;
        uint64_t v18 = (const void *)discoveryManager_copyDiscovererFromWeakRef(v51);
        if (v18)
        {
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          int v21 = *(void (**)(const void *, __CFString *, const __CFAllocator *, CFTypeRef *))(v20 + 48);
          if (v21) {
            v21(v18, @"clientName", allocator, &v50);
          }
          uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v22) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = *(void (**)(const void *, __CFString *, const __CFAllocator *, void **))(v23 + 48);
          if (v24) {
            v24(v18, @"discovererUUID", allocator, &value);
          }
        }
        CFDictionarySetValue(ValueAtIndex, @"EndpointFeature_CurrentDiscoveryModeKey", v17);
        if (dword_1E9359D80)
        {
          char v42 = v18;
          unsigned int v48 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v26 = v48;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
            unsigned int v27 = v26;
          }
          else {
            unsigned int v27 = v26 & 0xFFFFFFFE;
          }
          if (v27)
          {
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "discoveryManager_updateDiscoveryModeForType_block_invoke";
            __int16 v53 = 2114;
            uint64_t v54 = v8;
            __int16 v55 = 2114;
            CFTypeRef v56 = v17;
            __int16 v57 = 2114;
            float v58 = value;
            __int16 v59 = 2114;
            CFTypeRef v60 = v50;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          id v4 = v41;
          uint64_t v18 = v42;
        }
        v61[0] = 0;
        uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
        uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v29) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v31 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v30 + 48);
        if (v31) {
          v31(CMBaseObject, v40, allocator, v61);
        }
        if (FigCFEqual())
        {
          uint64_t v32 = MXGetSerialQueue();
          v46[0] = MEMORY[0x1E4F143A8];
          v46[1] = 3221225472;
          v46[2] = __discoveryManager_updateDiscoveryModeForType_block_invoke_2;
          v46[3] = &__block_descriptor_48_e5_v8__0l;
          v46[4] = v7;
          v46[5] = v17;
          MXDispatchAsyncAndWait((uint64_t)"discoveryManager_updateDiscoveryModeForType_block_invoke", (uint64_t)"FigRouteDiscoveryManager.m", 1631, 0, 0, v32, (uint64_t)v46);
        }
        else
        {
          uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v34) {
            uint64_t v35 = v34;
          }
          else {
            uint64_t v35 = 0;
          }
          CFArrayRef v38 = *(void (**)(const void *, CFTypeRef, void))(v35 + 8);
          if (v38) {
            v38(v7, v17, 0);
          }
        }
        if (v61[0])
        {
          CFRelease(v61[0]);
          v61[0] = 0;
        }
        if (v17 && FigCFEqual())
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (FigCFEqual())
          {
            FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange(v17, Mutable);
          }
          else
          {
            *(void *)CFTypeRef cf = 0;
            if (v18)
            {
              uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v37 = v36 ? v36 : 0;
              unsigned int v39 = *(void (**)(const void *, __CFString *, const __CFAllocator *, unsigned char *))(v37 + 48);
              if (v39) {
                v39(v18, @"OnBehalfOf", allocator, cf);
              }
            }
            if (value) {
              CFDictionarySetValue(Mutable, @"ObjectHash", value);
            }
            if (v50) {
              CFDictionarySetValue(Mutable, @"Client", v50);
            }
            if (*(void *)cf) {
              CFDictionarySetValue(Mutable, @"OnBehalfOf", *(const void **)cf);
            }
            FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange(v17, Mutable);
            if (*(void *)cf) {
              CFRelease(*(CFTypeRef *)cf);
            }
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
        if (v18) {
          CFRelease(v18);
        }
        if (v50)
        {
          CFRelease(v50);
          CFTypeRef v50 = 0;
        }
        if (value) {
          CFRelease(value);
        }
      }
      if (v17) {
        CFRelease(v17);
      }
      if (v51) {
        CFRelease(v51);
      }
    }
    ++v2;
  }
  return result;
}

void discoveryManager_saveRequestedDiscoveryModeForEndpointManager(const __CFDictionary *a1, uint64_t a2, const void *a3, const void *a4)
{
  CFDictionaryGetValue(a1, @"EndpointManager_SupportedEndpointFeaturesKey");
  uint64_t UInt64 = FigCFNumberGetUInt64();
  CFDataRef Value = (__CFArray *)CFDictionaryGetValue(a1, @"EndpointManager_RequestedDiscoveryModesKey");
  CFIndex v10 = 0;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    if (((1 << v10) & a2) != 0 && ((1 << v10) & UInt64) != 0)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, @"Requestor_DiscoveryMode", a3);
      if (a4) {
        CFDictionarySetValue(Mutable, @"Requestor_DiscovererWeakRef", a4);
      }
      CFArraySetValueAtIndex(Value, v10, Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    ++v10;
  }
  while (v10 != 7);
}

void FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange(CFTypeRef cf, CFTypeRef a2)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a2) {
    CFRetain(a2);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  int v5[2] = __FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = cf;
  v5[5] = a2;
  MXDispatchAsync((uint64_t)"FigRouteDiscoveryManagerPowerLogDiscoveryLevelChange", (uint64_t)"FigRouteDiscoveryManager.m", 2610, 0, 0, global_queue, (uint64_t)v5);
}

uint64_t CMSMNotificationUtility_PostVolumeDidChangeToAVSystemControllersWithPayload(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return +[MXSystemController notifyAll:@"SystemVolumeDidChange", a1, 0, v4, v5 payload dontPostIfSuspended];
}

CFPropertyListRef cmsDeepCopyPickedRoute(void *a1)
{
  CFIndex v2 = CMSUtility_CopyNonNULLCategoryForPickingRoutes(a1);
  uint64_t v3 = CMSUtility_CopyNonNULLModeForPickingRoutes(a1);
  uint64_t v4 = (void *)CMSUtility_CopyAllowedPortTypesArrayForPickingRoutes(a1);
  uint64_t v5 = (void *)CMSUtility_CopyActivationContextForPickingRoutes(a1);
  uint64_t v6 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)v2, (uint64_t)v3, v5, v4);
  CFPropertyListRef v7 = cmsmDeepCopyPickedRouteDescription(v6);
  if (v6) {
    CFRelease(v6);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

__CFArray *CMSMUtility_CopyPickableRoutes()
{
  BOOL v0 = CMSUtility_CopyNonNULLCategoryForPickingRoutes(0);
  uint64_t v1 = CMSUtility_CopyNonNULLModeForPickingRoutes(0);
  CFIndex v2 = (void *)CMSUtility_CopyAllowedPortTypesArrayForPickingRoutes(0);
  uint64_t v3 = (void *)CMSUtility_CopyActivationContextForPickingRoutes(0);
  uint64_t v4 = cmsmCopyPickableRoutesForRouteConfiguration((uint64_t)v0, (uint64_t)v1, v3, v2);
  if (v0) {
    CFRelease(v0);
  }
  if (v1) {
    CFRelease(v1);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

NSString *CMSUtility_CopyNonNULLModeForPickingRoutes(void *a1)
{
  if (a1)
  {
    CFArrayRef result = (NSString *)(id)[a1 audioMode];
    if (result) {
      return result;
    }
  }
  else
  {
    CFArrayRef result = CMSMUtility_CopyCurrentlyActiveMode();
    if (result) {
      return result;
    }
  }
  return (NSString *)CFRetain(@"Default");
}

NSString *CMSMUtility_CopyNonNullCurrentlyActiveMode()
{
  CFArrayRef result = CMSMUtility_CopyCurrentlyActiveMode();
  if (!result)
  {
    return (NSString *)CFRetain(@"Default");
  }
  return result;
}

NSString *CMSMUtility_CopyCurrentlyActiveMode()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  BOOL v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isActive]
          && !-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [v5 audioCategory]))
        {
          uint64_t v6 = [+[MXSessionManager sharedInstance] currentAudioMode];
          goto LABEL_12;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

NSString *CMSUtility_CopyNonNULLCategoryForPickingRoutes(void *a1)
{
  if (a1)
  {
    CFArrayRef result = (NSString *)(id)[a1 audioCategory];
    if (result) {
      return result;
    }
  }
  else
  {
    CFArrayRef result = CMSMUtility_CopyCurrentlyActiveCategory();
    if (result) {
      return result;
    }
  }
  return (NSString *)CFRetain(@"Audio/Video");
}

const void *CMSUtility_CopyAllowedPortTypesArrayForPickingRoutes(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = (const void *)[a1 allowedPortTypes];
    if (v1) {
LABEL_3:
    }
      CFRetain(v1);
  }
  else
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    uint64_t v3 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v4 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v9;
      while (2)
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          if ([*(id *)(*((void *)&v8 + 1) + 8 * v7) isActive])
          {
            MEMORY[0x199716E90](gCMSM);
            uint64_t v1 = (const void *)qword_1E9359B90;
            MEMORY[0x199716EA0](gCMSM);
            goto LABEL_15;
          }
          ++v7;
        }
        while (v5 != v7);
        uint64_t v5 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
    uint64_t v1 = 0;
LABEL_15:
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    if (v1) {
      goto LABEL_3;
    }
  }
  return v1;
}

const void *CMSUtility_CopyActivationContextForPickingRoutes(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = (const void *)[a1 activationContext];
    if (v1) {
LABEL_3:
    }
      CFRetain(v1);
  }
  else
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v3 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v4 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v10;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          long long v8 = *(void **)(*((void *)&v9 + 1) + 8 * i);
          if ([v8 isActive] && (objc_msgSend(v8, "currentlyControllingFlags") & 2) != 0)
          {
            uint64_t v1 = (const void *)[v8 activationContext];
            goto LABEL_16;
          }
        }
        uint64_t v5 = [(NSPointerArray *)v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
    uint64_t v1 = 0;
LABEL_16:
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    if (v1) {
      goto LABEL_3;
    }
  }
  return v1;
}

CFPropertyListRef cmsmDeepCopyPickedRouteDescription(const __CFArray *a1)
{
  context = 0;
  if (a1)
  {
    v5.length = CFArrayGetCount(a1);
    v5.id location = 0;
    CFArrayApplyFunction(a1, v5, (CFArrayApplierFunction)cmsmGetPickedRouteApplierFunction, &context);
    uint64_t v2 = context;
  }
  else
  {
    uint64_t v2 = 0;
  }
  return CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 0);
}

uint64_t cmsTryToTakeControl(void *a1)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v2 = [a1 hwControlFlags];
  unsigned int v65 = [a1 hwControlFlags];
  BOOL v3 = -[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [a1 audioCategory]);
  int v4 = [a1 dontTakeOverHardware];
  if (v3 || v4)
  {
    if (dword_1E9359ED0)
    {
LABEL_8:
      unsigned int v79 = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (CMSMVAUtility_IsAdditiveRoutingEnabled() && [a1 isRoutedToOnDemandVAD])
  {
    if (dword_1E9359ED0) {
      goto LABEL_8;
    }
    return 0;
  }
  uint64_t v6 = v2 | HIWORD(v65);
  HIDWORD(v61) = v2;
  if ([a1 prefersToTakeHWControlFlagsFromAnotherSession])
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    uint64_t v7 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v8 = [(NSPointerArray *)v7 countByEnumeratingWithState:&v70 objects:v89 count:16];
    if (!v8) {
      goto LABEL_96;
    }
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v71;
    int v63 = ~v2;
    CFNumberRef v64 = v7;
    while (1)
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v71 != v10) {
          objc_enumerationMutation(v7);
        }
        long long v12 = *(void **)(*((void *)&v70 + 1) + 8 * v11);
        objc_msgSend(v12, "setSavedCurrentlyControllingFlags:", objc_msgSend(v12, "currentlyControllingFlags", v59, v61));
        if (v12 != a1)
        {
          if ([v12 isActive])
          {
            if (!CMSMDeviceState_ItsAHomePod()
              || (CMSUtility_GetCurrentAudioDestination(a1),
                  CMSUtility_GetCurrentAudioDestination(v12),
                  FigCFEqual()))
            {
              if (CMSMVAUtility_IsAdditiveRoutingEnabled() && [v12 isRoutedToOnDemandVAD])
              {
                if (dword_1E9359ED0)
                {
                  unsigned int v79 = 0;
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v14 = v79;
                  if (os_log_type_enabled(v13, type)) {
                    unsigned int v15 = v14;
                  }
                  else {
                    unsigned int v15 = v14 & 0xFFFFFFFE;
                  }
                  if (v15)
                  {
                    uint64_t v16 = [v12 clientName];
                    uint64_t v17 = [a1 clientName];
                    int v81 = 136315650;
                    BOOL v82 = "cmsTryToTakeControl";
                    __int16 v83 = 2114;
                    uint64_t v84 = v16;
                    __int16 v85 = 2114;
                    *(void *)uint64_t v86 = v17;
                    LODWORD(v61) = 32;
                    __int16 v59 = &v81;
                    _os_log_send_and_compose_impl();
                  }
                  uint64_t v7 = v64;
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
              else
              {
                unsigned int v18 = [v12 clientPriority];
                if (v18 > [a1 clientPriority])
                {
                  uint64_t v6 = v6 & ~[v12 currentlyControllingFlags];
                  goto LABEL_53;
                }
                int v19 = [v12 hwControlFlags];
                if ([v12 isPlaying] && (objc_msgSend(v12, "mixesWithEveryone") & 1) == 0)
                {
                  if (CMSUtility_AreSessionsRoutedToTheSamePhysicalDevice(a1, v12)
                    || (CMSUtility_GetCurrentAudioDestination(v12), FigCFEqual()))
                  {
                    int v23 = [v12 currentlyControllingFlags];
                    int v24 = v23 & (v19 | v63);
                    if ([a1 hasAudioMode:@"EchoCancellationInput"]
                      && ![a1 willRouteToOnDemandVADOnActivation])
                    {
                      int v24 = v23 & v63;
                    }
                    uint64_t v6 = v6 & ~v24;
                    goto LABEL_51;
                  }
                }
                else
                {
                  uint64_t v20 = CMSMUtility_GetSharePlayCapableActiveCallSession();
                  if (!v20
                    || v20 == a1
                    || CMSUtility_IsSharePlayCapableMediaSession(a1)
                    || !CMSUtility_IsSharePlayCapableMediaSession(v12))
                  {
                    int v21 = (unsigned __int16)v19;
                    if ([v12 prefersToTakeHWControlFlagsFromAnotherSession])
                    {
                      unsigned int v22 = [a1 clientPriority];
                      if (v22 <= [v12 clientPriority]) {
                        uint64_t v6 = v6 & ~v21;
                      }
                      else {
                        uint64_t v6 = v6;
                      }
                    }
                    else
                    {
                      uint64_t v6 = (unsigned __int16)v19 | v6;
                    }
                    if (([v12 isPlaying] & 1) == 0)
                    {
                      if (objc_msgSend((id)objc_msgSend(v12, "audioCategory"), "isEqualToString:", @"RingtonePreview"))uint64_t v6 = 0; {
                      else
                      }
                        uint64_t v6 = v6;
                    }
LABEL_51:
                    objc_msgSend(v12, "setCurrentlyControllingFlags:", objc_msgSend(v12, "currentlyControllingFlags") & ~v6);
                    [v12 setMustRestoreCurrentlyControllingFlags:1];
                    goto LABEL_53;
                  }
                  if (dword_1E9359ED0)
                  {
                    unsigned int v79 = 0;
                    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                    uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v26 = v79;
                    if (os_log_type_enabled(v25, type)) {
                      unsigned int v27 = v26;
                    }
                    else {
                      unsigned int v27 = v26 & 0xFFFFFFFE;
                    }
                    if (v27)
                    {
                      uint64_t v28 = [v12 clientName];
                      uint64_t v29 = [a1 clientName];
                      int v81 = 136315650;
                      BOOL v82 = "cmsTryToTakeControl";
                      __int16 v83 = 2114;
                      uint64_t v84 = v28;
                      __int16 v85 = 2114;
                      *(void *)uint64_t v86 = v29;
                      LODWORD(v61) = 32;
                      __int16 v59 = &v81;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    uint64_t v7 = v64;
                  }
                  uint64_t v6 = v6 & 0xFFFFFFEF;
                }
              }
            }
          }
          else if ([v12 currentlyControllingFlags])
          {
            [v12 setCurrentlyControllingFlags:0];
          }
        }
LABEL_53:
        ++v11;
      }
      while (v9 != v11);
      uint64_t v30 = [(NSPointerArray *)v7 countByEnumeratingWithState:&v70 objects:v89 count:16];
      uint64_t v9 = v30;
      if (!v30) {
        goto LABEL_96;
      }
    }
  }
  if (CMSMDeviceState_IsVoiceOverOn()
    || CMSystemSoundManager_GetNumberOfSystemSoundsPlayingAudio())
  {
    uint64_t v6 = v2 & 0xFFEF | HIWORD(v65) & 0xFFFFFFEF;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  uint64_t v31 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v32 = [(NSPointerArray *)v31 countByEnumeratingWithState:&v74 objects:v90 count:16];
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = *(void *)v75;
    BOOL v35 = (v65 & 0x100000 | v2 & 0x10) == 0;
    BOOL v36 = (v65 & 0x20000 | v2 & 2) == 0;
    do
    {
      for (uint64_t i = 0; i != v33; ++i)
      {
        if (*(void *)v75 != v34) {
          objc_enumerationMutation(v31);
        }
        CFArrayRef v38 = *(void **)(*((void *)&v74 + 1) + 8 * i);
        CMSUtility_GetCurrentAudioDestination(a1);
        CMSUtility_GetCurrentAudioDestination(v38);
        int v39 = FigCFEqual();
        if (v38 != a1)
        {
          int v40 = v39;
          if ([v38 isActive])
          {
            if (v40)
            {
              if (([v38 currentlyControllingFlags] & 0x10) == 0 || v35) {
                uint64_t v6 = v6;
              }
              else {
                uint64_t v6 = v6 & 0xFFFFFFEF;
              }
              if (([v38 currentlyControllingFlags] & 2) != 0)
              {
                if (v36) {
                  uint64_t v6 = v6;
                }
                else {
                  uint64_t v6 = v6 & 0xFFFFFFFD;
                }
              }
            }
            else if (CMSMVAUtility_DoesCurrentOutputPortSupportSoftwareVolume())
            {
              int v42 = [v38 currentlyControllingFlags] & 0x10;
              if ((v65 & 0x100000) == 0 || v42 == 0) {
                uint64_t v6 = v6;
              }
              else {
                uint64_t v6 = v6 & 0xFFFFFFEF;
              }
            }
          }
        }
      }
      uint64_t v33 = [(NSPointerArray *)v31 countByEnumeratingWithState:&v74 objects:v90 count:16];
    }
    while (v33);
  }
LABEL_96:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if ((HIDWORD(v62) & ~v6) != 0)
  {
    if (dword_1E9359ED0)
    {
      unsigned int v79 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      char v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v45 = v79;
      if (os_log_type_enabled(v44, type)) {
        unsigned int v46 = v45;
      }
      else {
        unsigned int v46 = v45 & 0xFFFFFFFE;
      }
      if (v46)
      {
        uint64_t v47 = [a1 clientName];
        FlagsString = CMSMUtility_GetFlagsString(WORD2(v62));
        float v49 = CMSMUtility_GetFlagsString(HIWORD(v65));
        int v81 = 136316162;
        BOOL v82 = "cmsTryToTakeControl";
        __int16 v83 = 2114;
        uint64_t v84 = v47;
        __int16 v85 = 1024;
        *(_DWORD *)uint64_t v86 = v6;
        *(_WORD *)&v86[4] = 2082;
        *(void *)&v86[6] = FlagsString;
        __int16 v87 = 2082;
        float v88 = v49;
        LODWORD(v62) = 48;
        CFTypeRef v60 = &v81;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    CFTypeRef v50 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v51 = [(NSPointerArray *)v50 countByEnumeratingWithState:&v66 objects:v80 count:16];
    if (v51)
    {
      uint64_t v52 = v51;
      uint64_t v53 = *(void *)v67;
      do
      {
        for (uint64_t j = 0; j != v52; ++j)
        {
          if (*(void *)v67 != v53) {
            objc_enumerationMutation(v50);
          }
          __int16 v55 = *(void **)(*((void *)&v66 + 1) + 8 * j);
          if ([v55 mustRestoreCurrentlyControllingFlags]) {
            objc_msgSend(v55, "setCurrentlyControllingFlags:", objc_msgSend(v55, "savedCurrentlyControllingFlags"));
          }
          [v55 setSavedCurrentlyControllingFlags:0];
        }
        uint64_t v52 = [(NSPointerArray *)v50 countByEnumeratingWithState:&v66 objects:v80 count:16];
      }
      while (v52);
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    uint64_t v6 = 0;
  }
  if (objc_msgSend((id)objc_msgSend(a1, "audioCategory"), "isEqualToString:", @"VoiceOver"))
  {
    BOOL v56 = CMSUtility_IsPlayingToSystemSoundLocalVAD(a1) != 0;
    if (v6) {
      goto LABEL_121;
    }
  }
  else
  {
    BOOL v56 = 0;
    if (v6) {
      goto LABEL_121;
    }
  }
  if (!v56)
  {
    if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled()) {
      cmsmUpdateDeviceAudioFormatConfigIfNeeded(1);
    }
    goto LABEL_122;
  }
LABEL_121:
  cmsTakeControl(a1, v6);
LABEL_122:
  if ([a1 isSharePlayMediaSession]
    && CMSMUtility_IsSharePlayCallSessionActive())
  {
    int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName([a1 audioMode]);
    CMSMVAUtility_SetSharePlayMediaSessionInfoOnVA(VADModeFromFigModeName, [a1 aggregateDeviceClockUID]);
  }
  return v6;
}

void *CMSMUtility_GetControllingRoutingSession()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  BOOL v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v20;
LABEL_3:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v20 != v3) {
        objc_enumerationMutation(v0);
      }
      CFRange v5 = *(void **)(*((void *)&v19 + 1) + 8 * v4);
      if (([v5 currentlyControllingFlags] & 2) != 0) {
        break;
      }
      if (v2 == ++v4)
      {
        uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v19 objects:v24 count:16];
        if (v2) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    CFRange v5 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (v5
    && FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent([v5 routingContextUUID]))
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v6 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v7 = [(NSPointerArray *)v6 countByEnumeratingWithState:&v15 objects:v23 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          uint64_t v12 = [v11 currentlyControllingFlags] & 2;
          if (v11 != v5 && v12 != 0)
          {
            CFRange v5 = v11;
            goto LABEL_24;
          }
        }
        uint64_t v8 = [(NSPointerArray *)v6 countByEnumeratingWithState:&v15 objects:v23 count:16];
      }
      while (v8);
    }
LABEL_24:
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  }
  return v5;
}

uint64_t FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v2 = 0;
    }
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    int v12 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    char v10 = 0;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent_block_invoke;
    void v6[3] = &unk_1E57C6158;
    void v6[6] = v2;
    v6[7] = v1;
    v6[4] = v11;
    v6[5] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent", (uint64_t)"FigRoutingManagerContextUtilities.m", 4913, 0, 0, v4, (uint64_t)v6);
    uint64_t v1 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(v11, 8);
  }
  return v1;
}

void sub_194D16F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t CMSMUtility_IsSiriControllingRoutingAndNotVolume()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  BOOL v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        CFRange v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if (([v5 currentlyControllingFlags] & 2) != 0
          && ([v5 currentlyControllingFlags] & 0x10) == 0
          && ([v5 isTheAssistant] & 1) != 0)
        {
          uint64_t v6 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

const void *MX_RunningBoardServices_CreatePlaybackProcessAssertionForPID(uint64_t a1, __CFString *a2)
{
  if ((int)a1 < 1) {
    return 0;
  }
  if (dword_1E9359EF8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken != -1) {
    dispatch_once(&mx_runningBoardServices_initializeGlobalAssertionProperties_onceToken, &__block_literal_global_50_0);
  }
  MXAssertionForPID = mx_runningBoardServices_createMXAssertionForPID(a1, a2, (uint64_t)&__block_literal_global_40_0);
  CFRange v5 = MXAssertionForPID;
  if (MXAssertionForPID)
  {
    if ([MXAssertionForPID isValid])
    {
      MEMORY[0x199716E90](gProcessAssertionMutex);
      CFArrayAppendValue((CFMutableArrayRef)gProcessAssertionArray, v5);
      MEMORY[0x199716EA0](gProcessAssertionMutex);
      if (FigCFEqual())
      {
        uint64_t v7 = objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a1), "hostProcess"), "pid");
        if (v7)
        {
          uint64_t v8 = v7;
          long long v9 = (__CFString *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:a2];
          long long v10 = v9;
          if (v9)
          {
            [(__CFString *)v9 appendString:@"MediaPlayback"];
            [(__CFString *)v10 appendString:@"ForHostProcess"];
            -[__CFString appendString:](v10, "appendString:", objc_msgSend(NSString, "stringWithFormat:", @".(%d)", v8));
            long long v11 = mx_runningBoardServices_createMXAssertionForPID(v8, v10, 0);
            int v12 = v11;
            if (v11 && [v11 isValid])
            {
              MEMORY[0x199716E90](gProcessAssertionMutex);
              CFDictionarySetValue((CFMutableDictionaryRef)gHostProcessAssertionDictionary, v5, v12);
              MEMORY[0x199716EA0](gProcessAssertionMutex);
            }
          }
        }
      }
    }
  }
  return v5;
}

void __mx_runningBoardServices_initializeMonitoring_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  CFRange v5 = (void *)[a4 state];
  uint64_t v6 = objc_msgSend((id)objc_msgSend(v5, "process"), "pid");
  uint64_t MXApplicationStateForProcessState = mx_runningBoardServices_getMXApplicationStateForProcessState(v5);
  uint64_t v8 = (void *)[MEMORY[0x1E4F28ED0] numberWithInt:v6];
  if ([v8 unsignedIntValue])
  {
    [(id)gApplicationStateCacheLock lock];
    if (dword_1E9359EF8)
    {
      int v26 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    objc_msgSend((id)gApplicationStateCache, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", MXApplicationStateForProcessState, v20, v22), v8);
    [(id)gApplicationStateCacheLock unlock];
  }
  else
  {
    int v26 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    long long v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v11 = (const void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a4, "process", v20, v22), "bundle"), "identifier"), "copy");
  cmsmApplicationStateChangedNotificationCallback(MXApplicationStateForProcessState, v6, v11);
  if (v11) {
    CFRelease(v11);
  }
  FigRoutingManagerApplicationStateChangedNotificationCallback(MXApplicationStateForProcessState, v6);
  if (MXApplicationStateForProcessState == 1)
  {
    uint64_t v12 = [MEMORY[0x1E4F963F8] identifierWithPid:v6];
    if (v12 && (uint64_t v13 = [MEMORY[0x1E4F96430] predicateMatchingIdentifier:v12]) != 0)
    {
      uint64_t v14 = v13;
      [(id)gProcessPredicatesSetLock lock];
      uint64_t v15 = [(id)gProcessPredicatesSet countForObject:v14];
      if (v15)
      {
        uint64_t v16 = v15;
        do
        {
          [(id)gProcessPredicatesSet removeObject:v14];
          --v16;
        }
        while (v16);
        uint64_t v17 = [(id)gProcessPredicatesSet copy];
        [(id)gProcessPredicatesSetLock unlock];
        int v26 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        long long v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        v24[2] = __mx_runningBoardServices_initializeMonitoring_block_invoke_36;
        v24[3] = &unk_1E57CAC30;
        v24[4] = v17;
        [(id)gProcessMonitor updateConfiguration:v24];
      }
      else
      {
        [(id)gProcessPredicatesSetLock unlock];
      }
      mx_runningBoardServices_removePIDFromApplicationStateCache(objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", v6, v21, v23));
    }
    else
    {
      long long v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void cmsmApplicationStateChangedNotificationCallback(int a1, int a2, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v6 = MXGetSerialQueue();
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __cmsmApplicationStateChangedNotificationCallback_block_invoke;
  v7[3] = &__block_descriptor_48_e5_v8__0l;
  int v8 = a1;
  int v9 = a2;
  void v7[4] = cf;
  MXDispatchAsyncAndWait((uint64_t)"cmsmApplicationStateChangedNotificationCallback", (uint64_t)"CMSessionManager.m", 17109, 0, 0, v6, (uint64_t)v7);
}

void FigRoutingManagerApplicationStateChangedNotificationCallback(int a1, int a2)
{
  uint64_t v4 = *((void *)FigRoutingManagerGetSharedManager() + 1);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  int v5[2] = __FigRoutingManagerApplicationStateChangedNotificationCallback_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  int v6 = a2;
  int v7 = a1;
  MXDispatchAsync((uint64_t)"FigRoutingManagerApplicationStateChangedNotificationCallback", (uint64_t)"FigRoutingManager_iOS.m", 99, 0, 0, v4, (uint64_t)v5);
}

void *FigRoutingManagerGetSharedManager()
{
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  if (qword_1E93587F0) {
    return &FigRoutingManagerGetSharedManager_manager;
  }
  else {
    return 0;
  }
}

uint64_t CMSessionMgrHandleApplicationStateChange(const __CFNumber *a1, CFNumberRef number, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t valuePtr = 0;
  if (!number) {
    return 4294954315;
  }
  CFNumberGetValue(number, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  if (a1) {
    CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
  }
  if ((int)valuePtr < 1) {
    return 4294954315;
  }
  CMSessionMgrSetApplicationStateFromPID(valuePtr, HIDWORD(valuePtr));
  CMSMNotificationUtility_PostApplicationStateDidChange(number, a1);
  BOOL BackgroundEntitlement = CMSMUtility_FetchBackgroundEntitlement(valuePtr);
  CMSessionWithDisplayID = CMSMUtility_GetCMSessionWithDisplayID(a3);
  int v8 = MXGetSessionLog();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = [CMSessionWithDisplayID clientName];
    int v23 = valuePtr;
    uint64_t StringForApplicationState = CMSMUtility_GetStringForApplicationState(HIDWORD(valuePtr));
    if (BackgroundEntitlement) {
      long long v10 = "YES";
    }
    else {
      long long v10 = "NO";
    }
    if (CMSUtility_IsLongFormVideoSession(CMSessionWithDisplayID)) {
      long long v11 = "YES";
    }
    else {
      long long v11 = "NO";
    }
    BOOL v12 = [+[MXSessionManager sharedInstance] isLongFormVideoApp:a3];
    *(_DWORD *)buf = 136448770;
    int v26 = "-CMSessionMgr-";
    __int16 v27 = 2082;
    if (v12) {
      uint64_t v13 = "YES";
    }
    else {
      uint64_t v13 = "NO";
    }
    uint64_t v28 = "CMSessionMgrHandleApplicationStateChange";
    __int16 v29 = 1024;
    int v30 = 16940;
    __int16 v31 = 2114;
    uint64_t v32 = a3;
    __int16 v33 = 2114;
    uint64_t v34 = v22;
    __int16 v35 = 2048;
    BOOL v36 = CMSessionWithDisplayID;
    __int16 v37 = 1024;
    int v38 = v23;
    __int16 v39 = 2114;
    uint64_t v40 = StringForApplicationState;
    __int16 v41 = 2082;
    int v42 = v10;
    __int16 v43 = 2082;
    char v44 = v11;
    __int16 v45 = 2082;
    unsigned int v46 = v13;
    _os_log_impl(&dword_194CDF000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Client %{public}@ with session %{public}@ [%p] with pid '%d' is now %{public}@. Background entitlement: %{public}s ActiveLongFormVideoSession: %{public}s IsLongFormVideoApp %{public}s", buf, 0x68u);
  }
  uint64_t result = 0;
  switch(HIDWORD(valuePtr))
  {
    case 1:
      if (!MX_FeatureFlags_IsSessionBasedMutingEnabled())
      {
        uint64_t v15 = +[MXSessionManager sharedInstance];
        [(MXSessionManager *)v15 removeEntryFromMutedBundleIDCache:valuePtr bundleID:0];
      }
      goto LABEL_42;
    case 2:
      [(NSArray *)[+[MXSessionManager sharedInstance] recordingClientPIDs] containsObject:a1];
      if (!CMSMUtility_DoesActiveAirPlayVideoSessionExistForPID(valuePtr))
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSMNotificationUtility_PostStopCommandToMatchingActiveClientsWithPID((uint64_t)a1, 1);
      }
      CMSystemSoundMgr_DeactivateSystemSoundsForPID(valuePtr);
      CMSystemSoundMgr_StopSystemSoundsforPID();
      goto LABEL_42;
    case 4:
      if (BackgroundEntitlement)
      {
        if (CMSMUtility_AnySessionBelongingToPIDIsActiveAndStopsWhenBackgrounded(valuePtr))
        {
          CMSMNotificationUtility_PostPauseCommandToPlayingLockStoppers((uint64_t)a1);
          if (dword_1E9359ED0)
          {
            uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSMNotificationUtility_PostStopCommandToActiveLockStoppers((uint64_t)a1);
          CMSystemSoundMgr_StopSystemSoundsforPID();
        }
      }
      else if (!CMSUtility_SessionWithPIDCanContinueAirPlayingVideoIfScreenIsLocked(valuePtr))
      {
        CMSMNotificationUtility_PostPauseCommandNotificationToMatchingNotStoppedClients((uint64_t)a1);
        if (dword_1E9359ED0)
        {
          long long v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSMNotificationUtility_PostStopCommandToMatchingActiveClientsWithPID((uint64_t)a1, 1);
        CMSystemSoundMgr_StopSystemSoundsforPID();
        int v20 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID];
        if (v20 == valuePtr)
        {
          uint64_t v21 = +[MXNowPlayingAppManager sharedInstance];
          [(MXNowPlayingAppManager *)v21 updateNowPlayingApp:valuePtr session:0 reasonForUpdate:2];
        }
      }
      CMSystemSoundMgr_DeactivateSystemSoundsForPID(valuePtr);
      goto LABEL_42;
    case 8:
      if (BackgroundEntitlement)
      {
        if (!CMSUtility_SessionWithPIDWasLockStopper(valuePtr))
        {
          CMSystemSoundMgr_ActivateSystemSoundsForPID(valuePtr);
          goto LABEL_42;
        }
        buf[0] = 0;
        CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsMatchingLockStopperThatMustResume, (uint64_t)a1, (unint64_t)CMSUtilityApplier_ResumeWaitingLockStopper, (uint64_t)buf);
        if (dword_1E9359ED0) {
          goto LABEL_30;
        }
      }
      else
      {
        CMSMNotificationUtility_PostResumeCommandToMatchingWaitingClients((uint64_t)a1);
        if (dword_1E9359ED0)
        {
LABEL_30:
          long long v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      CMSMNotificationUtility_PostEndInterruptionCommandToMatchingWaitingClients((uint64_t)a1);
LABEL_42:
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void CMSMUtility_ApplyForEachMatchingSession(uint64_t a1, unsigned int (*a2)(uint64_t, void, uint64_t), uint64_t a3, unint64_t a4, uint64_t a5)
{
}

uint64_t CMSMUtility_GetStringForApplicationState(uint64_t a1)
{
  if a1 < 9 && ((0x117u >> a1)) {
    return *((void *)&off_1E57C95A0 + (int)a1);
  }
  else {
    return objc_msgSend(NSString, "stringWithFormat:", @"Unknown(%d)", a1);
  }
}

BOOL CMSMUtility_FetchBackgroundEntitlement(uint64_t a1)
{
  if ((int)a1 < 1) {
    return 0;
  }
  CFArrayRef v1 = (const __CFArray *)MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID(@"UIBackgroundModes", a1);
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 == CFArrayGetTypeID())
  {
    CFIndex Count = CFArrayGetCount(v2);
    v7.id location = 0;
    v7.length = Count;
    if (CFArrayContainsValue(v2, v7, @"voip"))
    {
      BOOL v5 = 1;
    }
    else
    {
      v8.id location = 0;
      v8.length = Count;
      BOOL v5 = CFArrayContainsValue(v2, v8, @"audio") != 0;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  CFRelease(v2);
  return v5;
}

void MX_RunningBoardServices_StartMonitoringForPID(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if ((int)a1 >= 1)
  {
    uint64_t v2 = [MEMORY[0x1E4F963F8] identifierWithPid:a1];
    if (v2 && (uint64_t v3 = [MEMORY[0x1E4F96430] predicateMatchingIdentifier:v2]) != 0)
    {
      uint64_t v4 = v3;
      if (dword_1E9359EF8)
      {
        LODWORD(v24) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (mx_runningBoardServices_initializeMonitoring_onceToken != -1) {
        dispatch_once(&mx_runningBoardServices_initializeMonitoring_onceToken, &__block_literal_global_54);
      }
      objc_msgSend((id)gProcessPredicatesSetLock, "lock", v17, v19);
      CFRange v7 = (void *)[(id)gProcessPredicatesSet copy];
      [(id)gProcessPredicatesSet addObject:v4];
      CFRange v8 = (void *)[(id)gProcessPredicatesSet copy];
      [(id)gProcessPredicatesSetLock unlock];
      if ([v7 isEqualToSet:v8])
      {
      }
      else
      {
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        void v21[2] = __MX_RunningBoardServices_StartMonitoringForPID_block_invoke;
        v21[3] = &unk_1E57CAC30;
        v21[4] = v8;
        [(id)gProcessMonitor updateConfiguration:v21];
        int v9 = (void *)[MEMORY[0x1E4F28ED0] numberWithInt:a1];
        if ([v9 unsignedIntValue])
        {
          [(id)gApplicationStateCacheLock lock];
          if (![(id)gApplicationStateCache objectForKey:v9])
          {
            uint64_t v24 = 0;
            long long v10 = objc_msgSend(MEMORY[0x1E4F963E8], "handleForIdentifier:error:", objc_msgSend(MEMORY[0x1E4F963F8], "identifierWithPid:", objc_msgSend(v9, "unsignedIntValue")), &v24);
            if (!v10 || v24)
            {
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
              uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v15 = *(_DWORD *)type;
              if (os_log_type_enabled(v14, v22)) {
                unsigned int v16 = v15;
              }
              else {
                unsigned int v16 = v15 & 0xFFFFFFFE;
              }
              if (v16)
              {
                int v25 = 136315394;
                int v26 = "mx_runningBoardServices_addPIDToApplicationStateCache";
                __int16 v27 = 2114;
                uint64_t v28 = v9;
                LODWORD(v20) = 22;
                long long v18 = &v25;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            else
            {
              objc_msgSend((id)gApplicationStateCache, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", mx_runningBoardServices_getMXApplicationStateForProcessState(objc_msgSend(v10, "currentState"))), v9);
            }
          }
          objc_msgSend((id)gApplicationStateCacheLock, "unlock", v18, v20);
        }
        else
        {
          LODWORD(v24) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          long long v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v12 = v24;
          if (os_log_type_enabled(v11, type[0])) {
            unsigned int v13 = v12;
          }
          else {
            unsigned int v13 = v12 & 0xFFFFFFFE;
          }
          if (v13)
          {
            int v25 = 136315394;
            int v26 = "mx_runningBoardServices_addPIDToApplicationStateCache";
            __int16 v27 = 2114;
            uint64_t v28 = v9;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    else
    {
      int v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

BOOL CMSUtility_IsAnExtension(void *a1)
{
  CFArrayRef v1 = (const void *)MX_RunningBoardServices_CopyBundleExtensionPointID(a1);
  int v2 = FigCFEqual();
  if (v1) {
    CFRelease(v1);
  }
  return v2 == 0;
}

uint64_t MX_RunningBoardServices_CopyBundleExtensionPointID(void *a1)
{
  CFArrayRef v1 = objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "unsignedIntValue")), "bundle"), "extensionPointIdentifier");
  return [v1 copy];
}

void MX_SystemStatus_PublishRecordingClientsInfo()
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (mxsystemstatus_initialize_onceToken != -1) {
LABEL_64:
  }
    dispatch_once(&mxsystemstatus_initialize_onceToken, &__block_literal_global_24);
  if ((sIsSystemStatusInitialized & 1) == 0)
  {
    LODWORD(v44) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v33 = v44;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
      unsigned int v34 = v33;
    }
    else {
      unsigned int v34 = v33 & 0xFFFFFFFE;
    }
    if (v34)
    {
      *(_DWORD *)CFTypeRef v50 = 136315138;
      *(void *)&v50[4] = "MX_SystemStatus_PublishRecordingClientsInfo";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
  id v0 = CMSMUtility_CopyRecordingClientsInfoForSystemStatus();
  MEMORY[0x199716E90](sSystemStatusMutex);
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v39 = [v0 countByEnumeratingWithState:&v46 objects:v57 count:16];
  CFArrayRef v1 = &kMXSession_IDSMessage_PlayingSessionKey;
  if (!v39) {
    goto LABEL_56;
  }
  uint64_t v38 = *(void *)v47;
  id v37 = v0;
  while (2)
  {
    for (uint64_t i = 0; i != v39; ++i)
    {
      if (*(void *)v47 != v38) {
        objc_enumerationMutation(v0);
      }
      uint64_t v3 = *(void **)(*((void *)&v46 + 1) + 8 * i);
      unsigned int v41 = objc_msgSend((id)objc_msgSend(v3, "objectForKey:", @"PID", v35, v36), "unsignedIntValue");
      int v42 = objc_msgSend((id)objc_msgSend(v3, "objectForKey:", @"Muted"), "BOOLValue");
      if (!MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled())
      {
        uint64_t v17 = (void *)[objc_alloc((Class)getSTActivityAttributionClass()) initWithPID:v41];
        goto LABEL_49;
      }
      uint64_t v4 = [v3 objectForKey:@"ActiveEntityBundleID"];
      uint64_t v5 = [v3 objectForKey:@"AttributedBundleID"];
      uint64_t v6 = [v3 objectForKey:@"AttributedAuditToken"];
      CFRange v7 = (void *)[v3 objectForKey:@"ActiveEntityAuditToken"];
      if (v6) {
        CFRange v7 = (void *)v6;
      }
      if (v7)
      {
        *(void *)&long long v8 = -1;
        *((void *)&v8 + 1) = -1;
        long long v44 = v8;
        long long v45 = v8;
        [v7 getBytes:&v44 length:32];
        *(_OWORD *)os_log_type_t type = v44;
        long long v56 = v45;
        *(void *)CFTypeRef v50 = 0;
        *(void *)&v50[8] = v50;
        *(void *)&v50[16] = 0x2020000000;
        int v9 = (uint64_t (*)(long long *))getBSExecutablePathForAuditTokenSymbolLoc_ptr;
        uint64_t v51 = getBSExecutablePathForAuditTokenSymbolLoc_ptr;
        if (!getBSExecutablePathForAuditTokenSymbolLoc_ptr)
        {
          *(void *)&long long v58 = MEMORY[0x1E4F143A8];
          *((void *)&v58 + 1) = 3221225472;
          *(void *)&long long v59 = __getBSExecutablePathForAuditTokenSymbolLoc_block_invoke;
          *((void *)&v59 + 1) = &unk_1E57C5B30;
          CFTypeRef v60 = (void (*)(uint64_t))v50;
          __getBSExecutablePathForAuditTokenSymbolLoc_block_invoke((uint64_t)&v58);
          int v9 = *(uint64_t (**)(long long *))(*(void *)&v50[8] + 24);
        }
        _Block_object_dispose(v50, 8);
        if (!v9)
        {
          __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
          __break(1u);
          goto LABEL_64;
        }
        long long v58 = *(_OWORD *)type;
        long long v59 = v56;
        uint64_t v10 = v9(&v58);
        uint64_t v40 = (void *)[objc_alloc((Class)getSTAttributedEntityClass()) initWithExecutablePath:v10];
        if (v5)
        {
LABEL_16:
          *(void *)&long long v58 = 0;
          *((void *)&v58 + 1) = &v58;
          *(void *)&long long v59 = 0x3052000000;
          *((void *)&v59 + 1) = __Block_byref_object_copy__5;
          CFTypeRef v60 = __Block_byref_object_dispose__5;
          long long v11 = (objc_class *)getSTExecutableIdentityClass_softClass;
          uint64_t v61 = getSTExecutableIdentityClass_softClass;
          if (!getSTExecutableIdentityClass_softClass)
          {
            *(void *)CFTypeRef v50 = MEMORY[0x1E4F143A8];
            *(void *)&v50[8] = 3221225472;
            *(void *)&v50[16] = __getSTExecutableIdentityClass_block_invoke;
            uint64_t v51 = &unk_1E57C5B30;
            *(void *)uint64_t v52 = &v58;
            __getSTExecutableIdentityClass_block_invoke((uint64_t)v50);
            long long v11 = *(objc_class **)(*((void *)&v58 + 1) + 40);
          }
          _Block_object_dispose(&v58, 8);
          unsigned int v12 = (void *)[[v11 alloc] initWithApplicationBundleIdentifier:v5];
          uint64_t v13 = [v3 objectForKey:@"Website"];
          if (dword_1E9359ED0)
          {
            LODWORD(v44) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v15 = v44;
            if (os_log_type_enabled(v14, type[0])) {
              unsigned int v16 = v15;
            }
            else {
              unsigned int v16 = v15 & 0xFFFFFFFE;
            }
            if (v16)
            {
              *(_DWORD *)CFTypeRef v50 = 136316162;
              *(void *)&v50[4] = "MX_SystemStatus_PublishRecordingClientsInfo";
              *(_WORD *)&v50[12] = 2114;
              *(void *)&v50[14] = v4;
              *(_WORD *)&v50[22] = 2114;
              uint64_t v51 = (void *)v10;
              *(_WORD *)uint64_t v52 = 2114;
              *(void *)&v52[2] = v5;
              __int16 v53 = 1024;
              unsigned int v54 = v41;
              LODWORD(v36) = 48;
              __int16 v35 = v50;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            id v0 = v37;
            CFArrayRef v1 = &kMXSession_IDSMessage_PlayingSessionKey;
          }
          id v21 = objc_alloc((Class)getSTAttributedEntityClass());
          if (v13) {
            os_log_type_t v22 = (void *)[v21 initWithExecutableIdentity:v12 website:v13];
          }
          else {
            os_log_type_t v22 = (void *)[v21 initWithExecutableIdentity:v12];
          }
          uint64_t v17 = (void *)[objc_alloc((Class)getSTActivityAttributionClass()) initWithAttributedEntity:v22 activeEntity:v40];
          if (v17) {
            goto LABEL_48;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v40 = 0;
        uint64_t v10 = 0;
        if (v5) {
          goto LABEL_16;
        }
      }
      if (dword_1E9359ED0)
      {
        LODWORD(v44) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        long long v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v19 = v44;
        if (os_log_type_enabled(v18, type[0])) {
          unsigned int v20 = v19;
        }
        else {
          unsigned int v20 = v19 & 0xFFFFFFFE;
        }
        if (v20)
        {
          *(_DWORD *)CFTypeRef v50 = 136315650;
          *(void *)&v50[4] = "MX_SystemStatus_PublishRecordingClientsInfo";
          *(_WORD *)&v50[12] = 2114;
          *(void *)&v50[14] = v4;
          *(_WORD *)&v50[22] = 2114;
          uint64_t v51 = (void *)v10;
          LODWORD(v36) = 32;
          __int16 v35 = v50;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      os_log_type_t v22 = (void *)[objc_alloc((Class)getSTAttributedEntityClass()) initWithExecutablePath:v10];
      uint64_t v17 = (void *)[objc_alloc((Class)getSTActivityAttributionClass()) initWithAttributedEntity:v22];
      unsigned int v12 = 0;
      if (v17) {
        goto LABEL_48;
      }
LABEL_40:
      if (dword_1E9359ED0)
      {
        LODWORD(v44) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v24 = v44;
        if (os_log_type_enabled(v23, type[0])) {
          unsigned int v25 = v24;
        }
        else {
          unsigned int v25 = v24 & 0xFFFFFFFE;
        }
        if (v25)
        {
          *(_DWORD *)CFTypeRef v50 = 136315394;
          *(void *)&v50[4] = "MX_SystemStatus_PublishRecordingClientsInfo";
          *(_WORD *)&v50[12] = 1024;
          *(_DWORD *)&v50[14] = v41;
          LODWORD(v36) = 18;
          __int16 v35 = v50;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v17 = (void *)[objc_alloc((Class)getSTActivityAttributionClass()) initWithPID:v41];
LABEL_48:

LABEL_49:
      if (v42)
      {
        [(id)v1[193] addObject:v17];
      }
      else
      {
        objc_msgSend((id)objc_msgSend(v3, "objectForKey:", @"MininumMicrophoneIndicatorLightOnTime"), "doubleValue");
        double v27 = v26;
        *(void *)&long long v58 = 0;
        *((void *)&v58 + 1) = &v58;
        *(void *)&long long v59 = 0x3052000000;
        *((void *)&v59 + 1) = __Block_byref_object_copy__5;
        CFTypeRef v60 = __Block_byref_object_dispose__5;
        uint64_t v28 = (objc_class *)getSTMediaStatusDomainMicrophoneRecordingAttributionClass_softClass;
        uint64_t v61 = getSTMediaStatusDomainMicrophoneRecordingAttributionClass_softClass;
        if (!getSTMediaStatusDomainMicrophoneRecordingAttributionClass_softClass)
        {
          *(void *)CFTypeRef v50 = MEMORY[0x1E4F143A8];
          *(void *)&v50[8] = 3221225472;
          *(void *)&v50[16] = __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke;
          uint64_t v51 = &unk_1E57C5B30;
          *(void *)uint64_t v52 = &v58;
          __getSTMediaStatusDomainMicrophoneRecordingAttributionClass_block_invoke((uint64_t)v50);
          uint64_t v28 = *(objc_class **)(*((void *)&v58 + 1) + 40);
        }
        _Block_object_dispose(&v58, 8);
        uint64_t v29 = (void *)[[v28 alloc] initWithActivityAttribution:v17 maximumHistoryAccessed:v27];
        [(id)sRecordingClientsInfo addObject:v29];
      }
    }
    uint64_t v39 = [v0 countByEnumeratingWithState:&v46 objects:v57 count:16];
    if (v39) {
      continue;
    }
    break;
  }
LABEL_56:
  uint64_t v30 = objc_msgSend((id)sRecordingClientsInfo, "copy", v35, v36);
  uint64_t v31 = [(id)v1[193] copy];
  [(id)sRecordingClientsInfo removeAllObjects];
  [(id)v1[193] removeAllObjects];

  MEMORY[0x199716EA0](sSystemStatusMutex);
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = __MX_SystemStatus_PublishRecordingClientsInfo_block_invoke;
  v43[3] = &unk_1E57C96F0;
  v43[4] = v30;
  v43[5] = v31;
  MXDispatchAsync((uint64_t)"MX_SystemStatus_PublishRecordingClientsInfo", (uint64_t)"MX_SystemStatus.m", 279, 0, 0, gSerializationQueue, (uint64_t)v43);
}

void sub_194D195D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

uint64_t MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    int v2 = objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a2), "bundle"), "bundleInfoValueForKey:", a1);
    return [v2 copy];
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
}

uint64_t MXGetSessionLog()
{
  if (MXGetSessionLog_onceToken != -1) {
    dispatch_once(&MXGetSessionLog_onceToken, &__block_literal_global_4_2);
  }
  return MXGetSessionLog__log;
}

void CMSessionMgrSetApplicationStateFromPID(int a1, unsigned int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = a2;
  int valuePtr = a1;
  if (a2 <= 8 && ((1 << a2) & 0x117) != 0)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    CFNumberRef v4 = CFNumberCreate(v2, kCFNumberSInt32Type, &v8);
    CFNumberRef v5 = v4;
    if (v3) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      CMSMUtility_ApplyForEachMatchingSession(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsSameClient, (uint64_t)v3, (unint64_t)CMSUtilityApplier_SetApplicationState, (uint64_t)v4);
      goto LABEL_11;
    }
    if (v3)
    {
LABEL_11:
      CFRelease(v3);
      if (!v5) {
        return;
      }
      goto LABEL_12;
    }
    if (v4) {
LABEL_12:
    }
      CFRelease(v5);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void CMSMNotificationUtility_PostApplicationStateDidChange(void *a1, const void *a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CFNumberRef v4 = @"ApplicationState";
  BOOL v5 = a1 != 0;
  BOOL v6 = @"ApplicationState" != 0;
  CFIndex v7 = v5 & v6;
  if (v5 && v6)
  {
    unsigned int v8 = a1;
  }
  else
  {
    CFNumberRef v4 = 0;
    unsigned int v8 = 0;
  }
  keys[0] = v4;
  values = v8;
  CFDictionaryRef v9 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, v7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a2) {
    CFRetain(a2);
  }
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v10 = MXGetNotificationSenderQueue();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __CMSMNotificationUtility_PostApplicationStateDidChange_block_invoke;
  void v11[3] = &__block_descriptor_56_e5_v8__0l;
  v11[4] = a2;
  void v11[5] = v9;
  v11[6] = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostApplicationStateDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1080, 0, 0, v10, (uint64_t)v11);
}

void CMSMNotificationUtility_PostEndInterruptionCommandToMatchingWaitingClients(uint64_t a1)
{
}

uint64_t CMSUtility_SessionWithPIDWasLockStopper(int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFAllocatorRef v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        CFIndex v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1
          && ([v7 stopsWhenDeviceLocks] & 1) != 0)
        {
          uint64_t v8 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v8;
}

uint64_t getSTAttributedEntityClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  BOOL v6 = __Block_byref_object_copy__5;
  CFIndex v7 = __Block_byref_object_dispose__5;
  uint64_t v0 = getSTAttributedEntityClass_softClass;
  uint64_t v8 = getSTAttributedEntityClass_softClass;
  if (!getSTAttributedEntityClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getSTAttributedEntityClass_block_invoke;
    v2[3] = &unk_1E57C5B30;
    v2[4] = &v3;
    __getSTAttributedEntityClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_194D19D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getSTActivityAttributionClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  BOOL v6 = __Block_byref_object_copy__5;
  CFIndex v7 = __Block_byref_object_dispose__5;
  uint64_t v0 = getSTActivityAttributionClass_softClass;
  uint64_t v8 = getSTActivityAttributionClass_softClass;
  if (!getSTActivityAttributionClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getSTActivityAttributionClass_block_invoke;
    v2[3] = &unk_1E57C5B30;
    v2[4] = &v3;
    __getSTActivityAttributionClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_194D19E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSystemSoundMgr_DeactivateSystemSoundsForPID(uint64_t result)
{
  if (gCMSS_1)
  {
    uint64_t v1 = result;
    MEMORY[0x199716E90](gCMSS_12);
    for (uint64_t i = gCMSS_0; i; uint64_t i = *(void *)i)
    {
      if (*(_DWORD *)(i + 12) == v1)
      {
        if (*(unsigned char *)(i + 16) && *(unsigned char *)(i + 18))
        {
          uint64_t v3 = (void *)*(unsigned int *)(i + 8);
          int v4 = v1;
          if ((v3 - 1103) <= 2)
          {
            cmsmRemoveSystemSoundAudioCategoriesThatMixIn(v1);
            uint64_t v3 = (void *)*(unsigned int *)(i + 8);
            int v4 = *(_DWORD *)(i + 12);
          }
          cmsmPrewarmAudioForSSID(0, v3, v4);
          *(unsigned char *)(i + 18) = 0;
        }
        if (*(unsigned char *)(i + 17) && *(unsigned char *)(i + 19))
        {
          cmsmPrewarmVibeForSSID(0, *(unsigned int *)(i + 8), *(_DWORD *)(i + 12));
          *(unsigned char *)(i + 19) = 0;
        }
        CMSMSleep_ReleasePrewarmIdleSleepPreventor(*(_DWORD *)(i + 8), *(_DWORD *)(i + 12));
      }
    }
    JUMPOUT(0x199716EA0);
  }
  return result;
}

uint64_t CMSMUtility_AnySessionBelongingToPIDIsActiveAndStopsWhenBackgrounded(int a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFAllocatorRef v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        CFIndex v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1
          && [v7 stopsWhenDeviceLocks]
          && ([v7 isActive] & 1) != 0)
        {
          uint64_t v8 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v8;
}

void CMSMNotificationUtility_PostResumeCommandToMatchingWaitingClients(uint64_t a1)
{
}

uint64_t FigSystemControllerCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (FigSystemControllerGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&FigSystemControllerGetClassID_sRegisterOnce, &FigSystemControllerGetClassID_sClassID, (dispatch_function_t)systemController_getClassID);
  }
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    return v7;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 12) = a2;
  CFDictionaryRef v9 = [[MXSystemController alloc] initWithPID:a2];
  *(void *)uint64_t DerivedStorage = v9;
  if (v9)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2020000000;
    int v17 = 0;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __fsc_createPropertyMappingDicts_block_invoke;
    block[3] = &unk_1E57C5B30;
    void block[4] = &v14;
    if (fsc_createPropertyMappingDicts_onceToken != -1) {
      dispatch_once(&fsc_createPropertyMappingDicts_onceToken, block);
    }
    uint64_t v10 = *((unsigned int *)v15 + 6);
    _Block_object_dispose(&v14, 8);
    if (!v10)
    {
      CMSessionGetNotificationCenter(v11);
      uint64_t v10 = FigNotificationCenterAddWeakListeners();
      if (!v10)
      {
        objc_msgSend(*(id *)DerivedStorage, "setAttributeForKey:andValue:", @"ClientAuditToken", objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", a3, 32));
        *a4 = 0;
      }
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v10;
}

uint64_t HandleNoReplySystemControllerMessage(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1997179E0]();
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v6 = OpCode;
  }
  else
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t v5 = LookupSystemControllerByObjectIDForConnection();
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 4294951138;
    }
  }
  return v6;
}

uint64_t HandleSystemControllerMessage(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1997179E0]();
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode)
  {
    uint64_t v7 = OpCode;
  }
  else
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t v6 = LookupSystemControllerByObjectIDForConnection();
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 4294951138;
    }
  }
  return v7;
}

uint64_t LookupSystemControllerByObjectIDForConnection()
{
  uint64_t result = FigXPCServerLookupAndRetainAssociatedObject();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigSystemControllerGetTypeID()
{
  if (FigSystemControllerGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&FigSystemControllerGetClassID_sRegisterOnce, &FigSystemControllerGetClassID_sClassID, (dispatch_function_t)systemController_getClassID);
  }
  uint64_t v0 = FigSystemControllerGetClassID_sClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t systemController_CopyPickableRoutesForCategoryAndMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CMSessionMgrCopyPickableRoutesForCategoryAndMode(a2, a3, a4);
}

uint64_t CMSessionMgrCopyPickableRoutesForCategoryAndMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v6 = MXGetSerialQueue();
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __CMSessionMgrCopyPickableRoutesForCategoryAndMode_block_invoke;
    v8[3] = &__block_descriptor_56_e5_v8__0l;
    os_log_type_t v8[4] = a1;
    v8[5] = a2;
    void v8[6] = a3;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrCopyPickableRoutesForCategoryAndMode", (uint64_t)"CMSessionManager.m", 15092, 0, 0, v6, (uint64_t)v8);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t systemController_SetProperty(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  CFDataRef Value = CFDictionaryGetValue((CFDictionaryRef)gFigSystemControllerSetPropertyMapping, a2);
  if (Value)
  {
    uint64_t v7 = Value;
    uint64_t v8 = *DerivedStorage;
    return [v8 setAttributeForKey:v7 andValue:a3];
  }
  else if (FigCFEqual())
  {
    return HDMILatencyMgr_UpdateMeasuredHDMILatency(a3);
  }
  else
  {
    return 4294954512;
  }
}

void sub_194D1BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t systemController_PerformVolumeOperation(float a1, float a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13, char a14)
{
  uint64_t v29 = -1;
  unsigned int v24 = *(void **)CMBaseObjectGetDerivedStorage();
  LOBYTE(v28) = a14 != 0;
  *(float *)&double v25 = a2;
  *(float *)&double v26 = a3;
  return [v24 performVolumeOperation:a5 volume:a6 category:a7 mode:a8 routeName:a9 routeDeviceIdentifier:a10 routeSubtype:COERCE_DOUBLE(__PAIR64__(DWORD1(a12) rampUpDuration:LODWORD(a1))) rampDownDuration:v25 outVolume:v26 outSequenceNumber:a11 outMuted:&v29 outCategoryCopy:a12 outModeCopy:a13 retainFullMute:v28];
}

void sub_194D1C0DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

const UInt8 *_routingContextUtilities_getContextFromWeakRef(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFDataRef v1 = (const __CFData *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v1) {
    return 0;
  }
  CFDataRef v2 = v1;
  BytePtr = CFDataGetBytePtr(v1);
  CFRelease(v2);
  return BytePtr;
}

void CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange()
{
  if (CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_onceToken != -1) {
    dispatch_once(&CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_onceToken, &__block_literal_global_12_0);
  }
  PlayingSessionsDescriptiouint64_t n = CMSMNotificationUtility_CreatePlayingSessionsDescription();
  id v1 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", PlayingSessionsDescription, @"Sessions", 0);

  [(id)CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_sLastNotificationPayloadLock lock];
  if (([(id)CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_sLastNotificationPayload isEqualToDictionary:v1] & 1) == 0)
  {
    +[MXSystemController notifyAll:@"SomeSessionIsPlayingDidChange" payload:v1 dontPostIfSuspended:0];

    CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_sLastNotificationPayload = (uint64_t)v1;
  }
  [(id)CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange_sLastNotificationPayloadLock unlock];
}

void cmsTakeControl(void *a1, int a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (([a1 dontTakeOverHardware] & 1) == 0)
  {
    uint64_t v4 = qword_1E9359B78;
    uint64_t v5 = [a1 audioCategory];
    uint64_t v6 = [a1 audioMode];
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CFDictionaryRef v9 = *(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, CFTypeRef *))(v8 + 16);
    if (v9) {
      v9(v4, 0x1EE5F3628, *MEMORY[0x1E4F1CF80], v5, v6, 0, &cf);
    }
    if ([a1 hasInput] && (CFTypeRef)*MEMORY[0x1E4F1CFC8] == cf) {
      a2 &= ~2u;
    }
    if (!CMSUtility_IsPlayingToDefaultVAD(a1) && ![a1 clientPriority]) {
      a2 &= ~2u;
    }
    if (CMSMVAUtility_IsAdditiveRoutingEnabled()
      && [a1 willRouteToOnDemandVADOnActivation])
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend(a1, "setCurrentlyControllingFlags:", 0, v35, v39);
      a2 = 0;
    }
    if (([a1 prefersToTakeHWControlFlagsFromAnotherSession] & 1) == 0
      && CMSystemSoundManager_GetNumberOfSystemSoundsPlayingAudio())
    {
      a2 &= ~0x10u;
    }
    if ([a1 isIDSMXCoreSession] && a2)
    {
      uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a2 = 0;
    }
    objc_msgSend(a1, "setCurrentlyControllingFlags:", objc_msgSend(a1, "currentlyControllingFlags", v35, v39) | a2);
    if (dword_1E9359ED0)
    {
      long long v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()) {
      CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 11);
    }
    if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled()) {
      cmsmUpdateDeviceAudioFormatConfigIfNeeded(0);
    }
    if ((objc_msgSend(a1, "currentlyControllingFlags", v36, v40) & 2) != 0)
    {
      if ([a1 waitingForRemoteInterruptionDoneIdentifier])
      {
        CMSM_IDSConnection_WaitForReply((const void *)[a1 waitingForRemoteInterruptionDoneIdentifier]);
        [a1 setWaitingForRemoteInterruptionDoneIdentifier:0];
      }
      if ([+[MXSessionManager sharedInstance] carPlayIsConnected])
      {
        if (dword_1E9359ED0)
        {
          long long v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(a1, 0))
        {
          CFArrayRef v14 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
          uint64_t A2DPPort = cmsmGetA2DPPort(v14);
          if (v14) {
            CFRelease(v14);
          }
          if (cmsmShouldRequestOwnershipOnSharedAudioRoute(a1, A2DPPort))
          {
            if (!vaeRequestOwnershipOnBTPort(A2DPPort)) {
              [a1 setAddSharedAudioRouteToRoutablePorts:1];
            }
          }
          else if (vaeGetBTPortOwnsSharedAudioConnection(A2DPPort))
          {
            CFStringRef v17 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(A2DPPort);
            BOOL IsSystemAudioRoutingToDeviceID = FigRoutingManagerUtilities_IsSystemAudioRoutingToDeviceID(v17);
            if (!IsSystemAudioRoutingToDeviceID
              || !vaeDoesBTPortSupportInEarDetection(A2DPPort)
              || CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(A2DPPort))
            {
              [a1 setAddSharedAudioRouteToRoutablePorts:IsSystemAudioRoutingToDeviceID];
            }
            if (v17) {
              CFRelease(v17);
            }
          }
        }
        else if (dword_1E9359ED0)
        {
          uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()
          && [a1 shouldAttemptSmartRoutingHijackForMusicApp])
        {
          CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 10);
        }
      }
      cmsSetCategoryOnPVMAndAudioDevice(a1, (objc_msgSend(a1, "currentlyControllingFlags", v37, v41) & 0x10) != 0, 0);
      if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
      {
        AudioObjectID CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
        BOOL IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)[a1 audioCategory]);
        [a1 preferredHardwareFormat];
        if (vaemIsNotCurrentDeviceFormat(CurrentOutputVADID, IsCategoryInputOnly))
        {
          uint64_t v24 = CMSUtility_GetCurrentOutputVADID(a1);
          if (vaemSetDeviceFormat(v24, (const void *)[a1 preferredHardwareFormat], 0))
          {
            double v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
      if (objc_msgSend(a1, "disallowAudioFormatChanges", v38, v42))
      {
        uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v21 = v20 ? v20 : 0;
        double v26 = *(void (**)(uint64_t, uint64_t, void))(v21 + 56);
        if (v26) {
          v26(CMBaseObject, 0x1EE5F3348, *MEMORY[0x1E4F1CFD0]);
        }
      }
      if ([a1 hasInput]
        && FigVAEndpointManagerGetPropertyBoolean(qword_1E9359B78, 0x1EE5F3208))
      {
        if ([a1 desiredInputGainScalar])
        {
          objc_msgSend((id)objc_msgSend(a1, "desiredInputGainScalar"), "floatValue");
          FigVAEndpointManagerSetPropertyFloat32(v27, qword_1E9359B78, 0x1EE5F3328);
        }
        else
        {
          vaemSetInputGainFromPreferenceIfPresent();
        }
      }
      if ([a1 orientationOverride] == 5)
      {
        if ([a1 preferredStereoInputOrientation]) {
          vaemSetStereoInputOrientation([a1 preferredStereoInputOrientation]);
        }
      }
      else
      {
        vaemSetOrientationOverride([a1 orientationOverride]);
        uint64_t v44 = 0;
        LODWORD(v44) = [a1 orientationOverride];
        uint64_t v45 = 0;
        vaemSetCaptureOrientationOverride();
      }
    }
    [+[MXAdditiveRoutingManager sharedInstance] sendActiveSessionsInfoToVA];
    CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
    if (([a1 currentlyControllingFlags] & 0x10) != 0
      || !CMSUtility_IsPlayingToDefaultVAD(a1))
    {
      if ([a1 wasMutedBeforeInterruption]) {
        MXCoreSessionSetProperty((int)a1, @"UserMuted");
      }
      [a1 setWasMutedBeforeInterruption:0];
      if (([a1 doesntActuallyPlayAudio] & 1) == 0) {
        CMSUtility_UpdatePlaybackVolume(a1, 0.0, 0.0);
      }
    }
    if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled()
      && (([a1 currentlyControllingFlags] & 2) != 0
       || [+[MXSessionManager sharedInstance] shouldSetDeviceFormatAndSampleRate:a1]|| FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1)&& CMSUtility_IsPlayingToSystemSoundRemoteVAD(a1)))
    {
      int ShouldSessionSetInputSampleRate = CMSUtility_ShouldSessionSetInputSampleRate(a1);
      if (ShouldSessionSetInputSampleRate) {
        [a1 preferredInputSampleRate];
      }
      else {
        [a1 preferredOutputSampleRate];
      }
      double v31 = v30;
      unsigned int PreferredIOBufferFrames = CMSUtility_GetPreferredIOBufferFrames(a1, v29);
      double PreferredIOBufferDuration = CMSUtility_GetPreferredIOBufferDuration(a1, v33);
      cmsSetDeviceSampleRateAndBufferSize(a1, PreferredIOBufferFrames, ShouldSessionSetInputSampleRate != 0, v31, *(float *)&PreferredIOBufferDuration);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_onceToken != -1) {
    dispatch_once(&CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_onceToken, &__block_literal_global_48);
  }
  if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()) {
    id v0 = [+[MXSessionManager sharedInstance] copyHighestPriorityActiveSession:0x1EE5EBF48 deviceIdentifier:0];
  }
  else {
    id v0 = CMSM_CopyHighestPriorityLocalPlayingSession(1);
  }
  id v1 = v0;
  uint64_t LocalSessionPriority = CMSM_GetLocalSessionPriority(v0, 1);
  id v3 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v4 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:LocalSessionPriority];
  if ([v1 displayID]) {
    uint64_t v5 = (__CFString *)[v1 displayID];
  }
  else {
    uint64_t v5 = @"Unknown";
  }
  uint64_t v6 = objc_msgSend(v3, "initWithObjectsAndKeys:", v4, @"HighestArbitrationPriorityForTipi_AudioScore", v5, @"HighestArbitrationPriorityForTipi_BundleID", 0);
  [(id)CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_sOldHighestArbitrationPriorityForTipiInfoLock lock];
  if (([(id)CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_sOldHighestArbitrationPriorityForTipiInfo isEqualToDictionary:v6] & 1) == 0)
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    +[MXSystemController notifyAll:@"HighestArbitrationPriorityForTipiDidChange", v6, 0, v8, v9 payload dontPostIfSuspended];

    CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_sOldHighestArbitrationPriorityForTipiInfo = v6;
  }
  [(id)CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded_sOldHighestArbitrationPriorityForTipiInfoLock unlock];
}

uint64_t MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()
{
  if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsSmartRoutingOnActivationEnabled_onceToken, &__block_literal_global_47);
  }
  return MX_FeatureFlags_IsSmartRoutingOnActivationEnabled_sSmartRoutingOnActivationEnabled;
}

id CMSM_CopyHighestPriorityLocalPlayingSession(int a1)
{
  CFDataRef v2 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsPlaying, 0);
  if (!v2) {
    return 0;
  }
  CFArrayRef v3 = v2;
  if (CFArrayGetCount(v2) < 1)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = 0;
    CFIndex v5 = 0;
    unsigned int v6 = 100;
    do
    {
      CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v5);
      unsigned int LocalSessionPriority = CMSM_GetLocalSessionPriority(ValueAtIndex, a1);
      if (LocalSessionPriority != 100 && LocalSessionPriority > v6)
      {
        unsigned int v10 = LocalSessionPriority;
        if (([ValueAtIndex currentlyControllingFlags] & 2) != 0)
        {
          if (CMSUtility_IsPlayingToDefaultVAD(ValueAtIndex))
          {

            id v4 = ValueAtIndex;
            unsigned int v6 = v10;
          }
        }
      }
      ++v5;
    }
    while (v5 < CFArrayGetCount(v3));
  }
  CFRelease(v3);
  return v4;
}

__CFArray *CMSMUtility_CopyMatchingSessions(uint64_t a1, unsigned int (*a2)(uint64_t, void, uint64_t), uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v7 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v8 = [(NSPointerArray *)v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v15;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          long long v12 = *(const void **)(*((void *)&v14 + 1) + 8 * v11);
          if (!a2 || a2(a1, *(void *)(*((void *)&v14 + 1) + 8 * v11), a3)) {
            CFArrayAppendValue(Mutable, v12);
          }
          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = [(NSPointerArray *)v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

uint64_t CMSUtilityPredicate_IsPlaying(uint64_t a1, void *a2)
{
  return [a2 isPlaying];
}

uint64_t CMSUtilityPredicate_IsActive(uint64_t a1, void *a2)
{
  return [a2 isActive];
}

uint64_t MX_FeatureFlags_IsAudioFormatArbitrationEnabled()
{
  if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsAudioFormatArbitrationEnabled_onceToken, &__block_literal_global_63_0);
  }
  return MX_FeatureFlags_IsAudioFormatArbitrationEnabled_sAudioFormatArbitrationEnabled;
}

BOOL FigVAEndpointManagerGetPropertyBoolean(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unsigned int v6 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v5 + 48);
  if (!v6) {
    return 0;
  }
  v6(CMBaseObject, a2, *MEMORY[0x1E4F1CF80], &cf);
  if (!cf) {
    return 0;
  }
  BOOL v7 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  CFRelease(cf);
  return v7;
}

uint64_t cmsmUpdateDeviceAudioFormatConfigIfNeeded(int a1)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (vaemGetDisallowAudioFormatChanges()) {
    return 4294954309;
  }
  int v71 = a1;
  id v4 = [+[MXSessionManager sharedInstance] copyMXCoreSessionList];
  *(_OWORD *)uint64_t v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:v78 objects:v89 count:16];
  unsigned int v6 = &qword_1E9359000;
  if (!v5)
  {
    uint64_t v8 = 0;
    long long v77 = 0;
    uint64_t v9 = 0;
    long long v73 = 0;
    goto LABEL_98;
  }
  uint64_t v7 = v5;
  uint64_t v8 = 0;
  long long v77 = 0;
  uint64_t v9 = 0;
  long long v73 = 0;
  uint64_t v10 = *(void *)v79;
  id v72 = v4;
  uint64_t v75 = *(void *)v79;
  do
  {
    uint64_t v11 = 0;
    uint64_t v74 = v7;
    do
    {
      if (*(void *)v79 != v10) {
        objc_enumerationMutation(v4);
      }
      long long v12 = *(void **)(*(void *)&v78[8] + 8 * v11);
      if (objc_msgSend(v12, "isActive", v69, v70) && CMSUtility_IsPlayingToDefaultVAD(v12))
      {
        long long v76 = (void *)[v12 preferredHardwareFormat];
        if (![v12 isPlaying]
          || (long long v13 = v73, [v12 doesntActuallyPlayAudio]))
        {
          if ([v12 doesntActuallyPlayAudio]) {
            long long v13 = v77;
          }
          else {
            long long v13 = v9;
          }
        }
        long long v14 = v12;
        if (!v13) {
          goto LABEL_54;
        }
        if (*((_DWORD *)v6 + 948))
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v10 = v75;
        }
        long long v16 = objc_msgSend(v13, "preferredHardwareFormat", v69, v70);
        if ([v76 isEqualToString:v16])
        {
          int v17 = [v13 preferredNumberOfOutputChannels];
          if (v17 > (int)[v12 preferredNumberOfOutputChannels])
          {
            if (*((_DWORD *)v6 + 948)) {
              goto LABEL_49;
            }
LABEL_37:
            long long v14 = v13;
            goto LABEL_54;
          }
          int v18 = [v12 preferredNumberOfOutputChannels];
          if (v18 > (int)[v13 preferredNumberOfOutputChannels])
          {
            long long v14 = v12;
            if (!*((_DWORD *)v6 + 948)) {
              goto LABEL_54;
            }
LABEL_52:
            uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            long long v14 = v12;
            unsigned int v6 = &qword_1E9359000;
LABEL_53:
            uint64_t v10 = v75;
            goto LABEL_54;
          }
          [v13 preferredOutputSampleRate];
          double v20 = v19;
          [v12 preferredOutputSampleRate];
          if (v20 <= v21)
          {
            [v12 preferredOutputSampleRate];
            double v23 = v22;
            [v13 preferredOutputSampleRate];
            if (v23 > v24)
            {
              long long v14 = v12;
              if (!*((_DWORD *)v6 + 948)) {
                goto LABEL_54;
              }
              goto LABEL_52;
            }
            if (([v13 currentlyControllingFlags] & 2) != 0)
            {
              if (*((_DWORD *)v6 + 948)) {
                goto LABEL_49;
              }
            }
            else
            {
              char v25 = [v12 currentlyControllingFlags];
              int v26 = *((_DWORD *)v6 + 948);
              if ((v25 & 2) != 0)
              {
                long long v14 = v12;
                if (!v26) {
                  goto LABEL_54;
                }
                goto LABEL_52;
              }
              if (v26) {
                goto LABEL_49;
              }
            }
          }
          else if (*((_DWORD *)v6 + 948))
          {
LABEL_49:
            float v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            long long v14 = v13;
            goto LABEL_53;
          }
          long long v14 = v13;
          goto LABEL_54;
        }
        if ([v16 isEqualToString:@"MATAtmos"])
        {
          if (!*((_DWORD *)v6 + 948)) {
            goto LABEL_37;
          }
          goto LABEL_49;
        }
        if ([v76 isEqualToString:@"MATAtmos"])
        {
          long long v14 = v12;
          if (!*((_DWORD *)v6 + 948)) {
            goto LABEL_54;
          }
          goto LABEL_52;
        }
        if ([v16 isEqualToString:@"AC-3"])
        {
          if (*((_DWORD *)v6 + 948)) {
            goto LABEL_49;
          }
          goto LABEL_37;
        }
        long long v14 = v13;
        if ([v76 isEqualToString:@"AC-3"])
        {
          long long v14 = v12;
          if (*((_DWORD *)v6 + 948)) {
            goto LABEL_52;
          }
        }
LABEL_54:
        if (objc_msgSend(v12, "isPlaying", v69, v70)
          && ![v12 doesntActuallyPlayAudio])
        {
          long long v73 = v14;
          if (!v8) {
            goto LABEL_64;
          }
        }
        else
        {
          int v29 = [v12 doesntActuallyPlayAudio];
          double v30 = v77;
          if (v29) {
            double v30 = v14;
          }
          long long v77 = v30;
          if (!v29) {
            uint64_t v9 = v14;
          }
          if (!v8)
          {
LABEL_64:
            uint64_t v8 = v12;
            uint64_t v7 = v74;
            goto LABEL_92;
          }
        }
        if (*((_DWORD *)v6 + 948))
        {
          double v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          id v4 = v72;
          unsigned int v6 = &qword_1E9359000;
          uint64_t v10 = v75;
        }
        if ((objc_msgSend(v8, "currentlyControllingFlags", v69, v70) & 2) != 0)
        {
          uint64_t v7 = v74;
          if (!*((_DWORD *)v6 + 948)) {
            goto LABEL_92;
          }
          goto LABEL_90;
        }
        uint64_t v7 = v74;
        if (([v12 currentlyControllingFlags] & 2) != 0)
        {
          if (!*((_DWORD *)v6 + 948)) {
            goto LABEL_82;
          }
          goto LABEL_88;
        }
        int v32 = [v8 preferredIOBufferFrames];
        if (v32 > (int)[v12 preferredIOBufferFrames])
        {
          if (!*((_DWORD *)v6 + 948)) {
            goto LABEL_92;
          }
          goto LABEL_90;
        }
        int v33 = [v12 preferredIOBufferFrames];
        if (v33 > (int)[v8 preferredIOBufferFrames])
        {
          if (!*((_DWORD *)v6 + 948)) {
            goto LABEL_82;
          }
          goto LABEL_88;
        }
        [v8 preferredIOBufferDuration];
        float v35 = v34;
        [v12 preferredIOBufferDuration];
        if (v35 > v36)
        {
          if (!*((_DWORD *)v6 + 948)) {
            goto LABEL_92;
          }
          goto LABEL_90;
        }
        [v12 preferredIOBufferDuration];
        float v38 = v37;
        [v8 preferredIOBufferDuration];
        if (v38 <= v39)
        {
          [v8 preferredOutputSampleRate];
          double v41 = v40;
          [v12 preferredOutputSampleRate];
          if (v41 <= v42)
          {
            [v12 preferredOutputSampleRate];
            double v44 = v43;
            [v8 preferredOutputSampleRate];
            int v45 = *((_DWORD *)v6 + 948);
            if (v44 <= v46)
            {
              if (v45) {
                goto LABEL_90;
              }
            }
            else
            {
              if (v45) {
                goto LABEL_88;
              }
              uint64_t v8 = v12;
            }
          }
          else
          {
            if (!*((_DWORD *)v6 + 948)) {
              goto LABEL_92;
            }
LABEL_90:
            long long v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            unsigned int v6 = &qword_1E9359000;
          }
        }
        else
        {
          if (!*((_DWORD *)v6 + 948))
          {
LABEL_82:
            uint64_t v8 = v12;
            goto LABEL_92;
          }
LABEL_88:
          long long v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v8 = v12;
          unsigned int v6 = &qword_1E9359000;
        }
        uint64_t v10 = v75;
      }
LABEL_92:
      ++v11;
    }
    while (v7 != v11);
    uint64_t v49 = [v4 countByEnumeratingWithState:v78 objects:v89 count:16];
    uint64_t v7 = v49;
  }
  while (v49);
LABEL_98:

  if (*((_DWORD *)v6 + 948))
  {
    CFTypeRef v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v51 = v77;
  if (v9) {
    uint64_t v51 = v9;
  }
  if (v73) {
    uint64_t v52 = v73;
  }
  else {
    uint64_t v52 = v51;
  }
  if (!v52 || !v8)
  {
    uint64_t v2 = vaemSetDeviceFormat([+[MXSessionManager sharedInstance] defaultVADID], @"LPCM", 0);
    if (v2)
    {
      unsigned int v82 = 0;
      v78[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v62 = v82;
      if (os_log_type_enabled(v61, v78[0])) {
        unsigned int v63 = v62;
      }
      else {
        unsigned int v63 = v62 & 0xFFFFFFFE;
      }
      if (v63)
      {
        int v83 = 136315650;
        uint64_t v84 = "cmsmUpdateDeviceAudioFormatConfigIfNeeded";
        __int16 v85 = 1024;
        int v86 = v2;
        __int16 v87 = 2114;
        float v88 = @"LPCM";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return v2;
  }
  AudioObjectID CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(v52);
  BOOL IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)[v52 audioCategory]);
  [v52 preferredHardwareFormat];
  if (!vaemIsNotCurrentDeviceFormat(CurrentOutputVADID, IsCategoryInputOnly))
  {
    uint64_t v2 = 0;
LABEL_121:
    if (v71) {
      goto LABEL_125;
    }
    return v2;
  }
  uint64_t v55 = CMSUtility_GetCurrentOutputVADID(v52);
  uint64_t v2 = vaemSetDeviceFormat(v55, (const void *)[v52 preferredHardwareFormat], 0);
  if (!v2) {
    goto LABEL_121;
  }
  long long v56 = v8;
  unsigned int v82 = 0;
  v78[0] = OS_LOG_TYPE_DEFAULT;
  __int16 v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v58 = v82;
  if (os_log_type_enabled(v57, v78[0])) {
    unsigned int v59 = v58;
  }
  else {
    unsigned int v59 = v58 & 0xFFFFFFFE;
  }
  if (v59)
  {
    uint64_t v60 = [v52 preferredHardwareFormat];
    int v83 = 136315650;
    uint64_t v84 = "cmsmUpdateDeviceAudioFormatConfigIfNeeded";
    __int16 v85 = 1024;
    int v86 = v2;
    __int16 v87 = 2114;
    float v88 = (__CFString *)v60;
    LODWORD(v70) = 28;
    long long v69 = &v83;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v8 = v56;
  if (v71)
  {
LABEL_125:
    int ShouldSessionSetInputSampleRate = CMSUtility_ShouldSessionSetInputSampleRate(v8);
    if (ShouldSessionSetInputSampleRate) {
      [v8 preferredInputSampleRate];
    }
    else {
      [v8 preferredOutputSampleRate];
    }
    double v66 = v65;
    unsigned int v67 = objc_msgSend(v8, "preferredIOBufferFrames", v69, v70);
    [v8 preferredIOBufferDuration];
    cmsSetDeviceSampleRateAndBufferSize(v8, v67, ShouldSessionSetInputSampleRate != 0, v66, v68);
  }
  return v2;
}

uint64_t _VAEndpointManager_CopyPropertyForRouteConfiguration(uint64_t a1, const void *a2, uint64_t a3, NSDictionary *a4, uint64_t a5, uint64_t a6, void *a7)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294950586;
  if (a2 && a7)
  {
    *a7 = 0;
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F20608]))
    {
      long long v12 = vaemCopyAvailableEndpointsForRouteConfiguration(&cfstr_AudioVideo.isa, &cfstr_Default.isa, 0, 0);
    }
    else if (CFEqual(a2, @"VAEM_InputDeviceIsAvailableForRouteConfiguration"))
    {
      int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a4);
      int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a5);
      unsigned int v15 = vaemSystemHasAudioInputDeviceForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName);
      long long v16 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      if (v15) {
        long long v16 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      }
      long long v12 = (void *)CFRetain(*v16);
    }
    else
    {
      uint64_t result = CFEqual(a2, @"VAEM_ActiveInputRouteNamesForRouteConfiguration");
      if (!result) {
        return result;
      }
      long long v12 = vaemCopyActiveInputRouteNamesForRouteConfiguration(a4, a5, 0);
    }
    int v17 = v12;
    uint64_t result = 0;
    *a7 = v17;
  }
  return result;
}

CFArrayRef vaemSystemHasAudioInputDeviceForRouteConfiguration(int a1, int a2)
{
  CFArrayRef result = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(a1, a2, 0, 1);
  if (result)
  {
    CFArrayRef v3 = result;
    CFIndex Count = CFArrayGetCount(result);
    CFRelease(v3);
    return (const __CFArray *)(Count > 0);
  }
  return result;
}

BOOL vaemIsNotCurrentDeviceFormat(AudioObjectID a1, int a2)
{
  CFTypeRef cf = 0;
  vaemCopyDeviceFormat(a1, a2, &cf);
  int v2 = FigCFEqual();
  if (cf) {
    CFRelease(cf);
  }
  return v2 == 0;
}

uint64_t vaemGetDisallowAudioFormatChanges()
{
  return byte_1E9358B94;
}

void vaemCopyDeviceFormat(AudioObjectID a1, int a2, CFTypeRef *a3)
{
  if (a3)
  {
    int v6 = 0;
    vaemGetDeviceFormatID(a1, a2, &v6);
    if (!v4)
    {
      if (v6 > 1836343850)
      {
        if (v6 == 1836343851 || v6 == 1836344107)
        {
          uint64_t v5 = kMXSessionAudioHardwareFormat_MATAtmos;
          goto LABEL_12;
        }
      }
      else
      {
        if (v6 == 1667326771)
        {
          uint64_t v5 = kMXSessionAudioHardwareFormat_AC3;
          goto LABEL_12;
        }
        if (v6 == 1819304813)
        {
          uint64_t v5 = kMXSessionAudioHardwareFormat_LPCM;
LABEL_12:
          *a3 = CFRetain(*v5);
          return;
        }
      }
      FigSignalErrorAt();
    }
  }
}

void vaemGetDeviceFormatID(AudioObjectID a1, int a2, _DWORD *a3)
{
  AudioObjectID outData = 0;
  if (a3 && !vaemGetStream0(a1, a2, &outData) && outData)
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    vaemGetStreamASBD(outData, (uint64_t)v5);
    if (!v4) {
      *a3 = DWORD2(v5[0]);
    }
  }
}

uint64_t vaemGetStream0(AudioObjectID a1, int a2, _DWORD *outData)
{
  if (a2 == 1) {
    AudioObjectPropertyScope v4 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v4 = 1869968496;
  }
  inAddress.AudioObjectPropertySelector mSelector = 1937009955;
  inAddress.mScope = v4;
  inAddress.mElement = 0;
  UInt32 v6 = 4;
  *AudioObjectID outData = 0;
  uint64_t result = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &v6, outData);
  if (result) {
    *AudioObjectID outData = 0;
  }
  return result;
}

double vaemGetStreamASBD(AudioObjectID a1, uint64_t a2)
{
  uint64_t v8 = 0;
  long long outData = 0u;
  long long v7 = 0u;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747073666D74;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 40;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    double result = *(double *)&outData;
    long long v4 = v7;
    *(_OWORD *)a2 = outData;
    *(_OWORD *)(a2 + 16) = v4;
    *(void *)(a2 + 32) = v8;
  }
  return result;
}

BOOL vaeGetBTPortOwnsSharedAudioConnection(AudioObjectID inObjectID)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  inAddress.mElement = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0;
  if (inObjectID)
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F626F736163;
    if (AudioObjectHasProperty(inObjectID, &inAddress))
    {
      UInt32 ioDataSize = 4;
      unsigned int outData = 0;
      if (!AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        BOOL v3 = outData != 0;
        goto LABEL_7;
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  BOOL v3 = 0;
LABEL_7:
  if (dword_1E9359ED0)
  {
    unsigned int outData = 0;
    LOBYTE(ioDataSize) = 0;
    long long v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v5 = outData;
    if (os_log_type_enabled(v4, (os_log_type_t)ioDataSize)) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 & 0xFFFFFFFE;
    }
    if (v6)
    {
      long long v7 = "YES";
      long long v14 = "vaeGetBTPortOwnsSharedAudioConnection";
      int v13 = 136315650;
      if (!v3) {
        long long v7 = "NO";
      }
      __int16 v15 = 1024;
      AudioObjectID v16 = inObjectID;
      __int16 v17 = 2082;
      int v18 = v7;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v3;
}

uint64_t cmsmShouldRequestOwnershipOnSharedAudioRoute(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a2 || !vaeDoesPortSupportMultipleConnections(a2)) {
    return 0;
  }
  if (CMSM_IDSConnection_IsNearbyPairedDevicePresent())
  {
    if (a1)
    {
      memset(outData, 0, sizeof(outData));
      unsigned int PartnersForPort = vaeGetPartnersForPort(a2, outData);
      CFArrayRef v5 = cmsmCopyWirelessPortsArrayForRouteConfiguration((NSDictionary *)[a1 audioCategory], objc_msgSend(a1, "audioMode"), (const void *)objc_msgSend(a1, "allowedPortTypes"));
      CFArrayRef v6 = v5;
      if (v5)
      {
        uint64_t Count = CFArrayGetCount(v5);
        UInt32 = (const void *)FigCFNumberCreateUInt32();
        if (Count >= 1)
        {
          v22.id location = 0;
          v22.length = Count;
          if (CFArrayContainsValue(v6, v22, UInt32))
          {
LABEL_8:
            unsigned int LocalSessionPriority = CMSM_GetLocalSessionPriority(a1, 0);
            unsigned int HighestRemotePlayingSessionPriority = CMSM_GetHighestRemotePlayingSessionPriority();
            uint64_t ShouldSetupForCoordinatedInterruptions = 0;
            if (LocalSessionPriority < 0x65 || LocalSessionPriority < HighestRemotePlayingSessionPriority)
            {
LABEL_25:
              if (!UInt32) {
                goto LABEL_27;
              }
              goto LABEL_26;
            }
            if (([a1 isIDSMXCoreSession] & 1) == 0)
            {
              uint64_t ShouldSetupForCoordinatedInterruptions = cmsmShouldSetupForCoordinatedInterruptions(a2, 1);
              if (!UInt32)
              {
LABEL_27:
                if (v6) {
                  CFRelease(v6);
                }
                return ShouldSetupForCoordinatedInterruptions;
              }
LABEL_26:
              CFRelease(UInt32);
              goto LABEL_27;
            }
          }
          else if (PartnersForPort)
          {
            int v18 = UInt32;
            uint64_t v13 = 0;
            BOOL v14 = 1;
            unint64_t v15 = PartnersForPort;
            while (1)
            {
              AudioObjectID v16 = (const void *)FigCFNumberCreateUInt32();
              v23.id location = 0;
              v23.length = Count;
              int v17 = CFArrayContainsValue(v6, v23, v16);
              if (v16) {
                CFRelease(v16);
              }
              if (v17) {
                break;
              }
              BOOL v14 = ++v13 < v15;
              if (v15 == v13)
              {
                uint64_t ShouldSetupForCoordinatedInterruptions = 0;
                UInt32 = v18;
                if (v18) {
                  goto LABEL_26;
                }
                goto LABEL_27;
              }
            }
            UInt32 = v18;
            if (v14) {
              goto LABEL_8;
            }
          }
        }
      }
      else
      {
        UInt32 = (const void *)FigCFNumberCreateUInt32();
      }
      uint64_t ShouldSetupForCoordinatedInterruptions = 0;
      goto LABEL_25;
    }
    if (cmsmShouldSetupForCoordinatedInterruptions(a2, 0)
      && !CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()
      && !CMSM_IDSServer_IsAutomaticOwnershipTransferToPhoneTimerCreated())
    {
      return CMSM_IDSConnection_IsWaitingForGizmoPlayingInfo() == 0;
    }
    return 0;
  }
  if (vaeGetBTPortOwnsSharedAudioConnection(a2)) {
    return 0;
  }
  if (!vaeDoesBTPortSupportInEarDetection(a2)) {
    return 1;
  }
  return CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(a2);
}

uint64_t cmsmGetA2DPPort(CFArrayRef theArray)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!theArray || (uint64_t Count = CFArrayGetCount(theArray)) == 0)
  {
LABEL_6:
    uint64_t v5 = 0;
LABEL_7:
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return v5;
  }
  CFIndex v3 = 0;
  while (1)
  {
    valuePtr[0] = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v3);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, valuePtr);
    if (vaeGetPortTypeFromPortID(valuePtr[0]) == 1885892674) {
      break;
    }
    if (Count == ++v3) {
      goto LABEL_6;
    }
  }
  uint64_t v5 = valuePtr[0];
  if (!valuePtr[0]) {
    goto LABEL_7;
  }
  return v5;
}

CFArrayRef CMSM_IDSConnection_CopySharedAudioRoutePortIDs()
{
  if (qword_1E9358FB8) {
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)qword_1E9358FB8);
  }
  else {
    return 0;
  }
}

__CFArray *CMSUtility_CopyDeviceHintsForSession(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v25 = 0u;
  memset(bytes, 0, sizeof(bytes));
  long long v23 = 0u;
  long long v21 = 0u;
  memset(v22, 0, sizeof(v22));
  memset(v20, 0, sizeof(v20));
  preferredBufferDuratiouint64_t n = 0;
  int IsHangsBufferedSizeHintEnabled = MX_FeatureFlags_IsHangsBufferedSizeHintEnabled();
  BOOL v3 = 0;
  if (a1 && IsHangsBufferedSizeHintEnabled)
  {
    [a1 preferredIOBufferDuration];
    BOOL v3 = v4 != 0.0;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((objc_msgSend(a1, "currentlyControllingFlags", v18, v19) & 2) != 0)
  {
    [a1 preferredOutputSampleRate];
    if (v8 != 0.0)
    {
      *(_DWORD *)bytes = CMSUtility_GetVADType(a1);
      *(_OWORD *)&bytes[4] = xmmword_194EDF220;
      *(void *)&bytes[24] = 0;
      LODWORD(v25) = 8;
      *((void *)&v25 + 1) = [a1 getPreferredOutputSampleRatePointer];
      CFDataRef v9 = CFDataCreate(v5, bytes, 48);
      CFArrayAppendValue(Mutable, v9);
      if (v9) {
        CFRelease(v9);
      }
    }
    if (v3)
    {
      [a1 preferredIOBufferDuration];
      if (v10 != 0.0)
      {
        [a1 preferredIOBufferDuration];
        *(double *)&preferredBufferDuratiouint64_t n = v11;
        v20[0] = xmmword_194EDF240;
        LODWORD(v21) = 8;
        *((void *)&v21 + 1) = &preferredBufferDuration;
        long long v12 = (UInt8 *)v20;
        goto LABEL_23;
      }
    }
    [a1 preferredOutputSampleRate];
    if (v13 != 0.0)
    {
      [a1 preferredIOBufferDuration];
      if (v14 != 0.0 && ![a1 preferredIOBufferFrames])
      {
        [a1 preferredIOBufferDuration];
        [a1 preferredOutputSampleRate];
        [a1 setPreferredIOBufferFrames:FigUInt32NearestPowerOfTwo()];
        [a1 setPreferredIOBufferDuration:0.0];
      }
    }
    if ([a1 preferredIOBufferFrames])
    {
      unsigned int v15 = [a1 preferredIOBufferFrames];
      if (!FigVAEndpointManagerGetPropertyBoolean(qword_1E9359B78, 0x1EE5F2FA8)
        || !(v15 % 0x18)
        || !(v15 % 0x1E)
        || (v15 & 0x1F) == 0)
      {
        *(_DWORD *)CFRange v22 = CMSUtility_GetVADType(a1);
        *(_OWORD *)&v22[4] = xmmword_194EDF230;
        *(void *)&v22[24] = 0;
        LODWORD(v23) = 4;
        *((void *)&v23 + 1) = [a1 getPreferredIOBufferFramesPointer];
        long long v12 = v22;
LABEL_23:
        CFDataRef v16 = CFDataCreate(v5, v12, 48);
        CFArrayAppendValue(Mutable, v16);
        if (v16) {
          CFRelease(v16);
        }
      }
    }
  }
  return Mutable;
}

uint64_t MX_FeatureFlags_IsHangsBufferedSizeHintEnabled()
{
  if (MX_FeatureFlags_IsHangsBufferedSizeHintEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsHangsBufferedSizeHintEnabled_onceToken, &__block_literal_global_123_0);
  }
  return MX_FeatureFlags_IsHangsBufferedSizeHintEnabled_sHangsBufferedSizeHintEnabled;
}

uint64_t vaemGetVirtualAudioDeviceType(AudioObjectID a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = 1986291046;
  UInt32 ioDataSize = 4;
  unsigned int outData = 1986291046;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"ptdvbolg";
  inAddress.mElement = 0;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData)) {
    return outData;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v1;
}

uint64_t CMSUtility_GetVADType(void *a1)
{
  if (!a1) {
    return 1986291046;
  }
  uint64_t v1 = [a1 audioDestinationPriority];
  if (v1) {
    id v2 = [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v1];
  }
  else {
    id v2 = @"VirtualAudioDevice_Default";
  }
  AudioObjectID VADIDForVADName = CMSMUtility_GetVADIDForVADName((uint64_t)v2);
  return vaemGetVirtualAudioDeviceType(VADIDForVADName);
}

uint64_t CMSUtility_ShouldSessionSetInputSampleRate(void *a1)
{
  if (CMSMUtility_IsCategoryInputOnly((const void *)[a1 audioCategory])) {
    return 1;
  }
  uint64_t result = [a1 preferredDecoupledInputOutput];
  if (result) {
    return vaemDecoupledInputVADExists();
  }
  return result;
}

BOOL vaemDecoupledInputVADExists()
{
  return [+[MXSessionManager sharedInstance] decoupledInputVADID] != 0;
}

void DisposeDiscovererServerState(void *a1)
{
  if (a1)
  {
    FigEndpointRPCCacheDispose();
    free(a1);
  }
}

__CFString *routingContextUtilities_getFeatureString(int a1)
{
  if ((a1 - 1) > 0xD) {
    return 0;
  }
  else {
    return off_1E57C62C8[a1 - 1];
  }
}

void sub_194D20770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194D20960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

uint64_t MX_FeatureFlags_IsOffloadACQEnabled()
{
  if (MX_FeatureFlags_IsOffloadACQEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsOffloadACQEnabled_onceToken, &__block_literal_global_66);
  }
  return MX_FeatureFlags_IsOffloadACQEnabled_sIsOffloadACQEnabled;
}

void sub_194D20A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

uint64_t CMSessionCreateForRemoteDeviceID(uint64_t a1, uint64_t *a2)
{
  float v4 = (void *)MEMORY[0x1997179E0]();
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    CFArrayRef v6 = [[MXCoreSessionSidekick alloc] initWithRemoteDeviceID:a1];
    uint64_t v7 = 0;
    *a2 = (uint64_t)v6;
  }
  else
  {
    uint64_t v7 = CMSessionCreate(a2);
  }
  return v7;
}

uint64_t CMSessionCreate(uint64_t *a1)
{
  id v2 = (void *)MEMORY[0x1997179E0]();
  uint64_t CFObject = cmsession_createCFObject(a1);
  if (!CFObject) {
    uint64_t CFObject = MXCoreSessionInitialize(*(void **)(*a1 + 16));
  }
  return CFObject;
}

uint64_t cmsession_createCFObject(uint64_t *a1)
{
  if (a1)
  {
    if (MX_FeatureFlags_IsAudiomxdEnabled())
    {
      if (!CMSMDeviceState_IsAudiomxd()) {
        goto LABEL_8;
      }
    }
    else if (!CMSMDeviceState_IsMediaserverd())
    {
      goto LABEL_8;
    }
    CMSessionGetTypeID();
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v3 = Instance;
      *(void *)(Instance + 16) = objc_alloc_init(MXCoreSession);
      CMNotificationCenterGetDefaultLocalCenter();
      MXGetNotificationSenderQueue();
      FigNotificationCenterAddWeakListener();
      *a1 = v3;
      return 0;
    }
  }
LABEL_8:
  return FigSignalErrorAt();
}

uint64_t CMSessionGetTypeID()
{
  return sCMSessionID;
}

void sub_194D20E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_194D20F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_194D20FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

CFDictionaryRef cmsmGetPickedRouteApplierFunction(const __CFDictionary *result, const __CFDictionary **a2)
{
  if (!*a2)
  {
    CFDictionaryRef v3 = result;
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"RouteCurrentlyPicked");
    if (result)
    {
      uint64_t result = (const __CFDictionary *)CFBooleanGetValue(result);
      if (result) {
        *a2 = v3;
      }
    }
  }
  return result;
}

uint64_t CMSUtility_UpdatePlaybackVolume(void *a1, float a2, float a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
  {
    uint64_t result = PVMCategoriesAreEquivalent((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", [a1 audioCategory]), (const void *)objc_msgSend(a1, "audioMode"), @"Audio/Video", 0);
    if (result)
    {
      [a1 audioCategory];
      [a1 audioMode];
      CMSMVAUtility_SetIndividualVolumeOnCurrentBluetoothShareableRoutes();
    }
  }
  else
  {
    float v11 = 0.0;
    CMSUtility_ComputePlaybackVolume(a1, &v11);
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int IsAdaptiveVolumeControlEnabled = MX_FeatureFlags_IsAdaptiveVolumeControlEnabled();
    CFDataRef v9 = 0;
    if (a3 != 0.0 && a2 != 0.0 && IsAdaptiveVolumeControlEnabled) {
      CFDataRef v9 = MXSMGetVolumeRampCategory((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", [a1 audioCategory]), (const void *)objc_msgSend(a1, "audioMode"));
    }
    uint64_t CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
    return vaemSetDeviceVolumeIfNotSet(CurrentOutputVADID, 0, 0, (uint64_t)v9, v11, a2, a3);
  }
  return result;
}

uint64_t CMSMVAUtility_IsBluetoothSharingSessionEnabled(CFArrayRef theArray)
{
  if (!theArray) {
    CMSMUtility_CopyCurrentRoutesInfo();
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 2)
  {
    CFIndex v2 = Count;
    uint64_t v3 = 0;
    while (1)
    {
      FigCFArrayGetInt64AtIndex();
      if (!vaeIsPortBluetoothShareable(0)) {
        break;
      }
      if (v2 == ++v3) {
        return 1;
      }
    }
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return 0;
}

void MXVW_ReleaseVectorCMSRouteInfo(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (*(void *)v2) {
        CFRelease(*(CFTypeRef *)v2);
      }
      float v4 = *(const void **)(v2 + 8);
      if (v4) {
        CFRelease(v4);
      }
      CFAllocatorRef v5 = *(const void **)(v2 + 16);
      if (v5) {
        CFRelease(v5);
      }
      CFArrayRef v6 = *(const void **)(v2 + 24);
      if (v6) {
        CFRelease(v6);
      }
      uint64_t v7 = *(const void **)(v2 + 32);
      if (v7) {
        CFRelease(v7);
      }
      v2 += 48;
    }
    while (v2 != v3);
    uint64_t v2 = *a1;
  }
  if (v2)
  {
    a1[1] = v2;
    operator delete((void *)v2);
  }
  JUMPOUT(0x199717470);
}

void CMSMUtility_CopyCurrentRoutesInfo()
{
}

void MXVW_CreateVectorCMSRouteInfo()
{
}

void MXVW_VectorCMSRouteInfoPushBack(void **a1, long long *a2)
{
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  float v4 = (const void *)*((void *)a2 + 1);
  if (v4) {
    CFRetain(v4);
  }
  CFAllocatorRef v5 = (const void *)*((void *)a2 + 2);
  if (v5) {
    CFRetain(v5);
  }
  CFArrayRef v6 = (const void *)*((void *)a2 + 3);
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v7 = (const void *)*((void *)a2 + 4);
  if (v7) {
    CFRetain(v7);
  }
  unint64_t v8 = (unint64_t)a1[2];
  CFDataRef v9 = a1[1];
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 4);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x555555555555555) {
      std::vector<CMSRouteInfo>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*a1) >> 4);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CMSRouteInfo>>((uint64_t)(a1 + 2), v16);
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = &v17[48 * v13];
    uint64_t v19 = &v17[48 * v16];
    long long v20 = *a2;
    long long v21 = a2[2];
    *((_OWORD *)v18 + 1) = a2[1];
    *((_OWORD *)v18 + 2) = v21;
    *(_OWORD *)uint64_t v18 = v20;
    uint64_t v12 = v18 + 48;
    long long v23 = (char *)*a1;
    CFRange v22 = (char *)a1[1];
    if (v22 != *a1)
    {
      do
      {
        long long v24 = *((_OWORD *)v22 - 3);
        long long v25 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v18 - 1) = v25;
        *((_OWORD *)v18 - 3) = v24;
        v18 -= 48;
        v22 -= 48;
      }
      while (v22 != v23);
      CFRange v22 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v10 = *a2;
    long long v11 = a2[2];
    v9[1] = a2[1];
    v9[2] = v11;
    *CFDataRef v9 = v10;
    uint64_t v12 = v9 + 3;
  }
  a1[1] = v12;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CMSRouteInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void CMSUtility_ComputePlaybackVolume(void *a1, float *a2)
{
  if ([a1 userMuted] && !PVMIsOKToMuteCurrentCategory()) {
    [a1 setUserMuted:0];
  }
  float v4 = 0.0;
  if (([a1 userMuted] & 1) == 0)
  {
    float v5 = PVMGetCurrentPreferredRawVolume();
    uint64_t v6 = [a1 audioDestinationPriority];
    id v7 = @"VirtualAudioDevice_Default";
    if (a1)
    {
      id v7 = @"VirtualAudioDevice_Default";
      if (v6) {
        id v7 = [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v6];
      }
    }
    if (!FigCFEqual()
      || ([a1 isTheAssistant] & 1) != 0
      || ([a1 audioCategory], FigCFEqual()))
    {
      uint64_t v23 = 0;
      *(_OWORD *)CFTypeRef cf = 0u;
      *(_OWORD *)CFRange v22 = 0u;
      cmsmCopyCurrentActiveRouteInfoAtIndexForVADUID((uint64_t)v7, 0, &cf[1], &v22[1], v22);
      CFStringRef v8 = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", [a1 audioCategory]);
      CFDataRef v9 = (const void *)[a1 audioMode];
      *(_OWORD *)number = *(_OWORD *)cf;
      long long v19 = *(_OWORD *)v22;
      uint64_t v20 = v23;
      float v10 = PVMGetVolumePreference(v8, v9, (uint64_t)number);
      float v5 = PVMGetRawVolumeForCurrentRouteFromVolume(v8, (const void *)[a1 audioMode], v10);
      if ([a1 isTheAssistant])
      {
        if (!PVMVolumePrefExistsForRouteAndCategory(cf[1], (unint64_t)v22[1], (uint64_t)v22[0], 0, 0))
        {
          uint64_t v11 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v22[1], 1, *MEMORY[0x1E4F20660], 0);
          if (v11)
          {
            uint64_t v12 = (const void *)v11;
            number[0] = 0;
            AudioObjectID valuePtr = 0;
            uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
            uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v14) {
              uint64_t v15 = v14;
            }
            else {
              uint64_t v15 = 0;
            }
            unint64_t v16 = *(void (**)(uint64_t, uint64_t, void, CFNumberRef *))(v15 + 48);
            if (v16)
            {
              v16(CMBaseObject, 0x1EE5F4148, *MEMORY[0x1E4F1CF80], number);
              if (number[0])
              {
                CFNumberGetValue(number[0], kCFNumberIntType, &valuePtr);
                if (number[0])
                {
                  CFRelease(number[0]);
                  number[0] = 0;
                }
                if (vaeDoesPortSupportDoAP(valuePtr)) {
                  float v5 = 0.5;
                }
              }
            }
            CFRelease(v12);
          }
        }
      }
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (v22[1]) {
        CFRelease(v22[1]);
      }
      if (v22[0]) {
        CFRelease(v22[0]);
      }
    }
    if (v5 >= 0.0)
    {
      float v4 = v5;
      if (v5 > 1.0) {
        float v4 = 1.0;
      }
    }
  }
  if (a2) {
    *a2 = v4;
  }
}

float PVMGetCurrentPreferredRawVolume()
{
  float DefaultVolume = pvmGetDefaultVolume();
  if (!PVMInitialize())
  {
    MEMORY[0x199716E90](*(void *)sStorage);
    float v1 = *(float *)(sStorage + 292);
    uint64_t v2 = *(const void **)(sStorage + 216);
    long long v3 = *(_OWORD *)(sStorage + 264);
    v8[0] = *(_OWORD *)(sStorage + 248);
    v8[1] = v3;
    uint64_t v9 = *(void *)(sStorage + 280);
    if (v1 <= 1.0) {
      float v4 = v1;
    }
    else {
      float v4 = 1.0;
    }
    long long v5 = *(_OWORD *)(sStorage + 264);
    long long v10 = *(_OWORD *)(sStorage + 248);
    long long v11 = v5;
    uint64_t v12 = *(void *)(sStorage + 280);
    float VolumeLimitPref = pvmGetVolumeLimitPref();
    float DefaultVolume = v4 * (float)(VolumeLimitPref * pvmGetCurrentVolumeLimitForRoute((uint64_t)v8, v2));
    MEMORY[0x199716EA0](*(void *)sStorage);
  }
  return DefaultVolume;
}

float pvmGetVolumeLimitPref()
{
  float valuePtr = 1.0;
  float v0 = 1.0;
  if (FigCFEqual())
  {
    CFDictionaryRef v1 = *(const __CFDictionary **)(sStorage + 32);
    if (v1)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v1, @"Headphone");
      if (Value)
      {
        if (CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr)) {
          return valuePtr;
        }
        else {
          return 1.0;
        }
      }
    }
  }
  return v0;
}

float pvmGetCurrentVolumeLimitForRoute(uint64_t a1, const void *a2)
{
  if (FigCFEqual() && !FigCFEqual()) {
    goto LABEL_22;
  }
  float v3 = 1.0;
  if (FigCFEqual() && FigCFEqual())
  {
    CFDictionaryRef v4 = *(const __CFDictionary **)(sStorage + 168);
    if (v4) {
      CFDictionaryGetValue(v4, a2);
    }
    if (FigCFEqual())
    {
LABEL_22:
      if (FigCFEqual())
      {
        return *(float *)(sStorage + 92);
      }
      else if (CelesteIsRegionSpecificVolumeLimitEnabled() | g100dBVolumeLimitEnabled)
      {
        float v3 = 0.9425;
        if (!FigCFEqual() && !FigCFEqual())
        {
          float v3 = 1.0;
          if (!FigCFEqual() && !FigCFEqual())
          {
            CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 80), @"HighVolumeLimit");
            int valuePtr = 1062668861;
            float v3 = *(float *)"=\nW?pvovbolgisesbolg";
            if (Value)
            {
              CFNumberRef v6 = Value;
              CFTypeID TypeID = CFNumberGetTypeID();
              if (TypeID == CFGetTypeID(v6))
              {
                CFNumberGetValue(v6, kCFNumberFloatType, &valuePtr);
                return *(float *)&valuePtr;
              }
            }
          }
        }
      }
      else
      {
        return *(float *)(sStorage + 88);
      }
    }
  }
  return v3;
}

BOOL PVMIsCurrentDeviceRoute(uint64_t a1)
{
  if (PVMInitialize()) {
    return 0;
  }
  float v3 = *(__CFString **)(a1 + 8);
  if (!v3)
  {
    float v3 = @"Speaker";
    *(void *)(a1 + 8) = @"Speaker";
  }
  CFNumberRef Value = v3;
  if (*(void *)(sStorage + 184)) {
    CFNumberRef Value = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 184), v3);
  }
  if (Value) {
    long long v5 = Value;
  }
  else {
    long long v5 = v3;
  }
  pvmGetMappedRouteIdentifier(*(void **)(a1 + 24), v5);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && ([(__CFString *)v5 hasPrefix:@"HeadphonesBT"] & 1) == 0) {
    [(__CFString *)v5 hasPrefix:@"HeadsetBT"];
  }
  MEMORY[0x199716E90](*(void *)sStorage);
  pvmAssureCurrentCategoryAndDeviceRoute();
  BOOL v2 = FigCFEqual() && FigCFEqual() && FigCFEqual() != 0;
  MEMORY[0x199716EA0](*(void *)sStorage);
  return v2;
}

uint64_t PVMCopyCurrentCategoryAndMode(CFTypeRef *a1, void *a2)
{
  uint64_t v4 = PVMInitialize();
  if (!v4)
  {
    MEMORY[0x199716E90](*(void *)sStorage);
    pvmAssureCurrentCategoryAndDeviceRoute();
    if (a1) {
      *a1 = CFRetain(*(CFTypeRef *)(sStorage + 216));
    }
    long long v5 = (void *)sStorage;
    if (a2)
    {
      CFTypeRef v6 = *(CFTypeRef *)(sStorage + 224);
      if (v6)
      {
        CFTypeRef v6 = CFRetain(v6);
        long long v5 = (void *)sStorage;
      }
      *a2 = v6;
    }
    MEMORY[0x199716EA0](*v5);
  }
  return v4;
}

uint64_t PVMInitialize()
{
  if (PVMInitialize_sInitializeVolumeManagerOnce != -1) {
    dispatch_once(&PVMInitialize_sInitializeVolumeManagerOnce, &__block_literal_global_46_0);
  }
  if (sStorage) {
    return 0;
  }
  return FigSignalErrorAt();
}

void pvmAssureCurrentCategoryAndDeviceRoute()
{
  uint64_t v0 = sStorage;
  if (!*(void *)(sStorage + 216))
  {
    CFDictionaryRef v1 = *(const void **)(sStorage + 224);
    if (v1)
    {
      CFRelease(v1);
      uint64_t v0 = sStorage;
      *(void *)(sStorage + 224) = 0;
    }
    BOOL v2 = (void *)(v0 + 216);
    float v3 = (void *)(v0 + 224);
    MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(@"Audio/Video", 0);
    pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, v2, v3);
    uint64_t v0 = sStorage;
  }
  if (!*(void *)(v0 + 256))
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(v0 + 184);
    if (v5) {
      CFNumberRef Value = (__CFString *)CFDictionaryGetValue(v5, @"Speaker");
    }
    else {
      CFNumberRef Value = @"Speaker";
    }
    if (!Value) {
      CFNumberRef Value = @"Speaker";
    }
    CFTypeRef v7 = CFRetain(Value);
    uint64_t v8 = sStorage;
    *(void *)(sStorage + 256) = v7;
    uint64_t v9 = *(const void **)(v8 + 264);
    if (v9)
    {
      CFRelease(v9);
      uint64_t v8 = sStorage;
      *(void *)(sStorage + 264) = 0;
    }
    long long v10 = *(const void **)(v8 + 280);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(sStorage + 280) = 0;
    }
    *(unsigned char *)(sStorage + 288) = FigCFEqual();
    *(unsigned char *)(sStorage + 289) = FigCFEqual();
  }
}

uint64_t vaemSetDeviceVolumeIfNotSet(uint64_t a1, AudioObjectPropertyElement a2, const void *a3, uint64_t a4, float a5, float a6, float a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled()
    && (int v14 = vaemDeviceSupportsVolumeRamp(a1), a7 != 0.0)
    && a6 != 0.0
    && a4
    && v14)
  {
    uint64_t result = vaemDeviceSupportsVolumeRamp(a1);
    if (result)
    {
      int v25 = 0;
      uint64_t v23 = a4;
      *(void *)long long v24 = *(void *)"pmarptuo";
      float v20 = a5;
      float v21 = a6;
      uint64_t v22 = LODWORD(a7);
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      gVAEM = a1;
      dword_1E9358ACC = LODWORD(a5);
      byte_1E9358AE1 = 1;
      qword_1E9358AE8 = a4;
      uint64_t result = CMSMVAUtility_AudioObjectSetPropertyData();
      int v19 = result;
      if (result)
      {
        uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        byte_1E9358AE1 = 0;
        qword_1E9358AE8 = 0;
      }
    }
    else if (dword_1E9359ED0)
    {
      int v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    uint64_t result = CMSMVAUtility_IsBluetoothSharingSessionEnabled(0);
    if (a3 || !result)
    {
      MEMORY[0x199716E90](gCMSM);
      if ([+[MXSessionManager sharedInstance] systemSoundLocalVADID] == a1)
      {
        if (!a3 || !qword_1E9358B80 || !CFEqual(a3, (CFTypeRef)qword_1E9358B80) || *(float *)&dword_1E9358B90 != a5)
        {
          vaemSetDeviceVolume(a1, 0, a5);
          dword_1E9358B90 = LODWORD(a5);
          if (qword_1E9358B80)
          {
            CFRelease((CFTypeRef)qword_1E9358B80);
            qword_1E9358B80 = 0;
          }
          if (a3) {
            qword_1E9358B80 = (uint64_t)CFRetain(a3);
          }
        }
      }
      else if ([+[MXSessionManager sharedInstance] siriOutputVADID] == a1)
      {
        vaemSetDeviceVolume(a1, 0, a5);
      }
      else if ([+[MXSessionManager sharedInstance] musicVADID] != a1&& (!a3|| !qword_1E9358B78|| !CFEqual(a3, (CFTypeRef)qword_1E9358B78)|| *(float *)&dword_1E9358B8C != a5|| CMSMVAUtility_IsBluetoothSharingSessionEnabled(0)))
      {
        vaemSetDeviceVolume(a1, a2, a5);
        dword_1E9358B8C = LODWORD(a5);
        if (qword_1E9358B78)
        {
          CFRelease((CFTypeRef)qword_1E9358B78);
          qword_1E9358B78 = 0;
        }
        if (a3) {
          qword_1E9358B78 = (uint64_t)CFRetain(a3);
        }
      }
      JUMPOUT(0x199716EA0);
    }
  }
  return result;
}

uint64_t vaemSetDeviceVolume(uint64_t a1, AudioObjectPropertyElement a2, float a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  inAddress.mElement = a2;
  int outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F7574707663656ELL;
  if (!AudioObjectHasProperty(a1, &inAddress)) {
    goto LABEL_5;
  }
  UInt32 ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    int v10 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_15;
  }
  if (outData != 1)
  {
    int v10 = 1;
  }
  else
  {
LABEL_5:
    if (dword_1E9359ED0)
    {
      inAddress.AudioObjectPropertySelector mSelector = 0;
      LOBYTE(outData) = 0;
      CFTypeRef v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      AudioObjectPropertySelector mSelector = inAddress.mSelector;
      if (os_log_type_enabled(v7, (os_log_type_t)outData)) {
        unsigned int v9 = mSelector;
      }
      else {
        unsigned int v9 = mSelector & 0xFFFFFFFE;
      }
      if (v9)
      {
        int v22 = 136315138;
        uint64_t v23 = "vaemStartIgnoreOutputVolumeScalarChangesTimer";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaemCancelOutputVolumeChangeTimer();
    *(_WORD *)&byte_1E9358AE0 = 1;
    gVAEM = a1;
    dword_1E9358AD0 = a2;
    dword_1E9358ACC = LODWORD(a3);
    qword_1E9358AE8 = 0;
    long long v11 = MXGetSerialQueue();
    qword_1E9358AD8 = (uint64_t)FigRoutingManagerCreateOneShotTimer(v11, 1.0, (uint64_t)&__block_literal_global_71, 0, 0);
    int v10 = 0;
    if (!qword_1E9358AD8) {
      byte_1E9358AE0 = 0;
    }
  }
LABEL_15:
  if (dword_1E9359ED0)
  {
    inAddress.AudioObjectPropertySelector mSelector = 0;
    LOBYTE(outData) = 0;
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    AudioObjectPropertySelector v13 = inAddress.mSelector;
    if (os_log_type_enabled(v12, (os_log_type_t)outData)) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (v14)
    {
      uint64_t VADNameForVADID = CMSMUtility_GetVADNameForVADID(a1);
      int v22 = 136316418;
      unint64_t v16 = @"YES";
      uint64_t v23 = "vaemSetDeviceVolume";
      __int16 v24 = 2048;
      double v25 = a3;
      __int16 v26 = 2114;
      if (v10) {
        unint64_t v16 = @"NO";
      }
      uint64_t v27 = VADNameForVADID;
      __int16 v28 = 1024;
      int v29 = a1;
      __int16 v30 = 1024;
      AudioObjectPropertyElement v31 = a2;
      __int16 v32 = 2114;
      int v33 = v16;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return CMSMVAUtility_AudioObjectSetPropertyData();
}

uint64_t vaemDeviceSupportsVolumeRamp(AudioObjectID a1)
{
  inAddress_8[22] = *MEMORY[0x1E4F143B8];
  uint64_t result = MX_FeatureFlags_IsAdaptiveVolumeControlEnabled();
  if (result)
  {
    uint64_t inAddress = *(void *)"pmrsptuo";
    inAddress_8[0] = 0;
    if (AudioObjectHasProperty(a1, (const AudioObjectPropertyAddress *)&inAddress))
    {
      UInt32 ioDataSize = 4;
      if (!AudioObjectGetPropertyData(a1, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, &ioDataSize, (char *)inAddress_8 + 4))
      {
        int v4 = HIDWORD(inAddress_8[0]);
        return v4 == 1;
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v4 = 0;
    return v4 == 1;
  }
  return result;
}

BOOL vaemSystemSoundLocalVADExists()
{
  return [+[MXSessionManager sharedInstance] systemSoundLocalVADID] != 0;
}

uint64_t cmsGetCurrentSystemSoundVADForAudioBehaviour()
{
  uint64_t v0 = [+[MXSessionManager sharedInstance] defaultVADID];
  CFArrayRef Value = (const __CFArray *)FigCFDictionaryGetValue();
  CFIndex v2 = 0;
  if (!Value) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(Value); v2 < i; CFIndex i = 0)
  {
    CFArrayGetValueAtIndex(Value, v2);
    if (FigCFEqual())
    {
      if ([+[MXSessionManager sharedInstance] speakerAlertVADID])
      {
        return [+[MXSessionManager sharedInstance] speakerAlertVADID];
      }
    }
    else if (FigCFEqual())
    {
      if ([+[MXSessionManager sharedInstance] siriOutputVADID])
      {
        return [+[MXSessionManager sharedInstance] siriOutputVADID];
      }
    }
    else if (FigCFEqual())
    {
      if ([+[MXSessionManager sharedInstance] systemSoundRemoteVADID])
      {
        return [+[MXSessionManager sharedInstance] systemSoundRemoteVADID];
      }
    }
    else if (FigCFEqual())
    {
      if ([+[MXSessionManager sharedInstance] systemSoundLocalVADID])
      {
        return [+[MXSessionManager sharedInstance] systemSoundLocalVADID];
      }
    }
    else if (FigCFEqual())
    {
      if ([+[MXSessionManager sharedInstance] defaultVADID])
      {
        return [+[MXSessionManager sharedInstance] defaultVADID];
      }
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    ++v2;
    if (Value) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return v0;
}

uint64_t CMSMUtility_UpdateSomeLongFormVideoClientIsActiveOverAirPlayVideo()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  MEMORY[0x199716E90](gCMSM);
  int v0 = byte_1E9359B9C;
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFDictionaryRef v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v1);
        }
        CFTypeRef v6 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if ([v6 isActiveOverAirPlayVideo]
          && ([v6 isAudioOnlyAirPlayVideoActive] & 1) == 0
          && CMSUtility_IsLongFormVideoSession(v6))
        {
          int v7 = 1;
          goto LABEL_14;
        }
      }
      uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
  }
LABEL_14:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  byte_1E9359B9C = v7;
  uint64_t result = MEMORY[0x199716EA0](gCMSM);
  if (v7 != v0)
  {
    uint64_t result = CMSMNotificationUtility_PostSomeLongFormVideoClientIsActiveOverAirPlayVideoDidChange(v7);
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t CMSMUtility_UpdateSomeLongFormVideoClientIsPlayingOverAirPlayVideo()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  MEMORY[0x199716E90](gCMSM);
  int v0 = byte_1E9359B9D;
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFDictionaryRef v1 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v2 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v1);
        }
        CFTypeRef v6 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if ([v6 isActiveOverAirPlayVideo]
          && ([v6 isAudioOnlyAirPlayVideoActive] & 1) == 0
          && [v6 isPlaying]
          && CMSUtility_IsLongFormVideoSession(v6))
        {
          int v7 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v3 = [(NSPointerArray *)v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v3) {
        continue;
      }
      break;
    }
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
  }
LABEL_15:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  byte_1E9359B9D = v7;
  uint64_t result = MEMORY[0x199716EA0](gCMSM);
  if (v7 != v0)
  {
    uint64_t result = CMSMNotificationUtility_PostSomeLongFormVideoClientIsPlayingOverAirPlayVideoDidChange(v7);
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t systemController_getClassID(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&systemController_getClassID_sClassDesc, ClassID, 1, a1);
}

void CMSMUtility_UpdateCurrentRoutesInfo(const __CFArray *a1, const __CFArray *a2, void *a3, int a4)
{
  if (a1)
  {
    unint64_t VectorCMSRouteInfoSize = MXVW_GetVectorCMSRouteInfoSize((void *)qword_1E9359BB8);
    CFIndex Count = CFArrayGetCount(a1);
    dword_1E9359BC4 = Count;
    if (Count >= 1)
    {
      for (unint64_t i = 0; i != Count; ++i)
      {
        CFTypeRef v45 = 0;
        FigCFArrayGetInt64AtIndex();
        if (i >= VectorCMSRouteInfoSize)
        {
          *(_OWORD *)CFTypeRef cf = 0u;
          memset(v51, 0, 28);
          v51[1].i32[3] = (int)v45;
          MXVW_VectorCMSRouteInfoPushBack((void **)qword_1E9359BB8, (long long *)cf);
        }
        else
        {
          *(_DWORD *)(MXVW_GetCMSRouteInfoPtrAt((void *)qword_1E9359BB8, i) + 44) = v45;
        }
      }
    }
  }
  if (a2)
  {
    unint64_t v11 = MXVW_GetVectorCMSRouteInfoSize((void *)qword_1E9359BB8);
    CFIndex v12 = CFArrayGetCount(a2);
    dword_1E9359BC0 = v12;
    if (v12 >= 1)
    {
      for (unint64_t j = 0; j != v12; ++j)
      {
        CFTypeRef v45 = 0;
        FigCFArrayGetInt64AtIndex();
        unsigned int v14 = vaeCopyVADEndpointTypeForPort(0);
        if (j >= v11)
        {
          memset(v51, 0, sizeof(v51));
          cf[0] = 0;
          cf[1] = v14;
          MXVW_VectorCMSRouteInfoPushBack((void **)qword_1E9359BB8, (long long *)cf);
        }
        else
        {
          uint64_t CMSRouteInfoPtrAt = MXVW_GetCMSRouteInfoPtrAt((void *)qword_1E9359BB8, j);
          *(_DWORD *)(CMSRouteInfoPtrAt + 40) = 0;
          unint64_t v16 = *(const void **)(CMSRouteInfoPtrAt + 8);
          *(void *)(CMSRouteInfoPtrAt + 8) = v14;
          if (v14) {
            CFRetain(v14);
          }
          if (v16) {
            CFRelease(v16);
          }
        }
        if (v14) {
          CFRelease(v14);
        }
      }
    }
  }
  unint64_t v17 = MXVW_GetVectorCMSRouteInfoSize((void *)qword_1E9359BB8);
  if (a3 && a4)
  {
    unint64_t v18 = v17;
    unint64_t v19 = 0;
    do
    {
      memset(v51, 0, sizeof(v51));
      *(_OWORD *)CFTypeRef cf = 0u;
      MXVW_GetCMSRouteInfoAt(a3, v19, (uint64_t)cf);
      if (v18 <= v19)
      {
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        CFTypeRef v45 = cf[0];
        int8x16_t v46 = vextq_s8(v51[0], v51[0], 8uLL);
        CFTypeRef v47 = cf[1];
        MXVW_VectorCMSRouteInfoPushBack((void **)qword_1E9359BB8, (long long *)&v45);
      }
      else
      {
        uint64_t v20 = MXVW_GetCMSRouteInfoPtrAt((void *)qword_1E9359BB8, v19);
        CFTypeRef v21 = *(CFTypeRef *)v20;
        CFTypeRef v22 = cf[0];
        *(CFTypeRef *)uint64_t v20 = cf[0];
        if (v22) {
          CFRetain(v22);
        }
        if (v21) {
          CFRelease(v21);
        }
        uint64_t v23 = *(const void **)(v20 + 16);
        __int16 v24 = (const void *)v51[0].i64[0];
        *(void *)(v20 + 16) = v51[0].i64[0];
        if (v24) {
          CFRetain(v24);
        }
        if (v23) {
          CFRelease(v23);
        }
        double v25 = *(const void **)(v20 + 24);
        CFTypeRef v26 = cf[1];
        *(CFTypeRef *)(v20 + 24) = cf[1];
        if (v26) {
          CFRetain(v26);
        }
        if (v25) {
          CFRelease(v25);
        }
        uint64_t v27 = *(const void **)(v20 + 8);
        __int16 v28 = (const void *)v51[0].i64[1];
        *(void *)(v20 + 8) = v51[0].i64[1];
        if (v28) {
          CFRetain(v28);
        }
        if (v27) {
          CFRelease(v27);
        }
        int v29 = *(const void **)(v20 + 32);
        if (v29)
        {
          CFRelease(v29);
          *(void *)(v20 + 32) = 0;
        }
      }
      ++v19;
    }
    while (a4 != v19);
  }
  __int16 v30 = CMSMUtility_CopyCurrentRouteTypes();
  if (FigCFArrayContainsValue() && a4)
  {
    CFIndex v31 = 0;
    uint64_t v32 = *MEMORY[0x1E4F20638];
    uint64_t v33 = *MEMORY[0x1E4F20F18];
    uint64_t v34 = *MEMORY[0x1E4F1CF80];
    do
    {
      CFArrayGetValueAtIndex(v30, v31);
      if (FigCFEqual() || FigCFEqual())
      {
        MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, v31, (uint64_t)v44);
        uint64_t v35 = FigRoutingManagerCopyEndpointWithDeviceID(v44[2], 1, v32, qword_1E9359C88);
        if (v35)
        {
          float v36 = (const void *)v35;
          cf[0] = 0;
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v38) {
            uint64_t v39 = v38;
          }
          else {
            uint64_t v39 = 0;
          }
          double v40 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v39 + 48);
          if (v40) {
            v40(CMBaseObject, v33, v34, cf);
          }
          uint64_t v41 = MXVW_GetCMSRouteInfoPtrAt((void *)qword_1E9359BB8, v31);
          double v42 = *(const void **)(v41 + 32);
          CFTypeRef v43 = cf[0];
          *(CFTypeRef *)(v41 + 32) = cf[0];
          if (v43) {
            CFRetain(v43);
          }
          if (v42) {
            CFRelease(v42);
          }
          if (cf[0]) {
            CFRelease(cf[0]);
          }
          CFRelease(v36);
        }
      }
      ++v31;
    }
    while (a4 != v31);
  }
  if (v30) {
    CFRelease(v30);
  }
}

unint64_t MXVW_GetVectorCMSRouteInfoSize(void *a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
}

__CFArray *CMSMVAUtility_CopyBTManagedPorts()
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFDictionaryRef v1 = CMSMVAUtility_CopyConnectedWirelessPorts();
  if (v1)
  {
    CFArrayRef v2 = v1;
    CFIndex Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        uint64_t ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(v2, i);
        int v7 = (const void *)ValueAtIndex;
        if (ValueAtIndex)
        {
          uint64_t valuePtr = 0;
          CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
          uint64_t ValueAtIndex = valuePtr;
        }
        if (MXBluetoothServices_IsPortBTManaged(ValueAtIndex, 1)) {
          CFArrayAppendValue(Mutable, v7);
        }
      }
    }
    CFRelease(v2);
  }
  return Mutable;
}

__CFArray *CMSMVAUtility_CopyConnectedWirelessPorts()
{
  CFArrayRef v0 = (const __CFArray *)vaemCopyConnectedPortsForPortTypeAndScope(0, 0x6F757470u);
  CFArrayRef v1 = v0;
  if (v0)
  {
    CFIndex Count = CFArrayGetCount(v0);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        uint64_t ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(v1, i);
        CFTypeRef v6 = (const void *)ValueAtIndex;
        if (ValueAtIndex)
        {
          uint64_t valuePtr = 0;
          CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
          uint64_t ValueAtIndex = valuePtr;
        }
        if (vaeGetConnectionTypeForPort(ValueAtIndex) == 1885544823) {
          CFArrayAppendValue(Mutable, v6);
        }
      }
    }
    if (!Mutable) {
      goto LABEL_13;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      goto LABEL_13;
    }
  }
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    CFMutableDictionaryRef Mutable = 0;
    if (!v1) {
      return Mutable;
    }
    goto LABEL_14;
  }
LABEL_13:
  if (v1) {
LABEL_14:
  }
    CFRelease(v1);
  return Mutable;
}

CFMutableArrayRef cmsmCopyWirelessPortsArrayForRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3)
{
  int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a1);
  int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
  CFArrayRef v7 = (const __CFArray *)vaemCopyConnectedPortsListForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, 0);
  if (v7)
  {
    CFArrayRef v8 = v7;
    CFIndex Count = CFArrayGetCount(v7);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        AudioObjectID valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v8, i);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (vaeGetConnectionTypeForPort(valuePtr) == 1885544823)
        {
          long long v13 = (const void *)vaeCopyNameForPort(valuePtr);
          int PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
          if (FigCFEqual()) {
            BOOL v15 = 1;
          }
          else {
            BOOL v15 = PortTypeFromPortID == 1885433975;
          }
          if (!v15)
          {
            unint64_t v16 = CFArrayGetValueAtIndex(v8, i);
            CFArrayAppendValue(Mutable, v16);
          }
          if (v13) {
            CFRelease(v13);
          }
        }
      }
    }
    CFRelease(v8);
    if (Mutable) {
      CFArrayGetCount(Mutable);
    }
    return Mutable;
  }
  else
  {
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unint64_t v19 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    return CFArrayCreateMutable(v18, 0, v19);
  }
}

uint64_t vaeGetConnectionTypeForPort(uint64_t result)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int outData = 0;
  if (result)
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6270637470;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    if (AudioObjectGetPropertyData(result, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData;
    }
  }
  return result;
}

id cmsmCopySelectablePortsForRouteConfiguration(int a1, int a2, const void *a3, int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFTypeRef v5 = vaemCopyConnectedPortsListForRouteConfiguration(a1, a2, a3, a4);
  if (!v5) {
    return 0;
  }
  CFTypeRef v6 = (void *)v5;
  obuint64_t j = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v31 objects:v36 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v32 != v9) {
          objc_enumerationMutation(v6);
        }
        unint64_t v11 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        uint64_t v12 = [v11 unsignedIntValue];
        long long v13 = (void *)vaeCopyNameForPort(v12);
        int PortTypeFromPortID = vaeGetPortTypeFromPortID(v12);
        if (([v13 isEqualToString:0x1EE5EFDC8] & 1) == 0 && PortTypeFromPortID != 1885433975)
        {
          CFDictionaryRef v15 = cmsmCopyDetailedPortInfoForRouteConfiguration([v11 unsignedIntValue], a1, a2, a3, a4);
          [obj addObject:v15];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v31 objects:v36 count:16];
    }
    while (v8);
  }

  if (a4 || !MX_FeatureFlags_IsOnenessEnabled()) {
    return obj;
  }
  id v16 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v17 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v28;
    do
    {
      for (uint64_t j = 0; j != v18; ++j)
      {
        if (*(void *)v28 != v19) {
          objc_enumerationMutation(obj);
        }
        CFTypeRef v21 = (void *)[*(id *)(*((void *)&v27 + 1) + 8 * j) mutableCopy];
        if (vaeGetPortTypeFromPortID(objc_msgSend((id)objc_msgSend(v21, "objectForKey:", @"RouteDetailedDescription_ID"), "unsignedIntValue")) == 1885565807)
        {
          [v21 setObject:@"Speaker" forKey:@"RouteDetailedDescription_Name"];
          [v21 setObject:@"Speaker" forKey:@"RouteDetailedDescription_UID"];
        }
        [v16 addObject:v21];
      }
      uint64_t v18 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v18);
  }

  return v16;
}

CFTypeRef vaemCopyConnectedPortsListForRouteConfiguration(int a1, int a2, const void *a3, int a4)
{
  if (a4 == 1) {
    AudioObjectPropertyScope v7 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v7 = 1869968496;
  }
  inAddress.AudioObjectPropertySelector mSelector = 1668313699;
  inAddress.mScope = v7;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  if (CMSMUtility_IsSharePlayCallSessionActive()
    || CMSMUtility_IsSharePlayMediaSessionActive())
  {
    RouteConfigurationDictionary = 0;
  }
  else
  {
    RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, 0, a3);
  }
  CFTypeRef outData = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData);
  if (RouteConfigurationDictionary) {
    CFRelease(RouteConfigurationDictionary);
  }
  if (PropertyData) {
    return 0;
  }
  CFTypeRef result = outData;
  if (outData)
  {
    CFTypeID v11 = CFGetTypeID(outData);
    CFTypeID TypeID = CFArrayGetTypeID();
    CFTypeRef result = outData;
    if (v11 != TypeID)
    {
      if (outData)
      {
        CFRelease(outData);
        return 0;
      }
    }
  }
  return result;
}

void vaemCopyPortDescriptions(AudioObjectID a1, uint64_t a2, CFArrayRef theArray, uint64_t a4, CFMutableArrayRef *a5)
{
  if (*a5) {
    BOOL v5 = theArray == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CFArrayRef v7 = theArray;
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      uint64_t v9 = 0;
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (a4 == 1) {
        int v11 = 1768845428;
      }
      else {
        int v11 = 1869968496;
      }
      unsigned int v43 = v11;
      unsigned int v41 = a4;
      CFArrayRef v40 = v7;
      unsigned int v39 = a2;
      CFAllocatorRef v42 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        FigCFArrayGetInt64AtIndex();
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (a4 == 1) {
          id v13 = vaeCopyFigInputDeviceNameFromVADPort(0);
        }
        else {
          id v13 = vaeCopyFigOutputDeviceNameFromVADPort(0);
        }
        unsigned int v14 = v13;
        FigCFDictionarySetValue();
        if (v14) {
          CFRelease(v14);
        }
        CFDictionaryRef v15 = (__CFString *)vaeCopySpecificNameForPort(0);
        if (FigCFEqual())
        {
          CFArrayRef v16 = v7;
          uint64_t v17 = a4;
          uint64_t v18 = a2;
          uint64_t v19 = v15;
          CFDictionaryRef v15 = @"AirPlay";
          CFRetain(@"AirPlay");
          if (v19) {
            CFRelease(v19);
          }
          a2 = v18;
          a4 = v17;
          CFArrayRef v7 = v16;
          CFAllocatorRef v10 = v42;
        }
        uint64_t v48 = v15;
        FigCFDictionarySetValue();
        CFTypeRef v20 = vaeCopyDeviceIdentifierFromVADPort(0);
        FigCFDictionarySetValue();
        if (v20) {
          CFRelease(v20);
        }
        vaeIsHeadphonesPort(0);
        FigCFDictionarySetValue();
        vaeIsVoiceProcessingSupportedOnVADPort(0);
        FigCFDictionarySetValue();
        vaeIsLiveListenSupportedOnVADPort(0);
        FigCFDictionarySetValue();
        if (vaeGetPortTypeFromPortID(0) == 1885892674)
        {
          vaeDoesPortSupportDoAP(0);
          FigCFDictionarySetValue();
        }
        vaeDoesPortSupportSoftwareVolume(0);
        FigCFDictionarySetValue();
        vaeDoesPortSupportSoftwareVolume(0);
        FigCFDictionarySetValue();
        CFTypeRef v21 = vaeCopyVADEndpointTypeForPort(0);
        FigCFDictionarySetValue();
        if (v21) {
          CFRelease(v21);
        }
        SInt64 = (const void *)FigCFNumberCreateSInt64();
        FigCFDictionarySetValue();
        if (SInt64) {
          CFRelease(SInt64);
        }
        CFArrayRef v23 = vaeCopySubPortDescriptionsForPortAndRouteConfiguration(0, 0, 0, 0);
        FigCFDictionarySetValue();
        if (v23) {
          CFRelease(v23);
        }
        CFArrayRef v24 = vaeCopyHiddenSubPortDescriptionsForPort(0);
        FigCFDictionarySetValue();
        if (v24) {
          CFRelease(v24);
        }
        double v25 = vaeCopySelectedDataSourceForPortAndRouteConfiguration(0, 0, 0, 0);
        FigCFDictionarySetValue();
        if (v25) {
          CFRelease(v25);
        }
        uint64_t v53 = 0;
        long long outData = 0u;
        long long v52 = 0u;
        *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6273666D74;
        inAddress.mElement = 0;
        UInt32 ioDataSize = 40;
        if (AudioObjectGetPropertyData(a2, &inAddress, 0, 0, &ioDataSize, &outData)) {
          CFIndex v26 = 0;
        }
        else {
          CFIndex v26 = HIDWORD(v52);
        }
        long long v27 = (const void *)FigCFNumberCreateSInt64();
        FigCFDictionarySetValue();
        if (v27) {
          CFRelease(v27);
        }
        long long v28 = v48;
        if (v26)
        {
          uint64_t v47 = v9;
          long long v29 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E4F1D510]);
          inAddress.AudioObjectPropertySelector mSelector = 0;
          LODWORD(outData) = 1936876644;
          *(void *)((char *)&outData + 4) = v43;
          long long v30 = 0;
          if (!AudioObjectGetPropertyDataSize(a1, (const AudioObjectPropertyAddress *)&outData, 0, 0, &inAddress.mSelector))
          {
            long long v30 = (unsigned int *)malloc_type_malloc(inAddress.mSelector, 0x2957F748uLL);
            if (AudioObjectGetPropertyData(a1, (const AudioObjectPropertyAddress *)&outData, 0, 0, &inAddress.mSelector, v30))
            {
              if (v30)
              {
                free(v30);
                long long v30 = 0;
              }
            }
          }
          long long v31 = vaeCopyChannelNamesForPortAndNumberOfChannels(0, v48, v26);
          if (v31)
          {
            CFArrayRef v32 = v31;
            CFIndex v33 = CFArrayGetCount(v31);
            if (v33 >= 1)
            {
              CFIndex v34 = v33;
              CFIndex v35 = 0;
              uint64_t v36 = 0;
              do
              {
                CFMutableDictionaryRef v37 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFArrayGetValueAtIndex(v32, v35);
                FigCFDictionarySetValue();
                if (v30 && v36 < v30[2])
                {
                  uint64_t v38 = (const void *)FigCFNumberCreateSInt64();
                  FigCFDictionarySetValue();
                  if (v38) {
                    CFRelease(v38);
                  }
                  ++v36;
                }
                if (v37)
                {
                  CFArrayAppendValue(v29, v37);
                  CFRelease(v37);
                }
                ++v35;
              }
              while (v34 != v35);
            }
            CFRelease(v32);
            a4 = v41;
            CFArrayRef v7 = v40;
            a2 = v39;
            long long v28 = v48;
          }
          free(v30);
          FigCFDictionarySetValue();
          uint64_t v9 = v47;
          if (v29) {
            CFRelease(v29);
          }
        }
        if (v28) {
          CFRelease(v28);
        }
        if (Mutable)
        {
          CFArrayAppendValue(*a5, Mutable);
          CFRelease(Mutable);
        }
        ++v9;
      }
      while (v9 != Count);
    }
  }
}

CFDictionaryRef cmsmCopyDetailedPortInfoForRouteConfiguration(AudioObjectID a1, int a2, int a3, const void *a4, int a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  AudioObjectPropertyElement valuePtr = a1;
  uint64_t v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v50 = 0u;
  *(_OWORD *)keys = 0u;
  long long v49 = 0u;
  uint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  *(_OWORD *)values = 0u;
  CFTypeRef v9 = vaeCopyDeviceIdentifierFromVADPort(a1);
  CFAllocatorRef v10 = v9;
  if (v9)
  {
    keys[0] = @"RouteDetailedDescription_UID";
    values[0] = (void *)v9;
    unsigned int v11 = 1;
  }
  else
  {
    unsigned int v11 = 0;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v14 = v13;
  if (v13)
  {
    *(void *)((unint64_t)keys | (8 * v11)) = @"RouteDetailedDescription_ID";
    *(void *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v11++ & 1))) = v13;
  }
  BOOL IsHeadphonesPort = vaeIsHeadphonesPort(valuePtr);
  CFArrayRef v16 = (void *)*MEMORY[0x1E4F1CFD0];
  uint64_t v17 = (void *)*MEMORY[0x1E4F1CFC8];
  if (IsHeadphonesPort) {
    uint64_t v18 = (void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v18 = (void *)*MEMORY[0x1E4F1CFC8];
  }
  if (v18)
  {
    keys[v11] = @"RouteDetailedDescription_IsHeadphones";
    values[v11++] = v18;
  }
  CFNumberRef v40 = v14;
  uint64_t v38 = v16;
  CFAllocatorRef allocator = v12;
  CFMutableDictionaryRef v37 = v17;
  if (a5 == 1)
  {
    id v20 = vaeCopyFigInputDeviceNameFromVADPort(valuePtr);
    goto LABEL_16;
  }
  if (a5 != 2 || (id v19 = vaeCopyFigInputDeviceNameFromVADPort(valuePtr)) == 0)
  {
    id v20 = vaeCopyFigOutputDeviceNameFromVADPort(valuePtr);
LABEL_16:
    id v19 = v20;
  }
  CFTypeRef v21 = (void *)vaeCopySelectedDataSourceForPortAndRouteConfiguration(valuePtr, a2, a3, a4);
  if (v21)
  {
    keys[v11] = @"RouteDetailedDescription_SelectedDataSource";
    values[v11++] = v21;
  }
  CFTypeRef cf = v21;
  if (v19)
  {
    keys[v11] = @"RouteDetailedDescription_PortType";
    values[v11++] = v19;
  }
  CFTypeRef v22 = (void *)vaeCopySpecificNameForPort(valuePtr);
  CFArrayRef v23 = v22;
  if (v22)
  {
    keys[v11] = @"RouteDetailedDescription_Name";
    values[v11++] = v22;
  }
  CFArrayRef v24 = vaeCopySubPortDescriptionsForPortAndRouteConfiguration(valuePtr, a2, a3, a4);
  CFArrayRef v25 = v24;
  if (v24)
  {
    keys[v11] = @"RouteDetailedDescription_DataSources";
    values[v11++] = v24;
  }
  CFArrayRef v26 = vaeCopyHiddenSubPortDescriptionsForPort(valuePtr);
  CFArrayRef v27 = v26;
  if (v26)
  {
    keys[v11] = @"RouteDetailedDescription_HiddenDataSources";
    values[v11++] = v26;
  }
  BOOL IsLiveListenSupportedOnVADPort = vaeIsLiveListenSupportedOnVADPort(valuePtr);
  keys[v11] = @"RouteDetailedDescription_LiveListenIsSupported";
  if (IsLiveListenSupportedOnVADPort) {
    long long v29 = v38;
  }
  else {
    long long v29 = v37;
  }
  values[v11] = v29;
  unsigned int v30 = v11 + 1;
  if (vaeIsLiveListenSupportedOnVADPort(valuePtr)) {
    long long v31 = v38;
  }
  else {
    long long v31 = v37;
  }
  keys[v30] = @"RouteDetailedDescription_VoiceProcessingIsSupported";
  values[v30] = v31;
  unsigned int v32 = v11 + 2;
  CFIndex v33 = vaeCopyVADEndpointTypeForPort(valuePtr);
  if (v33)
  {
    keys[v32] = @"RouteDetailedDescriptionKey_EndpointType";
    values[v32] = v33;
    unsigned int v32 = v11 + 3;
    CFRelease(v33);
  }
  CFDictionaryRef v34 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, v32, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v19) {
    CFRelease(v19);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  return v34;
}

BOOL vaeIsLiveListenSupportedOnVADPort(AudioObjectID a1)
{
  inAddress.mElement = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"psllbolg";
  UInt32 ioDataSize = 4;
  int outData = 0;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData)) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = outData == 0;
  }
  return !v1;
}

__CFString *vaeCopyVADEndpointTypeForPort(AudioObjectID a1)
{
  int VADEndpointTypeForPort = vaeGetVADEndpointTypeForPort(a1);
  if (VADEndpointTypeForPort > 1701868659)
  {
    switch(VADEndpointTypeForPort)
    {
      case 1701868660:
        CFArrayRef v2 = kMXSession_EndpointType_TTY;
        return *v2;
      case 1701868910:
        CFArrayRef v2 = kMXSession_EndpointType_Unspecified;
        return *v2;
      case 1701869160:
        CFArrayRef v2 = kMXSession_EndpointType_Vehicle;
        return *v2;
    }
LABEL_14:
    CFArrayRef v2 = kMXSession_EndpointType_Other;
    return *v2;
  }
  if (VADEndpointTypeForPort == 1701865569)
  {
    CFArrayRef v2 = kMXSession_EndpointType_HearingAid;
    return *v2;
  }
  if (VADEndpointTypeForPort == 1701865584)
  {
    CFArrayRef v2 = kMXSession_EndpointType_Headphones;
    return *v2;
  }
  if (VADEndpointTypeForPort != 1701868400) {
    goto LABEL_14;
  }
  CFArrayRef v2 = kMXSession_EndpointType_Speakers;
  return *v2;
}

uint64_t vaeGetVADEndpointTypeForPort(AudioObjectID a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = 1701868910;
  unsigned int outData = 1701868910;
  if (a1)
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6270657074;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    if (AudioObjectHasProperty(a1, &inAddress))
    {
      if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        return outData;
      }
    }
  }
  return v1;
}

BOOL vaeIsHeadphonesPort(BOOL result)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int outData = 0;
  if (result)
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6270696870;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    if (AudioObjectGetPropertyData(result, &inAddress, 0, 0, &ioDataSize, &outData))
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    else
    {
      return outData != 0;
    }
  }
  return result;
}

uint64_t vaeCopySpecificNameForPort(AudioObjectID a1)
{
  outData[22] = *MEMORY[0x1E4F143B8];
  outData[0] = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6270736E6DLL;
  inAddress.mElement = 0;
  if (!AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData)) {
    return outData[0];
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

const void *vaeCopySelectedDataSourceForPortAndRouteConfiguration(AudioObjectPropertyElement a1, int a2, int a3, const void *a4)
{
  CFTypeRef cf = 0;
  RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a2, a3, 0, a4);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6261637263;
  inAddress.mElement = a1;
  UInt32 ioDataSize = 8;
  if (!AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &cf)&& cf&& (CFTypeID v8 = CFGetTypeID(cf), v8 == CFArrayGetTypeID()))
  {
    if (CFArrayGetCount((CFArrayRef)cf) < 1)
    {
      CFTypeRef v6 = 0;
    }
    else
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
      CFTypeRef v6 = ValueAtIndex;
      if (ValueAtIndex) {
        CFRetain(ValueAtIndex);
      }
    }
  }
  else
  {
    CFTypeRef v6 = 0;
    CFTypeRef cf = 0;
  }
  if (RouteConfigurationDictionary) {
    CFRelease(RouteConfigurationDictionary);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

CFArrayRef vaeCopyHiddenSubPortDescriptionsForPort(AudioObjectID a1)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef outData = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62706E6173;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  if (AudioObjectHasProperty(a1, &inAddress))
  {
    OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
    CFArrayRef Copy = 0;
    CFTypeRef v6 = outData;
    if (!PropertyData && outData)
    {
      CFTypeID v7 = CFGetTypeID(outData);
      CFTypeID TypeID = CFArrayGetTypeID();
      CFTypeRef v6 = outData;
      if (v7 == TypeID && (v9 = CFArrayGetCount((CFArrayRef)outData), CFTypeRef v6 = outData, v9))
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)outData);
        if (Count >= 1)
        {
          CFIndex v11 = Count;
          CFIndex v12 = 0;
          while (1)
          {
            AudioObjectPropertyElement valuePtr = 0;
            keys[0] = 0;
            keys[1] = 0;
            values[0] = 0;
            values[1] = 0;
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)outData, v12);
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
            if (ValueAtIndex) {
              break;
            }
            uint64_t v17 = vaeCopyNameForSubPort(a1, valuePtr);
            if (v17)
            {
              CFNumberRef v14 = (void *)v17;
              CFIndex v15 = 0;
LABEL_13:
              char v16 = 0;
              keys[v15] = @"DataSourceName";
              values[v15++] = v14;
LABEL_14:
              CFDictionaryRef v18 = CFDictionaryCreate(v2, (const void **)keys, (const void **)values, v15, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CFArrayAppendValue(Mutable, v18);
              if (v18) {
                CFRelease(v18);
              }
              if ((v16 & 1) == 0) {
                CFRelease(v14);
              }
              goto LABEL_19;
            }
            CFArrayAppendValue(Mutable, 0);
LABEL_19:
            if (v11 == ++v12) {
              goto LABEL_20;
            }
          }
          keys[0] = @"DataSourceID";
          values[0] = ValueAtIndex;
          CFNumberRef v14 = (void *)vaeCopyNameForSubPort(a1, valuePtr);
          CFIndex v15 = 1;
          if (v14) {
            goto LABEL_13;
          }
          char v16 = 1;
          goto LABEL_14;
        }
LABEL_20:
        CFArrayRef Copy = CFArrayCreateCopy(v2, Mutable);
        CFTypeRef v6 = outData;
      }
      else
      {
        CFArrayRef Copy = 0;
      }
    }
    if (v6)
    {
      CFRelease(v6);
      CFTypeRef outData = 0;
    }
  }
  else
  {
    CFArrayRef Copy = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

id vaeCopyFigInputDeviceNameFromVADPort(uint64_t a1)
{
  unsigned int PortTypeFromPortID = vaeGetPortTypeFromPortID(a1);
  return CMSMVAUtility_CopyFigInputDeviceNameFromVADPortType(PortTypeFromPortID);
}

id CMSMVAUtility_CopyFigInputDeviceNameFromVADPortType(unsigned int a1)
{
  id v1 = [(NSDictionary *)[+[MXSessionManager sharedInstance] vadInputPortTypeToFigInputDeviceNameDict] objectForKey:a1];
  id v2 = v1;
  if (v1) {
    CFRetain(v1);
  }
  return v2;
}

BOOL vaeIsVoiceProcessingSupportedOnVADPort(AudioObjectID a1)
{
  inAddress.mElement = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"rpvpbolg";
  UInt32 ioDataSize = 4;
  int outData = 0;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData)) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = outData == 0;
  }
  return !v1;
}

__CFArray *vaeCopyChannelNamesForPortAndNumberOfChannels(uint64_t a1, const void *a2, CFIndex capacity)
{
  int v3 = capacity;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity, MEMORY[0x1E4F1D510]);
  CFTypeID v8 = Mutable;
  if (!v3) {
    return v8;
  }
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      if (a2) {
        CFArrayAppendValue(Mutable, a2);
      }
      return v8;
    }
LABEL_20:
    CFLocaleRef v16 = CFLocaleCopyCurrent();
    uint64_t v17 = CFNumberFormatterCreate(0, v16, kCFNumberFormatterDecimalStyle);
    if (v17)
    {
      int v18 = 0;
      do
      {
        int valuePtr = ++v18;
        CFStringRef v19 = CFNumberFormatterCreateStringWithValue(0, v17, kCFNumberSInt32Type, &valuePtr);
        CFStringRef v20 = CFStringCreateWithFormat(v6, 0, @"%@ %@", a2, v19);
        if (v20)
        {
          CFStringRef v21 = v20;
          CFArrayAppendValue(v8, v20);
          CFRelease(v21);
        }
        if (v19) {
          CFRelease(v19);
        }
      }
      while (v3 != v18);
      if (!v16) {
        goto LABEL_29;
      }
    }
    else
    {
      FigSignalErrorAt();
      if (!v16) {
        goto LABEL_29;
      }
    }
    CFRelease(v16);
LABEL_29:
    if (!v17) {
      return v8;
    }
    CFIndex v15 = v17;
LABEL_31:
    CFRelease(v15);
    return v8;
  }
  if (vaeGetPortTypeFromPortID(a1) != 1885892727
    && vaeGetPortTypeFromPortID(a1) != 1885892674)
  {
    goto LABEL_20;
  }
  CFStringRef v9 = vaeCopyLocalizedString(@"mclf");
  CFStringRef v10 = vaeCopyLocalizedString(@"mcrt");
  CFIndex v11 = @"Left";
  if (v9) {
    CFIndex v11 = (__CFString *)v9;
  }
  CFStringRef v12 = CFStringCreateWithFormat(v6, 0, @"%@ %@", a2, v11);
  CFArrayAppendValue(v8, v12);
  CFNumberRef v13 = @"Right";
  if (v10) {
    CFNumberRef v13 = (__CFString *)v10;
  }
  CFStringRef v14 = CFStringCreateWithFormat(v6, 0, @"%@ %@", a2, v13);
  CFArrayAppendValue(v8, v14);
  if (v12) {
    CFRelease(v12);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10)
  {
    CFIndex v15 = v10;
    goto LABEL_31;
  }
  return v8;
}

uint64_t FigSystemControllerRemoteCreate(uint64_t a1, uint64_t a2, void *a3)
{
  xpc_object_t v18 = 0;
  xpc_object_t xdict = 0;
  if (remoteSystemController_EnsureClientEstablished_err) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = gFigSystemControllerRemoteClient == 0;
  }
  if (!v4) {
    goto LABEL_13;
  }
  id v5 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  CFAllocatorRef v6 = objc_msgSend(v5, "initWithObjectsAndKeys:", @"ServerConnectionDied", *MEMORY[0x1E4F22080], 0, 0, 0);
  uint64_t v7 = FigXPCRemoteClientCreate();
  remoteSystemController_EnsureClientEstablished_err = v7;
  if (v7 || gFigSystemControllerRemoteClient == 0) {
    MXSimulateCrash([(id)objc_msgSend(NSString stringWithFormat:@"FigXPCRemoteClientCreate failed with error=%d, gFigSystemControllerRemoteClient=%p", v7, gFigSystemControllerRemoteClient), "UTF8String"]);
  }

  uint64_t v9 = remoteSystemController_EnsureClientEstablished_err;
  if (!remoteSystemController_EnsureClientEstablished_err)
  {
LABEL_13:
    FigSystemControllerGetClassID();
    uint64_t v10 = CMDerivedObjectCreate();
    if (v10)
    {
      uint64_t v9 = v10;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      CFIndex v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v12 = FigXPCCreateBasicMessage();
      if (v12
        || (program_sdk_versiouint64_t n = dyld_get_program_sdk_version(),
            xpc_dictionary_set_uint64(xdict, (const char *)kFigSystemControllerXPCMsgParam_ClientLinkedSDK, program_sdk_version), uint64_t v12 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v12))
      {
        uint64_t v9 = v12;
        goto LABEL_21;
      }
      uint64_t uint64 = xpc_dictionary_get_uint64(v18, (const char *)*MEMORY[0x1E4F20280]);
      *(void *)CMBaseObjectGetDerivedStorage() = uint64;
      uint64_t v9 = FigXPCRemoteClientAssociateObject();
      if (!v9)
      {
        *a3 = 0;
        goto LABEL_21;
      }
      CFIndex v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_21:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t FigSystemControllerGetClassID()
{
  if (FigSystemControllerGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&FigSystemControllerGetClassID_sRegisterOnce, &FigSystemControllerGetClassID_sClassID, (dispatch_function_t)systemController_getClassID);
  }
  return FigSystemControllerGetClassID_sClassID;
}

uint64_t FigRouteDiscovererXPCRemoteCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 && a3)
  {
    if (dword_1EB3BA208)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (figRouteDiscovererRemoteXPC_EnsureClientEstablished_onceToken != -1) {
      dispatch_once(&figRouteDiscovererRemoteXPC_EnsureClientEstablished_onceToken, &__block_literal_global_32);
    }
    uint64_t Internal = figRouteDiscovererRemoteXPC_EnsureClientEstablished_err;
    if (!figRouteDiscovererRemoteXPC_EnsureClientEstablished_err)
    {
      uint64_t v7 = FigXPCCreateBasicMessage();
      if (v7
        || (uint64_t v7 = FigXPCMessageSetCFDictionary(), v7)
        || (uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v7))
      {
        uint64_t Internal = v7;
        CFTypeID v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
LABEL_14:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_15;
      }
      uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
      if (!uint64)
      {
        uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t Internal = 0xFFFFFFFFLL;
        goto LABEL_15;
      }
      uint64_t Internal = remoteXPCRouteDiscoverer_CreateInternal(uint64, a3);
      if (!Internal)
      {
LABEL_15:
        FigXPCRelease();
        FigXPCRelease();
        return Internal;
      }
    }
    CFIndex v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    goto LABEL_14;
  }
  id v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954516;
}

uint64_t remoteXPCRouteDiscoverer_CreateInternal(uint64_t a1, void *a2)
{
  FigRouteDiscovererGetClassID();
  uint64_t result = CMDerivedObjectCreate();
  if (!result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFAllocatorRef v6 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v7 = dispatch_queue_create("com.apple.coremedia.remoteroutediscoverer.cache", v6);
    *(void *)(DerivedStorage + 16) = v7;
    if (v7)
    {
      uint64_t result = FigEndpointRPCCacheCreate();
      if (!result)
      {
        *(void *)(DerivedStorage + 8) = a1;
        FigXPCRemoteClientAssociateObject();
        uint64_t result = 0;
      }
    }
    else
    {
      uint64_t result = FigSignalErrorAt();
    }
  }
  *a2 = 0;
  return result;
}

uint64_t HandleRouteDiscovererRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  CFTypeRef cf = 0;
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v4) {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v6 = v4;
  if (!v4) {
    return 4294949956;
  }
  return v6;
}

uint64_t FigRouteDiscovererGetTypeID()
{
  if (FigRouteDiscovererGetClassID_sRegisterFigRouteDiscovererTypeOnce != -1) {
    dispatch_once(&FigRouteDiscovererGetClassID_sRegisterFigRouteDiscovererTypeOnce, &__block_literal_global_7);
  }
  uint64_t v0 = sFigRouteDiscovererClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t discoverer_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  CFArrayRef v27 = &v26;
  uint64_t v28 = 0x2020000000;
  int v29 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_36;
  }
  dispatch_queue_t v7 = (void *)DerivedStorage;
  if (!DerivedStorage)
  {
    CFStringRef v20 = v27;
    int v21 = -17346;
    goto LABEL_37;
  }
  if (!CFEqual(a2, @"clientPID"))
  {
    if (CFEqual(a2, @"clientName"))
    {
      if (a3)
      {
        CFTypeID v11 = CFGetTypeID(a3);
        if (v11 == CFStringGetTypeID())
        {
          uint64_t v12 = (const void *)v7[2];
          if (v12)
          {
            CFRelease(v12);
            v7[2] = 0;
          }
          CFNumberRef v13 = (void *)CFRetain(a3);
          goto LABEL_23;
        }
      }
    }
    else if (CFEqual(a2, @"audioSessionID"))
    {
      if (!a3)
      {
        *((_DWORD *)v7 + 2) = 0;
        goto LABEL_38;
      }
      CFTypeID v14 = CFGetTypeID(a3);
      if (v14 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v7 + 1);
        goto LABEL_38;
      }
    }
    else if (CFEqual(a2, @"OnBehalfOf"))
    {
      if (a3)
      {
        CFTypeID v15 = CFGetTypeID(a3);
        if (v15 == CFDictionaryGetTypeID())
        {
          CFLocaleRef v16 = (const void *)v7[4];
          void v7[4] = a3;
          CFRetain(a3);
          if (v16) {
            CFRelease(v16);
          }
          goto LABEL_38;
        }
      }
    }
    else
    {
      if (!CFEqual(a2, @"BluetoothRoutesOnly"))
      {
        SharedQueue = FigRouteDiscoveryManagerGetSharedQueue();
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        v25[2] = __discoverer_SetProperty_block_invoke_2;
        v25[3] = &unk_1E57C60E0;
        v25[6] = a2;
        v25[7] = a1;
        v25[8] = a3;
        v25[4] = &v26;
        v25[5] = v7;
        MXDispatchSync((uint64_t)"discoverer_SetProperty", (uint64_t)"FigRouteDiscoverer.m", 485, 0, 0, SharedQueue, (uint64_t)v25);
        goto LABEL_38;
      }
      if (a3)
      {
        CFTypeID v17 = CFGetTypeID(a3);
        if (v17 == CFBooleanGetTypeID())
        {
          xpc_object_t v18 = (const void *)v7[3];
          if (v18)
          {
            CFRelease(v18);
            v7[3] = 0;
          }
          v7[3] = CFRetain(a3);
          CFStringRef v19 = FigRouteDiscoveryManagerGetSharedQueue();
          MXDispatchAsync((uint64_t)"discoverer_SetProperty", (uint64_t)"FigRouteDiscoverer.m", 460, 0, 0, v19, (uint64_t)&__block_literal_global_46);
          goto LABEL_38;
        }
      }
    }
    goto LABEL_36;
  }
  if (!a3) {
    goto LABEL_38;
  }
  CFTypeID v8 = CFGetTypeID(a3);
  if (v8 != CFNumberGetTypeID())
  {
LABEL_36:
    CFStringRef v20 = v27;
    int v21 = -17340;
LABEL_37:
    *((_DWORD *)v20 + 6) = v21;
    goto LABEL_38;
  }
  CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (char *)v7 + 12);
  memset(buffer, 0, sizeof(buffer));
  int v9 = *((_DWORD *)v7 + 3);
  if (v9 < 1)
  {
    unsigned int v10 = 0;
    goto LABEL_20;
  }
  unsigned int v10 = proc_name(v9, buffer, 0x20u);
  if ((v10 & 0x80000000) == 0) {
LABEL_20:
  }
    *((unsigned char *)buffer + v10) = 0;
  if (!v7[2])
  {
    CFNumberRef v13 = (void *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)buffer, 0x8000100u);
LABEL_23:
    v7[2] = v13;
  }
LABEL_38:
  uint64_t v22 = *((unsigned int *)v27 + 6);
  _Block_object_dispose(&v26, 8);
  return v22;
}

void sub_194D27B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRouteDiscoveryManagerGetSharedQueue()
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  uint64_t v0 = (uint64_t)&qword_1E93591B0;
  if (!qword_1E93591B0) {
    uint64_t v0 = 8;
  }
  return *(void *)v0;
}

uint64_t FigRouteDiscovererCreate(int a1, CFDictionaryRef theDict, CFTypeRef *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unsigned int valuePtr = 0;
  if (!theDict) {
    goto LABEL_33;
  }
  CFArrayRef Value = (void *)CFDictionaryGetValue(theDict, @"discovererType");
  if (!Value) {
    goto LABEL_33;
  }
  dispatch_queue_t v7 = Value;
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFNumberGetTypeID()) {
    goto LABEL_33;
  }
  if ([v7 intValue] == 8 && !MX_FeatureFlags_IsSystemInputPickerEnabled())
  {
    unsigned int v28 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v25 = 4294949955;
    goto LABEL_30;
  }
  CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr > 8) {
    goto LABEL_33;
  }
  FigRouteDiscovererGetClassID();
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
    uint64_t v25 = v9;
    goto LABEL_30;
  }
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"audioSessionID");
  CFNumberRef v11 = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v11, kCFNumberSInt32Type, (void *)8);
      goto LABEL_11;
    }
LABEL_33:
    uint64_t v25 = 4294949956;
    goto LABEL_30;
  }
LABEL_11:
  CFUUIDRef v13 = CFUUIDCreate(v3);
  CFStringRef v14 = CFUUIDCreateString(v3, v13);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t DerivedStorage = CFRetain(@"DiscoveryMode_None");
  CFTypeRef v16 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  if (*MEMORY[0x1E4F1CFC8]) {
    CFTypeRef v16 = CFRetain(v16);
  }
  *(void *)(DerivedStorage + 24) = v16;
  *(_DWORD *)(DerivedStorage + 40) = valuePtr;
  *(void *)(DerivedStorage + 48) = 0;
  *(void *)(DerivedStorage + 56) = CFRetain(v14);
  *(void *)(DerivedStorage + 64) = FigReentrantMutexCreate();
  *(unsigned char *)(DerivedStorage + 72) = 0;
  *(void *)(DerivedStorage + 32) = 0;
  *(void *)(DerivedStorage + 88) = objc_alloc_init(MEMORY[0x1E4F1C978]);
  *(void *)(DerivedStorage + 80) = objc_alloc_init(MEMORY[0x1E4F1C978]);
  SharedQueue = FigRouteDiscoveryManagerGetSharedQueue();
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = __FigRouteDiscovererCreate_block_invoke;
  v26[3] = &__block_descriptor_56_e5_v8__0l;
  v26[4] = cf;
  v26[5] = DerivedStorage;
  v26[6] = v11;
  MXDispatchSync((uint64_t)"FigRouteDiscovererCreate", (uint64_t)"FigRouteDiscoverer.m", 718, 0, 0, SharedQueue, (uint64_t)v26);
  if (dword_1E9359D80)
  {
    unsigned int v28 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    xpc_object_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v19 = v28;
    if (os_log_type_enabled(v18, type)) {
      unsigned int v20 = v19;
    }
    else {
      unsigned int v20 = v19 & 0xFFFFFFFE;
    }
    if (v20)
    {
      uint64_t v21 = *(int *)(DerivedStorage + 40);
      if (v21 > 8) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = off_1E57C9288[v21];
      }
      int v31 = 136315651;
      unsigned int v32 = "FigRouteDiscovererCreate";
      __int16 v33 = 2114;
      CFDictionaryRef v34 = v22;
      __int16 v35 = 2113;
      CFStringRef v36 = v14;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *a3 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v25 = 0;
LABEL_30:
  if (cf) {
    CFRelease(cf);
  }
  return v25;
}

uint64_t FigRouteDiscovererGetClassID()
{
  if (FigRouteDiscovererGetClassID_sRegisterFigRouteDiscovererTypeOnce != -1) {
    dispatch_once(&FigRouteDiscovererGetClassID_sRegisterFigRouteDiscovererTypeOnce, &__block_literal_global_7);
  }
  return sFigRouteDiscovererClassID;
}

uint64_t cmsSetAudioMode(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = (id)[a1 audioMode];
  uint64_t VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
  if (CMSMUtility_IsModeValidForCategory((const void *)[a1 audioCategory]))
  {
    if ([a1 mode] == VADModeFromFigModeName)
    {
      [a1 audioMode];
      if (FigCFEqual()) {
        goto LABEL_20;
      }
    }
    if (![a1 isSharePlayCallSession]
      || CMSMUtility_AreCategoryAndModeValidForSharePlayCallSession([a1 audioCategory]))
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend(a1, "setAudioMode:", a2, v16, v17);
      [a1 setDefaultVPChatMode:0];
      [a1 setMode:VADModeFromFigModeName];
      uint64_t CustomizedCategory = (const void *)CMSUtility_GetCustomizedCategory(a1);
      uint64_t v11 = [a1 interruptionStyle];
      if ([a1 interruptionStyleSetByClient]) {
        BOOL v12 = [a3 objectForKey:@"InterruptionStyle"] == 0;
      }
      else {
        BOOL v12 = 0;
      }
      [+[MXNowPlayingAppManager sharedInstance] setIgnoreNowPlayingAppUpdates:v12];
      uint64_t v13 = cmsSetAudioCategory(a1, CustomizedCategory, 1, a3);
      if (v13)
      {
        uint64_t v9 = v13;
        [a1 setAudioMode:v6];
        [a1 setMode:CMSMVAUtility_GetVADModeFromFigModeName((uint64_t)v6)];
        goto LABEL_24;
      }
      [a1 updateDefaultInterruptionFadeDuration:v6];
      [+[MXNowPlayingAppManager sharedInstance] setIgnoreNowPlayingAppUpdates:0];
      if (v12) {
        [a1 setInterruptionStyleAtClientRequest:v11];
      }
      CMSMUtility_InformAirPlayOfAudioModeIfNecessary([a1 routingContextUUID]);
      CMSMNotificationUtility_PostSessionAudioModeDidChange(a1);
      if ([a1 hasAudioMode:@"Beacon"])
      {
        [a1 setMakesMusicResume:0];
        uint64_t v9 = 0;
        if (MX_FeatureFlags_CanClientsSetEmergencyAlertPriority()) {
          goto LABEL_24;
        }
        if ([a1 clientPriority]) {
          [a1 setClientPriority:0];
        }
      }
LABEL_20:
      uint64_t v9 = 0;
      goto LABEL_24;
    }
    if (dword_1E9359ED0)
    {
      CFStringRef v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v9 = 4294951615;
  }
  else
  {
    uint64_t v9 = 4294954315;
  }
LABEL_24:
  if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
    && [a1 isActive]
    && MX_FeatureFlags_IsCallManagementMuteControlEnabled())
  {
    [+[MXSessionManager sharedInstance] applyUplinkMute:a1];
  }

  return v9;
}

uint64_t CMSMUtility_IsModeValidForCategory(const void *a1)
{
  if (FigCFEqual()) {
    return 1;
  }
  if ([+[MXSessionManager sharedInstance] isSpeechDetectCategory:a1])
  {
    uint64_t result = 0;
    goto LABEL_16;
  }
  if (FigCFEqual())
  {
    uint64_t result = !CMSMUtility_IsCategoryInputOnly(a1);
    goto LABEL_16;
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    goto LABEL_15;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if (FigCFEqual() || FigCFEqual()) {
      goto LABEL_25;
    }
    goto LABEL_32;
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
LABEL_31:
    uint64_t result = CMSMUtility_IsRecordingCategory(a1);
    goto LABEL_16;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    if (CMSMUtility_IsRecordingCategory(a1)
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual())
    {
      goto LABEL_25;
    }
LABEL_32:
    int IsPlayAndRecordCategory = FigCFEqual();
LABEL_33:
    uint64_t result = IsPlayAndRecordCategory != 0;
    goto LABEL_16;
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    goto LABEL_43;
  }
  if (FigCFEqual()) {
    goto LABEL_15;
  }
  if (FigCFEqual())
  {
    if (CMSMUtility_IsCategoryInputOnly(a1))
    {
LABEL_25:
      uint64_t result = 1;
      goto LABEL_16;
    }
    int IsPlayAndRecordCategory = CMSMUtility_IsPlayAndRecordCategory((uint64_t)a1);
    goto LABEL_33;
  }
  if (FigCFEqual() || FigCFEqual())
  {
LABEL_43:
    uint64_t result = FigCFEqual();
    goto LABEL_16;
  }
  if (FigCFEqual() || FigCFEqual())
  {
LABEL_15:
    uint64_t result = CMSMUtility_IsPlayAndRecordCategory((uint64_t)a1);
    goto LABEL_16;
  }
  uint64_t result = FigCFEqual();
  if (result) {
    goto LABEL_31;
  }
LABEL_16:
  if ((dword_1E9359C14 & 2) != 0) {
    return result || FigCFEqual() != 0;
  }
  return result;
}

void CMSMNotificationUtility_PostSessionAudioModeDidChange(void *a1)
{
  id v2 = a1;
  CFAllocatorRef v3 = MXGetNotificationSenderQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __CMSMNotificationUtility_PostSessionAudioModeDidChange_block_invoke;
  void v4[3] = &unk_1E57C6368;
  void v4[4] = a1;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSessionAudioModeDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 61, 0, 0, v3, (uint64_t)v4);
}

uint64_t cmsSetDefaultBuiltInRoute(void *a1, const void *a2, void *a3)
{
  if (![a1 allowsDefaultBuiltInRouteCustomization]) {
    return 4294954315;
  }
  [a1 setDefaultBuiltInRoutePreference:a2];
  [a1 setDefaultBuiltInRoutePreferenceSetByClient:1];
  if (a2)
  {
    if (!CFEqual(a2, @"Speaker") && !CFEqual(a2, @"Receiver")) {
      return 4294954315;
    }
  }
  uint64_t CustomizedCategory = (const void *)CMSUtility_GetCustomizedCategory(a1);
  [a1 audioCategory];
  if (FigCFEqual()) {
    return 0;
  }
  uint64_t v9 = [a1 interruptionStyle];
  if ([a1 interruptionStyleSetByClient]) {
    BOOL v10 = [a3 objectForKey:@"InterruptionStyle"] == 0;
  }
  else {
    BOOL v10 = 0;
  }
  [+[MXNowPlayingAppManager sharedInstance] setIgnoreNowPlayingAppUpdates:v10];
  uint64_t v7 = cmsSetAudioCategory(a1, CustomizedCategory, 0, a3);
  [+[MXNowPlayingAppManager sharedInstance] setIgnoreNowPlayingAppUpdates:0];
  if (v10) {
    [a1 setInterruptionStyleAtClientRequest:v9];
  }
  return v7;
}

BOOL CMSMUtility_IsRecordingCategory(const void *a1)
{
  return a1
      && (CFEqual(a1, @"Record")
       || CFEqual(a1, @"Record_WithBluetooth")
       || CFEqual(a1, @"PlayAndRecord")
       || CFEqual(a1, @"PlayAndRecord_WithBluetooth")
       || CFEqual(a1, @"PlayAndRecord_NoBluetooth_DefaultToSpeaker")
       || CFEqual(a1, @"PlayAndRecord_WithBluetooth_DefaultToSpeaker"));
}

uint64_t __FigRoutingContextGetClassID_block_invoke()
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigRoutingContextClassDesc, ClassID, 1, &sFigRoutingContextClassID);
}

uint64_t __FigRouteDiscovererGetClassID_block_invoke()
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&sFigRouteDiscovererClassDesc, ClassID, 1, &sFigRouteDiscovererClassID);
}

uint64_t pvmUpdatePreferredVolumeAndLimit(uint64_t result, uint64_t a2, const __CFString *a3, const void *a4, int a5, int a6, uint64_t a7, float a8, float a9)
{
  if (!*(unsigned char *)(sStorage + 8))
  {
    uint64_t v16 = result;
    if (a6)
    {
      pvmAssureCurrentCategoryAndDeviceRoute();
      CFStringRef v17 = *(const __CFString **)(sStorage + 216);
      uint64_t v18 = *(const void **)(sStorage + 224);
      long long v19 = *(_OWORD *)(sStorage + 264);
      long long v28 = *(_OWORD *)(sStorage + 248);
      long long v29 = v19;
      uint64_t v30 = *(void *)(sStorage + 280);
      pvmGetVolumePref(v17, v18, &v28);
      uint64_t v20 = sStorage;
      *(_DWORD *)(sStorage + 292) = v21;
      if (!*(unsigned char *)(v20 + 8) && (FigCFEqual() || FigCFEqual()))
      {
        if (FigCFEqual()) {
          pvmSetSystemSoundVolumeMultiplierForVolumeGuts(*(float *)(sStorage + 292));
        }
      }
    }
    MEMORY[0x199716EA0](*(void *)sStorage);
    long long v22 = *(_OWORD *)(sStorage + 264);
    long long v28 = *(_OWORD *)(sStorage + 248);
    long long v29 = v22;
    uint64_t v30 = *(void *)(sStorage + 280);
    float v23 = PVMGetVolumePreference(a3, a4, (uint64_t)&v28);
    CFArrayRef v24 = +[MXPreferredVolumeManager sharedInstance];
    *(float *)&double v25 = v23;
    *(float *)&double v26 = a8;
    *(float *)&double v27 = a9;
    [(MXPreferredVolumeManager *)v24 postNotification:@"VolumePreferenceDidChange" category:a3 mode:a4 volume:a5 != 0 rampUpwardDuration:v16 rampDownwardDuration:a2 silenceVolumeHUD:v25 reason:v26 refCon:v27 sequenceNumber:a7];
    JUMPOUT(0x199716E90);
  }
  return result;
}

BOOL PVMIsCategoryAndRouteInfoCurrent(const __CFString *a1, const void *a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)CFTypeRef cf = *(_OWORD *)a3;
  long long v12 = v5;
  uint64_t v13 = *(void *)(a3 + 32);
  BOOL v6 = PVMIsCurrentDeviceRoute((uint64_t)cf);
  CFTypeRef v10 = 0;
  cf[0] = 0;
  MEMORY[0x199716E90](*(void *)sStorage);
  MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a1, a2);
  pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, cf, &v10);
  if (FigCFEqual()) {
    BOOL v8 = FigCFEqual() != 0;
  }
  else {
    BOOL v8 = 0;
  }
  MEMORY[0x199716EA0](*(void *)sStorage);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v6 && v8;
}

void cmsmGetAndSetVolumePreferencesForActiveVolumeClient(void *a1, uint64_t a2, int a3, float a4, float a5, float a6, uint64_t a7, uint64_t a8, const __CFString **a9, const void **a10, __CFString *a11, const void *a12, const void *a13, const __CFString *a14, unsigned __int8 a15, unsigned char *a16, BOOL *a17, float *a18, unsigned char *a19, unsigned char *a20,unsigned __int8 a21,char a22)
{
  long long v28 = a1;
  int v29 = 0;
  CFStringRef v30 = a14;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if (a13 && !a14)
  {
    uint64_t v32 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)a13, 1, *MEMORY[0x1E4F20660], 0);
    if (v32)
    {
      __int16 v33 = (const void *)v32;
      *(void *)&long long v84 = 0;
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v37 = *(void (**)(uint64_t, uint64_t, void, long long *))(v36 + 48);
      if (v37 && (v37(CMBaseObject, 0x1EE5F4148, *MEMORY[0x1E4F1CF80], &v84), (void)v84))
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v84, kCFNumberSInt64Type, &valuePtr);
        CFStringRef v30 = vaeCopyRouteSubtypeFromVADPort(valuePtr);
        if ((void)v84) {
          CFRelease((CFTypeRef)v84);
        }
        int v29 = 1;
      }
      else
      {
        CFStringRef v30 = 0;
        int v29 = 0;
      }
      CFRelease(v33);
    }
    else
    {
      int v29 = 0;
      CFStringRef v30 = 0;
    }
    long long v28 = a1;
  }
  v80[0] = 0;
  v80[1] = a12;
  cf[0] = v30;
  cf[1] = a13;
  uint64_t v82 = 0;
  long long v84 = *(_OWORD *)v80;
  long long v85 = *(_OWORD *)cf;
  uint64_t v86 = 0;
  v80[0] = PVMGetMappedEndpointType((uint64_t)&v84);
  if (v28 && a16 && a17 && a18 && a19)
  {
    CFStringRef v77 = v30;
    switch(a3)
    {
      case 1:
        vaemUnmuteFullMuteIfMuted();
        float v42 = PVMGetCurrentPreferredVolume();
        *a18 = v42 + a6;
        PVMSetCurrentPreferredVolume(a2, a21, v42 + a6);
        float v43 = PVMGetCurrentPreferredVolume();
        *a18 = v43;
        MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(1u, a15, v42, v43);
        if (dword_1E9359ED0) {
          goto LABEL_34;
        }
        goto LABEL_77;
      case 2:
        vaemUnmuteFullMuteIfMuted();
        float v44 = PVMGetCurrentPreferredVolume();
        PVMSetCurrentPreferredVolume(a2, a21, a6);
        float v45 = PVMGetCurrentPreferredVolume();
        *a18 = v45;
        MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(2u, a15, v44, v45);
        if (dword_1E9359ED0) {
          goto LABEL_34;
        }
        goto LABEL_77;
      case 3:
        long long v46 = a18;
        float v47 = PVMGetCurrentPreferredVolume();
        goto LABEL_36;
      case 4:
        vaemUnmuteFullMuteIfMuted();
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        float v48 = PVMGetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v84);
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        PVMSetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v84, 0, a2, a21, v48 + a6);
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        float v49 = PVMGetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v84);
        *a18 = v49;
        MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(4u, a15, v48, v49);
        if (dword_1E9359ED0) {
          goto LABEL_34;
        }
        goto LABEL_77;
      case 5:
        vaemUnmuteFullMuteIfMuted();
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        float v50 = PVMGetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v84);
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        PVMSetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v84, 0, a2, a21, a6);
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        float v51 = PVMGetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v84);
        *a18 = v51;
        MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(5u, a15, v50, v51);
        if (dword_1E9359ED0)
        {
LABEL_34:
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_77;
      case 6:
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        long long v46 = a18;
        float v47 = PVMGetCurrentPreferredVolumeForDeviceRoute((uint64_t)&v84);
LABEL_36:
        *long long v46 = v47;
        goto LABEL_77;
      case 7:
        goto LABEL_40;
      case 8:
        if (!a20) {
          goto LABEL_77;
        }
        goto LABEL_43;
      case 9:
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        if (PVMIsCurrentDeviceRoute((uint64_t)&v84))
        {
LABEL_40:
          char v53 = [v28 userMuted];
          *a19 = v53 ^ (MXCoreSessionSetProperty((int)v28, @"UserMuted") == 0);
          *a16 = 1;
        }
        goto LABEL_77;
      case 10:
        if (a20)
        {
          long long v84 = *(_OWORD *)v80;
          long long v85 = *(_OWORD *)cf;
          uint64_t v86 = v82;
          if (PVMIsCurrentDeviceRoute((uint64_t)&v84)) {
LABEL_43:
          }
            *a20 = [v28 userMuted];
          else {
            *a20 = 0;
          }
        }
        goto LABEL_77;
      case 11:
      case 12:
      case 13:
        if (!a11) {
          goto LABEL_77;
        }
        uint64_t v38 = (CFTypeRef *)a9;
        int v39 = PVMCategoriesAreEquivalent(*a9, *a10, a11, 0);
        int v40 = v39;
        if (a12)
        {
          if (a13) {
            CFTypeRef v41 = CFRetain(a13);
          }
          else {
            CFTypeRef v41 = 0;
          }
          cf[1] = v41;
          v80[1] = CFRetain(a12);
          if (v77) {
            CFTypeRef v63 = CFRetain(v77);
          }
          else {
            CFTypeRef v63 = 0;
          }
          uint64_t v38 = (CFTypeRef *)a9;
          cf[0] = v63;
        }
        else if (v39)
        {
          PVMCopyCurrentDeviceRoute(&v80[1], &cf[1], cf);
        }
        else
        {
          CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration((NSDictionary *)a11, 0, 0, 0, &v80[1], &cf[1], cf);
        }
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        v80[0] = PVMGetMappedEndpointType((uint64_t)&v84);
        if (!v40)
        {
          if (*v38)
          {
            CFRelease(*v38);
            *uint64_t v38 = 0;
          }
          if (*a10)
          {
            CFRelease(*a10);
            *a10 = 0;
          }
          *uint64_t v38 = CFRetain(a11);
        }
        if (a3 == 12)
        {
          PVMSetEnabled(1);
          if (!a22) {
            vaemUnmuteFullMuteIfMuted();
          }
          CFStringRef v69 = (const __CFString *)*v38;
          uint64_t v70 = *a10;
          long long v84 = *(_OWORD *)v80;
          long long v85 = *(_OWORD *)cf;
          uint64_t v86 = v82;
          float v71 = PVMGetVolumePreference(v69, v70, (uint64_t)&v84);
          CFStringRef v72 = (const __CFString *)*v38;
          long long v73 = *a10;
          long long v84 = *(_OWORD *)v80;
          long long v85 = *(_OWORD *)cf;
          uint64_t v86 = v82;
          PVMSetVolumePreference(v72, v73, a15, (uint64_t)&v84, a2, a21, a6, a4, a5);
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xCu, a15, v71, a6);
          if (dword_1E9359ED0)
          {
LABEL_66:
            uint64_t v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          if (a3 != 11) {
            goto LABEL_68;
          }
          PVMSetEnabled(1);
          vaemUnmuteFullMuteIfMuted();
          CFStringRef v64 = (const __CFString *)*v38;
          double v65 = *a10;
          long long v84 = *(_OWORD *)v80;
          long long v85 = *(_OWORD *)cf;
          uint64_t v86 = v82;
          float v66 = PVMGetVolumePreference(v64, v65, (uint64_t)&v84);
          *a18 = v66 + a6;
          CFStringRef v67 = (const __CFString *)*v38;
          float v68 = *a10;
          long long v84 = *(_OWORD *)v80;
          long long v85 = *(_OWORD *)cf;
          uint64_t v86 = v82;
          PVMSetVolumePreference(v67, v68, a15, (uint64_t)&v84, a2, a21, v66 + a6, a4, a5);
          MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xBu, a15, v66, *a18);
          if (dword_1E9359ED0) {
            goto LABEL_66;
          }
        }
        *a17 = v40 == 0;
LABEL_68:
        CFStringRef v75 = (const __CFString *)*v38;
        long long v76 = *a10;
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        *a18 = PVMGetVolumePreference(v75, v76, (uint64_t)&v84);
        if (cf[1])
        {
          CFRelease(cf[1]);
          cf[1] = 0;
        }
        if (v80[1])
        {
          CFRelease(v80[1]);
          v80[1] = 0;
        }
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
LABEL_77:
        if (v29)
        {
          if (v77) {
            CFRelease(v77);
          }
        }
        break;
      case 14:
        CFStringRef v54 = *a9;
        uint64_t v55 = *a10;
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        float v56 = PVMGetVolumePreference(v54, v55, (uint64_t)&v84);
        CFStringRef v57 = *a9;
        unsigned int v58 = *a10;
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        PVMSetRawVolumePreference(v57, v58, (uint64_t)&v84, a2, a21, a15, a6);
        CFStringRef v59 = *a9;
        uint64_t v60 = *a10;
        long long v84 = *(_OWORD *)v80;
        long long v85 = *(_OWORD *)cf;
        uint64_t v86 = v82;
        float v61 = PVMGetVolumePreference(v59, v60, (uint64_t)&v84);
        *a18 = v61;
        MXSMPostSpeechDetectStyleDidChangeForTriggeredVolumeChange(0xEu, a15, v56, v61);
        if (dword_1E9359ED0)
        {
          unsigned int v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *a17 = 1;
        goto LABEL_77;
      default:
        goto LABEL_77;
    }
  }
}

__CFString *PVMGetMappedEndpointType(uint64_t a1)
{
  BOOL v1 = @"Unspecified";
  uint64_t value = @"Unspecified";
  if (!*(void *)(a1 + 8)) {
    return v1;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(sStorage + 120);
  if (!v2) {
    return v1;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
  if (!Copy) {
    return v1;
  }
  CFDictionaryRef v6 = Copy;
  CFStringRef v7 = *(const __CFString **)(a1 + 8);
  if (v7)
  {
    CFDictionaryRef v8 = *(const __CFDictionary **)(sStorage + 184);
    if (v8)
    {
      CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(v8, *(const void **)(a1 + 8));
      CFTypeRef v10 = *(__CFString **)(a1 + 8);
    }
    else
    {
      CFTypeRef v10 = *(__CFString **)(a1 + 8);
      CFStringRef v9 = v10;
    }
    if (v9) {
      CFStringRef v11 = v9;
    }
    else {
      CFStringRef v11 = v7;
    }
  }
  else
  {
    CFTypeRef v10 = 0;
    CFStringRef v11 = 0;
  }
  CFStringRef MappedRouteIdentifier = (const __CFString *)pvmGetMappedRouteIdentifier(*(void **)(a1 + 24), v10);
  CFStringRef v13 = *(const __CFString **)(a1 + 16);
  if (v13)
  {
    CFStringRef v14 = *(void **)(a1 + 8);
    if (v14)
    {
      if (([v14 hasPrefix:@"HeadphonesBT"] & 1) == 0
        && ![v14 hasPrefix:@"HeadsetBT"])
      {
        MutableCFDictionaryRef Copy = CFStringCreateMutableCopy(v4, 16, v11);
        CFStringAppend(MutableCopy, @"~");
        CFStringAppend(MutableCopy, v13);
        if (!MappedRouteIdentifier) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
  }
  MutableCFDictionaryRef Copy = CFStringCreateMutableCopy(v4, 16, v11);
  if (MappedRouteIdentifier)
  {
LABEL_17:
    CFStringAppend(MutableCopy, @"~");
    CFStringAppend(MutableCopy, MappedRouteIdentifier);
  }
LABEL_18:
  CFDictionaryGetValueIfPresent(v6, MutableCopy, (const void **)&value);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  CFRelease(v6);
  return (__CFString *)value;
}

float PVMGetVolumePreference(const __CFString *a1, const void *a2, uint64_t a3)
{
  pvmGetDefaultVolume();
  CFTypeRef v23 = 0;
  CFTypeRef cf = 0;
  if (!*(void *)(a3 + 8)) {
    *(void *)(a3 + 8) = @"Speaker";
  }
  if (a1) {
    CFStringRef v6 = a1;
  }
  else {
    CFStringRef v6 = @"Audio/Video";
  }
  MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(v6, a2);
  pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, &cf, &v23);
  CFDictionaryRef v8 = *(void **)(a3 + 8);
  if (v8)
  {
    CFDictionaryRef v9 = *(const __CFDictionary **)(sStorage + 184);
    if (v9) {
      CFArrayRef Value = (void *)CFDictionaryGetValue(v9, *(const void **)(a3 + 8));
    }
    else {
      CFArrayRef Value = *(void **)(a3 + 8);
    }
    if (Value) {
      CFStringRef v11 = Value;
    }
    else {
      CFStringRef v11 = v8;
    }
  }
  else
  {
    CFStringRef v11 = 0;
  }
  *(void *)(a3 + 8) = v11;
  uint64_t MappedRouteIdentifier = pvmGetMappedRouteIdentifier(*(void **)(a3 + 24), v11);
  uint64_t v13 = 0;
  *(void *)(a3 + 24) = MappedRouteIdentifier;
  uint64_t v14 = *(void *)(a3 + 16);
  if (v14)
  {
    CFTypeID v15 = *(void **)(a3 + 8);
    if (v15)
    {
      if (([*(id *)(a3 + 8) hasPrefix:@"HeadphonesBT"] & 1) != 0
        || (int v16 = [v15 hasPrefix:@"HeadsetBT"], v13 = v14, v16))
      {
        uint64_t v13 = 0;
      }
    }
  }
  *(void *)(a3 + 16) = v13;
  MEMORY[0x199716E90](*(void *)sStorage);
  long long v17 = *(_OWORD *)(a3 + 16);
  v21[0] = *(_OWORD *)a3;
  v21[1] = v17;
  uint64_t v22 = *(void *)(a3 + 32);
  pvmGetVolumePref((const __CFString *)cf, v23, v21);
  float v19 = v18;
  MEMORY[0x199716EA0](*(void *)sStorage);
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v19;
}

void pvmGetVolumePref(const __CFString *a1, const void *a2, long long *a3)
{
  float valuePtr = pvmGetDefaultVolume();
  if (FigCFEqual())
  {
    CFDictionaryRef v6 = *(const __CFDictionary **)(sStorage + 184);
    if (v6) {
      CFArrayRef Value = (__CFString *)CFDictionaryGetValue(v6, @"broadcast");
    }
    else {
      CFArrayRef Value = @"broadcast";
    }
    uint64_t v9 = 0;
    unint64_t v8 = 0;
    *((void *)a3 + 2) = 0;
    *((void *)a3 + 3) = 0;
    if (!Value) {
      CFArrayRef Value = @"broadcast";
    }
    *((void *)a3 + 1) = Value;
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 2);
    unint64_t v8 = *((void *)a3 + 3);
    CFArrayRef Value = (__CFString *)*((void *)a3 + 1);
  }
  CFStringRef DeviceRouteString = pvmCreateDeviceRouteString(Value, v8, v9);
  if (DeviceRouteString
    && (CFDictionaryRef v11 = *(const __CFDictionary **)(sStorage + 16)) != 0
    && (CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v11, DeviceRouteString)) != 0)
  {
    CFDictionaryRef v13 = v12;
    CFStringRef CategoryStringWithModeAppended = pvmCreateCategoryStringWithModeAppended(a1, a2);
    CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v13, CategoryStringWithModeAppended);
    if (v15)
    {
      CFNumberRef v16 = v15;
      CFTypeID v17 = CFGetTypeID(v15);
      if (v17 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v16, kCFNumberFloat32Type, &valuePtr);
        long long v18 = a3[1];
        v21[0] = *a3;
        v21[1] = v18;
        uint64_t v22 = *((void *)a3 + 4);
        long long v19 = a3[1];
        long long v23 = *a3;
        long long v24 = v19;
        uint64_t v25 = *((void *)a3 + 4);
        pvmGetVolumeLimitPref();
        pvmGetCurrentVolumeLimitForRoute((uint64_t)v21, a1);
      }
    }
  }
  else
  {
    CFStringRef CategoryStringWithModeAppended = 0;
  }
  pvmGetMinimumCategoryVolume(a1, a2);
  pvmGetMaximumCategoryVolume(a1, a2);
  if (CategoryStringWithModeAppended) {
    CFRelease(CategoryStringWithModeAppended);
  }
  if (DeviceRouteString) {
    CFRelease(DeviceRouteString);
  }
}

float pvmGetDefaultVolume()
{
  float valuePtr = 0.0;
  CFDictionaryRef v0 = *(const __CFDictionary **)(sStorage + 208);
  if (!v0) {
    goto LABEL_8;
  }
  BOOL v1 = *(const void **)(sStorage + 256);
  if (v1) {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v0, v1);
  }
  else {
    CFNumberRef Value = 0;
  }
  if (!FigCFEqual() || !*(unsigned char *)(sStorage + 300))
  {
    CFStringRef v4 = *(const __CFString **)(sStorage + 280);
    if (!v4 || !CFStringHasPrefix(v4, @"AudioAccessory"))
    {
      if (Value)
      {
        CFNumberRef v5 = Value;
      }
      else
      {
        CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 208), @"Default");
        if (!v5) {
          goto LABEL_8;
        }
      }
      CFNumberGetValue(v5, kCFNumberFloat32Type, &valuePtr);
      return valuePtr;
    }
LABEL_11:
    int v3 = 1050253722;
    return *(float *)&v3;
  }
  if (!*(unsigned char *)(sStorage + 301)) {
    goto LABEL_11;
  }
LABEL_8:
  int v3 = 1056964608;
  return *(float *)&v3;
}

CFStringRef pvmCreateCategoryStringWithModeAppended(CFTypeRef cf, const void *a2)
{
  if (!cf) {
    return 0;
  }
  if (a2)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(Mutable, cf);
    CFArrayAppendValue(Mutable, a2);
    CFStringRef v6 = CFStringCreateByCombiningStrings(v4, Mutable, @"~");
    if (Mutable) {
      CFRelease(Mutable);
    }
    return v6;
  }
  return (CFStringRef)CFRetain(cf);
}

float pvmGetMinimumCategoryVolume(const __CFString *a1, const void *a2)
{
  float valuePtr = 0.0;
  MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a1, a2);
  CFDictionaryRef v3 = *(const __CFDictionary **)(sStorage + 192);
  if (!v3
    || (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, MappedCategoryWithModeAppended)) == 0
    || (CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr), float result = valuePtr, valuePtr <= 0.0))
  {
    int v6 = FigCFEqual();
    float result = valuePtr;
    if (v6) {
      return 0.0625;
    }
  }
  return result;
}

__CFString *pvmGetMappedCategoryWithModeAppended(const __CFString *a1, const void *a2)
{
  if (!a1) {
    return @"Audio/Video";
  }
  MEMORY[0x199716E90](*(void *)sStorage);
  if (a2)
  {
    CFStringRef CategoryStringWithModeAppended = pvmCreateCategoryStringWithModeAppended(a1, a2);
  }
  else
  {
    CFRetain(a1);
    CFStringRef CategoryStringWithModeAppended = a1;
  }
  uint64_t v6 = sStorage;
  CFDictionaryRef v7 = *(const __CFDictionary **)(sStorage + 176);
  if (v7)
  {
    CFNumberRef Value = CFDictionaryGetValue(v7, CategoryStringWithModeAppended);
    if (Value) {
      goto LABEL_28;
    }
    uint64_t v6 = sStorage;
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(v6 + 168);
  if (v8)
  {
    CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(v8, CategoryStringWithModeAppended);
    if (v9)
    {
      CFStringRef v10 = v9;
      CFStringRef v11 = 0;
      goto LABEL_20;
    }
    CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 168), a1);
    CFStringRef v11 = v12;
    if (v12)
    {
      if ((unint64_t)CFStringFind(v12, @"~", 0).length)
      {
        if (!a2)
        {
          CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 168), v11);
          goto LABEL_20;
        }
      }
      else
      {
        CFStringRef v13 = pvmCreateCategoryStringWithModeAppended(v11, a2);
        if (v13)
        {
          CFStringRef v14 = v13;
          CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 168), v13);
          CFRelease(v14);
          goto LABEL_20;
        }
      }
    }
    CFStringRef v10 = 0;
LABEL_20:
    if (v10) {
      CFStringRef v15 = v10;
    }
    else {
      CFStringRef v15 = v11;
    }
    if (v15) {
      CFNumberRef Value = v15;
    }
    else {
      CFNumberRef Value = a1;
    }
    CFNumberRef v16 = *(__CFDictionary **)(sStorage + 176);
    if (v16) {
      CFDictionarySetValue(v16, CategoryStringWithModeAppended, Value);
    }
    goto LABEL_28;
  }
  CFNumberRef Value = 0;
LABEL_28:
  if (CategoryStringWithModeAppended) {
    CFRelease(CategoryStringWithModeAppended);
  }
  MEMORY[0x199716EA0](*(void *)sStorage);
  return (__CFString *)Value;
}

id pvmCreateSeparateCategoryAndModeStrings(id result, void *a2, void *a3)
{
  if (!result)
  {
    uint64_t v6 = 0;
LABEL_6:
    CFDictionaryRef v7 = 0;
    if (!a2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  CFNumberRef v5 = (void *)[result componentsSeparatedByString:@"~"];
  uint64_t v6 = (void *)[v5 objectAtIndexedSubscript:0];
  float result = (id)[v5 count];
  if ((unint64_t)result < 2) {
    goto LABEL_6;
  }
  float result = (id)[v5 objectAtIndexedSubscript:1];
  CFDictionaryRef v7 = result;
  if (a2)
  {
LABEL_7:
    float result = v6;
    *a2 = result;
  }
LABEL_8:
  if (a3)
  {
    float result = v7;
    *a3 = result;
  }
  return result;
}

float pvmGetMaximumCategoryVolume(const __CFString *a1, const void *a2)
{
  float valuePtr = 1.0;
  MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a1, a2);
  CFDictionaryRef v3 = *(const __CFDictionary **)(sStorage + 200);
  float v4 = 1.0;
  if (v3)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, MappedCategoryWithModeAppended);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
      float v4 = valuePtr;
      if (valuePtr > 1.0) {
        return 1.0;
      }
    }
  }
  return v4;
}

CFStringRef pvmCreateDeviceRouteString(CFTypeRef cf, unint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    return 0;
  }
  uint64_t v3 = a3;
  CFNumberRef v5 = (void *)cf;
  if (a2 | a3)
  {
    if (*(void *)(sStorage + 184)) {
      CFTypeRef cf = CFDictionaryGetValue(*(CFDictionaryRef *)(sStorage + 184), cf);
    }
    if (cf) {
      CFTypeRef v6 = cf;
    }
    else {
      CFTypeRef v6 = v5;
    }
    uint64_t MappedRouteIdentifier = (void *)pvmGetMappedRouteIdentifier((void *)a2, v5);
    if (v3
      && (([v5 hasPrefix:@"HeadphonesBT"] & 1) != 0
       || [v5 hasPrefix:@"HeadsetBT"]))
    {
      uint64_t v3 = 0;
    }
    if (FigCFEqual() || FigCFEqual())
    {
      CFDictionaryRef v8 = @"-Audio";
      if (([MappedRouteIdentifier hasSuffix:@"-Audio"] & 1) != 0
        || (CFDictionaryRef v8 = @"-screen", ([MappedRouteIdentifier hasSuffix:@"-screen"] & 1) != 0)
        || (CFDictionaryRef v8 = @"-airplay", ([MappedRouteIdentifier hasSuffix:@"-airplay"] & 1) != 0)
        || (CFDictionaryRef v8 = @"-LowLatencyAudio",
            [MappedRouteIdentifier hasSuffix:@"-LowLatencyAudio"]))
      {
        uint64_t MappedRouteIdentifier = objc_msgSend(MappedRouteIdentifier, "substringToIndex:", objc_msgSend(MappedRouteIdentifier, "length")- -[__CFString length](v8, "length"));
        uint64_t v9 = [MappedRouteIdentifier rangeOfString:@"-" options:4];
        if (v9 != 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t MappedRouteIdentifier = (void *)[MappedRouteIdentifier substringToIndex:v9];
        }
      }
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    CFNumberRef v16 = v6;
    if (v3)
    {
      uint64_t v17 = v3;
      unsigned int v10 = 2;
      if (!MappedRouteIdentifier) {
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v10 = 1;
      if (!MappedRouteIdentifier)
      {
LABEL_23:
        CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFArrayRef v12 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &v16, v10, MEMORY[0x1E4F1D510]);
        if (v12)
        {
          CFArrayRef v13 = v12;
          CFStringRef v14 = CFStringCreateByCombiningStrings(v11, v12, @"~");
          CFRelease(v13);
          return v14;
        }
        return 0;
      }
    }
    *(&v16 + v10++) = MappedRouteIdentifier;
    goto LABEL_23;
  }
  return (CFStringRef)CFRetain(cf);
}

uint64_t pvmGetMappedRouteIdentifier(void *a1, void *a2)
{
  if (!a1
    || ([a2 hasPrefix:@"HeadphonesBT"] & 1) == 0
    && ![a2 hasPrefix:@"HeadsetBT"])
  {
    return (uint64_t)a1;
  }
  float v4 = (void *)[a1 componentsSeparatedByString:@"-"];
  return [v4 firstObject];
}

float PVMGetCurrentPreferredVolume()
{
  float DefaultVolume = pvmGetDefaultVolume();
  if (!PVMInitialize()) {
    return *(float *)(sStorage + 292);
  }
  return DefaultVolume;
}

uint64_t PVMCopyCurrentDeviceRoute(CFTypeRef *a1, void *a2, void *a3)
{
  uint64_t v6 = PVMInitialize();
  if (!v6)
  {
    MEMORY[0x199716E90](*(void *)sStorage);
    pvmAssureCurrentCategoryAndDeviceRoute();
    *a1 = CFRetain(*(CFTypeRef *)(sStorage + 256));
    CFDictionaryRef v7 = (void *)sStorage;
    if (a2)
    {
      CFDictionaryRef v8 = *(const void **)(sStorage + 272);
      *a2 = v8;
      if (v8)
      {
        CFRetain(v8);
        CFDictionaryRef v7 = (void *)sStorage;
      }
    }
    if (a3)
    {
      uint64_t v9 = (const void *)v7[33];
      *a3 = v9;
      if (v9)
      {
        CFRetain(v9);
        CFDictionaryRef v7 = (void *)sStorage;
      }
    }
    MEMORY[0x199716EA0](*v7);
  }
  return v6;
}

uint64_t PVMCategoriesAreEquivalent(const __CFString *a1, const void *a2, const __CFString *a3, const void *a4)
{
  if (a1)
  {
    pvmGetMappedCategoryWithModeAppended(a1, a2);
    if (!a3) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  if (a3) {
LABEL_3:
  }
    pvmGetMappedCategoryWithModeAppended(a3, a4);
LABEL_5:
  return FigCFEqual();
}

uint64_t volumeController_getClassID(uint64_t a1)
{
  uint64_t ClassID = CMBaseGetClassID();
  return MEMORY[0x1F40DC658](&volumeController_getClassID_sFigVolumeControllerClassDesc, ClassID, 1, a1);
}

void FigRouteDiscovererRemoteXPC_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  if (*(void *)(DerivedStorage + 16)) {
    remoteXPCRouteDiscoverer_DisposeCaches(DerivedStorage);
  }
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)v1 && !FigXPCCreateBasicMessage())
  {
    FigXPCRemoteClientSendSyncMessage();
    FigXPCRelease();
  }
  CFDictionaryRef v2 = *(NSObject **)(v1 + 16);
  if (v2) {
    dispatch_release(v2);
  }
}

void remoteXPCRouteDiscoverer_DisposeCaches(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 16);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __remoteXPCRouteDiscoverer_DisposeCaches_block_invoke;
  v2[3] = &__block_descriptor_40_e5_v8__0l;
  v2[4] = a1;
  MXDispatchSync((uint64_t)"remoteXPCRouteDiscoverer_DisposeCaches", (uint64_t)"FigRouteDiscovererRemoteXPC.m", 79, 0, 0, v1, (uint64_t)v2);
}

uint64_t HandleRoutingContextRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t value = 0;
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v4) {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v6 = v4;
  if (!v4) {
    return 4294951138;
  }
  return v6;
}

uint64_t FigRoutingContextGetTypeID()
{
  if (FigRoutingContextGetClassID_sRegisterFigRoutingContextTypeOnce != -1) {
    dispatch_once(&FigRoutingContextGetClassID_sRegisterFigRoutingContextTypeOnce, &__block_literal_global_11);
  }
  uint64_t v0 = sFigRoutingContextClassID;
  return MEMORY[0x1F40DB8F8](v0);
}

uint64_t FigRoutingContextXPCHandleCopyPropertyMessage(uint64_t a1)
{
  CFTypeRef cf = 0;
  CFTypeRef v11 = 0;
  uint64_t v2 = FigXPCMessageCopyCFString();
  if (v2)
  {
    uint64_t v8 = v2;
  }
  else
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    CFNumberRef v5 = *(uint64_t (**)(uint64_t, CFTypeRef, void, CFTypeRef *))(v4 + 48);
    if (v5)
    {
      uint64_t v6 = v5(a1, v11, *MEMORY[0x1E4F1CF80], &cf);
      CFTypeRef v7 = cf;
      if (!v6)
      {
        uint64_t v8 = FigXPCMessageSetCFObject();
        CFTypeRef v7 = cf;
        if (!cf) {
          goto LABEL_10;
        }
        goto LABEL_8;
      }
      uint64_t v8 = v6;
      if (cf) {
LABEL_8:
      }
        CFRelease(v7);
    }
    else
    {
      uint64_t v8 = 4294954514;
    }
  }
LABEL_10:
  if (v11) {
    CFRelease(v11);
  }
  return v8;
}

uint64_t routingContext_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2020000000;
  int v24 = 0;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"contextUUID"))
  {
    if (CFEqual(a2, @"stateInfo"))
    {
      StateInfoStringForContext = FigRoutingContextUtilities_CreateStateInfoStringForContext(DerivedStorage[1]);
      goto LABEL_8;
    }
    if (CFEqual(a2, @"contextType"))
    {
      StateInfoStringForContext = CFNumberCreate(a3, kCFNumberSInt32Type, DerivedStorage);
      goto LABEL_8;
    }
    if (CFEqual(a2, @"supportsWHAMultiDeviceRouting"))
    {
      int DoesContextSupportWHAMultiDeviceRouting = FigRoutingManagerContextUtilities_DoesContextSupportWHAMultiDeviceRouting(DerivedStorage[1]);
      CFStringRef v15 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!DoesContextSupportWHAMultiDeviceRouting) {
        CFStringRef v15 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      StateInfoStringForContext = *v15;
      if (!*v15) {
        goto LABEL_8;
      }
      goto LABEL_3;
    }
    if (CFEqual(a2, @"supportsBluetoothMultiDeviceRouting"))
    {
      if (((*(_DWORD *)DerivedStorage - 1) & 0xFFFFFFFD) != 0) {
        CFNumberRef v16 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      else {
        CFNumberRef v16 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      }
      goto LABEL_29;
    }
    if (CFEqual(a2, @"allowsRealTimeAudioPlaybackForNullPickedEndpoint"))
    {
      unsigned int v17 = *(_DWORD *)DerivedStorage - 1;
      if (v17 < 0xD)
      {
        uint64_t v18 = &unk_1E57CA2A8;
LABEL_25:
        CFNumberRef v16 = (CFTypeRef *)v18[v17];
LABEL_29:
        StateInfoStringForContext = CFRetain(*v16);
        goto LABEL_8;
      }
    }
    else if (CFEqual(a2, @"allowsRealTimeAudioPlaybackForNonNullPickedEndpoint"))
    {
      unsigned int v17 = *(_DWORD *)DerivedStorage - 1;
      if (v17 < 0xD)
      {
        uint64_t v18 = &unk_1E57CA310;
        goto LABEL_25;
      }
    }
    else if (!CFEqual(a2, @"remoteControlChannelAvailable") && !CFEqual(a2, @"supportsCopyRemoteContext"))
    {
      if (!FigCFEqual())
      {
        SharedQueue = FigRoutingManagerGetSharedQueue();
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 3221225472;
        _OWORD v20[2] = __routingContext_CopyProperty_block_invoke;
        v20[3] = &unk_1E57C60E0;
        v20[6] = DerivedStorage;
        v20[7] = a4;
        v20[8] = a1;
        v20[4] = &v21;
        v20[5] = a2;
        MXDispatchAsyncAndWait((uint64_t)"routingContext_CopyProperty", (uint64_t)"FigRoutingContext.m", 588, 0, 0, SharedQueue, (uint64_t)v20);
        goto LABEL_9;
      }
      CFNumberRef v16 = (CFTypeRef *)(DerivedStorage + 2);
      goto LABEL_29;
    }
    CFNumberRef v16 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_29;
  }
  StateInfoStringForContext = (const void *)DerivedStorage[1];
  if (StateInfoStringForContext) {
LABEL_3:
  }
    StateInfoStringForContext = CFRetain(StateInfoStringForContext);
LABEL_8:
  *a4 = StateInfoStringForContext;
LABEL_9:
  CFTypeRef v11 = (void *)MEMORY[0x1997179E0]();
  [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"routingContext_CopyProperty" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:a2];
  uint64_t v12 = *((unsigned int *)v22 + 6);
  _Block_object_dispose(&v21, 8);
  return v12;
}

void sub_194D2CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFDictionary *routingContextServerXPC_CopyOptionsWithClientPIDAndName(_xpc_connection_s *a1, const __CFDictionary *a2, const void *a3, const void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  pid_t pid = xpc_connection_get_pid(a1);
  memset(v20, 0, sizeof(v20));
  uint64_t v8 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (pid < 1)
  {
    uint64_t SInt32 = 0;
    CFStringRef v13 = 0;
  }
  else
  {
    int v9 = pid;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
    unsigned int v12 = proc_name(v9, v20, 0x80u);
    if ((v12 & 0x80000000) == 0) {
      *((unsigned char *)v20 + v12) = 0;
    }
    CFStringRef v13 = CFStringCreateWithCString(v10, (const char *)v20, 0x8000100u);
  }
  CFAllocatorRef v14 = *v8;
  if (a2) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(v14, 0, a2);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFNumberRef v16 = MutableCopy;
  if (a3)
  {
    if (!CFDictionaryContainsKey(MutableCopy, a3) && SInt32 != 0) {
      CFDictionarySetValue(v16, a3, SInt32);
    }
  }
  if (a4)
  {
    if (!CFDictionaryContainsKey(v16, a4) && v13 != 0) {
      FigCFDictionarySetValue();
    }
  }
  if (SInt32) {
    CFRelease(SInt32);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v16;
}

uint64_t FigRoutingContextServerCheckEntitlements(uint64_t a1, int a2, unsigned char *a3)
{
  a3[1] = FigXPCConnectionHasEntitlement();
  char HasEntitlement = FigXPCConnectionHasEntitlement();
  Boolean keyExistsAndHasValidFormat = 0;
  CFPreferencesGetAppBooleanValue(@"ForceEnforcementOfSetOutputDeviceEntitlement", @"com.apple.coremedia", &keyExistsAndHasValidFormat);
  a3[2] = HasEntitlement;
  int v6 = FigXPCConnectionHasEntitlement();
  BOOL v7 = (v6 | FigXPCConnectionHasEntitlement()) != 0;
  Boolean v9 = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"ForceEnforcementOfDeviceDetailsEntitlement", @"com.apple.coremedia", &v9);
  a3[3] = (!v9 || !result) && a2 == 6 || v7;
  return result;
}

uint64_t CreateRoutingContextServerState(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040D36CB8EBuLL);
  if (v2) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = FigSignalErrorAt();
  }
  *a1 = v2;
  return result;
}

uint64_t FigRoutingContextXPCHandleCopySelectedRouteDescriptorsMessage(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v5 + 64);
  if (v6)
  {
    uint64_t v7 = v6(a1, &cf);
    if (v7)
    {
      uint64_t v16 = v7;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 3))
      {
        CFArrayRef v8 = (const __CFArray *)cf;
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        if (v8)
        {
          CFIndex Count = CFArrayGetCount(v8);
          if (Count >= 1)
          {
            CFIndex v11 = Count;
            for (CFIndex i = 0; i != v11; ++i)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
              CFAllocatorRef v14 = frcXPCServer_copySanitizedRouteDescriptor(ValueAtIndex);
              CFArrayAppendValue(Mutable, v14);
              if (v14) {
                CFRelease(v14);
              }
            }
          }
        }
        CFTypeRef v15 = cf;
        CFTypeRef cf = Mutable;
        if (Mutable) {
          CFRetain(Mutable);
        }
        if (v15) {
          CFRelease(v15);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      FigXPCMessageSetCFArray();
      uint64_t v16 = 0;
    }
  }
  else
  {
    uint64_t v16 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

uint64_t routingContext_CopySelectedRouteDescriptors(uint64_t a1, CFTypeRef *a2)
{
  IsOperationOnSystemInputContextAlloweduint64_t Internal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  if (IsOperationOnSystemInputContextAllowedInternal) {
    return IsOperationOnSystemInputContextAllowedInternal;
  }
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v6 = *(const void **)(DerivedStorage + 8);
  if (v6) {
    CFRetain(*(CFTypeRef *)(DerivedStorage + 8));
  }
  IsOperationOnSystemInputContextAlloweduint64_t Internal = FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors((uint64_t)v6, (uint64_t)&cf);
  CFTypeRef v7 = cf;
  if (IsOperationOnSystemInputContextAllowedInternal)
  {
    if (!cf) {
      goto LABEL_9;
    }
    CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  CFTypeRef cf = 0;
LABEL_9:
  CFArrayRef v8 = (void *)MEMORY[0x1997179E0](v7);
  [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"routingContext_CopySelectedRouteDescriptors" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
  if (v6) {
    CFRelease(v6);
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

uint64_t routingContext_IsOperationOnSystemInputContextAllowedInternal(uint64_t a1, int a2)
{
  if (routingContext_IsOperationOnSystemInputContextAllowedInternal_onceToken != -1) {
    dispatch_once(&routingContext_IsOperationOnSystemInputContextAllowedInternal_onceToken, &__block_literal_global_64);
  }
  CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCFEqual();
  if (!a2 && result) {
    goto LABEL_8;
  }
  if (!result) {
    return result;
  }
  if (MX_FeatureFlags_IsSystemInputPickerEnabled()) {
    return 0;
  }
LABEL_8:
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954314;
}

uint64_t FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294949876;
  }
  uint64_t v10 = 0;
  CFIndex v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  uint64_t v5 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v5 = 504;
  }
  int v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors_block_invoke;
  void v9[3] = &unk_1E57C6180;
  if (!byte_1E9358E28) {
    uint64_t v4 = 0;
  }
  v9[4] = &v10;
  v9[5] = v4;
  void v9[6] = a1;
  void v9[7] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors", (uint64_t)"FigRoutingManagerContextUtilities.m", 5236, 0, 0, v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_194D2D6F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingContextCopySystemAudioContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(1u, a3);
}

uint64_t routingContext_copySystemContext(unsigned int a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = FigRoutingManagerCopySystemContext((uint64_t)&cf, a1);
  if (!a2 || v3)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a2 = cf;
  }
  return v3;
}

uint64_t FigRoutingManagerCopySystemContext(uint64_t a1, unsigned int a2)
{
  if (a2 <= 0xE && ((1 << a2) & 0x7E0E) != 0) {
    return FigRoutingManagerContextUtilities_CopySystemRoutingContext(a2, a1);
  }
  else {
    return 4294955276;
  }
}

uint64_t FigRoutingManagerContextUtilities_CopySystemRoutingContext(unsigned int a1, uint64_t a2)
{
  if (!a2) {
    return 4294949876;
  }
  uint64_t v3 = 4294949876;
  if (a1 <= 0xE && ((1 << a1) & 0x7E0E) != 0)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v5 = (uint64_t)&qword_1E9358E18;
    uint64_t v10 = 0;
    CFIndex v11 = &v10;
    uint64_t v12 = 0x2020000000;
    int v13 = 0;
    if (!byte_1E9358E28) {
      uint64_t v5 = 504;
    }
    int v6 = *(NSObject **)v5;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __FigRoutingManagerContextUtilities_CopySystemRoutingContext_block_invoke;
    v8[3] = &unk_1E57C58C8;
    unsigned int v9 = a1;
    os_log_type_t v8[4] = &v10;
    v8[5] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemRoutingContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 2652, 0, 0, v6, (uint64_t)v8);
    uint64_t v3 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v3;
}

void sub_194D2D8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingContextCopyContextForUUID(int a1, CFDictionaryRef theDict, CFTypeRef *a3)
{
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"contextUUID");
  if (!Value) {
    return 4294955276;
  }
  int v6 = Value;
  CFTypeRef cf = 0;
  uint64_t v7 = FigRoutingManagerCopyContextWithUUID((uint64_t)Value, (uint64_t)&cf);
  if (v7) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = cf == 0;
  }
  if (v8)
  {
    FigCFDictionaryGetInt64IfPresent();
    CFTypeRef v13 = 0;
    FigRoutingContextGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (v7
      || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
          CFTypeRef v11 = CFRetain(v6),
          *(void *)(DerivedStorage + 8) = v11,
          *(_DWORD *)uint64_t DerivedStorage = 0,
          uint64_t v7 = FigRoutingManagerRegisterContextWithUUID((uint64_t)v13, theDict, 0, v11),
          v7))
    {
      if (v13) {
        CFRelease(v13);
      }
    }
    else
    {
      CFTypeRef cf = v13;
    }
  }
  if (!a3 || v7)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a3 = cf;
  }
  return v7;
}

uint64_t FigRoutingManagerCopyContextWithUUID(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID(a1, a2);
  }
  else {
    return 4294955276;
  }
}

uint64_t FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID(uint64_t a1, uint64_t a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t result = 4294949876;
  if (a2 && a1)
  {
    if (byte_1E9358E28)
    {
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      _OWORD v5[2] = __FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID_block_invoke;
      v5[3] = &__block_descriptor_56_e5_v8__0l;
      void v5[4] = &routingContextUtilities_getSharedContextUtilities_contextState;
      v5[5] = a1;
      void v5[6] = a2;
      MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 2551, 0, 0, qword_1E9358E18, (uint64_t)v5);
      return 0;
    }
  }
  return result;
}

uint64_t FigRoutingContextXPCHandleCopySelectedBufferedEndpointMessage(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  FigXPCMessageCopyCFString();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, CFTypeRef *))(v4 + 144);
  if (!v5) {
    return 4294954514;
  }
  uint64_t v6 = v5(a2, 0, &cf);
  CFTypeRef v7 = cf;
  if (v6)
  {
    uint64_t v8 = v6;
    if (!cf) {
      return v8;
    }
LABEL_8:
    CFRelease(v7);
    return v8;
  }
  if (!cf) {
    return 0;
  }
  uint64_t v8 = FigEndpointXPCServerWriteNeighborEndpointToReply();
  CFTypeRef v7 = cf;
  if (cf) {
    goto LABEL_8;
  }
  return v8;
}

uint64_t routingContext_CopySelectedBufferedEndpoint(uint64_t a1, uint64_t a2, void *a3)
{
  IsOperationOnSystemInputContextAlloweduint64_t Internal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  if (!IsOperationOnSystemInputContextAllowedInternal)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v12 = 0;
    CFTypeRef v13 = &v12;
    uint64_t v14 = 0x2020000000;
    uint64_t v15 = 0;
    SharedQueue = FigRoutingManagerGetSharedQueue();
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __routingContext_CopySelectedBufferedEndpoint_block_invoke;
    void v11[3] = &unk_1E57C5878;
    v11[4] = &v12;
    void v11[5] = DerivedStorage;
    v11[6] = a2;
    MXDispatchAsyncAndWait((uint64_t)"routingContext_CopySelectedBufferedEndpoint", (uint64_t)"FigRoutingContext.m", 1631, 0, 0, SharedQueue, (uint64_t)v11);
    unsigned int v9 = v13 + 3;
    uint64_t v8 = (const void *)v13[3];
    if (a3)
    {
      *a3 = v8;
    }
    else
    {
      if (!v8)
      {
LABEL_7:
        _Block_object_dispose(&v12, 8);
        return IsOperationOnSystemInputContextAllowedInternal;
      }
      CFRelease(v8);
      unsigned int v9 = v13 + 3;
    }
    *unsigned int v9 = 0;
    goto LABEL_7;
  }
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194D2DE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerGetSharedQueue()
{
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  uint64_t v0 = (uint64_t)&qword_1E93587F0;
  if (!qword_1E93587F0) {
    uint64_t v0 = 8;
  }
  return *(void *)v0;
}

uint64_t FigRoutingContextXPCHandleCopyPredictedSelectedRouteDescriptorMessage(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v5 + 176);
  if (v6)
  {
    uint64_t v7 = v6(a1, &cf);
    if (v7)
    {
      uint64_t v11 = v7;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 3))
      {
        uint64_t v8 = frcXPCServer_copySanitizedRouteDescriptor((const __CFDictionary *)cf);
        unsigned int v9 = v8;
        CFTypeRef v10 = cf;
        CFTypeRef cf = v8;
        if (v8) {
          CFRetain(v8);
        }
        if (v10) {
          CFRelease(v10);
        }
        if (v9) {
          CFRelease(v9);
        }
      }
      FigXPCMessageSetCFDictionary();
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t routingContext_CopyPredictedSelectedRouteDescriptor(uint64_t a1, void *a2)
{
  IsOperationOnSystemInputContextAlloweduint64_t Internal = routingContext_IsOperationOnSystemInputContextAllowedInternal(a1, 0);
  if (IsOperationOnSystemInputContextAllowedInternal) {
    return IsOperationOnSystemInputContextAllowedInternal;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = 0;
  CFTypeRef v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a1, (uint64_t)&cf);
  if (!FigPredictedRouting_IsSupported((uint64_t)cf, 0)
    || !MXBluetoothServices_AreManagedPortsAvailable()
    && !FigPredictedRouting_IsPreemptivePortChanged())
  {
    if (a2) {
      *a2 = 0;
    }
    goto LABEL_12;
  }
  SharedQueue = FigRoutingManagerGetSharedQueue();
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __routingContext_CopyPredictedSelectedRouteDescriptor_block_invoke;
  v10[3] = &unk_1E57C58A0;
  v10[4] = &v12;
  v10[5] = DerivedStorage;
  MXDispatchAsyncAndWait((uint64_t)"routingContext_CopyPredictedSelectedRouteDescriptor", (uint64_t)"FigRoutingContext.m", 1675, 0, 0, SharedQueue, (uint64_t)v10);
  uint64_t v8 = v13 + 3;
  uint64_t v7 = (const void *)v13[3];
  if (a2)
  {
    *a2 = v7;
LABEL_11:
    void *v8 = 0;
    goto LABEL_12;
  }
  if (v7)
  {
    CFRelease(v7);
    uint64_t v8 = v13 + 3;
    goto LABEL_11;
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&v12, 8);
  return IsOperationOnSystemInputContextAllowedInternal;
}

void sub_194D2E11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MXBluetoothServices_AreManagedPortsAvailable()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!mxBluetoothServices_isBluetoothServicesLoaded()) {
    return 0;
  }
  [(id)gBluetoothPortsToBTManagedMappingLock lock];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v0 = (void *)gBluetoothPortsToBTManagedMapping;
  uint64_t v1 = [(id)gBluetoothPortsToBTManagedMapping countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
    while (2)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v0);
        }
        if (objc_msgSend((id)objc_msgSend((id)gBluetoothPortsToBTManagedMapping, "objectForKey:", *(void *)(*((void *)&v7 + 1) + 8 * v4)), "BOOLValue"))
        {
          uint64_t v5 = 1;
          goto LABEL_12;
        }
        ++v4;
      }
      while (v2 != v4);
      uint64_t v2 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v5 = 0;
LABEL_12:
  [(id)gBluetoothPortsToBTManagedMappingLock unlock];
  return v5;
}

uint64_t mxBluetoothServices_isBluetoothServicesLoaded()
{
  if (mxBluetoothServices_loadFramework_onceToken != -1) {
    dispatch_once(&mxBluetoothServices_loadFramework_onceToken, &__block_literal_global_21_1);
  }
  if (sBluetoothServicesLoaded) {
    return 1;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return sBluetoothServicesLoaded;
}

uint64_t FigRoutingContextCopySystemMusicContext(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  return routingContext_copySystemContext(3u, a3);
}

uint64_t FigPredictedRouting_IsSupported(uint64_t a1, int a2)
{
  if (!a2
    || MX_FeatureFlags_IsMandrakeEverywhereEnabled()
    || (uint64_t result = MX_FeatureFlags_IsMandrakeEverywhereEnabled(), result))
  {
    if (predictedRouting_initialize_onceToken == -1)
    {
      if (a1) {
        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_4_0);
      if (a1)
      {
LABEL_6:
        int ContextType = FigRoutingManagerContextUtilities_GetContextType(a1);
        if (a2) {
          return ContextType == 3;
        }
        else {
          return (ContextType & 0xFFFFFFFD) == 1;
        }
      }
    }
    return 1;
  }
  return result;
}

CFIndex cmsUpdateSubPortPreferences(CFIndex result, CFArrayRef theArray)
{
  if (result)
  {
    if (theArray)
    {
      uint64_t v3 = (void *)result;
      uint64_t result = CFArrayGetCount(theArray);
      if (result >= 1)
      {
        for (CFIndex i = 0; i < result; ++i)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
          uint64_t v6 = objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "count");
          if (v6 < 1)
          {
LABEL_9:
            long long v9 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(v3, "subPortPreferences"));
            [v9 addObject:ValueAtIndex];
          }
          else
          {
            uint64_t v7 = v6;
            uint64_t v8 = 0;
            while (!cmsmSubPortPreferenceMatches((const __CFDictionary *)objc_msgSend((id)objc_msgSend(v3, "subPortPreferences"), "objectAtIndex:", v8), ValueAtIndex))
            {
              if (v7 == ++v8) {
                goto LABEL_9;
              }
            }
            long long v9 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(v3, "subPortPreferences"));
            [v9 setObject:ValueAtIndex atIndexedSubscript:v8];
          }
          [v3 setSubPortPreferences:v9];

          uint64_t result = CFArrayGetCount(theArray);
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

BOOL cmsmSubPortPreferenceMatches(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"port id");
  CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(a2, @"port id");
  if (CFNumberCompare(Value, v5, 0)) {
    return 0;
  }
  int v7 = CFDictionaryContainsKey(a2, @"polar pattern");
  int v8 = CFDictionaryContainsKey(a1, @"polar pattern");
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    return (v7 | v8) == 0;
  }
  else
  {
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a1, @"sub-port id");
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a2, @"sub-port id");
    return CFNumberCompare(v10, v11, 0) == kCFCompareEqualTo;
  }
}

uint64_t CMSMNotificationUtility_PostSourceFormatInfoDidChange()
{
  return +[MXSystemController notifyAll:@"SourceFormatInfoDidChange" payload:0 dontPostIfSuspended:0];
}

uint64_t MX_FeatureFlags_IsMandrakeEverywhereEnabled()
{
  return 0;
}

__CFArray *CMSUtility_CopyConsolidatedSourceFormatInfo(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  obuint64_t j = (id)[a1 copyMXSessionList];
  uint64_t v1 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v19;
    uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFC8];
    CFTypeRef v13 = (const void *)*MEMORY[0x1E4F1CFD0];
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v19 != v3) {
          objc_enumerationMutation(obj);
        }
        CFNumberRef v5 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        if ([v5 getIsPlaying])
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          [v5 getBestAvailableContentType];
          FigCFDictionarySetValue();
          CFDictionaryRef v7 = (const __CFDictionary *)[v5 getCurrentlyPlayingSourceFormatInfo];
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          if (v7
            && !CFDictionaryContainsKey(v7, @"CurrentlyPlayingContentIsEligibleForSpatialization")
            && (CFDictionaryGetValue(Mutable, @"CurrentlyPlayingFormat")
             || CFDictionaryGetValue(Mutable, @"CurrentlyPlayingChannelCount")))
          {
            if ([v5 getCurrentlyPlayingContentIsEligibleForSpatialization]) {
              int v8 = v13;
            }
            else {
              int v8 = v12;
            }
            CFDictionarySetValue(Mutable, @"CurrentlyPlayingContentIsEligibleForSpatialization", v8);
          }
          if (CFDictionaryGetCount(Mutable) >= 1) {
            goto LABEL_21;
          }
          if (Mutable) {
            goto LABEL_22;
          }
        }
        else if ([v5 getClientType] == 2 {
               && [a1 someMXSessionIsPlaying])
        }
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          [v5 getBestAvailableContentType];
          FigCFDictionarySetValue();
LABEL_21:
          CFArrayAppendValue(theArray, Mutable);
          if (!Mutable) {
            continue;
          }
LABEL_22:
          CFRelease(Mutable);
          continue;
        }
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v2);
  }

  if (theArray)
  {
    if (CFArrayGetCount(theArray) >= 1 && dword_1E9359ED0 != 0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return theArray;
}

uint64_t CMSUtility_GetCurrentConsolidatedPlayingState(void *a1)
{
  if (([a1 someMXSessionIsPlaying] & 1) == 0
    && ([a1 clientIsPlaying] & 1) == 0
    && ![a1 hapticEngineIsPlaying])
  {
    return 0;
  }
  if (!dword_1E9359ED0) {
    return 1;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  uint64_t v3 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v3;
}

uint64_t MXCoreSessionCopyProperty(void *a1, CFTypeRef cf1, const __CFAllocator *a3, void *a4)
{
  valuePtr[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!cf1 || !a4) {
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"ActivationContext"))
  {
    if (a1)
    {
      if (![a1 activationContext])
      {
        uint64_t v9 = 0;
        *a4 = 0;
        return v9;
      }
      uint64_t SInt32 = (NSArray *)[a1 activationContext];
      if (!SInt32) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"AirPlayVideoIsActive"))
  {
    unsigned int IsAirPlayVideoActive = CMSMUtility_IsAirPlayVideoActive();
LABEL_11:
    CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFD0];
    uint64_t v12 = (__CFString **)MEMORY[0x1E4F1CFC8];
    BOOL v13 = IsAirPlayVideoActive == 0;
    goto LABEL_12;
  }
  if (CFEqual(cf1, @"AllowedRouteTypes"))
  {
    if (a1)
    {
      uint64_t SInt32 = (NSArray *)[a1 allowedRouteTypes];
      if (!SInt32) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"AllowedToUseHardwareAudioCodec"))
  {
    if (a1)
    {
      int v16 = [a1 mixesWithEveryone];
      CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFC8];
      unsigned int v17 = (__CFString **)MEMORY[0x1E4F1CFD0];
      goto LABEL_34;
    }
LABEL_654:
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, @"AllowMixableAudioWhileRecording"))
  {
    if (!a1 || ([a1 isTheAssistant] & 1) == 0) {
      goto LABEL_654;
    }
    int v16 = [a1 allowMixableAudioWhileRecording];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"AllowSystemSoundsWhileRecording"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 allowSystemSoundsWhileRecording];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"AudioBehaviour"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    VoicePromptStyle = (__CFString *)[a1 audioBehaviour];
    goto LABEL_40;
  }
  if (CFEqual(cf1, @"AudioCategory"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t SInt32 = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", [a1 audioCategory]);
LABEL_47:
    uint64_t SInt32 = SInt32;
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"BadgeType"))
  {
    uint64_t SInt32 = (NSArray *)[a1 badgeType];
    goto LABEL_47;
  }
  if (CFEqual(cf1, @"AudioHardwareControlFlags"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 hwControlFlags];
LABEL_51:
    uint64_t SInt32 = (NSArray *)FigCFNumberCreateSInt32();
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"AudioMode"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    VoicePromptStyle = (__CFString *)[a1 audioMode];
    goto LABEL_40;
  }
  if (CFEqual(cf1, @"AudioOnlyAirPlayVideoIsActive"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isAudioOnlyAirPlayVideoActive];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"DoesGameAudioNeedToBeSpatialized"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    id v18 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v19 = [a1 doesGameAudioNeedToBeSpatialized];
    goto LABEL_61;
  }
  if (CFEqual(cf1, @"CanBeginInterruption"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    goto LABEL_65;
  }
  if (CFEqual(cf1, @"DefaultBuiltInRoute"))
  {
    if (a1)
    {
      uint64_t SInt32 = (NSArray *)[a1 defaultBuiltInRoutePreference];
      if (!SInt32) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"EnableBluetoothRecording"))
  {
    if (a1)
    {
      int v22 = [a1 enableBluetoothRecordingPreference];
      uint64_t v23 = (NSArray **)MEMORY[0x1E4F1CFD0];
      if (!v22) {
        uint64_t v23 = (NSArray **)MEMORY[0x1E4F1CFC8];
      }
      uint64_t SInt32 = *v23;
      if (!*v23) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"ClientName"))
  {
    if (a1)
    {
      uint64_t SInt32 = (NSArray *)[a1 clientName];
      if (!SInt32) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"ClientPID"))
  {
    if (a1)
    {
      int ClientPID = CMSUtility_GetClientPID(a1);
LABEL_83:
      LODWORD(valuePtr[0]) = ClientPID;
      CFAllocatorRef v25 = a3;
LABEL_84:
      CFNumberType v26 = kCFNumberSInt32Type;
LABEL_85:
      uint64_t SInt32 = (NSArray *)CFNumberCreate(v25, v26, valuePtr);
      goto LABEL_8;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, @"ClientPriority"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 clientPriority];
    goto LABEL_51;
  }
  if (CFEqual(cf1, @"ConstantOutputVolumeLeveldB"))
  {
    if (a1)
    {
      id v27 = objc_alloc(MEMORY[0x1E4F28ED0]);
      [a1 constantOutputVolumeLeveldB];
      uint64_t SInt32 = (NSArray *)objc_msgSend(v27, "initWithFloat:");
      goto LABEL_8;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"ControlsRoute"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    char v28 = [a1 currentlyControllingFlags];
    CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFD0];
    uint64_t v12 = (__CFString **)MEMORY[0x1E4F1CFC8];
    BOOL v13 = (v28 & 2) == 0;
LABEL_12:
    if (v13) {
      CFNumberRef v11 = v12;
    }
    goto LABEL_14;
  }
  if (CFEqual(cf1, @"AudioSessionID"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 audioSessionID];
LABEL_98:
    uint64_t SInt32 = (NSArray *)FigCFNumberCreateUInt32();
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"CurrentAudioHardwareSampleRate"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v29 = [+[MXSessionManager sharedInstance] devicesSampleRates];
    uint64_t v30 = objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID"));
    int v31 = v29;
    goto LABEL_109;
  }
  if (CFEqual(cf1, @"CurrentInputSampleRate"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t v32 = [+[MXSessionManager sharedInstance] devicesSampleRates];
    __int16 v33 = (void *)MEMORY[0x1E4F28ED0];
    uint64_t CurrentInputVADID = CMSUtility_GetCurrentInputVADID(a1);
    goto LABEL_108;
  }
  if (CFEqual(cf1, @"CurrentOutputSampleRate"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t v32 = [+[MXSessionManager sharedInstance] devicesSampleRates];
    __int16 v33 = (void *)MEMORY[0x1E4F28ED0];
    uint64_t CurrentInputVADID = CMSUtility_GetCurrentOutputVADID(a1);
LABEL_108:
    uint64_t v30 = [v33 numberWithUnsignedInt:CurrentInputVADID];
    int v31 = v32;
LABEL_109:
    uint64_t SInt32 = [(NSDictionary *)v31 objectForKey:v30];
    goto LABEL_47;
  }
  if (CFEqual(cf1, @"CurrentSpeechDetectionDeviceSampleRate"))
  {
    if (a1)
    {
      uint64_t v35 = [+[MXSessionManager sharedInstance] devicesSampleRates];
      uint64_t v36 = -[NSDictionary objectForKey:](v35, "objectForKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", -[MXSessionManager speechDetectionVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "speechDetectionVADID")));
      uint64_t v37 = [+[MXSessionManager sharedInstance] devicesSampleRates];
      uint64_t v38 = -[NSDictionary objectForKey:](v37, "objectForKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", -[MXSessionManager defaultVADID](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "defaultVADID")));
      if (v36) {
        int v39 = (void *)v36;
      }
      else {
        int v39 = (void *)v38;
      }
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t SInt32 = v39;
      goto LABEL_8;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"DefaultVPChatMode"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    VoicePromptStyle = (__CFString *)[a1 defaultVPChatMode];
    goto LABEL_40;
  }
  if (CFEqual(cf1, @"DetailedActiveAudioRoute"))
  {
    if (a1)
    {
      uint64_t SInt32 = (NSArray *)[a1 copyDetailedRouteDescription];
      goto LABEL_8;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"DoNotNotifyOtherSessionsOnNextInactive"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 doNotNotifyOtherSessionsOnNextInactive];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"DoNotResetAudioCategoryOnNextInactive"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 doNotResetAudioCategoryOnNextInactive];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"DuckFadeDuration"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 duckFadeDuration];
LABEL_139:
    uint64_t SInt32 = (NSArray *)FigCFNumberCreateFloat32();
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"DuckToLevelDB"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 duckToLevelDB];
    goto LABEL_139;
  }
  if (CFEqual(cf1, @"DuckToLevelScalar"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 duckToLevelScalar];
    goto LABEL_139;
  }
  if (CFEqual(cf1, @"ForceSoundCheck"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 forceSoundCheck];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"HandsOverInterruptionsToInterruptor"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    id v18 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v19 = [a1 handsOverInterruptionsToInterruptor];
    goto LABEL_61;
  }
  if (CFEqual(cf1, @"HapticEngineIsPlaying"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 hapticEngineIsPlaying];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsPlayingOutput"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isPlayingOutput];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"HostProcessAttribution"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    VoicePromptStyle = (__CFString *)[a1 hostProcessAttribution];
    goto LABEL_40;
  }
  if (CFEqual(cf1, @"IAmTheAssistant"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isTheAssistant];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"InterruptionFadeDuration"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 interruptionFadeDuration];
    goto LABEL_139;
  }
  if (CFEqual(cf1, @"InterruptionStyle"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 interruptionStyle];
    goto LABEL_51;
  }
  if (CFEqual(cf1, @"IsActive"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isActive];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsAirPlayReceiverSession"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isAirPlayReceiverSession];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"BypassSystemSpatialAudioForGame"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    id v18 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v19 = [a1 bypassSystemSpatialAudioForGame];
    goto LABEL_61;
  }
  if (CFEqual(cf1, @"IsAudioSession"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isAudioSession];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsEligibleForBTSmartRoutingConsideration"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isEligibleForBTSmartRoutingConsideration];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsEligibleForBTTriangleConsideration"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isEligibleForBTTriangleConsideration];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsRemoteDeviceInputControlAllowed"))
  {
    if (MX_FeatureFlags_IsOnenessEnabled() && a1)
    {
      unsigned int IsAirPlayVideoActive = vaemIsContinuityScreenOutputPortPresentInConnectedOutputPorts();
      goto LABEL_11;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"IsRecordingMutedForRemoteDevice"))
  {
    if (!a1 || !MX_FeatureFlags_IsOnenessEnabled()) {
      goto LABEL_654;
    }
    int v16 = [a1 isRecordingMutedForRemoteDevice];
LABEL_33:
    CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFD0];
    unsigned int v17 = (__CFString **)MEMORY[0x1E4F1CFC8];
LABEL_34:
    if (!v16) {
      CFNumberRef v11 = v17;
    }
    goto LABEL_14;
  }
  if (CFEqual(cf1, @"SupportedOutputChannelLayouts"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    VoicePromptStyle = (__CFString *)[a1 supportedOutputChannelLayouts];
    goto LABEL_40;
  }
  if (CFEqual(cf1, @"ShouldMuteBeAppliedToRemoteDevice"))
  {
    if (!MX_FeatureFlags_IsOnenessEnabled() || !a1) {
      goto LABEL_654;
    }
    if (![a1 isTheAssistant])
    {
      int v16 = [a1 shouldMuteBeAppliedToRemoteDevice];
      goto LABEL_33;
    }
    goto LABEL_582;
  }
  if (CFEqual(cf1, @"IsEligibleForNowPlayingAppConsideration"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isEligibleForNowPlayingAppConsideration];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsExpanseCallSession"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isSharePlayCallSession];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsExpanseMediaSession"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isSharePlayMediaSession];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsFigInstantiatedAudioSession"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isFigInstantiatedAudioSession];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsInterrupted"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t v41 = [a1 interruptingSession];
    CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFD0];
    uint64_t v12 = (__CFString **)MEMORY[0x1E4F1CFC8];
    BOOL v13 = v41 == 0;
    goto LABEL_12;
  }
  if (CFEqual(cf1, @"IsLongFormAudio"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isLongFormAudio];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsPlaying"))
  {
    if (a1)
    {
      int ClientPID = [a1 isPlaying];
      goto LABEL_83;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, @"IsRecording"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isRecording];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsRecordingMuted"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isRecordingMuted];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsSharedAVAudioSessionInstance"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isSharedAVAudioSessionInstance];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsSharePlayCapableCallSession"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isSharePlayCapableCallSession];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsUsingBuiltInMicForRecording"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isUsingBuiltInMicForRecording];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsUsingCamera"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 isUsingCamera];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"IsUsingChatMode"))
  {
    if (a1)
    {
      [a1 audioMode];
      unsigned int IsAirPlayVideoActive = CMSMUtility_IsChatMode();
      goto LABEL_11;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"MutesAudioBasedOnRingerSwitchState"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 mutesAudioBasedOnRingerSwitchState];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"NeedsAudioBudget"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 needsAudioBudget];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"NowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 nowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"NowPlayingAppWasStoppedOnMostRecentActivation"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 nowPlayingAppWasStoppedOnMostRecentActivation];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PIDToInheritApplicationStateFrom"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    if (![a1 pidToInheritAppStateFrom])
    {
      uint64_t SInt32 = 0;
      goto LABEL_8;
    }
    [a1 pidToInheritAppStateFrom];
    goto LABEL_51;
  }
  if (CFEqual(cf1, @"PreferredAudioHardwareFormat"))
  {
    if (a1)
    {
      uint64_t SInt32 = (NSArray *)[a1 preferredHardwareFormat];
      if (!SInt32) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"PreferredAudioHardwareIOBufferFrameDuration"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 preferredIOBufferDuration];
    goto LABEL_139;
  }
  if (CFEqual(cf1, @"PreferredAudioHardwareIOBufferFrames"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 preferredIOBufferFrames];
    goto LABEL_51;
  }
  if (CFEqual(cf1, @"PreferredAudioHardwareSampleRate")) {
    goto LABEL_292;
  }
  if (CFEqual(cf1, @"PrefersBeingInterruptedByNextActiveRecordingClient"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersBeingInterruptedByNextActiveRecordingClient];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersConcurrentAirPlayAudio"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersConcurrentAirPlayAudio];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersEchoCancelledInput"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    id v18 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v19 = [a1 prefersEchoCancelledInput];
    goto LABEL_61;
  }
  if (CFEqual(cf1, @"PreferredDecoupledInputOutput"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 preferredDecoupledInputOutput];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PreferredInputSampleRate"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 preferredInputSampleRate];
LABEL_294:
    uint64_t SInt32 = (NSArray *)FigCFNumberCreateFloat64();
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"PreferredMinimumMicrophoneIndicatorLightOnTime"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t SInt32 = (NSArray *)[a1 preferredMinimumMicrophoneIndicatorLightOnTime];
    goto LABEL_47;
  }
  if (CFEqual(cf1, @"PreferredNumberOfInputChannels"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 preferredNumberOfInputChannels];
    goto LABEL_51;
  }
  if (CFEqual(cf1, @"PreferredNumberOfOutputChannels"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 preferredNumberOfOutputChannels];
    goto LABEL_51;
  }
  if (CFEqual(cf1, @"PreferredOutputSampleRate"))
  {
LABEL_292:
    if (!a1) {
      goto LABEL_654;
    }
    [a1 preferredOutputSampleRate];
    goto LABEL_294;
  }
  if (CFEqual(cf1, @"PreferredRouteControlFeatures"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t SInt32 = (NSArray *)[a1 preferredRouteControlFeatures];
    goto LABEL_47;
  }
  if (CFEqual(cf1, @"PreferredPersistentRoute"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t SInt32 = (NSArray *)[a1 preferredPersistentRoute];
    goto LABEL_47;
  }
  if (CFEqual(cf1, @"PreferredStereoInputOrientation"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 preferredStereoInputOrientation];
    goto LABEL_98;
  }
  if (CFEqual(cf1, @"PrefersBluetoothAccessoryMuting"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersBluetoothAccessoryMuting];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersInterruptionOnRouteDisconnect"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersInterruptionOnRouteDisconnect];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersNoDucking"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersNoDucking];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersNoInterruptions"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersNoInterruptions];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersNoInterruptionsByMixableSessions"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersNoInterruptionsByMixableSessions];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersNoInterruptionsByRingtonesAndAlerts"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersNoInterruptionsByRingtonesAndAlerts];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersNoInterruptionsDuringRemoteDeviceControl"))
  {
    if (!a1 || !MX_FeatureFlags_IsOnenessEnabled()) {
      goto LABEL_654;
    }
    id v18 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v19 = [a1 prefersNoInterruptionsDuringRemoteDeviceControl];
    goto LABEL_61;
  }
  if (CFEqual(cf1, @"PrefersNoInterruptionWhenSecureMicrophoneIsEngaged")
    || CFEqual(cf1, @"PrefersToNotBeInterruptedWhenSecureMicIsEngaged"))
  {
    if (a1)
    {
      unsigned int IsAirPlayVideoActive = CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(a1);
      goto LABEL_11;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"PrefersSpeechDetectEnabled"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersSpeechDetectEnabled];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersSuppressingRecordingState"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersSuppressingRecordingState];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersToOptOutOfHardwareSafetyInterruptions"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersToOptOutOfHardwareSafetyInterruptions];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersToPlayDuringWombat"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersToPlayDuringWombat];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersToVibeWhenVibrationsAreDisabled"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 prefersToVibeWhenVibrationsAreDisabled];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"PrefersToInterruptActiveRecordingSessions"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    id v18 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v19 = [a1 prefersToInterruptActiveRecordingSessions];
LABEL_61:
    uint64_t v20 = v19;
    id v21 = v18;
    goto LABEL_62;
  }
  if (CFEqual(cf1, @"ProcessAssertionAuditTokens"))
  {
    if (!a1 || ([a1 hasEntitlementToSupportProcessAssertionAuditTokens] & 1) == 0) {
      goto LABEL_654;
    }
    VoicePromptStyle = (__CFString *)[a1 parentProcessAuditTokens];
LABEL_40:
    *a4 = VoicePromptStyle;
    if (!VoicePromptStyle) {
      return 0;
    }
    goto LABEL_15;
  }
  if (CFEqual(cf1, @"RemoteDeviceID")) {
    return 0;
  }
  if (CFEqual(cf1, @"ReporterIDs"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    CMSUtility_CreateReporterIDIfNeeded(a1);
    VoicePromptStyle = (__CFString *)[a1 reporterIDs];
    goto LABEL_40;
  }
  if (CFEqual(cf1, @"RouteSharingPolicy"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 routeSharingPolicy];
    goto LABEL_98;
  }
  if (CFEqual(cf1, @"RoutingContextUUID"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    VoicePromptStyle = (__CFString *)[a1 routingContextUUID];
    goto LABEL_40;
  }
  if (CFEqual(cf1, @"SomeMXSessionIsPlaying"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 someMXSessionIsPlaying];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"SomeOtherClientIsPlaying"))
  {
    if (a1)
    {
      unsigned int IsAirPlayVideoActive = CMSUtility_SomeOtherClientIsPlaying(a1);
      goto LABEL_11;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"SomeOtherNonAmbientAudioCategoryClientIsPlaying"))
  {
    if (a1)
    {
      int IsPlaying = CMSUtility_SomeOtherPrimaryAudioCategoryClientIsPlaying(a1);
      if (dword_1E9359ED0)
      {
        float v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFD0];
      uint64_t v12 = (__CFString **)MEMORY[0x1E4F1CFC8];
      BOOL v13 = IsPlaying == 0;
      goto LABEL_12;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"StopsWhenDeviceLocks"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 stopsWhenDeviceLocks];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"SystemHasAudioInputDevice"))
  {
    unsigned int IsAirPlayVideoActive = vaemSystemHasAudioInputDevice();
    goto LABEL_11;
  }
  if (CFEqual(cf1, @"SystemHasAudioInputDeviceExcludingBluetooth"))
  {
    unsigned int IsAirPlayVideoActive = vaemSystemHasAudioInputDeviceExcludingBluetooth();
    goto LABEL_11;
  }
  if (CFEqual(cf1, @"UnduckFadeDuration"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 unduckFadeDuration];
    goto LABEL_139;
  }
  if (CFEqual(cf1, @"UnduckToLevelScalar"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    [a1 unduckToLevelScalar];
    goto LABEL_139;
  }
  if (CFEqual(cf1, @"UserMuted"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 userMuted];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"VibrationData"))
  {
    if (a1)
    {
      uint64_t SInt32 = (NSArray *)[a1 vibrationData];
      if (!SInt32) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"VPBlockConfiguration"))
  {
    if (a1)
    {
      uint64_t SInt32 = (NSArray *)[a1 vpBlockConfiguration];
      if (!SInt32) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"WantsToPauseSpokenAudio"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 wantsToPauseSpokenAudio];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"WantsVolumeChangesWhenPaused"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 wantsVolumeChangesWhenPaused];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"WantsVolumeChangesWhenPausedOrInactive"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v16 = [a1 wantsVolumeChangesWhenPausedOrInactive];
    goto LABEL_33;
  }
  if (CFEqual(cf1, @"AC3IsSupported"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    if (!vaemIsAC3EncodingSupported())
    {
      unsigned int IsAirPlayVideoActive = vaemGetAC3IsSupported();
      goto LABEL_11;
    }
    goto LABEL_582;
  }
  if (CFEqual(cf1, @"ActiveAudioRoute") || CFEqual(cf1, @"CurrentlyActiveRoute"))
  {
    int v44 = CFEqual(cf1, @"CurrentlyActiveRoute");
    if (!a1 || v44 || ([a1 currentlyControllingFlags] & 2) != 0)
    {
      cmsmUpdateCurrentActiveRoutesInfo();
      uint64_t SInt32 = (NSArray *)CMSMUtility_GetCurrentRouteTypeAtIndex(0);
      if (!SInt32) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    uint64_t SInt32 = (NSArray *)cmsCopyOverrideRoute(a1);
    if (SInt32) {
      goto LABEL_8;
    }
    if ([a1 audioCategory]) {
      float v45 = (NSDictionary *)[a1 audioCategory];
    }
    else {
      float v45 = (NSDictionary *)@"Audio/Video";
    }
    if ([a1 audioMode]) {
      long long v46 = (__CFString *)[a1 audioMode];
    }
    else {
      long long v46 = @"Default";
    }
    if ([a1 activationContext]) {
      float v48 = (const void *)[a1 activationContext];
    }
    else {
      float v48 = 0;
    }
    CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration(v45, (uint64_t)v46, v48, 0, a4, 0, 0);
    return 0;
  }
  if (CFEqual(cf1, @"ApplicationState"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int ClientPID = CMSUtility_GetApplicationStateForSession(a1);
    goto LABEL_83;
  }
  if (CFEqual(cf1, @"AudioClockDevice"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    MEMORY[0x199716E90](gCMSM);
    FigVAEndpointManagerCopyPropertyForAudioDevice(qword_1E9359B78, 0x1EE5F2F28, *MEMORY[0x1E4F1CF80], [+[MXSessionManager sharedInstance] defaultVADID], (uint64_t)a4);
    uint64_t v47 = gCMSM;
LABEL_766:
    MEMORY[0x199716EA0](v47);
    return 0;
  }
  if (CFEqual(cf1, @"AudioQueueOptions"))
  {
    if (a1)
    {
      uint64_t SInt32 = (NSArray *)CMSMUtility_CreateAudioQueueOptionsDictionary(a1);
      goto LABEL_8;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"AvailableOutputStreamFormats"))
  {
    if (a1)
    {
      valuePtr[0] = 0;
      unsigned int v159 = 0;
      AudioObjectID CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
      uint64_t v9 = vaemVADCopyAvailableStreamFormatsForVADID(CurrentOutputVADID, 1, valuePtr, &v159);
      CFDataRef v50 = 0;
      if (!v9) {
        CFDataRef v50 = MXCFDataCreate((UInt8 *)valuePtr[0], 56 * v159);
      }
      *a4 = v50;
      if (valuePtr[0]) {
        free((void *)valuePtr[0]);
      }
      return v9;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"AvailableRouteControlFeatures"))
  {
    if (a1)
    {
      if (CMSMVAUtility_IsAdditiveRoutingEnabled())
      {
        if ([a1 willRouteToOnDemandVADOnActivation])
        {
          if ([a1 prefersEchoCancelledInput]) {
            BOOL IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)[a1 audioCategory]);
          }
          else {
            BOOL IsCategoryInputOnly = 0;
          }
          uint64_t v55 = 1;
        }
        else
        {
          BOOL IsCategoryInputOnly = 0;
          uint64_t v55 = 0;
        }
        if (dword_1E9359ED0)
        {
          float v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        BOOL IsCategoryInputOnly = 0;
        uint64_t v55 = 0;
      }
      id v59 = objc_alloc(MEMORY[0x1E4F1CA60]);
      uint64_t v60 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:v55];
      uint64_t SInt32 = (NSArray *)objc_msgSend(v59, "initWithObjectsAndKeys:", v60, @"RouteControlFeatures", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", IsCategoryInputOnly), @"EchoCancelledInput", 0);
      goto LABEL_8;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"CurrentAudioHardwareFormat"))
  {
    if (a1)
    {
      valuePtr[0] = 0;
      BOOL v52 = CMSMUtility_IsCategoryInputOnly((const void *)[a1 audioCategory]);
      AudioObjectID v53 = CMSUtility_GetCurrentOutputVADID(a1);
      vaemCopyDeviceFormat(v53, v52, valuePtr);
      uint64_t v9 = v54;
      *a4 = valuePtr[0];
      return v9;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"CurrentAudioHardwareInputNumberChannels"))
  {
    if (a1)
    {
      uint64_t v57 = CMSUtility_GetCurrentInputVADID(a1);
      int NumberOfChannelsForVADIDAndScope = vaemGetNumberOfChannelsForVADIDAndScope(v57, 1);
      uint64_t SInt32 = (NSArray *)MXCFNumberCreateFromSInt32(NumberOfChannelsForVADIDAndScope);
      goto LABEL_8;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"CurrentAudioHardwareOutputNumberChannels"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t v61 = CMSUtility_GetCurrentOutputVADID(a1);
    uint64_t v62 = vaemGetNumberOfChannelsForVADIDAndScope(v61, 0);
LABEL_563:
    uint64_t SInt32 = (NSArray *)MXCFNumberCreateFromSInt64(v62);
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"CurrentInputDeviceBufferSize"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    MEMORY[0x199716E90](gCMSM);
    AudioObjectID v63 = CMSUtility_GetCurrentInputVADID(a1);
    AudioObjectPropertyScope v64 = 1768845428;
    goto LABEL_477;
  }
  if (CFEqual(cf1, @"CurrentInputLatency"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t v65 = qword_1E9359B78;
    uint64_t v66 = CMSUtility_GetCurrentInputVADID(a1);
    uint64_t v67 = 0x1EE5F34C8;
    goto LABEL_481;
  }
  if (CFEqual(cf1, @"CurrentOutputDeviceBufferSize"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    MEMORY[0x199716E90](gCMSM);
    AudioObjectID v63 = CMSUtility_GetCurrentOutputVADID(a1);
    AudioObjectPropertyScope v64 = 1869968496;
LABEL_477:
    unsigned int DeviceBufferNumPCMFrames = vaemGetDeviceBufferNumPCMFrames(v63, v64);
    *a4 = MXCFNumberCreateFromSInt64(DeviceBufferNumPCMFrames);
LABEL_640:
    uint64_t v47 = gCMSM;
    goto LABEL_766;
  }
  if (CFEqual(cf1, @"CurrentOutputLatency"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t v65 = qword_1E9359B78;
    uint64_t v66 = CMSUtility_GetCurrentOutputVADID(a1);
    uint64_t v67 = 0x1EE5F34E8;
LABEL_481:
    uint64_t v69 = *MEMORY[0x1E4F1CF80];
    return FigVAEndpointManagerCopyPropertyForAudioDevice(v65, v67, v69, v66, (uint64_t)a4);
  }
  if (CFEqual(cf1, @"CurrentStereoInputOrientation"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    MEMORY[0x199716E90](gCMSM);
    StereoInputOrientatiouint64_t n = vaemGetStereoInputOrientation();
    *a4 = MXCFNumberCreateFromSInt32(StereoInputOrientation);
    uint64_t v47 = gCMSM;
    goto LABEL_766;
  }
  if (CFEqual(cf1, @"DefaultCalibratedOutputVolume"))
  {
    if (a1)
    {
      id v71 = objc_alloc(MEMORY[0x1E4F28ED0]);
      LODWORD(v72) = 1118231593;
      uint64_t v73 = [v71 initWithFloat:v72];
      if (dword_1E9359ED0)
      {
        uint64_t v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v9 = 0;
      *a4 = v73;
      return v9;
    }
    goto LABEL_654;
  }
  if (CFEqual(cf1, @"DisallowAudioFormatChanges"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    uint64_t v75 = qword_1E9359B78;
    long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
    uint64_t v77 = 0x1EE5F3348;
    goto LABEL_818;
  }
  if (CFEqual(cf1, @"HasEchoCancelledInput"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    int v78 = [a1 isRoutedToOnDemandVAD];
    if (CMSMVAUtility_IsAdditiveRoutingEnabled() && ([a1 isActive] & v78) == 1)
    {
      uint64_t IsRecordingCategory = CMSMUtility_IsRecordingCategory((const void *)[a1 audioCategory]);
    }
    else if (MX_FeatureFlags_IsOverdubRecordingEnabled())
    {
      uint64_t IsRecordingCategory = [a1 hasEchoCancelledInput];
    }
    else
    {
      uint64_t IsRecordingCategory = 0;
    }
    if (dword_1E9359ED0)
    {
      long long v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    id v21 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v20 = IsRecordingCategory;
LABEL_62:
    uint64_t SInt32 = (NSArray *)objc_msgSend(v21, "initWithBool:", v20, v154, v155);
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"SupportsEchoCancelledInput"))
  {
    if (!a1) {
      goto LABEL_654;
    }
    if (MX_FeatureFlags_IsOverdubRecordingEnabled()) {
      uint64_t v80 = [a1 supportsEchoCancelledInput];
    }
    else {
      uint64_t v80 = 0;
    }
    id v21 = objc_alloc(MEMORY[0x1E4F28ED0]);
    uint64_t v20 = v80;
    goto LABEL_62;
  }
  if (CFEqual(cf1, @"HostApplicationDisplayID"))
  {
    if (a1 && objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"))
    {
      uint64_t SInt32 = (NSArray *)MX_RunningBoardServices_CopyHostDisplayIDForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
      if (SInt32) {
        goto LABEL_8;
      }
      uint64_t SInt32 = (NSArray *)[a1 displayID];
      if (!SInt32) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    goto LABEL_654;
  }
  if (!CFEqual(cf1, @"InputSource"))
  {
    if (CFEqual(cf1, @"InputSources"))
    {
      uint64_t v75 = qword_1E9359B78;
      long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
      uint64_t v77 = 0x1EE5F3268;
      goto LABEL_818;
    }
    if (CFEqual(cf1, @"InputGainAvailable"))
    {
      uint64_t v75 = qword_1E9359B78;
      long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
      uint64_t v77 = 0x1EE5F3208;
      goto LABEL_818;
    }
    if (CFEqual(cf1, @"InputGainScalar"))
    {
      uint64_t v75 = qword_1E9359B78;
      long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
      uint64_t v77 = 0x1EE5F3328;
      goto LABEL_818;
    }
    if (CFEqual(cf1, @"IsInputOutputDecoupled"))
    {
      if (!a1) {
        goto LABEL_654;
      }
      int v82 = CMSUtility_GetCurrentOutputVADID(a1);
      int v83 = CMSUtility_GetCurrentInputVADID(a1);
      CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFD0];
      uint64_t v12 = (__CFString **)MEMORY[0x1E4F1CFC8];
      BOOL v13 = v82 == v83;
      goto LABEL_12;
    }
    if (CFEqual(cf1, @"IsLongFormVideo"))
    {
      if (a1)
      {
        unsigned int IsAirPlayVideoActive = CMSUtility_IsLongFormVideoSession(a1);
        goto LABEL_11;
      }
      goto LABEL_654;
    }
    if (CFEqual(cf1, @"IsNowPlayingEligible"))
    {
      if (a1)
      {
        unsigned int IsAirPlayVideoActive = CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1);
        goto LABEL_11;
      }
      goto LABEL_654;
    }
    if (CFEqual(cf1, @"IsVolumeButtonClient"))
    {
      if (a1)
      {
        VolumeButtonClient = CMSessionMgrFindVolumeButtonClient(3u);
        CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFD0];
        if (VolumeButtonClient != a1) {
          CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFC8];
        }
        goto LABEL_14;
      }
      goto LABEL_654;
    }
    if (CFEqual(cf1, @"MATAtmosIsAvailable"))
    {
      FigEndpointManagerCopyProperty(qword_1E9359B78, 0x1EE5F3408, *MEMORY[0x1E4F1CF80], (uint64_t)a4);
      return 0;
    }
    if (CFEqual(cf1, @"MATAtmosIsEnabled"))
    {
      if (!a1) {
        goto LABEL_654;
      }
      unsigned int IsMATAtmosEnabled = vaemIsMATAtmosEnabled();
LABEL_596:
      uint64_t v91 = (NSArray **)MEMORY[0x1E4F1CFC8];
      if (IsMATAtmosEnabled) {
        uint64_t v91 = (NSArray **)MEMORY[0x1E4F1CFD0];
      }
      uint64_t SInt32 = *v91;
LABEL_7:
      uint64_t SInt32 = (NSArray *)CFRetain(SInt32);
LABEL_8:
      uint64_t v9 = 0;
      *a4 = SInt32;
      return v9;
    }
    if (CFEqual(cf1, @"MaximumNumberOfInputChannels"))
    {
      if (!a1) {
        goto LABEL_654;
      }
      LODWORD(valuePtr[0]) = [a1 audioSessionID];
      uint64_t v86 = qword_1E9359B78;
      uint64_t v87 = *MEMORY[0x1E4F1CF80];
      uint64_t v88 = 1;
      return FigVAEndpointManagerCopyPropertyForScope(v86, 0x1EE5F34A8, v87, v88, (uint64_t)valuePtr, (uint64_t)a4);
    }
    if (CFEqual(cf1, @"MaximumNumberOfOutputChannels"))
    {
      if (!a1) {
        goto LABEL_654;
      }
      if (FigRoutingManagerIsNonSelfOnlyLocalAirPlayEndpointPicked([a1 routingContextUUID])
        && CMSMDeviceState_ItsAnAppleTV())
      {
        uint64_t v62 = 2;
        goto LABEL_563;
      }
      if (vaemIsMATAtmosEnabled())
      {
        uint64_t v62 = 32;
        goto LABEL_563;
      }
      if (vaemIsAC3EncodingSupported())
      {
        uint64_t v62 = 6;
        goto LABEL_563;
      }
      LODWORD(valuePtr[0]) = [a1 audioSessionID];
      uint64_t v86 = qword_1E9359B78;
      uint64_t v87 = *MEMORY[0x1E4F1CF80];
      uint64_t v88 = 0;
      return FigVAEndpointManagerCopyPropertyForScope(v86, 0x1EE5F34A8, v87, v88, (uint64_t)valuePtr, (uint64_t)a4);
    }
    if (!CFEqual(cf1, @"NeroSuspended"))
    {
      if (CFEqual(cf1, @"OptOutOfMutePriority"))
      {
        if (a1)
        {
          unsigned int IsAirPlayVideoActive = CMSUtility_GetOptOutOfMutePriority(a1);
          goto LABEL_11;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"OutputDestination"))
      {
        uint64_t v75 = qword_1E9359B78;
        long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
        uint64_t v77 = 0x1EE5F3248;
        goto LABEL_818;
      }
      if (CFEqual(cf1, @"OutputDestinations"))
      {
        uint64_t v75 = qword_1E9359B78;
        long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
        uint64_t v77 = 0x1EE5F3288;
        goto LABEL_818;
      }
      if (CFEqual(cf1, @"OverrideRoute"))
      {
        if (a1)
        {
          uint64_t SInt32 = (NSArray *)cmsCopyOverrideRoute(a1);
          goto LABEL_8;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"PhysicalFormatsSupported"))
      {
        if (a1)
        {
          uint64_t SInt32 = (NSArray *)vaemCopyVirtualFormatsSupported();
          goto LABEL_8;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"PickedRouteForSession"))
      {
        if (!a1) {
          goto LABEL_654;
        }
        uint64_t v90 = a1;
LABEL_643:
        uint64_t SInt32 = (NSArray *)cmsDeepCopyPickedRoute(v90);
        goto LABEL_8;
      }
      if (CFEqual(cf1, @"PiPIsPossible"))
      {
        if (!a1) {
          goto LABEL_654;
        }
        if (CMSMDeviceState_SupportsPiP()
          && CMSUtility_HasBackgroundEntitlement(a1)
          && CMSMUtility_IsPiPAllowedForCategory([a1 audioCategory]))
        {
LABEL_65:
          CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFD0];
LABEL_14:
          VoicePromptStyle = *v11;
          *a4 = *v11;
LABEL_15:
          CFRetain(VoicePromptStyle);
          return 0;
        }
LABEL_582:
        CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFC8];
        goto LABEL_14;
      }
      if (CFEqual(cf1, @"PowerBudget"))
      {
        if (a1)
        {
          uint64_t SInt32 = (NSArray *)CMSUtility_CopyCPMSPowerBudgetForSession();
          goto LABEL_8;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"PowerProfile"))
      {
        if (a1)
        {
          uint64_t SInt32 = (NSArray *)[a1 powerProfile];
          if (!SInt32) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"PreferredInputs"))
      {
        if (a1)
        {
          uint64_t SInt32 = (NSArray *)cmsCopySubPortPreferencesAndInputOverride(a1);
          goto LABEL_8;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"PrefersToTakeHWControlFlagsFromAnotherSession"))
      {
        if (!a1) {
          goto LABEL_654;
        }
        unsigned int IsMATAtmosEnabled = CMSUtility_GetPrefersToTakeHWControlFlagsFromAnotherSession(a1);
        goto LABEL_596;
      }
      if (CFEqual(cf1, @"RouteControlFeatures"))
      {
        if (a1)
        {
          if (CMSMVAUtility_IsAdditiveRoutingEnabled()) {
            uint64_t v92 = [a1 isRoutedToOnDemandVAD];
          }
          else {
            uint64_t v92 = 0;
          }
          id v93 = objc_alloc(MEMORY[0x1E4F1C9E8]);
          uint64_t SInt32 = (NSArray *)objc_msgSend(v93, "initWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", v92), @"RouteControlFeatures", 0, v156, v157);
          goto LABEL_8;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"RoutingContext"))
      {
        if (a1)
        {
          FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID([a1 routingContextUUID], (uint64_t)a4);
          return 0;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"SelectableInputs"))
      {
        if (!a1) {
          goto LABEL_654;
        }
        unsigned int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)[a1 audioCategory]);
        int v95 = [a1 mode];
        long long v96 = (const void *)[a1 allowedPortTypes];
        int v97 = VADCategoryFromFigCategoryName;
        int v98 = v95;
        int v99 = 1;
LABEL_614:
        uint64_t SInt32 = (NSArray *)cmsmCopySelectablePortsForRouteConfiguration(v97, v98, v96, v99);
        goto LABEL_8;
      }
      if (CFEqual(cf1, @"SelectableOutputs"))
      {
        if (!a1) {
          goto LABEL_654;
        }
        unsigned int v100 = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)[a1 audioCategory]);
        int v101 = [a1 mode];
        long long v96 = (const void *)[a1 allowedPortTypes];
        int v97 = v100;
        int v98 = v101;
        int v99 = 0;
        goto LABEL_614;
      }
      if (CFEqual(cf1, @"ShouldInputBeMuted"))
      {
        if (a1 && !MX_FeatureFlags_IsSessionBasedMutingEnabled())
        {
          if (MX_FeatureFlags_IsCallManagementMuteControlEnabled())
          {
            id v103 = CMSUtility_CopyBundleID(a1);
            BOOL v104 = [(NSSet *)[+[MXSessionManager sharedInstance] mutedSessionBundleIDs] containsObject:v103];
            if (v104 && dword_1E9359ED0)
            {
              long long v105 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            long long v106 = (const void **)MEMORY[0x1E4F1CFD0];
            if (!v104) {
              long long v106 = (const void **)MEMORY[0x1E4F1CFC8];
            }
            long long v107 = *v106;
            *a4 = *v106;
            CFRetain(v107);
          }
          return 0;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"SpeechDetectStyle"))
      {
        if (a1)
        {
          uint64_t v102 = [+[MXSessionManager sharedInstance] currentSpeechDetectStyle:a1];
          uint64_t SInt32 = (NSArray *)[objc_alloc(MEMORY[0x1E4F28ED0]) initWithInt:v102];
          goto LABEL_8;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"UserVolume"))
      {
        if (!a1) {
          return FigSignalErrorAt();
        }
        LODWORD(valuePtr[0]) = CMSUtility_GetUserVolume(a1);
        CFAllocatorRef v25 = a3;
LABEL_807:
        CFNumberType v26 = kCFNumberFloat32Type;
        goto LABEL_85;
      }
      if (CFEqual(cf1, @"WantsToBeVolumeButtonClient"))
      {
        if (a1)
        {
          unsigned int IsAirPlayVideoActive = CMSUtility_GetWantsToBeVolumeButtonClient(a1);
          goto LABEL_11;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"PickableRoutes"))
      {
        MEMORY[0x199716E90](gCMSM);
        long long v108 = CMSUtility_CopyPickableRoutesForSession(0);
        *a4 = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v108, 0);
        if (v108) {
          CFRelease(v108);
        }
        goto LABEL_640;
      }
      if (CFEqual(cf1, @"PickedRoute"))
      {
        uint64_t v90 = 0;
        goto LABEL_643;
      }
      if (CFEqual(cf1, @"CurrentInputSafetyOffset"))
      {
        if (!a1) {
          goto LABEL_654;
        }
        AudioObjectID v109 = CMSUtility_GetCurrentInputVADID(a1);
        int v110 = 1;
LABEL_650:
        float CurrentSafetyOffsetForScope = vaemGetCurrentSafetyOffsetForScope(v109, v110);
        uint64_t SInt32 = (NSArray *)MXCFNumberCreateFromFloat32(CurrentSafetyOffsetForScope);
        goto LABEL_8;
      }
      if (CFEqual(cf1, @"CurrentOutputSafetyOffset"))
      {
        if (!a1) {
          goto LABEL_654;
        }
        AudioObjectID v109 = CMSUtility_GetCurrentOutputVADID(a1);
        int v110 = 0;
        goto LABEL_650;
      }
      if (CFEqual(cf1, @"DisplayIDsOfActiveSessions"))
      {
        if (a1)
        {
          uint64_t SInt32 = (NSArray *)CMSMUtility_CopyDisplayIDsOfActiveSessions();
          goto LABEL_8;
        }
        goto LABEL_654;
      }
      if (CFEqual(cf1, @"CurrentlyActiveCategory"))
      {
        uint64_t SInt32 = (NSArray *)CMSMUtility_CopyCurrentlyActiveCategory();
        goto LABEL_8;
      }
      if (CFEqual(cf1, @"CurrentlyActiveMode"))
      {
        uint64_t SInt32 = (NSArray *)CMSMUtility_CopyCurrentlyActiveMode();
        goto LABEL_8;
      }
      if (CFEqual(cf1, @"ActiveInputRouteForPlayAndRecordNoBluetooth"))
      {
        valuePtr[0] = 0;
        MEMORY[0x199716E90](gCMSM);
        FigVAEndpointManagerCopyPropertyForRouteConfiguration(qword_1E9359B78, 0x1EE5F3648, *MEMORY[0x1E4F1CF80], @"PlayAndRecord", @"Default", (uint64_t)valuePtr);
        MEMORY[0x199716EA0](gCMSM);
        if (!valuePtr[0])
        {
          *a4 = 0;
          return 0;
        }
        if (CFArrayGetCount((CFArrayRef)valuePtr[0]) < 1)
        {
          CFDictionaryRef ValueAtIndex = 0;
        }
        else
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)valuePtr[0], 0);
          if (ValueAtIndex) {
            CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
          }
        }
        CFTypeRef v113 = valuePtr[0];
        *a4 = ValueAtIndex;
        if (!v113) {
          return 0;
        }
        uint64_t v114 = v113;
        goto LABEL_747;
      }
      if (CFEqual(cf1, @"VoicePromptStyle"))
      {
        VoicePromptStyle = CMSMUtility_GetVoicePromptStyle();
        goto LABEL_40;
      }
      if (CFEqual(cf1, @"CurrentRouteHasVolumeControl"))
      {
        uint64_t v9 = (uint64_t)CMSMUtility_CopyCurrentlyActiveCategory();
        MEMORY[0x199716E90](gCMSM);
        if (!v9 && dword_1E9359B84 != 1668505974)
        {
          if (dword_1E9359C10)
          {
            v115 = (const void *)*MEMORY[0x1E4F1CFC8];
            *a4 = *MEMORY[0x1E4F1CFC8];
            CFRetain(v115);
          }
          else
          {
            if (!CMSMUtility_SomeSessionHasDoNotResetAudioCategoryOnNextInactive()) {
              vaemResetVADCategoryToStandardAVAndDefaultMode();
            }
            FigEndpointManagerCopyProperty(qword_1E9359B78, 0x1EE5F31C8, *MEMORY[0x1E4F1CF80], (uint64_t)a4);
          }
          uint64_t v47 = gCMSM;
          goto LABEL_766;
        }
        if (byte_1E9359B80) {
          uint64_t v116 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v116 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        uint64_t v117 = *v116;
        *a4 = *v116;
        CFRetain(v117);
        MEMORY[0x199716EA0](gCMSM);
        if (!v9) {
          return v9;
        }
        uint64_t v114 = (const void *)v9;
LABEL_747:
        CFRelease(v114);
        return 0;
      }
      if (CFEqual(cf1, @"ShouldIgnorePlayCommandsFromAccessory"))
      {
        unsigned int IsAirPlayVideoActive = CMSMUtility_ShouldIgnorePlayCommandsFromAccessory();
        goto LABEL_11;
      }
      if (CFEqual(cf1, @"PhoneCallExists"))
      {
        unsigned int IsAirPlayVideoActive = CMSMUtility_IsPhoneCallActive();
        goto LABEL_11;
      }
      if (CFEqual(cf1, @"CurrentPhoneCallIsRoutedViaCarBT"))
      {
        CFArrayRef v118 = (const void *)FigRoutingManagerCopyCarBluetoothIDs(qword_1E9359C88);
        CFTypeRef cf = CMSMUtility_CopyCurrentRouteTypes();
        if (CMSMUtility_PhoneCallOrRingtoneExists())
        {
          if (FigCFArrayContainsValue())
          {
            CFStringRef CurrentDeviceIdentifierAtIndex = (const __CFString *)CMSMUtility_GetCurrentDeviceIdentifierAtIndex(0);
            if (cmsmIsDeviceIDIncludedInCarBluetoothIDs(CurrentDeviceIdentifierAtIndex, (uint64_t)v118))
            {
              uint64_t v120 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_701:
              v123 = *v120;
LABEL_729:
              *a4 = v123;
              CFRetain(v123);
              v143 = CMSMUtility_CopyCurrentRouteIdentifiers();
              if (dword_1E9359ED0)
              {
                v144 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (v118) {
                CFRelease(v118);
              }
              if (v143) {
                CFRelease(v143);
              }
              if (!cf) {
                return 0;
              }
              uint64_t v114 = cf;
              goto LABEL_747;
            }
          }
          if (FigCFArrayContainsValue() || !CMSMUtility_GetNumberOfCurrentOutputPorts())
          {
            CFArrayRef v130 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, 0x1EE5EBF48);
            v131 = (const void **)MEMORY[0x1E4F1CFC8];
            if (v130)
            {
              CFArrayRef v132 = v130;
              CFIndex Count = CFArrayGetCount(v130);
              if (Count < 1)
              {
                CFRelease(v132);
              }
              else
              {
                CFIndex v134 = Count;
                CFIndex v135 = 0;
                BOOL v136 = 1;
                do
                {
                  LODWORD(valuePtr[0]) = 0;
                  CFNumberRef v137 = (const __CFNumber *)CFArrayGetValueAtIndex(v132, v135);
                  CFNumberGetValue(v137, kCFNumberSInt32Type, valuePtr);
                  if (vaeGetPortTypeFromPortID(LODWORD(valuePtr[0])) == 1885892706)
                  {
                    CFStringRef v138 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort((AudioObjectID)valuePtr[0]);
                    int IsDeviceIDIncludedInCarBluetoothIDs = cmsmIsDeviceIDIncludedInCarBluetoothIDs(v138, (uint64_t)v118);
                    if (v138) {
                      CFRelease(v138);
                    }
                    if (IsDeviceIDIncludedInCarBluetoothIDs) {
                      break;
                    }
                  }
                  BOOL v136 = ++v135 < v134;
                }
                while (v134 != v135);
                CFRelease(v132);
                if (v136) {
                  v131 = (const void **)MEMORY[0x1E4F1CFD0];
                }
              }
            }
            v123 = *v131;
            goto LABEL_729;
          }
        }
        uint64_t v120 = (const void **)MEMORY[0x1E4F1CFC8];
        goto LABEL_701;
      }
      if (CFEqual(cf1, @"CurrentPlayingSessionIsRoutedViaCarBT"))
      {
        uint64_t v121 = CMSMUtility_CopyCurrentRouteTypes();
        if (FigCFArrayContainsValue()) {
          BOOL v122 = 1;
        }
        else {
          BOOL v122 = FigCFArrayContainsValue() != 0;
        }
        v126 = (const void *)FigRoutingManagerCopyCarBluetoothIDs(qword_1E9359C88);
        v127 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsPlayingAndPlaysToCarMainAudio, 0);
        if (v127
          && v122
          && (CFStringRef v128 = (const __CFString *)CMSMUtility_GetCurrentDeviceIdentifierAtIndex(0),
              cmsmIsDeviceIDIncludedInCarBluetoothIDs(v128, (uint64_t)v126)))
        {
          v129 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else
        {
          v129 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFTypeRef v140 = *v129;
        *a4 = *v129;
        CFRetain(v140);
        v141 = CMSMUtility_CopyCurrentRouteIdentifiers();
        if (dword_1E9359ED0)
        {
          v142 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v121) {
          CFRelease(v121);
        }
        if (v141) {
          CFRelease(v141);
        }
        if (v126) {
          CFRelease(v126);
        }
        if (!v127) {
          return 0;
        }
        uint64_t v114 = v127;
        goto LABEL_747;
      }
      if (CFEqual(cf1, @"NowPlayingAppShouldResumeForCarPlay"))
      {
        int ShouldResumeForCarPlay = CMSMNP_GetNowPlayingAppShouldResumeForCarPlay();
        if (dword_1E9359ED0)
        {
          v125 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFD0];
        uint64_t v12 = (__CFString **)MEMORY[0x1E4F1CFC8];
        BOOL v13 = ShouldResumeForCarPlay == 0;
        goto LABEL_12;
      }
      if (CFEqual(cf1, @"CarPlayIsConnected"))
      {
        int v16 = [+[MXSessionManager sharedInstance] carPlayIsConnected];
        goto LABEL_33;
      }
      if (CFEqual(cf1, @"CarPlayAuxStreamSupport"))
      {
        unsigned int IsAirPlayVideoActive = FigRoutingManager_iOSIsCarPlayAuxStreamSupported();
        goto LABEL_11;
      }
      if (CFEqual(cf1, @"CarPlaySupportsMixableSiri"))
      {
        unsigned int IsAirPlayVideoActive = CMSMUtility_DoesCarPlaySupportMixableSiri();
        goto LABEL_11;
      }
      if (CFEqual(cf1, @"SomeClientIsPlaying"))
      {
        int v145 = byte_1E9359C30;
        goto LABEL_836;
      }
      if (CFEqual(cf1, @"SomeClientIsPlayingLongFormAudio"))
      {
        unsigned int IsAirPlayVideoActive = CMSMUtility_SomeClientIsPlayingLongFormAudio();
        goto LABEL_11;
      }
      if (CFEqual(cf1, @"ActiveClientPIDsThatHideTheSpeechDetectionDevice"))
      {
        uint64_t SInt32 = (NSArray *)CMSMUtility_CopyActiveClientPIDsThatHideTheSpeechDetectionDevice();
        goto LABEL_8;
      }
      if (CFEqual(cf1, @"SomeLongFormVideoClientIsActiveOverAirPlayVideo"))
      {
        MEMORY[0x199716E90](gCMSM);
        int v146 = byte_1E9359B9C;
LABEL_762:
        if (v146) {
          long long v147 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          long long v147 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        long long v148 = *v147;
        *a4 = *v147;
        CFRetain(v148);
        uint64_t v47 = gCMSM;
        goto LABEL_766;
      }
      if (CFEqual(cf1, @"SomeLongFormVideoClientIsPlayingOverAirPlayVideo"))
      {
        MEMORY[0x199716E90](gCMSM);
        int v146 = byte_1E9359B9D;
        goto LABEL_762;
      }
      if (CFEqual(cf1, @"SomeLongFormVideoClientIsPlaying"))
      {
        MEMORY[0x199716E90](gCMSM);
        int v146 = byte_1E9359B9E;
        goto LABEL_762;
      }
      if (CFEqual(cf1, @"IsSomeoneRecording"))
      {
        LODWORD(valuePtr[0]) = 0;
        MEMORY[0x199716E90](gCMSM);
        if (CMSMUtility_IsSomeClientRecording()) {
          LODWORD(valuePtr[0]) = dword_1E9359B98;
        }
        MEMORY[0x199716EA0](gCMSM);
        CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        goto LABEL_84;
      }
      if (CFEqual(cf1, @"RecordingClientPIDs"))
      {
        uint64_t SInt32 = [+[MXSessionManager sharedInstance] recordingClientPIDs];
        if (!SInt32) {
          goto LABEL_8;
        }
        goto LABEL_47;
      }
      if (CFEqual(cf1, @"DeviceSupportsPiP"))
      {
        unsigned int IsAirPlayVideoActive = CMSMDeviceState_SupportsPiP();
        goto LABEL_11;
      }
      if (CFEqual(cf1, @"CurrentPrimaryAppDisplayID"))
      {
        uint64_t SInt32 = (NSArray *)MX_FrontBoardServcies_CopyPrimaryAppDisplayID();
        goto LABEL_8;
      }
      if (CFEqual(cf1, @"UplinkMute"))
      {
        int v16 = [+[MXSessionManager sharedInstance] uplinkMute];
        goto LABEL_33;
      }
      if (CFEqual(cf1, @"DownlinkMute"))
      {
        uint64_t v75 = qword_1E9359B78;
        long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
        uint64_t v77 = 0x1EE5F30A8;
        goto LABEL_818;
      }
      if (CFEqual(cf1, @"iOSWillRequestToBorrowStarkMainAudio"))
      {
        int v149 = 1;
LABEL_786:
        unsigned int IsAirPlayVideoActive = CMSMUtility_iOSWillRequestCarMainAudio(v149);
        goto LABEL_11;
      }
      if (CFEqual(cf1, @"iOSWillRequestToTakeStarkMainAudio"))
      {
        int v149 = 0;
        goto LABEL_786;
      }
      if (CFEqual(cf1, @"StarkMainAudioIsOwnedByiOSButBorrowedByCar"))
      {
        int v16 = [+[MXSessionManager sharedInstance] starkMainAudioIsOwnedByiOSButBorrowedByCar];
        goto LABEL_33;
      }
      if (CFEqual(cf1, @"SpeechDetectionDevicePresent"))
      {
        unsigned int IsAirPlayVideoActive = vaemSpeechDetectionVADExists();
        goto LABEL_11;
      }
      if (CFEqual(cf1, @"NowPlayingAppPID"))
      {
        uint64_t SInt32 = (NSArray *)objc_msgSend(objc_alloc(MEMORY[0x1E4F28ED0]), "initWithLong:", -[MXNowPlayingAppManager nowPlayingAppPID](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "nowPlayingAppPID"));
        goto LABEL_8;
      }
      if (CFEqual(cf1, @"NowPlayingAppDisplayID"))
      {
        uint64_t SInt32 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID];
        goto LABEL_47;
      }
      if (CFEqual(cf1, @"NowPlayingAppIsPlaying"))
      {
        int IsInterrupted = CMSMNP_GetNowPlayingAppIsPlaying();
LABEL_799:
        CFRange v151 = (__CFString **)MEMORY[0x1E4F1CFD0];
        if (!IsInterrupted) {
          CFRange v151 = (__CFString **)MEMORY[0x1E4F1CFC8];
        }
        VoicePromptStyle = *v151;
        goto LABEL_40;
      }
      if (CFEqual(cf1, @"NowPlayingAppIsInterrupted"))
      {
        int IsInterrupted = CMSMNP_GetNowPlayingAppIsInterrupted();
        goto LABEL_799;
      }
      if (CFEqual(cf1, @"HeadphoneVolumeLimit"))
      {
        float v152 = PVMGetVolumeLimit();
LABEL_806:
        *(float *)float valuePtr = v152;
        CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        goto LABEL_807;
      }
      if (CFEqual(cf1, @"VibeIntensity"))
      {
        float v152 = PVMGetVibeIntensityPreference();
        goto LABEL_806;
      }
      if (CFEqual(cf1, @"ThermalGainAdjustment_Speaker"))
      {
        uint64_t v75 = qword_1E9359B78;
        long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
        uint64_t v77 = 0x1EE5F33A8;
        goto LABEL_818;
      }
      if (CFEqual(cf1, @"ThermalGainAdjustment_Haptics"))
      {
        uint64_t v75 = qword_1E9359B78;
        long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
        uint64_t v77 = 0x1EE5F33C8;
        goto LABEL_818;
      }
      if (CFEqual(cf1, @"HeadphoneJackIsConnected"))
      {
        uint64_t v75 = qword_1E9359B78;
        long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
        uint64_t v77 = 0x1EE5F3188;
        goto LABEL_818;
      }
      if (!CFEqual(cf1, @"AirPlayScreenSuspended"))
      {
        if (CFEqual(cf1, @"HeadphoneJackHasInput"))
        {
          uint64_t v75 = qword_1E9359B78;
          long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
          uint64_t v77 = 0x1EE5F31A8;
          goto LABEL_818;
        }
        if (CFEqual(cf1, @"SystemIsAnAppleTV"))
        {
          unsigned int IsAirPlayVideoActive = CMSMDeviceState_ItsAnAppleTV();
          goto LABEL_11;
        }
        if (CFEqual(cf1, @"ActiveNeroVisualStream"))
        {
          uint64_t SInt32 = (NSArray *)FigRoutingManagerCopyActiveNeroVisualStream((uint64_t)[+[MXSessionManager sharedInstance] systemMirroringRoutingContextUUID]);
          goto LABEL_8;
        }
        if (CFEqual(cf1, @"ActiveNeroVisualStreamInfo"))
        {
          uint64_t SInt32 = (NSArray *)FigRoutingManagerCopyActiveNeroVisualStreamInfo((uint64_t)[+[MXSessionManager sharedInstance] systemMirroringRoutingContextUUID]);
          goto LABEL_8;
        }
        if (CFEqual(cf1, @"ExternalScreenType"))
        {
          uint64_t SInt32 = (NSArray *)CMScreenGetScreenType();
          if (!SInt32) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        if (CFEqual(cf1, @"ThermalControlInfo"))
        {
          uint64_t SInt32 = (NSArray *)vaemCopyThermalControlInfo();
          goto LABEL_8;
        }
        if (CFEqual(cf1, @"LongFormVideoApps"))
        {
          uint64_t SInt32 = [+[MXSessionManager sharedInstance] longFormVideoApps];
          goto LABEL_47;
        }
        if (!CFEqual(cf1, @"SomeRecordingSessionPresentThatDisallowsSystemSounds"))
        {
          if (!CFEqual(cf1, @"SomeSessionIsActiveThatPrefersNoInterruptionsByRingtonesAndAlerts")) {
            return 4294954312;
          }
          unsigned int IsAirPlayVideoActive = CMSMUtility_SomeSessionIsActiveThatPrefersNoInterruptionsByRingtonesAndAlerts();
          goto LABEL_11;
        }
        int v145 = byte_1E9359CD0;
LABEL_836:
        if (v145) {
          CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFD0];
        }
        else {
          CFNumberRef v11 = (__CFString **)MEMORY[0x1E4F1CFC8];
        }
        goto LABEL_14;
      }
    }
    unsigned int IsAirPlayVideoActive = CMScreenIsSuspended();
    goto LABEL_11;
  }
  uint64_t v75 = qword_1E9359B78;
  long long v76 = (uint64_t *)MEMORY[0x1E4F1CF80];
  uint64_t v77 = 0x1EE5F3228;
LABEL_818:
  uint64_t v153 = *v76;
  return FigEndpointManagerCopyProperty(v75, v77, v153, (uint64_t)a4);
}

uint64_t CMSUtility_SomeOtherClientIsPlaying(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = [+[MXSessionManager sharedInstance] copyMXCoreSessionList];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        CFDictionaryRef v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ([v7 isPlaying]
          && [v7 isPlayingOutput]
          && ([v7 hasAudioCategory:@"SystemSoundsAndHaptics"] & 1) == 0)
        {
          int v8 = [v7 doesntActuallyPlayAudio];
          if (v7 != a1 && v8 == 0)
          {
            uint64_t v10 = 1;
            goto LABEL_17;
          }
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v10 = 0;
LABEL_17:

  return v10;
}

uint64_t vaemSystemHasAudioInputDevice()
{
  return byte_1E9358B69;
}

uint64_t CMSUtility_GetApplicationStateForSession(void *a1)
{
  if (!a1) {
    return 0;
  }
  if (![a1 pidToInheritAppStateFrom])
  {
    [a1 audioCategory];
    if (!FigCFEqual())
    {
      uint64_t v2 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
      goto LABEL_4;
    }
    return 0;
  }
  uint64_t v2 = [a1 pidToInheritAppStateFrom];
LABEL_4:
  return MX_RunningBoardServices_GetApplicationStateForPID(v2, 1);
}

uint64_t FigRoutingManagerCopyActiveNeroVisualStreamInfo(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t result = FigRoutingManagerCopyActiveNeroVisualStream(a1);
  if (result)
  {
    uint64_t v2 = (const void *)result;
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t, void, void, uint64_t *))(v5 + 48);
    if (v6) {
      v6(CMBaseObject, *MEMORY[0x1E4F21388], *MEMORY[0x1E4F1CF80], &v7);
    }
    CFRelease(v2);
    return v7;
  }
  return result;
}

uint64_t FigRoutingManagerCopyActiveNeroVisualStream(uint64_t a1)
{
  CFArrayRef theArray = 0;
  uint64_t v7 = 0;
  FigRoutingManagerContextUtilities_CopyActivatedEndpoints(a1, (uint64_t)&theArray);
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v2 = Count;
      CFIndex v3 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)) {
          break;
        }
        if (v2 == ++v3) {
          goto LABEL_8;
        }
      }
      FigEndpointCopyFirstStreamOfType();
    }
LABEL_8:
    if (theArray) {
      CFRelease(theArray);
    }
  }
  return v7;
}

uint64_t vaemVADCopyAvailableStreamFormatsForVADID(AudioObjectID a1, int a2, void *a3, unsigned int *a4)
{
  AudioObjectID outData = 0;
  uint64_t v9 = 0;
  BOOL v6 = a2 == 0;
  uint64_t result = vaemGetStream0(a1, v6, &outData);
  if (result) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = outData == 0;
  }
  if (!v8)
  {
    uint64_t result = vaemCopySupportedStreamFormats(outData, v6, &v9, a4);
    if (!result) {
      *a3 = v9;
    }
  }
  return result;
}

uint64_t vaemIsAC3EncodingSupported()
{
  vaemGetAC3IsSupported();
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t vaemGetAC3IsSupported()
{
  AudioObjectID outData = 0;
  if (vaemGetStream0([+[MXSessionManager sharedInstance] defaultVADID], 0, &outData))return 0; {
  uint64_t result = outData;
  }
  if (outData) {
    return vaemStreamSupportsFormat(outData, 1667326771);
  }
  return result;
}

CFDataRef MXCFDataCreate(UInt8 *bytes, CFIndex length)
{
  if (bytes && length) {
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, length);
  }
  else {
    return 0;
  }
}

uint64_t FigVAEndpointManagerCopyPropertyForScope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  long long v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 32);
  if (!v14) {
    return 4294954514;
  }
  return v14(a1, a2, a3, a4, a5, a6);
}

uint64_t FigRoutingManagerIsNonSelfOnlyLocalAirPlayEndpointPicked(uint64_t a1)
{
  if (FigRoutingManagerContextUtilities_GetContextType(a1) != 3) {
    return 0;
  }
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&cf);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
  {
    CFArrayRef theArray = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    BOOL v6 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v4 + 48);
    if (v6) {
      v6(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
    }
    CFIndex v7 = 0;
    while (1)
    {
      CFArrayRef v8 = theArray;
      if (theArray)
      {
        CFIndex Count = CFArrayGetCount(theArray);
        CFArrayRef v8 = theArray;
      }
      else
      {
        CFIndex Count = 0;
      }
      if (v7 >= Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v7++);
      if (!FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)ValueAtIndex))
      {
        uint64_t v5 = 1;
        CFArrayRef v8 = theArray;
        if (!theArray) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
    }
    uint64_t v5 = 0;
    if (!v8) {
      goto LABEL_20;
    }
LABEL_19:
    CFRelease(v8);
  }
  else
  {
    uint64_t v5 = 0;
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t vaemGetNumberOfChannelsForVADIDAndScope(uint64_t a1, int a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (dword_1E9359B84 == 1668117868)
  {
    if (dword_1E9359ED0)
    {
      AudioObjectID inObjectID = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return vaemGetMaximumNumberOfChannels(a2);
  }
  else
  {
    if (CMSMDeviceState_ItsAniPad())
    {
      id v5 = [+[MXAdditiveRoutingManager sharedInstance] copyDetailedRouteDescription:a1];
      id v6 = [NSString alloc];
      CFIndex v7 = kMXSession_RouteDetailedDescriptionKey_Inputs;
      if (a2 != 1) {
        CFIndex v7 = kMXSession_RouteDetailedDescriptionKey_Outputs;
      }
      CFArrayRef v8 = (void *)[v6 initWithString:*v7];
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      uint64_t v9 = objc_msgSend((id)objc_msgSend(v5, "objectForKey:", v8), "allObjects");
      uint64_t v10 = [v9 countByEnumeratingWithState:&v25 objects:v33 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v26;
        int v23 = a2;
        int v22 = v8;
        while (2)
        {
          id v13 = v5;
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v26 != v12) {
              objc_enumerationMutation(v9);
            }
            long long v15 = (void *)[*(id *)(*((void *)&v25 + 1) + 8 * i) objectForKey:@"RouteDetailedDescription_PortType"];
            if (([v15 isEqualToString:@"USB"] & 1) != 0
              || [v15 isEqualToString:@"Thunderbolt"])
            {
              id v18 = v13;
              a2 = v23;
              if (dword_1E9359ED0)
              {
                AudioObjectID inObjectID = 0;
                uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                AudioObjectID v20 = inObjectID;
                if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v21 = v20;
                }
                else {
                  unsigned int v21 = v20 & 0xFFFFFFFE;
                }
                if (v21)
                {
                  inAddress.AudioObjectPropertySelector mSelector = 136315394;
                  *(void *)&inAddress.mScope = "vaemGetNumberOfChannelsForVADIDAndScope";
                  __int16 v31 = 2114;
                  uint64_t v32 = v15;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }

              return vaemGetMaximumNumberOfChannels(a2);
            }
          }
          uint64_t v11 = [v9 countByEnumeratingWithState:&v25 objects:v33 count:16];
          id v5 = v13;
          a2 = v23;
          CFArrayRef v8 = v22;
          if (v11) {
            continue;
          }
          break;
        }
      }
    }
    AudioObjectID inObjectID = 0;
    int Stream0 = vaemGetStream0(a1, a2, &inObjectID);
    uint64_t result = 0;
    if (!Stream0 && inObjectID)
    {
      inAddress.mElement = 0;
      *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"tmfsbolg";
      *(_DWORD *)os_log_type_t type = 40;
      uint64_t v36 = 0;
      long long outData = 0u;
      long long v35 = 0u;
      if (AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, (UInt32 *)type, &outData)) {
        return 0;
      }
      else {
        return HIDWORD(v35);
      }
    }
  }
  return result;
}

uint64_t vaemGetDeviceBufferNumPCMFrames(AudioObjectID a1, AudioObjectPropertyScope a2)
{
  unsigned int outData = 0;
  inAddress.AudioObjectPropertySelector mSelector = 1718839674;
  inAddress.mScope = a2;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData)) {
    return 0;
  }
  else {
    return outData;
  }
}

CFNumberRef MXCFNumberCreateFromSInt32(int a1)
{
  int valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
}

uint64_t FigVAEndpointManagerCopyPropertyForAudioDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(v11 + 40);
  if (!v12) {
    return 4294954514;
  }
  return v12(a1, a2, a3, a4, 0, a5);
}

uint64_t CMSMDeviceState_ItsAniPad()
{
  return byte_1E9358933;
}

void CMSessionMgrSystemSoundActivateForPID(int a1, char a2, int a3)
{
  id v6 = (void *)MEMORY[0x1997179E0]();
  +[MXInitialization waitUntilMXIsFullyInitialized];
  v12[0] = 0;
  v12[1] = v12;
  void v12[2] = 0x2020000000;
  int v13 = 0;
  CFIndex v7 = MXGetSerialQueue();
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __CMSessionMgrSystemSoundActivateForPID_block_invoke;
  v8[3] = &unk_1E57CB2A0;
  char v11 = a2;
  os_log_type_t v8[4] = v12;
  int v9 = a1;
  int v10 = a3;
  MXDispatchAsyncAndWait((uint64_t)"CMSessionMgrSystemSoundActivateForPID", (uint64_t)"CMSessionManager_SystemSounds.m", 4635, 0, 0, v7, (uint64_t)v8);
  _Block_object_dispose(v12, 8);
}

void sub_194D352B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSUtility_IsBluetoothSharingSessionEnabledForMediaPlayback()
{
  int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)@"Audio/Video");
  int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(@"Default");
  CFArrayRef v2 = (const __CFArray *)vaemCopyVADOutputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, 0, 0);
  uint64_t IsBluetoothSharingSessionEnabled = CMSMVAUtility_IsBluetoothSharingSessionEnabled(v2);
  if (v2) {
    CFRelease(v2);
  }
  return IsBluetoothSharingSessionEnabled;
}

void CMSUtility_RouteToPreferredRouteIfRequired(void *a1, unsigned int a2, int a3)
{
  if (a1)
  {
    id v5 = a1;
    uint64_t LocalSessionPriority = CMSM_GetLocalSessionPriority(a1, 1);
    if (a2)
    {
      int v7 = [v5 isActive];
      if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
      {
        if (!v7) {
          return;
        }
      }
      else if (!v7 || ![v5 isPlaying])
      {
        return;
      }
      if (LocalSessionPriority <= a2) {
        return;
      }
    }
    if ((!FigPredictedRouting_IsTimerActive() || LocalSessionPriority != 501)
      && FigPredictedRouting_IsTimerActive())
    {
      if (!dword_1E9359ED0) {
        return;
      }
LABEL_76:
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return;
    }
    BOOL v8 = LocalSessionPriority != 100;
    if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled() && LocalSessionPriority != 100)
    {
      int v9 = +[MXSessionManager sharedInstance];
      uint64_t v10 = [v5 audioDestinationPriority];
      if (v10) {
        id v11 = [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v10];
      }
      else {
        id v11 = @"VirtualAudioDevice_Default";
      }
      id v12 = [(MXSessionManager *)v9 copyHighestPriorityActiveSession:v11 deviceIdentifier:0];
      BOOL v8 = v12 == v5;
    }
    if (FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent([v5 routingContextUUID]))
    {
      BOOL v13 = 0;
    }
    else
    {
      [v5 audioCategory];
      if ((FigCFEqual()
         || ([v5 audioCategory], FigCFEqual())
         || [v5 hasAudioCategory:@"FindMyAudioDevice"])
        && !CMSMDeviceState_RingerIsOn(1))
      {
        BOOL v13 = CMSMUtility_GetCurrentOutputPortAtIndex(0) == 0;
      }
      else
      {
        BOOL v47 = v8;
        int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName((NSDictionary *)[v5 audioCategory]);
        int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName([v5 audioMode]);
        CFArrayRef v16 = (const __CFArray *)vaemCopyVADOutputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, (const void *)[v5 activationContext], (const void *)objc_msgSend(v5, "allowedPortTypes"));
        CFArrayRef v17 = v16;
        if (v16) {
          CFIndex Count = CFArrayGetCount(v16);
        }
        else {
          CFIndex Count = 0;
        }
        CFArrayRef v19 = cmsmCopyWirelessPortsArrayForRouteConfiguration((NSDictionary *)[v5 audioCategory], objc_msgSend(v5, "audioMode"), (const void *)objc_msgSend(v5, "allowedPortTypes"));
        CFArrayRef v20 = v19;
        if (v19) {
          CFIndex v21 = CFArrayGetCount(v19);
        }
        else {
          CFIndex v21 = 0;
        }
        unsigned int v48 = LocalSessionPriority;
        if (Count < 1)
        {
          BOOL v13 = 0;
        }
        else
        {
          float v43 = v5;
          int v44 = a3;
          CFIndex v22 = 0;
          CFIndex v45 = Count;
          CFArrayRef v46 = v17;
          while (1)
          {
            uint64_t PortAtIndex = CMSMVAUtility_GetPortAtIndex(v17, v22);
            AudioObjectID v24 = PortAtIndex;
            int PortTypeFromPortID = vaeGetPortTypeFromPortID(PortAtIndex);
            long long v26 = vaeCopyVADEndpointTypeForPort(v24);
            if (PortTypeFromPortID == 1885565807
              || PortTypeFromPortID == 1886613611
              || PortTypeFromPortID == 1886545251)
            {
              break;
            }
            if (FigCFEqual() && v21 >= 1)
            {
              BOOL v13 = 0;
              uint64_t v27 = 1;
              do
              {
                uint64_t v28 = CMSMVAUtility_GetPortAtIndex(v20, v27 - 1);
                int IsPortBTManaged = MXBluetoothServices_IsPortBTManaged(v28, 1);
                int v30 = vaeGetPortTypeFromPortID(v28);
                BOOL v32 = v24 != v28 && IsPortBTManaged != 0;
                int v33 = v32 && PortTypeFromPortID == v30;
                if (v33) {
                  BOOL v13 = 1;
                }
                if (v33) {
                  break;
                }
              }
              while (v27++ < v21);
              CFIndex Count = v45;
              CFArrayRef v17 = v46;
              if (v13) {
                goto LABEL_57;
              }
            }
            if (v26) {
              CFRelease(v26);
            }
            if (++v22 == Count)
            {
              BOOL v13 = 0;
              a3 = v44;
              id v5 = v43;
              goto LABEL_60;
            }
          }
          BOOL v13 = 1;
LABEL_57:
          a3 = v44;
          id v5 = v43;
          if (v26) {
            CFRelease(v26);
          }
        }
LABEL_60:
        if (v17) {
          CFRelease(v17);
        }
        uint64_t LocalSessionPriority = v48;
        if (v20) {
          CFRelease(v20);
        }
        BOOL v8 = v47;
      }
    }
    int IsAnyRouteBTManagedAndInEar = CMSMVAUtility_IsAnyRouteBTManagedAndInEar();
    IsBluetoothSharingSessionEnabledForMediaPlaybacuint64_t k = CMSUtility_IsBluetoothSharingSessionEnabledForMediaPlayback();
    if (!v8
      || !CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(v5, 1)
      || [v5 doesntActuallyPlayAudio]
      || !v13
      || !IsAnyRouteBTManagedAndInEar
      || IsBluetoothSharingSessionEnabledForMediaPlayback)
    {
      if (!dword_1E9359ED0) {
        return;
      }
      goto LABEL_76;
    }
    if ((MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()
       || [v5 shouldAttemptSmartRoutingHijackForMusicApp] && (a3 == 10 || a3 == 7))
      && !CMSUtility_IsSessionPlayStateEligibleForTipi(v5))
    {
      if (!dword_1E9359ED0) {
        return;
      }
      goto LABEL_76;
    }
    CFStringRef v38 = (const __CFString *)MXBluetoothServices_CopyPreferredDeviceAddress(LocalSessionPriority, [v5 displayID], 0, 0);
    CurrentOutputuint64_t PortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    CFStringRef v40 = (const __CFString *)vaeCopyDeviceIdentifierFromVADPort(CurrentOutputPortAtIndex);
    if (MXCFStringHasCaseInsensitivePrefix(v40, v38))
    {
      if (dword_1E9359ED0)
      {
        uint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (dword_1E9359ED0)
      {
        float v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSMVAUtility_RouteToPreferredDeviceAddressIfInEar(v38);
    }
    if (v40) {
      CFRelease(v40);
    }
    if (v38) {
      CFRelease(v38);
    }
  }
}

uint64_t FigPredictedRouting_IsTimerActive()
{
  if (predictedRouting_initialize_onceToken != -1) {
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_4_0);
  }
  MEMORY[0x199716E90](gPRS_0);
  if (gPRS_2)
  {
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t v1 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      uint64_t v1 = 1;
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  MEMORY[0x199716EA0](gPRS_0);
  return v1;
}

__CFArray *vaemCopyActiveInputRouteNamesForRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3)
{
  int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a1);
  int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
  CFArrayRef v7 = (const __CFArray *)vaemCopyVADInputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, 0, a3);
  if (!v7) {
    return 0;
  }
  CFArrayRef v8 = v7;
  CFIndex Count = CFArrayGetCount(v7);
  if (Count < 1)
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFIndex v10 = Count;
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    for (CFIndex i = 0; i != v10; ++i)
    {
      AudioObjectID PortAtIndex = CMSMVAUtility_GetPortAtIndex(v8, i);
      long long v14 = (const void *)vaeCopyNameForPort(PortAtIndex);
      if (v14)
      {
        long long v15 = v14;
        CFArrayAppendValue(Mutable, v14);
        CFRelease(v15);
      }
    }
  }
  CFRelease(v8);
  return Mutable;
}

void vaemCopyNewRoutesInfoFromRouteChangeDescription(const __CFDictionary *a1, void **a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, const __CFDictionary **a8, uint64_t a9)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2 && a3)
  {
    CFArrayRef v27 = 0;
    CFArrayRef theArray = 0;
    vaemGetPortsInfoFromRouteChangeDescription(a1, (const void **)&theArray, (const void **)&v27, a4, a5, a6, a7, a8, a9);
    if (theArray) {
      CFArrayGetCount(theArray);
    }
    if (v27) {
      CFArrayGetCount(v27);
    }
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFArrayRef v29 = 0;
    *(void *)os_log_type_t type = 0;
    CFArrayRef v26 = 0;
    CFArrayRef v24 = 0;
    CMSMVAUtility_CopyRoutesInfoFromInputAndOutputPorts(v27, theArray, &v29, &v26, &v24, (__CFArray **)type);
    if (v29)
    {
      int Count = CFArrayGetCount(v29);
      *a3 = Count;
      if (Count)
      {
        unint64_t v13 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v29, v13);
          if (FigCFEqual()) {
            long long v15 = 0;
          }
          else {
            long long v15 = ValueAtIndex;
          }
          CFArrayRef v16 = CFArrayGetValueAtIndex(v26, v13);
          if (FigCFEqual()) {
            CFArrayRef v17 = 0;
          }
          else {
            CFArrayRef v17 = v16;
          }
          if (v24)
          {
            id v18 = CFArrayGetValueAtIndex(v24, v13);
            if (FigCFEqual()) {
              CFArrayRef v19 = 0;
            }
            else {
              CFArrayRef v19 = v18;
            }
          }
          else
          {
            CFArrayRef v19 = 0;
          }
          CFArrayRef v20 = CFArrayGetValueAtIndex(*(CFArrayRef *)type, v13);
          if (FigCFEqual()) {
            CFIndex v21 = 0;
          }
          else {
            CFIndex v21 = v20;
          }
          FigCFArrayGetInt64AtIndex();
          int ConnectionTypeForPort = vaeGetConnectionTypeForPort(0);
          int v23 = vaeCopyVADEndpointTypeForPort(0);
          *(void *)&long long v30 = v15;
          *((void *)&v30 + 1) = v21;
          __int16 v31 = v17;
          BOOL v32 = v23;
          int v33 = v19;
          int v34 = ConnectionTypeForPort;
          int v35 = 0;
          MXVW_VectorVARouteInfoPushBack(a2, &v30);
          if (v23) {
            CFRelease(v23);
          }
          ++v13;
        }
        while (v13 < *a3);
      }
      if (v29)
      {
        CFRelease(v29);
        CFArrayRef v29 = 0;
      }
    }
    else
    {
      *a3 = 0;
    }
    if (v26)
    {
      CFRelease(v26);
      CFArrayRef v26 = 0;
    }
    if (*(void *)type)
    {
      CFRelease(*(CFTypeRef *)type);
      *(void *)os_log_type_t type = 0;
    }
    if (v24) {
      CFRelease(v24);
    }
  }
}

CFDictionaryRef vaemGetPortsInfoFromRouteChangeDescription(const __CFDictionary *result, const void **a2, const void **a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, const __CFDictionary **a8, uint64_t a9)
{
  if (result)
  {
    CFDictionaryRef v16 = result;
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(result, @"active devices");
    if (Value)
    {
      vaemGetPortListForDevice(Value, a9, a2, a3);
      if (a3)
      {
        if (*a3)
        {
          CFIndex Count = CFArrayGetCount((CFArrayRef)*a3);
          if (Count >= 1)
          {
            CFIndex v19 = Count;
            CFIndex v20 = 0;
            while ((objc_msgSend((id)qword_1E9358B00, "containsObject:", CFArrayGetValueAtIndex((CFArrayRef)*a3, v20)) & 1) != 0)
            {
              if (v19 == ++v20) {
                goto LABEL_14;
              }
            }
            if (dword_1E9359ED0)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            vaemConnectedPortsPropertyListenerGuts();
          }
        }
      }
LABEL_14:
      FigCFDictionaryGetInt64IfPresent();
      if (a6) {
        *a6 = 0;
      }
      FigCFDictionaryGetInt64IfPresent();
      if (a4) {
        *a4 = 0;
      }
      FigCFDictionaryGetInt64IfPresent();
      if (a5) {
        *a5 = 0;
      }
      FigCFDictionaryGetInt64IfPresent();
      if (a7) {
        *a7 = 0;
      }
      uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(v16, @"siri input source UUID");
      if (a8)
      {
        if (result) {
          *a8 = result;
        }
      }
    }
    else
    {
      CFIndex v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      return (const __CFDictionary *)fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t CMSMUtility_CopyDeviceRouteAtIndexForInactiveRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3, CFIndex a4, void *a5, void *a6, void *a7)
{
  if (!a5 && !a6 && !a7) {
    return 4294954315;
  }
  CFArrayRef v20 = 0;
  CFArrayRef theArray = 0;
  CFArrayRef v19 = 0;
  CMSMUtility_CopyDeviceRoutesForInactiveRouteConfiguration(a1, a2, a3, &theArray, &v20, &v19);
  CFIndex Count = (CFIndex)theArray;
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  if (Count > a4)
  {
    if (a5)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      CFTypeRef v14 = CFRetain(ValueAtIndex);
      *a5 = v14;
      if (CFEqual(v14, &stru_1EE5E8D28)) {
        *a5 = 0;
      }
    }
    if (a6)
    {
      long long v15 = CFArrayGetValueAtIndex(v20, 0);
      CFTypeRef v16 = CFRetain(v15);
      *a6 = v16;
      if (CFEqual(v16, &stru_1EE5E8D28)) {
        *a6 = 0;
      }
    }
    if (a7)
    {
      CFArrayRef v17 = CFArrayGetValueAtIndex(v19, 0);
      CFTypeRef v18 = CFRetain(v17);
      *a7 = v18;
      if (CFEqual(v18, &stru_1EE5E8D28)) {
        *a7 = 0;
      }
    }
  }
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (v20)
  {
    CFRelease(v20);
    CFArrayRef v20 = 0;
  }
  if (v19) {
    CFRelease(v19);
  }
  return 0;
}

uint64_t CMSMUtility_CopyDeviceRoutesForInactiveRouteConfiguration(NSDictionary *a1, uint64_t a2, const void *a3, __CFArray **a4, __CFArray **a5, __CFArray **a6)
{
  int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(a1);
  int VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName(a2);
  CFArrayRef v13 = (const __CFArray *)vaemCopyVADInputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, 0);
  CFArrayRef v14 = (const __CFArray *)vaemCopyVADOutputPortsForRouteConfiguration(VADCategoryFromFigCategoryName, VADModeFromFigModeName, a3, 0);
  CMSMVAUtility_CopyRoutesInfoFromInputAndOutputPorts(v14, v13, a4, a5, 0, a6);
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  return 0;
}

void vautility_copyRoutesInfoFromPorts(const __CFArray *a1, __CFArray **a2, __CFArray **a3, __CFArray **a4)
{
  if (!a1) {
    return;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (!Count) {
    return;
  }
  uint64_t v9 = Count;
  long long v25 = a4;
  CFArrayRef v24 = a3;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  id v11 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v13 = CFArrayCreateMutable(v10, 0, v11);
  CFArrayRef v14 = CFArrayCreateMutable(v10, 0, v11);
  if (v9 < 2)
  {
    if (v9 != 1) {
      goto LABEL_24;
    }
LABEL_7:
    for (uint64_t i = 0; i != v9; ++i)
    {
      FigCFArrayGetInt64AtIndex();
      CFTypeRef v16 = (__CFString *)vaeCopyFigOutputDeviceNameFromVADPort(0);
      CFArrayRef v17 = (__CFString *)vaeCopyDeviceIdentifierFromVADPort(0);
      CFStringRef v18 = vaeCopyRouteSubtypeFromVADPort(0);
      if (v16) {
        CFArrayRef v19 = v16;
      }
      else {
        CFArrayRef v19 = &stru_1EE5E8D28;
      }
      CFArrayAppendValue(Mutable, v19);
      if (v17) {
        CFArrayRef v20 = v17;
      }
      else {
        CFArrayRef v20 = &stru_1EE5E8D28;
      }
      CFArrayAppendValue(v13, v20);
      if (v18) {
        CFIndex v21 = (__CFString *)v18;
      }
      else {
        CFIndex v21 = &stru_1EE5E8D28;
      }
      CFArrayAppendValue(v14, v21);
      if (v16) {
        CFRelease(v16);
      }
      if (v17) {
        CFRelease(v17);
      }
      if (v18) {
        CFRelease(v18);
      }
    }
    goto LABEL_24;
  }
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(a1)) {
    goto LABEL_7;
  }
  CFArrayAppendValue(Mutable, @"broadcast");
  CFArrayAppendValue(v13, &stru_1EE5E8D28);
  CFArrayAppendValue(v14, &stru_1EE5E8D28);
LABEL_24:
  if (a2)
  {
    *a2 = Mutable;
    int v23 = v24;
    CFIndex v22 = v25;
  }
  else
  {
    int v23 = v24;
    CFIndex v22 = v25;
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  if (v23)
  {
    *int v23 = v13;
  }
  else if (v13)
  {
    CFRelease(v13);
  }
  if (v22)
  {
    *CFIndex v22 = v14;
  }
  else if (v14)
  {
    CFRelease(v14);
  }
}

const void *vaemCopyVADInputPortsForRouteConfiguration(int a1, int a2, const void *a3, const void *a4)
{
  CFTypeRef v4 = vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(a1, a2, a3, a4, 1, 0x1EE5EBF48);
  id v5 = v4;
  if (v4)
  {
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 != CFArrayGetTypeID())
    {
      CFRelease(v5);
      return 0;
    }
  }
  return v5;
}

const void *vaemCopyVADOutputPortsForRouteConfiguration(int a1, int a2, const void *a3, const void *a4)
{
  CFTypeRef v4 = vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(a1, a2, a3, a4, 0, 0x1EE5EBF48);
  id v5 = v4;
  if (v4)
  {
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 != CFArrayGetTypeID())
    {
      CFRelease(v5);
      return 0;
    }
  }
  return v5;
}

CFTypeRef vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(int a1, int a2, const void *a3, const void *a4, int a5, uint64_t a6)
{
  if (a5 == 1) {
    AudioObjectPropertyScope v12 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v12 = 1869968496;
  }
  inAddress.AudioObjectPropertySelector mSelector = 1634759267;
  inAddress.mScope = v12;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  CFArrayRef outData = 0;
  RouteConfigurationDictionary = 0;
  if (!CMSMUtility_IsSharePlayCallSessionActive())
  {
    if (CMSMUtility_IsSharePlayMediaSessionActive()
      || (dword_1E9359B84 == a1 ? (BOOL v14 = dword_1E9359B88 == a2) : (BOOL v14 = 0),
          v14 && FigCFEqual() && FigCFEqual()))
    {
      RouteConfigurationDictionary = 0;
    }
    else
    {
      RouteConfigurationDictionary = CMSMVAUtility_CreateRouteConfigurationDictionary(a1, a2, a3, a4);
    }
  }
  OSStatus PropertyData = AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 8 * (RouteConfigurationDictionary != 0), RouteConfigurationDictionary, &ioDataSize, &outData);
  CFTypeRef cf = 0;
  CFArrayRef v16 = outData;
  if (PropertyData) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = outData == 0;
  }
  if (!v17)
  {
    CFTypeID v18 = CFGetTypeID(outData);
    if (v18 == CFArrayGetTypeID() && CFArrayGetCount(outData))
    {
      if (a5 == 1)
      {
        p_CFTypeRef cf = &cf;
        uint64_t v20 = a6;
        CFIndex v21 = 0;
      }
      else
      {
        CFIndex v21 = &cf;
        uint64_t v20 = a6;
        p_CFTypeRef cf = 0;
      }
      vaemGetPortListForDevice(outData, v20, p_cf, v21);
      if (cf) {
        CFRetain(cf);
      }
    }
    CFArrayRef v16 = outData;
  }
  if (v16)
  {
    CFRelease(v16);
    CFArrayRef outData = 0;
  }
  if (RouteConfigurationDictionary) {
    CFRelease(RouteConfigurationDictionary);
  }
  return cf;
}

uint64_t vaemGetPortListForDevice(const __CFArray *a1, uint64_t a2, const void **a3, const void **a4)
{
  if (CFArrayGetCount(a1) >= 1)
  {
    CFArrayRef v16 = a4;
    for (CFIndex i = 0; CFArrayGetCount(a1) > i; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
      if (ValueAtIndex)
      {
        CFDictionaryRef v9 = ValueAtIndex;
        CFTypeID v10 = CFGetTypeID(ValueAtIndex);
        if (v10 == CFDictionaryGetTypeID())
        {
          CFArrayRef Value = CFDictionaryGetValue(v9, @"device UID");
          CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v9, @"device type");
          if (FigCFEqual() || FigCFEqual() && FigCFEqual())
          {
            if (a3) {
              *a3 = CFDictionaryGetValue(v9, @"input ports");
            }
            if (v16)
            {
              long long v15 = CFDictionaryGetValue(v9, @"output ports");
              uint64_t result = 0;
              *CFArrayRef v16 = v15;
              return result;
            }
            return 0;
          }
          if (!Value && v12)
          {
            int VirtualAudioDeviceType = vaemGetVirtualAudioDeviceType([+[MXSessionManager sharedInstance] defaultVADID]);
            int valuePtr = 0;
            CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
            if (VirtualAudioDeviceType == valuePtr
              || (VirtualAudioDeviceType == 1987279219 || VirtualAudioDeviceType == 1987279212)
              && (valuePtr == 1987279219 || valuePtr == 1987279212))
            {
              if (a3) {
                *a3 = CFDictionaryGetValue(v9, @"input ports");
              }
              if (v16) {
                *CFArrayRef v16 = CFDictionaryGetValue(v9, @"output ports");
              }
              return 1;
            }
          }
        }
      }
    }
  }
  return 0;
}

void CMSMVAUtility_CopyRoutesInfoFromInputAndOutputPorts(const __CFArray *a1, CFArrayRef theArray, __CFArray **a3, __CFArray **a4, void *a5, __CFArray **a6)
{
  if (!theArray)
  {
    CFIndex Count = 0;
    if (a1) {
      goto LABEL_3;
    }
LABEL_5:
    CFIndex v13 = 0;
    goto LABEL_6;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (!a1) {
    goto LABEL_5;
  }
LABEL_3:
  CFIndex v13 = CFArrayGetCount(a1);
LABEL_6:
  if (v13 <= 0 && Count < 1) {
    return;
  }
  if (v13 && !Count)
  {
    CFArrayRef v14 = a1;
LABEL_15:
    vautility_copyRoutesInfoFromPorts(v14, a3, a4, a6);
    return;
  }
  if (!v13 && Count)
  {
    CFArrayRef v14 = theArray;
    goto LABEL_15;
  }
  if (v13 && Count)
  {
    vautility_copyRoutesInfoFromPorts(a1, a3, a4, a6);
    FigCFArrayGetInt64AtIndex();
    CFTypeRef v15 = vaeCopyDeviceIdentifierFromVADPort(0);
    if (a5) {
      *a5 = (id)[MEMORY[0x1E4F1C978] arrayWithObject:v15];
    }
    if (v15) {
      CFRelease(v15);
    }
    FigCFArrayGetInt64AtIndex();
    int PortTypeFromPortID = vaeGetPortTypeFromPortID(0);
    unsigned int v17 = vaeGetPortTypeFromPortID(0);
    id v18 = CMSMVAUtility_CopyFigIODeviceNameFromVADPortTypes(PortTypeFromPortID, v17);
    CFArrayRef v19 = v18;
    if (a3 && v18)
    {
      MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *a3);
      CFArraySetValueAtIndex(MutableCopy, 0, v19);
      if (*a3) {
        CFRelease(*a3);
      }
      *a3 = MutableCopy;
    }
    else if (!v18)
    {
      return;
    }
    CFRelease(v19);
  }
}

void MXVW_VectorVARouteInfoPushBack(void **a1, long long *a2)
{
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  CFTypeRef v4 = (const void *)*((void *)a2 + 1);
  if (v4) {
    CFRetain(v4);
  }
  id v5 = (const void *)*((void *)a2 + 2);
  if (v5) {
    CFRetain(v5);
  }
  CFTypeID v6 = (const void *)*((void *)a2 + 3);
  if (v6) {
    CFRetain(v6);
  }
  unint64_t v7 = (unint64_t)a1[2];
  CFArrayRef v8 = a1[1];
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (unsigned char *)*a1) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x555555555555555) {
      std::vector<CMSRouteInfo>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      CFArrayRef v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CMSRouteInfo>>((uint64_t)(a1 + 2), v15);
    }
    else {
      CFArrayRef v16 = 0;
    }
    unsigned int v17 = &v16[48 * v12];
    id v18 = &v16[48 * v15];
    long long v19 = *a2;
    long long v20 = a2[2];
    *((_OWORD *)v17 + 1) = a2[1];
    *((_OWORD *)v17 + 2) = v20;
    *(_OWORD *)unsigned int v17 = v19;
    id v11 = v17 + 48;
    CFIndex v22 = (char *)*a1;
    CFIndex v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        long long v23 = *((_OWORD *)v21 - 3);
        long long v24 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v17 - 1) = v24;
        *((_OWORD *)v17 - 3) = v23;
        v17 -= 48;
        v21 -= 48;
      }
      while (v21 != v22);
      CFIndex v21 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v11;
    a1[2] = v18;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    long long v9 = *a2;
    long long v10 = a2[2];
    v8[1] = a2[1];
    _OWORD v8[2] = v10;
    _OWORD *v8 = v9;
    id v11 = v8 + 3;
  }
  a1[1] = v11;
}

__CFString *cmsutility_GetRouteToPreferredRouteRequestReasonString(int a1)
{
  if ((a1 - 1) > 0xC) {
    return @"Not defined yet";
  }
  else {
    return off_1E57CAC70[a1 - 1];
  }
}

uint64_t CMSMVAUtility_IsAnyRouteBTManagedAndInEar()
{
  CFArrayRef v0 = CMSMVAUtility_CopyWirelessPortsSupportingMultipleConnections();
  if (!v0) {
    return 0;
  }
  CFArrayRef v1 = v0;
  CFIndex Count = CFArrayGetCount(v0);
  if (Count < 1)
  {
LABEL_7:
    uint64_t v7 = 0;
  }
  else
  {
    CFIndex v3 = Count;
    CFIndex v4 = 0;
    while (1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v1, v4);
      uint64_t valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      AudioObjectID v6 = valuePtr;
      if (MXBluetoothServices_IsPortBTManaged(valuePtr, 1))
      {
        if (CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(v6)) {
          break;
        }
      }
      if (v3 == ++v4) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = 1;
  }
  CFRelease(v1);
  return v7;
}

CFMutableArrayRef CMSMVAUtility_CopyWirelessPortsSupportingMultipleConnections()
{
  CFArrayRef v0 = CMSMVAUtility_CopyConnectedWirelessPorts();
  if (v0)
  {
    CFArrayRef v1 = v0;
    CFIndex Count = CFArrayGetCount(v0);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v1, i);
        uint64_t valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
        if (vaeDoesPortSupportMultipleConnections(valuePtr))
        {
          AudioObjectID v6 = CFArrayGetValueAtIndex(v1, i);
          CFArrayAppendValue(Mutable, v6);
        }
      }
    }
    CFRelease(v1);
    return Mutable;
  }
  else
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    long long v9 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    return CFArrayCreateMutable(v8, 0, v9);
  }
}

void vaemVADRouteChangeListener()
{
}

uint64_t MXVW_GetCMSRouteInfoPtrAt(void *a1, uint64_t a2)
{
  return *a1 + 48 * a2;
}

void vaemCopyVARoutesInfoAsCFArrays(void *a1, int a2, __CFArray **a3, __CFArray **a4, __CFArray **a5)
{
  if (a1 && a2)
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    id v11 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    unint64_t v13 = CFArrayCreateMutable(v10, 0, v11);
    unint64_t v14 = CFArrayCreateMutable(v10, 0, v11);
    uint64_t v15 = 0;
    do
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      MXVW_GetCMSRouteInfoAt(a1, v15, (uint64_t)&v19);
      if ((void)v19) {
        CFArrayRef v16 = (__CFString *)v19;
      }
      else {
        CFArrayRef v16 = &stru_1EE5E8D28;
      }
      CFArrayAppendValue(Mutable, v16);
      if ((void)v20) {
        unsigned int v17 = (__CFString *)v20;
      }
      else {
        unsigned int v17 = &stru_1EE5E8D28;
      }
      CFArrayAppendValue(v13, v17);
      if (*((void *)&v19 + 1)) {
        id v18 = (__CFString *)*((void *)&v19 + 1);
      }
      else {
        id v18 = &stru_1EE5E8D28;
      }
      CFArrayAppendValue(v14, v18);
      ++v15;
    }
    while (a2 != v15);
    if (a3) {
      *a3 = Mutable;
    }
    if (a4) {
      *a4 = v13;
    }
    if (v14) {
      *a5 = v14;
    }
  }
}

uint64_t MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled()
{
  if (MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled_onceToken, &__block_literal_global_120);
  }
  return MX_FeatureFlags_IsInterruptingPlayingSessionsInOnenessEnabled_sIsInterruptingPlayingSessionsInOnenessEnabled;
}

void MXVW_ReleaseVectorVARouteInfo(uint64_t *a1)
{
  MXVW_ClearVectorVARouteInfo(a1);
  if (a1)
  {
    CFArrayRef v2 = (void *)*a1;
    if (*a1)
    {
      a1[1] = (uint64_t)v2;
      operator delete(v2);
    }
    JUMPOUT(0x199717470);
  }
}

void MXVW_ClearVectorVARouteInfo(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (*(void *)v2) {
        CFRelease(*(CFTypeRef *)v2);
      }
      CFIndex v4 = *(const void **)(v2 + 8);
      if (v4) {
        CFRelease(v4);
      }
      id v5 = *(const void **)(v2 + 16);
      if (v5) {
        CFRelease(v5);
      }
      AudioObjectID v6 = *(const void **)(v2 + 24);
      if (v6) {
        CFRelease(v6);
      }
      v2 += 48;
    }
    while (v2 != v3);
    uint64_t v2 = *a1;
  }
  a1[1] = v2;
}

CFStringRef CMSMUtility_CreateDeviceRoutesString(CFArrayRef theArray, const __CFArray *a2, const __CFArray *a3)
{
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAllocatorRef v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFAllocatorRef v10 = CFArrayCreateMutable(v7, 0, v8);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CFArrayAppendValue(v10, ValueAtIndex);
      if (a2 && i < CFArrayGetCount(a2))
      {
        unint64_t v13 = CFArrayGetValueAtIndex(a2, i);
        CFArrayAppendValue(v10, v13);
      }
      if (a3 && i < CFArrayGetCount(a3))
      {
        unint64_t v14 = CFArrayGetValueAtIndex(a3, i);
        CFArrayAppendValue(v10, v14);
      }
      CFStringRef v15 = CFStringCreateByCombiningStrings(v7, v10, @"~");
      CFArrayAppendValue(Mutable, v15);
      if (v15) {
        CFRelease(v15);
      }
      CFArrayRemoveAllValues(v10);
    }
  }
  if (!Mutable || CFArrayGetCount(Mutable) <= 0)
  {
    CFStringRef v16 = 0;
    if (!v10) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  CFStringRef v16 = CFStringCreateByCombiningStrings(v7, Mutable, @", ");
  if (v10) {
LABEL_20:
  }
    CFRelease(v10);
LABEL_21:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v16;
}

void vaemVADAvailableSampleRatesListenerGuts_f()
{
  cmsmReassertPreferredSampleRate();
  [+[MXSessionManager sharedInstance] refreshDeviceSampleRateCache];
  CFArrayRef v0 = MXGetNotificationSenderQueue();
  MXDispatchAsyncFunction((uint64_t)"vaemVADAvailableSampleRatesListenerGuts_f", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5375, 0, 0, v0, 0, (uint64_t)CMSMNotificationUtility_PostAvailableSampleRatesDidChange_f);
}

uint64_t vaemUpdateThermalGainAdjustment()
{
  inAddress.mElement = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"#vedbolg";
  UInt32 outDataSize = 0;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(1u, &inAddress, 0, 0, &outDataSize);
  if (!PropertyDataSize)
  {
    if (outDataSize >= 4)
    {
      size_t v1 = (unint64_t)outDataSize >> 2;
      uint64_t v2 = (char *)malloc_type_calloc(v1, 4uLL, 0x100004052888210uLL);
      uint64_t PropertyDataSize = AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &outDataSize, v2);
      uint64_t v3 = 0;
      uint64_t v4 = 4 * v1;
      do
      {
        AudioObjectID v5 = *(_DWORD *)&v2[v3];
        *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F7574707473636CLL;
        inAddress.mElement = 0;
        if (AudioObjectHasProperty(v5, &inAddress))
        {
          *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6275696420;
          inAddress.mElement = 0;
          UInt32 ioDataSize = 8;
          CFTypeRef outData = 0;
          uint64_t PropertyDataSize = AudioObjectGetPropertyData(v5, &inAddress, 0, 0, &ioDataSize, &outData);
          if (!PropertyDataSize)
          {
            int v6 = FigCFEqual();
            CFAllocatorRef v7 = (float *)&qword_1E9358B98 + 1;
            if (!v6) {
              CFAllocatorRef v7 = (float *)&qword_1E9358B98;
            }
            if (*v7 <= 1.0)
            {
              *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F7574707473636CLL;
              inAddress.mElement = 0;
              uint64_t PropertyDataSize = CMSMVAUtility_AudioObjectSetPropertyData();
            }
            else
            {
              uint64_t PropertyDataSize = 0;
            }
          }
          if (outData) {
            CFRelease(outData);
          }
        }
        v3 += 4;
      }
      while (v4 != v3);
      free(v2);
    }
    else
    {
      return 0;
    }
  }
  return PropertyDataSize;
}

uint64_t vaemAddVADVolumeRampStatusChangeListener(AudioObjectID a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = MX_FeatureFlags_IsAdaptiveVolumeControlEnabled();
  if (result)
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"spmrptuo";
    inAddress.mElement = 0;
    uint64_t result = AudioObjectAddPropertyListener(a1, &inAddress, (AudioObjectPropertyListenerProc)vaemVADVolumeRampStatusChangeListener, 0);
    int v3 = result;
    int v7 = result;
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v3)
    {
      AudioObjectID v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void cmsmReassertPreferredSampleRate()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
  {
    cmsmUpdateDeviceAudioFormatConfigIfNeeded(1);
  }
  else
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    CFArrayRef v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v17 objects:v21 count:16];
    id v2 = 0;
    int ShouldSessionSetInputSampleRate = 0;
    int v4 = 0;
    if (v1)
    {
      uint64_t v5 = *(void *)v18;
      while (2)
      {
        for (uint64_t i = 0; i != v1; ++i)
        {
          if (*(void *)v18 != v5) {
            objc_enumerationMutation(v0);
          }
          int v7 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          if (([v7 currentlyControllingFlags] & 2) != 0)
          {

            id v2 = v7;
            int ShouldSessionSetInputSampleRate = CMSUtility_ShouldSessionSetInputSampleRate(v7);
            AudioObjectID CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(v7);
            BOOL IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)[v7 audioCategory]);
            [v7 preferredHardwareFormat];
            if (vaemIsNotCurrentDeviceFormat(CurrentOutputVADID, IsCategoryInputOnly))
            {
              uint64_t v1 = CMSUtility_GetCurrentOutputVADID(v7);
              unint64_t v12 = (const void *)[v7 preferredHardwareFormat];
              if (v12)
              {
                CFTypeRef v10 = CFRetain(v12);
                char v11 = 0;
              }
              else
              {
                char v11 = 0;
                CFTypeRef v10 = 0;
              }
              int v4 = 1;
              goto LABEL_20;
            }
            int v4 = 1;
          }
        }
        uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v1) {
          continue;
        }
        break;
      }
    }
    CFTypeRef v10 = 0;
    char v11 = 1;
LABEL_20:
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    if ((v11 & 1) == 0) {
      vaemSetDeviceFormat(v1, v10, 0);
    }
    if (v4)
    {
      if (ShouldSessionSetInputSampleRate) {
        [v2 preferredInputSampleRate];
      }
      else {
        [v2 preferredOutputSampleRate];
      }
      double v14 = v13;
      uint64_t v15 = [v2 preferredIOBufferFrames];
      [v2 preferredIOBufferDuration];
      cmsSetDeviceSampleRateAndBufferSize(v2, v15, ShouldSessionSetInputSampleRate != 0, v14, v16);
    }

    if (v10) {
      CFRelease(v10);
    }
  }
}

__CFString *CMSMVAUtility_MapVADRouteChangeReasonToString(int a1)
{
  if (a1 > 1919842147)
  {
    if (a1 <= 1919971426)
    {
      if (a1 > 1919907441)
      {
        if (a1 == 1919907442) {
          return @"Override";
        }
        if (a1 == 1919970403) {
          return @"CategoryChange";
        }
      }
      else
      {
        if (a1 == 1919842148) {
          return @"NewPortConnected";
        }
        if (a1 == 1919904885) {
          return @"OldPortDisconnected";
        }
      }
    }
    else if (a1 <= 1920099683)
    {
      if (a1 == 1919971427) {
        return @"PortPropertiesChanged";
      }
      if (a1 == 1919971701) {
        return @"OldPortQuiesced";
      }
    }
    else
    {
      switch(a1)
      {
        case 1920099684:
          return @"RedundantRouteChange";
        case 1920168053:
          return @"SharedPortDisconnected";
        case 1920429155:
          return @"WirelessLatencyChanged";
      }
    }
  }
  else if (a1 <= 1919118965)
  {
    if (a1 > 1919050610)
    {
      if (a1 == 1919050611) {
        return @"BroadcastUpdate";
      }
      if (a1 == 1919050851) {
        return @"BeamDirectionChanged";
      }
    }
    else
    {
      if (!a1) {
        return @"Unknown";
      }
      if (a1 == 1918989155) {
        return @"AudioSessionInfoChanged";
      }
    }
  }
  else if (a1 <= 1919184753)
  {
    if (a1 == 1919118966) {
      return @"CategoryNoLongerRoutable";
    }
    if (a1 == 1919181936) {
      return @"DefaultDevicesPersisted";
    }
  }
  else
  {
    switch(a1)
    {
      case 1919184754:
        return @"DeviceOwnershipRelinquished";
      case 1919185776:
        return @"AudioProcessingSettingsChange";
      case 1919186544:
        return @"DevicesPersisted";
    }
  }
  return 0;
}

void CMSMUtility_UpdateSharePlayVolumeBehaviours()
{
  if (MX_FeatureFlags_IsSharePlayEnabled())
  {
    CFArrayRef v0 = MXGetSerialQueue();
    MXDispatchAsync((uint64_t)"CMSMUtility_UpdateSharePlayVolumeBehaviours", (uint64_t)"CMSessionManager_Utilities.m", 6346, 0, 0, v0, (uint64_t)&__block_literal_global_413);
  }
}

uint64_t CMSMNotificationUtility_PostSpeechDetectionDevicePresentDidChange(uint64_t result)
{
  if (CMSMNotificationUtility_PostSpeechDetectionDevicePresentDidChange_cachedSpeechDetectionDevicePresent != result)
  {
    char v1 = result;
    uint64_t result = +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", @"SpeechDetectionDevicePresentDidChange", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", result != 0), @"Present", 0), 0);
    CMSMNotificationUtility_PostSpeechDetectionDevicePresentDidChange_cachedSpeechDetectionDevicePresent = v1;
  }
  return result;
}

uint64_t CMSMNotificationUtility_PostAvailableVirtualAudioDevicesDidChange(void *a1)
{
  uint64_t result = [a1 isEqualToArray:CMSMNotificationUtility_PostAvailableVirtualAudioDevicesDidChange_mostRecentAvailableVADUIDs];
  if ((result & 1) == 0)
  {
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", @"AvailableVirtualAudioDevicesDidChange", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", a1, @"AvailableVADUIDs", 0), 0);

    uint64_t result = a1;
    CMSMNotificationUtility_PostAvailableVirtualAudioDevicesDidChange_mostRecentAvailableVADUIDs = result;
  }
  return result;
}

uint64_t CMSMNotificationUtility_PostRecordingStateDidChange(int a1, uint64_t a2, uint64_t a3)
{
  RecordingSessionsDescriptiouint64_t n = CMSMNotificationUtility_CreateRecordingSessionsDescription();
  int v7 = (void *)MEMORY[0x1E4F1C9E8];
  uint64_t v8 = [MEMORY[0x1E4F28ED0] numberWithBool:a1 != 0];
  uint64_t v9 = objc_msgSend(v7, "dictionaryWithObjectsAndKeys:", v8, @"RecordingState", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", a2), @"ClientPID", a3, @"ClientPIDs", RecordingSessionsDescription, @"Sessions", 0);

  return +[MXSystemController notifyAll:@"RecordingStateDidChange" payload:v9 dontPostIfSuspended:0];
}

void routingSessionManager_availableAudioRoutesChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef v4 = routingSessionManager_copyEligibleInEarHeadphones(*(void *)(DerivedStorage + 8));
  uint64_t v5 = (void *)[MEMORY[0x1E4F1CAD0] setWithArray:v4];
  if ((objc_msgSend(v5, "isEqualToSet:", objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithArray:", *(void *)(DerivedStorage + 112))) & 1) == 0)
  {
    int v6 = *(const void **)(DerivedStorage + 112);
    *(void *)(DerivedStorage + 112) = v4;
    if (v4) {
      CFRetain(v4);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (dword_1E9359DE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    routingSessionManager_updateSessionFromLatestInEarHeadphones(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
}

CFMutableArrayRef routingSessionManager_copyEligibleInEarHeadphones(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  Boolean keyExistsAndHasValidFormat = 0;
  CFPreferencesGetAppBooleanValue(@"RequireSmartRoutingToSuppressRoutePredictionsWithInEarHeadphones", @"com.apple.coremedia", &keyExistsAndHasValidFormat);
  CFArrayRef theArray = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v5 + 48);
  if (v6 && !v6(a1, @"availableRouteDescriptors", v2, &theArray))
  {
    for (CFIndex i = 0; ; ++i)
    {
      CFIndex Count = (CFIndex)theArray;
      if (theArray) {
        CFIndex Count = CFArrayGetCount(theArray);
      }
      if (i >= Count) {
        break;
      }
      CFArrayGetValueAtIndex(theArray, i);
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return Mutable;
}

id cmsCopyOverrideRoute(id result)
{
  if (result)
  {
    char v1 = result;
    uint64_t v2 = objc_msgSend((id)objc_msgSend(result, "overridePortsList"), "count");
    if (v2 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v3 = v2;
      CFIndex v4 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)[v1 overridePortsList], v4);
        unsigned int valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (!vaeIsPortAnInputPort(valuePtr)) {
          break;
        }
        if (v3 == ++v4) {
          return 0;
        }
      }
      unsigned int PortTypeFromPortID = vaeGetPortTypeFromPortID(valuePtr);
      return CMSMVAUtility_CopyFigOutputDeviceNameFromVADPortType(PortTypeFromPortID);
    }
  }
  return result;
}

uint64_t cmsSetCategoryOnPVMAndAudioDevice(void *a1, char a2, int a3)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  MEMORY[0x199716E90](gCMSM);
  uint64_t v6 = [a1 audioCategory];
  int v7 = (__CFString *)[a1 audioMode];
  int v78 = CMSUtility_CopyDeviceHintsForSession(a1);
  PVMSetEnabled(1);
  if (v6) {
    uint64_t v8 = (NSDictionary *)v6;
  }
  else {
    uint64_t v8 = (NSDictionary *)@"Audio/Video";
  }
  if (!v7) {
    int v7 = @"Default";
  }
  char v9 = dword_1E9359C14;
  char v77 = a2;
  if (![+[MXSessionManager sharedInstance] carPlayIsConnected])
  {
    AudioObjectID v11 = 0;
LABEL_15:
    BOOL v13 = 0;
    char v58 = v9 & 1;
    BOOL v14 = 1;
    goto LABEL_16;
  }
  uint64_t CurrentConnectedPortToRoute = cmsmGetCurrentConnectedPortToRoute(0);
  AudioObjectID v11 = CurrentConnectedPortToRoute;
  if (vaeGetPortTypeFromPortID(CurrentConnectedPortToRoute) != 1886614639
    || ![a1 tookControlOfStarkMainAudio]
    || byte_1E9359C78
    || !vaeDoesPortSupportRoutability(v11))
  {
    goto LABEL_15;
  }
  int IsPortRoutable = vaeIsPortRoutable(v11);
  BOOL v13 = IsPortRoutable == 0;
  BOOL v14 = IsPortRoutable != 0;
  if (IsPortRoutable || (v9 & 1) != 0)
  {
    char v58 = v9 & 1;
  }
  else
  {
    [a1 setOverridePortsList:0];
    char v58 = 0;
    BOOL v14 = 0;
    BOOL v13 = 1;
  }
LABEL_16:
  unsigned int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v8);
  AudioObjectID VADModeFromFigModeName = CMSMVAUtility_GetVADModeFromFigModeName((uint64_t)v7);
  [+[MXSessionManager sharedInstance] setCurrentAudioCategory:v8];
  [+[MXSessionManager sharedInstance] setCurrentAudioMode:v7];
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (![a1 addSharedAudioRouteToRoutablePorts]) {
    goto LABEL_43;
  }
  BOOL v69 = v14;
  BOOL v71 = v13;
  AudioObjectID v73 = v11;
  long long v17 = CMSMUtility_CopyCurrentOutputPorts();
  long long v18 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E4F1D510]);
  if (v17)
  {
    CFIndex Count = CFArrayGetCount(v17);
    if (Count >= 1)
    {
      CFIndex v20 = Count;
      for (CFIndex i = 0; i != v20; ++i)
      {
        uint64_t PortAtIndex = CMSMVAUtility_GetPortAtIndex(v17, i);
        AudioObjectID v23 = PortAtIndex;
        if (vaeDoesPortSupportMultipleConnections(PortAtIndex)
          && vaeDoesPortSupportRoutability(v23)
          && !vaeIsPortRoutable(v23))
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v17, i);
          CFArrayAppendValue(v18, ValueAtIndex);
        }
      }
    }
  }
  Routable = cmsmCopyPartnerPortsToMakeRoutable(v18);
  CFArrayRef v26 = Routable;
  if (Routable && CFArrayGetCount(Routable) > 0)
  {
    v122.length = CFArrayGetCount(v26);
    v122.id location = 0;
    CFArrayAppendArray(Mutable, v26, v122);
  }
  else
  {
    CFArrayRef v27 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
    if (v27)
    {
      CFArrayRef v28 = v27;
      int v67 = a3;
      CFIndex v29 = CFArrayGetCount(v27);
      if (v29 >= 1)
      {
        CFIndex v30 = v29;
        for (CFIndex j = 0; j != v30; ++j)
        {
          AudioObjectID v32 = CMSMVAUtility_GetPortAtIndex(v28, j);
          if (vaeDoesPortSupportRoutability(v32) && !vaeIsPortRoutable(v32))
          {
            int v33 = CFArrayGetValueAtIndex(v28, j);
            CFArrayAppendValue(Mutable, v33);
          }
        }
      }
      CFRelease(v28);
      a3 = v67;
    }
    if (!v26) {
      goto LABEL_38;
    }
  }
  CFRelease(v26);
LABEL_38:
  BOOL v13 = v71;
  if (v18) {
    CFRelease(v18);
  }
  AudioObjectID v11 = v73;
  if (v17) {
    CFRelease(v17);
  }
  [a1 setAddSharedAudioRouteToRoutablePorts:0];
  BOOL v14 = v69;
LABEL_43:
  uint64_t v119 = 0;
  long long v118 = 0uLL;
  v117[0] = 0;
  *(_DWORD *)((char *)v117 + 3) = 0;
  v116[0] = 0;
  *(_DWORD *)((char *)v116 + 3) = 0;
  int v114 = 0;
  __int16 v115 = 0;
  uint64_t v74 = [a1 activationContext];
  uint64_t v72 = [a1 cameraParameters];
  uint64_t v68 = [a1 vpBlockConfiguration];
  uint64_t v70 = [a1 subPortPreferences];
  char v64 = [a1 willSetScreenDarkModeOnVAD];
  char v66 = [a1 createSpeakerDevice];
  uint64_t v65 = [a1 excludedPortsList];
  char v63 = [a1 ignoreRingerSwitch];
  char v61 = [a1 preferredDecoupledInputOutput];
  uint64_t v60 = [a1 allowedPortTypes];
  uint64_t v59 = [a1 reporterIDs];
  uint64_t v34 = [a1 overridePortsList];
  unsigned int v62 = v34 != 0;
  if (v34)
  {
    uint64_t v35 = CFArrayGetCount((CFArrayRef)[a1 overridePortsList]);
    if (v35)
    {
      for (CFIndex k = 0; k != v35; ++k)
      {
        valuePtr[0] = 0;
        CFNumberRef v37 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)[a1 overridePortsList], k);
        CFNumberGetValue(v37, kCFNumberSInt32Type, valuePtr);
        if (vaeDoesPortSupportRoutability(valuePtr[0]) && !vaeIsPortRoutable(valuePtr[0])) {
          CFArrayAppendValue(Mutable, v37);
        }
      }
    }
    if (v13) {
      char v38 = v58;
    }
    else {
      char v38 = 0;
    }
    if (v38)
    {
      valuePtr[0] = v11;
      CFNumberRef v39 = CFNumberCreate(v15, kCFNumberSInt32Type, valuePtr);
      CFArrayAppendValue(Mutable, v39);
      if (v39) {
        CFRelease(v39);
      }
    }
    uint64_t v40 = [a1 overridePortsList];
  }
  else
  {
    if (!v14)
    {
      CFNumberRef v41 = MXCFNumberCreateFromSInt64(v11);
      CFArrayAppendValue(Mutable, v41);
      if (v41) {
        CFRelease(v41);
      }
    }
    uint64_t v40 = 0;
  }
  if ([a1 preferredPersistentRoute])
  {
    id v42 = cmsmCopyQuiesceableWiredPortsForRouteConfiguration((NSDictionary *)[a1 audioCategory], objc_msgSend(a1, "audioMode"), (const void *)objc_msgSend(a1, "allowedPortTypes"));
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    uint64_t v43 = [v42 countByEnumeratingWithState:&v110 objects:v120 count:16];
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = *(void *)v111;
      do
      {
        for (uint64_t m = 0; m != v44; ++m)
        {
          if (*(void *)v111 != v45) {
            objc_enumerationMutation(v42);
          }
          BOOL v47 = *(void **)(*((void *)&v110 + 1) + 8 * m);
          AudioObjectID v48 = [v47 unsignedIntValue];
          if (vaeDoesPortSupportRoutability(v48) && !vaeIsPortRoutable(v48)) {
            CFArrayAppendValue(Mutable, v47);
          }
        }
        uint64_t v44 = [v42 countByEnumeratingWithState:&v110 objects:v120 count:16];
      }
      while (v44);
    }

    uint64_t v49 = [a1 preferredPersistentRoute];
  }
  else
  {
    uint64_t v49 = 0;
  }
  if (!CFArrayGetCount(Mutable) && Mutable)
  {
    CFRelease(Mutable);
    CFMutableArrayRef Mutable = 0;
  }
  if (!MX_FeatureFlags_IsSharePlayEnabled()
    || ([a1 isSharePlayMediaSession] & 1) == 0
    && ![a1 isSharePlayCallSession])
  {
    BOOL v50 = 0;
    goto LABEL_83;
  }
  BOOL v50 = ([a1 isSharePlayCallSession] & 1) != 0
     || CMSMUtility_IsSharePlayCallSessionActive() != 0;
  if ([a1 isSharePlayMediaSession])
  {
    int v51 = CMSMVAUtility_GetVADModeFromFigModeName([a1 audioMode]);
    goto LABEL_87;
  }
  if (!a3 || (SharePlayCapableActiveMediaSessiouint64_t n = CMSMUtility_GetSharePlayCapableActiveMediaSession()) == 0)
  {
LABEL_83:
    int v51 = 0;
LABEL_87:
    uint64_t v52 = 0;
    goto LABEL_88;
  }
  uint64_t v57 = SharePlayCapableActiveMediaSession;
  int v51 = CMSMVAUtility_GetVADModeFromFigModeName([SharePlayCapableActiveMediaSession audioMode]);
  uint64_t v52 = [v57 aggregateDeviceClockUID];
LABEL_88:
  if ([a1 aggregateDeviceClockUID]) {
    uint64_t v52 = [a1 aggregateDeviceClockUID];
  }
  if (MX_FeatureFlags_IsOverdubRecordingEnabled()) {
    AudioObjectID v53 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E4F28ED0]), "initWithUnsignedInt:", objc_msgSend(a1, "prefersEchoCancelledInput"));
  }
  else {
    AudioObjectID v53 = 0;
  }
  if (CMSMVAUtility_IsAdditiveRoutingEnabled()) {
    id v54 = [+[MXAdditiveRoutingManager sharedInstance] copyActiveSessionsInfo];
  }
  else {
    id v54 = 0;
  }
  valuePtr[0] = VADCategoryFromFigCategoryName;
  valuePtr[1] = VADModeFromFigModeName;
  uint64_t v80 = 0;
  uint64_t v81 = v74;
  uint64_t v82 = v72;
  uint64_t v83 = v68;
  uint64_t v84 = v40;
  long long v85 = Mutable;
  long long v86 = v118;
  uint64_t v87 = v119;
  uint64_t v88 = v70;
  char v89 = v64;
  *(_DWORD *)uint64_t v90 = v117[0];
  *(_DWORD *)&v90[3] = *(_DWORD *)((char *)v117 + 3);
  uint64_t v91 = v78;
  char v92 = v66;
  *(_DWORD *)id v93 = v116[0];
  *(_DWORD *)&v93[3] = *(_DWORD *)((char *)v116 + 3);
  uint64_t v94 = v65;
  char v95 = v63;
  char v96 = v61;
  int v97 = v114;
  __int16 v98 = v115;
  uint64_t v99 = v60;
  uint64_t v100 = v59;
  char v101 = v77;
  BOOL v102 = v50;
  __int16 v103 = 0;
  int v104 = v51;
  uint64_t v105 = v52;
  uint64_t v106 = 0;
  id v107 = v54;
  uint64_t v108 = v49;
  AudioObjectID v109 = v53;
  cmsmSetVADRouteConfiguration((uint64_t)valuePtr, v62, qword_1E9359C88);
  [a1 setWillSetScreenDarkModeOnVAD:0];
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v78) {
    CFRelease(v78);
  }
  if (MX_FeatureFlags_IsOverdubRecordingEnabled() && v53) {
    CFRelease(v53);
  }
  if (CMSMVAUtility_IsAdditiveRoutingEnabled() && v54) {
    CFRelease(v54);
  }
  return MEMORY[0x199716EA0](gCMSM);
}

uint64_t cmsmSetVADRouteConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1E9359ED0)
    {
      uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (MX_FeatureFlags_IsOverdubRecordingEnabled() && dword_1E9359ED0)
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CMSMVAUtility_IsAdditiveRoutingEnabled() && dword_1E9359ED0)
  {
    int v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x199716E90](gCMSM);
  int v8 = *(_DWORD *)a1;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  char v95 = (int *)(a1 + 148);
  if (*(_DWORD *)a1 && v8 != dword_1E9359B84)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  int v15 = *(_DWORD *)(a1 + 4);
  if (v15 && v15 != dword_1E9359B88)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  uint64_t v91 = *(void *)(a1 + 72);
  int v89 = *(unsigned __int8 *)(a1 + 104);
  int v90 = *(unsigned __int8 *)(a1 + 88);
  int v88 = *(unsigned __int8 *)(a1 + 120);
  int v86 = *(unsigned __int8 *)(a1 + 145);
  int v87 = *(unsigned __int8 *)(a1 + 121);
  int v84 = *(unsigned __int8 *)(a1 + 160);
  int v85 = *(_DWORD *)(a1 + 148);
  if (!FigCFEqual())
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (!FigCFEqual())
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (!FigCFEqual())
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (!FigCFEqual())
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (!FigCFEqual())
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (!FigCFEqual())
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (v9)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (v10)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (v11)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0) {
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (v91)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (dword_1E9359ED0)
    {
LABEL_47:
      float v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_48:
    if (*(_DWORD *)a1)
    {
      CFNumberRef v17 = CFNumberCreate(v14, kCFNumberSInt32Type, (const void *)a1);
      if (v17)
      {
        CFNumberRef v18 = v17;
        CFDictionarySetValue(v12, @"category", v17);
        CFRelease(v18);
      }
    }
    long long v19 = (int *)(a1 + 4);
    if (!*(_DWORD *)(a1 + 4))
    {
      if (!*(_DWORD *)a1) {
        goto LABEL_56;
      }
      *long long v19 = 1768776806;
    }
    CFNumberRef v20 = CFNumberCreate(v14, kCFNumberSInt32Type, (const void *)(a1 + 4));
    if (v20)
    {
      CFNumberRef v21 = v20;
      CFDictionarySetValue(v12, @"mode", v20);
      CFRelease(v21);
    }
LABEL_56:
    uint64_t v22 = *(const void **)(a1 + 16);
    if (v22) {
      CFDictionarySetValue(v12, @"initiation context", v22);
    }
    AudioObjectID v23 = *(const void **)(a1 + 32);
    if (v23)
    {
      CFDictionarySetValue(v12, @"voice processing configuration", v23);
    }
    else if (*(_DWORD *)a1)
    {
      CFDictionaryRef v40 = CFDictionaryCreate(v14, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v12, @"voice processing configuration", v40);
      if (v40) {
        CFRelease(v40);
      }
    }
    long long v24 = *(const void **)(a1 + 40);
    if (v24) {
      CFDictionarySetValue(v12, @"overridden ports", v24);
    }
    long long v25 = *(const void **)(a1 + 80);
    if (v25)
    {
      CFDictionarySetValue(v12, @"sub-port preferences", v25);
    }
    else if (*(_DWORD *)a1)
    {
      CFArrayRef v41 = CFArrayCreate(0, 0, 0, 0);
      CFDictionarySetValue(v12, @"sub-port preferences", v41);
      if (v41) {
        CFRelease(v41);
      }
    }
    CFArrayRef v26 = *(const void **)(a1 + 64);
    if (v26) {
      CFDictionarySetValue(v12, @"aggregated ports", v26);
    }
    CFArrayRef v27 = *(const void **)(a1 + 72);
    if (v27) {
      CFDictionarySetValue(v12, @"deaggregated ports", v27);
    }
    CFArrayRef v28 = *(const void **)(a1 + 48);
    if (v28) {
      CFDictionarySetValue(v12, @"routable ports", v28);
    }
    CFIndex v29 = *(const void **)(a1 + 136);
    if (v29) {
      CFDictionarySetValue(v12, @"reporter IDs", v29);
    }
    CFIndex v30 = *(const void **)(a1 + 56);
    if (v30) {
      CFDictionarySetValue(v12, @"unroutable ports", v30);
    }
    __int16 v31 = (const void **)MEMORY[0x1E4F1CFD0];
    if (*(unsigned char *)(a1 + 88)) {
      CFDictionarySetValue(v12, @"screen dark policy enabled", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    AudioObjectID v32 = *(const void **)(a1 + 96);
    if (v32) {
      CFDictionarySetValue(v12, @"device hints", v32);
    }
    int v33 = (const void **)MEMORY[0x1E4F1CFC8];
    if (byte_1E9358B40 | *(unsigned char *)(a1 + 104))
    {
      if (*(unsigned char *)(a1 + 104)) {
        uint64_t v34 = v31;
      }
      else {
        uint64_t v34 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v12, @"create speaker vad", *v34);
    }
    if (*(_DWORD *)a1 && byte_1E9358B42 | *(unsigned char *)(a1 + 121))
    {
      if (*(unsigned char *)(a1 + 121)) {
        uint64_t v35 = v31;
      }
      else {
        uint64_t v35 = v33;
      }
      CFDictionarySetValue(v12, @"decoupled input/output", *v35);
    }
    if (byte_1E9358B41 | *(unsigned char *)(a1 + 120))
    {
      if (*(unsigned char *)(a1 + 120)) {
        uint64_t v36 = v31;
      }
      else {
        uint64_t v36 = v33;
      }
      CFDictionarySetValue(v12, @"ignore ringer switch", *v36);
    }
    CFNumberRef v37 = *(const void **)(a1 + 112);
    if (v37) {
      CFDictionarySetValue(v12, @"disallowed ports", v37);
    }
    char v38 = *(const void **)(a1 + 128);
    if (v38) {
      CFDictionarySetValue(v12, @"allowed port types", v38);
    }
    CFNumberRef v39 = *(const void **)(a1 + 24);
    if (v39) {
      CFDictionarySetValue(v12, @"camera parameters", v39);
    }
    if (*(unsigned char *)(a1 + 145) || *(_DWORD *)a1)
    {
      UInt32 = (const void *)FigCFNumberCreateUInt32();
      CFDictionarySetValue(v12, @"expanse session", UInt32);
      if (UInt32) {
        CFRelease(UInt32);
      }
    }
    if (*v13)
    {
      CFNumberRef v43 = CFNumberCreate(v14, kCFNumberSInt32Type, v13);
      CFDictionarySetValue(v12, @"optional output mode", v43);
      if (v43) {
        CFRelease(v43);
      }
    }
    uint64_t v44 = *(const void **)(a1 + 152);
    if (v44) {
      CFDictionarySetValue(v12, @"aggregate device clock device", v44);
    }
    if (*(unsigned char *)(a1 + 160))
    {
      uint64_t v45 = (const void *)FigCFNumberCreateUInt32();
      CFDictionarySetValue(v12, @"route to builtinspeaker", v45);
      if (v45) {
        CFRelease(v45);
      }
    }
    if (*(_DWORD *)a1) {
      dword_1E9359B84 = *(_DWORD *)a1;
    }
    CFArrayRef v46 = *(void **)(a1 + 176);
    if (v46)
    {
      id v47 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      uint64_t v48 = [v46 objectForKey:@"InputPortUIDs"];
      uint64_t v49 = [v46 objectForKey:@"OutputPortUIDs"];
      if (v48) {
        [v47 setObject:v48 forKey:0x1EE5EF5C8];
      }
      if (v49) {
        [v47 setObject:v49 forKey:0x1EE5EF5E8];
      }
      CFDictionarySetValue(v12, @"persistent route", v47);
    }
    if (MX_FeatureFlags_IsOverdubRecordingEnabled())
    {
      BOOL v50 = *(const void **)(a1 + 184);
      if (v50) {
        CFDictionarySetValue(v12, @"echo cancelled input", v50);
      }
    }
    if (CMSMVAUtility_IsAdditiveRoutingEnabled())
    {
      int v51 = *(const void **)(a1 + 168);
      if (v51)
      {
        CFDictionarySetValue(v12, @"session routing information", v51);
        if (dword_1E9359ED0)
        {
          uint64_t v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    int v97 = 0;
    uint64_t v53 = vaemSetRouteConfigurationDictionaryOnVAD((uint64_t)v12, a2, a3, &v97);
    if (v53) {
      goto LABEL_207;
    }
    if (*(_DWORD *)a1)
    {
      dword_1E9359B84 = *(_DWORD *)a1;
      if ((void)xmmword_1E9358B18)
      {
        CFRelease((CFTypeRef)xmmword_1E9358B18);
        *(void *)&xmmword_1E9358B18 = 0;
      }
      if (qword_1E9358B10)
      {
        CFRelease((CFTypeRef)qword_1E9358B10);
        qword_1E9358B10 = 0;
      }
      if (qword_1E9358B08)
      {
        CFRelease((CFTypeRef)qword_1E9358B08);
        qword_1E9358B08 = 0;
      }
      if (qword_1E9358B30)
      {
        CFRelease((CFTypeRef)qword_1E9358B30);
        qword_1E9358B30 = 0;
      }
      if (qword_1E9358B38)
      {
        CFRelease((CFTypeRef)qword_1E9358B38);
        qword_1E9358B38 = 0;
      }
      if (qword_1E9358B48)
      {
        CFRelease((CFTypeRef)qword_1E9358B48);
        qword_1E9358B48 = 0;
      }
      if (qword_1E9358B50)
      {
        CFRelease((CFTypeRef)qword_1E9358B50);
        qword_1E9358B50 = 0;
      }
      if (qword_1E9359B90)
      {
        CFRelease((CFTypeRef)qword_1E9359B90);
        qword_1E9359B90 = 0;
      }
      if (*((void *)&xmmword_1E9358B18 + 1))
      {
        CFRelease(*((CFTypeRef *)&xmmword_1E9358B18 + 1));
        *((void *)&xmmword_1E9358B18 + 1) = 0;
      }
      byte_1E9358B40 = *(unsigned char *)(a1 + 104);
      *(_WORD *)&byte_1E9358B41 = *(_WORD *)(a1 + 120);
      byte_1E9358BB0 = *(unsigned char *)(a1 + 145);
      dword_1E9358BC0 = *(_DWORD *)(a1 + 148);
      if (qword_1E9358BB8)
      {
        CFRelease((CFTypeRef)qword_1E9358BB8);
        qword_1E9358BB8 = 0;
      }
    }
    id v54 = *(const void **)(a1 + 40);
    if (v54)
    {
      uint64_t v55 = (const void *)qword_1E9358B10;
      qword_1E9358B10 = *(void *)(a1 + 40);
      CFRetain(v54);
      if (v55) {
        CFRelease(v55);
      }
    }
    if (*v19)
    {
      dword_1E9359B88 = *v19;
      if (qword_1E9358B08)
      {
        CFRelease((CFTypeRef)qword_1E9358B08);
        qword_1E9358B08 = 0;
      }
      if (qword_1E9358B50)
      {
        CFRelease((CFTypeRef)qword_1E9358B50);
        qword_1E9358B50 = 0;
      }
    }
    CFArrayRef v56 = *(const __CFArray **)(a1 + 80);
    if (v56)
    {
      if ((void)xmmword_1E9358B18)
      {
        CFRelease((CFTypeRef)xmmword_1E9358B18);
        *(void *)&xmmword_1E9358B18 = 0;
        CFArrayRef v56 = *(const __CFArray **)(a1 + 80);
      }
      *(void *)&xmmword_1E9358B18 = CFArrayCreateCopy(allocator, v56);
    }
    uint64_t v57 = *(const void **)(a1 + 16);
    if (v57)
    {
      char v58 = (const void *)qword_1E9358B08;
      qword_1E9358B08 = *(void *)(a1 + 16);
      CFRetain(v57);
      if (v58) {
        CFRelease(v58);
      }
    }
    uint64_t v59 = *(const void **)(a1 + 96);
    if (v59)
    {
      uint64_t v60 = (const void *)qword_1E9358B30;
      qword_1E9358B30 = *(void *)(a1 + 96);
      CFRetain(v59);
      if (v60) {
        CFRelease(v60);
      }
    }
    char v61 = *(const void **)(a1 + 32);
    if (v61)
    {
      unsigned int v62 = (const void *)qword_1E9358B38;
      qword_1E9358B38 = *(void *)(a1 + 32);
      CFRetain(v61);
      if (v62) {
        CFRelease(v62);
      }
    }
    char v63 = *(const void **)(a1 + 112);
    if (v63)
    {
      char v64 = (const void *)qword_1E9358B48;
      qword_1E9358B48 = *(void *)(a1 + 112);
      CFRetain(v63);
      if (v64) {
        CFRelease(v64);
      }
    }
    uint64_t v65 = *(const void **)(a1 + 24);
    unint64_t v12 = Mutable;
    if (v65)
    {
      char v66 = (const void *)qword_1E9358B50;
      qword_1E9358B50 = *(void *)(a1 + 24);
      CFRetain(v65);
      if (v66) {
        CFRelease(v66);
      }
    }
    int v67 = *(const void **)(a1 + 128);
    if (v67)
    {
      uint64_t v68 = (const void *)qword_1E9359B90;
      qword_1E9359B90 = *(void *)(a1 + 128);
      CFRetain(v67);
      if (v68) {
        CFRelease(v68);
      }
    }
    BOOL v69 = *(const void **)(a1 + 176);
    if (v69)
    {
      uint64_t v70 = (const void *)*((void *)&xmmword_1E9358B18 + 1);
      *((void *)&xmmword_1E9358B18 + 1) = *(void *)(a1 + 176);
      CFRetain(v69);
      if (v70) {
        CFRelease(v70);
      }
    }
    if (*(unsigned char *)(a1 + 145))
    {
      byte_1E9358BB0 = *(unsigned char *)(a1 + 145);
      BOOL v71 = (int *)(a1 + 148);
      uint64_t v53 = 0;
    }
    else
    {
      BOOL v71 = (int *)(a1 + 148);
      uint64_t v53 = 0;
      if (*(_DWORD *)a1)
      {
        byte_1E9358BB0 = 0;
        int v72 = *v95;
        dword_1E9358BC0 = *v95;
        if (!qword_1E9358BB8) {
          goto LABEL_192;
        }
        CFRelease((CFTypeRef)qword_1E9358BB8);
        qword_1E9358BB8 = 0;
      }
    }
    int v72 = *v71;
LABEL_192:
    if (v72) {
      dword_1E9358BC0 = v72;
    }
    AudioObjectID v73 = *(const void **)(a1 + 152);
    if (v73)
    {
      uint64_t v74 = (const void *)qword_1E9358BB8;
      qword_1E9358BB8 = *(void *)(a1 + 152);
      CFRetain(v73);
      if (v74) {
        CFRelease(v74);
      }
    }
    if (MX_FeatureFlags_IsOverdubRecordingEnabled())
    {
      uint64_t v75 = *(const void **)(a1 + 184);
      if (v75)
      {
        long long v76 = (const void *)qword_1E9358BD0;
        qword_1E9358BD0 = *(void *)(a1 + 184);
        CFRetain(v75);
        if (v76) {
          CFRelease(v76);
        }
      }
    }
    if (CMSMVAUtility_IsAdditiveRoutingEnabled() && *(void *)(a1 + 168)) {
      [+[MXAdditiveRoutingManager sharedInstance] setMostRecentActiveSessions:*(void *)(a1 + 168)];
    }
    if (*(unsigned char *)(a1 + 144) && v97 == 1920099684) {
      vaemConfigurePVMSettings((__CFString *)[+[MXSessionManager sharedInstance] currentAudioMode], 1920099684);
    }
LABEL_207:
    char v77 = 0;
    goto LABEL_208;
  }
  CFAllocatorRef v14 = allocator;
  if (v90)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    if (!dword_1E9359ED0) {
      goto LABEL_48;
    }
LABEL_283:
    uint64_t v83 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    goto LABEL_48;
  }
  if (v89 != byte_1E9358B40)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    if (!dword_1E9359ED0) {
      goto LABEL_48;
    }
    goto LABEL_283;
  }
  if (v88 != byte_1E9358B41)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (!dword_1E9359ED0) {
      goto LABEL_48;
    }
    goto LABEL_283;
  }
  if (!FigCFEqual())
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (!dword_1E9359ED0) {
      goto LABEL_48;
    }
    goto LABEL_283;
  }
  if (v87 != byte_1E9358B42)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (!dword_1E9359ED0) {
      goto LABEL_48;
    }
    goto LABEL_283;
  }
  if (!FigCFEqual())
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (!dword_1E9359ED0) {
      goto LABEL_48;
    }
    goto LABEL_283;
  }
  if (v86)
  {
    if (v86 != byte_1E9358BB0)
    {
      BOOL v13 = (_DWORD *)(a1 + 148);
      unint64_t v12 = Mutable;
      CFAllocatorRef v14 = allocator;
      if (!dword_1E9359ED0) {
        goto LABEL_48;
      }
      goto LABEL_283;
    }
    if (v85 && v85 != dword_1E9358BC0)
    {
      BOOL v13 = (_DWORD *)(a1 + 148);
      unint64_t v12 = Mutable;
      CFAllocatorRef v14 = allocator;
      if (!dword_1E9359ED0) {
        goto LABEL_48;
      }
      goto LABEL_283;
    }
    if (!FigCFEqual())
    {
      BOOL v13 = (_DWORD *)(a1 + 148);
      unint64_t v12 = Mutable;
      CFAllocatorRef v14 = allocator;
      if (!dword_1E9359ED0) {
        goto LABEL_48;
      }
      goto LABEL_283;
    }
  }
  else if (v8)
  {
    if (byte_1E9358BB0)
    {
      BOOL v13 = (_DWORD *)(a1 + 148);
      unint64_t v12 = Mutable;
      CFAllocatorRef v14 = allocator;
      if (!dword_1E9359ED0) {
        goto LABEL_48;
      }
      goto LABEL_283;
    }
    if (dword_1E9358BC0)
    {
      BOOL v13 = (_DWORD *)(a1 + 148);
      unint64_t v12 = Mutable;
      CFAllocatorRef v14 = allocator;
      if (!dword_1E9359ED0) {
        goto LABEL_48;
      }
      goto LABEL_283;
    }
    if (qword_1E9358BB8)
    {
      BOOL v13 = (_DWORD *)(a1 + 148);
      unint64_t v12 = Mutable;
      CFAllocatorRef v14 = allocator;
      if (!dword_1E9359ED0) {
        goto LABEL_48;
      }
      goto LABEL_283;
    }
  }
  if (v84)
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (!dword_1E9359ED0) {
      goto LABEL_48;
    }
    goto LABEL_283;
  }
  if (!FigCFEqual())
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (!dword_1E9359ED0) {
      goto LABEL_48;
    }
    goto LABEL_283;
  }
  if (MX_FeatureFlags_IsOverdubRecordingEnabled() && !FigCFEqual())
  {
    BOOL v13 = (_DWORD *)(a1 + 148);
    unint64_t v12 = Mutable;
    CFAllocatorRef v14 = allocator;
    if (!dword_1E9359ED0) {
      goto LABEL_48;
    }
    goto LABEL_283;
  }
  if (CMSMVAUtility_IsAdditiveRoutingEnabled())
  {
    [+[MXAdditiveRoutingManager sharedInstance] mostRecentActiveSessions];
    if (!FigCFEqual())
    {
      BOOL v13 = (_DWORD *)(a1 + 148);
      unint64_t v12 = Mutable;
      CFAllocatorRef v14 = allocator;
      if (!dword_1E9359ED0) {
        goto LABEL_48;
      }
      goto LABEL_283;
    }
  }
  if (*(unsigned char *)(a1 + 144)) {
    vaemConfigurePVMSettings((__CFString *)[+[MXSessionManager sharedInstance] currentAudioMode], 1920099684);
  }
  uint64_t v53 = 0;
  char v77 = 1;
  unint64_t v12 = Mutable;
LABEL_208:
  MEMORY[0x199716EA0](gCMSM);
  if (v12) {
    CFRelease(v12);
  }
  if (v53) {
    char v78 = 1;
  }
  else {
    char v78 = v77;
  }
  if ((v78 & 1) == 0)
  {
    int v79 = *(_DWORD *)a1;
    char v80 = 1;
    if (*(int *)a1 > 1668313714)
    {
      if (v79 != 1668313715 && v79 != 1668440898)
      {
        int v81 = 1668441443;
LABEL_221:
        if (v79 != v81) {
          char v80 = 0;
        }
      }
    }
    else if (v79 != 1668301427 && v79 != 1668309362)
    {
      int v81 = 1668313666;
      goto LABEL_221;
    }
    byte_1E9358B58 = v80;
  }
  return v53;
}

uint64_t MX_FeatureFlags_IsOverdubRecordingEnabled()
{
  if (MX_FeatureFlags_IsOverdubRecordingEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsOverdubRecordingEnabled_onceToken, &__block_literal_global_156);
  }
  return MX_FeatureFlags_IsOverdubRecordingEnabled_isOverdubRecordingEnabled;
}

uint64_t vaemSetRouteConfigurationDictionaryOnVAD(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v7 = MXGetPerformanceLog();
  if (os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_194CDF000, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Route configuration", (const char *)&unk_194EE9136, buf, 2u);
  }
  CFDictionaryRef theDict = 0;
  *(void *)buf = a1;
  uint64_t v21 = 8;
  p_CFDictionaryRef theDict = &theDict;
  uint64_t v23 = 8;
  uint64_t v17 = 0x676C6F6272746366;
  int v18 = 0;
  int v8 = CMSMVAUtility_AudioObjectSetPropertyData();
  CFDictionaryRef v9 = theDict;
  if (v8) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = theDict == 0;
  }
  if (v10)
  {
    uint64_t v11 = 4294954310;
    if (theDict) {
LABEL_17:
    }
      CFRelease(v9);
  }
  else
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"route change reason");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, a4);
      if (CMSMVAUtility_MapVADReasonToCMSReason(*a4) != 9)
      {
        if (CMSMVAUtility_IsAdditiveRoutingEnabled()) {
          id v13 = [+[MXAdditiveRoutingManager sharedInstance] copyAndUpdateSessionInformation:[(__CFDictionary *)theDict objectForKey:0x1EE5EF7E8]];
        }
        else {
          id v13 = 0;
        }
        vaemAQMERouteChanged(theDict, a3, v13);
        vaemVADRouteChangeListener();
      }
    }
    uint64_t v11 = 0;
    CFDictionaryRef v9 = theDict;
    if (theDict) {
      goto LABEL_17;
    }
  }
  CFAllocatorRef v14 = MXGetPerformanceLog();
  if (os_signpost_enabled(v14))
  {
    *(_WORD *)float v16 = 0;
    _os_signpost_emit_with_name_impl(&dword_194CDF000, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Route configuration", (const char *)&unk_194EE9136, v16, 2u);
  }
  return v11;
}

uint64_t MXGetPerformanceLog()
{
  if (MXGetPerformanceLog_onceToken != -1) {
    dispatch_once(&MXGetPerformanceLog_onceToken, &__block_literal_global_7);
  }
  return MXGetPerformanceLog__log;
}

uint64_t CMSMVAUtility_MapVADReasonToCMSReason(int a1)
{
  uint64_t result = 0;
  if (a1 <= 1919842147)
  {
    if (a1 > 1919181935)
    {
      if (a1 > 1919185775)
      {
        if (a1 == 1919185776) {
          return 11;
        }
        if (a1 != 1919186544) {
          return result;
        }
      }
      else if (a1 != 1919181936)
      {
        if (a1 != 1919184754) {
          return result;
        }
        return 2;
      }
      return 3;
    }
    if (a1 == 1919050611) {
      return 5;
    }
    if (a1 != 1919050851)
    {
      BOOL v3 = a1 == 1919118966;
      unsigned int v4 = 7;
LABEL_18:
      if (v3) {
        return v4;
      }
      else {
        return 0;
      }
    }
    return 10;
  }
  if (a1 <= 1919970402)
  {
    if (a1 == 1919842148) {
      return 1;
    }
    if (a1 == 1919904885) {
      return 2;
    }
    BOOL v3 = a1 == 1919907442;
    unsigned int v4 = 4;
    goto LABEL_18;
  }
  if (a1 > 1919971700)
  {
    if (a1 == 1920099684) {
      unsigned int v5 = 9;
    }
    else {
      unsigned int v5 = 0;
    }
    if (a1 == 1919971701) {
      return 8;
    }
    else {
      return v5;
    }
  }
  else
  {
    if (a1 == 1919970403) {
      return 3;
    }
    if (a1 == 1919971427) {
      return 10;
    }
  }
  return result;
}

void PVMSetEnabled(int a1)
{
  MEMORY[0x199716E90](*(void *)sStorage);
  *(unsigned char *)(sStorage + 8) = a1 == 0;
  JUMPOUT(0x199716EA0);
}

void vaemAQMERouteChanged(const __CFDictionary *a1, uint64_t a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (unk_1E9359B28)
  {
    if (FigRoutingManagerContextUtilities_IsContextVideoAndIndependent(a2))
    {
      CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID();
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFArrayRef v6 = CFArrayCreate(v5, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
      if (values)
      {
        CFRelease(values);
        values = 0;
      }
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(v5, 0, a1);
      int v8 = MutableCopy;
      if (v6) {
        BOOL v9 = MutableCopy == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        if (!v6)
        {
LABEL_24:
          unk_1E9359B28(v8);
          if (v8) {
            CFRelease(v8);
          }
          return;
        }
      }
      else
      {
        CFDictionarySetValue(MutableCopy, @"SessionAudioBehaviors", v6);
      }
      CFRelease(v6);
      goto LABEL_24;
    }
    if (CMSMVAUtility_IsAdditiveRoutingEnabled() && [a3 count])
    {
      CFDictionaryRef v22 = a1;
      id v23 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      uint64_t v10 = [a3 countByEnumeratingWithState:&v24 objects:v29 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v25;
        do
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v25 != v12) {
              objc_enumerationMutation(a3);
            }
            CFAllocatorRef v14 = *(void **)(*((void *)&v24 + 1) + 8 * i);
            id v15 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
            objc_msgSend(v15, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedInt:", objc_msgSend(v14, "audioSessionID")), @"AudioSessionID");
            objc_msgSend(v15, "setObject:forKey:", objc_msgSend(v14, "audioBehaviour"), @"AudioBehavior");
            [v23 addObject:v15];
          }
          uint64_t v11 = [a3 countByEnumeratingWithState:&v24 objects:v29 count:16];
        }
        while (v11);
      }
      float v16 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:v22];
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend(v16, "setObject:forKey:", v23, @"SessionAudioBehaviors", v20, v21);
      if (dword_1E9359ED0)
      {
        long long v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      unk_1E9359B28(v16);
    }
    else
    {
      int v18 = (void (*)(const __CFDictionary *))unk_1E9359B28;
      v18(a1);
    }
  }
}

void MXEndpointDescriptorAvailableEndpointsDidChangeHandler(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    id v10 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
    MEMORY[0x199716E90]([a2 _getCacheMutex]);
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFAllocatorRef v14 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v13 + 48);
    if (v14) {
      v14(CMBaseObject, *MEMORY[0x1E4F20620], *MEMORY[0x1E4F1CF80], &cf);
    }
    if (!FigCFEqual()) {
      [a2 _availableEndpointsDidChangeForEndpointManager:a4 atDate:v10];
    }
    MEMORY[0x199716EA0]([a2 _getCacheMutex]);
    FigRouteDiscoveryManagerNotificationHandler(a1, a2, a3, a4, a5);

    if (cf) {
      CFRelease(cf);
    }
  }
}

void discoveryManager_notificationHandler()
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  if (qword_1E93591B0) {
    CFArrayRef v0 = discoverManager_getSharedManager_discoveryState;
  }
  else {
    CFArrayRef v0 = 0;
  }
  if (FigCFEqual())
  {
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    unsigned int v4 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v3 + 48);
    if (v4) {
      v4(CMBaseObject, *MEMORY[0x1E4F20620], *MEMORY[0x1E4F1CF80], &cf);
    }
    if (FigCFEqual())
    {
      CFAllocatorRef v5 = MXGetSerialQueue();
      MXDispatchAsync((uint64_t)"discoveryManager_notificationHandler", (uint64_t)"FigRouteDiscoveryManager.m", 2261, 0, 0, v5, (uint64_t)&__block_literal_global_49);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    discoveryManager_postNotificationToAllDiscoverers((uint64_t)v0, @"Discoverer_AvailableRoutesChanged", 0);
  }
  else if (FigCFEqual())
  {
    discoveryManager_postNotificationToAllDiscoverers((uint64_t)v0, @"Discoverer_RoutePresentChanged", 0);
  }
}

__CFArray *MXCopyCFArrayDifferenceFromArray(uint64_t a1, const __CFArray *a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex v4 = 0;
  if (!a2) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(a2); v4 < i; CFIndex i = 0)
  {
    CFArrayGetValueAtIndex(a2, v4);
    if (!FigCFArrayContainsValue())
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v4);
      CFArrayAppendValue(Mutable, ValueAtIndex);
    }
    ++v4;
    if (a2) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return Mutable;
}

CFMutableDictionaryRef vaemCopyDetailedRouteDescription(AudioObjectID a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberSInt32Type, &dword_1E9359BC8);
  FigCFDictionarySetValue();
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = vaemCopyCurrentSiriInputDeviceUUID();
  FigCFDictionarySetValue();
  if (v5) {
    CFRelease(v5);
  }
  unsigned int v24 = 0;
  CFArrayRef v6 = vaemCopyAudioStreamIDsForScope(a1, 0, &v24);
  int v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v23 = v7;
  if (v24)
  {
    for (unint64_t i = 0; i < v24; ++i)
    {
      uint64_t v9 = v6[i];
      uint64_t v10 = vaemCopyAssociatedPortsForStreamID(v6[i]);
      if (v10)
      {
        CFArrayRef v11 = (const __CFArray *)v10;
        CFTypeID TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v11))
        {
          vaemCopyPortDescriptions(a1, v9, v11, 0, &v23);
          CFRelease(v11);
        }
      }
    }
  }
  FigCFDictionarySetValue();
  free(v6);
  if (v7) {
    CFRelease(v7);
  }
  unsigned int v22 = 0;
  uint64_t v13 = vaemCopyAudioStreamIDsForScope(a1, 1, &v22);
  CFAllocatorRef v14 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v21 = v14;
  if (v22)
  {
    for (unint64_t j = 0; j < v22; ++j)
    {
      uint64_t v16 = v13[j];
      uint64_t v17 = vaemCopyAssociatedPortsForStreamID(v13[j]);
      if (v17)
      {
        CFArrayRef v18 = (const __CFArray *)v17;
        CFTypeID v19 = CFArrayGetTypeID();
        if (v19 == CFGetTypeID(v18))
        {
          vaemCopyPortDescriptions(a1, v16, v18, 1, &v21);
          CFRelease(v18);
        }
      }
    }
  }
  FigCFDictionarySetValue();
  free(v13);
  if (v14) {
    CFRelease(v14);
  }
  return Mutable;
}

void *vaemCopyAudioStreamIDsForScope(AudioObjectID a1, int a2, unsigned int *a3)
{
  if (a2 == 1) {
    int v5 = 1768845428;
  }
  else {
    int v5 = 1869968496;
  }
  int v9 = v5;
  int v10 = 0;
  size_t size = 0x73746D2300000004;
  CFArrayRef v6 = 0;
  if (!AudioObjectGetPropertyDataSize(a1, (const AudioObjectPropertyAddress *)((char *)&size + 4), 0, 0, (UInt32 *)&size))
  {
    CFArrayRef v6 = malloc_type_malloc(size, 0x57BD7DAAuLL);
    if (!AudioObjectGetPropertyData(a1, (const AudioObjectPropertyAddress *)((char *)&size + 4), 0, 0, (UInt32 *)&size, v6)&& v6&& size)
    {
      if (a3) {
        *a3 = size >> 2;
      }
    }
    else
    {
      free(v6);
      return 0;
    }
  }
  return v6;
}

CFTypeRef vaemCopyCurrentSiriInputDeviceUUID()
{
  if ((dword_1E9359BC8 == 1936024681 || dword_1E9359BC8 == 1936679529) && qword_1E9359BD0) {
    return CFRetain((CFTypeRef)qword_1E9359BD0);
  }
  else {
    return 0;
  }
}

uint64_t vaemCopyAssociatedPortsForStreamID(AudioObjectID a1)
{
  uint64_t outData = 0;
  int inQualifierData = 1935895670;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6273617073;
  inAddress.mElement = 0;
  UInt32 v2 = 8;
  if (AudioObjectGetPropertyData(a1, &inAddress, 4u, &inQualifierData, &v2, &outData)) {
    return 0;
  }
  else {
    return outData;
  }
}

void CMSMSleep_FetchPlaybackProcessAssertion(void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
  uint64_t v4 = [a1 displayID];
  ClientName = CMSUtility_GetClientName(a1, v5);
  int v7 = (__CFString *)CFStringCreateWithFormat(v2, 0, @"MediaExperience.%d.\"%@\".\"%@\".\"%@\".isPlayingProcessAssertion", v3, v4, ClientName, [a1 audioCategory]);
  if (![a1 playbackAssertionRef]
    || (MX_RunningBoardServices_IsAssertionValid((const void *)[a1 playbackAssertionRef]) & 1) == 0)
  {
    PlaybackProcessAssertionForPID = MX_RunningBoardServices_CreatePlaybackProcessAssertionForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), v7);
    [a1 setPlaybackAssertionRef:PlaybackProcessAssertionForPID];
    if (PlaybackProcessAssertionForPID) {
      CFRelease(PlaybackProcessAssertionForPID);
    }
  }
  if (v7) {
    CFRelease(v7);
  }
  CMSMSleep_FetchPlaybackProcessAssertionsForHostProcesses(a1);
}

void CMSMSleep_FetchPlaybackProcessAssertionsForHostProcesses(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1 && [a1 playbackAssertionRef])
  {
    CFAllocatorRef v2 = objc_msgSend((id)objc_msgSend(a1, "hostProcessPlaybackAssertions"), "mutableCopy");
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    obunint64_t j = (id)[a1 parentProcessAuditTokens];
    uint64_t v3 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (!v3) {
      goto LABEL_23;
    }
    uint64_t v4 = v3;
    CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v23 = *(void *)v26;
    while (1)
    {
      uint64_t v5 = 0;
      uint64_t v20 = v4;
      do
      {
        if (*(void *)v26 != v23) {
          objc_enumerationMutation(obj);
        }
        CFDataRef v6 = *(const __CFData **)(*((void *)&v25 + 1) + 8 * v5);
        memset(&buffer, 0, sizeof(buffer));
        v32.id location = 0;
        v32.length = 32;
        CFDataGetBytes(v6, v32, (UInt8 *)&buffer);
        atokeuint64_t n = buffer;
        uint64_t v7 = audit_token_to_pid(&atoken);
        uint64_t v8 = [a1 displayID];
        ClientName = CMSUtility_GetClientName(a1, v9);
        CFArrayRef v11 = (__CFString *)CFStringCreateWithFormat(alloc, 0, @"MediaExperience.%d.\"%@\".\"%@\".\"%@\".isPlayingProcessAssertionForHost", v7, v8, ClientName, [a1 audioCategory]);
        uint64_t v12 = (const void *)[v2 objectForKey:v6];
        if (!v12 || (MX_RunningBoardServices_IsAssertionValid(v12) & 1) == 0)
        {
          PlaybackProcessAssertionForPID = MX_RunningBoardServices_CreatePlaybackProcessAssertionForPID(v7, v11);
          [v2 setObject:PlaybackProcessAssertionForPID forKey:v6];
          if (PlaybackProcessAssertionForPID) {
            CFRelease(PlaybackProcessAssertionForPID);
          }
          if (dword_1E9359ED0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v4 = v20;
          }
LABEL_16:
          if (!v11) {
            goto LABEL_18;
          }
LABEL_17:
          CFRelease(v11);
          goto LABEL_18;
        }
        if (!dword_1E9359ED0) {
          goto LABEL_16;
        }
        uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (v11) {
          goto LABEL_17;
        }
LABEL_18:
        ++v5;
      }
      while (v4 != v5);
      uint64_t v16 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
      uint64_t v4 = v16;
      if (!v16)
      {
LABEL_23:
        objc_msgSend(a1, "setHostProcessPlaybackAssertions:", v2, v18, v19);

        return;
      }
    }
  }
  uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void *CMSUtility_GetClientName(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 clientName];
  }
  return a1;
}

uint64_t MX_FeatureFlags_IsRelativeVoiceOverVolumeEnabled()
{
  if (MX_FeatureFlags_IsRelativeVoiceOverVolumeEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsRelativeVoiceOverVolumeEnabled_onceToken, &__block_literal_global_12);
  }
  return MX_FeatureFlags_IsRelativeVoiceOverVolumeEnabled_relativeVoiceOverVolumeEnabled;
}

void *CMSUtility_CopyActiveDuckerForSession(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  CFAllocatorRef v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v11;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v11 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * v6);
      if ([v7 isActive])
      {
        if ([v7 interruptionStyle] == 32
          && CMSUtilityPredicate_ShouldDuck(v7, a1))
        {
          break;
        }
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    uint64_t v7 = 0;
  }
  id v8 = v7;
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v7;
}

uint64_t MXSessionBeginInterruption_WithSecTaskAndFlags(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = +[MXInitialization waitUntilMXIsFullyInitialized];
  uint64_t v28 = 0;
  CFIndex v29 = &v28;
  uint64_t v30 = 0x2020000000;
  int v31 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x3052000000;
  long long v25 = __Block_byref_object_copy__6;
  long long v26 = __Block_byref_object_dispose__6;
  long long v27 = a1;
  uint64_t v18 = 0;
  uint64_t v19 = (float *)&v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  if (!a1)
  {
    uint64_t v11 = FigSignalErrorAt();
    *((_DWORD *)v29 + 6) = v11;
    goto LABEL_12;
  }
  uint64_t v7 = (void *)MEMORY[0x1997179E0](v6);
  if (isSessionSidekick((uint64_t)a1))
  {
    int v8 = [a1 activate];
  }
  else
  {
    if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled())
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        [(id)v23[5] setInterruptionCalledOffAudioControlQueue:1];
      }
    }
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    long long v10 = MXGetSerialQueue();
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __MXSessionBeginInterruption_WithSecTaskAndFlags_block_invoke;
    v13[3] = &unk_1E57C6268;
    v13[4] = &v28;
    v13[5] = &v22;
    void v13[8] = a2;
    v13[9] = a3;
    void v13[6] = &v14;
    void v13[7] = &v18;
    MXDispatchAsyncAndWait((uint64_t)"MXSessionBeginInterruption_WithSecTaskAndFlags", (uint64_t)"MXSession_CInterfaceCommon.m", 691, 0, 0, v10, (uint64_t)v13);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"MXSessionBeginInterruption_WithSecTaskAndFlags" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:0];
    if (!MX_FeatureFlags_IsOffloadActivationOffACQEnabled()) {
      goto LABEL_11;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_11;
    }
    [(id)v23[5] setInterruptionCalledOffAudioControlQueue:0];
    if (*((_DWORD *)v29 + 6)) {
      goto LABEL_11;
    }
    int v8 = mxsession_handleAsyncDuckingSleep((void *)v23[5], *((unsigned __int8 *)v15 + 24), v19[6]);
  }
  *((_DWORD *)v29 + 6) = v8;
LABEL_11:
  uint64_t v11 = *((unsigned int *)v29 + 6);
LABEL_12:
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v28, 8);
  return v11;
}

void sub_194D431CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t MX_FeatureFlags_IsOffloadActivationOffACQEnabled()
{
  if (MX_FeatureFlags_IsOffloadActivationOffACQEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsOffloadActivationOffACQEnabled_onceToken, &__block_literal_global_104);
  }
  return MX_FeatureFlags_IsOffloadActivationOffACQEnabled_isOffloadActivationOffACQEnabled;
}

uint64_t mxsession_handleAsyncDuckingSleep(void *a1, int a2, float a3)
{
  if (a3 <= 0.0) {
    return 0;
  }
  uint64_t v6 = +[MXSessionManager sharedInstance];
  *(float *)&double v7 = a3;
  [(MXSessionManager *)v6 sleepForAsyncDucking:a2 != 0 duration:v7];
  if (objc_msgSend((id)objc_msgSend(a1, "getCoreSession"), "isActive")) {
    return 0;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294951609;
}

uint64_t isSessionSidekick(uint64_t result)
{
  if (result)
  {
    char v1 = (void *)result;
    uint64_t v2 = objc_opt_class();
    return [v1 isMemberOfClass:v2];
  }
  return result;
}

uint64_t MX_FeatureFlags_IsAsyncDuckingEnabled()
{
  if (MX_FeatureFlags_IsAsyncDuckingEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsAsyncDuckingEnabled_onceToken, &__block_literal_global_101);
  }
  return MX_FeatureFlags_IsAsyncDuckingEnabled_isAsyncDuckingEnabled;
}

uint64_t CMSMDeviceState_IsVoiceOverOn()
{
  return byte_1E9358990;
}

void *mx_runningBoardServices_createAssertionForTarget(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v10 = (void *)MEMORY[0x1997179E0]();
  if (mx_runningBoardServices_createAssertionForTarget_onceToken != -1) {
    dispatch_once(&mx_runningBoardServices_createAssertionForTarget_onceToken, &__block_literal_global_60_1);
  }
  uint64_t v11 = [MEMORY[0x1E4F96358] attributeWithDomain:a3 name:a4];
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    [v13 setDateFormat:@"YYYY.MM.dd_HH:mm:ss:ms"];
    uint64_t v14 = NSString;
    if (CMSMDeviceState_IsAudiomxd()) {
      uint64_t v15 = @"audiomxd";
    }
    else {
      uint64_t v15 = a2;
    }
    uint64_t v16 = [v14 stringWithFormat:@"%@(%d).%@.%@", v15, mx_runningBoardServices_createAssertionForTarget_pid, objc_msgSend(v13, "stringFromDate:", objc_msgSend(MEMORY[0x1E4F1C9C8], "date")), a2];
    id v17 = objc_alloc(MEMORY[0x1E4F96318]);
    uint64_t v31 = v12;
    uint64_t v18 = objc_msgSend(v17, "initWithExplanation:target:attributes:", v16, a1, objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v31, 1));
    uint64_t v19 = v18;
    if (v18)
    {
      [v18 setInvalidationHandler:a5];
      uint64_t v30 = 0;
      if (([v19 acquireWithError:&v30] & 1) == 0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v23 = +[MXAudioStatistics sharedInstance];
      uint64_t v24 = [v19 explanation];
      [(MXAudioStatistics *)v23 sendSinglePerformanceMessageForAssertion:"mx_runningBoardServices_createAssertionForTarget" explanation:v24 activity:kMXAudioStatistics_AssertionActivity_AssertionCreated];
      long long v25 = MXGetAssertionLog();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = [v19 explanation];
        *(_DWORD *)buf = 136447490;
        int v33 = "-MX_RunningBoardServices-";
        __int16 v34 = 2082;
        uint64_t v35 = "mx_runningBoardServices_createAssertionForTarget";
        __int16 v36 = 1024;
        int v37 = 708;
        __int16 v38 = 2048;
        CFNumberRef v39 = v19;
        __int16 v40 = 2114;
        uint64_t v41 = v26;
        __int16 v42 = 2114;
        uint64_t v43 = a1;
        _os_log_impl(&dword_194CDF000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Created assertion %p %{public}@ for target %{public}@", buf, 0x3Au);
      }
    }
    else
    {
      LODWORD(v30) = 0;
      uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    LODWORD(v30) = 0;
    int v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v19 = 0;
  }
  return v19;
}

uint64_t MXGetAssertionLog()
{
  if (MXGetAssertionLog_onceToken != -1) {
    dispatch_once(&MXGetAssertionLog_onceToken, &__block_literal_global_57);
  }
  return MXGetAssertionLog__log;
}

uint64_t MX_FeatureFlags_IsAssertionActivityReportingEnabled()
{
  if (MX_FeatureFlags_IsAssertionActivityReportingEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsAssertionActivityReportingEnabled_onceToken, &__block_literal_global_60_0);
  }
  return MX_FeatureFlags_IsAssertionActivityReportingEnabled_sAssertionActivityReportingEnabled;
}

void cmsSetIsActive(void *a1, int a2, void *a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (([a1 isPlaying] & 1) == 0
    && ([a1 wasActiveWhenDeviceOwnershipRelinquished] & 1) == 0)
  {
    if (dword_1E9359ED0)
    {
      int v52 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    objc_msgSend(a1, "setIsPlayingStartTime:", 0, v42, v44);
    [a1 setIsPlayingStopTime:0];
  }
  if ([a1 isActive] != a2)
  {
    int v7 = [a1 isActive];
    int v8 = MXGetSessionLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = [a1 clientName];
      uint64_t v47 = [a1 audioCategory];
      uint64_t v46 = [a1 audioMode];
      int v9 = a3;
      if (CMSUtility_SessionMixesWithOthers(a1)) {
        long long v10 = "Mixable";
      }
      else {
        long long v10 = "NonMixable";
      }
      uint64_t ContextString = FigRoutingManagerContextUtilities_GetContextString([a1 routingContextUUID]);
      uint64_t v12 = [a1 siriInputDeviceUUID];
      if (a2) {
        id v13 = "";
      }
      else {
        id v13 = "in";
      }
      int v14 = a2;
      if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1)) {
        uint64_t v15 = "YES";
      }
      else {
        uint64_t v15 = "NO";
      }
      int v16 = [a1 isSharedAVAudioSessionInstance];
      *(_DWORD *)buf = 136449026;
      *(void *)&uint8_t buf[4] = "-CMSessionMgr-";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = "cmsSetIsActive";
      __int16 v54 = 1024;
      int v55 = 5203;
      __int16 v56 = 2114;
      uint64_t v57 = v48;
      __int16 v58 = 2114;
      uint64_t v59 = v47;
      __int16 v60 = 2114;
      uint64_t v61 = v46;
      __int16 v62 = 2082;
      char v63 = v10;
      a3 = v9;
      __int16 v64 = 2114;
      uint64_t v65 = ContextString;
      __int16 v66 = 2114;
      uint64_t v67 = v12;
      __int16 v68 = 2082;
      BOOL v69 = v13;
      __int16 v70 = 2082;
      BOOL v71 = v15;
      a2 = v14;
      __int16 v72 = 1024;
      int v73 = v16;
      _os_log_impl(&dword_194CDF000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i '%{public}@' with [%{public}@/%{public}@] [%{public}s] [%{public}@] siriEndpointID: %{public}@ going %{public}sactive NowPlayingApp:%{public}s IsSharedAVAudioSessionInstance:%{BOOL}u", buf, 0x72u);
    }
    if ([a1 sessionAssertionAuditTimer])
    {
      dispatch_source_cancel((dispatch_source_t)[a1 sessionAssertionAuditTimer]);
      [a1 setSessionAssertionAuditTimer:0];
    }
    if (a2)
    {
      [a1 setIsActive:1];
      [a1 setDoNotResetAudioCategoryOnNextInactive:0];
      [a1 setDoNotNotifyOtherSessionsOnNextInactive:0];
      if ((v7 & 1) == 0) {
        cmsVibrateForSession(a1, 1);
      }
      [a1 setInterruptingSession:0];
      [a1 setWaitingToResume:0];
      [a1 setWasInterruptedWhileSuspended:0];
      CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
      if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()) {
        CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 2);
      }
      if (CMSMUtility_IsCarPlaySessionPresent())
      {
        if ([a1 hasPhoneCallBehavior])
        {
          byte_1E9359C38 = 0;
          if (dword_1E9359ED0)
          {
            int v52 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            id v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
      if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
        && MX_FeatureFlags_IsCallManagementMuteControlEnabled())
      {
        [+[MXSessionManager sharedInstance] replaceMutedBundleIDwithHostID];
        [+[MXSessionManager sharedInstance] applyUplinkMute:a1];
        [+[MXSessionManager sharedInstance] setUplinkMutedBundleID:0];
      }
      [+[MXSessionManager sharedInstance] updateSupportedOutputChannelLayouts];
      CMSUtility_CreateReporterIDIfNeeded(a1);
      if ([a1 hasAudioMode:@"VoicePrompt"])
      {
        if ([a1 sessionDeactivateTimer]) {
          dispatch_source_cancel((dispatch_source_t)[a1 sessionDeactivateTimer]);
        }
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "now"), "timeIntervalSince1970");
        uint64_t v20 = v19;
        double v21 = (double)(int)[a1 deactivateTimerDelay];
        uint64_t v22 = MXGetSerialQueue();
        v50[0] = MEMORY[0x1E4F143A8];
        v50[1] = 3221225472;
        v50[2] = __cmsSetIsActive_block_invoke;
        v50[3] = &unk_1E57CA3A0;
        v50[4] = a1;
        v50[5] = v20;
        objc_msgSend(a1, "setSessionDeactivateTimer:", FigRoutingManagerCreateOneShotTimer(v22, v21, (uint64_t)v50, 0, 0));
      }
LABEL_78:
      int v35 = [a1 isActive];
      __int16 v36 = (void *)[a1 activeOSTransaction];
      if (v35)
      {
        if (!v36)
        {
          if ([a1 clientName]) {
            int v37 = (__CFString *)[a1 clientName];
          }
          else {
            int v37 = @"MXSessionManager";
          }
          if ([a1 displayID]) {
            __int16 v38 = (__CFString *)[a1 displayID];
          }
          else {
            __int16 v38 = @"MXSessionDefaultID";
          }
          CFNumberRef v39 = (void *)[[NSString alloc] initWithFormat:@"%@-%@", v37, v38];
          [v39 UTF8String];
          objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
          [a1 setActiveOSTransaction:FigOSTransactionCreate()];
        }
        if (MX_FeatureFlags_IsSessionBasedMutingEnabled()) {
          CMSMNotificationUtility_PostIsRecordingMutedDidChange(a1);
        }
      }
      else
      {
        if (v36) {

        }
        [a1 setActiveOSTransaction:0];
      }
      CMSMUtility_UpdateVoiceAssistantActiveStateForCarPlay(a1);
      CMSMUtility_UpdatePlayAndRecordAppSpeechState(a3);
      CMSMNotificationUtility_PostVoicePromptStyleDidChange();
      if (a1) {
        CFRetain(a1);
      }
      __int16 v40 = MXGetNotificationSenderQueue();
      v49[0] = MEMORY[0x1E4F143A8];
      v49[1] = 3221225472;
      v49[2] = __cmsSetIsActive_block_invoke_130;
      v49[3] = &unk_1E57C6368;
      v49[4] = a1;
      MXDispatchAsync((uint64_t)"cmsSetIsActive", (uint64_t)"CMSessionManager.m", 5529, 0, 0, v40, (uint64_t)v49);
      CMSMNotificationUtility_PostSomeClientIsActiveDidChange([a1 audioSessionID], objc_msgSend(a1, "isActive"), objc_msgSend(a1, "audioCategory"), objc_msgSend(a1, "audioMode"));
      if (MX_FeatureFlags_IsSharePlayEnabled()
        && (([a1 isSharePlayMediaSession] & 1) != 0
         || [a1 isSharePlayCapableCallSession]))
      {
        CMSMNotificationUtility_PostSomeSharePlayCapableCallSessionIsActiveDidChange([a1 isActive]);
      }
      CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics(a1, 0, 0xEu, 0, 0, 0);
      CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 0);
      [+[MXAdditiveRoutingManager sharedInstance] sendActiveSessionsInfoToVA];
      CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
      if (!a2
        && ([a1 doNotResetAudioCategoryOnNextInactive] & 1) == 0
        && !vaemIsDefaultVADInItsDefaultConfiguration()
        && ![+[MXSessionManager sharedInstance] isSiriSessionActiveAndRoutedToSiriOutputVAD]&& !CMSUtility_IsSomeOtherNonIDSClientActiveOnDestination(0))
      {
        uint64_t v41 = MXGetSessionLog();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "-CMSessionMgr-";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "cmsSetIsActive";
          __int16 v54 = 1024;
          int v55 = 5567;
          _os_log_impl(&dword_194CDF000, v41, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Resetting Default VAD to Audio/Video as no other non IDS client is active on VAD", buf, 0x1Cu);
        }
        vaemResetVADCategoryToStandardAVAndDefaultMode();
      }
      return;
    }
    cmsVibrateForSession(a1, 0);
    if (CMSMUtility_IsCarPlaySessionPresent()
      && (([a1 hasPhoneCallBehavior] & 1) != 0 || CMSMUtility_PhoneCallOrRingtoneExists()))
    {
      byte_1E9359C38 = 0;
      if (dword_1E9359ED0)
      {
        int v52 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    [+[MXSessionManager sharedInstance] cancelAnyInProgressRampIfNeeded:a1 reason:1];
    if (([a1 doNotResetAudioCategoryOnNextInactive] & 1) != 0
      || ([a1 currentlyControllingFlags] & 2) == 0
      && (objc_msgSend((id)objc_msgSend(a1, "interruptingSession"), "isHardwareSafetySession") & 1) == 0
      && !objc_msgSend((id)objc_msgSend(a1, "interruptingSession"), "isIDSMXCoreSession"))
    {
LABEL_62:
      if ([a1 sessionDeactivateTimer])
      {
        dispatch_source_cancel((dispatch_source_t)[a1 sessionDeactivateTimer]);
        [a1 setSessionDeactivateTimer:0];
        if (dword_1E9359ED0)
        {
          int v52 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          CFRange v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else if (-[MXSessionManager isAirPlaySession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAirPlaySession:", a1)&& ([a1 reporterStarted] & 1) == 0&& !objc_msgSend(a1, "sessionDeactivateTimer"))
      {
        CMSUtility_StartReporterWithAudioStatistics(a1);
      }
      if (objc_msgSend(a1, "isDucked", v43, v45))
      {
        [+[MXSessionManager sharedInstance] startAsyncDuckingOperation];
        int v33 = -[MXDuckingSource initWithType:ID:duckVolume:duckFadeDuration:]([MXDuckingSource alloc], "initWithType:ID:duckVolume:duckFadeDuration:", 3, objc_msgSend((id)objc_msgSend(a1, "ID"), "longLongValue"), 0.0, 0.0);
        [+[MXSessionManager sharedInstance] unduckVolume:a1 sessionCausingUnduck:a1 duckingSource:v33];
        [+[MXSessionManager sharedInstance] endAsyncDuckingOperationForSession:a1];
      }
      CMSUtility_ResetIsPlayingStates(a1);
      [a1 setIsActive:0];
      [a1 setTookControlOfStarkMainAudio:0];
      [a1 setCurrentlyControllingFlags:0];
      [a1 setWaitingForEndInterruptionWhenDeviceUnlocksOrInForeground:0];
      [a1 setNowPlayingAppWasStoppedOnMostRecentActivation:0];
      [a1 setNowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio:0];
      [a1 setSystemSoundHasModifiedCurrentlyControllingFlags:0];
      CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
      if ([a1 orientationOverride] != 5)
      {
        [a1 setOrientationOverride:5];
        vaemSetOrientationOverride([a1 orientationOverride]);
        *(void *)buf = 0;
        *(_DWORD *)buf = [a1 orientationOverride];
        *(void *)&uint8_t buf[8] = 0;
        vaemSetCaptureOrientationOverride();
      }
      [a1 setWasActiveWhenDeviceOwnershipRelinquished:0];
      [+[MXSessionManager sharedInstance] cleanupSessionAssertionsIfNeeded:a1 cleanupReason:0];
      if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled()) {
        int v34 = v7;
      }
      else {
        int v34 = 0;
      }
      if (v34 == 1) {
        cmsmUpdateDeviceAudioFormatConfigIfNeeded(1);
      }
      goto LABEL_78;
    }
    if (!vaemIsDefaultVADInItsDefaultConfiguration())
    {
      [a1 setIsActive:0];
      [a1 setCurrentlyControllingFlags:0];
      if (CMSUtility_IsSomeOtherNonIDSClientActiveOnDestination(a1))
      {
        if (CMSUtility_IsSomeOtherNonIDSClientActiveWithNonDefaultVADConfiguration(a1)) {
          goto LABEL_51;
        }
        uint64_t v23 = MXGetSessionLog();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "-CMSessionMgr-";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "cmsSetIsActive";
          __int16 v54 = 1024;
          int v55 = 5355;
          _os_log_impl(&dword_194CDF000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Resetting Default VAD to Audio/Video as there are no ther non IDS clients active on VAD with non Default VAD configuration", buf, 0x1Cu);
        }
      }
      vaemResetVADCategoryToStandardAVAndDefaultMode();
    }
LABEL_51:
    if ([a1 disallowAudioFormatChanges])
    {
      uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v26 = v25 ? v25 : 0;
      long long v27 = *(void (**)(uint64_t, uint64_t, void))(v26 + 56);
      if (v27) {
        v27(CMBaseObject, 0x1EE5F3348, *MEMORY[0x1E4F1CFC8]);
      }
    }
    int NumberOfChannelsForVADIDAndScope = vaemGetNumberOfChannelsForVADIDAndScope([+[MXSessionManager sharedInstance] defaultVADID], 0);
    if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
    {
      AudioObjectID CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
      BOOL IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)[a1 audioCategory]);
      if (vaemIsNotCurrentDeviceFormat(CurrentOutputVADID, IsCategoryInputOnly)
        || NumberOfChannelsForVADIDAndScope != 2)
      {
        if ([+[MXSessionManager sharedInstance] shouldSetDeviceFormatAndSampleRate:a1])
        {
          uint64_t v31 = CMSUtility_GetCurrentOutputVADID(a1);
          vaemSetDeviceFormat(v31, @"LPCM", 1);
        }
      }
    }
    goto LABEL_62;
  }
}

uint64_t MX_FeatureFlags_IsCallManagementMuteControlEnabled()
{
  if (MX_FeatureFlags_IsCallManagementMuteControlEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsCallManagementMuteControlEnabled_onceToken, &__block_literal_global_27);
  }
  return MX_FeatureFlags_IsCallManagementMuteControlEnabled_sCallManagementMuteControlEnabled;
}

void CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics(void *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = objc_msgSend((id)objc_msgSend(a1, "reporterIDs"), "count");
  if (v8 >= 1)
  {
    uint64_t v9 = v8;
    for (CFIndex i = 0; i != v9; ++i)
    {
      uint64_t valuePtr = 1;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)objc_msgSend(a1, "reporterIDs", v32, v33), i);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      if (a5)
      {
        if (a1)
        {
          if ([a1 reporterStarted])
          {
            off_1E9359D10(valuePtr, a2, a3, a4);
          }
          else
          {
            if (dword_1E9359ED0)
            {
              LODWORD(v39) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v14 = v39;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
                unsigned int v15 = v14;
              }
              else {
                unsigned int v15 = v14 & 0xFFFFFFFE;
              }
              if (v15)
              {
                uint64_t v16 = [a1 clientName];
                int v42 = 136315650;
                uint64_t v43 = "CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics";
                __int16 v44 = 2114;
                uint64_t v45 = v16;
                __int16 v46 = 2048;
                uint64_t v47 = valuePtr;
                LODWORD(v33) = 32;
                CFRange v32 = &v42;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            off_1E9359CE8(valuePtr);
            [a1 setReporterStarted:1];
            off_1E9359D10(valuePtr, a2, a3, a4);
            [a1 setReporterStarted:0];
            off_1E9359CF0(valuePtr);
            if (dword_1E9359ED0)
            {
              LODWORD(v39) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v29 = v39;
              if (os_log_type_enabled(v28, type[0])) {
                unsigned int v30 = v29;
              }
              else {
                unsigned int v30 = v29 & 0xFFFFFFFE;
              }
              if (v30)
              {
                uint64_t v31 = [a1 clientName];
                int v42 = 136315650;
                uint64_t v43 = "CMSUtility_SendSessionStateAndVolumeReportToAudioStatistics";
                __int16 v44 = 2114;
                uint64_t v45 = v31;
                __int16 v46 = 2048;
                uint64_t v47 = valuePtr;
                LODWORD(v33) = 32;
                CFRange v32 = &v42;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
      else
      {
        float v40 = 0.0;
        CFNumberRef v39 = 0;
        if ([a1 displayID])
        {
          [a1 displayID];
          CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
        }
        else
        {
          CStringPtrAndBufferToFree = 0;
        }
        *(void *)os_log_type_t type = 0;
        if (CMSMDeviceState_ItsAHomePod()) {
          PVMCopyVolumeCategoryAndMode((const __CFString *)-[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getUncustomizedCategory:", [a1 audioCategory]), 0, type, 0);
        }
        CMSUtility_ComputePlaybackVolume(a1, &v40);
        id v17 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        uint64_t v18 = MX_RunningBoardServices_CopyAssertionReasonsStringForPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
        id v19 = [NSString alloc];
        uint64_t v20 = (void *)[v19 initWithString:objc_msgSend(NSString, "stringWithFormat:", @"%@", objc_msgSend(MEMORY[0x1E4F1C9C8], "now"))];
        if (a1) {
          uint64_t v21 = [a1 displayID];
        }
        else {
          uint64_t v21 = 0;
        }
        if ([a1 isActive]) {
          uint64_t v22 = @"active";
        }
        else {
          uint64_t v22 = @"inactive";
        }
        [v17 setObject:v22 forKey:0x1EE5F0BC8];
        if (a1)
        {
          objc_msgSend(v17, "setObject:forKey:", objc_msgSend(a1, "audioCategory"), 0x1EE5F0B68);
          uint64_t v23 = [a1 audioMode];
        }
        else
        {
          [v17 setObject:0 forKey:0x1EE5F0B68];
          uint64_t v23 = 0;
        }
        [v17 setObject:v23 forKey:0x1EE5F0B88];
        objc_msgSend(v17, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", objc_msgSend(a1, "prefersNoInterruptionsByRingtonesAndAlerts")), 0x1EE5F0BA8);
        [v17 setObject:v20 forKey:0x1EE5F0BE8];
        if (v21) {
          uint64_t v24 = (__CFString *)v21;
        }
        else {
          uint64_t v24 = @"UnknownDisplayID";
        }
        [v17 setObject:v24 forKey:0x1EE5F0C08];
        objc_msgSend(v17, "setObject:forKey:", CMSMUtility_GetStringForApplicationState(objc_msgSend(a1, "applicationState")), 0x1EE5F0C28);
        [v17 setObject:v18 forKey:0x1EE5F0C48];
        if ([a1 prefersInterruptionOnRouteDisconnectSetByClient]) {
          objc_msgSend(v17, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", objc_msgSend(a1, "prefersInterruptionOnRouteDisconnect")), 0x1EE5F0C68);
        }

        uint64_t v25 = cmsutility_createVolumeChangeMessageForAudioStatistics(CStringPtrAndBufferToFree, *(const void **)type, 0, 0, a6, v40);
        if ([a1 isActive])
        {
          CMSUtility_SetAudioServiceTypeForReporterID(a1, valuePtr);
          if (([a1 reporterStarted] & 1) == 0)
          {
            if (dword_1E9359ED0)
            {
              uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            off_1E9359CE8(valuePtr);
            off_1E9359D10(valuePtr, v25, 14, 5);
            [a1 setReporterStarted:1];
          }
          off_1E9359D10(valuePtr, v17, 1, 5);
        }
        else if ([a1 reporterStarted])
        {
          off_1E9359D10(valuePtr, v17, 1, 5);
          off_1E9359D10(valuePtr, v25, 14, 5);
          [a1 setReporterStarted:0];
          off_1E9359CF0(valuePtr);
          if (dword_1E9359ED0)
          {
            long long v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }

        if (v25) {
          CFRelease(v25);
        }
        if (*(void *)type)
        {
          CFRelease(*(CFTypeRef *)type);
          *(void *)os_log_type_t type = 0;
        }
        free(v39);
      }
    }
  }
}

__CFDictionary *cmsutility_createVolumeChangeMessageForAudioStatistics(const char *a1, const void *a2, const void *a3, int a4, int a5, float a6)
{
  float valuePtr = a6;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v13 = CFNumberCreate(v11, kCFNumberFloat32Type, &valuePtr);
  CFDictionarySetValue(Mutable, @"MXSessionVolume", v13);
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v20 = FigGetUpTimeNanoseconds() / 1000000000;
  CFNumberRef v14 = CFNumberCreate(v11, kCFNumberSInt64Type, &v20);
  CFDictionarySetValue(Mutable, @"MXSessionVolumeOperationTime", v14);
  if (v14) {
    CFRelease(v14);
  }
  if (a1)
  {
    CFStringRef v15 = CFStringCreateWithCString(v11, a1, 0x8000100u);
    CFDictionarySetValue(Mutable, @"MXSessionVolumeOperationProcess", v15);
    if (v15) {
      CFRelease(v15);
    }
  }
  if (a2) {
    CFDictionarySetValue(Mutable, @"MXSessionVolumeCategory", a2);
  }
  if (a3) {
    CFDictionarySetValue(Mutable, @"MXSessionVolumeRoute", a3);
  }
  int v19 = a4;
  CFNumberRef v16 = CFNumberCreate(v11, kCFNumberSInt32Type, &v19);
  CFDictionarySetValue(Mutable, @"MXSessionVolumePlayingState", v16);
  if (v16) {
    CFRelease(v16);
  }
  StringForVolumeOperationType = CMSMUtility_GetStringForVolumeOperationType(a5);
  CFDictionarySetValue(Mutable, @"MXSessionVolumeOperationType", StringForVolumeOperationType);
  return Mutable;
}

__CFString *CMSMUtility_GetStringForVolumeOperationType(int a1)
{
  char v1 = @"Unknown";
  if (a1 == 1) {
    char v1 = @"Automatic";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"UserInitiated";
  }
}

uint64_t CMSMUtility_UpdatePlayAndRecordAppSpeechState(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v1 = dword_1E9359C34;
  MEMORY[0x199716E90](gCMSM);
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    int v5 = 0;
    uint64_t v6 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if ([v8 isActive]
          && CMSMUtility_ShouldCarPlaySpeechAppStateBeSet((uint64_t)v8))
        {
          if ([v8 isRecording]
            && (([v8 isTheAssistant] & 1) != 0 || (objc_msgSend(v8, "hasPhoneCallBehavior") & 1) == 0))
          {
            dword_1E9359C34 = 11;
            int v5 = 1;
            goto LABEL_17;
          }
          dword_1E9359C34 = 10;
          int v5 = 1;
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  else
  {
    int v5 = 0;
  }
LABEL_17:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (!v5)
  {
    if (CMSMUtility_IsIndirectCarPlaySpeechModeTransitionsRequired())
    {
      int v9 = -1;
    }
    else if (a1 && CMSMUtility_ShouldCarPlaySpeechAppStateBeSet((uint64_t)a1))
    {
      int v9 = 10;
    }
    else if ((v1 & 0xFFFFFFFE) == 0xA)
    {
      int v9 = -1;
    }
    else
    {
      int v9 = 0;
    }
    dword_1E9359C34 = v9;
  }
  uint64_t result = MEMORY[0x199716EA0](gCMSM);
  if (v1 != dword_1E9359C34)
  {
    uint64_t result = FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1);
    if (result)
    {
      int v11 = dword_1E9359C34;
      if (CMSMUtility_IsIndirectCarPlaySpeechModeTransitionsRequired())
      {
        uint64_t v12 = 0;
      }
      else if (([a1 hasPhoneCallBehavior] & 1) != 0 {
             || CMSUtility_IsAudioCategoryRingtone(a1))
      }
      {
        uint64_t v12 = 1;
      }
      else if (CMSMUtility_PhoneCallOrRingtoneExists() | byte_1E9359C38)
      {
        uint64_t v12 = 1;
      }
      else
      {
        uint64_t v12 = 0xFFFFFFFFLL;
      }
      return FigEndpointCentralUpdateiOSDeviceState(qword_1E9359C70, v12, v11, @"PlayAndRecord category app activity", 0);
    }
  }
  return result;
}

uint64_t CMSMUtility_ShouldCarPlaySpeechAppStateBeSet(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    if ([+[MXSessionManager sharedInstance] sessionUtilizesIndependentRecordingOnly:result])
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    if (CMSUtility_IsAudioModeCameraRelated((uint64_t)v1)
      || CMSUtility_IsAudioCategoryVoicemail(v1))
    {
      return 0;
    }
    if (CMSMUtility_IsPlayAndRecordCategory([v1 audioCategory])) {
      return 1;
    }
    else {
      return [v1 hasPhoneCallBehavior];
    }
  }
  return result;
}

uint64_t CMSUtility_IsAudioModeCameraRelated(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    [(id)result audioMode];
    if (FigCFEqual()) {
      return 1;
    }
    [v1 audioMode];
    if (FigCFEqual()) {
      return 1;
    }
    [v1 audioMode];
    if (FigCFEqual()) {
      return 1;
    }
    [v1 audioMode];
    if (FigCFEqual()) {
      return 1;
    }
    [v1 audioMode];
    uint64_t result = FigCFEqual();
    if (result) {
      return 1;
    }
  }
  return result;
}

BOOL CMSMUtility_IsIndirectCarPlaySpeechModeTransitionsRequired()
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v0 = CMSMUtility_CopySystemAudioRoutingContextUUID();
  CFTypeRef v1 = FigRoutingManagerCopyActivatedCarPlayEndpoint((uint64_t)v0);
  if (v1)
  {
    cf[0] = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
    if (v6)
    {
      v6(CMBaseObject, *MEMORY[0x1E4F21058], *MEMORY[0x1E4F1CF80], cf);
      CFTypeRef v7 = cf[0];
    }
    else
    {
      CFTypeRef v7 = 0;
    }
    BOOL v5 = v7 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFTypeRef v7 = cf[0];
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  if (v0) {
    CFRelease(v0);
  }
  if (v1) {
    CFRelease(v1);
  }
  return v5;
}

CFTypeRef FigRoutingManagerCopyActivatedCarPlayEndpoint(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef theArray = 0;
  CFTypeRef v1 = 0;
  if (!FigRoutingManagerContextUtilities_CopyActivatedEndpoints(a1, (uint64_t)&theArray))
  {
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count < 1) {
        goto LABEL_12;
      }
      CFIndex v3 = Count;
      CFIndex v4 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)) {
          break;
        }
        if (v3 == ++v4) {
          goto LABEL_12;
        }
      }
      if (ValueAtIndex) {
        CFTypeRef v1 = CFRetain(ValueAtIndex);
      }
      else {
LABEL_12:
      }
        CFTypeRef v1 = 0;
      goto LABEL_13;
    }
    return 0;
  }
LABEL_13:
  if (theArray) {
    CFRelease(theArray);
  }
  return v1;
}

CFTypeRef CMSMUtility_CopySystemAudioRoutingContextUUID()
{
  CFTypeRef result = (CFTypeRef)qword_1E9359C88;
  if (qword_1E9359C88
    || (FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&qword_1E9359C88),
        (CFTypeRef result = (CFTypeRef)qword_1E9359C88) != 0))
  {
    return CFRetain(result);
  }
  return result;
}

void CMSMNotificationUtility_PostVoicePromptStyleDidChange()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  VoicePromptStyle = CMSMUtility_GetVoicePromptStyle();
  if (VoicePromptStyle != (__CFString *)qword_1E9359C40)
  {
    if (dword_1E9359ED0)
    {
      int v7 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", VoicePromptStyle, @"VoicePromptStyle", 0);
    +[MXSystemController notifyAll:@"VoicePromptStyleDidChange" payload:v2 dontPostIfSuspended:0];
    id v3 = v2;
    CFIndex v4 = MXGetNotificationSenderQueue();
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    _OWORD v5[2] = __CMSMNotificationUtility_PostVoicePromptStyleDidChange_block_invoke;
    v5[3] = &unk_1E57C6368;
    void v5[4] = v2;
    MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostVoicePromptStyleDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1045, 0, 0, v4, (uint64_t)v5);
  }
  qword_1E9359C40 = (uint64_t)VoicePromptStyle;
}

__CFString *CMSMUtility_GetVoicePromptStyle()
{
  MEMORY[0x199716E90](gCMSM);
  int IsDoingActivity = FigEndpointCentralEntityIsDoingActivity(qword_1E9359C70, 0x1EE5E6788, @"PhoneCall");
  int v1 = FigEndpointCentralEntityIsDoingActivity(qword_1E9359C70, 0x1EE5E6788, @"Speech");
  MEMORY[0x199716EA0](gCMSM);
  if ([+[MXSessionManager sharedInstance] isSessionWithAudioModeRecording:@"SpeechRecognition"])
  {
    uint64_t v2 = kCMSessionVoicePromptStyle_None;
  }
  else if ([+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") areSessionsWithAudioModesActive:[+[MXSessionManager sharedInstance] audioModesWithShortVoicePromptStyle]])
  {
    uint64_t v2 = kCMSessionVoicePromptStyle_Short;
  }
  else
  {
    uint64_t v2 = kCMSessionVoicePromptStyle_Short;
    if (!CMSMUtility_PhoneCallOrRingtoneExists()
      && !IsDoingActivity
      && !v1
      && ![+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") isSessionWithAudioCategoryActive:@"Voicemail"]&& ![+[MXSessionManager sharedInstance] isSessionWithAudioModePlaying:@"VoicePrompt"])
    {
      uint64_t v2 = kCMSessionVoicePromptStyle_Normal;
    }
  }
  return *v2;
}

uint64_t FigEndpointCentralEntityIsDoingActivity(uint64_t result, uint64_t a2, const void *a3)
{
  memset(v6, 0, sizeof(v6));
  if (result)
  {
    CFTypeRef result = CMBaseObjectGetDerivedStorage();
    if (result)
    {
      uint64_t v5 = result;
      CFTypeRef result = 0;
      if (a2)
      {
        if (a3)
        {
          fsmcontroller_GetCurrentMode(*(void *)(v5 + 24), (uint64_t)v6);
          if (CFEqual(a3, @"PhoneCall")) {
            return FigCFEqual();
          }
          if (CFEqual(a3, @"Speech")) {
            return FigCFEqual();
          }
          CFTypeRef result = CFEqual(a3, @"TurnByTurnNavigation");
          if (result) {
            return FigCFEqual();
          }
        }
      }
    }
  }
  return result;
}

__CFString *MX_RunningBoardServices_CopyAssertionReasonsStringForPID(uint64_t a1)
{
  int v1 = MX_RunningBoardServices_CopyAssertionReasonsForPID(a1);
  if ((unint64_t)[v1 count] >= 2) {
    int v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithArray:", v1), "allObjects");
  }
  if ([v1 count]) {
    uint64_t v2 = (__CFString *)[v1 componentsJoinedByString:@","];
  }
  else {
    uint64_t v2 = &stru_1EE5E8D28;
  }
  return v2;
}

void *MX_RunningBoardServices_CopyAssertionReasonsForPID(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v1 = objc_msgSend((id)objc_msgSend((id)mx_runningBoardServices_getProcessHandleForPID(a1), "currentState"), "assertions");
  uint64_t v2 = (void *)[v1 count];
  if (v2)
  {
    uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v2];
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v9;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(v1);
          }
          objc_msgSend(v2, "addObject:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithLongLong:", objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * v6++), "reason")));
        }
        while (v4 != v6);
        uint64_t v4 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v4);
    }
  }
  return v2;
}

uint64_t CMSUtility_SetAudioServiceTypeForReporterID(void *a1, uint64_t a2)
{
  if ([a1 isTheAssistant])
  {
    uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))off_1E9359CF8;
    uint64_t v5 = a2;
    uint64_t v6 = 1;
  }
  else
  {
    [a1 audioCategory];
    if (FigCFEqual())
    {
      uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))off_1E9359CF8;
      uint64_t v5 = a2;
      uint64_t v6 = 4;
    }
    else
    {
      uint64_t result = [a1 isMemberOfClass:objc_opt_class()];
      if (result) {
        return result;
      }
      if (CMSUtility_HasPhoneCallBehaviour(a1))
      {
        uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))off_1E9359CF8;
        uint64_t v5 = a2;
        uint64_t v6 = 2;
      }
      else
      {
        [a1 audioCategory];
        if (FigCFEqual())
        {
          uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))off_1E9359CF8;
          uint64_t v5 = a2;
          uint64_t v6 = 3;
        }
        else if (CMSUtility_IsAudioCategoryNonLongFormPlayback((uint64_t)a1))
        {
          uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))off_1E9359CF8;
          uint64_t v5 = a2;
          uint64_t v6 = 8;
        }
        else if (CMSUtility_IsAudioCategoryLongFormPlayback((uint64_t)a1))
        {
          uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))off_1E9359CF8;
          uint64_t v5 = a2;
          uint64_t v6 = 7;
        }
        else
        {
          int IsAudioCategoryAlertType = CMSUtility_IsAudioCategoryAlertType((uint64_t)a1);
          uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))off_1E9359CF8;
          if (IsAudioCategoryAlertType)
          {
            uint64_t v5 = a2;
            uint64_t v6 = 10;
          }
          else
          {
            uint64_t v5 = a2;
            uint64_t v6 = 0;
          }
        }
      }
    }
  }
  return v4(v5, v6);
}

uint64_t CMSUtility_IsAudioCategoryNonLongFormPlayback(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    uint64_t result = [(id)result audioCategory];
    if (result)
    {
      if (CFEqual((CFTypeRef)[v1 audioCategory], @"UserInterfaceSoundEffects")) {
        return 1;
      }
      if (CFEqual((CFTypeRef)[v1 audioCategory], @"AmbientSound")) {
        return 1;
      }
      if (CFEqual((CFTypeRef)[v1 audioCategory], @"LiveAudio")) {
        return 1;
      }
      if (CFEqual((CFTypeRef)[v1 audioCategory], @"SoloAmbientSound")) {
        return 1;
      }
      if (CFEqual((CFTypeRef)[v1 audioCategory], @"Multi")) {
        return 1;
      }
      uint64_t result = -[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [v1 audioCategory]);
      if (result) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t CMSMUtility_UpdateVoiceAssistantActiveStateForCarPlay(void *a1)
{
  if (!qword_1E9359C70 || ![a1 isTheAssistant]) {
    return 0;
  }
  if ([a1 isActive]) {
    char IsSiriActive = 1;
  }
  else {
    char IsSiriActive = CMSMUtility_IsSiriActive();
  }
  uint64_t v4 = qword_1E9359C70;
  return FigEndpointCentralUpdateIsVoiceAssistantActive(v4, IsSiriActive);
}

void CMSMNotificationUtility_PostSomeClientIsActiveDidChange(unsigned int a1, int a2, uint64_t a3, uint64_t a4)
{
  if (![+[MXSessionManager sharedInstance] isSpeechDetectCategory:a3])
  {
    id v8 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    uint64_t v9 = [MEMORY[0x1E4F28ED0] numberWithLongLong:a1];
    id v10 = (id)objc_msgSend(v8, "initWithObjectsAndKeys:", v9, @"AudioSessionID", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", a2 != 0), @"IsActive", a3, @"AudioCategory", a4, @"AudioMode", 0);
    +[MXSystemController notifyAll:@"SomeClientIsActiveDidChange" payload:v10 dontPostIfSuspended:0 remoteDeviceID:0];
  }
}

void *CMSUtility_IsAudioCategoryVoicemail(void *result)
{
  if (result)
  {
    [result audioCategory];
    return (void *)FigCFEqual();
  }
  return result;
}

uint64_t CMSUtility_IsAudioCategoryLongFormPlayback(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    uint64_t result = [(id)result audioCategory];
    if (result)
    {
      if (CFEqual((CFTypeRef)[v1 audioCategory], @"MediaPlayback")) {
        return 1;
      }
      uint64_t result = CFEqual((CFTypeRef)[v1 audioCategory], @"MediaPlaybackNoSpeaker");
      if (result) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t CMSUtility_IsAudioCategoryAlertType(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    uint64_t result = [(id)result audioCategory];
    if (result)
    {
      if (CFEqual((CFTypeRef)[v1 audioCategory], @"WaterEjection")) {
        return 1;
      }
      if (CFEqual((CFTypeRef)[v1 audioCategory], @"Ringtone")) {
        return 1;
      }
      if (CFEqual((CFTypeRef)[v1 audioCategory], @"RingtonePreview")) {
        return 1;
      }
      if (CFEqual((CFTypeRef)[v1 audioCategory], @"EmergencyAlert")) {
        return 1;
      }
      uint64_t result = CFEqual((CFTypeRef)[v1 audioCategory], @"EmergencyAlert_Muteable");
      if (result) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t CMSMUtility_IsCarPlaySessionPresent()
{
  uint64_t result = (uint64_t)CMSMUtility_CopyCarPlaySession();
  if (result)
  {

    return 1;
  }
  return result;
}

id CMSMUtility_CopyCarPlaySession()
{
  MEMORY[0x199716E90](gCMSM);
  id v0 = (id)qword_1E9359C68;
  MEMORY[0x199716EA0](gCMSM);
  return v0;
}

void CMScreenHandleIdleEvent(int a1, int a2, int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2 == a3) {
    return;
  }
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&v17);
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v17, 0, (uint64_t)&cf);
  if (cf)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    id v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (v8) {
      v8(CMBaseObject, *MEMORY[0x1E4F21048], *MEMORY[0x1E4F1CF80], &v18);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
  }
  if (v17)
  {
    CFRelease(v17);
    CFTypeRef v17 = 0;
  }
  if (FigCFEqual() || !FigCFEqual())
  {
    if (v18) {
      CFRelease(v18);
    }
    return;
  }
  if (v18) {
    CFRelease(v18);
  }
  if (a1 != 100)
  {
    if (a1 != 101) {
      return;
    }
    if (a3 == 1) {
      goto LABEL_35;
    }
    goto LABEL_25;
  }
  if (!a3)
  {
LABEL_35:
    CMSMAP_StopDisconnectAirPlayScreenTimer();
    return;
  }
  if (!CMSMUtility_SomeClientIsPlayingToAirPlay())
  {
LABEL_25:
    if (cmscreenIsTetheredDemoModeOn_onceToken != -1) {
      dispatch_once(&cmscreenIsTetheredDemoModeOn_onceToken, &__block_literal_global_22_0);
    }
    if (dword_1E9359ED0)
    {
      unsigned int v20 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v10 = v20;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        uint64_t v12 = @"YES";
        if (!cmscreenIsTetheredDemoModeOn_isThetheredDemoModeOn) {
          uint64_t v12 = @"NO";
        }
        int v21 = 136315394;
        uint64_t v22 = "cmscreenIsTetheredDemoModeOn";
        __int16 v23 = 2114;
        uint64_t v24 = v12;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cmscreenIsTetheredDemoModeOn_isThetheredDemoModeOn)
    {
      if (dword_1E9359ED0)
      {
        unsigned int v20 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v14 = v20;
        if (os_log_type_enabled(v13, type)) {
          unsigned int v15 = v14;
        }
        else {
          unsigned int v15 = v14 & 0xFFFFFFFE;
        }
        if (v15)
        {
          int v21 = 136315138;
          uint64_t v22 = "CMScreenHandleIdleEvent";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      CMSMAP_StartDisconnectAirPlayScreenTimer(60.0);
    }
  }
}

void cmsutility_handleRoutingContextChanged(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(a1, "isActive", v5, v6)) {
    cmsBeginInterruptionGuts(a1, 0, 2);
  }
  cmsUpdateAudioBehavior(a1);
  CMSMUtility_InformAirPlayOfAudioModeIfNecessary([a1 routingContextUUID]);
  id v3 = a1;
  uint64_t v4 = MXGetNotificationSenderQueue();
  MXDispatchAsyncFunction((uint64_t)"cmsutility_handleRoutingContextChanged", (uint64_t)"CMSessionManager_SessionUtilities.m", 5198, 0, 0, v4, (uint64_t)a1, (uint64_t)CMSMNotificationUtility_PostSessionRoutingContextDidChange_f);
  CMSMNotificationUtility_PostActiveAudioRouteDidChange(a1, (const void *)qword_1E9359CB8, 0);
}

CFTypeRef FigRoutingManagerCopySelectedBufferedEndpoint(const void *a1, const void *a2)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v32 = 0;
  CFTypeRef v33 = 0;
  uint64_t ContextString = FigRoutingManagerContextUtilities_GetContextString((uint64_t)a1);
  if (a2 && FigRoutingManagerContextUtilities_IsContextSidePlay((uint64_t)a1))
  {
    CFTypeRef v5 = routingMangager_copySelectedBufferedEndpointForSidePlay();
  }
  else
  {
    if (FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
    {
      cf[0] = 0;
      FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)cf);
      FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)cf[0], &v32);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    else
    {
      FigRoutingManagerCopyPickedEndpointForRoutingContext((uint64_t)a1, &v32);
    }
    CFTypeRef v5 = 0;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)v32)
    || FigRoutingManagerIsEndpointOfType((uint64_t)v32))
  {
    CFTypeRef v6 = v32;
    if (v32) {
      CFRetain(v32);
    }
    if (v5)
    {
      CFTypeRef v7 = v5;
LABEL_15:
      CFRelease(v7);
    }
  }
  else
  {
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)v32)) {
      goto LABEL_65;
    }
    cf[0] = 0;
    uint64_t v16 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v19 + 48);
    if (v24) {
      v24(CMBaseObject, 0x1EE5F4288, v16, cf);
    }
    if (!cf[0])
    {
LABEL_65:
      CFTypeRef v6 = v5;
      goto LABEL_16;
    }
    *(void *)float valuePtr = 0;
    CFNumberGetValue((CFNumberRef)cf[0], kCFNumberSInt64Type, valuePtr);
    if (*(_DWORD *)valuePtr == 1886614639)
    {
      CFTypeRef v31 = 0;
      uint64_t v25 = FigEndpointGetCMBaseObject();
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v27 + 48);
      if (v28) {
        v28(v25, *MEMORY[0x1E4F20E38], v16, &v31);
      }
      uint64_t v29 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v31, 1, *MEMORY[0x1E4F20648], 0);
      unsigned int v30 = (const void *)v29;
      if (v29 && (FigRoutingManagerGetFigEndpointFeatures(v29, (uint64_t)a1) & 8) != 0)
      {
        CFRetain(v30);
        CFTypeRef v6 = v30;
        if (v5)
        {
          CFRelease(v5);
          CFTypeRef v6 = v30;
        }
      }
      else
      {
        CFTypeRef v6 = v5;
      }
      if (v31)
      {
        CFRelease(v31);
        CFTypeRef v31 = 0;
      }
      if (v30) {
        CFRelease(v30);
      }
    }
    else
    {
      CFTypeRef v6 = v5;
    }
    CFTypeRef v7 = cf[0];
    if (cf[0]) {
      goto LABEL_15;
    }
  }
LABEL_16:
  if (v6)
  {
    uint64_t v8 = FigEndpointGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v10 = v9 ? v9 : 0;
    unsigned int v11 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v10 + 48);
    if (v11) {
      v11(v8, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &v33);
    }
  }
  CFTypeRef v12 = v33;
  if (FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (FigCFEqual()) {
        goto LABEL_53;
      }
      if (routingManager_shouldLogSelectedBufferedEndpointInfo_sSelectedBufferedEndpointName)
      {
        CFRelease((CFTypeRef)routingManager_shouldLogSelectedBufferedEndpointInfo_sSelectedBufferedEndpointName);
        routingManager_shouldLogSelectedBufferedEndpointInfo_sSelectedBufferedEndpointName = 0;
      }
      if (v12) {
        CFTypeRef v13 = CFRetain(v12);
      }
      else {
        CFTypeRef v13 = 0;
      }
      routingManager_shouldLogSelectedBufferedEndpointInfo_sSelectedBufferedEndpointName = (uint64_t)v13;
    }
    else
    {
      if (routingManager_shouldLogSelectedBufferedEndpointInfo_sDeviceID)
      {
        CFRelease((CFTypeRef)routingManager_shouldLogSelectedBufferedEndpointInfo_sDeviceID);
        routingManager_shouldLogSelectedBufferedEndpointInfo_sDeviceID = 0;
      }
      if (a2) {
        CFTypeRef v15 = CFRetain(a2);
      }
      else {
        CFTypeRef v15 = 0;
      }
      routingManager_shouldLogSelectedBufferedEndpointInfo_sDeviceID = (uint64_t)v15;
    }
  }
  else
  {
    if (routingManager_shouldLogSelectedBufferedEndpointInfo_sRoutingContextUUID)
    {
      CFRelease((CFTypeRef)routingManager_shouldLogSelectedBufferedEndpointInfo_sRoutingContextUUID);
      routingManager_shouldLogSelectedBufferedEndpointInfo_sRoutingContextUUID = 0;
    }
    if (a1) {
      CFTypeRef v14 = CFRetain(a1);
    }
    else {
      CFTypeRef v14 = 0;
    }
    routingManager_shouldLogSelectedBufferedEndpointInfo_sRoutingContextUUID = (uint64_t)v14;
  }
  if (dword_1E9359DC0)
  {
    LODWORD(v31) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v21 = v31;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = v21 & 0xFFFFFFFE;
    }
    if (v22)
    {
      *(_DWORD *)float valuePtr = 136316163;
      *(void *)&valuePtr[4] = "FigRoutingManagerCopySelectedBufferedEndpoint";
      __int16 v35 = 2114;
      uint64_t v36 = ContextString;
      __int16 v37 = 2113;
      __int16 v38 = a1;
      __int16 v39 = 2113;
      float v40 = a2;
      __int16 v41 = 2114;
      CFTypeRef v42 = v33;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_53:
  if (v33)
  {
    CFRelease(v33);
    CFTypeRef v33 = 0;
  }
  if (v32) {
    CFRelease(v32);
  }
  return v6;
}

uint64_t FigRoutingManagerContextUtilities_GetContextString(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v4 = 0;
    CFTypeRef v5 = &v4;
    uint64_t v6 = 0x2020000000;
    uint64_t v7 = 0;
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28)
    {
      v3[0] = MEMORY[0x1E4F143A8];
      v3[1] = 3221225472;
      v3[2] = __FigRoutingManagerContextUtilities_GetContextString_block_invoke;
      v3[3] = &unk_1E57C5878;
      void v3[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
      v3[6] = v1;
      void v3[4] = &v4;
      MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetContextString", (uint64_t)"FigRoutingManagerContextUtilities.m", 577, 0, 0, qword_1E9358E18, (uint64_t)v3);
    }
    uint64_t v1 = v5[3];
    _Block_object_dispose(&v4, 8);
  }
  return v1;
}

void sub_194D48884(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerCopyRemotePickedEndpoint(uint64_t a1, CFTypeRef *a2)
{
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  uint64_t v4 = 4294954516;
  if (a1 && a2)
  {
    CFTypeRef cf = 0;
    uint64_t v4 = FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v7 + 48);
      if (v8) {
        v8(CMBaseObject, 0x1EE5FD268, *MEMORY[0x1E4F1CF80], a2);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *a2 = cf;
    }
  }
  return v4;
}

uint64_t FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294949876;
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    uint64_t v6 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v12 = 0;
  CFTypeRef v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  uint64_t v7 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v7 = 504;
  }
  uint64_t v8 = *(NSObject **)v7;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex_block_invoke;
  void v11[3] = &unk_1E57C60E0;
  v11[4] = &v12;
  void v11[5] = v6;
  v11[6] = a1;
  void v11[7] = a2;
  v11[8] = a3;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex", (uint64_t)"FigRoutingManagerContextUtilities.m", 2732, 0, 0, v8, (uint64_t)v11);
  uint64_t v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_194D48B24(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerCopyPickedEndpointForRoutingContext(uint64_t a1, CFTypeRef *a2)
{
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled())
  {
    return FigRoutingManagerCopyRemotePickedEndpoint(a1, a2);
  }
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce == -1)
  {
    if (!a1) {
      return 4294954516;
    }
  }
  else
  {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
    if (!a1) {
      return 4294954516;
    }
  }
  if (!a2) {
    return 4294954516;
  }
  return FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)a2);
}

uint64_t CMSMUtility_UpdateRoutingContextForSessionsWithPID(int a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v7, "clientPID"), "intValue") == a1) {
          CMSUtility_UpdateRoutingContextForSession(v7);
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  return [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
}

BOOL CMSMUtility_FetchUIShouldIgnoreRemoteControlEvents(uint64_t a1)
{
  if ((int)a1 < 1) {
    return 0;
  }
  CFBooleanRef v1 = (const __CFBoolean *)MX_RunningBoardServices_CopyBundleInfoValueForKeyAndPID(@"UIShouldIgnoreRemoteControlEvents", a1);
  if (!v1) {
    return 0;
  }
  CFBooleanRef v2 = v1;
  BOOL v3 = CFBooleanGetValue(v1) != 0;
  CFRelease(v2);
  return v3;
}

uint64_t FigRoutingContextUtilities_IsFollowingAnotherContext(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      CFBooleanRef v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      CFBooleanRef v2 = 0;
    }
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    char v10 = 0;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingContextUtilities_IsFollowingAnotherContext_block_invoke;
    void v6[3] = &unk_1E57C5878;
    v6[5] = v2;
    void v6[6] = v1;
    v6[4] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingContextUtilities_IsFollowingAnotherContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 4733, 0, 0, v4, (uint64_t)v6);
    uint64_t v1 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
  }
  return v1;
}

void sub_194D495D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void CMSMNotificationUtility_PostActiveAudioRouteDidChange(void *a1, const void *a2, const void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  int v15 = 0;
  FigCFDictionaryGetIntIfPresent();
  CMSMUtility_MapCMSRouteChangeReasonToString(0);
  char v14 = 0;
  FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(qword_1E9359CA0);
  FigRoutingManagerContextUtilities_GetContextString((uint64_t)a3);
  if (FigCFDictionaryGetBooleanIfPresent())
  {
    if (dword_1E9359ED0) {
      goto LABEL_6;
    }
  }
  else if (dword_1E9359ED0)
  {
LABEL_6:
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CMSUtility_AreRoutingContextsEquivalent(qword_1E9359C88, (uint64_t)a3)) {
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", @"ActiveAudioRouteDidChange", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", v14 != 0, v9, v10), @"ShouldPause", 0), 0);
  }
  id v7 = a1;
  CFRetain(a2);
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v8 = MXGetNotificationSenderQueue();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __CMSMNotificationUtility_PostActiveAudioRouteDidChange_block_invoke;
  void v11[3] = &unk_1E57C6108;
  v11[4] = a1;
  void v11[5] = a2;
  v11[6] = a3;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostActiveAudioRouteDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1125, 0, 0, v8, (uint64_t)v11);
}

uint64_t FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    CFBooleanRef v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID_block_invoke;
    void v6[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      CFBooleanRef v2 = 0;
    }
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4638, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

void __cmsHandleIdleSleep_block_invoke(uint64_t a1)
{
  if ([*(id *)(a1 + 32) idleSleepPreventorUpdaterTimer])
  {
    dispatch_source_cancel((dispatch_source_t)[*(id *)(a1 + 32) idleSleepPreventorUpdaterTimer]);
    [*(id *)(a1 + 32) setIdleSleepPreventorUpdaterTimer:0];
  }
  int v2 = *(unsigned __int8 *)(a1 + 40);
  int v3 = [*(id *)(a1 + 32) idleSleepPreventorAllocated];
  if (v2)
  {
    if ((v3 & 1) == 0)
    {
      char v4 = 1;
LABEL_8:
      uint64_t v5 = *(void **)(a1 + 32);
      uint64_t v6 = MXGetSerialQueue();
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      v7[2] = __cmsHandleIdleSleep_block_invoke_2;
      v7[3] = &unk_1E57CB9E8;
      void v7[4] = *(void *)(a1 + 32);
      char v8 = v4;
      objc_msgSend(v5, "setIdleSleepPreventorUpdaterTimer:", FigRoutingManagerCreateOneShotTimer(v6, 10.0, (uint64_t)v7, 0, 0));
    }
  }
  else if (v3)
  {
    char v4 = 0;
    goto LABEL_8;
  }
}

NSObject *FigRoutingManagerCreateOneShotTimer(NSObject *a1, double a2, uint64_t a3, void *a4, uint64_t a5)
{
  int64_t v8 = (uint64_t)(a2 * 1000000000.0);
  DispatchSourceBlocCFIndex k = (void *)FigDispatchCreateDispatchSourceBlock();
  uint64_t v10 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, a1);
  dispatch_time_t v11 = dispatch_time(0, v8);
  dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_set_context(v10, a4);
  dispatch_source_set_event_handler(v10, DispatchSourceBlock);
  _Block_release(DispatchSourceBlock);
  if (a5)
  {
    long long v12 = (void *)FigDispatchCreateDispatchSourceBlock();
    dispatch_source_set_cancel_handler(v10, v12);
    _Block_release(v12);
  }
  dispatch_resume(v10);
  return v10;
}

void cmsmUpdateDuckVolume(__CFString *key, int *a2, _DWORD *a3, int a4)
{
  if (a3)
  {
    if (a2) {
      *a2 = 1065353216;
    }
    int valuePtr = 1065353216;
    if (key)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundLowersMusicVolume, key);
      int HasSuffix = CFStringHasSuffix(key, @"AlwaysHeard");
      if (Value)
      {
        int v10 = HasSuffix;
        CFDictionaryRef v11 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(key, a4);
        int CurrentSystemSoundVADForAudioBehaviour = cmsGetCurrentSystemSoundVADForAudioBehaviour();
        if (v11) {
          CFRelease(v11);
        }
        CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
        if (a2) {
          *a2 = valuePtr;
        }
        if (CurrentSystemSoundVADForAudioBehaviour == [+[MXSessionManager sharedInstance] systemSoundLocalVADID])
        {
          int v13 = CMSMUtility_CopyCurrentRouteTypes();
          if (FigCFEqual()) {
            *a3 |= 0x80u;
          }
          if (v13) {
            CFRelease(v13);
          }
        }
        else if (!v10)
        {
          *a3 |= 0x80u;
        }
      }
    }
  }
}

void routingContextResilientRemote_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 24)) {
    routingContextResilientRemote_stopObservingRemoteContext();
  }
  uint64_t v1 = *(void *)(DerivedStorage + 8);
  if (v1)
  {
    (*(void (**)(void))(v1 + 16))();
    int v2 = *(void **)(DerivedStorage + 8);
  }
  else
  {
    int v2 = 0;
  }

  int v3 = *(const void **)(DerivedStorage + 24);
  if (v3) {
    CFRelease(v3);
  }
  FigSimpleMutexDestroy();
  char v4 = *(NSObject **)(DerivedStorage + 32);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 40);
  if (v5)
  {
    dispatch_release(v5);
  }
}

uint64_t routingContextResilientRemote_stopObservingRemoteContext()
{
  CMNotificationCenterGetDefaultLocalCenter();
  for (uint64_t i = 0; i != 24; i += 8)
    FigNotificationCenterRemoveWeakListener();
  for (uint64_t j = 0; j != 48; j += 8)
    FigNotificationCenterRemoveWeakListener();
  return FigNotificationCenterRemoveWeakListener();
}

void vaemConfigurePVMSettings(__CFString *a1, int a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!PVMGetEnabled()) {
    PVMSetEnabled(1);
  }
  vaemCurrentRouteHasVolumeControlListenerGuts();
  char v4 = CMSMUtility_CopyCurrentRouteIdentifiers();
  uint64_t v5 = CMSMUtility_CopyCurrentRouteTypes();
  int NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
  if (!FigCFArrayContainsValue() || (int v7 = 1, a2 != 1919904885) && a2 != 1919971701)
  {
    if (!FigCFArrayContainsValue() && !FigCFArrayContainsValue())
    {
LABEL_15:
      int v7 = 0;
      goto LABEL_16;
    }
    if (NumberOfCurrentOutputPorts)
    {
      CFIndex v8 = 0;
      do
      {
        CFArrayGetValueAtIndex(v5, v8);
        if (FigCFEqual() || FigCFEqual())
        {
          CFArrayGetValueAtIndex(v4, v8);
          if (FigCFEqual()) {
            goto LABEL_15;
          }
        }
      }
      while (NumberOfCurrentOutputPorts != ++v8);
    }
    int v7 = 1;
  }
LABEL_16:
  ControllingRoutingSessiouint64_t n = CMSMUtility_GetControllingRoutingSession();
  if (ControllingRoutingSession)
  {
    [ControllingRoutingSession audioMode];
    if (FigCFEqual())
    {
      if (FigCFEqual()) {
        a1 = @"VideoChatForMedia";
      }
    }
  }
  long long v46 = 0u;
  long long v47 = 0u;
  long long v45 = 0u;
  CMSMUtility_GetCurrentRouteInfoAtIndex(0, &v45);
  if (!CMSMUtility_IsSiriControllingRoutingAndNotVolume())
  {
    SharePlayCapableActiveMediaSessiouint64_t n = CMSMUtility_GetSharePlayCapableActiveMediaSession();
    int v43 = v7;
    if (CMSMUtility_IsSharePlayCapableCallSessionActive()
      && SharePlayCapableActiveMediaSession
      && ([SharePlayCapableActiveMediaSession currentlyControllingFlags] & 0x10) != 0)
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFStringRef v41 = -[MXSessionManager getUncustomizedCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v34, v36), "getUncustomizedCategory:", [SharePlayCapableActiveMediaSession audioCategory]);
      uint64_t v19 = (const void *)[SharePlayCapableActiveMediaSession audioMode];
      long long v20 = v46;
      long long v21 = v45;
      unsigned int v22 = (const void *)v47;
      char v23 = byte_1E9359B80;
      char DoesPortSupportDoAP = vaeDoesPortSupportDoAP(DWORD2(v47));
      uint64_t VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
      PVMSetCurrentState(v41, v19, (void *)v21, (void *)v20, *((const void **)&v20 + 1), *((__CFString **)&v21 + 1), v22, v43, v23, DoesPortSupportDoAP, VolumeSequenceNumber);
    }
    else
    {
      float v40 = a1;
      if (dword_1E9359ED0)
      {
        CFDictionaryRef v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFStringRef v13 = [+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v34, v36) getUncustomizedCategory:[+[MXSessionManager sharedInstance] currentAudioCategory]];
      long long v14 = v46;
      long long v15 = v45;
      uint64_t v16 = (const void *)v47;
      char v17 = byte_1E9359B80;
      char v18 = vaeDoesPortSupportDoAP(DWORD2(v47));
      uint64_t v37 = CMSMUtility_GetVolumeSequenceNumber();
      PVMSetCurrentState(v13, v40, (void *)v15, (void *)v14, *((const void **)&v14 + 1), *((__CFString **)&v15 + 1), v16, v43, v17, v18, v37);
    }
    if (CMSMVAUtility_IsAdditiveRoutingEnabled())
    {
      id v25 = [+[MXAdditiveRoutingManager sharedInstance] copyActiveVoiceOverSessionPlayingToOnDemandVAD];
      if (v25)
      {
        uint64_t v26 = *((void *)&v45 + 1);
        long long v27 = v46;
        uint64_t v28 = v47;
        uint64_t v48 = *((void *)&v45 + 1);
        uint64_t v49 = v45;
        uint64_t v44 = v45;
        uint64_t v50 = *((void *)&v46 + 1);
        uint64_t v51 = v46;
        uint64_t v52 = v47;
        float v29 = PVMGetVolumePreference(@"VoiceOver", @"Default", (uint64_t)&v48);
        uint64_t v42 = CMSMUtility_GetVolumeSequenceNumber();
        if (dword_1E9359ED0)
        {
          unsigned int v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        [+[MXSessionManager sharedInstance] setVoiceOverVADVolumeNeedsUpdate:1];
        CFStringRef v31 = (const __CFString *)[v25 audioCategory];
        CFTypeRef v32 = (const void *)[v25 audioMode];
        uint64_t v48 = v26;
        uint64_t v49 = v44;
        uint64_t v50 = *((void *)&v27 + 1);
        uint64_t v51 = v27;
        uint64_t v52 = v28;
        if (PVMSetRawVolumePreference(v31, v32, (uint64_t)&v48, v42, 1, 0, v29))
        {
          CFTypeRef v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    vaemUpdatePVMSettingsForInputGain();
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void *CMSMUtility_GetSharePlayCapableActiveMediaSession()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!MX_FeatureFlags_IsSharePlayEnabled()) {
    return 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
LABEL_4:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v8 != v3) {
        objc_enumerationMutation(v0);
      }
      uint64_t v5 = *(void **)(*((void *)&v7 + 1) + 8 * v4);
      if ([v5 isActive])
      {
        if (CMSUtility_IsSharePlayCapableMediaSession(v5)) {
          break;
        }
      }
      if (v2 == ++v4)
      {
        uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          goto LABEL_4;
        }
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    uint64_t v5 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v5;
}

uint64_t CMSUtility_IsSharePlayCapableMediaSession(void *a1)
{
  uint64_t result = MX_FeatureFlags_IsSharePlayEnabled();
  if (result)
  {
    if ([a1 isSharePlayMediaSession]) {
      return FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent([a1 routingContextUUID]) == 0;
    }
    uint64_t result = (uint64_t)CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1);
    if (result) {
      return FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent([a1 routingContextUUID]) == 0;
    }
  }
  return result;
}

void vaemUpdatePVMSettingsForInputGain()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (CMSMUtility_GetNumberOfCurrentInputPorts() != 1 && byte_1E9358B8B)
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (uint64_t i = 0; i != v2; ++i)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v0);
          }
          uint64_t v5 = *(void **)(*((void *)&v7 + 1) + 8 * i);
          if ([v5 isActive]
            && ([v5 currentlyControllingFlags] & 2) != 0
            && [v5 desiredInputGainScalar])
          {
            objc_msgSend((id)objc_msgSend(v5, "desiredInputGainScalar"), "floatValue");
            vaemSetDeviceInputGainScalar(v6);
            [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
            return;
          }
        }
        uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    vaemSetInputGainFromPreferenceIfPresent();
  }
}

uint64_t vaemHandleVolumeControlDidChange(uint64_t result)
{
  if (byte_1E9359B80 != result)
  {
    int v1 = result;
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    byte_1E9359B80 = v1;
    return CMSMNotificationUtility_PostCurrentRouteHasVolumeControlDidChange(v1);
  }
  return result;
}

void vaemCurrentRouteHasVolumeControlListenerGuts()
{
  CurrentOutputuint64_t PortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  int PortTypeFromPortID = vaeGetPortTypeFromPortID(CurrentOutputPortAtIndex);
  if (PortTypeFromPortID != 1885433971 && PortTypeFromPortID != 1885433953)
  {
    BOOL HasVolumeControl = vaemCurrentRouteHasVolumeControl();
    vaemHandleVolumeControlDidChange(HasVolumeControl);
    return;
  }
  uint64_t CurrentDeviceIdentifierAtIndex = CMSMUtility_GetCurrentDeviceIdentifierAtIndex(0);
  uint64_t v4 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID(CurrentDeviceIdentifierAtIndex, 1, *MEMORY[0x1E4F20638], 0);
  CFBooleanRef v5 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
  CFBooleanRef v12 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
  if (v4)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    long long v10 = *(void (**)(uint64_t, void, void, const __CFBoolean **))(v8 + 48);
    if (v10)
    {
      v10(CMBaseObject, *MEMORY[0x1E4F21088], *MEMORY[0x1E4F1CF80], &v12);
      CFBooleanRef v5 = v12;
    }
    if (!v5) {
      goto LABEL_20;
    }
    uint64_t Value = CFBooleanGetValue(v5);
    vaemHandleVolumeControlDidChange(Value);
    CFBooleanRef v5 = v12;
  }
  if (v5)
  {
    CFRelease(v5);
    CFBooleanRef v12 = 0;
  }
  if (v4) {
LABEL_20:
  }
    CFRelease(v4);
}

BOOL vaemCurrentRouteHasVolumeControl()
{
  UInt32 ioDataSize = 4;
  int outData = 1;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"pscvptuo";
  inAddress.mElement = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData);
  return (PropertyData | outData) != 0;
}

uint64_t vaeDoesPortSupportDoAP(AudioObjectID a1)
{
  UInt32 ioDataSize = 4;
  int outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62646F6170;
  inAddress.mElement = 0;
  uint64_t result = AudioObjectHasProperty(a1, &inAddress);
  if (result)
  {
    OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
    uint64_t result = 0;
    if (!PropertyData) {
      return outData != 0;
    }
  }
  return result;
}

uint64_t PVMSetCurrentState(const __CFString *a1, const void *a2, void *a3, void *a4, const void *a5, __CFString *a6, const void *a7, int a8, char a9, char a10, uint64_t a11)
{
  cf[19] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v17 = PVMInitialize();
  CFTypeRef v62 = 0;
  cf[0] = 0;
  uint64_t v18 = sStorage;
  uint64_t v19 = *(const void **)(sStorage + 256);
  if (v19)
  {
    CFTypeRef v61 = CFRetain(v19);
    uint64_t v18 = sStorage;
  }
  else
  {
    CFTypeRef v61 = 0;
  }
  long long v20 = *(const void **)(v18 + 272);
  if (v20)
  {
    CFTypeRef v59 = CFRetain(v20);
    uint64_t v18 = sStorage;
  }
  else
  {
    CFTypeRef v59 = 0;
  }
  long long v21 = *(const void **)(v18 + 216);
  if (v21) {
    CFTypeRef v60 = CFRetain(v21);
  }
  else {
    CFTypeRef v60 = 0;
  }
  unsigned int v22 = @"Unspecified";
  if (!a6) {
    a6 = @"Unspecified";
  }
  uint64_t v23 = v17;
  if (!v17)
  {
    MEMORY[0x199716E90](*(void *)sStorage);
    pvmAssureCurrentCategoryAndDeviceRoute();
    if (a1)
    {
      MappedCategoryWithModeAppended = pvmGetMappedCategoryWithModeAppended(a1, a2);
      pvmCreateSeparateCategoryAndModeStrings(MappedCategoryWithModeAppended, cf, &v62);
    }
    if (FigCFEqual() && FigCFEqual())
    {
      int v56 = 0;
      int v55 = @"RouteChange";
    }
    else
    {
      id v25 = *(const void **)(sStorage + 216);
      CFTypeRef v26 = cf[0];
      *(CFTypeRef *)(sStorage + 216) = cf[0];
      if (v26) {
        CFRetain(v26);
      }
      if (v25) {
        CFRelease(v25);
      }
      long long v27 = *(const void **)(sStorage + 224);
      CFTypeRef v28 = v62;
      *(void *)(sStorage + 224) = v62;
      if (v28) {
        CFRetain(v28);
      }
      if (v27) {
        CFRelease(v27);
      }
      int v55 = @"CategoryChange";
      int v56 = 1;
    }
    float v29 = *(const void **)(sStorage + 232);
    *(void *)(sStorage + 232) = a1;
    if (a1) {
      CFRetain(a1);
    }
    if (v29) {
      CFRelease(v29);
    }
    unsigned int v30 = *(const void **)(sStorage + 240);
    *(void *)(sStorage + 240) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v30) {
      CFRelease(v30);
    }
    if (a3)
    {
      CFDictionaryRef v31 = *(const __CFDictionary **)(sStorage + 184);
      if (v31)
      {
        uint64_t Value = (void *)CFDictionaryGetValue(v31, a3);
        if (Value) {
          a3 = Value;
        }
      }
    }
    FigCFEqual();
    CFTypeRef v33 = *(const void **)(sStorage + 256);
    *(void *)(sStorage + 256) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v33) {
      CFRelease(v33);
    }
    uint64_t MappedRouteIdentifier = (const void *)pvmGetMappedRouteIdentifier(a4, a3);
    uint64_t v35 = (uint64_t)MappedRouteIdentifier;
    uint64_t v36 = *(const void **)(sStorage + 272);
    *(void *)(sStorage + 272) = MappedRouteIdentifier;
    if (MappedRouteIdentifier) {
      CFRetain(MappedRouteIdentifier);
    }
    if (v36) {
      CFRelease(v36);
    }
    if (a5
      && a3
      && ([a3 hasPrefix:@"HeadphonesBT"] & 1) == 0
      && ![a3 hasPrefix:@"HeadsetBT"])
    {
      uint64_t v37 = *(const void **)(sStorage + 264);
      *(void *)(sStorage + 264) = a5;
      CFRetain(a5);
    }
    else
    {
      a5 = 0;
      uint64_t v37 = *(const void **)(sStorage + 264);
      *(void *)(sStorage + 264) = 0;
    }
    if (v37) {
      CFRelease(v37);
    }
    uint64_t v38 = sStorage;
    *(unsigned char *)(sStorage + 300) = a9;
    *(unsigned char *)(v38 + 301) = a10;
    if (pvmSetCurrentRouteInfo((uint64_t)a6, (uint64_t)a3, (uint64_t)a5, v35, a7))
    {
      uint64_t v23 = 0xFFFFFFFFLL;
    }
    else
    {
      if (*(void *)(sStorage + 256)
        && !FigCFEqual()
        && !FigCFEqual()
        && !FigCFEqual())
      {
        CFAllocatorRef v39 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        MutableCFDictionaryRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 16, *(CFStringRef *)(sStorage + 256));
        uint64_t v41 = sStorage;
        if (*(void *)(sStorage + 120)
          || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v39, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
              uint64_t v41 = sStorage,
              (*(void *)(sStorage + 120) = Mutable) != 0))
        {
          if (*(void *)(v41 + 264))
          {
            CFStringAppend(MutableCopy, @"~");
            CFStringAppend(MutableCopy, *(CFStringRef *)(sStorage + 264));
            uint64_t v41 = sStorage;
          }
          if (*(void *)(v41 + 272))
          {
            CFStringAppend(MutableCopy, @"~");
            CFStringAppend(MutableCopy, *(CFStringRef *)(sStorage + 272));
            uint64_t v41 = sStorage;
          }
          int v43 = CFDictionaryContainsKey(*(CFDictionaryRef *)(v41 + 120), MutableCopy);
          int v44 = FigCFEqual();
          if (!v43 || !v44)
          {
            unsigned int v22 = *(__CFString **)(sStorage + 248);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(sStorage + 120), MutableCopy, v22);
            *(unsigned char *)(sStorage + 128) = 1;
            pvmWritePrefs();
          }
        }
        else
        {
          FigSignalErrorAt();
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
      }
      if (v22) {
        CFRelease(v22);
      }
      *(unsigned char *)(sStorage + 288) = FigCFEqual();
      *(unsigned char *)(sStorage + 289) = FigCFEqual();
      if (FigCFEqual()) {
        BOOL v45 = FigCFEqual() == 0;
      }
      else {
        BOOL v45 = 1;
      }
      int v46 = FigCFEqual();
      uint64_t v47 = sStorage;
      if ((v45 || !v46) && *(float *)(sStorage + 92) < 1.0)
      {
        if (dword_1E9359D38)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v49 = +[MXPreferredVolumeManager sharedInstance];
        LODWORD(v50) = *(_DWORD *)(sStorage + 292);
        [(MXPreferredVolumeManager *)v49 postNotification:@"PVMStateDidChange" category:0 mode:0 volume:1 rampUpwardDuration:0 rampDownwardDuration:0 silenceVolumeHUD:v50 reason:0.0 refCon:0.0 sequenceNumber:0];
        uint64_t v47 = sStorage;
      }
      int v51 = v56;
      if (!*(unsigned char *)(v47 + 288)) {
        int v51 = 1;
      }
      if (a8 || v51) {
        pvmUpdatePreferredVolumeAndLimit((uint64_t)v55, 0, *(const __CFString **)(v47 + 216), *(const void **)(v47 + 224), 0, 1, a11, 0.0, 0.0);
      }
      uint64_t v23 = 0;
    }
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v62) {
    CFRelease(v62);
  }
  if (v61) {
    CFRelease(v61);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (!v17) {
    MEMORY[0x199716EA0](*(void *)sStorage);
  }
  return v23;
}

uint64_t pvmSetCurrentRouteInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef cf)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  CFBooleanRef v5 = (void *)sStorage;
  *(void *)(sStorage + 248) = a1;
  v5[32] = a2;
  v5[33] = a3;
  v5[34] = a4;
  float v6 = (const void *)v5[35];
  v5[35] = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  return 0;
}

uint64_t CMSMUtility_GetVolumeSequenceNumber()
{
  return FigAtomicIncrement64();
}

uint64_t CMSMUtility_GetNumberOfCurrentInputPorts()
{
  return dword_1E9359BC4;
}

uint64_t CMSMUtility_GetCurrentRouteInfoAtIndex@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  MEMORY[0x199716E90](gCMSM);
  if (dword_1E9359BC0 > a1)
  {
    MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, a1, (uint64_t)v6);
    long long v4 = v6[1];
    *a2 = v6[0];
    a2[1] = v4;
    a2[2] = v6[2];
  }
  return MEMORY[0x199716EA0](gCMSM);
}

__CFArray *CMSMUtility_CopyCurrentRouteIdentifiers()
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  MEMORY[0x199716E90](gCMSM);
  if (dword_1E9359BC0)
  {
    unint64_t v1 = 0;
    do
    {
      MXVW_GetCMSRouteInfoAt((void *)qword_1E9359BB8, v1, (uint64_t)&v4);
      if (v5) {
        uint64_t v2 = v5;
      }
      else {
        uint64_t v2 = &stru_1EE5E8D28;
      }
      CFArrayAppendValue(Mutable, v2);
      ++v1;
    }
    while (v1 < dword_1E9359BC0);
  }
  MEMORY[0x199716EA0](gCMSM);
  return Mutable;
}

void *CMSMUtility_GetSharePlayCapableActiveCallSession()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!MX_FeatureFlags_IsSharePlayEnabled()) {
    return 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v8;
LABEL_4:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v8 != v3) {
        objc_enumerationMutation(v0);
      }
      CFBooleanRef v5 = *(void **)(*((void *)&v7 + 1) + 8 * v4);
      if (CMSUtility_GetIsActive(v5))
      {
        if ([v5 isSharePlayCapableCallSession]) {
          break;
        }
      }
      if (v2 == ++v4)
      {
        uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          goto LABEL_4;
        }
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    CFBooleanRef v5 = 0;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v5;
}

void __volumeControllerRemote_ensureClientEstablished_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v1 = objc_msgSend(v0, "initWithObjectsAndKeys:", @"VolumeController_ServerConnectionDied", *MEMORY[0x1E4F22080], 0);
  volumeControllerRemote_ensureClientEstablished_err = FigXPCRemoteClientCreate();
}

uint64_t MXCoreSessionSetProperty(void *a1, __CFString *cf1, NSDictionary *a3, void *a4)
{
  uint64_t v562 = *MEMORY[0x1E4F143B8];
  if (!cf1)
  {
LABEL_79:
    return FigSignalErrorAt();
  }
  uint64_t v4 = cf1;
  char v532 = 0;
  v530 = (NSDictionary *)*MEMORY[0x1E4F1CFD0];
  v529 = (NSDictionary *)*MEMORY[0x1E4F1CFC8];
  while (1)
  {
    CFBooleanRef v5 = a4;
    if (CFEqual(v4, @"AirPlayVideoIsActive"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v11 = CFGetTypeID(a3);
          if (v11 == CFBooleanGetTypeID())
          {
            CMSUtility_SetAirPlayVideoIsActive(a1, (const char *)(v530 == a3));
            uint64_t v12 = MXGetSerialQueue();
            CFStringRef v13 = &__block_literal_global_155;
            uint64_t v14 = 8247;
            goto LABEL_391;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"AllowMixableAudioWhileRecording"))
    {
      if (a1)
      {
        if ([a1 isTheAssistant])
        {
          if (a3)
          {
            CFTypeID v15 = CFGetTypeID(a3);
            if (v15 == CFBooleanGetTypeID())
            {
              int Value = CFBooleanGetValue((CFBooleanRef)a3);
              if (Value != [a1 allowMixableAudioWhileRecording])
              {
                [a1 setAllowMixableAudioWhileRecording:Value != 0];
                return 0;
              }
              goto LABEL_1000;
            }
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"AudioOnlyAirPlayVideoIsActive"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v17 = CFGetTypeID(a3);
          if (v17 == CFBooleanGetTypeID())
          {
            CMSUtility_SetAudioOnlyAirPlayVideoIsActive(a1, (const char *)(v530 == a3));
            uint64_t v12 = MXGetSerialQueue();
            CFStringRef v13 = &__block_literal_global_157;
            uint64_t v14 = 8282;
            goto LABEL_391;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"AuditToken"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v18 = CFGetTypeID(a3);
      if (v18 != CFDataGetTypeID()) {
        goto LABEL_1536;
      }
      *(_OWORD *)audit_token_t buffer = 0u;
      long long v549 = 0u;
      v564.id location = 0;
      v564.length = 32;
      CFDataGetBytes((CFDataRef)a3, v564, buffer);
      *(_OWORD *)v543 = *(_OWORD *)buffer;
      *(_OWORD *)&v543[16] = v549;
      [a1 setAuditToken:v543];
      [a1 setAuditTokenSetByClient:1];
      if (!MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled()) {
        return 0;
      }
LABEL_100:
      MX_SystemStatus_PublishRecordingClientsInfo();
      return 0;
    }
    if (CFEqual(v4, @"AllowSystemSoundsWhileRecording"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v19 = CFGetTypeID(a3), v19 == CFBooleanGetTypeID()))
        {
          if (dword_1E9359ED0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (a3) {
            BOOL v122 = v530 == a3;
          }
          else {
            BOOL v122 = 0;
          }
          uint64_t v123 = v122;
          objc_msgSend(a1, "setAllowSystemSoundsWhileRecording:", v123, v523, v526);
          uint64_t v12 = MXGetSerialQueue();
          CFStringRef v13 = &__block_literal_global_160;
          uint64_t v14 = 8321;
          goto LABEL_391;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"ClientName"))
    {
      if (a1)
      {
        CFTypeID v21 = CFGetTypeID(a3);
        if (v21 == CFStringGetTypeID())
        {
          [a1 updateClientName:a3];
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"ClientPID"))
    {
      if (a1)
      {
        uint64_t IsPlaying = cmsSetClientPID(a1, a3);
        goto LABEL_1537;
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"ClientSecTask"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v23 = CFGetTypeID(a3), v23 == SecTaskGetTypeID()))
        {
          CMSUtility_FetchSessionEntitlements(a1, (__SecTask *)a3);
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"DisallowAudioFormatChanges"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v24 = CFGetTypeID(a3), v24 == CFBooleanGetTypeID()))
        {
          uint64_t v25 = FigCFEqual();
          int v26 = v25;
          vaemUpdateDisallowAudioFormatChanges(v25);
          [a1 setDisallowAudioFormatChanges:v26 != 0];
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"DoesInterAppAudio"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v27 = CFGetTypeID(a3), v27 == CFBooleanGetTypeID()))
        {
          [a1 setDoesInterAppAudio:v530 == a3];
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"DoNotNotifyOtherSessionsOnNextInactive"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v28 = CFGetTypeID(a3), v28 == CFBooleanGetTypeID()))
        {
          if (a3) {
            BOOL v29 = v530 == a3;
          }
          else {
            BOOL v29 = 0;
          }
          uint64_t v30 = v29;
          [a1 setDoNotNotifyOtherSessionsOnNextInactive:v30];
          if ([a1 doNotNotifyOtherSessionsOnNextInactive])
          {
            [a1 setNotFullyInactive:1];
            return 0;
          }
          goto LABEL_1000;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"DoNotResetAudioCategoryOnNextInactive"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v31 = CFGetTypeID(a3), v31 == CFBooleanGetTypeID()))
        {
          if (a3) {
            BOOL v32 = v530 == a3;
          }
          else {
            BOOL v32 = 0;
          }
          uint64_t v33 = v32;
          [a1 setDoNotResetAudioCategoryOnNextInactive:v33];
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"DuckFadeDuration"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      uint64_t updated = (uint64_t)a3;
      if (!a3)
      {
        [a1 setDuckFadeDurationSetByClient:0];
        LODWORD(v102) = 0.5;
        [a1 setDuckFadeDuration:v102];
        goto LABEL_1001;
      }
      CFTypeID v35 = CFGetTypeID(a3);
      if (v35 != CFNumberGetTypeID()) {
        goto LABEL_1536;
      }
      *(_DWORD *)audit_token_t buffer = 1056964608;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
      LODWORD(v36) = *(_DWORD *)buffer;
      if (*(float *)buffer >= 0.0)
      {
        if (*(float *)buffer > 5.0)
        {
          *(_DWORD *)audit_token_t buffer = 1084227584;
          LODWORD(v36) = 5.0;
        }
        [a1 setDuckFadeDuration:v36];
        [a1 setDuckFadeDurationSetByClient:1];
        goto LABEL_1000;
      }
LABEL_1492:
      uint64_t v235 = FigSignalErrorAt();
LABEL_1493:
      uint64_t updated = v235;
      goto LABEL_1001;
    }
    if (CFEqual(v4, @"DuckToLevelDB"))
    {
      if (a1)
      {
        if (!a3)
        {
          [a1 setDuckToLevelDBSetByClient:0];
          LODWORD(v106) = -1038090240;
          [a1 setDuckToLevelDB:v106];
          goto LABEL_1000;
        }
        CFTypeID v37 = CFGetTypeID(a3);
        if (v37 == CFNumberGetTypeID())
        {
          if ([a1 duckToLevelScalarSetByClient])
          {
            uint64_t updated = 4294954311;
            goto LABEL_1001;
          }
          if (([a1 unduckToLevelScalarSetByClient] & 1) == 0)
          {
            *(_DWORD *)audit_token_t buffer = -1038090240;
            CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
            LODWORD(v38) = *(_DWORD *)buffer;
            [a1 setDuckToLevelDB:v38];
            [a1 setDuckToLevelDBSetByClient:1];
            return 0;
          }
LABEL_652:
          uint64_t updated = 4294951611;
          goto LABEL_1001;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"DuckToLevelScalar"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      [a1 duckToLevelScalar];
      int v40 = v39;
      uint64_t v41 = [a1 duckToLevelScalarSetByClient];
      if (a3)
      {
        CFTypeID v42 = CFGetTypeID(a3);
        if (v42 != CFNumberGetTypeID()) {
          goto LABEL_1536;
        }
        if ([a1 duckToLevelDBSetByClient]) {
          goto LABEL_652;
        }
        FigCFNumberGetFloat32();
        if (v43 < 0.0) {
          goto LABEL_1536;
        }
        int v44 = LODWORD(v43);
        if (v43 > 1.0) {
          goto LABEL_1536;
        }
        if (dword_1E9359ED0)
        {
LABEL_164:
          LODWORD(valuePtr) = 0;
          BOOL v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        int v44 = 1045220557;
        if (dword_1E9359ED0) {
          goto LABEL_164;
        }
      }
      BOOL v169 = a3 != 0;
      v170 = +[MXSessionManager sharedInstance];
      uint64_t v173 = 1;
LABEL_617:
      LODWORD(v171) = v44;
      LODWORD(v172) = v40;
      uint64_t IsPlaying = [(MXSessionManager *)v170 updateDuckToLevelScalarSetByClient:v173 session:a1 newLevel:v169 newLevelSetByClient:v41 currentLevel:v171 currentLevelSetByClient:v172];
      goto LABEL_1537;
    }
    if (CFEqual(v4, @"ForceSoundCheck"))
    {
      if (a3)
      {
        CFTypeID v46 = CFGetTypeID(a3);
        if (v46 != CFBooleanGetTypeID()) {
          goto LABEL_1536;
        }
        int v47 = CFBooleanGetValue((CFBooleanRef)a3);
      }
      else
      {
        int v47 = 0;
      }
      if (a1)
      {
        if (v47 != [a1 forceSoundCheck])
        {
          [a1 setForceSoundCheck:v47 != 0];
          CMSMNotificationUtility_PostForceSoundCheckDidChange(v47, objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"));
          return 0;
        }
        goto LABEL_1000;
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"HandsOverInterruptionsToInterruptor"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v48 = CFGetTypeID(a3);
          if (v48 == CFNumberGetTypeID() || (CFTypeID v49 = CFGetTypeID(a3), v49 == CFBooleanGetTypeID()))
          {
            [a1 setHandsOverInterruptionsToInterruptor:CFBooleanGetValue((CFBooleanRef)a3) != 0];
            return 0;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"HostProcessAttribution"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v50 = CFGetTypeID(a3), v50 == CFArrayGetTypeID()))
        {
          if (dword_1E9359ED0)
          {
            int v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v155 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "hostProcessAttribution", v523, v526), "firstObject"), "valueForKey:", @"BundleID");
          [a1 setHostProcessAttribution:a3];
          uint64_t v156 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "hostProcessAttribution"), "firstObject"), "valueForKey:", @"BundleID");
          if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
            && [a1 isActive]
            && MX_FeatureFlags_IsCallManagementMuteControlEnabled())
          {
            if (v155)
            {
              if (v156)
              {
                if (([v155 isEqualToString:v156] & 1) == 0)
                {
                  if ([(NSSet *)[+[MXSessionManager sharedInstance] mutedSessionBundleIDs] containsObject:v155])
                  {
                    [+[MXSessionManager sharedInstance] updateMutedBundleIDs:v155 muteValue:0];
                    [+[MXSessionManager sharedInstance] updateMutedBundleIDs:v156 muteValue:1];
                    if (dword_1E9359ED0)
                    {
                      uint64_t v157 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                  }
                }
              }
            }
            [+[MXSessionManager sharedInstance] replaceMutedBundleIDwithHostID];
          }
          if (MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled()) {
            MX_SystemStatus_PublishRecordingClientsInfo();
          }
          if ([a1 isRecording])
          {
            CMSMUtility_UpdateRecordingAccessIntervals(a1);
            return 0;
          }
          goto LABEL_1000;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"IAmIDSMXCoreSession"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (a3)
      {
        CFTypeID v52 = CFGetTypeID(a3);
        if (v52 != CFBooleanGetTypeID()) {
          goto LABEL_1536;
        }
        if (CFBooleanGetValue((CFBooleanRef)a3))
        {
          [a1 setIsIDSMXCoreSession:1];
          return 0;
        }
      }
      [a1 setIsIDSMXCoreSession:0];
      goto LABEL_1000;
    }
    if (CFEqual(v4, @"IAmHardwareSafetySession"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v53 = CFGetTypeID(a3);
          if (v53 == CFBooleanGetTypeID())
          {
            [a1 setIsHardwareSafetySession:FigCFEqual() != 0];
            return 0;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"IAmCar"))
    {
      if (a1)
      {
        if (!a3)
        {
          MEMORY[0x199716E90](gCMSM);
          goto LABEL_398;
        }
        CFTypeID v54 = CFGetTypeID(a3);
        if (v54 == CFBooleanGetTypeID())
        {
          MEMORY[0x199716E90](gCMSM);
          if (CFBooleanGetValue((CFBooleanRef)a3))
          {
            byte_1E9359CD1 = 0;

            qword_1E9359C68 = a1;
            [a1 setIsCarSession:1];
LABEL_400:
            MEMORY[0x199716EA0](gCMSM);
            return 0;
          }
LABEL_398:

          qword_1E9359C68 = 0;
          [a1 setIsCarSession:0];
          if (!byte_1E9359CD1) {
            CMSMNP_SaveCarPlayNowPlayingState();
          }
          goto LABEL_400;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"IAmTheAssistant"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (a3)
      {
        CFTypeID v55 = CFGetTypeID(a3);
        if (v55 != CFBooleanGetTypeID()) {
          goto LABEL_1536;
        }
      }
      if ([a1 hasEntitlementToShowMicrophoneIndicatorWhileNotRecording]
        && [a1 wantsToShowMicrophoneIndicatorWhenNotRecording])
      {
        goto LABEL_197;
      }
      if (a3)
      {
        BOOL v76 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
        if ([a1 isTheAssistant] == v76) {
          goto LABEL_1000;
        }
      }
      else
      {
        BOOL v76 = 0;
        uint64_t updated = 0;
        if (([a1 isTheAssistant] & 1) == 0) {
          goto LABEL_1001;
        }
      }
      [a1 setIsTheAssistant:v76];
      if ([a1 isTheAssistant]) {
        [a1 setHandsOverInterruptionsToInterruptor:1];
      }
      int v149 = a1;
LABEL_474:
      if ([v149 isActive]) {
        goto LABEL_577;
      }
      goto LABEL_1000;
    }
    if (CFEqual(v4, @"InterruptionFadeDuration"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      uint64_t updated = (uint64_t)a3;
      if (!a3)
      {
        [a1 setInterruptionFadeDurationSetByClient:0];
        LODWORD(v129) = *(_DWORD *)"333?";
        [a1 setInterruptionFadeDuration:v129];
        goto LABEL_1001;
      }
      CFTypeID v57 = CFGetTypeID(a3);
      if (v57 != CFNumberGetTypeID()) {
        goto LABEL_1536;
      }
      *(_DWORD *)audit_token_t buffer = 1060320051;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
      LODWORD(v58) = *(_DWORD *)buffer;
      if (*(float *)buffer < 0.0) {
        goto LABEL_1492;
      }
      if (*(float *)buffer > 5.0)
      {
        *(_DWORD *)audit_token_t buffer = 1084227584;
        LODWORD(v58) = 5.0;
      }
      [a1 setInterruptionFadeDuration:v58];
      [a1 setInterruptionFadeDurationSetByClient:1];
      goto LABEL_1000;
    }
    if (CFEqual(v4, @"IsAirPlayReceiverSession"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v59 = CFGetTypeID(a3);
          if (v59 == CFBooleanGetTypeID())
          {
            int v60 = CFBooleanGetValue((CFBooleanRef)a3);
            if (dword_1E9359ED0)
            {
              CFTypeRef v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            objc_msgSend(a1, "setIsAirPlayReceiverSession:", v60 != 0, v523, v526);
            return 0;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"IsAudioSession"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v62 = CFGetTypeID(a3), v62 == CFBooleanGetTypeID()))
        {
          if (a3) {
            BOOL v63 = v530 == a3;
          }
          else {
            BOOL v63 = 0;
          }
          uint64_t v64 = v63;
          [a1 setIsAudioSession:v64];
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"IsEligibleForNowPlayingAppConsideration"))
    {
      if (a1)
      {
        CFTypeID v65 = CFGetTypeID(a3);
        if (v65 == CFBooleanGetTypeID())
        {
          [a1 setIsEligibleForNowPlayingAppConsideration:v530 == a3];
          if (([a1 isEligibleForNowPlayingAppConsideration] & 1) == 0)
          {
            [a1 setBadgeType:@"NotApplicable"];
            objc_msgSend(a1, "setSupportedOutputChannelLayouts:", objc_msgSend(MEMORY[0x1E4F1C978], "array"));
            return 0;
          }
          goto LABEL_1000;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"IsFigInstantiatedAudioSession"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v66 = CFGetTypeID(a3), v66 == CFBooleanGetTypeID()))
        {
          if (a3) {
            BOOL v67 = v530 == a3;
          }
          else {
            BOOL v67 = 0;
          }
          uint64_t v68 = v67;
          [a1 setIsFigInstantiatedAudioSession:v68];
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"IsLongFormAudio")) {
      goto LABEL_1000;
    }
    if (CFEqual(v4, @"IsSharedAVAudioSessionInstance"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v69 = CFGetTypeID(a3);
          if (v69 == CFBooleanGetTypeID())
          {
            [a1 setIsSharedAVAudioSessionInstance:CFBooleanGetValue((CFBooleanRef)a3) != 0];
            return 0;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"IsSharePlayCapableCallSession"))
    {
      if (!MX_FeatureFlags_IsSharePlayEnabled()) {
        goto LABEL_1000;
      }
      if (a1)
      {
        if (a3)
        {
          CFTypeID v70 = CFGetTypeID(a3);
          if (v70 == CFBooleanGetTypeID())
          {
            uint64_t v71 = [a1 audioCategory];
            [a1 audioMode];
            if (CMSMUtility_AreCategoryAndModeValidForSharePlayCallSession(v71))
            {
              int v72 = CFBooleanGetValue((CFBooleanRef)a3);
              if (v72 == [a1 isSharePlayCapableCallSession]) {
                goto LABEL_1000;
              }
              [a1 setIsSharePlayCapableCallSession:v72 != 0];
              if (!dword_1E9359ED0) {
                goto LABEL_1000;
              }
              goto LABEL_469;
            }
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"IsUsingBuiltInMicForRecording"))
    {
      if (a1)
      {
        if ([a1 hasEntitlementToSetIsUsingBuiltInMicForRecording])
        {
          if (a3)
          {
            CFTypeID v73 = CFGetTypeID(a3);
            if (v73 == CFBooleanGetTypeID() && ([a1 isTheAssistant] & 1) != 0)
            {
              int v74 = FigCFEqual();
              if ((v74 != 0) == [a1 isUsingBuiltInMicForRecording]) {
                goto LABEL_1000;
              }
              [a1 setIsUsingBuiltInMicForRecording:v74 != 0];
              if (dword_1E9359ED0)
              {
                uint64_t v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              MX_SystemStatus_PublishRecordingClientsInfo();
              uint64_t updated = [+[MXExclaves sharedInstance] updateSensorStatus:a1 reason:@"IsUsingBuiltInMicForRecording property has changed"];
              if (!updated) {
                goto LABEL_1001;
              }
              v183 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              [a1 setIsUsingBuiltInMicForRecording:v74 == 0];
LABEL_563:
              MX_SystemStatus_PublishRecordingClientsInfo();
              goto LABEL_1001;
            }
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"IsUsingCamera"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v77 = CFGetTypeID(a3);
          if (v77 == CFBooleanGetTypeID())
          {
            [a1 setIsUsingCamera:v530 == a3];
            return 0;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"MicrophoneAttribution"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v78 = CFGetTypeID(a3);
          if (v78 == CFBooleanGetTypeID())
          {
            if (([a1 isTheAssistant] & 1) == 0
              || [a1 prefersSuppressingRecordingState])
            {
LABEL_197:
              int v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              if (v532) {
                return 0;
              }
              return 4294951611;
            }
            if ([a1 hasEntitlementToShowMicrophoneIndicatorWhileNotRecording])
            {
              int v162 = FigCFEqual();
              if (dword_1E9359ED0)
              {
                v163 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              objc_msgSend(a1, "setWantsToShowMicrophoneIndicatorWhenNotRecording:", v162 != 0, v523, v526);
              MX_SystemStatus_PublishRecordingClientsInfo();
              uint64_t updated = [+[MXExclaves sharedInstance] updateSensorStatus:a1 reason:@"MicrophoneAttribution property has changed"];
              if (!updated) {
                goto LABEL_1001;
              }
              v200 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              [a1 setWantsToShowMicrophoneIndicatorWhenNotRecording:v162 == 0];
              goto LABEL_563;
            }
            v182 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            if (v532) {
              return 0;
            }
            return 4294954308;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"NeroSuspended"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v79 = CFGetTypeID(a3);
          if (v79 == CFBooleanGetTypeID())
          {
            [+[MXSessionManager sharedInstance] updateNeroScreenState:a1 suspendScreen:CFBooleanGetValue((CFBooleanRef)a3) != 0];
            return 0;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"OptOutOfMutePriority"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v80 = CFGetTypeID(a3);
          if (v80 == CFBooleanGetTypeID())
          {
            int v81 = CFBooleanGetValue((CFBooleanRef)a3);
            if (CMSUtility_GetOptOutOfMutePriority(a1) == v81) {
              goto LABEL_1000;
            }
            [a1 setOptOutOfMutePriority:v81 != 0];
            if (dword_1E9359ED0)
            {
              uint64_t v82 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v12 = MXGetSerialQueue();
            CFStringRef v13 = &__block_literal_global_169;
            uint64_t v14 = 8838;
LABEL_391:
            MXDispatchAsync((uint64_t)"MXCoreSessionSetProperty", (uint64_t)"CMSessionManager.m", v14, 0, 0, v12, (uint64_t)v13);
            return 0;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"PrefersBluetoothAccessoryMuting"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v83 = CFGetTypeID(a3);
      if (v83 != CFBooleanGetTypeID()) {
        goto LABEL_1536;
      }
      int v84 = CFBooleanGetValue((CFBooleanRef)a3);
      if (!MX_FeatureFlags_IsCallManagementMuteControlEnabled()) {
        goto LABEL_1000;
      }
      if ((v84 != 0) == [a1 prefersBluetoothAccessoryMuting]) {
        goto LABEL_1000;
      }
      [a1 setPrefersBluetoothAccessoryMuting:v84 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
      goto LABEL_469;
    }
    if (CFEqual(v4, @"PrefersConcurrentAirPlayAudio"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v85 = CFGetTypeID(a3);
          if (v85 == CFBooleanGetTypeID())
          {
            int v86 = CFBooleanGetValue((CFBooleanRef)a3);
            if ([a1 prefersConcurrentAirPlayAudio] != (v86 != 0))
            {
              [a1 setPrefersConcurrentAirPlayAudio:v86 != 0];
              if (dword_1E9359ED0)
              {
                int v87 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              CMSMNotificationUtility_PostSessionPrefersConcurrentAirPlayAudioDidChange(a1);
              return 0;
            }
            goto LABEL_1000;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"PrefersInterruptionOnRouteDisconnect"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v88 = CFGetTypeID(a3);
          if (v88 == CFBooleanGetTypeID())
          {
            int v89 = CFBooleanGetValue((CFBooleanRef)a3);
            if (dword_1E9359ED0)
            {
              LODWORD(valuePtr) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              int v90 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v175 = a1;
            if ((v89 != 0) != objc_msgSend(a1, "prefersInterruptionOnRouteDisconnect", v523, v526))
            {
              [a1 setPrefersInterruptionOnRouteDisconnect:v89 != 0];
              if ([a1 isActive])
              {
                id v176 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
                objc_msgSend(v176, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", objc_msgSend(a1, "prefersInterruptionOnRouteDisconnect")), 0x1EE5F0C68);
                long long v541 = 0u;
                long long v542 = 0u;
                long long v539 = 0u;
                long long v540 = 0u;
                v177 = (void *)[a1 reporterIDs];
                uint64_t v178 = [v177 countByEnumeratingWithState:&v539 objects:v561 count:16];
                if (v178)
                {
                  uint64_t v179 = v178;
                  uint64_t v180 = *(void *)v540;
                  do
                  {
                    for (uint64_t i = 0; i != v179; ++i)
                    {
                      if (*(void *)v540 != v180) {
                        objc_enumerationMutation(v177);
                      }
                      off_1E9359D10([*(id *)(*((void *)&v539 + 1) + 8 * i) longValue], v176, 1, 5);
                    }
                    uint64_t v179 = [v177 countByEnumeratingWithState:&v539 objects:v561 count:16];
                  }
                  while (v179);
                }

                v175 = a1;
              }
            }
            [v175 setPrefersInterruptionOnRouteDisconnectSetByClient:1];
            return 0;
          }
          goto LABEL_1536;
        }
        if (dword_1E9359ED0)
        {
          v161 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_msgSend(a1, "setPrefersInterruptionOnRouteDisconnect:", 0, v523, v526);
        [a1 setPrefersInterruptionOnRouteDisconnectSetByClient:0];
        goto LABEL_1000;
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"PrefersNoDucking"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v91 = CFGetTypeID(a3);
      if (v91 != CFBooleanGetTypeID()) {
        goto LABEL_1536;
      }
      int v92 = CFBooleanGetValue((CFBooleanRef)a3);
      if (CMSUtility_GetPrefersNoDucking(a1) == v92) {
        goto LABEL_1000;
      }
      if (CMSUtility_GetIsActive(a1)) {
        goto LABEL_1000;
      }
      [a1 setPrefersNoDucking:v92 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
      goto LABEL_469;
    }
    if (CFEqual(v4, @"PrefersNoInterruptions"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v93 = CFGetTypeID(a3);
      if (v93 != CFBooleanGetTypeID()) {
        goto LABEL_1536;
      }
      if ([a1 isActive])
      {
LABEL_567:
        v184 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (v532) {
          return 0;
        }
        return 4294951611;
      }
      if (([a1 hasEntitlementToSetPrefersNoInterruptions] & 1) == 0)
      {
        v166 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (v532) {
          return 0;
        }
        return 4294954308;
      }
      int v147 = CFBooleanGetValue((CFBooleanRef)a3);
      if ((v147 != 0) == [a1 prefersNoInterruptions]) {
        goto LABEL_1000;
      }
      [a1 setPrefersNoInterruptions:v147 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
      goto LABEL_469;
    }
    if (CFEqual(v4, @"PrefersNoInterruptionsByMixableSessions"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v94 = CFGetTypeID(a3);
      if (v94 != CFBooleanGetTypeID()) {
        goto LABEL_1536;
      }
      [a1 audioMode];
      if (!FigCFEqual()) {
        goto LABEL_1536;
      }
      int v95 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v95 == [a1 prefersNoInterruptionsByMixableSessions]) {
        goto LABEL_1000;
      }
      [a1 setPrefersNoInterruptionsByMixableSessions:v95 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
      goto LABEL_469;
    }
    if (CFEqual(v4, @"PrefersNoInterruptionsDuringRemoteDeviceControl"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v96 = CFGetTypeID(a3);
          if (v96 == CFBooleanGetTypeID())
          {
            if (MX_FeatureFlags_IsOnenessEnabled())
            {
              int v97 = CFBooleanGetValue((CFBooleanRef)a3);
              if ((v97 != 0) != [a1 prefersNoInterruptionsDuringRemoteDeviceControl])
              {
                if (dword_1E9359ED0)
                {
                  uint64_t v98 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                BOOL v29 = v97 == 0;
                BOOL v186 = v97 == 0;
                uint64_t v187 = !v29;
                objc_msgSend(a1, "setPrefersNoInterruptionsDuringRemoteDeviceControl:", v187, v523, v526);
                [a1 setShouldMuteBeAppliedToRemoteDevice:v186];
                return 0;
              }
              goto LABEL_1000;
            }
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"PrefersSpeechDetectEnabled"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v99 = CFGetTypeID(a3);
          if (v99 == CFBooleanGetTypeID())
          {
            int v100 = CFBooleanGetValue((CFBooleanRef)a3);
            if (dword_1E9359ED0)
            {
              char v101 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if ((v100 != 0) != objc_msgSend(a1, "prefersSpeechDetectEnabled", v523, v526))
            {
              [a1 setPrefersSpeechDetectEnabled:v100 != 0];
              CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
            }
            goto LABEL_1000;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"PrefersBeingInterruptedByNextActiveRecordingClient"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v103 = CFGetTypeID(a3);
      if (v103 != CFBooleanGetTypeID()) {
        goto LABEL_1536;
      }
      int v104 = CFBooleanGetValue((CFBooleanRef)a3);
      if ([a1 prefersBeingInterruptedByNextActiveRecordingClient] == (v104 != 0)) {
        goto LABEL_1000;
      }
      [a1 setPrefersBeingInterruptedByNextActiveRecordingClient:v104 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
      goto LABEL_333;
    }
    if (CFEqual(v4, @"PrefersToOptOutOfHardwareSafetyInterruptions"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v107 = CFGetTypeID(a3);
      if (v107 != CFBooleanGetTypeID()
        || ([a1 hasEntitlementToSetPrefersToOptOutOfHardwareSafetyInterruptions] & 1) == 0)
      {
        goto LABEL_1536;
      }
      int v108 = CFBooleanGetValue((CFBooleanRef)a3);
      if ([a1 prefersToOptOutOfHardwareSafetyInterruptions] == (v108 != 0)) {
        goto LABEL_1000;
      }
      [a1 setPrefersToOptOutOfHardwareSafetyInterruptions:v108 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
      goto LABEL_469;
    }
    if (CFEqual(v4, @"PrefersToPlayDuringWombat"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v109 = CFGetTypeID(a3);
      if (v109 != CFBooleanGetTypeID()) {
        goto LABEL_1536;
      }
      int v110 = CFBooleanGetValue((CFBooleanRef)a3);
      if ([a1 prefersToPlayDuringWombat] == (v110 != 0)) {
        goto LABEL_1000;
      }
      [a1 setPrefersToPlayDuringWombat:v110 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
      goto LABEL_469;
    }
    if (CFEqual(v4, @"PrefersToTakeHWControlFlagsFromAnotherSession"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v111 = CFGetTypeID(a3);
      if (v111 != CFBooleanGetTypeID()) {
        goto LABEL_1536;
      }
      int v112 = CFBooleanGetValue((CFBooleanRef)a3);
      if (CMSUtility_GetPrefersToTakeHWControlFlagsFromAnotherSession(a1) == v112) {
        goto LABEL_1000;
      }
      [a1 setPrefersToTakeHWControlFlagsFromAnotherSession:v112 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
      LODWORD(valuePtr) = 0;
      long long v113 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT);
      goto LABEL_591;
    }
    if (CFEqual(v4, @"PrefersToVibeWhenVibrationsAreDisabled"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v114 = CFGetTypeID(a3);
      if (v114 != CFBooleanGetTypeID()) {
        goto LABEL_1536;
      }
      int v115 = CFBooleanGetValue((CFBooleanRef)a3);
      if (v115 == [a1 prefersToVibeWhenVibrationsAreDisabled]) {
        goto LABEL_1000;
      }
      [a1 setPrefersToVibeWhenVibrationsAreDisabled:v115 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
LABEL_469:
      LODWORD(valuePtr) = 0;
      long long v148 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT);
      goto LABEL_591;
    }
    if (CFEqual(v4, @"PrefersToInterruptActiveRecordingSessions"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v116 = CFGetTypeID(a3);
      if (v116 != CFBooleanGetTypeID()) {
        goto LABEL_1536;
      }
      int v117 = CFBooleanGetValue((CFBooleanRef)a3);
      if ([a1 prefersToInterruptActiveRecordingSessions] == (v117 != 0)) {
        goto LABEL_1000;
      }
      [a1 setPrefersToInterruptActiveRecordingSessions:v117 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
LABEL_333:
      LODWORD(valuePtr) = 0;
      uint64_t v105 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT);
LABEL_591:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    if (CFEqual(v4, @"ReporterIDs"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if ([a1 isActive]) {
        goto LABEL_1536;
      }
      if (a3)
      {
        CFTypeID v120 = CFGetTypeID(a3);
        if (v120 != CFArrayGetTypeID()) {
          goto LABEL_1536;
        }
      }
      id v121 = (id)[a1 reporterIDs];
      [a1 setReporterIDs:a3];
      if (([v121 isEqualToArray:a3] & 1) == 0) {
        CMSMNotificationUtility_PostReporterIDsDidChange(a1);
      }
      goto LABEL_383;
    }
    if (CFEqual(v4, @"SubscribeToNotifications"))
    {
      if (a1)
      {
        if (!a3)
        {
          if (dword_1E9359ED0)
          {
            v164 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(a1, "setNotificationsSubscribedTo:", objc_msgSend(MEMORY[0x1E4F1CAD0], "set", v523, v526));
          return 0;
        }
        CFTypeID v124 = CFGetTypeID(a3);
        if (v124 == CFArrayGetTypeID())
        {
          [a1 subscribeToNotifications:a3];
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"TemporaryAssertionEnabled"))
    {
      if (a1)
      {
        if (!a3)
        {
          BOOL v126 = 0;
LABEL_525:
          [a1 setIsTemporaryAssertionEnabled:v126];
          if (dword_1E9359ED0)
          {
            v165 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (objc_msgSend(a1, "isTemporaryAssertionEnabled", v523, v526)
            && CMSMUtility_FetchBackgroundEntitlement(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue")))
          {
            CMSMSleep_FetchTemporaryPlaybackProcessAssertion(a1);
            return 0;
          }
          goto LABEL_1000;
        }
        CFTypeID v125 = CFGetTypeID(a3);
        if (v125 == CFBooleanGetTypeID())
        {
          BOOL v126 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
          goto LABEL_525;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"UnduckFadeDuration"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      uint64_t updated = (uint64_t)a3;
      if (!a3)
      {
        [a1 setUnduckFadeDurationSetByClient:0];
        LODWORD(v167) = 0.5;
        [a1 setUnduckFadeDuration:v167];
        goto LABEL_1001;
      }
      CFTypeID v127 = CFGetTypeID(a3);
      if (v127 != CFNumberGetTypeID()) {
        goto LABEL_1536;
      }
      *(_DWORD *)audit_token_t buffer = 1056964608;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
      LODWORD(v128) = *(_DWORD *)buffer;
      if (*(float *)buffer < 0.0) {
        goto LABEL_1492;
      }
      if (*(float *)buffer > 5.0)
      {
        *(_DWORD *)audit_token_t buffer = 1084227584;
        LODWORD(v128) = 5.0;
      }
      [a1 setUnduckFadeDuration:v128];
      [a1 setUnduckFadeDurationSetByClient:1];
      goto LABEL_1000;
    }
    if (CFEqual(v4, @"UnduckToLevelScalar"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      [a1 unduckToLevelScalar];
      int v40 = v130;
      uint64_t v41 = [a1 unduckToLevelScalarSetByClient];
      if (!a3)
      {
        int v44 = 1045220557;
        if (dword_1E9359ED0)
        {
LABEL_420:
          LODWORD(valuePtr) = 0;
          v133 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_616:
        BOOL v169 = a3 != 0;
        v170 = +[MXSessionManager sharedInstance];
        uint64_t v173 = 0;
        goto LABEL_617;
      }
      CFTypeID v131 = CFGetTypeID(a3);
      if (v131 == CFNumberGetTypeID())
      {
        if ([a1 duckToLevelDBSetByClient]) {
          goto LABEL_652;
        }
        double ValueFloat32 = MXCFNumberGetValueFloat32((const __CFNumber *)a3);
        if (*(float *)&ValueFloat32 >= 0.0)
        {
          int v44 = LODWORD(ValueFloat32);
          if (*(float *)&ValueFloat32 <= 1.0)
          {
            if (dword_1E9359ED0) {
              goto LABEL_420;
            }
            goto LABEL_616;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"VibrationData"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      [a1 setVibrationData:a3];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
      goto LABEL_469;
    }
    if (CFEqual(v4, @"WantsAutomaticClusterPairingOnPlaybackStart"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v134 = CFGetTypeID(a3);
          if (v134 == CFBooleanGetTypeID())
          {
            int v135 = CFBooleanGetValue((CFBooleanRef)a3);
            if (v135 != [a1 wantsAutomaticClusterPairingOnPlaybackStart])
            {
              [a1 setWantsAutomaticClusterPairingOnPlaybackStart:v135 != 0];
              return 0;
            }
            goto LABEL_1000;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"WantsToBeVolumeButtonClient"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (!a3) {
        goto LABEL_1536;
      }
      CFTypeID v136 = CFGetTypeID(a3);
      if (v136 != CFBooleanGetTypeID()) {
        goto LABEL_1536;
      }
      int v137 = CFBooleanGetValue((CFBooleanRef)a3);
      if (CMSUtility_GetWantsToBeVolumeButtonClient(a1) == v137) {
        goto LABEL_1000;
      }
      [a1 setWantsToBeVolumeButtonClient:v137 != 0];
      if (!dword_1E9359ED0) {
        goto LABEL_1000;
      }
      goto LABEL_469;
    }
    if (CFEqual(v4, @"WantsToPauseSpokenAudio"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (a3)
      {
        CFTypeID v138 = CFGetTypeID(a3);
        if (v138 != CFBooleanGetTypeID()) {
          goto LABEL_1536;
        }
        int v139 = CFBooleanGetValue((CFBooleanRef)a3);
      }
      else
      {
        int v139 = 0;
      }
      if (dword_1E9359ED0)
      {
        v168 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!v139
        && [a1 wantsToPauseSpokenAudio]
        && [a1 isActive])
      {
        if (dword_1E9359ED0)
        {
          v185 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_msgSend(a1, "setRecentlyWantedToPauseSpokenAudio:", 1, v523, v526);
      }
      [a1 setWantsToPauseSpokenAudio:v139 != 0];
      return 0;
    }
    if (CFEqual(v4, @"WantsToSendResumableEndInterruptionWhenBackgrounded"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v140 = CFGetTypeID(a3), v140 == CFBooleanGetTypeID()))
        {
          if (a3) {
            BOOL v141 = v530 == a3;
          }
          else {
            BOOL v141 = 0;
          }
          uint64_t v142 = v141;
          [a1 setWantsToSendResumableEndInterruptionWhenBackgrounded:v142];
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"WantsVibrationNotifications"))
    {
      if (a1)
      {
        if (a3)
        {
          CFTypeID v143 = CFGetTypeID(a3);
          if (v143 == CFBooleanGetTypeID())
          {
            [a1 setWantsVibrationNotifications:v530 == a3];
            return 0;
          }
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"WantsVolumeChangesWhenPaused"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v144 = CFGetTypeID(a3), v144 == CFBooleanGetTypeID()))
        {
          if (a3) {
            BOOL v145 = v530 == a3;
          }
          else {
            BOOL v145 = 0;
          }
          uint64_t v146 = v145;
          [a1 setWantsVolumeChangesWhenPaused:v146];
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"WantsVolumeChangesWhenPausedOrInactive"))
    {
      if (a1)
      {
        if (!a3 || (CFTypeID v150 = CFGetTypeID(a3), v150 == CFBooleanGetTypeID()))
        {
          if (a3) {
            BOOL v151 = v530 == a3;
          }
          else {
            BOOL v151 = 0;
          }
          uint64_t v152 = v151;
          [a1 setWantsVolumeChangesWhenPausedOrInactive:v152];
          return 0;
        }
      }
      goto LABEL_1536;
    }
    if (CFEqual(v4, @"AllowedRouteTypes"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (a3)
      {
        CFTypeID v153 = CFGetTypeID(a3);
        if (v153 != CFArrayGetTypeID()) {
          goto LABEL_1536;
        }
      }
      if (!CMSMUtility_IsPlayAndRecordCategory([a1 audioCategory])) {
        goto LABEL_1536;
      }
      if (dword_1E9359ED0)
      {
        uint64_t v154 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      cmsUpdateAllowedRouteTypes(a1, a3);
      if ([a1 isActive])
      {
        if (([a1 currentlyControllingFlags] & 2) != 0) {
          cmsSetCategoryOnPVMAndAudioDevice(a1, 0, 0);
        }
LABEL_577:
        uint64_t IsPlaying = [+[MXAdditiveRoutingManager sharedInstance] sendActiveSessionsInfoToVA];
LABEL_1537:
        if (v532) {
          return 0;
        }
        return IsPlaying;
      }
LABEL_1000:
      uint64_t updated = 0;
      goto LABEL_1001;
    }
    if (CFEqual(v4, @"AudioClockDevice"))
    {
      if (!a1) {
        goto LABEL_1536;
      }
      if (dword_1E9359ED0)
      {
        v158 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend(a1, "setAggregateDeviceClockUID:", a3, v523, v526);
      if (![a1 isActive]) {
        goto LABEL_1000;
      }
      if (([a1 currentlyControllingFlags] & 2) == 0)
      {
        if ([a1 isSharePlayMediaSession])
        {
          CMSMUtility_SetSharePlayInfoOnVA(a1);
          return 0;
        }
        goto LABEL_1000;
      }
      v188 = a1;
LABEL_587:
      cmsSetCategoryOnPVMAndAudioDevice(v188, 0, 0);
      goto LABEL_1000;
    }
    if (CFEqual(v4, @"AudioCategory"))
    {
      if (a1)
      {
        if ([a1 mode])
        {
          [a1 audioMode];
          if (!CMSMUtility_IsModeValidForCategory(a3))
          {
            [a1 setMode:1768776806];
            [a1 setAudioMode:@"Default"];
            [a1 setDefaultVPChatMode:0];
          }
        }
        [a1 setEnableBluetoothRecordingPreference:0];
        [a1 setEnableBluetoothRecordingPreferenceSetByClient:0];
        [a1 setDefaultBuiltInRoutePreference:0];
        [a1 setDefaultBuiltInRoutePreferenceSetByClient:0];
        uint64_t IsPlaying = cmsSetAudioCategory(a1, a3, 0, v5);
        goto LABEL_1537;
      }
      goto LABEL_1536;
    }
    if (!CFEqual(v4, @"AudioMode"))
    {
      if (CFEqual(v4, @"AudioHardwareControlFlags"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v159 = CFGetTypeID(a3);
            if (v159 == CFNumberGetTypeID())
            {
              uint64_t v160 = [(NSDictionary *)a3 unsignedIntValue];
              if ([a1 doesntActuallyPlayAudio])
              {
                if ((v160 & WORD1(v160)) == 0)
                {
                  [a1 setSavedHWControlFlagsForClientThatDoesNotActuallyPlayAudio:v160];
                  return 0;
                }
                goto LABEL_515;
              }
              if ([a1 preferredPersistentRoute] && (v160 & 2) == 0) {
                goto LABEL_567;
              }
              uint64_t v189 = [a1 hwControlFlags];
              uint64_t updated = cmsSetControlFlags(a1, v160);
              if (!updated && [a1 isActive])
              {
                if ([a1 isTheAssistant]
                  && ([a1 currentlyControllingFlags] & 2) != 0
                  && ([a1 currentlyControllingFlags] & 0x10) == 0
                  && (v189 ^ v160) == 0x10
                  && !CMSMVAUtility_IsBluetoothSharingSessionEnabled(0)
                  && !CMSMVAUtility_DoesCurrentOutputPortSupportSoftwareVolume())
                {
                  long long v549 = 0u;
                  long long v550 = 0u;
                  *(_OWORD *)audit_token_t buffer = 0u;
                  CMSMUtility_GetCurrentRouteInfoAtIndex(0, buffer);
                  CFStringRef cfa = [+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") getUncustomizedCategory:[+[MXSessionManager sharedInstance] currentAudioCategory]];
                  CFTypeRef cf2 = (CFTypeRef)[a1 audioMode];
                  long long v190 = v549;
                  v191 = *(void **)buffer;
                  v192 = *(__CFString **)&buffer[8];
                  v193 = (const void *)v550;
                  char v194 = byte_1E9359B80;
                  char DoesPortSupportDoAP = vaeDoesPortSupportDoAP(DWORD2(v550));
                  uint64_t VolumeSequenceNumber = CMSMUtility_GetVolumeSequenceNumber();
                  PVMSetCurrentState(cfa, cf2, v191, (void *)v190, *((const void **)&v190 + 1), v192, v193, 0, v194, DoesPortSupportDoAP, VolumeSequenceNumber);
                }
                if (((unsigned __int16)v160 & (unsigned __int16)~(unsigned __int16)cmsTryToTakeControl(a1)) != 0) {
                  [a1 setHwControlFlags:v189];
                }
              }
              [a1 setAudioHWControlFlagsSetByClient:1];
LABEL_1001:
              if (v532) {
                return 0;
              }
              return updated;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"CameraParameters"))
      {
        if (a1)
        {
          if (!a3 || (CFTypeID v174 = CFGetTypeID(a3), v174 == CFDictionaryGetTypeID()))
          {
            [a1 setCameraParameters:a3];
            if ([a1 isActive] && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
            {
              MEMORY[0x199716E90](gCMSM);
              vaemSetCameraParameters([a1 cameraParameters]);
              MEMORY[0x199716EA0](gCMSM);
              return 0;
            }
            goto LABEL_1000;
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"CaptureOrientationOverride"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v198 = CFGetTypeID(a3);
        if (v198 != CFDataGetTypeID()) {
          goto LABEL_1536;
        }
        BytePtr = CFDataGetBytePtr((CFDataRef)a3);
        if (!BytePtr) {
          goto LABEL_1536;
        }
        [a1 setOrientationOverride:*(unsigned int *)BytePtr];
        if ([a1 isActive] && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0) {
          uint64_t updated = vaemSetCaptureOrientationOverride();
        }
        else {
          uint64_t updated = 0;
        }
        if ([a1 orientationOverride] == 5) {
          goto LABEL_1001;
        }
        v202 = a1;
LABEL_633:
        [v202 setPreferredStereoInputOrientation:0];
        goto LABEL_1001;
      }
      if (CFEqual(v4, @"DefaultBuiltInRoute"))
      {
        if (a1)
        {
          if (!a3 || (CFTypeID v201 = CFGetTypeID(a3), v201 == CFStringGetTypeID()))
          {
            uint64_t IsPlaying = cmsSetDefaultBuiltInRoute(a1, a3, v5);
            goto LABEL_1537;
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"EnableBluetoothRecording"))
      {
        if (a1)
        {
          if (!a3 || (CFTypeID v203 = CFGetTypeID(a3), v203 == CFBooleanGetTypeID()))
          {
            [a1 audioCategory];
            if (!FigCFEqual())
            {
              int v204 = CFBooleanGetValue((CFBooleanRef)a3);
              if (dword_1E9359ED0)
              {
                v205 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t IsPlaying = cmsEnableBluetoothRecording(a1, v204, v5);
              goto LABEL_1537;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"ClientPriority"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v206 = CFGetTypeID(a3);
            if (v206 == CFNumberGetTypeID())
            {
              uint64_t v207 = [(NSDictionary *)a3 unsignedIntValue];
              if (dword_1E9359ED0)
              {
                v208 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t updated = cmsSetClientPriority(a1, v207);
              if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()
                && !updated
                && [a1 isActive]
                && MX_FeatureFlags_IsCallManagementMuteControlEnabled())
              {
                [+[MXSessionManager sharedInstance] applyUplinkMute:a1];
              }
              CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
              goto LABEL_1001;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"ConstantOutputVolumeLeveldB"))
      {
        if (a1)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [(NSDictionary *)a3 floatValue];
            float v210 = v209;
            [a1 constantOutputVolumeLeveldB];
            if (v210 != *(float *)&v211)
            {
              if (dword_1E9359ED0)
              {
                v212 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v212, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(float *)&double v211 = v210;
              objc_msgSend(a1, "setConstantOutputVolumeLeveldB:", v211, v523, v526);
              return 0;
            }
            goto LABEL_1000;
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"AudioSessionID"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        int v213 = [a1 audioSessionID];
        if (a3)
        {
          CFTypeID v214 = CFGetTypeID(a3);
          if (v214 != CFNumberGetTypeID()) {
            goto LABEL_1536;
          }
          int v215 = [(NSDictionary *)a3 unsignedIntValue];
        }
        else
        {
          int v215 = 0;
        }
        if (v213 == v215) {
          goto LABEL_1000;
        }
        objc_msgSend(a1, "setAudioSessionID:");
        int v149 = a1;
        goto LABEL_474;
      }
      if (CFEqual(v4, @"CreateSpeakerDevice"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v216 = CFGetTypeID(a3);
          if (v216 != CFBooleanGetTypeID()) {
            goto LABEL_1536;
          }
        }
        [a1 setCreateSpeakerDevice:v530 == a3];
        if (dword_1E9359ED0)
        {
LABEL_997:
          LODWORD(valuePtr) = 0;
          v332 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v332, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_998:
        if (!objc_msgSend(a1, "isActive", v523, v526)) {
          goto LABEL_1000;
        }
LABEL_999:
        if (([a1 currentlyControllingFlags] & 2) == 0) {
          goto LABEL_1000;
        }
LABEL_1017:
        v188 = a1;
        goto LABEL_587;
      }
      if (CFEqual(v4, @"DefaultVPChatMode"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v217 = CFGetTypeID(a3);
          if (v217 != CFStringGetTypeID()) {
            goto LABEL_1536;
          }
        }
        if (CMSMUtility_IsChatMode())
        {
          if (![a1 audioMode]
            || [a1 audioMode] && (objc_msgSend(a1, "audioMode"), !CMSMUtility_IsChatMode()))
          {
            [a1 setDefaultVPChatMode:a3];
            long long v118 = a1;
            uint64_t v119 = (uint64_t)a3;
LABEL_376:
            uint64_t IsPlaying = cmsSetAudioMode(v118, v119, v5);
            goto LABEL_1537;
          }
          goto LABEL_1000;
        }
        goto LABEL_515;
      }
      if (CFEqual(v4, @"DeselectedInputs"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v218 = CFGetTypeID(a3);
          if (v218 != CFArrayGetTypeID()) {
            goto LABEL_1536;
          }
        }
        if (dword_1E9359ED0)
        {
          v219 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v219, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (a3 && CFArrayGetCount((CFArrayRef)a3) >= 1)
        {
          cmsDeselectSubPortPreferences((CFIndex)a1, (CFArrayRef)a3);
        }
        else
        {
          objc_msgSend(a1, "setSubPortPreferences:", 0, v523, v526);
          [a1 setOverridePortsList:0];
        }
        goto LABEL_998;
      }
      if (CFEqual(v4, @"ExcludedRoutes"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (dword_1E9359ED0)
        {
          v220 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t updated = cmsUpdateExcludedPortsList(a1, a3);
        if (![a1 isActive]) {
          goto LABEL_1001;
        }
LABEL_715:
        if ((objc_msgSend(a1, "currentlyControllingFlags", v523, v526) & 2) != 0) {
          cmsSetCategoryOnPVMAndAudioDevice(a1, 0, 0);
        }
        goto LABEL_1001;
      }
      if (CFEqual(v4, @"IgnoreRingerSwitch"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v221 = CFGetTypeID(a3);
          if (v221 != CFBooleanGetTypeID()) {
            goto LABEL_1536;
          }
        }
        [a1 setIgnoreRingerSwitch:v530 == a3];
        if (dword_1E9359ED0) {
          goto LABEL_997;
        }
        goto LABEL_998;
      }
      if (CFEqual(v4, @"InputGainScalar"))
      {
        if (!vaemCurrentRouteHasInputGainControl()) {
          goto LABEL_1000;
        }
        if (a1)
        {
          if (a3)
          {
            CFTypeID v222 = CFGetTypeID(a3);
            if (v222 != CFNumberGetTypeID()) {
              goto LABEL_1536;
            }
            [a1 setDesiredInputGainScalar:0];
            v223 = a1;
            v224 = a3;
          }
          else
          {
            v223 = a1;
            v224 = 0;
          }
          [v223 setDesiredInputGainScalar:v224];
          if ([a1 isActive]
            && ([a1 currentlyControllingFlags] & 2) != 0
            && [a1 hasInput])
          {
            if ([a1 desiredInputGainScalar])
            {
              objc_msgSend((id)objc_msgSend(a1, "desiredInputGainScalar"), "floatValue");
              vaemSetDeviceInputGainScalar(v231);
            }
            else
            {
              vaemSetDefaultInputGain();
            }
            return 0;
          }
          goto LABEL_1000;
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"InterruptionStyle"))
      {
        LODWORD(valuePtr) = 0;
        if (!a1) {
          goto LABEL_1492;
        }
        if (!a3) {
          goto LABEL_1492;
        }
        CFTypeID v225 = CFGetTypeID(a3);
        if (v225 != CFNumberGetTypeID()) {
          goto LABEL_1492;
        }
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        if (dword_1E9359ED0)
        {
          *(_DWORD *)os_log_type_t type = 0;
          os_log_type_t v537 = OS_LOG_TYPE_DEFAULT;
          v226 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v227 = *(_DWORD *)type;
          if (os_log_type_enabled(v226, v537)) {
            unsigned int v228 = v227;
          }
          else {
            unsigned int v228 = v227 & 0xFFFFFFFE;
          }
          if (v228)
          {
            uint64_t v229 = [a1 clientName];
            StyleString = CMSMUtility_GetStyleString(SLODWORD(valuePtr));
            *(_DWORD *)v543 = 136315650;
            *(void *)&v543[4] = "MXCoreSessionSetProperty";
            *(_WORD *)&v543[12] = 2114;
            *(void *)&v543[14] = v229;
            *(_WORD *)&v543[22] = 2082;
            *(void *)&v543[24] = StyleString;
            LODWORD(v526) = 32;
            v523 = v543;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v235 = objc_msgSend(a1, "setInterruptionStyleAtClientRequest:", LODWORD(valuePtr), v523, v526);
        goto LABEL_1493;
      }
      if (CFEqual(v4, @"IsEligibleForBTSmartRoutingConsideration"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v232 = CFGetTypeID(a3);
        if (v232 != CFBooleanGetTypeID()) {
          goto LABEL_1536;
        }
        int v233 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v233 != [a1 isEligibleForBTSmartRoutingConsideration])
        {
          [a1 setIsEligibleForBTSmartRoutingConsideration:v233 != 0];
          if (dword_1E9359ED0)
          {
            v234 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          int IsSmartRoutingOnActivationEnabled = MX_FeatureFlags_IsSmartRoutingOnActivationEnabled();
          int v243 = [a1 isActive];
          if (IsSmartRoutingOnActivationEnabled)
          {
            if ((v243 & 1) == 0) {
              goto LABEL_776;
            }
LABEL_774:
            if (CMSUtility_GetIsEligibleForBTSmartRoutingConsideration(a1)) {
              CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 8);
            }
          }
          else if (v243 && [a1 isPlaying])
          {
            goto LABEL_774;
          }
LABEL_776:
          CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
        }
        objc_msgSend(a1, "setIsEligibleForBTSmartRoutingConsiderationSetByClient:", 1, v523, v526);
        return 0;
      }
      if (CFEqual(v4, @"IsEligibleForBTTriangleConsideration"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v236 = CFGetTypeID(a3);
            if (v236 == CFBooleanGetTypeID())
            {
              int v237 = CFBooleanGetValue((CFBooleanRef)a3);
              if (v237 != [a1 isEligibleForBTTriangleConsideration])
              {
                [a1 setIsEligibleForBTTriangleConsideration:v237 != 0];
                if (dword_1E9359ED0)
                {
                  v238 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                if (objc_msgSend(a1, "isActive", v523, v526)
                  && [a1 isPlaying]
                  && [a1 isEligibleForBTTriangleConsideration])
                {
                  cmsBeginInterruptionGuts(a1, 0, 2);
                  return 0;
                }
              }
              goto LABEL_1000;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"IsRecordingMutedForRemoteDevice"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v239 = CFGetTypeID(a3);
            if (v239 == CFBooleanGetTypeID())
            {
              if (MX_FeatureFlags_IsOnenessEnabled())
              {
                int v240 = CFBooleanGetValue((CFBooleanRef)a3);
                if (!v240
                  || vaemIsContinuityScreenOutputPortPresentInConnectedOutputPorts()
                  && ([a1 isRecording] & 1) == 0
                  && ![a1 isRecordingMuted])
                {
                  if (v240 != [a1 isRecordingMutedForRemoteDevice])
                  {
                    if (dword_1E9359ED0)
                    {
                      v241 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v241, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    objc_msgSend(a1, "setIsRecordingMutedForRemoteDevice:", v240 != 0, v523, v526);
                    if ([a1 isRecordingMutedForRemoteDevice])
                    {
                      [+[MXSessionManager sharedInstance] postDisallowedRecordingNotification:1];
                      return 0;
                    }
                  }
                  goto LABEL_1000;
                }
              }
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"MutesAudioBasedOnRingerSwitchState"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v244 = CFGetTypeID(a3);
            if (v244 == CFBooleanGetTypeID()
              && [a1 isActive]
              && ([a1 isPlaying] & 1) != 0
              && !-[MXSessionManager isAudioCategoryMuteable:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAudioCategoryMuteable:", [a1 audioCategory]))
            {
              int v245 = CFBooleanGetValue((CFBooleanRef)a3);
              if (v245 != [a1 mutesAudioBasedOnRingerSwitchState])
              {
                [a1 setMutesAudioBasedOnRingerSwitchState:v245 != 0];
                cmsUpdateMuteStatus(a1);
                return 0;
              }
              goto LABEL_1000;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"OrientationOverride"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v246 = CFGetTypeID(a3);
        if (v246 != CFNumberGetTypeID()) {
          goto LABEL_1536;
        }
        *(_DWORD *)audit_token_t buffer = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, buffer);
        [a1 setOrientationOverride:*(unsigned int *)buffer];
        uint64_t updated = 0;
        if ([a1 isActive])
        {
          if (([a1 currentlyControllingFlags] & 2) != 0) {
            uint64_t updated = vaemSetOrientationOverride(*(int *)buffer);
          }
          else {
            uint64_t updated = 0;
          }
        }
        if ([a1 orientationOverride] == 5) {
          goto LABEL_1001;
        }
        v202 = a1;
        goto LABEL_633;
      }
      if (CFEqual(v4, @"PrefersEchoCancelledInput"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v247 = CFGetTypeID(a3);
        if (v247 != CFBooleanGetTypeID()
          || !CMSMUtility_IsInputAllowedForCategory((const void *)[a1 audioCategory]))
        {
          goto LABEL_1536;
        }
        uint64_t v248 = [(NSDictionary *)a3 BOOLValue];
        int v249 = [a1 prefersEchoCancelledInput];
        [a1 setPrefersEchoCancelledInput:v248];
        if (v248 == v249) {
          goto LABEL_1000;
        }
        if (dword_1E9359ED0)
        {
          v250 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v250, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_msgSend(a1, "setPrefersEchoCancelledInput:", v248, v523, v526);
        if (![a1 isActive]) {
          goto LABEL_1000;
        }
        if (CMSMVAUtility_IsAdditiveRoutingEnabled()) {
          uint64_t updated = [+[MXAdditiveRoutingManager sharedInstance] sendActiveSessionsInfoToVA];
        }
        else {
          uint64_t updated = 0;
        }
        goto LABEL_715;
      }
      if (CFEqual(v4, @"PrefersNoInterruptionsByRingtonesAndAlerts"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v251 = CFGetTypeID(a3);
            if (v251 == CFBooleanGetTypeID())
            {
              int v252 = CFBooleanGetValue((CFBooleanRef)a3);
              if (v252 != [a1 prefersNoInterruptionsByRingtonesAndAlerts])
              {
                [a1 setPrefersNoInterruptionsByRingtonesAndAlerts:v252 != 0];
                if (dword_1E9359ED0)
                {
                  LODWORD(valuePtr) = 0;
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  v253 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                if (objc_msgSend(a1, "isActive", v523, v526))
                {
                  uint64_t updated = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  FigCFDictionarySetValue();
                  uint64_t v271 = objc_msgSend((id)objc_msgSend(a1, "reporterIDs"), "count");
                  if (v271 >= 1)
                  {
                    uint64_t v272 = v271;
                    for (CFIndex j = 0; j != v272; ++j)
                    {
                      *(void *)audit_token_t buffer = 1;
                      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)[a1 reporterIDs], j);
                      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, buffer);
                      off_1E9359D10(*(void *)buffer, updated, 1, 5);
                    }
                  }
                  if (updated)
                  {
                    CFRelease((CFTypeRef)updated);
                    return 0;
                  }
                  goto LABEL_1001;
                }
              }
              goto LABEL_1000;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"PreferredAudioHardwareFormat"))
      {
        if (a1)
        {
          objc_msgSend(a1, "setPreferredHardwareFormat:", CMSessionMgrGetUpdatedHardwareFormatBasedOnPreferredNumberOfOutputChannelsAndPreferredHardwareFormat(objc_msgSend(a1, "preferredNumberOfOutputChannels"), (uint64_t)a3));
          if (dword_1E9359ED0)
          {
            v254 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if ((objc_msgSend((id)objc_msgSend(a1, "preferredHardwareFormat", v523, v526), "isEqualToString:", @"AC-3") & 1) != 0|| objc_msgSend((id)objc_msgSend(a1, "preferredHardwareFormat"), "isEqualToString:", @"MATAtmos"))
          {
            if (dword_1E9359ED0)
            {
              v275 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            objc_msgSend(a1, "preferredOutputSampleRate", v525, v528);
            double v278 = v294;
            [a1 setPreferredOutputSampleRate:48000.0];
            uint64_t v277 = [a1 preferredOutputSampleRateSetByClient];
            [a1 setPreferredOutputSampleRateSetByClient:0];
            [a1 updatePreferredIOBufferFrames:0];
            char v276 = 1;
          }
          else
          {
            char v276 = 0;
            uint64_t v277 = 0;
            double v278 = 0.0;
          }
          if (MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
          {
            uint64_t updated = cmsmUpdateDeviceAudioFormatConfigIfNeeded(0);
            char v295 = v276 ^ 1;
            if (!updated) {
              char v295 = 1;
            }
            if ((v295 & 1) == 0) {
              [a1 setPreferredOutputSampleRate:v278];
            }
            goto LABEL_1001;
          }
          if ([a1 isActive]
            && [+[MXSessionManager sharedInstance] shouldSetDeviceFormatAndSampleRate:a1])
          {
            uint64_t CurrentOutputVADID = CMSUtility_GetCurrentOutputVADID(a1);
            uint64_t updated = vaemSetDeviceFormat(CurrentOutputVADID, (const void *)[a1 preferredHardwareFormat], 0);
            char v297 = v276 ^ 1;
            if (!updated) {
              char v297 = 1;
            }
            if ((v297 & 1) == 0)
            {
              [a1 setPreferredOutputSampleRate:v278];
              [a1 setPreferredOutputSampleRateSetByClient:v277];
            }
            goto LABEL_1001;
          }
          goto LABEL_1000;
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"PreferredAudioHardwareIOBufferFrameDuration"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v255 = CFGetTypeID(a3);
        if (v255 != CFNumberGetTypeID()) {
          goto LABEL_1536;
        }
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
        LODWORD(v256) = LODWORD(valuePtr);
        [a1 updatePreferredIOBufferDuration:v256];
        [a1 updatePreferredIOBufferFrames:0];
        if ([a1 isActive] && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
        {
          [a1 preferredOutputSampleRate];
          double v258 = v257;
          unsigned int PreferredIOBufferFrames = CMSUtility_GetPreferredIOBufferFrames(a1, v259);
          double PreferredIOBufferDuration = CMSUtility_GetPreferredIOBufferDuration(a1, v261);
          float v263 = *(float *)&PreferredIOBufferDuration;
          BOOL IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly((const void *)[a1 audioCategory]);
          cmsSetDeviceSampleRateAndBufferSize(a1, PreferredIOBufferFrames, IsCategoryInputOnly, v258, v263);
        }
        if (!dword_1E9359ED0) {
          return 0;
        }
        *(_DWORD *)os_log_type_t type = 0;
        os_log_type_t v537 = OS_LOG_TYPE_DEFAULT;
        v265 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v266 = *(_DWORD *)type;
        if (os_log_type_enabled(v265, v537)) {
          unsigned int v267 = v266;
        }
        else {
          unsigned int v267 = v266 & 0xFFFFFFFE;
        }
        if (v267)
        {
          uint64_t v268 = [a1 clientName];
          double v270 = CMSUtility_GetPreferredIOBufferDuration(a1, v269);
          *(_DWORD *)v543 = 136315650;
          *(void *)&v543[4] = "MXCoreSessionSetProperty";
          *(_WORD *)&v543[12] = 2114;
          *(void *)&v543[14] = v268;
          *(_WORD *)&v543[22] = 2048;
          *(double *)&v543[24] = *(float *)&v270;
          goto LABEL_865;
        }
        goto LABEL_1127;
      }
      if (CFEqual(v4, @"PreferredAudioHardwareIOBufferFrames"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v279 = CFGetTypeID(a3);
        if (v279 != CFNumberGetTypeID()) {
          goto LABEL_1536;
        }
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        [a1 updatePreferredIOBufferFrames:LODWORD(valuePtr)];
        [a1 updatePreferredIOBufferDuration:0.0];
        if ([a1 isActive] && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
        {
          [a1 preferredOutputSampleRate];
          double v281 = v280;
          unsigned int v283 = CMSUtility_GetPreferredIOBufferFrames(a1, v282);
          double v285 = CMSUtility_GetPreferredIOBufferDuration(a1, v284);
          float v286 = *(float *)&v285;
          BOOL v287 = CMSMUtility_IsCategoryInputOnly((const void *)[a1 audioCategory]);
          cmsSetDeviceSampleRateAndBufferSize(a1, v283, v287, v281, v286);
        }
        if (!dword_1E9359ED0) {
          return 0;
        }
        *(_DWORD *)os_log_type_t type = 0;
        os_log_type_t v537 = OS_LOG_TYPE_DEFAULT;
        v288 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v289 = *(_DWORD *)type;
        if (os_log_type_enabled(v288, v537)) {
          unsigned int v290 = v289;
        }
        else {
          unsigned int v290 = v289 & 0xFFFFFFFE;
        }
        if (v290)
        {
          uint64_t v291 = [a1 clientName];
          unsigned int v293 = CMSUtility_GetPreferredIOBufferFrames(a1, v292);
          *(_DWORD *)v543 = 136315650;
          *(void *)&v543[4] = "MXCoreSessionSetProperty";
          *(_WORD *)&v543[12] = 2114;
          *(void *)&v543[14] = v291;
          *(_WORD *)&v543[22] = 1024;
          *(_DWORD *)&v543[24] = v293;
LABEL_865:
          _os_log_send_and_compose_impl();
        }
LABEL_1127:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return 0;
      }
      if (CFEqual(v4, @"PreferredDecoupledInputOutput"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v298 = CFGetTypeID(a3);
        if (v298 != CFBooleanGetTypeID()
          || !CMSMUtility_IsAllowedToSetPreferredDecoupledInputOutput([a1 audioCategory])
          || [a1 requiresAggregatedInputOutput]
          || [a1 isPlaying])
        {
          goto LABEL_1536;
        }
        [a1 setPreferredDecoupledInputOutput:FigCFEqual() != 0];
        if (dword_1E9359ED0) {
          goto LABEL_997;
        }
        goto LABEL_998;
      }
      if (CFEqual(v4, @"PreferredInputs"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v299 = CFGetTypeID(a3);
          if (v299 != CFArrayGetTypeID()) {
            goto LABEL_1536;
          }
        }
        if (dword_1E9359ED0)
        {
LABEL_969:
          v327 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v327, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_970:
        if (a3 && CFArrayGetCount((CFArrayRef)a3) >= 1)
        {
          SubPortPreferenceFromPropertyint Value = cmsCreateSubPortPreferenceFromPropertyValue(a1, (const __CFArray *)a3);
          if (SubPortPreferenceFromPropertyValue) {
            cmsUpdateSubPortPreferences((CFIndex)a1, SubPortPreferenceFromPropertyValue);
          }
        }
        else
        {
          objc_msgSend(a1, "setSubPortPreferences:", 0, v523, v526);
          [a1 setOverridePortsList:0];
          SubPortPreferenceFromPropertyint Value = 0;
        }
        if (objc_msgSend(a1, "isActive", v523, v526)
          && ([a1 currentlyControllingFlags] & 2) != 0)
        {
          cmsSetCategoryOnPVMAndAudioDevice(a1, 0, 0);
        }
        if (SubPortPreferenceFromPropertyValue)
        {
          CFRelease(SubPortPreferenceFromPropertyValue);
          return 0;
        }
        goto LABEL_1000;
      }
      if (CFEqual(v4, @"PreferredInputSampleRate"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v300 = CFGetTypeID(a3);
            if (v300 == CFNumberGetTypeID())
            {
              double valuePtr = 0.0;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat64Type, &valuePtr);
              [a1 setPreferredInputSampleRate:valuePtr];
              if (dword_1E9359ED0)
              {
                *(_DWORD *)os_log_type_t type = 0;
                os_log_type_t v537 = OS_LOG_TYPE_DEFAULT;
                v301 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v302 = *(_DWORD *)type;
                if (os_log_type_enabled(v301, v537)) {
                  unsigned int v303 = v302;
                }
                else {
                  unsigned int v303 = v302 & 0xFFFFFFFE;
                }
                if (v303)
                {
                  uint64_t v304 = [a1 clientName];
                  *(_DWORD *)v543 = 136316162;
                  *(void *)&v543[4] = "MXCoreSessionSetProperty";
                  *(_WORD *)&v543[12] = 2114;
                  *(void *)&v543[14] = v304;
                  *(_WORD *)&v543[22] = 2048;
                  *(void *)&v543[24] = a1;
                  __int16 v544 = 2114;
                  v545 = v4;
                  __int16 v546 = 2114;
                  v547 = a3;
                  LODWORD(v526) = 52;
                  v523 = v543;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (objc_msgSend(a1, "isActive", v523, v526)
                && ([a1 currentlyControllingFlags] & 2) != 0)
              {
                cmsSetCategoryOnPVMAndAudioDevice(a1, 0, 0);
              }
              return 0;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"PreferredMinimumMicrophoneIndicatorLightOnTime"))
      {
        if (!a1 || ([a1 hasEntitlementToSetPreferredMinimumMicrophoneIndicatorLightOnTime] & 1) == 0) {
          goto LABEL_1536;
        }
        if (a3)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_1536;
          }
          [(NSDictionary *)a3 floatValue];
          if (v305 <= 0.0) {
            goto LABEL_1536;
          }
          if (dword_1E9359ED0)
          {
            v306 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v306, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v313 = a1;
          v314 = a3;
        }
        else
        {
          if (dword_1E9359ED0)
          {
            v310 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v310, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v313 = a1;
          v314 = 0;
        }
        objc_msgSend(v313, "setPreferredMinimumMicrophoneIndicatorLightOnTime:", v314, v523, v526);
        if (!MX_FeatureFlags_IsPublishHostAttributionToSystemStatusEnabled()) {
          goto LABEL_1000;
        }
        goto LABEL_938;
      }
      if (CFEqual(v4, @"PreferredPersistentRoute"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v307 = CFGetTypeID(a3);
            if (v307 != CFDictionaryGetTypeID()) {
              goto LABEL_1536;
            }
            v308 = a3;
            if (![(NSDictionary *)a3 count]) {
              v308 = 0;
            }
            if (dword_1E9359ED0)
            {
              LODWORD(valuePtr) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v309 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v309, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            id v319 = [(NSDictionary *)v308 objectForKey:@"InputPortUIDs", v523, v526];
            if (v319)
            {
              CFTypeID v320 = CFGetTypeID(v319);
              if (v320 != CFArrayGetTypeID()) {
                goto LABEL_1536;
              }
            }
            id v321 = [(NSDictionary *)v308 objectForKey:@"OutputPortUIDs"];
            if (v321)
            {
              CFTypeID v322 = CFGetTypeID(v321);
              if (v322 != CFArrayGetTypeID()) {
                goto LABEL_1536;
              }
            }
          }
          else
          {
            if (dword_1E9359ED0)
            {
              v315 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v315, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v308 = 0;
          }
          objc_msgSend(a1, "setPreferredPersistentRoute:", v308, v523, v526);
          if (([a1 hwControlFlags] & 2) != 0)
          {
            if (![a1 isActive]) {
              goto LABEL_1000;
            }
            uint64_t v323 = [a1 preferredPersistentRoute];
            uint64_t v324 = [a1 routingContextUUID];
            long long v557 = 0u;
            long long v558 = 0u;
            long long v555 = 0u;
            long long v556 = 0u;
            long long v553 = 0u;
            long long v554 = 0u;
            long long v551 = 0u;
            long long v552 = 0u;
            long long v549 = 0u;
            long long v550 = 0u;
            *(_OWORD *)audit_token_t buffer = 0u;
            uint64_t v559 = v323;
            uint64_t v560 = 0;
            uint64_t updated = cmsmSetVADRouteConfiguration((uint64_t)buffer, 0, v324);
            if (!updated) {
              goto LABEL_1001;
            }
          }
          else
          {
            cmsSetControlFlags(a1, [a1 hwControlFlags] & 0xFFFDFFFD | 2);
            if (![a1 isActive]) {
              goto LABEL_1000;
            }
            uint64_t updated = cmsBeginInterruptionGuts(a1, 0, 2);
            if (!updated) {
              goto LABEL_1001;
            }
          }
          v325 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v325, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_1001;
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"PreferredStereoInputOrientation"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v311 = CFGetTypeID(a3);
            if (v311 == CFNumberGetTypeID())
            {
              CFNumberRef ValueUInt32 = MXCFNumberGetValueUInt32((const __CFNumber *)a3);
              [a1 setPreferredStereoInputOrientation:ValueUInt32];
              if ([a1 isActive]
                && ([a1 currentlyControllingFlags] & 2) != 0)
              {
                uint64_t updated = vaemSetStereoInputOrientation((int)ValueUInt32);
              }
              else
              {
                uint64_t updated = 0;
              }
              if ([a1 preferredStereoInputOrientation]) {
                [a1 setOrientationOverride:5];
              }
              goto LABEL_1001;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"RequiresAggregatedInputOutput"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v316 = CFGetTypeID(a3);
        if (v316 != CFBooleanGetTypeID()
          || !CMSMUtility_IsPlayAndRecordCategory([a1 audioCategory])
          || [a1 isPlaying])
        {
          goto LABEL_1536;
        }
        int v317 = CFBooleanGetValue((CFBooleanRef)a3);
        if (dword_1E9359ED0)
        {
          v318 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v317 == objc_msgSend(a1, "requiresAggregatedInputOutput", v523, v526)) {
          goto LABEL_1000;
        }
        [a1 setRequiresAggregatedInputOutput:v317 != 0];
        if (![a1 requiresAggregatedInputOutput]
          || ![a1 preferredDecoupledInputOutput])
        {
          goto LABEL_1000;
        }
        [a1 setPreferredDecoupledInputOutput:0];
        uint64_t updated = 0;
        if (![a1 isActive]) {
          goto LABEL_1001;
        }
        goto LABEL_999;
      }
      if (CFEqual(v4, @"SelectedInputs"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v326 = CFGetTypeID(a3);
          if (v326 != CFArrayGetTypeID()) {
            goto LABEL_1536;
          }
        }
        if (dword_1E9359ED0) {
          goto LABEL_969;
        }
        goto LABEL_970;
      }
      if (CFEqual(v4, @"SelectedOutputs"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v329 = CFGetTypeID(a3);
          if (v329 != CFArrayGetTypeID()) {
            goto LABEL_1536;
          }
        }
        if (dword_1E9359ED0)
        {
          v330 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v330, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v333 = cmsCreateSubPortPreferenceFromPropertyValue(a1, (const __CFArray *)a3);
        if (v333)
        {
          v334 = v333;
          v335 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:", objc_msgSend(a1, "subPortPreferences"));
          [v335 addObjectsFromArray:v334];
          [a1 setSubPortPreferences:v335];
        }
        goto LABEL_998;
      }
      if (CFEqual(v4, @"VPBlockConfiguration"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v331 = CFGetTypeID(a3);
          if (v331 != CFDictionaryGetTypeID()) {
            goto LABEL_1536;
          }
        }
        [a1 setVpBlockConfiguration:a3];
        if (dword_1E9359ED0) {
          goto LABEL_997;
        }
        goto LABEL_998;
      }
      if (CFEqual(v4, @"ActivationContext") || CFEqual(v4, @"InitiationDescription"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v336 = CFGetTypeID(a3);
          if (v336 != CFDictionaryGetTypeID()) {
            goto LABEL_1536;
          }
        }
        [a1 setActivationContext:a3];
        if (dword_1E9359ED0)
        {
          v337 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v337, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_msgSend(a1, "setSiriInputDeviceUUID:", objc_msgSend((id)objc_msgSend(a1, "activationContext", v523, v526), "objectForKey:", 0x1EE5EF848));
        if ([a1 siriInputDeviceUUID])
        {
          cmsUpdateAudioBehavior(a1);
          [a1 setDontTakeOverHardware:1];
        }
        if (![a1 isActive]) {
          goto LABEL_1000;
        }
        v338 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v338, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (([a1 currentlyControllingFlags] & 2) == 0)
        {
          uint64_t IsPlaying = [+[MXAdditiveRoutingManager sharedInstance] sendActiveSessionsInfoToVA];
          goto LABEL_1537;
        }
        goto LABEL_1017;
      }
      if (CFEqual(v4, @"DoesntActuallyPlayAudio"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v339 = CFGetTypeID(a3);
        if (v339 != CFBooleanGetTypeID())
        {
          CFTypeID v340 = CFGetTypeID(a3);
          if (v340 != CFNumberGetTypeID()) {
            goto LABEL_1536;
          }
        }
        int v341 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v341 == [a1 doesntActuallyPlayAudio]) {
          goto LABEL_1000;
        }
        [a1 setDoesntActuallyPlayAudio:v341 != 0];
        if ([a1 hwControlFlags]
          && [a1 doesntActuallyPlayAudio])
        {
          objc_msgSend(a1, "setSavedHWControlFlagsForClientThatDoesNotActuallyPlayAudio:", objc_msgSend(a1, "hwControlFlags"));
          [a1 setHwControlFlags:0];
        }
        else if (![a1 hwControlFlags] {
               && ([a1 doesntActuallyPlayAudio] & 1) == 0)
        }
        {
          objc_msgSend(a1, "setHwControlFlags:", objc_msgSend(a1, "savedHWControlFlagsForClientThatDoesNotActuallyPlayAudio"));
          if (dword_1E9359ED0)
          {
            v347 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v347, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (objc_msgSend(a1, "isActive", v523, v526)) {
            cmsBeginInterruptionGuts(a1, 0, 2);
          }
        }
        if (![a1 isActive] || !CMSUtility_GetIsActuallyPlayingAudio(a1)) {
          goto LABEL_1216;
        }
        if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled())
        {
          unsigned int v383 = [a1 isActive];
          goto LABEL_1180;
        }
        if ([a1 shouldAttemptSmartRoutingHijackForMusicApp])
        {
          unsigned int v383 = ([a1 currentlyControllingFlags] >> 1) & 1;
LABEL_1180:
          if (([a1 isPlaying] & 1) == 0)
          {
            if (!v383) {
              goto LABEL_1216;
            }
LABEL_1215:
            CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 7);
LABEL_1216:
            CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
            return 0;
          }
        }
        else
        {
          if (![a1 isPlaying]) {
            goto LABEL_1216;
          }
          LOBYTE(v383) = 0;
        }
        if ((CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
           || CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
          && CMSM_IDSConnection_IsNearbyPairedDevicePresent())
        {
          CMSM_IDSClient_NotifyRemote_LocalIsPlayingStart(a1);
        }
        int v400 = MX_FeatureFlags_IsSmartRoutingOnActivationEnabled();
        CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 7);
        if (v400) {
          char v401 = v383;
        }
        else {
          char v401 = 1;
        }
        if ((v401 & 1) == 0) {
          goto LABEL_1216;
        }
        goto LABEL_1215;
      }
      if (CFEqual(v4, @"HapticEngineIsPlaying"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v342 = CFGetTypeID(a3);
        if (v342 != CFBooleanGetTypeID()) {
          goto LABEL_1536;
        }
        int v343 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v343 == [a1 hapticEngineIsPlaying]) {
          goto LABEL_1000;
        }
        BOOL v344 = v343 != 0;
        v345 = a1;
        [a1 setHapticEngineIsPlaying:v344];
        goto LABEL_1359;
      }
      if (CFEqual(v4, @"IAmWiredCar"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v346 = CFGetTypeID(a3);
            if (v346 != CFBooleanGetTypeID()) {
              goto LABEL_1536;
            }
            if (CFBooleanGetValue((CFBooleanRef)a3))
            {
              CMSMSleep_CreateIdleSleepPreventorForSession(a1, @"com.apple.cmsession.WiredCarPlay.IsConnected");
              return 0;
            }
          }
          CMSMSleep_ReleaseIdleSleepPreventorForSession(a1);
          return 0;
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"IsPlayingOutput"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v348 = CFGetTypeID(a3);
            if (v348 == CFBooleanGetTypeID())
            {
              int v349 = CFBooleanGetValue((CFBooleanRef)a3);
              if ([a1 isPlayingOutput] != (v349 != 0))
              {
                if (dword_1E9359ED0)
                {
                  v350 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v350, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                objc_msgSend(a1, "setIsPlayingOutput:", v349 != 0, v523, v526);
                return 0;
              }
              goto LABEL_1000;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"InputSource"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v351 = CFGetTypeID(a3);
            if (v351 == CFNumberGetTypeID())
            {
              *(_DWORD *)audit_token_t buffer = 0;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, buffer);
              uint64_t IsPlaying = vaemSetInputDataSource((uint64_t)a3);
              goto LABEL_1537;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"IsExpanseCallSession"))
      {
        if (!MX_FeatureFlags_IsSharePlayEnabled()) {
          goto LABEL_1000;
        }
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v352 = CFGetTypeID(a3);
        if (v352 != CFBooleanGetTypeID()) {
          goto LABEL_1536;
        }
        uint64_t v353 = [a1 audioCategory];
        [a1 audioMode];
        if (!CMSMUtility_AreCategoryAndModeValidForSharePlayCallSession(v353)
          || ([a1 isSharePlayCapableCallSession] & 1) == 0)
        {
          goto LABEL_1536;
        }
        int v354 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v354 == [a1 isSharePlayCallSession]) {
          goto LABEL_1000;
        }
        [a1 setIsSharePlayCallSession:v354 != 0];
        if (dword_1E9359ED0)
        {
          v355 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v355, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MEMORY[0x199716E90](gCMSM);
        if ([a1 isActive] && (objc_msgSend(a1, "currentlyControllingFlags") & 2) != 0)
        {
          if (v354)
          {
            CMSMUtility_SetSharePlayInfoOnVA(a1);
            CMSMUtility_UpdateSharePlayVolumeBehaviours();
          }
          else
          {
            cmsSetCategoryOnPVMAndAudioDevice(a1, 0, 0);
          }
        }
        CMSUtility_UpdateBTLowLatencyMode();
        uint64_t v377 = gCMSM;
LABEL_1387:
        MEMORY[0x199716EA0](v377);
        return 0;
      }
      if (CFEqual(v4, @"IsExpanseMediaSession"))
      {
        if (!MX_FeatureFlags_IsSharePlayEnabled()) {
          goto LABEL_1000;
        }
        if (a1)
        {
          if (a3)
          {
            CFTypeID v356 = CFGetTypeID(a3);
            if (v356 == CFBooleanGetTypeID()
              && -[MXSessionManager isAudioCategoryAllowedForSharePlayMedia:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isAudioCategoryAllowedForSharePlayMedia:", [a1 audioCategory]))
            {
              int v357 = CFBooleanGetValue((CFBooleanRef)a3);
              SharePlayMediaSessiouint64_t n = CMSMUtility_GetSharePlayMediaSession();
              if (v357)
              {
                v359 = SharePlayMediaSession;
                if (SharePlayMediaSession)
                {
                  if (SharePlayMediaSession != a1)
                  {
                    if (dword_1E9359ED0)
                    {
                      v360 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v360, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    objc_msgSend(v359, "setIsSharePlayMediaSession:", 0, v523, v526);
                  }
                }
              }
              if (v357 != [a1 isSharePlayMediaSession])
              {
                [a1 setIsSharePlayMediaSession:v357 != 0];
                if (dword_1E9359ED0)
                {
                  v384 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v384, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                if (objc_msgSend(a1, "isActive", v523, v526))
                {
                  if ([a1 isSharePlayMediaSession]) {
                    CMSMUtility_SetSharePlayInfoOnVA(a1);
                  }
                  CMSMUtility_UpdateSharePlayVolumeBehaviours();
                }
                CMSUtility_UpdateBTLowLatencyMode();
                return 0;
              }
              goto LABEL_1000;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"IsPlaying"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v361 = CFGetTypeID(a3);
          if (v361 == CFNumberGetTypeID())
          {
            *(_DWORD *)audit_token_t buffer = 0;
            CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, buffer);
            BOOL v362 = *(_DWORD *)buffer == 1;
          }
          else
          {
            CFTypeID v387 = CFGetTypeID(a3);
            if (v387 != CFBooleanGetTypeID()) {
              goto LABEL_1000;
            }
            BOOL v362 = v530 == a3;
          }
          uint64_t v386 = v362;
          v345 = a1;
          v385 = a1;
        }
        else
        {
          v345 = a1;
          v385 = a1;
          uint64_t v386 = 0;
        }
        [v385 setClientIsPlaying:v386];
LABEL_1359:
        int CurrentConsolidatedPlayingState = CMSUtility_GetCurrentConsolidatedPlayingState(v345);
        uint64_t IsPlaying = cmsSetIsPlaying(v345, CurrentConsolidatedPlayingState);
        goto LABEL_1537;
      }
      if (CFEqual(v4, @"IsRecording"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v363 = CFGetTypeID(a3);
            if (v363 == CFBooleanGetTypeID())
            {
              int v364 = CFBooleanGetValue((CFBooleanRef)a3);
              uint64_t updated = CMSUtility_SetIsRecording(a1, v364);
              if (MX_FeatureFlags_IsSessionBasedMutingEnabled()) {
                goto LABEL_1001;
              }
              if (updated) {
                goto LABEL_1001;
              }
              int v365 = [a1 isActive];
              if (!v364 || !v365) {
                goto LABEL_1001;
              }
              if (MX_FeatureFlags_IsCallManagementMuteControlEnabled())
              {
                [+[MXSessionManager sharedInstance] replaceMutedBundleIDwithHostID];
                [+[MXSessionManager sharedInstance] applyUplinkMute:a1];
                [+[MXSessionManager sharedInstance] setUplinkMutedBundleID:0];
                return 0;
              }
            }
          }
          else
          {
            v388 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v388, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          goto LABEL_1000;
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"IsRecordingMuted"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v366 = CFGetTypeID(a3);
        if (v366 != CFBooleanGetTypeID()) {
          goto LABEL_1536;
        }
        int v367 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v367 == [a1 isRecordingMuted]) {
          goto LABEL_1000;
        }
        [a1 setIsRecordingMuted:v367 != 0];
        if (dword_1E9359ED0)
        {
          v368 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v368, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MX_SystemStatus_PublishRecordingClientsInfo();
        uint64_t updated = [+[MXExclaves sharedInstance] updateSensorStatus:a1 reason:@"IsRecordingMuted property has changed"];
        if (updated)
        {
          v389 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v389, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          [a1 setIsRecordingMuted:v367 == 0];
          MX_SystemStatus_PublishRecordingClientsInfo();
        }
        if (!MX_FeatureFlags_IsSessionBasedMutingEnabled()) {
          goto LABEL_1001;
        }
        id v393 = CMSUtility_CopyBundleID(a1);
        if (dword_1E9359ED0)
        {
          v394 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v394, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        [+[MXSessionManager sharedInstance] updateBluetoothFrameworkToPlayMuteChime:a1 playRejectTone:0];
        CMSMNotificationUtility_PostIsRecordingMutedDidChange(a1);
LABEL_1312:

        goto LABEL_1001;
      }
      if (CFEqual(v4, @"NeedsAudioBudget"))
      {
        if (a1)
        {
          if (!a3 || (CFTypeID v369 = CFGetTypeID(a3), v369 == CFBooleanGetTypeID()))
          {
            [a1 audioCategory];
            if (!FigCFEqual()) {
              goto LABEL_1000;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"OutputDestination"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v370 = CFGetTypeID(a3);
            if (v370 == CFNumberGetTypeID())
            {
              *(_DWORD *)audit_token_t buffer = 0;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, buffer);
              vaemSetOutputDataDestination((uint64_t)a3);
              goto LABEL_1000;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"OverrideRoute"))
      {
        if (a1)
        {
          [a1 setActivationContext:0];
          uint64_t IsPlaying = cmsSetOverrideRoute(a1, a3);
          goto LABEL_1537;
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"PortOverride"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v371 = CFGetTypeID(a3);
          if (v371 != CFArrayGetTypeID()) {
            goto LABEL_1536;
          }
        }
        *(_DWORD *)audit_token_t buffer = 0;
        *(_DWORD *)v543 = 0;
        CFNumberRef v372 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a3, 0);
        CFNumberGetValue(v372, kCFNumberSInt32Type, buffer);
        CFNumberRef v373 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a3, 1);
        CFNumberGetValue(v373, kCFNumberSInt32Type, v543);
        int VADPortIDFromVADPortType = vaemGetVADPortIDFromVADPortType(*(int *)v543);
        int v375 = vaemGetVADPortIDFromVADPortType(*(int *)buffer);
        [a1 setOverridePortsList:0];
        OverridePortsList = CMSMUtility_CreateOverridePortsList(v375, VADPortIDFromVADPortType);
        [a1 setOverridePortsList:OverridePortsList];
        if (OverridePortsList) {
          CFRelease(OverridePortsList);
        }
        MEMORY[0x199716E90](gCMSM);
        if ([a1 isActive]) {
          cmsTryToTakeControl(a1);
        }
        uint64_t v377 = gCMSM;
        goto LABEL_1387;
      }
      if (CFEqual(v4, @"PowerProfile"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v378 = CFGetTypeID(a3);
          if (v378 != CFDictionaryGetTypeID()) {
            goto LABEL_1536;
          }
          [a1 setPowerProfile:a3];
          if (!dword_1E9359ED0) {
            goto LABEL_1000;
          }
        }
        else
        {
          [a1 setPowerProfile:0];
          if (!dword_1E9359ED0) {
            goto LABEL_1000;
          }
        }
        goto LABEL_1126;
      }
      if (CFEqual(v4, @"PrefersNoInterruptionWhenSecureMicrophoneIsEngaged")
        || CFEqual(v4, @"PrefersToNotBeInterruptedWhenSecureMicIsEngaged"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v380 = CFGetTypeID(a3);
            if (v380 == CFBooleanGetTypeID())
            {
              int v381 = CFBooleanGetValue((CFBooleanRef)a3);
              if (CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(a1) != v381)
              {
                [a1 setPrefersNoInterruptionWhenSecureMicrophoneIsEngaged:v381 != 0];
                if (dword_1E9359ED0)
                {
                  v382 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v382, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                if (CMSUtility_GetIsRecording(a1)
                  && !CMSUtility_GetPrefersNoInterruptionWhenSecureMicrophoneIsEngaged(a1))
                {
                  CMSMUtility_UpdateSecureMicrophonePolicy(a1);
                  return 0;
                }
              }
              goto LABEL_1000;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"PrefersSuppressingRecordingState"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v390 = CFGetTypeID(a3);
        if (v390 != CFBooleanGetTypeID()) {
          goto LABEL_1536;
        }
        int v391 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v391 == [a1 prefersSuppressingRecordingState]) {
          goto LABEL_1000;
        }
        if ([a1 hasEntitlementToShowMicrophoneIndicatorWhileNotRecording]
          && [a1 wantsToShowMicrophoneIndicatorWhenNotRecording]
          && v391)
        {
          v392 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v392, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          if (v532) {
            return 0;
          }
          return 4294951611;
        }
        [a1 setPrefersSuppressingRecordingState:v391 != 0];
        if (dword_1E9359ED0)
        {
          v399 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v399, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_938:
        if (!objc_msgSend(a1, "isRecording", v523, v526)) {
          goto LABEL_1000;
        }
        goto LABEL_100;
      }
      if (CFEqual(v4, @"PreferredNumberOfInputChannels"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v395 = CFGetTypeID(a3);
          if (v395 != CFNumberGetTypeID()) {
            goto LABEL_1536;
          }
        }
        [a1 audioCategory];
        if (FigCFEqual()) {
          goto LABEL_1536;
        }
        if (a3)
        {
          *(_DWORD *)audit_token_t buffer = 0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, buffer);
          unsigned int v396 = *(_DWORD *)buffer;
          if (v396 > vaemGetMaximumNumberOfChannels(1)) {
            goto LABEL_1536;
          }
          uint64_t v397 = *(unsigned int *)buffer;
          v398 = a1;
        }
        else
        {
          v398 = a1;
          uint64_t v397 = 0;
        }
        [v398 setPreferredNumberOfInputChannels:v397];
        if (![a1 isActive]) {
          goto LABEL_1000;
        }
        if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
        {
LABEL_1289:
          if (([a1 currentlyControllingFlags] & 2) == 0
            && ![+[MXSessionManager sharedInstance] shouldSetDeviceFormatAndSampleRate:a1])
          {
            goto LABEL_1000;
          }
LABEL_1342:
          [a1 preferredOutputSampleRate];
          double v439 = v438;
          unsigned int v441 = CMSUtility_GetPreferredIOBufferFrames(a1, v440);
          double v443 = CMSUtility_GetPreferredIOBufferDuration(a1, v442);
          float v444 = *(float *)&v443;
          BOOL v445 = CMSMUtility_IsCategoryInputOnly((const void *)[a1 audioCategory]);
          cmsSetDeviceSampleRateAndBufferSize(a1, v441, v445, v439, v444);
          return 0;
        }
        goto LABEL_1320;
      }
      if (CFEqual(v4, @"PreferredNumberOfOutputChannels"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v402 = CFGetTypeID(a3);
          if (v402 != CFNumberGetTypeID()) {
            goto LABEL_1536;
          }
        }
        [a1 audioCategory];
        if (FigCFEqual()) {
          goto LABEL_1536;
        }
        if (dword_1E9359ED0)
        {
          LODWORD(valuePtr) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v403 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v403, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (a3)
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
          if (vaemIsMATAtmosEnabled())
          {
            uint64_t v412 = LODWORD(valuePtr);
            if (LODWORD(valuePtr) >= 9)
            {
              if (dword_1E9359ED0)
              {
                *(_DWORD *)os_log_type_t type = 0;
                os_log_type_t v537 = OS_LOG_TYPE_DEFAULT;
                v413 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v414 = *(_DWORD *)type;
                if (os_log_type_enabled(v413, v537)) {
                  unsigned int v415 = v414;
                }
                else {
                  unsigned int v415 = v414 & 0xFFFFFFFE;
                }
                if (v415)
                {
                  *(_DWORD *)v543 = 136315138;
                  *(void *)&v543[4] = "MXCoreSessionSetProperty";
                  LODWORD(v526) = 12;
                  v523 = v543;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v424 = kMXSessionAudioHardwareFormat_MATAtmos;
                goto LABEL_1296;
              }
              v424 = kMXSessionAudioHardwareFormat_MATAtmos;
              goto LABEL_1297;
            }
          }
          int IsAC3EncodingSupported = vaemIsAC3EncodingSupported();
          uint64_t v412 = LODWORD(valuePtr);
          if (IsAC3EncodingSupported)
          {
            if (LODWORD(valuePtr) < 3)
            {
              if (v412 > vaemGetMaximumNumberOfChannels(0)) {
                goto LABEL_1536;
              }
              v424 = kMXSessionAudioHardwareFormat_LPCM;
            }
            else
            {
              if (!dword_1E9359ED0)
              {
                v424 = kMXSessionAudioHardwareFormat_AC3;
                goto LABEL_1297;
              }
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v537 = OS_LOG_TYPE_DEFAULT;
              v421 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v422 = *(_DWORD *)type;
              if (os_log_type_enabled(v421, v537)) {
                unsigned int v423 = v422;
              }
              else {
                unsigned int v423 = v422 & 0xFFFFFFFE;
              }
              if (v423)
              {
                *(_DWORD *)v543 = 136315138;
                *(void *)&v543[4] = "MXCoreSessionSetProperty";
                LODWORD(v526) = 12;
                v523 = v543;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v424 = kMXSessionAudioHardwareFormat_AC3;
            }
LABEL_1296:
            uint64_t v412 = LODWORD(valuePtr);
LABEL_1297:
            objc_msgSend(a1, "setPreferredNumberOfOutputChannels:", v412, v523, v526);
            [a1 setPreferredHardwareFormat:*v424];
            if ([a1 isActive])
            {
              cmsTryToTakeControl(a1);
              return 0;
            }
            goto LABEL_1000;
          }
          if (v412 > vaemGetMaximumNumberOfChannels(0)) {
            goto LABEL_1536;
          }
          uint64_t v419 = LODWORD(valuePtr);
          v418 = a1;
        }
        else
        {
          v418 = a1;
          uint64_t v419 = 0;
        }
        objc_msgSend(v418, "setPreferredNumberOfOutputChannels:", v419, v523, v526);
        if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
        {
          if (![a1 isActive]) {
            goto LABEL_1000;
          }
          goto LABEL_1289;
        }
        goto LABEL_1320;
      }
      if (CFEqual(v4, @"PreferredOutputSampleRate") || CFEqual(v4, @"PreferredAudioHardwareSampleRate"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v404 = CFGetTypeID(a3);
        if (v404 != CFNumberGetTypeID()) {
          goto LABEL_1536;
        }
        [a1 preferredOutputSampleRate];
        double v406 = v405;
        double valuePtr = 0.0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat64Type, &valuePtr);
        [a1 setPreferredOutputSampleRate:valuePtr];
        objc_msgSend(a1, "setPreferredOutputSampleRateSetByClient:", valuePtr != 0.0, valuePtr);
        if (dword_1E9359ED0)
        {
          *(_DWORD *)os_log_type_t type = 0;
          os_log_type_t v537 = OS_LOG_TYPE_DEFAULT;
          v407 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v408 = *(_DWORD *)type;
          if (os_log_type_enabled(v407, v537)) {
            unsigned int v409 = v408;
          }
          else {
            unsigned int v409 = v408 & 0xFFFFFFFE;
          }
          if (v409)
          {
            uint64_t v410 = [a1 clientName];
            [a1 preferredOutputSampleRate];
            *(_DWORD *)v543 = 136315650;
            *(void *)&v543[4] = "MXCoreSessionSetProperty";
            *(_WORD *)&v543[12] = 2114;
            *(void *)&v543[14] = v410;
            *(_WORD *)&v543[22] = 2048;
            *(void *)&v543[24] = v411;
            LODWORD(v526) = 32;
            v523 = v543;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (vaemIsAC3EncodingSupported())
        {
          [a1 preferredHardwareFormat];
          BOOL v417 = FigCFEqual() != 0;
        }
        else
        {
          BOOL v417 = 0;
        }
        if (vaemIsMATAtmosEnabled())
        {
          [a1 preferredHardwareFormat];
          BOOL v427 = FigCFEqual() != 0;
        }
        else
        {
          BOOL v427 = 0;
        }
        if (v417 || v427)
        {
          [a1 preferredOutputSampleRate];
          if (v433 != 48000.0)
          {
            objc_msgSend(a1, "setPreferredOutputSampleRate:");
            [a1 setPreferredOutputSampleRateSetByClient:0];
          }
        }
        objc_msgSend(a1, "preferredOutputSampleRate", v523, v526);
        if (v406 == v434) {
          return 0;
        }
        [a1 updatePreferredIOBufferFrames:0];
        if (![a1 isActive]) {
          return 0;
        }
        if (!MX_FeatureFlags_IsAudioFormatArbitrationEnabled())
        {
          if (([a1 currentlyControllingFlags] & 2) == 0
            && ![+[MXSessionManager sharedInstance] shouldSetDeviceFormatAndSampleRate:a1])
          {
            return 0;
          }
          goto LABEL_1342;
        }
LABEL_1320:
        cmsmUpdateDeviceAudioFormatConfigIfNeeded(1);
        return 0;
      }
      if (CFEqual(v4, @"PreferredRouteControlFeatures"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_1536;
          }
        }
        id v393 = (id)objc_msgSend((id)objc_msgSend(a1, "preferredRouteControlFeatures"), "copy");
        [a1 setPreferredRouteControlFeatures:a3];
        if (FigCFEqual()) {
          goto LABEL_1311;
        }
        if (dword_1E9359ED0)
        {
          v416 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v416, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (CMSMVAUtility_IsAdditiveRoutingEnabled() && [a1 isActive]) {
          uint64_t updated = [+[MXAdditiveRoutingManager sharedInstance] sendActiveSessionsInfoToVA];
        }
        else {
LABEL_1311:
        }
          uint64_t updated = 0;
        goto LABEL_1312;
      }
      if (CFEqual(v4, @"ProcessAssertionAuditTokens"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v425 = CFGetTypeID(a3);
          if (v425 != CFArrayGetTypeID()) {
            goto LABEL_1536;
          }
        }
        if (([a1 hasEntitlementToSupportProcessAssertionAuditTokens] & 1) == 0) {
          goto LABEL_1536;
        }
        if (dword_1E9359ED0)
        {
          v426 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v426, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v430 = objc_msgSend((id)objc_msgSend(a1, "parentProcessAuditTokens", v523, v526), "copy");
        v431 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithArray:a3];
        [a1 setParentProcessAuditTokens:v431];
        if ([a1 isActive] && objc_msgSend(a1, "isPlaying"))
        {
          if (dword_1E9359ED0) {
            goto LABEL_1310;
          }
          goto LABEL_1351;
        }
        if ([a1 extendBackgroundAppAssertionTimer])
        {
          if (dword_1E9359ED0)
          {
LABEL_1310:
            v432 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v432, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_1351:
          CMSMSleep_UpdatePlaybackProcessAssertionsForHostProcesses(a1, (uint64_t)v430, v431);
        }

        return 0;
      }
      if (CFEqual(v4, @"RouteSharingPolicy"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v428 = CFGetTypeID(a3);
        if (v428 != CFNumberGetTypeID()) {
          goto LABEL_1536;
        }
        char CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
        if (CMSMDeviceState_IsHomePodHub() && CFPreferenceNumberWithDefault)
        {
          if (!dword_1E9359ED0) {
            goto LABEL_1000;
          }
LABEL_1126:
          LODWORD(valuePtr) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v379 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v379, OS_LOG_TYPE_DEFAULT);
          goto LABEL_1127;
        }
        CFNumberRef v437 = MXCFNumberGetValueUInt32((const __CFNumber *)a3);
        if (v437 == 1
          && CMSNP_IsCurrentNowPlayingSessionAirPlayingLongFormMedia()
          && !CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(a1))
        {
          goto LABEL_1536;
        }
        if (dword_1E9359ED0)
        {
          LODWORD(valuePtr) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          v449 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v449, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_msgSend(a1, "updateRouteSharingPolicy:setByClient:", v437, 1, v523, v526);
        if ([a1 routeSharingPolicy] == 3
          || [a1 routeSharingPolicy] == 1)
        {
          v455 = &qword_1E9359CA0;
          goto LABEL_1374;
        }
        if ([a1 routeSharingPolicy] != 2)
        {
          v455 = &qword_1E9359C88;
LABEL_1374:
          [a1 setRoutingContextUUID:*v455];
        }
        if (dword_1E9359ED0)
        {
          v459 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v459, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        cmsUpdateAudioBehavior(a1);
        CMSMUtility_InformAirPlayOfAudioModeIfNecessary([a1 routingContextUUID]);
        CFRetain(a1);
        v462 = MXGetNotificationSenderQueue();
        MXDispatchAsyncFunction((uint64_t)"MXCoreSessionSetProperty", (uint64_t)"CMSessionManager.m", 11215, 0, 0, v462, (uint64_t)a1, (uint64_t)CMSMNotificationUtility_PostSessionRoutingContextDidChange_f);
        CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
        [a1 setRoutingContextSetByClient:1];
        goto LABEL_1000;
      }
      if (CFEqual(v4, @"RoutingContextUUID"))
      {
        if (a1)
        {
          if (!a3 || (CFTypeID v435 = CFGetTypeID(a3), v435 == CFStringGetTypeID()))
          {
            if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)a3) != 3
              || !CMSNP_IsCurrentNowPlayingSessionAirPlayingLongFormMedia()
              || CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(a1))
            {
              [a1 routingContextUUID];
              if (!FigCFEqual())
              {
                [a1 setRoutingContextUUID:a3];
                if (![a1 routingContextUUID]) {
                  [a1 setRoutingContextUUID:qword_1E9359C88];
                }
                if (dword_1E9359ED0)
                {
                  v436 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v436, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                cmsUpdateAudioBehavior(a1);
                CMSMUtility_InformAirPlayOfAudioModeIfNecessary([a1 routingContextUUID]);
                CFRetain(a1);
                v448 = MXGetNotificationSenderQueue();
                MXDispatchAsyncFunction((uint64_t)"MXCoreSessionSetProperty", (uint64_t)"CMSessionManager.m", 11254, 0, 0, v448, (uint64_t)a1, (uint64_t)CMSMNotificationUtility_PostSessionRoutingContextDidChange_f);
                [a1 setRoutingContextSetByClient:1];
                return 0;
              }
              goto LABEL_1000;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"ShadowingAudioSessionID"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v446 = CFGetTypeID(a3);
            if (v446 != CFNumberGetTypeID()) {
              goto LABEL_1536;
            }
            uint64_t v447 = [(NSDictionary *)a3 intValue];
          }
          else
          {
            uint64_t v447 = 0;
          }
          [a1 setShadowingAudioSessionID:v447];
          if (dword_1E9359ED0)
          {
            v454 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v454, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          MX_FeatureFlags_IsMandrakeEverywhereEnabled();
          return 0;
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"SomeMXSessionIsPlaying"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (!a3) {
          goto LABEL_1536;
        }
        CFTypeID v450 = CFGetTypeID(a3);
        if (v450 != CFBooleanGetTypeID()) {
          goto LABEL_1536;
        }
        int v451 = CFBooleanGetValue((CFBooleanRef)a3);
        if (v451 == [a1 someMXSessionIsPlaying]) {
          goto LABEL_1000;
        }
        BOOL v452 = v451 != 0;
        v345 = a1;
        [a1 setSomeMXSessionIsPlaying:v452];
        goto LABEL_1359;
      }
      if (CFEqual(v4, @"CarFigEndpointCentralObject"))
      {
        MEMORY[0x199716E90](gCMSM);
        v456 = (const void *)qword_1E9359C70;
        if (a3)
        {
          qword_1E9359C70 = (uint64_t)a3;
          CFRetain(a3);
          if (v456) {
            CFRelease(v456);
          }
          uint64_t v457 = qword_1E9359C70;
          char IsSiriActive = CMSMUtility_IsSiriActive();
          FigEndpointCentralUpdateIsVoiceAssistantActive(v457, IsSiriActive);
        }
        else if (qword_1E9359C70)
        {
          CFRelease((CFTypeRef)qword_1E9359C70);
          qword_1E9359C70 = 0;
        }
        uint64_t v377 = gCMSM;
        goto LABEL_1387;
      }
      if (CFEqual(v4, @"UserMuted"))
      {
        if (!a1) {
          goto LABEL_1536;
        }
        if (a3)
        {
          CFTypeID v460 = CFGetTypeID(a3);
          if (v460 != CFBooleanGetTypeID()) {
            goto LABEL_1536;
          }
          int v461 = CFBooleanGetValue((CFBooleanRef)a3);
          if (v461 && !PVMIsOKToMuteCurrentCategory())
          {
LABEL_515:
            uint64_t updated = 4294954315;
            goto LABEL_1001;
          }
        }
        else
        {
          int v461 = 0;
        }
        if (v461 != [a1 userMuted])
        {
          [a1 setUserMuted:v461 != 0];
          if (([a1 currentlyControllingFlags] & 0x10) != 0
            || CMSUtility_IsPlayingToSystemSoundLocalVAD(a1))
          {
            CMSUtility_UpdatePlaybackVolume(a1, 0.0, 0.0);
            return 0;
          }
        }
        goto LABEL_1000;
      }
      if (CFEqual(v4, @"UserVolume"))
      {
        *(_DWORD *)audit_token_t buffer = 0;
        if (!a1) {
          goto LABEL_1492;
        }
        if (!a3) {
          goto LABEL_1492;
        }
        CFTypeID v463 = CFGetTypeID(a3);
        if (v463 != CFNumberGetTypeID()) {
          goto LABEL_1492;
        }
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
        float v464 = *(float *)buffer;
        v465 = a1;
        v466 = 0;
LABEL_1404:
        cmsSetVolume(v465, (uint64_t)v466, v464);
        goto LABEL_1000;
      }
      if (CFEqual(v4, @"UserVolumeWithRefCon"))
      {
        *(_DWORD *)audit_token_t buffer = 0;
        if (!a1) {
          goto LABEL_1492;
        }
        if (!a3) {
          goto LABEL_1492;
        }
        CFTypeID v467 = CFGetTypeID(a3);
        if (v467 != CFDictionaryGetTypeID()) {
          goto LABEL_1492;
        }
        CFNumberRef v468 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, @"UserVolume");
        CFNumberGetValue(v468, kCFNumberFloat32Type, buffer);
        v466 = CFDictionaryGetValue((CFDictionaryRef)a3, @"RefCon");
        float v464 = *(float *)buffer;
        v465 = a1;
        goto LABEL_1404;
      }
      if (CFEqual(v4, @"VibratorOn"))
      {
        if (a1)
        {
          if (a3)
          {
            CFTypeID v469 = CFGetTypeID(a3);
            if (v469 == CFBooleanGetTypeID())
            {
              int v470 = CFBooleanGetValue((CFBooleanRef)a3);
              if (dword_1E9359ED0)
              {
                v471 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v471, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              cmsVibrateForSession(a1, v470);
              return 0;
            }
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"PickedRoute"))
      {
        if (a3)
        {
          CFTypeID v472 = CFGetTypeID(a3);
          if (v472 == CFDictionaryGetTypeID())
          {
            CMSUtility_GetDisplayID(a1, v473);
            uint64_t IsPlaying = cmsmActivateEndpointFromRouteDescription((const __CFDictionary *)a3);
            goto LABEL_1537;
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"RouteAwayFromAirPlay"))
      {
        if (a3)
        {
          CFTypeID v474 = CFGetTypeID(a3);
          if (v474 == CFBooleanGetTypeID())
          {
            CMSMAP_DisconnectAllAirPlaySessions(1);
            return 0;
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"AvailableForVoicePrompts"))
      {
        CFTypeID v475 = CFGetTypeID(a3);
        if (v475 == CFDictionaryGetTypeID())
        {
          CFNumberRef v476 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, @"PortNumber");
          if (v476)
          {
            *(_DWORD *)audit_token_t buffer = 0;
            CFNumberGetValue(v476, kCFNumberSInt32Type, buffer);
            BOOL v477 = CFDictionaryGetValue((CFDictionaryRef)a3, @"BTDetails_IsAvailableForVoicePrompts") == v530;
            uint64_t updated = vaeSetPortAvailableForVoicePrompts(*(unsigned int *)buffer, v477);
            cmsmUpdatePickableRouteDescriptionLists(1);
            if (v532) {
              return 0;
            }
            return updated;
          }
          goto LABEL_1000;
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"PickedRouteWithPassword"))
      {
        if (a3)
        {
          CFTypeID v478 = CFGetTypeID(a3);
          if (v478 == CFDictionaryGetTypeID())
          {
            CFDictionaryGetValue((CFDictionaryRef)a3, @"AVAudioRouteName");
            FigCFEqual();
            CMSUtility_GetDisplayID(a1, v479);
            uint64_t IsPlaying = cmsmActivateEndpointFromRouteDescription((const __CFDictionary *)a3);
            goto LABEL_1537;
          }
        }
        goto LABEL_1536;
      }
      if (CFEqual(v4, @"UplinkMute"))
      {
        if (a3)
        {
          CFTypeID v480 = CFGetTypeID(a3);
          if (v480 != CFBooleanGetTypeID()) {
            goto LABEL_1536;
          }
          int v481 = CFBooleanGetValue((CFBooleanRef)a3);
        }
        else
        {
          int v481 = 0;
        }
        uint64_t IsPlaying = vaemSetUplinkMute(v481);
        goto LABEL_1537;
      }
      if (CFEqual(v4, @"DownlinkMute"))
      {
        if (a3)
        {
          CFTypeID v482 = CFGetTypeID(a3);
          if (v482 != CFBooleanGetTypeID()) {
            goto LABEL_1536;
          }
          int v483 = CFBooleanGetValue((CFBooleanRef)a3);
        }
        else
        {
          int v483 = 0;
        }
        uint64_t IsPlaying = vaemSetDownlinkMute(v483);
        goto LABEL_1537;
      }
      if (CFEqual(v4, @"StarkMainAudioIsOwnedByiOSButBorrowedByCar"))
      {
        if (a3)
        {
          CFTypeID v484 = CFGetTypeID(a3);
          if (v484 != CFBooleanGetTypeID()) {
            goto LABEL_1536;
          }
          v485 = +[MXSessionManager sharedInstance];
          BOOL v486 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
        }
        else
        {
          v485 = +[MXSessionManager sharedInstance];
          BOOL v486 = 0;
        }
        [(MXSessionManager *)v485 setStarkMainAudioIsOwnedByiOSButBorrowedByCar:v486];
        return 0;
      }
      if (CFEqual(v4, @"MakeStarkPortRoutableForPlayingSession"))
      {
        if (a3)
        {
          CFTypeID v487 = CFGetTypeID(a3);
          if (v487 != CFBooleanGetTypeID()) {
            goto LABEL_1536;
          }
          v488 = +[MXSessionManager sharedInstance];
          BOOL v489 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
        }
        else
        {
          v488 = +[MXSessionManager sharedInstance];
          BOOL v489 = 0;
        }
        [(MXSessionManager *)v488 makeStarkPortRoutableForPlayingSession:v489];
        return 0;
      }
      if (CFEqual(v4, @"MakeStarkPortRoutableForPhoneCall"))
      {
        if (a3)
        {
          CFTypeID v490 = CFGetTypeID(a3);
          if (v490 != CFBooleanGetTypeID()) {
            goto LABEL_1536;
          }
          v491 = +[MXSessionManager sharedInstance];
          BOOL v492 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
        }
        else
        {
          v491 = +[MXSessionManager sharedInstance];
          BOOL v492 = 0;
        }
        [(MXSessionManager *)v491 makeStarkPortRoutableForPhoneCall:v492];
        return 0;
      }
      if (!CFEqual(v4, @"CarSpeechStateChanged"))
      {
        if (CFEqual(v4, @"NowPlayingAppShouldResumeForCarPlay"))
        {
          if (a3)
          {
            CFTypeID v494 = CFGetTypeID(a3);
            if (v494 != CFBooleanGetTypeID()) {
              goto LABEL_1536;
            }
            v495 = +[MXSessionManager sharedInstance];
            BOOL v496 = CFBooleanGetValue((CFBooleanRef)a3) != 0;
          }
          else
          {
            v495 = +[MXSessionManager sharedInstance];
            BOOL v496 = 0;
          }
          [(MXSessionManager *)v495 nowPlayingAppShouldResumeForCarPlay:v496];
          return 0;
        }
        if (CFEqual(v4, @"AllowAppToInitiatePlaybackTemporarily"))
        {
          if (!a3 || (CFTypeID v497 = CFGetTypeID(a3), v497 == CFStringGetTypeID()))
          {
            [+[MXSessionManager sharedInstance] setAppAllowedToInitiatePlaybackTemporarily:a3];
            cmsmStartAllowedToInitiatePlaybackTemporarilyTimer();
            return 0;
          }
          goto LABEL_1536;
        }
        if (CFEqual(v4, @"HeadphoneVolumeLimit"))
        {
          if (a3)
          {
            CFTypeID v498 = CFGetTypeID(a3);
            if (v498 == CFNumberGetTypeID())
            {
              *(_DWORD *)audit_token_t buffer = 1065353216;
              CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, buffer);
              float v499 = *(float *)buffer;
              uint64_t v500 = CMSMUtility_GetVolumeSequenceNumber();
              PVMSetVolumeLimit(v500, v499);
              return 0;
            }
          }
          goto LABEL_1536;
        }
        if (CFEqual(v4, @"VibeIntensity"))
        {
          LODWORD(valuePtr) = 1065353216;
          if (!a3) {
            goto LABEL_1492;
          }
          CFTypeID v501 = CFGetTypeID(a3);
          if (v501 != CFNumberGetTypeID()) {
            goto LABEL_1492;
          }
          CFNumberGetValue((CFNumberRef)a3, kCFNumberFloatType, &valuePtr);
          float v502 = *(float *)&valuePtr;
          if (v502 != PVMGetVibeIntensityPreference())
          {
            if (dword_1E9359ED0)
            {
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v537 = OS_LOG_TYPE_DEFAULT;
              v503 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v504 = *(_DWORD *)type;
              if (os_log_type_enabled(v503, v537)) {
                unsigned int v506 = v504;
              }
              else {
                unsigned int v506 = v504 & 0xFFFFFFFE;
              }
              if (v506)
              {
                DisplayID = CMSUtility_GetDisplayID(a1, v505);
                *(_DWORD *)v543 = 136315650;
                *(void *)&v543[4] = "MXCoreSessionSetProperty";
                *(_WORD *)&v543[12] = 2114;
                *(void *)&v543[14] = DisplayID;
                *(_WORD *)&v543[22] = 2048;
                *(double *)&v543[24] = *(float *)&valuePtr;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v511 = PVMSetVibeIntensityPreference(*(float *)&valuePtr);
            uint64_t updated = v511;
            if (!v511) {
              FigRoutingContextUtilities_LogCurrentState(v511, v512);
            }
            goto LABEL_1001;
          }
          goto LABEL_1000;
        }
        if (CFEqual(v4, @"ThermalGainAdjustment_Speaker"))
        {
          if (!a3) {
            goto LABEL_1536;
          }
          CFTypeID v508 = CFGetTypeID(a3);
          if (v508 != CFNumberGetTypeID()) {
            goto LABEL_1536;
          }
          uint64_t v509 = qword_1E9359B78;
          uint64_t v510 = 0x1EE5F33A8;
        }
        else
        {
          if (!CFEqual(v4, @"ThermalGainAdjustment_Haptics"))
          {
            if (!CFEqual(v4, @"AppToInterruptCurrentNowPlayingSession"))
            {
              if (CFEqual(v4, @"AirPlayScreenSuspended"))
              {
                if (a3)
                {
                  CFTypeID v516 = CFGetTypeID(a3);
                  if (v516 == CFBooleanGetTypeID())
                  {
                    int v517 = CFBooleanGetValue((CFBooleanRef)a3);
                    v518 = [+[MXSessionManager sharedInstance] systemMirroringRoutingContextUUID];
                    if (v517) {
                      FigRoutingManagerSuspendCurrentEndpointScreen((uint64_t)v518);
                    }
                    else {
                      FigRoutingManagerResumeCurrentEndpointScreen((uint64_t)v518);
                    }
                    return 0;
                  }
                }
              }
              else if (CFEqual(v4, @"ThermalControlInfo"))
              {
                if (!a3 || (CFTypeID v519 = CFGetTypeID(a3), v519 == CFDictionaryGetTypeID()))
                {
                  uint64_t IsPlaying = vaemSetThermalControlInfo((uint64_t)a3);
                  goto LABEL_1537;
                }
              }
              else
              {
                if (!CFEqual(v4, @"AllowAppToFadeInTemporarily"))
                {
                  uint64_t updated = 4294954312;
                  goto LABEL_1001;
                }
                if (!a3 || (CFTypeID v522 = CFGetTypeID(a3), v522 == CFStringGetTypeID()))
                {
                  if (MX_FeatureFlags_IsHandoffEnabled())
                  {
                    [+[MXSessionManager sharedInstance] setAppAllowedToFadeInTemporarily:a3];
                    cmsmStartAllowedToFadeInTemporarilyTimer();
                    return 0;
                  }
                  goto LABEL_1000;
                }
              }
              goto LABEL_1536;
            }
            if (a3)
            {
              CFTypeID v514 = CFGetTypeID(a3);
              if (v514 != CFStringGetTypeID()) {
                goto LABEL_1536;
              }
            }
            if (dword_1E9359ED0)
            {
              v515 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v515, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (a3) {
              id v121 = CMSMUtility_CopyActiveMXCoreSessionEligibleForNowPlayingAppConsideration((uint64_t)a3);
            }
            else {
              id v121 = 0;
            }
            id v520 = CMSMNP_CopyNowPlayingAppSession();
            v521 = v520;
            if (v520)
            {
              if ([v520 audioSessionID]) {
                CMSMUtility_PostStopCommandToShadowingSessionsForSession(v521, a3 == 0);
              }
              CMSMNotificationUtility_PostStopCommandToActiveClientWithDisplayID(objc_msgSend(v521, "displayID", v523, v526), 0);
            }
            if (v121)
            {
              CMSUtility_UpdateRoutingContextForSession(v121);
              -[MXNowPlayingAppManager updateNowPlayingApp:session:reasonForUpdate:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance"), "updateNowPlayingApp:session:reasonForUpdate:", objc_msgSend((id)objc_msgSend(v121, "clientPID"), "intValue"), 0, 4);
            }

LABEL_383:
            return 0;
          }
          if (!a3) {
            goto LABEL_1536;
          }
          CFTypeID v513 = CFGetTypeID(a3);
          if (v513 != CFNumberGetTypeID()) {
            goto LABEL_1536;
          }
          uint64_t v509 = qword_1E9359B78;
          uint64_t v510 = 0x1EE5F33C8;
        }
        FigEndpointManagerSetProperty(v509, v510, (uint64_t)a3);
        return 0;
      }
      if (!a3) {
        goto LABEL_1000;
      }
      CFTypeID v493 = CFGetTypeID(a3);
      if (v493 == CFBooleanGetTypeID())
      {
        if (CFBooleanGetValue((CFBooleanRef)a3))
        {
          CMSMNotificationUtility_PostVoicePromptStyleDidChange();
          return 0;
        }
        goto LABEL_1000;
      }
LABEL_1536:
      uint64_t IsPlaying = FigSignalErrorAt();
      goto LABEL_1537;
    }
    if (!a1) {
      goto LABEL_79;
    }
    if (a3)
    {
      CFTypeID v6 = CFGetTypeID(a3);
      if (v6 != CFStringGetTypeID()) {
        goto LABEL_1536;
      }
    }
    [a1 audioCategory];
    if (!FigCFEqual() || (int v7 = FigCFEqual(), v8 = v530, !v7))
    {
      [a1 audioCategory];
      if (!FigCFEqual()) {
        break;
      }
      if (!FigCFEqual()) {
        break;
      }
      char v9 = [a1 createSpeakerDevice];
      long long v8 = v529;
      if ((v9 & 1) == 0) {
        break;
      }
    }
    a4 = 0;
    char v532 = 1;
    a3 = v8;
    uint64_t v4 = @"CreateSpeakerDevice";
    if (!@"CreateSpeakerDevice")
    {
      FigSignalErrorAt();
      return 0;
    }
  }
  if (!FigCFEqual()
    || CMSMDeviceState_SupportsBeacon()
    || MX_FeatureFlags_IsMandrakeEverywhereEnabled())
  {
    [a1 setEnableBluetoothRecordingPreference:0];
    [a1 setEnableBluetoothRecordingPreferenceSetByClient:0];
    [a1 setDefaultBuiltInRoutePreference:0];
    [a1 setDefaultBuiltInRoutePreferenceSetByClient:0];
    long long v118 = a1;
    uint64_t v119 = (uint64_t)a3;
    goto LABEL_376;
  }
  v197 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if ((v532 & 1) == 0) {
    return 4294951615;
  }
  return 0;
}

const char *CMSMUtility_GetStyleString(int a1)
{
  uint64_t result = "NotSet";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "StopEveryone";
      break;
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_6;
    case 4:
      uint64_t result = "StopThoseYouCanAllowingResumption_MixWithOthers";
      break;
    case 8:
      uint64_t result = "StopThoseYouCan_MixWithOthers";
      break;
    default:
      if (a1 == 16)
      {
        uint64_t result = "MixWithEveryone";
      }
      else if (a1 == 32)
      {
        uint64_t result = "MixWithEveryone_DuckTheirVolume";
      }
      else
      {
LABEL_6:
        uint64_t result = "UNKNOWN STYLE";
      }
      break;
  }
  return result;
}

CFNumberRef MXCFNumberGetValueUInt32(const __CFNumber *result)
{
  uint64_t valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

void *CMSUtility_SetAudioOnlyAirPlayVideoIsActive(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 setIsAudioOnlyAirPlayVideoActive:a2 != 0];
  }
  return a1;
}

void *CMSUtility_SetAirPlayVideoIsActive(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 setIsActiveOverAirPlayVideo:a2 != 0];
  }
  return a1;
}

uint64_t vaemSetCameraParameters(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1;
  uint64_t result = CMSMVAUtility_AudioObjectSetPropertyData();
  int v3 = result;
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

__CFArray *cmsCreateSubPortPreferenceFromPropertyValue(void *a1, const __CFArray *a2)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a2 && CFArrayGetCount(a2) >= 1 && CFArrayGetCount(a2) >= 1)
  {
    for (CFIndex i = 0; CFArrayGetCount(a2) > i; ++i)
    {
      CFTypeID v6 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
      if (CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_MicrophonePolarPattern"))
      {
        int Value = CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_MicrophonePolarPattern");
        CFDictionarySetValue(v6, @"polar pattern", Value);
      }
      else if (!CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_DataSourceID"))
      {
        values[0] = 0;
        values[0] = (void *)CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_RouteID");
        CFArrayRef v11 = CFArrayCreate(v3, (const void **)values, 1, MEMORY[0x1E4F1D510]);
        [a1 setOverridePortsList:v11];
        if (v11) {
          CFRelease(v11);
        }
        goto LABEL_9;
      }
      char v9 = CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_DataSourceID");
      CFDictionarySetValue(v6, @"sub-port id", v9);
      long long v10 = CFDictionaryGetValue(ValueAtIndex, @"SelectedRouteDescription_RouteID");
      CFDictionarySetValue(v6, @"port id", v10);
LABEL_9:
      if (CFDictionaryGetCount(v6) >= 1) {
        CFArrayAppendValue(Mutable, v6);
      }
      if (v6) {
        CFRelease(v6);
      }
    }
  }
  if (CFArrayGetCount(Mutable)) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = Mutable == 0;
  }
  if (!v12)
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

BOOL CMSMUtility_IsAllowedToSetPreferredDecoupledInputOutput(uint64_t a1)
{
  return CMSMUtility_IsPlayAndRecordCategory(a1) || FigCFEqual() != 0;
}

uint64_t CMSUtility_IsPlayingToDefaultVAD(void *a1)
{
  uint64_t v2 = [a1 audioDestinationPriority];
  if (a1 && v2) {
    [+[MXSessionManager sharedInstance] getAvailableAudioDestination:v2];
  }
  return FigCFEqual();
}

void DisposeRoutingContextServerState(void *a1)
{
  if (a1)
  {
    if (*((void *)a1 + 1))
    {
      if (FigCFEqual())
      {
        cf[0] = 0;
        uint64_t v2 = *((void *)a1 + 1);
        uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v4 = v3 ? v3 : 0;
        uint64_t v5 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v4 + 48);
        if (v5)
        {
          v5(v2, @"contextUUID", *MEMORY[0x1E4F1CF80], cf);
          if (cf[0])
          {
            FigRoutingManager_CloseRelayCommChannels((uint64_t)cf[0]);
            if (cf[0]) {
              CFRelease(cf[0]);
            }
          }
        }
      }
      if (*((void *)a1 + 2))
      {
        CFArrayRef v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        if (v6)
        {
          CFArrayRef v7 = v6;
          if (CFArrayGetCount(v6) >= 1)
          {
            CFIndex v8 = 0;
            do
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v8);
              CFSetRef Value = (const __CFSet *)CFDictionaryGetValue(*((CFDictionaryRef *)a1 + 2), ValueAtIndex);
              cf[0] = *((CFTypeRef *)a1 + 1);
              cf[1] = ValueAtIndex;
              CFSetApplyFunction(Value, (CFSetApplierFunction)CloseCommChannelApplier, cf);
              ++v8;
            }
            while (v8 < CFArrayGetCount(v7));
          }
          CFDictionaryRemoveAllValues(*((CFMutableDictionaryRef *)a1 + 2));
          CFRelease(v7);
        }
        else
        {
          CFDictionaryRemoveAllValues(*((CFMutableDictionaryRef *)a1 + 2));
        }
      }
    }
    CFArrayRef v11 = (const void *)*((void *)a1 + 2);
    if (v11)
    {
      CFRelease(v11);
      *((void *)a1 + 2) = 0;
    }
    BOOL v12 = (const void *)*((void *)a1 + 1);
    if (v12)
    {
      CFRelease(v12);
      *((void *)a1 + 1) = 0;
    }
    CFStringRef v13 = (const void *)*((void *)a1 + 3);
    if (v13) {
      CFRelease(v13);
    }
    free(a1);
  }
}

void cmsmdeviceState_BatteryStateChanged(int a1, io_registry_entry_t entry, int a3)
{
  if (a3 == -536723200)
  {
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(entry, @"ExternalConnected", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    byte_1E9358980 = FigCFEqual();
    if (CFProperty)
    {
      CFRelease(CFProperty);
    }
  }
}

void __CMSessionMgrSystemSoundActivateForPID_block_invoke(uint64_t a1)
{
  MEMORY[0x199716E90](gCMSS_12);
  if (*(unsigned char *)(a1 + 48))
  {
    if (gSystemSoundIDToCategory)
    {
      uint64_t v2 = (void *)*(unsigned int *)(a1 + 40);
      unsigned int v3 = *(_DWORD *)(a1 + 44);
      if (!CMSMUtility_IsSomeClientRecording()
        || !CMSMUtility_IsSomeRecordingSessionPresentThatDisallowsSystemSounds()
        || (int UpdatedSystemSoundPlayFlags = cmsmSystemSoundShouldPlayDuringRecording((int)v2)) != 0)
      {
        int UpdatedSystemSoundPlayFlags = 0;
        if (gSystemSoundRingerSettings)
        {
          if (gSystemSoundRoutingForCategories && gSystemSoundLowersMusicVolume && gSystemSoundMaxVolume) {
            int UpdatedSystemSoundPlayFlags = cmsmGetUpdatedSystemSoundPlayFlags(v2, v3, 0, 0, 0, 0, 1, 0, 0);
          }
        }
      }
    }
    else
    {
      int UpdatedSystemSoundPlayFlags = 0;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = UpdatedSystemSoundPlayFlags;
    if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) & 3) != 0
      && !CMSMDeviceState_ScreenIsBlanked())
    {
      uint64_t v15 = gCMSS_0;
      if (gCMSS_0)
      {
        while (*(_DWORD *)(v15 + 12) != *(_DWORD *)(a1 + 44) || *(_DWORD *)(v15 + 8) != *(_DWORD *)(a1 + 40))
        {
          uint64_t v15 = *(void *)v15;
          if (!v15) {
            goto LABEL_45;
          }
        }
      }
      else
      {
LABEL_45:
        uint64_t v16 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200405AF6BDC9uLL);
        uint64_t v17 = *(unsigned int *)(a1 + 40);
        v16[2] = v17;
        uint64_t v18 = *(unsigned int *)(a1 + 44);
        v16[3] = v18;
        int v19 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        *((unsigned char *)v16 + 16) = v19 & 1;
        int v20 = (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >> 1) & 1;
        *((unsigned char *)v16 + 17) = (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) & 2) != 0;
        if (v19)
        {
          cmsmPrewarmAudioForSSID(1, (void *)v17, v18);
          *((unsigned char *)v16 + 18) = 1;
          int v20 = *((unsigned __int8 *)v16 + 17);
          uint64_t v17 = v16[2];
          uint64_t v18 = v16[3];
        }
        if (v20)
        {
          cmsmPrewarmVibeForSSID(1, v17, v18);
          *((unsigned char *)v16 + 19) = 1;
          uint64_t v17 = v16[2];
          uint64_t v18 = v16[3];
        }
        *(void *)uint64_t v16 = gCMSS_0;
        gCMSS_0 = (uint64_t)v16;
        gCMSS_1 = 1;
        CMSMSleep_CreatePrewarmIdleSleepPreventor(v17, v18);
      }
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)gCMSS_0;
    if (gCMSS_0)
    {
      do
      {
        while (1)
        {
          CFArrayRef v6 = (uint64_t *)*v5;
          int v7 = *((_DWORD *)v5 + 3);
          if (v7 == *(_DWORD *)(a1 + 44))
          {
            CFIndex v8 = (void *)*((unsigned int *)v5 + 2);
            int v9 = *(_DWORD *)(a1 + 40);
            if (v8 == v9 || v9 == 0) {
              break;
            }
          }
          uint64_t v5 = (uint64_t *)*v5;
          if (!v6) {
            goto LABEL_37;
          }
        }
        if (*((unsigned char *)v5 + 16) && *((unsigned char *)v5 + 18))
        {
          if ((v8 - 1103) <= 2)
          {
            cmsmRemoveSystemSoundAudioCategoriesThatMixIn(*((unsigned int *)v5 + 3));
            CFIndex v8 = (void *)*((unsigned int *)v5 + 2);
            int v7 = *((_DWORD *)v5 + 3);
          }
          cmsmPrewarmAudioForSSID(0, v8, v7);
          *((unsigned char *)v5 + 18) = 0;
        }
        if (*((unsigned char *)v5 + 17) && *((unsigned char *)v5 + 19))
        {
          cmsmPrewarmVibeForSSID(0, *((unsigned int *)v5 + 2), *((_DWORD *)v5 + 3));
          *((unsigned char *)v5 + 19) = 0;
        }
        CMSMSleep_ReleasePrewarmIdleSleepPreventor(*((_DWORD *)v5 + 2), *((_DWORD *)v5 + 3));
        CFArrayRef v11 = (uint64_t *)gCMSS_0;
        if ((uint64_t *)gCMSS_0 == v5)
        {
          BOOL v12 = &gCMSS_0;
        }
        else
        {
          do
          {
            BOOL v12 = v11;
            CFArrayRef v11 = (uint64_t *)*v11;
          }
          while (v11 != v5);
        }
        *BOOL v12 = *v5;
        free(v5);
        if (*(_DWORD *)(a1 + 40)) {
          BOOL v13 = 1;
        }
        else {
          BOOL v13 = v6 == 0;
        }
        uint64_t v5 = v6;
      }
      while (!v13);
LABEL_37:
      BOOL v14 = gCMSS_0 != 0;
    }
    else
    {
      BOOL v14 = 0;
    }
    gCMSS_1 = v14;
  }
  JUMPOUT(0x199716EA0);
}

void cmsmPrewarmAudioForSSID(int a1, void *key, int a3)
{
  CFStringRef SystemSoundCategory = (const __CFString *)cmsmGetSystemSoundCategory(key);
  MappedBehaviorCategory = (__CFString *)CMSystemsoundMgr_GetMappedBehaviorCategory(SystemSoundCategory);
  uint64_t CurrentVADForSystemSoundAudioCategory = cmsmGetCurrentVADForSystemSoundAudioCategory(MappedBehaviorCategory, 0);
  AudioObjectID v9 = CurrentVADForSystemSoundAudioCategory;
  uint64_t VADNameForVADID = (const void *)CMSMUtility_GetVADNameForVADID(CurrentVADForSystemSoundAudioCategory);
  uint64_t value = 0;
  if ([+[MXSessionManager sharedInstance] defaultVADID])
  {
    BOOL v11 = gCMSS_5 == 0;
  }
  else
  {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)gCMSS_5, VADNameForVADID, (const void **)&value)
      && (CFTypeID TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(value)))
    {
      cmsmPrewarmAudioDeviceIDForSSID((uint64_t)key, a3, v9, (uint64_t)VADNameForVADID, (const __CFArray *)value, a1);
      CFDictionaryReplaceValue((CFMutableDictionaryRef)gCMSS_5, VADNameForVADID, value);
    }
    else
    {
      CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      cmsmPrewarmAudioDeviceIDForSSID((uint64_t)key, a3, v9, (uint64_t)VADNameForVADID, Mutable, a1);
      CFDictionaryAddValue((CFMutableDictionaryRef)gCMSS_5, VADNameForVADID, Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
}

uint64_t cmsmGetSystemSoundCategory(void *key)
{
  unsigned int v1 = key;
  CFSetRef Value = CFDictionaryGetValue((CFDictionaryRef)gSystemSoundIDToCategory, (const void *)key);
  if (Value) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v1 > 0x1000;
  }
  if (v3) {
    uint64_t v4 = 0x1EE5EFD28;
  }
  else {
    uint64_t v4 = (uint64_t)Value;
  }
  int HasExclaveCapability = CMSMDeviceState_DeviceHasExclaveCapability();
  if (v1 == 1365
    && HasExclaveCapability
    && [+[MXSystemSoundServices sharedInstance] shouldPrivacyPongPlay])
  {
    return 0x1EE5ED708;
  }
  return v4;
}

uint64_t CMSMDeviceState_DeviceHasExclaveCapability()
{
  if (CMSMDeviceState_DeviceHasExclaveCapability_once != -1) {
    dispatch_once(&CMSMDeviceState_DeviceHasExclaveCapability_once, &__block_literal_global_55);
  }
  return CMSMDeviceState_DeviceHasExclaveCapability_deviceHasExclaveCapability;
}

CFStringRef CMSystemsoundMgr_GetMappedBehaviorCategory(CFStringRef theString)
{
  CFStringRef v1 = theString;
  if (!theString
    || !gRegionalSystemSoundsThatShareBehaviour
    || CFStringFind(theString, @"CameraShutter", 1uLL).length >= 1
    && !CMSMUtility_IsCameraBeingUsed())
  {
    return v1;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)gRegionalSystemSoundsThatShareBehaviour, v1);
  if (!Value) {
    return v1;
  }
  CFStringRef v3 = Value;
  if (FigCFEqual())
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return v3;
  }
  if (!CFStringHasSuffix(v3, @"AlwaysHeard") || !gCMSS_3 || CMSMDeviceState_IsAirplaneModeEnabled()) {
    return v3;
  }
  int IsCarrierNetworkReachable = MX_NetworkObserver_IsCarrierNetworkReachable();
  CFArrayRef v6 = MX_TelephonyClient_CopyIsoCountryCodeForMCC();
  int v7 = MX_TelephonyClient_CopyCountryNameFromOperatorCountryBundle();
  if (dword_1E9359ED0)
  {
    CFIndex v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (IsCarrierNetworkReachable)
  {
    CurrentCountryCode = MX_GEOCountryConfigurationObserver_GetCurrentCountryCode();
    int v11 = MX_NetworkObserver_IsCarrierNetworkReachable();
    if (CurrentCountryCode && !FigCFEqual())
    {
      if (FigCFEqual()) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = v11 == 0;
      }
      int v12 = v13;
      if (!v13) {
        int v11 = 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 1;
    if (!v6 || !v7) {
      goto LABEL_46;
    }
    int v11 = 0;
  }
  if (v11 || !v6 || !v7) {
    goto LABEL_41;
  }
  if (FigCFStringFind() || (char v14 = 1, FigCFStringFind()))
  {
    char v14 = 0;
    int v15 = 1;
  }
  else
  {
    int v15 = 0;
  }
  if (!FigCFEqual() && !FigCFEqual())
  {
    if (!FigCFEqual() && ((FigCFEqual() == 0) & ~v15) != 0) {
      goto LABEL_43;
    }
LABEL_41:
    if (v12)
    {
      int v12 = 1;
      goto LABEL_46;
    }
    goto LABEL_43;
  }
  if ((v14 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_43:
  if (dword_1E9359ED0)
  {
    uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v12 = 0;
LABEL_46:
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v12) {
    return v3;
  }
  return v1;
}

void cmsmPrewarmAudioDeviceIDForSSID(uint64_t a1, int a2, AudioObjectID a3, uint64_t a4, const __CFArray *a5, int a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int valuePtr = a2;
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v10 = v9;
  if (!a6)
  {
    if (!v9) {
      return;
    }
    if (a5) {
      v13.length = CFArrayGetCount(a5);
    }
    else {
      v13.length = 0;
    }
    v13.id location = 0;
    FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(a5, v13, v10);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex(a5, FirstIndexOfValue);
      if (a5 && CFArrayGetCount(a5))
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (dword_1E9359ED0)
        {
          uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        AudioDeviceStop(a3, 0);
      }
    }
    goto LABEL_14;
  }
  if (!a5 || !CFArrayGetCount(a5))
  {
    if (dword_1E9359ED0)
    {
      int v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    AudioDeviceStart(a3, 0);
LABEL_12:
    if (!v10) {
      return;
    }
    goto LABEL_13;
  }
  if (!dword_1E9359ED0) {
    goto LABEL_12;
  }
  int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v10)
  {
LABEL_13:
    CFArrayAppendValue(a5, v10);
LABEL_14:
    CFRelease(v10);
  }
}

uint64_t CMSMUtility_IsSomeClientRecording()
{
  MEMORY[0x199716E90](gCMSM);
  if (byte_1E9359C31) {
    uint64_t v0 = dword_1E9359B98;
  }
  else {
    uint64_t v0 = 0;
  }
  MEMORY[0x199716EA0](gCMSM);
  return v0;
}

void CMSMSleep_CreatePrewarmIdleSleepPreventor(uint64_t a1, uint64_t a2)
{
  if (FigAtomicCompareAndSwap32())
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if ((a1 - 1103) >= 3)
    {
      if ((a1 - 1200) >= 0xC)
      {
        BOOL v6 = (a1 - 1522) < 0xFFFFFFFD;
        if ((a1 - 1522) >= 0xFFFFFFFD) {
          int v7 = @"orb";
        }
        else {
          int v7 = 0;
        }
      }
      else
      {
        BOOL v6 = 0;
        int v7 = @"touchtone";
      }
    }
    else
    {
      BOOL v6 = 0;
      int v7 = @"keypress";
    }
    CFStringRef v8 = MX_RunningBoardServices_CopyDisplayIDForPID(a2);
    CFStringRef v9 = v8;
    if (v8) {
      CFStringAppendFormat(Mutable, 0, @"MediaExperience.pid-%d.%@.", a2, v8);
    }
    else {
      CFStringAppendFormat(Mutable, 0, @"MediaExperience.pid-%d.", a2);
    }
    if (v6) {
      CFStringAppendFormat(Mutable, 0, @"ssid-%d.isprewarmed", a1);
    }
    else {
      CFStringAppendFormat(Mutable, 0, @"%@.isprewarmed", v7);
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v11 = CFDateCreate(v4, Current);
    int v12 = (const void *)sCMSessionMgrPrewarmIdleSleepPreventorName;
    sCMSessionMgrPrewarmIdleSleepPreventorName = (uint64_t)Mutable;
    if (Mutable) {
      CFRetain(Mutable);
    }
    if (v12) {
      CFRelease(v12);
    }
    CFRange v13 = (const void *)sCMSessionMgrPrewarmIdleSleepPreventorCreationTime;
    sCMSessionMgrPrewarmIdleSleepPreventorCreationTime = (uint64_t)v11;
    if (v11) {
      CFRetain(v11);
    }
    if (v13) {
      CFRelease(v13);
    }
    PowerLogDataForSystemSound = CMSMPowerLogCreatePowerLogDataForSystemSound(v7, a2, @"SystemSoundPlayback_Start", sCMSessionMgrPrewarmIdleSleepPreventor, (const void *)sCMSessionMgrPrewarmIdleSleepPreventorName, (const void *)sCMSessionMgrPrewarmIdleSleepPreventorCreationTime);
    sCMSessionMgrPrewarmIdleSleepPreventorAllocated = CMSMSleep_CreateIdleSleepPreventor(Mutable, @"CoreMedia_SystemSoundPlayback", PowerLogDataForSystemSound, (IOPMAssertionID *)&sCMSessionMgrPrewarmIdleSleepPreventor);
    if (PowerLogDataForSystemSound) {
      CFRelease(PowerLogDataForSystemSound);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (v9)
    {
      CFRelease(v9);
    }
  }
}

uint64_t CMSMDeviceState_ScreenIsBlanked()
{
  if (byte_1E9358958) {
    return byte_1E9358950;
  }
  uint64_t state64 = 0;
  if (notify_get_state(dword_1E9358954, &state64)) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = state64 == 0;
  }
  return !v1;
}

BOOL CMSMSleep_CreateIdleSleepPreventor(const void *a1, const void *a2, __CFDictionary *a3, IOPMAssertionID *a4)
{
  if (!a4) {
    return 0;
  }
  if (a1) {
    CFStringRef DefaultIdlePreventorName = (const __CFString *)CFRetain(a1);
  }
  else {
    CFStringRef DefaultIdlePreventorName = CMSMSleep_CreateDefaultIdlePreventorName();
  }
  CFStringRef v9 = DefaultIdlePreventorName;
  IOPMAssertionID AssertionID = 0;
  IOReturn v10 = IOPMAssertionCreateWithName(@"NoIdleSleepAssertion", 0xFFu, DefaultIdlePreventorName, &AssertionID);
  if (!v10)
  {
    if (a2)
    {
      IOPMAssertionID valuePtr = AssertionID;
      if (a3)
      {
        if (AssertionID)
        {
          CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
          CFDictionarySetValue(a3, @"AssertionID", v11);
          if (v11) {
            CFRelease(v11);
          }
        }
      }
      CMSMPowerLogPostPowerLogData(a2, a3);
    }
    *a4 = AssertionID;
  }
  if (v9) {
    CFRelease(v9);
  }
  return v10 == 0;
}

void CMSMPowerLogPostPowerLogData(CFTypeRef cf, CFTypeRef a2)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a2) {
    CFRetain(a2);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = __CMSMPowerLogPostPowerLogData_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  void v5[4] = cf;
  void v5[5] = a2;
  MXDispatchAsync((uint64_t)"CMSMPowerLogPostPowerLogData", (uint64_t)"CMSessionManager_PowerLog.m", 175, 0, 0, global_queue, (uint64_t)v5);
}

__CFDictionary *CMSMPowerLogCreatePowerLogDataForSystemSound(const void *a1, int a2, const void *a3, int a4, const void *a5, const void *a6)
{
  int v18 = a4;
  int valuePtr = a2;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a2)
  {
    CFNumberRef v14 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
    if (a4) {
      goto LABEL_3;
    }
LABEL_7:
    CFNumberRef v15 = 0;
LABEL_8:
    char v16 = 1;
    if (!a5) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  CFNumberRef v14 = 0;
  if (!a4) {
    goto LABEL_7;
  }
LABEL_3:
  CFNumberRef v15 = CFNumberCreate(v12, kCFNumberSInt32Type, &v18);
  if (!v15) {
    goto LABEL_8;
  }
  CFDictionarySetValue(Mutable, @"AssertionID", v15);
  char v16 = 0;
  if (a5) {
LABEL_9:
  }
    CFDictionarySetValue(Mutable, @"AssertionName", a5);
LABEL_10:
  if (a6)
  {
    CFDictionarySetValue(Mutable, @"CreationTime", a6);
    CFDictionarySetValue(Mutable, @"PlaybackStartTime", a6);
  }
  if (a1) {
    CFDictionarySetValue(Mutable, @"SystemSoundName", a1);
  }
  if (v14) {
    CFDictionarySetValue(Mutable, @"PID", v14);
  }
  if (a3) {
    CFDictionarySetValue(Mutable, @"Operation", a3);
  }
  if (qword_1E9359BA8) {
    CFDictionarySetValue(Mutable, @"SystemSoundAudioRoute", (const void *)qword_1E9359BA8);
  }
  if ((v16 & 1) == 0) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  return Mutable;
}

void discoverer_logAvailableRouteDetails(int a1, int a2, CFArrayRef theArray)
{
  cf[27] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!theArray)
  {
    CFArrayRef Mutable = CFStringCreateMutable(v4, 0);
    CFArrayRef Copy = 0;
    goto LABEL_5;
  }
  CFArrayRef Copy = CFArrayCreateCopy(v4, theArray);
  CFArrayRef Mutable = CFStringCreateMutable(v3, 0);
  if (!Copy)
  {
LABEL_5:
    CFIndex Count = 0;
    char v8 = 1;
    goto LABEL_6;
  }
  CFIndex Count = CFArrayGetCount(Copy);
  char v8 = 0;
LABEL_6:
  if (!Count && dword_1E9359D80)
  {
    LODWORD(cf[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_41;
  }
  CFIndex v30 = Count - 1;
  if (Count >= 1)
  {
    CFAllocatorRef alloc = v3;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v26 = *MEMORY[0x1E4F20F28];
    BOOL v29 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFIndex v28 = Count;
    do
    {
      if (CFArrayGetValueAtIndex(Copy, v11))
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Copy, v11);
        CFTypeID v13 = CFGetTypeID(ValueAtIndex);
        uint64_t TypeID = FigEndpointGetTypeID();
        cf[0] = 0;
        CFDictionaryRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(Copy, v11);
        if (v13 == TypeID)
        {
          CFArrayGetValueAtIndex(Copy, v11);
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v17) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          CFTypeID v21 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v18 + 48);
          if (v21) {
            v21(CMBaseObject, v26, alloc, cf);
          }
          CFTypeRef Value = cf[0];
          if (!cf[0]) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
      }
      else
      {
        cf[0] = 0;
        CFDictionaryRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(Copy, v11);
      }
      CFDictionaryRef v19 = v15;
      if (CFDictionaryGetValue(v15, @"IsBTRoute") == v29)
      {
        CFDictionaryGetValue(v19, @"RouteName");
        CFDictionaryGetValue(v19, @"RouteUID");
        CFDictionaryGetValue(v19, @"RouteModel");
        CFDictionaryGetValue(v19, @"BTDetails_IsA2DPRoute");
        CFDictionaryGetValue(v19, @"BTDetails_IsHFPRoute");
        if (dword_1E9359D80)
        {
          int v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      CFDictionaryRef v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(Copy, v11);
      CFTypeRef Value = CFDictionaryGetValue(v23, @"RouteName");
      if (Value) {
        CFTypeRef Value = CFRetain(Value);
      }
      cf[0] = Value;
      CFIndex Count = v28;
      if (!Value) {
        goto LABEL_28;
      }
LABEL_27:
      CFStringAppendFormat(Mutable, 0, @"[%d].%@ ", v11, Value);
LABEL_28:
      if (v30 == v11)
      {
        if (dword_1E9359D80)
        {
          CFTypeID v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else if (v11 && !(v10 + 10 * (v11 / 0xA)))
      {
        if (dword_1E9359D80)
        {
          uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        CFArrayRef Mutable = CFStringCreateMutable(alloc, 0);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      ++v11;
      --v10;
    }
    while (Count != v11);
  }
LABEL_41:
  if ((v8 & 1) == 0) {
    CFRelease(Copy);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t cmsSetIsPlaying(void *a1, int a2)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  char v4 = [a1 currentlyControllingFlags];
  int v5 = [a1 isPlaying];
  id v6 = cmsCopyOverrideRoute(a1);
  if ([a1 isPlaying] == a2)
  {
LABEL_177:
    uint64_t v20 = 0;
    goto LABEL_178;
  }
  if (a2) {
    int updated = CMSUtility_UpdateRoutingContextForSession(a1);
  }
  else {
    int updated = 0;
  }
  int v104 = v5;
  int v7 = MXGetSessionLog();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v100 = v6;
    uint64_t v98 = [a1 clientName];
    uint64_t v97 = [a1 audioCategory];
    uint64_t v96 = [a1 audioMode];
    int v8 = CMSUtility_SessionMixesWithOthers(a1);
    CFStringRef v9 = "Mixable";
    if (!v8) {
      CFStringRef v9 = "NonMixable";
    }
    int v95 = v9;
    uint64_t ContextString = FigRoutingManagerContextUtilities_GetContextString([a1 routingContextUUID]);
    unint64_t v11 = "starting";
    if (!a2) {
      unint64_t v11 = "stopping";
    }
    CFTypeID v93 = v11;
    uint64_t v94 = ContextString;
    CurrentAudioDestinatiouint64_t n = CMSUtility_GetCurrentAudioDestination(a1);
    if (CMSMUtility_IsInputAllowedForCategory((const void *)[a1 audioCategory])) {
      CFTypeID v13 = " and input VAD: ";
    }
    else {
      CFTypeID v13 = "";
    }
    int v103 = a2;
    char v99 = v4;
    if (CMSMUtility_IsInputAllowedForCategory((const void *)[a1 audioCategory])) {
      uint64_t CurrentInputVADUID = (__CFString *)CMSUtility_GetCurrentInputVADUID(a1);
    }
    else {
      uint64_t CurrentInputVADUID = &stru_1EE5E8D28;
    }
    if (CMSMDeviceState_RingerIsOn(1)) {
      CFDictionaryRef v15 = "not silenced";
    }
    else {
      CFDictionaryRef v15 = "silenced";
    }
    if ([a1 silentMuted]) {
      char v16 = "muted";
    }
    else {
      char v16 = "unmuted";
    }
    uint64_t v17 = [a1 routingContextUUID];
    if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1)) {
      uint64_t v18 = "YES";
    }
    else {
      uint64_t v18 = "NO";
    }
    *(_DWORD *)buf = 136450563;
    *(void *)&uint8_t buf[4] = "-CMSessionMgr-";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = "cmsSetIsPlaying";
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v118) = 6086;
    WORD2(v118) = 2114;
    *(void *)((char *)&v118 + 6) = v98;
    HIWORD(v118) = 2114;
    uint64_t v119 = v97;
    __int16 v120 = 2114;
    uint64_t v121 = v96;
    __int16 v122 = 2082;
    uint64_t v123 = v95;
    __int16 v124 = 2114;
    uint64_t v125 = v94;
    __int16 v126 = 2082;
    CFTypeID v127 = v93;
    __int16 v128 = 2114;
    uint64_t v129 = CurrentAudioDestination;
    __int16 v130 = 2082;
    CFTypeID v131 = v13;
    __int16 v132 = 2114;
    v133 = CurrentInputVADUID;
    __int16 v134 = 2082;
    int v135 = v15;
    __int16 v136 = 2082;
    int v137 = v16;
    __int16 v138 = 2113;
    uint64_t v139 = v17;
    __int16 v140 = 2082;
    BOOL v141 = v18;
    __int16 v142 = 1024;
    int v143 = [a1 isPlayingOutput];
    __int16 v144 = 1024;
    int v145 = [a1 isSharedAVAudioSessionInstance];
    _os_log_impl(&dword_194CDF000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i '%{public}@' with [%{public}@/%{public}@] [%{public}s] [%{public}@] %{public}s playing to output VAD: %{public}@%{public}s%{public}@. Ringer switch state: Device is %{public}s, Session is %{public}s. RoutingContextUUID=%{private}@ NowPlayingApp:%{public}s IsPlayingOutput:%{BOOL}u IsSharedAVAudioSessionInstance:%{BOOL}u", buf, 0xAAu);
    id v6 = v100;
    a2 = v103;
    char v4 = v99;
  }
  if ([a1 routeSharingPolicy] == 1
    || [a1 routeSharingPolicy] == 3
    || FigRoutingManagerContextUtilities_GetContextType([a1 routingContextUUID]) == 4)
  {
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointNames([a1 routingContextUUID], (CFMutableArrayRef *)&cf);
    if (dword_1E9359ED0)
    {
      *(_DWORD *)int v108 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (!a2)
  {
    uint64_t v26 = objc_msgSend((id)objc_msgSend(a1, "ID"), "longLongValue");
    [a1 setWasInterruptedByNowPlayingApp:0];
    [a1 setWaitingToResumeWhenDeviceUnlocksOrInForeground:0];
    if ((CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
       || CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
      && CMSM_IDSConnection_IsNearbyPairedDevicePresent())
    {
      CMSM_IDSClient_NotifyRemote_LocalIsPlayingDone(a1);
    }
    CMSUtility_SendSessionVolumeToAudioStatistics(a1, 0, v6);
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "now"), "timeIntervalSince1970");
    uint64_t v28 = v27;
    double v29 = (double)(int)[a1 deactivateTimerDelay];
    CFIndex v30 = MXGetSerialQueue();
    v106[0] = MEMORY[0x1E4F143A8];
    v106[1] = 3221225472;
    v106[2] = __cmsSetIsPlaying_block_invoke;
    v106[3] = &__block_descriptor_48_e5_v8__0l;
    v106[4] = v26;
    v106[5] = v28;
    objc_msgSend(a1, "setSessionDeactivateTimer:", FigRoutingManagerCreateOneShotTimer(v30, v29, (uint64_t)v106, 0, 0));
    objc_msgSend(a1, "setIsPlayingStopTime:", objc_msgSend(MEMORY[0x1E4F1C9C8], "date"));
    [a1 setIsPlaying:0];
    double v31 = (double)[a1 assertionAuditTimerDelay];
    BOOL v32 = MXGetSerialQueue();
    v105[0] = MEMORY[0x1E4F143A8];
    v105[1] = 3221225472;
    v105[2] = __cmsSetIsPlaying_block_invoke_2;
    v105[3] = &__block_descriptor_40_e5_v8__0l;
    v105[4] = v26;
    objc_msgSend(a1, "setSessionAssertionAuditTimer:", FigRoutingManagerCreateOneShotTimer(v32, v31, (uint64_t)v105, 0, 0));
LABEL_118:
    CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange();
    CMSMNotificationUtility_PostHighestArbitrationPriorityForTipiDidChangeIfNeeded();
    int v61 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
    if (v61 == [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID]&& CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1))
    {
      if (([a1 isPlaying] & 1) == 0)
      {
        CFTypeID v62 = +[MXNowPlayingAppManager sharedInstance];
        -[MXNowPlayingAppManager setNowPlayingAppStopTime:](v62, "setNowPlayingAppStopTime:", [MEMORY[0x1E4F1C9C8] date]);
      }
      id v63 = CMSUtility_CopyBundleID(a1);
      -[MXAppProtectionManager handlePlayingStateChangedForNowPlayingApp:isCurrentlyPlaying:](+[MXAppProtectionManager sharedInstance](MXAppProtectionManager, "sharedInstance"), "handlePlayingStateChangedForNowPlayingApp:isCurrentlyPlaying:", v63, [a1 isPlaying]);
    }
    byte_1E9359C30 = CMSMUtility_SomeClientIsPlaying();
    if (sFigClusterSynchronizationManager_ClientIsPlaying) {
      sFigClusterSynchronizationManager_ClientIsPlaying();
    }
    uint64_t v64 = CMSMUtility_CopyCurrentRouteTypes();
    uint64_t v65 = byte_1E9359C30;
    if (!byte_1E9359C30)
    {
      if (FigCFArrayContainsValue())
      {
        dispatch_time_t v66 = dispatch_time(0, 2000000000);
        BOOL v67 = MXGetSerialQueue();
        dispatch_after(v66, v67, &__block_literal_global_299);
LABEL_129:
        if (v64) {
          CFRelease(v64);
        }
        CMSMNotificationUtility_PostSomeSessionIsPlayingDidChange();
        [a1 audioMode];
        if (FigCFEqual()) {
          CMSMNotificationUtility_PostVoicePromptStyleDidChange();
        }
        if (!CMSUtility_GetIsEligibleForBTSmartRoutingConsideration(a1)) {
          goto LABEL_161;
        }
        FigPredictedRouting_UpdatePredictedRoute(7);
        if (![a1 isPlaying])
        {
          FigPredictedRouting_UnmuteSessionIfMutedByPreemptivePortChange();
LABEL_161:
          if (CMSUtility_IsAudioCategoryPrimary(a1))
          {
            CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange(a1);
            CMSMNotificationUtility_PostSomeOtherPrimaryAudioCategoryIsPlayingDidChange(a1);
          }
          if (CMSUtility_IsLongFormVideoSession(a1))
          {
            CMSMUtility_UpdateSomeLongFormVideoClientIsPlayingOverAirPlayVideo();
            CMSMUtility_UpdateSomeLongFormVideoClientIsPlaying();
            CMSMNotificationUtility_PostVideoStreamsDidChange();
          }
          CMScreenHandleIdleEvent(101, v104, objc_msgSend(a1, "isPlaying", v87, v90));
          if (a1)
          {
            id v73 = a1;
            int v74 = MXGetSerialQueue();
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 3221225472;
            *(void *)&buf[16] = __cmsHandleIdleSleep_block_invoke;
            *(void *)&long long v118 = &unk_1E57CB9E8;
            *((void *)&v118 + 1) = a1;
            LOBYTE(v119) = a2;
            MXDispatchAsync((uint64_t)"cmsHandleIdleSleep", (uint64_t)"CMSessionManager.m", 6497, 0, 0, v74, (uint64_t)buf);
          }
          if ((v4 & 2) == 0 && ([a1 currentlyControllingFlags] & 2) != 0) {
            cmsmUpdatePickableRouteDescriptionLists(1);
          }
          CMSMNotificationUtility_PostSpeechDetectStyleDidChangeIfNeeded(0, 0);
          if (a2)
          {
            CMSMSleep_FetchPlaybackProcessAssertion(a1);
          }
          else if (CMSUtility_HasBackgroundEntitlement(a1) {
                 && [a1 applicationState] == 4)
          }
          {
            CMSMSleep_ExtendPlaybackProcessAssertion(a1);
          }
          else
          {
            CMSMSleep_ReleasePlaybackProcessAssertion(a1);
          }
          [+[MXMediaEndowmentManager sharedInstance] refreshAssertions];
          goto LABEL_177;
        }
        if (!MX_FeatureFlags_IsPreemptiveConnectedBannerEnabled()) {
          goto LABEL_156;
        }
        if (([a1 hasAudioCategory:@"MediaPlayback"] & 1) != 0
          || ([a1 hasAudioCategory:@"MediaPlaybackNoSpeaker"] & 1) != 0
          || ([a1 hasAudioCategory:@"Audio/Video"] & 1) != 0
          || ([a1 hasAudioCategory:@"SoloAmbientSound"] & 1) != 0)
        {
          int v68 = 1;
        }
        else
        {
          int v68 = [a1 hasAudioCategory:@"AmbientSound"];
        }
        if ((objc_msgSend(a1, "hasAudioMode:", @"VoicePrompt", v87, v90) & 1) != 0
          || ([a1 hasAudioMode:@"Measurement"] & 1) != 0
          || ([a1 hasAudioMode:@"Raw"] & 1) != 0
          || ([a1 hasAudioMode:@"Enrollment"] & 1) != 0
          || (int v69 = [a1 hasAudioMode:@"LowLatency"], !v68)
          || v69)
        {
          if (![a1 hasAudioCategory:@"PlayAndRecord"]
            || ![a1 hasAudioMode:@"Default"])
          {
            CMSUtility_IsSessionOnlyPlayingLocally(a1);
            goto LABEL_156;
          }
          int v70 = [a1 isPlayingOutput];
        }
        else
        {
          int v70 = 1;
        }
        BOOL IsSessionOnlyPlayingLocally = CMSUtility_IsSessionOnlyPlayingLocally(a1);
        if (v70 && IsSessionOnlyPlayingLocally)
        {
LABEL_160:
          FigPredictedRouting_MuteSessionIfPreemptivePortChanged((uint64_t)a1);
          goto LABEL_161;
        }
LABEL_156:
        if (!MX_FeatureFlags_IsCorianderEnabled()) {
          goto LABEL_161;
        }
        if (CMSMDeviceState_IsHomePodHub()) {
          goto LABEL_161;
        }
        if (!CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1)) {
          goto LABEL_161;
        }
        int v72 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
        if (v72 != [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID])goto LABEL_161; {
        goto LABEL_160;
        }
      }
      uint64_t v65 = byte_1E9359C30;
    }
    CMSMNotificationUtility_PostSomeClientIsPlayingDidChange(v65);
    goto LABEL_129;
  }
  if (CMSUtility_IsAllowedToStartPlaying(a1))
  {
    if ([a1 isActive] && !updated
      || (uint64_t v20 = MXCoreSessionBeginInterruption_WithSecTaskAndFlags(a1, 0, 2, 0), !v20))
    {
      if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1)
        || !CMSUtility_PlaysToCarMainAudio(a1)
        || (![a1 dontTakeOverHardware] ? (uint64_t v21 = 2) : (uint64_t v21 = 8),
            uint64_t v20 = cmsBeginInterruptionGuts(a1, 0, v21),
            !v20))
      {
        if (-[MXSessionManager isAirPlaySession:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance", v87, v90), "isAirPlaySession:", a1)&& ([a1 reporterStarted] & 1) == 0&& !objc_msgSend(a1, "sessionDeactivateTimer"))
        {
          CMSUtility_StartReporterWithAudioStatistics(a1);
        }
        CMSUtility_SendSessionVolumeToAudioStatistics(a1, 1, v6);
        if ([a1 sessionDeactivateTimer])
        {
          dispatch_source_cancel((dispatch_source_t)[a1 sessionDeactivateTimer]);
          [a1 setSessionDeactivateTimer:0];
          if (dword_1E9359ED0)
          {
            LODWORD(cf) = 0;
            v108[0] = OS_LOG_TYPE_DEFAULT;
            unsigned int v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v23 = cf;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v24 = v23;
            }
            else {
              unsigned int v24 = v23 & 0xFFFFFFFE;
            }
            if (v24)
            {
              uint64_t v25 = [a1 clientName];
              *(_DWORD *)int v110 = 136315394;
              *(void *)&v110[4] = "cmsSetIsPlaying";
              __int16 v111 = 2114;
              uint64_t v112 = v25;
              LODWORD(v91) = 22;
              CFTypeID v88 = v110;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        if (objc_msgSend(a1, "sessionAssertionAuditTimer", v88, v91))
        {
          dispatch_source_cancel((dispatch_source_t)[a1 sessionAssertionAuditTimer]);
          [a1 setSessionAssertionAuditTimer:0];
        }
        objc_msgSend(a1, "setIsPlayingStartTime:", objc_msgSend(MEMORY[0x1E4F1C9C8], "date"));
        [a1 setIsPlaying:1];
        if (CMSUtility_IsAllowedToFadeInTemporarily(a1)) {
          CMSMUtility_PostNotifyStyleFadeInAppliedForPlaybackHandoff();
        }
        CMSUtility_RouteToPreferredRouteIfRequired(a1, 0, 3);
        if ((CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
           || CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote())
          && CMSM_IDSConnection_IsNearbyPairedDevicePresent())
        {
          CMSM_IDSClient_NotifyRemote_LocalIsPlayingStart(a1);
        }
        cmsmUpdateFakeSharedAudioRouteAsPicked(0, 0, 0, 1);
        if (CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1)) {
          cmsmUpdateInEarBasedPlaybackState(0, 0, 1);
        }
        cmsTryToTakeControl(a1);
        [+[MXSessionManager sharedInstance] duckSessionIfDuckerIsActive:a1];
        int v37 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID];
        if (!CMSMDeviceState_IsHomePodHub()
          && CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1)
          && objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue") != v37)
        {
          id v44 = CMSMNP_CopyNowPlayingAppSession();
          if (v44
            && (int IsContextSystemMusicAndIndependent = FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent([a1 routingContextUUID]),
                IsContextSystemMusicAndIndependent != FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent([v44 routingContextUUID]))
            && FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent([v44 routingContextUUID]) == 1)
          {
            if (dword_1E9359ED0)
            {
              id v101 = v6;
              LODWORD(cf) = 0;
              v108[0] = OS_LOG_TYPE_DEFAULT;
              CFTypeID v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v47 = cf;
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v48 = v47;
              }
              else {
                unsigned int v48 = v47 & 0xFFFFFFFE;
              }
              if (v48)
              {
                uint64_t v49 = [a1 clientName];
                int v50 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
                uint64_t v51 = [v44 clientName];
                *(_DWORD *)int v110 = 136315906;
                *(void *)&v110[4] = "cmsSetIsPlaying";
                __int16 v111 = 2114;
                uint64_t v112 = v49;
                __int16 v113 = 1024;
                int v114 = v50;
                __int16 v115 = 2114;
                uint64_t v116 = v51;
                LODWORD(v92) = 38;
                int v89 = v110;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              id v6 = v101;
            }
          }
          else if (CMSNP_IsCurrentNowPlayingSessionAirPlayingLongFormMedia() {
                 && !CMSUtility_IsSessionWithPIDAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue")))
          }
          {
            if (dword_1E9359ED0)
            {
              LODWORD(cf) = 0;
              v108[0] = OS_LOG_TYPE_DEFAULT;
              CFTypeID v83 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v84 = cf;
              if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v85 = v84;
              }
              else {
                unsigned int v85 = v84 & 0xFFFFFFFE;
              }
              if (v85)
              {
                uint64_t v86 = [a1 clientName];
                *(_DWORD *)int v110 = 136315394;
                *(void *)&v110[4] = "cmsSetIsPlaying";
                __int16 v111 = 2114;
                uint64_t v112 = v86;
                LODWORD(v92) = 22;
                int v89 = v110;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          else
          {
            if (dword_1E9359ED0)
            {
              LODWORD(cf) = 0;
              v108[0] = OS_LOG_TYPE_DEFAULT;
              CFTypeID v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v78 = cf;
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v79 = v78;
              }
              else {
                unsigned int v79 = v78 & 0xFFFFFFFE;
              }
              if (v79)
              {
                id v80 = v44;
                uint64_t v81 = [a1 clientName];
                int v82 = objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
                *(_DWORD *)int v110 = 136315650;
                *(void *)&v110[4] = "cmsSetIsPlaying";
                __int16 v111 = 2114;
                uint64_t v112 = v81;
                id v44 = v80;
                __int16 v113 = 1024;
                int v114 = v82;
                LODWORD(v92) = 28;
                int v89 = v110;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            -[MXNowPlayingAppManager updateNowPlayingApp:session:reasonForUpdate:](+[MXNowPlayingAppManager sharedInstance](MXNowPlayingAppManager, "sharedInstance", v89, v92), "updateNowPlayingApp:session:reasonForUpdate:", objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), 0, 6);
          }
        }
        int v38 = objc_msgSend((id)objc_msgSend(a1, "clientPID", v89, v92), "intValue");
        if (v38 == [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID]&& (CMSUtility_IsLongFormVideoSession(a1)|| CMSUtility_IsSessionAllowedToInterruptCurrentlyAirPlayingNowPlayingSession(a1)))
        {
          CFTypeRef v39 = CMSMUtility_CopySystemAudioRoutingContextUUID();
          *(void *)int v110 = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v39, 0, (uint64_t)v110);
          if (FigRoutingManagerIsEndpointOfType(*(uint64_t *)v110))
          {
            CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
            uint64_t v40 = *MEMORY[0x1E4F1CF80];
            uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
            uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v42) {
              uint64_t v43 = v42;
            }
            else {
              uint64_t v43 = 0;
            }
            CFTypeID v52 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v43 + 48);
            if (v52) {
              v52(CMBaseObject, *MEMORY[0x1E4F20EC8], v40, &cf);
            }
            *(void *)os_log_type_t type = 0;
            *(void *)int v108 = 0;
            uint64_t v53 = FigEndpointGetCMBaseObject();
            uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v54) {
              uint64_t v55 = v54;
            }
            else {
              uint64_t v55 = 0;
            }
            int v56 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v55 + 48);
            if (v56)
            {
              v56(v53, *MEMORY[0x1E4F20C88], v40, v108);
              if (*(void *)v108) {
                CFNumberGetValue(*(CFNumberRef *)v108, kCFNumberSInt64Type, type);
              }
            }
            CFTypeRef v57 = CMSMUtility_CopySystemMusicRoutingContextUUID();
            double v58 = v57;
            if (cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0]
              && FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)v57)
              && (type[0] & 1) == 0)
            {
              if (v58) {
                CFRetain(v58);
              }
              if (*(void *)v110) {
                CFRetain(*(CFTypeRef *)v110);
              }
              BOOL v76 = MXGetSerialQueue();
              *(void *)buf = MEMORY[0x1E4F143A8];
              *(void *)&uint8_t buf[8] = 3221225472;
              *(void *)&buf[16] = __cmsChangeGroupableAirPlayRouteFromSystemAudioToSystemMusic_block_invoke;
              *(void *)&long long v118 = &__block_descriptor_48_e5_v8__0l;
              *((void *)&v118 + 1) = *(void *)v110;
              uint64_t v119 = (uint64_t)v58;
              MXDispatchAsync((uint64_t)"cmsChangeGroupableAirPlayRouteFromSystemAudioToSystemMusic", (uint64_t)"CMSessionManager.m", 5959, 0, 0, v76, (uint64_t)buf);
            }
            if (*(void *)v108)
            {
              CFRelease(*(CFTypeRef *)v108);
              *(void *)int v108 = 0;
            }
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            if (v58) {
              CFRelease(v58);
            }
          }
          if (*(void *)v110)
          {
            CFRelease(*(CFTypeRef *)v110);
            *(void *)int v110 = 0;
          }
          if (v39) {
            CFRelease(v39);
          }
        }
        BOOL v59 = [+[MXSessionManager sharedInstance] isAirPlaySession:a1];
        if (!v59) {
          FigRoutingContextUtilities_LogCurrentState(v59, v60);
        }
        CMSMUtility_InformAirPlayOfAudioModeIfNecessary([a1 routingContextUUID]);
        goto LABEL_118;
      }
    }
  }
  else
  {
    LODWORD(cf) = 0;
    v108[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v34 = cf;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v35 = v34;
    }
    else {
      unsigned int v35 = v34 & 0xFFFFFFFE;
    }
    if (v35)
    {
      uint64_t v36 = [a1 clientName];
      *(_DWORD *)int v110 = 136315394;
      *(void *)&v110[4] = "cmsSetIsPlaying";
      __int16 v111 = 2114;
      uint64_t v112 = v36;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v20 = 4294950316;
  }
LABEL_178:
  if (v6) {
    CFRelease(v6);
  }
  CMSUtility_UpdateBTLowLatencyMode();
  cmsUpdateMuteStatus(a1);
  CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 0);
  return v20;
}

uint64_t CMSMDeviceState_RingerIsOn(int a1)
{
  if (!a1) {
    cmsmdevicestate_UpdateRingerIsOn();
  }
  return byte_1E9358971;
}

uint64_t FigPredictedRouting_IsPreemptivePortChanged()
{
  if (!FigPredictedRouting_IsPreemptivePortLogicEnabled()) {
    return 0;
  }
  MEMORY[0x199716E90](gPRS_0);
  uint64_t v0 = gPRS_5;
  MEMORY[0x199716EA0](gPRS_0);
  return v0;
}

BOOL FigPredictedRouting_IsPreemptivePortLogicEnabled()
{
  if (predictedRouting_initialize_onceToken != -1) {
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_4_0);
  }
  int IsPreemptiveConnectedBannerEnabled = MX_FeatureFlags_IsPreemptiveConnectedBannerEnabled();
  if (predictedRouting_initialize_onceToken != -1) {
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_4_0);
  }
  return (MX_FeatureFlags_IsCorianderEnabled() | IsPreemptiveConnectedBannerEnabled) != 0;
}

uint64_t MX_FeatureFlags_IsPreemptiveConnectedBannerEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t MX_FeatureFlags_IsCorianderEnabled()
{
  if (MX_FeatureFlags_IsCorianderEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsCorianderEnabled_onceToken, &__block_literal_global_8);
  }
  return MX_FeatureFlags_IsCorianderEnabled_corianderEnabled;
}

void cmsUpdateMuteStatus(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a1)
  {
    int ShouldSilentMute = CMSUtility_ShouldSilentMute(a1);
    DictionaryForMuteStatusUpdate = CMSMUtility_CreateDictionaryForMuteStatusUpdate(a1, ShouldSilentMute);
    if (DictionaryForMuteStatusUpdate)
    {
      int v5 = DictionaryForMuteStatusUpdate;
      CFArrayAppendValue(Mutable, DictionaryForMuteStatusUpdate);
      CFRelease(v5);
    }
    if (!Mutable) {
      return;
    }
LABEL_16:
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, i);
        CFTypeRef Value = (void *)CFDictionaryGetValue(ValueAtIndex, @"session");
        FigCFDictionaryGetInt32IfPresent();
        CFNumberRef v18 = CMSUtility_CopyFadeDuration(a1, 0, 0);
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMSUtility_PostInterruptionCommandNotification(Value, 0, 0, 0, 0, v18, 0, 0);
        if (v18) {
          CFRelease(v18);
        }
      }
    }
    CFRelease(Mutable);
    return;
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v6 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v7 = [(NSPointerArray *)v6 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v22;
    do
    {
      for (uint64_t j = 0; j != v8; ++j)
      {
        if (*(void *)v22 != v9) {
          objc_enumerationMutation(v6);
        }
        unint64_t v11 = *(void **)(*((void *)&v21 + 1) + 8 * j);
        int v12 = CMSUtility_ShouldSilentMute(v11);
        CFTypeID v13 = CMSMUtility_CreateDictionaryForMuteStatusUpdate(v11, v12);
        if (v13)
        {
          CFNumberRef v14 = v13;
          CFArrayAppendValue(Mutable, v13);
          CFRelease(v14);
        }
      }
      uint64_t v8 = [(NSPointerArray *)v6 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v8);
  }
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (Mutable) {
    goto LABEL_16;
  }
}

void CMSUtility_UpdateBTLowLatencyMode()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = CMSMUtility_CopyCurrentRouteTypes();
  int v1 = FigCFArrayContainsValue();
  if (!v1) {
    CMSUtility_UpdateBTLowLatencyMode_currentBTLowLatencyMode = 0;
  }
  if (v0) {
    CFRelease(v0);
  }
  if (v1)
  {
    int valuePtr = 0;
    MEMORY[0x199716E90](gCMSM);
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = 0;
      uint64_t v6 = *(void *)v17;
      while (1)
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v17 != v6) {
            objc_enumerationMutation(v2);
          }
          uint64_t v8 = *(void **)(*((void *)&v16 + 1) + 8 * v7);
          if ([v8 isPlaying] && (objc_msgSend(v8, "doesntActuallyPlayAudio") & 1) == 0)
          {
            [v8 audioCategory];
            if (FigCFEqual())
            {
              int v5 = 2;
LABEL_17:
              int valuePtr = v5;
              goto LABEL_18;
            }
            if (byte_1E9359CB0)
            {
              int v5 = 3;
              goto LABEL_17;
            }
            if (([v8 isSharePlayCallSession] & 1) != 0
              || [v8 isSharePlayMediaSession])
            {
              int v5 = 8;
              int valuePtr = 8;
              goto LABEL_27;
            }
          }
LABEL_18:
          ++v7;
        }
        while (v4 != v7);
        uint64_t v9 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
        uint64_t v4 = v9;
        if (!v9) {
          goto LABEL_27;
        }
      }
    }
    int v5 = 0;
LABEL_27:
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    MEMORY[0x199716EA0](gCMSM);
    if (v5 != CMSUtility_UpdateBTLowLatencyMode_currentBTLowLatencyMode)
    {
      CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSUtility_UpdateBTLowLatencyMode_currentBTLowLatencyMode = valuePtr;
      uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      CFDictionaryRef v15 = *(void (**)(uint64_t, uint64_t, CFNumberRef))(v14 + 56);
      if (v15) {
        v15(CMBaseObject, 0x1EE5F3368, v10);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
  }
}

__CFDictionary *CMSMUtility_CreateDictionaryForMuteStatusUpdate(void *a1, int a2)
{
  if ([a1 silentMuted] == a2) {
    return 0;
  }
  CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int v5 = [a1 silentMuted];
    if (a2)
    {
      if (v5) {
        return Mutable;
      }
    }
    else if (!v5)
    {
      return Mutable;
    }
    [a1 setSilentMuted:a2 != 0];
    CFDictionarySetValue(Mutable, @"session", a1);
    FigCFDictionarySetInt32();
  }
  return Mutable;
}

uint64_t CMSUtility_SessionMixesWithOthers(void *a1)
{
  unsigned int v1 = [a1 interruptionStyle];
  return (v1 > 8) | (0xEDu >> v1) & 1;
}

uint64_t CMSUtility_GetIsEligibleForBTSmartRoutingConsideration(void *a1)
{
  return CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(a1, 1);
}

void CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange(const void *a1)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  int IsPlaying = CMSMUtility_SomePrimaryAudioCategoryClientIsPlaying();
  uint64_t v3 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  if (!IsPlaying) {
    uint64_t v3 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v4 = *v3;
  if (CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange_cachedSomePrimaryAudioCategoryClientIsPlaying != *v3)
  {
    int v5 = @"SomeNonAmbientAudioCategoryClientIsPlayingDidChange_IsPlaying";
    BOOL v6 = v4 != 0;
    BOOL v7 = @"SomeNonAmbientAudioCategoryClientIsPlayingDidChange_IsPlaying" != 0;
    CFIndex v8 = v6 & v7;
    if (v6 && v7)
    {
      uint64_t v9 = (void *)v4;
    }
    else
    {
      int v5 = 0;
      uint64_t v9 = 0;
    }
    keys[0] = v5;
    values = v9;
    CFDictionaryRef v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, v8, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryRef v11 = v10;
    if (v10) {
      CFRetain(v10);
    }
    if (a1) {
      CFRetain(a1);
    }
    int v12 = MXGetNotificationSenderQueue();
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange_block_invoke;
    v13[3] = &unk_1E57CA3A0;
    v13[4] = a1;
    v13[5] = v11;
    MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1249, 0, 0, v12, (uint64_t)v13);
    CMSMNotificationUtility_PostSomePrimaryAudioCategoryIsPlayingDidChange_cachedSomePrimaryAudioCategoryClientint IsPlaying = v4;
    +[MXSystemController notifyAll:@"SomeNonAmbientAudioCategoryClientIsPlayingDidChange" payload:v11 dontPostIfSuspended:0];
    if (v11) {
      CFRelease(v11);
    }
  }
}

uint64_t CMSMUtility_SomePrimaryAudioCategoryClientIsPlaying()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v10 != v3) {
          objc_enumerationMutation(v0);
        }
        int v5 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        int IsAudioCategoryPrimary = CMSUtility_IsAudioCategoryPrimary(v5);
        if ([v5 isPlaying]
          && ([v5 doesntActuallyPlayAudio] & 1) == 0
          && IsAudioCategoryPrimary)
        {
          uint64_t v7 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v7 = 0;
LABEL_13:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v7;
}

void CMSMNotificationUtility_PostSomeOtherPrimaryAudioCategoryIsPlayingDidChange(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v2 = MXGetNotificationSenderQueue();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __CMSMNotificationUtility_PostSomeOtherPrimaryAudioCategoryIsPlayingDidChange_block_invoke;
  v3[3] = &unk_1E57C6368;
  void v3[4] = cf;
  MXDispatchAsync((uint64_t)"CMSMNotificationUtility_PostSomeOtherPrimaryAudioCategoryIsPlayingDidChange", (uint64_t)"CMSessionManager_NotificationUtilities.m", 1229, 0, 0, v2, (uint64_t)v3);
}

void predictedRouting_UpdatePredictedRoute(int a1, int IsSystemAudioRouteBuiltIn)
{
  v74[16] = *(const __CFNumber **)MEMORY[0x1E4F143B8];
  if (predictedRouting_initialize_onceToken != -1) {
    dispatch_once(&predictedRouting_initialize_onceToken, &__block_literal_global_4_0);
  }
  uint64_t v4 = CMSMVAUtility_CopyBTManagedPorts();
  int v5 = v4;
  if (v4) {
    CFIndex Count = CFArrayGetCount(v4);
  }
  else {
    CFIndex Count = 0;
  }
  int v7 = Count > 0;
  if (a1 != 6) {
    IsSystemAudioRouteBuiltIuint64_t n = FigRoutingManagerUtilities_IsSystemAudioRouteBuiltIn();
  }
  int v8 = [+[MXSessionManager sharedInstance] isSmartRoutingEligibleSessionAvailable];
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
  int IsContextSystemMusicAndIndependent = FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent((uint64_t)cf);
  int v63 = a1;
  BOOL v10 = 0;
  int v11 = 0;
  switch(a1)
  {
    case 1:
      if (predictedRouting_UpdatePredictedRoute_sCachedIsBTManagedPortPresent != v7) {
        goto LABEL_14;
      }
      goto LABEL_18;
    case 2:
      if (predictedRouting_UpdatePredictedRoute_sCachedIsBTManagedPortPresent != v7) {
LABEL_14:
      }
        predictedRouting_UpdatePredictedRoute_sCachedIsBTManagedPortPresent = Count > 0;
      goto LABEL_9;
    case 5:
    case 8:
    case 9:
    case 10:
      goto LABEL_9;
    case 6:
      int v13 = IsContextSystemMusicAndIndependent;
      if (predictedRouting_UpdatePredictedRoute_sCachedRouteIsBuiltIn == IsSystemAudioRouteBuiltIn)
      {
        int v14 = 0;
      }
      else
      {
        predictedRouting_UpdatePredictedRoute_sCachedRouteIsBuiltIuint64_t n = IsSystemAudioRouteBuiltIn;
        int v14 = FigPredictedRouting_IsPreemptivePortChanged() ^ 1;
      }
      BOOL v62 = predictedRouting_UpdatePredictedRoute_sSystemMusicIsIndependent != v13;
      if (predictedRouting_UpdatePredictedRoute_sSystemMusicIsIndependent != v13) {
        predictedRouting_UpdatePredictedRoute_sSystemMusicIsIndependent = v13;
      }
      if (v14) {
        goto LABEL_24;
      }
      int v11 = 0;
      goto LABEL_37;
    case 7:
      if (predictedRouting_UpdatePredictedRoute_sCachedSessionIsPlaying == v8)
      {
LABEL_18:
        int v11 = 0;
        BOOL v62 = 0;
      }
      else
      {
        predictedRouting_UpdatePredictedRoute_sCachedSessionint IsPlaying = v8;
LABEL_9:
        int IsPreemptivePortChanged = FigPredictedRouting_IsPreemptivePortChanged();
        BOOL v62 = 0;
        int v11 = 0;
        if (!IsPreemptivePortChanged)
        {
LABEL_24:
          int v11 = FigPredictedRouting_IsTimerActive() ^ 1;
          BOOL v10 = v62;
LABEL_25:
          BOOL v62 = v10;
          if (a1 == 3)
          {
            id v65 = 0;
            CFDictionaryRef v15 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
            long long v16 = (const void *)MXBluetoothServices_CopyPreemptivePortInfo(301, 0, 0, (uint64_t)&v65);
            long long v17 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v16, 0, *MEMORY[0x1E4F20640], 0);
            if (v16) {
              CFRelease(v16);
            }
            if (v17)
            {
              long long v18 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)v17, 0);
              long long v19 = v18;
              if (v18)
              {
                CFRetain(v18);
                if (v15) {
                  CFRelease(v15);
                }
                if (dword_1E9359DC0)
                {
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type);
                  int v35 = 1;
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                else
                {
                  int v35 = 1;
                }
                CFDictionaryRef v15 = v19;
              }
              else
              {
                int v35 = 0;
              }

              CFRelease(v17);
            }
            else
            {
              int v35 = 0;
            }
            if (v65)
            {
              FigPredictedRouting_SetPreemptivePortChanged(1);
              if (!v35)
              {
                uint64_t v36 = [v65 objectForKey:@"RouteUID"];
                if (v36) {
                  [(__CFDictionary *)v15 setObject:v36 forKey:@"RouteUID"];
                }
                uint64_t v37 = objc_msgSend(v65, "objectForKey:", @"RouteName", v60, v61);
                if (v37) {
                  [(__CFDictionary *)v15 setObject:v37 forKey:@"RouteName"];
                }
                uint64_t v38 = [v65 objectForKey:@"RouteModel"];
                if (v38) {
                  [(__CFDictionary *)v15 setObject:v38 forKey:@"RouteModel"];
                }
                uint64_t v39 = [v65 objectForKey:@"BatteryLeft"];
                if (v39) {
                  [(__CFDictionary *)v15 setObject:v39 forKey:@"BTDetails_BatteryLevelLeft"];
                }
                uint64_t v40 = [v65 objectForKey:@"BatteryRight"];
                if (v40) {
                  [(__CFDictionary *)v15 setObject:v40 forKey:@"BTDetails_BatteryLevelRight"];
                }
              }
            }
            double v29 = v15;

            goto LABEL_81;
          }
        }
      }
LABEL_37:
      if ((a1 - 11) <= 0xFFFFFFFD && Count >= 1 && IsSystemAudioRouteBuiltIn && v11)
      {
        CFStringRef v21 = (const __CFString *)MXBluetoothServices_CopyPreferredDeviceAddress(301, 0, 1, 0);
        CFStringRef v22 = CMSMVAUtility_CopyDeviceIDFromBTAddress(v21);
        uint64_t v23 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v22, 0, *MEMORY[0x1E4F20660], 0);
        if (v23)
        {
          long long v24 = (const void *)v23;
          v74[0] = 0;
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v26) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = 0;
          }
          double v31 = *(void (**)(uint64_t, uint64_t, void, const __CFNumber **))(v27 + 48);
          if (v31) {
            v31(CMBaseObject, 0x1EE5F4148, *MEMORY[0x1E4F1CF80], v74);
          }
          AudioObjectID PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(v74[0]);
          BOOL ShouldBTPortBeTreatedAsInEar = CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(PortFromCFNumber);
          if (ShouldBTPortBeTreatedAsInEar) {
            double v29 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)v24, 0);
          }
          else {
            double v29 = 0;
          }
          predictedRouting_UpdatePredictedRoute_sCachedPreferredBTDeviceIsInEar = ShouldBTPortBeTreatedAsInEar;
          if (v74[0]) {
            CFRelease(v74[0]);
          }
          CFRelease(v24);
        }
        else
        {
          double v29 = 0;
        }
        a1 = v63;
        if (v22) {
          CFRelease(v22);
        }
        if (v21) {
          CFRelease(v21);
        }
LABEL_81:
        MEMORY[0x199716E90](gPRS_0);
        int v30 = 1;
        goto LABEL_82;
      }
      int v64 = v11;
      MEMORY[0x199716E90](gPRS_0);
      if (a1 == 9)
      {
        if (dword_1E9359DC0)
        {
          LODWORD(v65) = 0;
          uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (gPRS_1)
        {
          CFRelease((CFTypeRef)gPRS_1);
          gPRS_1 = 0;
        }
        FigPredictedRouting_StartTimer(480.0);
        double v29 = 0;
        int v34 = 1;
        goto LABEL_97;
      }
      double v29 = 0;
      int v30 = v64;
LABEL_82:
      int v64 = v30;
      if (a1 == 10)
      {
        if (dword_1E9359DC0)
        {
          LODWORD(v65) = 0;
          id v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v45 = v65;
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v46 = v45;
          }
          else {
            unsigned int v46 = v45 & 0xFFFFFFFE;
          }
          if (v46)
          {
            int v68 = 136315138;
            int v69 = "predictedRouting_UpdatePredictedRoute";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (gPRS_1)
        {
          CFRelease((CFTypeRef)gPRS_1);
          gPRS_1 = 0;
        }
        int v34 = 1;
        predictedRouting_UpdatePredictedRoute_sCachedSessionint IsPlaying = 1;
        goto LABEL_120;
      }
      if (a1 == 4)
      {
        if (dword_1E9359DC0)
        {
          LODWORD(v65) = 0;
          uint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v42 = v65;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v43 = v42;
          }
          else {
            unsigned int v43 = v42 & 0xFFFFFFFE;
          }
          if (v43)
          {
            int v68 = 136315138;
            int v69 = "predictedRouting_UpdatePredictedRoute";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigPredictedRouting_StopPreemptivePortChangedTimer(1);
        unsigned int v48 = (const void *)gPRS_1;
        if (!gPRS_1)
        {
          int v34 = 0;
          goto LABEL_120;
        }
        if (!dword_1E9359DC0) {
          goto LABEL_118;
        }
        LODWORD(v65) = 0;
        uint64_t v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v50 = v65;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v51 = v50;
        }
        else {
          unsigned int v51 = v50 & 0xFFFFFFFE;
        }
        if (v51)
        {
          int v68 = 136315138;
          int v69 = "predictedRouting_UpdatePredictedRoute";
          _os_log_send_and_compose_impl();
        }
        int v34 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        unsigned int v48 = (const void *)gPRS_1;
        if (gPRS_1)
        {
LABEL_118:
          CFRelease(v48);
          gPRS_1 = 0;
LABEL_119:
          int v34 = 1;
          goto LABEL_120;
        }
        goto LABEL_120;
      }
      int v34 = 0;
LABEL_97:
      if (!FigCFEqual() && v64)
      {
        unsigned int v47 = (const void *)gPRS_1;
        gPRS_1 = (uint64_t)v29;
        if (v29) {
          CFRetain(v29);
        }
        if (v47) {
          CFRelease(v47);
        }
        int v64 = 1;
        goto LABEL_119;
      }
LABEL_120:
      if (FigCFDictionaryGetCount())
      {
        CFTypeRef Value = CFDictionaryGetValue((CFDictionaryRef)gPRS_1, @"RouteName");
        uint64_t v53 = CFDictionaryGetValue((CFDictionaryRef)gPRS_1, @"RouteUID");
        if (v63 == 7
          && predictedRouting_UpdatePredictedRoute_sCachedSessionIsPlaying
          && v64
          && !predictedRouting_UpdatePredictedRoute_sSystemMusicIsIndependent)
        {
          if (dword_1E9359DC0)
          {
            LODWORD(v65) = 0;
            uint64_t v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v55 = v65;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v56 = v55;
            }
            else {
              unsigned int v56 = v55 & 0xFFFFFFFE;
            }
            if (v56)
            {
              int v68 = 136315651;
              int v69 = "predictedRouting_UpdatePredictedRoute";
              __int16 v70 = 2114;
              uint64_t v71 = Value;
              __int16 v72 = 2113;
              id v73 = v53;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (gPRS_1)
          {
            CFRelease((CFTypeRef)gPRS_1);
            gPRS_1 = 0;
          }
          int v34 = 1;
        }
      }
      MEMORY[0x199716EA0](gPRS_0);
      if (dword_1E9359DC0)
      {
        CFTypeRef v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v74[0] = 0;
      p_CFTypeRef cf = (uint64_t *)v74;
      FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)v74);
      if (v34) {
        goto LABEL_143;
      }
      char v59 = !v62;
      if (!predictedRouting_UpdatePredictedRoute_sSystemMusicIsIndependent) {
        char v59 = 1;
      }
      if ((v59 & 1) == 0)
      {
        p_CFTypeRef cf = (uint64_t *)&cf;
LABEL_143:
        FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(*p_cf, @"predictedSelectedRouteDescriptorChanged", 0);
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v74[0])
      {
        CFRelease(v74[0]);
        v74[0] = 0;
      }
      if (v29) {
        CFRelease(v29);
      }
      if (v5) {
        CFRelease(v5);
      }
      return;
    default:
      goto LABEL_25;
  }
}

uint64_t cmsmUpdateFakeSharedAudioRouteAsPicked(int a1, int a2, int a3, int a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v11 = a2;
  MEMORY[0x199716E90](gCMSM);
  int v8 = word_1E9359BD8;
  if (a2 == 1919184754)
  {
    LOBYTE(word_1E9359BD8) = 1;
    MEMORY[0x199716EA0](gCMSM);
    if (v8 == 1) {
      return 0;
    }
    cmsmUpdateEnableSharedAudioRouteSyntheticMute(0, 0, 0, 0, 0, 1);
  }
  else
  {
    if (!(_BYTE)word_1E9359BD8 || !(a3 | a1 | a4))
    {
      MEMORY[0x199716EA0](gCMSM);
      return 0;
    }
    LOBYTE(word_1E9359BD8) = 0;
    MEMORY[0x199716EA0](gCMSM);
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

BOOL FigRoutingManagerUtilities_IsSystemAudioRouteBuiltIn()
{
  CFTypeRef v10 = 0;
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v10);
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v10, (uint64_t)&theArray);
  if (theArray)
  {
    if (CFArrayGetCount(theArray) == 1 && (CFTypeRef cf = 0, CFArrayGetValueAtIndex(theArray, 0)))
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v1) {
        uint64_t v2 = v1;
      }
      else {
        uint64_t v2 = 0;
      }
      uint64_t v4 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v2 + 48);
      if (v4)
      {
        v4(CMBaseObject, 0x1EE5F4288, *MEMORY[0x1E4F1CF80], &cf);
        CFNumberRef v5 = (const __CFNumber *)cf;
      }
      else
      {
        CFNumberRef v5 = 0;
      }
      unsigned int PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber(v5);
      BOOL v3 = PortFromCFNumber == 1886613611 || PortFromCFNumber == 1886545251;
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      BOOL v3 = 0;
    }
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
  return v3;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemMusicContextUUID(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopySystemMusicContextUUID_block_invoke;
    _OWORD v6[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v2 = 0;
    }
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemMusicContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4581, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

void FigPredictedRouting_UpdatePredictedRoute(int a1)
{
}

uint64_t CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote()
{
  return byte_1E9358FC1;
}

uint64_t CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocal()
{
  return byte_1E9358FC0;
}

uint64_t CMSMUtility_SomeClientIsPlaying()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v0 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v1 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v0);
        }
        CFNumberRef v5 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v5 isPlaying] && !objc_msgSend(v5, "doesntActuallyPlayAudio"))
        {
          uint64_t v6 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v2 = [(NSPointerArray *)v0 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v6 = 0;
LABEL_12:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v6;
}

uint64_t CMSMNotificationUtility_PostSomeClientIsPlayingDidChange(uint64_t result)
{
  int v1 = result;
  if (!result)
  {
    uint64_t result = CMSMUtility_SomeNonMixableClientIsPlaying();
    int v1 = result;
  }
  if (CMSMNotificationUtility_PostSomeClientIsPlayingDidChange_cachedSomeClientIsPlaying != v1)
  {
    uint64_t result = +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", @"SomeClientIsPlayingDidChange", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", v1 != 0), @"IsPlaying", 0), 0);
    CMSMNotificationUtility_PostSomeClientIsPlayingDidChange_cachedSomeClientint IsPlaying = v1;
  }
  return result;
}

uint64_t cmsBeginInterruptionGuts(void *a1, void *a2, char a3)
{
  uint64_t v225 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MXGetPerformanceLog();
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_194CDF000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "Session activation", (const char *)&unk_194EE9136, buf, 2u);
  }
  unint64_t v7 = 0x1EB3B9000uLL;
  BOOL v155 = [+[MXSessionManager sharedInstance] areBothBudsInEarForA2DPPort];
  __int16 v184 = 0;
  BOOL v183 = 0;
  char v157 = [a1 currentlyControllingFlags];
  int v154 = [a1 currentlyControllingFlags];
  unsigned __int16 v8 = [a1 hwControlFlags];
  unsigned int v165 = [a1 hwControlFlags];
  int v182 = 0;
  int v181 = 0;
  uint64_t v156 = CMSMUtility_CopyCurrentRouteTypes();
  MEMORY[0x199716E90](gCMSM);
  BOOL v9 = (a3 & 8) != 0 || [a1 siriInputDeviceUUID] != 0;
  v158 = a2;
  [a1 setDontTakeOverHardware:v9];
  if ([a1 hasAudioCategory:@"Alarm"]
    && CMSMDeviceState_ItsAHomePod())
  {
    CMSUtility_UpdateAlarmBehaviorOnAccessory(a1);
  }
  CMSUtility_InterpretInterruptionStyle(a1, (BOOL *)&v184 + 1, (BOOL *)&v184, &v183);
  int v10 = HIBYTE(v184);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v12 = [a1 timestampWhenMostRecentlyInterrupted];
  int IsSiriRecording = CMSMUtility_IsSiriRecording();
  BOOL v14 = [+[MXSessionManager sharedInstance] isSessionWithAudioCategoryActive:@"Alarm"];
  if (-[MXSessionManager wombatEnabled](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "wombatEnabled")&& ([a1 prefersToPlayDuringWombat] & 1) == 0)
  {
    if (dword_1E9359ED0)
    {
      unsigned int v187 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v27 = v187;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v28 = v27;
      }
      else {
        unsigned int v28 = v27 & 0xFFFFFFFE;
      }
      if (v28)
      {
        uint64_t v29 = [a1 clientName];
        *(_DWORD *)v192 = 136315394;
        v193 = "cmsShouldSkipBeginInterruption";
        __int16 v194 = 2114;
        uint64_t v195 = v29;
        LODWORD(v152) = 22;
        p_int valuePtr = v192;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (CMSMDeviceState_ItsAniPad())
    {
      if (CMSUtility_HasPhoneCallBehaviour(a1)) {
        BOOL IsRecordingCategory = 1;
      }
      else {
        BOOL IsRecordingCategory = CMSMUtility_IsRecordingCategory((const void *)[a1 audioCategory]);
      }
      -[MXSessionManager postDisallowedActivationDueToContinuityCaptureNotification:videoPlaybackWasIntended:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "postDisallowedActivationDueToContinuityCaptureNotification:videoPlaybackWasIntended:", IsRecordingCategory, objc_msgSend((id)objc_msgSend(a1, "audioMode", p_valuePtr, v152), "isEqualToString:", @"MoviePlayback"));
    }
LABEL_94:
    uint64_t v40 = 4294951610;
LABEL_341:
    char v148 = 0;
    CFArrayRef v142 = 0;
    goto LABEL_345;
  }
  if (-[MXSessionManager isSessionWithAudioModeActive:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionWithAudioModeActive:", @"Enrollment")&& ![a1 clientPriority]&& (objc_msgSend(a1, "hasAudioMode:", @"Enrollment") & 1) == 0)
  {
    if (!dword_1E9359ED0)
    {
      uint64_t v40 = 4294951610;
      unint64_t v7 = 0x1EB3B9000;
      goto LABEL_341;
    }
    unsigned int v187 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    unsigned int v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v48 = v187;
    if (os_log_type_enabled(v47, type)) {
      unsigned int v49 = v48;
    }
    else {
      unsigned int v49 = v48 & 0xFFFFFFFE;
    }
    if (v49)
    {
      uint64_t v50 = [a1 clientName];
      *(_DWORD *)v192 = 136315394;
      v193 = "cmsShouldSkipBeginInterruption";
      __int16 v194 = 2114;
      uint64_t v195 = v50;
      LODWORD(v152) = 22;
      p_int valuePtr = v192;
      _os_log_send_and_compose_impl();
    }
    unint64_t v7 = 0x1EB3B9000;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_94;
  }
  if ((float)((float)(UpTimeNanoseconds - v12) / 1000000000.0) <= 1.5)
  {
    uint64_t v15 = [a1 timestampWhenMostRecentResumableEndInterruptionWasSent];
    if (v15 < [a1 timestampWhenMostRecentlyInterrupted])
    {
      int v16 = [a1 clientPriority];
      int v17 = IsSiriRecording || v14;
      if (!v16 && v17)
      {
        unint64_t v7 = 0x1EB3B9000;
        if (dword_1E9359ED0)
        {
          unsigned int v187 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          long long v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v19 = v187;
          if (os_log_type_enabled(v18, type)) {
            unsigned int v20 = v19;
          }
          else {
            unsigned int v20 = v19 & 0xFFFFFFFE;
          }
          if (v20)
          {
            uint64_t v21 = [a1 clientName];
            *(_DWORD *)v192 = 136315394;
            v193 = "cmsShouldSkipBeginInterruption";
            __int16 v194 = 2114;
            uint64_t v195 = v21;
            LODWORD(v152) = 22;
            p_int valuePtr = v192;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          unint64_t v7 = 0x1EB3B9000;
        }
        CMSUtility_SendSessionReinterruptionDisallowedEventToAudioStatistics(a1);
LABEL_167:
        uint64_t v40 = 4294954311;
        goto LABEL_341;
      }
    }
  }
  unint64_t v7 = 0x1EB3B9000uLL;
  if (v10)
  {
    CFStringRef v22 = v158;
    if (v158)
    {
      if (!CMSUtility_IsAllowedToStopThisSession(a1, v158))
      {
        if (dword_1E9359ED0)
        {
          unsigned int v187 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v24 = v187;
          if (os_log_type_enabled(v23, type)) {
            unsigned int v25 = v24;
          }
          else {
            unsigned int v25 = v24 & 0xFFFFFFFE;
          }
          if (!v25) {
            goto LABEL_148;
          }
          goto LABEL_147;
        }
LABEL_149:
        uint64_t v40 = 4294954313;
        goto LABEL_341;
      }
    }
    else if (!CMSUtility_IsAllowedToStopOthers(a1))
    {
      if (dword_1E9359ED0)
      {
        unsigned int v187 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        CFTypeID v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v53 = v187;
        if (os_log_type_enabled(v52, type)) {
          unsigned int v54 = v53;
        }
        else {
          unsigned int v54 = v53 & 0xFFFFFFFE;
        }
        if (v54)
        {
          uint64_t v55 = [a1 clientName];
          *(_DWORD *)v192 = 136315394;
          v193 = "cmsShouldSkipBeginInterruption";
          __int16 v194 = 2114;
          uint64_t v195 = v55;
          LODWORD(v152) = 22;
          p_int valuePtr = v192;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_167;
    }
  }
  else
  {
    CFStringRef v22 = v158;
    if (([a1 isTheAssistant] & 1) == 0)
    {
      if (CMSMUtility_IsSiriRecording())
      {
        if (!CMSMUtility_DoesSiriAllowMixableAudioWhileRecording()
          && ([a1 doesntActuallyPlayAudio] & 1) == 0)
        {
          [a1 audioCategory];
          if (!FigCFEqual() && !CMSMDeviceState_ItsAHomePod())
          {
            if (dword_1E9359ED0)
            {
              unsigned int v187 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              int v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v31 = v187;
              if (os_log_type_enabled(v30, type)) {
                unsigned int v32 = v31;
              }
              else {
                unsigned int v32 = v31 & 0xFFFFFFFE;
              }
              if (v32)
              {
                uint64_t v33 = [a1 clientName];
                *(_DWORD *)v192 = 136315394;
                v193 = "cmsShouldSkipBeginInterruption";
                __int16 v194 = 2114;
                uint64_t v195 = v33;
                LODWORD(v152) = 22;
                p_int valuePtr = v192;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v40 = 4294954307;
            goto LABEL_341;
          }
        }
      }
    }
  }
  v168 = a1;
  if (!CMSMVAUtility_IsAdditiveRoutingEnabled()
    || ![+[MXSessionManager sharedInstance] sessionUtilizesIndependentRecordingOnly:a1])
  {
    if (v22)
    {
      if (!CMSUtility_HasHigherPriorityToInterrupt(a1, v22, v8))
      {
        if (!dword_1E9359ED0) {
          goto LABEL_149;
        }
        unsigned int v187 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        int v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v35 = v187;
        if (os_log_type_enabled(v34, type)) {
          unsigned int v36 = v35;
        }
        else {
          unsigned int v36 = v35 & 0xFFFFFFFE;
        }
        if (!v36) {
          goto LABEL_148;
        }
LABEL_147:
        uint64_t v70 = [a1 clientName];
        *(_DWORD *)v192 = 136315394;
        v193 = "cmsShouldSkipBeginInterruption";
        __int16 v194 = 2114;
        uint64_t v195 = v70;
        LODWORD(v152) = 22;
        p_int valuePtr = v192;
        _os_log_send_and_compose_impl();
LABEL_148:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_149;
      }
    }
    else
    {
      [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
      memset(v202, 0, sizeof(v202));
      uint64_t v37 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
      uint64_t v38 = [(NSPointerArray *)v37 countByEnumeratingWithState:v202 objects:&valuePtr count:16];
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v40 = 0;
        uint64_t v41 = **(void **)&v202[1];
        do
        {
          for (uint64_t i = 0; i != v39; ++i)
          {
            if (**(void **)&v202[1] != v41) {
              objc_enumerationMutation(v37);
            }
            if (!CMSUtility_HasHigherPriorityToInterrupt(a1, *(void **)(*((void *)&v202[0] + 1) + 8 * i), v8))
            {
              if (dword_1E9359ED0)
              {
                unsigned int v187 = 0;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                unsigned int v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v44 = v187;
                if (os_log_type_enabled(v43, type)) {
                  unsigned int v45 = v44;
                }
                else {
                  unsigned int v45 = v44 & 0xFFFFFFFE;
                }
                if (v45)
                {
                  uint64_t v46 = [v168 clientName];
                  *(_DWORD *)v192 = 136315394;
                  v193 = "cmsShouldSkipBeginInterruption";
                  __int16 v194 = 2114;
                  uint64_t v195 = v46;
                  LODWORD(v152) = 22;
                  p_int valuePtr = v192;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                uint64_t v40 = 4294954313;
                a1 = v168;
              }
              else
              {
                uint64_t v40 = 4294954313;
              }
            }
          }
          uint64_t v39 = [(NSPointerArray *)v37 countByEnumeratingWithState:v202 objects:&valuePtr count:16];
        }
        while (v39);
      }
      else
      {
        uint64_t v40 = 0;
      }
      unint64_t v7 = 0x1EB3B9000uLL;
      [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
      CFStringRef v22 = v158;
      if (v40) {
        goto LABEL_341;
      }
    }
  }
  *(void *)v185 = 0;
  uint64_t v56 = qword_1E9359B78;
  CFAllocatorRef v57 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v58 = [a1 audioCategory];
  uint64_t v59 = [a1 audioMode];
  uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v60) {
    uint64_t v61 = v60;
  }
  else {
    uint64_t v61 = 0;
  }
  BOOL v62 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, uint64_t, uint64_t, void, os_log_type_t *))(v61 + 16);
  if (v62) {
    v62(v56, 0x1EE5F3628, v57, v58, v59, 0, v185);
  }
  if ([a1 hasInput]
    && *(void *)v185 == *MEMORY[0x1E4F1CFC8]
    && ([a1 hwControlFlags] & 2) != 0)
  {
    if (dword_1E9359ED0)
    {
      unsigned int v187 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v72 = v187;
      if (os_log_type_enabled(v71, type)) {
        unsigned int v73 = v72;
      }
      else {
        unsigned int v73 = v72 & 0xFFFFFFFE;
      }
      if (v73)
      {
        uint64_t v74 = [a1 clientName];
        if ([a1 hasInput]) {
          uint64_t v75 = "YES";
        }
        else {
          uint64_t v75 = "NO";
        }
        if (*(void *)v185 == *MEMORY[0x1E4F1CFD0]) {
          BOOL v76 = "YES";
        }
        else {
          BOOL v76 = "NO";
        }
        int v77 = [a1 hwControlFlags];
        *(_DWORD *)v192 = 136316162;
        v193 = "cmsShouldSkipBeginInterruption";
        __int16 v194 = 2114;
        uint64_t v195 = v74;
        __int16 v196 = 2082;
        v197 = v75;
        __int16 v198 = 2082;
        v199 = v76;
        unint64_t v7 = 0x1EB3B9000;
        __int16 v200 = 1024;
        int v201 = v77;
        LODWORD(v152) = 48;
        p_int valuePtr = v192;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v40 = 4294954310;
    goto LABEL_341;
  }
  if (CMSMDeviceState_ItsAHomePod())
  {
    if (CMSMUtility_IsPhoneCallActive() && ([a1 hasPhoneCallBehavior] & 1) == 0)
    {
      [a1 audioCategory];
      if (FigCFEqual()
        || ([a1 audioCategory], FigCFEqual())
        || ([a1 audioCategory], FigCFEqual())
        || ([a1 audioCategory], FigCFEqual())
        || -[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [a1 audioCategory]))
      {
        if (!dword_1E9359ED0) {
          goto LABEL_149;
        }
        unsigned int v187 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        BOOL v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v68 = v187;
        if (os_log_type_enabled(v67, type)) {
          unsigned int v69 = v68;
        }
        else {
          unsigned int v69 = v68 & 0xFFFFFFFE;
        }
        if (!v69) {
          goto LABEL_148;
        }
        goto LABEL_147;
      }
    }
  }
  if (CMSUtility_IsRemoteInterruptionRequired(a1))
  {
    id v63 = CMSM_IDSClient_NotifyRemote_InterruptionStartAndCopyIdentifier(a1);
    [a1 setWaitingForRemoteInterruptionDoneIdentifier:v63];
    [a1 setTriggeredRemoteInterruption:1];
    [a1 setNeedToEndInterruption:1];
  }
  if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1))
  {
    if (qword_1E9359C70)
    {
      if (!byte_1E9359C78 && CMSUtility_PlaysToCarMainAudio(a1) && ([a1 isCarSession] & 1) == 0)
      {
        int v64 = cmsmRequestCarMainAudioForSession(a1);
        if (a1)
        {
          if (v64)
          {
            if (CMSMDeviceState_ScreenIsBlanked())
            {
              if (!CMSMDeviceState_ScreenIsBlankedByProximitySensor())
              {
                [a1 audioCategory];
                if (FigCFEqual() || ([a1 audioCategory], FigCFEqual()))
                {
                  if (!byte_1E9359C78) {
                    [a1 setWillSetScreenDarkModeOnVAD:1];
                  }
                }
              }
            }
            if ([+[MXSessionManager sharedInstance] starkMainAudioIsOwnedByiOSButBorrowedByCar])
            {
              [(id)qword_1E9359C68 setHandsOverInterruptionsToInterruptor:1];
            }
            if (CMSUtility_GetIsActive((void *)qword_1E9359C68)) {
              cmsSetIsActive((void *)qword_1E9359C68, 0, 0);
            }
            if (CMSUtility_ShouldSessionToInterruptHandOverInterruptions((void *)qword_1E9359C68, a1)) {
              CMSMUtility_HandOverInterruptionsToSession((void *)qword_1E9359C68, a1);
            }
            id v65 = +[MXSessionManager sharedInstance];
            if ([(MXSessionManager *)v65 shouldResetWaitingToResume:qword_1E9359C68 currentSession:a1])
            {
              dispatch_time_t v66 = +[MXSessionManager sharedInstance];
              [(MXSessionManager *)v66 resetWaitingToResume:qword_1E9359C68];
            }
          }
          else if (dword_1E9359ED0)
          {
            unsigned int v78 = CMSMUtility_CopyCurrentRouteTypes();
            if (v78) {
              CFRelease(v78);
            }
          }
        }
      }
    }
  }
  if (!v22 || v22 == a1 || ([v22 isActive] & 1) == 0)
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v179 = 0u;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    unsigned int v79 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v80 = [(NSPointerArray *)v79 countByEnumeratingWithState:&v177 objects:v191 count:16];
    if (v80)
    {
      uint64_t v81 = v80;
      uint64_t v82 = *(void *)v178;
LABEL_176:
      uint64_t v83 = 0;
      while (1)
      {
        if (*(void *)v178 != v82) {
          objc_enumerationMutation(v79);
        }
        unsigned int v84 = *(void **)(*((void *)&v177 + 1) + 8 * v83);
        if (v84 != a1 && ([v84 isActive] & 1) != 0) {
          break;
        }
        if (v81 == ++v83)
        {
          uint64_t v81 = [(NSPointerArray *)v79 countByEnumeratingWithState:&v177 objects:v191 count:16];
          if (!v81) {
            goto LABEL_183;
          }
          goto LABEL_176;
        }
      }
      [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
      CFStringRef v22 = v158;
    }
    else
    {
LABEL_183:
      [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
      if (([a1 dontTakeOverHardware] & 1) == 0
        && CMSUtility_DoesSessionWantToPauseSpokenAudio(a1)
        && [a1 waitingToSendEndInterruptionToSpokenAudioApp])
      {
        [a1 setDontTakeOverHardware:1];
        id v85 = [+[MXSessionManager sharedInstance] copyInterruptedSessions:a1];
        long long v173 = 0u;
        long long v174 = 0u;
        long long v175 = 0u;
        long long v176 = 0u;
        uint64_t v86 = [v85 countByEnumeratingWithState:&v173 objects:v190 count:16];
        if (v86)
        {
          uint64_t v87 = v86;
          uint64_t v88 = *(void *)v174;
          while (2)
          {
            for (uint64_t j = 0; j != v87; ++j)
            {
              if (*(void *)v174 != v88) {
                objc_enumerationMutation(v85);
              }
              uint64_t v90 = *(void **)(*((void *)&v173 + 1) + 8 * j);
              if (CMSUtility_IsDoingSpokenAudio(v90))
              {
                CMSUtility_GetCurrentAudioDestination(v90);
                CMSUtility_GetCurrentAudioDestination(a1);
                if (!FigCFEqual())
                {
                  [a1 setDontTakeOverHardware:0];
                  goto LABEL_200;
                }
              }
            }
            uint64_t v87 = [v85 countByEnumeratingWithState:&v173 objects:v190 count:16];
            if (v87) {
              continue;
            }
            break;
          }
        }
LABEL_200:

        unint64_t v7 = 0x1EB3B9000uLL;
      }
      cmsSetIsActive(a1, 1, 0);
      CFStringRef v22 = v158;
      if (([a1 dontTakeOverHardware] & 1) == 0) {
        cmsTakeControl(a1, HIWORD(v165) | v8);
      }
      if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1))
      {
        uint64_t v40 = 0;
        goto LABEL_341;
      }
    }
  }
  [a1 audioCategory];
  CFAllocatorRef allocator = v57;
  int v91 = FigCFEqual()
     && !CMSMDeviceState_RingerIsOn(1)
     && CMSMUtility_GetNumberOfCurrentOutputPorts() == 0;
  if (!HIBYTE(v184)
    && (v91 & 1) == 0
    && !CMSUtility_DoesSessionWantToPauseSpokenAudio(a1)
    && ([a1 isTheAssistant] & 1) == 0
    && ![a1 prefersToInterruptActiveRecordingSessions])
  {
LABEL_215:
    int v93 = 1;
    goto LABEL_312;
  }
  if ([(NSPointerArray *)[+[MXSessionManager sharedInstance] mxCoreSessionList] count] < 0x21)
  {
    uint64_t v92 = buf;
  }
  else
  {
    uint64_t v92 = (uint8_t *)CFAllocatorAllocate(allocator, 16* [(NSPointerArray *)[+[MXSessionManager sharedInstance] mxCoreSessionList] count], 0);
    if (!v92) {
      goto LABEL_215;
    }
  }
  if (v22)
  {
    cmsAddToListOfSessionsToInterruptIfNecessary(a1, v22, v91, 1, (uint64_t)v92, &v182, &v181);
  }
  else
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v171 = 0u;
    long long v172 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    uint64_t v94 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v95 = [(NSPointerArray *)v94 countByEnumeratingWithState:&v169 objects:v188 count:16];
    if (v95)
    {
      uint64_t v96 = v95;
      uint64_t v97 = *(void *)v170;
      do
      {
        for (uint64_t k = 0; k != v96; ++k)
        {
          if (*(void *)v170 != v97) {
            objc_enumerationMutation(v94);
          }
          cmsAddToListOfSessionsToInterruptIfNecessary(a1, *(void **)(*((void *)&v169 + 1) + 8 * k), v91, 2, (uint64_t)v92, &v182, &v181);
        }
        uint64_t v96 = [(NSPointerArray *)v94 countByEnumeratingWithState:&v169 objects:v188 count:16];
      }
      while (v96);
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  }
  MEMORY[0x199716EA0](gCMSM);
  uint64_t v99 = v182;
  if (v182 <= 0)
  {
    CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange();
    goto LABEL_309;
  }
  uint64_t v100 = 0;
  id v101 = v92 + 9;
  uint64_t v159 = v182;
  do
  {
    double v102 = *(void **)(v101 - 9);
    LODWORD(v164) = *v101;
    HIDWORD(v164) = *(v101 - 1);
    int v103 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppPID];
    int v104 = [+[MXNowPlayingAppManager sharedInstance] nowPlayingAppDisplayID];
    if (objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue") == v103
      || (objc_msgSend((id)objc_msgSend(a1, "displayID"), "isEqualToString:", v104) & 1) != 0
      || CMSUtility_IsSessionTheDefaultMusicApp(a1))
    {
      BOOL v105 = 1;
LABEL_233:
      BOOL v163 = v105;
      goto LABEL_234;
    }
    if (CMSMUtility_IAPAppProcessIDIsUsingAccessory([a1 displayID]))
    {
      BOOL v105 = CMSUtility_SessionCanBeAndAllowedToBeNowPlayingApp(a1) != 0;
      goto LABEL_233;
    }
    BOOL v163 = 0;
LABEL_234:
    v166 = cmsmCopyCurrentActiveRouteTypes();
    if (objc_msgSend((id)objc_msgSend(v102, "clientPID"), "intValue") == v103
      || objc_msgSend((id)objc_msgSend(v102, "displayID"), "isEqualToString:", v104))
    {
      if ([v102 isPlaying])
      {
        [a1 setNowPlayingAppWasStoppedOnMostRecentActivation:1];
        [v102 audioMode];
        if (FigCFEqual()) {
          [a1 setNowPlayingAppThatWasStoppedOnMostRecentActivationWasDoingSpokenAudio:1];
        }
      }
    }
    if (v91)
    {
      int valuePtr = 0;
      CFAllocatorRef v106 = CFGetAllocator(a1);
      CFNumberRef v107 = CFNumberCreate(v106, kCFNumberFloat32Type, &valuePtr);
    }
    else
    {
      CFNumberRef v107 = CMSUtility_CopyFadeDuration(a1, 0, 0);
    }
    CFNumberRef cf = v107;
    int v108 = MXGetSessionLog();
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v160 = v100;
      v161 = v101;
      CFTypeID v109 = v92;
      uint64_t v110 = [a1 clientName];
      int v111 = [a1 clientPriority];
      uint64_t v112 = [a1 audioCategory];
      uint64_t v113 = [v102 clientName];
      int v114 = [v102 clientPriority];
      uint64_t v115 = [v102 audioCategory];
      int v116 = [v102 hasPhoneCallBehavior];
      int v117 = "";
      if (v116)
      {
        int v118 = [v102 isActive];
        int v117 = "";
        if (v118) {
          int v117 = " (PHONE CALL)";
        }
      }
      int valuePtr = 136449026;
      int v204 = "-CMSessionMgr-";
      __int16 v205 = 2082;
      CFTypeID v206 = "cmsInterruptSession";
      __int16 v207 = 1024;
      *(_DWORD *)v208 = 2936;
      *(_WORD *)&v208[4] = 2114;
      *(void *)&v208[6] = v110;
      __int16 v209 = 2048;
      float v210 = v168;
      __int16 v211 = 1024;
      int v212 = v111;
      __int16 v213 = 2114;
      uint64_t v214 = v112;
      __int16 v215 = 2114;
      uint64_t v216 = v113;
      __int16 v217 = 2048;
      CFTypeID v218 = v102;
      __int16 v219 = 1024;
      int v220 = v114;
      __int16 v221 = 2114;
      uint64_t v222 = v115;
      a1 = v168;
      __int16 v223 = 2082;
      v224 = v117;
      _os_log_impl(&dword_194CDF000, v108, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i '%{public}@'[%p] with priority [%d] and category '%{public}@' INTERRUPTING '%{public}@'[%p] with priority [%d] and category '%{public}@'%{public}s.", (uint8_t *)&valuePtr, 0x6Eu);
      uint64_t v92 = v109;
      uint64_t v99 = v159;
      uint64_t v100 = v160;
      id v101 = v161;
    }
    [a1 audioCategory];
    if (CMSMUtility_IsVoiceCallCategory()
      && CMSMUtility_IsPlayAndRecordCategory([v102 audioCategory])
      && ([v102 audioMode], FigCFEqual())
      || ([v102 audioCategory], CMSMUtility_IsVoiceCallCategory())
      && CMSMUtility_IsPlayAndRecordCategory([a1 audioCategory])
      && ([a1 audioMode], FigCFEqual()))
    {
      [a1 setOverridePortsList:0];
      if ([v102 overridePortsList]) {
        objc_msgSend(a1, "setOverridePortsList:", objc_msgSend(v102, "overridePortsList"));
      }
    }
    objc_msgSend(a1, "setStarkBorrowCount:", objc_msgSend(v102, "starkBorrowCount") + objc_msgSend(a1, "starkBorrowCount"));
    [v102 setStarkBorrowCount:0];
    unint64_t v7 = 0x1EB3B9000uLL;
    if (CMSUtility_ShouldSessionToInterruptHandOverInterruptions(v102, a1)) {
      CMSMUtility_HandOverInterruptionsToSession(v102, a1);
    }
    if (CMSUtility_ShouldSessionToInterruptHandOverDucking(v102, a1))
    {
      CFArrayRef v119 = CMSUtility_CopySessionsToDuck(1, 0, (const __CFArray *)a1);
      [+[MXSessionManager sharedInstance] duckSessionsForDucker:a1 sessionsToDuck:v119];
    }
    objc_msgSend(v102, "setWasInterruptedWhileSuspended:", objc_msgSend(v102, "applicationState") == 2);
    objc_msgSend(v102, "setWasInterruptedWhileRecording:", objc_msgSend(v102, "isRecording"));
    [v102 setTimestampWhenMostRecentResumableEndInterruptionWasSent:0];
    [+[MXSessionManager sharedInstance] cancelAnyInProgressRampIfNeeded:v102 reason:1];
    CMSUtility_ResetIsPlayingStates(v102);
    BOOL v120 = [+[MXSessionManager sharedInstance] isMixableSessionBeingInterruptedByNextRecordingClient:a1 victim:v102];
    uint64_t v121 = (__CFString *)[a1 clientName];
    __int16 v122 = (const void *)[a1 displayID];
    if (v120) {
      uint64_t v123 = &unk_1EE605E30;
    }
    else {
      uint64_t v123 = 0;
    }
    CMSUtility_PostInterruptionCommandNotification(v102, 0, v121, 0, 0, cf, v123, v122);
    [v102 setInterruptingSession:a1];
    BOOL v124 = [v102 applicationState] == 8 && v163;
    [v102 setWasInterruptedByNowPlayingApp:v124];
    [v102 setTimestampWhenMostRecentlyInterrupted:FigGetUpTimeNanoseconds()];
    __int16 v126 = v166;
    if (![v102 extendBackgroundAppAssertionTimer] && objc_msgSend(v102, "playbackAssertionRef")) {
      CMSMSleep_ReleasePlaybackProcessAssertion(v102);
    }
    if (v164 || CMSUtility_IsSessionAlwaysExpectingEndInterruption(v102, v125))
    {
      objc_msgSend(v102, "setWasMutedBeforeInterruption:", objc_msgSend(v102, "userMuted"));
      MXCoreSessionSetProperty((int)v102, @"UserMuted");
      int v127 = FigEndpointCentralEntityOwnsResource(qword_1E9359C70, 0x1EE5E6788, @"MainAudio");
      if (CMSMUtility_IsCarPlaySessionPresent() && v127 && [a1 isCarSession])
      {
        if (dword_1E9359ED0)
        {
          *(_DWORD *)v192 = 0;
          v185[0] = OS_LOG_TYPE_DEFAULT;
          __int16 v128 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v129 = *(_DWORD *)v192;
          if (os_log_type_enabled(v128, v185[0])) {
            unsigned int v130 = v129;
          }
          else {
            unsigned int v130 = v129 & 0xFFFFFFFE;
          }
          if (v130)
          {
            LODWORD(v202[0]) = 136315138;
            *(void *)((char *)v202 + 4) = "cmsInterruptSession";
            LODWORD(v152) = 12;
            p_int valuePtr = (os_log_type_t *)v202;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          unint64_t v7 = 0x1EB3B9000;
          __int16 v126 = v166;
        }
        objc_msgSend(v102, "setWaitingToResume:", 0, p_valuePtr, v152);
      }
      else
      {
        [v102 setWaitingToResume:1];
        if (CMSMUtility_IsCarPlaySessionPresent())
        {
          if ([v102 hasPhoneCallBehavior])
          {
            [+[MXSessionManager sharedInstance] setPhoneCallBehaviorSessionShouldResumeForCarPlay:1];
            if (dword_1E9359ED0)
            {
              int v162 = v101;
              *(_DWORD *)v192 = 0;
              v185[0] = OS_LOG_TYPE_DEFAULT;
              CFTypeID v131 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v132 = *(_DWORD *)v192;
              if (os_log_type_enabled(v131, v185[0])) {
                unsigned int v133 = v132;
              }
              else {
                unsigned int v133 = v132 & 0xFFFFFFFE;
              }
              if (v133)
              {
                uint64_t v134 = [v102 clientName];
                uint64_t v135 = [a1 clientName];
                LODWORD(v202[0]) = 136315650;
                *(void *)((char *)v202 + 4) = "cmsInterruptSession";
                WORD6(v202[0]) = 2114;
                *(void *)((char *)v202 + 14) = v134;
                WORD3(v202[1]) = 2114;
                *((void *)&v202[1] + 1) = v135;
                LODWORD(v152) = 32;
                p_int valuePtr = (os_log_type_t *)v202;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t v99 = v159;
              id v101 = v162;
              __int16 v126 = v166;
            }
          }
        }
      }
      objc_msgSend(v102, "setActiveRoutesWhenInterrupted:", 0, p_valuePtr, v152);
      [v102 setActiveRoutesWhenInterrupted:v126];
      [a1 setNeedToEndInterruption:1];
    }
    if ([a1 isIDSMXCoreSession]) {
      uint64_t v136 = 0;
    }
    else {
      uint64_t v136 = [a1 isHardwareSafetySession] ^ 1;
    }
    [v102 setDoNotResetAudioCategoryOnNextInactive:v136];
    cmsSetIsActive(v102, 0, a1);
    if (qword_1E9359C68 && [v102 duckCommandSentToCarSession])
    {
      int v137 = -[MXDuckingSource initWithType:ID:duckVolume:duckFadeDuration:]([MXDuckingSource alloc], "initWithType:ID:duckVolume:duckFadeDuration:", 2, objc_msgSend((id)objc_msgSend(v102, "ID"), "longLongValue"), 0.0, 0.0);
      __int16 v138 = (void *)[(id)(v7 + 3392) sharedInstance];
      [v138 unduckVolume:qword_1E9359C68 sessionCausingUnduck:v102 duckingSource:v137];

      [v102 setDuckCommandSentToCarSession:0];
    }
    objc_msgSend((id)objc_msgSend((id)(v7 + 3392), "sharedInstance"), "unduckSessionsForDucker:", v102);
    CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded();
    if (cf) {
      CFRelease(cf);
    }
    if (v126) {
      CFRelease(v126);
    }
    ++v100;
    v101 += 16;
  }
  while (v100 < v99);
  CMSMNotificationUtility_PostNowPlayingAppIsPlayingDidChange();
  uint64_t v139 = (id *)v92;
  CFStringRef v22 = v158;
  do
  {

    *uint64_t v139 = 0;
    v139 += 2;
    --v99;
  }
  while (v99);
LABEL_309:
  if (v92 != buf) {
    CFAllocatorDeallocate(allocator, v92);
  }
  int v93 = 0;
LABEL_312:
  __int16 v140 = objc_msgSend((id)objc_msgSend((id)(v7 + 3392), "sharedInstance"), "copySpeechDetectSession");
  if ([a1 isTheAssistant] && objc_msgSend(v140, "isActive")) {
    CMSMUtility_HandOverInterruptionsToSession(v140, a1);
  }

  if ([a1 isCarSession] && dword_1E9359C60) {
    vaeMakePortRoutable(dword_1E9359C60, 0, 0, qword_1E9359C88);
  }
  CFArrayRef v141 = CMSUtility_CopySessionsToDuck(v184, v22, (const __CFArray *)a1);
  CFArrayRef v142 = v141;
  if (v141)
  {
    CFArrayGetCount(v141);
    [a1 setNeedToEndInterruption:1];
  }
  cmsSetIsActive(a1, 1, 0);
  if ([a1 dontTakeOverHardware]) {
    int v143 = 0;
  }
  else {
    int v143 = cmsTryToTakeControl(a1);
  }
  if (CMSUtility_IsSharePlayCapableMediaSession(a1)
    && CMSMUtility_IsSharePlayCapableCallSessionActive()
    && ([a1 currentlyControllingFlags] & 0x10) == 0)
  {
    CMSMUtility_SetMediaPlaybackVolumeToCurrentPhoneCallVolume();
    CMSMUtility_TransferVolumeControlFlagToSharePlayCapableMediaSession();
  }
  if ((v143 & ~v154) != 0) {
    [a1 setNeedToEndInterruption:1];
  }
  if (v93) {
    MEMORY[0x199716EA0](gCMSM);
  }
  if (objc_msgSend((id)objc_msgSend((id)(v7 + 3392), "sharedInstance"), "voiceOverSessionWantsRelativeDucking:", a1))
  {
    if (dword_1E9359ED0)
    {
      LODWORD(v202[0]) = 0;
      v192[0] = OS_LOG_TYPE_DEFAULT;
      __int16 v144 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v145 = v202[0];
      if (os_log_type_enabled(v144, v192[0])) {
        unsigned int v146 = v145;
      }
      else {
        unsigned int v146 = v145 & 0xFFFFFFFE;
      }
      if (v146)
      {
        uint64_t v147 = [a1 clientName];
        int valuePtr = 136315650;
        int v204 = "cmsBeginInterruptionGuts";
        __int16 v205 = 2114;
        CFTypeID v206 = (const char *)v147;
        __int16 v207 = 2048;
        *(void *)v208 = a1;
        LODWORD(v152) = 32;
        p_int valuePtr = (os_log_type_t *)&valuePtr;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    objc_msgSend((id)objc_msgSend((id)(v7 + 3392), "sharedInstance", p_valuePtr, v152), "startAsyncDuckingOperation");
    objc_msgSend((id)objc_msgSend((id)(v7 + 3392), "sharedInstance"), "updateDuckedSessionsForVoiceOver:", a1);
    objc_msgSend((id)objc_msgSend((id)(v7 + 3392), "sharedInstance"), "endAsyncDuckingOperationForSession:", a1);
  }
  else if (v142)
  {
    objc_msgSend((id)objc_msgSend((id)(v7 + 3392), "sharedInstance"), "duckSessionsForDucker:sessionsToDuck:", a1, v142);
  }
  uint64_t v40 = 0;
  char v148 = 1;
LABEL_345:
  if (objc_msgSend((id)objc_msgSend((id)(v7 + 3392), "sharedInstance", p_valuePtr, v152), "isSpeechDetectCategory:", objc_msgSend(a1, "audioCategory"))&& objc_msgSend(a1, "needToEndInterruption"))
  {
    [a1 setAreBothBudsInEarForA2DPPortBeforeInterrupting:v155];
  }
  if (v156) {
    CFRelease(v156);
  }
  if (v142) {
    CFRelease(v142);
  }
  if ((v157 & 2) == 0 && ([a1 currentlyControllingFlags] & 2) != 0)
  {
    if ((v148 & 1) == 0) {
      MEMORY[0x199716EA0](gCMSM);
    }
    cmsmUpdatePickableRouteDescriptionLists(1);
  }
  else if ((v148 & 1) == 0)
  {
    MEMORY[0x199716EA0](gCMSM);
  }
  CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded();
  int v149 = MXGetPerformanceLog();
  if (os_signpost_enabled(v149))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_194CDF000, v149, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "Session activation", (const char *)&unk_194EE9136, buf, 2u);
  }
  return v40;
}

uint64_t CMSUtility_HasHigherPriorityToInterrupt(void *a1, void *a2, int a3)
{
  valuePtr[35] = *MEMORY[0x1E4F143B8];
  if (![a2 isActive]) {
    return 1;
  }
  unsigned int v6 = [a2 clientPriority];
  if (v6 <= [a1 clientPriority]
    || ([a2 currentlyControllingFlags] & a3) == 0)
  {
    return 1;
  }
  if ([a2 clientPriority] == 10
    && [a1 hasAudioMode:@"EchoCancellationInput"])
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t v12 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return v12;
    }
    return 1;
  }
  if (dword_1E9359ED0)
  {
    BOOL v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend((id)objc_msgSend(a2, "reporterIDs", v13, v14), "count"))
  {
    valuePtr[0] = 1;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)[a2 reporterIDs], 0);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, valuePtr);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    [a1 displayID];
    FigCFDictionarySetValue();
    [a2 displayID];
    FigCFDictionarySetValue();
    off_1E9359D10(valuePtr[0], Mutable, 11, 6);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  return 0;
}

uint64_t CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded()
{
  if (CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_onceToken != -1) {
    dispatch_once(&CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_onceToken, &__block_literal_global_24_1);
  }
  uint64_t v0 = (void *)CMSMUtility_CopyActivePhoneCallInfo();
  int v1 = CMSMUtility_PhoneCallOrRingtoneExists();
  [(id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock lock];
  if (v0
    && ![v0 isEqualToDictionary:CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfo])
  {
    [(id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock unlock];
    goto LABEL_9;
  }
  if (!CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfo)
  {
    [(id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock unlock];
    goto LABEL_11;
  }
  char v2 = [(id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfo isEqualToDictionary:v0];
  [(id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock unlock];
  if ((v2 & 1) == 0)
  {
LABEL_9:
    BOOL v3 = objc_msgSend((id)objc_msgSend(v0, "objectForKey:", @"ClientPriority"), "intValue") == 10;
    uint64_t v4 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v5 = [MEMORY[0x1E4F28ED0] numberWithBool:v0 != 0];
    +[MXSystemController notifyAll:payload:dontPostIfSuspended:](MXSystemController, "notifyAll:payload:dontPostIfSuspended:", @"CallIsActiveDidChange", objc_msgSend(v4, "dictionaryWithObjectsAndKeys:", v5, @"CallActive", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithBool:", v3), @"CallIsHighPriority", 0), 0);
  }
LABEL_11:
  int v6 = v1 != 0;
  if (CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sPhoneCallOrRingtoneExists != v6) {
    CMSMNotificationUtility_PostVoicePromptStyleDidChange();
  }
  [(id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock lock];

  CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfo = (uint64_t)v0;
  uint64_t result = [(id)CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sActivePhoneCallInfoLock unlock];
  CMSMNotificationUtility_PostCallIsActiveDidChangeIfNeeded_sPhoneCallOrRingtoneExists = v6;
  return result;
}

uint64_t CMSUtility_IsRemoteInterruptionRequired(void *a1)
{
  uint64_t result = CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote();
  if (result)
  {
    uint64_t result = CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote();
    if (result)
    {
      if (CMSUtility_IsSessionEligibleToPlayOverSharedAudioRoute(a1, 0))
      {
        unsigned int LocalSessionPriority = CMSM_GetLocalSessionPriority(a1, 0);
        unsigned int HighestRemotePlayingSessionPriority = CMSM_GetHighestRemotePlayingSessionPriority();
        char v5 = [a1 isIDSMXCoreSession];
        uint64_t result = 0;
        if ((v5 & 1) == 0) {
          return CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote()
        }
              && LocalSessionPriority > 0x64
              && LocalSessionPriority >= HighestRemotePlayingSessionPriority;
      }
      else
      {
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t CMSUtility_DoesSessionWantToPauseSpokenAudio(void *a1)
{
  return [a1 wantsToPauseSpokenAudio];
}

uint64_t CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote()
{
  uint64_t v0 = (void *)[(id)gIDSConnection copyNearbyPairedDevice];
  unsigned int v1 = [v0 isNearby];

  if (byte_1E9358FC0) {
    unsigned int v2 = v1;
  }
  else {
    unsigned int v2 = 0;
  }
  if (byte_1E9358FC1) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToLocalAndRemoteOldValue != v3
    || CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToLocalOldValue != byte_1E9358FC0
    || CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToRemoteOldValue != byte_1E9358FC1)
  {
    CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToLocalOldCFTypeRef Value = byte_1E9358FC0 != 0;
    CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToRemoteOldCFTypeRef Value = byte_1E9358FC1 != 0;
    CMSM_IDSConnection_IsSharedAudioRouteConnectedToLocalAndRemote_sharedAudioRouteIsConnectedToLocalAndRemoteOldCFTypeRef Value = v3;
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v3;
}

void vaemVADSerializationListener(uint64_t a1)
{
  unsigned int v2 = MXGetSerialQueue();
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __vaemVADSerializationListener_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  void v3[4] = a1;
  MXDispatchAsync((uint64_t)"vaemVADSerializationListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 8217, 0, 0, v2, (uint64_t)v3);
}

uint64_t _CMSessionCopyProperty(void *a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  unsigned __int16 v8 = (void *)MEMORY[0x1997179E0](+[MXInitialization waitUntilMXIsFullyInitialized]);
  if (isCoreSessionSidekick(a1))
  {
    uint64_t v9 = [a1 copyPropertyForKey:a2 valueOut:a4];
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (a1) {
      long long v11 = (void *)a1[2];
    }
    else {
      long long v11 = 0;
    }
    uint64_t v9 = MXCoreSessionCopyProperty(v11, a2, a3, a4);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"_CMSessionCopyProperty" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:a2];
  }
  return v9;
}

uint64_t CMSessionCopyProperty(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0;
  int v16 = &v15;
  uint64_t v17 = 0x2020000000;
  int v18 = 0;
  unsigned __int16 v8 = (void *)MEMORY[0x1997179E0](+[MXInitialization waitUntilMXIsFullyInitialized]);
  if (isCoreSessionSidekick(a1))
  {
    int v9 = [a1 copyPropertyForKey:a2 valueOut:a4];
    *((_DWORD *)v16 + 6) = v9;
  }
  else
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    long long v11 = MXGetSerialQueue();
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __CMSessionCopyProperty_block_invoke;
    v14[3] = &unk_1E57C60E0;
    v14[4] = &v15;
    void v14[5] = a1;
    v14[6] = a2;
    v14[7] = a3;
    v14[8] = a4;
    MXDispatchAsyncAndWait((uint64_t)"CMSessionCopyProperty", (uint64_t)"CMSession_CInterface.m", 560, 0, 0, v11, (uint64_t)v14);
    [+[MXAudioStatistics sharedInstance] sendSinglePerformanceMessageForRoutine:"CMSessionCopyProperty" operationTime:FigGetUpTimeNanoseconds() - UpTimeNanoseconds details:a2];
  }
  uint64_t v12 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v12;
}

void sub_194D62D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *isCoreSessionSidekick(void *result)
{
  if (result) {
    return (void *)[result isMemberOfClass:objc_opt_class()];
  }
  return result;
}

uint64_t CMSUtility_SetIsRecording(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (CMSUtility_SetIsRecording_onceToken != -1) {
    dispatch_once(&CMSUtility_SetIsRecording_onceToken, &__block_literal_global_55);
  }
  if ([a1 isRecording] == a2) {
    return 0;
  }
  if (a2 && !CMSUtility_IsAllowedToStartRecording(a1)) {
    return 4294950315;
  }
  [a1 setIsRecording:a2 != 0];
  CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
  uint64_t v4 = [+[MXExclaves sharedInstance] updateSensorStatus:a1 reason:@"IsRecording property has changed"];
  if (v4)
  {
    uint64_t v5 = v4;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    [a1 setIsRecording:a2 == 0];
    CMSMUtility_PostRecordingStateDidChangeNotificationIfNeeded();
    return v5;
  }
  if (vaemContinuityScreenOutputIsConnected())
  {
    if (dword_1E9359ED0) {
      goto LABEL_13;
    }
  }
  else if (dword_1E9359ED0)
  {
LABEL_13:
    int v20 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    unint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CMSUtility_SetIsRecording_greenTeaLogger)
  {
    CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
    if (CTGreenTeaOsLogHandle)
    {
      int v9 = CTGreenTeaOsLogHandle;
      if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = [a1 clientName];
        long long v11 = "started";
        if (!a2) {
          long long v11 = "stopped";
        }
        *(_DWORD *)buf = 138412546;
        uint64_t v22 = v10;
        __int16 v23 = 2080;
        unsigned int v24 = v11;
        _os_log_impl(&dword_194CDF000, v9, OS_LOG_TYPE_INFO, "Client %@ has %s recording", buf, 0x16u);
      }
    }
  }
  if (objc_msgSend(a1, "isRecording", v16, v17))
  {
    int v12 = [a1 auditTokenSetByClient];
    if (a1) {
      [a1 auditToken];
    }
    else {
      memset(v18, 0, sizeof(v18));
    }
    id RecordingAccessIntervals = MX_PrivacyAccounting_CreateRecordingAccessIntervals(v12, v18, objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), objc_msgSend(a1, "hostProcessAttribution"), objc_msgSend(a1, "displayID"));
    [a1 setBundleIdToPAAccessIntervalMap:RecordingAccessIntervals];
  }
  else
  {
    if ([a1 applicationState] == 4) {
      [a1 setTimestampWhenRecordingInBackgroundMostRecentlyStopped:FigGetUpTimeNanoseconds()];
    }
    MX_PrivacyAccounting_EndRecordingAccessIntervals((void *)[a1 bundleIdToPAAccessIntervalMap]);
    [a1 setBundleIdToPAAccessIntervalMap:0];
  }
  if (![a1 isRecording]
    || ![a1 isActive]
    || ![a1 isTheAssistant]
    || !CMSUtility_IsAnyoneBesidesAssistantsSessionsActive(a1)
    || (![a1 dontTakeOverHardware] ? (uint64_t v14 = 2) : (uint64_t v14 = 8),
        uint64_t v5 = MXCoreSessionBeginInterruption_WithSecTaskAndFlags(a1, 0, v14, 0),
        !v5))
  {
    CMSMUtility_UpdatePlayAndRecordAppSpeechState(0);
    CMSMNotificationUtility_PostVoicePromptStyleDidChange();
    CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 0);
    return 0;
  }
  return v5;
}

id MX_PrivacyAccounting_CreateRecordingAccessIntervals(int a1, long long *a2, int a3, void *a4, uint64_t a5)
{
  LODWORD(v6) = a3;
  LODWORD(v8) = a1;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (mx_privacyAccounting_isAvailable_onceToken != -1) {
LABEL_58:
  }
    dispatch_once(&mx_privacyAccounting_isAvailable_onceToken, &__block_literal_global_9);
  if ((mx_privacyAccounting_isAvailable_result & 1) != 0
    || !objc_msgSend((id)objc_msgSend((id)getPAAccessLoggerClass(), "sharedInstance"), "loggingEnabled"))
  {
    return 0;
  }
  int v40 = (int)v8;
  uint64_t v37 = a2;
  unsigned int v38 = v6;
  uint64_t v39 = a5;
  id v41 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  if (![a4 count]) {
    goto LABEL_51;
  }
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v44 = [a4 countByEnumeratingWithState:&v47 objects:v57 count:16];
  if (!v44) {
    goto LABEL_51;
  }
  int v9 = 0;
  uint64_t v43 = *(void *)v48;
  while (2)
  {
    for (uint64_t i = 0; i != v44; ++i)
    {
      if (*(void *)v48 != v43) {
        objc_enumerationMutation(a4);
      }
      a2 = *(long long **)(*((void *)&v47 + 1) + 8 * i);
      long long v11 = objc_msgSend(a2, "valueForKey:", @"BundleID", v35, v36);
      unsigned __int16 v8 = v11;
      if (v11)
      {
        a5 = [v11 cStringUsingEncoding:4];
        v58[0] = 0;
        v58[1] = v58;
        v58[2] = 0x2020000000;
        int v6 = (uint64_t (*)(long long *, uint64_t))gettcc_identity_createSymbolLoc_ptr;
        uint64_t v59 = gettcc_identity_createSymbolLoc_ptr;
        if (!gettcc_identity_createSymbolLoc_ptr)
        {
          *(void *)&long long v51 = MEMORY[0x1E4F143A8];
          *((void *)&v51 + 1) = 3221225472;
          *(void *)&long long v52 = __gettcc_identity_createSymbolLoc_block_invoke;
          *((void *)&v52 + 1) = &unk_1E57C5B30;
          unsigned int v53 = (void (*)(uint64_t))v58;
          int v12 = (void *)TCCLibrary();
          uint64_t v13 = dlsym(v12, "tcc_identity_create");
          *(void *)(*((void *)v53 + 1) + 24) = v13;
          gettcc_identity_createSymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v53 + 1) + 24);
          int v6 = *(uint64_t (**)(long long *, uint64_t))(v58[1] + 24);
        }
        _Block_object_dispose(v58, 8);
        if (!v6) {
          goto LABEL_57;
        }
        a5 = v6(0, a5);
        CFDataRef v14 = (const __CFData *)[a2 valueForKey:@"AuditToken"];
        *(_OWORD *)audit_token_t buffer = 0u;
        long long v46 = 0u;
        if (v14)
        {
          v62.id location = 0;
          v62.length = 32;
          CFDataGetBytes(v14, v62, buffer);
        }
        long long v55 = *(_OWORD *)buffer;
        long long v56 = v46;
        v58[0] = 0;
        v58[1] = v58;
        v58[2] = 0x2020000000;
        int v6 = (uint64_t (*)(long long *, uint64_t))getPAAuthenticatedClientIdentitySymbolLoc_ptr;
        uint64_t v59 = getPAAuthenticatedClientIdentitySymbolLoc_ptr;
        if (!getPAAuthenticatedClientIdentitySymbolLoc_ptr)
        {
          *(void *)&long long v51 = MEMORY[0x1E4F143A8];
          *((void *)&v51 + 1) = 3221225472;
          *(void *)&long long v52 = __getPAAuthenticatedClientIdentitySymbolLoc_block_invoke;
          *((void *)&v52 + 1) = &unk_1E57C5B30;
          unsigned int v53 = (void (*)(uint64_t))v58;
          uint64_t v15 = (void *)PrivacyAccountingLibrary();
          uint64_t v16 = dlsym(v15, "PAAuthenticatedClientIdentity");
          *(void *)(*((void *)v53 + 1) + 24) = v16;
          getPAAuthenticatedClientIdentitySymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v53 + 1) + 24);
          int v6 = *(uint64_t (**)(long long *, uint64_t))(v58[1] + 24);
        }
        _Block_object_dispose(v58, 8);
        if (!v6) {
          goto LABEL_57;
        }
        long long v51 = v55;
        long long v52 = v56;
        a2 = (long long *)v6(&v51, a5);
        if (!a2) {
          goto LABEL_30;
        }
        *(void *)&long long v51 = 0;
        *((void *)&v51 + 1) = &v51;
        *(void *)&long long v52 = 0x3052000000;
        *((void *)&v52 + 1) = __Block_byref_object_copy__1;
        unsigned int v53 = __Block_byref_object_dispose__1;
        uint64_t v17 = (objc_class *)getPAApplicationClass_softClass;
        uint64_t v54 = getPAApplicationClass_softClass;
        if (!getPAApplicationClass_softClass)
        {
          v58[0] = MEMORY[0x1E4F143A8];
          v58[1] = 3221225472;
          v58[2] = __getPAApplicationClass_block_invoke;
          uint64_t v59 = &unk_1E57C5B30;
          uint64_t v60 = &v51;
          __getPAApplicationClass_block_invoke((uint64_t)v58);
          uint64_t v17 = *(objc_class **)(*((void *)&v51 + 1) + 40);
        }
        _Block_object_dispose(&v51, 8);
        a2 = (long long *)[[v17 alloc] initWithTCCIdentity:a2];
        if (a2
          && (PATCCAccessClass = (void *)getPATCCAccessClass(),
              (uint64_t v19 = [PATCCAccessClass accessWithAccessor:a2 forService:getkTCCServiceMicrophone()]) != 0))
        {
          if (dword_1E9359ED0)
          {
            LODWORD(v55) = 0;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v21 = v55;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v22 = v21;
            }
            else {
              unsigned int v22 = v21 & 0xFFFFFFFE;
            }
            if (v22)
            {
              LODWORD(v58[0]) = 136315394;
              *(void *)((char *)v58 + 4) = "MX_PrivacyAccounting_CreateRecordingAccessIntervals";
              WORD2(v58[1]) = 2114;
              *(void *)((char *)&v58[1] + 6) = v8;
              LODWORD(v36) = 22;
              unsigned int v35 = v58;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(v41, "setObject:forKey:", objc_msgSend((id)objc_msgSend((id)getPAAccessLoggerClass(), "sharedInstance"), "beginIntervalForAccess:", v19), v8);
          int v9 = 1;
        }
        else
        {
LABEL_30:
          LODWORD(v55) = 0;
          __int16 v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          LODWORD(v8) = v55;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v24 = v8;
          }
          else {
            unsigned int v24 = v8 & 0xFFFFFFFE;
          }
          if (v24)
          {
            LODWORD(v58[0]) = 136315138;
            *(void *)((char *)v58 + 4) = "MX_PrivacyAccounting_CreateRecordingAccessIntervals";
            LODWORD(v36) = 12;
            unsigned int v35 = v58;
            _os_log_send_and_compose_impl();
            LODWORD(v8) = v55;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v58[0] = 0;
        v58[1] = v58;
        v58[2] = 0x2020000000;
        int v6 = (uint64_t (*)(long long *, uint64_t))gettcc_releaseSymbolLoc_ptr;
        uint64_t v59 = gettcc_releaseSymbolLoc_ptr;
        if (!gettcc_releaseSymbolLoc_ptr)
        {
          *(void *)&long long v51 = MEMORY[0x1E4F143A8];
          *((void *)&v51 + 1) = 3221225472;
          *(void *)&long long v52 = __gettcc_releaseSymbolLoc_block_invoke;
          *((void *)&v52 + 1) = &unk_1E57C5B30;
          unsigned int v53 = (void (*)(uint64_t))v58;
          unsigned int v28 = (void *)TCCLibrary();
          uint64_t v29 = dlsym(v28, "tcc_release");
          *(void *)(*((void *)v53 + 1) + 24) = v29;
          gettcc_releaseSymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v53 + 1) + 24);
          int v6 = *(uint64_t (**)(long long *, uint64_t))(v58[1] + 24);
        }
        _Block_object_dispose(v58, 8);
        if (!v6)
        {
LABEL_57:
          __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
          __break(1u);
          goto LABEL_58;
        }
        ((void (*)(uint64_t))v6)(a5);
      }
      else
      {
        *(_DWORD *)audit_token_t buffer = 0;
        LOBYTE(v55) = 0;
        uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v26 = *(_DWORD *)buffer;
        if (os_log_type_enabled(v25, (os_log_type_t)v55)) {
          unsigned int v27 = v26;
        }
        else {
          unsigned int v27 = v26 & 0xFFFFFFFE;
        }
        if (v27)
        {
          LODWORD(v58[0]) = 136315138;
          *(void *)((char *)v58 + 4) = "MX_PrivacyAccounting_CreateRecordingAccessIntervals";
          LODWORD(v36) = 12;
          unsigned int v35 = v58;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    uint64_t v44 = [a4 countByEnumeratingWithState:&v47 objects:v57 count:16];
    if (v44) {
      continue;
    }
    break;
  }
  if (!v9)
  {
LABEL_51:
    int v30 = (void *)getPATCCAccessClass();
    uint64_t v31 = getkTCCServiceMicrophone();
    if (v40)
    {
      long long v32 = v37[1];
      long long v51 = *v37;
      long long v52 = v32;
      uint64_t v33 = [v30 accessWithAuditToken:&v51 forService:v31];
    }
    else
    {
      uint64_t v33 = [v30 accessWithInsecureProcessIdentifier:v38 forService:v31];
    }
    objc_msgSend(v41, "setObject:forKey:", objc_msgSend((id)objc_msgSend((id)getPAAccessLoggerClass(), "sharedInstance"), "beginIntervalForAccess:", v33), v39);
  }
  return v41;
}

void sub_194D63C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

uint64_t getPAAccessLoggerClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  int v6 = __Block_byref_object_copy__1;
  unint64_t v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getPAAccessLoggerClass_softClass;
  uint64_t v8 = getPAAccessLoggerClass_softClass;
  if (!getPAAccessLoggerClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getPAAccessLoggerClass_block_invoke;
    v2[3] = &unk_1E57C5B30;
    v2[4] = &v3;
    __getPAAccessLoggerClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_194D63D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSUtility_IsAllowedToStartRecording(void *a1)
{
  uint64_t v1 = (uint64_t)a1;
  valuePtr[16] = *MEMORY[0x1E4F143B8];
  if (!CMSMUtility_IsInputAllowedForCategory((const void *)[a1 audioCategory])) {
    goto LABEL_58;
  }
  if (([(id)v1 hasEntitlementToRecordDuringCall] & 1) == 0
    && CMSMUtility_IsSomeOtherPhoneCallPrioritySessionActive((void *)v1)
    && ([(id)v1 hasAudioMode:@"EchoCancellationInput"] & 1) == 0)
  {
    if (!dword_1E9359ED0) {
      return 0;
    }
LABEL_58:
    unsigned int v58 = 0;
    v57[1] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_92:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  *(_WORD *)CFAllocatorRef v57 = 0;
  if (([(id)v1 isTheAssistant] & 1) == 0
    && ![(id)v1 clientPriority]
    && -[MXSessionManager isSiriSessionActive:andMixable:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSiriSessionActive:andMixable:", &v57[1], v57)&& v57[1]&& (([(id)v1 mixesWithEveryone] & 1) != 0 || v57[0]))
  {
    if (dword_1E9359ED0)
    {
      unsigned int v58 = 0;
      unsigned int v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v23 = v58;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v24 = v23;
      }
      else {
        unsigned int v24 = v23 & 0xFFFFFFFE;
      }
      if (!v24) {
        goto LABEL_92;
      }
      uint64_t v25 = [(id)v1 clientName];
      int v26 = v57[1];
      int v27 = [(id)v1 mixesWithEveryone];
      int v59 = 136316162;
      uint64_t v60 = "CMSUtility_IsAllowedToStartRecording";
      __int16 v61 = 2114;
      uint64_t v62 = v25;
      __int16 v63 = 1024;
      *(_DWORD *)int v64 = v26;
      *(_WORD *)&v64[4] = 1024;
      *(_DWORD *)&v64[6] = v27;
      *(_WORD *)id v65 = 1024;
      *(_DWORD *)&v65[2] = v57[0];
      goto LABEL_65;
    }
    return 0;
  }
  IsAnExtensiouint64_t n = CMSUtility_IsAnExtension((void *)v1);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  unint64_t v4 = UpTimeNanoseconds - [(id)v1 timestampWhenMostRecentResumableEndInterruptionWasSent];
  int v5 = [(id)v1 wasInterruptedWhileRecording];
  if (v4 < 0x28FA6AE00) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v6 == 1)
  {
    [(id)v1 setTimestampWhenMostRecentResumableEndInterruptionWasSent:0];
    [(id)v1 setWasInterruptedWhileRecording:0];
  }
  uint64_t v7 = FigGetUpTimeNanoseconds();
  unint64_t v8 = v7 - [(id)v1 timestampWhenRecordingInBackgroundMostRecentlyStopped];
  int v9 = [(id)v1 wasInterruptedWhileRecording];
  if (v8 > 0xB2D05DFF) {
    int v10 = 1;
  }
  else {
    int v10 = v9;
  }
  if ((v10 & 1) == 0) {
    [(id)v1 setTimestampWhenRecordingInBackgroundMostRecentlyStopped:0];
  }
  if ([(id)v1 applicationState] != 4
    || (int v11 = [(id)v1 clientPriority],
        BOOL v12 = -[MXSessionManager isSessionAllowedToStartRecordingTemporarily:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSessionAllowedToStartRecordingTemporarily:", v1), v13 = [(id)v1 hasAudioMode:@"EchoCancellationInput"], (objc_msgSend((id)v1, "hasEntitlementToStartRecordingInTheBackground") & 1) != 0)|| v11 == 10|| ((v6 | objc_msgSend((id)v1, "doesInterAppAudio") | v10 ^ 1 | v12 | v13) & 1) != 0)
  {
    if (IsAnExtension && ([(id)v1 hasEntitlementToRecordAudioInAnExtension] & 1) == 0)
    {
      if (!dword_1E9359ED0) {
        return 0;
      }
      unsigned int v58 = 0;
      uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v20 = v58;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v20 & 0xFFFFFFFE;
      }
      if (!v21) {
        goto LABEL_92;
      }
    }
    else if (CMSMDeviceState_IsSmartCoverClosed() {
           && CMSMUtility_DoesCurrentInputPortSupportSecureMicrophone()
    }
           && (!v1 || ([(id)v1 prefersNoInterruptionWhenSecureMicrophoneIsEngaged] & 1) == 0))
    {
      if (!dword_1E9359ED0) {
        return 0;
      }
      unsigned int v58 = 0;
      uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v30 = v58;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v31 = v30;
      }
      else {
        unsigned int v31 = v30 & 0xFFFFFFFE;
      }
      if (!v31) {
        goto LABEL_92;
      }
    }
    else
    {
      if (![(id)v1 mixesWithEveryone]
        || [(id)v1 applicationState] == 8
        || ![(id)v1 applicationState])
      {
        return 1;
      }
      if ([(id)v1 applicationState] != 4)
      {
        if (!dword_1E9359ED0) {
          return 0;
        }
        unsigned int v58 = 0;
        uint64_t v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v45 = v58;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v46 = v45;
        }
        else {
          unsigned int v46 = v45 & 0xFFFFFFFE;
        }
        if (!v46) {
          goto LABEL_92;
        }
        uint64_t v47 = [(id)v1 clientName];
        uint64_t StringForApplicationState = CMSMUtility_GetStringForApplicationState([(id)v1 applicationState]);
        int v59 = 136315650;
        uint64_t v60 = "CMSUtility_IsAllowedToStartRecording";
        __int16 v61 = 2114;
        uint64_t v62 = v47;
        __int16 v63 = 2114;
        *(void *)int v64 = StringForApplicationState;
LABEL_65:
        _os_log_send_and_compose_impl();
        goto LABEL_92;
      }
      if (!CMSUtility_HasBackgroundEntitlement((void *)v1))
      {
        if (dword_1E9359ED0)
        {
          unsigned int v58 = 0;
          long long v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v50 = v58;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v51 = v50;
          }
          else {
            unsigned int v51 = v50 & 0xFFFFFFFE;
          }
          if (v51)
          {
            uint64_t v52 = [(id)v1 clientName];
            int v59 = 136315394;
            uint64_t v60 = "CMSUtility_IsAllowedToStartRecording";
            __int16 v61 = 2114;
            uint64_t v62 = v52;
            _os_log_send_and_compose_impl();
          }
          goto LABEL_92;
        }
        return 0;
      }
      if (cmsutility_hasAssertionsToStartMixableRecording((void *)v1))
      {
        if (dword_1E9359ED0)
        {
          unsigned int v58 = 0;
          CFDataRef v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v15 = v58;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v16 = v15;
          }
          else {
            unsigned int v16 = v15 & 0xFFFFFFFE;
          }
          if (v16)
          {
            uint64_t v17 = [(id)v1 clientName];
            int v18 = objc_msgSend((id)objc_msgSend((id)v1, "clientPID"), "intValue");
            int v59 = 136315650;
            uint64_t v60 = "CMSUtility_IsAllowedToStartRecording";
            __int16 v61 = 2114;
            uint64_t v62 = v17;
            __int16 v63 = 1024;
            *(_DWORD *)int v64 = v18;
            _os_log_send_and_compose_impl();
          }
          uint64_t v1 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          return v1;
        }
        return 1;
      }
      if (!dword_1E9359ED0) {
        return 0;
      }
      unsigned int v58 = 0;
      unsigned int v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v54 = v58;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v55 = v54;
      }
      else {
        unsigned int v55 = v54 & 0xFFFFFFFE;
      }
      if (!v55) {
        goto LABEL_92;
      }
    }
    uint64_t v32 = [(id)v1 clientName];
    int v33 = objc_msgSend((id)objc_msgSend((id)v1, "clientPID"), "intValue");
    int v59 = 136315650;
    uint64_t v60 = "CMSUtility_IsAllowedToStartRecording";
    __int16 v61 = 2114;
    uint64_t v62 = v32;
    __int16 v63 = 1024;
    *(_DWORD *)int v64 = v33;
    goto LABEL_65;
  }
  unsigned int v58 = 0;
  int v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v35 = v58;
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v36 = v35;
  }
  else {
    unsigned int v36 = v35 & 0xFFFFFFFE;
  }
  if (v36)
  {
    uint64_t v37 = [(id)v1 clientName];
    uint64_t v38 = [(id)v1 clientPID];
    int v39 = [(id)v1 hasEntitlementToStartRecordingInTheBackground];
    id v40 = -[MXSessionManager getClientPriorityAsString:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "getClientPriorityAsString:", [(id)v1 clientPriority]);
    int v41 = [(id)v1 doesInterAppAudio];
    int v59 = 136317442;
    uint64_t v60 = "CMSUtility_IsAllowedToStartRecording";
    __int16 v61 = 2114;
    uint64_t v62 = v37;
    __int16 v63 = 2114;
    *(void *)int v64 = v38;
    *(_WORD *)&v64[8] = 1024;
    *(_DWORD *)id v65 = v39;
    *(_WORD *)&v65[4] = 2114;
    *(void *)&v65[6] = v40;
    __int16 v66 = 1024;
    int v67 = v41;
    __int16 v68 = 1024;
    int v69 = 0;
    __int16 v70 = 1024;
    int v71 = 0;
    __int16 v72 = 1024;
    int v73 = 0;
    __int16 v74 = 1024;
    int v75 = 0;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v1)
  {
    if (objc_msgSend((id)objc_msgSend((id)v1, "reporterIDs"), "count"))
    {
      valuePtr[0] = 1;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)[(id)v1 reporterIDs], 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, valuePtr);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      [(id)v1 displayID];
      FigCFDictionarySetValue();
      [MEMORY[0x1E4F28ED0] numberWithBool:0];
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      off_1E9359D10(valuePtr[0], Mutable, 11, 6);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    return 0;
  }
  return v1;
}

uint64_t CMSMUtility_IsSomeOtherPhoneCallPrioritySessionActive(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  unsigned int v2 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v3 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ([v7 isActive])
        {
          char v8 = [v7 isIDSMXCoreSession];
          if (v7 != a1
            && (v8 & 1) == 0
            && [v7 hasPhoneCallBehavior]
            && [v7 clientPriority] == 10)
          {
            uint64_t v9 = 1;
            goto LABEL_15;
          }
        }
      }
      uint64_t v4 = [(NSPointerArray *)v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v9 = 0;
LABEL_15:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  return v9;
}

uint64_t CMSMDeviceState_IsSmartCoverClosed()
{
  MEMORY[0x199716E90](qword_1E93589D0);
  uint64_t v0 = byte_1E9358945;
  MEMORY[0x199716EA0](qword_1E93589D0);
  return v0;
}

void routingContextRemoteXPC_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  void v7[5] = 0;
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)DerivedStorage && !FigXPCCreateBasicMessage())
  {
    FigXPCRemoteClientSendSyncMessage();
    FigXPCRelease();
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1) {
    CFRelease(v1);
  }
  unsigned int v2 = *(NSObject **)(DerivedStorage + 16);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 56);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 64);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 40);
  if (v5) {
    dispatch_release(v5);
  }
  int v6 = *(NSObject **)(DerivedStorage + 48);
  if (v6) {
    dispatch_release(v6);
  }
  if (*(void *)(DerivedStorage + 72))
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __routingContextRemoteXPC_Finalize_block_invoke;
    v7[3] = &__block_descriptor_40_e5_v8__0l;
    void v7[4] = DerivedStorage;
    MXDispatchSync((uint64_t)"routingContextRemoteXPC_Finalize", (uint64_t)"FigRoutingContextRemoteXPC.m", 575, 0, 0, gFigRoutingContextRemoteObject_1, (uint64_t)v7);
    CFRelease(*(CFTypeRef *)(DerivedStorage + 72));
  }
}

void *mx_runningBoardServices_createMXAssertionForPID(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v5 = [MEMORY[0x1E4F96478] targetWithPid:a1];
  if (v5)
  {
    return mx_runningBoardServices_createAssertionForTarget(v5, a2, @"com.apple.mediaexperience", @"MediaPlayback", a3);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
}

uint64_t cmsVibrateForSession(void *a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t result = [a1 isActive];
  if (result)
  {
    uint64_t result = [a1 isVibrating];
    if (a2)
    {
      if ((result & 1) == 0)
      {
        uint64_t result = [a1 vibrationData];
        if (result)
        {
          uint64_t result = CMSystemSoundMgr_DeviceIsAllowedToVibrateIfConnectedToStark();
          if (result)
          {
            if (CMSMDeviceState_IsVibrationDisabled()
              && (uint64_t result = [a1 prefersToVibeWhenVibrationsAreDisabled], (result & 1) == 0))
            {
              if (dword_1E9359ED0)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                return fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            else
            {
              if (dword_1E9359ED0)
              {
                uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (!objc_msgSend(a1, "vibratingOSTransaction", v14, v15))
              {
                uint64_t v16 = 0;
                [a1 clientName];
                uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
                [a1 displayID];
                uint64_t v10 = FigCFStringGetCStringPtrAndBufferToFree();
                long long v11 = "CMSessionManager";
                if (CStringPtrAndBufferToFree) {
                  long long v11 = (const char *)CStringPtrAndBufferToFree;
                }
                long long v12 = "CMSessionDefaultID";
                if (v10) {
                  long long v12 = (const char *)v10;
                }
                snprintf(__str, 0x80uLL, "%s-%s", v11, v12);
                free(v16);
                free(0);
                objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue");
                [a1 setVibratingOSTransaction:FigOSTransactionCreate()];
              }
              [a1 setIsVibrating:1];
              BOOL v13 = MX_FeatureFlags_IsHapticEngineCPMSEnabled() != 0;
              return FigVibratorPlayVibrationWithDictionary((CFDictionaryRef)[a1 vibrationData], 0, 0, 0, 0, 1, v13, 1.0);
            }
          }
        }
      }
    }
    else if (result)
    {
      if (dword_1E9359ED0)
      {
        int v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigVibratorStopWithOptions(0);
      [a1 setIsVibrating:0];
      uint64_t v7 = (void *)[a1 vibratingOSTransaction];
      if (v7) {

      }
      return objc_msgSend(a1, "setVibratingOSTransaction:", 0, v14, v15);
    }
  }
  return result;
}

void __CMScreenGetScreenType_block_invoke(uint64_t a1)
{
  unsigned int v2 = @"None";
  if (cmscreenIsActivated())
  {
    CFTypeRef v11 = 0;
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&v11);
    CFTypeRef v10 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v11, 0, (uint64_t)&v10);
    CFTypeRef v3 = v10;
    if (!v10)
    {
      CFArrayRef theArray = 0;
      FigRoutingManagerContextUtilities_CopyPerAppSecondDisplayContextUUIDs((uint64_t)&theArray);
      if (theArray)
      {
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v5 = Count;
          CFIndex v6 = 0;
          while (1)
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
            CFTypeRef cf = 0;
            FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)ValueAtIndex, 0, (uint64_t)&cf);
            if (FigRoutingManagerIsEndpointOfType((uint64_t)cf)
              || FigRoutingManagerIsEndpointOfType((uint64_t)cf))
            {
              break;
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v5 == ++v6) {
              goto LABEL_16;
            }
          }
          if (cf)
          {
            CFTypeRef v10 = CFRetain(cf);
            if (cf) {
              CFRelease(cf);
            }
          }
          else
          {
            CFTypeRef v10 = 0;
          }
        }
LABEL_16:
        if (theArray) {
          CFRelease(theArray);
        }
      }
      CFTypeRef v3 = v10;
    }
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v3))
    {
      unsigned int v2 = @"AirPlay";
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)v10))
    {
      unsigned int v2 = @"TVOut";
    }
    if (v10)
    {
      CFRelease(v10);
      CFTypeRef v10 = 0;
    }
    if (v11) {
      CFRelease(v11);
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
}

BOOL cmscreenIsActivated()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

uint64_t cmsmGetUpdatedSystemSoundPlayFlags(void *a1, unsigned int a2, int a3, int a4, int a5, float *a6, int a7, unsigned int *a8, unsigned __int8 a9)
{
  unsigned int v12 = a1;
  uint64_t v218 = *MEMORY[0x1E4F143B8];
  CFStringRef SystemSoundCategory = (const __CFString *)cmsmGetSystemSoundCategory(a1);
  if (SystemSoundCategory)
  {
    CFStringRef MappedBehaviorCategory = CMSystemsoundMgr_GetMappedBehaviorCategory(SystemSoundCategory);
    uint64_t v15 = (__CFString *)MappedBehaviorCategory;
    if (MappedBehaviorCategory) {
      BOOL v187 = CFStringHasSuffix(MappedBehaviorCategory, @"AlwaysHeard") != 0;
    }
    else {
      BOOL v187 = 0;
    }
    uint64_t CurrentVADForSystemSoundAudioCategory = cmsmGetCurrentVADForSystemSoundAudioCategory(v15, a9);
  }
  else
  {
    BOOL v187 = 0;
    uint64_t CurrentVADForSystemSoundAudioCategory = 0;
    uint64_t v15 = 0;
  }
  unsigned int v189 = 1;
  float v190 = 1.0;
  if (FigCFEqual())
  {
    int v17 = 0;
  }
  else
  {
    if (FigCFEqual())
    {
      unsigned int v19 = CMSMDeviceState_VibrateOnSilent(0);
      unsigned int v18 = CMSMDeviceState_VibrateOnRing(1);
      goto LABEL_12;
    }
    int v17 = 1;
  }
  unsigned int v18 = CMSMDeviceState_VibrateOnRing(v17);
  unsigned int v19 = CMSMDeviceState_VibrateOnSilent(1);
LABEL_12:
  BOOL v20 = FigCFEqual() == 0;
  if (CMSMDeviceState_RingerIsOn(v20)) {
    BOOL v21 = byte_1E9359C48 == 0;
  }
  else {
    BOOL v21 = 0;
  }
  uint64_t v23 = v21 && HIBYTE(word_1E9359BD8) == 0;
  if (v15 && (CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundRingerSettings, v15)) != 0
    || (CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundRingerSettings, @"Default")) != 0)
  {
    int v25 = CFDataGetBytePtr(Value)[(2 * v19) | (4 * v18) | v23];
    unsigned int v189 = v25;
  }
  else
  {
    int v25 = 1;
  }
  active = (const void *)cmsmCopyCurrentActiveRouteTypesForSystemSound();
  theString = v15;
  if (CMSMDeviceState_IsVibrationDisabled())
  {
    if ([(id)gSystemSoundsDoNotObeyAccessibilityVibrationSetting containsObject:v15])
    {
      if (dword_1E9359ED0)
      {
        LODWORD(v191) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (dword_1E9359ED0)
      {
        LODWORD(v191) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        unsigned int v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v25 = v189;
      }
      unsigned int v189 = v25 & 0xFFFFFFFD;
    }
  }
  if (!CMSystemSoundMgr_DeviceIsAllowedToVibrateIfConnectedToStark())
  {
    if (dword_1E9359ED0)
    {
      LODWORD(v191) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v189 &= ~2u;
  }
  if (CMSMUtility_IsCameraBeingUsed() && cmsmVibrationForSystemSoundCanBeAlteredBasedOnSystemState(v12))
  {
    if (dword_1E9359ED0)
    {
      LODWORD(v191) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      unsigned int v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v189 &= ~2u;
  }
  if (HIBYTE(word_1E9359BD8))
  {
    if (dword_1E9359ED0)
    {
      LODWORD(v191) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      unsigned int v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v189 &= ~1u;
  }
  if (v12 - 1200 <= 0xB && CMSMUtility_IsPhoneCallActive())
  {
    unsigned int v32 = v189;
    if ((v189 & 1) == 0)
    {
      if (dword_1E9359ED0)
      {
        LODWORD(v191) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        int v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        unsigned int v32 = v189;
      }
      unsigned int v189 = v32 | 1;
    }
  }
  if (a3)
  {
    unsigned int v34 = v189;
    if ((v189 & 1) == 0)
    {
      if (dword_1E9359ED0)
      {
        LODWORD(v191) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        unsigned int v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        unsigned int v34 = v189;
      }
      unsigned int v189 = v34 | 1;
    }
  }
  if (active) {
    CFRelease(active);
  }
  if (!a4 || v187)
  {
    unsigned int v37 = v189;
  }
  else
  {
    if (dword_1E9359ED0)
    {
      LODWORD(v191) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      unsigned int v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    unsigned int v37 = v189 & 0xFFFFFFFE;
    v189 &= ~1u;
  }
  if ((v37 & 2) == 0) {
    goto LABEL_78;
  }
  if (a5)
  {
    if (!dword_1E9359ED0)
    {
LABEL_77:
      v37 &= ~2u;
      unsigned int v189 = v37;
      goto LABEL_78;
    }
    goto LABEL_75;
  }
  int IsOnenessEnabled = MX_FeatureFlags_IsOnenessEnabled();
  LOBYTE(v37) = v189;
  if (!IsOnenessEnabled || a9 || (v189 & 1) == 0)
  {
LABEL_78:
    if ((v37 & 1) == 0) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if ([+[MXSessionManager sharedInstance] isVADIDRoutedToOutputPortType:CurrentVADForSystemSoundAudioCategory portType:1885565807])
  {
    if (!dword_1E9359ED0)
    {
LABEL_76:
      unsigned int v37 = v189;
      goto LABEL_77;
    }
LABEL_75:
    LODWORD(v191) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    int v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_76;
  }
  if (v189) {
LABEL_79:
  }
    cmsmUpdateDuckVolume(v15, (int *)&v190, &v189, a9);
LABEL_80:
  uint64_t v174 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1))
  {
    CFDictionaryRef v41 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(v15, a9);
    int CurrentSystemSoundVADForAudioBehaviour = cmsGetCurrentSystemSoundVADForAudioBehaviour();
    if (v41) {
      CFRelease(v41);
    }
    uint64_t v43 = theString;
    if (CurrentSystemSoundVADForAudioBehaviour == [+[MXSessionManager sharedInstance] systemSoundRemoteVADID]&& qword_1E9359C68&& !CMSMUtility_IsPhoneCallActive())
    {
      if (CMSMUtility_SomeClientIsPlaying() || !CMSMUtility_DoesiOSHaveCarPlayMainAudio())
      {
        CFArrayAppendValue(Mutable, (const void *)qword_1E9359C68);
      }
      else if (dword_1E9359ED0)
      {
        LODWORD(v191) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        id v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v86 = v191;
        if (os_log_type_enabled(v85, type[0])) {
          unsigned int v87 = v86;
        }
        else {
          unsigned int v87 = v86 & 0xFFFFFFFE;
        }
        if (v87)
        {
          LODWORD(v202[0]) = 136315138;
          *(void *)((char *)v202 + 4) = "cmsmSystemSoundCopySessionsToDuck";
          LODWORD(v171) = 12;
          long long v169 = (os_log_type_t *)v202;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v43 = theString;
      }
    }
  }
  else
  {
    [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
    long long v203 = 0u;
    long long v204 = 0u;
    memset(v202, 0, sizeof(v202));
    uint64_t v44 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
    uint64_t v45 = [(NSPointerArray *)v44 countByEnumeratingWithState:v202 objects:&cf count:16];
    if (v45)
    {
      uint64_t v46 = v45;
      uint64_t v47 = *(void *)v202[2];
      do
      {
        for (uint64_t i = 0; i != v46; ++i)
        {
          if (*(void *)v202[2] != v47) {
            objc_enumerationMutation(v44);
          }
          long long v49 = *(void **)(v202[1] + 8 * i);
          if (objc_msgSend(v49, "isActive", v168, v170)
            && [v49 isPlaying]
            && !-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [v49 audioCategory]))
          {
            CFArrayAppendValue(Mutable, v49);
          }
        }
        uint64_t v46 = [(NSPointerArray *)v44 countByEnumeratingWithState:v202 objects:&cf count:16];
      }
      while (v46);
    }
    [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
    uint64_t v43 = theString;
  }
  if (Mutable) {
    CFIndex Count = CFArrayGetCount(Mutable);
  }
  else {
    CFIndex Count = 0;
  }
  unsigned int v51 = v189;
  if ((v189 & 0x80) != 0 && (a7 || Count < 1 || v190 == 1.0))
  {
    unsigned int v51 = v189 & 0xFFFFFF7F;
    v189 &= ~0x80u;
  }
  if (!v187)
  {
    BOOL v186 = 1;
    if ((v51 & 0x80) == 0) {
      goto LABEL_134;
    }
    float v52 = 0.5;
    if (v190 == 1.0) {
      goto LABEL_134;
    }
LABEL_113:
    BOOL v186 = !v187;
    cmsmGetSystemSoundMaxVolume(v43);
    if (v53 <= 0.0)
    {
      if (dword_1E9359ED0)
      {
        LODWORD(v191) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        id v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v66 = v191;
        if (os_log_type_enabled(v65, type[0])) {
          unsigned int v67 = v66;
        }
        else {
          unsigned int v67 = v66 & 0xFFFFFFFE;
        }
        if (v67)
        {
          LODWORD(v202[0]) = 136315138;
          *(void *)((char *)v202 + 4) = "cmsmGetUpdatedSystemSoundPlayFlags";
          LODWORD(v171) = 12;
          long long v169 = (os_log_type_t *)v202;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v43 = theString;
      }
      v189 &= ~1u;
    }
    else if (Count >= 1)
    {
      for (CFIndex j = 0; j != Count; ++j)
      {
        CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(Mutable, j);
        int ShouldSkipDuckingForSystemSounds = CMSUtility_ShouldSkipDuckingForSystemSounds(ValueAtIndex, CurrentVADForSystemSoundAudioCategory);
        if (v187
          && (CurrentAudioDestinatiouint64_t n = CMSUtility_GetCurrentAudioDestination(ValueAtIndex),
              uint64_t VADNameForVADID = CMSMUtility_GetVADNameForVADID(CurrentVADForSystemSoundAudioCategory),
              CMSMUtility_AreVADsRoutedToTheSamePhysicalDevice(CurrentAudioDestination, VADNameForVADID))
          || !ShouldSkipDuckingForSystemSounds)
        {
          int v59 = Mutable;
          char v60 = objc_msgSend(ValueAtIndex, "isDucked", v169, v171);
          __int16 v61 = [MXDuckingSource alloc];
          *(float *)&double v62 = v190;
          *(float *)&double v63 = v52;
          int v64 = [(MXDuckingSource *)v61 initWithType:0 ID:v12 duckVolume:v62 duckFadeDuration:v63];
          [+[MXSessionManager sharedInstance] duckVolume:ValueAtIndex duckerSession:0 duckingSource:v64];
          if (MX_FeatureFlags_IsAsyncDuckingEnabled()
            && (v60 & 1) == 0
            && [ValueAtIndex isPlayingOutput])
          {
            v189 |= 0x100u;
          }

          CFMutableDictionaryRef Mutable = v59;
        }
      }
      uint64_t v43 = theString;
    }
    goto LABEL_134;
  }
  unsigned int v189 = v51 & 0xFFFFFF77 | 8;
  float v52 = 0.0;
  if (v190 != 1.0) {
    goto LABEL_113;
  }
  BOOL v186 = 0;
LABEL_134:
  if ((v189 & 1) == 0)
  {
    LOBYTE(v68) = 0;
    goto LABEL_253;
  }
  long long v173 = Mutable;
  uint64_t v69 = cmsmGetCurrentVADForSystemSoundAudioCategory(v43, a9);
  uint64_t v184 = CMSMUtility_GetVADNameForVADID(v69);
  int v182 = FigEndpointCentralEntityHoldsResource(qword_1E9359C70, 0x1EE5E6788, 0x1EE5F1968);
  IsVoiceOverOuint64_t n = CMSMDeviceState_IsVoiceOverOn();
  [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
  long long v193 = 0u;
  long long v194 = 0u;
  long long v191 = 0u;
  long long v192 = 0u;
  __int16 v70 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
  uint64_t v71 = [(NSPointerArray *)v70 countByEnumeratingWithState:&v191 objects:&cf count:16];
  if (!v71)
  {
    int v178 = 0;
    int v73 = 0;
    int v183 = 0;
    int v185 = 0;
    LOBYTE(v74) = 0;
    BOOL v188 = 1;
    goto LABEL_181;
  }
  uint64_t v72 = v71;
  int v178 = 0;
  int v73 = 0;
  int v183 = 0;
  int v185 = 0;
  int v74 = 0;
  unsigned int v75 = 0;
  int v181 = 0;
  uint64_t v76 = *(void *)v192;
  BOOL v188 = 1;
  do
  {
    uint64_t v77 = 0;
    do
    {
      if (*(void *)v192 != v76) {
        objc_enumerationMutation(v70);
      }
      unsigned int v78 = *(void **)(*((void *)&v191 + 1) + 8 * v77);
      if (objc_msgSend(v78, "isActive", v169, v171)
        && !-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [v78 audioCategory])&& (!CMSMVAUtility_IsAdditiveRoutingEnabled() || (objc_msgSend(v78, "isRoutedToOnDemandVAD") & 1) == 0))
      {
        if ([v78 prefersToTakeHWControlFlagsFromAnotherSession])
        {
          CMSUtility_GetCurrentAudioDestination(v78);
          v73 |= FigCFEqual();
          [v78 currentlyControllingFlags];
          if ([v78 isPlaying] && v73 && v188) {
            BOOL v188 = ([v78 currentlyControllingFlags] & 0x10) == 0
          }
                && [v78 isRecording]
                && ![v78 isPlayingOutput];
          if (([v78 isPlaying] & 1) != 0 || objc_msgSend(v78, "isCarSession") && v182)
          {
            if (v75) {
              char v79 = 1;
            }
            else {
              char v79 = v186;
            }
            if ((v79 & 1) == 0) {
              unsigned int v75 = ([v78 currentlyControllingFlags] >> 1) & 1;
            }
            int v183 = 1;
            goto LABEL_162;
          }
          if (v181) {
            char v80 = 1;
          }
          else {
            char v80 = v186;
          }
          if ((v80 & 1) == 0 && ([v78 currentlyControllingFlags] & 2) != 0)
          {
            int v185 = 1;
            int v181 = v78;
          }
          else
          {
            if (([v78 currentlyControllingFlags] & 2) != 0
              && ([v78 applicationState] == 2
               || [v78 applicationState] == 4))
            {
              int v178 = 1;
            }
LABEL_162:
            int v185 = 1;
          }
        }
        v74 |= [v78 hasPhoneCallBehavior];
      }
      ++v77;
    }
    while (v72 != v77);
    uint64_t v81 = [(NSPointerArray *)v70 countByEnumeratingWithState:&v191 objects:&cf count:16];
    uint64_t v72 = v81;
  }
  while (v81);
LABEL_181:
  [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
  if (FigCFEqual() | IsVoiceOverOn)
  {
    CFMutableDictionaryRef Mutable = v173;
    if (!IsVoiceOverOn) {
      goto LABEL_197;
    }
    if (!FigCFEqual()
      || (CMSMUtility_GetCurrentAudioDestinationForVoiceOverSession(), FigCFEqual()))
    {
      if (CMSMVAUtility_IsAdditiveRoutingEnabled())
      {
        id v82 = [+[MXAdditiveRoutingManager sharedInstance] copyActiveVoiceOverSessionPlayingToOnDemandVAD];
        if (!v188 || v82 == 0) {
          int v84 = 0;
        }
        else {
          int v84 = 2;
        }

        goto LABEL_215;
      }
LABEL_197:
      int v84 = 0;
      goto LABEL_215;
    }
LABEL_201:
    int v84 = 2 * v188;
    goto LABEL_215;
  }
  CFMutableDictionaryRef Mutable = v173;
  if (!v185) {
    goto LABEL_214;
  }
  if ((CMSMDeviceState_ItsAnAppleTV() || FigCFArrayContainsValue())
    && CMSMUtility_SomeClientIsPlaying())
  {
    goto LABEL_197;
  }
  if (v183)
  {
    if (CMSMDeviceState_ItsAHomePod()
      && !CMSMUtility_IsAnyActiveSessionRoutedToDestination())
    {
      int v84 = 2;
      goto LABEL_215;
    }
    goto LABEL_201;
  }
  [+[MXSessionManager sharedInstance] currentAudioCategory];
  if (FigCFEqual()
    || ([+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") currentAudioCategory], FigCFEqual())|| ([+[MXSessionManager sharedInstance] currentAudioCategory], FigCFEqual()))
  {
LABEL_214:
    int v84 = 3;
    goto LABEL_215;
  }
  if (CMSMUtility_ActiveVideoConferenceExists() || (_BYTE)v74 && FigCFEqual()) {
    goto LABEL_197;
  }
  int v84 = v178 != 0;
  if (!CMSMUtility_IsAnyVoicePromptSessionThatDoesNotControlHardwareActive()) {
    v84 |= 2u;
  }
LABEL_215:
  if (CMSMDeviceState_ItsAHomePod())
  {
LABEL_216:
    if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0)) {
      v84 &= 1u;
    }
  }
  else
  {
    if (FigVAEndpointManagerGetPropertyBoolean(qword_1E9359B78, 0x1EE5F2FC8))
    {
      int IsConnected = vaemContinuityScreenOutputIsConnected();
      if (a6 && IsConnected) {
        goto LABEL_216;
      }
    }
    else if (a6)
    {
      goto LABEL_216;
    }
    v84 &= 1u;
  }
  if (v186)
  {
    if (!v84)
    {
      LOBYTE(v68) = 0;
      uint64_t v43 = theString;
      goto LABEL_253;
    }
LABEL_224:
    char v88 = 1;
  }
  else
  {
    if (vaemSpeakerAlertVADExists() || vaemSystemSoundLocalVADExists())
    {
      int v84 = 2;
      goto LABEL_224;
    }
    int v84 = 2;
    if (!FigCFArrayContainsValue())
    {
      if (FigCFArrayContainsValue()) {
        int v84 = 2;
      }
      else {
        int v84 = 3;
      }
    }
    FigAtomicIncrement32();
    char v88 = 0;
  }
  if (FigCFEqual()
    && !MX_FeatureFlags_IsKeyboardCHAudioEnabled()
    && !vaemSystemSoundLocalVADExists())
  {
    MEMORY[0x199716E90](gCMSS_12);
    uint64_t v112 = (void *)gCMSS_7;
    BOOL v113 = 0;
    if ([+[MXSessionManager sharedInstance] defaultVADID]&& v112)
    {
      BOOL v113 = objc_msgSend((id)objc_msgSend(v112, "objectForKey:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithInt:", a2)), "countForObject:", theString) != 0;
    }
    MEMORY[0x199716EA0](gCMSS_12);
    if (v183)
    {
      unsigned int v68 = v84;
      uint64_t v43 = theString;
    }
    else
    {
      if (v185) {
        BOOL v118 = v73 == 0;
      }
      else {
        BOOL v118 = 1;
      }
      char v119 = v118 || v113;
      if (v119)
      {
        uint64_t v43 = theString;
        if (!v113)
        {
LABEL_435:
          unsigned int v68 = v84;
          goto LABEL_229;
        }
      }
      else
      {
        uint64_t v43 = theString;
        cmsmAddPrewarmedAudioCategoriesThatMixIn(a2, (uint64_t)theString);
      }
      if (dword_1E9359ED0)
      {
        unsigned int v196 = 0;
        os_log_type_t v195 = OS_LOG_TYPE_DEFAULT;
        BOOL v120 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v121 = v196;
        if (os_log_type_enabled(v120, v195)) {
          unsigned int v122 = v121;
        }
        else {
          unsigned int v122 = v121 & 0xFFFFFFFE;
        }
        if (v122)
        {
          *(_DWORD *)os_log_type_t type = 136315906;
          __int16 v198 = "cmsmGetAudioHardwareControlFlagsForSystemSound";
          __int16 v199 = 2114;
          *(void *)__int16 v200 = v184;
          *(_WORD *)&v200[8] = 1024;
          v201[0] = 0;
          LOWORD(v201[1]) = 1024;
          *(_DWORD *)((char *)&v201[1] + 2) = v185;
          LODWORD(v171) = 34;
          long long v169 = type;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v84)
      {
        if (dword_1E9359ED0)
        {
          unsigned int v196 = 0;
          os_log_type_t v195 = OS_LOG_TYPE_DEFAULT;
          BOOL v155 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v156 = v196;
          if (os_log_type_enabled(v155, v195)) {
            unsigned int v157 = v156;
          }
          else {
            unsigned int v157 = v156 & 0xFFFFFFFE;
          }
          if (v157)
          {
            *(_DWORD *)os_log_type_t type = 136315906;
            __int16 v198 = "cmsmGetAudioHardwareControlFlagsForSystemSound";
            __int16 v199 = 2114;
            *(void *)__int16 v200 = v184;
            *(_WORD *)&v200[8] = 1024;
            v201[0] = 0;
            LOWORD(v201[1]) = 1024;
            *(_DWORD *)((char *)&v201[1] + 2) = v185;
            LODWORD(v171) = 34;
            long long v169 = type;
            _os_log_send_and_compose_impl();
          }
          BOOL v113 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          unsigned int v68 = 0;
          goto LABEL_425;
        }
        unsigned int v68 = 0;
      }
      else
      {
        unsigned int v68 = v84 & 0xFFFFFFFD;
      }
      BOOL v113 = 1;
    }
LABEL_425:
    if (v185) {
      goto LABEL_229;
    }
    if (!v113) {
      goto LABEL_229;
    }
    AudioObjectID VADIDForVADName = CMSMUtility_GetVADIDForVADName(v184);
    if (vaemGetDeviceVolume(VADIDForVADName, 0) != 0.0) {
      goto LABEL_229;
    }
    if (dword_1E9359ED0)
    {
      unsigned int v196 = 0;
      os_log_type_t v195 = OS_LOG_TYPE_DEFAULT;
      unsigned int v165 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v166 = v196;
      if (os_log_type_enabled(v165, v195)) {
        unsigned int v167 = v166;
      }
      else {
        unsigned int v167 = v166 & 0xFFFFFFFE;
      }
      if (v167)
      {
        *(_DWORD *)os_log_type_t type = 136315906;
        __int16 v198 = "cmsmGetAudioHardwareControlFlagsForSystemSound";
        __int16 v199 = 1024;
        *(_DWORD *)__int16 v200 = v183;
        *(_WORD *)&v200[4] = 1024;
        *(_DWORD *)&v200[6] = 0;
        LOWORD(v201[0]) = 2114;
        *(void *)((char *)v201 + 2) = v184;
        LODWORD(v171) = 34;
        long long v169 = type;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_435;
  }
  unsigned int v68 = v84;
  uint64_t v43 = theString;
LABEL_229:
  if ((v88 & 1) == 0) {
    v189 |= 8u;
  }
  if (v68)
  {
    if (!a7)
    {
      if (v68) {
        int v89 = -3;
      }
      else {
        int v89 = -1;
      }
      if ((v68 & 2) != 0) {
        unsigned int v90 = v89 & 0xFFFFFFEF;
      }
      else {
        unsigned int v90 = v89;
      }
      [+[MXSessionManager sharedInstance] mxCoreSessionListBeginIteration];
      long long v203 = 0u;
      long long v204 = 0u;
      memset(v202, 0, sizeof(v202));
      int v91 = [+[MXSessionManager sharedInstance] mxCoreSessionList];
      uint64_t v92 = [(NSPointerArray *)v91 countByEnumeratingWithState:v202 objects:&cf count:16];
      if (v92)
      {
        uint64_t v93 = v92;
        uint64_t v94 = *(void *)v202[2];
        do
        {
          for (uint64_t k = 0; k != v93; ++k)
          {
            if (*(void *)v202[2] != v94) {
              objc_enumerationMutation(v91);
            }
            uint64_t v96 = *(void **)(v202[1] + 8 * k);
            if ([v96 isActive])
            {
              if (!-[MXSessionManager isSpeechDetectCategory:](+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance"), "isSpeechDetectCategory:", [v96 audioCategory]))
              {
                int v97 = [v96 currentlyControllingFlags];
                objc_msgSend(v96, "setCurrentlyControllingFlags:", objc_msgSend(v96, "currentlyControllingFlags") & v90);
                if (v97 != [v96 currentlyControllingFlags]) {
                  [v96 setSystemSoundHasModifiedCurrentlyControllingFlags:1];
                }
              }
            }
          }
          uint64_t v93 = [(NSPointerArray *)v91 countByEnumeratingWithState:v202 objects:&cf count:16];
        }
        while (v93);
      }
      [+[MXSessionManager sharedInstance] mxCoreSessionListEndIteration];
      uint64_t v43 = theString;
    }
    if (a8) {
      *a8 = v68;
    }
  }
LABEL_253:
  if (!a7)
  {
    if (dword_1E9359ED0)
    {
      LODWORD(v191) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v99 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v100 = v191;
      if (os_log_type_enabled(v99, type[0])) {
        unsigned int v101 = v100;
      }
      else {
        unsigned int v101 = v100 & 0xFFFFFFFE;
      }
      if (v101)
      {
        double v102 = "YES";
        *(void *)((char *)v202 + 4) = "cmsmApplyAudioHardwareControlFlagsForSystemSound";
        WORD2(v202[1]) = 2114;
        if (v68) {
          int v103 = "YES";
        }
        else {
          int v103 = "NO";
        }
        LODWORD(v202[0]) = 136315906;
        *(void *)((char *)&v202[1] + 6) = theString;
        if ((v68 & 2) == 0) {
          double v102 = "NO";
        }
        HIWORD(v202[2]) = 2082;
        v202[3] = v103;
        LOWORD(v203) = 2082;
        *(void *)((char *)&v203 + 2) = v102;
        LODWORD(v171) = 42;
        long long v169 = (os_log_type_t *)v202;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v43 = theString;
    }
    if ((v189 & 1) == 0)
    {
      if (a6)
      {
        cmsmGetSystemSoundMaxVolume(@"TouchTone");
        *(_DWORD *)a6 = v105;
      }
      goto LABEL_254;
    }
    if (v68)
    {
      if (v43
        && (CFAllocatorRef v106 = (NSDictionary *)CFDictionaryGetValue((CFDictionaryRef)gSystemSoundRoutingForCategories, v43)) != 0)
      {
        CFNumberRef v107 = v106;
        unsigned int VADCategoryFromFigCategoryName = CMSMVAUtility_GetVADCategoryFromFigCategoryName(v106);
        *(_DWORD *)os_log_type_t type = FigVAEndpointManagerGetPropertyUInt32(qword_1E9359B78, 0x1EE5F32A8);
        *(void *)&long long v191 = *MEMORY[0x1E4F1CFC8];
        uint64_t v109 = qword_1E9359B78;
        uint64_t v110 = *(void *)(CMBaseObjectGetVTable() + 24);
        if (v110) {
          uint64_t v111 = v110;
        }
        else {
          uint64_t v111 = 0;
        }
        int v114 = *(void (**)(uint64_t, uint64_t, uint64_t, os_log_type_t *, long long *))(v111 + 8);
        if (v114) {
          v114(v109, 0x1EE5F3528, v174, type, &v191);
        }
        if (FigCFEqual()
          && (FigCFArrayContainsValue() || FigCFArrayContainsValue())
          && (void)v191 == *MEMORY[0x1E4F1CFD0])
        {
          PVMSetEnabled(0);
        }
        else if (dword_1E9359B84 != VADCategoryFromFigCategoryName {
               || CFStringHasSuffix(theString, @"AlwaysHeard"))
        }
        {
          [+[MXSessionManager sharedInstance] setCurrentAudioCategory:v107];
          [+[MXSessionManager sharedInstance] setCurrentAudioMode:@"Default"];
          PVMSetEnabled(0);
          if (dword_1E9359ED0)
          {
            unsigned int v196 = 0;
            os_log_type_t v195 = OS_LOG_TYPE_DEFAULT;
            uint64_t v115 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v116 = v196;
            if (os_log_type_enabled(v115, v195)) {
              unsigned int v117 = v116;
            }
            else {
              unsigned int v117 = v116 & 0xFFFFFFFE;
            }
            if (v117)
            {
              LODWORD(v202[0]) = 136315138;
              *(void *)((char *)v202 + 4) = "cmsmSetRouteConfigurationForSystemSound";
              LODWORD(v171) = 12;
              long long v169 = (os_log_type_t *)v202;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFTypeRef cf = (CFTypeRef)(VADCategoryFromFigCategoryName | 0x696D646600000000);
          long long v206 = 0u;
          long long v207 = 0u;
          long long v208 = 0u;
          long long v209 = 0u;
          long long v210 = 0u;
          long long v211 = 0u;
          long long v212 = 0u;
          long long v213 = 0u;
          long long v214 = 0u;
          long long v215 = 0u;
          long long v216 = 0u;
          uint64_t v217 = 0;
          cmsmSetVADRouteConfiguration((uint64_t)&cf, 0, qword_1E9359C88);
        }
      }
      else
      {
        PVMSetEnabled(0);
        if (dword_1E9359B84 != 1667524212
          && dword_1E9359B84 != 1668505974
          && (!qword_1E9359BA8
           || FigCFArrayContainsValue()
           || FigCFArrayContainsValue()
           || FigCFArrayContainsValue()))
        {
          vaemResetVADCategoryToStandardAVAndDefaultMode();
        }
      }
      uint64_t v43 = theString;
      cmsmUpdateDuckVolume(theString, 0, &v189, a9);
      BOOL IsCategoryInputOnly = CMSMUtility_IsCategoryInputOnly(0);
      cmsSetDeviceSampleRateAndBufferSize(0, 0, IsCategoryInputOnly, 44100.0, 0.0);
    }
    else
    {
      cmsmUpdateDuckVolume(v43, 0, &v189, a9);
    }
    if (CMSMDeviceState_ItsAHomePod()
      && (int v124 = cmsmGetCurrentVADForSystemSoundAudioCategory(v43, a9),
          v124 == [+[MXSessionManager sharedInstance] systemSoundLocalVADID]))
    {
      if ((v68 & 2) == 0)
      {
        int v125 = 0;
        goto LABEL_347;
      }
    }
    else
    {
      int v126 = CMSMDeviceState_ItsAHomePod();
      int v125 = 0;
      if ((v68 & 2) == 0 || v126) {
        goto LABEL_347;
      }
    }
    int v127 = (const void *)cmsmCopyCurrentActiveRouteTypesForSystemSound();
    if (FigCFArrayContainsValue())
    {
      int v125 = 0;
      if (!v127) {
        goto LABEL_347;
      }
    }
    else
    {
      uint64_t v138 = cmsmGetCurrentVADForSystemSoundAudioCategory(v43, a9);
      CurrentRouteTypeForSystemSoundAtIndex = CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(0);
      if (dword_1E9359ED0)
      {
        __int16 v140 = Mutable;
        LODWORD(v191) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        CFArrayRef v141 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v142 = v191;
        if (os_log_type_enabled(v141, type[0])) {
          unsigned int v143 = v142;
        }
        else {
          unsigned int v143 = v142 & 0xFFFFFFFE;
        }
        if (v143)
        {
          uint64_t v144 = CMSMUtility_GetVADNameForVADID(v138);
          LODWORD(v202[0]) = 136315906;
          *(void *)((char *)v202 + 4) = "cmsmSetVolumeForSystemSound";
          WORD2(v202[1]) = 2114;
          *(void *)((char *)&v202[1] + 6) = v144;
          HIWORD(v202[2]) = 2114;
          v202[3] = CurrentRouteTypeForSystemSoundAtIndex;
          LOWORD(v203) = 2114;
          *(void *)((char *)&v203 + 2) = theString;
          LODWORD(v171) = 42;
          long long v169 = (os_log_type_t *)v202;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFMutableDictionaryRef Mutable = v140;
      }
      cmsmGetSystemSoundMaxVolume(theString);
      uint64_t v153 = v138;
      uint64_t v43 = theString;
      vaemSetDeviceVolumeIfNotSet(v153, 0, CurrentRouteTypeForSystemSoundAtIndex, 0, v154, 0.0, 0.0);
      int v125 = 1;
      if (!v127)
      {
LABEL_347:
        if (!a6) {
          goto LABEL_254;
        }
        *a6 = 1.0;
        if (v43)
        {
          CFStringRef v128 = CMSystemsoundMgr_GetMappedBehaviorCategory(v43);
          if (v128)
          {
            if (CFStringHasSuffix(v128, @"AlwaysHeard")) {
              goto LABEL_254;
            }
          }
          if (FigCFEqual() || FigCFEqual() || FigCFEqual()) {
            goto LABEL_254;
          }
        }
        unsigned int v129 = (const void *)cmsmCopyCurrentActiveRouteTypesForSystemSound();
        CFDictionaryRef v130 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(v43, a9);
        int v131 = cmsGetCurrentSystemSoundVADForAudioBehaviour();
        if (v130) {
          CFRelease(v130);
        }
        unsigned int v132 = [+[MXSessionManager sharedInstance] systemSoundLocalVADID];
        if (FigCFArrayContainsValue())
        {
          cmsmGetSystemSoundMaxVolume(theString);
LABEL_358:
          float SystemSoundVolumeScalarForRawVolume = SystemSoundVolumeScalarForCurrentRoute;
          goto LABEL_359;
        }
        if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1)
          || !FigCFEqual())
        {
          if (FigVAEndpointManagerGetPropertyBoolean(qword_1E9359B78, 0x1EE5F2FC8) && v131 == v132)
          {
            CFDictionaryRef v145 = cmsmCopySystemSoundAudioBehaviorDictionaryForAudioCategory(theString, a9);
            uint64_t v146 = cmsGetCurrentSystemSoundVADForAudioBehaviour();
            if (v145) {
              CFRelease(v145);
            }
            float v147 = 1.0;
            float v148 = 1.0;
            if (FigVAEndpointManagerGetPropertyBoolean(qword_1E9359B78, 0x1EE5F2FC8))
            {
              uint64_t v149 = [+[MXSessionManager sharedInstance] systemSoundLocalVADID];
              CFTypeRef cf = 0;
              uint64_t v150 = qword_1E9359B78;
              uint64_t v151 = *(void *)(CMBaseObjectGetVTable() + 24);
              uint64_t v152 = v151 ? v151 : 0;
              v158 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, CFTypeRef *))(v152 + 40);
              if (v158)
              {
                v158(v150, 0x1EE5F35C8, v174, v149, 0, &cf);
                CFNumberRef v159 = (const __CFNumber *)cf;
              }
              else
              {
                CFNumberRef v159 = 0;
              }
              double ValueFloat32 = MXCFNumberGetValueFloat32(v159);
              float v148 = *(float *)&ValueFloat32;
              if (cf) {
                CFRelease(cf);
              }
            }
            float SystemSoundVolumeScalarForRawVolume = cmsmGetSystemSoundVolumeScalarForRawVolume(theString, v146, v148);
            if (theString)
            {
              if (CFStringHasPrefix(theString, @"JBL")) {
                goto LABEL_359;
              }
              if (!FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1))
              {
                if (gCMSS_4)
                {
                  if (qword_1E9359BA8)
                  {
                    LODWORD(cf) = 1065353216;
                    CFDictionaryRef v161 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)gCMSS_4, theString);
                    if (v161
                      || (CFDictionaryRef v161 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)gCMSS_4, @"Default")) != 0)
                    {
                      int v162 = CMSMUtility_GetCurrentRouteTypeForSystemSoundAtIndex(0);
                      CFNumberRef v163 = (const __CFNumber *)CFDictionaryGetValue(v161, v162);
                      if (v163)
                      {
                        CFNumberGetValue(v163, kCFNumberFloatType, &cf);
                        float v147 = *(float *)&cf;
                      }
                    }
                  }
                }
              }
            }
            float SystemSoundVolumeScalarForRawVolume = SystemSoundVolumeScalarForRawVolume * v147;
LABEL_359:
            *a6 = SystemSoundVolumeScalarForRawVolume;
            if (SystemSoundVolumeScalarForRawVolume == 0.0)
            {
              if (dword_1E9359ED0)
              {
                LODWORD(v191) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                uint64_t v135 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v136 = v191;
                if (os_log_type_enabled(v135, type[0])) {
                  unsigned int v137 = v136;
                }
                else {
                  unsigned int v137 = v136 & 0xFFFFFFFE;
                }
                if (v137)
                {
                  LODWORD(v202[0]) = 136315138;
                  *(void *)((char *)v202 + 4) = "cmsmUpdateSystemSoundVolume";
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v189 &= ~1u;
            }
            goto LABEL_388;
          }
          if (!v125)
          {
            float SystemSoundVolumeScalarForCurrentRoute = cmsmGetSystemSoundVolumeScalarForCurrentRoute(theString, a9);
            goto LABEL_358;
          }
        }
        *a6 = 1.0;
LABEL_388:
        if (v129) {
          CFRelease(v129);
        }
        goto LABEL_254;
      }
    }
    CFRelease(v127);
    goto LABEL_347;
  }
LABEL_254:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v189;
}

uint64_t cmsmCopyCurrentActiveRouteTypesForSystemSound()
{
  MEMORY[0x199716E90](gCMSM);
  uint64_t v0 = (const void *)qword_1E9359BA8;
  if (qword_1E9359BA8) {
    goto LABEL_5;
  }
  PropertyBooleauint64_t n = FigVAEndpointManagerGetPropertyBoolean(qword_1E9359B78, 0x1EE5F2FC8);
  unsigned int v2 = &kVirtualAudioDeviceUID_SystemLocal_CFString;
  if (!PropertyBoolean) {
    unsigned int v2 = &kVirtualAudioDeviceUID_Default_CFString;
  }
  cmsmCopyCurrentActiveRoutesInfoForVADUID(*v2, (__CFArray **)&qword_1E9359BA8, 0, 0);
  uint64_t v0 = (const void *)qword_1E9359BA8;
  if (qword_1E9359BA8)
  {
LABEL_5:
    CFRetain(v0);
    uint64_t v3 = qword_1E9359BA8;
  }
  else
  {
    uint64_t v3 = 0;
  }
  MEMORY[0x199716EA0](gCMSM);
  return v3;
}

uint64_t MX_FeatureFlags_IsKeyboardCHAudioEnabled()
{
  if (MX_FeatureFlags_IsKeyboardCHAudioEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsKeyboardCHAudioEnabled_onceToken, &__block_literal_global_77);
  }
  return MX_FeatureFlags_IsKeyboardCHAudioEnabled_sIsKeyboardCHAudioEnabled;
}

uint64_t FigEndpointCentralEntityHoldsResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          if (*(unsigned char *)DerivedStorage)
          {
            int v13 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            uint64_t v7 = *(NSObject **)(DerivedStorage + 48);
            v11[0] = MEMORY[0x1E4F143A8];
            v11[1] = 3221225472;
            v11[2] = __FigEndpointCentralEntityHoldsResource_block_invoke;
            void v11[3] = &unk_1E57C6180;
            v11[4] = &v14;
            void v11[5] = a1;
            v11[6] = a2;
            void v11[7] = a3;
            MXDispatchSync((uint64_t)"FigEndpointCentralEntityHoldsResource", (uint64_t)"FigEndpoint_Central.m", 1948, 0, 0, v7, (uint64_t)v11);
          }
        }
      }
    }
  }
  uint64_t v8 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_194D681C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL CMSystemSoundMgr_DeviceIsAllowedToVibrateIfConnectedToStark()
{
  uint64_t v0 = 1;
  if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1)
    && CMSMDeviceState_ScreenIsBlanked())
  {
    return CMSMDeviceState_ScreenIsBlankedByProximitySensor() != 0;
  }
  return v0;
}

uint64_t CMSMDeviceState_VibrateOnSilent(int a1)
{
  if (!a1) {
    cmsmdevicestate_UpdateVibrateOnSilent();
  }
  return byte_1E935897D;
}

uint64_t CMSMDeviceState_VibrateOnRing(int a1)
{
  if (!a1) {
    cmsmdevicestate_UpdateVibrateOnRing();
  }
  return byte_1E935897C;
}

uint64_t CMSMDeviceState_IsVibrationDisabled()
{
  return byte_1E935897F;
}

void CMSMNotificationUtility_PostAvailableSampleRatesDidChange_f()
{
}

uint64_t _VAEndpointManager_CopyPropertyForScope(uint64_t a1, const void *a2, uint64_t a3, int a4, uint64_t a5, CFNumberRef *a6)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294950586;
  if (a2 && a6)
  {
    *a6 = 0;
    if (CFEqual(a2, @"VAEM_NumberOfStreams"))
    {
      unsigned int NumberOfStreams = vaemGetNumberOfStreams(a4);
    }
    else
    {
      uint64_t result = CFEqual(a2, @"VAEM_MaximumNumberOfChannels");
      if (!result) {
        return result;
      }
      unsigned int NumberOfStreams = vaemGetMaximumNumberOfChannels(a4);
    }
    CFNumberRef v11 = MXCFNumberCreateFromSInt64(NumberOfStreams);
    uint64_t result = 0;
    *a6 = v11;
  }
  return result;
}

uint64_t vaemGetMaximumNumberOfChannels(int a1)
{
  if (a1 == 1) {
    AudioObjectPropertyScope v2 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v2 = 1869968496;
  }
  inAddress.AudioObjectPropertySelector mSelector = 1937009955;
  inAddress.mScope = v2;
  inAddress.mElement = 0;
  int NumberOfStreams = vaemGetNumberOfStreams(a1);
  UInt32 ioDataSize = 4 * NumberOfStreams;
  uint64_t v4 = malloc_type_malloc((4 * NumberOfStreams), 0x29E5222FuLL);
  uint64_t v5 = 0;
  if (AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, v4))
  {
    BOOL v6 = 1;
  }
  else
  {
    BOOL v6 = v4 == 0;
  }
  if (!v6 && NumberOfStreams != 0)
  {
    uint64_t v8 = 0;
    uint64_t v5 = 0;
    while (1)
    {
      AudioObjectID v9 = *((_DWORD *)v4 + v8);
      uint64_t v15 = 0;
      unsigned int v14 = 0;
      if (vaemCopySupportedStreamFormats(v9, a1, &v15, &v14)) {
        goto LABEL_23;
      }
      uint64_t v10 = v14;
      unsigned int v11 = 0;
      if (v14) {
        break;
      }
      if (v15) {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t v5 = (v10 + v5);
      if (++v8 == NumberOfStreams) {
        goto LABEL_23;
      }
    }
    unsigned int v12 = (unsigned int *)((char *)v15 + 28);
    do
    {
      if (*(v12 - 5) == 1819304813 && v11 <= *v12) {
        unsigned int v11 = *v12;
      }
      v12 += 14;
      --v10;
    }
    while (v10);
LABEL_21:
    free(v15);
    LODWORD(v1CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = v11;
    goto LABEL_22;
  }
LABEL_23:
  free(v4);
  return v5;
}

uint64_t vaemGetNumberOfStreams(int a1)
{
  HIDWORD(v4) = 4;
  if (a1 == 1) {
    int v1 = 1768845428;
  }
  else {
    int v1 = 1869968496;
  }
  LODWORD(v3) = 1937009955;
  HIDWORD(v3) = v1;
  LODWORD(v4) = 0;
  if (AudioObjectGetPropertyDataSize([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v3, 0, 0, (UInt32 *)&v4 + 1))
  {
    return 0;
  }
  else
  {
    return HIDWORD(v4) >> 2;
  }
}

void cmsSetDeviceSampleRateAndBufferSize(void *a1, unsigned int a2, uint64_t a3, double a4, float a5)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (a3) {
    uint64_t CurrentVADIDForInput = vaemGetCurrentVADIDForInput();
  }
  else {
    uint64_t CurrentVADIDForInput = CMSUtility_GetCurrentOutputVADID(a1);
  }
  uint64_t v11 = CurrentVADIDForInput;
  unsigned int v40 = -1;
  int v41 = 0;
  vaemGetDeviceFormatID(CurrentVADIDForInput, a3, &v41);
  if (v12) {
    int v41 = 1819304813;
  }
  if (dword_1E9359ED0)
  {
    unsigned int v42 = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v14 = v42;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v14 & 0xFFFFFFFE;
    }
    if (v15)
    {
      uint64_t v16 = (void *)[a1 clientName];
      if (a3 == 1) {
        char v17 = "input";
      }
      else {
        char v17 = "output";
      }
      uint64_t VADNameForVADID = CMSMUtility_GetVADNameForVADID(v11);
      LODWORD(v43[0]) = 136317186;
      *(void **)((char *)v43 + 4) = "cmsSetDeviceSampleRateAndBufferSize";
      WORD2(v43[1]) = 2114;
      *(void **)((char *)&v43[1] + 6) = v16;
      HIWORD(v43[2]) = 2048;
      v43[3] = *(void **)&a4;
      LOWORD(v44[0]) = 1024;
      *(_DWORD *)((char *)v44 + 2) = a2;
      HIWORD(v44[0]) = 2048;
      *(double *)&v44[1] = a5;
      __int16 v45 = 2082;
      uint64_t v46 = v17;
      __int16 v47 = 1042;
      int v48 = 4;
      __int16 v49 = 2082;
      unsigned int v50 = &v41;
      __int16 v51 = 2114;
      uint64_t v52 = VADNameForVADID;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4 == 0.0) {
    a4 = 44100.0;
  }
  if (a1)
  {
    int v19 = [a1 hasInput];
    if (a4 >= 22050.0) {
      int v20 = 1;
    }
    else {
      int v20 = v19;
    }
    if (!v20) {
      a4 = 22050.0;
    }
    if (a3 == 1) {
      int v21 = [a1 preferredNumberOfInputChannels];
    }
    else {
      int v21 = [a1 preferredNumberOfOutputChannels];
    }
    int v22 = v21;
  }
  else
  {
    int v22 = 0;
  }
  MEMORY[0x199716E90](gCMSM);
  *(_OWORD *)uint64_t v44 = 0u;
  memset(v43, 0, sizeof(v43));
  __int16 v39 = 0;
  if (vaemVADGetAvailableStreamFormats((unsigned char *)&v39 + 1, &v39, (uint64_t)v43)) {
    a4 = 0.0;
  }
  int v23 = HIBYTE(v39) | v39;
  BOOL v24 = v23 != 0;
  if (v23)
  {
    if (a3 == 1)
    {
      int v25 = (int)v44[0];
      int v26 = &v44[1];
      int v27 = v44[1];
    }
    else if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1) {
           && CMSUtility_IsPlayingToSystemSoundRemoteVAD(a1))
    }
    {
      int v25 = (int)v43[2];
      int v26 = &v43[3];
      int v27 = v43[3];
    }
    else
    {
      int v25 = (int)v43[0];
      int v26 = &v43[1];
      int v27 = v43[1];
    }
    double v28 = vaemChooseBestSampleRateForFormat(v25, (uint64_t)v27, v41, v22, &v40, a4);
    if (v40 == -1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = (char *)*v26;
    }
    if (v28 == 0.0) {
      a4 = 44100.0;
    }
    else {
      a4 = v28;
    }
    MEMORY[0x199716EA0](gCMSM);
    if (v40 == -1 || vaemGetNumberOfStreams(a3) >= 2)
    {
      if (vaemSetSampleRateForDevice(v11))
      {
        unsigned int v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      unsigned int v31 = &v29[56 * v40];
      *(double *)unsigned int v31 = a4;
      long long v32 = *(_OWORD *)v31;
      long long v33 = *((_OWORD *)v31 + 1);
      uint64_t v55 = *((void *)v31 + 4);
      long long v53 = v32;
      long long v54 = v33;
      if (!CMSMVAUtility_IsNewVirtualFormatRedundantForDeviceAndScope(v11, (uint64_t)&v53, a3)
        && vaemSetVirtualFormatForScope(v11, (uint64_t)&v29[56 * v40], a3))
      {
        goto LABEL_64;
      }
    }
    if (a1)
    {
      if (!a3)
      {
        if ([a1 preferredNumberOfInputChannels])
        {
          if ([a1 hasInput])
          {
            MEMORY[0x199716E90](gCMSM);
            unsigned int v40 = -1;
            vaemGetDeviceFormatID(v11, 1, &v41);
            a4 = vaemChooseBestSampleRateForFormat((int)v44[0], (uint64_t)v44[1], v41, [a1 preferredNumberOfInputChannels], &v40, a4);
            MEMORY[0x199716EA0](gCMSM);
            if (v40 != -1)
            {
              unsigned int v34 = v44[1];
              if (v44[1])
              {
                unsigned int v35 = (char *)v44[1] + 56 * v40;
                *(double *)unsigned int v35 = a4;
                long long v36 = *(_OWORD *)v35;
                long long v37 = *((_OWORD *)v35 + 1);
                uint64_t v55 = *((void *)v35 + 4);
                long long v53 = v36;
                long long v54 = v37;
                if (!CMSMVAUtility_IsNewVirtualFormatRedundantForDeviceAndScope(v11, (uint64_t)&v53, 1))
                {
                  if (vaemSetVirtualFormatForScope(v11, (uint64_t)v34 + 56 * v40, 1)) {
                    goto LABEL_64;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (a2)
  {
    if (!vaemSetDeviceBufferNumPCMFrames(a2)) {
      goto LABEL_62;
    }
    BOOL v38 = 1;
  }
  else
  {
    BOOL v38 = a5 != 0.0;
  }
  vaemCalculateAndSetDeviceBufferDuration(0, v38, a5, a4);
LABEL_62:
  if (!v24) {
    MEMORY[0x199716EA0](gCMSM);
  }
LABEL_64:
  if (v43[1]) {
    free(v43[1]);
  }
  if (v43[3]) {
    free(v43[3]);
  }
  if (v44[1]) {
    free(v44[1]);
  }
}

uint64_t vaemVADGetAvailableStreamFormats(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  AudioObjectID outData = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unsigned int v15 = 0;
  if (vaemGetStream0([+[MXSessionManager sharedInstance] defaultVADID], 0, &outData))BOOL v6 = 1; {
  else
  }
    BOOL v6 = outData == 0;
  if (!v6)
  {
    int v7 = vaemCopySupportedStreamFormats(outData, 0, &v19, (unsigned int *)&v17 + 1);
    if (a2)
    {
      if (!v7) {
        *a2 = 1;
      }
    }
  }
  if ([+[MXSessionManager sharedInstance] systemSoundRemoteVADID])
  {
    if (!vaemGetStream0([+[MXSessionManager sharedInstance] systemSoundRemoteVADID], 0, &outData)&& outData != 0)
    {
      int v9 = vaemCopySupportedStreamFormats(outData, 0, &v18, (unsigned int *)&v17);
      if (a2)
      {
        if (!v9) {
          *a2 = 1;
        }
      }
    }
  }
  AudioObjectID CurrentVADIDForInput = vaemGetCurrentVADIDForInput();
  uint64_t Stream0 = vaemGetStream0(CurrentVADIDForInput, 1, &outData);
  if (!Stream0)
  {
    if (outData)
    {
      uint64_t v12 = vaemCopySupportedStreamFormats(outData, 1, &v16, &v15);
      uint64_t Stream0 = v12;
      if (a1)
      {
        if (!v12) {
          *a1 = 1;
        }
      }
    }
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)(a3 + 8) = v19;
  *(void *)(a3 + 24) = v18;
  *(void *)(a3 + 4CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = v16;
  *(_DWORD *)a3 = HIDWORD(v17);
  *(_DWORD *)(a3 + 16) = v17;
  *(_DWORD *)(a3 + 32) = v15;
  return Stream0;
}

BOOL vaemIsMATAtmosEnabled()
{
  AudioObjectID outData = 0;
  if (vaemGetStream0([+[MXSessionManager sharedInstance] defaultVADID], 0, &outData))BOOL v0 = 1; {
  else
  }
    BOOL v0 = outData == 0;
  BOOL result = 0;
  if (!v0)
  {
    int v2 = vaemStreamSupportsFormat(outData, 1836344107);
    if (v2 || vaemStreamSupportsFormat(outData, 1836343851)) {
      return 1;
    }
  }
  return result;
}

uint64_t vaemStreamSupportsFormat(AudioObjectID a1, int a2)
{
  uint64_t v8 = 0;
  unsigned int v7 = 0;
  if (vaemCopySupportedStreamFormats(a1, 0, &v8, &v7))
  {
    uint64_t v5 = 0;
    uint64_t v3 = v8;
  }
  else
  {
    uint64_t v3 = v8;
    if (v7)
    {
      uint64_t v4 = 0;
      while (*(_DWORD *)((char *)v8 + v4 + 8) != a2)
      {
        v4 += 56;
        if (56 * v7 == v4) {
          goto LABEL_6;
        }
      }
      uint64_t v5 = 1;
    }
    else
    {
LABEL_6:
      uint64_t v5 = 0;
    }
  }
  free(v3);
  return v5;
}

uint64_t vaemCopySupportedStreamFormats(AudioObjectID a1, int a2, void *a3, unsigned int *a4)
{
  if (a2 == 1) {
    int v7 = 1768845428;
  }
  else {
    int v7 = 1869968496;
  }
  size_t size = 0x73666D6100000000;
  int v13 = v7;
  int v14 = 0;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(a1, (const AudioObjectPropertyAddress *)((char *)&size + 4), 0, 0, (UInt32 *)&size);
  if (PropertyDataSize)
  {
    uint64_t PropertyData = PropertyDataSize;
    goto LABEL_8;
  }
  if (!size)
  {
    uint64_t PropertyData = 0;
    goto LABEL_8;
  }
  int v9 = malloc_type_calloc(1uLL, size, 0x2B9F65BuLL);
  uint64_t PropertyData = AudioObjectGetPropertyData(a1, (const AudioObjectPropertyAddress *)((char *)&size + 4), 0, 0, (UInt32 *)&size, v9);
  if (!PropertyData)
  {
    *a4 = size / 0x38;
    *a3 = v9;
LABEL_8:
    int v9 = 0;
  }
  free(v9);
  return PropertyData;
}

uint64_t vaemGetCurrentVADIDForInput()
{
  unsigned int v0 = [+[MXSessionManager sharedInstance] decoupledInputVADID];
  int v1 = +[MXSessionManager sharedInstance];
  if (v0)
  {
    return [(MXSessionManager *)v1 decoupledInputVADID];
  }
  else
  {
    unsigned int v3 = [(MXSessionManager *)v1 speechDetectionVADID];
    uint64_t v4 = +[MXSessionManager sharedInstance];
    if (v3)
    {
      return [(MXSessionManager *)v4 speechDetectionVADID];
    }
    else
    {
      return [(MXSessionManager *)v4 defaultVADID];
    }
  }
}

uint64_t vaemSetSampleRateForDevice(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (CMSMVAUtility_AudioObjectSetPropertyData())
  {
    if ([+[MXSessionManager sharedInstance] defaultVADID] == a1)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v3 = CMSMVAUtility_AudioObjectSetPropertyData();
    if (v3
      && [+[MXSessionManager sharedInstance] defaultVADID] == a1)
    {
      uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  [+[MXSessionManager sharedInstance] updateDeviceSampleRate:a1];
  return v3;
}

double vaemChooseBestSampleRateForFormat(int a1, uint64_t a2, int a3, int a4, _DWORD *a5, double a6)
{
  double v7 = 0.0;
  if (!a2 || !a1) {
    goto LABEL_71;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  int v10 = 0;
  int v11 = 0;
  uint64_t v12 = (int *)(a2 + 28);
  double v13 = 0.0;
  double v7 = 1.0e12;
  double v14 = 0.0;
  uint64_t v15 = 0xFFFFFFFFLL;
  uint64_t v16 = 0xFFFFFFFFLL;
  uint64_t v17 = 0xFFFFFFFFLL;
  do
  {
    if (*(v12 - 5) != a3) {
      goto LABEL_55;
    }
    double v18 = *(double *)(v12 + 3);
    BOOL v19 = v18 > a6;
    if (v18 <= a6)
    {
      double v20 = *(double *)(v12 + 5);
      if (v19 || v20 < a6)
      {
        if (v14 > v20) {
          goto LABEL_55;
        }
        if (v15 == 0xFFFFFFFFLL)
        {
          int v9 = 1;
          if (a4) {
            uint64_t v15 = v8;
          }
          goto LABEL_47;
        }
        if (a4)
        {
          int v28 = *(_DWORD *)(a2 + 56 * v15 + 28);
          int v29 = *v12;
          if (v28 < a4 || v29 < a4)
          {
            if (v29 >= v28) {
              goto LABEL_45;
            }
          }
          else
          {
            if (v29 > v28) {
              goto LABEL_46;
            }
LABEL_45:
            uint64_t v15 = v8;
          }
        }
LABEL_46:
        int v9 = 1;
LABEL_47:
        double v14 = *(double *)(v12 + 5);
        goto LABEL_55;
      }
      if (!a4) {
        goto LABEL_62;
      }
      if (v17 != 0xFFFFFFFFLL)
      {
        int v22 = *(_DWORD *)(a2 + 56 * v17 + 28);
        int v23 = *v12;
        if (v22 < a4 || v23 < a4)
        {
          if (v23 < v22) {
            goto LABEL_50;
          }
        }
        else if (v23 > v22)
        {
LABEL_50:
          int v11 = 1;
          double v13 = a6;
          goto LABEL_55;
        }
      }
      uint64_t v17 = v8;
      goto LABEL_50;
    }
    if (v7 < v18) {
      goto LABEL_55;
    }
    if (v16 == 0xFFFFFFFFLL)
    {
      int v10 = 1;
      if (a4) {
        uint64_t v16 = v8;
      }
      goto LABEL_54;
    }
    if (a4)
    {
      int v25 = *(_DWORD *)(a2 + 56 * v16 + 28);
      int v26 = *v12;
      if (v25 < a4 || v26 < a4)
      {
        if (v26 < v25) {
          goto LABEL_53;
        }
LABEL_52:
        uint64_t v16 = v8;
        goto LABEL_53;
      }
      if (v26 <= v25) {
        goto LABEL_52;
      }
    }
LABEL_53:
    int v10 = 1;
LABEL_54:
    double v7 = *(double *)(v12 + 3);
LABEL_55:
    ++v8;
    v12 += 14;
  }
  while (a1 != v8);
  if (v11)
  {
    if (!a5 || (v31 = v17, double v7 = a6, v17 == 0xFFFFFFFFLL))
    {
LABEL_62:
      double v7 = a6;
      goto LABEL_71;
    }
LABEL_70:
    *a5 = v31;
  }
  else if (v10)
  {
    if (a5)
    {
      int v31 = v16;
      if (v16 != 0xFFFFFFFFLL) {
        goto LABEL_70;
      }
    }
  }
  else if (v9)
  {
    if (a5)
    {
      int v31 = v15;
      double v7 = v14;
      if (v15 != 0xFFFFFFFFLL) {
        goto LABEL_70;
      }
    }
    double v7 = v14;
  }
  else
  {
    double v7 = v13;
  }
LABEL_71:
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v7;
}

void vaemCalculateAndSetDeviceBufferDuration(int a1, int a2, float DefaultBufferDuration, double SampleRateForDevice)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  LongBufferDuratiouint64_t n = CMSMUtility_GetLongBufferDuration();
  if (DefaultBufferDuration == 0.0)
  {
    float v9 = LongBufferDuration;
    if (!CMSMDeviceState_ScreenIsBlanked()
      || v9 == 0.0
      || (dword_1E9359C60 != 0) | a2 | byte_1E9358BA0)
    {
      DefaultBufferDuratiouint64_t n = cmsmGetDefaultBufferDuration();
      char v10 = 0;
    }
    else
    {
      char v10 = 1;
      DefaultBufferDuratiouint64_t n = v9;
    }
  }
  else
  {
    int IsHangsBufferedSizeHintEnabled = MX_FeatureFlags_IsHangsBufferedSizeHintEnabled();
    char v10 = 0;
    if (a2 && IsHangsBufferedSizeHintEnabled)
    {
      if (dword_1E9359ED0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      [+[MXSessionManager sharedInstance] defaultVADID];
      if (CMSMVAUtility_AudioObjectSetPropertyData())
      {
        double v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      char v10 = 0;
      goto LABEL_30;
    }
  }
  if (SampleRateForDevice == 0.0) {
    SampleRateForDevice = vaemGetSampleRateForDevice([+[MXSessionManager sharedInstance] defaultVADID]);
  }
  if (SampleRateForDevice != 0.0 && DefaultBufferDuration != 0.0)
  {
    float v13 = SampleRateForDevice * DefaultBufferDuration;
    unsigned int v14 = v13;
    unsigned int v15 = FigUInt32NearestPowerOfTwo();
    if (dword_1E9359ED0)
    {
      uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1)
    {
      vaemSetDeviceBufferNumPCMFramesQuiet(v15);
    }
    else
    {
      if (a2) {
        unsigned int v17 = v14;
      }
      else {
        unsigned int v17 = v15;
      }
      int v18 = vaemSetDeviceBufferNumPCMFrames(v17);
      if (a2 && v18)
      {
        if (dword_1E9359ED0)
        {
          BOOL v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        vaemSetDeviceBufferNumPCMFrames(v15);
      }
    }
LABEL_30:
    byte_1E9358B95 = v10;
  }
}

float CMSMUtility_GetLongBufferDuration()
{
  if ((CMSMUtility_GetLongBufferDuration_gCheckedLongBufferDuration & 1) == 0)
  {
    Boolean keyExistsAndHasValidFormat = 0;
    AppIntegerCFDataRef Value = CFPreferencesGetAppIntegerValue(@"longbuffermillis", @"com.apple.coremedia", &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat) {
      *(float *)&CMSMUtility_GetLongBufferDuration_gLongBufferDuratiouint64_t n = (float)AppIntegerValue / 1000.0;
    }
    CMSMUtility_GetLongBufferDuration_gCheckedLongBufferDuratiouint64_t n = 1;
  }
  return *(float *)&CMSMUtility_GetLongBufferDuration_gLongBufferDuration;
}

uint64_t MXCoreSessionBeginInterruption_WithSecTaskAndFlags(void *a1, __SecTask *a2, uint64_t a3, int a4)
{
  if (a1)
  {
    if (a4
      || ([a1 isActive] & 1) != 0
      || CMSUtility_HasEntitlementForInterruptions(a1, a2))
    {
      [a1 audioCategory];
      if (FigCFEqual()
        || [a1 isActive]
        && [a1 isPlaying]
        && ![a1 isTheAssistant])
      {
        return 0;
      }
      else
      {
        if (!CMSUtility_IsAllowedToStartPlaying(a1))
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v7 = 4294950316;
LABEL_27:
          CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 0);
          return v7;
        }
        CMSMVAUtility_UpdateSessionInfoAndReporterIDsOnVA(a1, 1);
        if ((a3 & 4) != 0)
        {
          char v10 = CMSMUtility_CopyCurrentRouteTypes();
          int IsPlaying = CMSMUtility_SomeClientIsPlaying();
          int IsDisruptiveWhenGoingActive = CMSUtility_IsDisruptiveWhenGoingActive(a1);
          if (FigRoutingManagerDoActivatedEndpointsIncludeEndpointType(qword_1E9359C88, 1)) {
            BOOL v13 = FigCFArrayContainsValue() == 0;
          }
          else {
            BOOL v13 = 0;
          }
          int IsRemoteInterruptionRequired = CMSUtility_IsRemoteInterruptionRequired(a1);
          uint64_t v7 = 4294954309;
          if (!IsPlaying && !IsDisruptiveWhenGoingActive && !v13 && !IsRemoteInterruptionRequired) {
            uint64_t v7 = cmsBeginInterruptionGuts(a1, 0, a3);
          }
          if (v10) {
            CFRelease(v10);
          }
        }
        else
        {
          uint64_t v7 = cmsBeginInterruptionGuts(a1, 0, a3);
        }
        if (v7) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      return 4294954308;
    }
  }
  else
  {
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954315;
  }
  return v7;
}

uint64_t CMSUtility_IsAllowedToStartPlaying(void *a1)
{
  if (MX_CoreServices_GetDeviceManagementPolicyForBundleID((void *)[a1 displayID])
    && !CMSMUtility_IsCarPlaySessionPresent())
  {
    if (dword_1E9359ED0) {
      goto LABEL_23;
    }
    return 0;
  }
  if ([a1 applicationState] == 8) {
    return 1;
  }
  if (![a1 applicationState]) {
    return 1;
  }
  ApplicationStateForSessiouint64_t n = CMSUtility_GetApplicationStateForSession(a1);
  CMSessionMgrSetApplicationStateFromPID(objc_msgSend((id)objc_msgSend(a1, "clientPID"), "intValue"), ApplicationStateForSession);
  if ([a1 applicationState] == 8 || !objc_msgSend(a1, "applicationState")) {
    return 1;
  }
  if ([a1 applicationState] != 4)
  {
    if (dword_1E9359ED0) {
      goto LABEL_23;
    }
    return 0;
  }
  if (!CMSUtility_HasBackgroundEntitlement(a1) && !CMSUtility_IsReplayKitExtension(a1))
  {
    if (dword_1E9359ED0) {
      goto LABEL_23;
    }
    return 0;
  }
  if ([a1 stopsWhenDeviceLocks])
  {
    if (dword_1E9359ED0) {
      goto LABEL_23;
    }
    return 0;
  }
  if (![a1 mixesWithEveryone]
    || cmsutility_hasAssertionsToStartMixablePlayback(a1))
  {
    return 1;
  }
  if (dword_1E9359ED0)
  {
LABEL_23:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t MX_CoreServices_GetDeviceManagementPolicyForBundleID(void *key)
{
  valuePtr[22] = *MEMORY[0x1E4F143B8];
  valuePtr[0] = 0;
  if (key && gCoreServicesIsInitialized)
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)gDeviceManagementPolicyCache, key))
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)gDeviceManagementPolicyCache, key);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberLongType, valuePtr);
        if (dword_1E9359ED0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    else
    {
      valuePtr[0] = objc_msgSend((id)objc_msgSend((id)gLSApplicationProxyClass, "applicationProxyForIdentifier:", key), "deviceManagementPolicy");
      cmsmLSUpdateDeviceManagementCache(valuePtr[0]);
    }
  }
  return valuePtr[0];
}

uint64_t CMSUtility_HasEntitlementForInterruptions(void *a1, __SecTask *a2)
{
  if ([a1 clientPriority] != 10) {
    return 1;
  }
  if (a2)
  {
    CFTypeRef v3 = SecTaskCopyValueForEntitlement(a2, @"com.apple.private.coremedia.interruptions.phonecallpriority.allow", 0);
    if (FigCFEqual())
    {
      if (!dword_1E9359ED0)
      {
        uint64_t v5 = 1;
        if (!v3) {
          return v5;
        }
        goto LABEL_12;
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t v5 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v3) {
LABEL_12:
      }
        CFRelease(v3);
    }
    else
    {
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v5 = 0;
      if (v3) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  return v5;
}

uint64_t _VAEndpointManager_CopyPropertyForAudioDevice(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, int *a5, CFNumberRef *a6)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 4294950586;
  if (a2 && a4 && a6)
  {
    *a6 = 0;
    if (CFEqual(a2, @"VAEM_Stream0"))
    {
      inAddress.AudioObjectPropertySelector mSelector = 0;
      uint64_t Stream0 = vaemGetStream0(a4, *a5, &inAddress);
LABEL_8:
      uint64_t v10 = Stream0;
      CFNumberRef v12 = MXCFNumberCreateFromSInt64(inAddress.mSelector);
LABEL_9:
      *a6 = v12;
      return v10;
    }
    if (CFEqual(a2, @"VAEM_DeviceFormatID"))
    {
      inAddress.AudioObjectPropertySelector mSelector = 0;
      vaemGetDeviceFormatID(a4, *a5, &inAddress);
      goto LABEL_8;
    }
    if (CFEqual(a2, @"VAEM_DeviceVolume"))
    {
      *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F757470766F6C6DLL;
      inAddress.mElement = 0;
      UInt32 ioDataSize = 4;
      float outData = 0.0;
      AudioObjectGetPropertyData(a4, &inAddress, 0, 0, &ioDataSize, &outData);
      float CurrentLatencyForVADIDAndScope = outData;
LABEL_13:
      CFNumberRef v12 = MXCFNumberCreateFromFloat32(CurrentLatencyForVADIDAndScope);
LABEL_14:
      uint64_t v10 = 0;
      goto LABEL_9;
    }
    if (CFEqual(a2, @"VAEM_DecibelEquivalentInVAD"))
    {
      inAddress.AudioObjectPropertySelector mSelector = *a5;
      uint64_t v10 = vaemConvertToDecibelInVAD(a4, &inAddress);
      CFNumberRef v12 = MXCFNumberCreateFromFloat32(*(float *)&inAddress.mSelector);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"VAEM_DeviceSampleRate"))
    {
      double SampleRateForDevice = vaemGetSampleRateForDevice(a4);
      CFNumberRef v12 = MXCFNumberCreateFromFloat64(SampleRateForDevice);
      goto LABEL_14;
    }
    if (CFEqual(a2, @"VAEM_DeviceFormat"))
    {
      *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0;
      vaemCopyDeviceFormat(a4, *a5, (CFTypeRef *)&inAddress);
    }
    else
    {
      if (!CFEqual(a2, @"VAEM_AudioClockDevice"))
      {
        if (CFEqual(a2, @"VAEM_DetailedActiveAudioRoute"))
        {
          CFNumberRef v12 = [+[MXAdditiveRoutingManager sharedInstance] copyDetailedRouteDescription:a4];
          goto LABEL_14;
        }
        if (CFEqual(a2, @"VAEM_CurrentInputLatency"))
        {
          uint64_t v17 = a4;
          int v18 = 1;
        }
        else
        {
          if (!CFEqual(a2, @"VAEM_CurrentOutputLatency")) {
            return 0;
          }
          uint64_t v17 = a4;
          int v18 = 0;
        }
        float CurrentLatencyForVADIDAndScope = vaemGetCurrentLatencyForVADIDAndScope(v17, v18);
        goto LABEL_13;
      }
      *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0;
      uint64_t v16 = vaemCopyClockDeviceForAudioDevice(a4, (__CFString **)&inAddress);
    }
    uint64_t v10 = v16;
    *a6 = *(CFNumberRef *)&inAddress.mSelector;
  }
  return v10;
}

float vaemGetCurrentLatencyForVADIDAndScope(uint64_t a1, int a2)
{
  v6[24] = *(double *)MEMORY[0x1E4F143B8];
  v6[0] = 0.0;
  if (off_1E9359B60)
  {
    uint64_t VADNameForVADID = CMSMUtility_GetVADNameForVADID(a1);
    off_1E9359B60(VADNameForVADID, a2 == 1, v6);
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return v6[0];
}

CFNumberRef MXCFNumberCreateFromFloat32(float a1)
{
  float valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
}

void __FigRouteDiscoveryManagerActivityMonitorEnsureStarted_block_invoke()
{
  state64[16] = *MEMORY[0x1E4F143B8];
  if (activityLevelNotifyToken != -1)
  {
    state64[0] = 0;
    notify_get_state(activityLevelNotifyToken, state64);
    unsigned __int8 v0 = state64[0];
    if (dword_1E9359D80)
    {
      int v25 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v0 == 3)
    {
      if (discoverManager_getSharedManager_onceToken != -1) {
        dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
      }
      uint64_t v2 = qword_1E93591B0;
      if (qword_1E93591B0) {
        uint64_t v3 = (uint64_t)algn_1E93592C8;
      }
      else {
        uint64_t v3 = 288;
      }
      if (!*(void *)v3)
      {
        if (dword_1E9359D80)
        {
          int v25 = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v9 = 8;
        if (v2) {
          uint64_t v9 = (uint64_t)&qword_1E93591B0;
        }
        *(void *)uint64_t v3 = FigRoutingManagerCreateOneShotTimer(*(NSObject **)v9, 5.0, (uint64_t)&__block_literal_global_74, 0, 0);
        goto LABEL_35;
      }
      if (!dword_1E9359D80) {
        goto LABEL_34;
      }
    }
    else
    {
      if (v0 < 4u || currentActivityLevel != 3) {
        goto LABEL_35;
      }
      if (discoverManager_getSharedManager_onceToken != -1) {
        dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
      }
      uint64_t v5 = 288;
      if (qword_1E93591B0) {
        uint64_t v5 = (uint64_t)algn_1E93592C8;
      }
      if (!*(void *)v5)
      {
        if (dword_1E9359D80)
        {
          int v25 = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          if (discoverManager_getSharedManager_onceToken != -1) {
            dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
          }
        }
        CFIndex v11 = 0;
        if (qword_1E93591B0) {
          uint64_t v12 = (uint64_t)&qword_1E93592C0;
        }
        else {
          uint64_t v12 = 280;
        }
        uint64_t v22 = *MEMORY[0x1E4F1CF80];
        while (1)
        {
          CFArrayRef Count = *(const __CFArray **)v12;
          if (*(void *)v12) {
            CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
          }
          if (v11 >= (uint64_t)Count) {
            break;
          }
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v12, v11);
          uint64_t v15 = discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
          if (v15)
          {
            uint64_t v16 = (const void *)v15;
            *(void *)os_log_type_t type = 0;
            uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v17) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = 0;
            }
            BOOL v19 = *(void (**)(const void *, __CFString *, uint64_t, os_log_type_t *))(v18 + 48);
            if (v19) {
              v19(v16, @"DiscoveryMode", v22, type);
            }
            if (FigCFEqual())
            {
              if (dword_1E9359D80)
              {
                double v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigRouteDiscovererSetDiscoveryModeDetailedOnDiscoverer();
              FigRouteDiscoveryManagerUpdateDiscoveryMode();
              NotificationQueue = FigRouteDiscoveryManagerGetNotificationQueue();
              v24[0] = MEMORY[0x1E4F143A8];
              v24[1] = 3221225472;
              v24[2] = __figRouteDiscoveryManager_setDiscoveryModeDetailedOnCachedDiscoverers_block_invoke;
              v24[3] = &__block_descriptor_40_e5_v8__0l;
              v24[4] = v16;
              MXDispatchAsync((uint64_t)"figRouteDiscoveryManager_setDiscoveryModeDetailedOnCachedDiscoverers", (uint64_t)"FigRouteDiscoveryManager.m", 1201, 0, 0, NotificationQueue, (uint64_t)v24);
            }
            if (*(void *)type) {
              CFRelease(*(CFTypeRef *)type);
            }
            CFRelease(v16);
          }
          ++v11;
        }
        goto LABEL_35;
      }
      if (!dword_1E9359D80
        || (uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type(),
            os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT),
            fig_log_call_emit_and_clean_up_after_send_and_compose(),
            !dword_1E9359D80))
      {
LABEL_34:
        figRouteDiscoveryManager_stopTimerForActivityMonitoring(0);
LABEL_35:
        currentActivityLevel = v0;
        return;
      }
    }
    uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_34;
  }
}

__CFString *FSMDebug_GetFigStarkModeEntityString(unsigned int a1)
{
  if (a1 > 2) {
    return @"***Unknown***";
  }
  else {
    return off_1E57C5790[a1];
  }
}

__CFString *FSMDebug_GetFigStarkModeConstraintString(int a1)
{
  if (a1 > 499)
  {
    if (a1 != 500)
    {
      if (a1 == 1000) {
        return @"Never";
      }
      return @"***Unknown***";
    }
    return @"UserInitiated";
  }
  else
  {
    if (a1)
    {
      if (a1 == 100) {
        return @"Anytime";
      }
      return @"***Unknown***";
    }
    return @"N/A";
  }
}

CFStringRef FSMDebug_CopyFigStarkModeBorrowIDString(uint64_t a1)
{
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) != 0x16) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"N/A", 0);
  }
  uint64_t v1 = *(void *)(a1 + 8);
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v1) {
    return CFStringCreateWithFormat(v2, 0, @"\"%@\"", v1);
  }
  else {
    return CFStringCreateWithFormat(v2, 0, @"NULL", 0);
  }
}

__CFString *FSMDebug_GetFigStarkModeTransferTypeString(int a1)
{
  switch(a1)
  {
    case 20:
      BOOL result = @"Take";
      break;
    case 21:
      BOOL result = @"Untake";
      break;
    case 22:
      BOOL result = @"Borrow";
      break;
    case 23:
      BOOL result = @"Unborrow";
      break;
    default:
      if (a1) {
        BOOL result = @"***Unknown***";
      }
      else {
        BOOL result = @"N/A";
      }
      break;
  }
  return result;
}

__CFString *FSMDebug_GetFigStarkModeTransferPriorityString(int a1)
{
  uint64_t v1 = @"UserInitiated";
  CFAllocatorRef v2 = @"***Unknown***";
  if (a1 == 100) {
    CFAllocatorRef v2 = @"NiceToHave";
  }
  if (a1 != 500) {
    uint64_t v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return @"N/A";
  }
}

__CFString *FSMDebug_GetFigStarkModeSpeechModeRequestString(int a1)
{
  if (a1 > 9)
  {
    if (a1 != 10)
    {
      if (a1 == 11) {
        return @"RecognizingSpeech";
      }
      return @"***Unknown***";
    }
    return @"Speaking";
  }
  else
  {
    if (a1 != -1)
    {
      if (!a1) {
        return @"N/A";
      }
      return @"***Unknown***";
    }
    return @"Neither";
  }
}

__CFString *FSMDebug_GetFigStarkModeTriStateString(int a1)
{
  if ((a1 + 1) > 2) {
    return @"***Unknown***";
  }
  else {
    return off_1E57C57A8[a1 + 1];
  }
}

__CFString *FSMDebug_CopyPrettyPrintStringForStarkModeState(int *a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v3 = Mutable;
  if (a1)
  {
    uint64_t v4 = *a1;
    if (v4 > 2) {
      uint64_t v5 = @"***Unknown***";
    }
    else {
      uint64_t v5 = off_1E57C5790[v4];
    }
    uint64_t v6 = a1[1];
    if (v6 > 2) {
      uint64_t v7 = @"***Unknown***";
    }
    else {
      uint64_t v7 = off_1E57C5790[v6];
    }
    uint64_t v8 = a1[2];
    if (v8 > 2) {
      uint64_t v9 = @"***Unknown***";
    }
    else {
      uint64_t v9 = off_1E57C5790[v8];
    }
    uint64_t v10 = a1[3];
    if (v10 > 2) {
      CFIndex v11 = @"***Unknown***";
    }
    else {
      CFIndex v11 = off_1E57C5790[v10];
    }
    uint64_t v12 = a1[4];
    if (v12 > 2) {
      BOOL v13 = @"***Unknown***";
    }
    else {
      BOOL v13 = off_1E57C5790[v12];
    }
    int v14 = a1[5];
    if (v14)
    {
      if (v14 == 11)
      {
        uint64_t v15 = @"RecognizingSpeech";
      }
      else if (v14 == 10)
      {
        uint64_t v15 = @"Speaking";
      }
      else
      {
        uint64_t v15 = @"***Unknown***";
      }
    }
    else
    {
      uint64_t v15 = @"N/A";
    }
    uint64_t v16 = a1[6];
    if (v16 > 2) {
      uint64_t v17 = @"***Unknown***";
    }
    else {
      uint64_t v17 = off_1E57C5790[v16];
    }
    uint64_t v18 = a1[7];
    if (v18 > 2) {
      BOOL v19 = @"***Unknown***";
    }
    else {
      BOOL v19 = off_1E57C5790[v18];
    }
    CFStringAppendFormat(Mutable, 0, @"\n\t Mode: \n\t ScreenEntity = %@ \n\t ScreenOwnerEntity = %@ \n\t MainAudioEntity = %@ \n\t MainAudioOwnerEntity = %@ \n\t\t SpeechEntity =  %@ \n\t\t SpeechMode = %@ \n\t PhoneCallEntity = %@ \n\t TurnByTurnEntity = %@", v5, v7, v9, v11, v13, v15, v17, v19);
  }
  return v3;
}

__CFString *FSMDebug_CopyPrettyPrintStringForResourceChangeRequest(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v3 = Mutable;
  if (a1)
  {
    switch(*(_DWORD *)a1)
    {
      case 0x14:
        int v4 = *(_DWORD *)(a1 + 4);
        if (v4)
        {
          if (v4 == 500)
          {
            uint64_t v5 = @"UserInitiated";
          }
          else if (v4 == 100)
          {
            uint64_t v5 = @"NiceToHave";
          }
          else
          {
            uint64_t v5 = @"***Unknown***";
          }
        }
        else
        {
          uint64_t v5 = @"N/A";
        }
        int v19 = *(_DWORD *)(a1 + 16);
        if (v19 > 499)
        {
          if (v19 == 500)
          {
            double v20 = @"UserInitiated";
            goto LABEL_58;
          }
          if (v19 == 1000)
          {
            double v20 = @"Never";
            goto LABEL_58;
          }
        }
        else
        {
          if (!v19)
          {
            double v20 = @"N/A";
            goto LABEL_58;
          }
          if (v19 == 100)
          {
            double v20 = @"Anytime";
            goto LABEL_58;
          }
        }
        double v20 = @"***Unknown***";
LABEL_58:
        int v21 = *(_DWORD *)(a1 + 20);
        if (v21 > 499)
        {
          if (v21 == 500)
          {
            uint64_t v22 = @"UserInitiated";
            goto LABEL_68;
          }
          if (v21 == 1000)
          {
            uint64_t v22 = @"Never";
            goto LABEL_68;
          }
        }
        else
        {
          if (!v21)
          {
            uint64_t v22 = @"N/A";
            goto LABEL_68;
          }
          if (v21 == 100)
          {
            uint64_t v22 = @"Anytime";
            goto LABEL_68;
          }
        }
        uint64_t v22 = @"***Unknown***";
LABEL_68:
        CFStringAppendFormat(Mutable, 0, @"\n\t\t ResourceChangeRequest: \n\t\t Type = %@ \n\t\t Priority = %@ \n\t\t\t TakeConstraint =  %@ \n\t\t\t BorrowConstraint = %@ \n", @"Take", v5, v20, v22);
        return v3;
      case 0x15:
        uint64_t v6 = @"Untake";
        goto LABEL_11;
      case 0x16:
        int v11 = *(_DWORD *)(a1 + 4);
        if (v11)
        {
          if (v11 == 500)
          {
            uint64_t v12 = @"UserInitiated";
          }
          else if (v11 == 100)
          {
            uint64_t v12 = @"NiceToHave";
          }
          else
          {
            uint64_t v12 = @"***Unknown***";
          }
        }
        else
        {
          uint64_t v12 = @"N/A";
        }
        int v17 = *(_DWORD *)(a1 + 16);
        if (v17 > 499)
        {
          if (v17 == 500)
          {
            uint64_t v18 = @"UserInitiated";
            goto LABEL_54;
          }
          if (v17 == 1000)
          {
            uint64_t v18 = @"Never";
            goto LABEL_54;
          }
        }
        else
        {
          if (!v17)
          {
            uint64_t v18 = @"N/A";
            goto LABEL_54;
          }
          if (v17 == 100)
          {
            uint64_t v18 = @"Anytime";
            goto LABEL_54;
          }
        }
        uint64_t v18 = @"***Unknown***";
LABEL_54:
        CFStringAppendFormat(Mutable, 0, @"\n\t\t ResourceChangeRequest: \n\t\t Type = %@ \n\t\t BorrowID = %@ \n\t\t Priority = %@ \n\t\t\t UnborrowConstraint = %@ \n", @"Borrow", *(void *)(a1 + 8), v12, v18);
        break;
      case 0x17:
        int v13 = *(_DWORD *)(a1 + 4);
        int v14 = @"UserInitiated";
        uint64_t v15 = @"***Unknown***";
        if (v13 == 100) {
          uint64_t v15 = @"NiceToHave";
        }
        if (v13 != 500) {
          int v14 = v15;
        }
        if (v13) {
          uint64_t v16 = v14;
        }
        else {
          uint64_t v16 = @"N/A";
        }
        CFStringAppendFormat(Mutable, 0, @"\n\t\t ResourceChangeRequest: \n\t\t Type = %@ \n\t\t BorrowID = %@ \n\t\t Priority = %@ \n", @"Unborrow", *(void *)(a1 + 8), v16);
        return v3;
      default:
        if (*(_DWORD *)a1) {
          uint64_t v6 = @"***Unknown***";
        }
        else {
          uint64_t v6 = @"N/A";
        }
LABEL_11:
        int v7 = *(_DWORD *)(a1 + 4);
        uint64_t v8 = @"UserInitiated";
        uint64_t v9 = @"***Unknown***";
        if (v7 == 100) {
          uint64_t v9 = @"NiceToHave";
        }
        if (v7 != 500) {
          uint64_t v8 = v9;
        }
        if (v7) {
          uint64_t v10 = v8;
        }
        else {
          uint64_t v10 = @"N/A";
        }
        CFStringAppendFormat(Mutable, 0, @"\n\t\t ResourceChangeRequest: \n\t\t Type = %@ \n\t\t Priority = %@ \n", v6, v10);
        return v3;
    }
  }
  return v3;
}

__CFString *FSMDebug_CopyPrettyPrintStringForModeChangeRequest(int *a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!a1) {
    return Mutable;
  }
  uint64_t v3 = FSMDebug_CopyPrettyPrintStringForResourceChangeRequest((uint64_t)(a1 + 2));
  int v4 = FSMDebug_CopyPrettyPrintStringForResourceChangeRequest((uint64_t)(a1 + 8));
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  if (v6 > 2) {
    int v7 = @"***Unknown***";
  }
  else {
    int v7 = off_1E57C5790[v6];
  }
  uint64_t v8 = a1[1];
  if (v8 > 2) {
    uint64_t v9 = @"***Unknown***";
  }
  else {
    uint64_t v9 = off_1E57C5790[v8];
  }
  int v10 = a1[14];
  if (v10 > 9)
  {
    if (v10 == 10)
    {
      int v11 = @"Speaking";
      goto LABEL_18;
    }
    if (v10 == 11)
    {
      int v11 = @"RecognizingSpeech";
      goto LABEL_18;
    }
LABEL_15:
    int v11 = @"***Unknown***";
    goto LABEL_18;
  }
  if (v10 == -1)
  {
    int v11 = @"Neither";
    goto LABEL_18;
  }
  if (v10) {
    goto LABEL_15;
  }
  int v11 = @"N/A";
LABEL_18:
  unsigned int v12 = a1[15] + 1;
  if (v12 > 2) {
    int v13 = @"***Unknown***";
  }
  else {
    int v13 = off_1E57C57A8[v12];
  }
  unsigned int v14 = a1[16] + 1;
  if (v14 > 2) {
    uint64_t v15 = @"***Unknown***";
  }
  else {
    uint64_t v15 = off_1E57C57A8[v14];
  }
  CFStringAppendFormat(Mutable, 0, @"\n\t ModeChangeRequest: \n\t Requestor = Screen: %@       MainAudio: %@\n\t Screeuint64_t n = %@ \n\t MainAudio =  %@ \n\t SpeechMode = %@ \n\t IsOnPhoneCall = %@ \n\t IsDoingTurnByTuruint64_t n = %@", v7, v9, v3, v4, v11, v13, v15);
  if (v3) {
    CFRelease(v3);
  }
  if (v5) {
    CFRelease(v5);
  }
  return Mutable;
}

void sub_194D6D0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194D6D264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194D6D4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_194D6DC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_194D6E2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_194D6E810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_194D6E8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

uint64_t FigRouteDiscoveryManagerShouldRegisterEndpointManager(uint64_t a1)
{
  CFAllocatorRef v2 = (void *)MXCFPreferencesCopyPreference(@"EndpointManagerDenyList");
  uint64_t v3 = [v2 containsObject:a1] ^ 1;

  return v3;
}

uint64_t FigRouteDiscoveryManagerGetNotificationQueue()
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  uint64_t v0 = (uint64_t)&qword_1E93591B8;
  if (!qword_1E93591B0) {
    uint64_t v0 = 16;
  }
  return *(void *)v0;
}

uint64_t FigRouteDiscoveryManagerCopyRoutePresentForType(uint64_t a1, unsigned int a2, void *a3)
{
  if (a3)
  {
    if (discoverManager_getSharedManager_onceToken != -1) {
      dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
    }
    uint64_t v5 = &discoverManager_getSharedManager_discoveryState;
    if (!qword_1E93591B0) {
      uint64_t v5 = 0;
    }
    if (*v5)
    {
      uint64_t v6 = 0;
      uint64_t v10 = 0;
      int v11 = &v10;
      uint64_t v12 = 0x2020000000;
      uint64_t v13 = *MEMORY[0x1E4F1CFC8];
      if (a2 <= 8) {
        uint64_t v6 = qword_194EDE5C8[a2];
      }
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3221225472;
      v9[2] = __FigRouteDiscoveryManagerCopyRoutePresentForType_block_invoke;
      void v9[3] = &unk_1E57C5878;
      v9[5] = v5;
      void v9[6] = v6;
      v9[4] = &v10;
      FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v9);
      int v7 = v11;
      *a3 = v11[3];
      v7[3] = 0;
      _Block_object_dispose(&v10, 8);
    }
  }
  return 0;
}

void sub_194D6F9D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void FigRouteDiscoveryManagerAddToCachedDiscoverers()
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  CFIndex v0 = 0;
  int v1 = 0;
  if (qword_1E93591B0) {
    uint64_t v2 = (uint64_t)&qword_1E93592C0;
  }
  else {
    uint64_t v2 = 280;
  }
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)v2;
    if (*(void *)v2) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v0 >= (uint64_t)Count) {
      break;
    }
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v2, v0);
    uint64_t v5 = (const void *)discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
    if (FigCFEqual())
    {
      if (dword_1E9359D80)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        int v1 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        int v1 = 1;
      }
    }
    if (v5) {
      CFRelease(v5);
    }
    ++v0;
  }
  if (!v1)
  {
    if (dword_1E9359D80)
    {
      int v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v8 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    CFArrayAppendValue(*(CFMutableArrayRef *)v2, v8);
    if (v8) {
      CFRelease(v8);
    }
  }
}

uint64_t FigRouteDiscoveryManagerStart()
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  CFIndex v0 = discoverManager_getSharedManager_discoveryState;
  uint64_t v1 = (uint64_t)&qword_1E93591B0;
  if (!qword_1E93591B0)
  {
    CFIndex v0 = 0;
    uint64_t v1 = 8;
  }
  uint64_t v2 = *(NSObject **)v1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = __FigRouteDiscoveryManagerStart_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  void v5[4] = v0;
  MXDispatchSync((uint64_t)"FigRouteDiscoveryManagerStart", (uint64_t)"FigRouteDiscoveryManager.m", 2454, 0, 0, v2, (uint64_t)v5);
  uint64_t result = MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled();
  if (result)
  {
    if (discoverManager_getSharedManager_onceToken != -1) {
      dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
    }
    uint64_t v4 = (uint64_t)&qword_1E93591B0;
    if (!qword_1E93591B0) {
      uint64_t v4 = 8;
    }
    return notify_register_dispatch("com.apple.sharing.activity-level-changed", &activityLevelNotifyToken, *(dispatch_queue_t *)v4, &__block_literal_global_60);
  }
  return result;
}

void __FigRouteDiscoveryManagerStart_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)uint64_t v2 = 1;
  CFArrayRef v3 = *(const __CFArray **)(v2 + 264);
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 32) + 264), i);
        discoveryManager_registerEndpointManager(ValueAtIndex);
      }
    }
  }
  uint64_t v8 = *(const void **)(*(void *)(a1 + 32) + 264);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(*(void *)(a1 + 32) + 264) = 0;
  }
}

void discoveryManager_registerEndpointManager(const void *a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  if (qword_1E93591B0) {
    uint64_t v2 = discoverManager_getSharedManager_discoveryState;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t value = 0;
  uint64_t v3 = *MEMORY[0x1E4F20620];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, void **))(v7 + 48);
  if (v8) {
    int v9 = v8(CMBaseObject, v3, v4, &value);
  }
  else {
    int v9 = -12782;
  }
  if (!a1)
  {
    BOOL v38 = MXGetAssertionLog();
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_61;
    }
    *(_DWORD *)uint64_t v46 = 136446722;
    *(void *)&v46[4] = "-FigRouteDiscoveryManager-";
    __int16 v47 = 2082;
    int v48 = "discoveryManager_registerEndpointManager";
    __int16 v49 = 1024;
    int v50 = 2344;
LABEL_70:
    _os_log_impl(&dword_194CDF000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Something is seriously wrong. Please file a radar to MediaExperience (New Bugs) | All.", v46, 0x1Cu);
    goto LABEL_61;
  }
  uint64_t v10 = value;
  if (!value)
  {
    BOOL v38 = MXGetAssertionLog();
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_61;
    }
    *(_DWORD *)uint64_t v46 = 136446722;
    *(void *)&v46[4] = "-FigRouteDiscoveryManager-";
    __int16 v47 = 2082;
    int v48 = "discoveryManager_registerEndpointManager";
    __int16 v49 = 1024;
    int v50 = 2345;
    goto LABEL_70;
  }
  if (v9)
  {
    BOOL v38 = MXGetAssertionLog();
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_61;
    }
    *(_DWORD *)uint64_t v46 = 136446722;
    *(void *)&v46[4] = "-FigRouteDiscoveryManager-";
    __int16 v47 = 2082;
    int v48 = "discoveryManager_registerEndpointManager";
    __int16 v49 = 1024;
    int v50 = 2346;
    goto LABEL_70;
  }
  int v11 = (void *)MXCFPreferencesCopyPreference(@"EndpointManagerDenyList");
  int v12 = [v11 containsObject:v10];

  if (v12)
  {
    if (dword_1E9359D80)
    {
      int v43 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    uint64_t v39 = v3;
    if (dword_1E9359D80)
    {
      int v43 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      unsigned int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    unsigned int v40 = a1;
    CFDictionarySetValue(Mutable, @"EndpointManager_RefKey", a1);
    CFDictionarySetValue(Mutable, @"EndpointManager_TypeKey", value);
    uint64_t v18 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
    int v19 = (const void *)*MEMORY[0x1E4F205D0];
    uint64_t v20 = 7;
    do
    {
      int v21 = CFDictionaryCreateMutable(v4, 0, v15, v16);
      CFDictionarySetValue(v21, @"Requestor_DiscoveryMode", v19);
      CFArrayAppendValue(v18, v21);
      if (v21) {
        CFRelease(v21);
      }
      --v20;
    }
    while (v20);
    CFDictionarySetValue(Mutable, @"EndpointManager_RequestedDiscoveryModesKey", v18);
    if (v18) {
      CFRelease(v18);
    }
    CFDictionarySetValue(Mutable, @"EndpointFeature_CurrentDiscoveryModeKey", v19);
    *(void *)uint64_t v46 = 0;
    uint64_t v22 = FigEndpointManagerGetCMBaseObject();
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    int v25 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, unsigned char *))(v24 + 48);
    if (v25) {
      v25(v22, v39, v4, v46);
    }
    if (!FigCFEqual() && !FigCFEqual())
    {
      CFTypeRef cf = 0;
      uint64_t v26 = FigEndpointManagerGetCMBaseObject();
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v27) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      int v29 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v28 + 48);
      if (v29) {
        v29(v26, *MEMORY[0x1E4F20630], v4, &cf);
      }
      FigCFNumberGetUInt64();
      if (cf) {
        CFRelease(cf);
      }
    }
    if (*(void *)v46) {
      CFRelease(*(CFTypeRef *)v46);
    }
    uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
    CFDictionarySetValue(Mutable, @"EndpointManager_SupportedEndpointFeaturesKey", UInt64);
    if (UInt64) {
      CFRelease(UInt64);
    }
    *(void *)uint64_t v46 = 0;
    uint64_t v31 = FigEndpointManagerGetCMBaseObject();
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    unsigned int v34 = *(void (**)(uint64_t, void, const __CFAllocator *, unsigned char *))(v33 + 48);
    if (v34) {
      v34(v31, *MEMORY[0x1E4F20628], v4, v46);
    }
    FigCFNumberGetUInt64();
    if (*(void *)v46) {
      CFRelease(*(CFTypeRef *)v46);
    }
    unsigned int v35 = (const void *)FigCFNumberCreateUInt64();
    CFDictionarySetValue(Mutable, @"EndpointManager_SupportedDiscoveryModesKey", v35);
    if (v35) {
      CFRelease(v35);
    }
    v41[0] = MEMORY[0x1E4F143A8];
    v41[1] = 3221225472;
    v41[2] = __discoveryManager_registerEndpointManager_block_invoke;
    v41[3] = &__block_descriptor_56_e5_v8__0l;
    v41[4] = value;
    v41[5] = v2;
    v41[6] = Mutable;
    FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v41);
    [+[MXEndpointDescriptorCache sharedInstance] registerEndpointManagerForCaching:v40];
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    for (uint64_t i = 32; i != 248; i += 24)
    {
      long long v37 = *(const void **)&v2[i];
      *(void *)&v2[i] = v19;
      if (v19) {
        CFRetain(v19);
      }
      if (v37) {
        CFRelease(v37);
      }
    }
    FigRouteDiscoveryManagerUpdateDiscoveryMode();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
LABEL_61:
  if (value) {
    CFRelease(value);
  }
}

uint64_t FigRouteDiscoveryManagerRegisterEndpointManager(CFTypeRef cf)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (discoverManager_getSharedManager_onceToken == -1)
  {
    if (cf) {
      goto LABEL_3;
    }
  }
  else
  {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
    if (cf)
    {
LABEL_3:
      uint64_t v2 = qword_1E93591B0;
      if (discoverManager_getSharedManager_discoveryState[0])
      {
        CFRetain(cf);
        CFTypeRef cfa = 0;
        uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
        uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v4) {
          uint64_t v5 = v4;
        }
        else {
          uint64_t v5 = 0;
        }
        uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
        if (v8) {
          v8(CMBaseObject, *MEMORY[0x1E4F20620], *MEMORY[0x1E4F1CF80], &cfa);
        }
        int v9 = FigCFEqual();
        uint64_t v10 = (uint64_t)&qword_1E93591B0;
        if (!v2) {
          uint64_t v10 = 8;
        }
        int v11 = *(NSObject **)v10;
        if (v9)
        {
          v15[0] = MEMORY[0x1E4F143A8];
          v15[1] = 3221225472;
          v15[2] = __FigRouteDiscoveryManagerRegisterEndpointManager_block_invoke;
          v15[3] = &__block_descriptor_40_e5_v8__0l;
          v15[4] = cf;
          MXDispatchAsyncAndWait((uint64_t)"FigRouteDiscoveryManagerRegisterEndpointManager", (uint64_t)"FigRouteDiscoveryManager.m", 2509, 0, 0, v11, (uint64_t)v15);
          CFRelease(cf);
        }
        else
        {
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 3221225472;
          v14[2] = __FigRouteDiscoveryManagerRegisterEndpointManager_block_invoke_2;
          v14[3] = &__block_descriptor_40_e5_v8__0l;
          v14[4] = cf;
          MXDispatchAsync((uint64_t)"FigRouteDiscoveryManagerRegisterEndpointManager", (uint64_t)"FigRouteDiscoveryManager.m", 2518, 0, 0, v11, (uint64_t)v14);
        }
        if (cfa) {
          CFRelease(cfa);
        }
      }
      else
      {
        if (qword_1E93591B0) {
          uint64_t v6 = (uint64_t)&qword_1E93592B0;
        }
        else {
          uint64_t v6 = 264;
        }
        CFMutableDictionaryRef Mutable = *(__CFArray **)v6;
        if (!*(void *)v6)
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
          *(void *)uint64_t v6 = Mutable;
        }
        CFArrayAppendValue(Mutable, cf);
      }
      return 0;
    }
  }
  uint64_t v13 = MXGetAssertionLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v18 = "-FigRouteDiscoveryManager-";
    __int16 v19 = 2082;
    uint64_t v20 = "FigRouteDiscoveryManagerRegisterEndpointManager";
    __int16 v21 = 1024;
    int v22 = 2482;
    _os_log_impl(&dword_194CDF000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s:%i Something is seriously wrong. Please file a radar to MediaExperience (New Bugs) | All.", buf, 0x1Cu);
  }
  return 0;
}

void __FigRouteDiscoveryManagerRegisterEndpointManager_block_invoke(uint64_t a1)
{
}

void __FigRouteDiscoveryManagerRegisterEndpointManager_block_invoke_2(uint64_t a1)
{
  discoveryManager_registerEndpointManager(*(const void **)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void FigRouteDiscoveryManagerInit()
{
  if (dword_1E9359D80)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  if (dword_1E9359D80)
  {
    uint64_t v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1E9359D80)
    {
      uint64_t v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  MXInstallSysdiagnoseBlock(@"DiscovererList", (uint64_t)&__block_literal_global_0);
}

void __FigRouteDiscoveryManagerInit_block_invoke()
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  CFIndex v0 = &discoverManager_getSharedManager_discoveryState;
  uint64_t v1 = (uint64_t)&qword_1E93591B0;
  if (!qword_1E93591B0)
  {
    CFIndex v0 = 0;
    uint64_t v1 = 8;
  }
  uint64_t v2 = *(NSObject **)v1;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __FigRouteDiscoveryManagerInit_block_invoke_2;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  void v3[4] = v0;
  MXDispatchAsync((uint64_t)"FigRouteDiscoveryManagerInit_block_invoke", (uint64_t)"FigRouteDiscoveryManager.m", 2562, 0, 0, v2, (uint64_t)v3);
}

void __FigRouteDiscoveryManagerInit_block_invoke_2(uint64_t a1)
{
}

void FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed()
{
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  CFIndex v0 = &discoverManager_getSharedManager_discoveryState;
  uint64_t v1 = (uint64_t)&qword_1E93591B0;
  if (!qword_1E93591B0)
  {
    CFIndex v0 = 0;
    uint64_t v1 = 8;
  }
  uint64_t v2 = *(NSObject **)v1;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  void v3[4] = v0;
  MXDispatchAsync((uint64_t)"FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed", (uint64_t)"FigRouteDiscoveryManager.m", 2575, 0, 0, v2, (uint64_t)v3);
}

void __FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed_block_invoke(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = __FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed_block_invoke_2;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = *(void *)(a1 + 32);
  FigRouteDiscoveryManagerRunBlockWhileEndpointManagerInfoLockIsLocked((uint64_t)v1);
}

void __FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed_block_invoke_2(uint64_t a1)
{
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(*(void *)(a1 + 32) + 240);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 32) + 240), i);
    CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, @"EndpointManager_RefKey");
    CFDictionaryGetValue(ValueAtIndex, @"EndpointManager_TypeKey");
    if (FigCFEqual())
    {
      CFTypeRef v6 = discoveryManager_copyHighestRequestedDiscoveryModeForEndpointManager(ValueAtIndex, 0);
      if (Value && FigCFEqual())
      {
        if (dword_1E9359D80)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(void (**)(const void *, void, void))(v9 + 8);
        if (v10) {
          v10(Value, *MEMORY[0x1E4F205C0], 0);
        }
      }
      if (v6) {
        CFRelease(v6);
      }
      return;
    }
  }
}

id __discoverManager_getSharedManager_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  if (dword_1E9359D80 < 0x100)
  {
    if (dword_1E9359D80)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    dword_1E9359D80 = 0;
  }
  int IsAVODDiscoveryEnhancementEnabled = MX_FeatureFlags_IsAVODDiscoveryEnhancementEnabled();
  uint64_t v2 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (IsAVODDiscoveryEnhancementEnabled) {
    qword_1E93592C0 = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  }
  discoverManager_getSharedManager_discoveryState[0] = 0;
  qword_1E93592B0 = 0;
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  qword_1E93591B0 = (uint64_t)dispatch_queue_create("com.apple.mediaexperience.DiscoveryManagerSerializationQueue", v3);
  qword_1E93592D0 = 0;
  unk_1E93592D8 = 0;
  if (dword_1E9359D80)
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  qword_1E93591B8 = (uint64_t)dispatch_queue_create("com.apple.mediaexperience.DiscoveryManagerNotificationQueue", v5);
  if (CMSMDeviceState_ItsAHomePod())
  {
    if (!dword_1E9359D80) {
      goto LABEL_15;
    }
    CFTypeRef v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    CMSMDeviceState_AddQueueToWatchDogMonitoring();
  }
  if (dword_1E9359D80)
  {
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_15:
  CFAllocatorRef v8 = *v2;
  uint64_t v9 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  uint64_t v10 = 0;
  qword_1E9359298 = (uint64_t)CFArrayCreateMutable(*v2, 0, MEMORY[0x1E4F1D510]);
  int v11 = (const void *)*MEMORY[0x1E4F205D0];
  do
  {
    *(void *)&discoverManager_getSharedManager_discoveryState[v10 + 24] = CFArrayCreateMutable(v8, 0, v9);
    if (v11) {
      CFTypeRef v12 = CFRetain(v11);
    }
    else {
      CFTypeRef v12 = 0;
    }
    *(void *)&discoverManager_getSharedManager_discoveryState[v10 + 32] = v12;
    v10 += 24;
  }
  while (v10 != 216);
  qword_1E93592A8 = FigSimpleMutexCreate();
  qword_1E93592A0 = FigReentrantMutexCreate();
  qword_1E93592B8 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1C9E8]);
  id result = objc_alloc_init(MEMORY[0x1E4F28BB0]);
  qword_1E93592E0 = (uint64_t)result;
  return result;
}

uint64_t __discoveryManager_shouldSkipAvailableEndpointsQuery_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 24);
  uint64_t result = VTable + 24;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(v8 + 24);
  if (v9)
  {
    uint64_t v10 = *MEMORY[0x1E4F1CF80];
    return v9(v2, 0x1EE5F3668, v10, v1, 0, v3 + 24);
  }
  return result;
}

uint64_t __discoveryManager_iOSCopyAvailableEndpoints_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 24);
  uint64_t result = VTable + 24;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(v8 + 24);
  if (v9)
  {
    uint64_t v10 = *MEMORY[0x1E4F20608];
    uint64_t v11 = *MEMORY[0x1E4F1CF80];
    return v9(v2, v10, v11, v1, 0, v3 + 24);
  }
  return result;
}

uint64_t __discoveryManager_iOSCopyAvailableEndpoints_block_invoke_2(uint64_t a1)
{
  uint64_t result = FigRoutingManagerCopyEndpointWithDeviceID(*(void *)(a1 + 40), 0, *MEMORY[0x1E4F20660], 0);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t __discoveryManager_updateDiscoveryModeForType_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void))(v7 + 8);
  if (v8)
  {
    return v8(v1, v2, 0);
  }
  return result;
}

void __discoveryManager_postNotificationToAllDiscoverers_block_invoke_52(uint64_t a1)
{
  if (MX_FeatureFlags_IsReduceRouteDiscoveryQueueHoppingEnabled())
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 40) + 8);
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = __discoveryManager_postNotificationToAllDiscoverers_block_invoke_2;
    void v4[3] = &unk_1E57C5930;
    void v4[4] = *(void *)(a1 + 32);
    MXDispatchAsyncAndWait((uint64_t)"discoveryManager_postNotificationToAllDiscoverers_block_invoke", (uint64_t)"FigRouteDiscoveryManager.m", 461, 0, 0, v2, (uint64_t)v4);
  }
  else
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v3();
  }
}

void __discoveryManager_registerEndpointManager_block_invoke(uint64_t a1)
{
  int v2 = FigCFEqual();
  uint64_t v3 = *(const void **)(a1 + 48);
  uint64_t v4 = *(__CFArray **)(*(void *)(a1 + 40) + 240);
  if (v2)
  {
    CFArrayInsertValueAtIndex(v4, 0, v3);
  }
  else
  {
    uint64_t v5 = *(const void **)(a1 + 48);
    CFArrayAppendValue(v4, v5);
  }
}

void figRouteDiscoveryManager_stopTimerForActivityMonitoring(int a1)
{
  cf[19] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (discoverManager_getSharedManager_onceToken != -1) {
    dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
  }
  if (qword_1E93591B0) {
    uint64_t v2 = (uint64_t)algn_1E93592C8;
  }
  else {
    uint64_t v2 = 288;
  }
  uint64_t v3 = *(NSObject **)v2;
  if (*(void *)v2)
  {
    if (dword_1E9359D80)
    {
      LODWORD(cf[0]) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v3 = *(NSObject **)v2;
    }
    dispatch_source_cancel(v3);
    if (*(void *)v2)
    {
      dispatch_release(*(dispatch_object_t *)v2);
      *(void *)uint64_t v2 = 0;
    }
  }
  if (a1)
  {
    if (discoverManager_getSharedManager_onceToken != -1) {
      dispatch_once(&discoverManager_getSharedManager_onceToken, &__block_literal_global_21);
    }
    CFIndex v5 = 0;
    if (qword_1E93591B0) {
      uint64_t v6 = (uint64_t)&qword_1E93592C0;
    }
    else {
      uint64_t v6 = 280;
    }
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    while (1)
    {
      CFArrayRef Count = *(const __CFArray **)v6;
      if (*(void *)v6) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (v5 >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v6, v5);
      uint64_t v10 = discoveryManager_copyDiscovererFromWeakRef(ValueAtIndex);
      if (v10)
      {
        uint64_t v11 = (const void *)v10;
        cf[0] = 0;
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        unsigned int v14 = *(void (**)(const void *, __CFString *, uint64_t, CFTypeRef *))(v13 + 48);
        if (v14) {
          v14(v11, @"DiscoveryMode", v7, cf);
        }
        if (FigCFEqual())
        {
          if (dword_1E9359D80)
          {
            uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRouteDiscovererSetDiscoveryModeNoneOnDiscoverer();
          FigRouteDiscoveryManagerUpdateDiscoveryMode();
        }
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        CFRelease(v11);
      }
      ++v5;
    }
  }
  else if (dword_1E9359D80)
  {
    uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void __figRouteDiscoveryManager_startTimerForActivityMonitoring_block_invoke()
{
}

uint64_t __figRouteDiscoveryManager_setDiscoveryModeDetailedOnCachedDiscoverers_block_invoke()
{
  if (dword_1E9359D80)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void sub_194D72C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BiomeStreamsLibraryCore()
{
  if (!BiomeStreamsLibraryCore_frameworkLibrary) {
    BiomeStreamsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return BiomeStreamsLibraryCore_frameworkLibrary;
}

uint64_t __BiomeStreamsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BiomeStreamsLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t BiomeLibraryLibraryCore()
{
  if (!BiomeLibraryLibraryCore_frameworkLibrary) {
    BiomeLibraryLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return BiomeLibraryLibraryCore_frameworkLibrary;
}

uint64_t __BiomeLibraryLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BiomeLibraryLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getBMDeviceSilentModeClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMDeviceSilentMode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getBMDeviceSilentModeClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    __getBMDeviceSilentModeClass_block_invoke_cold_1();
    return (Class)BiomeLibraryLibrary();
  }
  return result;
}

uint64_t BiomeLibraryLibrary()
{
  uint64_t v0 = BiomeLibraryLibraryCore();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void *__getBiomeLibrarySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  Class result = dlsym(v2, "BiomeLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBiomeLibrarySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

CFMutableDictionaryRef FigRoutingContextUtilities_CreateRouteConfigUpdatedFailedPayload(const __CFDictionary *a1, uint64_t a2, int a3, const __CFArray *a4)
{
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v9 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
  if (a4)
  {
    CFIndex Count = CFArrayGetCount(a4);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      CFIndex v12 = 0;
      uint64_t v13 = *MEMORY[0x1E4F20E38];
      do
      {
        uint64_t value = 0;
        CFArrayGetValueAtIndex(a4, v12);
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v15) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = 0;
        }
        int v17 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, void **))(v16 + 48);
        if (v17) {
          v17(CMBaseObject, v13, v7, &value);
        }
        if (value)
        {
          CFArrayAppendValue(v9, value);
          if (value) {
            CFRelease(value);
          }
        }
        ++v12;
      }
      while (v11 != v12);
    }
  }
  if (a1)
  {
    uint64_t v18 = CFDictionaryGetValue(a1, @"clientRouteRequestID");
    if (v18)
    {
      __int16 v19 = CFRetain(v18);
      CFDictionaryGetValue(a1, @"initiator");
      if (v19) {
        goto LABEL_19;
      }
    }
    else
    {
      CFDictionaryGetValue(a1, @"initiator");
    }
  }
  uint64_t v20 = mach_absolute_time();
  __int16 v19 = CFStringCreateWithFormat(v7, 0, @"%d", v20);
LABEL_19:
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  if (a3 == -72276)
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v9) {
    CFRelease(v9);
  }
  return Mutable;
}

void FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(uint64_t a1, const __CFDictionary *a2, CFDictionaryRef theDict)
{
  if (theDict) {
    CFDictionaryGetValue(theDict, @"initiator");
  }
  if (!FigCFEqual() && !FigCFEqual() && !FigCFEqual())
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(a1, a2, @"configUpdateReasonEndedNoop");
    FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(a1, @"currentRouteChanged", 0);
  }
}

void FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(uint64_t a1, const __CFDictionary *a2, __CFString *a3)
{
  if (@"configUpdateReasonEndpointDescriptorChanged" == a3)
  {
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, (CFMutableArrayRef *)&cf);
    CFIndex v5 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf, 0);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext(a1, (uint64_t)v5);
    if (v5) {
      CFRelease(v5);
    }
  }
  CFMutableDictionaryRef RouteConfigUpdatedPayload = routingContextUtilities_createRouteConfigUpdatedPayload(a2);
  FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(a1, @"routeConfigUpdated", (uint64_t)RouteConfigUpdatedPayload);
  if (RouteConfigUpdatedPayload) {
    CFRelease(RouteConfigUpdatedPayload);
  }
}

void FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28)
    {
      v7[0] = 0;
      v7[1] = v7;
      v7[2] = 0x2020000000;
      v7[3] = 0;
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      _OWORD v6[2] = __FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers_block_invoke;
      _OWORD v6[3] = &unk_1E57C60E0;
      v6[4] = v7;
      v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
      void v6[6] = a1;
      void v6[7] = a2;
      void v6[8] = a3;
      MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers", (uint64_t)"FigRoutingManagerContextUtilities.m", 426, 0, 0, qword_1E9358E18, (uint64_t)v6);
      _Block_object_dispose(v7, 8);
    }
  }
}

void sub_194D73560(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(uint64_t a1, CFMutableArrayRef *a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    int v5 = byte_1E9358E28;
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFTypeRef cf = 0;
    uint64_t v2 = FigRoutingManagerContextUtilities_CopyPickedEndpoints(a1, (uint64_t)&cf);
    uint64_t v7 = (uint64_t)&qword_1E9358E18;
    if (!v5) {
      uint64_t v7 = 504;
    }
    uint64_t v8 = *(NSObject **)v7;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints_block_invoke;
    void v11[3] = &__block_descriptor_56_e5_v8__0l;
    if (v5) {
      uint64_t v9 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v9 = 0;
    }
    v11[4] = cf;
    void v11[5] = v9;
    v11[6] = Mutable;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 2841, 0, 0, v8, (uint64_t)v11);
    *a2 = Mutable;
    if (cf) {
      CFRelease(cf);
    }
  }
  return v2;
}

uint64_t FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294949876;
  }
  uint64_t v10 = 0;
  CFIndex v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  uint64_t v5 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v5 = 504;
  }
  uint64_t v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext_block_invoke;
  void v9[3] = &unk_1E57C6180;
  if (!byte_1E9358E28) {
    uint64_t v4 = 0;
  }
  v9[4] = &v10;
  v9[5] = v4;
  void v9[6] = a1;
  void v9[7] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 5279, 0, 0, v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_194D737F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef routingContextUtilities_createRouteConfigUpdatedPayload(const __CFDictionary *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a1)
  {
    CFNumberRef Value = CFDictionaryGetValue(a1, @"clientRouteRequestID");
    if (Value)
    {
      uint64_t v5 = CFRetain(Value);
      CFDictionaryGetValue(a1, @"initiator");
      if (v5) {
        goto LABEL_7;
      }
    }
    else
    {
      CFDictionaryGetValue(a1, @"initiator");
    }
  }
  uint64_t v6 = mach_absolute_time();
  uint64_t v5 = CFStringCreateWithFormat(v2, 0, @"%d", v6);
LABEL_7:
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  if (v5) {
    CFRelease(v5);
  }
  return Mutable;
}

void FigRoutingManagerContextUtilities_PostNotificationAndRouteDescriptorChangeToClientsOfContextWithUUIDAndItsFollowers(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(a1, @"routeDescriptionEvent", (uint64_t)Mutable);
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void _routingContextUtilities_postNotificationToContextAndItsFollowers(uint64_t a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    int v18 = byte_1E9358E28;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    uint64_t v21 = FigCFWeakReferenceHolderCopyReferencedObject();
    CFArrayRef v6 = *(const __CFArray **)(a1 + 88);
    if (v6)
    {
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (CFIndex i = 0; i != v8; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), i);
          if (ValueAtIndex)
          {
            if (_routingContextUtilities_getContextFromWeakRef((uint64_t)ValueAtIndex))
            {
              uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
              if (v11)
              {
                uint64_t v12 = (const void *)v11;
                CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                FigCFDictionarySetValue();
                FigCFDictionarySetValue();
                CFArrayAppendValue(Mutable, v13);
                if (v13) {
                  CFRelease(v13);
                }
                CFRelease(v12);
              }
            }
          }
        }
      }
    }
    if (v21)
    {
      unsigned int v14 = *(const void **)(a1 + 8);
      if (v14) {
        CFTypeRef v15 = CFRetain(v14);
      }
      else {
        CFTypeRef v15 = 0;
      }
      if (a2) {
        CFRetain(a2);
      }
      if (a3) {
        CFRetain(a3);
      }
      if (Mutable) {
        CFRetain(Mutable);
      }
      uint64_t v16 = (uint64_t)&qword_1E9358E20;
      if (!v18) {
        uint64_t v16 = 512;
      }
      int v17 = *(NSObject **)v16;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      CFTypeRef v22[2] = ___routingContextUtilities_postNotificationToContextAndItsFollowers_block_invoke;
      v22[3] = &__block_descriptor_72_e5_v8__0l;
      v22[4] = a2;
      v22[5] = v15;
      v22[6] = a3;
      v22[7] = v21;
      v22[8] = Mutable;
      MXDispatchAsync((uint64_t)"_routingContextUtilities_postNotificationToContextAndItsFollowers", (uint64_t)"FigRoutingManagerContextUtilities.m", 240, 0, 0, v17, (uint64_t)v22);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void FigRoutingManagerContextUtilities_Create(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28)
    {
      v4[0] = MEMORY[0x1E4F143A8];
      v4[1] = 3221225472;
      v4[2] = __FigRoutingManagerContextUtilities_Create_block_invoke;
      void v4[3] = &unk_1E57C6108;
      void v4[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
      v4[6] = a1;
      void v4[4] = a2;
      MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_Create", (uint64_t)"FigRoutingManagerContextUtilities.m", 930, 0, 0, qword_1E9358E18, (uint64_t)v4);
    }
  }
}

uint64_t FigRoutingContextUtilities_SetLeaderUUIDForContext(const void *a1, uint64_t a2, __CFString *a3)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v6 = 4294949876;
  if (a1 && a2 && byte_1E9358E28)
  {
    uint64_t v13 = 0;
    unsigned int v14 = &v13;
    uint64_t v15 = 0x2020000000;
    int v16 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x2020000000;
    uint64_t v12 = 0;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __FigRoutingContextUtilities_SetLeaderUUIDForContext_block_invoke;
    v8[3] = &unk_1E57C6130;
    void v8[6] = a1;
    void v8[7] = a2;
    os_log_type_t v8[4] = &v13;
    void v8[5] = &v9;
    v8[8] = &routingContextUtilities_getSharedContextUtilities_contextState;
    MXDispatchSync((uint64_t)"FigRoutingContextUtilities_SetLeaderUUIDForContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 1020, 0, 0, qword_1E9358E18, (uint64_t)v8);
    if (a3)
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(a2, 0, a3);
      FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(a2, @"currentRouteChanged", 0);
    }
    if ((const void *)qword_1E9358E40 == a1)
    {
      CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID();
      routingContextUtilities_setRoutingContextDetailsForVolumeControl(v10[3], a1);
    }
    uint64_t v6 = *((unsigned int *)v14 + 6);
    _Block_object_dispose(&v9, 8);
    _Block_object_dispose(&v13, 8);
  }
  return v6;
}

void sub_194D73F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t _routingContextUtilities_setLeaderUUIDForContext(void *a1, void *key)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    uint64_t v4 = (uint64_t)&qword_1E9358E00;
  }
  else {
    uint64_t v4 = 480;
  }
  CFDictionaryGetValue(*(CFDictionaryRef *)v4, key);
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  CFDictionaryGetValue(*(CFDictionaryRef *)v4, a1);
  uint64_t v6 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict(*(CFDictionaryRef *)v4, key);
  CFIndex v8 = _routingContextUtilities_getContextForUUIDFromDict(*(CFDictionaryRef *)v4, a1);
  if (v5) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v11 = (uint64_t)v8;
    if (_routingContextUtilities_getIndexOfFollower((uint64_t)ContextForUUIDFromDict, (uint64_t)v8) < 0) {
      CFArrayAppendValue(*((CFMutableArrayRef *)ContextForUUIDFromDict + 11), v6);
    }
    if (!v11)
    {
LABEL_25:
      CFRelease(v6);
      if (!v5) {
        return v11;
      }
      goto LABEL_13;
    }
    CFArrayRef v12 = *(const __CFArray **)(v11 + 80);
    if (*(_DWORD *)v11 == 10)
    {
      _routingContextUtilities_pruneLeaders(v12);
    }
    else
    {
      CFIndex Count = CFArrayGetCount(v12);
      if (Count)
      {
        if (Count != 1)
        {
LABEL_24:
          uint64_t v11 = 0;
          goto LABEL_25;
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v11 + 80), 0);
      }
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 80), v5);
    goto LABEL_24;
  }
  uint64_t v11 = 4294949876;
  if (v6) {
    goto LABEL_25;
  }
  if (v5) {
LABEL_13:
  }
    CFRelease(v5);
  return v11;
}

void routingContextUtilities_setRoutingContextDetailsForVolumeControl(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      FigVolumeControllerSaveRoutingContextState(a2);
      if (v3)
      {
        CFRelease(v3);
      }
    }
  }
}

uint64_t FigRoutingContextUtilities_SetLeaderToSystemAudioContext(const void *a1, __CFString *a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (!byte_1E9358E28) {
    return 4294949876;
  }
  uint64_t v4 = qword_1E9358E30;
  return FigRoutingContextUtilities_SetLeaderUUIDForContext(a1, v4, a2);
}

uint64_t FigRoutingContextUtilities_UnfollowUUIDFromLeader(const void *a1, __CFString *a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v4 = 4294949876;
  if (a1 && byte_1E9358E28)
  {
    uint64_t v11 = 0;
    CFArrayRef v12 = &v11;
    uint64_t v13 = 0x2020000000;
    int v14 = 0;
    uint64_t v7 = 0;
    CFIndex v8 = &v7;
    uint64_t v9 = 0x2020000000;
    uint64_t v10 = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingContextUtilities_UnfollowUUIDFromLeader_block_invoke;
    _OWORD v6[3] = &unk_1E57C6158;
    void v6[6] = &routingContextUtilities_getSharedContextUtilities_contextState;
    void v6[7] = a1;
    v6[4] = &v7;
    v6[5] = &v11;
    MXDispatchSync((uint64_t)"FigRoutingContextUtilities_UnfollowUUIDFromLeader", (uint64_t)"FigRoutingManagerContextUtilities.m", 1071, 0, 0, qword_1E9358E18, (uint64_t)v6);
    if (a2)
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, 0, a2);
      FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, @"currentRouteChanged", 0);
    }
    if ((const void *)qword_1E9358E40 == a1)
    {
      CMSMUtility_UpdateAudioBehaviourForSessionsUsingRoutingContextUUID();
      routingContextUtilities_setRoutingContextDetailsForVolumeControl(v8[3], a1);
    }
    uint64_t v4 = *((unsigned int *)v12 + 6);
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(&v11, 8);
  }
  return v4;
}

void sub_194D743C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t _routingContextUtilities_getIndexOfFollower(uint64_t a1, uint64_t a2)
{
  CFIndex v2 = -1;
  if (a1)
  {
    if (a2)
    {
      CFArrayRef v4 = *(const __CFArray **)(a1 + 88);
      if (v4)
      {
        CFIndex Count = CFArrayGetCount(v4);
        if (Count >= 1)
        {
          CFIndex v6 = Count;
          CFIndex v2 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v2);
            if (_routingContextUtilities_getContextFromWeakRef((uint64_t)ValueAtIndex))
            {
              if (FigCFEqual()) {
                break;
              }
            }
            if (v6 == ++v2) {
              return -1;
            }
          }
        }
      }
    }
  }
  return v2;
}

void _routingContextUtilities_removeLeader(uint64_t a1)
{
  if (a1)
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 80);
    if (v2 && CFArrayGetCount(v2) == 1)
    {
      uint64_t v3 = *(__CFArray **)(a1 + 80);
      CFArrayRemoveValueAtIndex(v3, 0);
    }
    else if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t FigRoutingManagerContextUtilities_AddContext(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t result = 4294949876;
  if (a2 && a1 && byte_1E9358E28)
  {
    FeatureString = routingContextUtilities_getFeatureString(a3);
    CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 216);
    CFDataSetLength(Mutable, 216);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = __FigRoutingManagerContextUtilities_AddContext_block_invoke;
    void v12[3] = &__block_descriptor_92_e5_v8__0l;
    void v12[4] = a1;
    v12[5] = FeatureString;
    v12[6] = a4;
    v12[7] = MutableBytePtr;
    int v13 = a3;
    v12[8] = a2;
    void v12[9] = Mutable;
    v12[10] = &routingContextUtilities_getSharedContextUtilities_contextState;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_AddContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 1169, 0, 0, qword_1E9358E18, (uint64_t)v12);
    if (Mutable) {
      CFRelease(Mutable);
    }
    return 0;
  }
  return result;
}

uint64_t FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    CFIndex v6 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    CFIndex v6 = 0;
  }
  uint64_t result = 4294949876;
  if (a1 && byte_1E9358E28)
  {
    CFTypeRef cf = 0;
    CFTypeRef v23 = 0;
    if (a2)
    {
      uint64_t v8 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      CFArrayRef v12 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v11 + 48);
      if (v12) {
        v12(CMBaseObject, *MEMORY[0x1E4F20E38], v8, &v23);
      }
      uint64_t v13 = FigEndpointGetCMBaseObject();
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v15 + 48);
      if (v16) {
        v16(v13, *MEMORY[0x1E4F20F28], v8, &cf);
      }
    }
    if (dword_1E9359DC0)
    {
      int v21 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v23)
    {
      CFRelease(v23);
      CFTypeRef v23 = 0;
    }
    uint64_t v24 = 0;
    int v25 = &v24;
    uint64_t v26 = 0x2020000000;
    uint64_t v27 = 0;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo_block_invoke;
    v19[3] = &unk_1E57C60E0;
    void v19[6] = a1;
    v19[7] = a2;
    v19[4] = &v24;
    v19[5] = v6;
    v19[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo", (uint64_t)"FigRoutingManagerContextUtilities.m", 1345, 0, 0, qword_1E9358E18, (uint64_t)v19);
    int v18 = (const void *)v25[3];
    if (v18) {
      CFRelease(v18);
    }
    _Block_object_dispose(&v24, 8);
    return 0;
  }
  return result;
}

void sub_194D750F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v9 = &routingContextUtilities_getSharedContextUtilities_contextState;
  if (!byte_1E9358E28) {
    uint64_t v9 = 0;
  }
  unsigned int v34 = v9;
  uint64_t v10 = 4294949876;
  if (a1 && byte_1E9358E28)
  {
    CFTypeRef v43 = 0;
    CFTypeRef cf = 0;
    CFTypeRef v41 = 0;
    CFTypeRef v42 = 0;
    uint64_t v11 = (void *)MEMORY[0x1E4F20E38];
    CFArrayRef v12 = (uint64_t *)MEMORY[0x1E4F1CF80];
    uint64_t v13 = (void *)MEMORY[0x1E4F20F28];
    if (a2)
    {
      uint64_t v14 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
      if (v18) {
        v18(CMBaseObject, *v11, v14, &cf);
      }
      uint64_t v19 = FigEndpointGetCMBaseObject();
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      int v22 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v21 + 48);
      if (v22) {
        v22(v19, *v13, v14, &v43);
      }
    }
    if (a3)
    {
      uint64_t v23 = FigEndpointGetCMBaseObject();
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v25 = *v12;
      if (*(void *)(VTable + 8)) {
        uint64_t v26 = *(void *)(VTable + 8);
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v26 + 48);
      if (v27) {
        v27(v23, *v11, v25, &v42);
      }
      uint64_t v28 = FigEndpointGetCMBaseObject();
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v31 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v30 + 48);
      if (v31) {
        v31(v28, *v13, v25, &v41);
      }
    }
    if (dword_1E9359DC0)
    {
      int v40 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v43)
    {
      CFRelease(v43);
      CFTypeRef v43 = 0;
    }
    if (v42)
    {
      CFRelease(v42);
      CFTypeRef v42 = 0;
    }
    if (v41)
    {
      CFRelease(v41);
      CFTypeRef v41 = 0;
    }
    LOBYTE(v45) = 0;
    LOBYTE(v4CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t v46 = 0;
    __int16 v47 = &v46;
    uint64_t v48 = 0x2020000000;
    int v49 = 0;
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    _OWORD v36[2] = __FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo_block_invoke;
    v36[3] = &unk_1E57C61C8;
    v36[4] = &v46;
    v36[5] = v34;
    v36[6] = a1;
    v36[7] = a2;
    char v37 = v45;
    char v38 = 0;
    v36[8] = a3;
    v36[9] = a5;
    v36[10] = a4;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo", (uint64_t)"FigRoutingManagerContextUtilities.m", 1438, 0, 0, qword_1E9358E18, (uint64_t)v36);
    uint64_t v10 = *((unsigned int *)v47 + 6);
    _Block_object_dispose(&v46, 8);
  }
  return v10;
}

void sub_194D758A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void _routingContextUtilities_postRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(void *a1, const __CFDictionary *a2)
{
  CFMutableDictionaryRef RouteConfigUpdatedPayload = routingContextUtilities_createRouteConfigUpdatedPayload(a2);
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28)
    {
      ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict((CFDictionaryRef)qword_1E9358E00, a1);
      _routingContextUtilities_postNotificationToContextAndItsFollowers((uint64_t)ContextForUUIDFromDict, @"routeConfigUpdated", RouteConfigUpdatedPayload);
    }
  }
  if (RouteConfigUpdatedPayload)
  {
    CFRelease(RouteConfigUpdatedPayload);
  }
}

uint64_t FigRoutingManagerContextUtilities_SaveCommChannelUUID(uint64_t a1, uint64_t a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v4 = 4294949876;
  if (a1 && byte_1E9358E28)
  {
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    int v10 = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_SaveCommChannelUUID_block_invoke;
    _OWORD v6[3] = &unk_1E57C6180;
    v6[4] = &v7;
    v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    void v6[6] = a1;
    void v6[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SaveCommChannelUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 1543, 0, 0, qword_1E9358E18, (uint64_t)v6);
    uint64_t v4 = *((unsigned int *)v8 + 6);
    _Block_object_dispose(&v7, 8);
  }
  return v4;
}

void sub_194D75C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    int v10 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = 4294949876;
  if (a2 && byte_1E9358E28)
  {
    CFTypeRef cf = 0;
    CFTypeRef v27 = 0;
    if (a3)
    {
      uint64_t v12 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v15 + 48);
      if (v16) {
        v16(CMBaseObject, *MEMORY[0x1E4F20E38], v12, &v27);
      }
      uint64_t v17 = FigEndpointGetCMBaseObject();
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v19 + 48);
      if (v20) {
        v20(v17, *MEMORY[0x1E4F20F28], v12, &cf);
      }
    }
    if (dword_1E9359DC0)
    {
      int v25 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v27)
    {
      CFRelease(v27);
      CFTypeRef v27 = 0;
    }
    uint64_t v28 = 0;
    uint64_t v29 = &v28;
    uint64_t v30 = 0x2020000000;
    int v31 = 0;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint_block_invoke;
    v23[3] = &unk_1E57C61F0;
    v23[4] = &v28;
    v23[5] = v10;
    v23[6] = a2;
    v23[7] = a3;
    v23[8] = a1;
    v23[9] = a4;
    v23[10] = a5;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 1584, 0, 0, qword_1E9358E18, (uint64_t)v23);
    uint64_t v11 = *((unsigned int *)v29 + 6);
    _Block_object_dispose(&v28, 8);
  }
  return v11;
}

void sub_194D760E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void _routingContextUtilities_checkActivationTimeout(uint64_t a1, const void *a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28)
  {
    uint64_t v3 = &kMXSession_IDSMessage_PlayingSessionKey;
    int64_t Count = CFDictionaryGetCount((CFDictionaryRef)qword_1E9358E00);
    uint64_t v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_1E9358E00, v5, 0);
    if (Count >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v16 = v5;
      int64_t v17 = Count;
      do
      {
        ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict((CFDictionaryRef)v3[448], (void *)v5[v6]);
        uint64_t v8 = (const void *)*((void *)ContextForUUIDFromDict + 14);
        if (v8)
        {
          CFArrayRef v9 = (const __CFArray *)CFRetain(v8);
          if (v9)
          {
            CFArrayRef v10 = v9;
            CFIndex v11 = CFArrayGetCount(v9);
            if (v11 >= 1)
            {
              CFIndex v12 = v11;
              for (CFIndex i = 0; i != v12; ++i)
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, i);
                if (CFDictionaryGetValue(ValueAtIndex, @"CurrentlyActivatingEndpointsInfo_Endpoint") == a2)
                {
                  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"CurrentlyActivatingEndpointsInfo_ClientRouteChangeOptions");
                  if (Value) {
                    CFDictionaryGetValue(Value, @"clientRouteRequestID");
                  }
                  if (FigCFEqual() && *((_DWORD *)ContextForUUIDFromDict + 14)) {
                    off_1E9358E08(*((void *)ContextForUUIDFromDict + 1), a2);
                  }
                }
              }
            }
            CFRelease(v10);
            uint64_t v3 = &kMXSession_IDSMessage_PlayingSessionKey;
            uint64_t v5 = v16;
            int64_t Count = v17;
          }
        }
        ++v6;
      }
      while (v6 != Count);
    }
    free(v5);
  }
}

uint64_t FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    uint64_t v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 4294949876;
  if (a2 && byte_1E9358E28)
  {
    CFTypeRef v24 = 0;
    CFTypeRef cf = 0;
    if (a3)
    {
      uint64_t v9 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
      if (v13) {
        v13(CMBaseObject, *MEMORY[0x1E4F20E38], v9, &cf);
      }
      uint64_t v14 = FigEndpointGetCMBaseObject();
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      int64_t v17 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v16 + 48);
      if (v17) {
        v17(v14, *MEMORY[0x1E4F20F28], v9, &v24);
      }
    }
    if (dword_1E9359DC0)
    {
      int v23 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v24)
    {
      CFRelease(v24);
      CFTypeRef v24 = 0;
      CFTypeRef v19 = cf;
    }
    else
    {
      CFTypeRef v19 = 0;
    }
    uint64_t v26 = 0;
    CFTypeRef v27 = &v26;
    uint64_t v28 = 0x2020000000;
    int v29 = 0;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    _OWORD v21[2] = __FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint_block_invoke;
    v21[3] = &unk_1E57C60E0;
    v21[4] = &v26;
    void v21[5] = v7;
    v21[6] = a2;
    v21[7] = a4;
    v21[8] = v19;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 1687, 0, 0, qword_1E9358E18, (uint64_t)v21);
    uint64_t v8 = *((unsigned int *)v27 + 6);
    _Block_object_dispose(&v26, 8);
  }
  return v8;
}

void sub_194D76A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void _routingContextUtilities_removeCurrentlyActivatingEndpointWithID(void *key, const __CFString *a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v4 = (uint64_t)&qword_1E9358E00;
  if (!byte_1E9358E28) {
    uint64_t v4 = 480;
  }
  ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict(*(CFDictionaryRef *)v4, key);
  if (ContextForUUIDFromDict)
  {
    uint64_t v6 = ContextForUUIDFromDict;
    CFArrayRef v7 = (const __CFArray *)*((void *)ContextForUUIDFromDict + 14);
    if (v7)
    {
      CFIndex Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        CFIndex v10 = 0;
        uint64_t v11 = *MEMORY[0x1E4F20E38];
        uint64_t v12 = *MEMORY[0x1E4F1CF80];
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*((CFArrayRef *)v6 + 14), v10);
          if (CFDictionaryGetValue(ValueAtIndex, @"CurrentlyActivatingEndpointsInfo_Endpoint"))
          {
            CFStringRef prefix = 0;
            uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
            uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v15) {
              uint64_t v16 = v15;
            }
            else {
              uint64_t v16 = 0;
            }
            int64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef *))(v16 + 48);
            if (v17) {
              v17(CMBaseObject, v11, v12, &prefix);
            }
            CFStringRef v18 = prefix;
            if (a2 && prefix)
            {
              if (CFStringHasPrefix(a2, prefix) && !FigCFEqual())
              {
                CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)v6 + 14), v10);
                if (prefix) {
                  CFRelease(prefix);
                }
                return;
              }
              CFStringRef v18 = prefix;
            }
            if (v18) {
              CFRelease(v18);
            }
          }
          ++v10;
        }
        while (v9 != v10);
      }
    }
  }
}

uint64_t FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoint(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  if (!a3) {
    return 4294949876;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, a3);
  uint64_t v11 = FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints(a1, a2, Mutable, a4, a5);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v11;
}

uint64_t FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints(uint64_t a1, uint64_t a2, CFArrayRef theArray, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1)
  {
    uint64_t v30 = a5;
    uint64_t v31 = a4;
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    a4 = v31;
    a5 = v30;
  }
  if (byte_1E9358E28) {
    CFArrayRef v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    CFArrayRef v7 = 0;
  }
  uint64_t v8 = 4294949876;
  if (a1 && a2 && byte_1E9358E28)
  {
    uint64_t v32 = v7;
    uint64_t v33 = a4;
    uint64_t v34 = a5;
    CFTypeRef v43 = 0;
    CFTypeRef v44 = 0;
    if (theArray) {
      CFIndex Count = CFArrayGetCount(theArray);
    }
    else {
      CFIndex Count = 0;
    }
    uint64_t v36 = *MEMORY[0x1E4F20E38];
    uint64_t v10 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v13 + 48);
    if (v14) {
      v14(CMBaseObject, v36, v10, &v44);
    }
    uint64_t v15 = FigEndpointGetCMBaseObject();
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v35 = *MEMORY[0x1E4F20F28];
    if (*(void *)(VTable + 8)) {
      uint64_t v17 = *(void *)(VTable + 8);
    }
    else {
      uint64_t v17 = 0;
    }
    CFStringRef v18 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v17 + 48);
    if (v18) {
      v18(v15, v35, v10, &v43);
    }
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFTypeRef v41 = 0;
        CFTypeRef cf = 0;
        CFArrayGetValueAtIndex(theArray, i);
        uint64_t v20 = FigEndpointGetCMBaseObject();
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        int v23 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v22 + 48);
        if (v23) {
          v23(v20, v36, v10, &cf);
        }
        uint64_t v24 = FigEndpointGetCMBaseObject();
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        CFTypeRef v27 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v26 + 48);
        if (v27) {
          v27(v24, v35, v10, &v41);
        }
        if (dword_1E9359DC0)
        {
          int v40 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (v41) {
          CFRelease(v41);
        }
      }
    }
    if (v44)
    {
      CFRelease(v44);
      CFTypeRef v44 = 0;
    }
    if (v43)
    {
      CFRelease(v43);
      CFTypeRef v43 = 0;
    }
    uint64_t v45 = 0;
    uint64_t v46 = &v45;
    uint64_t v47 = 0x2020000000;
    int v48 = 0;
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = __FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints_block_invoke;
    void v38[3] = &unk_1E57C61F0;
    v38[4] = &v45;
    v38[5] = v32;
    v38[6] = a1;
    v38[7] = v33;
    v38[8] = theArray;
    v38[9] = v34;
    v38[10] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 1754, 0, 0, qword_1E9358E18, (uint64_t)v38);
    FigRouteDiscoveryManagerLowerBTDiscoveryModeFromDetailed();
    uint64_t v8 = *((unsigned int *)v46 + 6);
    _Block_object_dispose(&v45, 8);
  }
  return v8;
}

void sub_194D773A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(const void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  v19[16] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a2)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(Mutable, a2);
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a2))
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    int v10 = byte_1E9358E28;
    CFMutableArrayRef v11 = CFArrayCreateMutable(*v8, 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v12 = v11;
    if (a1 && a2)
    {
      uint64_t v13 = &routingContextUtilities_getSharedContextUtilities_contextState;
      uint64_t v14 = (uint64_t)&qword_1E9358E18;
      if (!v10) {
        uint64_t v14 = 504;
      }
      uint64_t v15 = *(NSObject **)v14;
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = __routingContextUtilities_copyIndividualEndpointsFromAggregate_block_invoke;
      v19[3] = &__block_descriptor_56_e5_v8__0l;
      if (!v10) {
        uint64_t v13 = 0;
      }
      v19[4] = a2;
      v19[5] = v13;
      void v19[6] = v11;
      MXDispatchSync((uint64_t)"routingContextUtilities_copyIndividualEndpointsFromAggregate", (uint64_t)"FigRoutingManagerContextUtilities.m", 2922, 0, 0, v15, (uint64_t)v19);
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v16 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v12, 0);
    if (v12) {
      CFRelease(v12);
    }
  }
  else
  {
    uint64_t v16 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(Mutable, 0);
  }
  FigRoutingManagerContextUtilities_SetPickedEndpoints(a1, Mutable, a3, a4, (uint64_t)v16);
  if (v16) {
    CFRelease(v16);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_SetPickedEndpoints(const void *a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (a2)
  {
    int v9 = ContextType;
    if (CFArrayGetCount(a2) >= 1 && v9 == 2)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, 0);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
      {
        LODWORD(valuePtr) = 0;
        CFNumberRef number = 0;
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = *(void (**)(uint64_t, uint64_t, void, CFNumberRef *))(v13 + 48);
        if (v14)
        {
          v14(CMBaseObject, 0x1EE5F4288, *MEMORY[0x1E4F1CF80], &number);
          if (number)
          {
            CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
            if (number) {
              CFRelease(number);
            }
          }
        }
        if (valuePtr != 1885433971) {
          a2 = 0;
        }
      }
    }
  }
  CFMutableArrayRef v15 = routingContextUtilities_copyEndpointIDs(a2);
  CFMutableArrayRef v16 = routingContextUtilities_copyEndpointNames(a2);
  if (dword_1E9359DC0)
  {
    int v27 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    CFStringRef v18 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    CFStringRef v18 = 0;
  }
  CFNumberRef number = 0;
  p_CFNumberRef number = &number;
  uint64_t v34 = 0x2020000000;
  int v35 = 0;
  uint64_t valuePtr = 0;
  p_uint64_t valuePtr = &valuePtr;
  uint64_t v30 = 0x2020000000;
  uint64_t v31 = 0;
  uint64_t v19 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v19 = 504;
  }
  uint64_t v20 = *(NSObject **)v19;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = __FigRoutingManagerContextUtilities_SetPickedEndpoints_block_invoke;
  v25[3] = &unk_1E57C6218;
  v25[6] = v18;
  v25[7] = a1;
  v25[4] = &valuePtr;
  v25[5] = &number;
  v25[8] = a5;
  void v25[9] = a2;
  v25[10] = a4;
  v25[11] = a3;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetPickedEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 2118, 0, 0, v20, (uint64_t)v25);
  routingContextUtilities_setRoutingContextDetailsForVolumeControl(p_valuePtr[3], a1);
  CMSMUtility_InformAirPlayOfAudioModeIfNecessary((uint64_t)a1);
  if (v15) {
    CFRelease(v15);
  }
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v21 = *((unsigned int *)p_number + 6);
  _Block_object_dispose(&valuePtr, 8);
  _Block_object_dispose(&number, 8);
  return v21;
}

void sub_194D77CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

uint64_t FigRoutingContextUtilities_DoesArrayOfEndpointsContainEndpoint(const __CFArray *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  uint64_t v5 = 0;
  if (!a2 || !Count) {
    return v5;
  }
  if (FigCFArrayContainsValue()) {
    return 1;
  }
  CFStringRef prefix = 0;
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(void (**)(uint64_t, void, uint64_t, CFStringRef *))(v9 + 48);
  if (!v10 || (v10(CMBaseObject, *MEMORY[0x1E4F20E38], v6, &prefix), !prefix))
  {
    CFTypeRef v27 = 0;
    uint64_t v17 = FigEndpointGetCMBaseObject();
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v19 + 48);
    if (v20) {
      v20(v17, *MEMORY[0x1E4F20F28], v6, &v27);
    }
    CFTypeRef cf = 0;
    uint64_t v21 = FigEndpointGetCMBaseObject();
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v23 + 48);
    if (v24)
    {
      v24(v21, *MEMORY[0x1E4F21048], v6, &cf);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
    if (v27) {
      CFRelease(v27);
    }
    return 0;
  }
  CFArrayRef v11 = routingContextUtilities_copyEndpointIDs(a1);
  CFArrayRef v12 = v11;
  if (v11 && (CFIndex v13 = CFArrayGetCount(v11), v13 >= 1))
  {
    CFIndex v14 = v13;
    CFIndex v15 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v15);
      if (CFStringHasPrefix(ValueAtIndex, prefix)) {
        break;
      }
      if (v14 == ++v15) {
        goto LABEL_16;
      }
    }
    uint64_t v5 = 1;
  }
  else
  {
LABEL_16:
    uint64_t v5 = 0;
  }
  if (prefix)
  {
    CFRelease(prefix);
    CFStringRef prefix = 0;
  }
  if (v12) {
    CFRelease(v12);
  }
  return v5;
}

CFMutableArrayRef routingContextUtilities_copyEndpointIDs(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    uint64_t v3 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      CFIndex v5 = 0;
      uint64_t v6 = *MEMORY[0x1E4F20E38];
      do
      {
        CFArrayGetValueAtIndex(a1, v5);
        uint64_t value = 0;
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        int v10 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v9 + 48);
        if (v10) {
          v10(CMBaseObject, v6, v3, &value);
        }
        if (value)
        {
          CFArrayAppendValue(Mutable, value);
          if (value) {
            CFRelease(value);
          }
        }
        ++v5;
      }
      while (Count != v5);
    }
    return Mutable;
  }
  else
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    return CFArrayCreateMutable(v12, 0, v13);
  }
}

CFMutableArrayRef routingContextUtilities_copyEndpointNames(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    uint64_t v3 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      CFIndex v5 = 0;
      uint64_t v6 = *MEMORY[0x1E4F20F28];
      do
      {
        CFArrayGetValueAtIndex(a1, v5);
        uint64_t value = 0;
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        int v10 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v9 + 48);
        if (v10) {
          v10(CMBaseObject, v6, v3, &value);
        }
        if (value)
        {
          CFArrayAppendValue(Mutable, value);
          if (value) {
            CFRelease(value);
          }
        }
        ++v5;
      }
      while (Count != v5);
    }
    return Mutable;
  }
  else
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    return CFArrayCreateMutable(v12, 0, v13);
  }
}

void FigRoutingContextUtilities_LogRouteDescriptors(const __CFArray *a1, const __CFArray *a2)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"Updating from old route descriptors: ");
  CFIndex v5 = 0;
  if (!a1) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(a1); v5 < i; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v5);
    if (ValueAtIndex)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, @"RouteName");
      CFStringAppendFormat(Mutable, 0, @"Endpoint[%ld]: %@", v5, Value);
    }
    ++v5;
    if (a1) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  CFStringAppendFormat(Mutable, 0, @" to new route descriptors: ");
  CFIndex v9 = 0;
  if (!a2) {
    goto LABEL_11;
  }
LABEL_10:
  for (CFIndex j = CFArrayGetCount(a2); v9 < j; CFIndex j = 0)
  {
    CFDictionaryRef v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v9);
    if (v11)
    {
      CFAllocatorRef v12 = CFDictionaryGetValue(v11, @"RouteName");
      CFStringAppendFormat(Mutable, 0, @"Endpoint[%ld]: %@", v9, v12);
    }
    ++v9;
    if (a2) {
      goto LABEL_10;
    }
LABEL_11:
    ;
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void _routingContextUtilities_notifyClientsOfChangeInPickedEndpoints(int a1, uint64_t a2, int a3, void *key)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v6 = (uint64_t)&qword_1E9358E00;
  if (!byte_1E9358E28) {
    uint64_t v6 = 480;
  }
  ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict(*(CFDictionaryRef *)v6, key);
  if (ContextForUUIDFromDict)
  {
    uint64_t v8 = ContextForUUIDFromDict;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetValue();
    if ((*(_DWORD *)v8 | 4) == 6) {
      CMSMNotificationUtility_PostExternalScreenDidChange();
    }
    _routingContextUtilities_postNotificationToContextAndItsFollowers((uint64_t)v8, @"currentRouteChanged", Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (a2) {
      _routingContextUtilities_postNotificationToContextAndItsFollowers((uint64_t)v8, @"routeConfigUpdated", v11);
    }
    if (v11)
    {
      CFRelease(v11);
    }
  }
}

uint64_t FigRoutingManagerContextUtilities_AddActivatedEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    CFArrayRef v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    CFArrayRef v7 = 0;
  }
  uint64_t v8 = 4294949876;
  if (a1 && byte_1E9358E28)
  {
    uint64_t v9 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFTypeRef v23 = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFIndex v14 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v13 + 48);
    if (v14) {
      v14(CMBaseObject, *MEMORY[0x1E4F21040], v9, &v23);
    }
    FigCFDictionarySetValue();
    if (v23)
    {
      CFRelease(v23);
      CFTypeRef v23 = 0;
    }
    FigCFDictionarySetValue();
    SInt64 = (const void *)FigCFNumberCreateSInt64();
    FigCFDictionarySetValue();
    CFMutableArrayRef v16 = (const void *)FigCFNumberCreateSInt64();
    FigCFDictionarySetValue();
    if (v16) {
      CFRelease(v16);
    }
    uint64_t v19 = 0;
    uint64_t v20 = &v19;
    uint64_t v21 = 0x2020000000;
    int v22 = 0;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    long long v18[2] = __FigRoutingManagerContextUtilities_AddActivatedEndpoint_block_invoke;
    v18[3] = &unk_1E57C61F0;
    v18[4] = &v19;
    v18[5] = v7;
    v18[6] = a1;
    void v18[7] = Mutable;
    v18[8] = a2;
    v18[9] = a4;
    v18[10] = SInt64;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_AddActivatedEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 2292, 0, 0, qword_1E9358E18, (uint64_t)v18);
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (SInt64) {
      CFRelease(SInt64);
    }
    uint64_t v8 = *((unsigned int *)v20 + 6);
    _Block_object_dispose(&v19, 8);
  }
  return v8;
}

void sub_194D78E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_RemoveActivatedEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v6 = 4294949876;
  if (a2 && a1 && byte_1E9358E28)
  {
    uint64_t v9 = 0;
    int v10 = &v9;
    uint64_t v11 = 0x2020000000;
    int v12 = 0;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __FigRoutingManagerContextUtilities_RemoveActivatedEndpoint_block_invoke;
    v8[3] = &unk_1E57C60E0;
    os_log_type_t v8[4] = &v9;
    void v8[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    void v8[6] = a1;
    void v8[7] = a2;
    v8[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_RemoveActivatedEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 2368, 0, 0, qword_1E9358E18, (uint64_t)v8);
    uint64_t v6 = *((unsigned int *)v10 + 6);
    _Block_object_dispose(&v9, 8);
  }
  return v6;
}

void sub_194D790DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_GetPickingState(uint64_t a1, uint64_t a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v4 = 4294949876;
  if (a2 && a1 && byte_1E9358E28)
  {
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    int v10 = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_GetPickingState_block_invoke;
    _OWORD v6[3] = &unk_1E57C6180;
    v6[4] = &v7;
    v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    void v6[6] = a1;
    void v6[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetPickingState", (uint64_t)"FigRoutingManagerContextUtilities.m", 2424, 0, 0, qword_1E9358E18, (uint64_t)v6);
    uint64_t v4 = *((unsigned int *)v8 + 6);
    _Block_object_dispose(&v7, 8);
  }
  return v4;
}

void sub_194D79344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_SetPickingState(uint64_t a1, int a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v4 = 4294949876;
  if (a1 && byte_1E9358E28)
  {
    uint64_t v8 = 0;
    uint64_t v9 = &v8;
    uint64_t v10 = 0x2020000000;
    int v11 = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_SetPickingState_block_invoke;
    _OWORD v6[3] = &unk_1E57C6240;
    v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    void v6[6] = a1;
    v6[4] = &v8;
    int v7 = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetPickingState", (uint64_t)"FigRoutingManagerContextUtilities.m", 2495, 0, 0, qword_1E9358E18, (uint64_t)v6);
    uint64_t v4 = *((unsigned int *)v9 + 6);
    _Block_object_dispose(&v8, 8);
  }
  return v4;
}

void sub_194D794CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_SetDefaultLeaderUUIDForContext(uint64_t a1, uint64_t a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v4 = 4294949876;
  if (a2 && a1 && byte_1E9358E28)
  {
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    int v10 = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_SetDefaultLeaderUUIDForContext_block_invoke;
    _OWORD v6[3] = &unk_1E57C6180;
    v6[4] = &v7;
    v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    void v6[6] = a1;
    void v6[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetDefaultLeaderUUIDForContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 2524, 0, 0, qword_1E9358E18, (uint64_t)v6);
    uint64_t v4 = *((unsigned int *)v8 + 6);
    _Block_object_dispose(&v7, 8);
  }
  return v4;
}

void sub_194D79650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyAllAudioContexts(CFMutableArrayRef *a1)
{
  if (!a1) {
    return 4294949876;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v3 = &routingContextUtilities_getSharedContextUtilities_contextState;
  uint64_t v4 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v4 = 504;
  }
  CFIndex v5 = *(NSObject **)v4;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __FigRoutingManagerContextUtilities_CopyAllAudioContexts_block_invoke;
  v7[3] = &__block_descriptor_48_e5_v8__0l;
  if (!byte_1E9358E28) {
    uint64_t v3 = 0;
  }
  void v7[4] = v3;
  void v7[5] = Mutable;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyAllAudioContexts", (uint64_t)"FigRoutingManagerContextUtilities.m", 2671, 0, 0, v5, (uint64_t)v7);
  uint64_t result = 0;
  *a1 = Mutable;
  return result;
}

uint64_t FigRoutingManagerContextUtilities_CopyPickedEndpointNames(uint64_t a1, CFMutableArrayRef *a2)
{
  uint64_t v2 = 4294949876;
  if (a1)
  {
    if (a2)
    {
      CFTypeRef cf = 0;
      uint64_t v2 = FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, (CFMutableArrayRef *)&cf);
      *a2 = routingContextUtilities_copyEndpointNames((const __CFArray *)cf);
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  return v2;
}

uint64_t FigRoutingManagerContextUtilities_IsOnlyRoutedToLocalAirPlayEndpoint(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, &theArray);
  if (!theArray) {
    return 0;
  }
  if (CFArrayGetCount(theArray) == 1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    BOOL IsEndpointLocal = FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex);
  }
  else
  {
    BOOL IsEndpointLocal = 0;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return IsEndpointLocal;
}

uint64_t FigRoutingManagerContextUtilities_IsOnlyRoutedToSelf(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, &theArray);
  if (!theArray) {
    return 0;
  }
  BOOL v2 = CFArrayGetCount(theArray) == 1
    && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0),
        FigRoutingManagerIsEndpointWHAGroupable((uint64_t)ValueAtIndex))
    && FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex) != 0;
  if (theArray) {
    CFRelease(theArray);
  }
  return v2;
}

BOOL FigRoutingManagerContextUtilities_IsOnlyRoutedToLocalStereoPair(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, &theArray);
  if (!theArray) {
    return 0;
  }
  BOOL v2 = CFArrayGetCount(theArray) == 1
    && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0), FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex))
    && FigRoutingManagerIsEndpointOfSubtype((uint64_t)ValueAtIndex) != 0;
  if (theArray) {
    CFRelease(theArray);
  }
  return v2;
}

uint64_t FigRoutingManagerContextUtilities_CopyPickedEndpointForRemoteControl(uint64_t a1, uint64_t a2)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v4 = 4294949876;
  if (a2 && a1 && byte_1E9358E28)
  {
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    int v10 = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopyPickedEndpointForRemoteControl_block_invoke;
    _OWORD v6[3] = &unk_1E57C6180;
    v6[4] = &v7;
    v6[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    void v6[6] = a1;
    void v6[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyPickedEndpointForRemoteControl", (uint64_t)"FigRoutingManagerContextUtilities.m", 3091, 0, 0, qword_1E9358E18, (uint64_t)v6);
    uint64_t v4 = *((unsigned int *)v8 + 6);
    _Block_object_dispose(&v7, 8);
  }
  return v4;
}

void sub_194D79E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v6 = 4294949876;
  if (a1 && a3 && a2 && byte_1E9358E28)
  {
    uint64_t v9 = 0;
    int v10 = &v9;
    uint64_t v11 = 0x2020000000;
    int v12 = 0;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures_block_invoke;
    v8[3] = &unk_1E57C60E0;
    os_log_type_t v8[4] = &v9;
    void v8[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    void v8[6] = a1;
    void v8[7] = a2;
    v8[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetActivatedEndpointFeatures", (uint64_t)"FigRoutingManagerContextUtilities.m", 3134, 0, 0, qword_1E9358E18, (uint64_t)v8);
    uint64_t v6 = *((unsigned int *)v10 + 6);
    _Block_object_dispose(&v9, 8);
  }
  return v6;
}

void sub_194D7A034(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v6 = 4294949876;
  if (a1 && a3 && a2 && byte_1E9358E28)
  {
    uint64_t v9 = 0;
    int v10 = &v9;
    uint64_t v11 = 0x2020000000;
    int v12 = 0;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint_block_invoke;
    v8[3] = &unk_1E57C60E0;
    os_log_type_t v8[4] = &v9;
    void v8[5] = &routingContextUtilities_getSharedContextUtilities_contextState;
    void v8[6] = a1;
    void v8[7] = a2;
    v8[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 3212, 0, 0, qword_1E9358E18, (uint64_t)v8);
    uint64_t v6 = *((unsigned int *)v10 + 6);
    _Block_object_dispose(&v9, 8);
  }
  return v6;
}

void sub_194D7A35C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 4294949876;
  if (a1 && a3)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000;
    int v15 = 0;
    uint64_t v8 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v8 = 504;
    }
    uint64_t v9 = *(NSObject **)v8;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex_block_invoke;
    void v11[3] = &unk_1E57C60E0;
    v11[4] = &v12;
    void v11[5] = v7;
    v11[6] = a1;
    void v11[7] = a2;
    void v11[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex", (uint64_t)"FigRoutingManagerContextUtilities.m", 3288, 0, 0, v9, (uint64_t)v11);
    uint64_t v3 = *((unsigned int *)v13 + 6);
    _Block_object_dispose(&v12, 8);
  }
  return v3;
}

void sub_194D7A68C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294949876;
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    uint64_t v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t v5 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v5 = 504;
  }
  uint64_t v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex_block_invoke;
  void v9[3] = &unk_1E57C6180;
  v9[4] = &v10;
  v9[5] = v4;
  void v9[6] = a1;
  void v9[7] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex", (uint64_t)"FigRoutingManagerContextUtilities.m", 3321, 0, 0, v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_194D7A850(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    int v13 = 0;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo_block_invoke;
    void v9[3] = &unk_1E57C6180;
    v9[4] = &v10;
    v9[5] = v5;
    void v9[6] = a1;
    void v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo", (uint64_t)"FigRoutingManagerContextUtilities.m", 3352, 0, 0, v7, (uint64_t)v9);
    uint64_t v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_194D7AA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpoint(uint64_t a1, void *a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    CFArrayRef theArray = 0;
    uint64_t v2 = FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints(a1, (uint64_t)&theArray);
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1 && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1)) != 0) {
        CFTypeRef v6 = CFRetain(ValueAtIndex);
      }
      else {
        CFTypeRef v6 = 0;
      }
      if (theArray) {
        CFRelease(theArray);
      }
    }
    else
    {
      CFTypeRef v6 = 0;
    }
    *a2 = v6;
  }
  return v2;
}

uint64_t FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    int v13 = 0;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints_block_invoke;
    void v9[3] = &unk_1E57C6180;
    v9[4] = &v10;
    v9[5] = v5;
    void v9[6] = a1;
    void v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 3477, 0, 0, v7, (uint64_t)v9);
    uint64_t v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_194D7AC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyMostRecentCurrentlyActivatingEndpointInfo(uint64_t a1, void *a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    CFArrayRef theArray = 0;
    uint64_t v2 = FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsInfo(a1, (uint64_t)&theArray);
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1 && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1)) != 0) {
        CFTypeRef v6 = CFRetain(ValueAtIndex);
      }
      else {
        CFTypeRef v6 = 0;
      }
      if (theArray) {
        CFRelease(theArray);
      }
    }
    else
    {
      CFTypeRef v6 = 0;
    }
    *a2 = v6;
  }
  return v2;
}

uint64_t FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    int v13 = 0;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsInfo_block_invoke;
    void v9[3] = &unk_1E57C6180;
    v9[4] = &v10;
    v9[5] = v5;
    void v9[6] = a1;
    void v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsInfo", (uint64_t)"FigRoutingManagerContextUtilities.m", 3502, 0, 0, v7, (uint64_t)v9);
    uint64_t v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_194D7AE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointsForContextType(int a1, uint64_t a2)
{
  if (a1 == 2)
  {
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&cf);
  }
  else
  {
    if (a1 != 1) {
      return 0;
    }
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  }
  uint64_t v3 = FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)cf, a2);
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 4294949876;
  if (a1 && a3)
  {
    uint64_t v12 = 0;
    int v13 = &v12;
    uint64_t v14 = 0x2020000000;
    int v15 = 0;
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v8 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v8 = 504;
    }
    uint64_t v9 = *(NSObject **)v8;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints_block_invoke;
    void v11[3] = &unk_1E57C60E0;
    if (!byte_1E9358E28) {
      uint64_t v7 = 0;
    }
    v11[4] = &v12;
    void v11[5] = v7;
    v11[6] = a1;
    void v11[7] = a2;
    void v11[8] = a3;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 3529, 0, 0, v9, (uint64_t)v11);
    uint64_t v3 = *((unsigned int *)v13 + 6);
    _Block_object_dispose(&v12, 8);
  }
  return v3;
}

void sub_194D7B170(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    int v13 = 0;
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo_block_invoke;
    void v9[3] = &unk_1E57C6180;
    if (!byte_1E9358E28) {
      uint64_t v5 = 0;
    }
    v9[4] = &v10;
    v9[5] = v5;
    void v9[6] = a1;
    void v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo", (uint64_t)"FigRoutingManagerContextUtilities.m", 3609, 0, 0, v7, (uint64_t)v9);
    uint64_t v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_194D7B388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyActivatedEndpointsForContextType(int a1, uint64_t a2)
{
  if (!a2) {
    return 4294954296;
  }
  if (a1 == 2)
  {
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&cf);
  }
  else
  {
    if (a1 != 1) {
      return 0;
    }
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  }
  uint64_t v3 = FigRoutingManagerContextUtilities_CopyActivatedEndpoints((uint64_t)cf, a2);
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294954296;
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v6 = &routingContextUtilities_getSharedContextUtilities_contextState;
  uint64_t v7 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v7 = 504;
  }
  uint64_t v8 = *(NSObject **)v7;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint_block_invoke;
  v10[3] = &__block_descriptor_64_e5_v8__0l;
  if (!byte_1E9358E28) {
    uint64_t v6 = 0;
  }
  v10[4] = v6;
  v10[5] = a1;
  void v10[6] = a2;
  void v10[7] = a3;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 3668, 0, 0, v8, (uint64_t)v10);
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_RemoveContext(const void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294949876;
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    uint64_t v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  int v26 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  LOBYTE(v22) = 0;
  uint64_t v15 = 0;
  CFMutableArrayRef v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  *(void *)os_log_type_t type = 0;
  uint64_t v12 = type;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  if (byte_1E9358E28) {
    uint64_t v5 = (uint64_t)&qword_1E9358E18;
  }
  else {
    uint64_t v5 = 504;
  }
  uint64_t v6 = *(NSObject **)v5;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __FigRoutingManagerContextUtilities_RemoveContext_block_invoke;
  v10[3] = &unk_1E57C6268;
  void v10[8] = v4;
  v10[9] = a1;
  v10[4] = &v15;
  v10[5] = &v23;
  void v10[6] = type;
  void v10[7] = &v19;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_RemoveContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 3843, 0, 0, v6, (uint64_t)v10);
  if (*((unsigned char *)v20 + 24)) {
    FigVolumeControllerSaveRoutingContextState(a1);
  }
  if (v16[3])
  {
    uint64_t v7 = *(NSObject **)v5;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_RemoveContext_block_invoke_2;
    void v9[3] = &unk_1E57C6158;
    v9[4] = &v15;
    v9[5] = type;
    void v9[6] = v4;
    void v9[7] = a1;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_RemoveContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 3932, 0, 0, v7, (uint64_t)v9);
  }
  uint64_t v3 = *((unsigned int *)v24 + 6);
  _Block_object_dispose(type, 8);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  return v3;
}

void sub_194D7BA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t FigRoutingManagerContextUtilities_CopyHijackID(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v2 = 0;
    }
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    int v12 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    uint64_t v10 = 0;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopyHijackID_block_invoke;
    _OWORD v6[3] = &unk_1E57C6158;
    void v6[6] = v2;
    void v6[7] = v1;
    v6[4] = v11;
    v6[5] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyHijackID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4016, 0, 0, v4, (uint64_t)v6);
    uint64_t v1 = v8[3];
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(v11, 8);
  }
  return v1;
}

void sub_194D7C1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_SetAggregateEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    int v13 = 0;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_SetAggregateEndpoint_block_invoke;
    void v9[3] = &unk_1E57C6180;
    v9[4] = &v10;
    v9[5] = v5;
    void v9[6] = a1;
    void v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetAggregateEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 4044, 0, 0, v7, (uint64_t)v9);
    uint64_t v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_194D7C354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    int v13 = 0;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate_block_invoke;
    void v9[3] = &unk_1E57C6180;
    v9[4] = &v10;
    v9[5] = v5;
    void v9[6] = a1;
    void v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate", (uint64_t)"FigRoutingManagerContextUtilities.m", 4072, 0, 0, v7, (uint64_t)v9);
    uint64_t v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_194D7C648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyFigEndpointFromAggregateEndpointForClientUse(uint64_t a1, uint64_t a2)
{
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2))
  {
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(a1, (uint64_t)&cf);
    if (!cf) {
      return 4294950571;
    }
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v6 + 48);
    if (v9) {
      uint64_t v8 = v9(CMBaseObject, 0x1EE5FD268, *MEMORY[0x1E4F1CF80], a2);
    }
    else {
      uint64_t v8 = 4294954514;
    }
    if (cf) {
      CFRelease(cf);
    }
    return v8;
  }
  else
  {
    return FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(a1, a2);
  }
}

uint64_t FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294949876;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    int v13 = 0;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint_block_invoke;
    void v9[3] = &unk_1E57C6180;
    v9[4] = &v10;
    v9[5] = v5;
    void v9[6] = a1;
    void v9[7] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 4128, 0, 0, v7, (uint64_t)v9);
    uint64_t v2 = *((unsigned int *)v11 + 6);
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_194D7C918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_CopyNonControlPickedContexts(uint64_t a1)
{
  if (!a1) {
    return 4294949876;
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
  uint64_t v3 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v3 = 504;
  }
  uint64_t v4 = *(NSObject **)v3;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopyNonControlPickedContexts_block_invoke;
  _OWORD v6[3] = &__block_descriptor_48_e5_v8__0l;
  if (!byte_1E9358E28) {
    uint64_t v2 = 0;
  }
  v6[4] = v2;
  v6[5] = a1;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyNonControlPickedContexts", (uint64_t)"FigRoutingManagerContextUtilities.m", 4185, 0, 0, v4, (uint64_t)v6);
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopyAllRoutingContextUUIDs(uint64_t a1)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
  uint64_t v3 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v3 = 504;
  }
  uint64_t v4 = *(NSObject **)v3;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopyAllRoutingContextUUIDs_block_invoke;
  _OWORD v6[3] = &__block_descriptor_48_e5_v8__0l;
  if (!byte_1E9358E28) {
    uint64_t v2 = 0;
  }
  v6[4] = v2;
  v6[5] = a1;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyAllRoutingContextUUIDs", (uint64_t)"FigRoutingManagerContextUtilities.m", 4495, 0, 0, v4, (uint64_t)v6);
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID_block_invoke;
    _OWORD v6[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v2 = 0;
    }
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4595, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopySidePlayContextUUID(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopySidePlayContextUUID_block_invoke;
    _OWORD v6[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v2 = 0;
    }
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySidePlayContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4610, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID_block_invoke;
    _OWORD v6[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v2 = 0;
    }
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4625, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemVideoContextUUID(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopySystemVideoContextUUID_block_invoke;
    _OWORD v6[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v2 = 0;
    }
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemVideoContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4651, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID_block_invoke;
    _OWORD v6[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v2 = 0;
    }
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySystemAudioInputContextUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 4664, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopyAudioContextUUIDs(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopyAudioContextUUIDs_block_invoke;
    _OWORD v6[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v2 = 0;
    }
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyAudioContextUUIDs", (uint64_t)"FigRoutingManagerContextUtilities.m", 4677, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopyPerAppSecondDisplayContextUUIDs(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopyPerAppSecondDisplayContextUUIDs_block_invoke;
    _OWORD v6[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v2 = 0;
    }
    v6[4] = a1;
    v6[5] = v2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyPerAppSecondDisplayContextUUIDs", (uint64_t)"FigRoutingManagerContextUtilities.m", 4690, 0, 0, v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294949876;
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    uint64_t v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t v5 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v5 = 504;
  }
  uint64_t v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs_block_invoke;
  void v9[3] = &unk_1E57C6180;
  v9[4] = &v10;
  v9[5] = v4;
  void v9[6] = a1;
  void v9[7] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs", (uint64_t)"FigRoutingManagerContextUtilities.m", 4763, 0, 0, v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_194D7D860(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingContextUtilities_CopyLeaderUUIDForContext(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294949876;
  }
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  if (byte_1E9358E28) {
    uint64_t v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t v5 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v5 = 504;
  }
  uint64_t v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextUtilities_CopyLeaderUUIDForContext_block_invoke;
  void v9[3] = &unk_1E57C6180;
  v9[4] = &v10;
  v9[5] = v4;
  void v9[6] = a1;
  void v9[7] = a2;
  MXDispatchSync((uint64_t)"FigRoutingContextUtilities_CopyLeaderUUIDForContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 4810, 0, 0, v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_194D7DA98(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_IsContextSidePlay(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v2 = 0;
    }
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    int v12 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    char v10 = 0;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_IsContextSidePlay_block_invoke;
    _OWORD v6[3] = &unk_1E57C6158;
    void v6[6] = v2;
    void v6[7] = v1;
    v6[4] = v11;
    v6[5] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsContextSidePlay", (uint64_t)"FigRoutingManagerContextUtilities.m", 4944, 0, 0, v4, (uint64_t)v6);
    uint64_t v1 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(v11, 8);
  }
  return v1;
}

void sub_194D7DC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_IsContextSystemAudio(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v2 = 0;
    }
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x2020000000;
    int v12 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    char v10 = 0;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_IsContextSystemAudio_block_invoke;
    _OWORD v6[3] = &unk_1E57C6158;
    void v6[6] = v2;
    void v6[7] = v1;
    v6[4] = v11;
    v6[5] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsContextSystemAudio", (uint64_t)"FigRoutingManagerContextUtilities.m", 5006, 0, 0, v4, (uint64_t)v6);
    uint64_t v1 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(v11, 8);
  }
  return v1;
}

void sub_194D7DE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_IsContextSystemRemoteDisplay(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    int v2 = byte_1E9358E28;
    if (byte_1E9358E28) {
      uint64_t v3 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v3 = 0;
    }
    v12[0] = 0;
    v12[1] = v12;
    void v12[2] = 0x2020000000;
    int v13 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = &v8;
    uint64_t v10 = 0x2020000000;
    char v11 = 0;
    if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled())
    {
      uint64_t v4 = (uint64_t)&qword_1E9358E18;
      if (!v2) {
        uint64_t v4 = 504;
      }
      uint64_t v5 = *(NSObject **)v4;
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      v7[2] = __FigRoutingManagerContextUtilities_IsContextSystemRemoteDisplay_block_invoke;
      v7[3] = &unk_1E57C6158;
      void v7[6] = v3;
      v7[7] = v1;
      void v7[4] = v12;
      void v7[5] = &v8;
      MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsContextSystemRemoteDisplay", (uint64_t)"FigRoutingManagerContextUtilities.m", 5038, 0, 0, v5, (uint64_t)v7);
    }
    uint64_t v1 = *((unsigned __int8 *)v9 + 24);
    _Block_object_dispose(&v8, 8);
    _Block_object_dispose(v12, 8);
  }
  return v1;
}

void sub_194D7E024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingContextUtilities_GetIndexOfCurrentlyActivatingSubEndpoints(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v2 = -1;
  if (a1 && theArray && CFArrayGetCount(theArray))
  {
    uint64_t v10 = 0;
    char v11 = &v10;
    uint64_t v12 = 0x2020000000;
    uint64_t v13 = -1;
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingContextUtilities_GetIndexOfCurrentlyActivatingSubEndpoints_block_invoke;
    void v9[3] = &unk_1E57C6180;
    if (!byte_1E9358E28) {
      uint64_t v5 = 0;
    }
    v9[4] = &v10;
    v9[5] = v5;
    void v9[6] = a1;
    void v9[7] = theArray;
    MXDispatchSync((uint64_t)"FigRoutingContextUtilities_GetIndexOfCurrentlyActivatingSubEndpoints", (uint64_t)"FigRoutingManagerContextUtilities.m", 5372, 0, 0, v7, (uint64_t)v9);
    uint64_t v2 = v11[3];
    _Block_object_dispose(&v10, 8);
  }
  return v2;
}

void sub_194D7E288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

float FigRoutingManagerContextUtilities_GetMainVolumeScaleFactorForEndpointID(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  char v11 = (float *)&v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 1065353216;
  float v2 = 1.0;
  if (a1 && a2)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v5 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v6 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v6 = 504;
    }
    uint64_t v7 = *(NSObject **)v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __FigRoutingManagerContextUtilities_GetMainVolumeScaleFactorForEndpointID_block_invoke;
    void v9[3] = &unk_1E57C6180;
    if (!byte_1E9358E28) {
      uint64_t v5 = 0;
    }
    void v9[6] = a1;
    void v9[7] = a2;
    v9[4] = &v10;
    v9[5] = v5;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_GetMainVolumeScaleFactorForEndpointID", (uint64_t)"FigRoutingManagerContextUtilities.m", 5523, 0, 0, v7, (uint64_t)v9);
    float v2 = v11[6];
  }
  _Block_object_dispose(&v10, 8);
  return v2;
}

void sub_194D7E474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FigRoutingManagerContextUtilities_SetMainVolumeScaleFactorForEndpointID(uint64_t a1, uint64_t a2, float a3)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  uint64_t v6 = &routingContextUtilities_getSharedContextUtilities_contextState;
  uint64_t v7 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v7 = 504;
  }
  uint64_t v8 = *(NSObject **)v7;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerContextUtilities_SetMainVolumeScaleFactorForEndpointID_block_invoke;
  void v9[3] = &__block_descriptor_60_e5_v8__0l;
  if (!byte_1E9358E28) {
    uint64_t v6 = 0;
  }
  v9[4] = v6;
  v9[5] = a1;
  float v10 = a3;
  void v9[6] = a2;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetMainVolumeScaleFactorForEndpointID", (uint64_t)"FigRoutingManagerContextUtilities.m", 5551, 0, 0, v8, (uint64_t)v9);
}

void FigRoutingManagerContextUtilities_SetScreenEndpoint(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v5 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v5 = 504;
    }
    uint64_t v6 = *(NSObject **)v5;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __FigRoutingManagerContextUtilities_SetScreenEndpoint_block_invoke;
    v7[3] = &__block_descriptor_56_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v4 = 0;
    }
    void v7[4] = v4;
    void v7[5] = a1;
    void v7[6] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetScreenEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 5635, 0, 0, v6, (uint64_t)v7);
  }
}

uint64_t FigRoutingManagerContextUtilities_CopyScreenEndpointUUID(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  uint64_t v10 = 0;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      float v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      float v2 = 0;
    }
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = __FigRoutingManagerContextUtilities_CopyScreenEndpointUUID_block_invoke;
    _OWORD v6[3] = &unk_1E57C5878;
    v6[5] = v2;
    void v6[6] = v1;
    v6[4] = &v7;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopyScreenEndpointUUID", (uint64_t)"FigRoutingManagerContextUtilities.m", 5669, 0, 0, v4, (uint64_t)v6);
    uint64_t v1 = v8[3];
  }
  _Block_object_dispose(&v7, 8);
  return v1;
}

void sub_194D7E908(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void FigRoutingManagerContextUtilities_SetAudioEndpoint(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v5 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v5 = 504;
    }
    uint64_t v6 = *(NSObject **)v5;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __FigRoutingManagerContextUtilities_SetAudioEndpoint_block_invoke;
    v7[3] = &__block_descriptor_56_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v4 = 0;
    }
    void v7[4] = v4;
    void v7[5] = a1;
    void v7[6] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_SetAudioEndpoint", (uint64_t)"FigRoutingManagerContextUtilities.m", 5699, 0, 0, v6, (uint64_t)v7);
  }
}

uint64_t FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  uint64_t v1 = 1;
  char v12 = 1;
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      uint64_t v3 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v4 = 504;
    }
    uint64_t v5 = *(NSObject **)v4;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver_block_invoke;
    v8[3] = &unk_1E57C5878;
    void v8[5] = v3;
    void v8[6] = a1;
    os_log_type_t v8[4] = &v9;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver", (uint64_t)"FigRoutingManagerContextUtilities.m", 5758, 0, 0, v5, (uint64_t)v8);
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v1 = *((unsigned __int8 *)v10 + 24);
  }
  _Block_object_dispose(&v9, 8);
  return v1;
}

void sub_194D7ED04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FigRoutingManagerContextUtilities_StopDiscoveryTimer(uint64_t a1)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  float v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
  uint64_t v3 = (uint64_t)&qword_1E9358E18;
  if (!byte_1E9358E28) {
    uint64_t v3 = 504;
  }
  uint64_t v4 = *(NSObject **)v3;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = __FigRoutingManagerContextUtilities_StopDiscoveryTimer_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  if (!byte_1E9358E28) {
    float v2 = 0;
  }
  void v5[4] = v2;
  void v5[5] = a1;
  MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_StopDiscoveryTimer", (uint64_t)"FigRoutingManagerContextUtilities.m", 5814, 0, 0, v4, (uint64_t)v5);
}

void FigRoutingManagerContextUtilities_StopMirroringTimer(uint64_t a1)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    float v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    _OWORD v5[2] = __FigRoutingManagerContextUtilities_StopMirroringTimer_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    if (!byte_1E9358E28) {
      float v2 = 0;
    }
    void v5[4] = v2;
    void v5[5] = a1;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_StopMirroringTimer", (uint64_t)"FigRoutingManagerContextUtilities.m", 5936, 0, 0, v4, (uint64_t)v5);
  }
}

void FigRoutingManagerContextUtilities_CacheSupportedOutputChannelLayouts(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    uint64_t v4 = &routingContextUtilities_getSharedContextUtilities_contextState;
    uint64_t v5 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v5 = 504;
    }
    uint64_t v6 = *(NSObject **)v5;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __FigRoutingManagerContextUtilities_CacheSupportedOutputChannelLayouts_block_invoke;
    v7[3] = &__block_descriptor_56_e5_v8__0l;
    if (!byte_1E9358E28) {
      uint64_t v4 = 0;
    }
    void v7[4] = v4;
    void v7[5] = a1;
    void v7[6] = a2;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CacheSupportedOutputChannelLayouts", (uint64_t)"FigRoutingManagerContextUtilities.m", 5973, 0, 0, v6, (uint64_t)v7);
  }
}

uint64_t FigRoutingManagerContextUtilities_CopySupportedOutputChannelLayouts(uint64_t a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a1)
  {
    if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
      dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
    }
    if (byte_1E9358E28) {
      float v2 = &routingContextUtilities_getSharedContextUtilities_contextState;
    }
    else {
      float v2 = 0;
    }
    uint64_t v3 = (uint64_t)&qword_1E9358E18;
    if (!byte_1E9358E28) {
      uint64_t v3 = 504;
    }
    uint64_t v4 = *(NSObject **)v3;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __FigRoutingManagerContextUtilities_CopySupportedOutputChannelLayouts_block_invoke;
    v7[3] = &unk_1E57C5878;
    void v7[5] = v2;
    void v7[6] = a1;
    void v7[4] = &v8;
    MXDispatchSync((uint64_t)"FigRoutingManagerContextUtilities_CopySupportedOutputChannelLayouts", (uint64_t)"FigRoutingManagerContextUtilities.m", 6000, 0, 0, v4, (uint64_t)v7);
  }
  uint64_t v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_194D7F3A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerContextUtilities_DoesContextSupportWHAMultiDeviceRouting(uint64_t a1)
{
  if (a1)
  {
    int ContextType = FigRoutingManagerContextUtilities_GetContextType(a1);
    unint64_t v2 = 0x1000000000101uLL >> (8 * (ContextType - 3));
    if ((ContextType - 3) > 6) {
      LOBYTE(v2) = 0;
    }
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2;
}

id FigRoutingContextUtilities_CreateStateInfoStringForContext(uint64_t a1)
{
  if (routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce != -1) {
    dispatch_once(&routingContextUtilities_getSharedContextUtilities_sContextUtilitiesStateSetupOnce, &__block_literal_global_2);
  }
  int v2 = byte_1E9358E28;
  id v3 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  id v4 = v3;
  uint64_t v5 = (uint64_t)&qword_1E9358E18;
  if (!v2) {
    uint64_t v5 = 504;
  }
  uint64_t v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingContextUtilities_CreateStateInfoStringForContext_block_invoke;
  void v9[3] = &unk_1E57C6108;
  if (v2) {
    uint64_t v7 = &routingContextUtilities_getSharedContextUtilities_contextState;
  }
  else {
    uint64_t v7 = 0;
  }
  v9[5] = v7;
  void v9[6] = a1;
  v9[4] = v3;
  MXDispatchSync((uint64_t)"FigRoutingContextUtilities_CreateStateInfoStringForContext", (uint64_t)"FigRoutingManagerContextUtilities.m", 6257, 0, 0, v6, (uint64_t)v9);
  return v4;
}

void ___routingContextUtilities_postNotificationToContextAndItsFollowers_block_invoke(uint64_t a1)
{
  if (FigCFEqual()) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = dword_1E9359DC0 == 0;
  }
  if (!v2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 64);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
    CFDictionaryGetValue(ValueAtIndex, @"routingContextUUID");
    CFDictionaryGetValue(ValueAtIndex, @"routingContext");
    if (dword_1E9359DC0)
    {
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  uint64_t v8 = *(const void **)(a1 + 40);
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(a1 + 32);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(a1 + 48);
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(const void **)(a1 + 64);
  if (v11) {
    CFRelease(v11);
  }
}

void __routingContextUtilities_getSharedContextUtilities_block_invoke()
{
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  qword_1E9358E18 = (uint64_t)dispatch_queue_create("com.apple.mediaexperience.RoutingContextUtilitiesSerializationQueue", v0);
  if (qword_1E9358E18)
  {
    uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    qword_1E9358E20 = (uint64_t)dispatch_queue_create("com.apple.mediaexperience.RoutingContextUtilitiesNotificationQueue", v1);
    if (qword_1E9358E20)
    {
      CMSMDeviceState_AddQueueToWatchDogMonitoring();
      CMSMDeviceState_AddQueueToWatchDogMonitoring();
      CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      qword_1E9358E00 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (qword_1E9358E00)
      {
        qword_1E9358E78 = (uint64_t)CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
        if (qword_1E9358E78)
        {
          qword_1E9358E80 = (uint64_t)CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
          if (qword_1E9358E80)
          {
            qword_1E9358E88 = (uint64_t)CFArrayCreateMutable(v2, 0, MEMORY[0x1E4F1D510]);
            if (qword_1E9358E88)
            {
              uint64_t v3 = 0;
              id v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
              uint64_t v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
              uint64_t v6 = &qword_1E9358C30;
              uint64_t v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
              while (1)
              {
                *((_DWORD *)v6 - 4) = v3;
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, v4, v5);
                *(v6 - 1) = (uint64_t)Mutable;
                if (!Mutable) {
                  break;
                }
                CFMutableArrayRef v9 = CFArrayCreateMutable(v2, 0, v7);
                v6[1] = (uint64_t)v9;
                if (!v9) {
                  break;
                }
                *uint64_t v6 = 0;
                v6 += 4;
                if (++v3 == 15)
                {
                  byte_1E9358E28 = 1;
                  return;
                }
              }
            }
          }
        }
      }
    }
  }
  if (!byte_1E9358E28)
  {
    if (qword_1E9358E20)
    {
      dispatch_release((dispatch_object_t)qword_1E9358E20);
      qword_1E9358E20 = 0;
    }
    if (qword_1E9358E00) {
      CFRelease((CFTypeRef)qword_1E9358E00);
    }
    for (uint64_t i = 0; i != 480; i += 32)
    {
      uint64_t v11 = *(const void **)((char *)&routingContextUtilities_getSharedContextUtilities_contextState + i + 8);
      if (v11) {
        CFRelease(v11);
      }
      char v12 = *(const void **)((char *)&routingContextUtilities_getSharedContextUtilities_contextState + i + 24);
      if (v12) {
        CFRelease(v12);
      }
    }
    if (qword_1E9358E78)
    {
      CFRelease((CFTypeRef)qword_1E9358E78);
      qword_1E9358E78 = 0;
    }
    if (qword_1E9358E80)
    {
      CFRelease((CFTypeRef)qword_1E9358E80);
      qword_1E9358E80 = 0;
    }
    if (qword_1E9358E88)
    {
      CFRelease((CFTypeRef)qword_1E9358E88);
      qword_1E9358E88 = 0;
    }
  }
}

void _routingContextUtilities_pruneLeaders(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      for (CFIndex i = 0; i < v3; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (!ValueAtIndex || !_routingContextUtilities_getContextFromWeakRef((uint64_t)ValueAtIndex))
        {
          CFArrayRemoveValueAtIndex(a1, i--);
          --v3;
        }
      }
    }
  }
}

void __routingContextUtilities_copyIndividualEndpointsFromAggregate_block_invoke(uint64_t *a1)
{
  CFArrayRef theArray = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v4 + 48);
  if (v5)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v5(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
    if (theArray)
    {
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(v6, 0, theArray);
      if (theArray)
      {
        if (FigRoutingManagerIsEndpointOfSubtype(a1[4]))
        {
          CFTypeRef v8 = FigRoutingManagerCopyLocalAirPlayEndpoint();
          if (v8)
          {
            CFMutableArrayRef v9 = v8;
            if (!FigRoutingManagerIsClusterLocalEndpoint((uint64_t)v8))
            {
              CFArrayRef v11 = theArray;
              v21.length = CFArrayGetCount(theArray);
              v21.id location = 0;
              FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v11, v21, v9);
              if (FirstIndexOfValue != -1)
              {
                CFIndex v13 = FirstIndexOfValue;
                uint64_t v14 = a1[5];
                uint64_t v15 = *(const void **)(v14 + 528);
                if (v15)
                {
                  CFMutableArrayRef v16 = (void *)CFRetain(v15);
                  uint64_t v14 = a1[5];
                }
                else
                {
                  CFMutableArrayRef v16 = 0;
                }
                uint64_t v19 = 0;
                ContextForUUIDFromDict = _routingContextUtilities_getContextForUUIDFromDict(*(CFDictionaryRef *)(v14 + 480), v16);
                _routingContextUtilities_copyPickedEndpointAtIndex((uint64_t)ContextForUUIDFromDict, 0, &v19);
                uint64_t v18 = v19;
                if (v19)
                {
                  if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v19)) {
                    CFArraySetValueAtIndex(MutableCopy, v13, v18);
                  }
                  CFRelease(v18);
                }
                if (v16) {
                  CFRelease(v16);
                }
              }
            }
            CFRelease(v9);
          }
        }
        uint64_t v10 = (__CFArray *)a1[6];
        v22.length = CFArrayGetCount(theArray);
        v22.id location = 0;
        CFArrayAppendArray(v10, MutableCopy, v22);
        if (theArray)
        {
          CFRelease(theArray);
          CFArrayRef theArray = 0;
        }
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
    }
  }
}

uint64_t FigRouteDiscovererStartServer()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  uint64_t v1 = FigXPCServerStart();
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v1;
}

uint64_t RouteDiscovererServerNotificationEnqueueDecisionFunction(const void *a1)
{
  if (CFEqual(a1, @"Discoverer_AvailableRoutesChanged")) {
    return 1;
  }
  if (CFEqual(a1, @"Discoverer_RoutePresentChanged")) {
    return 1;
  }
  uint64_t result = CFEqual(a1, @"Discoverer_EndpointDescriptorChanged");
  if (result) {
    return 1;
  }
  return result;
}

uint64_t PowerManager_Initialize()
{
  int IsCPMSSupportedForClient = powerManager_IsCPMSSupportedForClient(5);
  uint64_t result = powerManager_IsCPMSSupportedForClient(6);
  if (IsCPMSSupportedForClient | result)
  {
    int v2 = result;
    sCMSMPowerManager_0 = 1;
    if (IsCPMSSupportedForClient)
    {
      uint64_t result = PowerManager_InitializeCPMSForAudio();
      int IsCPMSSupportedForClient = result;
    }
    if (v2)
    {
      uint64_t result = PowerManager_InitializeCPMSForHaptics();
      int v2 = result;
    }
    if (IsCPMSSupportedForClient)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v2)
    {
      uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t powerManager_IsCPMSSupportedForClient(uint64_t a1)
{
  if ([MEMORY[0x1E4F56678] isCPMSSupportedForClient:a1])
  {
    if (a1 == 5)
    {
      uint64_t v2 = 1;
      PowerManager_SetCPMSSupportedForAudio(1);
      goto LABEL_10;
    }
    if (!MX_FeatureFlags_IsHapticEngineCPMSEnabled())
    {
      uint64_t v2 = 1;
      PowerManager_SetCPMSSupportedForHaptics(1);
      goto LABEL_10;
    }
    PowerManager_SetCPMSSupportedForHaptics(0);
    if (!dword_1E9359ED0) {
      return 0;
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = 0;
LABEL_10:
  if (dword_1E9359ED0)
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v2;
}

__CFString *FigRoutingManagerGetNotifyingObject()
{
  return @"RoutingManager";
}

uint64_t FigRoutingManager_GetDataTransmissionQueue()
{
  if (FigRoutingManager_GetDataTransmissionQueue_once != -1) {
    dispatch_once(&FigRoutingManager_GetDataTransmissionQueue_once, &__block_literal_global_4);
  }
  return FigRoutingManager_GetDataTransmissionQueue_dataTransmissionQueue;
}

uint64_t __FigRoutingManagerGetSharedManager_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  if (dword_1E9359DC0 < 0x100)
  {
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    dword_1E9359DC0 = 0;
  }
  uint64_t v1 = MXGetSerialQueue();
  qword_1E93587F0 = v1;
  if (v1)
  {
    FigRoutingManagerContextUtilities_Create((uint64_t)routingManager_pickingTimeoutCallback, v1);
    unk_1E9358820 = FigSimpleMutexCreate();
    byte_1E9358811 = 0;
    unk_1E9358830 = 0;
    unk_1E9358828 = 0;
  }
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  qword_1E93587F8 = (uint64_t)dispatch_queue_create("com.apple.coremedia.routingManager.notificationQueue", v2);
  return FigRoutingManagerCreateEndpointManagers();
}

void routingManager_pickingTimeoutCallback(CFTypeRef cf, CFTypeRef a2)
{
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  uint64_t v4 = qword_1E93587F0;
  if (cf) {
    CFRetain(cf);
  }
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    uint64_t v5 = (uint64_t)&qword_1E93587F0;
  }
  else {
    uint64_t v5 = 8;
  }
  CFAllocatorRef v6 = *(NSObject **)v5;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __FigRoutingManagerHandleActivationTimeoutCallback_block_invoke;
  void v9[3] = &__block_descriptor_48_e5_v8__0l;
  v9[4] = a2;
  v9[5] = cf;
  MXDispatchAsync((uint64_t)"FigRoutingManagerHandleActivationTimeoutCallback", (uint64_t)"FigRoutingManager.m", 2434, 0, 0, v6, (uint64_t)v9);
  uint64_t v7 = *(NSObject **)v5;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __FigRoutingManagerHandleActivationTimeoutCallback_block_invoke_2;
  v8[3] = &__block_descriptor_40_e5_v8__0l;
  os_log_type_t v8[4] = cf;
  MXDispatchAsync((uint64_t)"FigRoutingManagerHandleActivationTimeoutCallback", (uint64_t)"FigRoutingManager.m", 2468, 0, 0, v7, (uint64_t)v8);
}

uint64_t FigRoutingManagerCreateEndpointManagers()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t result = MX_FeatureFlags_IsExplicitInitializationForFigEndpointManagersEnabled();
  if (!result) {
    return result;
  }
  if (AirPlaySenderLibraryCore())
  {
    if (FigRouteDiscoveryManagerShouldRegisterEndpointManager(*MEMORY[0x1E4F20638]))
    {
      CFTypeRef cf = 0;
      v25[0] = 0;
      v25[1] = v25;
      v25[2] = 0x2020000000;
      uint64_t v1 = (unsigned int (*)(CFTypeRef *))getAPGetEndpointManagerSymbolLoc_ptr;
      int v26 = getAPGetEndpointManagerSymbolLoc_ptr;
      if (!getAPGetEndpointManagerSymbolLoc_ptr)
      {
        uint64_t v20 = MEMORY[0x1E4F143A8];
        uint64_t v21 = 3221225472;
        CFRange v22 = __getAPGetEndpointManagerSymbolLoc_block_invoke;
        uint64_t v23 = &unk_1E57C5B30;
        uint64_t v24 = v25;
        uint64_t v2 = (void *)AirPlaySenderLibrary();
        *(void *)(v25[1] + 24) = dlsym(v2, "APGetEndpointManager");
        getAPGetEndpointManagerSymbolLoc_ptr = *(_UNKNOWN **)(v24[1] + 24);
        uint64_t v1 = *(unsigned int (**)(CFTypeRef *))(v25[1] + 24);
      }
      _Block_object_dispose(v25, 8);
      if (!v1)
      {
        __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
        goto LABEL_40;
      }
      if (!v1(&cf))
      {
        FigRouteDiscoveryManagerRegisterEndpointManager(cf);
        if (dword_1E9359DC0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    if (FigRouteDiscoveryManagerShouldRegisterEndpointManager(*MEMORY[0x1E4F20648]))
    {
      CFTypeRef cf = 0;
      v25[0] = 0;
      v25[1] = v25;
      v25[2] = 0x2020000000;
      uint64_t v4 = (unsigned int (*)(CFTypeRef *))getAPGetEndpointManagerCarPlaySymbolLoc_ptr;
      int v26 = getAPGetEndpointManagerCarPlaySymbolLoc_ptr;
      if (!getAPGetEndpointManagerCarPlaySymbolLoc_ptr)
      {
        uint64_t v20 = MEMORY[0x1E4F143A8];
        uint64_t v21 = 3221225472;
        CFRange v22 = __getAPGetEndpointManagerCarPlaySymbolLoc_block_invoke;
        uint64_t v23 = &unk_1E57C5B30;
        uint64_t v24 = v25;
        uint64_t v5 = (void *)AirPlaySenderLibrary();
        CFAllocatorRef v6 = dlsym(v5, "APGetEndpointManagerCarPlay");
        *(void *)(v24[1] + 24) = v6;
        getAPGetEndpointManagerCarPlaySymbolLoc_ptr = *(_UNKNOWN **)(v24[1] + 24);
        uint64_t v4 = *(unsigned int (**)(CFTypeRef *))(v25[1] + 24);
      }
      _Block_object_dispose(v25, 8);
      if (!v4) {
        goto LABEL_39;
      }
      if (!v4(&cf))
      {
        FigRouteDiscoveryManagerRegisterEndpointManager(cf);
        if (dword_1E9359DC0)
        {
          uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    if (!FigRouteDiscoveryManagerShouldRegisterEndpointManager(*MEMORY[0x1E4F20658])) {
      goto LABEL_24;
    }
    CFTypeRef cf = 0;
    v25[0] = 0;
    v25[1] = v25;
    v25[2] = 0x2020000000;
    CFTypeRef v8 = (unsigned int (*)(CFTypeRef *))getSPGetEndpointManagerSymbolLoc_ptr;
    int v26 = getSPGetEndpointManagerSymbolLoc_ptr;
    if (!getSPGetEndpointManagerSymbolLoc_ptr)
    {
      uint64_t v20 = MEMORY[0x1E4F143A8];
      uint64_t v21 = 3221225472;
      CFRange v22 = __getSPGetEndpointManagerSymbolLoc_block_invoke;
      uint64_t v23 = &unk_1E57C5B30;
      uint64_t v24 = v25;
      CFMutableArrayRef v9 = (void *)AirPlaySenderLibrary();
      uint64_t v10 = dlsym(v9, "SPGetEndpointManager");
      *(void *)(v24[1] + 24) = v10;
      getSPGetEndpointManagerSymbolLoc_ptr = *(_UNKNOWN **)(v24[1] + 24);
      CFTypeRef v8 = *(unsigned int (**)(CFTypeRef *))(v25[1] + 24);
    }
    _Block_object_dispose(v25, 8);
    if (v8)
    {
      if (!v8(&cf))
      {
        FigRouteDiscoveryManagerRegisterEndpointManager(cf);
        if (dword_1E9359DC0)
        {
          CFArrayRef v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      goto LABEL_24;
    }
LABEL_39:
    __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
LABEL_40:
    __break(1u);
  }
LABEL_24:
  uint64_t result = MediaToolboxLibraryCore();
  if (!result) {
    return result;
  }
  uint64_t result = FigRouteDiscoveryManagerShouldRegisterEndpointManager(*MEMORY[0x1E4F20650]);
  if (!result) {
    return result;
  }
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  char v12 = (uint64_t (*)(uint64_t, uint64_t))getFigEndpointManagerForNeroGetSharedSymbolLoc_ptr;
  int v26 = getFigEndpointManagerForNeroGetSharedSymbolLoc_ptr;
  if (!getFigEndpointManagerForNeroGetSharedSymbolLoc_ptr)
  {
    uint64_t v20 = MEMORY[0x1E4F143A8];
    uint64_t v21 = 3221225472;
    CFRange v22 = __getFigEndpointManagerForNeroGetSharedSymbolLoc_block_invoke;
    uint64_t v23 = &unk_1E57C5B30;
    uint64_t v24 = v25;
    __getFigEndpointManagerForNeroGetSharedSymbolLoc_block_invoke((uint64_t)&v20);
    char v12 = *(uint64_t (**)(uint64_t, uint64_t))(v25[1] + 24);
  }
  _Block_object_dispose(v25, 8);
  if (!v12) {
    goto LABEL_39;
  }
  uint64_t result = v12(v13, v14);
  uint64_t v15 = result;
  if (result)
  {
    uint64_t result = FigRouteDiscoveryManagerRegisterEndpointManager((CFTypeRef)result);
    if (dword_1E9359DC0)
    {
      LODWORD(cf) = 0;
      CFMutableArrayRef v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v17 = cf;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v17 & 0xFFFFFFFE;
      }
      if (v18)
      {
        LODWORD(v25[0]) = 136315394;
        *(void *)((char *)v25 + 4) = "FigRoutingManagerCreateEndpointManagers";
        WORD2(v25[1]) = 2048;
        *(void *)((char *)&v25[1] + 6) = v15;
        _os_log_send_and_compose_impl();
      }
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void sub_194D81FB4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t FigRoutingManagerShouldSkipEndpointManager()
{
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v2 + 48);
  if (v3)
  {
    v3(CMBaseObject, *MEMORY[0x1E4F20620], *MEMORY[0x1E4F1CF80], &cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  return 0;
}

void FigRoutingMangerCreateBluetoothEndpointManager()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.routingManager.bluetooth", v0);
  routingManager_createBluetoothEndpointManager_queue = (uint64_t)v1;
  if (v1)
  {
    dispatch_queue_t v2 = v1;
    uint64_t v7 = 0;
    CFTypeRef v8 = &v7;
    uint64_t v9 = 0x2020000000;
    uint64_t v3 = getBluetoothEndpointManagerCreateSymbolLoc_ptr;
    uint64_t v10 = getBluetoothEndpointManagerCreateSymbolLoc_ptr;
    if (!getBluetoothEndpointManagerCreateSymbolLoc_ptr)
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      _OWORD v6[2] = __getBluetoothEndpointManagerCreateSymbolLoc_block_invoke;
      _OWORD v6[3] = &unk_1E57C5B30;
      v6[4] = &v7;
      __getBluetoothEndpointManagerCreateSymbolLoc_block_invoke((uint64_t)v6);
      uint64_t v3 = (void *)v8[3];
    }
    _Block_object_dispose(&v7, 8);
    if (!v3)
    {
      __68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
      __break(1u);
    }
    if (!((unsigned int (*)(void, dispatch_queue_t, void, CFTypeRef *))v3)(*MEMORY[0x1E4F1CF80], v2, 0, &cf))
    {
      FigRouteDiscoveryManagerRegisterEndpointManager(cf);
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_194D822EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t MXRegisterEndpointManager(const void *a1)
{
  dispatch_queue_t v2 = (void *)MEMORY[0x1997179E0]();
  FigRouteDiscoveryManagerInit();
  FigRouteDiscoveryManagerRegisterEndpointManager(a1);
  FigRouteDiscoveryManagerStart();
  FigRoutingManagerInit();
  return 0;
}

void FigRoutingManagerInit()
{
  v5[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  v5[0] = 0;
  CFTypeRef v3 = 0;
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  if (qword_1E93587F0)
  {
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 1, &cf);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 1);
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 2, 0);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 2);
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 9, 0);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 9);
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 3, v5);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 3);
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 11, 0);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 11);
    if (MX_FeatureFlags_IsSystemInputPickerEnabled())
    {
      routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 13, 0);
      FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 13);
    }
    if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled())
    {
      routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 14, 0);
      FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 14);
    }
    routingManager_createSystemContext((uint64_t)&FigRoutingManagerGetSharedManager_manager, 12, 0);
    FigRoutingContextUtilities_LogCurrentState(&FigRoutingManagerGetSharedManager_manager, 12);
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingContextUtilities_SetLeaderUUIDForContext(v5[0], (uint64_t)cf, 0);
    uint64_t v1 = FigRoutingManagerContextUtilities_SetDefaultLeaderUUIDForContext((uint64_t)v5[0], (uint64_t)cf);
    FigRoutingContextUtilities_LogCurrentState(v1, v2);
    if (!FigRoutingManagerContextUtilities_CopyRoutingContextForContextUUID((uint64_t)v5[0], (uint64_t)&v3)
      && !FigRoutingSessionManagerInit(v3))
    {
      MXInstallSysdiagnoseBlock(@"RouteList", (uint64_t)&__block_literal_global_22);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v5[0]) {
    CFRelease(v5[0]);
  }
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t FigRoutingManagerInternal_CreateAirPlayAggregate(uint64_t a1, const void *a2, unsigned int a3, CFTypeRef *a4)
{
  CFTypeRef cf[21] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (!a4) {
    return 0;
  }
  CFAllocatorRef v6 = [+[MXEndpointDescriptorCache sharedInstance] getEndpointManagerForType:*MEMORY[0x1E4F20638]];
  if (!v6) {
    return 0;
  }
  CFTypeRef v8 = v6;
  uint64_t v19 = (uint64_t)a2;
  if (!MX_FeatureFlags_IsAirPlayDaemonEnabled(v6, v7))
  {
    int v10 = 5;
    while (1)
    {
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(OpaqueFigEndpointManager *, void, CFTypeRef *))(v13 + 24);
      if (v14)
      {
        uint64_t AggregateEndpoint = v14(v8, a3, cf);
        if (!AggregateEndpoint)
        {
          CFTypeRef v15 = cf[0];
          if (cf[0]) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        uint64_t AggregateEndpoint = 4294954514;
      }
      CFMutableArrayRef v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      usleep(0xC350u);
      if (!--v10) {
        goto LABEL_17;
      }
    }
  }
  uint64_t AggregateEndpoint = MXAggregateEndpointCreateAggregateEndpoint(v8, a2, a3, cf);
LABEL_17:
  if (AggregateEndpoint)
  {
    if (dword_1E9359DC0)
    {
      unsigned int v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRoutingManagerContextUtilities_SetAggregateEndpoint(v19, 0);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  else
  {
    CFTypeRef v15 = cf[0];
LABEL_19:
    FigRoutingManagerContextUtilities_SetAggregateEndpoint(v19, (uint64_t)v15);
    uint64_t AggregateEndpoint = 0;
    *a4 = cf[0];
  }
  return AggregateEndpoint;
}

void FigRoutingManagerCreateAndActivateSystemRemotePoolEndpoint()
{
  v3[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  CFTypeRef cf = 0;
  v3[0] = 0;
  uint64_t v0 = FigRoutingManagerContextUtilities_CopySystemRemotePoolContextUUID((uint64_t)&cf);
  FigRoutingManagerInternal_CreateAirPlayAggregateForSystemRemotePool(v0, cf, v3);
  if (v3[0] && MXSystemRemotePool_ActivateAggregateEndpoint((uint64_t)v3[0], cf) && dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v3[0]) {
    CFRelease(v3[0]);
  }
}

uint64_t FigRoutingManagerInternal_CreateAirPlayAggregateForSystemRemotePool(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  CFTypeRef cf[21] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v5 = [+[MXEndpointDescriptorCache sharedInstance] getEndpointManagerForType:*MEMORY[0x1E4F20638]];
  if (!v5) {
    return 0;
  }
  uint64_t v7 = v5;
  if (!MX_FeatureFlags_IsAirPlayDaemonEnabled(v5, v6))
  {
    int v9 = 5;
    while (1)
    {
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(uint64_t (**)(OpaqueFigEndpointManager *, CFTypeRef *))(v12 + 32);
      if (v13)
      {
        uint64_t AggregateEndpoint = v13(v7, cf);
        if (!AggregateEndpoint)
        {
          CFTypeRef v14 = cf[0];
          if (cf[0]) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        uint64_t AggregateEndpoint = 4294954514;
      }
      CFTypeRef v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      usleep(0xC350u);
      if (!--v9) {
        goto LABEL_17;
      }
    }
  }
  uint64_t AggregateEndpoint = MXAggregateEndpointCreateAggregateEndpoint(v7, a2, 3, cf);
LABEL_17:
  if (!AggregateEndpoint)
  {
    CFTypeRef v14 = cf[0];
    if (cf[0])
    {
LABEL_19:
      FigRoutingManagerContextUtilities_SetAggregateEndpoint((uint64_t)a2, (uint64_t)v14);
      uint64_t AggregateEndpoint = 0;
      *a3 = cf[0];
      return AggregateEndpoint;
    }
    return 0;
  }
  FigRoutingManagerContextUtilities_SetAggregateEndpoint((uint64_t)a2, 0);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return AggregateEndpoint;
}

uint64_t FigRoutingManagerCreateAndActivateAggregateEndpointForContext(const void *a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = [+[MXEndpointDescriptorCache sharedInstance] getEndpointManagerForType:*MEMORY[0x1E4F20638]];
  if (!v2) {
    goto LABEL_9;
  }
  CFTypeRef v3 = v2;
  int ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType == 9) {
    int v5 = 3;
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = MXAggregateEndpointCreateAggregateEndpoint(v3, a1, v5, &cf);
  if (!v6)
  {
    if (cf)
    {
      FigRoutingManagerContextUtilities_SetAggregateEndpoint((uint64_t)a1, (uint64_t)cf);
      uint64_t v2 = (OpaqueFigEndpointManager *)cf;
    }
    else
    {
      uint64_t v2 = 0;
    }
    if (ContextType != 9)
    {
      uint64_t v7 = FigRoutingManager_iOSActivateEndpoint(v2, a1, 0, 0);
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v7 = MXSystemRemotePool_ActivateAggregateEndpoint((uint64_t)v2, a1);
LABEL_11:
    uint64_t v8 = v7;
    goto LABEL_12;
  }
  uint64_t v8 = v6;
  FigRoutingManagerContextUtilities_SetAggregateEndpoint((uint64_t)a1, 0);
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t FigRoutingManagerCreateAggregateForContextIfNecessary(const void *a1, CFIndex a2)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2)
    || !FigRoutingManagerContextUtilities_DoesContextSupportWHAMultiDeviceRouting((uint64_t)a1))
  {
    return 0;
  }
  int v4 = FigRoutingManagerUtilities_AreAllEndpointsOfTypeAirPlay(a2);
  int ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType == 9)
  {
    if (!v4) {
      goto LABEL_12;
    }
  }
  else
  {
    char v6 = FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable(a2);
    if (!v4 || (v6 & 1) == 0)
    {
LABEL_12:
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
  }
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a1, (uint64_t)cf);
  if (cf[0])
  {
    if (FigRoutingManagerIsEndpointActivated((uint64_t)cf[0]))
    {
      if (dword_1E9359DC0)
      {
        uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else if (ContextType == 9)
    {
      MXSystemRemotePool_ActivateAggregateEndpoint((uint64_t)cf[0], a1);
    }
    else
    {
      FigRoutingManager_iOSActivateEndpoint(cf[0], a1, 0, 0);
    }
  }
  else
  {
    FigRoutingManagerCreateAndActivateAggregateEndpointForContext(a1);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return 0;
}

uint64_t FigRoutingManagerRegisterAndCopyContext(uint64_t a1, const __CFDictionary *a2, int a3, CFStringRef *a4)
{
  if (a3 - 1) < 0xE && ((0x3F07u >> (a3 - 1))) {
    return 4294955276;
  }
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  if (qword_1E93587F0) {
    uint64_t v8 = &FigRoutingManagerGetSharedManager_manager;
  }
  else {
    uint64_t v8 = 0;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFUUIDRef v10 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (!v10) {
    return 4294955275;
  }
  CFUUIDRef v11 = v10;
  CFStringRef v12 = CFUUIDCreateString(v9, v10);
  CFRelease(v11);
  if (!v12) {
    return 4294955275;
  }
  uint64_t v13 = routingManager_registerContextInternal((uint64_t)v8, v12, a1, a3, a2);
  uint64_t v15 = v13;
  if (!v13)
  {
    if (a4)
    {
      *a4 = v12;
      FigRoutingContextUtilities_LogCurrentState(v13, v14);
      return 0;
    }
    FigRoutingContextUtilities_LogCurrentState(v13, v14);
  }
  CFRelease(v12);
  return v15;
}

uint64_t routingManager_registerContextInternal(uint64_t a1, const void *a2, uint64_t a3, int a4, const __CFDictionary *a5)
{
  uint64_t v9 = FigRoutingManagerContextUtilities_AddContext((uint64_t)a2, a3, a4, (uint64_t)a5);
  if (v9) {
    return v9;
  }
  if (a4 == 4)
  {
    if (CMSMDeviceState_IsHomePodHub())
    {
      CFTypeRef cf = 0;
      CFDictionaryRef Value = CFDictionaryGetValue(a5, @"isAudioContextTest");
      if (Value != (const void *)*MEMORY[0x1E4F1CFD0])
      {
        FigRoutingManagerInternal_CreateAirPlayAggregate((uint64_t)Value, a2, 0, &cf);
        FigRoutingManagerContextUtilities_SetAggregateEndpoint((uint64_t)a2, (uint64_t)cf);
        if (cf)
        {
          BOOL IsEndpointActivated = FigRoutingManagerIsEndpointActivated((uint64_t)cf);
          CFTypeRef v10 = cf;
          if (IsEndpointActivated)
          {
LABEL_6:
            if (v10) {
              CFRelease(v10);
            }
            goto LABEL_13;
          }
          MXAudioContext_ActivateAggregateEndpoint((uint64_t)cf, a2);
LABEL_5:
          CFTypeRef v10 = cf;
          goto LABEL_6;
        }
      }
    }
  }
  else if (a4 == 5)
  {
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
    FigRoutingContextUtilities_SetLeaderUUIDForContext(a2, (uint64_t)cf, @"configUpdateReasonEndedBottomUpRouteChange");
    FigRoutingManagerContextUtilities_SetDefaultLeaderUUIDForContext((uint64_t)a2, (uint64_t)cf);
    goto LABEL_5;
  }
LABEL_13:
  FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, @"currentRouteChanged", 0);
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v13 = *(NSObject **)(a1 + 16);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __routingManager_registerContextInternal_block_invoke;
  v15[3] = &__block_descriptor_40_e5_v8__0l;
  v15[4] = a2;
  MXDispatchAsync((uint64_t)"routingManager_registerContextInternal", (uint64_t)"FigRoutingManager.m", 500, 0, 0, v13, (uint64_t)v15);
  return v9;
}

uint64_t FigRoutingManagerRegisterContextWithUUID(uint64_t a1, const __CFDictionary *a2, int a3, const void *a4)
{
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  if (a3 - 1) < 0xE && ((0x3F07u >> (a3 - 1))) {
    return 4294955276;
  }
  if (qword_1E93587F0) {
    uint64_t v8 = &FigRoutingManagerGetSharedManager_manager;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t result = routingManager_registerContextInternal((uint64_t)v8, a4, a1, a3, a2);
  if (!result)
  {
    FigRoutingContextUtilities_LogCurrentState(result, v10);
    return 0;
  }
  return result;
}

uint64_t FigRoutingManagerUnregisterContext(uint64_t result)
{
  CFArrayRef theArray[21] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = (const void *)result;
    int ContextType = FigRoutingManagerContextUtilities_GetContextType(result);
    if ((ContextType - 5) > 1)
    {
      if (ContextType == 4 && CMSMDeviceState_IsHomePodHub() && dword_1E9359DC0)
      {
        LODWORD(theArray[0]) = 0;
        v18[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      theArray[0] = 0;
      FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo((uint64_t)v1, (uint64_t)theArray);
      if (theArray[0])
      {
        CFIndex Count = CFArrayGetCount(theArray[0]);
        if (Count >= 1)
        {
          CFIndex v4 = Count;
          for (CFIndex i = 0; i != v4; ++i)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray[0], i);
            CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, @"ActivatedEndpointsInfo_Endpoint");
            *(void *)unsigned int v18 = 0;
            FigCFDictionaryGetInt64IfPresent();
            if (dword_1E9359DC0)
            {
              int v17 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            FigRoutingManager_iOSDeactivateEndpoint(Value, *(uint64_t *)v18);
            FigRoutingManagerContextUtilities_SetPickedEndpoints(v1, 0, @"configUpdateReasonEndedBottomUpRouteChange", 0, 0);
          }
        }
        if (theArray[0]) {
          CFRelease(theArray[0]);
        }
      }
    }
    if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
      dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
    }
    uint64_t v10 = qword_1E93587F0;
    CFRetain(v1);
    uint64_t v11 = 16;
    if (v10) {
      uint64_t v11 = (uint64_t)&qword_1E93587F8;
    }
    CFStringRef v12 = *(NSObject **)v11;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = __FigRoutingManagerUnregisterContext_block_invoke;
    v15[3] = &__block_descriptor_40_e5_v8__0l;
    v15[4] = v1;
    MXDispatchAsync((uint64_t)"FigRoutingManagerUnregisterContext", (uint64_t)"FigRoutingManager.m", 1462, 0, 0, v12, (uint64_t)v15);
    uint64_t v13 = FigRoutingManagerContextUtilities_RemoveContext(v1);
    return FigRoutingContextUtilities_LogCurrentState(v13, v14);
  }
  return result;
}

void __FigRoutingManagerUnregisterContext_block_invoke(uint64_t a1)
{
  routingManager_notifyRoutingContextChanged();
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void routingManager_notifyRoutingContextChanged()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void FigRoutingManagerCopyCurrentGroupUUID(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&cf);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      char v6 = *(void (**)(uint64_t, void, void, void *))(v5 + 48);
      if (v6) {
        v6(CMBaseObject, *MEMORY[0x1E4F20E08], *MEMORY[0x1E4F1CF80], a2);
      }
    }
    else
    {
      *a2 = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t FigRoutingManagerIsConfigurationWHASilentPrimary(uint64_t a1)
{
  if (!FigRoutingManagerContextUtilities_IsContextSystemMusicAndIndependent(a1)) {
    return 0;
  }
  CFArrayRef theArray = 0;
  FigRoutingManagerCopyPickedEndpointsForRoutingContext(a1, &theArray);
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t v3 = Count;
  if (Count)
  {
    if (Count < 1)
    {
LABEL_9:
      uint64_t v3 = 1;
    }
    else
    {
      CFIndex v4 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex)
          || FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
        {
          break;
        }
        if (v3 == ++v4) {
          goto LABEL_9;
        }
      }
      uint64_t v3 = 0;
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v3;
}

uint64_t FigRoutingManagerCopyPickedEndpointsForRoutingContext(uint64_t a1, void *a2)
{
  if (!a1 || !a2) {
    return 4294954516;
  }
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  return routingManager_iOSCopyPickedEndpointsForRoutingContext(a1, a2);
}

uint64_t FigRoutingManagerCopyPickedRouteDescriptorForRoutingContext(uint64_t a1, __CFDictionary **a2)
{
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  CFTypeRef cf = 0;
  uint64_t v4 = 4294954516;
  if (a1 && a2)
  {
    uint64_t v4 = FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&cf);
    uint64_t v5 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)cf, 0);
    if (cf) {
      CFRelease(cf);
    }
    *a2 = v5;
  }
  return v4;
}

uint64_t routingManager_iOSCopyPickedEndpointsForRoutingContext(uint64_t a1, void *a2)
{
  CFTypeRef v8 = 0;
  if (FigRoutingContextUtilities_IsFollowingAnotherContext(a1))
  {
    CFTypeRef cf = 0;
    FigRoutingContextUtilities_CopyLeaderUUIDForContext(a1, (uint64_t)&cf);
    uint64_t v4 = FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints((uint64_t)cf, (CFMutableArrayRef *)&v8);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v4 = FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(a1, (CFMutableArrayRef *)&v8);
  }
  CFTypeRef v5 = v8;
  if (!v8)
  {
    CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFTypeRef v5 = v8;
    goto LABEL_9;
  }
  if (a2)
  {
LABEL_9:
    *a2 = v5;
    return v4;
  }
  CFRelease(v8);
  return v4;
}

uint64_t FigRoutingManagerCopyPickedRouteDescriptorsForRoutingContext(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = 0;
  uint64_t v2 = 4294954516;
  if (a1 && a2)
  {
    if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
      dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
    }
    uint64_t v2 = routingManager_iOSCopyPickedEndpointsForRoutingContext(a1, &cf);
    *a2 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf, 0);
    if (cf) {
      CFRelease(cf);
    }
  }
  return v2;
}

uint64_t FigRoutingManagerCopyPickedEndpointForRemoteControl(uint64_t a1, void *a2)
{
  uint64_t v5 = 0;
  uint64_t result = 4294954516;
  if (a1)
  {
    if (a2)
    {
      FigRoutingManagerContextUtilities_CopyPickedEndpointForRemoteControl(a1, (uint64_t)&v5);
      uint64_t result = 0;
      *a2 = v5;
    }
  }
  return result;
}

uint64_t FigRoutingManagerSaveCommunicationChannelUUIDForContext(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return FigRoutingManagerContextUtilities_SaveCommChannelUUID(a1, a2);
  }
  else {
    return 4294954516;
  }
}

uint64_t routingManager_createSystemContext(uint64_t a1, int a2, void *a3)
{
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  uint64_t v7 = 0;
  switch(a2)
  {
    case 1:
      uint64_t v7 = @"9FF3A19E-9347-44BE-9999-3527693EBD42";
      SystemAudioContextuint64_t Internal = FigRoutingContextCreateSystemAudioContextInternal(@"9FF3A19E-9347-44BE-9999-3527693EBD42");
      goto LABEL_11;
    case 2:
      uint64_t v7 = @"AE0596F4-FE8D-41DC-B2AC-CB0C10793AFB";
      SystemAudioContextuint64_t Internal = FigRoutingContextCreateSystemMirroringContextInternal(@"AE0596F4-FE8D-41DC-B2AC-CB0C10793AFB");
      goto LABEL_11;
    case 3:
      uint64_t v7 = @"577E1BCA-2D9B-41C2-A8F8-C515CE8072D4";
      SystemAudioContextuint64_t Internal = FigRoutingContextCreateSystemMusicContextInternal(@"577E1BCA-2D9B-41C2-A8F8-C515CE8072D4");
      goto LABEL_11;
    case 9:
      uint64_t v7 = @"0099C187-7408-4602-A91A-AD16480F63A6";
      SystemAudioContextuint64_t Internal = FigRoutingContextCreateSystemRemotePoolContextInternal(@"0099C187-7408-4602-A91A-AD16480F63A6");
      goto LABEL_11;
    case 10:
      uint64_t v7 = @"EE613C90-4977-407B-830E-615886FFD46B";
      SystemAudioContextuint64_t Internal = FigRoutingContextCreateSystemVideoDisplayMenu(@"EE613C90-4977-407B-830E-615886FFD46B");
      goto LABEL_11;
    case 11:
      uint64_t v7 = @"3C4D0FD7-378E-43FA-9D62-8F7873D548C7";
      SystemAudioContextuint64_t Internal = FigRoutingContextCreateSystemVideoContextInternal(@"3C4D0FD7-378E-43FA-9D62-8F7873D548C7");
      goto LABEL_11;
    case 12:
      uint64_t v7 = @"1631DE8A-D3C9-463D-B86F-95DB6C143A72";
      SystemAudioContextuint64_t Internal = FigRoutingContextCreateSidePlayContextInternal(@"1631DE8A-D3C9-463D-B86F-95DB6C143A72");
      goto LABEL_11;
    case 13:
      uint64_t v7 = @"7D6934D3-F9A8-4C49-9F66-83AB896A0C99";
      SystemAudioContextuint64_t Internal = FigRoutingContextCreateSystemInputContextInternal(@"7D6934D3-F9A8-4C49-9F66-83AB896A0C99");
      goto LABEL_11;
    case 14:
      uint64_t v7 = @"1E27F250-0404-42B1-BF7E-AE233EA5DBC8";
      SystemAudioContextuint64_t Internal = FigRoutingContextCreateSystemRemoteDisplayInternal(@"1E27F250-0404-42B1-BF7E-AE233EA5DBC8", (uint64_t)&cf);
LABEL_11:
      uint64_t v9 = SystemAudioContextInternal;
      if (SystemAudioContextInternal) {
        goto LABEL_22;
      }
      CFTypeRef v6 = cf;
LABEL_13:
      uint64_t v10 = routingManager_registerContextInternal(a1, v7, (uint64_t)v6, a2, 0);
      if (v10)
      {
        uint64_t v9 = v10;
LABEL_22:
        if (cf) {
          CFRelease(cf);
        }
      }
      else if (a3)
      {
        if (v7) {
          CFTypeRef v11 = CFRetain(v7);
        }
        else {
          CFTypeRef v11 = 0;
        }
        uint64_t v9 = 0;
        *a3 = v11;
      }
      else
      {
        return 0;
      }
      return v9;
    default:
      goto LABEL_13;
  }
}

void __FigRoutingManagerInit_block_invoke()
{
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  uint64_t v0 = (uint64_t)&qword_1E93587F0;
  if (!qword_1E93587F0) {
    uint64_t v0 = 8;
  }
  uint64_t v1 = *(NSObject **)v0;
  MXDispatchAsync((uint64_t)"FigRoutingManagerInit_block_invoke", (uint64_t)"FigRoutingManager.m", 1812, 0, 0, v1, (uint64_t)&__block_literal_global_24);
}

uint64_t FigRoutingManagerPerformPostInitOperations()
{
  CFTypeRef v4 = 0;
  if (FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce != -1) {
    dispatch_once(&FigRoutingManagerGetSharedManager_sFigRoutingManagerStateSetupOnce, &__block_literal_global_4);
  }
  if (FigRoutingManagerDoesDeviceAlwaysHaveAggregateForLocalPlayback())
  {
    FigRoutingManagerCreateAndActivateAggregateEndpointForLocalPlayback();
    uint64_t v0 = 0;
  }
  else
  {
    CFTypeRef cf = 0;
    uint64_t v1 = FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
    FigRoutingManagerInternal_CreateAirPlayAggregate(v1, cf, 0, &v4);
    if (v4) {
      uint64_t v0 = FigRoutingManager_iOSActivateEndpoint(v4, cf, 0, 0);
    }
    else {
      uint64_t v0 = 0;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v4)
    {
      CFRelease(v4);
      CFTypeRef v4 = 0;
    }
  }
  FigRoutingManagerCreateAndActivateSystemRemotePoolEndpoint();
  return v0;
}

uint64_t FigRoutingManagerDoesDeviceAlwaysHaveAggregateForLocalPlayback()
{
  if (!CMSMDeviceState_ItsAHomePod()) {
    CMSMDeviceState_ItsAnAppleTV();
  }
  return FigGetCFPreferenceNumberWithDefault();
}

CFTypeRef FigRoutingManagerCopyWHAGroupableVAEndpoint()
{
  CFTypeRef cf = 0;
  [+[MXEndpointDescriptorCache sharedInstance] getEndpointManagerForType:*MEMORY[0x1E4F20660]];
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v2 + 48);
  if (v3 && !v3(CMBaseObject, *MEMORY[0x1E4F20608], *MEMORY[0x1E4F1CF80], &cf))
  {
    CFIndex v6 = 0;
    while (1)
    {
      CFIndex Count = (CFIndex)cf;
      if (cf) {
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
      }
      if (v6 >= Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v6++);
      if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)ValueAtIndex))
      {
        if (!ValueAtIndex) {
          break;
        }
        CFTypeRef v4 = CFRetain(ValueAtIndex);
        goto LABEL_7;
      }
    }
  }
  CFTypeRef v4 = 0;
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

CFTypeRef FigRoutingManagerCopyLocalAirPlayEndpoint()
{
  if (![+[MXEndpointDescriptorCache sharedInstance] getEndpointManagerForType:*MEMORY[0x1E4F20638]])return 0; {
  CFTypeRef cf = 0;
  }
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  CFTypeRef v4 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v2 + 48);
  if (v4 && !v4(CMBaseObject, *MEMORY[0x1E4F20608], *MEMORY[0x1E4F1CF80], &cf))
  {
    CFIndex v6 = 0;
    while (1)
    {
      CFIndex Count = (CFIndex)cf;
      if (cf) {
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
      }
      if (v6 >= Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v6++);
      if (FigRoutingManagerIsEndpointNonRemoteControlLocalAirPlay((uint64_t)ValueAtIndex))
      {
        if (!ValueAtIndex) {
          break;
        }
        CFTypeRef v3 = CFRetain(ValueAtIndex);
        goto LABEL_9;
      }
    }
  }
  CFTypeRef v3 = 0;
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

CFTypeRef FigRoutingManagerCopyBluetoothEndpointAssociatedWithVAEndpoint()
{
  CFArrayRef theArray = 0;
  [+[MXEndpointDescriptorCache sharedInstance] getEndpointManagerForType:*MEMORY[0x1E4F20640]];
  uint64_t CMBaseObject = FigEndpointManagerGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  CFTypeRef v3 = *(unsigned int (**)(uint64_t, void, void, CFArrayRef *))(v2 + 48);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  if (v3(CMBaseObject, *MEMORY[0x1E4F20608], *MEMORY[0x1E4F1CF80], &theArray)) {
    return 0;
  }
  CFStringRef theString = 0;
  uint64_t v7 = FigEndpointGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, CFStringRef *))(v9 + 48);
  if (v10)
  {
    uint64_t v11 = *MEMORY[0x1E4F20E38];
    v10(v7, *MEMORY[0x1E4F20E38], v4, &theString);
    if (theString)
    {
      for (CFIndex i = 0; ; ++i)
      {
        CFIndex Count = (CFIndex)theArray;
        if (theArray) {
          CFIndex Count = CFArrayGetCount(theArray);
        }
        if (i >= Count) {
          goto LABEL_28;
        }
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        CFStringRef stringToFind = 0;
        uint64_t v15 = FigEndpointGetCMBaseObject();
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        unsigned int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFStringRef *))(v17 + 48);
        if (!v18) {
          goto LABEL_24;
        }
        int v19 = v18(v15, v11, v4, &stringToFind);
        CFStringRef v20 = stringToFind;
        if (stringToFind)
        {
          if (!v19) {
            break;
          }
        }
LABEL_25:
        if (v20) {
          CFRelease(v20);
        }
      }
      if (CFStringFind(theString, stringToFind, 0).location != -1)
      {
        if (ValueAtIndex) {
          CFTypeRef v5 = CFRetain(ValueAtIndex);
        }
        else {
          CFTypeRef v5 = 0;
        }
        if (stringToFind) {
          CFRelease(stringToFind);
        }
        goto LABEL_29;
      }
LABEL_24:
      CFStringRef v20 = stringToFind;
      goto LABEL_25;
    }
  }
LABEL_28:
  CFTypeRef v5 = 0;
LABEL_29:
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (theString) {
    CFRelease(theString);
  }
  return v5;
}

uint64_t FigRoutingManagerCopySelectedBufferedEndpointForTesting(uint64_t a1, uint64_t a2)
{
  v14[24] = *MEMORY[0x1E4F143B8];
  CFTypeRef v13 = 0;
  v14[0] = 0;
  CFTypeRef cf = 0;
  if (a2 && FigRoutingManagerContextUtilities_IsContextSidePlay(a1))
  {
    CFTypeRef v3 = routingMangager_copySelectedBufferedEndpointForSidePlay();
    CFTypeRef v4 = 0;
    v14[0] = v3;
  }
  else
  {
    FigRoutingManagerCopyPickedEndpointForRoutingContext(a1, &cf);
    CFTypeRef v3 = 0;
    CFTypeRef v4 = cf;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)v4)
    || FigRoutingManagerIsEndpointOfType((uint64_t)cf))
  {
    CFTypeRef v5 = cf;
    v14[0] = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v3) {
      CFRelease(v3);
    }
  }
  else if (FigRoutingManagerContextUtilities_GetContextType(a1) - 3 > 2)
  {
    CFTypeRef v5 = v3;
  }
  else
  {
    if (v3)
    {
      CFRelease(v3);
      v14[0] = 0;
    }
    FigRoutingManagerContextUtilities_CopyFigEndpointFromAggregateEndpointForClientUse(a1, (uint64_t)v14);
    CFTypeRef v5 = (CFTypeRef)v14[0];
  }
  if (v5)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v8 = v7 ? v7 : 0;
    uint64_t v9 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v8 + 48);
    if (v9) {
      v9(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &v13);
    }
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v13)
  {
    CFRelease(v13);
    CFTypeRef v13 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v14[0];
}

CFTypeRef routingMangager_copySelectedBufferedEndpointForSidePlay()
{
  CFTypeRef cf[21] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFArrayRef v2 = (const __CFArray *)FigRoutingManagerUtilities_CopySidePlayEndpoints();
  uint64_t v3 = 0;
  CFIndex v4 = 0;
  uint64_t v5 = *MEMORY[0x1E4F20E38];
  uint64_t v25 = *MEMORY[0x1E4F20F28];
  CFIndex v6 = &qword_1E9359000;
  CFAllocatorRef v24 = v0;
  if (!v2) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(v2); ; CFIndex i = 0)
  {
    if (v4 >= i)
    {
      CFTypeRef v22 = 0;
      goto LABEL_43;
    }
    uint64_t v8 = v6;
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v2, v4);
    cf[0] = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFTypeRef v13 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(CMBaseObject, v5, v0, cf);
    }
    CFTypeRef v26 = 0;
    uint64_t v14 = FigEndpointGetCMBaseObject();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v16 + 48);
    if (v17) {
      v17(v14, v25, v0, &v26);
    }
    CFStringAppendFormat(Mutable, 0, @"\t[%ld] endpointName=%@, endpointID=%@\n", v4, v26, cf[0]);
    CFIndex v6 = v8;
    if (!FigCFEqual())
    {
      unsigned int v18 = (const void *)v8[161];
      if (v18)
      {
        CFRelease(v18);
        v8[161] = 0;
      }
      if (v2)
      {
        v8[161] = (uint64_t)CFRetain(v2);
        CFIndex Count = CFArrayGetCount(v2);
      }
      else
      {
        CFIndex Count = 0;
        v8[161] = 0;
      }
      if (v4 == Count - 1)
      {
        if (dword_1E9359DC0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          CFAllocatorRef v0 = v24;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFIndex v6 = v8;
        }
      }
      else if (v4 && !(v3 + 5 * (v4 / 5uLL)))
      {
        if (dword_1E9359DC0)
        {
          uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFAllocatorRef v0 = v24;
          CFIndex v6 = v8;
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        CFMutableDictionaryRef Mutable = CFStringCreateMutable(v0, 0);
      }
    }
    if (FigCFEqual()) {
      break;
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    if (v26) {
      CFRelease(v26);
    }
    ++v4;
    --v3;
    if (v2) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  CFTypeRef v22 = CFRetain(ValueAtIndex);
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v26) {
    CFRelease(v26);
  }
LABEL_43:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v2) {
    CFRelease(v2);
  }
  return v22;
}

void FigRoutingManagerLogEndpointID(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (a2)
  {
    cf[0] = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (v8) {
      v8(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], cf);
    }
    if (a4 && dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
}

void FigRoutingManagerLogEndpointIDs(uint64_t a1, const __CFArray *a2, uint64_t a3, int a4)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v6 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (CFArrayGetCount(a2) >= 1)
    {
      CFIndex v8 = 0;
      uint64_t v9 = *MEMORY[0x1E4F20F28];
      do
      {
        CFArrayGetValueAtIndex(a2, v8);
        cf[0] = 0;
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        CFTypeRef v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v12 + 48);
        if (v13) {
          v13(CMBaseObject, v9, v6, cf);
        }
        CFStringAppendFormat(Mutable, 0, @"[%d]. %@ ", v8, cf[0]);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        ++v8;
      }
      while (v8 < CFArrayGetCount(a2));
    }
    if (a4 && dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

void FigRoutingManagerLogRoutingRequestDetails(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  v35[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v9 = *MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringRef theString = Mutable;
  if (a2)
  {
    uint64_t v11 = Mutable;
    v35[0] = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v28 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
    if (v28)
    {
      v28(CMBaseObject, *MEMORY[0x1E4F20F28], v9, v35);
      CFTypeRef v29 = v35[0];
    }
    else
    {
      CFTypeRef v29 = 0;
    }
    BOOL IsEndpointWHAGroupable = FigRoutingManagerIsEndpointWHAGroupable(a2);
    uint64_t v31 = "YES";
    if (!IsEndpointWHAGroupable) {
      uint64_t v31 = "NO";
    }
    CFStringAppendFormat(v11, 0, @"%@(isWHAGroupable=%s)", v29, v31);
    if (v35[0]) {
      CFRelease(v35[0]);
    }
  }
  else if (a3)
  {
    CFIndex Count = CFArrayGetCount(a3);
    CFIndex v16 = Count - 1;
    if (Count >= 1)
    {
      CFIndex v17 = Count;
      CFIndex v18 = 0;
      uint64_t v19 = *MEMORY[0x1E4F20F28];
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v18);
        v35[0] = 0;
        uint64_t v21 = FigEndpointGetCMBaseObject();
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        CFAllocatorRef v24 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v23 + 48);
        if (v24) {
          v24(v21, v19, v9, v35);
        }
        CFTypeRef v25 = v35[0];
        if (v35[0])
        {
          BOOL v26 = FigRoutingManagerIsEndpointWHAGroupable((uint64_t)ValueAtIndex);
          uint64_t v27 = "YES";
          if (!v26) {
            uint64_t v27 = "NO";
          }
          if (v16 == v18) {
            CFStringAppendFormat(theString, 0, @"%@(isWHAGroupable=%s)", v25, v27);
          }
          else {
            CFStringAppendFormat(theString, 0, @"%@(isWHAGroupable=%s), ", v25, v27);
          }
          if (v35[0]) {
            CFRelease(v35[0]);
          }
        }
        ++v18;
      }
      while (v17 != v18);
    }
  }
  FigCFDictionaryGetInt32IfPresent();
  CFStringRef v32 = FigRoutingManagerCopyClientNameFromPID(0);
  if (a6)
  {
    CFDictionaryGetValue(a6, @"initiator");
    CFDictionaryGetValue(a6, @"avoidAuthPrompt");
    CFDictionaryGetValue(a6, @"silentSender");
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (theString) {
    CFRelease(theString);
  }
  if (v32) {
    CFRelease(v32);
  }
}

CFStringRef FigRoutingManagerCopyClientNameFromPID(int a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  memset(v3, 0, sizeof(v3));
  if (a1 >= 1)
  {
    unsigned int v1 = proc_name(a1, v3, 0x80u);
    if ((v1 & 0x80000000) == 0) {
      *((unsigned char *)v3 + v1) = 0;
    }
  }
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v3, 0x8000100u);
}

__CFDictionary *FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(CFDictionaryRef theDict)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (theDict) {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  }
  else {
    MutableCFArrayRef Copy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  uint64_t v3 = MutableCopy;
  if (MutableCopy)
  {
    if ((CFDictionaryRef Value = CFDictionaryGetValue(MutableCopy, @"clientRouteRequestID")) != 0
      && (uint64_t v5 = CFRetain(Value)) != 0
      || (uint64_t v6 = mach_absolute_time(),
          uint64_t v5 = CFStringCreateWithFormat(v1, 0, @"%lld", v6),
          CFDictionarySetValue(v3, @"clientRouteRequestID", v5),
          v5))
    {
      CFRelease(v5);
    }
  }
  return v3;
}

__CFArray *FigRoutingManagerCreateArrayFromEndpoint(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, a1);
  return Mutable;
}

void FigRoutingManager_CloseRelayCommChannels(uint64_t a1)
{
  if (FigRoutingManager_GetDataTransmissionQueue_once != -1) {
    dispatch_once(&FigRoutingManager_GetDataTransmissionQueue_once, &__block_literal_global_4);
  }
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __FigRoutingManager_CloseRelayCommChannels_block_invoke;
  v2[3] = &__block_descriptor_40_e5_v8__0l;
  v2[4] = a1;
  MXDispatchSync((uint64_t)"FigRoutingManager_CloseRelayCommChannels", (uint64_t)"FigRoutingManager.m", 2499, 0, 0, FigRoutingManager_GetDataTransmissionQueue_dataTransmissionQueue, (uint64_t)v2);
}

void FigRoutingManagerHandleDescriptionChangedForRemoteDisplay(uint64_t a1, uint64_t a2)
{
  CFTypeRef v19 = 0;
  CFTypeRef v20 = 0;
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  if (a1 && a2)
  {
    FigRoutingManagerContextUtilities_CopySystemRemoteDisplayContextUUID((uint64_t)&v18);
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v18, 0, (uint64_t)&v17);
    uint64_t v2 = *MEMORY[0x1E4F20E38];
    uint64_t v3 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v6 + 48);
    if (v7) {
      v7(CMBaseObject, v2, v3, &v20);
    }
    if (v17)
    {
      uint64_t v8 = FigEndpointGetCMBaseObject();
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v10 = v9 ? v9 : 0;
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v10 + 48);
      if (v11) {
        v11(v8, v2, v3, &v19);
      }
    }
    if (FigCFEqual() || MXCFStringHasCaseInsensitivePrefix((const __CFString *)v19, (CFStringRef)v20))
    {
      CFTypeRef cf = 0;
      FigRoutingManagerContextUtilities_CopyCachedSelectedRouteDescriptors((uint64_t)v18, (uint64_t)&cf);
      CFDictionaryRef ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
      if (ValueAtIndex) {
        CFTypeRef v13 = CFRetain(ValueAtIndex);
      }
      else {
        CFTypeRef v13 = 0;
      }
      uint64_t v14 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)v17, 0);
      uint64_t v15 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v14, 0);
      FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext((uint64_t)v18, (uint64_t)v15);

      FigRoutingManagerContextUtilities_PostNotificationAndRouteDescriptorChangeToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v18);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v13) {
        CFRelease(v13);
      }
      if (v14) {
        CFRelease(v14);
      }
    }
  }
  if (v20)
  {
    CFRelease(v20);
    CFTypeRef v20 = 0;
  }
  if (v19)
  {
    CFRelease(v19);
    CFTypeRef v19 = 0;
  }
  if (v18)
  {
    CFRelease(v18);
    CFTypeRef v18 = 0;
  }
  if (v17) {
    CFRelease(v17);
  }
}

void FigRoutingManagerHandleAggregateFailure(uint64_t a1)
{
  v9[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFTypeRef cf = 0;
    v9[0] = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v3 + 48);
    if (!v4) {
      goto LABEL_15;
    }
    v4(CMBaseObject, *MEMORY[0x1E4F20F78], *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v5 = cf;
    if (!cf) {
      goto LABEL_15;
    }
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFTypeRef v5 = cf;
    }
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)v5, 0, (uint64_t)v9);
    if (FigCFEqual())
    {
      if (dword_1E9359DC0)
      {
        uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMSMUtility_InterruptSessionsWithRoutingContextUUID(cf);
      FigRoutingManagerPickEndpointsForContext(cf, 0, 0, 0);
    }
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
LABEL_15:
  if (v9[0]) {
    CFRelease(v9[0]);
  }
}

void __FigRoutingManagerHandleActivationTimeoutCallback_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo(*(void *)(a1 + 40), v2, @"configUpdateReasonEndedFailed");
    if (FigRoutingManagerIsEndpointActivated(*(void *)(a1 + 32)))
    {
      FigRoutingManagerLogEndpointID(@"CMSession/Routing: HandleActivationTimeoutCallback - Going to deactivate endpoint with name=", *(void *)(a1 + 32), 0, 1);
      uint64_t v5 = 0;
      FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint(*(void *)(a1 + 40), *(void *)(a1 + 32), (uint64_t)&v5);
      FigRoutingManager_iOSDeactivateEndpoint(*(const void **)(a1 + 32), v5);
    }
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t __FigRoutingManagerHandleActivationTimeoutCallback_block_invoke_2(uint64_t a1)
{
  return CMSMAP_MakeAirPlayHandOffPortRoutable(0, *(void *)(a1 + 32));
}

void *__getBluetoothEndpointManagerCreateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!BluetoothAudioLibraryCore_frameworkLibrary)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    _OWORD v5[2] = 3221225472;
    v5[3] = __BluetoothAudioLibraryCore_block_invoke;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E57C6388;
    uint64_t v7 = 0;
    BluetoothAudioLibraryCore_frameworkLibrary = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)BluetoothAudioLibraryCore_frameworkLibrary;
    if (BluetoothAudioLibraryCore_frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)BluetoothAudioLibraryCore_frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "BluetoothEndpointManagerCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBluetoothEndpointManagerCreateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BluetoothAudioLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BluetoothAudioLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t AirPlaySenderLibraryCore()
{
  if (!AirPlaySenderLibraryCore_frameworkLibrary) {
    AirPlaySenderLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return AirPlaySenderLibraryCore_frameworkLibrary;
}

uint64_t __AirPlaySenderLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AirPlaySenderLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getAPGetEndpointManagerSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AirPlaySenderLibrary();
  uint64_t result = dlsym(v2, "APGetEndpointManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAPGetEndpointManagerSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AirPlaySenderLibrary()
{
  uint64_t v0 = AirPlaySenderLibraryCore();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void *__getAPGetEndpointManagerCarPlaySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AirPlaySenderLibrary();
  uint64_t result = dlsym(v2, "APGetEndpointManagerCarPlay");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAPGetEndpointManagerCarPlaySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSPGetEndpointManagerSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AirPlaySenderLibrary();
  uint64_t result = dlsym(v2, "SPGetEndpointManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSPGetEndpointManagerSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t MediaToolboxLibraryCore()
{
  if (!MediaToolboxLibraryCore_frameworkLibrary) {
    MediaToolboxLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return MediaToolboxLibraryCore_frameworkLibrary;
}

uint64_t __MediaToolboxLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaToolboxLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getFigEndpointManagerForNeroGetSharedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaToolboxLibraryCore();
  if (!v2)
  {
    uint64_t v4 = (void *)abort_report_np();
    free(v4);
  }
  uint64_t result = dlsym(v2, "FigEndpointManagerForNeroGetShared");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFigEndpointManagerForNeroGetSharedSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __routingManager_registerContextInternal_block_invoke(uint64_t a1)
{
  routingManager_notifyRoutingContextChanged();
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t MXSystemAudio_PickRouteDescriptor(const void *a1, CFDictionaryRef theDict, const __CFDictionary *a3, const __CFDictionary *a4)
{
  value[16] = *(void **)MEMORY[0x1E4F143B8];
  if (theDict) {
    CFDictionaryGetValue(theDict, @"RouteName");
  }
  uint64_t v8 = &qword_1E9359000;
  if (dword_1E9359DC0)
  {
    LODWORD(v115) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v8 = &qword_1E9359000;
  }
  if (FigCFDictionaryGetCount())
  {
    CFDictionaryRef v10 = (const __CFDictionary *)FigEndpointDescriptorUtility_CopyEndpointFromDescriptor((uint64_t)theDict, (uint64_t)a1);
    if (!v10)
    {
      LODWORD(v115) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFDictionaryRef v10 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a1, v10, @"configUpdateReasonEndedFailed");
      uint64_t v15 = 4294954296;
      goto LABEL_162;
    }
  }
  else
  {
    CFDictionaryRef v10 = 0;
  }
  CFTypeRef v106 = 0;
  int ContextType = (const void *)FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (theDict && ContextType == 3)
  {
    uint64_t v14 = CFDictionaryGetValue(theDict, @"RouteSupportsAirPlayMusic");
    if (v14 != (const void *)*MEMORY[0x1E4F1CFD0])
    {
      if (dword_1E9359DC0) {
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (CFDictionaryGetValue(theDict, @"IsWHAGroupable") != v14)
    {
      if (dword_1E9359DC0) {
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (!FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
    {
      if (dword_1E9359DC0)
      {
LABEL_21:
        LODWORD(v115) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        CFTypeRef v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_22:
      FigRoutingContextUtilities_SetLeaderToSystemAudioContext(a1, 0);
      int ContextType = (const void *)FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&v106);
      goto LABEL_23;
    }
    if (dword_1E9359DC0)
    {
      LODWORD(v115) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      CFIndex v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int ContextType = (const void *)FigRoutingContextUtilities_CopyLeaderUUIDForContext((uint64_t)a1, (uint64_t)&v106);
  }
LABEL_23:
  CFTypeRef v18 = v106;
  if (!v106)
  {
    if (!a1 || (ContextType = CFRetain(a1), CFTypeRef v18 = ContextType, (v106 = ContextType) == 0))
    {
      uint64_t v15 = 0;
      goto LABEL_162;
    }
  }
  FigRoutingContextUtilities_LogCurrentState(ContextType, v13);
  CFTypeRef v115 = 0;
  CFTypeRef v19 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v10)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v22 = v21 ? v21 : 0;
    uint64_t v23 = *(void (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v22 + 48);
    if (v23) {
      v23(CMBaseObject, *MEMORY[0x1E4F20F28], *v19, &v115);
    }
  }
  uint64_t v104 = (uint64_t)a1;
  CFAllocatorRef v24 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(a3);
  FigRoutingManagerLogRoutingRequestDetails(@"preprocessPickEndpoint - ", (uint64_t)v10, 0, 0, (uint64_t)v18, v24);
  *(void *)os_log_type_t type = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)v18, (uint64_t)type);
  if (!*(void *)type) {
    goto LABEL_49;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)type);
  if (Count < 1) {
    goto LABEL_49;
  }
  CFIndex v26 = Count;
  if (CFArrayGetValueAtIndex(*(CFArrayRef *)type, 0) != v10)
  {
    CFIndex v27 = 1;
    while (1)
    {
      CFIndex v28 = v27;
      if (v26 == v27) {
        break;
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)type, v27);
      CFIndex v27 = v28 + 1;
      if (ValueAtIndex == v10)
      {
        uint64_t v30 = v28;
        goto LABEL_42;
      }
    }
    uint64_t v30 = 0;
LABEL_42:
    if (v28 < v26) {
      goto LABEL_43;
    }
LABEL_49:
    CFArrayRef theArray = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v18, (uint64_t)&theArray);
    CFAllocatorRef allocator = *v19;
    CFMutableStringRef Mutable = CFArrayCreateMutable(*v19, 0, MEMORY[0x1E4F1D510]);
    int v35 = Mutable;
    if (v10) {
      CFArrayAppendValue(Mutable, v10);
    }
    int v36 = FigCFEqual();
    if (v35) {
      CFRelease(v35);
    }
    if (!v36) {
      goto LABEL_104;
    }
    if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)v18) != 1)
    {
LABEL_103:
      FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v18, v24, a4);
      uint64_t v15 = 0;
      goto LABEL_152;
    }
    CFDictionaryRef v98 = a3;
    char v37 = CMSMUtility_CopyCurrentRouteIdentifiers();
    unsigned int NumberOfCurrentOutputPorts = CMSMUtility_GetNumberOfCurrentOutputPorts();
    if (theArray)
    {
      CFIndex v39 = CFArrayGetCount(theArray);
      int v40 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
      if (v39 >= 1)
      {
        uint64_t v99 = v24;
        CFDictionaryRef v41 = a4;
        CFIndex v42 = 0;
        uint64_t v43 = *MEMORY[0x1E4F20E38];
        do
        {
          CFArrayGetValueAtIndex(theArray, v42);
          value[0] = 0;
          uint64_t v44 = FigEndpointGetCMBaseObject();
          uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v45) {
            uint64_t v46 = v45;
          }
          else {
            uint64_t v46 = 0;
          }
          uint64_t v47 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, void **))(v46 + 48);
          if (v47) {
            v47(v44, v43, allocator, value);
          }
          if (value[0])
          {
            CFArrayAppendValue(v40, value[0]);
            if (value[0]) {
              CFRelease(value[0]);
            }
          }
          ++v42;
        }
        while (v39 != v42);
        a4 = v41;
        CFAllocatorRef v24 = v99;
      }
    }
    else
    {
      int v40 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    }
    if (FigCFEqual())
    {
      int v48 = 0;
      LODWORD(v49) = 0;
      char v50 = 1;
      goto LABEL_96;
    }
    unsigned int v100 = v24;
    CFDictionaryRef v96 = a4;
    uint64_t v51 = NumberOfCurrentOutputPorts;
    int v103 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    if (NumberOfCurrentOutputPorts)
    {
      CFIndex v52 = 0;
      uint64_t v53 = *MEMORY[0x1E4F20660];
      uint64_t v102 = *MEMORY[0x1E4F20638];
      do
      {
        long long v54 = CFArrayGetValueAtIndex(v37, v52);
        uint64_t v55 = FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v54, 0, v53, (uint64_t)v18);
        if (v55)
        {
          uint64_t v56 = (const void *)v55;
          value[0] = 0;
          uint64_t v57 = FigEndpointGetCMBaseObject();
          uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v58) {
            uint64_t v59 = v58;
          }
          else {
            uint64_t v59 = 0;
          }
          char v60 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, void **))(v59 + 48);
          if (v60) {
            v60(v57, 0x1EE5F4288, allocator, value);
          }
          unsigned int PortFromCFNumber = CMSMVAUtility_GetPortFromCFNumber((const __CFNumber *)value[0]);
          if (PortFromCFNumber == 1885433971 || PortFromCFNumber == 1885433953)
          {
            CFRelease(v56);
            uint64_t v56 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)v54, 1, v102, (uint64_t)v18);
          }
          if (value[0]) {
            CFRelease(value[0]);
          }
          if (v56)
          {
            CFArrayAppendValue(v103, v56);
            CFRelease(v56);
          }
        }
        ++v52;
      }
      while (v51 != v52);
    }
    int v48 = v103;
    if (v103)
    {
      if (!FigCFEqual())
      {
        uint64_t v49 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v103, 0);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(v18, v103, 0, 0, (uint64_t)v49);
        if (dword_1E9359DC0)
        {
          *(_DWORD *)uint64_t v112 = 0;
          LOBYTE(cf) = 0;
          unsigned int v87 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v88 = *(_DWORD *)v112;
          if (os_log_type_enabled(v87, (os_log_type_t)cf)) {
            unsigned int v89 = v88;
          }
          else {
            unsigned int v89 = v88 & 0xFFFFFFFE;
          }
          if (v89)
          {
            *(_DWORD *)unsigned int v116 = 136315138;
            *(void *)&v116[4] = "mxSystemAudio_preprocessPickEndpoint";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v48 = v103;
        }
        a4 = v96;
        CFAllocatorRef v24 = v100;
        if (v49)
        {
          CFRelease(v49);
          char v50 = 0;
          LODWORD(v49) = 0;
        }
        else
        {
          char v50 = 0;
        }
LABEL_96:
        if (v40) {
          CFRelease(v40);
        }
        if (v37) {
          CFRelease(v37);
        }
        uint64_t v8 = &qword_1E9359000;
        if ((v50 & 1) == 0) {
          CFRelease(v48);
        }
        a3 = v98;
        if (v49) {
          goto LABEL_103;
        }
LABEL_104:
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v18, 1);
        FigRoutingManagerContextUtilities_AddCurrentlyActivatingEndpoint(v104, (uint64_t)v18, (uint64_t)v10, (uint64_t)v24, (uint64_t)a4);
        if (!v10)
        {
          if (FigRoutingManagerContextUtilities_GetContextType((uint64_t)v18) == 1) {
            uint64_t v15 = 4294954296;
          }
          else {
            uint64_t v15 = mxSystemAudio_processPickEndpoint(0, v18, v24, a4);
          }
LABEL_152:
          CFArrayRef v63 = theArray;
          if (theArray) {
            CFRelease(theArray);
          }
          goto LABEL_154;
        }
        *(void *)uint64_t v112 = 0;
        if (FigRoutingManagerIsEndpointOfType((uint64_t)v10))
        {
          uint64_t v64 = FigEndpointGetCMBaseObject();
          uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v66 = v65 ? v65 : 0;
          unsigned int v67 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, os_log_type_t *))(v66 + 48);
          if (v67) {
            v67(v64, 0x1EE5F43E8, allocator, v112);
          }
        }
        if (!FigRoutingManagerIsEndpointOfType((uint64_t)v10)
          && (!FigRoutingManagerIsEndpointOfType((uint64_t)v10) || !FigCFEqual()))
        {
          if (FigRoutingManagerIsEndpointOfType((uint64_t)v10)
            || FigRoutingManagerIsEndpointOfType((uint64_t)v10))
          {
            uint64_t v15 = mxSystemAudio_processPickEndpoint(v10, v18, v24, a4);
          }
          else
          {
            uint64_t v15 = 0;
          }
LABEL_150:
          if (*(void *)v112) {
            CFRelease(*(CFTypeRef *)v112);
          }
          goto LABEL_152;
        }
        uint64_t v110 = 0;
        CFTypeRef cf = 0;
        FigRoutingManagerUtilities_CopyCurrentlyPickedAirPlayEndpoint(&v110, &cf, 0);
        int v68 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)cf);
        if (MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed() && v110 && v68 == 2)
        {
          if (FigCFEqual())
          {
            if (*((_DWORD *)v8 + 880))
            {
              LODWORD(v109) = 0;
              v108[0] = OS_LOG_TYPE_DEFAULT;
              uint64_t v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v70 = v109;
              if (os_log_type_enabled(v69, v108[0])) {
                unsigned int v71 = v70;
              }
              else {
                unsigned int v71 = v70 & 0xFFFFFFFE;
              }
              if (v71)
              {
                *(_DWORD *)unsigned int v116 = 136315394;
                *(void *)&v116[4] = "mxSystemAudio_preprocessPickEndpoint";
                __int16 v117 = 2114;
                CFTypeRef v118 = v115;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            value[0] = 0;
            FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)v18, (uint64_t)v10, (uint64_t)value);
            uint64_t FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures((uint64_t)v10, (uint64_t)v18);
            MXSystemMirroring_iOSHandleEndpointAudioActivation(v10, FigEndpointFeatures, (uint64_t)value[0], v18, a3);
            FigRoutingContextUtilities_LogCurrentState(v91, v92);
            if (theArray)
            {
              CFRelease(theArray);
              CFArrayRef theArray = 0;
            }
            if (v24) {
              CFRelease(v24);
            }
            if (v115)
            {
              CFRelease(v115);
              CFTypeRef v115 = 0;
            }
            if (*(void *)type) {
              CFRelease(*(CFTypeRef *)type);
            }
            uint64_t v15 = 0;
            goto LABEL_160;
          }
          CFDictionaryRef v101 = v24;
          CFDictionaryRef v97 = a4;
          if (!v110) {
            goto LABEL_134;
          }
        }
        else
        {
          CFDictionaryRef v101 = v24;
          CFDictionaryRef v97 = a4;
          if (!v110) {
            goto LABEL_134;
          }
        }
        if (!FigRoutingManagerUtilities_IsCurrentRouteHandoff())
        {
          FigRoutingManagerContextUtilities_SetPickingState((uint64_t)v18, 2);
          CMSMAP_MakeAirPlayHandOffPortRoutable(1, (uint64_t)v18);
          uint64_t v109 = 0;
          FigEndpointCopyProperty((uint64_t)v110, *MEMORY[0x1E4F20F28], (uint64_t)allocator, (uint64_t)&v109);
          if (FigRoutingManagerIsEndpointOfType((uint64_t)v110))
          {
            CFDictionaryRef v83 = v97;
            if (*((_DWORD *)v8 + 880))
            {
              *(_DWORD *)int v108 = 0;
              os_log_type_t v107 = OS_LOG_TYPE_DEFAULT;
              int v84 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v85 = *(_DWORD *)v108;
              if (os_log_type_enabled(v84, v107)) {
                unsigned int v86 = v85;
              }
              else {
                unsigned int v86 = v85 & 0xFFFFFFFE;
              }
              if (v86)
              {
                *(_DWORD *)unsigned int v116 = 136315650;
                *(void *)&v116[4] = "mxSystemAudio_preprocessPickEndpoint";
                __int16 v117 = 2114;
                CFTypeRef v118 = v109;
                __int16 v119 = 2114;
                CFTypeRef v120 = v115;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            value[0] = 0;
            FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)cf, (uint64_t)v110, (uint64_t)value);
            FigRoutingManager_iOSDeactivateEndpoint(v110, (uint64_t)value[0]);
            if (v68 != 1) {
              FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, 0, @"configUpdateReasonEndedBottomUpRouteChange", 0, 0);
            }
            CFAllocatorRef v24 = v101;
          }
          else
          {
            CFDictionaryRef v83 = v97;
            CFAllocatorRef v24 = v101;
            if (FigRoutingManagerIsEndpointOfType((uint64_t)v110))
            {
              if (*((_DWORD *)v8 + 880))
              {
                *(_DWORD *)int v108 = 0;
                os_log_type_t v107 = OS_LOG_TYPE_DEFAULT;
                uint64_t v93 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v94 = *(_DWORD *)v108;
                if (os_log_type_enabled(v93, v107)) {
                  unsigned int v95 = v94;
                }
                else {
                  unsigned int v95 = v94 & 0xFFFFFFFE;
                }
                if (v95)
                {
                  *(_DWORD *)unsigned int v116 = 136315394;
                  *(void *)&v116[4] = "mxSystemAudio_preprocessPickEndpoint";
                  __int16 v117 = 2114;
                  CFTypeRef v118 = v115;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)v110, cf, 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
              CMSMVAUtility_DestroyMusicVADIfNeeded((uint64_t)cf);
              FigRoutingManagerContextUtilities_SetPickedEndpoints(cf, 0, @"configUpdateReasonEndedBottomUpRouteChange", 0, 0);
            }
          }
          uint64_t v15 = mxSystemAudio_processPickEndpoint(v10, v18, v24, v83);
          uint64_t v81 = v109;
          if (!v109) {
            goto LABEL_148;
          }
LABEL_147:
          CFRelease(v81);
LABEL_148:
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_150;
        }
LABEL_134:
        value[0] = 0;
        *(void *)unsigned int v116 = 0;
        FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(-1, (CFMutableArrayRef *)value, (CFMutableArrayRef *)v116, 0, 0);
        if (value[0])
        {
          CFIndex v72 = CFArrayGetCount((CFArrayRef)value[0]);
          if (v72 >= 1)
          {
            CFIndex v73 = v72;
            for (CFIndex i = 0; i != v73; ++i)
            {
              CFDictionaryRef v75 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)value[0], i);
              CFTypeRef v76 = CFArrayGetValueAtIndex(*(CFArrayRef *)v116, i);
              if (v75 != v10 || v76 != v18)
              {
                unsigned int v78 = v76;
                uint64_t v79 = FigRoutingManagerGetFigEndpointFeatures((uint64_t)v75, (uint64_t)v76);
                CFMutableDictionaryRef v80 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                FigCFDictionarySetValue();
                uint64_t v109 = 0;
                FigRoutingManagerCreateEndpointDeactivateCompletionContext(v78, &v109);
                FigRoutingManagerLogEndpointID(@"Preprocess - Calling to deactivate endpoint with name=", (uint64_t)v75, 0, 1);
                FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)v78, (uint64_t)v75, @"configUpdateReasonEndedUserCancelled");
                FigRoutingManagerEndpointDeactivateWithCompletionCallback((uint64_t)v75, v79, (uint64_t)v80, (void (*)(void, uint64_t, void, void, uint64_t))FigRoutingManager_iOSEndpointDeactivateCompletionCallback, (uint64_t)v109);
                if (v80) {
                  CFRelease(v80);
                }
              }
            }
          }
        }
        CFAllocatorRef v24 = v101;
        uint64_t v15 = mxSystemAudio_processPickEndpoint(v10, v18, v101, v97);
        if (value[0])
        {
          CFRelease(value[0]);
          value[0] = 0;
        }
        uint64_t v81 = *(const void **)v116;
        if (!*(void *)v116) {
          goto LABEL_148;
        }
        goto LABEL_147;
      }
      char v50 = 0;
      LODWORD(v49) = 1;
    }
    else
    {
      LODWORD(v49) = 0;
      char v50 = 1;
    }
    a4 = v96;
    CFAllocatorRef v24 = v100;
    goto LABEL_96;
  }
  uint64_t v30 = 0;
LABEL_43:
  if (dword_1E9359DC0)
  {
    LODWORD(theArray) = 0;
    v112[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v32 = theArray;
    if (os_log_type_enabled(v31, v112[0])) {
      unsigned int v33 = v32;
    }
    else {
      unsigned int v33 = v32 & 0xFFFFFFFE;
    }
    if (v33)
    {
      *(_DWORD *)unsigned int v116 = 136315394;
      *(void *)&v116[4] = "mxSystemAudio_preprocessPickEndpoint";
      __int16 v117 = 2114;
      CFTypeRef v118 = v115;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  value[0] = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex((uint64_t)v18, v30, (uint64_t)value);
  FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex((uint64_t)v18, v30);
  FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo((uint64_t)v18, (uint64_t)value[0]);
  FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)v18, v24, a4);
  CFArrayRef v63 = (CFArrayRef)value[0];
  if (value[0]) {
    CFRelease(value[0]);
  }
  uint64_t v15 = 0;
LABEL_154:
  FigRoutingContextUtilities_LogCurrentState(v63, v62);
  if (v24) {
    CFRelease(v24);
  }
  if (v115)
  {
    CFRelease(v115);
    CFTypeRef v115 = 0;
  }
  if (*(void *)type) {
    CFRelease(*(CFTypeRef *)type);
  }
LABEL_160:
  if (v106) {
    CFRelease(v106);
  }
LABEL_162:
  if (v10) {
    CFRelease(v10);
  }
  return v15;
}

uint64_t FigEndpointCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v13)
  {
    return v13(CMBaseObject, a2, a3, a4);
  }
  return result;
}

uint64_t mxSystemAudio_processPickEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t ContextType = FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 3);
  uint64_t v10 = ContextType;
  if (a1)
  {
    if (!ContextType)
    {
      uint64_t ContextType = FigRoutingManager_iOSActivateEndpoint(a1, a2, a3, a4);
      uint64_t v10 = ContextType;
    }
  }
  else
  {
    uint64_t ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a2);
    if (ContextType)
    {
      CFTypeRef cf = 0;
      uint64_t ContextType = FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)&cf);
      if (cf)
      {
        FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, @"configUpdateReasonEndedSuccess", (uint64_t)a3, 0);
        uint64_t v12 = 0;
        FigRoutingManagerContextUtilities_GetActivationSeedForEndpoint((uint64_t)a2, (uint64_t)cf, (uint64_t)&v12);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
        {
          FigRoutingManagerLogEndpointID(@"Going to deactivate endpoint with name=", (uint64_t)cf, @"because user selected NULL", 1);
          FigRoutingManager_iOSDeactivateEndpoint(cf, v12);
        }
        uint64_t ContextType = (uint64_t)cf;
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
  FigRoutingContextUtilities_LogCurrentState(ContextType, v9);
  return v10;
}

uint64_t MXFinishUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t MXBeginUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t MXEnsureReadyToCollectIncrementalCoverageData()
{
  return 4294949395;
}

uint64_t MXSetCodeCoverageFilePathPattern()
{
  return 4294949395;
}

void sub_194D893D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194D89E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMSMStrings_Check()
{
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  FigCFEqual();
  return FigCFEqual();
}

void sub_194D8CB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
}

void sub_194D8CC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_194D8CD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

__CFDictionary *FVIOKit_CreateIntensityDictionary(float a1)
{
  unsigned int valuePtr = vcvts_n_s32_f32(a1, 0x10uLL);
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v3 = CFNumberCreate(v1, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v4 = v3;
  if (Mutable) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CFDictionarySetValue(Mutable, @"intensity", v3);
LABEL_9:
    CFRelease(v4);
    return Mutable;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFMutableStringRef Mutable = 0;
  uint64_t result = 0;
  if (v4) {
    goto LABEL_9;
  }
  return result;
}

__CFArray *FVIOKit_VibePatternArrayCreateDefault(float a1)
{
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D510]);
  IntensityDictionary = FVIOKit_CreateIntensityDictionary(a1);
  CFNumberRef v4 = IntensityDictionary;
  if (Mutable) {
    BOOL v5 = IntensityDictionary == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CFArrayAppendValue(Mutable, IntensityDictionary);
    CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E4F1CFD0]);
    uint64_t v7 = (const void *)*MEMORY[0x1E4F1CFC8];
    CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E4F1CFC8]);
    CFArrayAppendValue(Mutable, v7);
LABEL_9:
    CFRelease(v4);
    return Mutable;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFMutableStringRef Mutable = 0;
  uint64_t result = 0;
  if (v4) {
    goto LABEL_9;
  }
  return result;
}

uint64_t FVIOKit_ConvertFigTimeToMillisec(CMTime *a1)
{
  memset(&v4, 0, sizeof(v4));
  CMTime v3 = *a1;
  CMTimeConvertScale(&v4, &v3, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  if ((v4.flags & 0x1D) != 1) {
    return 0;
  }
  CMTimeValue value = v4.value;
  if (v4.value >= 0x7FFFFFFF) {
    CMTimeValue value = 0x7FFFFFFFLL;
  }
  return value & ~(value >> 63);
}

uint64_t FVIOKit_StartIOServiceVibration(uint64_t a1, int a2, int a3, int a4, float a5)
{
  if (*(_DWORD *)(a1 + 24)
    && (a2 <= 1 ? (int v6 = 1) : (int v6 = a2),
        a3 <= 1 ? (int v7 = 1) : (int v7 = a3),
        (int v19 = v7, valuePtr = v6, *(void *)(a1 + 32)) && (Default = FVIOKit_VibePatternArrayCreateDefault(a5)) != 0))
  {
    uint64_t v10 = Default;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"hertz_millisecs", Default);
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (v12
      && (CFNumberRef v13 = v12,
          CFArraySetValueAtIndex(v10, 1, v12),
          CFRelease(v13),
          (CFNumberRef v14 = CFNumberCreate(v11, kCFNumberIntType, &v19)) != 0))
    {
      CFNumberRef v15 = v14;
      CFArraySetValueAtIndex(v10, 3, v14);
      CFRelease(v15);
      CFIndex v16 = (const void **)MEMORY[0x1E4F1CFC8];
      if (a4) {
        CFIndex v16 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"repeat", *v16);
      if (*(unsigned char *)(a1 + 20))
      {
        notify_set_state(*(_DWORD *)(a1 + 16), 1uLL);
        notify_post("com.apple.coremedia.vibration");
      }
      FigVibratorPostNotification(@"VibeWillStart");
      IORegistryEntrySetCFProperties(*(_DWORD *)(a1 + 24), *(CFTypeRef *)(a1 + 32));
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = FigSignalErrorAt();
    }
    CFRelease(v10);
    return v17;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FVIOKit_StartIOServiceVibrationWithPattern(uint64_t a1, void *value)
{
  if (value && *(_DWORD *)(a1 + 24) && (CMTime v3 = *(__CFDictionary **)(a1 + 32)) != 0)
  {
    CFDictionarySetValue(v3, @"hertz_millisecs", value);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"repeat", (const void *)*MEMORY[0x1E4F1CFC8]);
    if (*(unsigned char *)(a1 + 20))
    {
      notify_set_state(*(_DWORD *)(a1 + 16), 1uLL);
      notify_post("com.apple.coremedia.vibration");
    }
    FigVibratorPostNotification(@"VibeWillStart");
    IORegistryEntrySetCFProperties(*(_DWORD *)(a1 + 24), *(CFTypeRef *)(a1 + 32));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FVIOKit_StopVibrator(uint64_t a1)
{
  io_registry_entry_t v2 = *(_DWORD *)(a1 + 24);
  if (v2)
  {
    IORegistryEntrySetCFProperties(v2, *(CFTypeRef *)(a1 + 40));
    if (*(unsigned char *)(a1 + 20))
    {
      notify_set_state(*(_DWORD *)(a1 + 16), 0);
      notify_post("com.apple.coremedia.vibration");
    }
    FigVibratorPostNotification(@"VibeWillStop");
    if (*(unsigned char *)(a1 + 112) && *(void *)(a1 + 120))
    {
      CFDictionaryRef v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigVibratorNotificationKey_VibeStopped_Context, (const void **)(a1 + 120), 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CMTime v4 = *(NSObject **)(a1 + 8);
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 0x40000000;
      v7[2] = __FVIOKit_StopVibrator_block_invoke;
      v7[3] = &__block_descriptor_tmp;
      void v7[4] = a1;
      void v7[5] = v3;
      MXDispatchAsync((uint64_t)"FVIOKit_StopVibrator", (uint64_t)"FigVibrator_IOKit.c", 250, 0, 0, v4, (uint64_t)v7);
      BOOL v5 = *(const void **)(a1 + 120);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(a1 + 12CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = 0;
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FVIOKit_PlayVibration(CMTime *a1, CMTime *a2, CMTime *a3, const void *a4, float a5)
{
  if (!gFVInfo) {
    return 4294950806;
  }
  if (a5 >= 0.0 && a5 <= 1.0)
  {
    if ((a1->flags & 0x1D) != 1) {
      return FigSignalErrorAt();
    }
    CMTime time1 = *a1;
    long long v44 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    time2.epoch = v11;
    if (CMTimeCompare(&time1, &time2) == -1) {
      return FigSignalErrorAt();
    }
    uint64_t v12 = MEMORY[0x199716EE0](*(void *)gFVInfo);
    if (!v12)
    {
      if ((a2->flags & 0x1D) == 1
        && (time1 = *a2, *(_OWORD *)&time2.CMTimeValue value = v44, time2.epoch = v11, CMTimeCompare(&time1, &time2) == 1)
        && (a3->flags & 0x1D) == 1
        && (time1 = *a3, *(_OWORD *)&time2.CMTimeValue value = v44, time2.epoch = v11, CMTimeCompare(&time1, &time2) == 1))
      {
        CMTime time1 = *a1;
        CMTime time2 = *a2;
        if (CMTimeCompare(&time1, &time2) == -1
          || (time1 = *a2, CMTime time2 = *a3, CMTimeCompare(&time1, &time2) == -1)
          || (time1 = *a3, *(_OWORD *)&time2.CMTimeValue value = v44, time2.epoch = v11, CMTimeCompare(&time1, &time2) == -1))
        {
          uint64_t started = 4294950805;
          goto LABEL_53;
        }
        CMTime time1 = *a2;
        CMTime time2 = *(CMTime *)(gFVInfo + 72);
        if (CMTimeCompare(&time1, &time2) == -1)
        {
          memset(&time1, 0, sizeof(time1));
          CMTime time2 = *(CMTime *)(gFVInfo + 48);
          CMTimeMultiply(&time1, &time2, 2);
          CMTime time2 = *a2;
          CMTime rhs = time1;
          if (CMTimeCompare(&time2, &rhs) == -1) {
            *a2 = time1;
          }
        }
        else
        {
          long long v13 = *(_OWORD *)(gFVInfo + 72);
          a2->epoch = *(void *)(gFVInfo + 88);
          *(_OWORD *)&a2->CMTimeValue value = v13;
        }
        CMTime time1 = *a3;
        CMTime time2 = *(CMTime *)(gFVInfo + 48);
        if (CMTimeCompare(&time1, &time2) == -1)
        {
          long long v43 = *(_OWORD *)(gFVInfo + 48);
          a3->epoch = *(void *)(gFVInfo + 64);
          *(_OWORD *)&a3->CMTimeValue value = v43;
        }
        memset(&time1, 0, sizeof(time1));
        CMTime time2 = *a2;
        CMTime rhs = *(CMTime *)(gFVInfo + 48);
        CMTimeSubtract(&time1, &time2, &rhs);
        CMTime time2 = *a3;
        CMTime rhs = time1;
        if (CMTimeCompare(&time2, &rhs) != 1)
        {
LABEL_24:
          if (!*(unsigned char *)(gFVInfo + 112))
          {
            if (IOPMAssertionCreateWithName(@"NoIdleSleepAssertion", 0xFFu, @"coremedia-vibrating", (IOPMAssertionID *)(gFVInfo + 108)))
            {
              BOOL v21 = 0;
            }
            else
            {
              BOOL v21 = *(_DWORD *)(gFVInfo + 108) != 0;
            }
            *(unsigned char *)(gFVInfo + 104) = v21;
            CMTime time1 = *a1;
            CMTime time2 = *a2;
            int32_t v27 = CMTimeCompare(&time1, &time2);
            uint64_t v28 = gFVInfo;
            if (v27 == 1)
            {
              CMTime time1 = *a2;
              int v29 = FVIOKit_ConvertFigTimeToMillisec(&time1);
              CMTime time1 = *a3;
              int v30 = FVIOKit_ConvertFigTimeToMillisec(&time1);
              int v31 = v29 - v30;
              uint64_t v32 = v28;
              float v33 = a5;
              int v34 = 1;
            }
            else
            {
              CMTime time1 = *a3;
              int v30 = FVIOKit_ConvertFigTimeToMillisec(&time1);
              uint64_t v32 = v28;
              float v33 = a5;
              int v31 = 0;
              int v34 = 0;
            }
            uint64_t started = FVIOKit_StartIOServiceVibration(v32, v30, v31, v34, v33);
            uint64_t v35 = gFVInfo;
            if (started)
            {
              if (*(unsigned char *)(gFVInfo + 104))
              {
                IOPMAssertionRelease(*(_DWORD *)(gFVInfo + 108));
                uint64_t v36 = gFVInfo;
                *(unsigned char *)(gFVInfo + 104) = 0;
                *(_DWORD *)(v36 + 108) = 0;
              }
              goto LABEL_53;
            }
            *(unsigned char *)(gFVInfo + 112) = 1;
            *(unsigned char *)(v35 + 192) = 0;
            char v37 = *(const void **)(v35 + 120);
            *(void *)(v35 + 12CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = a4;
            if (a4) {
              CFRetain(a4);
            }
            if (v37) {
              CFRelease(v37);
            }
            CMTime time2 = *a1;
            CMTimeConvertScale(&time1, &time2, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            *a1 = time1;
            dispatch_time_t v38 = dispatch_time(0, a1->value);
            dispatch_source_set_timer(*(dispatch_source_t *)(gFVInfo + 96), (unint64_t)(double)v38, 0xFFFFFFFFFFFFFFFFLL, 0);
            goto LABEL_52;
          }
          if (*(unsigned char *)(gFVInfo + 192))
          {
            uint64_t started = 4294950801;
LABEL_53:
            MEMORY[0x199716EF0](*(void *)gFVInfo);
            return started;
          }
          double Current = CFAbsoluteTimeGetCurrent();
          CMTime time1 = *a1;
          double v23 = Current + CMTimeGetSeconds(&time1);
          uint64_t v24 = gFVInfo;
          if (*(unsigned char *)(gFVInfo + 192))
          {
            if (*(double *)(gFVInfo + 136) < v23)
            {
              *(double *)(gFVInfo + 136) = v23;
              long long v25 = *(_OWORD *)&a3->value;
              *(void *)(v24 + 184) = a3->epoch;
              *(_OWORD *)(v24 + 168) = v25;
              long long v26 = *(_OWORD *)&a2->value;
              *(void *)(v24 + 16CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = a2->epoch;
              *(_OWORD *)(v24 + 144) = v26;
            }
            if (*(float *)(v24 + 208) >= a5) {
              goto LABEL_48;
            }
          }
          else
          {
            *(double *)(gFVInfo + 136) = v23;
            long long v39 = *(_OWORD *)&a3->value;
            *(void *)(v24 + 184) = a3->epoch;
            *(_OWORD *)(v24 + 168) = v39;
            long long v40 = *(_OWORD *)&a2->value;
            *(void *)(v24 + 16CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = a2->epoch;
            *(_OWORD *)(v24 + 144) = v40;
          }
          *(float *)(v24 + 208) = a5;
LABEL_48:
          *(unsigned char *)(v24 + 192) = 1;
          CFDictionaryRef v41 = *(const void **)(v24 + 200);
          *(void *)(v24 + 20CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = a4;
          if (a4) {
            CFRetain(a4);
          }
          if (v41) {
            CFRelease(v41);
          }
LABEL_52:
          uint64_t started = 0;
          goto LABEL_53;
        }
      }
      else
      {
        CMTime time1 = *a1;
        CMTime time2 = *(CMTime *)(gFVInfo + 72);
        if (CMTimeCompare(&time1, &time2) == -1)
        {
          CMTime time1 = *a1;
          CMTime time2 = *(CMTime *)(gFVInfo + 48);
          if (CMTimeCompare(&time1, &time2) == -1)
          {
            long long v17 = *(_OWORD *)(gFVInfo + 48);
            a1->epoch = *(void *)(gFVInfo + 64);
            *(_OWORD *)&a1->CMTimeValue value = v17;
          }
          long long v18 = *(_OWORD *)&a1->value;
          a3->epoch = a1->epoch;
          *(_OWORD *)&a3->CMTimeValue value = v18;
          long long v19 = *(_OWORD *)(gFVInfo + 72);
          a2->epoch = *(void *)(gFVInfo + 88);
          *(_OWORD *)&a2->CMTimeValue value = v19;
          goto LABEL_24;
        }
        CMTime time1 = *a1;
        double Seconds = CMTimeGetSeconds(&time1);
        CMTime time1 = *(CMTime *)(gFVInfo + 72);
        double v15 = ceil(Seconds / CMTimeGetSeconds(&time1));
        CMTime time1 = *a1;
        Float64 v16 = CMTimeGetSeconds(&time1);
        CMTimeMakeWithSeconds(&time1, v16 / v15, 1000);
        *a2 = time1;
        CMTime time2 = *a2;
        CMTime rhs = *(CMTime *)(gFVInfo + 48);
        CMTimeSubtract(&time1, &time2, &rhs);
      }
      *a3 = time1;
      goto LABEL_24;
    }
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t FVIOKit_PlayVibrationWithPattern(const __CFArray *a1, const void *a2, float a3)
{
  int v55 = 0;
  CFDictionaryRef v3 = &qword_1E9359000;
  if (!gFVInfo) {
    return 4294950806;
  }
  BOOL v5 = a3 < 0.0 || a3 > 1.0;
  if (!v5 && a1)
  {
    CMTime valuePtr = *(CMTime *)(gFVInfo + 72);
    int v7 = FVIOKit_ConvertFigTimeToMillisec(&valuePtr);
    CMTime valuePtr = *(CMTime *)(gFVInfo + 48);
    int v55 = FVIOKit_ConvertFigTimeToMillisec(&valuePtr);
    uint64_t v8 = MEMORY[0x199716EE0](*(void *)gFVInfo);
    if (v8) {
      return v8;
    }
    uint64_t Count = CFArrayGetCount(a1);
    if (Count < 2 || (CFIndex v10 = Count, (Count & 1) != 0))
    {
      uint64_t v37 = FigSignalErrorAt();
      CFMutableStringRef Mutable = 0;
    }
    else
    {
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFIndex v13 = 0;
        CFNumberRef v14 = (const void *)*MEMORY[0x1E4F1CFC8];
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v13);
          if (!ValueAtIndex) {
            goto LABEL_78;
          }
          Float64 v16 = ValueAtIndex;
          CFTypeID TypeID = CFBooleanGetTypeID();
          if (TypeID != CFGetTypeID(v16)) {
            goto LABEL_78;
          }
          if (CFBooleanGetValue((CFBooleanRef)v16) == 1)
          {
            IntensityDictionary = FVIOKit_CreateIntensityDictionary(a3);
            if (!IntensityDictionary) {
              goto LABEL_78;
            }
            long long v19 = IntensityDictionary;
            CFArrayAppendValue(Mutable, IntensityDictionary);
            CFRelease(v19);
          }
          else
          {
            CFArrayAppendValue(Mutable, v16);
          }
          CFTypeRef v20 = CFArrayGetValueAtIndex(a1, v13 | 1);
          if (!v20 || (BOOL v21 = v20, v22 = CFNumberGetTypeID(), v22 != CFGetTypeID(v21)))
          {
LABEL_78:
            uint64_t v37 = FigSignalErrorAt();
            CFDictionaryRef v3 = &qword_1E9359000;
            goto LABEL_75;
          }
          if (CFBooleanGetValue((CFBooleanRef)v16) == 1)
          {
            LODWORD(valuePtr.value) = 0;
            CFNumberGetValue((CFNumberRef)v21, kCFNumberSInt32Type, &valuePtr);
            if (SLODWORD(valuePtr.value) <= v7)
            {
              if (SLODWORD(valuePtr.value) < v55) {
                LODWORD(valuePtr.value) = v55;
              }
            }
            else
            {
              LODWORD(valuePtr.value) = v7;
            }
            CFNumberRef v24 = CFNumberCreate(v11, kCFNumberSInt32Type, &valuePtr);
            CFArrayAppendValue(Mutable, v24);
            if (v24) {
              CFRelease(v24);
            }
            v13 += 2;
            if (v13 >= v10)
            {
              CFBooleanRef v28 = (const __CFBoolean *)CFArrayGetValueAtIndex(a1, 0);
            }
            else
            {
              long long v25 = CFArrayGetValueAtIndex(a1, v13);
              if (!v25) {
                goto LABEL_78;
              }
              long long v26 = v25;
              CFTypeID v27 = CFBooleanGetTypeID();
              if (v27 != CFGetTypeID(v26)) {
                goto LABEL_78;
              }
              CFBooleanRef v28 = (const __CFBoolean *)v26;
            }
            if (CFBooleanGetValue(v28) == 1)
            {
              CFNumberRef v29 = CFNumberCreate(v11, kCFNumberSInt32Type, &v55);
              CFArrayAppendValue(Mutable, v14);
              CFArrayAppendValue(Mutable, v29);
              if (v29) {
                CFRelease(v29);
              }
            }
          }
          else
          {
            LODWORD(valuePtr.value) = 0;
            CFNumberGetValue((CFNumberRef)v21, kCFNumberSInt32Type, &valuePtr);
            if (SLODWORD(valuePtr.value) < v55) {
              LODWORD(valuePtr.value) = v55;
            }
            CFNumberRef v23 = CFNumberCreate(v11, kCFNumberSInt32Type, &valuePtr);
            CFArrayAppendValue(Mutable, v23);
            if (v23) {
              CFRelease(v23);
            }
            v13 += 2;
          }
        }
        while (v13 < v10);
        CFIndex v30 = CFArrayGetCount(Mutable);
        CFDictionaryRef v3 = &qword_1E9359000;
        if (v30 < 1)
        {
          int v32 = 0;
        }
        else
        {
          CFIndex v31 = v30;
          int v32 = 0;
          for (CFIndex i = 0; i != v31; ++i)
          {
            CFNumberRef v34 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, i);
            if (v34)
            {
              CFNumberRef v35 = v34;
              CFTypeID v36 = CFNumberGetTypeID();
              if (v36 == CFGetTypeID(v35))
              {
                LODWORD(valuePtr.value) = 0;
                CFNumberGetValue(v35, kCFNumberSInt32Type, &valuePtr);
                v32 += LODWORD(valuePtr.value);
              }
            }
          }
        }
        if (*(unsigned char *)(gFVInfo + 112))
        {
          if (*(unsigned char *)(gFVInfo + 192))
          {
            uint64_t v37 = 4294950801;
            goto LABEL_75;
          }
          double v41 = CFAbsoluteTimeGetCurrent() + (float)((float)v32 / 1000.0);
          CFIndex v42 = (CMTime *)gFVInfo;
          if (!*(unsigned char *)(gFVInfo + 192) || *(double *)(gFVInfo + 136) < v41)
          {
            *(double *)(gFVInfo + 136) = v41;
            CMTimeMake(&valuePtr, 0, 1);
            v42[7] = valuePtr;
            long long v43 = (CMTime *)gFVInfo;
            CMTimeMake(&valuePtr, 0, 1);
            void v43[6] = valuePtr;
            long long v44 = *(const void **)(gFVInfo + 128);
            *(void *)(gFVInfo + 128) = Mutable;
            CFRetain(Mutable);
            if (v44) {
              CFRelease(v44);
            }
          }
          uint64_t v45 = gFVInfo;
          if (!*(unsigned char *)(gFVInfo + 192) || *(float *)(gFVInfo + 208) < a3) {
            *(float *)(gFVInfo + 208) = a3;
          }
          *(unsigned char *)(v45 + 192) = 1;
          uint64_t v46 = *(const void **)(v45 + 200);
          *(void *)(v45 + 20CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = a2;
          if (a2) {
            CFRetain(a2);
          }
          if (v46) {
            CFRelease(v46);
          }
          goto LABEL_74;
        }
        IOReturn v38 = IOPMAssertionCreateWithName(@"NoIdleSleepAssertion", 0xFFu, @"coremedia-vibrating", (IOPMAssertionID *)(gFVInfo + 108));
        uint64_t v39 = gFVInfo;
        if (v38) {
          BOOL v40 = 0;
        }
        else {
          BOOL v40 = *(_DWORD *)(gFVInfo + 108) != 0;
        }
        *(unsigned char *)(gFVInfo + 104) = v40;
        uint64_t started = FVIOKit_StartIOServiceVibrationWithPattern(v39, Mutable);
        uint64_t v48 = gFVInfo;
        if (!started)
        {
          *(unsigned char *)(gFVInfo + 112) = 1;
          *(unsigned char *)(v48 + 192) = 0;
          char v50 = *(const void **)(v48 + 120);
          *(void *)(v48 + 12CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = a2;
          if (a2) {
            CFRetain(a2);
          }
          if (v50) {
            CFRelease(v50);
          }
          dispatch_time_t v51 = dispatch_time(0, 1000000 * v32);
          dispatch_source_set_timer(*(dispatch_source_t *)(gFVInfo + 96), v51, 0xFFFFFFFFFFFFFFFFLL, 0);
LABEL_74:
          uint64_t v37 = 0;
          goto LABEL_75;
        }
        uint64_t v37 = started;
        if (*(unsigned char *)(gFVInfo + 104))
        {
          IOPMAssertionRelease(*(_DWORD *)(gFVInfo + 108));
          uint64_t v49 = gFVInfo;
          *(unsigned char *)(gFVInfo + 104) = 0;
          *(_DWORD *)(v49 + 108) = 0;
        }
      }
      else
      {
        uint64_t v37 = FigSignalErrorAt();
      }
    }
LABEL_75:
    MEMORY[0x199716EF0](*(void *)v3[424]);
    if (Mutable) {
      CFRelease(Mutable);
    }
    return v37;
  }
  return FigSignalErrorAt();
}

CFDictionaryRef FVIOKit_GetVibrationPatternFromDictionary(const __CFDictionary *result, int *a2, float *a3, float *a4, float *a5, const __CFDictionary **a6, char *a7, char *a8)
{
  CFIndex v10 = a6;
  uint64_t valuePtr = 0x3ECCCCCD3DCCCCCDLL;
  float v31 = 0.85;
  float v32 = 0.5;
  int v30 = 1056964608;
  if (!result)
  {
    char v18 = 0;
    CFDictionaryRef v17 = 0;
    char v23 = 0;
    *a2 = 1053609165;
    *a3 = 0.5;
    float v20 = 0.5;
    *a5 = 0.85;
    goto LABEL_20;
  }
  CFDictionaryRef v15 = result;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(result, @"Intensity");
  uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(v15, @"VibePattern");
  CFDictionaryRef v17 = result;
  if (result)
  {
    char v18 = 0;
    CFNumberRef v19 = 0;
    uint64_t valuePtr = 0;
    float v20 = 0.0;
    float v32 = 0.0;
    float v21 = 0.0;
    int v22 = 0;
    int v30 = 0;
  }
  else
  {
    CFTypeID v27 = a8;
    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v15, @"OnDuration");
    CFNumberRef number = (const __CFNumber *)CFDictionaryGetValue(v15, @"OffDuration");
    CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v15, @"Period");
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(v15, @"TotalDuration");
    CFNumberRef v19 = result;
    float v20 = 0.5;
    int v22 = 1053609165;
    if (v24 && (unint64_t)number | (unint64_t)v25)
    {
      uint64_t result = (const __CFDictionary *)CFNumberGetValue(v24, kCFNumberFloatType, (char *)&valuePtr + 4);
      if (number) {
        uint64_t result = (const __CFDictionary *)CFNumberGetValue(number, kCFNumberFloatType, &valuePtr);
      }
      a8 = v27;
      if (v25)
      {
        uint64_t result = (const __CFDictionary *)CFNumberGetValue(v25, kCFNumberFloatType, &v32);
        int v22 = HIDWORD(valuePtr);
        char v18 = 1;
        float v21 = v32;
      }
      else
      {
        int v22 = HIDWORD(valuePtr);
        float v21 = *((float *)&valuePtr + 1) + *(float *)&valuePtr;
        float v32 = *((float *)&valuePtr + 1) + *(float *)&valuePtr;
        char v18 = 1;
      }
    }
    else
    {
      char v18 = 0;
      float v21 = 0.5;
      a8 = v27;
    }
  }
  *a2 = v22;
  *a3 = v21;
  if (Value)
  {
    uint64_t result = (const __CFDictionary *)CFNumberGetValue(Value, kCFNumberFloatType, &v31);
    float v26 = v31;
    if (v31 <= 1.0)
    {
      CFIndex v10 = a6;
      if (v31 < 0.0)
      {
        float v31 = 0.0;
        float v26 = 0.0;
      }
      goto LABEL_17;
    }
    float v31 = 1.0;
    float v26 = 1.0;
  }
  else
  {
    float v26 = 0.85;
  }
  CFIndex v10 = a6;
LABEL_17:
  *a5 = v26;
  if (v19)
  {
    uint64_t result = (const __CFDictionary *)CFNumberGetValue(v19, kCFNumberFloatType, &v30);
    char v23 = 1;
    float v20 = *(float *)&v30;
  }
  else
  {
    char v23 = 0;
  }
LABEL_20:
  *a4 = v20;
  *a7 = v18;
  *a8 = v23;
  *CFIndex v10 = v17;
  return result;
}

uint64_t FVIOKit_PlayVibrationEndTimeout()
{
  if (gFVInfo)
  {
    uint64_t result = MEMORY[0x199716EE0](*(void *)gFVInfo);
    if (result) {
      return result;
    }
    uint64_t v1 = gFVInfo;
    if (*(unsigned char *)(gFVInfo + 112))
    {
      if (FVIOKit_StopVibrator(gFVInfo)) {
        return MEMORY[0x199716EF0](*(void *)gFVInfo);
      }
      uint64_t v1 = gFVInfo;
    }
    if (*(unsigned char *)(v1 + 192))
    {
      double v2 = *(double *)(v1 + 136);
      double v3 = v2 - CFAbsoluteTimeGetCurrent();
      CMTime v4 = *(void **)(gFVInfo + 128);
      if (v4)
      {
        int started = FVIOKit_StartIOServiceVibrationWithPattern(gFVInfo, v4);
        int v6 = *(const void **)(gFVInfo + 128);
        if (v6)
        {
          CFRelease(v6);
          *(void *)(gFVInfo + 128) = 0;
        }
      }
      else
      {
        CMTime v24 = *(CMTime *)(gFVInfo + 144);
        Float64 Seconds = CMTimeGetSeconds(&v24);
        uint64_t v10 = gFVInfo;
        float v11 = *(float *)(gFVInfo + 208);
        if (v3 <= Seconds)
        {
          CMTime v24 = *(CMTime *)(gFVInfo + 168);
          int v13 = FVIOKit_ConvertFigTimeToMillisec(&v24);
          uint64_t v15 = v10;
          float v16 = v11;
          int v14 = 0;
          int v17 = 0;
        }
        else
        {
          CMTime v24 = *(CMTime *)(gFVInfo + 144);
          int v12 = FVIOKit_ConvertFigTimeToMillisec(&v24);
          CMTime v24 = *(CMTime *)(gFVInfo + 168);
          int v13 = FVIOKit_ConvertFigTimeToMillisec(&v24);
          int v14 = v12 - v13;
          uint64_t v15 = v10;
          float v16 = v11;
          int v17 = 1;
        }
        int started = FVIOKit_StartIOServiceVibration(v15, v13, v14, v17, v16);
      }
      if (started) {
        return MEMORY[0x199716EF0](*(void *)gFVInfo);
      }
      uint64_t v18 = gFVInfo;
      *(unsigned char *)(gFVInfo + 192) = 0;
      CFNumberRef v19 = *(const void **)(v18 + 120);
      float v20 = *(const void **)(v18 + 200);
      *(void *)(v18 + 12CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = v20;
      if (v20) {
        CFRetain(v20);
      }
      if (v19) {
        CFRelease(v19);
      }
      uint64_t v21 = gFVInfo;
      int v22 = *(const void **)(gFVInfo + 200);
      if (v22)
      {
        CFRelease(v22);
        uint64_t v21 = gFVInfo;
        *(void *)(gFVInfo + 20CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = 0;
      }
      char v23 = *(NSObject **)(v21 + 96);
      dispatch_time_t v8 = dispatch_time(0, (uint64_t)(v3 * 1000000000.0));
      int v7 = v23;
    }
    else
    {
      *(unsigned char *)(v1 + 112) = 0;
      if (*(unsigned char *)(v1 + 104))
      {
        IOPMAssertionRelease(*(_DWORD *)(v1 + 108));
        uint64_t v1 = gFVInfo;
        *(unsigned char *)(gFVInfo + 104) = 0;
        *(_DWORD *)(v1 + 108) = 0;
      }
      int v7 = *(NSObject **)(v1 + 96);
      dispatch_time_t v8 = -1;
    }
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
    return MEMORY[0x199716EF0](*(void *)gFVInfo);
  }
  return FigSignalErrorAt();
}

uint64_t FigStarkModeControllerRemoteCreate(uint64_t a1, uint64_t a2, void *a3)
{
  xpc_object_t xdict = 0;
  os_unfair_lock_lock(&remoteFigStarkModeController_EnsureClientEstablished_lock);
  if (remoteFigStarkModeController_EnsureClientEstablished_err) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = gFigStarkModeControllerRemoteClient == 0;
  }
  if (v4)
  {
    id v5 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    int v6 = objc_msgSend(v5, "initWithObjectsAndKeys:", @"ServerConnectionDied", *MEMORY[0x1E4F22080], 0, 0, 0);
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work();
    fig_note_initialize_category_with_default_work();
    uint64_t v7 = FigXPCRemoteClientCreate();
    remoteFigStarkModeController_EnsureClientEstablished_err = v7;
    if (v7 || !gFigStarkModeControllerRemoteClient) {
      MXSimulateCrash([(id)objc_msgSend(NSString stringWithFormat:@"FigXPCRemoteClientCreate failed with error=%d, gFigStarkModeControllerRemoteClient=%p", v7, gFigStarkModeControllerRemoteClient), "UTF8String"]);
    }
  }
  os_unfair_lock_unlock(&remoteFigStarkModeController_EnsureClientEstablished_lock);
  uint64_t v8 = remoteFigStarkModeController_EnsureClientEstablished_err;
  if (!remoteFigStarkModeController_EnsureClientEstablished_err)
  {
    FigStarkModeControllerGetClassID();
    uint64_t v9 = CMDerivedObjectCreate();
    if (v9)
    {
      uint64_t v8 = v9;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v11 = FigXPCCreateBasicMessage();
      if (v11 || (uint64_t v11 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v11))
      {
        uint64_t v8 = v11;
        goto LABEL_21;
      }
      uint64_t uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)(DerivedStorage + 8))
      {
        uint64_t v14 = FigSignalErrorAt();
      }
      else
      {
        *(void *)uint64_t DerivedStorage = uint64;
        uint64_t v14 = FigXPCRemoteClientAssociateObject();
      }
      uint64_t v8 = v14;
      if (!v14)
      {
        *a3 = 0;
        goto LABEL_21;
      }
      uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_21:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCStarkModeController_DeadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 8) = 1;
  return result;
}

uint64_t remoteFigStarkModeController_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9359F20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    if (FigXPCCreateBasicMessage()
      || (int v2 = FigXPCRemoteClientSendSyncMessage(), FigXPCRemoteClientKillServerOnTimeout(), v2))
    {
      double v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return FigXPCRelease();
}

uint64_t remoteFigStarkModeController_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  id v3 = [NSString alloc];
  CFIndex v4 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    id v5 = " SERVER DIED";
  }
  else {
    id v5 = "";
  }
  return objc_msgSend(v3, "initWithFormat:", @"<FigStarkModeControllerRemote %p retainCount: %ld objectID: %016llx%s>", a1, v4, *(void *)DerivedStorage, v5);
}

uint64_t remoteFigStarkModeController_GetCurrentMode(uint64_t a1, UInt8 *a2)
{
  memset(v6, 0, sizeof(v6));
  uint64_t ObjectID = remoteXPCStarkModeController_GetObjectID(a1, v6);
  if (ObjectID
    || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID)
    || (uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), ObjectID))
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCMessageCopyCFData();
    if (!v4)
    {
      v7.id location = 0;
      v7.length = 32;
      CFDataGetBytes(0, v7, a2);
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteFigStarkModeController_RequestModeChange(uint64_t a1, uint64_t a2, const char *a3, UInt8 *a4)
{
  memset(v14, 0, sizeof(v14));
  uint64_t ObjectID = remoteXPCStarkModeController_GetObjectID(a1, v14);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v12 = ObjectID;
    a3 = 0;
    CFDataRef v8 = 0;
    goto LABEL_15;
  }
  if (a2)
  {
    CFDataRef v8 = MXCFDataCreate((UInt8 *)a2, 72);
    uint64_t v9 = FigXPCMessageSetCFData();
    if (v9
      || *(void *)(a2 + 16) && (uint64_t v9 = FigXPCMessageSetCFString(), v9)
      || *(void *)(a2 + 40) && (uint64_t v9 = FigXPCMessageSetCFString(), v9))
    {
      uint64_t v12 = v9;
      a3 = 0;
      goto LABEL_15;
    }
    if (a3) {
      goto LABEL_10;
    }
  }
  else
  {
    CFDataRef v8 = 0;
    if (a3)
    {
LABEL_10:
      a3 = (const char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, 0x8000100u);
      FigXPCMessageSetCFString();
    }
  }
  FigXPCMessageSetCFBoolean();
  uint64_t v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v10)
  {
    uint64_t v12 = v10;
  }
  else
  {
    uint64_t v11 = FigXPCMessageCopyCFData();
    uint64_t v12 = v11;
    if (a4 && !v11)
    {
      v15.id location = 0;
      v15.length = 32;
      CFDataGetBytes(0, v15, a4);
    }
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  if (v8) {
    CFRelease(v8);
  }
  if (a3) {
    CFRelease(a3);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t remoteFigStarkModeController_RequestInitialModeChange(uint64_t a1, UInt8 *a2, UInt8 *a3, uint64_t a4, const char *a5, UInt8 *a6)
{
  memset(v20, 0, sizeof(v20));
  uint64_t ObjectID = remoteXPCStarkModeController_GetObjectID(a1, v20);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v18 = ObjectID;
    a3 = 0;
    CFDataRef v14 = 0;
    a5 = 0;
    a2 = 0;
    goto LABEL_19;
  }
  if (a2)
  {
    a2 = (UInt8 *)MXCFDataCreate(a2, 12);
    uint64_t v12 = FigXPCMessageSetCFData();
    if (v12)
    {
      uint64_t v18 = v12;
      a3 = 0;
LABEL_35:
      CFDataRef v14 = 0;
      goto LABEL_36;
    }
  }
  if (a3)
  {
    a3 = (UInt8 *)MXCFDataCreate(a3, 12);
    uint64_t v13 = FigXPCMessageSetCFData();
    if (v13)
    {
      uint64_t v18 = v13;
      goto LABEL_35;
    }
  }
  if (a4)
  {
    CFDataRef v14 = MXCFDataCreate((UInt8 *)a4, 72);
    uint64_t v15 = FigXPCMessageSetCFData();
    if (!v15)
    {
      if (!*(void *)(a4 + 16) || (uint64_t v15 = FigXPCMessageSetCFString(), !v15))
      {
        if (!*(void *)(a4 + 40) || (uint64_t v15 = FigXPCMessageSetCFString(), !v15))
        {
          if (!a5) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
      }
    }
    uint64_t v18 = v15;
LABEL_36:
    a5 = 0;
    goto LABEL_19;
  }
  CFDataRef v14 = 0;
  if (a5)
  {
LABEL_14:
    a5 = (const char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a5, 0x8000100u);
    FigXPCMessageSetCFString();
  }
LABEL_15:
  uint64_t v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v16)
  {
    uint64_t v18 = v16;
  }
  else
  {
    uint64_t v17 = FigXPCMessageCopyCFData();
    uint64_t v18 = v17;
    if (a6 && !v17)
    {
      v21.id location = 0;
      v21.length = 32;
      CFDataGetBytes(0, v21, a6);
    }
  }
LABEL_19:
  FigXPCRelease();
  FigXPCRelease();
  if (a2) {
    CFRelease(a2);
  }
  if (a3) {
    CFRelease(a3);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (a5) {
    CFRelease(a5);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v18;
}

uint64_t remoteXPCStarkModeController_GetObjectID(uint64_t a1, void *a2)
{
  if (!a2) {
    return 4294954315;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = (void *)DerivedStorage;
    uint64_t result = 0;
    *a2 = *v4;
  }
  return result;
}

void __mxsmInteruptionActionMapper_setUpInterruptionPriorityDictionaries_block_invoke()
{
  CelestialGetModelSpecificName();
  uint64_t v0 = (void *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v0)
  {
    uint64_t v1 = v0;
    int v2 = (void *)[v0 objectForKey:@"AudioCategoryMap"];
    id v3 = (void *)[v1 objectForKey:@"InterruptionPriorityMap"];

    sCategoryToCategoryMapForTriangle = v2;
    sCategoryToPriorityMapForTriangle = v3;
  }
  CelestialGetModelSpecificName();
  uint64_t v4 = (void *)CelestialCFCreatePropertyListForModelAndBundleIdentifier();
  if (v4)
  {
    id v7 = v4;
    id v5 = (void *)[v4 objectForKey:@"AudioCategoryMap"];
    int v6 = (void *)[v7 objectForKey:@"InterruptionPriorityMap"];

    sCategoryToCategoryMapForTipCFIndex i = v5;
    sCategoryToPriorityMapForTipCFIndex i = v6;
  }
}

CFStringRef FigRouteDiscovererCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRouteDiscoverer %p]", a1);
}

void FigRoutingManager_iOSEndpointActivateCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  SharedManager = FigRoutingManagerGetSharedManager();
  if (a5)
  {
    uint64_t v11 = *(const void **)a5;
    uint64_t v12 = *(const void **)(a5 + 8);
    objc_msgSend(*(id *)(a5 + 32), "timeIntervalSinceNow", *(void *)(a5 + 16), *(void *)(a5 + 24));
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    objc_msgSend(0, "timeIntervalSinceNow", 0, 0);
  }
  double v14 = v13;
  if (a1) {
    CFRetain(a1);
  }
  if (v11) {
    CFRetain(v11);
  }
  if (v12) {
    CFRetain(v12);
  }
  if ((void)v18) {
    CFRetain((CFTypeRef)v18);
  }
  float v15 = fabs(v14) * 1000.0;
  id v16 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  uint64_t v17 = *((void *)SharedManager + 1);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __FigRoutingManager_iOSEndpointActivateCompletionCallback_block_invoke;
  v19[3] = &unk_1E57C8920;
  v19[4] = v16;
  v19[5] = a1;
  int v22 = a4;
  void v19[6] = a3;
  v19[7] = a2;
  float v23 = v15;
  v19[8] = v11;
  void v19[9] = v12;
  long long v20 = v18;
  uint64_t v21 = a5;
  MXDispatchAsync((uint64_t)"FigRoutingManager_iOSEndpointActivateCompletionCallback", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 152, 0, 0, v17, (uint64_t)v19);
}

uint64_t FigRoutingManagerRegisterForFigEndpointNotifications(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (FigRoutingManagerIsEndpointOfType(result)
      || FigRoutingManagerIsEndpointOfType(v1)
      || FigRoutingManagerIsEndpointOfType(v1))
    {
      if (FigRoutingManagerIsEndpointOfType(v1))
      {
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        routingManager_handleAirPlayVolumeControlDidChange();
      }
      FigRoutingManagerGetSharedManager();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
    uint64_t result = FigRoutingManagerIsEndpointOfType(v1);
    if (!result)
    {
      uint64_t result = FigRoutingManagerIsEndpointOfType(v1);
      if (!result)
      {
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterAddListener();
      }
    }
  }
  return result;
}

void FigRoutingManager_iOSHandleFigEndpointFeaturesActivation(void *a1, char a2, uint64_t a3, const void *a4, uint64_t a5)
{
  if (a1)
  {
    if ((a2 & 2) != 0)
    {
      if (!MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed()
        || !MXSystemMirroring_IsDefaultRouteAirPlayReceiver())
      {
        goto LABEL_8;
      }
      CFTypeRef cf = 0;
      FigRoutingManagerContextUtilities_CopySystemMirroringContextUUID((uint64_t)&cf);
      int IsRoutedToLocalAirplayReceiver = FigRoutingManagerContextUtilities_IsRoutedToLocalAirplayReceiver((uint64_t)cf);
      if (cf) {
        CFRelease(cf);
      }
      if (IsRoutedToLocalAirplayReceiver) {
LABEL_8:
      }
        FigRoutingManagerHandleEndpointAudioActivation(a1, v10, a3, a4, a5);
    }
    if (a2)
    {
      FigRoutingManagerHandleEndpointScreenActivation(a1, a4, a5);
      if ((a2 & 4) == 0)
      {
LABEL_11:
        if ((a2 & 0x10) == 0) {
          return;
        }
        goto LABEL_12;
      }
    }
    else if ((a2 & 4) == 0)
    {
      goto LABEL_11;
    }
    FigRoutingManagerHandleEndpointPlaybackActivation(a1, a4, a5);
    if ((a2 & 0x10) == 0) {
      return;
    }
LABEL_12:
    FigRoutingManagerHandleEndpointControlActivation(a1, a4, a5);
  }
}

uint64_t FigRoutingManager_iOSIsCarPlayAuxStreamSupported()
{
  CFTypeRef v0 = CMSMUtility_CopySystemAudioRoutingContextUUID();
  CFTypeRef v1 = FigRoutingManagerCopyActivatedCarPlayEndpoint((uint64_t)v0);
  if (v1) {
    FigEndpointCopyStreamsForTypeAndSubType();
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v1) {
    CFRelease(v1);
  }
  if (v0) {
    CFRelease(v0);
  }
  return 0;
}

uint64_t FigRoutingManager_iOSDeactivateEndpoint(const void *a1, uint64_t a2)
{
  v27[16] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294954315;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  SharedManager = FigRoutingManagerGetSharedManager();
  CFTypeRef cf = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v10 + 48);
  if (v11) {
    v11(CMBaseObject, *MEMORY[0x1E4F20F28], v7, &cf);
  }
  if (dword_1E9359DC0)
  {
    *(_DWORD *)os_log_type_t type = 0;
    os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  v27[0] = 0;
  uint64_t v13 = FigEndpointGetCMBaseObject();
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  id v16 = *(void (**)(uint64_t, void, const __CFAllocator *, void *))(v15 + 48);
  if (v16)
  {
    v16(v13, *MEMORY[0x1E4F20E40], v7, v27);
    uint64_t v17 = (const void *)v27[0];
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (v17 != (const void *)*MEMORY[0x1E4F1CFD0])
  {
    uint64_t v5 = 0;
    if (!v17) {
      return v5;
    }
LABEL_24:
    CFRelease(v17);
    return v5;
  }
  CFRetain(a1);
  CFNumberRef v19 = *((void *)SharedManager + 1);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __FigRoutingManager_iOSDeactivateEndpoint_block_invoke;
  v23[3] = &__block_descriptor_40_e5_v8__0l;
  v23[4] = a1;
  MXDispatchAsync((uint64_t)"FigRoutingManager_iOSDeactivateEndpoint", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1098, 0, 0, v19, (uint64_t)v23);
  CFTypeRef v26 = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint((uint64_t)a1, a2, (uint64_t)&v26);
  uint64_t FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)v26);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  FigRoutingManagerUnregisterFromFigEndpointNotifications((uint64_t)a1);
  *(void *)os_log_type_t type = 0;
  FigRoutingManagerCreateEndpointDeactivateCompletionContext(v26, type);
  uint64_t v5 = FigRoutingManagerEndpointDeactivateWithCompletionCallback((uint64_t)a1, FigEndpointFeatures, (uint64_t)Mutable, (void (*)(void, uint64_t, void, void, uint64_t))FigRoutingManager_iOSEndpointDeactivateCompletionCallback, *(uint64_t *)type);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v26) {
    CFRelease(v26);
  }
  uint64_t v17 = (const void *)v27[0];
  if (v27[0]) {
    goto LABEL_24;
  }
  return v5;
}

uint64_t FigRoutingManager_iOSHandleEndpointActivationError(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef cf[21] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (dword_1E9359DC0)
  {
    LODWORD(cf[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a3 <= -15583)
  {
    uint64_t v11 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUserCancelled;
    switch(a3)
    {
      case -17608:
        goto LABEL_9;
      case -17607:
      case -17606:
      case -17605:
      case -17603:
      case -17602:
        goto LABEL_29;
      case -17604:
        goto LABEL_44;
      case -17601:
        goto LABEL_30;
      case -17600:
        uint64_t v11 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUnauthorizedNoPrompt;
        goto LABEL_44;
      default:
        if (a3 != -16728) {
          goto LABEL_29;
        }
        goto LABEL_44;
    }
  }
  if ((a3 + 15582) < 2) {
    goto LABEL_9;
  }
  if (!a3) {
    goto LABEL_47;
  }
  if (a3 == 200453)
  {
LABEL_9:
    FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo(a5, a1, @"configUpdateReasonEndedFailed");
    FigRoutingManagerContextUtilities_SetPickingState(a5, 0);
    uint64_t v12 = *MEMORY[0x1E4F1CF80];
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    cf[0] = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v16 + 48);
    if (v17) {
      v17(CMBaseObject, *MEMORY[0x1E4F20E38], v12, cf);
    }
    *(void *)os_log_type_t type = 0;
    uint64_t v18 = FigEndpointGetCMBaseObject();
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void (**)(uint64_t, void, uint64_t, os_log_type_t *))(v20 + 48);
    if (v21) {
      v21(v18, *MEMORY[0x1E4F20F28], v12, type);
    }
    int v22 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint(a1, 0);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (a3 > -15582)
    {
      if (a3 != -15581)
      {
        if (a3 != 200453) {
          goto LABEL_35;
        }
        FigCFDictionarySetValue();
        if (!dword_1E9359DC0) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
      FigCFDictionarySetValue();
      if (dword_1E9359DC0)
      {
LABEL_34:
        float v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (a3 != -17608)
      {
        if (a3 != -15582) {
          goto LABEL_35;
        }
        FigCFDictionarySetValue();
        if (!dword_1E9359DC0) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
      FigCFDictionarySetValue();
      if (dword_1E9359DC0) {
        goto LABEL_34;
      }
    }
LABEL_35:
    FigCFDictionaryGetValue();
    FigCFDictionarySetValue();
    FigEndpointUIAgentHelper_ShowError(Mutable);
    if (*(void *)type)
    {
      CFRelease(*(CFTypeRef *)type);
      *(void *)os_log_type_t type = 0;
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    if (v22) {
      CFRelease(v22);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    goto LABEL_47;
  }
LABEL_29:
  FigRoutingManager_HandleEndpointFailed(a1, a3, a4, 0);
LABEL_30:
  uint64_t v11 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed;
LABEL_44:
  FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo(a5, a1, (uint64_t)*v11);
  if (a2) {
    routingManager_resetScreenSettings(a1);
  }
  FigRoutingManagerContextUtilities_SetPickingState(a5, 0);
LABEL_47:
  if (FigRoutingManagerUtilities_IsCurrentRouteHandoff()) {
    CMSMAP_MakeAirPlayHandOffPortRoutable(0, a5);
  }
  FigRoutingManagerRemoveCachedDelegateContext(a1);
  return 0;
}

uint64_t FigRoutingManager_iOSHandleStartupFailed(uint64_t result, CFMutableDictionaryRef theDict)
{
  if (!result || !theDict) {
    return result;
  }
  if ((int)result <= -15583)
  {
    if (result == -71891)
    {
      id v3 = kFigEndpointUIAgentPromptInfo_ReasonStartErrorLowSignal;
      goto LABEL_15;
    }
    if (result == -17608)
    {
      id v3 = kFigEndpointUIAgentPromptInfo_ReasonErrorAuthenticationFailed;
      goto LABEL_15;
    }
LABEL_19:
    CFDictionarySetValue(theDict, @"reason", @"startError");
    uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
    FigCFDictionarySetValue();
    if (SInt32) {
      CFRelease(SInt32);
    }
    goto LABEL_16;
  }
  if (result == -15582)
  {
    id v3 = kFigEndpointUIAgentPromptInfo_ReasonErrorInfraRelayFailedMultiDFS;
    goto LABEL_15;
  }
  if (result == -15581)
  {
    id v3 = kFigEndpointUIAgentPromptInfo_ReasonErrorInfraRelayFailed2G;
    goto LABEL_15;
  }
  if (result != 200453) {
    goto LABEL_19;
  }
  id v3 = kFigEndpointUIAgentPromptInfo_ReasonErrorHijackFailed;
LABEL_15:
  CFDictionarySetValue(theDict, @"reason", *v3);
LABEL_16:
  return FigEndpointUIAgentHelper_ShowError(theDict);
}

void FigRoutingManagerHandleEndpointAudioActivation(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  CFTypeRef v27 = 0;
  uint64_t v9 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
  if (v13) {
    v13(CMBaseObject, *MEMORY[0x1E4F21048], v9, &v27);
  }
  CFTypeRef v26 = 0;
  uint64_t v14 = FigEndpointGetCMBaseObject();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v16 + 48);
  if (v17) {
    v17(v14, *MEMORY[0x1E4F20F28], v9, &v26);
  }
  if (dword_1E9359DC0)
  {
    LODWORD(v25) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      cf[0] = 0;
      if (FigRoutingManagerFindCarPlayMainAudioPortForEndpoint((uint64_t)a1))
      {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 9);
        FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a4, (uint64_t)a1, @"configUpdateReasonEndedSuccess");
        FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a4);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 8);
        FigRoutingManagerStartCarPlayAudioMainPortPublishingCheckTimer(a1, (uint64_t)a4, 5.0);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    goto LABEL_35;
  }
  unsigned int ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a4);
  if (ContextType <= 6 && ((1 << ContextType) & 0x46) != 0)
  {
    FigRoutingManagerStartDeactivateAirPlayEndpointTimer(a1, a3, 5.0);
    int AirPlayPortForEndpoint = CMSMAP_FindAirPlayPortForEndpoint((uint64_t)a1);
    if (AirPlayPortForEndpoint)
    {
      int v21 = AirPlayPortForEndpoint;
      FigRoutingManagerStopDeactivateAirPlayEndpointTimer();
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 9);
      if (CMSMVAUtility_MakePortRoutable(v21, (uint64_t)a4))
      {
        CFTypeRef v25 = 0;
        FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a4, (uint64_t)&v25);
        int v22 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)v25, 0);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(a4, (const __CFArray *)v25, @"configUpdateReasonEndedFailed", a5, (uint64_t)v22);
        if (dword_1E9359DC0)
        {
          float v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingManager_iOSDeactivateEndpoint(a1, a3);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
        if (v22) {
          CFRelease(v22);
        }
        CFTypeRef v24 = v25;
        if (!v25) {
          goto LABEL_34;
        }
      }
      else
      {
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a4, a1, @"configUpdateReasonEndedSuccess", a5);
        cf[0] = 0;
        FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(cf[0], a1, @"configUpdateReasonEndedSuccess", a5);
        FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a4);
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 0);
        CFTypeRef v24 = cf[0];
        if (!cf[0]) {
          goto LABEL_34;
        }
      }
      CFRelease(v24);
LABEL_34:
      MXSystemMirroring_IsMirroringScreenAudioSeperateFunctionalityAllowed();
      FigRoutingManagerCrossfadePlayback();
      goto LABEL_35;
    }
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a4, 8);
  }
LABEL_35:
  if (v26)
  {
    CFRelease(v26);
    CFTypeRef v26 = 0;
  }
  if (v27) {
    CFRelease(v27);
  }
}

void FigRoutingManagerHandleEndpointScreenActivation(const void *a1, const void *a2, uint64_t a3)
{
  v27[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  int IsPropertyTrue = FigEndpointUtility_EndpointPredicate_IsPropertyTrue();
  CFTypeRef v25 = 0;
  CFTypeRef v26 = 0;
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v10 + 48);
  if (v11) {
    v11(CMBaseObject, *MEMORY[0x1E4F21048], v7, &v26);
  }
  uint64_t v12 = FigEndpointGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
  if (v15) {
    v15(v12, *MEMORY[0x1E4F21040], v7, &v25);
  }
  CMScreenHandleActivation(v26, v25);
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1) | IsPropertyTrue)
  {
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      int v17 = CMSMUtility_DoesiOSHaveCarPlayScreen();
      CFTypeRef v18 = CMSMUtility_CopyStarkEndpointCentral();
      int InitialModesReceived = FigEndpointCentralGetInitialModesReceived();
      if (v17)
      {
        if (InitialModesReceived)
        {
          CMScreenGetScreenState();
          if (!FigCFEqual()) {
            FigEndpointCopyFirstStreamOfType();
          }
        }
      }
      if (v18) {
        CFRelease(v18);
      }
    }
  }
  else
  {
    FigEndpointCopyFirstStreamOfType();
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    v27[0] = 0;
    uint64_t v20 = FigEndpointGetCMBaseObject();
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    float v23 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v22 + 48);
    if (v23)
    {
      v23(v20, *MEMORY[0x1E4F20DF8], v7, v27);
      CFTypeRef v24 = v27[0];
    }
    else
    {
      CFTypeRef v24 = 0;
    }
    if (v24 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
    {
      CMScreenSetMirroringMode(1);
      CFTypeRef v24 = v27[0];
    }
    if (v24)
    {
      CFRelease(v24);
      v27[0] = 0;
    }
    CMSMNotificationUtility_PostActiveNeroVisualStreamDidChange();
    CMSMNotificationUtility_PostActiveNeroVisualStreamInfoDidChange();
    FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a2, a1, @"configUpdateReasonEndedSuccess", a3);
    FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a2);
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
  }
  if (v26)
  {
    CFRelease(v26);
    CFTypeRef v26 = 0;
  }
  if (v25) {
    CFRelease(v25);
  }
}

uint64_t FigRoutingManagerHandleEndpointPlaybackActivation(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t result = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a2);
  if (result == 5)
  {
    if (CMSMVAUtility_IsPortAvailableForEndpoint((uint64_t)a1, 0))
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 9);
      CMSMVAUtility_CreatePerAppAirPlayVADIfNeeded(0, (uint64_t)a1, (uint64_t)a2);
      FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a2, a1, @"configUpdateReasonEndedSuccess", a3);
      FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a2);
      int v7 = 0;
    }
    else
    {
      int v7 = 8;
    }
    return FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, v7);
  }
  return result;
}

uint64_t FigRoutingManagerHandleEndpointControlActivation(const void *a1, const void *a2, uint64_t a3)
{
  FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a2, a1, @"configUpdateReasonEndedSuccess", a3);
  FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a2);
  return FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
}

uint64_t FigRoutingManager_iOSActivateEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  CFMutableDictionaryRef EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions((uint64_t)a1, (uint64_t)a2, a3);
  CFTypeRef FigEndpointFeatures = (CFTypeRef)FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)a2);
  CFTypeRef cf = 0;
  if (a1)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v12 = v11 ? v11 : 0;
    uint64_t v13 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &cf);
    }
  }
  if (dword_1E9359DC0)
  {
    LODWORD(v43) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1)
    || FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    EndpointDelegateContext = (uint64_t *)FigRoutingManagerCreateEndpointDelegateContext();
    uint64_t v16 = malloc_type_malloc(0x18uLL, 0x60040149E097CuLL);
    if (a1) {
      CFTypeRef v17 = CFRetain(a1);
    }
    else {
      CFTypeRef v17 = 0;
    }
    v16[1] = v17;
    v16[2] = EndpointDelegateContext;
    *uint64_t v16 = 0;
    SharedManager = FigRoutingManagerGetSharedManager();
    MEMORY[0x199716EE0](SharedManager[7]);
    if (SharedManager[8]) {
      *(void *)SharedManager[9] = v16;
    }
    else {
      SharedManager[8] = v16;
    }
    SharedManager[9] = v16;
    MEMORY[0x199716EF0](SharedManager[7]);
    if (FigRoutingManagerIsEndpointOfSubtype((uint64_t)a1))
    {
      uint64_t v46 = EndpointDelegateContext;
      uint64_t v47 = 0;
      uint64_t v48 = FigRoutingManager_HandleDidReceiveDataFromCommChannelDelegate;
      uint64_t v49 = FigRoutingManager_HandleDidCloseCommChannelDelegate;
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v20 = v19 ? v19 : 0;
      uint64_t v21 = *(void (**)(const void *, uint64_t **))(v20 + 56);
      if (v21) {
        v21(a1, &v46);
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v46 = EndpointDelegateContext;
    uint64_t v47 = FigRoutingManager_HandleAuthorizationRequiredDelegate;
    uint64_t v48 = FigRoutingManager_iOSHandleEndpointFailedDelegate;
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    CFTypeRef v24 = *(void (**)(const void *, uint64_t **))(v23 + 48);
    if (v24) {
      v24(a1, &v46);
    }
  }
  if (!v8)
  {
    if (a3)
    {
      CFNumberRef Value = CFDictionaryGetValue(a3, @"authInfo");
      if (Value) {
        FigRoutingManager_SetAuthorizationOnEndpoint((uint64_t)a1, (uint64_t)Value);
      }
    }
    unsigned int ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a2);
    int v44 = 0;
    FigRoutingManagerContextUtilities_GetPickingState((uint64_t)a2, (uint64_t)&v44);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1)
      || FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      if (ContextType <= 6 && ((1 << ContextType) & 0x6E) != 0) {
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 5);
      }
      uint64_t v46 = 0;
      FigRoutingManagerCreateEndpointActivateCompletionContext(a2, a3, a4, EndpointActivateOptions, &v46);
      FigRoutingManagerCrossfadePlayback();
      MutableCFArrayRef Copy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      uint64_t v8 = FigRoutingManagerEndpointActivateWithCompletionCallback(a1, (uint64_t)FigEndpointFeatures, MutableCopy, (void (*)(void, uint64_t, void, void, uint64_t *))FigRoutingManager_iOSEndpointActivateCompletionCallback, v46);
      if (MutableCopy)
      {
        CFDictionaryRef v28 = MutableCopy;
LABEL_39:
        CFRelease(v28);
      }
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)a1) {
           || FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    }
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 5);
      uint64_t v46 = 0;
      FigRoutingManagerCreateEndpointActivateCompletionContext(a2, a3, a4, EndpointActivateOptions, &v46);
      uint64_t v8 = FigRoutingManagerEndpointActivateWithCompletionCallback(a1, (uint64_t)FigEndpointFeatures, EndpointActivateOptions, (void (*)(void, uint64_t, void, void, uint64_t *))FigRoutingManager_iOSEndpointActivateCompletionCallback, v46);
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 6);
      uint64_t v8 = FigEndpointActivate();
      long long v43 = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)&v43);
      if (v8)
      {
        FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a2, (uint64_t)a1, @"configUpdateReasonEndedFailed");
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
      }
      else
      {
        if (FigRoutingManagerIsEndpointOfType((uint64_t)v43)) {
          FigRoutingManagerDeactivateEndpointFromPickedContexts(v43, (uint64_t)a2, 1u, @"configUpdateReasonEndedSuccess");
        }
        if (ContextType == 13)
        {
          CurrentInputuint64_t PortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
          CFTypeRef v31 = vaeCopyDeviceIdentifierFromVADPort(CurrentInputPortAtIndex);
          if (v31)
          {
            CFTypeRef v41 = v31;
            float v32 = (__CFArray *)(id)[MEMORY[0x1E4F1C978] arrayWithObject:v31];
          }
          else
          {
            CFTypeRef v41 = 0;
            float v32 = 0;
          }
        }
        else
        {
          float v32 = CMSMUtility_CopyCurrentRouteIdentifiers();
          CFTypeRef v41 = 0;
        }
        float v33 = FigRoutingManagerCopyEndpointsFromRouteIdentifiers(v32, (uint64_t)a2);
        CFNumberRef v34 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints(v33, 0);
        FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, v33, @"configUpdateReasonEndedSuccess", (uint64_t)a3, (uint64_t)v34);
        FigRoutingManagerPostProcessPickEndpoint(a1, (uint64_t)a2);
        if (ContextType == 13) {
          CurrentOutputuint64_t PortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
        }
        else {
          CurrentOutputuint64_t PortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
        }
        AudioObjectID v36 = CurrentOutputPortAtIndex;
        uint64_t v37 = (const void *)vaeCopySpecificNameForPort(CurrentOutputPortAtIndex);
        CFTypeRef v38 = vaeCopyDeviceIdentifierFromVADPort(v36);
        *(void *)os_log_type_t type = 0;
        FigEndpointCopyProperty((uint64_t)a1, *MEMORY[0x1E4F20E38], *MEMORY[0x1E4F1CF80], (uint64_t)type);
        if (!FigCFEqual())
        {
          if (dword_1E9359DC0)
          {
            uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)a2, (uint64_t)a1, @"configUpdateReasonEndedFailed");
        }
        FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 0);
        if (*(void *)type)
        {
          CFRelease(*(CFTypeRef *)type);
          *(void *)os_log_type_t type = 0;
        }
        if (v38) {
          CFRelease(v38);
        }
        if (v37) {
          CFRelease(v37);
        }
        if (v34) {
          CFRelease(v34);
        }
        if (v33) {
          CFRelease(v33);
        }
        if (v32) {
          CFRelease(v32);
        }
        if (v41) {
          CFRelease(v41);
        }
      }
      CFDictionaryRef v28 = (const __CFDictionary *)v43;
      if (v43) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v8 = 0;
      if (FigRoutingManagerIsEndpointOfType((uint64_t)a1) && ContextType != 13)
      {
        uint64_t v46 = 0;
        FigRoutingManagerCreateEndpointActivateCompletionContext(a2, a3, a4, EndpointActivateOptions, &v46);
        FigRoutingManagerEndpointActivateWithCompletionCallback(a1, (uint64_t)FigEndpointFeatures, EndpointActivateOptions, (void (*)(void, uint64_t, void, void, uint64_t *))FigRoutingManager_iOSEndpointActivateCompletionCallback, v46);
        uint64_t v8 = 0;
      }
    }
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (EndpointActivateOptions) {
    CFRelease(EndpointActivateOptions);
  }
  return v8;
}

void FigRoutingManager_iOSHandleEndpointFailedDelegate(const void *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1 && a3)
  {
    if (dword_1E9359DC0)
    {
      int v13 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    SharedManager = FigRoutingManagerGetSharedManager();
    CFRetain(a1);
    CFRetain(a3);
    if (a4) {
      CFRetain(a4);
    }
    uint64_t v10 = *((void *)SharedManager + 1);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __FigRoutingManager_iOSHandleEndpointFailedDelegate_block_invoke;
    void v11[3] = &__block_descriptor_64_e5_v8__0l;
    v11[4] = a4;
    void v11[5] = a3;
    v11[6] = a1;
    void v11[7] = a2;
    MXDispatchAsync((uint64_t)"FigRoutingManager_iOSHandleEndpointFailedDelegate", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1499, 0, 0, v10, (uint64_t)v11);
  }
}

__CFArray *FigRoutingManagerCopyEndpointsFromRouteIdentifiers(const __CFArray *a1, uint64_t a2)
{
  CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      uint64_t v8 = *MEMORY[0x1E4F20660];
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        uint64_t v10 = (const void *)FigRoutingManagerCopyEndpointWithDeviceID((uint64_t)ValueAtIndex, 0, v8, a2);
        if (v10)
        {
          uint64_t v11 = v10;
          CFArrayAppendValue(Mutable, v10);
          CFRelease(v11);
        }
        ++v7;
      }
      while (v6 != v7);
    }
  }
  return Mutable;
}

void FigRoutingManager_iOSEndpointDeactivateCompletionCallback(CFTypeRef cf, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a5) {
    uint64_t v10 = *(void **)(a5 + 16);
  }
  else {
    uint64_t v10 = 0;
  }
  [v10 timeIntervalSinceNow];
  float v12 = fabs(v11) * 1000.0;
  SharedManager = FigRoutingManagerGetSharedManager();
  id v14 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  uint64_t v15 = *((void *)SharedManager + 1);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __FigRoutingManager_iOSEndpointDeactivateCompletionCallback_block_invoke;
  v16[3] = &unk_1E57C8948;
  v16[4] = v14;
  v16[5] = cf;
  int v17 = a4;
  v16[6] = a3;
  void v16[7] = a2;
  float v18 = v12;
  uint8_t v16[8] = a5;
  v16[9] = a5;
  MXDispatchAsync((uint64_t)"FigRoutingManager_iOSEndpointDeactivateCompletionCallback", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 987, 0, 0, v15, (uint64_t)v16);
}

void FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(const void *a1, char a2, uint64_t a3)
{
  if (a2)
  {
    routingManager_resetScreenSettings((uint64_t)a1);
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
    if (v8) {
      v8(CMBaseObject, *MEMORY[0x1E4F21048], *MEMORY[0x1E4F1CF80], &cf);
    }
    CFArrayRef theArray = 0;
    FigRoutingManagerContextUtilities_CopyActivatedEndpointsInfo(a3, (uint64_t)&theArray);
    if (!theArray) {
      goto LABEL_15;
    }
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count < 1) {
      goto LABEL_15;
    }
    CFIndex v10 = Count;
    CFIndex v11 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v11);
      if (CFDictionaryGetValue(ValueAtIndex, @"ActivatedEndpointsInfo_Endpoint") == a1) {
        break;
      }
      if (v10 == ++v11) {
        goto LABEL_15;
      }
    }
    CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, @"ActivatedEndpointsInfo_EndpointTransportType");
    if (Value) {
      CFTypeRef v14 = CFRetain(Value);
    }
    else {
LABEL_15:
    }
      CFTypeRef v14 = 0;
    CMScreenHandleDeactivation(cf, v14);
    if (FigCFEqual())
    {
      CMSMNotificationUtility_PostActiveNeroVisualStreamInfoDidChange();
      CMSMNotificationUtility_PostActiveNeroVisualStreamDidChange();
    }
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
    if (v14) {
      CFRelease(v14);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t FigRoutingManagerUnregisterFromFigEndpointNotifications(uint64_t result)
{
  if (result)
  {
    CFTypeRef v1 = (const void *)result;
    if (FigRoutingManagerIsEndpointOfType(result))
    {
      FigVolumeControllerRemoveAirPlayVolumeNotificationListeners((uint64_t)v1);
      CFTypeRef v3 = 0;
      FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&v3);
      CFTypeRef cf = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)v3, (uint64_t)&cf);
      if (cf)
      {
        if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled()) {
          FigRoutingManagerUtilities_UnRegisterAirPlayStreamCapabilitiesDidChangeListener((uint64_t)cf, v1);
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
      if (v3) {
        CFRelease(v3);
      }
    }
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v1))
    {
      FigRoutingManagerGetSharedManager();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    if (FigRoutingManagerIsEndpointOfType((uint64_t)v1)
      || FigRoutingManagerIsEndpointOfType((uint64_t)v1))
    {
      FigRoutingManagerGetSharedManager();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    uint64_t result = FigRoutingManagerIsEndpointOfType((uint64_t)v1);
    if (!result)
    {
      uint64_t result = FigRoutingManagerIsEndpointOfType((uint64_t)v1);
      if (!result)
      {
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        FigRoutingManagerGetSharedManager();
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterRemoveListener();
      }
    }
  }
  return result;
}

void routingManager_resetScreenSettings(uint64_t a1)
{
  if (a1)
  {
    CFArrayRef v1 = 0;
    CFArrayRef theArray = 0;
    FigRoutingManagerCopyAirPlayEndpointsInUseForFeatures(1, &theArray, 0, &v1, 0);
    if ((!theArray || !CFArrayGetCount(theArray))
      && (!v1 || !CFArrayGetCount(v1) || FigCFArrayContainsValue()))
    {
      CMScreenSetMirroringMode(0);
      CMScreenSetVirtualDisplayClientPID(0);
    }
    if (v1)
    {
      CFRelease(v1);
      CFArrayRef v1 = 0;
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
}

void FigRoutingManagerSetMirroringModeOnBKSDisplayServices(const __CFDictionary *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a1)
  {
    CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F20340]);
    CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F20338]);
  }
  if (a3) {
    FigCFDictionaryGetInt32IfPresent();
  }
  int ContextType = FigRoutingManagerContextUtilities_GetContextType(a2);
  if (a4)
  {
    int v9 = 1;
LABEL_7:
    CMScreenSetMirroringMode(v9);
    return;
  }
  if (ContextType == 6)
  {
    CMScreenSetMirroringMode(2);
    CMScreenSetVirtualDisplayClientPID(-1);
    return;
  }
  if (ContextType == 2)
  {
    int v9 = 0;
    goto LABEL_7;
  }
}

void FigRoutingManagerResumeCurrentEndpointScreen(uint64_t a1)
{
  if (a1)
  {
    CFTypeRef v13 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&v13);
    if (v13)
    {
      CFTypeRef v12 = 0;
      uint64_t v1 = *MEMORY[0x1E4F1CF80];
      FigEndpointCopyFirstStreamOfType();
      CFTypeRef cf = 0;
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v4 + 48);
      if (v5) {
        v5(CMBaseObject, *MEMORY[0x1E4F21048], v1, &cf);
      }
      CFTypeRef v10 = 0;
      uint64_t v6 = FigEndpointGetCMBaseObject();
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      int v9 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v8 + 48);
      if (v9) {
        v9(v6, *MEMORY[0x1E4F21040], v1, &v10);
      }
      if (v12) {
        CMScreenResumeStream(v12, cf, v10, @"AirPlay Audio/Video");
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v10)
      {
        CFRelease(v10);
        CFTypeRef v10 = 0;
      }
      if (v12) {
        CFRelease(v12);
      }
      if (v13) {
        CFRelease(v13);
      }
    }
  }
}

void FigRoutingManagerSuspendCurrentEndpointScreen(uint64_t a1)
{
  if (a1)
  {
    CFTypeRef v13 = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a1, 0, (uint64_t)&v13);
    if (v13)
    {
      CFTypeRef v12 = 0;
      uint64_t v1 = *MEMORY[0x1E4F1CF80];
      FigEndpointCopyFirstStreamOfType();
      CFTypeRef cf = 0;
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v4 + 48);
      if (v5) {
        v5(CMBaseObject, *MEMORY[0x1E4F21048], v1, &cf);
      }
      CFTypeRef v10 = 0;
      uint64_t v6 = FigEndpointGetCMBaseObject();
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      int v9 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v8 + 48);
      if (v9) {
        v9(v6, *MEMORY[0x1E4F21040], v1, &v10);
      }
      if (v12) {
        CMScreenSuspendStream(v12, cf, v10, @"AirPlay Audio/Video");
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v10)
      {
        CFRelease(v10);
        CFTypeRef v10 = 0;
      }
      if (v12) {
        CFRelease(v12);
      }
      if (v13) {
        CFRelease(v13);
      }
    }
  }
}

void routingManager_handleFigEndpointDeactivatedNotification(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  SharedManager = FigRoutingManagerGetSharedManager();
  uint64_t v12 = 0;
  FigCFDictionaryGetInt64IfPresent();
  uint64_t v11 = 0;
  char Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
  if (a4) {
    CFRetain(a4);
  }
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v8 = *((void *)SharedManager + 1);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __routingManager_handleFigEndpointDeactivatedNotification_block_invoke;
  void v9[3] = &__block_descriptor_65_e5_v8__0l;
  char v10 = Int64IfPresent;
  v9[4] = a4;
  v9[5] = v12;
  void v9[6] = v11;
  void v9[7] = a3;
  MXDispatchAsync((uint64_t)"routingManager_handleFigEndpointDeactivatedNotification", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1714, 0, 0, v8, (uint64_t)v9);
}

void __routingManager_handleFigEndpointDeactivatedNotification_block_invoke(uint64_t a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  int v2 = (void *)MEMORY[0x1E4F1CF80];
  if (!*(unsigned char *)(a1 + 64))
  {
    cf[0] = 0;
    if (*(void *)(a1 + 32))
    {
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v8 = v7 ? v7 : 0;
      uint64_t v21 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v8 + 48);
      if (v21)
      {
        v21(CMBaseObject, *MEMORY[0x1E4F21048], *v2, cf);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
      }
    }
  }
  CFTypeRef v22 = 0;
  CFTypeRef v23 = 0;
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v5 = v4 ? v4 : 0;
    int v9 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
    if (v9) {
      v9(v3, *MEMORY[0x1E4F20F28], *v2, &v22);
    }
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (FigRoutingManagerIsEndpointOfType(*(void *)(a1 + 32)))
  {
    CFTypeRef v11 = CMSMUtility_CopySystemAudioRoutingContextUUID();
    CFTypeRef v23 = v11;
    FigRoutingManagerGetEndpointManager(*MEMORY[0x1E4F20648]);
    FigRoutingManagerProcessCarPlayEndpointDeactivation(0);
    cf[0] = 0;
    uint64_t v12 = FigEndpointManagerGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v16 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v14 + 48);
    if (v16) {
      v16(v12, *MEMORY[0x1E4F20620], *v2, cf);
    }
    int v17 = FigRoutingManagerCopyEndpointToAutoConnect();
    if (v17)
    {
      float v18 = v17;
      FigRoutingManagerProcessEndpointToAutoconnect(v17);
      CFRelease(v18);
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
    FigEndpointServerSetActiveEndpoint();
    if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled()) {
      FigRoutingManagerSetUpSystemRemoteDisplayContextWithEndpoint(0);
    }
    routingManager_resetCurrentlyActivatingCarPlayEndpointIfNeeded(*(const void **)(a1 + 32), @"configUpdateReasonEndedFailed");
    FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)v11);
    FigRoutingManagerContextUtilities_RemoveActivatedEndpoint((uint64_t)v11, *(void *)(a1 + 32), *(void *)(a1 + 48));
    FigRoutingManagerUtilities_UnRegisterAirPlayStreamCapabilitiesDidChangeListener(0, *(const void **)(a1 + 32));
  }
  else if (FigRoutingManagerIsEndpointOfType(*(void *)(a1 + 32)))
  {
    uint64_t v15 = [+[MXSessionManager sharedInstance] systemMirroringRoutingContextUUID];
    CFTypeRef v23 = v15;
    FigRoutingManagerContextUtilities_SetPickedEndpoints(v15, 0, @"configUpdateReasonEndedBottomUpRouteChange", 0, 0);
    FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)v15);
    FigRoutingManagerContextUtilities_RemoveActivatedEndpoint((uint64_t)v15, *(void *)(a1 + 32), *(void *)(a1 + 48));
  }
  else if (FigRoutingManagerIsEndpointOfType(*(void *)(a1 + 32)))
  {
    FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint(*(void *)(a1 + 32), *(void *)(a1 + 48), (uint64_t)&v23);
    if (v23)
    {
      FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)v23);
      FigRoutingManagerContextUtilities_RemoveActivatedEndpoint((uint64_t)v23, *(void *)(a1 + 32), *(void *)(a1 + 48));
      FigRoutingManagerRemoveCachedDelegateContext(*(void *)(a1 + 32));
    }
  }
  if (v22)
  {
    CFRelease(v22);
    CFTypeRef v22 = 0;
  }
  if (v23)
  {
    CFRelease(v23);
    CFTypeRef v23 = 0;
  }
  uint64_t v19 = *(const void **)(a1 + 32);
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(a1 + 56);
  if (v20) {
    CFRelease(v20);
  }
}

void routingManager_resetCurrentlyActivatingCarPlayEndpointIfNeeded(const void *a1, uint64_t a2)
{
  CFTypeRef v4 = CMSMUtility_CopySystemAudioRoutingContextUUID();
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)v4, (uint64_t)&theArray);
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (CFArrayGetValueAtIndex(theArray, v7) != a1)
      {
        if (v6 == ++v7) {
          goto LABEL_8;
        }
      }
      FigRoutingManagerContextUtilities_ResetCurrentlyActivatingEndpointInfo((uint64_t)v4, (uint64_t)a1, a2);
    }
LABEL_8:
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
  }
  if (v4) {
    CFRelease(v4);
  }
}

void routingManager_handleEndpointFailedNotification(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    CFTypeRef v26 = 0;
    uint64_t v27 = 0;
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    CFTypeRef v11 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v10 + 48);
    if (v11) {
      v11(CMBaseObject, *MEMORY[0x1E4F20F28], v7, &v26);
    }
    CFTypeRef cf = 0;
    uint64_t v12 = FigEndpointGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
    if (v15) {
      v15(v12, *MEMORY[0x1E4F21048], v7, &cf);
    }
    char Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
    if (dword_1E9359DC0)
    {
      int v24 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a4))
    {
      MXSimulateCrash((uint64_t)"This is unexpected. Please file a radar to MediaExperience (New Bugs) | All.");
    }
    else
    {
      SharedManager = FigRoutingManagerGetSharedManager();
      CFRetain(a4);
      if (cf) {
        CFRetain(cf);
      }
      if (a5) {
        CFRetain(a5);
      }
      if (v26)
      {
        CFRetain(v26);
        CFTypeRef v19 = v26;
      }
      else
      {
        CFTypeRef v19 = 0;
      }
      uint64_t v20 = *((void *)SharedManager + 1);
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      _OWORD v21[2] = __routingManager_handleEndpointFailedNotification_block_invoke;
      v21[3] = &__block_descriptor_73_e5_v8__0l;
      char v22 = Int64IfPresent;
      v21[4] = a5;
      void v21[5] = a4;
      v21[6] = v27;
      v21[7] = cf;
      v21[8] = v19;
      MXDispatchAsync((uint64_t)"routingManager_handleEndpointFailedNotification", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1439, 0, 0, v20, (uint64_t)v21);
    }
    if (v26)
    {
      CFRelease(v26);
      CFTypeRef v26 = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void __routingManager_handleEndpointFailedNotification_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    FigCFDictionaryGetInt64IfPresent();
    FigRoutingManager_HandleEndpointFailed(*(void *)(a1 + 40), *(_DWORD *)(a1 + 48), 0, 1);
  }
  if (FigCFEqual()) {
    routingManager_resetCurrentlyActivatingCarPlayEndpointIfNeeded(*(const void **)(a1 + 40), @"configUpdateReasonEndedFailed");
  }
  int v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 64);
  if (v5) {
    CFRelease(v5);
  }
}

void routingManager_handleEndpointFeaturesChangedNotification(int a1, int a2, int a3, CFTypeRef cf, CFTypeRef a5)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a5) {
    CFRetain(a5);
  }
  uint64_t v7 = *((void *)FigRoutingManagerGetSharedManager() + 1);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __routingManager_handleEndpointFeaturesChangedNotification_block_invoke;
  v8[3] = &__block_descriptor_48_e5_v8__0l;
  os_log_type_t v8[4] = a5;
  void v8[5] = cf;
  MXDispatchAsync((uint64_t)"routingManager_handleEndpointFeaturesChangedNotification", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1839, 0, 0, v7, (uint64_t)v8);
}

void __routingManager_handleEndpointFeaturesChangedNotification_block_invoke(uint64_t a1)
{
  v13[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetInt64IfPresent();
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
  if (v5) {
    v5(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &cf);
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v13[0] = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUIDForActivatedEndpoint(*(void *)(a1 + 40), v10, (uint64_t)v13);
  if (v11)
  {
    CMSMUtility_InformAirPlayOfAudioModeIfNecessary((uint64_t)v13[0]);
    FigRoutingManager_iOSHandleFigEndpointFeaturesActivation(*(void *)(a1 + 40), v12, v10, v13[0], 0, 0);
  }
  else
  {
    FigRoutingManager_iOSHandleFigEndpointFeaturesDeactivation(*(const void **)(a1 + 40), v12, (uint64_t)v13[0]);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v13[0])
  {
    CFRelease(v13[0]);
    v13[0] = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 32);
  if (v8) {
    CFRelease(v8);
  }
}

void routingManager_handleAirPlayVolumeControlDidChange()
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = *(CFTypeRef *)MEMORY[0x1E4F1CFC8];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v2 + 48);
  if (v3) {
    v3(CMBaseObject, *MEMORY[0x1E4F21088], *MEMORY[0x1E4F1CF80], cf);
  }
  if (dword_1E9359DC0)
  {
    int v10 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  SharedManager = FigRoutingManagerGetSharedManager();
  if (cf[0])
  {
    CFRetain(cf[0]);
    CFTypeRef v6 = cf[0];
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  uint64_t v7 = *((void *)SharedManager + 1);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __routingManager_handleAirPlayVolumeControlDidChange_block_invoke;
  v8[3] = &__block_descriptor_40_e5_v8__0l;
  os_log_type_t v8[4] = v6;
  MXDispatchAsync((uint64_t)"routingManager_handleAirPlayVolumeControlDidChange", (uint64_t)"FigRoutingManager_iOSEndpointHelpers.m", 1817, 0, 0, v7, (uint64_t)v8);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

void __routingManager_handleAirPlayVolumeControlDidChange_block_invoke(uint64_t a1)
{
  vaemHandleVolumeControlDidChange(*(void *)(a1 + 32) == *MEMORY[0x1E4F1CFD0]);
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t _FigEndpointCentralSendCommand(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, void, uint64_t), uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage) {
    return 4294954511;
  }
  uint64_t v11 = *(void *)(DerivedStorage + 8);
  if (v11
    && (FigEndpointExtendedGetClassID(), CMBaseObjectIsMemberOfClass())
    && ((uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 24)) == 0 ? (v13 = 0) : (v13 = v12),
        (uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, void, uint64_t), uint64_t))(v13 + 72)) != 0))
  {
    uint64_t v15 = v14(v11, a2, a3, a4, a5);
  }
  else
  {
    uint64_t v15 = 4294954514;
  }
  BOOL v17 = v15 == -12782 || v15 == -12785;
  if (a4 && v17) {
    a4(a1, v15, 0, a5);
  }
  return v15;
}

uint64_t FigEndpointCreateCentral(uint64_t a1, const void *a2, const void *a3, void *a4)
{
  if (a2 && !FigRoutingManagerIsEndpointOfType((uint64_t)a2))
  {
    uint64_t v18 = 4294954311;
LABEL_22:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v18;
  }
  if (!a4)
  {
    uint64_t v18 = FigSignalErrorAt();
    if (!v18) {
      return v18;
    }
    goto LABEL_22;
  }
  FigEndpointExtendedGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    goto LABEL_20;
  }
  gFigEndpointCentralObjectWeakRef = FigCFWeakReferenceHolderCreateWithReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigStarkModeControllerCreate((void *)(DerivedStorage + 24));
  if (v7) {
    goto LABEL_20;
  }
  uint64_t v9 = fsmcontroller_CopyCarModesQueue(*(void *)(DerivedStorage + 24));
  *(void *)(DerivedStorage + 48) = v9;
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(v9, v10)) {
    goto LABEL_7;
  }
  uint64_t v14 = *(void *)(DerivedStorage + 24);
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, void, uint64_t))(v17 + 56);
  if (!v20)
  {
    uint64_t v18 = 4294954514;
    goto LABEL_22;
  }
  uint64_t v7 = v20(CMBaseObject, *MEMORY[0x1E4F20F98], v14);
  if (v7)
  {
LABEL_20:
    uint64_t v18 = v7;
    goto LABEL_22;
  }
LABEL_7:
  uint64_t v11 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v12 = dispatch_queue_create("com.apple.coremedia.figEndpointcentral.modechangequeue", v11);
  *(void *)(DerivedStorage + 32) = v12;
  if (!v12)
  {
    uint64_t v18 = 4294954314;
    goto LABEL_22;
  }
  if (a2) {
    CFTypeRef v13 = CFRetain(a2);
  }
  else {
    CFTypeRef v13 = 0;
  }
  *(void *)(DerivedStorage + 8) = v13;
  if (a3)
  {
    CFTypeRef v19 = CFRetain(a3);
    *(void *)(DerivedStorage + 16) = v19;
    CMSessionGetNotificationCenter(v19);
    CMNotificationCenterAddListener();
  }
  *(void *)(DerivedStorage + 4CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = FigStarkModeControllerAddStateChangedHandler(*(void **)(DerivedStorage + 24), *(NSObject **)(DerivedStorage + 32), &__block_literal_global_8);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  uint64_t v18 = 0;
  *a4 = 0;
  return v18;
}

void central_interruptionNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    uint64_t v8 = DerivedStorage;
    if (FigCFEqual())
    {
      uint64_t v9 = *(NSObject **)(v8 + 48);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = __central_interruptionNotificationCallback_block_invoke;
      void v11[3] = &__block_descriptor_56_e5_v8__0l;
      v11[4] = v8;
      void v11[5] = a4;
      v11[6] = a5;
      MXDispatchSync((uint64_t)"central_interruptionNotificationCallback", (uint64_t)"FigEndpoint_Central.m", 943, 0, 0, v9, (uint64_t)v11);
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void __FigEndpointCreateCentral_block_invoke(uint64_t a1, long long *a2, uint64_t *a3, long long *a4, int a5)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v8)
  {
    uint64_t v9 = (const void *)v8;
    long long v112 = *a2;
    long long v113 = a2[1];
    uint64_t v10 = *a3;
    int v11 = *((_DWORD *)a3 + 2);
    unsigned int v12 = *((_DWORD *)a3 + 3);
    long long v111 = *((_OWORD *)a3 + 1);
    long long v13 = a4[1];
    long long v117 = *a4;
    long long v118 = v13;
    v119[0] = a4[2];
    *(_OWORD *)((char *)v119 + 12) = *(long long *)((char *)a4 + 44);
    int v14 = *((_DWORD *)a4 + 15);
    uint64_t v15 = *((void *)a4 + 8);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage) {
      goto LABEL_235;
    }
    uint64_t v17 = DerivedStorage;
    CFTypeRef cf = 0;
    if (a5)
    {
      central_HandleCarModeStateChange_cachedMainAudioEntity = 0;
      *(unsigned char *)(DerivedStorage + 3) = 1;
    }
    uint64_t v18 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    char v22 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v21 + 48);
    if (v22)
    {
      v22(CMBaseObject, *MEMORY[0x1E4F21060], v18, &cf);
      CFTypeRef v23 = cf;
    }
    else
    {
      CFTypeRef v23 = 0;
    }
    uint64_t v24 = *MEMORY[0x1E4F1CFD0];
    BOOL v25 = v23 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    v125[0] = v112;
    v125[1] = v113;
    *(void *)&long long v114 = v10;
    *((void *)&v114 + 1) = __PAIR64__(v12, v11);
    unsigned int v105 = v12;
    long long v115 = v111;
    *(_OWORD *)CFTypeRef v120 = v117;
    long long v121 = v118;
    *(_OWORD *)unsigned int v122 = v119[0];
    *(_OWORD *)&v122[12] = *(_OWORD *)((char *)v119 + 12);
    int v123 = v14;
    uint64_t v124 = v15;
    int v26 = FigStarkModeChangeGetActions(v125, &v114, (int *)v120, v25);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (a5 && (v26 & 0x10000) != 0)
    {
      if (dword_1E9359F40)
      {
        LODWORD(v114) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v28 = v114;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v29 = v28;
        }
        else {
          unsigned int v29 = v28 & 0xFFFFFFFE;
        }
        if (v29)
        {
          LODWORD(v125[0]) = 136315138;
          *(void *)((char *)v125 + 4) = "central_HandleCarModeStateChange";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerSendCarPlayDisableBluetoothCommand();
      *(unsigned char *)(v17 + 1) = 1;
      CMSessionSetProperty(*(void **)(v17 + 16), @"MakeStarkPortRoutableForPlayingSession", v24);
      CMSessionSetProperty(*(void **)(v17 + 16), @"NowPlayingAppShouldResumeForCarPlay", v24);
    }
    if (a5 && (v26 & 1) != 0)
    {
      if (dword_1E9359F40)
      {
        LODWORD(v114) = 0;
        int v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v31 = v114;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v32 = v31;
        }
        else {
          unsigned int v32 = v31 & 0xFFFFFFFE;
        }
        if (v32)
        {
          LODWORD(v125[0]) = 136315138;
          *(void *)((char *)v125 + 4) = "central_HandleCarModeStateChange";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v120[0] = 0;
      if (CMSessionCopyProperty(*(void **)(v17 + 16), @"iOSWillRequestToBorrowStarkMainAudio", v18, (uint64_t)v120))int v33 = 0; {
      else
      }
        int v33 = FigCFEqual();
      if (v120[0])
      {
        CFRelease(v120[0]);
        v120[0] = 0;
      }
      if (CMSessionCopyProperty(*(void **)(v17 + 16), @"iOSWillRequestToTakeStarkMainAudio", v18, (uint64_t)v120))int v34 = 0; {
      else
      }
        int v34 = FigCFEqual();
      if (v120[0])
      {
        CFRelease(v120[0]);
        v120[0] = 0;
      }
      BOOL v35 = (v33 | v34) != 0;
      if (CMSessionCopyProperty(*(void **)(v17 + 16), @"CurrentPlayingSessionIsRoutedViaCarBT", v18, (uint64_t)v120))int v36 = 0; {
      else
      }
        int v36 = FigCFEqual();
      int v37 = v35;
      if (v120[0])
      {
        CFRelease(v120[0]);
        v120[0] = 0;
      }
      if (v14 != 1)
      {
        FigRoutingManagerSendCarPlayDisableBluetoothCommand();
        *(unsigned char *)(v17 + 1) = 1;
        if (v36)
        {
          uint64_t v39 = *(void **)(v17 + 16);
          BOOL v40 = kCMSessionGlobalProperty_MakeStarkPortRoutableForPlayingSession;
        }
        else
        {
          if (v35) {
            goto LABEL_63;
          }
          uint64_t v39 = *(void **)(v17 + 16);
          BOOL v40 = kCMSessionGlobalProperty_NowPlayingAppShouldResumeForCarPlay;
        }
        CMSessionSetProperty(v39, (uint64_t)*v40, v24);
        goto LABEL_63;
      }
      if (CMSessionCopyProperty(*(void **)(v17 + 16), @"CurrentPhoneCallIsRoutedViaCarBT", v18, (uint64_t)v120))int v38 = 0; {
      else
      }
        int v38 = FigCFEqual();
      if (v120[0])
      {
        CFRelease(v120[0]);
        v120[0] = 0;
      }
      if (v38)
      {
        FigRoutingManagerSendCarPlayDisableBluetoothCommand();
        int v37 = 1;
        *(unsigned char *)(v17 + 1) = 1;
        CMSessionSetProperty(*(void **)(v17 + 16), @"MakeStarkPortRoutableForPlayingSession", v24);
      }
      else
      {
        CMSessionBeginInterruption(*(void **)(v17 + 16));
      }
      uint64_t v41 = *MEMORY[0x1E4F1CFC8];
      CMSessionSetProperty(*(void **)(v17 + 16), @"NowPlayingAppShouldResumeForCarPlay", *MEMORY[0x1E4F1CFC8]);
      if (!v37)
      {
        CMSessionSetProperty(*(void **)(v17 + 16), @"NowPlayingAppShouldResumeForCarPlay", v41);
        CMSessionBeginInterruption(*(void **)(v17 + 16));
      }
    }
LABEL_63:
    if (!a5 || (v26 & 0x20000) == 0) {
      goto LABEL_91;
    }
    if (dword_1E9359F40)
    {
      LODWORD(v114) = 0;
      CFIndex v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v43 = v114;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v44 = v43;
      }
      else {
        unsigned int v44 = v43 & 0xFFFFFFFE;
      }
      if (v44)
      {
        LODWORD(v125[0]) = 136315138;
        *(void *)((char *)v125 + 4) = "central_HandleCarModeStateChange";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v120[0] = 0;
    if (CMSessionCopyProperty(*(void **)(v17 + 16), @"iOSWillRequestToTakeStarkMainAudio", v18, (uint64_t)v120))int v45 = 0; {
    else
    }
      int v45 = FigCFEqual();
    if (v120[0])
    {
      CFRelease(v120[0]);
      v120[0] = 0;
    }
    if (CMSessionCopyProperty(*(void **)(v17 + 16), @"CurrentPlayingSessionIsRoutedViaCarBT", v18, (uint64_t)v120))int v46 = 0; {
    else
    }
      int v46 = FigCFEqual();
    if (v120[0])
    {
      CFRelease(v120[0]);
      v120[0] = 0;
    }
    FigRoutingManagerSendCarPlayDisableBluetoothCommand();
    *(unsigned char *)(v17 + 1) = 1;
    if (v46)
    {
      CMSessionSetProperty(*(void **)(v17 + 16), @"MakeStarkPortRoutableForPlayingSession", v24);
    }
    else if (!v45)
    {
      goto LABEL_86;
    }
    CMSessionSetProperty(*(void **)(v17 + 16), @"NowPlayingAppShouldResumeForCarPlay", *MEMORY[0x1E4F1CFC8]);
    LOBYTE(v45) = 1;
LABEL_86:
    CMSessionBeginInterruption(*(void **)(v17 + 16));
    CFPropertyListRef v47 = CMSMNP_CopyNowPlayingAppWasPlayingUponCarPlayDisconnectFromDisk();
    BOOL v48 = (v45 & 1) == 0 && FigCFEqual() != 0;
    *(unsigned char *)(v17 + 2) = v48;
    if (v47) {
      CFRelease(v47);
    }
LABEL_91:
    if (a5 && (v26 & 2) != 0)
    {
      if (dword_1E9359F40)
      {
        LODWORD(v114) = 0;
        uint64_t v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v50 = v114;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v51 = v50;
        }
        else {
          unsigned int v51 = v50 & 0xFFFFFFFE;
        }
        if (v51)
        {
          LODWORD(v125[0]) = 136315138;
          *(void *)((char *)v125 + 4) = "central_HandleCarModeStateChange";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerSendCarPlayDisableBluetoothCommand();
      *(unsigned char *)(v17 + 1) = 1;
      CMSessionSetProperty(*(void **)(v17 + 16), @"NowPlayingAppShouldResumeForCarPlay", *MEMORY[0x1E4F1CFC8]);
      CMSessionBeginInterruption(*(void **)(v17 + 16));
    }
    if (a5 && (v26 & 4) != 0)
    {
      if (dword_1E9359F40)
      {
        LODWORD(v114) = 0;
        CFIndex v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v53 = v114;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v54 = v53;
        }
        else {
          unsigned int v54 = v53 & 0xFFFFFFFE;
        }
        if (v54)
        {
          LODWORD(v125[0]) = 136315138;
          *(void *)((char *)v125 + 4) = "central_HandleCarModeStateChange";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v120[0] = 0;
      if (CMSessionCopyProperty(*(void **)(v17 + 16), @"iOSWillRequestToBorrowStarkMainAudio", v18, (uint64_t)v120))int v55 = 0; {
      else
      }
        int v55 = FigCFEqual();
      if (v120[0])
      {
        CFRelease(v120[0]);
        v120[0] = 0;
      }
      if (CMSessionCopyProperty(*(void **)(v17 + 16), @"iOSWillRequestToTakeStarkMainAudio", v18, (uint64_t)v120))int v56 = 0; {
      else
      }
        int v56 = FigCFEqual();
      if (v120[0])
      {
        CFRelease(v120[0]);
        v120[0] = 0;
      }
      if (CMSessionCopyProperty(*(void **)(v17 + 16), @"CurrentPlayingSessionIsRoutedViaCarBT", v18, (uint64_t)v120))int v57 = 0; {
      else
      }
        int v57 = FigCFEqual();
      if (v120[0])
      {
        CFRelease(v120[0]);
        v120[0] = 0;
      }
      FigRoutingManagerSendCarPlayDisableBluetoothCommand();
      *(unsigned char *)(v17 + 1) = 1;
      uint64_t v58 = *(void **)(v17 + 16);
      if (v57 || v55 || v56)
      {
        CMSessionSetProperty(v58, @"MakeStarkPortRoutableForPlayingSession", v24);
        if ((v26 & 0x10) == 0) {
          goto LABEL_164;
        }
        goto LABEL_137;
      }
      CMSessionSetProperty(v58, @"NowPlayingAppShouldResumeForCarPlay", *MEMORY[0x1E4F1CFC8]);
      CMSessionBeginInterruption(*(void **)(v17 + 16));
    }
    else if (!a5 && (v26 & 8) != 0)
    {
      if (FigEndpointCentralEntityHoldsResource((uint64_t)v9, @"Car", @"MainAudio"))CMSessionBeginInterruption(*(void **)(v17 + 16)); {
      if (!*(unsigned char *)(v17 + 1))
      }
      {
        FigRoutingManagerSendCarPlayDisableBluetoothCommand();
        *(unsigned char *)(v17 + 1) = 1;
        if ((v26 & 0x10) == 0) {
          goto LABEL_164;
        }
        goto LABEL_137;
      }
    }
    if ((v26 & 0x10) == 0) {
      goto LABEL_164;
    }
LABEL_137:
    if (dword_1E9359F40)
    {
      LODWORD(v114) = 0;
      uint64_t v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v60 = v114;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v61 = v60;
      }
      else {
        unsigned int v61 = v60 & 0xFFFFFFFE;
      }
      if (v61)
      {
        LODWORD(v125[0]) = 136315138;
        *(void *)((char *)v125 + 4) = "central_HandleCarModeStateChange";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSessionEndInterruption(*(void **)(v17 + 16), @"resumable.carMainAudioUnborrowed");
    if (!*(unsigned char *)(v17 + 1))
    {
      FigRoutingManagerSendCarPlayDisableBluetoothCommand();
      *(unsigned char *)(v17 + 1) = 1;
    }
    *(void *)&long long v114 = 0;
    if (CMSessionCopyProperty(*(void **)(v17 + 16), @"iOSWillRequestToBorrowStarkMainAudio", v18, (uint64_t)&v114))int v62 = 0; {
    else
    }
      int v62 = FigCFEqual();
    if ((void)v114)
    {
      CFRelease((CFTypeRef)v114);
      *(void *)&long long v114 = 0;
    }
    if (CMSessionCopyProperty(*(void **)(v17 + 16), @"iOSWillRequestToTakeStarkMainAudio", v18, (uint64_t)&v114))int v63 = 0; {
    else
    }
      int v63 = FigCFEqual();
    if ((void)v114)
    {
      CFRelease((CFTypeRef)v114);
      *(void *)&long long v114 = 0;
    }
    if (v62 | v63)
    {
      uint64_t v64 = *MEMORY[0x1E4F1CFC8];
    }
    else
    {
      if (!*(unsigned char *)(v17 + 2)) {
        goto LABEL_164;
      }
      uint64_t v64 = v24;
      if (dword_1E9359F40)
      {
        uint64_t v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v64 = v24;
      }
    }
    CMSessionSetProperty(*(void **)(v17 + 16), @"NowPlayingAppShouldResumeForCarPlay", v64);
    *(unsigned char *)(v17 + 2) = 0;
LABEL_164:
    if ((v26 & 0x20) != 0)
    {
      if (dword_1E9359F40)
      {
        LODWORD(v114) = 0;
        uint64_t v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v67 = v114;
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v68 = v67;
        }
        else {
          unsigned int v68 = v67 & 0xFFFFFFFE;
        }
        if (v68)
        {
          LODWORD(v125[0]) = 136315138;
          *(void *)((char *)v125 + 4) = "central_HandleCarModeStateChange";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v120[0] = 0;
      if (CMSessionCopyProperty(*(void **)(v17 + 16), @"iOSWillRequestToBorrowStarkMainAudio", v18, (uint64_t)v120))int v69 = 0; {
      else
      }
        int v69 = FigCFEqual();
      if (v120[0])
      {
        CFRelease(v120[0]);
        v120[0] = 0;
      }
      if (CMSessionCopyProperty(*(void **)(v17 + 16), @"iOSWillRequestToTakeStarkMainAudio", v18, (uint64_t)v120))int v70 = 0; {
      else
      }
        int v70 = FigCFEqual();
      if (v120[0])
      {
        CFRelease(v120[0]);
        v120[0] = 0;
      }
      if (v70 | v69) {
        CMSessionEndInterruption(*(void **)(v17 + 16), @"resumable.carMainAudioUnborrowed");
      }
      if (!*(unsigned char *)(v17 + 1))
      {
        FigRoutingManagerSendCarPlayDisableBluetoothCommand();
        *(unsigned char *)(v17 + 1) = 1;
      }
    }
    if ((v26 & 0x4000) != 0)
    {
      CMSessionMgrInterruptVoiceAssistantIfCarSupportsAuxStream();
      if ((v26 & 0x800) == 0)
      {
LABEL_188:
        if ((v26 & 0x1000) == 0) {
          goto LABEL_189;
        }
        goto LABEL_200;
      }
    }
    else if ((v26 & 0x800) == 0)
    {
      goto LABEL_188;
    }
    if (dword_1E9359F40)
    {
      LODWORD(v114) = 0;
      unsigned int v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v72 = v114;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v73 = v72;
      }
      else {
        unsigned int v73 = v72 & 0xFFFFFFFE;
      }
      if (v73)
      {
        LODWORD(v125[0]) = 136315138;
        *(void *)((char *)v125 + 4) = "central_HandleCarModeStateChange";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSessionSetProperty(*(void **)(v17 + 16), @"MakeStarkPortRoutableForPlayingSession", v24);
    if ((v26 & 0x1000) == 0)
    {
LABEL_189:
      if ((v26 & 0x8000) == 0) {
        goto LABEL_218;
      }
      goto LABEL_208;
    }
LABEL_200:
    if (dword_1E9359F40)
    {
      LODWORD(v114) = 0;
      int v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v75 = v114;
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v76 = v75;
      }
      else {
        unsigned int v76 = v75 & 0xFFFFFFFE;
      }
      if (v76)
      {
        LODWORD(v125[0]) = 136315138;
        *(void *)((char *)v125 + 4) = "central_HandleCarModeStateChange";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSessionSetProperty(*(void **)(v17 + 16), @"MakeStarkPortRoutableForPhoneCall", v24);
    if ((v26 & 0x8000) == 0)
    {
LABEL_218:
      if (v11 == 1 && v105 == 2) {
        uint64_t v81 = v24;
      }
      else {
        uint64_t v81 = *MEMORY[0x1E4F1CFC8];
      }
      CMSessionSetProperty(*(void **)(v17 + 16), @"StarkMainAudioIsOwnedByiOSButBorrowedByCar", v81);
      if (v11 != central_HandleCarModeStateChange_cachedMainAudioEntity)
      {
        if (v11 == 2 || v11 == 1)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
        }
        central_HandleCarModeStateChange_cachedMainAudioEntity = v11;
      }
      if ((v26 & 0x40) != 0)
      {
        id v82 = (const void *)FigEndpointUtility_CopyEndpointType();
        CFDictionaryRef v83 = (const void *)FigEndpointUtility_CopyEndpointTransportType();
        v120[0] = 0;
        FigEndpointCopyStreamsForTypeAndSubType();
        if (v120[0])
        {
          __int16 v104 = v26;
          uint64_t v106 = v24;
          uint64_t v109 = v9;
          CFIndex Count = CFArrayGetCount((CFArrayRef)v120[0]);
          if (Count >= 1)
          {
            CFIndex v85 = Count;
            CFIndex v86 = 0;
            uint64_t v87 = *MEMORY[0x1E4F213B0];
            do
            {
              *(void *)&v125[0] = 0;
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v120[0], v86);
              uint64_t v89 = FigEndpointStreamGetCMBaseObject();
              uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v90) {
                uint64_t v91 = v90;
              }
              else {
                uint64_t v91 = 0;
              }
              uint64_t v92 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))(v91 + 48);
              if (v92) {
                v92(v89, v87, 0, v125);
              }
              if (FigCFEqual()) {
                CMScreenSuspendStream(ValueAtIndex, v82, v83, @"ModeChange:CarHasScreen");
              }
              if (*(void *)&v125[0]) {
                CFRelease(*(CFTypeRef *)&v125[0]);
              }
              ++v86;
            }
            while (v85 != v86);
          }
          uint64_t v24 = v106;
          uint64_t v9 = v109;
          LOWORD(v26) = v104;
          if (v120[0]) {
            CFRelease(v120[0]);
          }
        }
        if (v82) {
          CFRelease(v82);
        }
        if (v83) {
          CFRelease(v83);
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        if ((v26 & 0x80) == 0)
        {
LABEL_231:
          if ((v26 & 0x2000) == 0) {
            goto LABEL_232;
          }
          goto LABEL_277;
        }
      }
      else if ((v26 & 0x80) == 0)
      {
        goto LABEL_231;
      }
      uint64_t v93 = (const void *)FigEndpointUtility_CopyEndpointType();
      unsigned int v94 = (const void *)FigEndpointUtility_CopyEndpointTransportType();
      v120[0] = 0;
      FigEndpointCopyStreamsForTypeAndSubType();
      if (v120[0])
      {
        uint64_t v107 = v24;
        uint64_t v110 = v9;
        CFIndex v95 = CFArrayGetCount((CFArrayRef)v120[0]);
        if (v95 >= 1)
        {
          CFIndex v96 = v95;
          CFIndex v97 = 0;
          uint64_t v98 = *MEMORY[0x1E4F213B0];
          do
          {
            *(void *)&v125[0] = 0;
            uint64_t v99 = CFArrayGetValueAtIndex((CFArrayRef)v120[0], v97);
            uint64_t v100 = FigEndpointStreamGetCMBaseObject();
            uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v101) {
              uint64_t v102 = v101;
            }
            else {
              uint64_t v102 = 0;
            }
            int v103 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))(v102 + 48);
            if (v103) {
              v103(v100, v98, 0, v125);
            }
            if (FigCFEqual()) {
              CMScreenResumeStream(v99, v93, v94, @"ModeChange:iOSHasScreen");
            }
            if (*(void *)&v125[0]) {
              CFRelease(*(CFTypeRef *)&v125[0]);
            }
            ++v97;
          }
          while (v96 != v97);
        }
        uint64_t v24 = v107;
        uint64_t v9 = v110;
        if (v120[0]) {
          CFRelease(v120[0]);
        }
      }
      if (v93) {
        CFRelease(v93);
      }
      if (v94) {
        CFRelease(v94);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if ((v26 & 0x2000) == 0)
      {
LABEL_232:
        if ((v26 & 0x100) == 0) {
          goto LABEL_233;
        }
        goto LABEL_278;
      }
LABEL_277:
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if ((v26 & 0x100) == 0)
      {
LABEL_233:
        if ((v26 & 0x400) != 0) {
LABEL_234:
        }
          CMSessionSetProperty(*(void **)(v17 + 16), @"CarSpeechStateChanged", v24);
LABEL_235:
        CFRelease(v9);
        return;
      }
LABEL_278:
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if ((v26 & 0x400) == 0) {
        goto LABEL_235;
      }
      goto LABEL_234;
    }
LABEL_208:
    if (dword_1E9359F40)
    {
      LODWORD(v114) = 0;
      uint64_t v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v78 = v114;
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v79 = v78;
      }
      else {
        unsigned int v79 = v78 & 0xFFFFFFFE;
      }
      if (v79)
      {
        LODWORD(v125[0]) = 136315138;
        *(void *)((char *)v125 + 4) = "central_HandleCarModeStateChange";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!a5 && !*(unsigned char *)(v17 + 1))
    {
      FigRoutingManagerSendCarPlayDisableBluetoothCommand();
      *(unsigned char *)(v17 + 1) = 1;
    }
    goto LABEL_218;
  }
}

void central_endpointNotificationCallback(uint64_t a1, uint64_t a2)
{
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  else if (FigCFEqual() || FigCFEqual())
  {
    central_endpointDidDeactivateNotificationCallback(a2);
  }
}

uint64_t FigEndpointCentralGetInitialModesReceived()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result) {
    return *(unsigned __int8 *)(result + 3);
  }
  return result;
}

uint64_t FigEndpointSessionHandleInterruption(void *DerivedStorage, long long *a2, uint64_t a3, void *a4, char a5)
{
  if (*(_DWORD *)a2 == 1)
  {
    uint64_t v14 = *((void *)a2 + 2);
    int v15 = *((_DWORD *)a2 + 6);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v31 = 0u;
    memset(v32, 0, 24);
    long long v29 = 0u;
    long long v30 = 0u;
    if (DerivedStorage)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v17 = DerivedStorage;
        *(void *)&long long v29 = 0x200000002;
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            *(void *)((char *)v32 + 12) = v14;
            DWORD2(v32[0]) = v15;
            if (a4)
            {
              if (FigCFEqual())
              {
                *(void *)&long long v31 = 23;
                LODWORD(v32[0]) = 0;
                uint64_t v18 = v17[3];
                uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
                uint64_t v12 = fsmcontroller_RequestModeChange(v18, (uint64_t)&v29, CStringPtrAndBufferToFree, (uint64_t)&v24, a5);
                uint64_t DerivedStorage = 0;
                goto LABEL_25;
              }
            }
          }
        }
        uint64_t DerivedStorage = 0;
      }
    }
    uint64_t v12 = 0;
LABEL_25:
    free(DerivedStorage);
    CMSMNotificationUtility_PostVoicePromptStyleDidChange();
    return v12;
  }
  if (!*(_DWORD *)a2)
  {
    long long v21 = *a2;
    long long v22 = a2[1];
    uint64_t v23 = *((void *)a2 + 4);
    unsigned int v28 = 0;
    if (DerivedStorage)
    {
      uint64_t v6 = CMBaseObjectGetDerivedStorage();
      if (v6)
      {
        uint64_t v7 = v6;
        memset(v27, 0, sizeof(v27));
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        memset(v32, 0, 24);
        long long v24 = v21;
        long long v25 = v22;
        uint64_t v26 = v23;
        uint64_t v8 = central_ConstructModeChangeRequestToGet((uint64_t)a4, @"MainAudio", (uint64_t)&v24, (uint64_t)&v29);
        if (v8)
        {
          uint64_t v12 = v8;
          goto LABEL_24;
        }
        uint64_t v9 = *(void *)(v7 + 24);
        uint64_t v10 = FigCFStringGetCStringPtrAndBufferToFree();
        int v11 = fsmcontroller_RequestModeChange(v9, (uint64_t)&v29, v10, (uint64_t)v27, 0);
        uint64_t v12 = 4294954311;
        if (v11 || DWORD2(v27[0]) != 2) {
          goto LABEL_24;
        }
        if (a4)
        {
          if ((v31 - 20) > 3) {
            uint64_t v13 = 0;
          }
          else {
            uint64_t v13 = (uint64_t)*(&off_1E57C8A30 + (int)v31 - 20);
          }
          uint64_t v12 = 0;
          *a4 = v13;
          goto LABEL_24;
        }
      }
    }
    uint64_t v12 = 0;
LABEL_24:
    uint64_t DerivedStorage = v28;
    goto LABEL_25;
  }
  return 0;
}

uint64_t FigEndpointCentralGetResourceTypeBorrowConstraint(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 0;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 24);
  return FigStarkModeControllerGetCurrentResourceBorrowConstraint(v4, a2);
}

uint64_t _FigEndpointCentralEntityHoldsResource(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(v6, 0, sizeof(v6));
  if (result)
  {
    uint64_t result = 0;
    if (a2)
    {
      if (a3)
      {
        uint64_t DerivedStorage = (__n128 **)CMBaseObjectGetDerivedStorage();
        if (!DerivedStorage || (uint64_t v4 = DerivedStorage, *(unsigned char *)DerivedStorage))
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          return 0;
        }
        else
        {
          if (_FigIsNotCurrentDispatchQueue()) {
            MXSimulateCrash((uint64_t)"This method should only be called from controller queue! Please file a radar agains"
          }
                                     "t 'MediaExperience Session | All'");
          _fsmcontroller_GetCurrentMode(v4[3], v6);
          if (FigCFEqual()) {
            return FigCFEqual();
          }
          uint64_t result = FigCFEqual();
          if (result) {
            return FigCFEqual();
          }
        }
      }
    }
  }
  return result;
}

uint64_t __FigEndpointCentralEntityHoldsResource_block_invoke(void *a1)
{
  uint64_t result = _FigEndpointCentralEntityHoldsResource(a1[5], a1[6], a1[7]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t FigEndpointCentralEntityOwnsResource(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = CMBaseObjectGetDerivedStorage();
        if (result)
        {
          memset(v6, 0, sizeof(v6));
          fsmcontroller_GetCurrentMode(*(void *)(result + 24), (uint64_t)v6);
          if (CFEqual(a3, @"MainAudio")) {
            return FigCFEqual();
          }
          uint64_t result = CFEqual(a3, @"Screen");
          if (result) {
            return FigCFEqual();
          }
        }
      }
    }
  }
  return result;
}

uint64_t _FigEndpointCentralGetEntityDoingActivity(uint64_t result, const void *a2)
{
  __n128 v4 = 0u;
  long long v5 = 0u;
  if (result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t result = 0;
    if (a2)
    {
      if (DerivedStorage)
      {
        if (_FigIsNotCurrentDispatchQueue()) {
          MXSimulateCrash((uint64_t)"This method should only be called from controller queue! Please file a radar against "
        }
                                   "'MediaExperience Session | All'");
        _fsmcontroller_GetCurrentMode(*(__n128 **)(DerivedStorage + 24), &v4);
        if (CFEqual(a2, @"PhoneCall"))
        {
          return DWORD2(v5);
        }
        else if (CFEqual(a2, @"Speech"))
        {
          return v5;
        }
        else
        {
          uint64_t result = CFEqual(a2, @"TurnByTurnNavigation");
          if (result) {
            return HIDWORD(v5);
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigEndpointCentralRequestResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  memset(v26, 0, sizeof(v26));
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  memset(v22, 0, sizeof(v22));
  long long v21 = 0;
  if (!a1) {
    goto LABEL_13;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_13;
  }
  uint64_t v9 = DerivedStorage;
  long long v10 = *(_OWORD *)(a3 + 16);
  v19[0] = *(_OWORD *)a3;
  v19[1] = v10;
  uint64_t v20 = *(void *)(a3 + 32);
  uint64_t v11 = central_ConstructModeChangeRequestToGet((uint64_t)a5, a2, (uint64_t)v19, (uint64_t)v22);
  if (v11)
  {
    uint64_t v16 = v11;
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(v9 + 24);
  uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
  int v14 = fsmcontroller_RequestModeChange(v12, (uint64_t)v22, CStringPtrAndBufferToFree, (uint64_t)v26, 0);
  if (FigCFEqual())
  {
    int v15 = DWORD2(v26[0]);
  }
  else
  {
    if (!FigCFEqual())
    {
      uint64_t v16 = 4294954311;
      goto LABEL_17;
    }
    int v15 = v26[0];
  }
  uint64_t v16 = 4294954311;
  if (!v14 && v15 == 2)
  {
    if (a5)
    {
      if ((v23 - 20) > 3) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = (uint64_t)*(&off_1E57C8A30 + (int)v23 - 20);
      }
      uint64_t v16 = 0;
      *a5 = v17;
      goto LABEL_17;
    }
LABEL_13:
    uint64_t v16 = 0;
  }
LABEL_17:
  free(v21);
  return v16;
}

uint64_t central_ConstructModeChangeRequestToGet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *(void *)(a3 + 16);
  int v6 = *(_DWORD *)(a3 + 24);
  *(void *)a4 = 0x200000002;
  if (FigCFEqual())
  {
    uint64_t v7 = (uint64_t *)(a4 + 32);
    if (!a1) {
      goto LABEL_10;
    }
LABEL_6:
    if (FigCFEqual())
    {
      uint64_t v8 = 500;
      uint64_t v9 = 0x1F400000016;
    }
    else
    {
      FigCFEqual();
      uint64_t v9 = 0x1F400000014;
      uint64_t v8 = 0x6400000064;
    }
    *uint64_t v7 = v9;
    v7[2] = v8;
    goto LABEL_10;
  }
  if (!FigCFEqual()) {
    return 4294949808;
  }
  uint64_t v7 = (uint64_t *)(a4 + 8);
  if (a1) {
    goto LABEL_6;
  }
LABEL_10:
  *(void *)(a4 + 6CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = v12;
  *(_DWORD *)(a4 + 56) = v6;
  if ((v6 & 0xFFFFFFFE) == 0xA)
  {
    *((_DWORD *)v7 + 4) = 500;
    int v10 = *(_DWORD *)(a4 + 60);
  }
  else
  {
    int v10 = v12;
  }
  if (v10 == 1) {
    *((_DWORD *)v7 + 4) = 1000;
  }
  if (FigCFEqual() || (uint64_t result = FigCFEqual(), result))
  {
    uint64_t result = 0;
    *((_DWORD *)v7 + 4) = 1000;
  }
  return result;
}

uint64_t FigEndpointCentralUpdateiOSDeviceState(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, 72);
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v9 = DerivedStorage;
      *(void *)&v14[0] = 0x200000002;
      *(void *)((char *)&v14[3] + 12) = a2;
      DWORD2(v14[3]) = a3;
      uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      uint64_t v11 = *(void **)(v9 + 24);
      if (!a5)
      {
        uint64_t v12 = fsmcontroller_RequestModeChange((uint64_t)v11, (uint64_t)v14, CStringPtrAndBufferToFree, (uint64_t)v15, 0);
        goto LABEL_7;
      }
      fsmcontroller_RequestModeChangeAsync(v11, v14, CStringPtrAndBufferToFree, (uint64_t)&__block_literal_global_41, 0);
    }
  }
  uint64_t v12 = 0;
LABEL_7:
  free(0);
  return v12;
}

void __FigEndpointCentralUpdateiOSDeviceState_block_invoke(uint64_t a1, int a2)
{
  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t FigEndpointCentralUpdateIsVoiceAssistantActive(uint64_t a1, char a2)
{
  if (!a1) {
    return 4294954316;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294954315;
  }
  FigStarkModeControllerUpdateIsVoiceAssistantActive(*(void *)(DerivedStorage + 24), a2);
  return 0;
}

uint64_t FigEndpointCentralCopyStarkModeController(uint64_t a1, void *a2)
{
  uint64_t result = 4294954316;
  if (a1 && a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      int v6 = *(const void **)(DerivedStorage + 24);
      if (v6) {
        CFTypeRef v7 = CFRetain(v6);
      }
      else {
        CFTypeRef v7 = 0;
      }
      uint64_t result = 0;
      *a2 = v7;
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954315;
    }
  }
  return result;
}

uint64_t central_Invalidate()
{
  MXSimulateCrash((uint64_t)"Invalidate was called in FigEndpoint_Central, this is unexpected! Please file a radar against"
                           " 'MediaExperience Session | All'");
  return 0;
}

void central_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(NSObject **)(DerivedStorage + 48);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = __central_Finalize_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  void v5[4] = a1;
  MXDispatchSync((uint64_t)"central_Finalize", (uint64_t)"FigEndpoint_Central.m", 1092, 0, 0, v3, (uint64_t)v5);
  __n128 v4 = *(NSObject **)(DerivedStorage + 48);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 48) = 0;
  }
}

__CFString *central_CopyDebugDescription(uint64_t a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigEndpointCentral %p>", a1);
  return Mutable;
}

uint64_t central_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  uint64_t v8 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 48);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __central_CopyProperty_block_invoke;
  void v11[3] = &unk_1E57C60E0;
  v11[4] = &v12;
  void v11[5] = a1;
  v11[6] = a2;
  void v11[7] = a3;
  void v11[8] = a4;
  MXDispatchSync((uint64_t)"central_CopyProperty", (uint64_t)"FigEndpoint_Central.m", 1182, 0, 0, v8, (uint64_t)v11);
  uint64_t v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_194D9AE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t central_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  int v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 48);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __central_SetProperty_block_invoke;
  void v9[3] = &unk_1E57C6180;
  v9[4] = &v10;
  v9[5] = a1;
  void v9[6] = a2;
  void v9[7] = a3;
  MXDispatchSync((uint64_t)"central_SetProperty", (uint64_t)"FigEndpoint_Central.m", 1294, 0, 0, v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_194D9AF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void central_resetStates()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    FigStarkModeControllerRemoveStateChangedHandler(*(CFTypeRef *)(DerivedStorage + 24), *(void *)(DerivedStorage + 40));
    *(void *)(v1 + 4CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v2 = FigNotificationCenterRemoveWeakListener();
    *(_WORD *)(v1 + 1) = 0;
    *(unsigned char *)(v1 + 3) = 0;
    if (*(void *)(v1 + 16))
    {
      CMSessionGetNotificationCenter(v2);
      CMNotificationCenterRemoveListener();
      uint64_t v3 = *(void *)(v1 + 16);
      *(void *)(v1 + 16) = 0;
      __n128 v4 = MXGetNotificationSenderQueue();
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      _OWORD v8[2] = __central_resetStates_block_invoke;
      v8[3] = &__block_descriptor_40_e5_v8__0l;
      os_log_type_t v8[4] = v3;
      MXDispatchAsync((uint64_t)"central_resetStates", (uint64_t)"FigEndpoint_Central.m", 1052, 0, 0, v4, (uint64_t)v8);
    }
    long long v5 = *(const void **)(v1 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(v1 + 24) = 0;
    }
    int v6 = *(NSObject **)(v1 + 32);
    if (v6)
    {
      dispatch_release(v6);
      *(void *)(v1 + 32) = 0;
    }
    uint64_t v7 = *(const void **)(v1 + 8);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v1 + 8) = 0;
    }
  }
}

void __central_resetStates_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t central_SetDelegateRemoteControl(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __n128 v4 = *(NSObject **)(DerivedStorage + 48);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __central_SetDelegateRemoteControl_block_invoke;
  v7[3] = &unk_1E57C5878;
  void v7[4] = &v8;
  void v7[5] = DerivedStorage;
  void v7[6] = a2;
  MXDispatchSync((uint64_t)"central_SetDelegateRemoteControl", (uint64_t)"FigEndpoint_Central.m", 1193, 0, 0, v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_194D9B684(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t central_RequestCarUI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v6 = *(NSObject **)(DerivedStorage + 48);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __central_RequestCarUI_block_invoke;
  void v9[3] = &unk_1E57C6180;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  void v9[6] = a2;
  void v9[7] = a3;
  MXDispatchSync((uint64_t)"central_RequestCarUI", (uint64_t)"FigEndpoint_Central.m", 1305, 0, 0, v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_194D9B854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t central_BorrowScreen(uint64_t a1, const __CFString *a2, CFStringRef theString)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v8 = 0x200000002;
  LODWORD(v9) = 22;
  if (!theString
    || CFStringFind(theString, @"presenting siri", 0).location == -1
    && CFStringFind(theString, @"full screen alert", 0).location == -1
    && CFStringFind(theString, @"InCall", 0).location == -1
    && CFStringFind(theString, @"Siri", 0).location == -1)
  {
    int v6 = 100;
  }
  else
  {
    int v6 = 500;
  }
  DWORD1(v9) = v6;
  LODWORD(v1CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = 100;
  central_requestCarModeChange(a1, (long long *)&v8, a2, theString);
  return 0;
}

uint64_t central_UnborrowScreen(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v4 = 0x200000002;
  LODWORD(v5) = 23;
  central_requestCarModeChange(a1, (long long *)&v4, a2, a3);
  return 0;
}

uint64_t central_TakeScreen(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  *(void *)&long long v12 = 0x200000002;
  DWORD2(v12) = 20;
  uint64_t v11 = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = *(void (**)(uint64_t, void, void, uint64_t *))(v8 + 48);
  if (v9) {
    v9(CMBaseObject, *MEMORY[0x1E4F21060], *MEMORY[0x1E4F1CF80], &v11);
  }
  HIDWORD(v12) = 500;
  *((void *)&v13 + 1) = 0x64000001F4;
  if (FigCFEqual() && v11 == *MEMORY[0x1E4F1CFC8])
  {
    HIDWORD(v12) = 100;
    *((void *)&v13 + 1) = 0x6400000064;
  }
  central_requestCarModeChange(a1, &v12, a2, a3);
  return 0;
}

uint64_t central_SetHIDInputMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v6 = *(NSObject **)(DerivedStorage + 48);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __central_SetHIDInputMode_block_invoke;
  void v9[3] = &unk_1E57C6180;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  void v9[6] = a2;
  void v9[7] = a3;
  MXDispatchSync((uint64_t)"central_SetHIDInputMode", (uint64_t)"FigEndpoint_Central.m", 1419, 0, 0, v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_194D9BBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t central_CopyHIDInputMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(NSObject **)(DerivedStorage + 48);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __central_CopyHIDInputMode_block_invoke;
  void v11[3] = &unk_1E57C60E0;
  v11[4] = &v12;
  void v11[5] = DerivedStorage;
  v11[6] = a2;
  void v11[7] = a3;
  void v11[8] = a4;
  MXDispatchSync((uint64_t)"central_CopyHIDInputMode", (uint64_t)"FigEndpoint_Central.m", 1449, 0, 0, v8, (uint64_t)v11);
  uint64_t v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_194D9BCF0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t central_SendCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 48);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = __central_SendCommand_block_invoke;
  void v12[3] = &__block_descriptor_72_e5_v8__0l;
  void v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  v12[7] = a4;
  v12[8] = a5;
  MXDispatchSync((uint64_t)"central_SendCommand", (uint64_t)"FigEndpoint_Central.m", 1479, 0, 0, v10, (uint64_t)v12);
  return 0;
}

uint64_t central_CreateRemoteControlSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  if (!v6 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 48);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __central_CreateRemoteControlSession_block_invoke;
  v10[3] = &unk_1E57C60E0;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  void v10[6] = v6;
  void v10[7] = a2;
  void v10[8] = a3;
  MXDispatchSync((uint64_t)"central_CreateRemoteControlSession", (uint64_t)"FigEndpoint_Central.m", 1522, 0, 0, v7, (uint64_t)v10);
  uint64_t v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_194D9BED8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t central_CreateCommChannel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  if (!v6 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 48);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __central_CreateCommChannel_block_invoke;
  v10[3] = &unk_1E57C60E0;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  void v10[6] = v6;
  void v10[7] = a2;
  void v10[8] = a3;
  MXDispatchSync((uint64_t)"central_CreateCommChannel", (uint64_t)"FigEndpoint_Central.m", 1549, 0, 0, v7, (uint64_t)v10);
  uint64_t v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_194D9BFFC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t central_SendData(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, void, uint64_t), uint64_t a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = *(void *)(DerivedStorage + 8);
  if (!v11 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(NSObject **)(DerivedStorage + 48);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  _OWORD v15[2] = __central_SendData_block_invoke;
  v15[3] = &unk_1E57C61F0;
  v15[4] = &v16;
  void v15[5] = DerivedStorage;
  v15[6] = v11;
  v15[7] = a2;
  v15[8] = a3;
  v15[9] = a4;
  v15[10] = a5;
  MXDispatchSync((uint64_t)"central_SendData", (uint64_t)"FigEndpoint_Central.m", 1576, 0, 0, v12, (uint64_t)v15);
  uint64_t v13 = *((unsigned int *)v17 + 6);
  if (v13 == -12782)
  {
    if (!a4)
    {
      uint64_t v13 = 4294954514;
      goto LABEL_10;
    }
LABEL_9:
    a4(a1, a2, *((unsigned int *)v17 + 6), a5);
    uint64_t v13 = *((unsigned int *)v17 + 6);
    goto LABEL_10;
  }
  if (a4 && v13 == -12785) {
    goto LABEL_9;
  }
LABEL_10:
  _Block_object_dispose(&v16, 8);
  return v13;
}

void sub_194D9C184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t central_CloseCommChannel(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(DerivedStorage + 8);
  if (!v4 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    uint64_t v4 = 0;
  }
  long long v5 = *(NSObject **)(DerivedStorage + 48);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __central_CloseCommChannel_block_invoke;
  v8[3] = &unk_1E57C6180;
  os_log_type_t v8[4] = &v9;
  void v8[5] = DerivedStorage;
  void v8[6] = v4;
  void v8[7] = a2;
  MXDispatchSync((uint64_t)"central_CloseCommChannel", (uint64_t)"FigEndpoint_Central.m", 1606, 0, 0, v5, (uint64_t)v8);
  uint64_t v6 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_194D9C2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t central_RequestScreenViewArea(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  if (!v6 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 48);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __central_RequestScreenViewArea_block_invoke;
  v10[3] = &unk_1E57C60E0;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  void v10[6] = v6;
  void v10[7] = a2;
  void v10[8] = a3;
  MXDispatchSync((uint64_t)"central_RequestScreenViewArea", (uint64_t)"FigEndpoint_Central.m", 1633, 0, 0, v7, (uint64_t)v10);
  uint64_t v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_194D9C3C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t central_CopyCurrentScreenViewArea(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(DerivedStorage + 8);
  if (!v6 || (FigEndpointExtendedGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 48);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __central_CopyCurrentScreenViewArea_block_invoke;
  v10[3] = &unk_1E57C60E0;
  v10[4] = &v11;
  v10[5] = DerivedStorage;
  void v10[6] = v6;
  void v10[7] = a2;
  void v10[8] = a3;
  MXDispatchSync((uint64_t)"central_CopyCurrentScreenViewArea", (uint64_t)"FigEndpoint_Central.m", 1660, 0, 0, v7, (uint64_t)v10);
  uint64_t v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_194D9C4E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void central_requestCarModeChange(uint64_t a1, long long *a2, const __CFString *a3, const __CFString *a4)
{
  MutableCFArrayRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a3);
  CFStringAppend(MutableCopy, @": ");
  CFStringAppend(MutableCopy, a4);
  if (a1)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v9 = (void *)DerivedStorage[3];
      uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      fsmcontroller_RequestModeChangeAsync(v9, a2, CStringPtrAndBufferToFree, (uint64_t)&__block_literal_global_68, 0);
      uint64_t DerivedStorage = 0;
    }
  }
  else
  {
    uint64_t DerivedStorage = 0;
  }
  free(DerivedStorage);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void __central_interruptionNotificationCallback_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)v1)
  {
    if (dword_1E9359F40)
    {
LABEL_3:
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (*(void *)(a1 + 40) != *(void *)(v1 + 16)) {
      goto LABEL_3;
    }
    uint64_t v4 = (void *)[*(id *)(a1 + 48) objectForKey:@"InterruptionCmd"];
    if (v4 && ([v4 intValue] & 0xFFFFFFFE) == 2)
    {
      long long v5 = (void *)[*(id *)(a1 + 48) objectForKey:@"QuietVolume"];
      [*(id *)(a1 + 48) objectForKey:@"VolumeChangeDuration"];
      if (v5)
      {
        [v5 floatValue];
        float v7 = log10(v6) * 20.0;
        id v8 = objc_alloc(MEMORY[0x1E4F28ED0]);
        *(float *)&double v9 = v7;
        uint64_t v10 = [v8 initWithFloat:v9];
      }
      else
      {
        uint64_t v10 = 0;
      }
      id v12 = (id)v10;
      CFMutableDictionaryRef DuckAudioPayload = FigRoutingManagerCreateDuckAudioPayload();
      FigRoutingManagerSendCarPlayDuckCommand(*(const void **)(*(void *)(a1 + 32) + 8), (uint64_t)DuckAudioPayload);
      if (DuckAudioPayload) {
        CFRelease(DuckAudioPayload);
      }
    }
  }
}

void central_endpointDidDeactivateNotificationCallback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __central_endpointDidDeactivateNotificationCallback_block_invoke;
  v3[3] = &__block_descriptor_40_e5_v8__0l;
  void v3[4] = a1;
  MXDispatchSync((uint64_t)"central_endpointDidDeactivateNotificationCallback", (uint64_t)"FigEndpoint_Central.m", 1073, 0, 0, v2, (uint64_t)v3);
}

void __central_endpointDidDeactivateNotificationCallback_block_invoke()
{
}

uint64_t MX_PrivacyAccounting_IsPAAccessLoggingEnabled()
{
  if (mx_privacyAccounting_isAvailable_onceToken != -1) {
    dispatch_once(&mx_privacyAccounting_isAvailable_onceToken, &__block_literal_global_9);
  }
  if (mx_privacyAccounting_isAvailable_result) {
    return 0;
  }
  else {
    return objc_msgSend((id)objc_msgSend((id)getPAAccessLoggerClass(), "sharedInstance"), "loggingEnabled");
  }
}

uint64_t getPATCCAccessClass()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  float v6 = __Block_byref_object_copy__1;
  float v7 = __Block_byref_object_dispose__1;
  uint64_t v0 = getPATCCAccessClass_softClass;
  uint64_t v8 = getPATCCAccessClass_softClass;
  if (!getPATCCAccessClass_softClass)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getPATCCAccessClass_block_invoke;
    v2[3] = &unk_1E57C5B30;
    v2[4] = &v3;
    __getPATCCAccessClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_194D9D4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkTCCServiceMicrophone()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getkTCCServiceMicrophoneSymbolLoc_ptr;
  uint64_t v7 = getkTCCServiceMicrophoneSymbolLoc_ptr;
  if (!getkTCCServiceMicrophoneSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)TCCLibrary();
    v5[3] = (uint64_t)dlsym(v1, "kTCCServiceMicrophone");
    getkTCCServiceMicrophoneSymbolLoc_ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    uint64_t v3 = (_Unwind_Exception *)__68__MXBiomeStreams_updateBiomeSilentMode_clientType_untilTime_reason___block_invoke_cold_1();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(void *)v0;
}

void MX_PrivacyAccounting_EndRecordingAccessIntervals(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (mx_privacyAccounting_isAvailable_onceToken != -1) {
    dispatch_once(&mx_privacyAccounting_isAvailable_onceToken, &__block_literal_global_9);
  }
  if ((mx_privacyAccounting_isAvailable_result & 1) == 0)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v2 = [a1 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v12 != v4) {
            objc_enumerationMutation(a1);
          }
          uint64_t v6 = *(void *)(*((void *)&v11 + 1) + 8 * i);
          if (dword_1E9359ED0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v8 = objc_msgSend(a1, "objectForKey:", v6, v9, v10);
          if (v8) {
            [v8 end];
          }
        }
        uint64_t v3 = [a1 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v3);
    }
  }
}

uint64_t __mx_privacyAccounting_isAvailable_block_invoke()
{
  uint64_t result = PrivacyAccountingLibraryCore();
  if (!result)
  {
    mx_privacyAccounting_isAvailable_uint64_t result = 1;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t PrivacyAccountingLibraryCore()
{
  if (!PrivacyAccountingLibraryCore_frameworkLibrary) {
    PrivacyAccountingLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return PrivacyAccountingLibraryCore_frameworkLibrary;
}

uint64_t __PrivacyAccountingLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PrivacyAccountingLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getPAAccessLoggerClass_block_invoke(uint64_t a1)
{
  PrivacyAccountingLibrary();
  Class result = objc_getClass("PAAccessLogger");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getPAAccessLoggerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    __getPAAccessLoggerClass_block_invoke_cold_1();
    return (Class)PrivacyAccountingLibrary();
  }
  return result;
}

uint64_t PrivacyAccountingLibrary()
{
  uint64_t v0 = PrivacyAccountingLibraryCore();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void *__gettcc_identity_createSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)TCCLibrary();
  Class result = dlsym(v2, "tcc_identity_create");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  gettcc_identity_createSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t TCCLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!TCCLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = __TCCLibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E57C8A68;
    uint64_t v5 = 0;
    TCCLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = TCCLibraryCore_frameworkLibrary;
  uint64_t v1 = (void *)v3[0];
  if (!TCCLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __TCCLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TCCLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getPAAuthenticatedClientIdentitySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)PrivacyAccountingLibrary();
  uint64_t result = dlsym(v2, "PAAuthenticatedClientIdentity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPAAuthenticatedClientIdentitySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getPAApplicationClass_block_invoke(uint64_t a1)
{
  PrivacyAccountingLibrary();
  Class result = objc_getClass("PAApplication");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getPAApplicationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    uint64_t v3 = __getPAApplicationClass_block_invoke_cold_1();
    return __getPATCCAccessClass_block_invoke(v3);
  }
  return result;
}

Class __getPATCCAccessClass_block_invoke(uint64_t a1)
{
  PrivacyAccountingLibrary();
  Class result = objc_getClass("PATCCAccess");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getPATCCAccessClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    uint64_t v3 = __getPATCCAccessClass_block_invoke_cold_1();
    return (Class)__getkTCCServiceMicrophoneSymbolLoc_block_invoke(v3);
  }
  return result;
}

void *__getkTCCServiceMicrophoneSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)TCCLibrary();
  Class result = dlsym(v2, "kTCCServiceMicrophone");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkTCCServiceMicrophoneSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__gettcc_releaseSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)TCCLibrary();
  Class result = dlsym(v2, "tcc_release");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  gettcc_releaseSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t CMSM_GetHighestPriorityOfLocalSessionPlayingToDevice(uint64_t a1)
{
  uint64_t v2 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsPlaying, 0);
  if (!v2) {
    return 100;
  }
  CFArrayRef v3 = v2;
  if (CFArrayGetCount(v2) < 1)
  {
    uint64_t v5 = 100;
  }
  else
  {
    CFIndex v4 = 0;
    LODWORD(v5) = 100;
    do
    {
      CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, v4);
      unsigned int LocalSessionPriority = CMSM_GetLocalSessionPriority(ValueAtIndex, a1 != 0);
      if (LocalSessionPriority <= v5) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = LocalSessionPriority;
      }
      if (LocalSessionPriority <= v5 || a1 == 0)
      {
        uint64_t v5 = v8;
      }
      else
      {
        unsigned int v10 = LocalSessionPriority;
        if (CMSUtility_DoPickedEndpointsForSessionContainDeviceIdentifier(ValueAtIndex, a1)) {
          uint64_t v5 = v10;
        }
        else {
          uint64_t v5 = v5;
        }
      }
      ++v4;
    }
    while (v4 < CFArrayGetCount(v3));
  }
  CFRelease(v3);
  return v5;
}

uint64_t CMSM_GetHighestRemotePlayingSessionPriority()
{
  CFArrayRef RemotePlayingInfo = (const __CFArray *)CMSM_IDSConnection_GetRemotePlayingInfo();
  if (!RemotePlayingInfo) {
    return 100;
  }
  CFArrayRef v1 = RemotePlayingInfo;
  if (CFArrayGetCount(RemotePlayingInfo) < 1) {
    return 100;
  }
  CFIndex v2 = 0;
  LODWORD(v3) = 100;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, v2);
    if (ValueAtIndex)
    {
      CFDictionaryRef v5 = ValueAtIndex;
      int v15 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
      *((void *)&v13 + 1) = CFDictionaryGetValue(ValueAtIndex, @"HostApplicationDisplayID");
      *(void *)&long long v13 = CFDictionaryGetValue(v5, @"ClientName");
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v5, @"InterruptionStyle");
      if (Value) {
        CFNumberGetValue(Value, kCFNumberSInt32Type, &v14);
      }
      CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(v5, @"ClientPriority");
      if (v7) {
        CFNumberGetValue(v7, kCFNumberSInt32Type, (char *)&v14 + 4);
      }
      *((void *)&v14 + 1) = CFDictionaryGetValue(v5, @"AudioCategory");
      int v15 = CFDictionaryGetValue(v5, @"AudioMode");
      uint64_t v8 = +[MXSessionManager sharedInstance];
      v11[0] = v13;
      v11[1] = v14;
      long long v12 = v15;
      unsigned int v9 = [(MXSessionManager *)v8 getSessionPriority:v11 forTipi:0];
    }
    else
    {
      unsigned int v9 = 100;
    }
    if (v9 <= v3) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = v9;
    }
    ++v2;
  }
  while (v2 < CFArrayGetCount(v1));
  return v3;
}

BOOL vaemStarkAudioPortIsCurrentlyActive()
{
  return dword_1E9359C60 != 0;
}

uint64_t vaemSetCallScreeningStatus(int a1)
{
  byte_1E9358BCC = a1;
  CurrentOutputuint64_t PortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  return vaeUpdateBluetoothCallScreeningStatus(CurrentOutputPortAtIndex, a1);
}

uint64_t vaemGetCachedCallScreeningStatus()
{
  return byte_1E9358BCC;
}

uint64_t vaemGetCallScreeningStatus()
{
  CurrentOutputuint64_t PortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
  return vaeGetBluetoothCallScreeningStatus(CurrentOutputPortAtIndex);
}

uint64_t vaemAudioDevicesChanged()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"#vedbolg";
  inAddress.mElement = 0;
  UInt32 outDataSize = 0;
  OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(1u, &inAddress, 0, 0, &outDataSize);
  if (PropertyDataSize)
  {
    unsigned int v14 = 0;
    os_log_and_send_and_compose_flags_and_os_log_AudioObjectPropertyAddress type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v2 = v14;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v3 = v2;
    }
    else {
      unsigned int v3 = v2 & 0xFFFFFFFE;
    }
    if (v3)
    {
      LODWORD(outData) = 136315138;
      *(void *)((char *)&outData + 4) = "vaemAudioDevicesChanged";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (outDataSize >= 4)
  {
    type.mElement = 0;
    uint64_t v10 = 0x1EE5EBF48;
    *(void *)&type.AudioObjectPropertySelector mSelector = *(void *)"diudbolg";
    *(void *)&long long outData = &v10;
    *((void *)&outData + 1) = 8;
    uint64_t v16 = &v9;
    uint64_t v17 = 4;
    UInt32 ioDataSize = 32;
    unsigned int v9 = 0;
    AudioObjectGetPropertyData(1u, &type, 0, 0, &ioDataSize, &outData);
    CFIndex v4 = +[MXSessionManager sharedInstance];
    [(MXSessionManager *)v4 setDefaultVADID:v9];
    if (!PropertyDataSize)
    {
      if ([+[MXSessionManager sharedInstance] defaultVADID]&& qword_1E9358AF0)
      {
        if (dword_1E9359ED0)
        {
          CFDictionaryRef v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (vaemAudioDevicesChanged_vadInitializationCompleteSignalOnce != -1) {
          dispatch_once(&vaemAudioDevicesChanged_vadInitializationCompleteSignalOnce, &__block_literal_global_10);
        }
        return 0;
      }
      if (!dword_1E9359ED0) {
        return 0;
      }
    }
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

intptr_t __vaemAudioDevicesChanged_block_invoke()
{
  return dispatch_semaphore_signal((dispatch_semaphore_t)qword_1E9358AF0);
}

uint64_t vaemAddAudioDevicesChangedListener()
{
  v1.mElement = 0;
  *(void *)&v1.AudioObjectPropertySelector mSelector = *(void *)"#vedbolg";
  AudioObjectAddPropertyListener(1u, &v1, (AudioObjectPropertyListenerProc)vaemAudioDevicesChanged, 0);
  return vaemAudioDevicesChanged();
}

void vaemAddToPortEndpointCache(int a1)
{
  int valuePtr = a1;
  CMTimeValue value = 0;
  if (a1)
  {
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    FigVAEndpointCreate(*MEMORY[0x1E4F1CF80], a1, &value);
    if (value)
    {
      if (!qword_1E9358AF8) {
        qword_1E9358AF8 = (uint64_t)CFDictionaryCreateMutable(v1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      CFNumberRef v2 = CFNumberCreate(v1, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue((CFMutableDictionaryRef)qword_1E9358AF8, v2, value);
      if (value)
      {
        CFRelease(value);
        CMTimeValue value = 0;
      }
      if (v2) {
        CFRelease(v2);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t vaemSetOrientationOverride(int a1)
{
  v3.mElement = 0;
  int v4 = a1;
  *(void *)&v3.AudioObjectPropertySelector mSelector = *(void *)"rvootpni";
  MEMORY[0x199716E90](gCMSM);
  if ([+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") decoupledInputVADID]&& AudioObjectHasProperty([+[MXSessionManager sharedInstance] decoupledInputVADID], &v3))
  {
    [+[MXSessionManager sharedInstance] decoupledInputVADID];
    uint64_t v1 = CMSMVAUtility_AudioObjectSetPropertyData();
  }
  else
  {
    uint64_t v1 = 0;
  }
  MEMORY[0x199716EA0](gCMSM);
  return v1;
}

uint64_t vaemSetCaptureOrientationOverride()
{
  v2.mElement = 0;
  *(void *)&v2.AudioObjectPropertySelector mSelector = *(void *)"drootpni";
  MEMORY[0x199716E90](gCMSM);
  if ([+[MXSessionManager sharedInstance](MXSessionManager, "sharedInstance") decoupledInputVADID]&& AudioObjectHasProperty([+[MXSessionManager sharedInstance] decoupledInputVADID], &v2))
  {
    [+[MXSessionManager sharedInstance] decoupledInputVADID];
    uint64_t v0 = CMSMVAUtility_AudioObjectSetPropertyData();
  }
  else
  {
    uint64_t v0 = 0;
  }
  MEMORY[0x199716EA0](gCMSM);
  return v0;
}

uint64_t vaemGetStereoInputOrientation()
{
  inAddress.mElement = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"roiutpni";
  unsigned int outData = 0;
  UInt32 ioDataSize = 4;
  uint64_t result = AudioObjectHasProperty([+[MXSessionManager sharedInstance] defaultVADID], &inAddress);
  if (result)
  {
    if (AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData))
    {
      return 0;
    }
    else
    {
      return outData;
    }
  }
  return result;
}

uint64_t vaemSetStereoInputOrientation(int a1)
{
  v3.mElement = 0;
  int v4 = a1;
  *(void *)&v3.AudioObjectPropertySelector mSelector = *(void *)"roiutpni";
  MEMORY[0x199716E90](gCMSM);
  if (AudioObjectHasProperty([+[MXSessionManager sharedInstance] defaultVADID], &v3))
  {
    [+[MXSessionManager sharedInstance] defaultVADID];
    uint64_t v1 = CMSMVAUtility_AudioObjectSetPropertyData();
  }
  else
  {
    uint64_t v1 = 0;
  }
  MEMORY[0x199716EA0](gCMSM);
  return v1;
}

uint64_t __vaemSupportsBootChimeVolume_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  AudioObjectID VADPortIDFromVADPortType = vaemGetVADPortIDFromVADPortType(1886613611);
  dword_1E9358BC4 = VADPortIDFromVADPortType;
  if (VADPortIDFromVADPortType)
  {
    inAddress.mElement = 0;
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"cblvbolg";
    uint64_t result = AudioObjectHasProperty(VADPortIDFromVADPortType, &inAddress);
    vaemSupportsBootChimeVolume_isSupported = result;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_AudioObjectPropertyAddress type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void vaemSetBootChimeVolume(float a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  float v3 = a1;
  if (vaemSupportsBootChimeVolume_onceToken != -1) {
    dispatch_once(&vaemSupportsBootChimeVolume_onceToken, &__block_literal_global_2);
  }
  if (vaemSupportsBootChimeVolume_isSupported)
  {
    if (CMSMVAUtility_AudioObjectSetPropertyData())
    {
      os_log_and_send_and_compose_flags_and_os_log_AudioObjectPropertyAddress type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

float vaemGetBootChimeVolume()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  UInt32 ioDataSize = 4;
  float outData = -1.0;
  if (vaemSupportsBootChimeVolume_onceToken != -1) {
    dispatch_once(&vaemSupportsBootChimeVolume_onceToken, &__block_literal_global_2);
  }
  if (vaemSupportsBootChimeVolume_isSupported)
  {
    inAddress.mElement = 0;
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"cblvbolg";
    if (!AudioObjectGetPropertyData(dword_1E9358BC4, &inAddress, 0, 0, &ioDataSize, &outData)) {
      return outData;
    }
    os_log_and_send_and_compose_flags_and_os_log_AudioObjectPropertyAddress type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return -1.0;
}

uint64_t vaemGetCachedSpeakerPortID()
{
  return dword_1E9358BC4;
}

uint64_t vaemGetCachedContinuityScreenOutputPortID()
{
  return dword_1E9358BC8;
}

uint64_t vaemSetCachedContinuityScreenOutputPortID(uint64_t result)
{
  dword_1E9358BC8 = result;
  return result;
}

uint64_t cmsmInEarBluetoothStatusListener(int a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  long long v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  CMSMNotificationUtility_PostPreferredExternalRouteDidChange();
  if (dword_1E9359ED0)
  {
    int v9 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  float v3 = MXGetSerialQueue();
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = __cmsmInEarBluetoothStatusListener_block_invoke;
  void v6[3] = &unk_1E57C8A88;
  int v7 = a1;
  v6[4] = &v10;
  MXDispatchAsync((uint64_t)"cmsmInEarBluetoothStatusListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1352, 0, 0, v3, (uint64_t)v6);
  uint64_t v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v4;
}

void sub_194D9F1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __cmsmInEarBluetoothStatusListener_block_invoke(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&cf);
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpoints((uint64_t)cf, (uint64_t)&theArray);
  int DoesPortSupportMultipleConnections = vaeDoesPortSupportMultipleConnections(*(unsigned int *)(a1 + 40));
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (!DoesPortSupportMultipleConnections)
  {
    if (!CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(*(_DWORD *)(a1 + 40))) {
      goto LABEL_88;
    }
    if (theArray && CFArrayGetCount(theArray)) {
      goto LABEL_51;
    }
    uint64_t v8 = CMSMUtility_CopyCurrentOutputPorts();
    uint64_t SInt64 = FigCFNumberCreateSInt64();
    if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(v8) && FigCFArrayContainsValue())
    {
      if (dword_1E9359ED0)
      {
        unsigned int v43 = 0;
        os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v11 = v43;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v45)) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = v11 & 0xFFFFFFFE;
        }
        if (v12)
        {
          int v13 = *(_DWORD *)(a1 + 40);
          int v46 = 136315394;
          CFPropertyListRef v47 = "cmsmInEarBluetoothStatusListener_block_invoke";
          __int16 v48 = 1024;
          int v49 = v13;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (!v8) {
          goto LABEL_85;
        }
        goto LABEL_84;
      }
    }
    else
    {
      if (dword_1E9359ED0)
      {
        unsigned int v43 = 0;
        os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
        uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v19 = v43;
        if (os_log_type_enabled(v18, v45)) {
          unsigned int v20 = v19;
        }
        else {
          unsigned int v20 = v19 & 0xFFFFFFFE;
        }
        if (v20)
        {
          int v21 = *(_DWORD *)(a1 + 40);
          int v46 = 136315394;
          CFPropertyListRef v47 = "cmsmInEarBluetoothStatusListener_block_invoke";
          __int16 v48 = 1024;
          int v49 = v21;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ArrayFromPortIDAndPartners = CMSMVAUtility_CreateArrayFromPortIDAndPartners(*(_DWORD *)(a1 + 40));
      vaemMakeArrayOfPortsRoutable(ArrayFromPortIDAndPartners, 1, 0, qword_1E9359C88, 0);
      if (ArrayFromPortIDAndPartners) {
        CFRelease(ArrayFromPortIDAndPartners);
      }
    }
    if (!v8)
    {
LABEL_85:
      if (!SInt64) {
        goto LABEL_88;
      }
      int v38 = (const void *)SInt64;
      goto LABEL_87;
    }
LABEL_84:
    CFRelease(v8);
    goto LABEL_85;
  }
  os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
  unsigned __int8 IsPortBTManaged = MXBluetoothServices_IsPortBTManaged(v3, 1);
  BOOL ShouldBTPortBeTreatedAsInEar = CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(v3);
  if (ShouldBTPortBeTreatedAsInEar) {
    MXBluetoothServices_QueryAudioRoutingActionForNewWirelessPort(v3, &v45, &IsPortBTManaged, 1, ShouldBTPortBeTreatedAsInEar);
  }
  if (dword_1E9359ED0)
  {
    unsigned int v43 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFDictionaryRef v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v6 = v43;
    if (os_log_type_enabled(v5, type)) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = v6 & 0xFFFFFFFE;
    }
    if (v7)
    {
      int v46 = 136315906;
      CFPropertyListRef v47 = "vaemGetRoutingActionsForMultiConnectHeadset";
      __int16 v48 = 1024;
      int v49 = IsPortBTManaged;
      __int16 v50 = 1024;
      int v51 = v45;
      __int16 v52 = 1024;
      BOOL v53 = ShouldBTPortBeTreatedAsInEar;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!IsPortBTManaged)
  {
    if (ShouldBTPortBeTreatedAsInEar)
    {
      if (CMSMDeviceState_ItsAnAppleWatch())
      {
        if (!vaemShouldRequestOwnershipForSharedAudioRoute()) {
          goto LABEL_26;
        }
      }
      else if (!cmsmShouldRequestOwnershipOnSharedAudioRoute(0, v3))
      {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
LABEL_46:
    int v14 = 0;
    goto LABEL_47;
  }
  if (v45 == OS_LOG_TYPE_DEFAULT)
  {
    if (dword_1E9359ED0)
    {
      unsigned int v43 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v16 = v43;
      if (os_log_type_enabled(v15, type)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        int v46 = 136315138;
        CFPropertyListRef v47 = "vaemGetRoutingActionsForMultiConnectHeadset";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_46;
  }
  if (!vaeGetBTPortOwnsSharedAudioConnection(v3)) {
LABEL_25:
  }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = vaeRequestOwnershipOnBTPort(*(unsigned int *)(a1 + 40));
LABEL_26:
  int v14 = 1;
LABEL_47:
  BTPortOwnsSharedAudioConnectiouint64_t n = vaeGetBTPortOwnsSharedAudioConnection(*(_DWORD *)(a1 + 40));
  BOOL v23 = BTPortOwnsSharedAudioConnection;
  if (v14 && BTPortOwnsSharedAudioConnection)
  {
    if (theArray && CFArrayGetCount(theArray))
    {
LABEL_51:
      FigRoutingManagerLogEndpointIDs(@"Skipping to make ports routable because there are currently activating endpoints", theArray, 0, 1);
      goto LABEL_88;
    }
    uint64_t v27 = CMSMUtility_CopyCurrentOutputPorts();
    unsigned int v28 = (const void *)FigCFNumberCreateSInt64();
    if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(v27) && FigCFArrayContainsValue())
    {
      if (dword_1E9359ED0)
      {
        unsigned int v43 = 0;
        os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
        long long v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v30 = v43;
        if (os_log_type_enabled(v29, v45)) {
          unsigned int v31 = v30;
        }
        else {
          unsigned int v31 = v30 & 0xFFFFFFFE;
        }
        if (v31)
        {
          int v32 = *(_DWORD *)(a1 + 40);
          int v46 = 136315394;
          CFPropertyListRef v47 = "cmsmInEarBluetoothStatusListener_block_invoke";
          __int16 v48 = 1024;
          int v49 = v32;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (!v28) {
          goto LABEL_78;
        }
        goto LABEL_77;
      }
    }
    else
    {
      if (dword_1E9359ED0)
      {
        unsigned int v43 = 0;
        os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
        int v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v34 = v43;
        if (os_log_type_enabled(v33, v45)) {
          unsigned int v35 = v34;
        }
        else {
          unsigned int v35 = v34 & 0xFFFFFFFE;
        }
        if (v35)
        {
          int v36 = *(_DWORD *)(a1 + 40);
          int v46 = 136315394;
          CFPropertyListRef v47 = "cmsmInEarBluetoothStatusListener_block_invoke";
          __int16 v48 = 1024;
          int v49 = v36;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      int v37 = CMSMVAUtility_CreateArrayFromPortIDAndPartners(*(_DWORD *)(a1 + 40));
      vaemMakeArrayOfPortsRoutable(v37, 1, 0, qword_1E9359C88, 0);
      if (v37) {
        CFRelease(v37);
      }
    }
    if (!v28)
    {
LABEL_78:
      if (!v27) {
        goto LABEL_88;
      }
      int v38 = v27;
LABEL_87:
      CFRelease(v38);
      goto LABEL_88;
    }
LABEL_77:
    CFRelease(v28);
    goto LABEL_78;
  }
  if (dword_1E9359ED0)
  {
    unsigned int v43 = 0;
    os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
    long long v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v25 = v43;
    if (os_log_type_enabled(v24, v45)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (v26)
    {
      int v46 = 136315650;
      CFPropertyListRef v47 = "cmsmInEarBluetoothStatusListener_block_invoke";
      __int16 v48 = 1024;
      int v49 = v14;
      __int16 v50 = 1024;
      int v51 = v23;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_88:
  cmsmUpdatePickableRouteDescriptionLists(1);
  FigPredictedRouting_UpdatePredictedRoute(5);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

CFArrayRef vaemMakeArrayOfPortsRoutable(const __CFArray *result, int a2, unsigned int a3, uint64_t a4, int a5)
{
  v56[5] = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  CFArrayRef v9 = result;
  uint64_t result = (const __CFArray *)CFArrayGetCount(result);
  if (!result) {
    return result;
  }
  uint64_t v10 = (uint64_t)result;
  if (!a2 && a3)
  {
    if (dword_1E9359ED0)
    {
      AudioObjectID valuePtr = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSMUtility_SetDoNotMakeStarkAudioPortRoutableFlag(1);
  }
  uint64_t v42 = a4;
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0)) {
    unsigned int v12 = CMSMUtility_CopyCurrentOutputPorts();
  }
  else {
    unsigned int v12 = 0;
  }
  int v13 = CMSMVAUtility_ArePortsHFPOnly(v9) | a5;
  CFTypeRef cf = v12;
  if (a2)
  {
    unsigned int v40 = a3;
    if (v10 >= 1)
    {
      CFIndex v14 = 0;
      int v15 = 0;
      do
      {
        uint64_t PortAtIndex = CMSMVAUtility_GetPortAtIndex(v9, v14);
        int PortTypeFromPortID = vaeGetPortTypeFromPortID(PortAtIndex);
        if (PortTypeFromPortID == 1885433953 || PortTypeFromPortID == 1885433971) {
          int v15 = 1;
        }
        if (PortTypeFromPortID == 1885433953) {
          break;
        }
        if (PortTypeFromPortID == 1885433971) {
          break;
        }
        ++v14;
      }
      while (v10 != v14);
      if (v15)
      {
        if (dword_1E9359BB0
          && (CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80], (UInt32 = FigCFNumberCreateUInt32()) != 0))
        {
          int v21 = (const void *)UInt32;
          if (vaeDoesPortSupportRoutability(dword_1E9359BB0)
            && vaeIsPortRoutable(dword_1E9359BB0))
          {
            CFDictionaryRef Mutable = CFArrayCreateMutable(v19, 0, MEMORY[0x1E4F1D510]);
            CFArrayAppendValue(Mutable, v21);
          }
          else
          {
            CFDictionaryRef Mutable = 0;
          }
          CFRelease(v21);
        }
        else
        {
          CFDictionaryRef Mutable = 0;
        }
        unsigned int v38 = v40;
        if (dword_1E9359ED0)
        {
          AudioObjectID valuePtr = 0;
          uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          unsigned int v38 = v40;
        }
        long long v45 = 0u;
        long long v46 = 0u;
        long long v44 = 0u;
        CFArrayRef v47 = v9;
        __int16 v48 = Mutable;
        uint64_t v49 = 0;
        __int16 v50 = v12;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        memset(v56, 0, 32);
        unsigned int v31 = cmsmSetVADRouteConfiguration((uint64_t)&v44, v38, v42);
        if (Mutable) {
          CFRelease(Mutable);
        }
        goto LABEL_46;
      }
    }
    uint64_t v23 = v42;
    if (v13) {
      long long v24 = 0;
    }
    else {
      long long v24 = cf;
    }
    if (dword_1E9359ED0)
    {
      AudioObjectID valuePtr = 0;
      unsigned int v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    CFArrayRef v47 = v9;
    __int16 v48 = 0;
    uint64_t v49 = 0;
    __int16 v50 = v24;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    memset(v56, 0, 32);
    unsigned int v30 = v40;
  }
  else
  {
    if (v13) {
      unsigned int v26 = 0;
    }
    else {
      unsigned int v26 = v12;
    }
    int v27 = CMSMUtility_IsSharePlayCapableCallSessionActive();
    BOOL v28 = 0;
    if (a3)
    {
      uint64_t v23 = v42;
      if (v27) {
        BOOL v28 = CMSMVAUtility_ArePortsHFPOnly(v9) != 0;
      }
    }
    else
    {
      uint64_t v23 = v42;
    }
    if (dword_1E9359ED0)
    {
      AudioObjectID valuePtr = 0;
      long long v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    CFArrayRef v47 = 0;
    __int16 v48 = v9;
    uint64_t v49 = 0;
    __int16 v50 = v26;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    LOBYTE(v56[0]) = v28;
    *(void *)((char *)v56 + 1) = 0;
    *(void *)((char *)&v56[2] + 1) = 0;
    *(void *)((char *)&v56[1] + 1) = 0;
    v56[3] = 0;
    unsigned int v30 = a3;
  }
  unsigned int v31 = cmsmSetVADRouteConfiguration((uint64_t)&v44, v30, v23);
LABEL_46:
  if (!v31 && v10 >= 1)
  {
    CFIndex v32 = 0;
    while (1)
    {
      AudioObjectID valuePtr = 0;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, v32);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      CFTypeRef v34 = vaeCopyDeviceIdentifierFromVADPort(valuePtr);
      unsigned int v35 = v34;
      if (v34 && dword_1E9359ED0 != 0) {
        break;
      }
      if (v34) {
        goto LABEL_55;
      }
LABEL_56:
      if (v10 == ++v32) {
        goto LABEL_57;
      }
    }
    int v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_55:
    CFRelease(v35);
    goto LABEL_56;
  }
LABEL_57:
  if (cf) {
    CFRelease(cf);
  }
  return (const __CFArray *)v31;
}

uint64_t cmsmPrimaryBudInEarBluetoothStatusListener(int a1)
{
  AudioObjectPropertyAddress v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __cmsmPrimaryBudInEarBluetoothStatusListener_block_invoke;
  void v4[3] = &__block_descriptor_36_e5_v8__0l;
  int v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmPrimaryBudInEarBluetoothStatusListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1457, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmPrimaryBudInEarBluetoothStatusListener_block_invoke(uint64_t a1)
{
}

uint64_t cmsmSecondaryBudInEarBluetoothStatusListener(int a1)
{
  AudioObjectPropertyAddress v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __cmsmSecondaryBudInEarBluetoothStatusListener_block_invoke;
  void v4[3] = &__block_descriptor_36_e5_v8__0l;
  int v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmSecondaryBudInEarBluetoothStatusListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1470, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmSecondaryBudInEarBluetoothStatusListener_block_invoke(uint64_t a1)
{
}

uint64_t cmsmOwnsSharedAudioConnectionListener(AudioObjectID a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  BTPortOwnsSharedAudioConnectiouint64_t n = vaeGetBTPortOwnsSharedAudioConnection(a1);
  BOOL v3 = BTPortOwnsSharedAudioConnection;
  CMSM_IDSConnection_UpdateLocalOwnsSharedAudioRoute(BTPortOwnsSharedAudioConnection);
  if (v3)
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    vaeSignalOwnershipIsTaken();
  }
  else
  {
    int v5 = MXGetSerialQueue();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = __cmsmOwnsSharedAudioConnectionListener_block_invoke;
    v7[3] = &__block_descriptor_36_e5_v8__0l;
    AudioObjectID v8 = a1;
    MXDispatchAsync((uint64_t)"cmsmOwnsSharedAudioConnectionListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1505, 0, 0, v5, (uint64_t)v7);
  }
  return 0;
}

void __cmsmOwnsSharedAudioConnectionListener_block_invoke(uint64_t a1)
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v3 = *(_DWORD *)(a1 + 32);
  uint64_t v4 = CMSMUtility_CopyCurrentOutputPorts();
  if (v4)
  {
    CFArrayRef v5 = v4;
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      while (CMSMVAUtility_GetPortAtIndex(v5, v8) != v3)
      {
        if (v7 == ++v8) {
          goto LABEL_10;
        }
      }
      CMSMVAUtility_DisableBluetoothSharingSession();
    }
LABEL_10:
    CFRelease(v5);
  }
}

uint64_t cmsmSharedAudioConnectionFailedListener(AudioObjectID a1)
{
  BTPortOwnsSharedAudioConnectiouint64_t n = vaeGetBTPortOwnsSharedAudioConnection(a1);
  CMSM_IDSConnection_UpdateLocalOwnsSharedAudioRoute(BTPortOwnsSharedAudioConnection);
  return 0;
}

uint64_t cmsmBluetoothListeningModeListener(int a1)
{
  AudioObjectPropertyAddress v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __cmsmBluetoothListeningModeListener_block_invoke;
  void v4[3] = &__block_descriptor_36_e5_v8__0l;
  int v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmBluetoothListeningModeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1555, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmBluetoothListeningModeListener_block_invoke(uint64_t a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  vaeGetBluetoothListeningMode(*(unsigned int *)(a1 + 32));
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemPostAvailableEndpointsChangedNotification(0);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], 0, @"configUpdateReasonEndpointDescriptorChanged");
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

uint64_t cmsmBluetoothSharingAggregationListener(int a1)
{
  AudioObjectPropertyAddress v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __cmsmBluetoothSharingAggregationListener_block_invoke;
  void v4[3] = &__block_descriptor_36_e5_v8__0l;
  int v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmBluetoothSharingAggregationListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1581, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmBluetoothSharingAggregationListener_block_invoke(uint64_t a1)
{
  CFArrayRef v1 = (const __CFArray *)vaeCopyBluetoothShareablePortsForPort(*(_DWORD *)(a1 + 32));
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v1)
  {
    if (CFArrayGetCount(v1) >= 1)
    {
      if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
      {
        int v3 = CMSMUtility_CopyCurrentOutputPorts();
        if (!v3) {
          goto LABEL_15;
        }
        CFTypeRef v4 = v3;
        if (CFArrayGetCount(v3) < 1)
        {
LABEL_14:
          CFRelease(v4);
          goto LABEL_15;
        }
        int v5 = 0;
        CFIndex v6 = 0;
        do
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v4, v6);
          v8.length = CFArrayGetCount(v1);
          v8.id location = 0;
          if (!CFArrayContainsValue(v1, v8, ValueAtIndex)) {
            int v5 = 1;
          }
          ++v6;
        }
        while (v6 < CFArrayGetCount((CFArrayRef)v4));
        CFRelease(v4);
        if (!v5) {
          goto LABEL_15;
        }
      }
      CFTypeRef v4 = CMSMUtility_CopySystemAudioRoutingContextUUID();
      CMSMVAUtility_AggregatePorts((uint64_t)v1, 0, (uint64_t)v4);
      if (v4) {
        goto LABEL_14;
      }
    }
LABEL_15:
    CFRelease(v1);
  }
}

uint64_t cmsmBluetoothSpatialAudioEnabledListener(int a1)
{
  AudioObjectPropertyAddress v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __cmsmBluetoothSpatialAudioEnabledListener_block_invoke;
  void v4[3] = &__block_descriptor_36_e5_v8__0l;
  int v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmBluetoothSpatialAudioEnabledListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1631, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmBluetoothSpatialAudioEnabledListener_block_invoke(uint64_t a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  byte_1E9358BA0 = vaeIsHeadTrackedSpatialAudioActive(*(_DWORD *)(a1 + 32));
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemPostAvailableEndpointsChangedNotification(0);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], 0, @"configUpdateReasonEndpointDescriptorChanged");
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

uint64_t cmsmBluetoothSpatialAudioUserEnableFeatureListener(int a1)
{
  AudioObjectPropertyAddress v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __cmsmBluetoothSpatialAudioUserEnableFeatureListener_block_invoke;
  void v4[3] = &__block_descriptor_36_e5_v8__0l;
  int v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmBluetoothSpatialAudioUserEnableFeatureListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1657, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmBluetoothSpatialAudioUserEnableFeatureListener_block_invoke(uint64_t a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  vaeDoesPortAllowHeadTrackedSpatialAudio(*(_DWORD *)(a1 + 32));
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemPostAvailableEndpointsChangedNotification(0);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], 0, @"configUpdateReasonEndpointDescriptorChanged");
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

uint64_t cmsmBluetoothSpatialAudioModeListener(int a1)
{
  AudioObjectPropertyAddress v2 = MXGetSerialQueue();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __cmsmBluetoothSpatialAudioModeListener_block_invoke;
  void v4[3] = &__block_descriptor_36_e5_v8__0l;
  int v5 = a1;
  MXDispatchAsync((uint64_t)"cmsmBluetoothSpatialAudioModeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1686, 0, 0, v2, (uint64_t)v4);
  return 0;
}

void __cmsmBluetoothSpatialAudioModeListener_block_invoke(uint64_t a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  vaeGetBluetoothSpatialAudioMode(*(unsigned int *)(a1 + 32));
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemPostAvailableEndpointsChangedNotification(0);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)cf);
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf[0], 0, @"configUpdateReasonEndpointDescriptorChanged");
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

uint64_t cmsmExclavesSensorStatusListener()
{
  uint64_t v0 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"cmsmExclavesSensorStatusListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 1711, 0, 0, v0, (uint64_t)&__block_literal_global_10);
  return 0;
}

uint64_t __cmsmExclavesSensorStatusListener_block_invoke()
{
  uint64_t v0 = +[MXExclaves sharedInstance];
  return [(MXExclaves *)v0 handleSensorStatusChanged];
}

uint64_t vaemIsMATAtmosAvailable()
{
  UInt32 ioDataSize = 4;
  unsigned int outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"smtaptuo";
  inAddress.mElement = 0;
  if (AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData))
  {
    return 0;
  }
  else
  {
    return outData;
  }
}

CFArrayRef vaemCopyVirtualFormatsSupported()
{
  AudioObjectID outData = 0;
  *(void *)&capacity[1] = 0;
  capacity[0] = 0;
  CFArrayRef Mutable = 0;
  CFArrayRef Copy = 0;
  if (vaemGetStream0([+[MXSessionManager sharedInstance] defaultVADID], 0, &outData))BOOL v2 = 1; {
  else
  }
    BOOL v2 = outData == 0;
  if (!v2)
  {
    if (vaemCopySupportedStreamFormats(outData, 0, &capacity[1], capacity))
    {
      CFArrayRef Mutable = 0;
      CFArrayRef Copy = 0;
    }
    else
    {
      CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v4 = capacity[0];
      CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity[0], MEMORY[0x1E4F1D510]);
      if (v4)
      {
        int v5 = (char *)(*(void *)&capacity[1] + 8);
        while (1)
        {
          CFNumberRef v6 = CFNumberCreate(v3, kCFNumberIntType, v5);
          v10.length = CFArrayGetCount(Mutable);
          v10.id location = 0;
          if (!CFArrayContainsValue(Mutable, v10, v6)) {
            break;
          }
          if (v6) {
            goto LABEL_10;
          }
LABEL_11:
          v5 += 56;
          if (!--v4) {
            goto LABEL_15;
          }
        }
        CFArrayAppendValue(Mutable, v6);
        if (!v6) {
          goto LABEL_11;
        }
LABEL_10:
        CFRelease(v6);
        goto LABEL_11;
      }
LABEL_15:
      CFArrayRef Copy = CFArrayCreateCopy(v3, Mutable);
    }
  }
  if (*(void *)&capacity[1]) {
    free(*(void **)&capacity[1]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

uint64_t vaemSetStreamASBD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = CMSMVAUtility_AudioObjectSetPropertyData();
  [+[MXSessionManager sharedInstance] updateDeviceSampleRate:a4];
  return v5;
}

uint64_t vaemSetVirtualFormatForScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int outData = 0;
  uint64_t v6 = 0xFFFFFFFFLL;
  if (!vaemGetStream0(a1, a3, &outData))
  {
    if (outData)
    {
      vaemRemoveVADAvailableSampleRatesListener();
      uint64_t v6 = vaemSetStreamASBD(outData, a2, a3, a1);
      vaemAddVADAvailableSampleRatesListener(0);
      if (!v6)
      {
        int v7 = *(_DWORD *)(a2 + 28);
        if (a3 == 1) {
          CMSMNotificationUtility_PostNumberOfInputChannelsDidChange(v7);
        }
        else {
          CMSMNotificationUtility_PostNumberOfOutputChannelsDidChange(v7);
        }
        return 0;
      }
    }
  }
  return v6;
}

uint64_t vaemRemoveVADAvailableSampleRatesListener()
{
  uint64_t result = [+[MXSessionManager sharedInstance] defaultVADID];
  if (result)
  {
    LODWORD(v2) = 0;
    return AudioObjectRemovePropertyListener([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v1, (AudioObjectPropertyListenerProc)vaemVADAvailableSampleRatesListener, 0);
  }
  return result;
}

void vaemAddVADAvailableSampleRatesListener(int a1)
{
  LODWORD(v3) = 0;
  if ([+[MXSessionManager sharedInstance] defaultVADID])
  {
    LODWORD(v3) = 0;
    AudioObjectAddPropertyListener([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v2, (AudioObjectPropertyListenerProc)vaemVADAvailableSampleRatesListener, 0);
  }
  if (a1) {
    vaemVADAvailableSampleRatesListenerGuts_f();
  }
}

BOOL vaemMusicVADExists()
{
  return [+[MXSessionManager sharedInstance] musicVADID] != 0;
}

BOOL vaemPerAppAirPlayVADExists()
{
  return [+[MXSessionManager sharedInstance] perAppAirPlayVADID] != 0;
}

BOOL vaemSpeechDetectionVADExists()
{
  return [+[MXSessionManager sharedInstance] speechDetectionVADID] != 0;
}

BOOL vaemSpeakerAlertVADExists()
{
  return [+[MXSessionManager sharedInstance] speakerAlertVADID] != 0;
}

float vaemGetCurrentSafetyOffsetForScope(AudioObjectID a1, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2 == 1) {
    AudioObjectPropertyScope v3 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v3 = 1869968496;
  }
  inAddress.AudioObjectPropertySelector mSelector = 1935763060;
  inAddress.mScope = v3;
  inAddress.mElement = 0;
  int outData = 0;
  UInt32 ioDataSize = 4;
  if (AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData))
  {
    int outData = 0;
    double v5 = 0.0;
  }
  else
  {
    LODWORD(v4) = outData;
    double v5 = (double)v4;
  }
  float v6 = v5 / vaemGetSampleRateForDevice(a1);
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v6;
}

uint64_t vaemGetDownlinkMute()
{
  int v1 = 0;
  if (!unk_1E9359B58) {
    return 0;
  }
  unk_1E9359B58(0, &v1);
  return (v1 >> 1) & 1;
}

float vaemGetDeviceVolume(AudioObjectID a1, AudioObjectPropertyElement a2)
{
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F757470766F6C6DLL;
  inAddress.mElement = a2;
  UInt32 ioDataSize = 4;
  float outData = 0.0;
  AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  return outData;
}

BOOL vaemCurrentRouteHasMuteControl()
{
  outData[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  outData[0] = 0;
  int valuePtr = 1;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"rptcbolg";
  inAddress.mElement = 0;
  if (AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 0, 0, &ioDataSize, outData))
  {
    int valuePtr = 1;
  }
  else
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)outData[0], @"policyMute");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    }
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (outData[0]) {
    CFRelease(outData[0]);
  }
  return valuePtr != 0;
}

uint64_t vaemConvertToDecibelInVAD(AudioObjectID a1, _DWORD *outData)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747076326462;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  uint64_t result = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData);
  unsigned int v7 = result;
  if (result)
  {
    *float outData = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v7;
  }
  return result;
}

uint64_t vaemSetDeviceBufferNumPCMFramesQuiet(unsigned int a1)
{
  unsigned int v1 = a1;
  unsigned int v6 = a1;
  v4[0] = 0;
  vaemGetDeviceBufferNumPCMFramesRange((_DWORD *)v4 + 1, v4);
  if (!v2)
  {
    if (HIDWORD(v4[0]) > v1)
    {
      unsigned int v6 = HIDWORD(v4[0]);
      unsigned int v1 = HIDWORD(v4[0]);
    }
    if (v1 > LODWORD(v4[0])) {
      unsigned int v6 = v4[0];
    }
  }
  v4[1] = 0x6F7574707166737ALL;
  int v5 = 0;
  [+[MXSessionManager sharedInstance] defaultVADID];
  return CMSMVAUtility_AudioObjectSetPropertyData();
}

uint64_t vaemSetDeviceBufferNumPCMFrames(unsigned int a1)
{
  unsigned int v1 = a1;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = 0;
  unsigned int v8 = a1;
  unsigned int v6 = 0;
  vaemGetDeviceBufferNumPCMFramesRange(&v7, &v6);
  if (!v2)
  {
    if (v7 > v1)
    {
      unsigned int v8 = v7;
      unsigned int v1 = v7;
    }
    if (v1 > v6)
    {
      unsigned int v8 = v6;
      unsigned int v1 = v6;
    }
  }
  if (vaemBufferFrameSizeShouldBeRestricted()
    && (v1 & 0x1F) != 0
    && (v1 % 0x18 ? (BOOL v3 = v1 % 0x1E == 0) : (BOOL v3 = 1), !v3))
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 4294954315;
  }
  else
  {
    uint64_t v9 = 0x6F7574706673697ALL;
    int v10 = 0;
    [+[MXSessionManager sharedInstance] defaultVADID];
    CMSMVAUtility_AudioObjectSetPropertyData();
    uint64_t result = 0;
    byte_1E9358B95 = 0;
  }
  return result;
}

double vaemGetDeviceBufferNumPCMFramesRange(_DWORD *a1, _DWORD *a2)
{
  double outData = 0.0;
  double v7 = 0.0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747066737A23;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 16;
  if (!AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData))
  {
    double result = outData;
    double v5 = v7;
    *a1 = (int)outData;
    *a2 = (int)v5;
  }
  return result;
}

uint64_t vaemBufferFrameSizeShouldBeRestricted()
{
  int outData = 1;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747062667372;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  OSStatus PropertyData = AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData);
  unsigned __int8 v1 = outData;
  if (PropertyData) {
    return 1;
  }
  return v1;
}

uint64_t vaemSetDeviceFormat(uint64_t a1, const void *a2, int a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  AudioObjectID outData = 0;
  if (dword_1E9359ED0)
  {
    LODWORD(v35[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (byte_1E9358B94) {
    return 4294954309;
  }
  uint64_t Stream0 = vaemGetStream0(a1, 0, &outData);
  if (Stream0 || !outData) {
    return Stream0;
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  vaemGetStreamASBD(outData, (uint64_t)v38);
  if (v9) {
    return v9;
  }
  if (!a2) {
    goto LABEL_23;
  }
  if (!CFEqual(a2, @"MATAtmos"))
  {
    if (CFEqual(a2, @"AC-3"))
    {
      if (v38[2] != 1667326771)
      {
        if (vaemStreamSupportsFormat(outData, 1667326771))
        {
          *(void *)&v35[0] = 0x40E7700000000000;
          *(_OWORD *)((char *)v35 + 8) = xmmword_194EDE850;
          *(_OWORD *)((char *)&v35[1] + 8) = xmmword_194EDE860;
          uint64_t Stream0 = vaemSetStreamASBD(outData, (uint64_t)v35, 0, a1);
          if (!Stream0 && dword_1E9359ED0) {
            goto LABEL_16;
          }
          return Stream0;
        }
        *(_DWORD *)os_log_type_t type = 0;
        int v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v28 = *(_DWORD *)type;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v29 = v28;
        }
        else {
          unsigned int v29 = v28 & 0xFFFFFFFE;
        }
        if (!v29) {
          goto LABEL_59;
        }
        LODWORD(v35[0]) = 136315138;
        *(void *)((char *)v35 + 4) = "vaemSetDeviceFormat";
LABEL_53:
        _os_log_send_and_compose_impl();
LABEL_59:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
LABEL_23:
    if (a3 || v38[2] != 1819304813)
    {
      memset(v35, 0, 40);
      int v36 = 0;
      *(_DWORD *)os_log_type_t type = 0;
      uint64_t v14 = vaemCopySupportedStreamFormats(outData, 0, &v36, (unsigned int *)type);
      if (v14)
      {
        uint64_t Stream0 = v14;
        free(v36);
        return Stream0;
      }
      uint64_t v15 = *(unsigned int *)type;
      if (*(_DWORD *)type)
      {
        uint64_t v16 = 0;
        int v17 = 0;
        int v18 = 0;
        do
        {
          CFAllocatorRef v19 = (char *)v36 + v16;
          if (*(_DWORD *)((char *)v36 + v16 + 8) == 1819304813)
          {
            if (v18 && *(_DWORD *)((char *)v36 + v16 + 28) != 2)
            {
              int v18 = 1;
            }
            else
            {
              long long v20 = *(_OWORD *)v19;
              long long v21 = *((_OWORD *)v19 + 1);
              *(void *)&v35[2] = *((void *)v19 + 4);
              v35[0] = v20;
              v35[1] = v21;
              double v22 = *(double *)v19;
              *(void *)&v35[0] = *(void *)v19;
              int v17 = HIDWORD(v21);
              int v18 = 1;
              if (HIDWORD(v21) == 2 && v22 == 44100.0) {
                goto LABEL_56;
              }
            }
          }
          v16 += 56;
        }
        while (56 * *(unsigned int *)type != v16);
        if (v17 != 2)
        {
          uint64_t v23 = v36;
          while (v23[2] != 1819304813 || *(double *)v23 != 44100.0)
          {
            v23 += 14;
            if (!--v15) {
              goto LABEL_56;
            }
          }
          uint64_t v30 = *((void *)v23 + 4);
          long long v31 = *((_OWORD *)v23 + 1);
          *((void *)&v35[0] + 1) = *((void *)v23 + 1);
          v35[1] = v31;
          *(void *)&v35[2] = v30;
          *(void *)&v35[0] = 0x40E5888000000000;
        }
      }
LABEL_56:
      free(v36);
      int v36 = (void *)0x6F75747073666D74;
      int v37 = 0;
      uint64_t Stream0 = CMSMVAUtility_AudioObjectSetPropertyData();
      [+[MXSessionManager sharedInstance] updateDeviceSampleRate:a1];
      if (Stream0) {
        return Stream0;
      }
      if (dword_1E9359ED0)
      {
        CFIndex v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        goto LABEL_59;
      }
    }
    return 0;
  }
  if ((v38[2] & 0xFFFFFEFF) == 0x6D74622B) {
    return 0;
  }
  int v10 = 1836344107;
  int v11 = vaemStreamSupportsFormat(outData, 1836344107);
  int v12 = vaemStreamSupportsFormat(outData, 1836343851);
  if (!v11)
  {
    int v10 = 1836343851;
    if (!v12)
    {
      *(_DWORD *)os_log_type_t type = 0;
      long long v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v25 = *(_DWORD *)type;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (!v26) {
        goto LABEL_59;
      }
      LODWORD(v35[0]) = 136315138;
      *(void *)((char *)v35 + 4) = "vaemSetDeviceFormat";
      goto LABEL_53;
    }
  }
  *(void *)&v35[0] = 0x40E7700000000000;
  DWORD2(v35[0]) = v10;
  *(_OWORD *)((char *)v35 + 12) = xmmword_194EDE840;
  *(void *)((char *)&v35[1] + 12) = 0x1000000020;
  DWORD1(v35[2]) = 0;
  int v36 = (void *)0x6F75747073666D74;
  int v37 = 0;
  uint64_t Stream0 = CMSMVAUtility_AudioObjectSetPropertyData();
  [+[MXSessionManager sharedInstance] updateDeviceSampleRate:a1];
  if (!Stream0 && dword_1E9359ED0)
  {
LABEL_16:
    int v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return Stream0;
}

uint64_t vaemSetToolboxDuckingEnabled(AudioObjectID a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"dxevptuo";
  inAddress.mElement = 0;
  if (AudioObjectHasProperty(a1, &inAddress))
  {
    uint64_t result = CMSMVAUtility_AudioObjectSetPropertyData();
    unsigned int v7 = result;
    if (!result) {
      return result;
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    unsigned int v7 = 0;
    BOOL v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v4 = v7;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      int v8 = 136315138;
      uint64_t v9 = "vaemSetToolboxDuckingEnabled";
      _os_log_send_and_compose_impl();
    }
  }
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void vaemSetDeviceInputGainScalar(float a1)
{
  *((float *)&v5 + 1) = a1;
  LODWORD(v5) = 0;
  [+[MXSessionManager sharedInstance] defaultVADID];
  CMSMVAUtility_AudioObjectSetPropertyData();
  CurrentInputuint64_t PortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
  int v2 = (const void *)vaeCopyNameForPort(CurrentInputPortAtIndex);
  CFTypeRef v3 = vaeCopyDeviceIdentifierFromVADPort(CurrentInputPortAtIndex);
  id v4 = vaeCopyFigInputDeviceNameFromVADPort(CurrentInputPortAtIndex);
  PVMSetInputVolumePreference(v2, (unint64_t)v3, (uint64_t)v4, v6);
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t vaemSetDefaultInputGain()
{
  return CMSMVAUtility_AudioObjectSetPropertyData();
}

void vaemSetInputGainFromPreferenceIfPresent()
{
  CurrentInputuint64_t PortAtIndex = CMSMUtility_GetCurrentInputPortAtIndex(0);
  unsigned __int8 v1 = (const void *)vaeCopyNameForPort(CurrentInputPortAtIndex);
  CFTypeRef v2 = vaeCopyDeviceIdentifierFromVADPort(CurrentInputPortAtIndex);
  id v3 = vaeCopyFigInputDeviceNameFromVADPort(CurrentInputPortAtIndex);
  if (PVMInputVolumePrefExistsForDeviceRoute(v1, (unint64_t)v2, (uint64_t)v3))
  {
    float v4 = PVMGetInputVolumePreference(v1, (unint64_t)v2, (uint64_t)v3);
    vaemSetDeviceInputGainScalar(v4);
    if (!v1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  vaemSetDefaultInputGain();
  if (v1) {
LABEL_3:
  }
    CFRelease(v1);
LABEL_4:
  if (v2) {
    CFRelease(v2);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

BOOL vaemIsPersistentRouteActive()
{
  return *((void *)&xmmword_1E9358B18 + 1) != 0;
}

uint64_t vaemSetUplinkMute(int a1)
{
  int v2 = [+[MXSessionManager sharedInstance] uplinkMute];
  uint64_t v3 = vaemSetUplinkMuteOnDevice(a1);
  if (!v3)
  {
    [+[MXSessionManager sharedInstance] setUplinkMute:a1 != 0];
    if (v2 != [+[MXSessionManager sharedInstance] uplinkMute])CMSMNotificationUtility_PostUplinkMuteDidChange(v2); {
  }
    }
  return v3;
}

uint64_t vaemSetUplinkMuteOnDevice(int a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v11[0] = 0;
  int v2 = (int)unk_1E9359B58;
  if (unk_1E9359B58)
  {
    unk_1E9359B58(0, v11);
    int v2 = v11[0] & 2;
  }
  int v8 = v2 | a1;
  uint64_t v9 = 0x696E70746D757465;
  int v10 = 0;
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  [+[MXSessionManager sharedInstance] defaultVADID];
  uint64_t v4 = CMSMVAUtility_AudioObjectSetPropertyData();
  if (unk_1E9359B58) {
    unk_1E9359B58(1, &v8);
  }
  return v4;
}

uint64_t vaemSetDownlinkMute(int a1)
{
  int v2 = vaemGetUplinkMute() | (2 * a1);
  if (unk_1E9359B58) {
    unk_1E9359B58(1, &v2);
  }
  return 0;
}

uint64_t vaemGetUplinkMute()
{
  int outData = 0;
  if (unk_1E9359B58)
  {
    unk_1E9359B58(0, &outData);
    return outData & 1;
  }
  else
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E70746D757465;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData);
    return outData;
  }
}

uint64_t vaemUnmuteFullMuteIfMuted()
{
  uint64_t result = vaemGetFullMute();
  if (result)
  {
    return vaemSetFullMute();
  }
  return result;
}

uint64_t vaemSetFullMute()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int FullMute = vaemGetFullMute();
  unsigned int v4 = CMSMVAUtility_AudioObjectSetPropertyData();
  if (v4)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v4;
  }
  else
  {
    MEMORY[0x199716E90](gCMSM);
    int v2 = vaemGetFullMute();
    byte_1E9359C48 = v2;
    MEMORY[0x199716EA0](gCMSM);
    if (FullMute != v2) {
      CMSMNotificationUtility_PostFullMuteDidChangeToVolumeButtonClientAndAVSystemControllers(v2);
    }
    return 0;
  }
}

uint64_t vaemSetInputDataSource(uint64_t a1)
{
  uint64_t v4 = a1;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707464737263;
  inAddress.mElement = 0;
  Boolean outIsSettable = 1;
  AudioObjectIsPropertySettable([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, &outIsSettable);
  if (!outIsSettable) {
    return 0;
  }
  [+[MXSessionManager sharedInstance] defaultVADID];
  return CMSMVAUtility_AudioObjectSetPropertyData();
}

uint64_t vaemSetOutputDataDestination(uint64_t a1)
{
  uint64_t v4 = a1;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747064647374;
  inAddress.mElement = 0;
  Boolean outIsSettable = 1;
  AudioObjectIsPropertySettable([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, &outIsSettable);
  if (!outIsSettable) {
    return 0;
  }
  [+[MXSessionManager sharedInstance] defaultVADID];
  return CMSMVAUtility_AudioObjectSetPropertyData();
}

BOOL vaemIsVolumeRampInProgress(AudioObjectID a1)
{
  inAddress_8[22] = *MEMORY[0x1E4F143B8];
  if (vaemDeviceSupportsVolumeRamp(a1))
  {
    uint64_t inAddress = *(void *)"spmrptuo";
    inAddress_8[0] = 0;
    UInt32 ioDataSize = 4;
    if (!AudioObjectGetPropertyData(a1, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, &ioDataSize, (char *)inAddress_8 + 4))return HIDWORD(inAddress_8[0]) == 1; {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    }
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_7;
  }
  if (dword_1E9359ED0)
  {
    LODWORD(inAddress) = 0;
    BYTE4(inAddress_8[0]) = 0;
    uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
LABEL_7:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t vaemVolumeStateGetLastVolumeRampCategory()
{
  return qword_1E9358AE8;
}

uint64_t vaemVolumeStateGetLastVolumeRampInProgress()
{
  return byte_1E9358AE1;
}

uint64_t vaemVolumeStateGetLastVolumeSetVADID()
{
  return gVAEM;
}

uint64_t vaemDeviceCancelVolumeRamp(uint64_t a1, __int16 a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  __int16 v7 = a2;
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CMSMVAUtility_AudioObjectSetPropertyData())
  {
    uint64_t v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return vaemVADVolumeRampStatusChangeListenerGuts_f(a1);
}

uint64_t vaemVADVolumeRampStatusChangeListenerGuts_f(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  float v2 = *(float *)&dword_1E9358ACC;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F757470766F6C6DLL;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  float outData = 0.0;
  uint64_t result = AudioObjectGetPropertyData(gVAEM, &inAddress, 0, 0, &ioDataSize, &outData);
  float v4 = outData;
  byte_1E9358AE1 = 0;
  qword_1E9358AE8 = 0;
  if (vabds_f32(v2, outData) > 0.025)
  {
    if (dword_1E9359ED0)
    {
      UInt32 ioDataSize = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      UInt32 v6 = ioDataSize;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      if (v7)
      {
        uint64_t VADNameForVADID = CMSMUtility_GetVADNameForVADID(a1);
        float outData = 4.8151e-34;
        int v11 = "vaemVADVolumeRampStatusChangeListenerGuts_f";
        __int16 v12 = 2114;
        uint64_t v13 = VADNameForVADID;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return vaemVADDeviceVolumeChangeListenerGuts_f(0, 1, v4);
  }
  return result;
}

uint64_t vaemAggregatePorts(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a3) {
    unsigned int v7 = CMSMUtility_CopyCurrentOutputPorts();
  }
  else {
    unsigned int v7 = 0;
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  memset(v11, 0, sizeof(v11));
  uint64_t v12 = a1;
  uint64_t v13 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v7;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v9 = cmsmSetVADRouteConfiguration(v11, a2, a4);
  if (v7) {
    CFRelease(v7);
  }
  return v9;
}

uint64_t vaemDeaggregatePorts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  memset(v10, 0, sizeof(v10));
  uint64_t v11 = 0;
  uint64_t v12 = a2;
  uint64_t v13 = 0;
  uint64_t v14 = a1;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  return cmsmSetVADRouteConfiguration(v10, a3, a4);
}

uint64_t vaemSetHDMILatencyOverride(int a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  float v2 = MXGetSerialQueue();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = __vaemSetHDMILatencyOverride_block_invoke;
  v5[3] = &unk_1E57C8A88;
  int v6 = a1;
  void v5[4] = &v7;
  MXDispatchAsync((uint64_t)"vaemSetHDMILatencyOverride", (uint64_t)"CMSessionManager_VAEndpointManager.m", 4643, 0, 0, v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_194DA4164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __vaemSetHDMILatencyOverride_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"otalptuo";
  inAddress.mElement = 0;
  if (AudioObjectHasProperty([+[MXSessionManager sharedInstance] defaultVADID], &inAddress))
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    [+[MXSessionManager sharedInstance] defaultVADID];
    uint64_t result = CMSMVAUtility_AudioObjectSetPropertyData();
  }
  else
  {
    uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t result = 4294954509;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t vaemAddVADDeviceVolumeChangeListener(int a1)
{
  uint64_t result = [+[MXSessionManager sharedInstance] defaultVADID];
  if (result)
  {
    LODWORD(v4) = a1;
    return AudioObjectAddPropertyListener([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v3, (AudioObjectPropertyListenerProc)vaemVADDeviceVolumeChangeListener, 0);
  }
  return result;
}

uint64_t vaemVADDeviceVolumeChangeListener(int a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = malloc_type_malloc(12 * a2, 0x10000403E1C8BA9uLL);
  uint64_t v7 = *a3;
  _OWORD v6[2] = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v6 = v7;
  if (dword_1E9359ED0)
  {
    int v15 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v9 = MXGetSerialQueue();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  _OWORD v11[2] = __vaemVADDeviceVolumeChangeListener_block_invoke;
  _OWORD v11[3] = &__block_descriptor_48_e5_v8__0l;
  v11[4] = v6;
  unsigned int v12 = a2;
  int v13 = a1;
  MXDispatchAsync((uint64_t)"vaemVADDeviceVolumeChangeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 4795, 0, 0, v9, (uint64_t)v11);
  return 0;
}

uint64_t vaemVADVolumeRampStatusChangeListener(int a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled())
  {
    if (dword_1E9359ED0)
    {
      int v8 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v3 = MXGetSerialQueue();
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    _OWORD v5[2] = __vaemVADVolumeRampStatusChangeListener_block_invoke;
    v5[3] = &__block_descriptor_36_e5_v8__0l;
    int v6 = a1;
    MXDispatchAsync((uint64_t)"vaemVADVolumeRampStatusChangeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 4909, 0, 0, v3, (uint64_t)v5);
  }
  return 0;
}

void vaemUpdateSystemHasAudioInputDeviceState()
{
  unsigned int v0 = vaemSystemHasAudioInputDeviceForRouteConfiguration(1668309362, 1768776806);
  unsigned int v1 = vaemSystemHasAudioInputDeviceForRouteConfiguration(1668313666, 1768776806);
  unsigned int v2 = v1;
  int v3 = byte_1E9358B69;
  if (byte_1E9358B69 == v0)
  {
    if (byte_1E9358B6A == v1 || dword_1E9359ED0 == 0) {
      goto LABEL_12;
    }
  }
  else if (!dword_1E9359ED0)
  {
    goto LABEL_10;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  int v3 = byte_1E9358B69;
LABEL_10:
  if (v3 != v0)
  {
    byte_1E9358B69 = v0;
    CMSMNotificationUtility_PostSystemHasAudioInputDeviceDidChange();
  }
LABEL_12:
  if (byte_1E9358B6A != v2)
  {
    byte_1E9358B6A = v2;
    CMSMNotificationUtility_PostSystemHasAudioInputDeviceExcludingBluetoothDidChange();
  }
}

uint64_t vaemVADAvailableSampleRatesListener()
{
  unsigned int v0 = MXGetSerialQueue();
  MXDispatchAsyncFunction((uint64_t)"vaemVADAvailableSampleRatesListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5402, 0, 0, v0, 0, (uint64_t)vaemVADAvailableSampleRatesListenerGuts_f);
  return 0;
}

void vaemAddVADCurrentSampleRateListener(int a1)
{
  LODWORD(v3) = 0;
  if ([+[MXSessionManager sharedInstance] defaultVADID])
  {
    LODWORD(v3) = 0;
    AudioObjectAddPropertyListener([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v2, (AudioObjectPropertyListenerProc)vaemVADCurrentSampleRateListener, 0);
  }
  if (a1) {
    vaemVADCurrentSampleRateListenerGuts_f();
  }
}

uint64_t vaemVADCurrentSampleRateListener()
{
  unsigned int v0 = MXGetSerialQueue();
  MXDispatchAsyncFunction((uint64_t)"vaemVADCurrentSampleRateListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5409, 0, 0, v0, 0, (uint64_t)vaemVADCurrentSampleRateListenerGuts_f);
  return 0;
}

void vaemVADCurrentSampleRateListenerGuts_f()
{
  [+[MXSessionManager sharedInstance] refreshDeviceSampleRateCache];
  unsigned int v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"vaemVADCurrentSampleRateListenerGuts_f", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5382, 0, 0, v0, (uint64_t)&__block_literal_global_81);
}

void vaemAddVADCurrentDeviceBufferSizeListener(int a1)
{
  LODWORD(v4) = 0;
  if ([+[MXSessionManager sharedInstance] defaultVADID])
  {
    LODWORD(v4) = 0;
    AudioObjectAddPropertyListener([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v3, (AudioObjectPropertyListenerProc)vaemVADCurrentBufferFrameSizeListener, 0);
  }
  if (a1)
  {
    uint64_t v2 = MXGetNotificationSenderQueue();
    MXDispatchAsync((uint64_t)"vaemVADCurrentBufferFrameSizeListenerGuts_f", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5392, 0, 0, v2, (uint64_t)&__block_literal_global_83);
  }
}

uint64_t vaemVADCurrentBufferFrameSizeListener()
{
  unsigned int v0 = MXGetSerialQueue();
  MXDispatchAsyncFunction((uint64_t)"vaemVADCurrentBufferFrameSizeListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5416, 0, 0, v0, 0, (uint64_t)vaemVADCurrentBufferFrameSizeListenerGuts_f);
  return 0;
}

void vaemVADCurrentBufferFrameSizeListenerGuts_f()
{
  unsigned int v0 = MXGetNotificationSenderQueue();
  MXDispatchAsync((uint64_t)"vaemVADCurrentBufferFrameSizeListenerGuts_f", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5392, 0, 0, v0, (uint64_t)&__block_literal_global_83);
}

uint64_t vaemCopyCPMSPowerBudgetRangeInMilliWatts(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747074686272;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  int inQualifierData = a1;
  if (a1 == 6)
  {
    AudioObjectID v1 = [+[MXSessionManager sharedInstance] actuatorVADID];
  }
  else
  {
    if (a1 != 5) {
      return outData;
    }
    AudioObjectID v1 = [+[MXSessionManager sharedInstance] defaultVADID];
  }
  if (AudioObjectGetPropertyData(v1, &inAddress, 4u, &inQualifierData, &ioDataSize, &outData))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return outData;
}

uint64_t vaemCopyThermalControlInfo()
{
  uint64_t outData = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747074686264;
  inAddress.mElement = 0;
  AudioObjectID v0 = [+[MXSessionManager sharedInstance] actuatorVADID];
  if (!AudioObjectHasProperty(v0, &inAddress)) {
    return 0;
  }
  if (AudioObjectGetPropertyData(v0, &inAddress, 0, 0, &ioDataSize, &outData)) {
    return 0;
  }
  return outData;
}

uint64_t vaemSetThermalControlInfo(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1;
  [+[MXSessionManager sharedInstance] actuatorVADID];
  uint64_t result = CMSMVAUtility_AudioObjectSetPropertyData();
  unsigned int v3 = result;
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v3;
  }
  return result;
}

uint64_t vaemCopyCPMSPowerBudget(uint64_t a1)
{
  inAddress.mElement = 0;
  uint64_t outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"dbhtptuo";
  uint64_t v6 = a1 | 0x800000000;
  if (a1 == 6)
  {
    AudioObjectID v2 = [+[MXSessionManager sharedInstance] actuatorVADID];
  }
  else
  {
    uint64_t v1 = 0;
    if (a1 != 5) {
      return v1;
    }
    AudioObjectID v2 = [+[MXSessionManager sharedInstance] defaultVADID];
  }
  AudioObjectID v3 = v2;
  if (!AudioObjectHasProperty(v2, &inAddress)) {
    return 0;
  }
  OSStatus PropertyData = AudioObjectGetPropertyData(v3, &inAddress, 4u, &v6, (UInt32 *)&v6 + 1, &outData);
  uint64_t v1 = outData;
  if (PropertyData) {
    return 0;
  }
  return v1;
}

uint64_t vaemSetCPMSPowerBudget(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  if (a2 == 6)
  {
    [+[MXSessionManager sharedInstance] actuatorVADID];
  }
  else
  {
    if (a2 != 5) {
      return 4294954315;
    }
    [+[MXSessionManager sharedInstance] defaultVADID];
  }
  uint64_t result = CMSMVAUtility_AudioObjectSetPropertyData();
  unsigned int v4 = result;
  if (result)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v4;
  }
  return result;
}

uint64_t vaemUpdateSpeakerThermalGainAdjustment(float a1)
{
  if (a1 > 1.0) {
    a1 = 1.0;
  }
  *(float *)&qword_1E9358B98 = a1;
  return vaemUpdateThermalGainAdjustment();
}

uint64_t vaemUpdateHapticsThermalGainAdjustment(float a1)
{
  if (a1 > 1.0) {
    a1 = 1.0;
  }
  *((float *)&qword_1E9358B98 + 1) = a1;
  return vaemUpdateThermalGainAdjustment();
}

uint64_t vaemUpdateDisallowAudioFormatChanges(uint64_t result)
{
  byte_1E9358B94 = result;
  return result;
}

void vaemAddAvailableVirtualFormatsListener()
{
  v5.mElement = 0;
  *(void *)&v5.AudioObjectPropertySelector mSelector = 0;
  AudioObjectID outData = 0;
  if ([+[MXSessionManager sharedInstance] defaultVADID])
  {
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747073746D23;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    if (AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData))
    {
      AudioObjectID outData = 0;
    }
    else if (outData)
    {
      *(void *)&v5.AudioObjectPropertySelector mSelector = 0x676C6F6273666D61;
      v5.mElement = 0;
      AudioObjectAddPropertyListener(outData, &v5, (AudioObjectPropertyListenerProc)vaemAvailableVirtualFormatsListener, 0);
    }
    AudioObjectID v0 = +[MXSessionManager sharedInstance];
    [(MXSessionManager *)v0 setCurrentStream0:outData];
  }
  uint64_t v1 = MXGetNotificationSenderQueue();
  MXDispatchAsyncFunction((uint64_t)"vaemAddAvailableVirtualFormatsListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 2267, 0, 0, v1, 0, (uint64_t)vaemAvailableVirtualFormatsPropertyListenerGuts_f);
}

void vaemCancelOutputVolumeChangeTimer()
{
  AudioObjectID v0 = qword_1E9358AD8;
  if (qword_1E9358AD8)
  {
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      AudioObjectID v0 = qword_1E9358AD8;
    }
    dispatch_source_cancel(v0);
    if (qword_1E9358AD8)
    {
      dispatch_release((dispatch_object_t)qword_1E9358AD8);
      qword_1E9358AD8 = 0;
    }
  }
  byte_1E9358AE0 = 0;
}

CFTypeRef vaemCopyPickableQuiesceableWiredPortsList(int a1)
{
  if (a1 == 1) {
    AudioObjectPropertyScope v1 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v1 = 1869968496;
  }
  inAddress.AudioObjectPropertySelector mSelector = 1903653475;
  inAddress.mScope = v1;
  inAddress.mElement = 0;
  CFTypeRef outData = 0;
  UInt32 ioDataSize = 8;
  OSStatus PropertyData = AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 0, 0, &ioDataSize, &outData);
  CFTypeRef result = outData;
  if (PropertyData)
  {
    if (!outData) {
      return result;
    }
LABEL_12:
    CFRelease(result);
    return 0;
  }
  if (outData)
  {
    CFTypeID v4 = CFGetTypeID(outData);
    CFTypeID TypeID = CFArrayGetTypeID();
    CFTypeRef result = outData;
    if (v4 != TypeID && outData != 0) {
      goto LABEL_12;
    }
  }
  return result;
}

BOOL vaemLineOutIsConnected()
{
  return vaemGetVADPortIDFromVADPortType(1886154613) != 0;
}

BOOL vaemUSBAudioOutputIsConnected()
{
  return vaemGetVADPortIDFromVADPortType(1886745455) != 0;
}

BOOL vaemHDMIAudioOutputIsConnected()
{
  return vaemGetVADPortIDFromVADPortType(1885889645) != 0;
}

BOOL vaemDisplayPortAudioOutputIsConnected()
{
  return vaemGetVADPortIDFromVADPortType(1885631344) != 0;
}

BOOL vaemThunderboltOutputIsConnected()
{
  return vaemGetVADPortIDFromVADPortType(1886675567) != 0;
}

CFNumberRef vaemCopyThermalGainAdjustment_Haptics()
{
  return MXCFNumberCreateFromFloat32(*((float *)&qword_1E9358B98 + 1));
}

CFNumberRef vaemCopyThermalGainAdjustment_Speaker()
{
  return MXCFNumberCreateFromFloat32(*(float *)&qword_1E9358B98);
}

uint64_t vaemGetVirtualAudioPlugInCategory()
{
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6272637478;
  inAddress.mElement = 0;
  unsigned int outData = 0;
  UInt32 ioDataSize = 4;
  AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 0, 0, &ioDataSize, &outData);
  return outData;
}

uint64_t vaemGetVirtualAudioPlugInMode()
{
  unsigned int outData = 1768776806;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62696E706DLL;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  AudioObjectGetPropertyData(dword_1E9359BA0, &inAddress, 0, 0, &ioDataSize, &outData);
  return outData;
}

uint64_t vaemCreateVADWithRouteConfigurationDictionary(const __CFDictionary *a1, uint64_t a2, uint64_t a3, int a4)
{
  theDict[0] = 0;
  theDict[1] = a1;
  theDict[2] = (CFDictionaryRef)8;
  theDict[3] = (CFDictionaryRef)theDict;
  theDict[4] = (CFDictionaryRef)8;
  uint64_t v14 = 0x676C6F6276616463;
  int v15 = 0;
  int v6 = CMSMVAUtility_AudioObjectSetPropertyData();
  CFDictionaryRef v7 = theDict[0];
  if (v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = theDict[0] == 0;
  }
  if (v8)
  {
    uint64_t v9 = 4294954310;
    if (!theDict[0]) {
      return v9;
    }
    goto LABEL_13;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict[0], @"route change reason");
  if (Value)
  {
    int valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    int v11 = CMSMVAUtility_MapVADReasonToCMSReason(valuePtr);
    if (a4)
    {
      if (v11 != 9)
      {
        vaemAQMERouteChanged(theDict[0], a2, 0);
        vaemVADRouteChangeListener(0, theDict[0]);
      }
    }
  }
  uint64_t v9 = 0;
  CFDictionaryRef v7 = theDict[0];
  if (theDict[0]) {
LABEL_13:
  }
    CFRelease(v7);
  return v9;
}

uint64_t vaemDeleteVADWithRouteConfigurationDictionary(const __CFDictionary *a1, uint64_t a2, uint64_t a3, int a4)
{
  theDict[0] = 0;
  theDict[1] = a1;
  theDict[2] = (CFDictionaryRef)8;
  theDict[3] = (CFDictionaryRef)theDict;
  theDict[4] = (CFDictionaryRef)8;
  uint64_t v14 = 0x676C6F6276616464;
  int v15 = 0;
  int v6 = CMSMVAUtility_AudioObjectSetPropertyData();
  CFDictionaryRef v7 = theDict[0];
  if (v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = theDict[0] == 0;
  }
  if (v8)
  {
    uint64_t v9 = 4294954310;
    if (!theDict[0]) {
      return v9;
    }
    goto LABEL_13;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict[0], @"route change reason");
  if (Value)
  {
    int valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    int v11 = CMSMVAUtility_MapVADReasonToCMSReason(valuePtr);
    if (a4)
    {
      if (v11 != 9)
      {
        vaemAQMERouteChanged(theDict[0], a2, 0);
        vaemVADRouteChangeListener(0, theDict[0]);
      }
    }
  }
  uint64_t v9 = 0;
  CFDictionaryRef v7 = theDict[0];
  if (theDict[0]) {
LABEL_13:
  }
    CFRelease(v7);
  return v9;
}

uint64_t vaemShouldSetSharePlayMediaInfoInRouteConfiguration(int a1, uint64_t a2, int a3)
{
  if (byte_1E9358BB0 != a3)
  {
    if (dword_1E9359ED0) {
      goto LABEL_10;
    }
    return 1;
  }
  if (dword_1E9358BC0 != a1)
  {
    if (dword_1E9359ED0) {
      goto LABEL_10;
    }
    return 1;
  }
  if (!FigCFEqual())
  {
    if (dword_1E9359ED0)
    {
LABEL_10:
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t v3 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return v3;
    }
    return 1;
  }
  return 0;
}

BOOL vaemIsVirtualAudioInItsDefaultRouteConfiguration()
{
  if (vaemGetVirtualAudioPlugInCategory() != 1668505974) {
    return 0;
  }
  int VirtualAudioPlugInMode = vaemGetVirtualAudioPlugInMode();
  v1.i64[0] = qword_1E9358B38;
  v1.i64[1] = qword_1E9358B08;
  v2.i64[0] = qword_1E9358B30;
  v2.i64[1] = qword_1E9358B10;
  v3.i64[0] = qword_1E9359B90;
  v3.i64[1] = qword_1E9358B50;
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v2), (int32x4_t)vceqzq_s64(v3)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v1), (int32x4_t)vceqzq_s64((int64x2_t)xmmword_1E9358B18)))))) & 1) != 0|| qword_1E9358BB8|| qword_1E9358B48)
  {
    return 0;
  }
  BOOL v4 = !(byte_1E9358BB0 | (byte_1E9358B41 | byte_1E9358B40))
    && VirtualAudioPlugInMode == 1768776806;
  return v4 && byte_1E9358B42 == 0;
}

uint64_t vaemIsDefaultVADInItsDefaultConfiguration()
{
  uint64_t result = vaemIsVirtualAudioInItsDefaultRouteConfiguration();
  if (result)
  {
    [+[MXSessionManager sharedInstance] currentAudioCategory];
    uint64_t result = FigCFEqual();
    if (result)
    {
      [+[MXSessionManager sharedInstance] currentAudioMode];
      return FigCFEqual() != 0;
    }
  }
  return result;
}

void vaemResetVADCategoryToStandardAVAndDefaultMode()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  [+[MXSessionManager sharedInstance] setCurrentAudioCategory:@"Audio/Video"];
  [+[MXSessionManager sharedInstance] setCurrentAudioMode:@"Default"];
  if (MX_FeatureFlags_IsOverdubRecordingEnabled()) {
    AudioObjectID v0 = (const void *)[objc_alloc(MEMORY[0x1E4F28ED0]) initWithUnsignedInt:0];
  }
  else {
    AudioObjectID v0 = 0;
  }
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = 0x696D646663736176;
  long long v3 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  char v12 = 1;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  int v15 = v0;
  cmsmSetVADRouteConfiguration(&v2, 0, qword_1E9359C88);
  if (MX_FeatureFlags_IsOverdubRecordingEnabled())
  {
    if (v0) {
      CFRelease(v0);
    }
  }
}

uint64_t vaemShouldRequestOwnershipForSharedAudioRoute()
{
  int v0 = CMSMDeviceState_ItsAnAppleWatch();
  int IsNearbyPairedDevicePresent = CMSM_IDSConnection_IsNearbyPairedDevicePresent();
  if (v0)
  {
    if (IsNearbyPairedDevicePresent)
    {
      if (!byte_1E9359C30)
      {
        if (dword_1E9359ED0) {
          goto LABEL_24;
        }
        return 0;
      }
      if (!CMSM_IDSConnection_DidRemoteReplyWithInitialPlayingInfo())
      {
        if (dword_1E9359ED0) {
          goto LABEL_24;
        }
        return 0;
      }
      if (CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote())
      {
        unsigned int HighestPriorityOfLocalSessionPlayingToDevice = CMSM_GetHighestPriorityOfLocalSessionPlayingToDevice(0);
        if (HighestPriorityOfLocalSessionPlayingToDevice < CMSM_GetHighestRemotePlayingSessionPriority())
        {
          if (dword_1E9359ED0) {
            goto LABEL_24;
          }
          return 0;
        }
        if (dword_1E9359ED0)
        {
LABEL_33:
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          uint64_t v5 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          return v5;
        }
      }
      else if (dword_1E9359ED0)
      {
        goto LABEL_33;
      }
    }
    else if (dword_1E9359ED0)
    {
      goto LABEL_33;
    }
    return 1;
  }
  if (!IsNearbyPairedDevicePresent)
  {
    if (dword_1E9359ED0) {
      goto LABEL_33;
    }
    return 1;
  }
  if (CMSM_IDSConnection_DidRemoteReplyWithInitialPlayingInfo())
  {
    if (CMSM_IDSConnection_IsSomeClientPlayingOverSharedAudioRouteOnRemote())
    {
      unsigned int v3 = CMSM_GetHighestPriorityOfLocalSessionPlayingToDevice(0);
      if (v3 < CMSM_GetHighestRemotePlayingSessionPriority())
      {
        if (dword_1E9359ED0) {
          goto LABEL_24;
        }
        return 0;
      }
      if (dword_1E9359ED0) {
        goto LABEL_33;
      }
    }
    else if (dword_1E9359ED0)
    {
      goto LABEL_33;
    }
    return 1;
  }
  if (dword_1E9359ED0)
  {
LABEL_24:
    long long v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t vaemUpdateSharedAudioRouteState(const __CFArray *a1, CFArrayRef theArray)
{
  if (!theArray || (CFIndex Count = CFArrayGetCount(theArray), Count < 1))
  {
    unsigned __int8 v6 = 0;
    if (!a1) {
      return v6;
    }
    goto LABEL_12;
  }
  CFIndex v5 = Count;
  unsigned __int8 v6 = 0;
  for (CFIndex i = 0; i != v5; ++i)
  {
    uint64_t PortAtIndex = CMSMVAUtility_GetPortAtIndex(theArray, i);
    if (vaeDoesPortSupportMultipleConnections(PortAtIndex))
    {
      if (!MXBluetoothServices_IsPortBTManaged(PortAtIndex, 1))
      {
        unsigned __int8 v6 = 1;
        CMSM_IDSConnection_AddPortToSharedAudioRoutePortIDs(PortAtIndex, 0, 1);
        CMSM_IDSConnection_UpdateSharedAudioRouteIsConnectedToLocal(1);
        global_queue = dispatch_get_global_queue(0, 0);
        MXDispatchAsync((uint64_t)"vaemUpdateSharedAudioRouteState", (uint64_t)"CMSessionManager_VAEndpointManager.m", 9879, 0, 0, global_queue, (uint64_t)&__block_literal_global_65);
        if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote()) {
          CMSMNotificationUtility_PostPickableRoutesDidChange(1);
        }
      }
    }
  }
  if (a1)
  {
LABEL_12:
    CFIndex v10 = CFArrayGetCount(a1);
    if (v10 >= 1)
    {
      CFIndex v11 = v10;
      for (CFIndex j = 0; j != v11; ++j)
      {
        int v13 = CMSMVAUtility_GetPortAtIndex(a1, j);
        CFArrayRef v14 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, j);
        if (v14)
        {
          uint64_t v16 = ValueAtIndex;
          v21.length = CFArrayGetCount(v14);
          v21.id location = 0;
          if (CFArrayContainsValue(v14, v21, v16)) {
            CMSM_IDSConnection_RemovePortFromSharedAudioRoutePortIDs(v13);
          }
          CFRelease(v14);
        }
        CFArrayRef v17 = CMSM_IDSConnection_CopySharedAudioRoutePortIDs();
        CFArrayRef v18 = v17;
        if (v17 && CFArrayGetCount(v17)) {
          goto LABEL_23;
        }
        CMSM_IDSConnection_UpdateSharedAudioRouteIsConnectedToLocal(0);
        CMSM_IDSConnection_ResetRemotePlayingInfo();
        CMSM_IDSConnection_StopWaitForRemoteToReplyWithInitialPlayingInfoTimer();
        long long v19 = dispatch_get_global_queue(0, 0);
        MXDispatchAsync((uint64_t)"vaemUpdateSharedAudioRouteState", (uint64_t)"CMSessionManager_VAEndpointManager.m", 9940, 0, 0, v19, (uint64_t)&__block_literal_global_67);
        cmsmUpdateEnableSharedAudioRouteSyntheticMute(0, 0, 0, 0, 1, 0);
        if (CMSM_IDSConnection_IsSharedAudioRouteConnectedToRemote()) {
          CMSMNotificationUtility_PostPickableRoutesDidChange(1);
        }
        if (v18) {
LABEL_23:
        }
          CFRelease(v18);
      }
    }
  }
  return v6;
}

void __vaemUpdateSharedAudioRouteState_block_invoke()
{
  CMSM_IDSClient_NotifyRemote_BTDeviceConnectionStatusChanged(1);
  if (CMSM_IDSConnection_IsNearbyPairedDevicePresent())
  {
    int v0 = CMSMUtility_CopyMatchingSessions(0, (unsigned int (*)(uint64_t, void, uint64_t))CMSUtilityPredicate_IsPlaying, 0);
    if (v0)
    {
      CFArrayRef v1 = v0;
      CFIndex Count = CFArrayGetCount(v0);
      if (Count >= 1)
      {
        CFIndex v3 = Count;
        for (CFIndex i = 0; i != v3; ++i)
        {
          CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v1, i);
          CMSM_IDSClient_NotifyRemote_LocalIsPlayingStart(ValueAtIndex);
        }
      }
      CFRelease(v1);
    }
  }
}

uint64_t __vaemUpdateSharedAudioRouteState_block_invoke_2()
{
  return CMSM_IDSClient_NotifyRemote_BTDeviceConnectionStatusChanged(0);
}

CFIndex vaemTakeOwnershipOnSharedAudioRoute(CFIndex result)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    CFArrayRef v1 = (const __CFArray *)result;
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      CFIndex v2 = result;
      for (CFIndex i = 0; v2 != i; ++i)
      {
        AudioObjectID valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v1, i);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        AudioObjectID v5 = valuePtr;
        uint64_t result = vaeDoesPortSupportMultipleConnections(valuePtr);
        if (!result) {
          continue;
        }
        if (vaemShouldRequestOwnershipForSharedAudioRoute())
        {
          if (!vaeDoesBTPortSupportInEarDetection(v5)
            || !CMSMVAUtility_IsBTPortKnownToNotBeInEar(v5))
          {
            char v9 = 0;
            goto LABEL_17;
          }
          if (dword_1E9359ED0)
          {
            unsigned int v15 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v7 = v15;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
              unsigned int v8 = v7;
            }
            else {
              unsigned int v8 = v7 & 0xFFFFFFFE;
            }
            if (v8)
            {
              int v16 = 136315138;
              CFArrayRef v17 = "vaemShouldRequestOwnershipForTheFirstTime";
              _os_log_send_and_compose_impl();
            }
            char v9 = 1;
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_17;
          }
        }
        char v9 = 1;
LABEL_17:
        uint64_t result = cmsmDoesPortMatchCurrentEndpointID(v5);
        if (result)
        {
          if (dword_1E9359ED0)
          {
            unsigned int v15 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            CFIndex v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v11 = v15;
            if (os_log_type_enabled(v10, type)) {
              unsigned int v12 = v11;
            }
            else {
              unsigned int v12 = v11 & 0xFFFFFFFE;
            }
            if (v12)
            {
              int v16 = 136315138;
              CFArrayRef v17 = "vaemShouldRequestOwnershipForTheFirstTime";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else if (v9)
        {
          continue;
        }
        uint64_t result = vaeRequestOwnershipOnBTPort(valuePtr);
      }
    }
  }
  return result;
}

uint64_t vaemIsPortPresentInConnectedOutputPorts(uint64_t a1)
{
  return [(id)qword_1E9358B00 containsObject:a1];
}

uint64_t FigVAEndpointManagerHandleAvailableEndpointsChanged()
{
  return cmsmUpdatePickableRouteDescriptionLists(0);
}

uint64_t FigVAEndpointManagerCreate(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    __asm { FMOV            V0.2S, #1.0 }
    qword_1E9358B98 = _D0;
    FigVAEndpointManagerGetClassID();
    uint64_t v9 = CMDerivedObjectCreate();
    if (v9) {
      return v9;
    }
    *a3 = 0;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (a2) {
      CFTypeRef v11 = CFRetain(a2);
    }
    else {
      CFTypeRef v11 = 0;
    }
    *uint64_t DerivedStorage = v11;
    qword_1E9358AF0 = (uint64_t)dispatch_semaphore_create(0);
    if (MX_FeatureFlags_IsStartupSequenceChangeEnabled())
    {
      vaemGetVirtualAudioPlugin();
      *(void *)&long long inAddress = *(void *)"niavbolg";
      DWORD2(inAddress) = 0;
      outData.AudioObjectPropertySelector mSelector = 1;
      ioDataSize[0] = 4;
      if (dword_1E9359ED0)
      {
        v65[0] = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend(MEMORY[0x1E4F1C9C8], "now", v54, v55);
      OSStatus PropertyData = AudioObjectGetPropertyData(dword_1E9359BA0, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, ioDataSize, &outData);
      if (PropertyData | outData.mSelector)
      {
        v65[0] = 0;
        CFArrayRef v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (dword_1E9359ED0)
      {
        v65[0] = 0;
        unsigned int v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      vaemUpdateCurrentOutputRoutesInfo();
    }
    outData.mElement = 0;
    *(void *)&outData.AudioObjectPropertySelector mSelector = *(void *)"diudbolg";
    long long inAddress = xmmword_194EDE990;
    long long v72 = unk_194EDE9A0;
    UInt32 v70 = 32;
    if (MX_FeatureFlags_IsStartupSequenceChangeEnabled())
    {
      *(void *)UInt32 ioDataSize = 0x1EE5EBF48;
      v65[0] = 0;
      *(void *)&long long inAddress = ioDataSize;
      *(void *)&long long v72 = v65;
      if (AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress))
      {
        int v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        CFRange v21 = +[MXSessionManager sharedInstance];
        [(MXSessionManager *)v21 setDefaultVADID:v65[0]];
      }
    }
    else
    {
      vaemAddAudioDevicesChangedListener();
      if (![+[MXSessionManager sharedInstance] defaultVADID])
      {
        dispatch_time_t v17 = dispatch_time(0, 9000000000);
        if (dword_1E9359ED0)
        {
          ioDataSize[0] = 0;
          LOBYTE(v65[0]) = 0;
          uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          UInt32 v19 = ioDataSize[0];
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v20 = v19;
          }
          else {
            unsigned int v20 = v19 & 0xFFFFFFFE;
          }
          if (v20)
          {
            *(_DWORD *)UInt32 outDataSize = 136315138;
            *(void *)&outDataSize[4] = "vaemGetVirtualAudioDeviceIDs";
            LODWORD(v55) = 12;
            long long v54 = outDataSize;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        intptr_t v22 = dispatch_semaphore_wait((dispatch_semaphore_t)qword_1E9358AF0, v17);
        if (qword_1E9358AF0)
        {
          dispatch_release((dispatch_object_t)qword_1E9358AF0);
          qword_1E9358AF0 = 0;
        }
        if (v22)
        {
          ioDataSize[0] = 0;
          LOBYTE(v65[0]) = 0;
          uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          UInt32 v24 = ioDataSize[0];
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v25 = v24;
          }
          else {
            unsigned int v25 = v24 & 0xFFFFFFFE;
          }
          if (v25)
          {
            *(_DWORD *)UInt32 outDataSize = 136315138;
            *(void *)&outDataSize[4] = "vaemGetVirtualAudioDeviceIDs";
            LODWORD(v55) = 12;
            long long v54 = outDataSize;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (![+[MXSessionManager sharedInstance] defaultVADID])
        {
          ioDataSize[0] = 0;
          LOBYTE(v65[0]) = 0;
          unsigned int v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          UInt32 v27 = ioDataSize[0];
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v28 = v27;
          }
          else {
            unsigned int v28 = v27 & 0xFFFFFFFE;
          }
          if (v28)
          {
            *(_DWORD *)UInt32 outDataSize = 136315138;
            *(void *)&outDataSize[4] = "vaemGetVirtualAudioDeviceIDs";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      LODWORD(v76) = 0;
      uint64_t v75 = *(void *)"#vedbolg";
      AudioObjectRemovePropertyListener(1u, (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemAudioDevicesChanged, 0);
    }
    uint64_t v75 = 0x1EE5EFAA8;
    unsigned int v68 = 0;
    *(void *)&long long inAddress = &v75;
    DWORD2(inAddress) = 8;
    *(void *)&long long v72 = &v68;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    unsigned int v29 = +[MXSessionManager sharedInstance];
    [(MXSessionManager *)v29 setSpeechDetectionVADID:v68];
    *(void *)UInt32 outDataSize = 0x1EE5EBF68;
    unsigned int v67 = 0;
    *(void *)&long long inAddress = outDataSize;
    DWORD2(inAddress) = 8;
    *(void *)&long long v72 = &v67;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    uint64_t v30 = +[MXSessionManager sharedInstance];
    [(MXSessionManager *)v30 setSystemSoundLocalVADID:v67];
    *(void *)UInt32 ioDataSize = 0x1EE5EBF88;
    unsigned int v66 = 0;
    *(void *)&long long inAddress = ioDataSize;
    DWORD2(inAddress) = 8;
    *(void *)&long long v72 = &v66;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    long long v31 = +[MXSessionManager sharedInstance];
    [(MXSessionManager *)v31 setSystemSoundRemoteVADID:v66];
    *(void *)uint64_t v65 = 0x1EE5EBFA8;
    unsigned int v64 = 0;
    *(void *)&long long inAddress = v65;
    DWORD2(inAddress) = 8;
    *(void *)&long long v72 = &v64;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    CFIndex v32 = +[MXSessionManager sharedInstance];
    [(MXSessionManager *)v32 setSpeakerAlertVADID:v64];
    *(void *)os_log_type_t type = 0x1EE5EFAC8;
    unsigned int v62 = 0;
    *(void *)&long long inAddress = type;
    DWORD2(inAddress) = 8;
    *(void *)&long long v72 = &v62;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    int v33 = +[MXSessionManager sharedInstance];
    [(MXSessionManager *)v33 setDecoupledInputVADID:v62];
    *(void *)unsigned int v61 = 0x1EE5EFB08;
    unsigned int v60 = 0;
    *(void *)&long long inAddress = v61;
    DWORD2(inAddress) = 8;
    *(void *)&long long v72 = &v60;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    CFTypeRef v34 = +[MXSessionManager sharedInstance];
    [(MXSessionManager *)v34 setSiriOutputVADID:v60];
    uint64_t v59 = 0x1EE5EFAE8;
    unsigned int v58 = 0;
    *(void *)&long long inAddress = &v59;
    DWORD2(inAddress) = 8;
    *(void *)&long long v72 = &v58;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    unsigned int v35 = +[MXSessionManager sharedInstance];
    [(MXSessionManager *)v35 setActuatorVADID:v58];
    uint64_t v57 = 0x1EE5EFB68;
    unsigned int v56 = 0;
    *(void *)&long long inAddress = &v57;
    DWORD2(inAddress) = 8;
    *(void *)&long long v72 = &v56;
    DWORD2(v72) = 4;
    AudioObjectGetPropertyData(1u, &outData, 0, 0, &v70, &inAddress);
    int v36 = +[MXSessionManager sharedInstance];
    [(MXSessionManager *)v36 setLowLatencyVADID:v56];
    if (!MX_FeatureFlags_IsStartupSequenceChangeEnabled())
    {
      vaemGetVirtualAudioPlugin();
      vaemUpdateCurrentOutputRoutesInfo();
    }
    uint64_t v75 = (uint64_t)vaemVADSerializationListener;
    uint64_t v76 = 0;
    *(void *)&long long inAddress = 0x676C6F6273727A6CLL;
    DWORD2(inAddress) = 0;
    CMSMVAUtility_AudioObjectSetPropertyData();
    *(void *)UInt32 outDataSize = vaemReceiverWillBeUsedListener;
    *(void *)&outDataSize[8] = 0;
    *(void *)&long long inAddress = 0x676C6F6272776275;
    DWORD2(inAddress) = 0;
    CMSMVAUtility_AudioObjectSetPropertyData();
    *(void *)&dword_1E9359B84 = 0x696D646663736176;
    byte_1E9358B58 = 0;
    qword_1E9358B70 = 0;
    qword_1E9358B28 = 0;
    dword_1E9358BC4 = 0;
    qword_1E9358B00 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA80]);
    if (dword_1E9359BA0)
    {
      DWORD2(inAddress) = 0;
      *(void *)&long long inAddress = *(void *)"strpbolg";
      OSStatus v37 = AudioObjectAddPropertyListener(dword_1E9359BA0, (const AudioObjectPropertyAddress *)&inAddress, (AudioObjectPropertyListenerProc)vaemConnectedPortsPropertyListener, 0);
      if (!v37) {
        goto LABEL_58;
      }
      OSStatus v38 = v37;
      outData.AudioObjectPropertySelector mSelector = 0;
      LOBYTE(ioDataSize[0]) = 0;
      uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      AudioObjectPropertySelector mSelector = outData.mSelector;
      if (os_log_type_enabled(v39, ioDataSize[0])) {
        unsigned int v41 = mSelector;
      }
      else {
        unsigned int v41 = mSelector & 0xFFFFFFFE;
      }
      if (v41)
      {
        *(_DWORD *)UInt32 outDataSize = 136315394;
        *(void *)&outDataSize[4] = "vaemAddConnectedPortsListener";
        *(_WORD *)&outDataSize[12] = 1024;
        *(_DWORD *)&outDataSize[14] = v38;
        _os_log_send_and_compose_impl();
      }
    }
    else
    {
      LODWORD(inAddress) = 0;
      LOBYTE(outData.mSelector) = 0;
      uint64_t v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v43 = inAddress;
      if (os_log_type_enabled(v42, outData.mSelector)) {
        unsigned int v44 = v43;
      }
      else {
        unsigned int v44 = v43 & 0xFFFFFFFE;
      }
      if (v44)
      {
        *(_DWORD *)UInt32 outDataSize = 136315138;
        *(void *)&outDataSize[4] = "vaemAddConnectedPortsListener";
        _os_log_send_and_compose_impl();
      }
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_58:
    byte_1E9358B88 = vaemHeadphoneJackIsConnected(0);
    byte_1E9358B89 = vaemHeadphoneJackHasInput(0);
    byte_1E9358B8A = vaemGetVADPortIDFromVADPortType(1886154613) != 0;
    *(_DWORD *)UInt32 outDataSize = 0;
    uint64_t v75 = 0x676C6F6273706374;
    LODWORD(v76) = 0;
    if (!AudioObjectGetPropertyDataSize(dword_1E9359BA0, (const AudioObjectPropertyAddress *)&v75, 0, 0, (UInt32 *)outDataSize))
    {
      long long v45 = (char *)malloc_type_calloc(1uLL, *(unsigned int *)outDataSize, 0x918471FDuLL);
      if (!AudioObjectGetPropertyData(dword_1E9359BA0, (const AudioObjectPropertyAddress *)&v75, 0, 0, (UInt32 *)outDataSize, v45))
      {
        unsigned int v47 = *(_DWORD *)outDataSize;
        unsigned int v48 = *(_DWORD *)outDataSize >> 2;
        *(_DWORD *)outDataSize >>= 2;
        if (v47 <= 3)
        {
          free(v45);
          byte_1E9358B68 = 0;
          goto LABEL_63;
        }
        uint64_t v49 = 0;
        int v50 = 0;
        if (v48 <= 1) {
          unsigned int v48 = 1;
        }
        uint64_t v51 = 4 * v48;
        do
        {
          int v52 = *(_DWORD *)&v45[v49];
          if (v52 == 1668313666 || v52 == 1668309362) {
            int v50 = 1;
          }
          v49 += 4;
        }
        while (v51 != v49);
        free(v45);
        byte_1E9358B68 = v50;
        if (!v50) {
          goto LABEL_63;
        }
LABEL_62:
        byte_1E9358B69 = vaemSystemHasAudioInputDeviceForRouteConfiguration(1668309362, 1768776806);
        byte_1E9358B6A = vaemSystemHasAudioInputDeviceForRouteConfiguration(1668313666, 1768776806);
LABEL_63:
        byte_1E9358B8B = 0;
        vaemUpdateConnectedOutputPortsList();
        cmsmUpdatePickableRouteDescriptionLists(1);
        vaemAddVADAvailableSampleRatesListener(1);
        vaemAddVADCurrentSampleRateListener(1);
        vaemAddVADCurrentDeviceBufferSizeListener(1);
        LODWORD(v76) = 0;
        uint64_t v75 = 0;
        if ([+[MXSessionManager sharedInstance] defaultVADID])
        {
          uint64_t v75 = 0x6F75747076637370;
          LODWORD(v76) = 0;
          AudioObjectAddPropertyListener([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemCurrentRouteHasVolumeControlListener, 0);
        }
        vaemCurrentRouteHasVolumeControlListenerGuts();
        LODWORD(v76) = 0;
        uint64_t v75 = 0;
        if ([+[MXSessionManager sharedInstance] defaultVADID])
        {
          uint64_t v75 = 0x696E707476637370;
          LODWORD(v76) = 0;
          AudioObjectAddPropertyListener([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemCurrentRouteHasVolumeControlListener, 0);
        }
        vaemCurrentRouteHasInputGainControlListenerGuts();
        vaemAddAvailableVirtualFormatsListener();
        LODWORD(v76) = 0;
        uint64_t v75 = 0;
        if ([+[MXSessionManager sharedInstance] defaultVADID])
        {
          uint64_t v75 = 0x696E707473726373;
          LODWORD(v76) = 0;
          AudioObjectAddPropertyListener([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemInputSourcesListener, 0);
        }
        CMSMNotificationUtility_PostInputDataSourcesDidChange();
        LODWORD(v76) = 0;
        uint64_t v75 = 0;
        if ([+[MXSessionManager sharedInstance] defaultVADID])
        {
          uint64_t v75 = 0x6F75747064737473;
          LODWORD(v76) = 0;
          AudioObjectAddPropertyListener([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemOutputDestinationsListener, 0);
        }
        CMSMNotificationUtility_PostOutputDataDestinationsDidChange();
        LODWORD(v76) = 0;
        uint64_t v75 = 0;
        if ([+[MXSessionManager sharedInstance] defaultVADID])
        {
          uint64_t v75 = 0x696E7074766F6C6DLL;
          LODWORD(v76) = 0;
          AudioObjectAddPropertyListener([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v75, (AudioObjectPropertyListenerProc)vaemInputGainScalarListener, 0);
        }
        CMSMNotificationUtility_PostInputGainScalarDidChange();
        return 0;
      }
      free(v45);
    }
    byte_1E9358B68 = 1;
    goto LABEL_62;
  }
  return FigSignalErrorAt();
}

uint64_t vaemGetVirtualAudioPlugin()
{
  v5[22] = *MEMORY[0x1E4F143B8];
  v5[0] = @"com.apple.audio.CoreAudio.VirtualAudio";
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"ibipbolg";
  inAddress.mElement = 0;
  outData[0] = v5;
  outData[1] = 8;
  _OWORD outData[2] = &dword_1E9359BA0;
  _OWORD outData[3] = 4;
  UInt32 ioDataSize = 32;
  uint64_t result = AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &ioDataSize, outData);
  if (result || !dword_1E9359BA0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void vaemUpdateCurrentOutputRoutesInfo()
{
  CFArrayRef v0 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(dword_1E9359B84, dword_1E9359B88, 0, 0, 0, 0x1EE5EBF48);
  MEMORY[0x199716E90](gCMSM);
  if (v0) {
    int Count = CFArrayGetCount(v0);
  }
  else {
    int Count = 0;
  }
  CMSMUtility_UpdateCurrentRoutesInfo(0, v0, 0, Count);
  MEMORY[0x199716EA0](gCMSM);
  if ((dword_1E9359ED0 & 0x20) != 0) {
    CMSMUtility_GetNumberOfCurrentOutputPorts();
  }
  if (v0)
  {
    CFRelease(v0);
  }
}

void vaemUpdateConnectedOutputPortsList()
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  obuint64_t j = (id)vaemCopyConnectedPortsForPortTypeAndScope(0, 0x6F757470u);
  if (![obj count])
  {

    return;
  }
  MEMORY[0x199716E90](gCMSM);
  id v95 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v1 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v112 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  CFIndex v3 = (void *)[(id)qword_1E9358B00 allObjects];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v112 objects:v125 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v113;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v113 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v112 + 1) + 8 * i);
        if (([obj containsObject:v8] & 1) == 0)
        {
          [v1 addObject:v8];
          [(id)qword_1E9358B00 removeObject:v8];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v112 objects:v125 count:16];
    }
    while (v5);
  }
  CFArrayRef theArray = (const __CFArray *)v1;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  uint64_t v9 = v0;
  id v96 = v0;
  id v97 = v2;
  uint64_t v99 = [obj countByEnumeratingWithState:&v108 objects:v124 count:16];
  if (v99)
  {
    uint64_t v98 = *(void *)v109;
    do
    {
      for (uint64_t j = 0; j != v99; ++j)
      {
        if (*(void *)v109 != v98) {
          objc_enumerationMutation(obj);
        }
        CFTypeRef v11 = *(void **)(*((void *)&v108 + 1) + 8 * j);
        uint64_t v12 = [v11 unsignedIntValue];
        int v13 = (const void *)vaeCopyNameForPort(v12);
        CFTypeRef v14 = vaeCopyDeviceIdentifierFromVADPort(v12);
        unsigned int PortTypeFromPortID = 0;
        unsigned int PortTypeFromPortID = vaeGetPortTypeFromPortID(v12);
        *(_DWORD *)uint64_t v107 = 0;
        int ConnectionTypeForPort = vaeGetConnectionTypeForPort(v12);
        *(_DWORD *)uint64_t v107 = ConnectionTypeForPort;
        if (ConnectionTypeForPort != 1885544823) {
          goto LABEL_19;
        }
        if (FigCFEqual())
        {
          int ConnectionTypeForPort = *(_DWORD *)v107;
LABEL_19:
          char v16 = [(id)qword_1E9358B00 containsObject:v11];
          if (ConnectionTypeForPort == 1885566825)
          {
            if ((v16 & 1) == 0)
            {
              [v9 addObject:v11];
              if (dword_1E9359ED0)
              {
                int v106 = 0;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_34:
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                id v2 = v97;
                goto LABEL_35;
              }
            }
          }
          else
          {
            if (dword_1E9359ED0) {
              char v18 = v16;
            }
            else {
              char v18 = 1;
            }
            if ((v18 & 1) == 0)
            {
              int v106 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              UInt32 v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          goto LABEL_35;
        }
        if (([(id)qword_1E9358B00 containsObject:v11] & 1) == 0)
        {
          if (!MX_FeatureFlags_IsOnenessEnabled() || PortTypeFromPortID != 1885565807) {
            [v95 addObject:v11];
          }
          if (dword_1E9359ED0)
          {
            int v106 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            unsigned int v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
            goto LABEL_34;
          }
        }
LABEL_35:
        if ((objc_msgSend((id)qword_1E9358B00, "containsObject:", v11, v88, v91) & 1) == 0)
        {
          [(id)qword_1E9358B00 addObject:v11];
          [v2 addObject:v11];
        }
        if (v13) {
          CFRelease(v13);
        }
        if (v14) {
          CFRelease(v14);
        }
      }
      uint64_t v99 = [obj countByEnumeratingWithState:&v108 objects:v124 count:16];
    }
    while (v99);
  }
  if (!dword_1E9359BB0)
  {
    if (obj && (CFIndex Count = CFArrayGetCount((CFArrayRef)obj), Count >= 1))
    {
      CFIndex v22 = Count;
      CFIndex v23 = 0;
      int v24 = 0;
      CFArrayRef v25 = (const __CFArray *)obj;
      do
      {
        valuePtr[0] = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v25, v23);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, valuePtr);
        CFTypeRef v27 = vaeCopyDeviceIdentifierFromVADPort(valuePtr[0]);
        if (v27)
        {
          unsigned int v28 = v27;
          if (FigCFEqual())
          {
            unsigned int v29 = (const void *)vaeCopyNameForPort(valuePtr[0]);
            if (FigCFEqual()) {
              int v24 = valuePtr[0];
            }
            if (v29) {
              CFRelease(v29);
            }
          }
          CFRelease(v28);
        }
        ++v23;
        CFArrayRef v25 = (const __CFArray *)obj;
      }
      while (v22 != v23);
    }
    else
    {
      int v24 = 0;
    }
    dword_1E9359BB0 = v24;
    uint64_t v9 = v96;
  }
  uint64_t v30 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (theArray && CFArrayGetCount(theArray) >= 1)
  {
    CFIndex v31 = 0;
    CFAllocatorRef v32 = *v30;
    do
    {
      int v118 = 0;
      CFNumberRef v33 = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v31);
      CFNumberGetValue(v33, kCFNumberSInt32Type, &v118);
      valuePtr[0] = v118;
      if (qword_1E9358AF8)
      {
        CFNumberRef v34 = CFNumberCreate(v32, kCFNumberSInt32Type, valuePtr);
        CFDictionaryGetValue((CFDictionaryRef)qword_1E9358AF8, v34);
        FigVAEndpointDisassociatePort();
        CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1E9358AF8, v34);
        if (v34) {
          CFRelease(v34);
        }
      }
      ++v31;
    }
    while (v31 < CFArrayGetCount(theArray));
  }
  if (v2)
  {
    if (CFArrayGetCount((CFArrayRef)v2) >= 1)
    {
      CFIndex v35 = 0;
      do
      {
        valuePtr[0] = 0;
        CFNumberRef v36 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v2, v35);
        CFNumberGetValue(v36, kCFNumberSInt32Type, valuePtr);
        vaemAddToPortEndpointCache(valuePtr[0]);
        ++v35;
      }
      while (v35 < CFArrayGetCount((CFArrayRef)v2));
    }
    CFIndex v37 = CFArrayGetCount((CFArrayRef)v2);
    if (v37 >= 1)
    {
      CFIndex v38 = v37;
      CFIndex v39 = 0;
      while (1)
      {
        uint64_t PortAtIndex = CMSMVAUtility_GetPortAtIndex((const __CFArray *)v2, v39);
        int v41 = vaeGetPortTypeFromPortID(PortAtIndex);
        int v42 = v41;
        if (v41 == 1885892674) {
          break;
        }
        if (v41 == 1885892706) {
          goto LABEL_94;
        }
LABEL_113:
        ++v39;
        uint64_t v9 = v96;
        id v2 = v97;
        if (v38 == v39) {
          goto LABEL_114;
        }
      }
      if (vaeDoesPortSupportMultipleConnections(PortAtIndex))
      {
        vaeAddOwnsSharedAudioConnectionListenerForPort(PortAtIndex);
        vaeAddSharedAudioConnectionFailedListenerForPort(PortAtIndex);
        int v43 = 1;
      }
      else
      {
        int v43 = 0;
      }
      if (vaeDoesBTPortSupportInEarDetection(PortAtIndex))
      {
        if (dword_1E9359ED0)
        {
          unsigned int PortTypeFromPortID = 0;
          v107[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v45 = PortTypeFromPortID;
          if (os_log_type_enabled(v44, v107[0])) {
            unsigned int v46 = v45;
          }
          else {
            unsigned int v46 = v45 & 0xFFFFFFFE;
          }
          if (v46)
          {
            int v118 = 136315394;
            __int16 v119 = "vaemUpdatePortListeners";
            __int16 v120 = 1024;
            int v121 = PortAtIndex;
            LODWORD(v91) = 18;
            unsigned int v88 = &v118;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        vaeAddInEarBluetoothStatusListenerForPort(PortAtIndex);
        cmsmInEarBluetoothStatusListener(PortAtIndex);
        if (CMSMVAUtility_ShouldBTPortBeTreatedAsInEar(PortAtIndex)) {
          int v43 = 1;
        }
        if (vaeIsInEarStatusTrueForBTPort(PortAtIndex)) {
          cmsmUpdateInEarBasedPlaybackState(0, 1, 0);
        }
      }
      if (v43) {
        CMSMNotificationUtility_PostPreferredExternalRouteDidChange();
      }
LABEL_94:
      vaeAddBluetoothListeningModeListenerForPort(PortAtIndex);
      if (vaeDoesPortSupportHeadTrackedSpatialAudio(PortAtIndex))
      {
        vaeAddBluetoothSpatialAudioEnabledListenerForPort(PortAtIndex);
        vaeAddBluetoothSpatialAudioUserEnableFeatureListenerForPort(PortAtIndex);
        vaeAddBluetoothSpatialAudioModeListenerForPort(PortAtIndex);
      }
      if (vaeIsPortBluetoothShareable(PortAtIndex))
      {
        if (dword_1E9359ED0)
        {
          unsigned int PortTypeFromPortID = 0;
          v107[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v48 = PortTypeFromPortID;
          if (os_log_type_enabled(v47, v107[0])) {
            unsigned int v49 = v48;
          }
          else {
            unsigned int v49 = v48 & 0xFFFFFFFE;
          }
          if (v49)
          {
            int v118 = 136315394;
            __int16 v119 = "vaemUpdatePortListeners";
            __int16 v120 = 1024;
            int v121 = PortAtIndex;
            LODWORD(v91) = 18;
            unsigned int v88 = &v118;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        vaemAddVADDeviceVolumeChangeListener(PortAtIndex);
        if (v42 == 1885892674)
        {
          if (dword_1E9359ED0)
          {
            unsigned int PortTypeFromPortID = 0;
            v107[0] = OS_LOG_TYPE_DEFAULT;
            int v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v51 = PortTypeFromPortID;
            if (os_log_type_enabled(v50, v107[0])) {
              unsigned int v52 = v51;
            }
            else {
              unsigned int v52 = v51 & 0xFFFFFFFE;
            }
            if (v52)
            {
              int v118 = 136315394;
              __int16 v119 = "vaemUpdatePortListeners";
              __int16 v120 = 1024;
              int v121 = PortAtIndex;
              LODWORD(v91) = 18;
              unsigned int v88 = &v118;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          vaeAddBluetoothSharingAggregationListenerForPort(PortAtIndex);
        }
      }
      goto LABEL_113;
    }
  }
LABEL_114:
  CFArrayRef v53 = (const __CFArray *)objc_msgSend((id)qword_1E9358B00, "allObjects", v88, v91);
  if (v53)
  {
    CFArrayRef v54 = v53;
    CFIndex v55 = CFArrayGetCount(v53);
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v57 = theArray;
    if (v55 >= 1)
    {
      for (CFIndex k = 0; k != v55; ++k)
      {
        AudioObjectID v59 = CMSMVAUtility_GetPortAtIndex(v54, k);
        CFTypeRef v60 = vaeCopyDeviceIdentifierFromVADPort(v59);
        if (v60)
        {
          unsigned int v61 = v60;
          CFArrayAppendValue(Mutable, v60);
          CFRelease(v61);
        }
      }
    }
  }
  else
  {
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v57 = theArray;
  }
  MXBluetoothServices_RemoveDisconnectedDeviceIDs(Mutable);
  unsigned int v62 = v95;
  if (Mutable) {
    CFRelease(Mutable);
  }
  MEMORY[0x199716EA0](gCMSM);
  if (vaemUpdateSharedAudioRouteState(v57, (CFArrayRef)v2))
  {
    if (CMSM_IDSConnection_IsTimerForRemotePlayingInfoReplyExpired())
    {
      if (dword_1E9359ED0)
      {
        unsigned int PortTypeFromPortID = 0;
        v107[0] = OS_LOG_TYPE_DEFAULT;
        int v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v64 = PortTypeFromPortID;
        if (os_log_type_enabled(v63, v107[0])) {
          unsigned int v65 = v64;
        }
        else {
          unsigned int v65 = v64 & 0xFFFFFFFE;
        }
        if (v65)
        {
          int v118 = 136315138;
          __int16 v119 = "vaemUpdateConnectedOutputPortsList";
          LODWORD(v92) = 12;
          uint64_t v89 = &v118;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v72 = (CFIndex)v2;
    }
    else if (CMSMDeviceState_ItsAnAppleWatch() || !byte_1E9359C30)
    {
      if (CMSMDeviceState_ItsAnAppleWatch() || CMSM_IDSConnection_IsPairedToAnotherDevice())
      {
        if (CMSM_IDSConnection_IsNearbyPairedDevicePresent())
        {
          if (dword_1E9359ED0)
          {
            unsigned int PortTypeFromPortID = 0;
            v107[0] = OS_LOG_TYPE_DEFAULT;
            int v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v70 = PortTypeFromPortID;
            if (os_log_type_enabled(v69, v107[0])) {
              unsigned int v71 = v70;
            }
            else {
              unsigned int v71 = v70 & 0xFFFFFFFE;
            }
            if (v71)
            {
              int v118 = 136315138;
              __int16 v119 = "vaemUpdateConnectedOutputPortsList";
              LODWORD(v92) = 12;
              uint64_t v89 = &v118;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSM_IDSConnection_DelaySharedAudioRoutingUntilRemoteInitialPlayingInfoIsReceived(v2);
        }
        goto LABEL_154;
      }
      if (dword_1E9359ED0)
      {
        unsigned int PortTypeFromPortID = 0;
        v107[0] = OS_LOG_TYPE_DEFAULT;
        CFIndex v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v86 = PortTypeFromPortID;
        if (os_log_type_enabled(v85, v107[0])) {
          unsigned int v87 = v86;
        }
        else {
          unsigned int v87 = v86 & 0xFFFFFFFE;
        }
        if (v87)
        {
          int v118 = 136315138;
          __int16 v119 = "vaemUpdateConnectedOutputPortsList";
          LODWORD(v92) = 12;
          uint64_t v89 = &v118;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v72 = (CFIndex)v2;
    }
    else
    {
      if (dword_1E9359ED0)
      {
        unsigned int PortTypeFromPortID = 0;
        v107[0] = OS_LOG_TYPE_DEFAULT;
        unsigned int v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v67 = PortTypeFromPortID;
        if (os_log_type_enabled(v66, v107[0])) {
          unsigned int v68 = v67;
        }
        else {
          unsigned int v68 = v67 & 0xFFFFFFFE;
        }
        if (v68)
        {
          int v118 = 136315138;
          __int16 v119 = "vaemUpdateConnectedOutputPortsList";
          LODWORD(v92) = 12;
          uint64_t v89 = &v118;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFIndex v72 = (CFIndex)v2;
    }
    vaemTakeOwnershipOnSharedAudioRoute(v72);
  }
LABEL_154:
  if (objc_msgSend(v95, "count", v89, v92)) {
    FigRoutingManagerNewWirelessPortsAdded(v95);
  }
  if ([v9 count]) {
    FigRoutingManagerNewWiredPortsAdded(v9);
  }
  unsigned int PortOfTypeInArray = CMSMVAUtility_GetPortOfTypeInArray(1886614639, (CFArrayRef)v2);
  unsigned int v74 = CMSMVAUtility_GetPortOfTypeInArray(1886745455, (CFArrayRef)obj);
  if (v74 && PortOfTypeInArray)
  {
    unsigned int v75 = v74;
    unsigned int PortTypeFromPortID = 0;
    v107[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v77 = PortTypeFromPortID;
    if (os_log_type_enabled(v76, v107[0])) {
      unsigned int v78 = v77;
    }
    else {
      unsigned int v78 = v77 & 0xFFFFFFFE;
    }
    if (v78)
    {
      int v118 = 136315650;
      __int16 v119 = "vaemUpdateConnectedOutputPortsList";
      __int16 v120 = 1024;
      int v121 = v75;
      __int16 v122 = 1024;
      unsigned int v123 = PortOfTypeInArray;
      LODWORD(v93) = 24;
      uint64_t v90 = &v118;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    unsigned int v62 = v95;
    uint64_t v9 = v96;
  }
  CMSMVAUtility_RouteDefaultVADToCarPlayIfNecessary((CFArrayRef)v2);
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  uint64_t v79 = [v2 countByEnumeratingWithState:&v101 objects:v117 count:16];
  if (v79)
  {
    uint64_t v80 = v79;
    uint64_t v81 = *(void *)v102;
    while (2)
    {
      for (uint64_t m = 0; m != v80; ++m)
      {
        if (*(void *)v102 != v81) {
          objc_enumerationMutation(v2);
        }
        if (MXBluetoothServices_IsPortBTManaged(objc_msgSend(*(id *)(*((void *)&v101 + 1) + 8 * m), "unsignedIntValue", v90, v93), 1))
        {
          if (MX_FeatureFlags_IsSmartRoutingOnActivationEnabled()) {
            id v83 = [+[MXSessionManager sharedInstance] copyHighestPriorityActiveSession:0x1EE5EBF48 deviceIdentifier:0];
          }
          else {
            id v83 = CMSM_CopyHighestPriorityLocalPlayingSession(1);
          }
          int v84 = v83;
          if (v83) {
            CMSUtility_RouteToPreferredRouteIfRequired(v83, 0, 9);
          }

          goto LABEL_181;
        }
      }
      uint64_t v80 = [v2 countByEnumeratingWithState:&v101 objects:v117 count:16];
      if (v80) {
        continue;
      }
      break;
    }
  }
LABEL_181:
  FigPredictedRouting_UpdatePredictedRoute(1);
  [+[MXSessionManager sharedInstance] updateCachedContinuityScreenOutputPortID];
}

void __vaemStartIgnoreOutputVolumeScalarChangesTimer_block_invoke()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!qword_1E9358AD8)
  {
    if (!dword_1E9359ED0) {
      return;
    }
    UInt32 ioDataSize = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_21:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
  if (dword_1E9359ED0)
  {
    id v0 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemCancelOutputVolumeChangeTimer();
  float v2 = *(float *)&dword_1E9358ACC;
  int v3 = gVAEM;
  uint64_t v4 = dword_1E9358AD0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F757470766F6C6DLL;
  inAddress.mElement = dword_1E9358AD0;
  UInt32 ioDataSize = 4;
  float outData = 0.0;
  AudioObjectGetPropertyData(gVAEM, &inAddress, 0, 0, &ioDataSize, &outData);
  float v5 = outData;
  if (vabds_f32(v2, outData) <= 0.025)
  {
    if (!dword_1E9359ED0) {
      return;
    }
    UInt32 ioDataSize = 0;
    uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    UInt32 v10 = ioDataSize;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = v10 & 0xFFFFFFFE;
    }
    if (v11)
    {
      float outData = 4.8152e-34;
      CFTypeRef v14 = "vaemIgnoreOutputVolumeChangesTimerDidFinish";
      __int16 v15 = 1024;
      int v16 = v3;
      __int16 v17 = 1024;
      int v18 = v4;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_21;
  }
  if (dword_1E9359ED0)
  {
    UInt32 ioDataSize = 0;
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    UInt32 v7 = ioDataSize;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v7 & 0xFFFFFFFE;
    }
    if (v8)
    {
      float outData = 4.8152e-34;
      CFTypeRef v14 = "vaemIgnoreOutputVolumeChangesTimerDidFinish";
      __int16 v15 = 1024;
      int v16 = v3;
      __int16 v17 = 1024;
      int v18 = v4;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemVADDeviceVolumeChangeListenerGuts_f(v4, 0, v5);
}

void vaemVADDeviceVolumeChangeListenerGuts_f(uint64_t a1, int a2, float a3)
{
  uint64_t PortAtIndex = a1;
  if (!a1)
  {
    CFArrayRef v6 = (const __CFArray *)vaemCopyActivePortsListForRouteConfigurationScopeAndDevice(0, 0, 0, 0, 0, 0x1EE5EBF48);
    if (!v6) {
      return;
    }
    CFArrayRef v7 = v6;
    if (!CFArrayGetCount(v6)) {
      goto LABEL_10;
    }
    uint64_t PortAtIndex = CMSMVAUtility_GetPortAtIndex(v7, 0);
    CFRelease(v7);
  }
  id v8 = vaeCopyFigOutputDeviceNameFromVADPort(PortAtIndex);
  CFTypeRef v9 = vaeCopyDeviceIdentifierFromVADPort(PortAtIndex);
  CFArrayRef v7 = (const __CFArray *)vaeCopyRouteSubtypeFromVADPort(PortAtIndex);
  uint64_t v10 = getpid();
  MXSMPerformVolumeOperation(0xEu, 0, v8, v9, (const __CFString *)v7, a2, v10, 0, a3, 0.0, 0.0, 0, 0, 0, 0, 0);
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v7)
  {
LABEL_10:
    CFRelease(v7);
  }
}

void __vaemVADDeviceVolumeChangeListener_block_invoke(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (CMSMVAUtility_IsBluetoothSharingSessionEnabled(0))
  {
    unint64_t v2 = *(unsigned int *)(a1 + 40);
    if (v2)
    {
      uint64_t v3 = 0;
      for (unint64_t i = 0; i < v2; ++i)
      {
        uint64_t v5 = *(void *)(a1 + 32);
        if (*(_DWORD *)(v5 + v3) == 1987013741)
        {
          uint64_t v6 = v5 + v3;
          if (*(_DWORD *)(v6 + 4) == 1869968496)
          {
            AudioObjectPropertyElement v7 = *(_DWORD *)(v6 + 8);
            if (v7)
            {
              AudioObjectID v8 = *(_DWORD *)(a1 + 44);
              *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F757470766F6C6DLL;
              inAddress.mElement = v7;
              UInt32 ioDataSize = 4;
              int outData = 0;
              AudioObjectGetPropertyData(v8, &inAddress, 0, 0, &ioDataSize, &outData);
              float v9 = *(float *)&outData;
              AudioObjectID v10 = *(_DWORD *)(a1 + 44);
              *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F757470766F6C6DLL;
              inAddress.mElement = 0;
              UInt32 ioDataSize = 4;
              int outData = 0;
              AudioObjectGetPropertyData(v10, &inAddress, 0, 0, &ioDataSize, &outData);
              float v11 = *(float *)&outData;
              CFTypeRef v12 = vaeCopyDeviceIdentifierFromVADPort(v7);
              if (dword_1E9359ED0)
              {
                UInt32 ioDataSize = 0;
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                UInt32 v14 = ioDataSize;
                if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v15 = v14;
                }
                else {
                  unsigned int v15 = v14 & 0xFFFFFFFE;
                }
                if (v15)
                {
                  int outData = 136315906;
                  uint64_t v30 = "vaemVADDeviceVolumeChangeListener_block_invoke";
                  __int16 v31 = 1024;
                  int v32 = v7;
                  __int16 v33 = 2048;
                  double v34 = v11;
                  __int16 v35 = 2048;
                  double v36 = v9;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0;
              FigRoutingManagerContextUtilities_CopySystemAudioContextUUID((uint64_t)&inAddress);
              *(float *)&double v16 = v11;
              FigVolumeControllerPostVolumeDidChangeNotifications(*(const void **)&inAddress.mSelector, v16, v9);
              if (*(void *)&inAddress.mSelector)
              {
                CFRelease(*(CFTypeRef *)&inAddress.mSelector);
                *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0;
              }
              if (v12) {
                CFRelease(v12);
              }
              CMSMVAUtility_SetVolumePreferenceForPort();
            }
          }
        }
        v3 += 12;
      }
    }
    goto LABEL_36;
  }
  if (byte_1E9358AE0)
  {
    if (!dword_1E9359ED0) {
      goto LABEL_36;
    }
LABEL_23:
    UInt32 ioDataSize = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    __int16 v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_36;
  }
  if (MX_FeatureFlags_IsAdaptiveVolumeControlEnabled()
    && vaemIsVolumeRampInProgress(*(_DWORD *)(a1 + 44)))
  {
    if (!dword_1E9359ED0) {
      goto LABEL_36;
    }
    goto LABEL_23;
  }
  AudioObjectID v18 = *(_DWORD *)(a1 + 44);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F757470766F6C6DLL;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  int outData = 0;
  AudioObjectGetPropertyData(v18, &inAddress, 0, 0, &ioDataSize, &outData);
  int v19 = outData;
  ++_block_invoke_counter;
  if (dword_1E9359ED0)
  {
    UInt32 ioDataSize = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    UInt32 v21 = ioDataSize;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = v21 & 0xFFFFFFFE;
    }
    if (v22)
    {
      int outData = 136315394;
      uint64_t v30 = "vaemVADDeviceVolumeChangeListener_block_invoke";
      __int16 v31 = 1024;
      int v32 = _block_invoke_counter;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFIndex v23 = MXGetSerialQueue();
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = __vaemVADDeviceVolumeChangeListener_block_invoke_2;
  v24[3] = &__block_descriptor_40_e5_v8__0l;
  int v25 = *(_DWORD *)(a1 + 44);
  int v26 = v19;
  MXDispatchAsync((uint64_t)"vaemVADDeviceVolumeChangeListener_block_invoke", (uint64_t)"CMSessionManager_VAEndpointManager.m", 4843, 0, 0, v23, (uint64_t)v24);
LABEL_36:
  free(*(void **)(a1 + 32));
}

void __vaemVADDeviceVolumeChangeListener_block_invoke_2(uint64_t a1)
{
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  vaemVADDeviceVolumeChangeListenerGuts_f(0, 0, *(float *)(a1 + 36));
}

uint64_t __vaemVADVolumeRampStatusChangeListener_block_invoke(uint64_t a1)
{
  if (gVAEM == *(_DWORD *)(a1 + 32))
  {
    uint64_t result = vaemIsVolumeRampInProgress(gVAEM);
    int v3 = result;
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v3 != byte_1E9358AE1) {
      return vaemVADVolumeRampStatusChangeListenerGuts_f(*(unsigned int *)(a1 + 32));
    }
  }
  else
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void __vaemVADCurrentSampleRateListenerGuts_f_block_invoke()
{
  CMSMNotificationUtility_PostCurrentOutputSampleRateDidChange();
  CMSMNotificationUtility_PostCurrentInputSampleRateDidChange();
}

void __vaemVADCurrentBufferFrameSizeListenerGuts_f_block_invoke()
{
  CMSMNotificationUtility_PostCurrentOutputDeviceBufferSizeDidChange();
  CMSMNotificationUtility_PostCurrentInputDeviceBufferSizeChange();
}

void vaemConnectedPortsPropertyListenerGuts()
{
  int IsConnected = vaemHeadphoneJackIsConnected(0);
  int HasInput = vaemHeadphoneJackHasInput(0);
  int v2 = vaemGetVADPortIDFromVADPortType(1886154613) != 0;
  MEMORY[0x199716E90](gCMSM);
  if (byte_1E9358B8A != v2)
  {
    PVMRemoveVolumesForDeviceRoute(@"LineOut", 0, 0);
    byte_1E9358B8A = v2;
    if (dword_1E9359ED0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (byte_1E9358B88 != IsConnected || byte_1E9358B89 != HasInput)
  {
    byte_1E9358B88 = IsConnected;
    byte_1E9358B89 = HasInput;
    if (dword_1E9359ED0)
    {
      uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMSMNotificationUtility_PostHeadphoneJackIsConnectedDidChange();
  }
  MEMORY[0x199716EA0](gCMSM);
  vaemUpdateConnectedOutputPortsList();
  if (vaemConnectedPortsPropertyListenerGuts_onceToken != -1) {
    dispatch_once(&vaemConnectedPortsPropertyListenerGuts_onceToken, &__block_literal_global_91);
  }
  cmsmUpdatePickableRouteDescriptionLists(1);
  if (byte_1E9358B68)
  {
    vaemUpdateSystemHasAudioInputDeviceState();
    uint64_t v6 = vaemCopyActiveInputRouteNamesForRouteConfiguration((NSDictionary *)@"PlayAndRecord", @"Default", 0);
    if (!FigCFEqual())
    {
      if (qword_1E9358B60)
      {
        CFRelease((CFTypeRef)qword_1E9358B60);
        qword_1E9358B60 = 0;
      }
      if (v6) {
        qword_1E9358B60 = (uint64_t)CFRetain(v6);
      }
      CMSMNotificationUtility_PostActiveInputRouteForPlayAndRecordNoBluetoothDidChange();
    }
    if (v6) {
      CFRelease(v6);
    }
  }
}

uint64_t __vaemConnectedPortsPropertyListenerGuts_block_invoke()
{
  uint64_t result = CMSMDeviceState_DeviceHasExclaveCapability();
  if (result)
  {
    id v1 = +[MXSessionManager sharedInstance];
    return [(MXSessionManager *)v1 updateSecureSpeakerMuteState:0];
  }
  return result;
}

uint64_t vaemAvailableVirtualFormatsListener()
{
  global_queue = dispatch_get_global_queue(0, 0);
  MXDispatchAsync((uint64_t)"vaemAvailableVirtualFormatsListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 2215, 0, 0, global_queue, (uint64_t)&__block_literal_global_94);
  return 0;
}

void __vaemAvailableVirtualFormatsListener_block_invoke()
{
  id v0 = MXGetSerialQueue();
  MXDispatchSyncFunction((uint64_t)"vaemAvailableVirtualFormatsListener_block_invoke", (uint64_t)"CMSessionManager_VAEndpointManager.m", 2216, 0, 0, v0, 0, (uint64_t)vaemAvailableVirtualFormatsPropertyListenerGuts_f);
}

__CFDictionary *vaemCreateDictionaryForActiveAudioRouteDidChange(int a1, const __CFArray *a2, const __CFArray *a3, const void *a4, const void *a5)
{
  int valuePtr = a1;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a1 == 2)
  {
    if (a2 && CFArrayGetCount(a2) >= 1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a2, 0);
      CFDictionarySetValue(Mutable, @"OutputDeviceDidChange_OldRoute", ValueAtIndex);
      if (CFEqual(ValueAtIndex, @"broadcast"))
      {
        BOOL v13 = 0;
      }
      else if (CFEqual(ValueAtIndex, @"Headphone") || CFEqual(ValueAtIndex, @"Headset"))
      {
        BOOL v18 = 0;
        if (CMSMUtility_IAPShouldPauseOnHeadphoneDisconnect((uint64_t)&v18)) {
          BOOL v13 = v18;
        }
        else {
          BOOL v13 = 1;
        }
      }
      else
      {
        BOOL v13 = CFEqual(ValueAtIndex, @"HeadsetBT") == 0;
      }
      if (CMSMUtility_IsSharePlayCallSessionActive())
      {
        BOOL v13 = 0;
        int valuePtr = 3;
      }
    }
    else
    {
      BOOL v13 = 1;
    }
  }
  else
  {
    BOOL v13 = 0;
  }
  CFNumberRef v14 = CFNumberCreate(v10, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(Mutable, @"OutputDeviceDidChange_Reason", v14);
  if (v14) {
    CFRelease(v14);
  }
  if (a3 && CFArrayGetCount(a3) >= 1)
  {
    unsigned int v15 = CFArrayGetValueAtIndex(a3, 0);
    CFDictionarySetValue(Mutable, @"OutputDeviceDidChange_NewRoute", v15);
  }
  if (a4) {
    CFDictionarySetValue(Mutable, @"ActiveAudioRouteDidChange_OldDetailedRoute", a4);
  }
  if (a5) {
    CFDictionarySetValue(Mutable, @"ActiveAudioRouteDidChange_NewDetailedRoute", a5);
  }
  double v16 = (const void **)MEMORY[0x1E4F1CFC8];
  if (v13) {
    double v16 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(Mutable, @"ShouldPause", *v16);
  return Mutable;
}

uint64_t _VAEndpointManager_Invalidate()
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  return 0;
}

uint64_t _VAEndpointManager_Finalize()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 8) = 1;
  return result;
}

__CFString *_VAEndpointManager_CopyDebugDescription(uint64_t a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigVAEndpointManager %p>", a1);
  return Mutable;
}

uint64_t _VAEndpointManager_SetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || *(unsigned char *)(DerivedStorage + 8)) {
    return 4294950584;
  }
  if (CFEqual(a2, @"VAEM_DeviceQuietBufferSize"))
  {
    unsigned int ValueUInt32 = MXCFNumberGetValueUInt32(a3);
    vaemSetDeviceBufferNumPCMFramesQuiet(ValueUInt32);
    return 0;
  }
  if (CFEqual(a2, @"VAEM_UplinkMute"))
  {
    vaemSetUplinkMuteOnDevice(*MEMORY[0x1E4F1CFD0] == (void)a3);
    return 0;
  }
  if (CFEqual(a2, @"VAEM_DownlinkMute"))
  {
    if ((const __CFNumber *)*MEMORY[0x1E4F1CFD0] == a3)
    {
      int v16 = vaemGetUplinkMute() | 2;
      AudioObjectPropertyElement v7 = (void (*)(uint64_t, int *))unk_1E9359B58;
      if (!unk_1E9359B58) {
        return 0;
      }
      p_int UplinkMute = &v16;
    }
    else
    {
      int UplinkMute = vaemGetUplinkMute();
      AudioObjectPropertyElement v7 = (void (*)(uint64_t, int *))unk_1E9359B58;
      if (!unk_1E9359B58) {
        return 0;
      }
      p_int UplinkMute = &UplinkMute;
    }
    v7(1, p_UplinkMute);
    return 0;
  }
  if (CFEqual(a2, @"VAEM_BTLowLatencyMode"))
  {
    CurrentOutputuint64_t PortAtIndex = CMSMUtility_GetCurrentOutputPortAtIndex(0);
    Valueuint64_t SInt32 = MXCFNumberGetValueSInt32(a3);
    vaeSetBTLowLatencyMode(CurrentOutputPortAtIndex, ValueSInt32);
    return 0;
  }
  if (CFEqual(a2, @"VAEM_CurrentInputDataSource"))
  {
    vaemSetInputDataSource((uint64_t)a3);
    return 0;
  }
  if (CFEqual(a2, @"VAEM_CurrentOutputDataDestination"))
  {
    vaemSetOutputDataDestination((uint64_t)a3);
    return 0;
  }
  if (CFEqual(a2, @"VAEM_DefaultInputGain"))
  {
    vaemSetDefaultInputGain();
    return 0;
  }
  if (CFEqual(a2, @"VAEM_DeviceInputGainScalar"))
  {
    double ValueFloat32 = MXCFNumberGetValueFloat32(a3);
    vaemSetDeviceInputGainScalar(*(float *)&ValueFloat32);
    return 0;
  }
  if (CFEqual(a2, @"VAEM_ThermalGainAdjustment_Speaker"))
  {
    double v13 = MXCFNumberGetValueFloat32(a3);
    if (*(float *)&v13 > 1.0) {
      *(float *)&double v13 = 1.0;
    }
    LODWORD(qword_1E9358B98) = LODWORD(v13);
LABEL_35:
    vaemUpdateThermalGainAdjustment();
    return 0;
  }
  if (CFEqual(a2, @"VAEM_ThermalGainAdjustment_Haptics"))
  {
    double v14 = MXCFNumberGetValueFloat32(a3);
    if (*(float *)&v14 > 1.0) {
      *(float *)&double v14 = 1.0;
    }
    HIDWORD(qword_1E9358B98) = LODWORD(v14);
    goto LABEL_35;
  }
  uint64_t result = CFEqual(a2, @"VAEM_DisallowAudioFormatChanges");
  if (result)
  {
    char v15 = FigCFEqual();
    uint64_t result = 0;
    byte_1E9358B94 = v15;
  }
  return result;
}

__CFArray *vaemCopyAllEndpoints()
{
  CFArrayRef v0 = (const __CFArray *)vaemCopyConnectedPortsForPortTypeAndScope(0, 0x6F757470u);
  id v1 = vaemCopyEndpointsForListOfPorts(v0, 0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t vaemDeviceSupportsMute()
{
  LODWORD(v2) = 0;
  return AudioObjectHasProperty([+[MXSessionManager sharedInstance] defaultVADID], (const AudioObjectPropertyAddress *)&v1);
}

CFNumberRef vaemCopyCurrentInputDataSource()
{
  CFNumberRef outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707464737263;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  AudioObjectID CurrentVADIDForInput = vaemGetCurrentVADIDForInput();
  if (AudioObjectGetPropertyData(CurrentVADIDForInput, &inAddress, 0, 0, &ioDataSize, &outData)) {
    UInt32 ioDataSize = 0;
  }
  CFNumberRef result = outData;
  if (outData)
  {
    int v2 = -1;
    CFNumberGetValue(outData, kCFNumberSInt32Type, &v2);
    return outData;
  }
  return result;
}

CFNumberRef vaemCopyCurrentOutputDataDestination()
{
  CFNumberRef outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747064647374;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  if (AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData))
  {
    UInt32 ioDataSize = 0;
  }
  CFNumberRef result = outData;
  if (outData)
  {
    int v1 = -1;
    CFNumberGetValue(outData, kCFNumberSInt32Type, &v1);
    return outData;
  }
  return result;
}

CFArrayRef vaemCopyInputDataSources()
{
  uint64_t outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707473726373;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  if (!AudioObjectHasProperty([+[MXSessionManager sharedInstance]; {
  AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData);
  }
  return (CFArrayRef)outData;
}

CFArrayRef vaemCopyOutputDataDestinations()
{
  uint64_t outData = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747064737473;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  if (!AudioObjectHasProperty([+[MXSessionManager sharedInstance]; {
  AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, &outData);
  }
  return (CFArrayRef)outData;
}

uint64_t vaemIsVADInRecordingCategory()
{
  uint64_t result = 1;
  if (dword_1E9359B84 > 1668313714)
  {
    BOOL v1 = dword_1E9359B84 == 1668313715 || dword_1E9359B84 == 1668440898;
    int v2 = 1668441443;
  }
  else
  {
    BOOL v1 = dword_1E9359B84 == 1668301427 || dword_1E9359B84 == 1668309362;
    int v2 = 1668313666;
  }
  if (!v1 && dword_1E9359B84 != v2) {
    return 0;
  }
  return result;
}

uint64_t vaemGetDeviceInputGainScalar(void *a1)
{
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E7074766F6C6DLL;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 4;
  return AudioObjectGetPropertyData([+[MXSessionManager sharedInstance] defaultVADID], &inAddress, 0, 0, &ioDataSize, a1);
}

uint64_t _VAEndpointManager_SetDiscoveryMode(int a1, CFTypeRef cf1)
{
  if (cf1
    && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F205D0])
    && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F205C8])
    && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F205D8]))
  {
    return 4294950586;
  }
  CMSMVAUtility_AudioObjectSetPropertyData();
  return 0;
}

uint64_t _VAEndpointManager_SetPropertyForAudioDevice(uint64_t a1, const void *a2, uint64_t a3, unsigned __int8 *a4, const __CFNumber *a5)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294950586;
  if (a2 && a3)
  {
    if (CFEqual(a2, @"VAEM_DeviceVolume"))
    {
      double ValueFloat32 = MXCFNumberGetValueFloat32(a5);
      vaemSetDeviceVolume(a3, 0, *(float *)&ValueFloat32);
    }
    else
    {
      uint64_t result = CFEqual(a2, @"VAEM_DeviceFormat");
      if (!result) {
        return result;
      }
      if (a4) {
        int v11 = *a4;
      }
      else {
        int v11 = 0;
      }
      vaemSetDeviceFormat(a3, a5, v11);
    }
    return 0;
  }
  return result;
}

uint64_t vaemCopyClockDeviceForAudioDevice(AudioObjectID a1, __CFString **outData)
{
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F75747061706364;
  inAddress.mElement = 0;
  if (!outData) {
    return 0;
  }
  uint64_t result = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, outData);
  if (result)
  {
    uint64_t v4 = 0;
LABEL_4:
    *uint64_t outData = v4;
    return result;
  }
  if (!*outData)
  {
    uint64_t v4 = &stru_1EE5E8D28;
    goto LABEL_4;
  }
  return result;
}

uint64_t vaemReceiverWillBeUsedListener()
{
  return notify_post("com.apple.coremedia.routewillchangetoreceiver");
}

uint64_t vaemConnectedPortsPropertyListener()
{
  CFArrayRef v0 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"vaemConnectedPortsPropertyListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 10289, 0, 0, v0, (uint64_t)&__block_literal_global_121);
  return 0;
}

uint64_t vaemCurrentRouteHasVolumeControlListener(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (_DWORD *)(a3 + 4);
    do
    {
      if (*(v4 - 1) == 1986229104)
      {
        if (*v4 == 1869968496)
        {
          uint64_t v5 = MXGetSerialQueue();
          uint64_t v6 = 5141;
          AudioObjectPropertyElement v7 = &__block_literal_global_125;
          goto LABEL_8;
        }
        if (*v4 == 1768845428)
        {
          uint64_t v5 = MXGetSerialQueue();
          uint64_t v6 = 5134;
          AudioObjectPropertyElement v7 = &__block_literal_global_123;
LABEL_8:
          MXDispatchAsync((uint64_t)"vaemCurrentRouteHasVolumeControlListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", v6, 0, 0, v5, (uint64_t)v7);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return 0;
}

void vaemCurrentRouteHasInputGainControlListenerGuts()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  int HasInputGainControl = vaemCurrentRouteHasInputGainControl();
  if (byte_1E9358B8B != HasInputGainControl)
  {
    int v1 = HasInputGainControl;
    byte_1E9358B8B = HasInputGainControl;
    if (HasInputGainControl) {
      vaemUpdatePVMSettingsForInputGain();
    }
    keys[0] = @"State";
    int v2 = (void **)MEMORY[0x1E4F1CFD0];
    if (!v1) {
      int v2 = (void **)MEMORY[0x1E4F1CFC8];
    }
    values = *v2;
    CFDictionaryRef v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMSMNotificationUtility_PostCurrentRouteHasInputGainControlDidChange(v3);
    if (v3) {
      CFRelease(v3);
    }
  }
}

uint64_t vaemInputSourcesListener()
{
  CFArrayRef v0 = MXGetSerialQueue();
  MXDispatchAsync((uint64_t)"vaemInputSourcesListener", (uint64_t)"CMSessionManager_VAEndpointManager.m", 5058, 0, 0, v0, (uint64_t)&__block_literal_global_127);
  return 0;
}

uint64_t vaemOutputDestinationsListener()
{
  return 0;
}

uint64_t vaemInputGainScalarListener()
{
  return 0;
}

CFStringRef FigRoutingContextCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRoutingContext %p]", a1);
}

uint64_t MX_FeatureFlags_IsAlertsRelativeVoiceOverVolumeEnabled()
{
  if (MX_FeatureFlags_IsAlertsRelativeVoiceOverVolumeEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsAlertsRelativeVoiceOverVolumeEnabled_onceToken, &__block_literal_global_16);
  }
  return MX_FeatureFlags_IsAlertsRelativeVoiceOverVolumeEnabled_alertsRelativeVoiceOverVolumeEnabled;
}

uint64_t MX_FeatureFlags_IsHapticEngineCPMSEnabled()
{
  return _os_feature_enabled_impl();
}

BOOL MX_FeatureFlags_IsExplicitInitializationForFigEndpointManagersEnabled()
{
  return (_os_feature_enabled_impl() & 1) != 0 || FigIsAirplaydEnabled() != 0;
}

uint64_t MX_FeatureFlags_IsBulkCopyOfRouteDescriptorEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t MX_FeatureFlags_IsSeparatePlayerProcessEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t MX_FeatureFlags_IsBypassCodecArbitrationEnabled()
{
  return _os_feature_enabled_impl();
}

uint64_t MX_FeatureFlags_IsCounterfeitDetectionEnabled()
{
  if (MX_FeatureFlags_IsCounterfeitDetectionEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsCounterfeitDetectionEnabled_onceToken, &__block_literal_global_40);
  }
  return MX_FeatureFlags_IsCounterfeitDetectionEnabled_gapaEnabled;
}

uint64_t MX_FeatureFlags_IsConversationDetectSupported()
{
  if (MX_FeatureFlags_IsConversationDetectSupported_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsConversationDetectSupported_onceToken, &__block_literal_global_43);
  }
  return MX_FeatureFlags_IsConversationDetectSupported_conversationDetectSupported;
}

uint64_t MX_FeatureFlags_IsInterruptOnRouteDisconnectEnabled()
{
  if (MX_FeatureFlags_IsInterruptOnRouteDisconnectEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsInterruptOnRouteDisconnectEnabled_onceToken, &__block_literal_global_50);
  }
  return MX_FeatureFlags_IsInterruptOnRouteDisconnectEnabled_sInterruptOnRouteDisconnect;
}

uint64_t MX_FeatureFlags_IsInterruptLongFormVideoOnSpeechDetectEnabled()
{
  if (MX_FeatureFlags_IsInterruptLongFormVideoOnSpeechDetectEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsInterruptLongFormVideoOnSpeechDetectEnabled_onceToken, &__block_literal_global_57);
  }
  return MX_FeatureFlags_IsInterruptLongFormVideoOnSpeechDetectEnabled_sInterruptLongFormVideoOnSpeechDetect;
}

uint64_t MX_FeatureFlags_IsMXSilentModeEnabled()
{
  if (MX_FeatureFlags_IsMXSilentModeEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsMXSilentModeEnabled_onceToken, &__block_literal_global_69);
  }
  return MX_FeatureFlags_IsMXSilentModeEnabled_sIsUseMXSilentModeEnabled;
}

uint64_t MX_FeatureFlags_IsSystemInputPickerEnabled()
{
  if (MX_FeatureFlags_IsSystemInputPickerEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsSystemInputPickerEnabled_onceToken, &__block_literal_global_95);
  }
  return MX_FeatureFlags_IsSystemInputPickerEnabled_sIsSystemInputPickerEnabled;
}

uint64_t MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled()
{
  if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled_onceToken, &__block_literal_global_98);
  }
  return MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled_isBufferedBadgingAndCapabilitiesEnabled;
}

uint64_t MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled()
{
  if (MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled_onceToken, &__block_literal_global_108);
  }
  return MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled_isSystemRemoteDisplayContextEnabled;
}

uint64_t MX_FeatureFlags_IsMaxSpeakerVolumeLimitEnabled()
{
  if (MX_FeatureFlags_IsMaxSpeakerVolumeLimitEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsMaxSpeakerVolumeLimitEnabled_onceToken, &__block_literal_global_111);
  }
  return MX_FeatureFlags_IsMaxSpeakerVolumeLimitEnabled_sIsMaxSpeakerVolumeLimitEnabled;
}

uint64_t MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled()
{
  if (MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled_onceToken, &__block_literal_global_126);
  }
  return MX_FeatureFlags_IsHangsAudioSessionClientCachingEnabled_sHangsAudioSessionClientCachingEnabled;
}

uint64_t MX_FeatureFlags_IsCarPlayRingtoneFadeInEnabled()
{
  if (MX_FeatureFlags_IsCarPlayRingtoneFadeInEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsCarPlayRingtoneFadeInEnabled_onceToken, &__block_literal_global_129);
  }
  return MX_FeatureFlags_IsCarPlayRingtoneFadeInEnabled_sIsCarPlayRingtoneFadeInEnabled;
}

uint64_t MX_FeatureFlags_IsSmartRoutingInEarQueryEnabled()
{
  if (MX_FeatureFlags_IsSmartRoutingInEarQueryEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsSmartRoutingInEarQueryEnabled_onceToken, &__block_literal_global_132);
  }
  return MX_FeatureFlags_IsSmartRoutingInEarQueryEnabled_sIsSmartRoutingInEarQueryEnabled;
}

uint64_t MX_FeatureFlags_IsStartupSequenceChangeEnabled()
{
  if (MX_FeatureFlags_IsStartupSequenceChangeEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsStartupSequenceChangeEnabled_onceToken, &__block_literal_global_135);
  }
  return MX_FeatureFlags_IsStartupSequenceChangeEnabled_isStartupSequenceChangeEnabled;
}

uint64_t MX_FeatureFlags_IsProtectedAppsEnabled()
{
  if (MX_FeatureFlags_IsProtectedAppsEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsProtectedAppsEnabled_onceToken, &__block_literal_global_149);
  }
  return MX_FeatureFlags_IsProtectedAppsEnabled_isProtectedAppsEnabled;
}

uint64_t MX_FeatureFlags_IsAllowBackgroundPlaybackEnabled()
{
  if (MX_FeatureFlags_IsAllowBackgroundPlaybackEnabled_onceToken != -1) {
    dispatch_once(&MX_FeatureFlags_IsAllowBackgroundPlaybackEnabled_onceToken, &__block_literal_global_153);
  }
  return MX_FeatureFlags_IsAllowBackgroundPlaybackEnabled_isAllowBackgroundPlaybackEnabled;
}

uint64_t TelephonyUtilitiesLibraryCore()
{
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary) {
    TelephonyUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return TelephonyUtilitiesLibraryCore_frameworkLibrary;
}

uint64_t __TelephonyUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TelephonyUtilitiesLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getTUSharePlayForceDisabledSymbolLoc_block_invoke(uint64_t a1)
{
  int v2 = (void *)TelephonyUtilitiesLibraryCore();
  if (!v2)
  {
    uint64_t v4 = (void *)abort_report_np();
    free(v4);
  }
  uint64_t result = dlsym(v2, "TUSharePlayForceDisabled");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getTUSharePlayForceDisabledSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_194DB1298(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_194DB17A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DB1B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DB1E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DB21F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *MX_TelephonyClient_CopyIsoCountryCodeForMCC()
{
  if (mx_telephonyClient_Initialize_onceToken != -1) {
    dispatch_once(&mx_telephonyClient_Initialize_onceToken, &__block_literal_global_14);
  }
  uint64_t result = (void *)gTelephonyClient;
  if (gTelephonyClient)
  {
    return (void *)[result copyIsoCountryCodeForMCC];
  }
  return result;
}

void *MX_TelephonyClient_CopyCountryNameFromOperatorCountryBundle()
{
  if (mx_telephonyClient_Initialize_onceToken != -1) {
    dispatch_once(&mx_telephonyClient_Initialize_onceToken, &__block_literal_global_14);
  }
  uint64_t result = (void *)gTelephonyClient;
  if (gTelephonyClient)
  {
    return (void *)[result copyCountryNameFromOperatorCountryBundle];
  }
  return result;
}

void __getCoreTelephonyClientClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = objc_getClass("CoreTelephonyClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getCoreTelephonyClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    __getCoreTelephonyClientClass_block_invoke_cold_1();
    CoreTelephonyLibrary();
  }
}

void CoreTelephonyLibrary()
{
  if (!CoreTelephonyLibraryCore())
  {
    CFArrayRef v0 = (void *)abort_report_np();
    free(v0);
  }
}

uint64_t CoreTelephonyLibraryCore()
{
  if (!CoreTelephonyLibraryCore_frameworkLibrary) {
    CoreTelephonyLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return CoreTelephonyLibraryCore_frameworkLibrary;
}

uint64_t __CoreTelephonyLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreTelephonyLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getCTBundleClass_block_invoke(uint64_t a1)
{
  CoreTelephonyLibrary();
  Class result = objc_getClass("CTBundle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 4CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    getCTBundleClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  else
  {
    uint64_t v3 = __getCTBundleClass_block_invoke_cold_1();
    return (Class)__mx_telephonyClient_Initialize_block_invoke(v3);
  }
  return result;
}

void sub_194DB31B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DB352C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DB38C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DB3C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_194DB44AC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_194DB47C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_194DB4A5C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_194DB59E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

uint64_t FigEndpointUIAgentHelper_SetNewUIAgent(const void *a1)
{
  if (FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce != -1) {
    dispatch_once(&FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce, &__block_literal_global_15);
  }
  uint64_t v2 = FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
    uint64_t v3 = &FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  }
  else {
    uint64_t v3 = 0;
  }
  if (dword_1E9359D60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v2) {
    uint64_t v5 = (uint64_t)&qword_1E93587B0;
  }
  else {
    uint64_t v5 = 8;
  }
  if (*(void *)v5)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    endpointUIAgentHelper_handleUIAgentNoLongerCurrent(v3);
  }
  MEMORY[0x199716EE0](*v3);
  uint64_t v6 = *(const void **)v5;
  *(void *)uint64_t v5 = a1;
  if (a1) {
    CFRetain(a1);
  }
  if (v6) {
    CFRelease(v6);
  }
  uint64_t result = MEMORY[0x199716EF0](*v3);
  if (*(void *)v5)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterAddListener();
  }
  return result;
}

void endpointUIAgentHelper_UIAgentNotificationCallback(int a1, void *a2, CFTypeRef cf2)
{
  if (CFEqual(@"FigEndpointUIAgentNotification_RemoteAgentCrashed", cf2))
  {
    MEMORY[0x199716EE0](*a2);
    uint64_t v5 = (const void *)a2[1];
    if (v5)
    {
      CFRelease(v5);
      a2[1] = 0;
    }
    MEMORY[0x199716EF0](*a2);
    uint64_t v6 = @"remoteAgentCrashed";
LABEL_9:
    endpointUIAgentHelper_postEvent((uint64_t)a2, (uint64_t)v6);
    return;
  }
  if (CFEqual(@"FigEndpointUIAgentNotification_UserLoggedOut", cf2))
  {
    MEMORY[0x199716EE0](*a2);
    AudioObjectPropertyElement v7 = (const void *)a2[1];
    if (v7)
    {
      CFRelease(v7);
      a2[1] = 0;
    }
    MEMORY[0x199716EF0](*a2);
    uint64_t v6 = @"userLoggedOut";
    goto LABEL_9;
  }
  if (!CFEqual(@"FigEndpointUIAgentNotification_NoLongerCurrent", cf2))
  {
    if (CFEqual(@"FigEndpointUIAgentNotification_DeviceWake", cf2))
    {
      uint64_t v6 = @"deviceAwake";
    }
    else
    {
      if (!CFEqual(@"FigEndpointUIAgentNotification_DeviceWillSleep", cf2)) {
        return;
      }
      uint64_t v6 = @"deviceWillSleep";
    }
    goto LABEL_9;
  }
  endpointUIAgentHelper_handleUIAgentNoLongerCurrent(a2);
}

void endpointUIAgentHelper_handleUIAgentNoLongerCurrent(void *a1)
{
  MEMORY[0x199716EE0](*a1);
  uint64_t v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  MEMORY[0x199716EF0](*a1);
  endpointUIAgentHelper_postEvent((uint64_t)a1, @"noLongerCurrent");
}

uint64_t FigEndpointUIAgentHelper_ShowError(const __CFDictionary *a1)
{
  if (FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce != -1) {
    dispatch_once(&FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce, &__block_literal_global_15);
  }
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
    uint64_t v2 = &FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  }
  else {
    uint64_t v2 = 0;
  }
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
    uint64_t v3 = (uint64_t)&qword_1E93587B0;
  }
  else {
    uint64_t v3 = 8;
  }
  MEMORY[0x199716EE0](*v2);
  uint64_t v4 = *(const void **)v3;
  if (*(void *)v3 || (endpointUIAgentHelper_updateCurrentUIAgent((uint64_t)v2), (uint64_t v4 = *(const void **)v3) != 0))
  {
    CFTypeRef v5 = CFRetain(v4);
    MEMORY[0x199716EF0](*v2);
    if (v5)
    {
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      AudioObjectID v8 = *(void (**)(CFTypeRef, const __CFDictionary *))(v7 + 40);
      if (v8) {
        v8(v5, a1);
      }
      CFRelease(v5);
      return 0;
    }
  }
  else
  {
    MEMORY[0x199716EF0](*v2);
  }
  if (a1) {
    CFDictionaryGetValue(a1, @"ATVName");
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

uint64_t endpointUIAgentHelper_updateCurrentUIAgent(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = FigEndpointUIAgentCopyCurrentEndpointUIAgent((void *)(a1 + 8));
  if (dword_1E9359D60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*v1)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterAddListener();
  }
  return result;
}

uint64_t FigEndpointUIAgentHelper_DisplayAuthPrompt(uint64_t a1, uint64_t a2)
{
  if (FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce != -1) {
    dispatch_once(&FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce, &__block_literal_global_15);
  }
  uint64_t v4 = FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
    CFTypeRef v5 = &FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
    uint64_t v6 = (uint64_t)&qword_1E93587B0;
  }
  else {
    uint64_t v6 = 8;
  }
  MEMORY[0x199716EE0](*v5);
  uint64_t v7 = *(const void **)v6;
  if (*(void *)v6 || (endpointUIAgentHelper_updateCurrentUIAgent((uint64_t)v5), (uint64_t v7 = *(const void **)v6) != 0))
  {
    CFTypeRef v8 = CFRetain(v7);
    MEMORY[0x199716EF0](*v5);
    if (v8)
    {
      MEMORY[0x199716EE0](*v5);
      uint64_t v9 = 24;
      if (v4) {
        uint64_t v9 = (uint64_t)&unk_1E93587C0;
      }
      *(void *)uint64_t v9 = a2;
      uint64_t v10 = (uint64_t)&unk_1E93587D0;
      if (!v4) {
        uint64_t v10 = 40;
      }
      *(void *)uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = (uint64_t)&unk_1E93587D8;
      if (!v4) {
        uint64_t v11 = 48;
      }
      *(void *)uint64_t v11 = *(void *)(a1 + 40);
      MEMORY[0x199716EF0](*v5);
      CFDictionaryRef v13 = *(CFDictionaryRef *)a1;
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = *(void (**)(CFTypeRef, CFDictionaryRef, uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))(v15 + 16);
      if (v16) {
        v16(v8, v13, v12, endpointUIAgentHelper_UIAgentCallback);
      }
      CFRelease(v8);
      return 0;
    }
  }
  else
  {
    MEMORY[0x199716EF0](*v5);
  }
  if (*(void *)a1) {
    CFDictionaryGetValue(*(CFDictionaryRef *)a1, @"ATVName");
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 0;
}

void endpointUIAgentHelper_UIAgentCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce != -1) {
    dispatch_once(&FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce, &__block_literal_global_15);
  }
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
    uint64_t v6 = (uint64_t)&unk_1E93587C0;
  }
  else {
    uint64_t v6 = 24;
  }
  if (*(void *)v6)
  {
    if (a2)
    {
      uint64_t v7 = 40;
      if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
        uint64_t v7 = (uint64_t)&unk_1E93587D0;
      }
      uint64_t v8 = *(void *)v7;
      uint64_t v9 = (uint64_t)&unk_1E93587D8;
      if (!FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
        uint64_t v9 = 48;
      }
      uint64_t v10 = *(void *)v9;
      uint64_t v11 = 0;
      uint64_t v12 = a2;
    }
    else
    {
      if (!a1) {
        return;
      }
      uint64_t v13 = 40;
      if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
        uint64_t v13 = (uint64_t)&unk_1E93587D0;
      }
      uint64_t v8 = *(void *)v13;
      uint64_t v14 = (uint64_t)&unk_1E93587D8;
      if (!FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
        uint64_t v14 = 48;
      }
      uint64_t v10 = *(void *)v14;
      uint64_t v11 = a1;
      uint64_t v12 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v6)(v11, v12, a3, v8, v10);
    *(void *)uint64_t v6 = 0;
  }
}

uint64_t FigEndpointUIAgentHelper_CleanupPrompt(const void *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce != -1) {
    dispatch_once(&FigEndpointUIAgentHelper_GetSharedHelper_sFigEndpointUIAgentSetupOnce, &__block_literal_global_15);
  }
  uint64_t v7 = FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  if (FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj) {
    uint64_t v8 = &FigEndpointUIAgentHelper_GetSharedHelper_endpointUIAgentHelperObj;
  }
  else {
    uint64_t v8 = 0;
  }
  if (a1 && (a2 || !a4))
  {
    MEMORY[0x199716EE0](*v8);
    if (v7) {
      uint64_t v9 = (uint64_t)&qword_1E93587B0;
    }
    else {
      uint64_t v9 = 8;
    }
    uint64_t v10 = *(const void **)v9;
    if (*(void *)v9 || (endpointUIAgentHelper_updateCurrentUIAgent((uint64_t)v8), (uint64_t v10 = *(const void **)v9) != 0))
    {
      uint64_t v11 = (void *)CFRetain(v10);
      MEMORY[0x199716EF0](*v8);
      if (v11)
      {
        CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          uint64_t v13 = Mutable;
          CFDictionarySetValue(Mutable, @"ATVName", a1);
          uint64_t v14 = (const void **)MEMORY[0x1E4F1CFC8];
          if (a4) {
            uint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
          }
          CFDictionarySetValue(v13, @"savePassword", *v14);
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          __int16 v17 = *(void (**)(void *, __CFDictionary *))(v16 + 32);
          if (v17) {
            v17(v11, v13);
          }
          long long v21 = 0uLL;
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v22 = a2;
          uint64_t v23 = 0;
          FigEndpointAuthRequestHandler_SetProcessNextRequest(1);
          FigEndpointAuthRequestHandler_ProcessRequest(&v21);
          FigEndpointAuthRequestHandler_SetProcessNextRequest(0);
          if (FigEndpointAuthRequestHandler_IsAuthListEmpty())
          {
            uint64_t v18 = (uint64_t)&unk_1E93587C0;
            if (!v7) {
              uint64_t v18 = 24;
            }
            *(void *)uint64_t v18 = 0;
          }
          CFRelease(v11);
          int v19 = v13;
        }
        else
        {
          int v19 = (__CFDictionary *)v11;
        }
        CFRelease(v19);
      }
    }
    else
    {
      MEMORY[0x199716EF0](*v8);
    }
  }
  return 0;
}

void endpointUIAgentHelper_postEvent(uint64_t a1, uint64_t a2)
{
  MEMORY[0x199716EE0](*(void *)a1);
  if (*(void *)(a1 + 16))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v5 = Mutable;
      (*(void (**)(uint64_t, CFMutableDictionaryRef))(a1 + 16))(a2, Mutable);
      CFRelease(v5);
    }
  }
  JUMPOUT(0x199716EF0);
}

void MX_CoreServices_Initialize()
{
  global_queue = dispatch_get_global_queue(0, 0);
  MXDispatchAsync((uint64_t)"MX_CoreServices_Initialize", (uint64_t)"MX_CoreServices.m", 61, 0, 0, global_queue, (uint64_t)&__block_literal_global_16);
}

__CFString *MX_CoreServices_GetDMFPolicyString(unint64_t a1)
{
  if (a1 > 5) {
    return @"DMFPolicyUnknown";
  }
  else {
    return off_1E57C8F60[a1];
  }
}

void cmsmLSUpdateDeviceManagementCache(uint64_t a1)
{
  valuePtr[22] = *MEMORY[0x1E4F143B8];
  valuePtr[0] = a1;
  CFNumberRef v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, valuePtr);
  FigCFDictionarySetValue();
  if (dword_1E9359ED0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v1) {
    CFRelease(v1);
  }
}

id MX_CoreServices_CopyContainingBundleID(_OWORD *a1)
{
  long long v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  id result = (id)[(id)gLSBundleRecordClass bundleRecordForAuditToken:v4 error:0];
  if (result)
  {
    uint64_t v3 = result;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      return (id)objc_msgSend((id)objc_msgSend(v3, "containingBundleRecord"), "bundleIdentifier");
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t MXAudioContext_HandleAddEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v17 = 0;
  if (a1)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v10 = v9 ? v9 : 0;
    uint64_t v11 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v10 + 48);
    if (v11) {
      v11(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &v17);
    }
  }
  uint64_t IndexOfCurrentlyActivatingSubEndpoints = FigRoutingContextUtilities_GetIndexOfCurrentlyActivatingSubEndpoints((uint64_t)a2, (CFArrayRef)[MEMORY[0x1E4F1C978] arrayWithObject:a1]);
  FigRoutingManagerLogRoutingRequestDetails(@"MXAudioContext_HandleAddEndpoint - ", (uint64_t)a1, 0, 0, (uint64_t)a2, a3);
  if (CMSMDeviceState_IsHomePodHub()
    && FigRoutingManagerIsEndpointLocal((uint64_t)a1)
    && FigRoutingManagerIsEndpointOfSubtype((uint64_t)a1))
  {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, @"configUpdateReasonStarted");
    uint64_t v13 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed;
LABEL_16:
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, *v13);
LABEL_19:
    uint64_t v15 = 0;
    goto LABEL_20;
  }
  if (IndexOfCurrentlyActivatingSubEndpoints != -1)
  {
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a2, IndexOfCurrentlyActivatingSubEndpoints, (uint64_t)cf);
    FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a2, IndexOfCurrentlyActivatingSubEndpoints);
    FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo((uint64_t)a2, (uint64_t)cf[0]);
    FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, a4);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    goto LABEL_19;
  }
  if (FigRoutingManagerUtilities_IsEndpointPicked(a1, (uint64_t)a2))
  {
    uint64_t v13 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedNoOp;
    goto LABEL_16;
  }
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 1);
  if (!FigRoutingManagerIsEndpointWHAGroupable((uint64_t)a1)) {
    goto LABEL_19;
  }
  mxAudioContext_removeActivatedEndpointFromContext(a1);
  FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)cf);
  FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoint((uint64_t)a2, (uint64_t)cf[0], a1, (uint64_t)a3, (uint64_t)a4);
  uint64_t v15 = mxAudioContext_addWHAGroupableEndpoint((uint64_t)a1, a2, a3, a4);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
LABEL_20:
  if (v17) {
    CFRelease(v17);
  }
  return v15;
}

void mxAudioContext_removeActivatedEndpointFromContext(const void *a1)
{
  if (a1 && FigRoutingManagerIsEndpointActivated((uint64_t)a1))
  {
    CFTypeRef v7 = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    CFMutableDictionaryRef v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
    if (v5) {
      v5(CMBaseObject, *MEMORY[0x1E4F20F78], *MEMORY[0x1E4F1CF80], &v7);
    }
    if (!FigCFEqual())
    {
      CFTypeRef cf = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)v7, (uint64_t)&cf);
      if (cf) {
        mxAudioContext_removeEndpointFromAggregate((uint64_t)cf, a1, v7, 0, 0);
      }
      else {
        mxAudioContext_deactivateEndpoint(a1, v7, 0);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
    if (v7) {
      CFRelease(v7);
    }
  }
}

uint64_t mxAudioContext_addWHAGroupableEndpoint(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  v23[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v23[0] = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)v23);
  CFTypeRef v22 = 0;
  uint64_t v8 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v11 + 48);
  if (v12) {
    v12(CMBaseObject, *MEMORY[0x1E4F20E38], v8, &v22);
  }
  CFTypeRef cf = 0;
  uint64_t v13 = FigEndpointGetCMBaseObject();
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v15 + 48);
  if (v16) {
    v16(v13, *MEMORY[0x1E4F20F28], v8, &cf);
  }
  CFTypeRef v17 = v23[0];
  if (!v23[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    CFTypeRef v17 = 0;
  }
  uint64_t v18 = FigRoutingManagerAddEndpointToAggregate((uint64_t)v17, a1, a2, a3, a4, (uint64_t)mxAudioContext_addEndpointCompletionCallback);
  if (!v18 && dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v22)
  {
    CFRelease(v22);
    CFTypeRef v22 = 0;
  }
  if (v23[0]) {
    CFRelease(v23[0]);
  }
  return v18;
}

uint64_t MXAudioContext_HandleRemoveEndpoint(const void *a1, const void *a2, const __CFDictionary *a3, const void *a4)
{
  FigRoutingManagerLogRoutingRequestDetails(@"MXEmbeddedAudioRouting_HandleRemoveEndpoint - ", (uint64_t)a1, 0, 0, (uint64_t)a2, a3);
  if (FigRoutingManagerUtilities_IsEndpointPicked(a1, (uint64_t)a2))
  {
    if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)a1))
    {
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, @"configUpdateReasonStarted");
      return mxAudioContext_removeWHAGroupableEndpoint(a1, a2, a3, a4);
    }
    else
    {
      return mxAudioContext_deactivateEndpoint(a1, a2, (uint64_t)a3);
    }
  }
  else
  {
    FigRoutingManagerLogEndpointID(@"MXAudioContext_HandleRemoveEndpoint: Posting no-op because endpoint=", (uint64_t)a1, @" is already removed", 1);
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, a3, @"configUpdateReasonEndedNoop");
    return 0;
  }
}

uint64_t mxAudioContext_removeWHAGroupableEndpoint(const void *a1, const void *a2, const void *a3, const void *a4)
{
  v23[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v23[0] = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)v23);
  CFTypeRef v8 = v23[0];
  if (!v23[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    CFTypeRef v8 = 0;
  }
  uint64_t v9 = mxAudioContext_removeEndpointFromAggregate((uint64_t)v8, a1, a2, a3, a4);
  CFTypeRef v22 = 0;
  uint64_t v10 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v13 + 48);
  if (v14) {
    v14(CMBaseObject, *MEMORY[0x1E4F20E38], v10, &v22);
  }
  CFTypeRef cf = 0;
  uint64_t v15 = FigEndpointGetCMBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
  if (v18) {
    v18(v15, *MEMORY[0x1E4F20F28], v10, &cf);
  }
  if (!v9 && dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v22)
  {
    CFRelease(v22);
    CFTypeRef v22 = 0;
  }
  if (v23[0]) {
    CFRelease(v23[0]);
  }
  return v9;
}

uint64_t mxAudioContext_deactivateEndpoint(const void *a1, const void *a2, uint64_t a3)
{
  v24[16] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294954315;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
  {
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  SharedManager = FigRoutingManagerGetSharedManager();
  CFTypeRef cf = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v12 + 48);
  if (v13) {
    v13(CMBaseObject, *MEMORY[0x1E4F20F28], v9, &cf);
  }
  if (dword_1E9359DC0)
  {
    *(_DWORD *)os_log_type_t type = 0;
    os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
    uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  CFRetain(a1);
  uint64_t v15 = *((void *)SharedManager + 1);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  _OWORD v20[2] = __mxAudioContext_deactivateEndpoint_block_invoke;
  void v20[3] = &__block_descriptor_40_e5_v8__0l;
  v20[4] = a1;
  MXDispatchAsync((uint64_t)"mxAudioContext_deactivateEndpoint", (uint64_t)"MXAudioContext_Embedded.m", 461, 0, 0, v15, (uint64_t)v20);
  uint64_t FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures((uint64_t)a1, (uint64_t)a2);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (FigCFEqual()) {
    FigCFDictionarySetValue();
  }
  FigRoutingManagerUnregisterFromFigEndpointNotifications((uint64_t)a1);
  v24[0] = 0;
  FigRoutingManagerCreateEndpointDeactivateCompletionContext(a2, v24);
  uint64_t v7 = FigRoutingManagerEndpointDeactivateWithCompletionCallback((uint64_t)a1, FigEndpointFeatures, (uint64_t)Mutable, (void (*)(void, uint64_t, void, void, uint64_t))mxAudioContext_endpointDeactivateCompletionCallback, v24[0]);
  if (FigCFEqual())
  {
    uint64_t v18 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedBottomUpRouteChange;
  }
  else
  {
    if (!FigCFEqual()) {
      goto LABEL_23;
    }
    uint64_t v18 = kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedSuccess;
  }
  FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, (uint64_t)*v18, a3, 0);
LABEL_23:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

uint64_t MXAudioContext_HandlePickEndpoints(const __CFArray *a1, const void *a2, CFDictionaryRef theDict, const __CFDictionary *a4)
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v8 = FigRoutingManagerCopyRoutingContextOptionsWithRouteRequestID(theDict);
  FigRoutingManagerLogRoutingRequestDetails(@"MXAudioContext_HandlePickEndpoints - ", 0, a1, 0, (uint64_t)a2, v8);
  if (FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable((CFIndex)a1))
  {
    uint64_t IndexOfCurrentlyActivatingSubEndpoints = FigRoutingContextUtilities_GetIndexOfCurrentlyActivatingSubEndpoints((uint64_t)a2, a1);
    if (IndexOfCurrentlyActivatingSubEndpoints != -1)
    {
      uint64_t v10 = IndexOfCurrentlyActivatingSubEndpoints;
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      theArray[0] = 0;
      FigRoutingManagerContextUtilities_CopyCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a2, v10, (uint64_t)theArray);
      FigRoutingManagerContextUtilities_RemoveCurrentlyActivatingEndpointInfoAtIndex((uint64_t)a2, v10);
      FigRoutingManagerContextUtilities_AppendCurrentlyActivatingEndpointInfo((uint64_t)a2, (uint64_t)theArray[0]);
      FigRoutingManagerContextUtilities_PostNoOpRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, theDict, a4);
      if (theArray[0])
      {
        CFRelease(theArray[0]);
        theArray[0] = 0;
      }
      goto LABEL_57;
    }
  }
  theArray[0] = 0;
  FigRoutingManagerCopyPickedEndpointsForRoutingContext((uint64_t)a2, theArray);
  if (a1) {
    CFIndex Count = CFArrayGetCount(a1);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef v13 = theArray[0];
  if (theArray[0]) {
    CFArrayRef v13 = (CFArrayRef)CFArrayGetCount(theArray[0]);
  }
  if ((CFArrayRef)Count == v13)
  {
    if (Count < 1)
    {
LABEL_19:
      char v18 = 0;
      goto LABEL_21;
    }
    CFIndex v14 = 0;
    while (1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v14);
      if (!FigCFArrayContainsValue())
      {
        if (!FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)ValueAtIndex)) {
          break;
        }
        CFTypeRef v16 = FigRoutingManagerCopyWHAGroupableVAEndpoint();
        int v17 = FigCFArrayContainsValue();
        if (v16) {
          CFRelease(v16);
        }
        if (!v17) {
          break;
        }
      }
      if (Count == ++v14) {
        goto LABEL_19;
      }
    }
  }
  char v18 = 1;
LABEL_21:
  if (theArray[0]) {
    CFRelease(theArray[0]);
  }
  if ((v18 & 1) == 0)
  {
    FigRoutingManagerLogEndpointIDs(@"MXAudioContext_HandlePickEndpoints: Posting no-op because endpoints= ", a1, @" are already picked", 1);
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, v8, @"configUpdateReasonEndedNoop");
    goto LABEL_57;
  }
  if (a1 && CFArrayGetCount(a1) >= 1)
  {
    FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 1);
    if (CFArrayGetCount(a1))
    {
      CFIndex v19 = CFArrayGetCount(a1);
      if (v19 >= 1)
      {
        CFIndex v20 = v19;
        for (CFIndex i = 0; i != v20; ++i)
        {
          CFTypeRef v22 = CFArrayGetValueAtIndex(a1, i);
          mxAudioContext_removeActivatedEndpointFromContext(v22);
        }
      }
    }
    if (FigRoutingManagerUtilities_AreAllEndpointsWHAGroupable((CFIndex)a1))
    {
      FigRoutingManagerContextUtilities_SetPickingState((uint64_t)a2, 4);
      theArray[0] = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a2, (uint64_t)theArray);
      uint64_t v23 = FigRoutingManagerUtilities_CopyEndpointsToAdd((uint64_t)a2, a1);
      uint64_t v24 = FigRoutingManagerUtilities_CopyEndpointsToRemove((uint64_t)a2, a1);
      FigRoutingManagerLogEndpointIDs(@"mxAudioContext_pickWHAGroupableEndpoints - endpointsToAdd are ", v23, 0, 1);
      FigRoutingManagerLogEndpointIDs(@"mxAudioContext_pickWHAGroupableEndpoints - endpointsToRemove are ", v24, 0, 1);
      if (!v23) {
        goto LABEL_48;
      }
      if (CFArrayGetCount(v23) >= 1)
      {
        CFIndex v25 = 0;
        do
        {
          int v26 = CFArrayGetValueAtIndex(v23, v25);
          mxAudioContext_removeActivatedEndpointFromContext(v26);
          ++v25;
        }
        while (v25 < CFArrayGetCount(v23));
      }
      if (CFArrayGetCount(v23) > 0)
      {
        FigRoutingManagerContextUtilities_AddCurrentlyActivatingSubEndpoints((uint64_t)a2, (uint64_t)theArray[0], v23, (uint64_t)v8, (uint64_t)a4);
      }
      else
      {
LABEL_48:
        if (v24 && CFArrayGetCount(v24) >= 1)
        {
          FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)a2, v8, @"configUpdateReasonStarted");
          mxAudioContext_addWHAGroupableEndpoints((CFIndex)a2, v23, v8, a4);
          mxAudioContext_removeWHAGroupableEndpoints((CFIndex)a2, v24, v8, a4);
          cf[0] = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)cf);
          FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(a2, cf[0], @"configUpdateReasonEndedSuccess", (uint64_t)v8);
          if (cf[0]) {
            CFRelease(cf[0]);
          }
          goto LABEL_52;
        }
      }
      mxAudioContext_addWHAGroupableEndpoints((CFIndex)a2, v23, v8, a4);
      mxAudioContext_removeWHAGroupableEndpoints((CFIndex)a2, v24, v8, a4);
      if (!v24)
      {
LABEL_53:
        if (v23) {
          CFRelease(v23);
        }
        if (theArray[0]) {
          CFRelease(theArray[0]);
        }
        goto LABEL_57;
      }
LABEL_52:
      CFRelease(v24);
      goto LABEL_53;
    }
  }
  else
  {
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)a2, 0, (uint64_t)theArray);
    if (FigRoutingManagerIsEndpointOfType((uint64_t)theArray[0]))
    {
      FigRoutingManagerRemoveAllSubEndpointsFromAggregate((uint64_t)theArray[0], a2, v8, a4, (uint64_t)mxAudioContext_removeEndpointCompletionCallback);
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)theArray[0]))
    {
      mxAudioContext_deactivateEndpoint(theArray[0], a2, (uint64_t)v8);
    }
    if (theArray[0]) {
      CFRelease(theArray[0]);
    }
    FigRoutingManagerContextUtilities_SetPickedEndpoints(a2, 0, @"configUpdateReasonEndedSuccess", (uint64_t)v8, 0);
  }
LABEL_57:
  if (v8) {
    CFRelease(v8);
  }
  return 0;
}

uint64_t MXAudioContext_ActivateAggregateEndpoint(uint64_t a1, const void *a2)
{
  uint64_t v3 = a1;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef EndpointActivateOptions = FigRoutingManagerCreateEndpointActivateOptions(a1, (uint64_t)a2, 0);
  uint64_t FigEndpointFeatures = FigRoutingManagerGetFigEndpointFeatures(v3, (uint64_t)a2);
  CFTypeRef v42 = 0;
  uint64_t v6 = (void *)MEMORY[0x1E4F20F28];
  uint64_t v7 = (void *)MEMORY[0x1E4F1CF80];
  if (v3)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v10 = v9 ? v9 : 0;
    uint64_t v11 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v10 + 48);
    if (v11) {
      v11(CMBaseObject, *v6, *v7, &v42);
    }
  }
  if (dword_1E9359DC0)
  {
    int v49 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v13 = v49;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v13 & 0xFFFFFFFE;
    }
    if (v14)
    {
      *(_DWORD *)unsigned int v46 = 136315650;
      *(void *)&v46[4] = "MXAudioContext_ActivateAggregateEndpoint";
      *(_WORD *)&unsigned char v46[12] = 2114;
      *(void *)&v46[14] = v42;
      *(_WORD *)&v46[22] = 2048;
      uint64_t v47 = FigEndpointFeatures;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFMutableDictionaryRef EndpointDelegateContext = FigRoutingManagerCreateEndpointDelegateContext();
  CFTypeRef v16 = malloc_type_malloc(0x18uLL, 0x60040149E097CuLL);
  if (v3) {
    CFTypeRef v17 = CFRetain((CFTypeRef)v3);
  }
  else {
    CFTypeRef v17 = 0;
  }
  v16[1] = v17;
  v16[2] = EndpointDelegateContext;
  *CFTypeRef v16 = 0;
  SharedManager = FigRoutingManagerGetSharedManager();
  MEMORY[0x199716EE0](SharedManager[7]);
  if (SharedManager[8]) {
    *(void *)SharedManager[9] = v16;
  }
  else {
    SharedManager[8] = v16;
  }
  SharedManager[9] = v16;
  MEMORY[0x199716EF0](SharedManager[7]);
  *(void *)os_log_type_t type = EndpointDelegateContext;
  uint64_t v39 = 0;
  uint64_t v40 = mxAudioContext_handleDidReceiveDataFromCommChannelDelegate;
  int v41 = mxAudioContext_handleDidCloseCommChannelDelegate;
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  os_log_type_t v21 = *(void (**)(uint64_t, os_log_type_t *))(v20 + 56);
  if (v21) {
    v21(v3, type);
  }
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  *(void *)unsigned int v46 = EndpointDelegateContext;
  *(void *)&v46[8] = mxAudioContext_handleAuthorizationRequiredDelegate;
  *(void *)&v46[16] = mxAudioContext_handleEndpointFailedDelegate;
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = *(void (**)(uint64_t, unsigned char *))(v23 + 48);
  if (v24) {
    v24(v3, v46);
  }
  uint64_t v37 = 0;
  FigRoutingManagerCreateEndpointActivateCompletionContext(a2, 0, 0, EndpointActivateOptions, &v37);
  uint64_t v25 = v37;
  CFTypeRef cf = 0;
  if (v3)
  {
    uint64_t v26 = FigEndpointGetCMBaseObject();
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v28 = v27 ? v27 : 0;
    unsigned int v29 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v28 + 48);
    if (v29) {
      v29(v26, *MEMORY[0x1E4F20F28], *v7, &cf);
    }
  }
  if (dword_1E9359DC0)
  {
    unsigned int v44 = 0;
    os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
    uint64_t v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v31 = v44;
    if (os_log_type_enabled(v30, v43)) {
      unsigned int v32 = v31;
    }
    else {
      unsigned int v32 = v31 & 0xFFFFFFFE;
    }
    if (v32)
    {
      int v49 = 136315906;
      int v50 = "mxAudioContext_aggregateEndpointActivateWithCompletionCallback";
      __int16 v51 = 2114;
      CFTypeRef v52 = cf;
      __int16 v53 = 1024;
      int v54 = FigEndpointFeatures;
      __int16 v55 = 2114;
      CFMutableDictionaryRef v56 = EndpointActivateOptions;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3)
  {
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v33) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    __int16 v35 = *(uint64_t (**)(uint64_t, uint64_t, CFMutableDictionaryRef, void, uint64_t))(v34 + 8);
    if (v35) {
      uint64_t v3 = v35(v3, FigEndpointFeatures, EndpointActivateOptions, mxAudioContext_aggregateEndpointActivateCompletionCallback, v25);
    }
    else {
      uint64_t v3 = 4294954514;
    }
  }
  else
  {
    mxAudioContext_aggregateEndpointActivateCompletionCallback(0, FigEndpointFeatures, 0, 0, v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v42)
  {
    CFRelease(v42);
    CFTypeRef v42 = 0;
  }
  if (EndpointActivateOptions) {
    CFRelease(EndpointActivateOptions);
  }
  return v3;
}

void mxAudioContext_handleDidReceiveDataFromCommChannelDelegate(const void *a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5)
{
  if (a1 && a3)
  {
    if (a4)
    {
      CFRetain(a1);
      CFRetain(a3);
      CFRetain(a4);
      DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __mxAudioContext_handleDidReceiveDataFromCommChannelDelegate_block_invoke;
      _OWORD v10[3] = &__block_descriptor_64_e5_v8__0l;
      v10[4] = a5;
      v10[5] = a3;
      void v10[6] = a4;
      void v10[7] = a1;
      MXDispatchAsync((uint64_t)"mxAudioContext_handleDidReceiveDataFromCommChannelDelegate", (uint64_t)"MXAudioContext_Embedded.m", 1005, 0, 0, DataTransmissionQueue, (uint64_t)v10);
    }
  }
}

void mxAudioContext_handleDidCloseCommChannelDelegate(CFTypeRef cf, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (cf && a3)
  {
    if (dword_1E9359DC0)
    {
      int v11 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRetain(cf);
    CFRetain(a3);
    DataTransmissionQueue = FigRoutingManager_GetDataTransmissionQueue();
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __mxAudioContext_handleDidCloseCommChannelDelegate_block_invoke;
    void v9[3] = &__block_descriptor_56_e5_v8__0l;
    v9[4] = a4;
    v9[5] = a3;
    void v9[6] = cf;
    MXDispatchAsync((uint64_t)"mxAudioContext_handleDidCloseCommChannelDelegate", (uint64_t)"MXAudioContext_Embedded.m", 1052, 0, 0, DataTransmissionQueue, (uint64_t)v9);
  }
}

void mxAudioContext_handleAuthorizationRequiredDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    CFTypeRef cf = 0;
    CFTypeRef v23 = 0;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    unsigned int v14 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v13 + 48);
    if (v14) {
      v14(CMBaseObject, *MEMORY[0x1E4F20F28], v10, &cf);
    }
    uint64_t v15 = FigEndpointGetCMBaseObject();
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    char v18 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v17 + 48);
    if (v18) {
      v18(v15, *MEMORY[0x1E4F20E38], v10, &v23);
    }
    CFMutableDictionaryRef v19 = FigRoutingManagerCopyAuthInfoForEndpoint(a2);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetValue();
    if (dword_1E9359DC0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(void *)&long long v24 = v19;
    *((void *)&v24 + 1) = Mutable;
    uint64_t v27 = a6;
    uint64_t v28 = a7;
    CFTypeRef v25 = v23;
    uint64_t v26 = a2;
    FigEndpointAuthRequestHandler_ProcessRequest(&v24);
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v19) {
      CFRelease(v19);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v23) {
      CFRelease(v23);
    }
  }
}

void mxAudioContext_handleEndpointFailedDelegate(const void *a1, uint64_t a2, const void *a3, const void *a4)
{
  if (a1 && a3)
  {
    SharedManager = FigRoutingManagerGetSharedManager();
    CFRetain(a1);
    CFRetain(a3);
    if (a4) {
      CFRetain(a4);
    }
    CFTypeRef v8 = *((void *)SharedManager + 1);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __mxAudioContext_handleEndpointFailedDelegate_block_invoke;
    void v9[3] = &__block_descriptor_56_e5_v8__0l;
    v9[4] = a4;
    v9[5] = a3;
    void v9[6] = a1;
    MXDispatchAsync((uint64_t)"mxAudioContext_handleEndpointFailedDelegate", (uint64_t)"MXAudioContext_Embedded.m", 1147, 0, 0, v8, (uint64_t)v9);
  }
}

void mxAudioContext_aggregateEndpointActivateCompletionCallback(const void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  SharedManager = FigRoutingManagerGetSharedManager();
  if (a5)
  {
    int v11 = *(const void **)a5;
    uint64_t v12 = *(void **)(a5 + 32);
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = 0;
  }
  [v12 timeIntervalSinceNow];
  double v14 = v13;
  if (a1) {
    CFRetain(a1);
  }
  if (v11) {
    CFRetain(v11);
  }
  float v15 = fabs(v14) * 1000.0;
  id v16 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  uint64_t v17 = *((void *)SharedManager + 1);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  long long v18[2] = __mxAudioContext_aggregateEndpointActivateCompletionCallback_block_invoke;
  v18[3] = &unk_1E57C8948;
  v18[4] = v16;
  v18[5] = a1;
  int v19 = a4;
  v18[6] = a3;
  void v18[7] = a2;
  float v20 = v15;
  os_log_type_t v18[8] = v11;
  v18[9] = a5;
  MXDispatchAsync((uint64_t)"mxAudioContext_aggregateEndpointActivateCompletionCallback", (uint64_t)"MXAudioContext_Embedded.m", 937, 0, 0, v17, (uint64_t)v18);
}

uint64_t mxAudioContext_removeEndpointFromAggregate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  v27[20] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t FigEndpoint = FigEndpointAggregateGetFigEndpoint();
  v27[0] = 0;
  FigRoutingManagerCreateAggregateAddEndpointCompletionContext(a3, a4, a5, v27);
  if (FigEndpoint)
  {
    CFArrayRef theArray = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v13 = v12 ? v12 : 0;
    double v14 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v13 + 48);
    if (v14)
    {
      v14(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
      if (theArray)
      {
        if (CFArrayGetCount(theArray) == 1 && FigRoutingManagerIsEndpointPresentInAggregate(a2, a1))
        {
          if (dword_1E9359DC0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CMSMUtility_InterruptSessionsWithRoutingContextUUID(a3);
        }
        if (theArray) {
          CFRelease(theArray);
        }
      }
    }
  }
  FigVolumeControllerRemoveAirPlayVolumeNotificationListeners((uint64_t)a2);
  if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled()) {
    FigRoutingManagerUtilities_UnRegisterAirPlayStreamCapabilitiesDidChangeListener(a1, a2);
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  char v18 = *(void (**)(const void *, void))(v17 + 48);
  if (v18) {
    v18(a2, 0);
  }
  EndpointDeactivateOptions = FigRoutingManagerCreateEndpointDeactivateOptions((uint64_t)a2, (uint64_t)a3);
  float v20 = v27[0];
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CFTypeRef v23 = *(uint64_t (**)(uint64_t, const void *, void, void (*)(const void *, CFTypeRef, uint64_t, uint64_t, int, uint64_t), void *))(v22 + 16);
  if (!v23 || (uint64_t v24 = v23(a1, a2, 0, mxAudioContext_removeEndpointCompletionCallback, v20), v24 == -12782))
  {
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)v27[0]);
    uint64_t v24 = 4294954514;
  }
  if (EndpointDeactivateOptions) {
    CFRelease(EndpointDeactivateOptions);
  }
  return v24;
}

void mxAudioContext_removeEndpointCompletionCallback(const void *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFRetain(cf);
    if (a1) {
      CFRetain(a1);
    }
    if (*(void *)a6) {
      CFTypeRef v12 = CFRetain(*(CFTypeRef *)a6);
    }
    else {
      CFTypeRef v12 = 0;
    }
    double v14 = *(const void **)(a6 + 8);
    if (v14) {
      CFTypeRef v15 = CFRetain(v14);
    }
    else {
      CFTypeRef v15 = 0;
    }
    uint64_t v16 = *(const void **)(a6 + 16);
    if (v16) {
      CFTypeRef v17 = CFRetain(v16);
    }
    else {
      CFTypeRef v17 = 0;
    }
    [*(id *)(a6 + 24) timeIntervalSinceNow];
    float v19 = fabs(v18) * 1000.0;
    SharedManager = FigRoutingManagerGetSharedManager();
    id v21 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
    uint64_t v22 = *((void *)SharedManager + 1);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __mxAudioContext_removeEndpointCompletionCallback_block_invoke;
    v23[3] = &unk_1E57C8920;
    v23[4] = v21;
    void v23[5] = cf;
    int v24 = a5;
    v23[6] = a4;
    v23[7] = a3;
    float v25 = v19;
    v23[8] = v12;
    v23[9] = v17;
    v23[10] = a1;
    void v23[11] = v15;
    v23[12] = a6;
    MXDispatchAsync((uint64_t)"mxAudioContext_removeEndpointCompletionCallback", (uint64_t)"MXAudioContext_Embedded.m", 574, 0, 0, v22, (uint64_t)v23);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)a6);
  }
}

void __mxAudioContext_removeEndpointCompletionCallback_block_invoke(uint64_t a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) timeIntervalSinceNow];
  CFTypeRef v21 = 0;
  uint64_t v2 = (void *)MEMORY[0x1E4F1CF80];
  if (*(void *)(a1 + 40))
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v5 = v4 ? v4 : 0;
    uint64_t v6 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
    if (v6) {
      v6(CMBaseObject, *MEMORY[0x1E4F20F28], *v2, &v21);
    }
  }
  if (dword_1E9359DC0)
  {
    LODWORD(v19) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  char v20 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints(*(void *)(a1 + 64), (CFMutableArrayRef *)cf);
  CFTypeRef v8 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf[0], 0);
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext(*(void *)(a1 + 64), (uint64_t)v8);
  FigVolumeControllerSaveRoutingContextState(*(const void **)(a1 + 64));
  if (v8) {
    CFRelease(v8);
  }
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(*(void *)(a1 + 64), *(void *)(a1 + 80), (uint64_t)&theArray);
  if (!theArray || !CFArrayGetCount(theArray)) {
    FigRoutingManagerContextUtilities_SetPickingState(*(void *)(a1 + 64), 0);
  }
  CFArrayRef v19 = 0;
  uint64_t v9 = FigEndpointGetCMBaseObject();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFTypeRef v12 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v11 + 48);
  if (v12 && (v12(v9, *MEMORY[0x1E4F20FB0], *v2, &v19), v19) && CFArrayGetCount(v19))
  {
    *(void *)os_log_type_t type = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(*(void *)(a1 + 64), 0, (uint64_t)type);
    FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(*(const void **)(a1 + 64), *(const void **)type, @"configUpdateReasonEndedBottomUpRouteChange", 0);
    if (*(void *)type) {
      CFRelease(*(CFTypeRef *)type);
    }
  }
  else
  {
    FigRoutingManagerContextUtilities_SetPickedEndpoints(*(const void **)(a1 + 64), 0, @"configUpdateReasonEndedBottomUpRouteChange", 0, 0);
  }
  if (v19)
  {
    CFRelease(v19);
    CFArrayRef v19 = 0;
  }
  if (v20) {
    FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(*(void *)(a1 + 64), *(const __CFDictionary **)(a1 + 88), @"configUpdateReasonEndedSuccess");
  }
  FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers(*(void *)(a1 + 64), *(const __CFDictionary **)(a1 + 88), @"configUpdateReasonGroupDevicesChanged");
  FigRoutingMangerDeactivateAggregateEndpointIfNecessary(*(void *)(a1 + 64), *(void *)(a1 + 80));
  FigVolumeControllerRecomputeMainVolume(*(const void **)(a1 + 64), 0.0);
  FigRoutingManagerDestroyAggregateAddEndpointCompletionContext(*(const void ***)(a1 + 96));
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (v21)
  {
    CFRelease(v21);
    CFTypeRef v21 = 0;
  }
  uint64_t v13 = *(const void **)(a1 + 40);
  if (v13) {
    CFRelease(v13);
  }
  double v14 = *(const void **)(a1 + 80);
  if (v14) {
    CFRelease(v14);
  }
  CFTypeRef v15 = *(const void **)(a1 + 64);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = *(const void **)(a1 + 88);
  if (v16) {
    CFRelease(v16);
  }
  CFTypeRef v17 = *(const void **)(a1 + 72);
  if (v17) {
    CFRelease(v17);
  }
}

void mxAudioContext_addEndpointCompletionCallback(const void *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFRetain(cf);
    if (a1) {
      CFRetain(a1);
    }
    if (*(void *)a6) {
      CFTypeRef v12 = CFRetain(*(CFTypeRef *)a6);
    }
    else {
      CFTypeRef v12 = 0;
    }
    double v14 = *(const void **)(a6 + 8);
    if (v14) {
      CFTypeRef v15 = CFRetain(v14);
    }
    else {
      CFTypeRef v15 = 0;
    }
    uint64_t v16 = *(const void **)(a6 + 16);
    if (v16) {
      CFTypeRef v17 = CFRetain(v16);
    }
    else {
      CFTypeRef v17 = 0;
    }
    [*(id *)(a6 + 24) timeIntervalSinceNow];
    float v19 = fabs(v18) * 1000.0;
    SharedManager = FigRoutingManagerGetSharedManager();
    id v21 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
    uint64_t v22 = *((void *)SharedManager + 1);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __mxAudioContext_addEndpointCompletionCallback_block_invoke;
    v23[3] = &unk_1E57C8F98;
    v23[4] = v21;
    void v23[5] = cf;
    int v24 = a5;
    v23[6] = a4;
    v23[7] = a3;
    float v25 = v19;
    v23[8] = v12;
    v23[9] = a1;
    v23[10] = v15;
    void v23[11] = v17;
    MXDispatchAsync((uint64_t)"mxAudioContext_addEndpointCompletionCallback", (uint64_t)"MXAudioContext_Embedded.m", 211, 0, 0, v22, (uint64_t)v23);
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)a6);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void __mxAudioContext_addEndpointCompletionCallback_block_invoke(uint64_t a1)
{
  v39[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) timeIntervalSinceNow];
  CFTypeRef v36 = 0;
  CFTypeRef v37 = 0;
  CFTypeRef v34 = 0;
  CFTypeRef v35 = 0;
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v5 + 48);
  if (v6) {
    v6(CMBaseObject, *MEMORY[0x1E4F20F28], v2, &v37);
  }
  uint64_t v7 = FigEndpointGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
  if (v10) {
    v10(v7, *MEMORY[0x1E4F20E38], v2, &v36);
  }
  uint64_t v11 = FigEndpointGetCMBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  double v14 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v13 + 48);
  if (v14) {
    v14(v11, *MEMORY[0x1E4F20D08], v2, &v35);
  }
  uint64_t v15 = FigEndpointGetCMBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  double v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
  if (v18) {
    v18(v15, *MEMORY[0x1E4F20EF0], v2, &v34);
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v20 = *(_DWORD *)(a1 + 96);
  if (v20 == -15580)
  {
    uint64_t v28 = *(const void **)(a1 + 72);
    if (!v28 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
      uint64_t v28 = 0;
    }
    FigRoutingManagerRetryAddingEndpointToAggregate(v28, *(const void **)(a1 + 40), *(const void **)(a1 + 64), *(const void **)(a1 + 80), *(const void **)(a1 + 88), (uint64_t)mxAudioContext_addEndpointCompletionCallback);
  }
  else
  {
    if (v20)
    {
      FigRoutingManagerHandleAddEndpointCompletionCallbackError(*(void *)(a1 + 72), *(void *)(a1 + 40), *(void *)(a1 + 48), v20, *(void *)(a1 + 64), *(void *)(a1 + 80));
      if (!FigEndpointAuthRequestHandler_HasEndpoint(*(void *)(a1 + 40))) {
        goto LABEL_42;
      }
      CFTypeRef v26 = v36;
      CFTypeRef v25 = v37;
      CFTypeRef v27 = v34;
      int v24 = 0;
      goto LABEL_41;
    }
    FigVolumeControllerAddAirPlayVolumeNotificationListeners(*(const void **)(a1 + 40));
    v39[0] = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)v39);
    CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)v39[0], (uint64_t)&cf);
    if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled()) {
      FigRoutingManagerUtilities_RegisterAirPlayStreamCapabilitiesDidChangeListener((uint64_t)cf, *(void *)(a1 + 40));
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v39[0])
    {
      CFRelease(v39[0]);
      v39[0] = 0;
    }
    FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(*(const void **)(a1 + 64), *(const void **)(a1 + 72), @"configUpdateReasonGroupDevicesChanged", *(void *)(a1 + 80));
    if (MX_FeatureFlags_IsMuteEnabled()) {
      FigVolumeControllerUnmuteEndpointIfAlreadyMuted(*(void *)(a1 + 40));
    }
    FigRoutingManagerContextUtilities_ResetCurrentlyActivatingSubEndpointsInfo(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 40), @"configUpdateReasonEndedSuccess", *(void *)(a1 + 80));
    if (FigEndpointAuthRequestHandler_HasEndpoint(*(void *)(a1 + 40)))
    {
      CFTypeRef v22 = v36;
      CFTypeRef v21 = v37;
      CFTypeRef v23 = v34;
      int v24 = FigCFEqual();
      CFTypeRef v25 = v21;
      CFTypeRef v26 = v22;
      CFTypeRef v27 = v23;
LABEL_41:
      FigEndpointUIAgentHelper_CleanupPrompt(v25, (uint64_t)v26, (uint64_t)v27, v24);
    }
  }
LABEL_42:
  if (*(_DWORD *)(a1 + 96) != -15580)
  {
    if (FigRoutingManagerUtilities_IsCurrentRouteHandoff()) {
      CMSMAP_MakeAirPlayHandOffPortRoutable(0, *(void *)(a1 + 64));
    }
    v39[0] = 0;
    FigRoutingManagerContextUtilities_CopyCurrentlyActivatingSubEndpoints(*(void *)(a1 + 64), *(void *)(a1 + 72), (uint64_t)v39);
    if (!v39[0] || !CFArrayGetCount((CFArrayRef)v39[0])) {
      FigRoutingManagerContextUtilities_SetPickingState(*(void *)(a1 + 64), 0);
    }
    if (v39[0]) {
      CFRelease(v39[0]);
    }
  }
  uint64_t v29 = *(const void **)(a1 + 88);
  if (v29) {
    CFRelease(v29);
  }
  uint64_t v30 = *(const void **)(a1 + 80);
  if (v30) {
    CFRelease(v30);
  }
  unsigned int v31 = *(const void **)(a1 + 64);
  if (v31) {
    CFRelease(v31);
  }
  unsigned int v32 = *(const void **)(a1 + 40);
  if (v32) {
    CFRelease(v32);
  }
  uint64_t v33 = *(const void **)(a1 + 72);
  if (v33) {
    CFRelease(v33);
  }
  if (v35)
  {
    CFRelease(v35);
    CFTypeRef v35 = 0;
  }
  if (v34)
  {
    CFRelease(v34);
    CFTypeRef v34 = 0;
  }
  if (v36)
  {
    CFRelease(v36);
    CFTypeRef v36 = 0;
  }
  if (v37)
  {
    CFRelease(v37);
    CFTypeRef v37 = 0;
  }
}

void __mxAudioContext_deactivateEndpoint_block_invoke(uint64_t a1)
{
  FigRoutingManagerStopDeactivateAirPlayEndpointTimer();
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

void mxAudioContext_endpointDeactivateCompletionCallback(CFTypeRef cf, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a5) {
    uint64_t v10 = *(void **)(a5 + 16);
  }
  else {
    uint64_t v10 = 0;
  }
  [v10 timeIntervalSinceNow];
  float v12 = fabs(v11) * 1000.0;
  SharedManager = FigRoutingManagerGetSharedManager();
  id v14 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  uint64_t v15 = *((void *)SharedManager + 1);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __mxAudioContext_endpointDeactivateCompletionCallback_block_invoke;
  v16[3] = &unk_1E57C8948;
  v16[4] = v14;
  v16[5] = cf;
  int v17 = a4;
  v16[6] = a3;
  void v16[7] = a2;
  float v18 = v12;
  uint8_t v16[8] = a5;
  v16[9] = a5;
  MXDispatchAsync((uint64_t)"mxAudioContext_endpointDeactivateCompletionCallback", (uint64_t)"MXAudioContext_Embedded.m", 409, 0, 0, v15, (uint64_t)v16);
}

void __mxAudioContext_endpointDeactivateCompletionCallback_block_invoke(uint64_t a1)
{
  cf[28] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) timeIntervalSinceNow];
  cf[0] = 0;
  if (*(void *)(a1 + 40))
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
    if (v5) {
      v5(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], cf);
    }
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v7 = *(uint64_t **)(a1 + 64);
  if (v7) {
    uint64_t v8 = *v7;
  }
  else {
    uint64_t v8 = 0;
  }
  FigRoutingManagerContextUtilities_RemoveActivatedEndpoint(v8, *(void *)(a1 + 40), *(void *)(a1 + 48));
  if (FigRoutingManagerIsEndpointOfType(*(void *)(a1 + 40))) {
    FigRoutingManagerRemoveCachedDelegateContext(*(void *)(a1 + 40));
  }
  FigRoutingManagerDestroyEndpointDeactivateCompletionContext(*(const void ***)(a1 + 72));
  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9) {
    CFRelease(v9);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

CFIndex mxAudioContext_addWHAGroupableEndpoints(CFIndex result, CFArrayRef theArray, const void *a3, const void *a4)
{
  if (theArray)
  {
    uint64_t v7 = (const void *)result;
    id result = CFArrayGetCount(theArray);
    if (result)
    {
      id result = CFArrayGetCount(theArray);
      if (result >= 1)
      {
        CFIndex v8 = result;
        for (CFIndex i = 0; i != v8; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          id result = mxAudioContext_addWHAGroupableEndpoint((uint64_t)ValueAtIndex, v7, a3, a4);
        }
      }
    }
  }
  return result;
}

CFIndex mxAudioContext_removeWHAGroupableEndpoints(CFIndex result, CFArrayRef theArray, const void *a3, const void *a4)
{
  if (theArray)
  {
    uint64_t v7 = (const void *)result;
    id result = CFArrayGetCount(theArray);
    if (result)
    {
      id result = CFArrayGetCount(theArray);
      if (result >= 1)
      {
        CFIndex v8 = result;
        for (CFIndex i = 0; i != v8; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          id result = mxAudioContext_removeWHAGroupableEndpoint(ValueAtIndex, v7, a3, a4);
        }
      }
    }
  }
  return result;
}

void __mxAudioContext_handleDidReceiveDataFromCommChannelDelegate_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 32);
  if (v2)
  {
    CFNumberRef Value = CFDictionaryGetValue(v2, @"EndpointDelegateContextKey_RoutingContextUUID");
    if (Value)
    {
      uint64_t v4 = (uint64_t)Value;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, @"commChannelUUID", *(const void **)(a1 + 40));
      CFDictionarySetValue(Mutable, @"data", *(const void **)(a1 + 48));
      FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(v4, @"didReceiveData", (uint64_t)Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
  uint64_t v6 = *(const void **)(a1 + 56);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
  CFIndex v8 = *(const void **)(a1 + 48);
  if (v8)
  {
    CFRelease(v8);
  }
}

void __mxAudioContext_handleDidCloseCommChannelDelegate_block_invoke(void *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)a1[4];
  if (v2)
  {
    CFNumberRef Value = CFDictionaryGetValue(v2, @"EndpointDelegateContextKey_RoutingContextUUID");
    if (Value)
    {
      uint64_t v4 = (uint64_t)Value;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetValue();
      FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers(v4, @"commChannelDidClose", (uint64_t)Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
  uint64_t v6 = (const void *)a1[6];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[5];
  if (v7)
  {
    CFRelease(v7);
  }
}

void __mxAudioContext_handleEndpointFailedDelegate_block_invoke(void *a1)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v37 = 0;
  int v36 = 0;
  CFNumberRef Value = (const void *)FigCFDictionaryGetValue();
  uint64_t v3 = (const void *)FigCFDictionaryGetValue();
  uint64_t v4 = (const void *)FigCFDictionaryGetValue();
  uint64_t v5 = FigCFDictionaryGetValue();
  FigCFDictionaryGetInt32IfPresent();
  uint64_t v6 = (const void *)FigCFDictionaryGetValue();
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (FigRoutingManagerIsEndpointOfType(a1[6]))
  {
    uint64_t v35 = 0;
    FigCFDictionaryGetInt64IfPresent();
    if (v6)
    {
      CFTypeRef v34 = 0;
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v11 + 48);
      if (v13) {
        v13(CMBaseObject, *MEMORY[0x1E4F20E38], v7, &v34);
      }
      uint64_t v14 = FigEndpointGetCMBaseObject();
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      int v17 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v16 + 48);
      if (v17) {
        v17(v14, *MEMORY[0x1E4F20F28], v7, &v37);
      }
      float v18 = FigEndpointDescriptorUtility_CopyDescriptorForEndpoint((uint64_t)v6, 0);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (v36)
      {
        cf[0] = 0;
        uint64_t v19 = FigEndpointGetCMBaseObject();
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        CFTypeRef v22 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v21 + 48);
        if (v22) {
          v22(v19, *MEMORY[0x1E4F20FB0], v7, cf);
        }
        CFMutableDictionaryRef RouteConfigUpdatedFailedPayload = FigRoutingContextUtilities_CreateRouteConfigUpdatedFailedPayload(0, (uint64_t)v34, v36, (const __CFArray *)cf[0]);
        FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)Value, @"routeConfigUpdated", (uint64_t)RouteConfigUpdatedFailedPayload);
        if (RouteConfigUpdatedFailedPayload) {
          CFRelease(RouteConfigUpdatedFailedPayload);
        }
        if (cf[0]) {
          CFRelease(cf[0]);
        }
      }
      *(void *)os_log_type_t type = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpointAggregate((uint64_t)Value, (uint64_t)type);
      if (*(void *)type)
      {
        int v24 = mxAudioContext_removeEndpointFromAggregate(*(uint64_t *)type, v6, Value, v3, v4);
        uint64_t FigEndpoint = (const void *)FigEndpointAggregateGetFigEndpoint();
        FigRoutingManagerContextUtilities_SetPickedEndpointAsAnArray(Value, FigEndpoint, @"configUpdateReasonEndedFailed", 0);
        if (v24)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          FigRoutingManagerLogEndpointID(@"mxAudioContext_handleEndpointFailedDelegate: Removed endpoint with ID from aggregate: ", (uint64_t)v6, 0, 0);
        }
      }
      if (FigCFEqual()) {
        FigRoutingManager_iOSHandleStartupFailed(v36, Mutable);
      }
      if (*(void *)type)
      {
        CFRelease(*(CFTypeRef *)type);
        *(void *)os_log_type_t type = 0;
      }
      if (v34)
      {
        CFRelease(v34);
        CFTypeRef v34 = 0;
      }
      if (v18) {
        CFRelease(v18);
      }
    }
    else
    {
      LODWORD(v34) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      float v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (dword_1E9359DC0)
  {
    LODWORD(v35) = 0;
    LOBYTE(v34) = 0;
    CFTypeRef v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v28 = v35;
    if (os_log_type_enabled(v27, (os_log_type_t)v34)) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFFE;
    }
    if (v29)
    {
      int v38 = 136316162;
      uint64_t v39 = "mxAudioContext_handleEndpointFailedDelegate_block_invoke";
      __int16 v40 = 2114;
      CFTypeRef v41 = v37;
      __int16 v42 = 1024;
      int v43 = v36;
      __int16 v44 = 2114;
      uint64_t v45 = v5;
      __int16 v46 = 2114;
      uint64_t v47 = Value;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v37)
  {
    CFRelease(v37);
    CFTypeRef v37 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v30 = (const void *)a1[6];
  if (v30) {
    CFRelease(v30);
  }
  unsigned int v31 = (const void *)a1[5];
  if (v31) {
    CFRelease(v31);
  }
  unsigned int v32 = (const void *)a1[4];
  if (v32) {
    CFRelease(v32);
  }
}

void __mxAudioContext_aggregateEndpointActivateCompletionCallback_block_invoke(uint64_t a1)
{
  cf[28] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) timeIntervalSinceNow];
  cf[0] = 0;
  if (*(void *)(a1 + 40))
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
    if (v5) {
      v5(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], cf);
    }
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (*(_DWORD *)(a1 + 80))
  {
    FigRoutingManagerRemoveCachedDelegateContext(v7);
  }
  else if (FigRoutingManagerIsEndpointOfType(v7))
  {
    FigRoutingManagerRegisterForFigEndpointNotifications(*(void *)(a1 + 40));
    FigRoutingManager_iOSHandleFigEndpointFeaturesActivation(*(void **)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 48), *(const void **)(a1 + 64), 0);
    FigRoutingManagerContextUtilities_AddActivatedEndpoint(*(void *)(a1 + 64), *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 48));
  }
  FigRoutingManagerDestroyEndpointActivateCompletionContext(*(CFTypeRef **)(a1 + 72));
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  CFIndex v8 = *(const void **)(a1 + 64);
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9) {
    CFRelease(v9);
  }
}

void FigVolumeControllerPostVolumeDidChangeNotifications(const void *a1, double a2, float a3)
{
  if (FigGetCFPreferenceNumberWithDefault())
  {
    if (dword_1E9359E20)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    volumeController_postEndpointVolumeDidChangeNotification();
    volumeController_recomputeMainVolume(a1, a3);
  }
  else
  {
    volumeController_postMainVolumeDidChangeNotification();
    volumeController_postEndpointVolumeDidChangeNotification();
  }
}

void volumeController_postEndpointVolumeDidChangeNotification()
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  Float32 = (const void *)FigCFNumberCreateFloat32();
  FigCFDictionarySetValue();
  CFTypeRef cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  volumeController_postNotificationWithPayload(cf, @"endpointVolumeDidChange", Mutable);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (Float32) {
    CFRelease(Float32);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void volumeController_recomputeMainVolume(const void *a1, float a2)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (a1)
  {
    float CachedMainVolume = volumeController_getCachedMainVolume(a1);
    cf[0] = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)cf);
    if (FigRoutingManagerAreAllEndpointsBluetoothShareable((const __CFArray *)cf[0])
      && !volumeController_isBluetoothSharingMainVolumeSupported((const __CFArray *)cf[0]))
    {
      if (dword_1E9359E20)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else if (CachedMainVolume < a2 && FVCUtilitiesIsVolumeDifferenceAboveThreshold(CachedMainVolume, a2) {
           || CachedMainVolume > a2
    }
           && (float MaxSubEndpointVolume = volumeController_getMaxSubEndpointVolume((const __CFArray *)cf[0]),
               MaxSubEndpointVolume >= 0.0)
           && (a2 = MaxSubEndpointVolume,
               FVCUtilitiesIsVolumeDifferenceAboveThreshold(CachedMainVolume, MaxSubEndpointVolume)))
    {
      volumeController_updateMainVolumeCache((uint64_t)a1, a2);
      volumeController_postMainVolumeDidChangeNotification();
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  else if (dword_1E9359E20)
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void volumeController_postMainVolumeDidChangeNotification()
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  FigCFDictionarySetValue();
  Float32 = (const void *)FigCFNumberCreateFloat32();
  FigCFDictionarySetValue();
  volumeController_postNotificationWithPayload(cf, @"masterVolumeDidChange", Mutable);
  if (Float32) {
    CFRelease(Float32);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void FigVolumeControllerAddAirPlayVolumeNotificationListeners(const void *a1)
{
  if (a1)
  {
    CFTypeRef v45 = 0;
    FigVolumeControllerCopySharedController(&v45);
    CFTypeRef cf = 0;
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v5 + 48);
    if (v6) {
      v6(CMBaseObject, *MEMORY[0x1E4F20F28], v2, &cf);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v7 = *MEMORY[0x1E4F207A8];
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CFTypeRef v46 = 0;
    CMTimeValue value = 0;
    CFIndex v8 = (const void *)*MEMORY[0x1E4F20E38];
    uint64_t v9 = FigEndpointGetCMBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    float v12 = *(void (**)(uint64_t, const void *, const __CFAllocator *, void **))(v11 + 48);
    if (v12) {
      v12(v9, v8, v2, &value);
    }
    uint64_t v13 = FigEndpointGetCMBaseObject();
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    float v18 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v17 + 48);
    if (v18)
    {
      uint64_t v19 = (const void *)*MEMORY[0x1E4F21080];
      v18(v13, *MEMORY[0x1E4F21080], v2, &v46);
      uint64_t v20 = value;
      if (!value || !v46)
      {
LABEL_23:
        if (v20)
        {
          CFRelease(v20);
          CMTimeValue value = 0;
        }
        int v24 = (int)v46;
        if (v46) {
          CFRelease(v46);
        }
        volumeController_handleAirPlayVolumeControlSupportDidChangeNotification(v24, v14, v15, a1);
        volumeController_handleAirPlayVolumeControlTypeDidChangeNotification(v25, v26, v27, a1);
        if (!MX_FeatureFlags_IsMuteEnabled()) {
          goto LABEL_47;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t v28 = *MEMORY[0x1E4F20740];
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CFTypeRef v46 = 0;
        CMTimeValue value = 0;
        uint64_t v29 = FigEndpointGetCMBaseObject();
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        unsigned int v32 = *(void (**)(uint64_t, const void *, const __CFAllocator *, void **))(v31 + 48);
        if (v32) {
          v32(v29, v8, v2, &value);
        }
        uint64_t v33 = FigEndpointGetCMBaseObject();
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        int v38 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v37 + 48);
        if (v38)
        {
          v38(v33, *MEMORY[0x1E4F20EA0], v2, &v46);
          uint64_t v39 = value;
          if (!value || !v46) {
            goto LABEL_42;
          }
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          FigCFDictionarySetValue();
          int v41 = FigCFDictionarySetValue();
          volumeController_handleAirPlayMutedByUserDidChangeNotification(v41, v42, v28, a1, Mutable);
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
        uint64_t v39 = value;
LABEL_42:
        if (v39)
        {
          CFRelease(v39);
          CMTimeValue value = 0;
        }
        int v43 = (int)v46;
        if (v46) {
          CFRelease(v46);
        }
        volumeController_handleAirPlayMuteControlSupportDidChangeNotification(v43, v34, v35, a1);
LABEL_47:
        if (v45) {
          CFRelease(v45);
        }
        return;
      }
      uint64_t v21 = CFDictionaryCreateMutable(v2, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v21, v8, value);
      CFDictionarySetValue(v21, v19, v46);
      volumeController_handleAirPlayVolumeDidChangeNotification(v22, v23, v7, a1, v21);
      if (v21) {
        CFRelease(v21);
      }
    }
    uint64_t v20 = value;
    goto LABEL_23;
  }
}

void volumeController_handleAirPlayVolumeDidChangeNotification(int a1, int a2, int a3, CFTypeRef cf, const void *a5)
{
  cfa[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    uint64_t TypeID = FigEndpointGetTypeID();
    if (a5)
    {
      if (v6 == TypeID)
      {
        CFTypeID v8 = CFGetTypeID(a5);
        if (v8 == CFDictionaryGetTypeID())
        {
          CFTypeRef v33 = 0;
          uint64_t v9 = *MEMORY[0x1E4F1CF80];
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
          if (v13)
          {
            v13(CMBaseObject, *MEMORY[0x1E4F20F78], v9, &v33);
            CFTypeRef v14 = v33;
          }
          else
          {
            CFTypeRef v14 = 0;
          }
          if (volumeController_contextSupportsVolumeOperations(v14))
          {
            CFTypeRef v32 = 0;
            uint64_t v15 = FigEndpointGetCMBaseObject();
            uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v16) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            float v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
            if (v18) {
              v18(v15, *MEMORY[0x1E4F20F28], v9, &v32);
            }
            CFTypeRef v31 = 0;
            uint64_t v19 = FigEndpointGetCMBaseObject();
            uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v20) {
              uint64_t v21 = v20;
            }
            else {
              uint64_t v21 = 0;
            }
            int v22 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v21 + 48);
            if (v22) {
              v22(v19, *MEMORY[0x1E4F20E38], v9, &v31);
            }
            if (dword_1E9359E20)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (v31)
            {
              cfa[0] = 0;
              uint64_t v24 = FigEndpointGetCMBaseObject();
              uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v25) {
                uint64_t v26 = v25;
              }
              else {
                uint64_t v26 = 0;
              }
              int v27 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v26 + 48);
              if (v27)
              {
                v27(v24, *MEMORY[0x1E4F21080], v9, cfa);
                if (cfa[0])
                {
                  FigCFNumberGetFloat32();
                  float v29 = v28;
                  volumeController_recomputeMainVolume(v33, v28);
                  volumeController_postEndpointVolumeDidChangeNotification();
                  if (!CMSMDeviceState_IsHomePodHub())
                  {
                    VolumeNotificationPayload = CMSMNotificationUtility_CreateVolumeNotificationPayload(@"Audio/Video", @"ExplicitVolumeChange", 0, 0, 0, v29);
                    CMSMNotificationUtility_PostVolumeDidChangeToAVSystemControllersWithPayload((uint64_t)VolumeNotificationPayload);
                    if (VolumeNotificationPayload) {
                      CFRelease(VolumeNotificationPayload);
                    }
                  }
                  if (cfa[0]) {
                    CFRelease(cfa[0]);
                  }
                }
              }
              if (v31)
              {
                CFRelease(v31);
                CFTypeRef v31 = 0;
              }
            }
            if (v32)
            {
              CFRelease(v32);
              CFTypeRef v32 = 0;
            }
          }
          if (v33) {
            CFRelease(v33);
          }
        }
      }
    }
  }
}

void volumeController_handleAirPlayVolumeControlSupportDidChangeNotification(int a1, int a2, int a3, CFTypeRef cf)
{
  cfa[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == FigEndpointGetTypeID())
    {
      CFTypeRef v24 = 0;
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
      if (v10)
      {
        v10(CMBaseObject, *MEMORY[0x1E4F20F78], v6, &v24);
        CFTypeRef v11 = v24;
      }
      else
      {
        CFTypeRef v11 = 0;
      }
      if (volumeController_contextSupportsVolumeOperations(v11))
      {
        uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFC8];
        int v22 = (const void *)*MEMORY[0x1E4F1CFC8];
        CFTypeRef v23 = 0;
        if (FigRoutingManagerIsEndpointOfType((uint64_t)cf))
        {
          uint64_t v13 = FigEndpointGetCMBaseObject();
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v14) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v16 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v15 + 48);
          if (v16) {
            v16(v13, *MEMORY[0x1E4F20E38], v6, &v23);
          }
          uint64_t v17 = FigEndpointGetCMBaseObject();
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v18) {
            uint64_t v19 = v18;
          }
          else {
            uint64_t v19 = 0;
          }
          uint64_t v20 = *(void (**)(uint64_t, void, uint64_t, const void **))(v19 + 48);
          if (v20) {
            v20(v17, *MEMORY[0x1E4F21088], v6, &v22);
          }
          if (dword_1E9359E20)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          volumeController_postEndpointVolumeControlDidChangeNotification();
          cfa[0] = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v24, (uint64_t)cfa);
          volumeController_updateMainVolumeControl((int)v24, (CFArrayRef)cfa[0]);
          if (cfa[0]) {
            CFRelease(cfa[0]);
          }
          uint64_t v12 = v22;
        }
        if (v12)
        {
          CFRelease(v12);
          int v22 = 0;
        }
        if (v23)
        {
          CFRelease(v23);
          CFTypeRef v23 = 0;
        }
      }
      if (v24) {
        CFRelease(v24);
      }
    }
  }
}

void volumeController_handleAirPlayVolumeControlTypeDidChangeNotification(int a1, int a2, int a3, CFTypeRef cf)
{
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == FigEndpointGetTypeID())
    {
      CFTypeRef v23 = 0;
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
      if (v10)
      {
        v10(CMBaseObject, *MEMORY[0x1E4F20F78], v6, &v23);
        CFTypeRef v11 = v23;
      }
      else
      {
        CFTypeRef v11 = 0;
      }
      if (volumeController_contextSupportsVolumeOperations(v11)
        && FigRoutingManagerIsEndpointOfType((uint64_t)cf))
      {
        CFTypeRef v21 = 0;
        CFTypeRef v22 = 0;
        uint64_t v12 = FigEndpointGetCMBaseObject();
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
        if (v15) {
          v15(v12, *MEMORY[0x1E4F20E38], v6, &v22);
        }
        uint64_t v16 = FigEndpointGetCMBaseObject();
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v18 + 48);
        if (v19)
        {
          v19(v16, *MEMORY[0x1E4F21090], v6, &v21);
          if (v21)
          {
            FigCFNumberGetUInt64();
            volumeController_postEndpointVolumeControlTypeDidChangeNotification();
          }
        }
        CFTypeRef cfa = 0;
        FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v23, (uint64_t)&cfa);
        volumeController_updateMainVolumeControlType((int)v23, (CFArrayRef)cfa);
        if (cfa)
        {
          CFRelease(cfa);
          CFTypeRef cfa = 0;
        }
        if (v22)
        {
          CFRelease(v22);
          CFTypeRef v22 = 0;
        }
        if (v21) {
          CFRelease(v21);
        }
      }
      if (v23) {
        CFRelease(v23);
      }
    }
  }
}

void volumeController_handleAirPlayMutedByUserDidChangeNotification(int a1, int a2, int a3, CFTypeRef cf, const void *a5)
{
  v32[26] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    uint64_t TypeID = FigEndpointGetTypeID();
    if (a5)
    {
      if (v6 == TypeID)
      {
        CFTypeID v8 = CFGetTypeID(a5);
        if (v8 == CFDictionaryGetTypeID())
        {
          v32[0] = 0;
          uint64_t v9 = *MEMORY[0x1E4F1CF80];
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v12 + 48);
          if (v13)
          {
            v13(CMBaseObject, *MEMORY[0x1E4F20F78], v9, v32);
            CFTypeRef v14 = v32[0];
          }
          else
          {
            CFTypeRef v14 = 0;
          }
          if (volumeController_contextSupportsVolumeOperations(v14))
          {
            CFTypeRef v31 = 0;
            uint64_t v15 = FigEndpointGetCMBaseObject();
            uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v16) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
            if (v18) {
              v18(v15, *MEMORY[0x1E4F20F28], v9, &v31);
            }
            CFTypeRef cfa = 0;
            uint64_t v19 = FigEndpointGetCMBaseObject();
            uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v20) {
              uint64_t v21 = v20;
            }
            else {
              uint64_t v21 = 0;
            }
            CFTypeRef v22 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v21 + 48);
            if (v22) {
              v22(v19, *MEMORY[0x1E4F20E38], v9, &cfa);
            }
            CFTypeRef v29 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
            uint64_t v23 = FigEndpointGetCMBaseObject();
            uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v24) {
              uint64_t v25 = v24;
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v25 + 48);
            if (v26) {
              v26(v23, *MEMORY[0x1E4F20EA0], v9, &v29);
            }
            if (dword_1E9359E20)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CFTypeRef v28 = cfa;
            if (cfa && v29)
            {
              volumeController_postEndpointMuteByUserDidChangeNotification();
              CFTypeRef v28 = cfa;
            }
            if (v28)
            {
              CFRelease(v28);
              CFTypeRef cfa = 0;
            }
            if (v29)
            {
              CFRelease(v29);
              CFTypeRef v29 = 0;
            }
            if (v31)
            {
              CFRelease(v31);
              CFTypeRef v31 = 0;
            }
          }
          if (v32[0]) {
            CFRelease(v32[0]);
          }
        }
      }
    }
  }
}

void volumeController_handleAirPlayMuteControlSupportDidChangeNotification(int a1, int a2, int a3, CFTypeRef cf)
{
  cfa[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == FigEndpointGetTypeID())
    {
      CFTypeRef v23 = 0;
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v8 + 48);
      if (v9)
      {
        v9(CMBaseObject, *MEMORY[0x1E4F20F78], v5, &v23);
        CFTypeRef v10 = v23;
      }
      else
      {
        CFTypeRef v10 = 0;
      }
      if (volumeController_contextSupportsVolumeOperations(v10))
      {
        CFTypeRef v21 = 0;
        CFTypeRef v22 = 0;
        uint64_t v11 = FigEndpointGetCMBaseObject();
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        CFTypeRef v14 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v13 + 48);
        if (v14) {
          v14(v11, *MEMORY[0x1E4F20E38], v5, &v22);
        }
        uint64_t v15 = FigEndpointGetCMBaseObject();
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v16) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v17 + 48);
        if (v18)
        {
          v18(v15, *MEMORY[0x1E4F20F20], v5, &v21);
          if (v21)
          {
            CFDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            FigCFDictionarySetValue();
            FigCFDictionarySetValue();
            cfa[0] = 0;
            FigVolumeControllerCopySharedController(cfa);
            volumeController_postNotificationWithPayload(cfa[0], @"muteControlSupportDidChange", Mutable);
            if (cfa[0])
            {
              CFRelease(cfa[0]);
              cfa[0] = 0;
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
          }
        }
        if (dword_1E9359E20)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v21)
        {
          CFRelease(v21);
          CFTypeRef v21 = 0;
        }
        if (v22)
        {
          CFRelease(v22);
          CFTypeRef v22 = 0;
        }
      }
      if (v23) {
        CFRelease(v23);
      }
    }
  }
}

void FigVolumeControllerRemoveAirPlayVolumeNotificationListeners(uint64_t a1)
{
  if (a1)
  {
    CFTypeRef v6 = 0;
    FigVolumeControllerCopySharedController(&v6);
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    CFTypeID v4 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v3 + 48);
    if (v4)
    {
      v4(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &cf);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (MX_FeatureFlags_IsMuteEnabled())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    if (v6) {
      CFRelease(v6);
    }
  }
}

uint64_t FigVolumeControllerUnmuteEndpointIfAlreadyMuted(uint64_t a1)
{
  v19[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v19[0] = 0;
  FigVolumeControllerCopySharedController(v19);
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  if (a1)
  {
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v5 + 48);
    if (v7) {
      v7(CMBaseObject, *MEMORY[0x1E4F20F28], v2, &cf);
    }
    uint64_t v8 = FigEndpointGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v10 + 48);
    if (v11)
    {
      v11(v8, *MEMORY[0x1E4F20E38], v2, &v17);
      CFTypeRef v12 = v17;
    }
    else
    {
      CFTypeRef v12 = 0;
    }
    char v16 = 0;
    uint64_t MuteOfEndpointWithID = volumeController_GetMuteOfEndpointWithID((uint64_t)v19[0], (uint64_t)v12, &v16);
    if (v16)
    {
      if (dword_1E9359E20)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t MuteOfEndpointWithID = volumeController_SetMuteOfEndpointWithID((uint64_t)v19[0], (uint64_t)v17, 0);
    }
    uint64_t v6 = MuteOfEndpointWithID;
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v17)
    {
      CFRelease(v17);
      CFTypeRef v17 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v19[0]) {
    CFRelease(v19[0]);
  }
  return v6;
}

uint64_t volumeController_SetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, int a3)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!MX_FeatureFlags_IsMuteEnabled()) {
    return 0;
  }
  CFTypeRef v16 = 0;
  CFTypeRef v17 = 0;
  CFTypeRef v15 = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&v17);
  if (!v17) {
    return 4294949706;
  }
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v8 = v7 ? v7 : 0;
  uint64_t v10 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v8 + 48);
  if (!v10) {
    return 4294949706;
  }
  v10(CMBaseObject, *MEMORY[0x1E4F20F78], *MEMORY[0x1E4F1CF80], &v15);
  if (!v15) {
    return 4294949706;
  }
  if (FigRoutingManagerIsEndpointOfType((uint64_t)v17))
  {
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v15, (uint64_t)&v16);
    uint64_t v9 = FigCFArrayContainsValue();
    if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v17))
    {
      cf[0] = 0;
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v15, (uint64_t)cf);
      CFTypeRef v11 = v17;
      CFTypeRef v12 = cf[0];
      if (!cf[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
        CFTypeRef v12 = 0;
      }
      if (FigRoutingManagerIsEndpointPresentInAggregate(v11, (uint64_t)v12)) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v9;
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    if (v9)
    {
      uint64_t v9 = volumeController_setMuteForEndpoint(v17, a3);
      if (dword_1E9359E20)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v17)
  {
    CFRelease(v17);
    CFTypeRef v17 = 0;
  }
  if (v16)
  {
    CFRelease(v16);
    CFTypeRef v16 = 0;
  }
  if (v15) {
    CFRelease(v15);
  }
  return v9;
}

uint64_t FigVolumeControllerSaveRoutingContextState(const void *a1)
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  int ContextType = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  if (ContextType == 7 || ContextType == 9) {
    return 0;
  }
  CFTypeRef v59 = 0;
  FigVolumeControllerCopySharedController(&v59);
  if (dword_1E9359E20)
  {
    unsigned int v61 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v4 = v61;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    if (v5)
    {
      uint64_t ContextString = FigRoutingManagerContextUtilities_GetContextString((uint64_t)a1);
      *(_DWORD *)CFTypeRef cf = 136315651;
      *(void *)&cf[4] = "FigVolumeControllerSaveRoutingContextState";
      __int16 v63 = 2113;
      unsigned int v64 = a1;
      __int16 v65 = 2114;
      uint64_t v66 = ContextString;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 8));
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), a1);
  if (!a1) {
    goto LABEL_56;
  }
  theArray[0] = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)theArray);
  if (!theArray[0]) {
    goto LABEL_56;
  }
  if (CFArrayGetCount(theArray[0]) != 1)
  {
    if (!theArray[0])
    {
LABEL_56:
      if (dword_1E9359E20)
      {
        unsigned int v61 = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        CFTypeRef v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v29 = v61;
        if (os_log_type_enabled(v28, type[0])) {
          unsigned int v30 = v29;
        }
        else {
          unsigned int v30 = v29 & 0xFFFFFFFE;
        }
        if (v30)
        {
          *(_DWORD *)CFTypeRef cf = 136315394;
          *(void *)&cf[4] = "FigVolumeControllerSaveRoutingContextState";
          __int16 v63 = 2114;
          unsigned int v64 = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      volumeController_postVolumeOperationsSupportedForRoutingContextDidChangeNotification(v59, a1, 0);
      volumeController_postMuteOperationsSupportedForRoutingContextDidChangeNotification(v59, a1, 0);
      if (Value)
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), a1);
        theArray[0] = 0;
        FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs((uint64_t)a1, (uint64_t)theArray);
        if (theArray[0])
        {
          CFIndex Count = CFArrayGetCount(theArray[0]);
          if (Count >= 1)
          {
            CFIndex v32 = Count;
            for (CFIndex i = 0; i != v32; ++i)
            {
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], i);
              CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), ValueAtIndex);
            }
          }
          if (theArray[0]) {
            CFRelease(theArray[0]);
          }
        }
      }
      MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
      *(void *)CFTypeRef cf = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)cf);
      goto LABEL_71;
    }
    if (CFArrayGetCount(theArray[0]) >= 2)
    {
      BOOL v13 = FigRoutingManagerAreAllEndpointsBluetoothShareable(theArray[0]);
      goto LABEL_47;
    }
    goto LABEL_33;
  }
  uint64_t v9 = CFArrayGetValueAtIndex(theArray[0], 0);
  int v10 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  BOOL v12 = v10 == 1 || (v10 - 3) < 2;
  if (!FigRoutingManagerIsEndpointOfType((uint64_t)v9) || !v12)
  {
    *(void *)CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    CFTypeRef v17 = *(void (**)(uint64_t, void, void, unsigned char *))(v16 + 48);
    if (v17)
    {
      v17(CMBaseObject, *MEMORY[0x1E4F20FB8], *MEMORY[0x1E4F1CF80], cf);
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
    }
LABEL_33:
    BOOL v13 = 0;
    goto LABEL_47;
  }
  if (v10 == 4)
  {
    *(void *)CFTypeRef cf = 0;
    uint64_t v18 = FigEndpointGetCMBaseObject();
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    CFTypeRef v21 = *(void (**)(uint64_t, void, void, unsigned char *))(v20 + 48);
    BOOL v13 = 1;
    if (v21)
    {
      v21(v18, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], cf);
      if (*(void *)cf)
      {
        CFIndex v22 = CFArrayGetCount(*(CFArrayRef *)cf);
        if (v22 >= 1)
        {
          CFIndex v23 = v22;
          uint64_t v24 = CFArrayGetValueAtIndex(*(CFArrayRef *)cf, 0);
          if (v23 == 1 && FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay((uint64_t)v24)) {
            BOOL v13 = 0;
          }
        }
      }
    }
  }
  else
  {
    if (v10 != 3)
    {
      BOOL v13 = 1;
      goto LABEL_47;
    }
    *(void *)CFTypeRef cf = 0;
    FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)cf);
    BOOL v13 = FigRoutingContextUtilities_IsFollowingAnotherContext(*(uint64_t *)cf) == 0;
  }
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
LABEL_47:
  if (theArray[0]) {
    CFRelease(theArray[0]);
  }
  if (!v13) {
    goto LABEL_56;
  }
  if (dword_1E9359E20)
  {
    unsigned int v61 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v26 = v61;
    if (os_log_type_enabled(v25, type[0])) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = v26 & 0xFFFFFFFE;
    }
    if (v27)
    {
      *(_DWORD *)CFTypeRef cf = 136315394;
      *(void *)&cf[4] = "FigVolumeControllerSaveRoutingContextState";
      __int16 v63 = 2114;
      unsigned int v64 = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  volumeController_postVolumeOperationsSupportedForRoutingContextDidChangeNotification(v59, a1, 1);
  volumeController_postMuteOperationsSupportedForRoutingContextDidChangeNotification(v59, a1, 1);
  if (!Value)
  {
    CFMutableDictionaryRef ContextStateDict = volumeController_createContextStateDict(0.0);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), a1, ContextStateDict);
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs((uint64_t)a1, (uint64_t)theArray);
    if (theArray[0])
    {
      CFIndex v51 = CFArrayGetCount(theArray[0]);
      if (v51 >= 1)
      {
        CFIndex v52 = v51;
        for (CFIndex j = 0; j != v52; ++j)
        {
          int v54 = CFArrayGetValueAtIndex(theArray[0], j);
          CFMutableDictionaryRef v55 = volumeController_createContextStateDict(0.0);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), v54, v55);
          if (v55) {
            CFRelease(v55);
          }
        }
      }
      if (theArray[0])
      {
        CFRelease(theArray[0]);
        theArray[0] = 0;
      }
    }
    if (ContextStateDict) {
      CFRelease(ContextStateDict);
    }
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
  *(void *)CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)cf);
  float CachedMainVolume = volumeController_getCachedMainVolume(a1);
  float MaxSubEndpointVolume = volumeController_getMaxSubEndpointVolume(*(const __CFArray **)cf);
  if (MaxSubEndpointVolume >= 0.0)
  {
    float v58 = MaxSubEndpointVolume;
    if (FVCUtilitiesIsVolumeDifferenceAboveThreshold(CachedMainVolume, MaxSubEndpointVolume)) {
      volumeController_updateMainVolumeCache((uint64_t)a1, v58);
    }
  }
  volumeController_updateMainVolumeControl((int)a1, *(CFArrayRef *)cf);
  volumeController_updateMainVolumeControlType((int)a1, *(CFArrayRef *)cf);
LABEL_71:
  int v35 = FigRoutingManagerContextUtilities_GetContextType((uint64_t)a1);
  CFArrayRef v36 = *(const __CFArray **)cf;
  if (v35 == 1)
  {
    if (*(void *)cf && (v37 = CFArrayGetCount(*(CFArrayRef *)cf), CFArrayRef v36 = *(const __CFArray **)cf, v37 >= 2))
    {
      int v38 = FigRoutingManagerAreAllEndpointsBluetoothShareable(*(const __CFArray **)cf);
      CFArrayRef v36 = *(const __CFArray **)cf;
    }
    else
    {
      int v38 = 0;
    }
    if (FigVolumeControllerSaveRoutingContextState_cachedBluetoothSharingActive != v38)
    {
      if (v38)
      {
        unsigned int v61 = 0;
        volumeController_getMainVolume(a1, (float *)&v61);
        volumeController_postMainVolumeDidChangeNotification();
        volumeController_postMainVolumeControlDidChangeNotification();
        volumeController_postMainVolumeControlTypeDidChangeNotification();
        CFIndex v39 = CFArrayGetCount(v36);
        if (v39 >= 1)
        {
          CFIndex v40 = v39;
          CFIndex v41 = 0;
          uint64_t v42 = *MEMORY[0x1E4F20E38];
          uint64_t v43 = *MEMORY[0x1E4F1CF80];
          do
          {
            __int16 v44 = CFArrayGetValueAtIndex(v36, v41);
            *(_DWORD *)os_log_type_t type = 0;
            volumeController_getVolumeForEndpoint(v44, type);
            theArray[0] = 0;
            uint64_t v45 = FigEndpointGetCMBaseObject();
            uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v46) {
              uint64_t v47 = v46;
            }
            else {
              uint64_t v47 = 0;
            }
            uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, CFArrayRef *))(v47 + 48);
            if (v48) {
              v48(v45, v42, v43, theArray);
            }
            volumeController_postEndpointVolumeDidChangeNotification();
            volumeController_postEndpointVolumeControlDidChangeNotification();
            volumeController_postEndpointVolumeControlTypeDidChangeNotification();
            if (theArray[0]) {
              CFRelease(theArray[0]);
            }
            ++v41;
          }
          while (v40 != v41);
        }
      }
      else
      {
        volumeController_postMainVolumeControlDidChangeNotification();
        volumeController_postMainVolumeControlTypeDidChangeNotification();
      }
      FigVolumeControllerSaveRoutingContextState_cachedBluetoothSharingActive = v38;
      CFArrayRef v36 = *(const __CFArray **)cf;
    }
  }
  if (v36)
  {
    CFRelease(v36);
    *(void *)CFTypeRef cf = 0;
  }
  if (v59) {
    CFRelease(v59);
  }
  return 0;
}

void volumeController_postVolumeOperationsSupportedForRoutingContextDidChangeNotification(const void *a1, const void *a2, int a3)
{
  if (volumeController_postVolumeOperationsSupportedForRoutingContextDidChangeNotification_cachedVolumeOperationsSupported != a3)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v7 = Mutable;
    uint64_t v8 = (const void **)MEMORY[0x1E4F1CFC8];
    if (a3) {
      uint64_t v8 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(Mutable, @"routingContext_CanUseForRoutingContext", *v8);
    CFDictionarySetValue(v7, @"masterVolumeKey_RoutingContextUUID", a2);
    volumeController_postNotificationWithPayload(a1, @"canUseForRoutingContextDidChange", v7);
    volumeController_postVolumeOperationsSupportedForRoutingContextDidChangeNotification_cachedVolumeOperationsSupported = a3;
    if (v7)
    {
      CFRelease(v7);
    }
  }
}

void volumeController_postMuteOperationsSupportedForRoutingContextDidChangeNotification(const void *a1, const void *a2, int a3)
{
  if (volumeController_postMuteOperationsSupportedForRoutingContextDidChangeNotification_cachedMuteOperationsSupported != a3)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v7 = Mutable;
    uint64_t v8 = (const void **)MEMORY[0x1E4F1CFC8];
    if (a3) {
      uint64_t v8 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(Mutable, @"routingContext_CanUseForRoutingContext", *v8);
    CFDictionarySetValue(v7, @"masterVolumeKey_RoutingContextUUID", a2);
    volumeController_postNotificationWithPayload(a1, @"MuteControlSupportForRoutingContextDidChang", v7);
    volumeController_postMuteOperationsSupportedForRoutingContextDidChangeNotification_cachedMuteOperationsSupported = a3;
    if (v7)
    {
      CFRelease(v7);
    }
  }
}

CFMutableDictionaryRef volumeController_createContextStateDict(float a1)
{
  float valuePtr = a1;
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v3 = CFNumberCreate(v1, kCFNumberFloat32Type, &valuePtr);
  FigCFDictionarySetValue();
  if (v3) {
    CFRelease(v3);
  }
  return Mutable;
}

float volumeController_getCachedMainVolume(const void *a1)
{
  float valuePtr = 0.0;
  CFTypeRef cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 8));
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), a1);
  if (Value)
  {
    CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(Value, @"MainVolume");
    if (v4) {
      CFNumberGetValue(v4, kCFNumberFloat32Type, &valuePtr);
    }
  }
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
  if (cf) {
    CFRelease(cf);
  }
  return valuePtr;
}

float volumeController_getMaxSubEndpointVolume(const __CFArray *a1)
{
  if (a1)
  {
    if (CFArrayGetCount(a1) == 1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
      float v3 = -1.0;
      if (ValueAtIndex && FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
      {
        CFArrayRef theArray = 0;
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v5) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = 0;
        }
        CFTypeRef v11 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v6 + 48);
        if (v11)
        {
          uint64_t v12 = *MEMORY[0x1E4F1CF80];
          v11(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
          if (!theArray) {
            return v3;
          }
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            CFIndex v14 = Count;
            CFIndex v15 = 0;
            uint64_t v16 = *MEMORY[0x1E4F20F28];
            do
            {
              CFTypeRef v17 = CFArrayGetValueAtIndex(theArray, v15);
              CFTypeRef cf = 0;
              uint64_t v18 = FigEndpointGetCMBaseObject();
              uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v19) {
                uint64_t v20 = v19;
              }
              else {
                uint64_t v20 = 0;
              }
              CFTypeRef v21 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v20 + 48);
              if (v21) {
                v21(v18, v16, v12, &cf);
              }
              if (v17) {
                CFTypeRef v17 = CFRetain(v17);
              }
              float SubEndpointVolume = volumecontroller_getSubEndpointVolume((uint64_t)v17);
              if (SubEndpointVolume > v3) {
                float v3 = SubEndpointVolume;
              }
              if (v17) {
                CFRelease(v17);
              }
              if (cf) {
                CFRelease(cf);
              }
              ++v15;
            }
            while (v14 != v15);
          }
        }
        if (theArray) {
          CFRelease(theArray);
        }
      }
    }
    else
    {
      float v3 = -1.0;
      if (volumeController_isBluetoothSharingMainVolumeSupported(a1))
      {
        CFIndex v7 = CFArrayGetCount(a1);
        if (v7 >= 1)
        {
          CFIndex v8 = v7;
          for (CFIndex i = 0; i != v8; ++i)
          {
            int v10 = CFArrayGetValueAtIndex(a1, i);
            LODWORD(theArray) = 0;
            volumeController_getVolumeForEndpoint(v10, &theArray);
            if (*(float *)&theArray > v3) {
              float v3 = *(float *)&theArray;
            }
          }
        }
      }
    }
  }
  else
  {
    volumeController_isBluetoothSharingMainVolumeSupported(0);
    return -1.0;
  }
  return v3;
}

void volumeController_updateMainVolumeCache(uint64_t a1, float a2)
{
  if (a1)
  {
    CFMutableDictionaryRef ContextStateDict = volumeController_createContextStateDict(a2);
    CFTypeRef cf = 0;
    FigVolumeControllerCopySharedController(&cf);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x199716EE0](*(void *)(DerivedStorage + 8));
    FigCFDictionarySetValue();
    MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
    if (ContextStateDict) {
      CFRelease(ContextStateDict);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs(a1, (uint64_t)&cf);
  if (cf)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, i);
        volumeController_updateMainVolumeCache(ValueAtIndex, a2);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void volumeController_updateMainVolumeControl(int a1, CFArrayRef theArray)
{
  if (theArray)
  {
    if (CFArrayGetCount(theArray) == 1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
      {
        volumeController_isAirPlayMainVolumeSupported();
        volumeController_postMainVolumeControlDidChangeNotification();
      }
    }
  }
}

void volumeController_updateMainVolumeControlType(int a1, CFArrayRef theArray)
{
  if (theArray)
  {
    if (CFArrayGetCount(theArray) == 1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
      {
        volumeController_getAirPlayMainVolumeControlType();
        volumeController_postMainVolumeControlTypeDidChangeNotification();
      }
    }
  }
}

void FigVolumeControllerRecomputeMainVolume(const void *a1, float a2)
{
  if (volumeController_contextSupportsVolumeOperations(a1))
  {
    volumeController_recomputeMainVolume(a1, a2);
  }
}

uint64_t volumeController_contextSupportsVolumeOperations(const void *a1)
{
  CFTypeRef cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 8));
  uint64_t v3 = CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 16), a1);
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

void __FigVolumeControllerCopySharedController_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work();
  fig_note_initialize_category_with_default_work();
  if (dword_1E9359E20 >= 0x100) {
    dword_1E9359E20 = 0;
  }
  FigVolumeControllerGetClassID();
  int v1 = CMDerivedObjectCreate();
  if (v1)
  {
    int v7 = v1;
  }
  else
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    uint64_t v3 = FigSimpleMutexCreate();
    DerivedStorage[1] = v3;
    if (v3
      && (CFNumberRef v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM),
          dispatch_queue_t v5 = dispatch_queue_create("com.apple.coremedia.volumeController.notificationqueue", v4),
          (*uint64_t DerivedStorage = v5) != 0)
      && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
          (DerivedStorage[2] = Mutable) != 0))
    {
      int v7 = 0;
      FigVolumeControllerCopySharedController_volumeController = 0;
    }
    else
    {
      int v7 = -17591;
    }
  }
  FigVolumeControllerCopySharedController_err = v7;
}

void volumeController_postNotificationWithPayload(const void *a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  CFTypeRef v11 = 0;
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a3, @"masterVolumeKey_RoutingContextUUID");
    FigRoutingManagerContextUtilities_CopyArrayOfFollowerUUIDs((uint64_t)Value, (uint64_t)&v11);
  }
  if (a1) {
    CFRetain(a1);
  }
  if (a3) {
    CFRetain(a3);
  }
  if (v11)
  {
    CFRetain(v11);
    CFTypeRef v8 = v11;
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  uint64_t v9 = *DerivedStorage;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __volumeController_postNotificationWithPayload_block_invoke;
  _OWORD v10[3] = &__block_descriptor_64_e5_v8__0l;
  v10[4] = a2;
  v10[5] = a3;
  void v10[6] = a1;
  void v10[7] = v8;
  MXDispatchAsync((uint64_t)"volumeController_postNotificationWithPayload", (uint64_t)"FigVolumeController.m", 651, 0, 0, v9, (uint64_t)v10);
  if (v11) {
    CFRelease(v11);
  }
}

void __volumeController_postNotificationWithPayload_block_invoke(uint64_t a1)
{
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    if (dword_1E9359E20)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      int v3 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      int v3 = 1;
    }
  }
  else
  {
    int v3 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFArrayRef v4 = *(const __CFArray **)(a1 + 56);
  if (v4)
  {
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFIndex v15 = Count;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v7);
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v8, 0, *(CFDictionaryRef *)(a1 + 40));
        FigCFDictionarySetValue();
        if (dword_1E9359E20) {
          int v10 = v3;
        }
        else {
          int v10 = 0;
        }
        if (v10 == 1)
        {
          CFTypeRef v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFIndex v6 = v15;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        ++v7;
      }
      while (v6 != v7);
    }
    uint64_t v12 = *(const void **)(a1 + 56);
    if (v12) {
      CFRelease(v12);
    }
  }
  BOOL v13 = *(const void **)(a1 + 40);
  if (v13) {
    CFRelease(v13);
  }
  CFIndex v14 = *(const void **)(a1 + 48);
  if (v14) {
    CFRelease(v14);
  }
}

void volumeController_postEndpointVolumeControlDidChangeNotification()
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  CFTypeRef cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  volumeController_postNotificationWithPayload(cf, @"canSetEndpointVolumeDidChange", Mutable);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void volumeController_postEndpointVolumeControlTypeDidChangeNotification()
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
  FigCFDictionarySetValue();
  CFTypeRef cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  volumeController_postNotificationWithPayload(cf, @"endpointVolumeControlTypeDidChange", Mutable);
  if (UInt64) {
    CFRelease(UInt64);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void volumeController_postEndpointMuteByUserDidChangeNotification()
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  CFTypeRef cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  volumeController_postNotificationWithPayload(cf, @"endpointMutedByUserDidChange", Mutable);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t volumeController_getMainVolume(const void *a1, float *a2)
{
  uint64_t v2 = 4294949706;
  if (a1 && a2)
  {
    CFArrayRef theArray = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)&theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1)
      {
        uint64_t v2 = 0;
      }
      else
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)
          || FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)
          || (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)
           || FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
          && volumeController_isBluetoothSharingMainVolumeSupported(theArray))
        {
          uint64_t v2 = 0;
          *a2 = volumeController_getCachedMainVolume(a1);
        }
        else
        {
          CFNumberRef number = 0;
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v8) {
            uint64_t v9 = v8;
          }
          else {
            uint64_t v9 = 0;
          }
          int v10 = *(uint64_t (**)(uint64_t, void, void, CFNumberRef *))(v9 + 48);
          if (v10)
          {
            uint64_t v2 = v10(CMBaseObject, *MEMORY[0x1E4F20F00], *MEMORY[0x1E4F1CF80], &number);
            CFNumberRef v11 = number;
            if (!v2 && number)
            {
              CFNumberGetValue(number, kCFNumberFloat32Type, a2);
              CFNumberRef v11 = number;
            }
            if (v11) {
              CFRelease(v11);
            }
          }
          else
          {
            uint64_t v2 = 4294954514;
          }
        }
      }
      if (theArray) {
        CFRelease(theArray);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void volumeController_postMainVolumeControlDidChangeNotification()
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  volumeController_postNotificationWithPayload(cf, @"canSetMasterVolumeDidChange", Mutable);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void volumeController_postMainVolumeControlTypeDidChangeNotification()
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef cf = 0;
  FigVolumeControllerCopySharedController(&cf);
  FigCFDictionarySetValue();
  uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
  FigCFDictionarySetValue();
  volumeController_postNotificationWithPayload(cf, @"masterVolumeControlTypeDidChange", Mutable);
  if (UInt64) {
    CFRelease(UInt64);
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t volumeController_getVolumeForEndpoint(const void *a1, _DWORD *a2)
{
  uint64_t v2 = 4294949706;
  if (a1 && a2)
  {
    CFTypeRef v4 = CFRetain(a1);
    CFTypeRef v18 = 0;
    uint64_t v5 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v8 + 48);
    if (v9)
    {
      uint64_t v2 = v9(CMBaseObject, *MEMORY[0x1E4F21080], v5, &v18);
      if (v2) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v18 == 0;
      }
      if (!v10)
      {
        FigCFNumberGetFloat32();
        uint64_t v2 = 0;
        *a2 = v11;
      }
    }
    else
    {
      uint64_t v2 = 4294954514;
    }
    CFTypeRef cf = 0;
    uint64_t v12 = FigEndpointGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFIndex v15 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
    if (v15)
    {
      v15(v12, *MEMORY[0x1E4F20F28], v5, &cf);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
    if (v18)
    {
      CFRelease(v18);
      CFTypeRef v18 = 0;
    }
    if (v4) {
      CFRelease(v4);
    }
  }
  return v2;
}

BOOL volumeController_isBluetoothSharingMainVolumeSupported(const __CFArray *a1)
{
  char CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  BOOL v3 = a1 && CFArrayGetCount(a1) >= 2 && FigRoutingManagerAreAllEndpointsBluetoothShareable(a1);
  return CFPreferenceNumberWithDefault && v3;
}

void volumeController_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v2 = *(NSObject **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    dispatch_release(v2);
  }
}

__CFString *volumeController_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  MEMORY[0x199716EE0](*(void *)(DerivedStorage + 8));
  CFStringAppendFormat(Mutable, 0, @"<FigVolumeController = %p: routingContexts = %@>", a1, *(void *)(DerivedStorage + 16));
  MEMORY[0x199716EF0](*(void *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t volumeController_ChangeMainVolumeForRoutingContext(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 4294949706;
  }
  uint64_t v5 = &qword_1E9359000;
  if (dword_1E9359E20)
  {
    LODWORD(theArray) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a3, (uint64_t)&cf);
  CFTypeRef v8 = cf;
  if (cf)
  {
    CFArrayRef theArray = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)cf, (uint64_t)&theArray);
    if (!theArray) {
      goto LABEL_70;
    }
    if (CFArrayGetCount(theArray) >= 1
      && (uint64_t v9 = CFArrayGetValueAtIndex(theArray, 0), FigRoutingManagerIsEndpointOfType((uint64_t)v9)))
    {
      *(void *)os_log_type_t type = 0;
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      CFIndex v15 = *(void (**)(uint64_t, void, const __CFAllocator *, os_log_type_t *))(v13 + 48);
      if (v15) {
        v15(CMBaseObject, *MEMORY[0x1E4F21090], v10, type);
      }
      if ((unint64_t)(FigCFNumberGetSInt64() - 1) > 1)
      {
        int v14 = 0;
      }
      else
      {
        CFArrayRef v51 = 0;
        uint64_t v16 = FigEndpointGetCMBaseObject();
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *(void (**)(uint64_t, void, const __CFAllocator *, CFArrayRef *))(v18 + 48);
        if (v19) {
          v19(v16, *MEMORY[0x1E4F20FB0], v10, &v51);
        }
        if (v51) {
          *(double *)&CFIndex v47 = COERCE_DOUBLE(CFArrayGetCount(v51));
        }
        else {
          *(double *)&CFIndex v47 = 0.0;
        }
        CFDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFTypeRef v21 = Mutable;
        CFIndex v22 = (const void **)MEMORY[0x1E4F1CFC8];
        if (a1 > 0.0) {
          CFIndex v22 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21250], *v22);
        if (dword_1E9359E20)
        {
          *(_DWORD *)int v50 = 0;
          os_log_type_t v49 = OS_LOG_TYPE_DEFAULT;
          CFIndex v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v24 = *(_DWORD *)v50;
          if (os_log_type_enabled(v23, v49)) {
            unsigned int v25 = v24;
          }
          else {
            unsigned int v25 = v24 & 0xFFFFFFFE;
          }
          if (v25)
          {
            int v54 = 136315651;
            CFMutableDictionaryRef v55 = "volumeController_changeMainVolumeBy";
            __int16 v56 = 2048;
            double v57 = *(double *)&v47;
            __int16 v58 = 2113;
            CFTypeRef v59 = v21;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v47 < 1)
        {
          int v14 = 0;
        }
        else
        {
          CFTypeRef v45 = v8;
          CFIndex v26 = 0;
          uint64_t v46 = *MEMORY[0x1E4F21220];
          do
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v51, v26);
            double v28 = *(double *)&ValueAtIndex;
            if (ValueAtIndex) {
              unsigned int v29 = (__CFDictionary *)CFRetain(ValueAtIndex);
            }
            else {
              unsigned int v29 = 0;
            }
            if (*((_DWORD *)v5 + 904))
            {
              unsigned int v30 = v5;
              *(_DWORD *)int v50 = 0;
              os_log_type_t v49 = OS_LOG_TYPE_DEFAULT;
              CFTypeRef v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v32 = *(_DWORD *)v50;
              if (os_log_type_enabled(v31, v49)) {
                unsigned int v33 = v32;
              }
              else {
                unsigned int v33 = v32 & 0xFFFFFFFE;
              }
              if (v33)
              {
                int v54 = 136315906;
                CFMutableDictionaryRef v55 = "volumeController_changeMainVolumeBy";
                __int16 v56 = 2048;
                double v57 = v28;
                __int16 v58 = 2048;
                CFTypeRef v59 = v29;
                __int16 v60 = 2114;
                unsigned int v61 = v21;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t v5 = v30;
            }
            if (!v29 || (FigEndpointExtendedGetClassID(), int v34 = v29, !CMBaseObjectIsMemberOfClass())) {
              int v34 = 0;
            }
            uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 24);
            if (v35) {
              uint64_t v36 = v35;
            }
            else {
              uint64_t v36 = 0;
            }
            CFIndex v37 = *(void (**)(__CFDictionary *, uint64_t, __CFDictionary *, void, void))(v36 + 72);
            if (v37) {
              v37(v34, v46, v21, 0, 0);
            }
            if (v29) {
              CFRelease(v29);
            }
            ++v26;
          }
          while (v47 != v26);
          int v14 = 1;
          CFTypeRef v8 = v45;
        }
        if (v51)
        {
          CFRelease(v51);
          CFArrayRef v51 = 0;
        }
        if (v21) {
          CFRelease(v21);
        }
      }
      if (*(void *)type) {
        CFRelease(*(CFTypeRef *)type);
      }
    }
    else
    {
      int v14 = 0;
    }
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
    }
    if (v14)
    {
      uint64_t MainVolume = 0;
    }
    else
    {
LABEL_70:
      *(_DWORD *)os_log_type_t type = 0;
      uint64_t MainVolume = volumeController_getMainVolume(v8, (float *)type);
      if (*((_DWORD *)v5 + 904))
      {
        LODWORD(v51) = 0;
        v50[0] = OS_LOG_TYPE_DEFAULT;
        int v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v39 = v51;
        if (os_log_type_enabled(v38, v50[0])) {
          unsigned int v40 = v39;
        }
        else {
          unsigned int v40 = v39 & 0xFFFFFFFE;
        }
        if (v40)
        {
          int v54 = 136315394;
          CFMutableDictionaryRef v55 = "volumeController_changeMainVolumeBy";
          __int16 v56 = 2048;
          double v57 = *(float *)type;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!MainVolume)
      {
        float v41 = *(float *)type + a1;
        *(float *)os_log_type_t type = v41;
        if (v41 <= 1.0)
        {
          if (v41 < 0.0)
          {
            *(_DWORD *)os_log_type_t type = 0;
            float v41 = 0.0;
          }
        }
        else
        {
          *(_DWORD *)os_log_type_t type = 1065353216;
          float v41 = 1.0;
        }
        uint64_t MainVolume = volumeController_setMainVolume(v8, v41);
      }
    }
  }
  else
  {
    uint64_t MainVolume = 4294949706;
  }
  uint64_t IsMuteEnabled = MX_FeatureFlags_IsMuteEnabled();
  if (IsMuteEnabled)
  {
    v62[0] = 0;
    uint64_t MuteOfRoutingContext = volumeController_GetMuteOfRoutingContext(IsMuteEnabled, a3, v62);
    if (v62[0]) {
      volumeController_SetMuteOfRoutingContext(MuteOfRoutingContext, a3, 0);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return MainVolume;
}

uint64_t volumeController_SetMainVolumeForRoutingContext(float a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!a3) {
    return 4294949706;
  }
  if (dword_1E9359E20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  cf[0] = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a3, (uint64_t)cf);
  uint64_t v6 = volumeController_setMainVolume(cf[0], a1);
  uint64_t IsMuteEnabled = MX_FeatureFlags_IsMuteEnabled();
  if (IsMuteEnabled)
  {
    LOBYTE(v1CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = 0;
    uint64_t MuteOfRoutingContext = volumeController_GetMuteOfRoutingContext(IsMuteEnabled, a3, &v10);
    if ((_BYTE)v10) {
      volumeController_SetMuteOfRoutingContext(MuteOfRoutingContext, a3, 0);
    }
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v6;
}

uint64_t volumeController_GetMainVolumeForRoutingContext(uint64_t a1, uint64_t a2, float *a3)
{
  if (!a2) {
    return 4294949706;
  }
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&cf);
  uint64_t MainVolume = volumeController_getMainVolume(cf, a3);
  if (cf) {
    CFRelease(cf);
  }
  return MainVolume;
}

uint64_t volumeController_IsMainVolumeControlSupportedForRoutingContext(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    CFTypeRef v15 = 0;
    FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&v15);
    CFArrayRef theArray = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v15, (uint64_t)&theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1)
      {
        uint64_t v3 = 0;
      }
      else
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
        {
          char isAirPlayMainVolumeSupported = volumeController_isAirPlayMainVolumeSupported();
          uint64_t v3 = 0;
        }
        else
        {
          CFTypeRef v7 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
          CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v9) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
          int v11 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v10 + 48);
          if (v11)
          {
            uint64_t v3 = v11(CMBaseObject, *MEMORY[0x1E4F20F08], *MEMORY[0x1E4F1CF80], &cf);
            CFTypeRef v7 = cf;
          }
          else
          {
            uint64_t v3 = 4294954514;
          }
          char isAirPlayMainVolumeSupported = v7 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
          if (v7) {
            CFRelease(v7);
          }
        }
        *a3 = isAirPlayMainVolumeSupported;
      }
      if (theArray)
      {
        CFRelease(theArray);
        CFArrayRef theArray = 0;
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    if (v15) {
      CFRelease(v15);
    }
  }
  return v3;
}

uint64_t volumeController_GetMainVolumeControlTypeForRoutingContext(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 4294949706;
  if (a2 && a3)
  {
    CFTypeRef v15 = 0;
    FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&v15);
    CFArrayRef theArray = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v15, (uint64_t)&theArray);
    if (theArray)
    {
      if (CFArrayGetCount(theArray) < 1)
      {
        uint64_t v3 = 0;
      }
      else
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
        {
          uint64_t AirPlayMainVolumeControlType = volumeController_getAirPlayMainVolumeControlType();
          uint64_t v3 = 0;
        }
        else
        {
          CFTypeRef cf = 0;
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v8) {
            uint64_t v9 = v8;
          }
          else {
            uint64_t v9 = 0;
          }
          uint64_t v10 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v9 + 48);
          if (v10)
          {
            uint64_t v3 = v10(CMBaseObject, *MEMORY[0x1E4F21090], *MEMORY[0x1E4F1CF80], &cf);
            CFTypeRef v11 = cf;
            uint64_t AirPlayMainVolumeControlType = 3;
            if (!v3 && cf)
            {
              uint64_t AirPlayMainVolumeControlType = FigCFNumberGetSInt64();
              CFTypeRef v11 = cf;
            }
            if (v11) {
              CFRelease(v11);
            }
          }
          else
          {
            uint64_t v3 = 4294954514;
            uint64_t AirPlayMainVolumeControlType = 3;
          }
        }
        *a3 = AirPlayMainVolumeControlType;
      }
      if (theArray)
      {
        CFRelease(theArray);
        CFArrayRef theArray = 0;
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    if (v15) {
      CFRelease(v15);
    }
  }
  return v3;
}

uint64_t volumeController_ChangeVolumeForEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFTypeRef v33 = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&v33);
  CFTypeRef v6 = v33;
  CFTypeRef cf = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFTypeRef v11 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v10 + 48);
  if (v11) {
    v11(CMBaseObject, *MEMORY[0x1E4F21090], v7, &cf);
  }
  if ((unint64_t)(FigCFNumberGetSInt64() - 1) <= 1)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v13 = Mutable;
    int v14 = (const void **)MEMORY[0x1E4F1CFC8];
    if (a3 > 0.0) {
      int v14 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21250], *v14);
    if (v6) {
      CFTypeRef v15 = CFRetain(v6);
    }
    else {
      CFTypeRef v15 = 0;
    }
    if (dword_1E9359E20)
    {
      unsigned int v35 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v19 = v35;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = v19 & 0xFFFFFFFE;
      }
      if (v20)
      {
        int v37 = 136315650;
        int v38 = "volumeController_changeIndividualVolumeBy";
        __int16 v39 = 2048;
        CFTypeRef v40 = v6;
        __int16 v41 = 2048;
        uint64_t v42 = (uint64_t)v15;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!v15 || (FigEndpointExtendedGetClassID(), CFTypeRef v21 = v15, !CMBaseObjectIsMemberOfClass())) {
      CFTypeRef v21 = 0;
    }
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    unsigned int v24 = *(uint64_t (**)(CFTypeRef, void, const void *, void, void))(v23 + 72);
    if (v24)
    {
      uint64_t VolumeForEndpoint = v24(v21, *MEMORY[0x1E4F21220], v13, 0, 0);
      if (!v15)
      {
LABEL_33:
        if (!v13) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t VolumeForEndpoint = 4294954514;
      if (!v15) {
        goto LABEL_33;
      }
    }
    CFRelease(v15);
    goto LABEL_33;
  }
  v45[0] = 0.0;
  uint64_t VolumeForEndpoint = volumeController_getVolumeForEndpoint(v6, v45);
  if (!VolumeForEndpoint)
  {
    float v17 = v45[0] + a3;
    v45[0] = v17;
    if (v17 <= 1.0)
    {
      if (v17 < 0.0)
      {
        v45[0] = 0.0;
        float v17 = 0.0;
      }
    }
    else
    {
      v45[0] = 1.0;
      float v17 = 1.0;
    }
    uint64_t VolumeForEndpoint = volumeController_setVolumeForEndpoint(v6, v17);
    uint64_t v13 = (const void *)FigRoutingManagerCopyRoutingContextUUIDForEndpoint((uint64_t)v6);
    volumeController_recomputeMainVolume(v13, v45[0]);
    if (v13) {
LABEL_34:
    }
      CFRelease(v13);
  }
LABEL_35:
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  if (v33)
  {
    uint64_t v25 = FigEndpointGetCMBaseObject();
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v27 = v26 ? v26 : 0;
    double v28 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v27 + 48);
    if (v28) {
      v28(v25, *MEMORY[0x1E4F20F28], v7, &cf);
    }
  }
  if (dword_1E9359E20)
  {
    unsigned int v35 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    unsigned int v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v30 = v35;
    if (os_log_type_enabled(v29, type)) {
      unsigned int v31 = v30;
    }
    else {
      unsigned int v31 = v30 & 0xFFFFFFFE;
    }
    if (v31)
    {
      int v37 = 136315906;
      int v38 = "volumeController_ChangeVolumeForEndpointWithID";
      __int16 v39 = 2114;
      CFTypeRef v40 = cf;
      __int16 v41 = 2114;
      uint64_t v42 = a2;
      __int16 v43 = 2048;
      double v44 = a3;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (MX_FeatureFlags_IsMuteEnabled())
  {
    LOBYTE(v45[0]) = 0;
    volumeController_GetMuteOfEndpointWithID(a1, a2, v45);
    if (LOBYTE(v45[0])) {
      volumeController_SetMuteOfEndpointWithID(a1, a2, 0);
    }
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v33) {
    CFRelease(v33);
  }
  return VolumeForEndpoint;
}

uint64_t volumeController_SetVolumeForEndpointWithID(uint64_t a1, uint64_t a2, float a3)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v22 = 0;
  CFTypeRef v23 = 0;
  CFTypeRef v20 = 0;
  CFTypeRef v21 = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&v23);
  if (v23)
  {
    uint64_t v6 = *MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFTypeRef v11 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
    if (v11) {
      v11(CMBaseObject, *MEMORY[0x1E4F20F78], v6, &v20);
    }
    uint64_t v12 = FigEndpointGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFTypeRef v15 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
    if (v15) {
      v15(v12, *MEMORY[0x1E4F20F28], v6, &v21);
    }
    if (v20)
    {
      FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v20, (uint64_t)&v22);
      uint64_t v10 = FigCFArrayContainsValue();
      if (FigRoutingManagerIsEndpointWHAGroupable((uint64_t)v23))
      {
        cf[0] = 0;
        FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v20, (uint64_t)cf);
        CFTypeRef v16 = v23;
        CFTypeRef v17 = cf[0];
        if (!cf[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
          CFTypeRef v17 = 0;
        }
        if (FigRoutingManagerIsEndpointPresentInAggregate(v16, (uint64_t)v17)) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v10;
        }
        if (cf[0]) {
          CFRelease(cf[0]);
        }
      }
      if (v10)
      {
        uint64_t v10 = volumeController_setVolumeForEndpoint(v23, a3);
        volumeController_recomputeMainVolume(v20, a3);
        if (dword_1E9359E20)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (MX_FeatureFlags_IsMuteEnabled())
    {
      LOBYTE(cf[0]) = 0;
      volumeController_GetMuteOfEndpointWithID(a1, a2, cf);
      if (LOBYTE(cf[0])) {
        volumeController_SetMuteOfEndpointWithID(a1, a2, 0);
      }
    }
    if (v23)
    {
      CFRelease(v23);
      CFTypeRef v23 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (v21)
  {
    CFRelease(v21);
    CFTypeRef v21 = 0;
  }
  if (v22)
  {
    CFRelease(v22);
    CFTypeRef v22 = 0;
  }
  if (v20) {
    CFRelease(v20);
  }
  return v10;
}

uint64_t volumeController_GetVolumeForEndpointWithID(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v11 = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&v11);
  if (!v11) {
    return 0;
  }
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
  if (v8) {
    v8(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &cf);
  }
  uint64_t VolumeForEndpoint = volumeController_getVolumeForEndpoint(v11, a3);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v11) {
    CFRelease(v11);
  }
  return VolumeForEndpoint;
}

uint64_t volumeController_IsVolumeControlSupportedForEndpointWithID(uint64_t a1, uint64_t a2, BOOL *a3)
{
  if (!a3) {
    return 4294949706;
  }
  CFTypeRef v18 = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&v18);
  CFTypeRef v4 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  CFTypeRef v17 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  uint64_t v5 = (void *)MEMORY[0x1E4F1CF80];
  if (!v18)
  {
LABEL_10:
    uint64_t v9 = 0;
    *a3 = v4 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    goto LABEL_12;
  }
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v8 + 48);
  if (v10)
  {
    uint64_t v9 = v10(CMBaseObject, *MEMORY[0x1E4F21088], *v5, &v17);
    if (v9) {
      goto LABEL_12;
    }
    CFTypeRef v4 = v17;
    goto LABEL_10;
  }
  uint64_t v9 = 4294954514;
LABEL_12:
  CFTypeRef cf = 0;
  if (v18)
  {
    uint64_t v11 = FigEndpointGetCMBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v13 = v12 ? v12 : 0;
    uint64_t v14 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v13 + 48);
    if (v14)
    {
      v14(v11, *MEMORY[0x1E4F20F28], *v5, &cf);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
  }
  if (v17)
  {
    CFRelease(v17);
    CFTypeRef v17 = 0;
  }
  if (v18) {
    CFRelease(v18);
  }
  return v9;
}

uint64_t volumeController_GetVolumeControlTypeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    CFTypeRef cf = 0;
    volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  return 4294949706;
}

uint64_t volumeController_SetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&cf);
  if (MX_FeatureFlags_IsMuteEnabled()) {
    volumeController_GetMuteOfSubEndpointWithID(a1, a2, a3);
  }
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t volumeController_GetVolumeOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 4294949706;
  }
  CFTypeRef cf = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t volumeController_SetVolumeOfRoomWithID()
{
  return 0;
}

uint64_t volumeController_GetVolumeOfRoomWithID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return 0;
  }
  else {
    return 4294949706;
  }
}

uint64_t volumeController_SetMuteOfRoutingContext(uint64_t a1, uint64_t a2, int a3)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!a2) {
    return 4294949706;
  }
  uint64_t result = MX_FeatureFlags_IsMuteEnabled();
  if (!result) {
    return result;
  }
  if (dword_1E9359E20)
  {
    LODWORD(theArray) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeRef v29 = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&v29);
  if (!v29) {
    return 4294949706;
  }
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v29, (uint64_t)&theArray);
  if (theArray)
  {
    if (CFArrayGetCount(theArray) >= 1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
      {
        *(void *)os_log_type_t type = 0;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = *(void (**)(uint64_t, void, const __CFAllocator *, os_log_type_t *))(v11 + 48);
        if (v12) {
          v12(CMBaseObject, *MEMORY[0x1E4F20FB0], v8, type);
        }
        uint64_t v13 = "Yes";
        if (!a3) {
          uint64_t v13 = "No";
        }
        double v28 = v13;
        CFArrayRef v14 = *(const __CFArray **)type;
        if (*(void *)type)
        {
          CFIndex v15 = 0;
          uint64_t v27 = *MEMORY[0x1E4F20F28];
          while (v15 < CFArrayGetCount(v14))
          {
            CFTypeRef v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)type, v15);
            volumeController_setMuteForEndpoint(v16, a3);
            CFTypeRef v32 = 0;
            uint64_t v17 = FigEndpointGetCMBaseObject();
            uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v18) {
              uint64_t v19 = v18;
            }
            else {
              uint64_t v19 = 0;
            }
            CFTypeRef v20 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v19 + 48);
            if (v20) {
              v20(v17, v27, v8, &v32);
            }
            if (dword_1E9359E20)
            {
              unsigned int v31 = 0;
              os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
              CFTypeRef v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v22 = v31;
              if (os_log_type_enabled(v21, v30)) {
                unsigned int v23 = v22;
              }
              else {
                unsigned int v23 = v22 & 0xFFFFFFFE;
              }
              if (v23)
              {
                CFTypeRef v24 = v32;
                uint64_t EndpointManagerName = FigRoutingManagerGetEndpointManagerName((uint64_t)v16);
                int v35 = 136315906;
                uint64_t v36 = "volumeController_setMuteByUserForRoutingContext";
                __int16 v37 = 2114;
                CFTypeRef v38 = v24;
                __int16 v39 = 2114;
                uint64_t v40 = EndpointManagerName;
                __int16 v41 = 2082;
                uint64_t v42 = v28;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CFDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            cf[0] = 0;
            FigVolumeControllerCopySharedController(cf);
            FigCFDictionarySetValue();
            FigCFDictionarySetValue();
            volumeController_postNotificationWithPayload(cf[0], @"routingContextMutedByUserDidChange", Mutable);
            if (cf[0])
            {
              CFRelease(cf[0]);
              cf[0] = 0;
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (v32) {
              CFRelease(v32);
            }
            ++v15;
            CFArrayRef v14 = *(const __CFArray **)type;
            if (!*(void *)type) {
              goto LABEL_42;
            }
          }
          if (*(void *)type) {
            CFRelease(*(CFTypeRef *)type);
          }
        }
      }
    }
LABEL_42:
    if (theArray) {
      CFRelease(theArray);
    }
  }
  uint64_t result = (uint64_t)v29;
  if (v29)
  {
    CFRelease(v29);
    return 0;
  }
  return result;
}

uint64_t volumeController_GetMuteOfRoutingContext(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  if (!a2) {
    return 4294949706;
  }
  if (!MX_FeatureFlags_IsMuteEnabled()) {
    return 0;
  }
  CFTypeRef v29 = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&v29);
  if (v29)
  {
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v29, (uint64_t)theArray);
    *(void *)CFTypeRef cf = 0;
    if (theArray[0])
    {
      if (CFArrayGetCount(theArray[0]) >= 1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], 0);
        if (FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex))
        {
          CFArrayRef v30 = 0;
          uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v7) {
            uint64_t v8 = v7;
          }
          else {
            uint64_t v8 = 0;
          }
          CFIndex v15 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v8 + 48);
          if (!v15) {
            goto LABEL_51;
          }
          uint64_t v16 = *MEMORY[0x1E4F1CF80];
          v15(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &v30);
          if (v30)
          {
            CFIndex Count = CFArrayGetCount(v30);
            if (Count >= 1)
            {
              CFIndex v18 = Count;
              CFIndex v19 = 0;
              uint64_t v9 = 0;
              uint64_t v20 = *MEMORY[0x1E4F20EA0];
              do
              {
                CFTypeRef v21 = CFArrayGetValueAtIndex(v30, v19);
                if (v21)
                {
                  CFTypeRef v22 = CFRetain(v21);
                  if (v22)
                  {
                    uint64_t v23 = FigEndpointGetCMBaseObject();
                    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v24) {
                      uint64_t v25 = v24;
                    }
                    else {
                      uint64_t v25 = 0;
                    }
                    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(v25 + 48);
                    if (v26) {
                      uint64_t v9 = v26(v23, v20, v16, cf);
                    }
                    else {
                      uint64_t v9 = 4294954514;
                    }
                  }
                  int v27 = FigCFEqual();
                  if (v22) {
                    BOOL v28 = v27 == 0;
                  }
                  else {
                    BOOL v28 = 0;
                  }
                  if (v28)
                  {
                    CFRelease(v22);
                  }
                  else if (v27)
                  {
                    break;
                  }
                }
                ++v19;
              }
              while (v18 != v19);
LABEL_52:
              if (v30) {
                CFRelease(v30);
              }
              if (v9) {
                goto LABEL_13;
              }
              goto LABEL_12;
            }
LABEL_51:
            uint64_t v9 = 0;
            goto LABEL_52;
          }
        }
      }
    }
LABEL_12:
    uint64_t v9 = 0;
    *a3 = FigCFEqual();
LABEL_13:
    if (theArray[0])
    {
      CFRelease(theArray[0]);
      theArray[0] = 0;
    }
    if (*(void *)cf) {
      CFRelease(*(CFTypeRef *)cf);
    }
    goto LABEL_17;
  }
  uint64_t v9 = 4294949706;
LABEL_17:
  if (dword_1E9359E20)
  {
    LODWORD(v3CMSMUtility_NotifyEachMatchingSession(0, 0, 0, @"AvailableSampleRatesDidChange", 0, 0) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v11 = v30;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (v12)
    {
      uint64_t v13 = "YES";
      *(void *)&cf[4] = "volumeController_GetMuteOfRoutingContext";
      *(_DWORD *)CFTypeRef cf = 136315650;
      if (!a3) {
        uint64_t v13 = "NO";
      }
      __int16 v32 = 2114;
      uint64_t v33 = a2;
      __int16 v34 = 2082;
      int v35 = v13;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v29) {
    CFRelease(v29);
  }
  return v9;
}

uint64_t volumeController_SetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MX_FeatureFlags_IsMuteEnabled();
  if (result)
  {
    if (a3)
    {
      CFTypeRef cf = 0;
      volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&cf);
      if (cf) {
        CFRelease(cf);
      }
      return 0;
    }
    else
    {
      return 4294949706;
    }
  }
  return result;
}

uint64_t volumeController_GetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MX_FeatureFlags_IsMuteEnabled();
  if (result)
  {
    if (a3)
    {
      CFTypeRef cf = 0;
      volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&cf);
      if (cf) {
        CFRelease(cf);
      }
      return 0;
    }
    else
    {
      return 4294949706;
    }
  }
  return result;
}

uint64_t volumeController_CanSetMuteOfRoutingContext(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  v29[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  if (!a2) {
    return 4294949706;
  }
  if (!MX_FeatureFlags_IsMuteEnabled()) {
    return 0;
  }
  CFTypeRef v28 = 0;
  FigRoutingManagerContextUtilities_CopyRoutingContextUUID(a2, (uint64_t)&v28);
  if (!v28) {
    return 4294949706;
  }
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)v28, (uint64_t)&theArray);
  CFTypeRef cf = 0;
  if (!theArray) {
    goto LABEL_39;
  }
  if (CFArrayGetCount(theArray) < 1) {
    goto LABEL_39;
  }
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (!FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)) {
    goto LABEL_39;
  }
  v29[0] = 0;
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int v11 = *(void (**)(uint64_t, void, uint64_t, CFArrayRef *))(v9 + 48);
  if (v11) {
    v11(CMBaseObject, *MEMORY[0x1E4F20FB0], v6, v29);
  }
  if (!v29[0]) {
    goto LABEL_39;
  }
  CFIndex Count = CFArrayGetCount(v29[0]);
  if (Count < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    CFIndex v13 = Count;
    uint64_t v10 = 0;
    CFIndex v14 = 0;
    uint64_t v15 = *MEMORY[0x1E4F20F20];
    do
    {
      uint64_t v16 = CFArrayGetValueAtIndex(v29[0], v14);
      if (v16)
      {
        CFTypeRef v17 = CFRetain(v16);
        if (v17)
        {
          uint64_t v18 = FigEndpointGetCMBaseObject();
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          CFTypeRef v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v20 + 48);
          if (v21) {
            uint64_t v10 = v21(v18, v15, v6, &cf);
          }
          else {
            uint64_t v10 = 4294954514;
          }
        }
        int v22 = FigCFEqual();
        if (v17) {
          BOOL v23 = v22 == 0;
        }
        else {
          BOOL v23 = 0;
        }
        if (v23)
        {
          CFRelease(v17);
        }
        else if (v22)
        {
          break;
        }
      }
      ++v14;
    }
    while (v13 != v14);
  }
  if (v29[0]) {
    CFRelease(v29[0]);
  }
  if (!v10)
  {
LABEL_39:
    uint64_t v10 = 0;
    *a3 = FigCFEqual();
  }
  if (dword_1E9359E20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v28) {
    CFRelease(v28);
  }
  return v10;
}

uint64_t volumeController_CanSetMuteOfEndpointWithID(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!MX_FeatureFlags_IsMuteEnabled()) {
    return 0;
  }
  CFTypeRef v20 = 0;
  cf[0] = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)cf);
  if (FigRoutingManagerIsEndpointOfType((uint64_t)cf[0]))
  {
    CFTypeRef v19 = 0;
    if (!cf[0]) {
      return 4294949706;
    }
    CFTypeRef v6 = CFRetain(cf[0]);
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    if (!v6) {
      goto LABEL_13;
    }
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    unsigned int v12 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v10 + 48);
    if (!v12)
    {
      uint64_t v11 = 4294954514;
      goto LABEL_15;
    }
    uint64_t v11 = v12(CMBaseObject, *MEMORY[0x1E4F20F20], v7, &v19);
    if (!v11)
    {
LABEL_13:
      uint64_t v11 = 0;
      *a3 = FigCFEqual();
    }
LABEL_15:
    uint64_t v13 = FigEndpointGetCMBaseObject();
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v15 + 48);
    if (v16) {
      v16(v13, *MEMORY[0x1E4F20F28], v7, &v20);
    }
    if (dword_1E9359E20)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v19) {
      CFRelease(v19);
    }
    goto LABEL_26;
  }
  uint64_t v11 = 0;
LABEL_26:
  if (cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  if (v20) {
    CFRelease(v20);
  }
  return v11;
}

uint64_t volumeController_CanSetMuteOfSubEndpointWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MX_FeatureFlags_IsMuteEnabled();
  if (result)
  {
    if (a3)
    {
      CFTypeRef cf = 0;
      volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&cf);
      if (cf) {
        CFRelease(cf);
      }
      return 0;
    }
    else
    {
      return 4294949706;
    }
  }
  return result;
}

uint64_t volumeController_SetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&cf);
  if (cf)
  {
    if (MX_FeatureFlags_IsMuteEnabled())
    {
      char v5 = 0;
      volumeController_GetMuteOfEndpointWithID(a1, a2, &v5);
      if (v5) {
        volumeController_SetMuteOfEndpointWithID(a1, a2, 0);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return 0;
}

uint64_t volumeController_GetVolumeOfEndpointWithRoomID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 4294949706;
  }
  CFTypeRef cf = 0;
  volumeController_copyEndpointWithID(a1, a2, (uint64_t *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t volumeController_setMainVolume(const void *a1, float a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  float valuePtr = a2;
  uint64_t v3 = 4294949706;
  BOOL v4 = a2 > 1.0 || a1 == 0;
  if (v4 || a2 < 0.0) {
    return v3;
  }
  CFArrayRef theArray = 0;
  FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)&theArray);
  if (!theArray) {
    return 0;
  }
  if (CFArrayGetCount(theArray) >= 1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    if (!FigRoutingManagerIsEndpointOfType((uint64_t)ValueAtIndex)
      && !volumeController_isBluetoothSharingMainVolumeSupported(theArray))
    {
      CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      __int16 v41 = *(uint64_t (**)(void, void, void))(v16 + 56);
      if (v41) {
        uint64_t v3 = v41(CMBaseObject, *MEMORY[0x1E4F20F00], v13);
      }
      else {
        uint64_t v3 = 4294954514;
      }
      if (v13) {
        CFRelease(v13);
      }
      goto LABEL_103;
    }
    float CachedMainVolume = volumeController_getCachedMainVolume(a1);
    if (FVCUtilitiesIsVolumeDifferenceAboveThreshold(a2, CachedMainVolume))
    {
      volumeController_updateMainVolumeCache((uint64_t)a1, a2);
      CFArrayRef v80 = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpoints((uint64_t)a1, (uint64_t)&v80);
      if (v80)
      {
        if (CFArrayGetCount(v80) >= 1)
        {
          uint64_t v8 = CFArrayGetValueAtIndex(v80, 0);
          if (FigRoutingManagerIsEndpointOfType((uint64_t)v8))
          {
            float v9 = volumeController_getCachedMainVolume(a1);
            CFTypeRef cf = 0;
            uint64_t v71 = *MEMORY[0x1E4F1CF80];
            uint64_t v10 = FigEndpointGetCMBaseObject();
            uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v11) {
              uint64_t v12 = v11;
            }
            else {
              uint64_t v12 = 0;
            }
            uint64_t v42 = *(void (**)(void, void, void, void))(v12 + 48);
            if (v42) {
              v42(v10, *MEMORY[0x1E4F20FB0], v71, &cf);
            }
            if (cf)
            {
              CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
              if (Count >= 1)
              {
                CFIndex v44 = Count;
                CFIndex v45 = 0;
                uint64_t v70 = *MEMORY[0x1E4F20E38];
                uint64_t v68 = *MEMORY[0x1E4F20F28];
                uint64_t v46 = &qword_1E9359000;
                do
                {
                  CFIndex v47 = CFArrayGetValueAtIndex((CFArrayRef)cf, v45);
                  uint64_t v48 = v47;
                  if (v47) {
                    CFTypeRef v49 = CFRetain(v47);
                  }
                  else {
                    CFTypeRef v49 = 0;
                  }
                  float SubEndpointVolume = volumecontroller_getSubEndpointVolume((uint64_t)v49);
                  CFTypeRef v78 = 0;
                  uint64_t v51 = FigEndpointGetCMBaseObject();
                  uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v52) {
                    uint64_t v53 = v52;
                  }
                  else {
                    uint64_t v53 = 0;
                  }
                  int v54 = *(void (**)(void, void, void, void))(v53 + 48);
                  if (v54) {
                    v54(v51, v70, v71, &v78);
                  }
                  CFTypeRef v77 = 0;
                  uint64_t v55 = FigEndpointGetCMBaseObject();
                  uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v56) {
                    uint64_t v57 = v56;
                  }
                  else {
                    uint64_t v57 = 0;
                  }
                  __int16 v58 = *(void (**)(void, void, void, void))(v57 + 48);
                  if (v58) {
                    v58(v55, v68, v71, &v77);
                  }
                  float v59 = v9;
                  if (v44 != 1) {
                    float v59 = volumeController_computeScaledSubEndpointVolume((uint64_t)a1, (uint64_t)v78, CachedMainVolume, v9, SubEndpointVolume);
                  }
                  volumeController_setVolumeForEndpoint(v48, v59);
                  if (dword_1E9359E20)
                  {
                    unsigned int v76 = 0;
                    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                    __int16 v60 = v46;
                    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v62 = v76;
                    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
                      unsigned int v63 = v62;
                    }
                    else {
                      unsigned int v63 = v62 & 0xFFFFFFFE;
                    }
                    if (v63)
                    {
                      CFTypeRef v64 = v77;
                      *(double *)&uint64_t v65 = COERCE_DOUBLE(FigRoutingManagerGetEndpointManagerName((uint64_t)v49));
                      int v81 = 136316674;
                      id v82 = "volumeController_updateIndividualVolumes";
                      __int16 v83 = 2114;
                      CFTypeRef v84 = v64;
                      __int16 v85 = 2114;
                      double v86 = *(double *)&v65;
                      __int16 v87 = 2048;
                      double v88 = SubEndpointVolume;
                      __int16 v89 = 2048;
                      double v90 = v59;
                      __int16 v91 = 2048;
                      double v92 = CachedMainVolume;
                      __int16 v93 = 2048;
                      double v94 = v9;
                      _os_log_send_and_compose_impl();
                    }
                    uint64_t v46 = v60;
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  if (v78)
                  {
                    CFRelease(v78);
                    CFTypeRef v78 = 0;
                  }
                  if (v77)
                  {
                    CFRelease(v77);
                    CFTypeRef v77 = 0;
                  }
                  if (v49) {
                    CFRelease(v49);
                  }
                  ++v45;
                }
                while (v44 != v45);
              }
              if (cf) {
                CFRelease(cf);
              }
            }
          }
          else if (volumeController_isBluetoothSharingMainVolumeSupported(v80))
          {
            float v17 = volumeController_getCachedMainVolume(a1);
            if (!v80) {
              goto LABEL_101;
            }
            float v18 = v17;
            CFIndex v19 = CFArrayGetCount(v80);
            if (v19 < 1)
            {
              CFIndex v22 = 0;
              float v24 = 0.0;
            }
            else
            {
              CFIndex v20 = v19;
              CFIndex v21 = 0;
              CFIndex v22 = 0;
              uint64_t v72 = *MEMORY[0x1E4F20E38];
              uint64_t v23 = *MEMORY[0x1E4F1CF80];
              uint64_t v69 = *MEMORY[0x1E4F20F28];
              float v24 = 0.0;
              do
              {
                uint64_t v25 = CFArrayGetValueAtIndex(v80, v21);
                uint64_t v26 = v25;
                if (v25) {
                  CFTypeRef v27 = CFRetain(v25);
                }
                else {
                  CFTypeRef v27 = 0;
                }
                CFTypeRef cf = 0;
                uint64_t v28 = FigEndpointGetCMBaseObject();
                uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v29) {
                  uint64_t v30 = v29;
                }
                else {
                  uint64_t v30 = 0;
                }
                unsigned int v31 = *(void (**)(void, void, void, void))(v30 + 48);
                if (v31) {
                  v31(v28, v72, v23, &cf);
                }
                LODWORD(v77) = 0;
                volumeController_getVolumeForEndpoint(v26, &v77);
                float v32 = volumeController_computeScaledSubEndpointVolume((uint64_t)a1, (uint64_t)cf, CachedMainVolume, v18, *(float *)&v77);
                float v33 = v32;
                if (v32 > v24)
                {
                  float v24 = v32;
                  CFIndex v22 = v21;
                }
                volumeController_setVolumeForEndpoint(v26, v32);
                CFTypeRef v78 = 0;
                uint64_t v34 = FigEndpointGetCMBaseObject();
                uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v35) {
                  uint64_t v36 = v35;
                }
                else {
                  uint64_t v36 = 0;
                }
                __int16 v37 = *(void (**)(void, void, void, void))(v36 + 48);
                if (v37) {
                  v37(v34, v69, v23, &v78);
                }
                if (dword_1E9359E20)
                {
                  unsigned int v76 = 0;
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  CFTypeRef v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v39 = v76;
                  if (os_log_type_enabled(v38, type)) {
                    unsigned int v40 = v39;
                  }
                  else {
                    unsigned int v40 = v39 & 0xFFFFFFFE;
                  }
                  if (v40)
                  {
                    int v81 = 136316418;
                    id v82 = "volumeController_updateIndividualVolumes";
                    __int16 v83 = 2114;
                    CFTypeRef v84 = v78;
                    __int16 v85 = 2048;
                    double v86 = *(float *)&v77;
                    __int16 v87 = 2048;
                    double v88 = v33;
                    __int16 v89 = 2048;
                    double v90 = CachedMainVolume;
                    __int16 v91 = 2048;
                    double v92 = v18;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                if (cf)
                {
                  CFRelease(cf);
                  CFTypeRef cf = 0;
                }
                if (v78)
                {
                  CFRelease(v78);
                  CFTypeRef v78 = 0;
                }
                if (v27) {
                  CFRelease(v27);
                }
                ++v21;
              }
              while (v20 != v21);
            }
            if (!v80) {
              goto LABEL_101;
            }
            uint64_t v66 = CFArrayGetValueAtIndex(v80, v22);
            volumeController_setVolumeForEndpoint(v66, v24);
          }
        }
        if (v80) {
          CFRelease(v80);
        }
      }
LABEL_101:
      volumeController_postMainVolumeDidChangeNotification();
    }
  }
  uint64_t v3 = 0;
LABEL_103:
  if (theArray) {
    CFRelease(theArray);
  }
  return v3;
}

float volumecontroller_getSubEndpointVolume(uint64_t a1)
{
  float valuePtr = -1.0;
  if (!a1) {
    return -1.0;
  }
  CFNumberRef number = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  char v5 = *(void (**)(uint64_t, void, void, CFNumberRef *))(v3 + 48);
  if (v5)
  {
    v5(CMBaseObject, *MEMORY[0x1E4F21080], *MEMORY[0x1E4F1CF80], &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
      if (number) {
        CFRelease(number);
      }
    }
  }
  return valuePtr;
}

float volumeController_computeScaledSubEndpointVolume(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  float MainVolumeScaleFactorForEndpointID = 1.0;
  if (a3 >= a5)
  {
    if (FVCUtilitiesIsFloatEquivalentToZero(a3)) {
      float MainVolumeScaleFactorForEndpointID = 1.0;
    }
    else {
      float MainVolumeScaleFactorForEndpointID = a5 / a3;
    }
  }
  if (FVCUtilitiesIsFloatEquivalentToZero(a4) && !FVCUtilitiesIsFloatEquivalentToZero(a3))
  {
    FigRoutingManagerContextUtilities_SetMainVolumeScaleFactorForEndpointID(a1, a2, MainVolumeScaleFactorForEndpointID);
  }
  else if (FVCUtilitiesIsFloatEquivalentToZero(a3) && !FVCUtilitiesIsFloatEquivalentToZero(a4))
  {
    float MainVolumeScaleFactorForEndpointID = FigRoutingManagerContextUtilities_GetMainVolumeScaleFactorForEndpointID(a1, a2);
  }
  return MainVolumeScaleFactorForEndpointID * a4;
}

uint64_t volumeController_setVolumeForEndpoint(const void *a1, float a2)
{
  float valuePtr = a2;
  uint64_t v2 = 4294949706;
  BOOL v3 = a2 > 1.0 || a1 == 0;
  if (!v3 && a2 >= 0.0)
  {
    CFTypeRef v5 = CFRetain(a1);
    uint64_t v6 = *MEMORY[0x1E4F1CF80];
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, void, CFNumberRef))(v10 + 56);
    if (v11) {
      uint64_t v2 = v11(CMBaseObject, *MEMORY[0x1E4F21080], v7);
    }
    else {
      uint64_t v2 = 4294954514;
    }
    CFTypeRef v23 = 0;
    FigRoutingManagerIsClusterLocalEndpoint((uint64_t)a1);
    uint64_t v12 = *MEMORY[0x1E4F20E38];
    uint64_t v13 = FigEndpointGetCMBaseObject();
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v15 + 48);
    if (v16) {
      v16(v13, v12, v6, &v23);
    }
    volumeController_postEndpointVolumeDidChangeNotification();
    CFTypeRef cf = 0;
    uint64_t v17 = FigEndpointGetCMBaseObject();
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    CFIndex v20 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v19 + 48);
    if (v20)
    {
      v20(v17, *MEMORY[0x1E4F20F28], v6, &cf);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
    if (v23)
    {
      CFRelease(v23);
      CFTypeRef v23 = 0;
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
  return v2;
}

uint64_t volumeController_isAirPlayMainVolumeSupported()
{
  CFArrayRef theArray = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v2 + 48);
  if (!v3) {
    goto LABEL_17;
  }
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  v3(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
    uint64_t v9 = *MEMORY[0x1E4F21088];
    CFTypeRef v10 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    while (1)
    {
      CFArrayGetValueAtIndex(theArray, v7);
      CFTypeRef cf = v8;
      uint64_t v11 = FigEndpointGetCMBaseObject();
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v13 + 48);
      if (v14) {
        v14(v11, v9, v4, &cf);
      }
      if (cf == v10) {
        break;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v6 == ++v7) {
        goto LABEL_17;
      }
    }
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v15 = 1;
  }
  else
  {
LABEL_17:
    uint64_t v15 = 0;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v15;
}

uint64_t volumeController_getAirPlayMainVolumeControlType()
{
  CFArrayRef theArray = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  BOOL v3 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v2 + 48);
  if (!v3) {
    goto LABEL_24;
  }
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  v3(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_24:
    uint64_t SInt64 = 0;
    goto LABEL_25;
  }
  CFIndex v6 = Count;
  uint64_t SInt64 = 0;
  CFIndex v8 = 0;
  uint64_t v9 = *MEMORY[0x1E4F21090];
  while (1)
  {
    CFArrayGetValueAtIndex(theArray, v8);
    CFTypeRef cf = 0;
    uint64_t v10 = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v12 + 48);
    if (!v13)
    {
      CFTypeRef v15 = cf;
LABEL_20:
      if (v15) {
        CFRelease(v15);
      }
      goto LABEL_22;
    }
    int v14 = v13(v10, v9, v4, &cf);
    CFTypeRef v15 = cf;
    if (v14) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = cf == 0;
    }
    if (v16) {
      goto LABEL_20;
    }
    uint64_t SInt64 = FigCFNumberGetSInt64();
    if (SInt64 == 3) {
      break;
    }
    if (cf) {
      CFRelease(cf);
    }
LABEL_22:
    if (v6 == ++v8) {
      goto LABEL_25;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t SInt64 = 3;
LABEL_25:
  if (theArray) {
    CFRelease(theArray);
  }
  return SInt64;
}

uint64_t volumeController_doesEndpointHaveSameID(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFIndex v6 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
    if (v6) {
      v6(CMBaseObject, *MEMORY[0x1E4F20E38], *MEMORY[0x1E4F1CF80], &cf);
    }
    uint64_t v2 = FigCFEqual();
    if (cf) {
      CFRelease(cf);
    }
  }
  return v2;
}

uint64_t volumeController_setMuteForEndpoint(const void *a1, int a2)
{
  v24[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294949706;
  }
  BOOL v3 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    BOOL v3 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v4 = *v3;
  CFTypeRef v5 = CFRetain(a1);
  if (v5)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t))(v8 + 56);
    if (v10) {
      uint64_t v9 = v10(CMBaseObject, *MEMORY[0x1E4F20EA0], v4);
    }
    else {
      uint64_t v9 = 4294954514;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  v24[0] = 0;
  FigRoutingManagerIsClusterLocalEndpoint((uint64_t)a1);
  uint64_t v11 = *MEMORY[0x1E4F20E38];
  uint64_t v12 = *MEMORY[0x1E4F1CF80];
  uint64_t v13 = FigEndpointGetCMBaseObject();
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  BOOL v16 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v15 + 48);
  if (v16) {
    v16(v13, v11, v12, v24);
  }
  volumeController_postEndpointMuteByUserDidChangeNotification();
  CFTypeRef cf = 0;
  uint64_t v17 = FigEndpointGetCMBaseObject();
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  CFIndex v20 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v19 + 48);
  if (v20) {
    v20(v17, *MEMORY[0x1E4F20F28], v12, &cf);
  }
  if (dword_1E9359E20)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v24[0]) {
    CFRelease(v24[0]);
  }
  return v9;
}

uint64_t FigRoutingManagerGetFigEndpointFeatures(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int ContextType = FigRoutingManagerContextUtilities_GetContextType(a2);
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
  if (v8) {
    v8(CMBaseObject, *MEMORY[0x1E4F20D10], *MEMORY[0x1E4F1CF80], &cf);
  }
  uint64_t v7 = 0;
  switch(ContextType)
  {
    case 1:
      if (FigRoutingManagerIsEndpointOfType(a1))
      {
        uint64_t v7 = FigEndpointGetSupportedFeatures() & 8 | 3;
        goto LABEL_26;
      }
      if (!FigRoutingManagerIsEndpointOfType(a1) && !FigRoutingManagerIsEndpointOfType(a1)) {
        goto LABEL_34;
      }
      BOOL v13 = CMSMDeviceState_ItsAHomePod() == 0;
      uint64_t v11 = FigEndpointGetSupportedFeatures() & 4 | (2 * v13);
      uint64_t v12 = FigEndpointGetSupportedFeatures() & 8;
      goto LABEL_25;
    case 2:
    case 6:
      if (FigRoutingManagerIsEndpointOfType(a1) && (CFTypeRef v9 = cf, cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
      {
        uint64_t v7 = 3;
      }
      else
      {
        if (FigRoutingManagerIsEndpointOfType(a1)) {
          uint64_t v7 = 3;
        }
        else {
          uint64_t v7 = 7;
        }
LABEL_26:
        CFTypeRef v9 = cf;
      }
      if (v9) {
        CFRelease(v9);
      }
      break;
    case 3:
      BOOL v10 = CMSMDeviceState_ItsAHomePod() == 0;
      uint64_t v11 = FigEndpointGetSupportedFeatures() & 8 | (2 * v10);
      uint64_t v12 = FigEndpointGetSupportedFeatures() & 4;
LABEL_25:
      uint64_t v7 = v11 | v12;
      goto LABEL_26;
    case 4:
      if (FigRoutingManagerIsEndpointOfType(a1))
      {
        uint64_t v7 = 3;
      }
      else if (FigRoutingManagerIsEndpointOfType(a1))
      {
        uint64_t v7 = FigEndpointGetSupportedFeatures() & 8;
      }
      else if (FigRoutingManagerIsEndpointOfType(a1))
      {
        uint64_t v15 = FigEndpointGetSupportedFeatures() & 8;
        uint64_t v7 = FigEndpointGetSupportedFeatures() & 4 | v15;
      }
      else
      {
LABEL_34:
        uint64_t v7 = 2;
      }
      goto LABEL_26;
    case 5:
      uint64_t v7 = FigEndpointGetSupportedFeatures() & 4 | 2;
      goto LABEL_26;
    case 7:
    case 9:
      uint64_t v7 = 16;
      goto LABEL_26;
    default:
      goto LABEL_26;
  }
  return v7;
}

__CFString *FigRoutingManagerCopyEndpointFeaturesAsString(char a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  BOOL v3 = Mutable;
  if (a1)
  {
    CFStringAppend(Mutable, @"screen");
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (v3 && CFStringGetLength(v3) >= 1) {
    CFStringRef v4 = @"+audio";
  }
  else {
    CFStringRef v4 = @"audio";
  }
  CFStringAppend(v3, v4);
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_14:
  if (v3 && CFStringGetLength(v3) >= 1) {
    CFStringRef v5 = @"+playback";
  }
  else {
    CFStringRef v5 = @"playback";
  }
  CFStringAppend(v3, v5);
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_19:
  if (v3 && CFStringGetLength(v3) >= 1) {
    CFStringRef v6 = @"+music";
  }
  else {
    CFStringRef v6 = @"music";
  }
  CFStringAppend(v3, v6);
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0) {
      return v3;
    }
    goto LABEL_29;
  }
LABEL_24:
  if (v3 && CFStringGetLength(v3) >= 1) {
    CFStringRef v7 = @"+control";
  }
  else {
    CFStringRef v7 = @"control";
  }
  CFStringAppend(v3, v7);
  if ((a1 & 0x20) != 0)
  {
LABEL_29:
    if (v3 && CFStringGetLength(v3) >= 1) {
      CFStringRef v8 = @"+low latency audio";
    }
    else {
      CFStringRef v8 = @"low latency audio";
    }
    CFStringAppend(v3, v8);
  }
  return v3;
}

uint64_t FigRoutingManagerIsEndpointOfSubtype(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFStringRef v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v3 + 48);
  if (v5) {
    v5(CMBaseObject, *MEMORY[0x1E4F20FB8], *MEMORY[0x1E4F1CF80], &cf);
  }
  uint64_t v4 = FigCFEqual();
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

BOOL FigRoutingManagerIsEndpointLocal(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFStringRef v8 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFStringRef v6 = *(void (**)(uint64_t, void, void, const void **))(v4 + 48);
  if (v6)
  {
    v6(CMBaseObject, *MEMORY[0x1E4F20E88], *MEMORY[0x1E4F1CF80], &v8);
    uint64_t v1 = v8;
  }
  BOOL v5 = v1 == (const void *)*MEMORY[0x1E4F1CFD0];
  if (v1) {
    CFRelease(v1);
  }
  return v5;
}

BOOL FigRoutingManagerIsClusterEndpoint(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  BOOL v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v3 + 48);
  if (v5) {
    v5(CMBaseObject, *MEMORY[0x1E4F20FB8], *MEMORY[0x1E4F1CF80], &cf);
  }
  BOOL v4 = FigCFEqual() || FigCFEqual() || FigCFEqual() != 0;
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

BOOL FigRoutingManagerIsEndpointNonRemoteControlLocalAirPlay(uint64_t a1)
{
  BOOL IsEndpointLocal = FigRoutingManagerIsEndpointLocal(a1);
  uint64_t v2 = (const void *)*MEMORY[0x1E4F1CFC8];
  BOOL v10 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFStringRef v6 = *(void (**)(uint64_t, void, void, const void **))(v5 + 48);
  if (v6)
  {
    v6(CMBaseObject, *MEMORY[0x1E4F20EB8], *MEMORY[0x1E4F1CF80], &v10);
    CFStringRef v7 = v10;
    if (!v10) {
      return v7 == v2 && IsEndpointLocal;
    }
    goto LABEL_6;
  }
  CFStringRef v7 = v2;
  if (v2) {
LABEL_6:
  }
    CFRelease(v7);
  return v7 == v2 && IsEndpointLocal;
}

CFArrayRef FigRoutingManagerDoEndpointsContainLocalAirPlayEndpoint(const __CFArray *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    CFIndex Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v3 = Count;
      CFIndex v4 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
        if (FigRoutingManagerIsEndpointNonRemoteControlLocalAirPlay((uint64_t)ValueAtIndex)) {
          break;
        }
        if (v3 == ++v4) {
          return 0;
        }
      }
      return (const __CFArray *)1;
    }
  }
  return result;
}

CFArrayRef FigRoutingManagerDoEndpointsContainOdeonEndpoint(const __CFArray *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    CFIndex Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v3 = Count;
      CFIndex v4 = 0;
      uint64_t v5 = *MEMORY[0x1E4F20FB8];
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v1, v4);
        CFTypeRef cf = 0;
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v10 + 48);
        if (v11) {
          v11(CMBaseObject, v5, v6, &cf);
        }
        if (FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex) && FigCFEqual()) {
          break;
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v3 == ++v4) {
          return 0;
        }
      }
      return (const __CFArray *)1;
    }
  }
  return result;
}

BOOL FigRoutingManagerIsEndpointSelfOnlyLocalAirPlay(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef v15 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  uint64_t v1 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v4 + 48);
  if (v6) {
    v6(CMBaseObject, *MEMORY[0x1E4F20E88], v1, &v15);
  }
  CFTypeRef cf = 0;
  uint64_t v7 = FigEndpointGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
  if (v10)
  {
    v10(v7, *MEMORY[0x1E4F20FB8], v1, &cf);
    CFTypeRef v11 = cf;
  }
  else
  {
    CFTypeRef v11 = 0;
  }
  if (v15 != (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    BOOL v5 = 0;
    if (!v11) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  int v12 = FigCFEqual();
  CFTypeRef v11 = cf;
  if (v12)
  {
    BOOL v5 = 1;
    if (!cf) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  BOOL v5 = FigCFEqual() != 0;
  CFTypeRef v11 = cf;
  if (cf)
  {
LABEL_19:
    CFRelease(v11);
    CFTypeRef cf = 0;
  }
LABEL_20:
  if (v15) {
    CFRelease(v15);
  }
  return v5;
}

BOOL FigRoutingManagerIsClusterLocalEndpoint(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef v16 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  uint64_t v1 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v4 + 48);
  if (v6) {
    v6(CMBaseObject, *MEMORY[0x1E4F20E88], v1, &v16);
  }
  CFTypeRef cf = 0;
  uint64_t v7 = FigEndpointGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
  if (v10)
  {
    v10(v7, *MEMORY[0x1E4F20FB8], v1, &cf);
    CFTypeRef v11 = cf;
  }
  else
  {
    CFTypeRef v11 = 0;
  }
  if (v16 != (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    BOOL v5 = 0;
    if (!v11) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  int v12 = FigCFEqual();
  CFTypeRef v11 = cf;
  if (v12 || (v13 = FigCFEqual(), CFTypeRef v11 = cf, v13))
  {
    BOOL v5 = 1;
    if (!v11) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  BOOL v5 = FigCFEqual() != 0;
  CFTypeRef v11 = cf;
  if (cf)
  {
LABEL_20:
    CFRelease(v11);
    CFTypeRef cf = 0;
  }
LABEL_21:
  if (v16) {
    CFRelease(v16);
  }
  return v5;
}

BOOL FigRoutingManagerIsLocalHomeTheaterEndpoint(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  uint64_t v1 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v4 + 48);
  if (v6) {
    v6(CMBaseObject, *MEMORY[0x1E4F20E88], v1, &cf);
  }
  int v13 = 0;
  uint64_t v7 = FigEndpointGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, const void **))(v9 + 48);
  if (v10)
  {
    v10(v7, *MEMORY[0x1E4F20FB8], v1, &v13);
    CFTypeRef v11 = v13;
  }
  else
  {
    CFTypeRef v11 = 0;
  }
  if (cf != (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    BOOL v5 = 0;
    if (!v11) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  BOOL v5 = FigCFEqual() != 0;
  CFTypeRef v11 = v13;
  if (v13)
  {
LABEL_16:
    CFRelease(v11);
    int v13 = 0;
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

BOOL FigRoutingManagerIsEndpointWHAGroupable(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, void, void, const void **))(v4 + 48);
  if (v6)
  {
    v6(CMBaseObject, *MEMORY[0x1E4F20EC8], *MEMORY[0x1E4F1CF80], &v8);
    uint64_t v1 = v8;
  }
  BOOL v5 = v1 == (const void *)*MEMORY[0x1E4F1CFD0];
  if (v1) {
    CFRelease(v1);
  }
  return v5;
}

BOOL FigRoutingManagerIsEndpointLowLatencyAirPlay(uint64_t a1)
{
  if (!FigRoutingManagerIsEndpointOfType(a1)) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  BOOL v5 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(v3 + 48);
  if (v5)
  {
    v5(CMBaseObject, 0x1EE5F4288, *MEMORY[0x1E4F1CF80], &cf);
    CFNumberRef v6 = (const __CFNumber *)cf;
  }
  else
  {
    CFNumberRef v6 = 0;
  }
  BOOL v4 = CMSMVAUtility_GetPortFromCFNumber(v6) == 1885433964;
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

BOOL FigRoutingManagerIsEndpointActivated(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFNumberRef v6 = *(void (**)(uint64_t, void, void, const void **))(v4 + 48);
  if (v6)
  {
    v6(CMBaseObject, *MEMORY[0x1E4F20E40], *MEMORY[0x1E4F1CF80], &v8);
    uint64_t v1 = v8;
  }
  BOOL v5 = v1 == (const void *)*MEMORY[0x1E4F1CFD0];
  if (v1) {
    CFRelease(v1);
  }
  return v5;
}

uint64_t FigRoutingManagerCopyRoutingContextUUIDForEndpoint(uint64_t a1)
{
  uint64_t v13 = 0;
  if (FigRoutingManagerIsEndpointWHAGroupable(a1) && FigRoutingManagerIsEndpointOfType(a1))
  {
    CFTypeRef v2 = FigRoutingManagerCopyLocalAirPlayEndpoint();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      CFTypeRef v11 = *(void (**)(uint64_t, void, void, uint64_t *))(v6 + 48);
      if (v11) {
        v11(CMBaseObject, *MEMORY[0x1E4F20F78], *MEMORY[0x1E4F1CF80], &v13);
      }
      CFRelease(v3);
    }
  }
  else if (a1)
  {
    uint64_t v7 = FigEndpointGetCMBaseObject();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v9 = v8 ? v8 : 0;
    uint64_t v10 = *(void (**)(uint64_t, void, void, uint64_t *))(v9 + 48);
    if (v10) {
      v10(v7, *MEMORY[0x1E4F20F78], *MEMORY[0x1E4F1CF80], &v13);
    }
  }
  return v13;
}

BOOL FigRoutingManagerIsEndpointBluetoothShareable(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, void, void, const void **))(v4 + 48);
  if (v6)
  {
    v6(CMBaseObject, *MEMORY[0x1E4F20E50], *MEMORY[0x1E4F1CF80], &v8);
    uint64_t v1 = v8;
  }
  BOOL v5 = v1 == (const void *)*MEMORY[0x1E4F1CFD0];
  if (v1) {
    CFRelease(v1);
  }
  return v5;
}

BOOL FigRoutingManagerAreAllEndpointsBluetoothShareable(const __CFArray *a1)
{
  CFTypeRef cf[21] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 1;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 1;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  uint64_t v13 = *MEMORY[0x1E4F20F28];
  uint64_t v5 = *MEMORY[0x1E4F1CF80];
  while (1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    if (ValueAtIndex)
    {
      cf[0] = 0;
      uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v9 + 48);
      if (v10) {
        v10(CMBaseObject, v13, v5, cf);
      }
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    BOOL result = FigRoutingManagerIsEndpointBluetoothShareable((uint64_t)ValueAtIndex);
    if (!result) {
      break;
    }
    if (v3 == ++v4) {
      return 1;
    }
  }
  return result;
}

uint64_t FigRoutingManagerGetEndpointManagerName(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v3 + 48);
  if (v5) {
    v5(CMBaseObject, *MEMORY[0x1E4F21048], *MEMORY[0x1E4F1CF80], &cf);
  }
  if (FigCFEqual())
  {
    uint64_t v6 = (uint64_t *)MEMORY[0x1E4F20650];
LABEL_18:
    uint64_t v4 = *v6;
    goto LABEL_19;
  }
  if (FigCFEqual())
  {
    uint64_t v6 = (uint64_t *)MEMORY[0x1E4F20640];
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    uint64_t v6 = (uint64_t *)MEMORY[0x1E4F20638];
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    uint64_t v6 = (uint64_t *)MEMORY[0x1E4F20648];
    goto LABEL_18;
  }
  if (FigCFEqual())
  {
    uint64_t v6 = (uint64_t *)MEMORY[0x1E4F20660];
    goto LABEL_18;
  }
  if (FigCFEqual()) {
    uint64_t v4 = *MEMORY[0x1E4F20658];
  }
  else {
    uint64_t v4 = 0;
  }
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

CFMutableDictionaryRef FigRoutingManagerCreateEndpointDelegateContext()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  return Mutable;
}

void FigRoutingManagerRemoveCachedDelegateContext(uint64_t a1)
{
  SharedManager = FigRoutingManagerGetSharedManager();
  MEMORY[0x199716EE0](SharedManager[7]);
  CFDictionaryRef v3 = (CFDictionaryRef)SharedManager[8];
  if (!v3) {
    goto LABEL_15;
  }
  CFDictionaryGetValue(*((CFDictionaryRef *)v3 + 2), @"EndpointDelegateContextKey_RoutingContextUUID");
  uint64_t v4 = 0;
  while (*((void *)v3 + 1) != a1 || !FigCFEqual())
  {
    uint64_t v4 = v3;
    CFDictionaryRef v3 = *(CFDictionaryRef *)v3;
    if (!v3) {
      goto LABEL_15;
    }
  }
  CFDictionaryRef v5 = *(CFDictionaryRef *)v3;
  if (v4)
  {
    *uint64_t v4 = v5;
    if (*(void *)v3)
    {
LABEL_10:
      uint64_t v6 = (const void *)*((void *)v3 + 1);
      if (v6) {
        CFRelease(v6);
      }
      uint64_t v7 = (const void *)*((void *)v3 + 2);
      if (v7) {
        CFRelease(v7);
      }
      free(v3);
LABEL_15:
      JUMPOUT(0x199716EF0);
    }
  }
  else
  {
    SharedManager[8] = v5;
    if (v5) {
      goto LABEL_10;
    }
  }
  SharedManager[9] = v4;
  goto LABEL_10;
}

void FigRoutingManagerHandleFigEndpointDescriptionChangedNotificationFromCache(const void *a1, const void *a2, const void *a3)
{
  SharedManager = FigRoutingManagerGetSharedManager();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v7 = *((void *)SharedManager + 1);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __FigRoutingManagerHandleFigEndpointDescriptionChangedNotificationFromCache_block_invoke;
  v8[3] = &__block_descriptor_56_e5_v8__0l;
  os_log_type_t v8[4] = a1;
  void v8[5] = a2;
  void v8[6] = a3;
  MXDispatchAsync((uint64_t)"FigRoutingManagerHandleFigEndpointDescriptionChangedNotificationFromCache", (uint64_t)"FigRoutingManager_EndpointHelpers.m", 924, 0, 0, v7, (uint64_t)v8);
}

void __FigRoutingManagerHandleFigEndpointDescriptionChangedNotificationFromCache_block_invoke(uint64_t *a1)
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v2 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  CFTypeRef v42 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    v7(CMBaseObject, *MEMORY[0x1E4F20E40], v3, &v42);
    CFTypeRef v2 = v42;
  }
  if (v2 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    theArray[0] = 0;
    FigRoutingManagerContextUtilities_CopyAllRoutingContextUUIDs((uint64_t)theArray);
    if (theArray[0]) {
      CFIndex Count = CFArrayGetCount(theArray[0]);
    }
    else {
      CFIndex Count = 0;
    }
    *(void *)CFStringRef prefix = 0;
    uint64_t v9 = *MEMORY[0x1E4F20E38];
    uint64_t v10 = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(v12 + 48);
    if (v13) {
      v13(v10, v9, v3, prefix);
    }
    if (Count >= 1)
    {
      CFIndex v14 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], v14);
        if (!MX_FeatureFlags_IsSystemRemoteDisplayContextEnabled()
          || !FigRoutingManagerContextUtilities_IsContextSystemRemoteDisplay((uint64_t)ValueAtIndex))
        {
          break;
        }
        FigRoutingManagerHandleDescriptionChangedForRemoteDisplay(a1[4], a1[5]);
LABEL_44:
        if (Count == ++v14) {
          goto LABEL_45;
        }
      }
      CFTypeRef v47 = 0;
      FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex((uint64_t)ValueAtIndex, 0, (uint64_t)&v47);
      CFStringRef theString = 0;
      if (v47)
      {
        uint64_t v16 = FigEndpointGetCMBaseObject();
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v18 = v17 ? v17 : 0;
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef *))(v18 + 48);
        if (v19) {
          v19(v16, v9, v3, &theString);
        }
      }
      CFTypeRef v20 = v47;
      if (v47 != (CFTypeRef)a1[4])
      {
        if (!*(void *)prefix || !theString) {
          goto LABEL_31;
        }
        if (!CFStringHasPrefix(theString, *(CFStringRef *)prefix))
        {
          CFTypeRef v20 = v47;
LABEL_31:
          if (!FigRoutingManagerIsEndpointOfType((uint64_t)v20)) {
            goto LABEL_40;
          }
          CFIndex v21 = (const void *)a1[4];
          CFTypeRef v22 = v47;
          if (!v47 || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
            CFTypeRef v22 = 0;
          }
          if (!FigRoutingManagerIsEndpointPresentInAggregate(v21, (uint64_t)v22)) {
            goto LABEL_40;
          }
        }
      }
      FigRoutingManagerContextUtilities_PostRouteConfigUpdatedToClientsOfContextWithUUIDAndItsFollowers((uint64_t)ValueAtIndex, 0, @"configUpdateReasonEndpointDescriptorChanged");
      CFTypeRef cf = 0;
      FigRoutingManagerContextUtilities_CopyPickedIndividualEndpoints((uint64_t)ValueAtIndex, (CFMutableArrayRef *)&cf);
      CFTypeRef v23 = FigEndpointDescriptorUtility_CopyDescriptorsForEndpoints((const __CFArray *)cf, 0);
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      FigRoutingManagerContextUtilities_UpdateRouteDescriptorForGivenContext((uint64_t)ValueAtIndex, (uint64_t)v23);
      if (v23) {
        CFRelease(v23);
      }
LABEL_40:
      if (theString)
      {
        CFRelease(theString);
        CFStringRef theString = 0;
      }
      if (v47) {
        CFRelease(v47);
      }
      goto LABEL_44;
    }
LABEL_45:
    if (*(void *)prefix)
    {
      CFRelease(*(CFTypeRef *)prefix);
      *(void *)CFStringRef prefix = 0;
    }
    if (theArray[0]) {
      CFRelease(theArray[0]);
    }
  }
  if (FigRoutingManagerIsEndpointOfType(a1[4]))
  {
    CFTypeRef v47 = 0;
    uint64_t v24 = FigEndpointGetCMBaseObject();
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    CFTypeRef v27 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v26 + 48);
    if (v27) {
      v27(v24, *MEMORY[0x1E4F20F28], v3, &v47);
    }
    CFStringRef theString = 0;
    uint64_t v28 = FigEndpointGetCMBaseObject();
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    unsigned int v31 = *(void (**)(uint64_t, void, uint64_t, CFStringRef *))(v30 + 48);
    if (v31) {
      v31(v28, *MEMORY[0x1E4F20D18], v3, &theString);
    }
    CFTypeRef cf = 0;
    uint64_t v32 = FigEndpointGetCMBaseObject();
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v33) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v34 + 48);
    if (v35) {
      v35(v32, *MEMORY[0x1E4F20F18], v3, &cf);
    }
    if (dword_1E9359DC0)
    {
      unsigned int v44 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v37 = v44;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v38 = v37;
      }
      else {
        unsigned int v38 = v37 & 0xFFFFFFFE;
      }
      if (v38)
      {
        *(_DWORD *)CFStringRef prefix = 136315906;
        *(void *)&prefix[4] = "routingManager_logBluetoothInfo";
        __int16 v49 = 2114;
        CFTypeRef v50 = v47;
        __int16 v51 = 2114;
        CFStringRef v52 = theString;
        __int16 v53 = 2114;
        CFTypeRef v54 = cf;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (theString)
    {
      CFRelease(theString);
      CFStringRef theString = 0;
    }
    if (v47) {
      CFRelease(v47);
    }
  }
  if (v42)
  {
    CFRelease(v42);
    CFTypeRef v42 = 0;
  }
  unsigned int v39 = (const void *)a1[4];
  if (v39) {
    CFRelease(v39);
  }
  unsigned int v40 = (const void *)a1[5];
  if (v40) {
    CFRelease(v40);
  }
  __int16 v41 = (const void *)a1[6];
  if (v41) {
    CFRelease(v41);
  }
}

uint64_t FigRoutingManagerIsEndpointPresentInAggregate(const void *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    CFArrayRef theArray = 0;
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v6 + 48);
    if (!v7) {
      goto LABEL_12;
    }
    v7(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
    if (!theArray) {
      return 0;
    }
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      CFIndex v10 = 0;
      while (CFArrayGetValueAtIndex(theArray, v10) != a1)
      {
        if (v9 == ++v10) {
          goto LABEL_12;
        }
      }
      uint64_t v2 = 1;
    }
    else
    {
LABEL_12:
      uint64_t v2 = 0;
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
  return v2;
}

CFMutableDictionaryRef FigRoutingManagerCreateEndpointActivateOptions(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable = 0;
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (FigCFDictionaryGetBooleanIfPresent()) {
      FigCFDictionarySetValue();
    }
    if (FigCFDictionaryGetBooleanIfPresent()) {
      FigCFDictionarySetValue();
    }
    if (FigCFDictionaryGetBooleanIfPresent()) {
      FigCFDictionarySetValue();
    }
    FigCFDictionaryGetBooleanIfPresent();
    int IsCrossfadePlaybackSupported = FigRoutingManagerIsCrossfadePlaybackSupported();
    FigCFDictionarySetValue();
    if (IsCrossfadePlaybackSupported)
    {
      CMSMUtility_GetFadeInDurationForPlaybackHandoff();
      Float32 = (const void *)FigCFNumberCreateFloat32();
      FigCFDictionarySetValue();
      if (Float32) {
        CFRelease(Float32);
      }
    }
    CFIndex v9 = (const void *)FigRoutingManagerContextUtilities_CopyHijackID(a2);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    switch(FigRoutingManagerContextUtilities_GetContextType(a2))
    {
      case 1u:
        if (FigRoutingManagerIsEndpointOfType(a1) || FigRoutingManagerIsEndpointOfType(a1)) {
          goto LABEL_18;
        }
        if (FigRoutingManagerIsEndpointOfType(a1))
        {
          FigCFDictionarySetValue();
          cf[0] = 0;
          FigRoutingManagerContextUtilities_CopyPickedEndpointAtIndex(a2, 0, (uint64_t)cf);
          if (cf[0]) {
            CFRelease(cf[0]);
          }
        }
        break;
      case 2u:
        if (FigRoutingManagerIsEndpointOfType(a1))
        {
          FigCFDictionarySetValue();
          goto LABEL_18;
        }
        break;
      case 3u:
        if (FigRoutingManagerIsEndpointOfType(a1) || FigRoutingManagerIsEndpointOfType(a1)) {
          goto LABEL_18;
        }
        break;
      case 4u:
      case 5u:
        if (FigRoutingManagerIsEndpointOfType(a1) || FigRoutingManagerIsEndpointOfType(a1)) {
          goto LABEL_18;
        }
        break;
      case 6u:
        if (FigRoutingManagerIsEndpointOfType(a1))
        {
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          if (a3)
          {
            CFDictionaryGetValue(a3, @"clientPID");
            goto LABEL_18;
          }
        }
        break;
      case 7u:
        if (FigRoutingManagerIsEndpointOfType(a1)) {
LABEL_18:
        }
          FigCFDictionarySetValue();
        break;
      default:
        break;
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  return Mutable;
}

uint64_t FigRoutingManagerCreateEndpointActivateCompletionContext(const void *a1, const void *a2, const void *a3, const void *a4, void *a5)
{
  if (!a5) {
    return 4294954296;
  }
  CFIndex v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x600407DD51EA1uLL);
  if (!v10) {
    return 4294954295;
  }
  uint64_t v11 = v10;
  if (a4) {
    CFTypeRef v12 = CFRetain(a4);
  }
  else {
    CFTypeRef v12 = 0;
  }
  _OWORD v11[3] = v12;
  if (a1) {
    CFTypeRef v14 = CFRetain(a1);
  }
  else {
    CFTypeRef v14 = 0;
  }
  *uint64_t v11 = v14;
  if (a2) {
    CFTypeRef v15 = CFRetain(a2);
  }
  else {
    CFTypeRef v15 = 0;
  }
  v11[1] = v15;
  if (a3) {
    CFTypeRef v16 = CFRetain(a3);
  }
  else {
    CFTypeRef v16 = 0;
  }
  _OWORD v11[2] = v16;
  id v17 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  uint64_t result = 0;
  v11[4] = v17;
  *a5 = v11;
  return result;
}

void FigRoutingManagerDestroyEndpointActivateCompletionContext(CFTypeRef *a1)
{
  if (a1)
  {
    CFTypeRef v2 = a1[3];
    if (v2) {
      CFRelease(v2);
    }
    if (*a1) {
      CFRelease(*a1);
    }
    CFTypeRef v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    CFTypeRef v4 = a1[2];
    if (v4) {
      CFRelease(v4);
    }
    CFTypeRef v5 = a1[4];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
}

uint64_t FigRoutingManagerEndpointActivateWithCompletionCallback(const void *a1, uint64_t a2, const __CFDictionary *a3, void (*a4)(void, uint64_t, void, void, uint64_t *), uint64_t *a5)
{
  CFTypeRef cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v27 = 0;
  if (a1)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v12 = v11 ? v11 : 0;
    uint64_t v13 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], &v27);
    }
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    if (FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    {
      FigRoutingManagerSetupEndpointCentralForCarPlay(a1);
    }
    else if (FigRoutingManagerIsEndpointOfType((uint64_t)a1) {
           || FigRoutingManagerIsEndpointOfType((uint64_t)a1))
    }
    {
      if (a5)
      {
        uint64_t v16 = *a5;
        uint64_t v17 = a5[1];
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      cf[0] = 0;
      uint64_t v18 = FigEndpointGetCMBaseObject();
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v20 = v19 ? v19 : 0;
      CFIndex v21 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v20 + 48);
      if (v21)
      {
        v21(v18, *MEMORY[0x1E4F20DF8], *MEMORY[0x1E4F1CF80], cf);
        CFTypeRef v22 = cf[0];
      }
      else
      {
        CFTypeRef v22 = 0;
      }
      FigRoutingManagerSetMirroringModeOnBKSDisplayServices(a3, v16, v17, v22 == (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(uint64_t (**)(const void *, uint64_t, const __CFDictionary *, void, uint64_t *))(v24 + 8);
    if (v25) {
      uint64_t v15 = v25(a1, a2, a3, a4, a5);
    }
    else {
      uint64_t v15 = 4294954514;
    }
  }
  else
  {
    if (a4) {
      a4(0, a2, 0, 0, a5);
    }
    uint64_t v15 = 0;
  }
  if (v27) {
    CFRelease(v27);
  }
  return v15;
}

__CFDictionary *FigRoutingManagerCreateEndpointDeactivateOptions(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = 0;
  if (a1 && a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (FigCFDictionaryGetBooleanIfPresent()) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F20530], (const void *)*MEMORY[0x1E4F1CFC8]);
    }
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    int IsCrossfadePlaybackSupported = FigRoutingManagerIsCrossfadePlaybackSupported();
    FigCFDictionarySetValue();
    if (IsCrossfadePlaybackSupported)
    {
      CMSMUtility_GetFadeOutDurationForPlaybackHandoff();
      Float32 = (const void *)FigCFNumberCreateFloat32();
      FigCFDictionarySetValue();
      if (Float32) {
        CFRelease(Float32);
      }
    }
  }
  return Mutable;
}

uint64_t FigRoutingManagerCreateEndpointDeactivateCompletionContext(const void *a1, void *a2)
{
  if (!a2) {
    return 4294954296;
  }
  CFTypeRef v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x60040CF05A765uLL);
  if (!v4) {
    return 4294954295;
  }
  CFTypeRef v5 = v4;
  if (a1) {
    CFTypeRef v6 = CFRetain(a1);
  }
  else {
    CFTypeRef v6 = 0;
  }
  *CFTypeRef v5 = v6;
  id v8 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  uint64_t result = 0;
  _OWORD v5[2] = v8;
  *a2 = v5;
  return result;
}

void FigRoutingManagerDestroyEndpointDeactivateCompletionContext(const void **a1)
{
  if (a1)
  {
    CFTypeRef v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    CFTypeRef v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    CFTypeRef v4 = a1[2];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }
}

uint64_t FigRoutingManagerEndpointDeactivateWithCompletionCallback(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t, void, void, uint64_t), uint64_t a5)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (a1)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v12 = v11 ? v11 : 0;
    uint64_t v13 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v12 + 48);
    if (v13) {
      v13(CMBaseObject, *MEMORY[0x1E4F20F28], *MEMORY[0x1E4F1CF80], cf);
    }
  }
  if (dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    if (FigRoutingManagerIsEndpointOfType(a1))
    {
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v16 = v15 ? v15 : 0;
      uint64_t v18 = *(void (**)(uint64_t, void))(v16 + 48);
      if (v18) {
        v18(a1, 0);
      }
    }
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    CFIndex v21 = *(uint64_t (**)(uint64_t, uint64_t, void (*)(void, uint64_t, void, void, uint64_t), uint64_t))(v20 + 16);
    if (v21) {
      uint64_t v17 = v21(a1, a3, a4, a5);
    }
    else {
      uint64_t v17 = 4294954514;
    }
  }
  else
  {
    if (a4) {
      a4(0, a2, 0, 0, a5);
    }
    uint64_t v17 = 0;
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v17;
}

CFMutableDictionaryRef FigRoutingManagerCreateSubEndpointAddOptions(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = 0;
  if (a1 && a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (FigCFDictionaryGetBooleanIfPresent()) {
      FigCFDictionarySetValue();
    }
    FigCFDictionarySetValue();
    CFTypeRef v4 = (const void *)FigRoutingManagerContextUtilities_CopyHijackID(a2);
    FigCFDictionarySetValue();
    if (v4) {
      CFRelease(v4);
    }
  }
  return Mutable;
}

uint64_t FigRoutingManagerCreateAggregateAddEndpointCompletionContext(const void *a1, const void *a2, const void *a3, void *a4)
{
  if (!a4) {
    return 4294954296;
  }
  id v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x60040902580DDuLL);
  if (!v8) {
    return 4294954295;
  }
  CFIndex v9 = v8;
  if (a1) {
    CFTypeRef v10 = CFRetain(a1);
  }
  else {
    CFTypeRef v10 = 0;
  }
  *CFIndex v9 = v10;
  if (a2) {
    CFTypeRef v12 = CFRetain(a2);
  }
  else {
    CFTypeRef v12 = 0;
  }
  v9[1] = v12;
  if (a3) {
    CFTypeRef v13 = CFRetain(a3);
  }
  else {
    CFTypeRef v13 = 0;
  }
  v9[2] = v13;
  id v14 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
  uint64_t result = 0;
  void v9[3] = v14;
  *a4 = v9;
  return result;
}

void FigRoutingManagerDestroyAggregateAddEndpointCompletionContext(const void **a1)
{
  if (a1)
  {
    CFTypeRef v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    CFTypeRef v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    CFTypeRef v4 = a1[2];
    if (v4) {
      CFRelease(v4);
    }
    CFTypeRef v5 = a1[3];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
}

uint64_t FigRoutingManagerAggregateAddLocalAirPlayEndpoint(const void *a1, void *a2)
{
  v25[20] = *(id *)MEMORY[0x1E4F143B8];
  v25[0] = a2;
  if (MX_FeatureFlags_IsAirPlayDaemonEnabled(a1, a2) || a2)
  {
    CFTypeRef v5 = FigRoutingManagerCopyLocalAirPlayEndpoint();
    if (!v5)
    {
      if (dword_1E9359DC0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    uint64_t v7 = v5;
    id IsAirPlayDaemonEnabled = (id)MX_FeatureFlags_IsAirPlayDaemonEnabled(v5, v6);
    if (IsAirPlayDaemonEnabled && !a2)
    {
      if (dword_1E9359DC0)
      {
        LODWORD(v24) = 0;
        CFTypeRef v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerCreateAndActivateAggregateEndpointForContext(a1);
      FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)a1, (uint64_t)v25);
      id IsAirPlayDaemonEnabled = v25[0];
    }
    if (MX_FeatureFlags_IsAirPlayDaemonEnabled(IsAirPlayDaemonEnabled, v9)
      && !FigRoutingManagerIsEndpointActivated((uint64_t)v25[0]))
    {
      if (dword_1E9359DC0)
      {
        LODWORD(v24) = 0;
        CFTypeRef v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigRoutingManagerActivateEndpoint(v25[0], a1, 0, 0);
    }
    id v13 = v25[0];
    if (!v25[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
      id v13 = 0;
    }
    if (!FigRoutingManagerIsEndpointPresentInAggregate(v7, (uint64_t)v13))
    {
      if (FigRoutingManagerAggregateRemoveLocalAirPlayEndpoint())
      {
        id v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (FigRoutingManagerIsClusterLocalEndpoint((uint64_t)v7)
        && FigRoutingContextUtilities_IsFollowingAnotherContext((uint64_t)a1))
      {
        if (dword_1E9359DC0)
        {
          uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingContextUtilities_UnfollowUUIDFromLeader(a1, @"configUpdateReasonEndedSuccess");
      }
      uint64_t v24 = 0;
      FigRoutingManagerCreateAggregateAddEndpointCompletionContext(a1, 0, 0, &v24);
      id v16 = v25[0];
      if (!v25[0] || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
        id v16 = 0;
      }
      uint64_t v17 = v24;
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 32);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(uint64_t (**)(id, const void *, void, void (*)(const void *, CFTypeRef, uint64_t, uint64_t, int, uint64_t), void *))(v19 + 8);
      if (!v20
        || (uint64_t v21 = v20(v16, v7, 0, FigRoutingManagerAggregateAddEndpointCompletionCallback, v17), v21 == -12782))
      {
        FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)v24);
        uint64_t v4 = 4294954514;
        goto LABEL_38;
      }
      uint64_t v4 = v21;
      if (v21 || !dword_1E9359DC0) {
        goto LABEL_38;
      }
      uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v4 = 0;
LABEL_38:
    CFRelease(v7);
    return v4;
  }
  return 0;
}

uint64_t FigRoutingManagerAggregateRemoveLocalAirPlayEndpoint()
{
  v14[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v14[0] = 0;
  FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)v14);
  CFTypeRef cf = 0;
  FigRoutingManagerContextUtilities_CopyAggregateEndpointAsFigEndpoint((uint64_t)v14[0], (uint64_t)&cf);
  CFArrayRef theArray = 0;
  if (cf)
  {
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v2 = v1 ? v1 : 0;
    CFTypeRef v3 = *(void (**)(uint64_t, void, void, CFArrayRef *))(v2 + 48);
    if (v3) {
      v3(CMBaseObject, *MEMORY[0x1E4F20FB0], *MEMORY[0x1E4F1CF80], &theArray);
    }
  }
  CFIndex v4 = 0;
  do
  {
    CFIndex Count = (CFIndex)theArray;
    if (theArray) {
      CFIndex Count = CFArrayGetCount(theArray);
    }
    if (v4 >= Count)
    {
      uint64_t v9 = 0;
      goto LABEL_19;
    }
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4++);
  }
  while (!FigRoutingManagerIsEndpointLocal((uint64_t)ValueAtIndex));
  CFTypeRef v7 = cf;
  if (!cf || (FigEndpointAggregateGetClassID(), !CMBaseObjectIsMemberOfClass())) {
    CFTypeRef v7 = 0;
  }
  int v8 = FigRoutingManagerRemoveEndpointFromAggregate((uint64_t)v7, ValueAtIndex, v14[0], 0, 0, (uint64_t)FigRoutingManagerAggregateRemoveEndpointCompletionCallback);
  uint64_t v9 = 1;
  if (!v8 && dword_1E9359DC0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t v9 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_19:
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v14[0]) {
    CFRelease(v14[0]);
  }
  return v9;
}

void FigRoutingManagerAggregateAddEndpointCompletionCallback(const void *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFRetain(cf);
    if (a1) {
      CFRetain(a1);
    }
    if (*(void *)a6) {
      CFTypeRef v12 = CFRetain(*(CFTypeRef *)a6);
    }
    else {
      CFTypeRef v12 = 0;
    }
    id v14 = *(const void **)(a6 + 8);
    if (v14) {
      CFTypeRef v15 = CFRetain(v14);
    }
    else {
      CFTypeRef v15 = 0;
    }
    id v16 = *(const void **)(a6 + 16);
    if (v16) {
      CFTypeRef v17 = CFRetain(v16);
    }
    else {
      CFTypeRef v17 = 0;
    }
    [*(id *)(a6 + 24) timeIntervalSinceNow];
    float v19 = fabs(v18) * 1000.0;
    SharedManager = FigRoutingManagerGetSharedManager();
    id v21 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
    CFTypeRef v22 = *((void *)SharedManager + 1);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = __FigRoutingManagerAggregateAddEndpointCompletionCallback_block_invoke;
    v23[3] = &unk_1E57C8F98;
    v23[4] = v21;
    void v23[5] = cf;
    int v24 = a5;
    v23[6] = a4;
    v23[7] = a3;
    float v25 = v19;
    v23[8] = v12;
    v23[9] = a1;
    v23[10] = v15;
    void v23[11] = v17;
    MXDispatchAsync((uint64_t)"FigRoutingManagerAggregateAddEndpointCompletionCallback", (uint64_t)"FigRoutingManager_EndpointHelpers.m", 1828, 0, 0, v22, (uint64_t)v23);
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)a6);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t FigRoutingManagerRemoveEndpointFromAggregate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t a6)
{
  v34[19] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t FigEndpoint = FigEndpointAggregateGetFigEndpoint();
  v34[0] = 0;
  FigRoutingManagerCreateAggregateAddEndpointCompletionContext(a3, a4, a5, v34);
  FigRoutingManagerCrossfadePlayback();
  if (FigEndpoint)
  {
    CFTypeRef v13 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    CFTypeRef v33 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    double v18 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v17 + 48);
    if (v18) {
      v18(CMBaseObject, *MEMORY[0x1E4F20EB8], v14, &v33);
    }
    CFTypeRef v19 = v33;
    if (v33 == v13)
    {
      if (FigRoutingManagerAggregateShouldEndpointRemovalInterruptSystemMusicSessions(a1, a2, (uint64_t *)v34[0]))
      {
        CFTypeRef cf = 0;
        FigRoutingManagerContextUtilities_CopySystemMusicContextUUID((uint64_t)&cf);
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(Mutable, @"currentRouteChanged_ShouldPause", (const void *)*MEMORY[0x1E4F1CFD0]);
        if (dword_1E9359DC0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigRoutingManagerContextUtilities_PostNotificationToClientsOfContextWithUUIDAndItsFollowers((uint64_t)cf, @"currentRouteChanged", (uint64_t)Mutable);
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      FigVolumeControllerRemoveAirPlayVolumeNotificationListeners((uint64_t)a2);
      if (MX_FeatureFlags_IsBufferedBadgingAndCapabilitiesEnabled()) {
        FigRoutingManagerUtilities_UnRegisterAirPlayStreamCapabilitiesDidChangeListener(a1, a2);
      }
      CFTypeRef v19 = v33;
    }
    if (v19) {
      CFRelease(v19);
    }
  }
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  int v24 = *(void (**)(const void *, void))(v23 + 48);
  if (v24) {
    v24(a2, 0);
  }
  EndpointDeactivateOptions = FigRoutingManagerCreateEndpointDeactivateOptions((uint64_t)a2, (uint64_t)a3);
  uint64_t v26 = v34[0];
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *(uint64_t (**)(uint64_t, const void *, void, uint64_t, void *))(v28 + 16);
  if (!v29 || (uint64_t v30 = v29(a1, a2, 0, a6, v26), v30 == -12782))
  {
    FigRoutingManagerDestroyAggregateAddEndpointCompletionContext((const void **)v34[0]);
    uint64_t v30 = 4294954514;
  }
  if (EndpointDeactivateOptions) {
    CFRelease(EndpointDeactivateOptions);
  }
  return v30;
}